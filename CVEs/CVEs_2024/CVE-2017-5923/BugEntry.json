{"buggy_code": ["/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */\n\n/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */\n\n/* Identify Bison output.  */\n#define YYBISON 1\n\n/* Bison version.  */\n#define YYBISON_VERSION \"3.0.4\"\n\n/* Skeleton name.  */\n#define YYSKELETON_NAME \"yacc.c\"\n\n/* Pure parsers.  */\n#define YYPURE 1\n\n/* Push parsers.  */\n#define YYPUSH 0\n\n/* Pull parsers.  */\n#define YYPULL 1\n\n\n/* Substitute the variable and function names.  */\n#define yyparse         yara_yyparse\n#define yylex           yara_yylex\n#define yyerror         yara_yyerror\n#define yydebug         yara_yydebug\n#define yynerrs         yara_yynerrs\n\n\n/* Copy the first part of user declarations.  */\n#line 30 \"grammar.y\" /* yacc.c:339  */\n\n\n\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n#include <stddef.h>\n\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/strutils.h>\n#include <yara/compiler.h>\n#include <yara/object.h>\n#include <yara/sizedstr.h>\n#include <yara/exec.h>\n#include <yara/error.h>\n#include <yara/mem.h>\n#include <yara/lexer.h>\n#include <yara/parser.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define INTEGER_SET_ENUMERATION   1\n#define INTEGER_SET_RANGE         2\n\n#define ERROR_IF(x) \\\n    if (x) \\\n    { \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    } \\\n\n\n#define CHECK_TYPE(expression, expected_type, op) \\\n    if (((expression.type) & (expected_type)) == 0) \\\n    { \\\n      switch(expression.type) \\\n      { \\\n        case EXPRESSION_TYPE_INTEGER: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"integer\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_FLOAT: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"float\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_STRING: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"string\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_BOOLEAN: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"boolean\\\" for \" op \" operator\"); \\\n          break; \\\n      } \\\n      compiler->last_result = ERROR_WRONG_TYPE; \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    }\n\n#line 139 \"grammar.c\" /* yacc.c:339  */\n\n# ifndef YY_NULLPTR\n#  if defined __cplusplus && 201103L <= __cplusplus\n#   define YY_NULLPTR nullptr\n#  else\n#   define YY_NULLPTR 0\n#  endif\n# endif\n\n/* Enabling verbose error messages.  */\n#ifdef YYERROR_VERBOSE\n# undef YYERROR_VERBOSE\n# define YYERROR_VERBOSE 1\n#else\n# define YYERROR_VERBOSE 0\n#endif\n\n/* In a future release of Bison, this section will be replaced\n   by #include \"y.tab.h\".  */\n#ifndef YY_YARA_YY_GRAMMAR_H_INCLUDED\n# define YY_YARA_YY_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int yara_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _DOT_DOT_ = 258,\n    _RULE_ = 259,\n    _PRIVATE_ = 260,\n    _GLOBAL_ = 261,\n    _META_ = 262,\n    _STRINGS_ = 263,\n    _CONDITION_ = 264,\n    _IDENTIFIER_ = 265,\n    _STRING_IDENTIFIER_ = 266,\n    _STRING_COUNT_ = 267,\n    _STRING_OFFSET_ = 268,\n    _STRING_LENGTH_ = 269,\n    _STRING_IDENTIFIER_WITH_WILDCARD_ = 270,\n    _NUMBER_ = 271,\n    _DOUBLE_ = 272,\n    _INTEGER_FUNCTION_ = 273,\n    _TEXT_STRING_ = 274,\n    _HEX_STRING_ = 275,\n    _REGEXP_ = 276,\n    _ASCII_ = 277,\n    _WIDE_ = 278,\n    _NOCASE_ = 279,\n    _FULLWORD_ = 280,\n    _AT_ = 281,\n    _FILESIZE_ = 282,\n    _ENTRYPOINT_ = 283,\n    _ALL_ = 284,\n    _ANY_ = 285,\n    _IN_ = 286,\n    _OF_ = 287,\n    _FOR_ = 288,\n    _THEM_ = 289,\n    _MATCHES_ = 290,\n    _CONTAINS_ = 291,\n    _IMPORT_ = 292,\n    _TRUE_ = 293,\n    _FALSE_ = 294,\n    _OR_ = 295,\n    _AND_ = 296,\n    _EQ_ = 297,\n    _NEQ_ = 298,\n    _LT_ = 299,\n    _LE_ = 300,\n    _GT_ = 301,\n    _GE_ = 302,\n    _SHIFT_LEFT_ = 303,\n    _SHIFT_RIGHT_ = 304,\n    _NOT_ = 305,\n    UNARY_MINUS = 306\n  };\n#endif\n/* Tokens.  */\n#define _DOT_DOT_ 258\n#define _RULE_ 259\n#define _PRIVATE_ 260\n#define _GLOBAL_ 261\n#define _META_ 262\n#define _STRINGS_ 263\n#define _CONDITION_ 264\n#define _IDENTIFIER_ 265\n#define _STRING_IDENTIFIER_ 266\n#define _STRING_COUNT_ 267\n#define _STRING_OFFSET_ 268\n#define _STRING_LENGTH_ 269\n#define _STRING_IDENTIFIER_WITH_WILDCARD_ 270\n#define _NUMBER_ 271\n#define _DOUBLE_ 272\n#define _INTEGER_FUNCTION_ 273\n#define _TEXT_STRING_ 274\n#define _HEX_STRING_ 275\n#define _REGEXP_ 276\n#define _ASCII_ 277\n#define _WIDE_ 278\n#define _NOCASE_ 279\n#define _FULLWORD_ 280\n#define _AT_ 281\n#define _FILESIZE_ 282\n#define _ENTRYPOINT_ 283\n#define _ALL_ 284\n#define _ANY_ 285\n#define _IN_ 286\n#define _OF_ 287\n#define _FOR_ 288\n#define _THEM_ 289\n#define _MATCHES_ 290\n#define _CONTAINS_ 291\n#define _IMPORT_ 292\n#define _TRUE_ 293\n#define _FALSE_ 294\n#define _OR_ 295\n#define _AND_ 296\n#define _EQ_ 297\n#define _NEQ_ 298\n#define _LT_ 299\n#define _LE_ 300\n#define _GT_ 301\n#define _GE_ 302\n#define _SHIFT_LEFT_ 303\n#define _SHIFT_RIGHT_ 304\n#define _NOT_ 305\n#define UNARY_MINUS 306\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 204 \"grammar.y\" /* yacc.c:355  */\n\n  EXPRESSION      expression;\n  SIZED_STRING*   sized_string;\n  char*           c_string;\n  int64_t         integer;\n  double          double_;\n  YR_STRING*      string;\n  YR_META*        meta;\n  YR_RULE*        rule;\n\n#line 292 \"grammar.c\" /* yacc.c:355  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint yara_yyparse (void *yyscanner, YR_COMPILER* compiler);\n\n#endif /* !YY_YARA_YY_GRAMMAR_H_INCLUDED  */\n\n/* Copy the second part of user declarations.  */\n\n#line 308 \"grammar.c\" /* yacc.c:358  */\n\n#ifdef short\n# undef short\n#endif\n\n#ifdef YYTYPE_UINT8\ntypedef YYTYPE_UINT8 yytype_uint8;\n#else\ntypedef unsigned char yytype_uint8;\n#endif\n\n#ifdef YYTYPE_INT8\ntypedef YYTYPE_INT8 yytype_int8;\n#else\ntypedef signed char yytype_int8;\n#endif\n\n#ifdef YYTYPE_UINT16\ntypedef YYTYPE_UINT16 yytype_uint16;\n#else\ntypedef unsigned short int yytype_uint16;\n#endif\n\n#ifdef YYTYPE_INT16\ntypedef YYTYPE_INT16 yytype_int16;\n#else\ntypedef short int yytype_int16;\n#endif\n\n#ifndef YYSIZE_T\n# ifdef __SIZE_TYPE__\n#  define YYSIZE_T __SIZE_TYPE__\n# elif defined size_t\n#  define YYSIZE_T size_t\n# elif ! defined YYSIZE_T\n#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYSIZE_T size_t\n# else\n#  define YYSIZE_T unsigned int\n# endif\n#endif\n\n#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)\n\n#ifndef YY_\n# if defined YYENABLE_NLS && YYENABLE_NLS\n#  if ENABLE_NLS\n#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */\n#   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)\n#  endif\n# endif\n# ifndef YY_\n#  define YY_(Msgid) Msgid\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE\n# if (defined __GNUC__                                               \\\n      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\\n     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C\n#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)\n# else\n#  define YY_ATTRIBUTE(Spec) /* empty */\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE_PURE\n# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))\n#endif\n\n#ifndef YY_ATTRIBUTE_UNUSED\n# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))\n#endif\n\n#if !defined _Noreturn \\\n     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)\n# if defined _MSC_VER && 1200 <= _MSC_VER\n#  define _Noreturn __declspec (noreturn)\n# else\n#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))\n# endif\n#endif\n\n/* Suppress unused-variable warnings by \"using\" E.  */\n#if ! defined lint || defined __GNUC__\n# define YYUSE(E) ((void) (E))\n#else\n# define YYUSE(E) /* empty */\n#endif\n\n#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__\n/* Suppress an incorrect diagnostic about yylval being uninitialized.  */\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\\n    _Pragma (\"GCC diagnostic push\") \\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n    _Pragma (\"GCC diagnostic pop\")\n#else\n# define YY_INITIAL_VALUE(Value) Value\n#endif\n#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END\n#endif\n#ifndef YY_INITIAL_VALUE\n# define YY_INITIAL_VALUE(Value) /* Nothing. */\n#endif\n\n\n#if ! defined yyoverflow || YYERROR_VERBOSE\n\n/* The parser invokes alloca or malloc; define the necessary symbols.  */\n\n# ifdef YYSTACK_USE_ALLOCA\n#  if YYSTACK_USE_ALLOCA\n#   ifdef __GNUC__\n#    define YYSTACK_ALLOC __builtin_alloca\n#   elif defined __BUILTIN_VA_ARG_INCR\n#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */\n#   elif defined _AIX\n#    define YYSTACK_ALLOC __alloca\n#   elif defined _MSC_VER\n#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */\n#    define alloca _alloca\n#   else\n#    define YYSTACK_ALLOC alloca\n#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS\n#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */\n#     ifndef EXIT_SUCCESS\n#      define EXIT_SUCCESS 0\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n# ifdef YYSTACK_ALLOC\n   /* Pacify GCC's 'empty if-body' warning.  */\n#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n    /* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */\n#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */\n#  endif\n# else\n#  define YYSTACK_ALLOC YYMALLOC\n#  define YYSTACK_FREE YYFREE\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM\n#  endif\n#  if (defined __cplusplus && ! defined EXIT_SUCCESS \\\n       && ! ((defined YYMALLOC || defined malloc) \\\n             && (defined YYFREE || defined free)))\n#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n#   ifndef EXIT_SUCCESS\n#    define EXIT_SUCCESS 0\n#   endif\n#  endif\n#  ifndef YYMALLOC\n#   define YYMALLOC malloc\n#   if ! defined malloc && ! defined EXIT_SUCCESS\nvoid *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n#  ifndef YYFREE\n#   define YYFREE free\n#   if ! defined free && ! defined EXIT_SUCCESS\nvoid free (void *); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n# endif\n#endif /* ! defined yyoverflow || YYERROR_VERBOSE */\n\n\n#if (! defined yyoverflow \\\n     && (! defined __cplusplus \\\n         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))\n\n/* A type that is properly aligned for any stack member.  */\nunion yyalloc\n{\n  yytype_int16 yyss_alloc;\n  YYSTYPE yyvs_alloc;\n};\n\n/* The size of the maximum gap between one aligned stack and the next.  */\n# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)\n\n/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */\n# define YYSTACK_BYTES(N) \\\n     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\\n      + YYSTACK_GAP_MAXIMUM)\n\n# define YYCOPY_NEEDED 1\n\n/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */\n# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\\n    do                                                                  \\\n      {                                                                 \\\n        YYSIZE_T yynewbytes;                                            \\\n        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\\n        Stack = &yyptr->Stack_alloc;                                    \\\n        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\\n        yyptr += yynewbytes / sizeof (*yyptr);                          \\\n      }                                                                 \\\n    while (0)\n\n#endif\n\n#if defined YYCOPY_NEEDED && YYCOPY_NEEDED\n/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */\n# ifndef YYCOPY\n#  if defined __GNUC__ && 1 < __GNUC__\n#   define YYCOPY(Dst, Src, Count) \\\n      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))\n#  else\n#   define YYCOPY(Dst, Src, Count)              \\\n      do                                        \\\n        {                                       \\\n          YYSIZE_T yyi;                         \\\n          for (yyi = 0; yyi < (Count); yyi++)   \\\n            (Dst)[yyi] = (Src)[yyi];            \\\n        }                                       \\\n      while (0)\n#  endif\n# endif\n#endif /* !YYCOPY_NEEDED */\n\n/* YYFINAL -- State number of the termination state.  */\n#define YYFINAL  2\n/* YYLAST -- Last index in YYTABLE.  */\n#define YYLAST   406\n\n/* YYNTOKENS -- Number of terminals.  */\n#define YYNTOKENS  72\n/* YYNNTS -- Number of nonterminals.  */\n#define YYNNTS  41\n/* YYNRULES -- Number of rules.  */\n#define YYNRULES  122\n/* YYNSTATES -- Number of states.  */\n#define YYNSTATES  210\n\n/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */\n#define YYUNDEFTOK  2\n#define YYMAXUTOK   307\n\n#define YYTRANSLATE(YYX)                                                \\\n  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)\n\n/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */\nstatic const yytype_uint8 yytranslate[] =\n{\n       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,    57,    44,     2,\n      69,    70,    55,    53,    71,    54,    66,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,    64,     2,\n       2,    65,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,    67,    56,    68,    43,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,    62,    42,    63,    59,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,\n       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,\n      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,\n      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,\n      35,    36,    37,    38,    39,    40,    41,    45,    46,    47,\n      48,    49,    50,    51,    52,    58,    60,    61\n};\n\n#if YYDEBUG\n  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\nstatic const yytype_uint16 yyrline[] =\n{\n       0,   218,   218,   220,   221,   222,   223,   224,   229,   242,\n     251,   241,   274,   277,   305,   308,   335,   340,   341,   346,\n     347,   353,   356,   374,   387,   424,   425,   430,   446,   459,\n     472,   485,   502,   503,   509,   508,   524,   523,   539,   553,\n     554,   559,   560,   561,   562,   567,   652,   698,   756,   801,\n     802,   806,   831,   867,   913,   935,   944,   953,   968,   980,\n     994,  1007,  1018,  1027,  1057,  1026,  1171,  1170,  1249,  1255,\n    1262,  1261,  1324,  1323,  1384,  1393,  1402,  1411,  1420,  1429,\n    1438,  1442,  1450,  1451,  1456,  1478,  1490,  1506,  1505,  1511,\n    1522,  1523,  1528,  1535,  1546,  1547,  1551,  1559,  1563,  1573,\n    1587,  1603,  1613,  1622,  1647,  1659,  1671,  1687,  1699,  1715,\n    1760,  1779,  1797,  1815,  1833,  1859,  1877,  1887,  1897,  1907,\n    1917,  1927,  1937\n};\n#endif\n\n#if YYDEBUG || YYERROR_VERBOSE || 0\n/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */\nstatic const char *const yytname[] =\n{\n  \"$end\", \"error\", \"$undefined\", \"_DOT_DOT_\", \"_RULE_\", \"_PRIVATE_\",\n  \"_GLOBAL_\", \"_META_\", \"_STRINGS_\", \"_CONDITION_\", \"_IDENTIFIER_\",\n  \"_STRING_IDENTIFIER_\", \"_STRING_COUNT_\", \"_STRING_OFFSET_\",\n  \"_STRING_LENGTH_\", \"_STRING_IDENTIFIER_WITH_WILDCARD_\", \"_NUMBER_\",\n  \"_DOUBLE_\", \"_INTEGER_FUNCTION_\", \"_TEXT_STRING_\", \"_HEX_STRING_\",\n  \"_REGEXP_\", \"_ASCII_\", \"_WIDE_\", \"_NOCASE_\", \"_FULLWORD_\", \"_AT_\",\n  \"_FILESIZE_\", \"_ENTRYPOINT_\", \"_ALL_\", \"_ANY_\", \"_IN_\", \"_OF_\", \"_FOR_\",\n  \"_THEM_\", \"_MATCHES_\", \"_CONTAINS_\", \"_IMPORT_\", \"_TRUE_\", \"_FALSE_\",\n  \"_OR_\", \"_AND_\", \"'|'\", \"'^'\", \"'&'\", \"_EQ_\", \"_NEQ_\", \"_LT_\", \"_LE_\",\n  \"_GT_\", \"_GE_\", \"_SHIFT_LEFT_\", \"_SHIFT_RIGHT_\", \"'+'\", \"'-'\", \"'*'\",\n  \"'\\\\\\\\'\", \"'%'\", \"_NOT_\", \"'~'\", \"UNARY_MINUS\", \"\\\"include\\\"\", \"'{'\",\n  \"'}'\", \"':'\", \"'='\", \"'.'\", \"'['\", \"']'\", \"'('\", \"')'\", \"','\", \"$accept\",\n  \"rules\", \"import\", \"rule\", \"@1\", \"$@2\", \"meta\", \"strings\", \"condition\",\n  \"rule_modifiers\", \"rule_modifier\", \"tags\", \"tag_list\",\n  \"meta_declarations\", \"meta_declaration\", \"string_declarations\",\n  \"string_declaration\", \"$@3\", \"$@4\", \"string_modifiers\",\n  \"string_modifier\", \"identifier\", \"arguments\", \"arguments_list\", \"regexp\",\n  \"boolean_expression\", \"expression\", \"$@5\", \"$@6\", \"$@7\", \"$@8\", \"$@9\",\n  \"integer_set\", \"range\", \"integer_enumeration\", \"string_set\", \"$@10\",\n  \"string_enumeration\", \"string_enumeration_item\", \"for_expression\",\n  \"primary_expression\", YY_NULLPTR\n};\n#endif\n\n# ifdef YYPRINT\n/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */\nstatic const yytype_uint16 yytoknum[] =\n{\n       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,\n     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,\n     295,   296,   124,    94,    38,   297,   298,   299,   300,   301,\n     302,   303,   304,    43,    45,    42,    92,    37,   305,   126,\n     306,   307,   123,   125,    58,    61,    46,    91,    93,    40,\n      41,    44\n};\n# endif\n\n#define YYPACT_NINF -73\n\n#define yypact_value_is_default(Yystate) \\\n  (!!((Yystate) == (-73)))\n\n#define YYTABLE_NINF -95\n\n#define yytable_value_is_error(Yytable_value) \\\n  0\n\n  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */\nstatic const yytype_int16 yypact[] =\n{\n     -73,    90,   -73,   -32,   -10,   -73,   -73,    93,   -73,   -73,\n     -73,   -73,     1,   -73,   -73,   -73,   -73,   -49,     7,   -36,\n     -73,    20,    26,   -73,   -28,    92,    46,     4,   -73,    40,\n      46,   -73,   100,   119,    16,   -73,    72,   100,   -73,    77,\n      83,   -73,   -73,   -73,   -73,   134,    59,   -73,    48,   -73,\n     -73,   -73,   133,   136,   -73,   -18,   -73,    88,    95,   -73,\n     -73,    91,   -73,   -73,   -73,   -73,   -73,   -73,   102,   -73,\n     -73,   126,    48,   126,    48,   -44,   -73,    85,   -73,   127,\n     297,   -73,   -73,   126,   110,   126,   126,   126,   126,     2,\n     313,   -73,   -73,   -73,    85,   111,   154,   172,   126,    48,\n     -73,   -73,    -6,   162,   126,   126,   126,   126,   126,   126,\n     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,\n     126,    60,    60,   313,   126,   -73,   234,   252,   174,   194,\n     -73,   153,    -6,   -73,   -73,   -73,   270,   117,   120,   108,\n      48,    48,   -73,   -73,   -73,   -73,   313,   328,   342,   349,\n     313,   313,   313,   313,   313,   313,   113,   113,    53,    53,\n     -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   121,   -73,\n     -73,   -73,   -73,   124,   -73,   -73,    48,   151,   -73,    -1,\n     126,   125,   -73,   108,   -73,   -73,    18,   -73,   214,   126,\n     129,   -73,   143,   -73,    -1,   -73,    63,   121,   -73,    48,\n     -73,   -73,   126,   144,    31,   313,    48,   -73,    33,   -73\n};\n\n  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */\nstatic const yytype_uint8 yydefact[] =\n{\n       2,     0,     1,    17,     0,     4,     3,     0,     7,     6,\n       5,     8,     0,    19,    20,    18,     9,    21,     0,     0,\n      23,    22,    12,    24,     0,    14,     0,     0,    10,     0,\n      13,    25,     0,     0,     0,    26,     0,    15,    32,     0,\n       0,    28,    27,    30,    31,     0,    34,    33,     0,    11,\n      29,    38,     0,     0,    45,    59,   104,   106,   108,   101,\n     102,     0,   103,    53,    98,    99,    95,    96,     0,    55,\n      56,     0,     0,     0,     0,   109,   122,    16,    54,     0,\n      80,    39,    39,     0,     0,     0,     0,     0,     0,     0,\n      94,   110,    69,   119,     0,    54,    80,     0,     0,    49,\n      72,    70,     0,     0,     0,     0,     0,     0,     0,     0,\n       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n       0,    35,    37,    60,     0,    61,     0,     0,     0,     0,\n      62,     0,     0,    81,    97,    46,     0,     0,    50,    51,\n       0,     0,    89,    87,    68,    57,    58,   118,   116,   117,\n      78,    79,    74,    76,    75,    77,   120,   121,   111,   112,\n     113,   114,   115,    42,    41,    43,    44,    40,     0,   105,\n     107,   100,    63,     0,    47,    48,     0,    73,    71,     0,\n       0,     0,    66,    52,    92,    93,     0,    90,     0,     0,\n       0,    83,     0,    88,     0,    84,     0,    85,    64,     0,\n      91,    82,     0,     0,     0,    86,     0,    67,     0,    65\n};\n\n  /* YYPGOTO[NTERM-NUM].  */\nstatic const yytype_int16 yypgoto[] =\n{\n     -73,   -73,   211,   212,   -73,   -73,   -73,   -73,   -73,   -73,\n     -73,   -73,   -73,   -73,   189,   -73,   183,   -73,   -73,   139,\n     -73,   -73,   -73,   -73,   130,   -48,   -72,   -73,   -73,   -73,\n     -73,   -73,   -73,    41,   -73,   103,   -73,   -73,    29,   164,\n     -67\n};\n\n  /* YYDEFGOTO[NTERM-NUM].  */\nstatic const yytype_int16 yydefgoto[] =\n{\n      -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,\n      15,    19,    21,    30,    31,    37,    38,    52,    53,   121,\n     167,    75,   137,   138,    76,    94,    78,   181,   203,   192,\n     141,   140,   190,   125,   196,   144,   179,   186,   187,    79,\n      80\n};\n\n  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */\nstatic const yytype_int16 yytable[] =\n{\n      77,    90,    95,   130,    91,     4,    93,    96,    83,    11,\n     184,    16,   131,    84,   185,    18,   123,    20,   126,   127,\n     128,   129,    97,    98,    92,    99,    22,   139,   142,     8,\n      23,   136,    41,    24,   132,    42,    26,   146,   147,   148,\n     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,\n     159,   160,   161,   162,    43,    44,    29,   168,    54,    55,\n      56,    57,    58,   143,    59,    60,    61,    62,    32,    63,\n      45,   100,   101,   100,   101,    64,    65,    66,    67,    51,\n     -36,    68,   163,   164,   165,   166,    69,    70,   193,   194,\n       2,     3,   177,   178,   -17,   -17,   -17,    12,    13,    14,\n      27,   207,    71,   209,   183,    34,    72,    73,   118,   119,\n     120,    36,    54,   188,    56,    57,    58,    74,    59,    60,\n      61,    62,   197,    63,   180,   100,   101,     4,    39,    64,\n      65,    66,    67,   201,   202,   205,    54,    46,    56,    57,\n      58,    48,    59,    60,    61,    62,    49,    63,   -54,   -54,\n      50,   204,    81,    64,    65,    85,    71,    82,   208,   102,\n      87,    73,    86,   105,   106,   107,   116,   117,   118,   119,\n     120,    88,   114,   115,   116,   117,   118,   119,   120,   124,\n      71,   133,   135,    63,   172,    73,   -94,   175,   182,   103,\n     104,   176,   101,   198,   189,    88,   105,   106,   107,   108,\n     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,\n     119,   120,   199,   206,     9,    10,   105,   106,   107,    35,\n      47,   122,   191,   200,   134,   114,   115,   116,   117,   118,\n     119,   120,    89,   145,     0,   173,   105,   106,   107,     0,\n       0,     0,     0,     0,   171,   114,   115,   116,   117,   118,\n     119,   120,     0,     0,     0,     0,   105,   106,   107,     0,\n       0,     0,     0,     0,   134,   114,   115,   116,   117,   118,\n     119,   120,     0,     0,     0,     0,   105,   106,   107,     0,\n       0,     0,     0,     0,   195,   114,   115,   116,   117,   118,\n     119,   120,     0,     0,   105,   106,   107,     0,     0,     0,\n       0,     0,   169,   114,   115,   116,   117,   118,   119,   120,\n       0,     0,   105,   106,   107,     0,     0,     0,     0,     0,\n     170,   114,   115,   116,   117,   118,   119,   120,     0,   -94,\n       0,     0,   103,   104,     0,     0,     0,     0,   174,   105,\n     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,\n     116,   117,   118,   119,   120,   105,   106,   107,     0,     0,\n       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,\n     120,   106,   107,     0,     0,     0,     0,     0,     0,   114,\n     115,   116,   117,   118,   119,   120,   107,     0,     0,     0,\n       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,\n     114,   115,   116,   117,   118,   119,   120\n};\n\nstatic const yytype_int16 yycheck[] =\n{\n      48,    68,    74,     1,    71,    37,    73,    74,    26,    19,\n      11,    10,    10,    31,    15,    64,    83,    10,    85,    86,\n      87,    88,    66,    67,    72,    69,    62,    99,    34,    61,\n      10,    98,    16,     7,    32,    19,    64,   104,   105,   106,\n     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,\n     117,   118,   119,   120,    38,    39,    10,   124,    10,    11,\n      12,    13,    14,    69,    16,    17,    18,    19,    64,    21,\n      54,    40,    41,    40,    41,    27,    28,    29,    30,    20,\n      21,    33,    22,    23,    24,    25,    38,    39,    70,    71,\n       0,     1,   140,   141,     4,     5,     6,     4,     5,     6,\n       8,    70,    54,    70,   176,    65,    58,    59,    55,    56,\n      57,    11,    10,   180,    12,    13,    14,    69,    16,    17,\n      18,    19,   189,    21,     3,    40,    41,    37,     9,    27,\n      28,    29,    30,    70,    71,   202,    10,    65,    12,    13,\n      14,    64,    16,    17,    18,    19,    63,    21,    40,    41,\n      16,   199,    19,    27,    28,    67,    54,    21,   206,    32,\n      69,    59,    67,    42,    43,    44,    53,    54,    55,    56,\n      57,    69,    51,    52,    53,    54,    55,    56,    57,    69,\n      54,    70,    10,    21,    31,    59,    32,    70,    64,    35,\n      36,    71,    41,    64,    69,    69,    42,    43,    44,    45,\n      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n      56,    57,    69,    69,     3,     3,    42,    43,    44,    30,\n      37,    82,   181,   194,    70,    51,    52,    53,    54,    55,\n      56,    57,    68,   103,    -1,   132,    42,    43,    44,    -1,\n      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,\n      56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,\n      56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,\n      56,    57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,\n      -1,    -1,    68,    51,    52,    53,    54,    55,    56,    57,\n      -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,\n      68,    51,    52,    53,    54,    55,    56,    57,    -1,    32,\n      -1,    -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,\n      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,\n      53,    54,    55,    56,    57,    42,    43,    44,    -1,    -1,\n      -1,    -1,    -1,    -1,    51,    52,    53,    54,    55,    56,\n      57,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,\n      52,    53,    54,    55,    56,    57,    44,    -1,    -1,    -1,\n      -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57,\n      51,    52,    53,    54,    55,    56,    57\n};\n\n  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */\nstatic const yytype_uint8 yystos[] =\n{\n       0,    73,     0,     1,    37,    74,    75,    81,    61,    74,\n      75,    19,     4,     5,     6,    82,    10,    76,    64,    83,\n      10,    84,    62,    10,     7,    78,    64,     8,    79,    10,\n      85,    86,    64,    77,    65,    86,    11,    87,    88,     9,\n      80,    16,    19,    38,    39,    54,    65,    88,    64,    63,\n      16,    20,    89,    90,    10,    11,    12,    13,    14,    16,\n      17,    18,    19,    21,    27,    28,    29,    30,    33,    38,\n      39,    54,    58,    59,    69,    93,    96,    97,    98,   111,\n     112,    19,    21,    26,    31,    67,    67,    69,    69,   111,\n     112,   112,    97,   112,    97,    98,   112,    66,    67,    69,\n      40,    41,    32,    35,    36,    42,    43,    44,    45,    46,\n      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n      57,    91,    91,   112,    69,   105,   112,   112,   112,   112,\n       1,    10,    32,    70,    70,    10,   112,    94,    95,    98,\n     103,   102,    34,    69,   107,    96,   112,   112,   112,   112,\n     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,\n     112,   112,   112,    22,    23,    24,    25,    92,   112,    68,\n      68,    70,    31,   107,    68,    70,    71,    97,    97,   108,\n       3,    99,    64,    98,    11,    15,   109,   110,   112,    69,\n     104,   105,   101,    70,    71,    70,   106,   112,    64,    69,\n     110,    70,    71,   100,    97,   112,    69,    70,    97,    70\n};\n\n  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */\nstatic const yytype_uint8 yyr1[] =\n{\n       0,    72,    73,    73,    73,    73,    73,    73,    74,    76,\n      77,    75,    78,    78,    79,    79,    80,    81,    81,    82,\n      82,    83,    83,    84,    84,    85,    85,    86,    86,    86,\n      86,    86,    87,    87,    89,    88,    90,    88,    88,    91,\n      91,    92,    92,    92,    92,    93,    93,    93,    93,    94,\n      94,    95,    95,    96,    97,    98,    98,    98,    98,    98,\n      98,    98,    98,    99,   100,    98,   101,    98,    98,    98,\n     102,    98,   103,    98,    98,    98,    98,    98,    98,    98,\n      98,    98,   104,   104,   105,   106,   106,   108,   107,   107,\n     109,   109,   110,   110,   111,   111,   111,   112,   112,   112,\n     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,\n     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,\n     112,   112,   112\n};\n\n  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */\nstatic const yytype_uint8 yyr2[] =\n{\n       0,     2,     0,     2,     2,     3,     3,     3,     2,     0,\n       0,    11,     0,     3,     0,     3,     3,     0,     2,     1,\n       1,     0,     2,     1,     2,     1,     2,     3,     3,     4,\n       3,     3,     1,     2,     0,     5,     0,     5,     3,     0,\n       2,     1,     1,     1,     1,     1,     3,     4,     4,     0,\n       1,     1,     3,     1,     1,     1,     1,     3,     3,     1,\n       3,     3,     3,     0,     0,    11,     0,     9,     3,     2,\n       0,     4,     0,     4,     3,     3,     3,     3,     3,     3,\n       1,     3,     3,     1,     5,     1,     3,     0,     4,     1,\n       1,     3,     1,     1,     1,     1,     1,     3,     1,     1,\n       4,     1,     1,     1,     1,     4,     1,     4,     1,     1,\n       2,     3,     3,     3,     3,     3,     3,     3,     3,     2,\n       3,     3,     1\n};\n\n\n#define yyerrok         (yyerrstatus = 0)\n#define yyclearin       (yychar = YYEMPTY)\n#define YYEMPTY         (-2)\n#define YYEOF           0\n\n#define YYACCEPT        goto yyacceptlab\n#define YYABORT         goto yyabortlab\n#define YYERROR         goto yyerrorlab\n\n\n#define YYRECOVERING()  (!!yyerrstatus)\n\n#define YYBACKUP(Token, Value)                                  \\\ndo                                                              \\\n  if (yychar == YYEMPTY)                                        \\\n    {                                                           \\\n      yychar = (Token);                                         \\\n      yylval = (Value);                                         \\\n      YYPOPSTACK (yylen);                                       \\\n      yystate = *yyssp;                                         \\\n      goto yybackup;                                            \\\n    }                                                           \\\n  else                                                          \\\n    {                                                           \\\n      yyerror (yyscanner, compiler, YY_(\"syntax error: cannot back up\")); \\\n      YYERROR;                                                  \\\n    }                                                           \\\nwhile (0)\n\n/* Error token number */\n#define YYTERROR        1\n#define YYERRCODE       256\n\n\n\n/* Enable debugging if requested.  */\n#if YYDEBUG\n\n# ifndef YYFPRINTF\n#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYFPRINTF fprintf\n# endif\n\n# define YYDPRINTF(Args)                        \\\ndo {                                            \\\n  if (yydebug)                                  \\\n    YYFPRINTF Args;                             \\\n} while (0)\n\n/* This macro is provided for backward compatibility. */\n#ifndef YY_LOCATION_PRINT\n# define YY_LOCATION_PRINT(File, Loc) ((void) 0)\n#endif\n\n\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\\ndo {                                                                      \\\n  if (yydebug)                                                            \\\n    {                                                                     \\\n      YYFPRINTF (stderr, \"%s \", Title);                                   \\\n      yy_symbol_print (stderr,                                            \\\n                  Type, Value, yyscanner, compiler); \\\n      YYFPRINTF (stderr, \"\\n\");                                           \\\n    }                                                                     \\\n} while (0)\n\n\n/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/\n\nstatic void\nyy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)\n{\n  FILE *yyo = yyoutput;\n  YYUSE (yyo);\n  YYUSE (yyscanner);\n  YYUSE (compiler);\n  if (!yyvaluep)\n    return;\n# ifdef YYPRINT\n  if (yytype < YYNTOKENS)\n    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);\n# endif\n  YYUSE (yytype);\n}\n\n\n/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/\n\nstatic void\nyy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)\n{\n  YYFPRINTF (yyoutput, \"%s %s (\",\n             yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);\n\n  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, compiler);\n  YYFPRINTF (yyoutput, \")\");\n}\n\n/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/\n\nstatic void\nyy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)\n{\n  YYFPRINTF (stderr, \"Stack now\");\n  for (; yybottom <= yytop; yybottom++)\n    {\n      int yybot = *yybottom;\n      YYFPRINTF (stderr, \" %d\", yybot);\n    }\n  YYFPRINTF (stderr, \"\\n\");\n}\n\n# define YY_STACK_PRINT(Bottom, Top)                            \\\ndo {                                                            \\\n  if (yydebug)                                                  \\\n    yy_stack_print ((Bottom), (Top));                           \\\n} while (0)\n\n\n/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/\n\nstatic void\nyy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, YR_COMPILER* compiler)\n{\n  unsigned long int yylno = yyrline[yyrule];\n  int yynrhs = yyr2[yyrule];\n  int yyi;\n  YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n             yyrule - 1, yylno);\n  /* The symbols being reduced.  */\n  for (yyi = 0; yyi < yynrhs; yyi++)\n    {\n      YYFPRINTF (stderr, \"   $%d = \", yyi + 1);\n      yy_symbol_print (stderr,\n                       yystos[yyssp[yyi + 1 - yynrhs]],\n                       &(yyvsp[(yyi + 1) - (yynrhs)])\n                                              , yyscanner, compiler);\n      YYFPRINTF (stderr, \"\\n\");\n    }\n}\n\n# define YY_REDUCE_PRINT(Rule)          \\\ndo {                                    \\\n  if (yydebug)                          \\\n    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, compiler); \\\n} while (0)\n\n/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */\nint yydebug;\n#else /* !YYDEBUG */\n# define YYDPRINTF(Args)\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)\n# define YY_STACK_PRINT(Bottom, Top)\n# define YY_REDUCE_PRINT(Rule)\n#endif /* !YYDEBUG */\n\n\n/* YYINITDEPTH -- initial size of the parser's stacks.  */\n#ifndef YYINITDEPTH\n# define YYINITDEPTH 200\n#endif\n\n/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */\n\n#ifndef YYMAXDEPTH\n# define YYMAXDEPTH 10000\n#endif\n\n\n#if YYERROR_VERBOSE\n\n# ifndef yystrlen\n#  if defined __GLIBC__ && defined _STRING_H\n#   define yystrlen strlen\n#  else\n/* Return the length of YYSTR.  */\nstatic YYSIZE_T\nyystrlen (const char *yystr)\n{\n  YYSIZE_T yylen;\n  for (yylen = 0; yystr[yylen]; yylen++)\n    continue;\n  return yylen;\n}\n#  endif\n# endif\n\n# ifndef yystpcpy\n#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE\n#   define yystpcpy stpcpy\n#  else\n/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */\nstatic char *\nyystpcpy (char *yydest, const char *yysrc)\n{\n  char *yyd = yydest;\n  const char *yys = yysrc;\n\n  while ((*yyd++ = *yys++) != '\\0')\n    continue;\n\n  return yyd - 1;\n}\n#  endif\n# endif\n\n# ifndef yytnamerr\n/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */\nstatic YYSIZE_T\nyytnamerr (char *yyres, const char *yystr)\n{\n  if (*yystr == '\"')\n    {\n      YYSIZE_T yyn = 0;\n      char const *yyp = yystr;\n\n      for (;;)\n        switch (*++yyp)\n          {\n          case '\\'':\n          case ',':\n            goto do_not_strip_quotes;\n\n          case '\\\\':\n            if (*++yyp != '\\\\')\n              goto do_not_strip_quotes;\n            /* Fall through.  */\n          default:\n            if (yyres)\n              yyres[yyn] = *yyp;\n            yyn++;\n            break;\n\n          case '\"':\n            if (yyres)\n              yyres[yyn] = '\\0';\n            return yyn;\n          }\n    do_not_strip_quotes: ;\n    }\n\n  if (! yyres)\n    return yystrlen (yystr);\n\n  return yystpcpy (yyres, yystr) - yyres;\n}\n# endif\n\n/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */\nstatic int\nyysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,\n                yytype_int16 *yyssp, int yytoken)\n{\n  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);\n  YYSIZE_T yysize = yysize0;\n  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };\n  /* Internationalized format string. */\n  const char *yyformat = YY_NULLPTR;\n  /* Arguments of yyformat. */\n  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];\n  /* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */\n  int yycount = 0;\n\n  /* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */\n  if (yytoken != YYEMPTY)\n    {\n      int yyn = yypact[*yyssp];\n      yyarg[yycount++] = yytname[yytoken];\n      if (!yypact_value_is_default (yyn))\n        {\n          /* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */\n          int yyxbegin = yyn < 0 ? -yyn : 0;\n          /* Stay within bounds of both yycheck and yytname.  */\n          int yychecklim = YYLAST - yyn + 1;\n          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;\n          int yyx;\n\n          for (yyx = yyxbegin; yyx < yyxend; ++yyx)\n            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR\n                && !yytable_value_is_error (yytable[yyx + yyn]))\n              {\n                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)\n                  {\n                    yycount = 1;\n                    yysize = yysize0;\n                    break;\n                  }\n                yyarg[yycount++] = yytname[yyx];\n                {\n                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);\n                  if (! (yysize <= yysize1\n                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n                    return 2;\n                  yysize = yysize1;\n                }\n              }\n        }\n    }\n\n  switch (yycount)\n    {\n# define YYCASE_(N, S)                      \\\n      case N:                               \\\n        yyformat = S;                       \\\n      break\n      YYCASE_(0, YY_(\"syntax error\"));\n      YYCASE_(1, YY_(\"syntax error, unexpected %s\"));\n      YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));\n      YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));\n      YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));\n      YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));\n# undef YYCASE_\n    }\n\n  {\n    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);\n    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n      return 2;\n    yysize = yysize1;\n  }\n\n  if (*yymsg_alloc < yysize)\n    {\n      *yymsg_alloc = 2 * yysize;\n      if (! (yysize <= *yymsg_alloc\n             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))\n        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;\n      return 1;\n    }\n\n  /* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */\n  {\n    char *yyp = *yymsg;\n    int yyi = 0;\n    while ((*yyp = *yyformat) != '\\0')\n      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)\n        {\n          yyp += yytnamerr (yyp, yyarg[yyi++]);\n          yyformat += 2;\n        }\n      else\n        {\n          yyp++;\n          yyformat++;\n        }\n  }\n  return 0;\n}\n#endif /* YYERROR_VERBOSE */\n\n/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/\n\nstatic void\nyydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, YR_COMPILER* compiler)\n{\n  YYUSE (yyvaluep);\n  YYUSE (yyscanner);\n  YYUSE (compiler);\n  if (!yymsg)\n    yymsg = \"Deleting\";\n  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  switch (yytype)\n    {\n          case 10: /* _IDENTIFIER_  */\n#line 194 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1339 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 11: /* _STRING_IDENTIFIER_  */\n#line 198 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1345 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 12: /* _STRING_COUNT_  */\n#line 195 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1351 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 13: /* _STRING_OFFSET_  */\n#line 196 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1357 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 14: /* _STRING_LENGTH_  */\n#line 197 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1363 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 15: /* _STRING_IDENTIFIER_WITH_WILDCARD_  */\n#line 199 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1369 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 19: /* _TEXT_STRING_  */\n#line 200 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).sized_string)); }\n#line 1375 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 20: /* _HEX_STRING_  */\n#line 201 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).sized_string)); }\n#line 1381 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 21: /* _REGEXP_  */\n#line 202 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).sized_string)); }\n#line 1387 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n\n      default:\n        break;\n    }\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n}\n\n\n\n\n/*----------.\n| yyparse.  |\n`----------*/\n\nint\nyyparse (void *yyscanner, YR_COMPILER* compiler)\n{\n/* The lookahead symbol.  */\nint yychar;\n\n\n/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */\nYY_INITIAL_VALUE (static YYSTYPE yyval_default;)\nYYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n\n    /* Number of syntax errors so far.  */\n    int yynerrs;\n\n    int yystate;\n    /* Number of tokens to shift before error messages enabled.  */\n    int yyerrstatus;\n\n    /* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */\n\n    /* The state stack.  */\n    yytype_int16 yyssa[YYINITDEPTH];\n    yytype_int16 *yyss;\n    yytype_int16 *yyssp;\n\n    /* The semantic value stack.  */\n    YYSTYPE yyvsa[YYINITDEPTH];\n    YYSTYPE *yyvs;\n    YYSTYPE *yyvsp;\n\n    YYSIZE_T yystacksize;\n\n  int yyn;\n  int yyresult;\n  /* Lookahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  yyssp = yyss = yyssa;\n  yyvsp = yyvs = yyvsa;\n  yystacksize = YYINITDEPTH;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY; /* Cause a token to be read.  */\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n        /* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */\n        YYSTYPE *yyvs1 = yyvs;\n        yytype_int16 *yyss1 = yyss;\n\n        /* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */\n        yyoverflow (YY_(\"memory exhausted\"),\n                    &yyss1, yysize * sizeof (*yyssp),\n                    &yyvs1, yysize * sizeof (*yyvsp),\n                    &yystacksize);\n\n        yyss = yyss1;\n        yyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n        goto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n        yystacksize = YYMAXDEPTH;\n\n      {\n        yytype_int16 *yyss1 = yyss;\n        union yyalloc *yyptr =\n          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n        if (! yyptr)\n          goto yyexhaustedlab;\n        YYSTACK_RELOCATE (yyss_alloc, yyss);\n        YYSTACK_RELOCATE (yyvs_alloc, yyvs);\n#  undef YYSTACK_RELOCATE\n        if (yyss1 != yyssa)\n          YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n                  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n        YYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  if (yystate == YYFINAL)\n    YYACCEPT;\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to lookahead token.  */\n  yyn = yypact[yystate];\n  if (yypact_value_is_default (yyn))\n    goto yydefault;\n\n  /* Not known => get a lookahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = yylex (&yylval, yyscanner, compiler);\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yytable_value_is_error (yyn))\n        goto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the lookahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token.  */\n  yychar = YYEMPTY;\n\n  yystate = yyn;\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 8:\n#line 230 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int result = yr_parser_reduce_import(yyscanner, (yyvsp[0].sized_string));\n\n        yr_free((yyvsp[0].sized_string));\n\n        ERROR_IF(result != ERROR_SUCCESS);\n      }\n#line 1661 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 9:\n#line 242 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(\n            yyscanner, (int32_t) (yyvsp[-2].integer), (yyvsp[0].c_string));\n\n        ERROR_IF(rule == NULL);\n\n        (yyval.rule) = rule;\n      }\n#line 1674 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 10:\n#line 251 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_RULE* rule = (yyvsp[-4].rule); // rule created in phase 1\n\n        rule->tags = (yyvsp[-3].c_string);\n        rule->metas = (yyvsp[-1].meta);\n        rule->strings = (yyvsp[0].string);\n      }\n#line 1686 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 11:\n#line 259 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_RULE* rule = (yyvsp[-7].rule); // rule created in phase 1\n\n        compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(\n            yyscanner, rule);\n\n        yr_free((yyvsp[-8].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 1701 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 12:\n#line 274 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = NULL;\n      }\n#line 1709 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 13:\n#line 278 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Each rule have a list of meta-data info, consisting in a\n        // sequence of YR_META structures. The last YR_META structure does\n        // not represent a real meta-data, it's just a end-of-list marker\n        // identified by a specific type (META_TYPE_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_META null_meta;\n\n        memset(&null_meta, 0xFF, sizeof(YR_META));\n        null_meta.type = META_TYPE_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->metas_arena,\n            &null_meta,\n            sizeof(YR_META),\n            NULL);\n\n        (yyval.meta) = (yyvsp[0].meta);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 1736 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 14:\n#line 305 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = NULL;\n      }\n#line 1744 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 15:\n#line 309 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Each rule have a list of strings, consisting in a sequence\n        // of YR_STRING structures. The last YR_STRING structure does not\n        // represent a real string, it's just a end-of-list marker\n        // identified by a specific flag (STRING_FLAGS_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_STRING null_string;\n\n        memset(&null_string, 0xFF, sizeof(YR_STRING));\n        null_string.g_flags = STRING_GFLAGS_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->strings_arena,\n            &null_string,\n            sizeof(YR_STRING),\n            NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.string) = (yyvsp[0].string);\n      }\n#line 1771 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 17:\n#line 340 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = 0;  }\n#line 1777 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 18:\n#line 341 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }\n#line 1783 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 19:\n#line 346 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = RULE_GFLAGS_PRIVATE; }\n#line 1789 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 20:\n#line 347 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = RULE_GFLAGS_GLOBAL; }\n#line 1795 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 21:\n#line 353 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.c_string) = NULL;\n      }\n#line 1803 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 22:\n#line 357 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Tags list is represented in the arena as a sequence\n        // of null-terminated strings, the sequence ends with an\n        // additional null character. Here we write the ending null\n        //character. Example: tag1\\0tag2\\0tag3\\0\\0\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, \"\", NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = (yyvsp[0].c_string);\n      }\n#line 1821 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 23:\n#line 375 \"grammar.y\" /* yacc.c:1646  */\n    {\n        char* identifier;\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), &identifier);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = identifier;\n      }\n#line 1838 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 24:\n#line 388 \"grammar.y\" /* yacc.c:1646  */\n    {\n        char* tag_name = (yyvsp[-1].c_string);\n        size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n\n        while (tag_length > 0)\n        {\n          if (strcmp(tag_name, (yyvsp[0].c_string)) == 0)\n          {\n            yr_compiler_set_error_extra_info(compiler, tag_name);\n            compiler->last_result = ERROR_DUPLICATED_TAG_IDENTIFIER;\n            break;\n          }\n\n          tag_name = (char*) yr_arena_next_address(\n              yyget_extra(yyscanner)->sz_arena,\n              tag_name,\n              tag_length + 1);\n\n          tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n        }\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_arena_write_string(\n              yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), NULL);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = (yyvsp[-1].c_string);\n      }\n#line 1874 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 25:\n#line 424 \"grammar.y\" /* yacc.c:1646  */\n    {  (yyval.meta) = (yyvsp[0].meta); }\n#line 1880 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 26:\n#line 425 \"grammar.y\" /* yacc.c:1646  */\n    {  (yyval.meta) = (yyvsp[-1].meta); }\n#line 1886 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 27:\n#line 431 \"grammar.y\" /* yacc.c:1646  */\n    {\n        SIZED_STRING* sized_string = (yyvsp[0].sized_string);\n\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_STRING,\n            (yyvsp[-2].c_string),\n            sized_string->c_string,\n            0);\n\n        yr_free((yyvsp[-2].c_string));\n        yr_free((yyvsp[0].sized_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1906 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 28:\n#line 447 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            (yyvsp[-2].c_string),\n            NULL,\n            (yyvsp[0].integer));\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1923 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 29:\n#line 460 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            (yyvsp[-3].c_string),\n            NULL,\n            -(yyvsp[0].integer));\n\n        yr_free((yyvsp[-3].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1940 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 30:\n#line 473 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            (yyvsp[-2].c_string),\n            NULL,\n            TRUE);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1957 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 31:\n#line 486 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            (yyvsp[-2].c_string),\n            NULL,\n            FALSE);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1974 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 32:\n#line 502 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.string) = (yyvsp[0].string); }\n#line 1980 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 33:\n#line 503 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.string) = (yyvsp[-1].string); }\n#line 1986 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 34:\n#line 509 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n#line 1994 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 35:\n#line 513 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) (yyvsp[0].integer), (yyvsp[-4].c_string), (yyvsp[-1].sized_string));\n\n        yr_free((yyvsp[-4].c_string));\n        yr_free((yyvsp[-1].sized_string));\n\n        ERROR_IF((yyval.string) == NULL);\n        compiler->error_line = 0;\n      }\n#line 2009 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 36:\n#line 524 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n#line 2017 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 37:\n#line 528 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) (yyvsp[0].integer) | STRING_GFLAGS_REGEXP, (yyvsp[-4].c_string), (yyvsp[-1].sized_string));\n\n        yr_free((yyvsp[-4].c_string));\n        yr_free((yyvsp[-1].sized_string));\n\n        ERROR_IF((yyval.string) == NULL);\n\n        compiler->error_line = 0;\n      }\n#line 2033 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 38:\n#line 540 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = yr_parser_reduce_string_declaration(\n            yyscanner, STRING_GFLAGS_HEXADECIMAL, (yyvsp[-2].c_string), (yyvsp[0].sized_string));\n\n        yr_free((yyvsp[-2].c_string));\n        yr_free((yyvsp[0].sized_string));\n\n        ERROR_IF((yyval.string) == NULL);\n      }\n#line 2047 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 39:\n#line 553 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = 0; }\n#line 2053 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 40:\n#line 554 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }\n#line 2059 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 41:\n#line 559 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_WIDE; }\n#line 2065 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 42:\n#line 560 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_ASCII; }\n#line 2071 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 43:\n#line 561 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_NO_CASE; }\n#line 2077 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 44:\n#line 562 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_FULL_WORD; }\n#line 2083 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 45:\n#line 568 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int var_index = yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string));\n\n        if (var_index >= 0)\n        {\n          compiler->last_result = yr_parser_emit_with_arg(\n              yyscanner,\n              OP_PUSH_M,\n              LOOP_LOCAL_VARS * var_index,\n              NULL,\n              NULL);\n\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          (yyval.expression).value.integer = UNDEFINED;\n          (yyval.expression).identifier = compiler->loop_identifier[var_index];\n        }\n        else\n        {\n          // Search for identifier within the global namespace, where the\n          // externals variables reside.\n\n          YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(\n              compiler->objects_table, (yyvsp[0].c_string), NULL);\n\n          if (object == NULL)\n          {\n            // If not found, search within the current namespace.\n            char* ns = compiler->current_namespace->name;\n\n            object = (YR_OBJECT*) yr_hash_table_lookup(\n                compiler->objects_table, (yyvsp[0].c_string), ns);\n          }\n\n          if (object != NULL)\n          {\n            char* id;\n\n            compiler->last_result = yr_arena_write_string(\n                compiler->sz_arena, (yyvsp[0].c_string), &id);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_LOAD,\n                  id,\n                  NULL,\n                  NULL);\n\n            (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n            (yyval.expression).value.object = object;\n            (yyval.expression).identifier = object->identifier;\n          }\n          else\n          {\n            YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(\n                compiler->rules_table,\n                (yyvsp[0].c_string),\n                compiler->current_namespace->name);\n\n            if (rule != NULL)\n            {\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_PUSH_RULE,\n                  rule,\n                  NULL,\n                  NULL);\n\n              (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n              (yyval.expression).value.integer = UNDEFINED;\n              (yyval.expression).identifier = rule->identifier;\n            }\n            else\n            {\n              yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));\n              compiler->last_result = ERROR_UNDEFINED_IDENTIFIER;\n            }\n          }\n        }\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2172 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 46:\n#line 653 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_OBJECT* field = NULL;\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_OBJECT &&\n            (yyvsp[-2].expression).value.object->type == OBJECT_TYPE_STRUCTURE)\n        {\n          field = yr_object_lookup_field((yyvsp[-2].expression).value.object, (yyvsp[0].c_string));\n\n          if (field != NULL)\n          {\n            char* ident;\n\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, (yyvsp[0].c_string), &ident);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_FIELD,\n                  ident,\n                  NULL,\n                  NULL);\n\n            (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n            (yyval.expression).value.object = field;\n            (yyval.expression).identifier = field->identifier;\n          }\n          else\n          {\n            yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));\n            compiler->last_result = ERROR_INVALID_FIELD_NAME;\n          }\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-2].expression).identifier);\n\n          compiler->last_result = ERROR_NOT_A_STRUCTURE;\n        }\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2222 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 47:\n#line 699 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_OBJECT_ARRAY* array;\n        YR_OBJECT_DICTIONARY* dict;\n\n        if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&\n            (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_ARRAY)\n        {\n          if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"array indexes must be of integer type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_INDEX_ARRAY, NULL);\n\n          array = (YR_OBJECT_ARRAY*) (yyvsp[-3].expression).value.object;\n\n          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n          (yyval.expression).value.object = array->prototype_item;\n          (yyval.expression).identifier = array->identifier;\n        }\n        else if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&\n                 (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_DICTIONARY)\n        {\n          if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_STRING)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"dictionary keys must be of string type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_LOOKUP_DICT, NULL);\n\n          dict = (YR_OBJECT_DICTIONARY*) (yyvsp[-3].expression).value.object;\n\n          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n          (yyval.expression).value.object = dict->prototype_item;\n          (yyval.expression).identifier = dict->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-3].expression).identifier);\n\n          compiler->last_result = ERROR_NOT_INDEXABLE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2283 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 48:\n#line 757 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_OBJECT_FUNCTION* function;\n        char* args_fmt;\n\n        if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&\n            (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_FUNCTION)\n        {\n          compiler->last_result = yr_parser_check_types(\n              compiler, (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object, (yyvsp[-1].c_string));\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, (yyvsp[-1].c_string), &args_fmt);\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_parser_emit_with_arg_reloc(\n                yyscanner,\n                OP_CALL,\n                args_fmt,\n                NULL,\n                NULL);\n\n          function = (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object;\n\n          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n          (yyval.expression).value.object = function->return_obj;\n          (yyval.expression).identifier = function->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-3].expression).identifier);\n\n          compiler->last_result = ERROR_NOT_A_FUNCTION;\n        }\n\n        yr_free((yyvsp[-1].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2328 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 49:\n#line 801 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.c_string) = yr_strdup(\"\"); }\n#line 2334 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 50:\n#line 802 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.c_string) = (yyvsp[0].c_string); }\n#line 2340 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 51:\n#line 807 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.c_string) = (char*) yr_malloc(MAX_FUNCTION_ARGS + 1);\n\n        switch((yyvsp[0].expression).type)\n        {\n          case EXPRESSION_TYPE_INTEGER:\n            strlcpy((yyval.c_string), \"i\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_FLOAT:\n            strlcpy((yyval.c_string), \"f\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_BOOLEAN:\n            strlcpy((yyval.c_string), \"b\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_STRING:\n            strlcpy((yyval.c_string), \"s\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_REGEXP:\n            strlcpy((yyval.c_string), \"r\", MAX_FUNCTION_ARGS);\n            break;\n        }\n\n        ERROR_IF((yyval.c_string) == NULL);\n      }\n#line 2369 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 52:\n#line 832 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if (strlen((yyvsp[-2].c_string)) == MAX_FUNCTION_ARGS)\n        {\n          compiler->last_result = ERROR_TOO_MANY_ARGUMENTS;\n        }\n        else\n        {\n          switch((yyvsp[0].expression).type)\n          {\n            case EXPRESSION_TYPE_INTEGER:\n              strlcat((yyvsp[-2].c_string), \"i\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_FLOAT:\n              strlcat((yyvsp[-2].c_string), \"f\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_BOOLEAN:\n              strlcat((yyvsp[-2].c_string), \"b\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_STRING:\n              strlcat((yyvsp[-2].c_string), \"s\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_REGEXP:\n              strlcat((yyvsp[-2].c_string), \"r\", MAX_FUNCTION_ARGS);\n              break;\n          }\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = (yyvsp[-2].c_string);\n      }\n#line 2405 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 53:\n#line 868 \"grammar.y\" /* yacc.c:1646  */\n    {\n        SIZED_STRING* sized_string = (yyvsp[0].sized_string);\n        RE* re;\n        RE_ERROR error;\n\n        int re_flags = 0;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_NO_CASE)\n          re_flags |= RE_FLAGS_NO_CASE;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_DOT_ALL)\n          re_flags |= RE_FLAGS_DOT_ALL;\n\n        compiler->last_result = yr_re_compile(\n            sized_string->c_string,\n            re_flags,\n            compiler->re_code_arena,\n            &re,\n            &error);\n\n        yr_free((yyvsp[0].sized_string));\n\n        if (compiler->last_result == ERROR_INVALID_REGULAR_EXPRESSION)\n          yr_compiler_set_error_extra_info(compiler, error.message);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              re->root_node->forward_code,\n              NULL,\n              NULL);\n\n        yr_re_destroy(re);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_REGEXP;\n      }\n#line 2451 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 54:\n#line 914 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_STRING)\n        {\n          if ((yyvsp[0].expression).value.sized_string != NULL)\n          {\n            yywarning(yyscanner,\n              \"Using literal string \\\"%s\\\" in a boolean operation.\",\n              (yyvsp[0].expression).value.sized_string->c_string);\n          }\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_STR_TO_BOOL, NULL);\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2474 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 55:\n#line 936 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2487 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 56:\n#line 945 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 0, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2500 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 57:\n#line 954 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, \"matches\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_REGEXP, \"matches\");\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit(\n              yyscanner,\n              OP_MATCHES,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2519 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 58:\n#line 969 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, \"contains\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_STRING, \"contains\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_CONTAINS, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2535 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 59:\n#line 981 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int result = yr_parser_reduce_string_identifier(\n            yyscanner,\n            (yyvsp[0].c_string),\n            OP_FOUND,\n            UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2553 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 60:\n#line 995 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"at\");\n\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-2].c_string), OP_FOUND_AT, (yyvsp[0].expression).value.integer);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2570 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 61:\n#line 1008 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-2].c_string), OP_FOUND_IN, UNDEFINED);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF(compiler->last_result!= ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2585 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 62:\n#line 1019 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if (compiler->loop_depth > 0)\n        {\n          compiler->loop_depth--;\n          compiler->loop_identifier[compiler->loop_depth] = NULL;\n        }\n      }\n#line 2597 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 63:\n#line 1027 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int var_index;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n              ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        var_index = yr_parser_lookup_loop_variable(\n            yyscanner, (yyvsp[-1].c_string));\n\n        if (var_index >= 0)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-1].c_string));\n\n          compiler->last_result = \\\n              ERROR_DUPLICATED_LOOP_IDENTIFIER;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Push end-of-list marker\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2631 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 64:\n#line 1057 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        // Clear counter for number of expressions evaluating\n        // to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        // Clear iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        if ((yyvsp[-1].integer) == INTEGER_SET_ENUMERATION)\n        {\n          // Pop the first integer\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Pop higher bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset + 3, &addr, NULL);\n\n          // Pop lower bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, NULL, NULL);\n        }\n\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);\n        compiler->loop_depth++;\n      }\n#line 2670 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 65:\n#line 1092 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // The value at the top of the stack is the result of\n        // evaluating the boolean expression, so it could be\n        // 0, 1 or UNDEFINED. Add this value to a counter\n        // keeping the number of expressions evaluating to true.\n        // If the value is UNDEFINED instruction OP_ADD_M\n        // does nothing.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        if ((yyvsp[-5].integer) == INTEGER_SET_ENUMERATION)\n        {\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JNUNDEF,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Increment lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_INCR_M, mem_offset, NULL, NULL);\n\n          // Push lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset, NULL, NULL);\n\n          // Push higher bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset + 3, NULL, NULL);\n\n          // Compare higher bound with lower bound, do loop again\n          // if lower bound is still lower or equal than higher bound\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JLE,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n        }\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at the top of the stack. Check if the quantifier\n        // is undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        yr_free((yyvsp[-8].c_string));\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2753 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 66:\n#line 1171 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n            ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        if (compiler->loop_for_of_mem_offset != -1)\n          compiler->last_result = \\\n            ERROR_NESTED_FOR_OF_LOOP;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        // Pop the first string.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n\n        compiler->loop_for_of_mem_offset = mem_offset;\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        compiler->loop_depth++;\n      }\n#line 2787 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 67:\n#line 1201 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        compiler->loop_for_of_mem_offset = -1;\n\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // Increment counter by the value returned by the\n        // boolean expression (0 or 1). If the boolean expression\n        // returned UNDEFINED the OP_ADD_M won't do anything.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        // If next string is not undefined, go back to the\n        // beginning of the loop.\n        yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JNUNDEF,\n            compiler->loop_address[compiler->loop_depth],\n            NULL,\n            NULL);\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at top of the stack. Check if the quantifier is\n        // undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n\n      }\n#line 2840 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 68:\n#line 1250 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit(yyscanner, OP_OF, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2850 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 69:\n#line 1256 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit(yyscanner, OP_NOT, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2860 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 70:\n#line 1262 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JFALSE,\n            0,          // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // create a fixup entry for the jump and push it in the stack\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n#line 2890 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 71:\n#line 1288 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        uint8_t* and_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the AND opcode and one for opcode following the\n        // AND. This is necessary because we need to compute the address for the\n        // opcode following the AND, and we don't want the AND in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_AND, &and_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the AND. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the AND opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the AND\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(and_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2930 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 72:\n#line 1324 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JTRUE,\n            0,         // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n#line 2959 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 73:\n#line 1349 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        uint8_t* or_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the OR opcode and one for opcode following the\n        // OR. This is necessary because we need to compute the address for the\n        // opcode following the OR, and we don't want the OR in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_OR, &or_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the OP_OR. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the OR opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the OR\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(or_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2999 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 74:\n#line 1385 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3012 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 75:\n#line 1394 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3025 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 76:\n#line 1403 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<=\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3038 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 77:\n#line 1412 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">=\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3051 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 78:\n#line 1421 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"==\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3064 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 79:\n#line 1430 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"!=\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3077 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 80:\n#line 1439 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[0].expression);\n      }\n#line 3085 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 81:\n#line 1443 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[-1].expression);\n      }\n#line 3093 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 82:\n#line 1450 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = INTEGER_SET_ENUMERATION; }\n#line 3099 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 83:\n#line 1451 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = INTEGER_SET_RANGE; }\n#line 3105 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 84:\n#line 1457 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's lower bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's upper bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3127 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 85:\n#line 1479 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3143 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 86:\n#line 1491 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3158 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 87:\n#line 1506 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Push end-of-list marker\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n#line 3167 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 89:\n#line 1512 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n        yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3178 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 92:\n#line 1529 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3189 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 93:\n#line 1536 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3200 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 95:\n#line 1548 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n#line 3208 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 96:\n#line 1552 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);\n      }\n#line 3216 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 97:\n#line 1560 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[-1].expression);\n      }\n#line 3224 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 98:\n#line 1564 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_FILESIZE, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3238 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 99:\n#line 1574 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yywarning(yyscanner,\n            \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"\n            \"function from PE module instead.\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_ENTRYPOINT, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3256 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 100:\n#line 1588 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");\n\n        // _INTEGER_FUNCTION_ could be any of int8, int16, int32, uint8,\n        // uint32, etc. $1 contains an index that added to OP_READ_INT results\n        // in the proper OP_INTXX opcode.\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, (uint8_t) (OP_READ_INT + (yyvsp[-3].integer)), NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3276 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 101:\n#line 1604 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = (yyvsp[0].integer);\n      }\n#line 3290 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 102:\n#line 1614 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg_double(\n            yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n      }\n#line 3303 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 103:\n#line 1623 \"grammar.y\" /* yacc.c:1646  */\n    {\n        SIZED_STRING* sized_string;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->sz_arena,\n            (yyvsp[0].sized_string),\n            (yyvsp[0].sized_string)->length + sizeof(SIZED_STRING),\n            (void**) &sized_string);\n\n        yr_free((yyvsp[0].sized_string));\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              sized_string,\n              NULL,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_STRING;\n        (yyval.expression).value.sized_string = sized_string;\n      }\n#line 3332 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 104:\n#line 1648 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3348 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 105:\n#line 1660 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);\n\n        yr_free((yyvsp[-3].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3364 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 106:\n#line 1672 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, (yyvsp[0].c_string), OP_OFFSET, UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3384 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 107:\n#line 1688 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);\n\n        yr_free((yyvsp[-3].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3400 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 108:\n#line 1700 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, (yyvsp[0].c_string), OP_LENGTH, UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3420 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 109:\n#line 1716 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          (yyval.expression).value.integer = UNDEFINED;\n        }\n        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n          (yyval.expression).value.integer = UNDEFINED;\n        }\n        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_OBJECT)\n        {\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_OBJ_VALUE, NULL);\n\n          switch((yyvsp[0].expression).value.object->type)\n          {\n            case OBJECT_TYPE_INTEGER:\n              (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n              (yyval.expression).value.integer = UNDEFINED;\n              break;\n            case OBJECT_TYPE_FLOAT:\n              (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n              break;\n            case OBJECT_TYPE_STRING:\n              (yyval.expression).type = EXPRESSION_TYPE_STRING;\n              (yyval.expression).value.sized_string = NULL;\n              break;\n            default:\n              yr_compiler_set_error_extra_info_fmt(\n                  compiler,\n                  \"wrong usage of identifier \\\"%s\\\"\",\n                  (yyvsp[0].expression).identifier);\n              compiler->last_result = ERROR_WRONG_TYPE;\n          }\n        }\n        else\n        {\n          assert(FALSE);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3469 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 110:\n#line 1761 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");\n\n        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?\n              UNDEFINED : -((yyvsp[0].expression).value.integer);\n          compiler->last_result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);\n        }\n        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_FLOAT)\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n          compiler->last_result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3492 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 111:\n#line 1780 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3514 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 112:\n#line 1798 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3536 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 113:\n#line 1816 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3558 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 114:\n#line 1834 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          if ((yyvsp[0].expression).value.integer != 0)\n          {\n            (yyval.expression).value.integer = OPERATION(/, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n            (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          }\n          else\n          {\n            compiler->last_result = ERROR_DIVISION_BY_ZERO;\n            ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n          }\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3588 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 115:\n#line 1860 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");\n\n        yr_parser_emit(yyscanner, OP_MOD, NULL);\n\n        if ((yyvsp[0].expression).value.integer != 0)\n        {\n          (yyval.expression).value.integer = OPERATION(%, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          compiler->last_result = ERROR_DIVISION_BY_ZERO;\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n      }\n#line 3610 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 116:\n#line 1878 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3624 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 117:\n#line 1888 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3638 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 118:\n#line 1898 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"|\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"|\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3652 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 119:\n#line 1908 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"~\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?\n            UNDEFINED : ~((yyvsp[0].expression).value.integer);\n      }\n#line 3666 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 120:\n#line 1918 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"<<\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"<<\");\n\n        yr_parser_emit(yyscanner, OP_SHL, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3680 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 121:\n#line 1928 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \">>\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \">>\");\n\n        yr_parser_emit(yyscanner, OP_SHR, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(>>, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3694 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 122:\n#line 1938 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[0].expression);\n      }\n#line 3702 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n\n#line 3706 \"grammar.c\" /* yacc.c:1646  */\n      default: break;\n    }\n  /* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */\n  YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\n\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n\n  *++yyvsp = yyval;\n\n  /* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */\n\n  yyn = yyr1[yyn];\n\n  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;\n  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)\n    yystate = yytable[yystate];\n  else\n    yystate = yydefgoto[yyn - YYNTOKENS];\n\n  goto yynewstate;\n\n\n/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/\nyyerrlab:\n  /* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */\n  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);\n\n  /* If not already recovering from an error, report this error.  */\n  if (!yyerrstatus)\n    {\n      ++yynerrs;\n#if ! YYERROR_VERBOSE\n      yyerror (yyscanner, compiler, YY_(\"syntax error\"));\n#else\n# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\\n                                        yyssp, yytoken)\n      {\n        char const *yymsgp = YY_(\"syntax error\");\n        int yysyntax_error_status;\n        yysyntax_error_status = YYSYNTAX_ERROR;\n        if (yysyntax_error_status == 0)\n          yymsgp = yymsg;\n        else if (yysyntax_error_status == 1)\n          {\n            if (yymsg != yymsgbuf)\n              YYSTACK_FREE (yymsg);\n            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);\n            if (!yymsg)\n              {\n                yymsg = yymsgbuf;\n                yymsg_alloc = sizeof yymsgbuf;\n                yysyntax_error_status = 2;\n              }\n            else\n              {\n                yysyntax_error_status = YYSYNTAX_ERROR;\n                yymsgp = yymsg;\n              }\n          }\n        yyerror (yyscanner, compiler, yymsgp);\n        if (yysyntax_error_status == 2)\n          goto yyexhaustedlab;\n      }\n# undef YYSYNTAX_ERROR\n#endif\n    }\n\n\n\n  if (yyerrstatus == 3)\n    {\n      /* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */\n\n      if (yychar <= YYEOF)\n        {\n          /* Return failure if at end of input.  */\n          if (yychar == YYEOF)\n            YYABORT;\n        }\n      else\n        {\n          yydestruct (\"Error: discarding\",\n                      yytoken, &yylval, yyscanner, compiler);\n          yychar = YYEMPTY;\n        }\n    }\n\n  /* Else will try to reuse lookahead token after shifting the error\n     token.  */\n  goto yyerrlab1;\n\n\n/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/\nyyerrorlab:\n\n  /* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */\n  if (/*CONSTCOND*/ 0)\n     goto yyerrorlab;\n\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n  yystate = *yyssp;\n  goto yyerrlab1;\n\n\n/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/\nyyerrlab1:\n  yyerrstatus = 3;      /* Each real token shifted decrements this.  */\n\n  for (;;)\n    {\n      yyn = yypact[yystate];\n      if (!yypact_value_is_default (yyn))\n        {\n          yyn += YYTERROR;\n          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)\n            {\n              yyn = yytable[yyn];\n              if (0 < yyn)\n                break;\n            }\n        }\n\n      /* Pop the current state because it cannot handle the error token.  */\n      if (yyssp == yyss)\n        YYABORT;\n\n\n      yydestruct (\"Error: popping\",\n                  yystos[yystate], yyvsp, yyscanner, compiler);\n      YYPOPSTACK (1);\n      yystate = *yyssp;\n      YY_STACK_PRINT (yyss, yyssp);\n    }\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n\n  /* Shift the error token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);\n\n  yystate = yyn;\n  goto yynewstate;\n\n\n/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/\nyyacceptlab:\n  yyresult = 0;\n  goto yyreturn;\n\n/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/\nyyabortlab:\n  yyresult = 1;\n  goto yyreturn;\n\n#if !defined yyoverflow || YYERROR_VERBOSE\n/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/\nyyexhaustedlab:\n  yyerror (yyscanner, compiler, YY_(\"memory exhausted\"));\n  yyresult = 2;\n  /* Fall through.  */\n#endif\n\nyyreturn:\n  if (yychar != YYEMPTY)\n    {\n      /* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */\n      yytoken = YYTRANSLATE (yychar);\n      yydestruct (\"Cleanup: discarding lookahead\",\n                  yytoken, &yylval, yyscanner, compiler);\n    }\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */\n  YYPOPSTACK (yylen);\n  YY_STACK_PRINT (yyss, yyssp);\n  while (yyssp != yyss)\n    {\n      yydestruct (\"Cleanup: popping\",\n                  yystos[*yyssp], yyvsp, yyscanner, compiler);\n      YYPOPSTACK (1);\n    }\n#ifndef yyoverflow\n  if (yyss != yyssa)\n    YYSTACK_FREE (yyss);\n#endif\n#if YYERROR_VERBOSE\n  if (yymsg != yymsgbuf)\n    YYSTACK_FREE (yymsg);\n#endif\n  return yyresult;\n}\n#line 1943 \"grammar.y\" /* yacc.c:1906  */\n\n", "/*\nCopyright (c) 2007-2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n%{\n\n\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n#include <stddef.h>\n\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/strutils.h>\n#include <yara/compiler.h>\n#include <yara/object.h>\n#include <yara/sizedstr.h>\n#include <yara/exec.h>\n#include <yara/error.h>\n#include <yara/mem.h>\n#include <yara/lexer.h>\n#include <yara/parser.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define INTEGER_SET_ENUMERATION   1\n#define INTEGER_SET_RANGE         2\n\n#define ERROR_IF(x) \\\n    if (x) \\\n    { \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    } \\\n\n\n#define CHECK_TYPE(expression, expected_type, op) \\\n    if (((expression.type) & (expected_type)) == 0) \\\n    { \\\n      switch(expression.type) \\\n      { \\\n        case EXPRESSION_TYPE_INTEGER: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"integer\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_FLOAT: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"float\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_STRING: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"string\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_BOOLEAN: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"boolean\\\" for \" op \" operator\"); \\\n          break; \\\n      } \\\n      compiler->last_result = ERROR_WRONG_TYPE; \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    }\n%}\n\n\n%expect 1   // expect 1 shift/reduce conflicts\n\n// Uncomment this line to print parsing information that can be useful to\n// debug YARA's grammar.\n\n// %debug\n\n%name-prefix=\"yara_yy\"\n%pure-parser\n%parse-param {void *yyscanner}\n%parse-param {YR_COMPILER* compiler}\n%lex-param {yyscan_t yyscanner}\n%lex-param {YR_COMPILER* compiler}\n\n%token _DOT_DOT_\n%token _RULE_\n%token _PRIVATE_\n%token _GLOBAL_\n%token _META_\n%token <string> _STRINGS_\n%token _CONDITION_\n%token <c_string> _IDENTIFIER_\n%token <c_string> _STRING_IDENTIFIER_\n%token <c_string> _STRING_COUNT_\n%token <c_string> _STRING_OFFSET_\n%token <c_string> _STRING_LENGTH_\n%token <c_string> _STRING_IDENTIFIER_WITH_WILDCARD_\n%token <integer> _NUMBER_\n%token <double_> _DOUBLE_\n%token <integer> _INTEGER_FUNCTION_\n%token <sized_string> _TEXT_STRING_\n%token <sized_string> _HEX_STRING_\n%token <sized_string> _REGEXP_\n%token _ASCII_\n%token _WIDE_\n%token _NOCASE_\n%token _FULLWORD_\n%token _AT_\n%token _FILESIZE_\n%token _ENTRYPOINT_\n%token _ALL_\n%token _ANY_\n%token _IN_\n%token _OF_\n%token _FOR_\n%token _THEM_\n%token _MATCHES_\n%token _CONTAINS_\n%token _IMPORT_\n\n%token _TRUE_\n%token _FALSE_\n\n%left _OR_\n%left _AND_\n%left '|'\n%left '^'\n%left '&'\n%left _EQ_ _NEQ_\n%left _LT_ _LE_ _GT_ _GE_\n%left _SHIFT_LEFT_ _SHIFT_RIGHT_\n%left '+' '-'\n%left '*' '\\\\' '%'\n%right _NOT_ '~' UNARY_MINUS\n\n%type <rule>   rule\n\n%type <string> strings\n%type <string> string_declaration\n%type <string> string_declarations\n\n%type <meta> meta\n%type <meta> meta_declaration\n%type <meta> meta_declarations\n\n%type <c_string> tags\n%type <c_string> tag_list\n\n%type <integer> string_modifier\n%type <integer> string_modifiers\n\n%type <integer> integer_set\n\n%type <integer> rule_modifier\n%type <integer> rule_modifiers\n\n\n%type <expression> primary_expression\n%type <expression> boolean_expression\n%type <expression> expression\n%type <expression> identifier\n%type <expression> regexp\n\n%type <c_string> arguments\n%type <c_string> arguments_list\n\n%destructor { yr_free($$); } _IDENTIFIER_\n%destructor { yr_free($$); } _STRING_COUNT_\n%destructor { yr_free($$); } _STRING_OFFSET_\n%destructor { yr_free($$); } _STRING_LENGTH_\n%destructor { yr_free($$); } _STRING_IDENTIFIER_\n%destructor { yr_free($$); } _STRING_IDENTIFIER_WITH_WILDCARD_\n%destructor { yr_free($$); } _TEXT_STRING_\n%destructor { yr_free($$); } _HEX_STRING_\n%destructor { yr_free($$); } _REGEXP_\n\n%union {\n  EXPRESSION      expression;\n  SIZED_STRING*   sized_string;\n  char*           c_string;\n  int64_t         integer;\n  double          double_;\n  YR_STRING*      string;\n  YR_META*        meta;\n  YR_RULE*        rule;\n}\n\n\n%%\n\nrules\n    : /* empty */\n    | rules rule\n    | rules import\n    | rules error rule      /* on error skip until next rule..*/\n    | rules error import    /* .. or import statement */\n    | rules error \"include\" /* .. or include statement */\n    ;\n\n\nimport\n    : _IMPORT_ _TEXT_STRING_\n      {\n        int result = yr_parser_reduce_import(yyscanner, $2);\n\n        yr_free($2);\n\n        ERROR_IF(result != ERROR_SUCCESS);\n      }\n    ;\n\n\nrule\n    : rule_modifiers _RULE_ _IDENTIFIER_\n      {\n        YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(\n            yyscanner, (int32_t) $1, $3);\n\n        ERROR_IF(rule == NULL);\n\n        $<rule>$ = rule;\n      }\n      tags '{' meta strings\n      {\n        YR_RULE* rule = $<rule>4; // rule created in phase 1\n\n        rule->tags = $5;\n        rule->metas = $7;\n        rule->strings = $8;\n      }\n      condition '}'\n      {\n        YR_RULE* rule = $<rule>4; // rule created in phase 1\n\n        compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(\n            yyscanner, rule);\n\n        yr_free($3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nmeta\n    : /* empty */\n      {\n        $$ = NULL;\n      }\n    | _META_ ':' meta_declarations\n      {\n        // Each rule have a list of meta-data info, consisting in a\n        // sequence of YR_META structures. The last YR_META structure does\n        // not represent a real meta-data, it's just a end-of-list marker\n        // identified by a specific type (META_TYPE_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_META null_meta;\n\n        memset(&null_meta, 0xFF, sizeof(YR_META));\n        null_meta.type = META_TYPE_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->metas_arena,\n            &null_meta,\n            sizeof(YR_META),\n            NULL);\n\n        $$ = $3;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nstrings\n    : /* empty */\n      {\n        $$ = NULL;\n      }\n    | _STRINGS_ ':' string_declarations\n      {\n        // Each rule have a list of strings, consisting in a sequence\n        // of YR_STRING structures. The last YR_STRING structure does not\n        // represent a real string, it's just a end-of-list marker\n        // identified by a specific flag (STRING_FLAGS_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_STRING null_string;\n\n        memset(&null_string, 0xFF, sizeof(YR_STRING));\n        null_string.g_flags = STRING_GFLAGS_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->strings_arena,\n            &null_string,\n            sizeof(YR_STRING),\n            NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $3;\n      }\n    ;\n\n\ncondition\n    : _CONDITION_ ':' boolean_expression\n    ;\n\n\nrule_modifiers\n    : /* empty */                      { $$ = 0;  }\n    | rule_modifiers rule_modifier     { $$ = $1 | $2; }\n    ;\n\n\nrule_modifier\n    : _PRIVATE_      { $$ = RULE_GFLAGS_PRIVATE; }\n    | _GLOBAL_       { $$ = RULE_GFLAGS_GLOBAL; }\n    ;\n\n\ntags\n    : /* empty */\n      {\n        $$ = NULL;\n      }\n    | ':' tag_list\n      {\n        // Tags list is represented in the arena as a sequence\n        // of null-terminated strings, the sequence ends with an\n        // additional null character. Here we write the ending null\n        //character. Example: tag1\\0tag2\\0tag3\\0\\0\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, \"\", NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $2;\n      }\n    ;\n\n\ntag_list\n    : _IDENTIFIER_\n      {\n        char* identifier;\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, $1, &identifier);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = identifier;\n      }\n    | tag_list _IDENTIFIER_\n      {\n        char* tag_name = $1;\n        size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n\n        while (tag_length > 0)\n        {\n          if (strcmp(tag_name, $2) == 0)\n          {\n            yr_compiler_set_error_extra_info(compiler, tag_name);\n            compiler->last_result = ERROR_DUPLICATED_TAG_IDENTIFIER;\n            break;\n          }\n\n          tag_name = (char*) yr_arena_next_address(\n              yyget_extra(yyscanner)->sz_arena,\n              tag_name,\n              tag_length + 1);\n\n          tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n        }\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_arena_write_string(\n              yyget_extra(yyscanner)->sz_arena, $2, NULL);\n\n        yr_free($2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $1;\n      }\n    ;\n\n\n\nmeta_declarations\n    : meta_declaration                    {  $$ = $1; }\n    | meta_declarations meta_declaration  {  $$ = $1; }\n    ;\n\n\nmeta_declaration\n    : _IDENTIFIER_ '=' _TEXT_STRING_\n      {\n        SIZED_STRING* sized_string = $3;\n\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_STRING,\n            $1,\n            sized_string->c_string,\n            0);\n\n        yr_free($1);\n        yr_free($3);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' _NUMBER_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            $1,\n            NULL,\n            $3);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' '-' _NUMBER_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            $1,\n            NULL,\n            -$4);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' _TRUE_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            $1,\n            NULL,\n            TRUE);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' _FALSE_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            $1,\n            NULL,\n            FALSE);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    ;\n\n\nstring_declarations\n    : string_declaration                      { $$ = $1; }\n    | string_declarations string_declaration  { $$ = $1; }\n    ;\n\n\nstring_declaration\n    : _STRING_IDENTIFIER_ '='\n      {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n      _TEXT_STRING_ string_modifiers\n      {\n        $$ = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) $5, $1, $4);\n\n        yr_free($1);\n        yr_free($4);\n\n        ERROR_IF($$ == NULL);\n        compiler->error_line = 0;\n      }\n    | _STRING_IDENTIFIER_ '='\n      {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n      _REGEXP_ string_modifiers\n      {\n        $$ = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) $5 | STRING_GFLAGS_REGEXP, $1, $4);\n\n        yr_free($1);\n        yr_free($4);\n\n        ERROR_IF($$ == NULL);\n\n        compiler->error_line = 0;\n      }\n    | _STRING_IDENTIFIER_ '=' _HEX_STRING_\n      {\n        $$ = yr_parser_reduce_string_declaration(\n            yyscanner, STRING_GFLAGS_HEXADECIMAL, $1, $3);\n\n        yr_free($1);\n        yr_free($3);\n\n        ERROR_IF($$ == NULL);\n      }\n    ;\n\n\nstring_modifiers\n    : /* empty */                         { $$ = 0; }\n    | string_modifiers string_modifier    { $$ = $1 | $2; }\n    ;\n\n\nstring_modifier\n    : _WIDE_        { $$ = STRING_GFLAGS_WIDE; }\n    | _ASCII_       { $$ = STRING_GFLAGS_ASCII; }\n    | _NOCASE_      { $$ = STRING_GFLAGS_NO_CASE; }\n    | _FULLWORD_    { $$ = STRING_GFLAGS_FULL_WORD; }\n    ;\n\n\nidentifier\n    : _IDENTIFIER_\n      {\n        int var_index = yr_parser_lookup_loop_variable(yyscanner, $1);\n\n        if (var_index >= 0)\n        {\n          compiler->last_result = yr_parser_emit_with_arg(\n              yyscanner,\n              OP_PUSH_M,\n              LOOP_LOCAL_VARS * var_index,\n              NULL,\n              NULL);\n\n          $$.type = EXPRESSION_TYPE_INTEGER;\n          $$.value.integer = UNDEFINED;\n          $$.identifier = compiler->loop_identifier[var_index];\n        }\n        else\n        {\n          // Search for identifier within the global namespace, where the\n          // externals variables reside.\n\n          YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(\n              compiler->objects_table, $1, NULL);\n\n          if (object == NULL)\n          {\n            // If not found, search within the current namespace.\n            char* ns = compiler->current_namespace->name;\n\n            object = (YR_OBJECT*) yr_hash_table_lookup(\n                compiler->objects_table, $1, ns);\n          }\n\n          if (object != NULL)\n          {\n            char* id;\n\n            compiler->last_result = yr_arena_write_string(\n                compiler->sz_arena, $1, &id);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_LOAD,\n                  id,\n                  NULL,\n                  NULL);\n\n            $$.type = EXPRESSION_TYPE_OBJECT;\n            $$.value.object = object;\n            $$.identifier = object->identifier;\n          }\n          else\n          {\n            YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(\n                compiler->rules_table,\n                $1,\n                compiler->current_namespace->name);\n\n            if (rule != NULL)\n            {\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_PUSH_RULE,\n                  rule,\n                  NULL,\n                  NULL);\n\n              $$.type = EXPRESSION_TYPE_BOOLEAN;\n              $$.value.integer = UNDEFINED;\n              $$.identifier = rule->identifier;\n            }\n            else\n            {\n              yr_compiler_set_error_extra_info(compiler, $1);\n              compiler->last_result = ERROR_UNDEFINED_IDENTIFIER;\n            }\n          }\n        }\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | identifier '.' _IDENTIFIER_\n      {\n        YR_OBJECT* field = NULL;\n\n        if ($1.type == EXPRESSION_TYPE_OBJECT &&\n            $1.value.object->type == OBJECT_TYPE_STRUCTURE)\n        {\n          field = yr_object_lookup_field($1.value.object, $3);\n\n          if (field != NULL)\n          {\n            char* ident;\n\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, $3, &ident);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_FIELD,\n                  ident,\n                  NULL,\n                  NULL);\n\n            $$.type = EXPRESSION_TYPE_OBJECT;\n            $$.value.object = field;\n            $$.identifier = field->identifier;\n          }\n          else\n          {\n            yr_compiler_set_error_extra_info(compiler, $3);\n            compiler->last_result = ERROR_INVALID_FIELD_NAME;\n          }\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $1.identifier);\n\n          compiler->last_result = ERROR_NOT_A_STRUCTURE;\n        }\n\n        yr_free($3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | identifier '[' primary_expression ']'\n      {\n        YR_OBJECT_ARRAY* array;\n        YR_OBJECT_DICTIONARY* dict;\n\n        if ($1.type == EXPRESSION_TYPE_OBJECT &&\n            $1.value.object->type == OBJECT_TYPE_ARRAY)\n        {\n          if ($3.type != EXPRESSION_TYPE_INTEGER)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"array indexes must be of integer type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_INDEX_ARRAY, NULL);\n\n          array = (YR_OBJECT_ARRAY*) $1.value.object;\n\n          $$.type = EXPRESSION_TYPE_OBJECT;\n          $$.value.object = array->prototype_item;\n          $$.identifier = array->identifier;\n        }\n        else if ($1.type == EXPRESSION_TYPE_OBJECT &&\n                 $1.value.object->type == OBJECT_TYPE_DICTIONARY)\n        {\n          if ($3.type != EXPRESSION_TYPE_STRING)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"dictionary keys must be of string type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_LOOKUP_DICT, NULL);\n\n          dict = (YR_OBJECT_DICTIONARY*) $1.value.object;\n\n          $$.type = EXPRESSION_TYPE_OBJECT;\n          $$.value.object = dict->prototype_item;\n          $$.identifier = dict->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $1.identifier);\n\n          compiler->last_result = ERROR_NOT_INDEXABLE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n\n    | identifier '(' arguments ')'\n      {\n        YR_OBJECT_FUNCTION* function;\n        char* args_fmt;\n\n        if ($1.type == EXPRESSION_TYPE_OBJECT &&\n            $1.value.object->type == OBJECT_TYPE_FUNCTION)\n        {\n          compiler->last_result = yr_parser_check_types(\n              compiler, (YR_OBJECT_FUNCTION*) $1.value.object, $3);\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, $3, &args_fmt);\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_parser_emit_with_arg_reloc(\n                yyscanner,\n                OP_CALL,\n                args_fmt,\n                NULL,\n                NULL);\n\n          function = (YR_OBJECT_FUNCTION*) $1.value.object;\n\n          $$.type = EXPRESSION_TYPE_OBJECT;\n          $$.value.object = function->return_obj;\n          $$.identifier = function->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $1.identifier);\n\n          compiler->last_result = ERROR_NOT_A_FUNCTION;\n        }\n\n        yr_free($3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\narguments\n    : /* empty */     { $$ = yr_strdup(\"\"); }\n    | arguments_list  { $$ = $1; }\n\n\narguments_list\n    : expression\n      {\n        $$ = (char*) yr_malloc(MAX_FUNCTION_ARGS + 1);\n\n        switch($1.type)\n        {\n          case EXPRESSION_TYPE_INTEGER:\n            strlcpy($$, \"i\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_FLOAT:\n            strlcpy($$, \"f\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_BOOLEAN:\n            strlcpy($$, \"b\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_STRING:\n            strlcpy($$, \"s\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_REGEXP:\n            strlcpy($$, \"r\", MAX_FUNCTION_ARGS);\n            break;\n        }\n\n        ERROR_IF($$ == NULL);\n      }\n    | arguments_list ',' expression\n      {\n        if (strlen($1) == MAX_FUNCTION_ARGS)\n        {\n          compiler->last_result = ERROR_TOO_MANY_ARGUMENTS;\n        }\n        else\n        {\n          switch($3.type)\n          {\n            case EXPRESSION_TYPE_INTEGER:\n              strlcat($1, \"i\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_FLOAT:\n              strlcat($1, \"f\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_BOOLEAN:\n              strlcat($1, \"b\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_STRING:\n              strlcat($1, \"s\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_REGEXP:\n              strlcat($1, \"r\", MAX_FUNCTION_ARGS);\n              break;\n          }\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $1;\n      }\n    ;\n\n\nregexp\n    : _REGEXP_\n      {\n        SIZED_STRING* sized_string = $1;\n        RE* re;\n        RE_ERROR error;\n\n        int re_flags = 0;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_NO_CASE)\n          re_flags |= RE_FLAGS_NO_CASE;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_DOT_ALL)\n          re_flags |= RE_FLAGS_DOT_ALL;\n\n        compiler->last_result = yr_re_compile(\n            sized_string->c_string,\n            re_flags,\n            compiler->re_code_arena,\n            &re,\n            &error);\n\n        yr_free($1);\n\n        if (compiler->last_result == ERROR_INVALID_REGULAR_EXPRESSION)\n          yr_compiler_set_error_extra_info(compiler, error.message);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              re->root_node->forward_code,\n              NULL,\n              NULL);\n\n        yr_re_destroy(re);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_REGEXP;\n      }\n    ;\n\n\nboolean_expression\n    : expression\n      {\n        if ($1.type == EXPRESSION_TYPE_STRING)\n        {\n          if ($1.value.sized_string != NULL)\n          {\n            yywarning(yyscanner,\n              \"Using literal string \\\"%s\\\" in a boolean operation.\",\n              $1.value.sized_string->c_string);\n          }\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_STR_TO_BOOL, NULL);\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    ;\n\nexpression\n    : _TRUE_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _FALSE_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 0, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _MATCHES_ regexp\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_STRING, \"matches\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_REGEXP, \"matches\");\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit(\n              yyscanner,\n              OP_MATCHES,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _CONTAINS_ primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_STRING, \"contains\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_STRING, \"contains\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_CONTAINS, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _STRING_IDENTIFIER_\n      {\n        int result = yr_parser_reduce_string_identifier(\n            yyscanner,\n            $1,\n            OP_FOUND,\n            UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _STRING_IDENTIFIER_ _AT_ primary_expression\n      {\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"at\");\n\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_FOUND_AT, $3.value.integer);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _STRING_IDENTIFIER_ _IN_ range\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_FOUND_IN, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result!= ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _FOR_ for_expression error\n      {\n        if (compiler->loop_depth > 0)\n        {\n          compiler->loop_depth--;\n          compiler->loop_identifier[compiler->loop_depth] = NULL;\n        }\n      }\n    | _FOR_ for_expression _IDENTIFIER_ _IN_\n      {\n        int var_index;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n              ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        var_index = yr_parser_lookup_loop_variable(\n            yyscanner, $3);\n\n        if (var_index >= 0)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $3);\n\n          compiler->last_result = \\\n              ERROR_DUPLICATED_LOOP_IDENTIFIER;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Push end-of-list marker\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n      integer_set ':'\n      {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        // Clear counter for number of expressions evaluating\n        // to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        // Clear iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        if ($6 == INTEGER_SET_ENUMERATION)\n        {\n          // Pop the first integer\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Pop higher bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset + 3, &addr, NULL);\n\n          // Pop lower bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, NULL, NULL);\n        }\n\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = $3;\n        compiler->loop_depth++;\n      }\n      '(' boolean_expression ')'\n      {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // The value at the top of the stack is the result of\n        // evaluating the boolean expression, so it could be\n        // 0, 1 or UNDEFINED. Add this value to a counter\n        // keeping the number of expressions evaluating to true.\n        // If the value is UNDEFINED instruction OP_ADD_M\n        // does nothing.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        if ($6 == INTEGER_SET_ENUMERATION)\n        {\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JNUNDEF,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Increment lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_INCR_M, mem_offset, NULL, NULL);\n\n          // Push lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset, NULL, NULL);\n\n          // Push higher bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset + 3, NULL, NULL);\n\n          // Compare higher bound with lower bound, do loop again\n          // if lower bound is still lower or equal than higher bound\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JLE,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n        }\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at the top of the stack. Check if the quantifier\n        // is undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        yr_free($3);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _FOR_ for_expression _OF_ string_set ':'\n      {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n            ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        if (compiler->loop_for_of_mem_offset != -1)\n          compiler->last_result = \\\n            ERROR_NESTED_FOR_OF_LOOP;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        // Pop the first string.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n\n        compiler->loop_for_of_mem_offset = mem_offset;\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        compiler->loop_depth++;\n      }\n      '(' boolean_expression ')'\n      {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        compiler->loop_for_of_mem_offset = -1;\n\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // Increment counter by the value returned by the\n        // boolean expression (0 or 1). If the boolean expression\n        // returned UNDEFINED the OP_ADD_M won't do anything.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        // If next string is not undefined, go back to the\n        // beginning of the loop.\n        yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JNUNDEF,\n            compiler->loop_address[compiler->loop_depth],\n            NULL,\n            NULL);\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at top of the stack. Check if the quantifier is\n        // undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n\n      }\n    | for_expression _OF_ string_set\n      {\n        yr_parser_emit(yyscanner, OP_OF, NULL);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _NOT_ boolean_expression\n      {\n        yr_parser_emit(yyscanner, OP_NOT, NULL);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | boolean_expression _AND_\n      {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JFALSE,\n            0,          // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // create a fixup entry for the jump and push it in the stack\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n      boolean_expression\n      {\n        YR_FIXUP* fixup;\n        uint8_t* and_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the AND opcode and one for opcode following the\n        // AND. This is necessary because we need to compute the address for the\n        // opcode following the AND, and we don't want the AND in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_AND, &and_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the AND. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the AND opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the AND\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(and_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | boolean_expression _OR_\n      {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JTRUE,\n            0,         // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n      boolean_expression\n      {\n        YR_FIXUP* fixup;\n        uint8_t* or_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the OR opcode and one for opcode following the\n        // OR. This is necessary because we need to compute the address for the\n        // opcode following the OR, and we don't want the OR in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_OR, &or_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the OP_OR. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the OR opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the OR\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(or_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _LT_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _GT_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _LE_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<=\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _GE_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">=\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _EQ_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"==\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _NEQ_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"!=\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression\n      {\n        $$ = $1;\n      }\n    |'(' expression ')'\n      {\n        $$ = $2;\n      }\n    ;\n\n\ninteger_set\n    : '(' integer_enumeration ')'  { $$ = INTEGER_SET_ENUMERATION; }\n    | range                        { $$ = INTEGER_SET_RANGE; }\n    ;\n\n\nrange\n    : '(' primary_expression _DOT_DOT_  primary_expression ')'\n      {\n        if ($2.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's lower bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        if ($4.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's upper bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\ninteger_enumeration\n    : primary_expression\n      {\n        if ($1.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | integer_enumeration ',' primary_expression\n      {\n        if ($3.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nstring_set\n    : '('\n      {\n        // Push end-of-list marker\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n      string_enumeration ')'\n    | _THEM_\n      {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n        yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nstring_enumeration\n    : string_enumeration_item\n    | string_enumeration ',' string_enumeration_item\n    ;\n\n\nstring_enumeration_item\n    : _STRING_IDENTIFIER_\n      {\n        yr_parser_emit_pushes_for_strings(yyscanner, $1);\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | _STRING_IDENTIFIER_WITH_WILDCARD_\n      {\n        yr_parser_emit_pushes_for_strings(yyscanner, $1);\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nfor_expression\n    : primary_expression\n    | _ALL_\n      {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n    | _ANY_\n      {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);\n      }\n    ;\n\n\nprimary_expression\n    : '(' primary_expression ')'\n      {\n        $$ = $2;\n      }\n    | _FILESIZE_\n      {\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_FILESIZE, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _ENTRYPOINT_\n      {\n        yywarning(yyscanner,\n            \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"\n            \"function from PE module instead.\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_ENTRYPOINT, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _INTEGER_FUNCTION_ '(' primary_expression ')'\n      {\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");\n\n        // _INTEGER_FUNCTION_ could be any of int8, int16, int32, uint8,\n        // uint32, etc. $1 contains an index that added to OP_READ_INT results\n        // in the proper OP_INTXX opcode.\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, (uint8_t) (OP_READ_INT + $1), NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _NUMBER_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, $1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = $1;\n      }\n    | _DOUBLE_\n      {\n        compiler->last_result = yr_parser_emit_with_arg_double(\n            yyscanner, OP_PUSH, $1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_FLOAT;\n      }\n    | _TEXT_STRING_\n      {\n        SIZED_STRING* sized_string;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->sz_arena,\n            $1,\n            $1->length + sizeof(SIZED_STRING),\n            (void**) &sized_string);\n\n        yr_free($1);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              sized_string,\n              NULL,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_STRING;\n        $$.value.sized_string = sized_string;\n      }\n    | _STRING_COUNT_\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_COUNT, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_OFFSET_ '[' primary_expression ']'\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_OFFSET, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_OFFSET_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, $1, OP_OFFSET, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_LENGTH_ '[' primary_expression ']'\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_LENGTH, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_LENGTH_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, $1, OP_LENGTH, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | identifier\n      {\n        if ($1.type == EXPRESSION_TYPE_INTEGER)  // loop identifier\n        {\n          $$.type = EXPRESSION_TYPE_INTEGER;\n          $$.value.integer = UNDEFINED;\n        }\n        else if ($1.type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier\n        {\n          $$.type = EXPRESSION_TYPE_BOOLEAN;\n          $$.value.integer = UNDEFINED;\n        }\n        else if ($1.type == EXPRESSION_TYPE_OBJECT)\n        {\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_OBJ_VALUE, NULL);\n\n          switch($1.value.object->type)\n          {\n            case OBJECT_TYPE_INTEGER:\n              $$.type = EXPRESSION_TYPE_INTEGER;\n              $$.value.integer = UNDEFINED;\n              break;\n            case OBJECT_TYPE_FLOAT:\n              $$.type = EXPRESSION_TYPE_FLOAT;\n              break;\n            case OBJECT_TYPE_STRING:\n              $$.type = EXPRESSION_TYPE_STRING;\n              $$.value.sized_string = NULL;\n              break;\n            default:\n              yr_compiler_set_error_extra_info_fmt(\n                  compiler,\n                  \"wrong usage of identifier \\\"%s\\\"\",\n                  $1.identifier);\n              compiler->last_result = ERROR_WRONG_TYPE;\n          }\n        }\n        else\n        {\n          assert(FALSE);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | '-' primary_expression %prec UNARY_MINUS\n      {\n        CHECK_TYPE($2, EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");\n\n        if ($2.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.type = EXPRESSION_TYPE_INTEGER;\n          $$.value.integer = ($2.value.integer == UNDEFINED) ?\n              UNDEFINED : -($2.value.integer);\n          compiler->last_result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);\n        }\n        else if ($2.type == EXPRESSION_TYPE_FLOAT)\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n          compiler->last_result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | primary_expression '+' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"+\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.value.integer = OPERATION(+, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '-' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"-\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.value.integer = OPERATION(-, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '*' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"*\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.value.integer = OPERATION(*, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '\\\\' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"\\\\\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          if ($3.value.integer != 0)\n          {\n            $$.value.integer = OPERATION(/, $1.value.integer, $3.value.integer);\n            $$.type = EXPRESSION_TYPE_INTEGER;\n          }\n          else\n          {\n            compiler->last_result = ERROR_DIVISION_BY_ZERO;\n            ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n          }\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '%' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"%\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"%\");\n\n        yr_parser_emit(yyscanner, OP_MOD, NULL);\n\n        if ($3.value.integer != 0)\n        {\n          $$.value.integer = OPERATION(%, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          compiler->last_result = ERROR_DIVISION_BY_ZERO;\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n      }\n    | primary_expression '^' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(^, $1.value.integer, $3.value.integer);\n      }\n    | primary_expression '&' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(&, $1.value.integer, $3.value.integer);\n      }\n    | primary_expression '|' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"|\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"|\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(|, $1.value.integer, $3.value.integer);\n      }\n    | '~' primary_expression\n      {\n        CHECK_TYPE($2, EXPRESSION_TYPE_INTEGER, \"~\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = ($2.value.integer == UNDEFINED) ?\n            UNDEFINED : ~($2.value.integer);\n      }\n    | primary_expression _SHIFT_LEFT_ primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"<<\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"<<\");\n\n        yr_parser_emit(yyscanner, OP_SHL, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(<<, $1.value.integer, $3.value.integer);\n      }\n    | primary_expression _SHIFT_RIGHT_ primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \">>\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \">>\");\n\n        yr_parser_emit(yyscanner, OP_SHR, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(>>, $1.value.integer, $3.value.integer);\n      }\n    | regexp\n      {\n        $$ = $1;\n      }\n    ;\n\n%%\n"], "fixing_code": ["/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */\n\n/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */\n\n/* Identify Bison output.  */\n#define YYBISON 1\n\n/* Bison version.  */\n#define YYBISON_VERSION \"3.0.4\"\n\n/* Skeleton name.  */\n#define YYSKELETON_NAME \"yacc.c\"\n\n/* Pure parsers.  */\n#define YYPURE 1\n\n/* Push parsers.  */\n#define YYPUSH 0\n\n/* Pull parsers.  */\n#define YYPULL 1\n\n\n/* Substitute the variable and function names.  */\n#define yyparse         yara_yyparse\n#define yylex           yara_yylex\n#define yyerror         yara_yyerror\n#define yydebug         yara_yydebug\n#define yynerrs         yara_yynerrs\n\n\n/* Copy the first part of user declarations.  */\n#line 30 \"grammar.y\" /* yacc.c:339  */\n\n\n\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n#include <stddef.h>\n\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/strutils.h>\n#include <yara/compiler.h>\n#include <yara/object.h>\n#include <yara/sizedstr.h>\n#include <yara/exec.h>\n#include <yara/error.h>\n#include <yara/mem.h>\n#include <yara/lexer.h>\n#include <yara/parser.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define INTEGER_SET_ENUMERATION   1\n#define INTEGER_SET_RANGE         2\n\n#define ERROR_IF(x) \\\n    if (x) \\\n    { \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    } \\\n\n\n#define CHECK_TYPE(expression, expected_type, op) \\\n    if (((expression.type) & (expected_type)) == 0) \\\n    { \\\n      switch(expression.type) \\\n      { \\\n        case EXPRESSION_TYPE_INTEGER: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"integer\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_FLOAT: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"float\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_STRING: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"string\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_BOOLEAN: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"boolean\\\" for \" op \" operator\"); \\\n          break; \\\n      } \\\n      compiler->last_result = ERROR_WRONG_TYPE; \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    }\n\n#line 139 \"grammar.c\" /* yacc.c:339  */\n\n# ifndef YY_NULLPTR\n#  if defined __cplusplus && 201103L <= __cplusplus\n#   define YY_NULLPTR nullptr\n#  else\n#   define YY_NULLPTR 0\n#  endif\n# endif\n\n/* Enabling verbose error messages.  */\n#ifdef YYERROR_VERBOSE\n# undef YYERROR_VERBOSE\n# define YYERROR_VERBOSE 1\n#else\n# define YYERROR_VERBOSE 0\n#endif\n\n/* In a future release of Bison, this section will be replaced\n   by #include \"y.tab.h\".  */\n#ifndef YY_YARA_YY_GRAMMAR_H_INCLUDED\n# define YY_YARA_YY_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int yara_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _DOT_DOT_ = 258,\n    _RULE_ = 259,\n    _PRIVATE_ = 260,\n    _GLOBAL_ = 261,\n    _META_ = 262,\n    _STRINGS_ = 263,\n    _CONDITION_ = 264,\n    _IDENTIFIER_ = 265,\n    _STRING_IDENTIFIER_ = 266,\n    _STRING_COUNT_ = 267,\n    _STRING_OFFSET_ = 268,\n    _STRING_LENGTH_ = 269,\n    _STRING_IDENTIFIER_WITH_WILDCARD_ = 270,\n    _NUMBER_ = 271,\n    _DOUBLE_ = 272,\n    _INTEGER_FUNCTION_ = 273,\n    _TEXT_STRING_ = 274,\n    _HEX_STRING_ = 275,\n    _REGEXP_ = 276,\n    _ASCII_ = 277,\n    _WIDE_ = 278,\n    _NOCASE_ = 279,\n    _FULLWORD_ = 280,\n    _AT_ = 281,\n    _FILESIZE_ = 282,\n    _ENTRYPOINT_ = 283,\n    _ALL_ = 284,\n    _ANY_ = 285,\n    _IN_ = 286,\n    _OF_ = 287,\n    _FOR_ = 288,\n    _THEM_ = 289,\n    _MATCHES_ = 290,\n    _CONTAINS_ = 291,\n    _IMPORT_ = 292,\n    _TRUE_ = 293,\n    _FALSE_ = 294,\n    _OR_ = 295,\n    _AND_ = 296,\n    _EQ_ = 297,\n    _NEQ_ = 298,\n    _LT_ = 299,\n    _LE_ = 300,\n    _GT_ = 301,\n    _GE_ = 302,\n    _SHIFT_LEFT_ = 303,\n    _SHIFT_RIGHT_ = 304,\n    _NOT_ = 305,\n    UNARY_MINUS = 306\n  };\n#endif\n/* Tokens.  */\n#define _DOT_DOT_ 258\n#define _RULE_ 259\n#define _PRIVATE_ 260\n#define _GLOBAL_ 261\n#define _META_ 262\n#define _STRINGS_ 263\n#define _CONDITION_ 264\n#define _IDENTIFIER_ 265\n#define _STRING_IDENTIFIER_ 266\n#define _STRING_COUNT_ 267\n#define _STRING_OFFSET_ 268\n#define _STRING_LENGTH_ 269\n#define _STRING_IDENTIFIER_WITH_WILDCARD_ 270\n#define _NUMBER_ 271\n#define _DOUBLE_ 272\n#define _INTEGER_FUNCTION_ 273\n#define _TEXT_STRING_ 274\n#define _HEX_STRING_ 275\n#define _REGEXP_ 276\n#define _ASCII_ 277\n#define _WIDE_ 278\n#define _NOCASE_ 279\n#define _FULLWORD_ 280\n#define _AT_ 281\n#define _FILESIZE_ 282\n#define _ENTRYPOINT_ 283\n#define _ALL_ 284\n#define _ANY_ 285\n#define _IN_ 286\n#define _OF_ 287\n#define _FOR_ 288\n#define _THEM_ 289\n#define _MATCHES_ 290\n#define _CONTAINS_ 291\n#define _IMPORT_ 292\n#define _TRUE_ 293\n#define _FALSE_ 294\n#define _OR_ 295\n#define _AND_ 296\n#define _EQ_ 297\n#define _NEQ_ 298\n#define _LT_ 299\n#define _LE_ 300\n#define _GT_ 301\n#define _GE_ 302\n#define _SHIFT_LEFT_ 303\n#define _SHIFT_RIGHT_ 304\n#define _NOT_ 305\n#define UNARY_MINUS 306\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 204 \"grammar.y\" /* yacc.c:355  */\n\n  EXPRESSION      expression;\n  SIZED_STRING*   sized_string;\n  char*           c_string;\n  int64_t         integer;\n  double          double_;\n  YR_STRING*      string;\n  YR_META*        meta;\n  YR_RULE*        rule;\n\n#line 292 \"grammar.c\" /* yacc.c:355  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint yara_yyparse (void *yyscanner, YR_COMPILER* compiler);\n\n#endif /* !YY_YARA_YY_GRAMMAR_H_INCLUDED  */\n\n/* Copy the second part of user declarations.  */\n\n#line 308 \"grammar.c\" /* yacc.c:358  */\n\n#ifdef short\n# undef short\n#endif\n\n#ifdef YYTYPE_UINT8\ntypedef YYTYPE_UINT8 yytype_uint8;\n#else\ntypedef unsigned char yytype_uint8;\n#endif\n\n#ifdef YYTYPE_INT8\ntypedef YYTYPE_INT8 yytype_int8;\n#else\ntypedef signed char yytype_int8;\n#endif\n\n#ifdef YYTYPE_UINT16\ntypedef YYTYPE_UINT16 yytype_uint16;\n#else\ntypedef unsigned short int yytype_uint16;\n#endif\n\n#ifdef YYTYPE_INT16\ntypedef YYTYPE_INT16 yytype_int16;\n#else\ntypedef short int yytype_int16;\n#endif\n\n#ifndef YYSIZE_T\n# ifdef __SIZE_TYPE__\n#  define YYSIZE_T __SIZE_TYPE__\n# elif defined size_t\n#  define YYSIZE_T size_t\n# elif ! defined YYSIZE_T\n#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYSIZE_T size_t\n# else\n#  define YYSIZE_T unsigned int\n# endif\n#endif\n\n#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)\n\n#ifndef YY_\n# if defined YYENABLE_NLS && YYENABLE_NLS\n#  if ENABLE_NLS\n#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */\n#   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)\n#  endif\n# endif\n# ifndef YY_\n#  define YY_(Msgid) Msgid\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE\n# if (defined __GNUC__                                               \\\n      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\\n     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C\n#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)\n# else\n#  define YY_ATTRIBUTE(Spec) /* empty */\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE_PURE\n# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))\n#endif\n\n#ifndef YY_ATTRIBUTE_UNUSED\n# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))\n#endif\n\n#if !defined _Noreturn \\\n     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)\n# if defined _MSC_VER && 1200 <= _MSC_VER\n#  define _Noreturn __declspec (noreturn)\n# else\n#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))\n# endif\n#endif\n\n/* Suppress unused-variable warnings by \"using\" E.  */\n#if ! defined lint || defined __GNUC__\n# define YYUSE(E) ((void) (E))\n#else\n# define YYUSE(E) /* empty */\n#endif\n\n#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__\n/* Suppress an incorrect diagnostic about yylval being uninitialized.  */\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\\n    _Pragma (\"GCC diagnostic push\") \\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n    _Pragma (\"GCC diagnostic pop\")\n#else\n# define YY_INITIAL_VALUE(Value) Value\n#endif\n#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END\n#endif\n#ifndef YY_INITIAL_VALUE\n# define YY_INITIAL_VALUE(Value) /* Nothing. */\n#endif\n\n\n#if ! defined yyoverflow || YYERROR_VERBOSE\n\n/* The parser invokes alloca or malloc; define the necessary symbols.  */\n\n# ifdef YYSTACK_USE_ALLOCA\n#  if YYSTACK_USE_ALLOCA\n#   ifdef __GNUC__\n#    define YYSTACK_ALLOC __builtin_alloca\n#   elif defined __BUILTIN_VA_ARG_INCR\n#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */\n#   elif defined _AIX\n#    define YYSTACK_ALLOC __alloca\n#   elif defined _MSC_VER\n#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */\n#    define alloca _alloca\n#   else\n#    define YYSTACK_ALLOC alloca\n#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS\n#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */\n#     ifndef EXIT_SUCCESS\n#      define EXIT_SUCCESS 0\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n# ifdef YYSTACK_ALLOC\n   /* Pacify GCC's 'empty if-body' warning.  */\n#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n    /* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */\n#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */\n#  endif\n# else\n#  define YYSTACK_ALLOC YYMALLOC\n#  define YYSTACK_FREE YYFREE\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM\n#  endif\n#  if (defined __cplusplus && ! defined EXIT_SUCCESS \\\n       && ! ((defined YYMALLOC || defined malloc) \\\n             && (defined YYFREE || defined free)))\n#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n#   ifndef EXIT_SUCCESS\n#    define EXIT_SUCCESS 0\n#   endif\n#  endif\n#  ifndef YYMALLOC\n#   define YYMALLOC malloc\n#   if ! defined malloc && ! defined EXIT_SUCCESS\nvoid *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n#  ifndef YYFREE\n#   define YYFREE free\n#   if ! defined free && ! defined EXIT_SUCCESS\nvoid free (void *); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n# endif\n#endif /* ! defined yyoverflow || YYERROR_VERBOSE */\n\n\n#if (! defined yyoverflow \\\n     && (! defined __cplusplus \\\n         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))\n\n/* A type that is properly aligned for any stack member.  */\nunion yyalloc\n{\n  yytype_int16 yyss_alloc;\n  YYSTYPE yyvs_alloc;\n};\n\n/* The size of the maximum gap between one aligned stack and the next.  */\n# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)\n\n/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */\n# define YYSTACK_BYTES(N) \\\n     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\\n      + YYSTACK_GAP_MAXIMUM)\n\n# define YYCOPY_NEEDED 1\n\n/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */\n# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\\n    do                                                                  \\\n      {                                                                 \\\n        YYSIZE_T yynewbytes;                                            \\\n        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\\n        Stack = &yyptr->Stack_alloc;                                    \\\n        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\\n        yyptr += yynewbytes / sizeof (*yyptr);                          \\\n      }                                                                 \\\n    while (0)\n\n#endif\n\n#if defined YYCOPY_NEEDED && YYCOPY_NEEDED\n/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */\n# ifndef YYCOPY\n#  if defined __GNUC__ && 1 < __GNUC__\n#   define YYCOPY(Dst, Src, Count) \\\n      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))\n#  else\n#   define YYCOPY(Dst, Src, Count)              \\\n      do                                        \\\n        {                                       \\\n          YYSIZE_T yyi;                         \\\n          for (yyi = 0; yyi < (Count); yyi++)   \\\n            (Dst)[yyi] = (Src)[yyi];            \\\n        }                                       \\\n      while (0)\n#  endif\n# endif\n#endif /* !YYCOPY_NEEDED */\n\n/* YYFINAL -- State number of the termination state.  */\n#define YYFINAL  2\n/* YYLAST -- Last index in YYTABLE.  */\n#define YYLAST   406\n\n/* YYNTOKENS -- Number of terminals.  */\n#define YYNTOKENS  72\n/* YYNNTS -- Number of nonterminals.  */\n#define YYNNTS  41\n/* YYNRULES -- Number of rules.  */\n#define YYNRULES  122\n/* YYNSTATES -- Number of states.  */\n#define YYNSTATES  210\n\n/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */\n#define YYUNDEFTOK  2\n#define YYMAXUTOK   307\n\n#define YYTRANSLATE(YYX)                                                \\\n  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)\n\n/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */\nstatic const yytype_uint8 yytranslate[] =\n{\n       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,    57,    44,     2,\n      69,    70,    55,    53,    71,    54,    66,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,    64,     2,\n       2,    65,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,    67,    56,    68,    43,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,    62,    42,    63,    59,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,\n       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,\n      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,\n      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,\n      35,    36,    37,    38,    39,    40,    41,    45,    46,    47,\n      48,    49,    50,    51,    52,    58,    60,    61\n};\n\n#if YYDEBUG\n  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\nstatic const yytype_uint16 yyrline[] =\n{\n       0,   218,   218,   220,   221,   222,   223,   224,   229,   242,\n     251,   241,   274,   277,   305,   308,   335,   340,   341,   346,\n     347,   353,   356,   374,   387,   424,   425,   430,   446,   459,\n     472,   485,   502,   503,   509,   508,   524,   523,   539,   553,\n     554,   559,   560,   561,   562,   567,   652,   698,   756,   801,\n     802,   806,   833,   871,   917,   939,   948,   957,   972,   984,\n     998,  1011,  1022,  1033,  1063,  1032,  1177,  1176,  1255,  1261,\n    1268,  1267,  1330,  1329,  1390,  1399,  1408,  1417,  1426,  1435,\n    1444,  1448,  1456,  1457,  1462,  1484,  1496,  1512,  1511,  1517,\n    1528,  1529,  1534,  1541,  1552,  1553,  1557,  1565,  1569,  1579,\n    1593,  1609,  1619,  1628,  1653,  1665,  1677,  1693,  1705,  1721,\n    1766,  1785,  1803,  1821,  1839,  1865,  1883,  1893,  1903,  1913,\n    1923,  1933,  1943\n};\n#endif\n\n#if YYDEBUG || YYERROR_VERBOSE || 0\n/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */\nstatic const char *const yytname[] =\n{\n  \"$end\", \"error\", \"$undefined\", \"_DOT_DOT_\", \"_RULE_\", \"_PRIVATE_\",\n  \"_GLOBAL_\", \"_META_\", \"_STRINGS_\", \"_CONDITION_\", \"_IDENTIFIER_\",\n  \"_STRING_IDENTIFIER_\", \"_STRING_COUNT_\", \"_STRING_OFFSET_\",\n  \"_STRING_LENGTH_\", \"_STRING_IDENTIFIER_WITH_WILDCARD_\", \"_NUMBER_\",\n  \"_DOUBLE_\", \"_INTEGER_FUNCTION_\", \"_TEXT_STRING_\", \"_HEX_STRING_\",\n  \"_REGEXP_\", \"_ASCII_\", \"_WIDE_\", \"_NOCASE_\", \"_FULLWORD_\", \"_AT_\",\n  \"_FILESIZE_\", \"_ENTRYPOINT_\", \"_ALL_\", \"_ANY_\", \"_IN_\", \"_OF_\", \"_FOR_\",\n  \"_THEM_\", \"_MATCHES_\", \"_CONTAINS_\", \"_IMPORT_\", \"_TRUE_\", \"_FALSE_\",\n  \"_OR_\", \"_AND_\", \"'|'\", \"'^'\", \"'&'\", \"_EQ_\", \"_NEQ_\", \"_LT_\", \"_LE_\",\n  \"_GT_\", \"_GE_\", \"_SHIFT_LEFT_\", \"_SHIFT_RIGHT_\", \"'+'\", \"'-'\", \"'*'\",\n  \"'\\\\\\\\'\", \"'%'\", \"_NOT_\", \"'~'\", \"UNARY_MINUS\", \"\\\"include\\\"\", \"'{'\",\n  \"'}'\", \"':'\", \"'='\", \"'.'\", \"'['\", \"']'\", \"'('\", \"')'\", \"','\", \"$accept\",\n  \"rules\", \"import\", \"rule\", \"@1\", \"$@2\", \"meta\", \"strings\", \"condition\",\n  \"rule_modifiers\", \"rule_modifier\", \"tags\", \"tag_list\",\n  \"meta_declarations\", \"meta_declaration\", \"string_declarations\",\n  \"string_declaration\", \"$@3\", \"$@4\", \"string_modifiers\",\n  \"string_modifier\", \"identifier\", \"arguments\", \"arguments_list\", \"regexp\",\n  \"boolean_expression\", \"expression\", \"$@5\", \"$@6\", \"$@7\", \"$@8\", \"$@9\",\n  \"integer_set\", \"range\", \"integer_enumeration\", \"string_set\", \"$@10\",\n  \"string_enumeration\", \"string_enumeration_item\", \"for_expression\",\n  \"primary_expression\", YY_NULLPTR\n};\n#endif\n\n# ifdef YYPRINT\n/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */\nstatic const yytype_uint16 yytoknum[] =\n{\n       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,\n     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,\n     295,   296,   124,    94,    38,   297,   298,   299,   300,   301,\n     302,   303,   304,    43,    45,    42,    92,    37,   305,   126,\n     306,   307,   123,   125,    58,    61,    46,    91,    93,    40,\n      41,    44\n};\n# endif\n\n#define YYPACT_NINF -73\n\n#define yypact_value_is_default(Yystate) \\\n  (!!((Yystate) == (-73)))\n\n#define YYTABLE_NINF -95\n\n#define yytable_value_is_error(Yytable_value) \\\n  0\n\n  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */\nstatic const yytype_int16 yypact[] =\n{\n     -73,    90,   -73,   -32,   -10,   -73,   -73,    93,   -73,   -73,\n     -73,   -73,     1,   -73,   -73,   -73,   -73,   -49,     7,   -36,\n     -73,    20,    26,   -73,   -28,    92,    46,     4,   -73,    40,\n      46,   -73,   100,   119,    16,   -73,    72,   100,   -73,    77,\n      83,   -73,   -73,   -73,   -73,   134,    59,   -73,    48,   -73,\n     -73,   -73,   133,   136,   -73,   -18,   -73,    88,    95,   -73,\n     -73,    91,   -73,   -73,   -73,   -73,   -73,   -73,   102,   -73,\n     -73,   126,    48,   126,    48,   -44,   -73,    85,   -73,   127,\n     297,   -73,   -73,   126,   110,   126,   126,   126,   126,     2,\n     313,   -73,   -73,   -73,    85,   111,   154,   172,   126,    48,\n     -73,   -73,    -6,   162,   126,   126,   126,   126,   126,   126,\n     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,\n     126,    60,    60,   313,   126,   -73,   234,   252,   174,   194,\n     -73,   153,    -6,   -73,   -73,   -73,   270,   117,   120,   108,\n      48,    48,   -73,   -73,   -73,   -73,   313,   328,   342,   349,\n     313,   313,   313,   313,   313,   313,   113,   113,    53,    53,\n     -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   121,   -73,\n     -73,   -73,   -73,   124,   -73,   -73,    48,   151,   -73,    -1,\n     126,   125,   -73,   108,   -73,   -73,    18,   -73,   214,   126,\n     129,   -73,   143,   -73,    -1,   -73,    63,   121,   -73,    48,\n     -73,   -73,   126,   144,    31,   313,    48,   -73,    33,   -73\n};\n\n  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */\nstatic const yytype_uint8 yydefact[] =\n{\n       2,     0,     1,    17,     0,     4,     3,     0,     7,     6,\n       5,     8,     0,    19,    20,    18,     9,    21,     0,     0,\n      23,    22,    12,    24,     0,    14,     0,     0,    10,     0,\n      13,    25,     0,     0,     0,    26,     0,    15,    32,     0,\n       0,    28,    27,    30,    31,     0,    34,    33,     0,    11,\n      29,    38,     0,     0,    45,    59,   104,   106,   108,   101,\n     102,     0,   103,    53,    98,    99,    95,    96,     0,    55,\n      56,     0,     0,     0,     0,   109,   122,    16,    54,     0,\n      80,    39,    39,     0,     0,     0,     0,     0,     0,     0,\n      94,   110,    69,   119,     0,    54,    80,     0,     0,    49,\n      72,    70,     0,     0,     0,     0,     0,     0,     0,     0,\n       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n       0,    35,    37,    60,     0,    61,     0,     0,     0,     0,\n      62,     0,     0,    81,    97,    46,     0,     0,    50,    51,\n       0,     0,    89,    87,    68,    57,    58,   118,   116,   117,\n      78,    79,    74,    76,    75,    77,   120,   121,   111,   112,\n     113,   114,   115,    42,    41,    43,    44,    40,     0,   105,\n     107,   100,    63,     0,    47,    48,     0,    73,    71,     0,\n       0,     0,    66,    52,    92,    93,     0,    90,     0,     0,\n       0,    83,     0,    88,     0,    84,     0,    85,    64,     0,\n      91,    82,     0,     0,     0,    86,     0,    67,     0,    65\n};\n\n  /* YYPGOTO[NTERM-NUM].  */\nstatic const yytype_int16 yypgoto[] =\n{\n     -73,   -73,   211,   212,   -73,   -73,   -73,   -73,   -73,   -73,\n     -73,   -73,   -73,   -73,   189,   -73,   183,   -73,   -73,   139,\n     -73,   -73,   -73,   -73,   130,   -48,   -72,   -73,   -73,   -73,\n     -73,   -73,   -73,    41,   -73,   103,   -73,   -73,    29,   164,\n     -67\n};\n\n  /* YYDEFGOTO[NTERM-NUM].  */\nstatic const yytype_int16 yydefgoto[] =\n{\n      -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,\n      15,    19,    21,    30,    31,    37,    38,    52,    53,   121,\n     167,    75,   137,   138,    76,    94,    78,   181,   203,   192,\n     141,   140,   190,   125,   196,   144,   179,   186,   187,    79,\n      80\n};\n\n  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */\nstatic const yytype_int16 yytable[] =\n{\n      77,    90,    95,   130,    91,     4,    93,    96,    83,    11,\n     184,    16,   131,    84,   185,    18,   123,    20,   126,   127,\n     128,   129,    97,    98,    92,    99,    22,   139,   142,     8,\n      23,   136,    41,    24,   132,    42,    26,   146,   147,   148,\n     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,\n     159,   160,   161,   162,    43,    44,    29,   168,    54,    55,\n      56,    57,    58,   143,    59,    60,    61,    62,    32,    63,\n      45,   100,   101,   100,   101,    64,    65,    66,    67,    51,\n     -36,    68,   163,   164,   165,   166,    69,    70,   193,   194,\n       2,     3,   177,   178,   -17,   -17,   -17,    12,    13,    14,\n      27,   207,    71,   209,   183,    34,    72,    73,   118,   119,\n     120,    36,    54,   188,    56,    57,    58,    74,    59,    60,\n      61,    62,   197,    63,   180,   100,   101,     4,    39,    64,\n      65,    66,    67,   201,   202,   205,    54,    46,    56,    57,\n      58,    48,    59,    60,    61,    62,    49,    63,   -54,   -54,\n      50,   204,    81,    64,    65,    85,    71,    82,   208,   102,\n      87,    73,    86,   105,   106,   107,   116,   117,   118,   119,\n     120,    88,   114,   115,   116,   117,   118,   119,   120,   124,\n      71,   133,   135,    63,   172,    73,   -94,   175,   182,   103,\n     104,   176,   101,   198,   189,    88,   105,   106,   107,   108,\n     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,\n     119,   120,   199,   206,     9,    10,   105,   106,   107,    35,\n      47,   122,   191,   200,   134,   114,   115,   116,   117,   118,\n     119,   120,    89,   145,     0,   173,   105,   106,   107,     0,\n       0,     0,     0,     0,   171,   114,   115,   116,   117,   118,\n     119,   120,     0,     0,     0,     0,   105,   106,   107,     0,\n       0,     0,     0,     0,   134,   114,   115,   116,   117,   118,\n     119,   120,     0,     0,     0,     0,   105,   106,   107,     0,\n       0,     0,     0,     0,   195,   114,   115,   116,   117,   118,\n     119,   120,     0,     0,   105,   106,   107,     0,     0,     0,\n       0,     0,   169,   114,   115,   116,   117,   118,   119,   120,\n       0,     0,   105,   106,   107,     0,     0,     0,     0,     0,\n     170,   114,   115,   116,   117,   118,   119,   120,     0,   -94,\n       0,     0,   103,   104,     0,     0,     0,     0,   174,   105,\n     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,\n     116,   117,   118,   119,   120,   105,   106,   107,     0,     0,\n       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,\n     120,   106,   107,     0,     0,     0,     0,     0,     0,   114,\n     115,   116,   117,   118,   119,   120,   107,     0,     0,     0,\n       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,\n     114,   115,   116,   117,   118,   119,   120\n};\n\nstatic const yytype_int16 yycheck[] =\n{\n      48,    68,    74,     1,    71,    37,    73,    74,    26,    19,\n      11,    10,    10,    31,    15,    64,    83,    10,    85,    86,\n      87,    88,    66,    67,    72,    69,    62,    99,    34,    61,\n      10,    98,    16,     7,    32,    19,    64,   104,   105,   106,\n     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,\n     117,   118,   119,   120,    38,    39,    10,   124,    10,    11,\n      12,    13,    14,    69,    16,    17,    18,    19,    64,    21,\n      54,    40,    41,    40,    41,    27,    28,    29,    30,    20,\n      21,    33,    22,    23,    24,    25,    38,    39,    70,    71,\n       0,     1,   140,   141,     4,     5,     6,     4,     5,     6,\n       8,    70,    54,    70,   176,    65,    58,    59,    55,    56,\n      57,    11,    10,   180,    12,    13,    14,    69,    16,    17,\n      18,    19,   189,    21,     3,    40,    41,    37,     9,    27,\n      28,    29,    30,    70,    71,   202,    10,    65,    12,    13,\n      14,    64,    16,    17,    18,    19,    63,    21,    40,    41,\n      16,   199,    19,    27,    28,    67,    54,    21,   206,    32,\n      69,    59,    67,    42,    43,    44,    53,    54,    55,    56,\n      57,    69,    51,    52,    53,    54,    55,    56,    57,    69,\n      54,    70,    10,    21,    31,    59,    32,    70,    64,    35,\n      36,    71,    41,    64,    69,    69,    42,    43,    44,    45,\n      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n      56,    57,    69,    69,     3,     3,    42,    43,    44,    30,\n      37,    82,   181,   194,    70,    51,    52,    53,    54,    55,\n      56,    57,    68,   103,    -1,   132,    42,    43,    44,    -1,\n      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,\n      56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,\n      56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,\n      56,    57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,\n      -1,    -1,    68,    51,    52,    53,    54,    55,    56,    57,\n      -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,\n      68,    51,    52,    53,    54,    55,    56,    57,    -1,    32,\n      -1,    -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,\n      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,\n      53,    54,    55,    56,    57,    42,    43,    44,    -1,    -1,\n      -1,    -1,    -1,    -1,    51,    52,    53,    54,    55,    56,\n      57,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,\n      52,    53,    54,    55,    56,    57,    44,    -1,    -1,    -1,\n      -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57,\n      51,    52,    53,    54,    55,    56,    57\n};\n\n  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */\nstatic const yytype_uint8 yystos[] =\n{\n       0,    73,     0,     1,    37,    74,    75,    81,    61,    74,\n      75,    19,     4,     5,     6,    82,    10,    76,    64,    83,\n      10,    84,    62,    10,     7,    78,    64,     8,    79,    10,\n      85,    86,    64,    77,    65,    86,    11,    87,    88,     9,\n      80,    16,    19,    38,    39,    54,    65,    88,    64,    63,\n      16,    20,    89,    90,    10,    11,    12,    13,    14,    16,\n      17,    18,    19,    21,    27,    28,    29,    30,    33,    38,\n      39,    54,    58,    59,    69,    93,    96,    97,    98,   111,\n     112,    19,    21,    26,    31,    67,    67,    69,    69,   111,\n     112,   112,    97,   112,    97,    98,   112,    66,    67,    69,\n      40,    41,    32,    35,    36,    42,    43,    44,    45,    46,\n      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n      57,    91,    91,   112,    69,   105,   112,   112,   112,   112,\n       1,    10,    32,    70,    70,    10,   112,    94,    95,    98,\n     103,   102,    34,    69,   107,    96,   112,   112,   112,   112,\n     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,\n     112,   112,   112,    22,    23,    24,    25,    92,   112,    68,\n      68,    70,    31,   107,    68,    70,    71,    97,    97,   108,\n       3,    99,    64,    98,    11,    15,   109,   110,   112,    69,\n     104,   105,   101,    70,    71,    70,   106,   112,    64,    69,\n     110,    70,    71,   100,    97,   112,    69,    70,    97,    70\n};\n\n  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */\nstatic const yytype_uint8 yyr1[] =\n{\n       0,    72,    73,    73,    73,    73,    73,    73,    74,    76,\n      77,    75,    78,    78,    79,    79,    80,    81,    81,    82,\n      82,    83,    83,    84,    84,    85,    85,    86,    86,    86,\n      86,    86,    87,    87,    89,    88,    90,    88,    88,    91,\n      91,    92,    92,    92,    92,    93,    93,    93,    93,    94,\n      94,    95,    95,    96,    97,    98,    98,    98,    98,    98,\n      98,    98,    98,    99,   100,    98,   101,    98,    98,    98,\n     102,    98,   103,    98,    98,    98,    98,    98,    98,    98,\n      98,    98,   104,   104,   105,   106,   106,   108,   107,   107,\n     109,   109,   110,   110,   111,   111,   111,   112,   112,   112,\n     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,\n     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,\n     112,   112,   112\n};\n\n  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */\nstatic const yytype_uint8 yyr2[] =\n{\n       0,     2,     0,     2,     2,     3,     3,     3,     2,     0,\n       0,    11,     0,     3,     0,     3,     3,     0,     2,     1,\n       1,     0,     2,     1,     2,     1,     2,     3,     3,     4,\n       3,     3,     1,     2,     0,     5,     0,     5,     3,     0,\n       2,     1,     1,     1,     1,     1,     3,     4,     4,     0,\n       1,     1,     3,     1,     1,     1,     1,     3,     3,     1,\n       3,     3,     3,     0,     0,    11,     0,     9,     3,     2,\n       0,     4,     0,     4,     3,     3,     3,     3,     3,     3,\n       1,     3,     3,     1,     5,     1,     3,     0,     4,     1,\n       1,     3,     1,     1,     1,     1,     1,     3,     1,     1,\n       4,     1,     1,     1,     1,     4,     1,     4,     1,     1,\n       2,     3,     3,     3,     3,     3,     3,     3,     3,     2,\n       3,     3,     1\n};\n\n\n#define yyerrok         (yyerrstatus = 0)\n#define yyclearin       (yychar = YYEMPTY)\n#define YYEMPTY         (-2)\n#define YYEOF           0\n\n#define YYACCEPT        goto yyacceptlab\n#define YYABORT         goto yyabortlab\n#define YYERROR         goto yyerrorlab\n\n\n#define YYRECOVERING()  (!!yyerrstatus)\n\n#define YYBACKUP(Token, Value)                                  \\\ndo                                                              \\\n  if (yychar == YYEMPTY)                                        \\\n    {                                                           \\\n      yychar = (Token);                                         \\\n      yylval = (Value);                                         \\\n      YYPOPSTACK (yylen);                                       \\\n      yystate = *yyssp;                                         \\\n      goto yybackup;                                            \\\n    }                                                           \\\n  else                                                          \\\n    {                                                           \\\n      yyerror (yyscanner, compiler, YY_(\"syntax error: cannot back up\")); \\\n      YYERROR;                                                  \\\n    }                                                           \\\nwhile (0)\n\n/* Error token number */\n#define YYTERROR        1\n#define YYERRCODE       256\n\n\n\n/* Enable debugging if requested.  */\n#if YYDEBUG\n\n# ifndef YYFPRINTF\n#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYFPRINTF fprintf\n# endif\n\n# define YYDPRINTF(Args)                        \\\ndo {                                            \\\n  if (yydebug)                                  \\\n    YYFPRINTF Args;                             \\\n} while (0)\n\n/* This macro is provided for backward compatibility. */\n#ifndef YY_LOCATION_PRINT\n# define YY_LOCATION_PRINT(File, Loc) ((void) 0)\n#endif\n\n\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\\ndo {                                                                      \\\n  if (yydebug)                                                            \\\n    {                                                                     \\\n      YYFPRINTF (stderr, \"%s \", Title);                                   \\\n      yy_symbol_print (stderr,                                            \\\n                  Type, Value, yyscanner, compiler); \\\n      YYFPRINTF (stderr, \"\\n\");                                           \\\n    }                                                                     \\\n} while (0)\n\n\n/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/\n\nstatic void\nyy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)\n{\n  FILE *yyo = yyoutput;\n  YYUSE (yyo);\n  YYUSE (yyscanner);\n  YYUSE (compiler);\n  if (!yyvaluep)\n    return;\n# ifdef YYPRINT\n  if (yytype < YYNTOKENS)\n    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);\n# endif\n  YYUSE (yytype);\n}\n\n\n/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/\n\nstatic void\nyy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)\n{\n  YYFPRINTF (yyoutput, \"%s %s (\",\n             yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);\n\n  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, compiler);\n  YYFPRINTF (yyoutput, \")\");\n}\n\n/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/\n\nstatic void\nyy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)\n{\n  YYFPRINTF (stderr, \"Stack now\");\n  for (; yybottom <= yytop; yybottom++)\n    {\n      int yybot = *yybottom;\n      YYFPRINTF (stderr, \" %d\", yybot);\n    }\n  YYFPRINTF (stderr, \"\\n\");\n}\n\n# define YY_STACK_PRINT(Bottom, Top)                            \\\ndo {                                                            \\\n  if (yydebug)                                                  \\\n    yy_stack_print ((Bottom), (Top));                           \\\n} while (0)\n\n\n/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/\n\nstatic void\nyy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, YR_COMPILER* compiler)\n{\n  unsigned long int yylno = yyrline[yyrule];\n  int yynrhs = yyr2[yyrule];\n  int yyi;\n  YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n             yyrule - 1, yylno);\n  /* The symbols being reduced.  */\n  for (yyi = 0; yyi < yynrhs; yyi++)\n    {\n      YYFPRINTF (stderr, \"   $%d = \", yyi + 1);\n      yy_symbol_print (stderr,\n                       yystos[yyssp[yyi + 1 - yynrhs]],\n                       &(yyvsp[(yyi + 1) - (yynrhs)])\n                                              , yyscanner, compiler);\n      YYFPRINTF (stderr, \"\\n\");\n    }\n}\n\n# define YY_REDUCE_PRINT(Rule)          \\\ndo {                                    \\\n  if (yydebug)                          \\\n    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, compiler); \\\n} while (0)\n\n/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */\nint yydebug;\n#else /* !YYDEBUG */\n# define YYDPRINTF(Args)\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)\n# define YY_STACK_PRINT(Bottom, Top)\n# define YY_REDUCE_PRINT(Rule)\n#endif /* !YYDEBUG */\n\n\n/* YYINITDEPTH -- initial size of the parser's stacks.  */\n#ifndef YYINITDEPTH\n# define YYINITDEPTH 200\n#endif\n\n/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */\n\n#ifndef YYMAXDEPTH\n# define YYMAXDEPTH 10000\n#endif\n\n\n#if YYERROR_VERBOSE\n\n# ifndef yystrlen\n#  if defined __GLIBC__ && defined _STRING_H\n#   define yystrlen strlen\n#  else\n/* Return the length of YYSTR.  */\nstatic YYSIZE_T\nyystrlen (const char *yystr)\n{\n  YYSIZE_T yylen;\n  for (yylen = 0; yystr[yylen]; yylen++)\n    continue;\n  return yylen;\n}\n#  endif\n# endif\n\n# ifndef yystpcpy\n#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE\n#   define yystpcpy stpcpy\n#  else\n/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */\nstatic char *\nyystpcpy (char *yydest, const char *yysrc)\n{\n  char *yyd = yydest;\n  const char *yys = yysrc;\n\n  while ((*yyd++ = *yys++) != '\\0')\n    continue;\n\n  return yyd - 1;\n}\n#  endif\n# endif\n\n# ifndef yytnamerr\n/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */\nstatic YYSIZE_T\nyytnamerr (char *yyres, const char *yystr)\n{\n  if (*yystr == '\"')\n    {\n      YYSIZE_T yyn = 0;\n      char const *yyp = yystr;\n\n      for (;;)\n        switch (*++yyp)\n          {\n          case '\\'':\n          case ',':\n            goto do_not_strip_quotes;\n\n          case '\\\\':\n            if (*++yyp != '\\\\')\n              goto do_not_strip_quotes;\n            /* Fall through.  */\n          default:\n            if (yyres)\n              yyres[yyn] = *yyp;\n            yyn++;\n            break;\n\n          case '\"':\n            if (yyres)\n              yyres[yyn] = '\\0';\n            return yyn;\n          }\n    do_not_strip_quotes: ;\n    }\n\n  if (! yyres)\n    return yystrlen (yystr);\n\n  return yystpcpy (yyres, yystr) - yyres;\n}\n# endif\n\n/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */\nstatic int\nyysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,\n                yytype_int16 *yyssp, int yytoken)\n{\n  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);\n  YYSIZE_T yysize = yysize0;\n  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };\n  /* Internationalized format string. */\n  const char *yyformat = YY_NULLPTR;\n  /* Arguments of yyformat. */\n  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];\n  /* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */\n  int yycount = 0;\n\n  /* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */\n  if (yytoken != YYEMPTY)\n    {\n      int yyn = yypact[*yyssp];\n      yyarg[yycount++] = yytname[yytoken];\n      if (!yypact_value_is_default (yyn))\n        {\n          /* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */\n          int yyxbegin = yyn < 0 ? -yyn : 0;\n          /* Stay within bounds of both yycheck and yytname.  */\n          int yychecklim = YYLAST - yyn + 1;\n          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;\n          int yyx;\n\n          for (yyx = yyxbegin; yyx < yyxend; ++yyx)\n            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR\n                && !yytable_value_is_error (yytable[yyx + yyn]))\n              {\n                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)\n                  {\n                    yycount = 1;\n                    yysize = yysize0;\n                    break;\n                  }\n                yyarg[yycount++] = yytname[yyx];\n                {\n                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);\n                  if (! (yysize <= yysize1\n                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n                    return 2;\n                  yysize = yysize1;\n                }\n              }\n        }\n    }\n\n  switch (yycount)\n    {\n# define YYCASE_(N, S)                      \\\n      case N:                               \\\n        yyformat = S;                       \\\n      break\n      YYCASE_(0, YY_(\"syntax error\"));\n      YYCASE_(1, YY_(\"syntax error, unexpected %s\"));\n      YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));\n      YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));\n      YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));\n      YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));\n# undef YYCASE_\n    }\n\n  {\n    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);\n    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n      return 2;\n    yysize = yysize1;\n  }\n\n  if (*yymsg_alloc < yysize)\n    {\n      *yymsg_alloc = 2 * yysize;\n      if (! (yysize <= *yymsg_alloc\n             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))\n        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;\n      return 1;\n    }\n\n  /* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */\n  {\n    char *yyp = *yymsg;\n    int yyi = 0;\n    while ((*yyp = *yyformat) != '\\0')\n      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)\n        {\n          yyp += yytnamerr (yyp, yyarg[yyi++]);\n          yyformat += 2;\n        }\n      else\n        {\n          yyp++;\n          yyformat++;\n        }\n  }\n  return 0;\n}\n#endif /* YYERROR_VERBOSE */\n\n/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/\n\nstatic void\nyydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, YR_COMPILER* compiler)\n{\n  YYUSE (yyvaluep);\n  YYUSE (yyscanner);\n  YYUSE (compiler);\n  if (!yymsg)\n    yymsg = \"Deleting\";\n  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  switch (yytype)\n    {\n          case 10: /* _IDENTIFIER_  */\n#line 194 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1339 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 11: /* _STRING_IDENTIFIER_  */\n#line 198 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1345 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 12: /* _STRING_COUNT_  */\n#line 195 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1351 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 13: /* _STRING_OFFSET_  */\n#line 196 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1357 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 14: /* _STRING_LENGTH_  */\n#line 197 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1363 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 15: /* _STRING_IDENTIFIER_WITH_WILDCARD_  */\n#line 199 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).c_string)); }\n#line 1369 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 19: /* _TEXT_STRING_  */\n#line 200 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).sized_string)); }\n#line 1375 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 20: /* _HEX_STRING_  */\n#line 201 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).sized_string)); }\n#line 1381 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 21: /* _REGEXP_  */\n#line 202 \"grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).sized_string)); }\n#line 1387 \"grammar.c\" /* yacc.c:1257  */\n        break;\n\n\n      default:\n        break;\n    }\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n}\n\n\n\n\n/*----------.\n| yyparse.  |\n`----------*/\n\nint\nyyparse (void *yyscanner, YR_COMPILER* compiler)\n{\n/* The lookahead symbol.  */\nint yychar;\n\n\n/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */\nYY_INITIAL_VALUE (static YYSTYPE yyval_default;)\nYYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n\n    /* Number of syntax errors so far.  */\n    int yynerrs;\n\n    int yystate;\n    /* Number of tokens to shift before error messages enabled.  */\n    int yyerrstatus;\n\n    /* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */\n\n    /* The state stack.  */\n    yytype_int16 yyssa[YYINITDEPTH];\n    yytype_int16 *yyss;\n    yytype_int16 *yyssp;\n\n    /* The semantic value stack.  */\n    YYSTYPE yyvsa[YYINITDEPTH];\n    YYSTYPE *yyvs;\n    YYSTYPE *yyvsp;\n\n    YYSIZE_T yystacksize;\n\n  int yyn;\n  int yyresult;\n  /* Lookahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  yyssp = yyss = yyssa;\n  yyvsp = yyvs = yyvsa;\n  yystacksize = YYINITDEPTH;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY; /* Cause a token to be read.  */\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n        /* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */\n        YYSTYPE *yyvs1 = yyvs;\n        yytype_int16 *yyss1 = yyss;\n\n        /* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */\n        yyoverflow (YY_(\"memory exhausted\"),\n                    &yyss1, yysize * sizeof (*yyssp),\n                    &yyvs1, yysize * sizeof (*yyvsp),\n                    &yystacksize);\n\n        yyss = yyss1;\n        yyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n        goto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n        yystacksize = YYMAXDEPTH;\n\n      {\n        yytype_int16 *yyss1 = yyss;\n        union yyalloc *yyptr =\n          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n        if (! yyptr)\n          goto yyexhaustedlab;\n        YYSTACK_RELOCATE (yyss_alloc, yyss);\n        YYSTACK_RELOCATE (yyvs_alloc, yyvs);\n#  undef YYSTACK_RELOCATE\n        if (yyss1 != yyssa)\n          YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n                  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n        YYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  if (yystate == YYFINAL)\n    YYACCEPT;\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to lookahead token.  */\n  yyn = yypact[yystate];\n  if (yypact_value_is_default (yyn))\n    goto yydefault;\n\n  /* Not known => get a lookahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = yylex (&yylval, yyscanner, compiler);\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yytable_value_is_error (yyn))\n        goto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the lookahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token.  */\n  yychar = YYEMPTY;\n\n  yystate = yyn;\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 8:\n#line 230 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int result = yr_parser_reduce_import(yyscanner, (yyvsp[0].sized_string));\n\n        yr_free((yyvsp[0].sized_string));\n\n        ERROR_IF(result != ERROR_SUCCESS);\n      }\n#line 1661 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 9:\n#line 242 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(\n            yyscanner, (int32_t) (yyvsp[-2].integer), (yyvsp[0].c_string));\n\n        ERROR_IF(rule == NULL);\n\n        (yyval.rule) = rule;\n      }\n#line 1674 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 10:\n#line 251 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_RULE* rule = (yyvsp[-4].rule); // rule created in phase 1\n\n        rule->tags = (yyvsp[-3].c_string);\n        rule->metas = (yyvsp[-1].meta);\n        rule->strings = (yyvsp[0].string);\n      }\n#line 1686 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 11:\n#line 259 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_RULE* rule = (yyvsp[-7].rule); // rule created in phase 1\n\n        compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(\n            yyscanner, rule);\n\n        yr_free((yyvsp[-8].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 1701 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 12:\n#line 274 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = NULL;\n      }\n#line 1709 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 13:\n#line 278 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Each rule have a list of meta-data info, consisting in a\n        // sequence of YR_META structures. The last YR_META structure does\n        // not represent a real meta-data, it's just a end-of-list marker\n        // identified by a specific type (META_TYPE_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_META null_meta;\n\n        memset(&null_meta, 0xFF, sizeof(YR_META));\n        null_meta.type = META_TYPE_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->metas_arena,\n            &null_meta,\n            sizeof(YR_META),\n            NULL);\n\n        (yyval.meta) = (yyvsp[0].meta);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 1736 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 14:\n#line 305 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = NULL;\n      }\n#line 1744 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 15:\n#line 309 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Each rule have a list of strings, consisting in a sequence\n        // of YR_STRING structures. The last YR_STRING structure does not\n        // represent a real string, it's just a end-of-list marker\n        // identified by a specific flag (STRING_FLAGS_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_STRING null_string;\n\n        memset(&null_string, 0xFF, sizeof(YR_STRING));\n        null_string.g_flags = STRING_GFLAGS_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->strings_arena,\n            &null_string,\n            sizeof(YR_STRING),\n            NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.string) = (yyvsp[0].string);\n      }\n#line 1771 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 17:\n#line 340 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = 0;  }\n#line 1777 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 18:\n#line 341 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }\n#line 1783 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 19:\n#line 346 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = RULE_GFLAGS_PRIVATE; }\n#line 1789 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 20:\n#line 347 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = RULE_GFLAGS_GLOBAL; }\n#line 1795 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 21:\n#line 353 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.c_string) = NULL;\n      }\n#line 1803 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 22:\n#line 357 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Tags list is represented in the arena as a sequence\n        // of null-terminated strings, the sequence ends with an\n        // additional null character. Here we write the ending null\n        //character. Example: tag1\\0tag2\\0tag3\\0\\0\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, \"\", NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = (yyvsp[0].c_string);\n      }\n#line 1821 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 23:\n#line 375 \"grammar.y\" /* yacc.c:1646  */\n    {\n        char* identifier;\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), &identifier);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = identifier;\n      }\n#line 1838 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 24:\n#line 388 \"grammar.y\" /* yacc.c:1646  */\n    {\n        char* tag_name = (yyvsp[-1].c_string);\n        size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n\n        while (tag_length > 0)\n        {\n          if (strcmp(tag_name, (yyvsp[0].c_string)) == 0)\n          {\n            yr_compiler_set_error_extra_info(compiler, tag_name);\n            compiler->last_result = ERROR_DUPLICATED_TAG_IDENTIFIER;\n            break;\n          }\n\n          tag_name = (char*) yr_arena_next_address(\n              yyget_extra(yyscanner)->sz_arena,\n              tag_name,\n              tag_length + 1);\n\n          tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n        }\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_arena_write_string(\n              yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), NULL);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = (yyvsp[-1].c_string);\n      }\n#line 1874 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 25:\n#line 424 \"grammar.y\" /* yacc.c:1646  */\n    {  (yyval.meta) = (yyvsp[0].meta); }\n#line 1880 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 26:\n#line 425 \"grammar.y\" /* yacc.c:1646  */\n    {  (yyval.meta) = (yyvsp[-1].meta); }\n#line 1886 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 27:\n#line 431 \"grammar.y\" /* yacc.c:1646  */\n    {\n        SIZED_STRING* sized_string = (yyvsp[0].sized_string);\n\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_STRING,\n            (yyvsp[-2].c_string),\n            sized_string->c_string,\n            0);\n\n        yr_free((yyvsp[-2].c_string));\n        yr_free((yyvsp[0].sized_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1906 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 28:\n#line 447 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            (yyvsp[-2].c_string),\n            NULL,\n            (yyvsp[0].integer));\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1923 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 29:\n#line 460 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            (yyvsp[-3].c_string),\n            NULL,\n            -(yyvsp[0].integer));\n\n        yr_free((yyvsp[-3].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1940 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 30:\n#line 473 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            (yyvsp[-2].c_string),\n            NULL,\n            TRUE);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1957 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 31:\n#line 486 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.meta) = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            (yyvsp[-2].c_string),\n            NULL,\n            FALSE);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF((yyval.meta) == NULL);\n      }\n#line 1974 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 32:\n#line 502 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.string) = (yyvsp[0].string); }\n#line 1980 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 33:\n#line 503 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.string) = (yyvsp[-1].string); }\n#line 1986 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 34:\n#line 509 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n#line 1994 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 35:\n#line 513 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) (yyvsp[0].integer), (yyvsp[-4].c_string), (yyvsp[-1].sized_string));\n\n        yr_free((yyvsp[-4].c_string));\n        yr_free((yyvsp[-1].sized_string));\n\n        ERROR_IF((yyval.string) == NULL);\n        compiler->error_line = 0;\n      }\n#line 2009 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 36:\n#line 524 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n#line 2017 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 37:\n#line 528 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) (yyvsp[0].integer) | STRING_GFLAGS_REGEXP, (yyvsp[-4].c_string), (yyvsp[-1].sized_string));\n\n        yr_free((yyvsp[-4].c_string));\n        yr_free((yyvsp[-1].sized_string));\n\n        ERROR_IF((yyval.string) == NULL);\n\n        compiler->error_line = 0;\n      }\n#line 2033 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 38:\n#line 540 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.string) = yr_parser_reduce_string_declaration(\n            yyscanner, STRING_GFLAGS_HEXADECIMAL, (yyvsp[-2].c_string), (yyvsp[0].sized_string));\n\n        yr_free((yyvsp[-2].c_string));\n        yr_free((yyvsp[0].sized_string));\n\n        ERROR_IF((yyval.string) == NULL);\n      }\n#line 2047 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 39:\n#line 553 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = 0; }\n#line 2053 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 40:\n#line 554 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }\n#line 2059 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 41:\n#line 559 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_WIDE; }\n#line 2065 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 42:\n#line 560 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_ASCII; }\n#line 2071 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 43:\n#line 561 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_NO_CASE; }\n#line 2077 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 44:\n#line 562 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = STRING_GFLAGS_FULL_WORD; }\n#line 2083 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 45:\n#line 568 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int var_index = yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string));\n\n        if (var_index >= 0)\n        {\n          compiler->last_result = yr_parser_emit_with_arg(\n              yyscanner,\n              OP_PUSH_M,\n              LOOP_LOCAL_VARS * var_index,\n              NULL,\n              NULL);\n\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          (yyval.expression).value.integer = UNDEFINED;\n          (yyval.expression).identifier = compiler->loop_identifier[var_index];\n        }\n        else\n        {\n          // Search for identifier within the global namespace, where the\n          // externals variables reside.\n\n          YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(\n              compiler->objects_table, (yyvsp[0].c_string), NULL);\n\n          if (object == NULL)\n          {\n            // If not found, search within the current namespace.\n            char* ns = compiler->current_namespace->name;\n\n            object = (YR_OBJECT*) yr_hash_table_lookup(\n                compiler->objects_table, (yyvsp[0].c_string), ns);\n          }\n\n          if (object != NULL)\n          {\n            char* id;\n\n            compiler->last_result = yr_arena_write_string(\n                compiler->sz_arena, (yyvsp[0].c_string), &id);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_LOAD,\n                  id,\n                  NULL,\n                  NULL);\n\n            (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n            (yyval.expression).value.object = object;\n            (yyval.expression).identifier = object->identifier;\n          }\n          else\n          {\n            YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(\n                compiler->rules_table,\n                (yyvsp[0].c_string),\n                compiler->current_namespace->name);\n\n            if (rule != NULL)\n            {\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_PUSH_RULE,\n                  rule,\n                  NULL,\n                  NULL);\n\n              (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n              (yyval.expression).value.integer = UNDEFINED;\n              (yyval.expression).identifier = rule->identifier;\n            }\n            else\n            {\n              yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));\n              compiler->last_result = ERROR_UNDEFINED_IDENTIFIER;\n            }\n          }\n        }\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2172 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 46:\n#line 653 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_OBJECT* field = NULL;\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_OBJECT &&\n            (yyvsp[-2].expression).value.object->type == OBJECT_TYPE_STRUCTURE)\n        {\n          field = yr_object_lookup_field((yyvsp[-2].expression).value.object, (yyvsp[0].c_string));\n\n          if (field != NULL)\n          {\n            char* ident;\n\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, (yyvsp[0].c_string), &ident);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_FIELD,\n                  ident,\n                  NULL,\n                  NULL);\n\n            (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n            (yyval.expression).value.object = field;\n            (yyval.expression).identifier = field->identifier;\n          }\n          else\n          {\n            yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));\n            compiler->last_result = ERROR_INVALID_FIELD_NAME;\n          }\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-2].expression).identifier);\n\n          compiler->last_result = ERROR_NOT_A_STRUCTURE;\n        }\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2222 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 47:\n#line 699 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_OBJECT_ARRAY* array;\n        YR_OBJECT_DICTIONARY* dict;\n\n        if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&\n            (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_ARRAY)\n        {\n          if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"array indexes must be of integer type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_INDEX_ARRAY, NULL);\n\n          array = (YR_OBJECT_ARRAY*) (yyvsp[-3].expression).value.object;\n\n          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n          (yyval.expression).value.object = array->prototype_item;\n          (yyval.expression).identifier = array->identifier;\n        }\n        else if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&\n                 (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_DICTIONARY)\n        {\n          if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_STRING)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"dictionary keys must be of string type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_LOOKUP_DICT, NULL);\n\n          dict = (YR_OBJECT_DICTIONARY*) (yyvsp[-3].expression).value.object;\n\n          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n          (yyval.expression).value.object = dict->prototype_item;\n          (yyval.expression).identifier = dict->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-3].expression).identifier);\n\n          compiler->last_result = ERROR_NOT_INDEXABLE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2283 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 48:\n#line 757 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_OBJECT_FUNCTION* function;\n        char* args_fmt;\n\n        if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&\n            (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_FUNCTION)\n        {\n          compiler->last_result = yr_parser_check_types(\n              compiler, (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object, (yyvsp[-1].c_string));\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, (yyvsp[-1].c_string), &args_fmt);\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_parser_emit_with_arg_reloc(\n                yyscanner,\n                OP_CALL,\n                args_fmt,\n                NULL,\n                NULL);\n\n          function = (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object;\n\n          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;\n          (yyval.expression).value.object = function->return_obj;\n          (yyval.expression).identifier = function->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-3].expression).identifier);\n\n          compiler->last_result = ERROR_NOT_A_FUNCTION;\n        }\n\n        yr_free((yyvsp[-1].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2328 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 49:\n#line 801 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.c_string) = yr_strdup(\"\"); }\n#line 2334 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 50:\n#line 802 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.c_string) = (yyvsp[0].c_string); }\n#line 2340 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 51:\n#line 807 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.c_string) = (char*) yr_malloc(MAX_FUNCTION_ARGS + 1);\n\n        switch((yyvsp[0].expression).type)\n        {\n          case EXPRESSION_TYPE_INTEGER:\n            strlcpy((yyval.c_string), \"i\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_FLOAT:\n            strlcpy((yyval.c_string), \"f\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_BOOLEAN:\n            strlcpy((yyval.c_string), \"b\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_STRING:\n            strlcpy((yyval.c_string), \"s\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_REGEXP:\n            strlcpy((yyval.c_string), \"r\", MAX_FUNCTION_ARGS);\n            break;\n          default:\n            assert(FALSE);\n        }\n\n        ERROR_IF((yyval.c_string) == NULL);\n      }\n#line 2371 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 52:\n#line 834 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if (strlen((yyvsp[-2].c_string)) == MAX_FUNCTION_ARGS)\n        {\n          compiler->last_result = ERROR_TOO_MANY_ARGUMENTS;\n        }\n        else\n        {\n          switch((yyvsp[0].expression).type)\n          {\n            case EXPRESSION_TYPE_INTEGER:\n              strlcat((yyvsp[-2].c_string), \"i\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_FLOAT:\n              strlcat((yyvsp[-2].c_string), \"f\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_BOOLEAN:\n              strlcat((yyvsp[-2].c_string), \"b\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_STRING:\n              strlcat((yyvsp[-2].c_string), \"s\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_REGEXP:\n              strlcat((yyvsp[-2].c_string), \"r\", MAX_FUNCTION_ARGS);\n              break;\n            default:\n              assert(FALSE);\n          }\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.c_string) = (yyvsp[-2].c_string);\n      }\n#line 2409 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 53:\n#line 872 \"grammar.y\" /* yacc.c:1646  */\n    {\n        SIZED_STRING* sized_string = (yyvsp[0].sized_string);\n        RE* re;\n        RE_ERROR error;\n\n        int re_flags = 0;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_NO_CASE)\n          re_flags |= RE_FLAGS_NO_CASE;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_DOT_ALL)\n          re_flags |= RE_FLAGS_DOT_ALL;\n\n        compiler->last_result = yr_re_compile(\n            sized_string->c_string,\n            re_flags,\n            compiler->re_code_arena,\n            &re,\n            &error);\n\n        yr_free((yyvsp[0].sized_string));\n\n        if (compiler->last_result == ERROR_INVALID_REGULAR_EXPRESSION)\n          yr_compiler_set_error_extra_info(compiler, error.message);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              re->root_node->forward_code,\n              NULL,\n              NULL);\n\n        yr_re_destroy(re);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_REGEXP;\n      }\n#line 2455 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 54:\n#line 918 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_STRING)\n        {\n          if ((yyvsp[0].expression).value.sized_string != NULL)\n          {\n            yywarning(yyscanner,\n              \"Using literal string \\\"%s\\\" in a boolean operation.\",\n              (yyvsp[0].expression).value.sized_string->c_string);\n          }\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_STR_TO_BOOL, NULL);\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2478 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 55:\n#line 940 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2491 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 56:\n#line 949 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 0, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2504 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 57:\n#line 958 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, \"matches\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_REGEXP, \"matches\");\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit(\n              yyscanner,\n              OP_MATCHES,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2523 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 58:\n#line 973 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, \"contains\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_STRING, \"contains\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_CONTAINS, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2539 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 59:\n#line 985 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int result = yr_parser_reduce_string_identifier(\n            yyscanner,\n            (yyvsp[0].c_string),\n            OP_FOUND,\n            UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2557 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 60:\n#line 999 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"at\");\n\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-2].c_string), OP_FOUND_AT, (yyvsp[0].expression).value.integer);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2574 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 61:\n#line 1012 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-2].c_string), OP_FOUND_IN, UNDEFINED);\n\n        yr_free((yyvsp[-2].c_string));\n\n        ERROR_IF(compiler->last_result!= ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2589 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 62:\n#line 1023 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if (compiler->loop_depth > 0)\n        {\n          compiler->loop_depth--;\n          compiler->loop_identifier[compiler->loop_depth] = NULL;\n        }\n\n        YYERROR;\n      }\n#line 2603 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 63:\n#line 1033 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int var_index;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n              ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        var_index = yr_parser_lookup_loop_variable(\n            yyscanner, (yyvsp[-1].c_string));\n\n        if (var_index >= 0)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, (yyvsp[-1].c_string));\n\n          compiler->last_result = \\\n              ERROR_DUPLICATED_LOOP_IDENTIFIER;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Push end-of-list marker\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 2637 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 64:\n#line 1063 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        // Clear counter for number of expressions evaluating\n        // to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        // Clear iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        if ((yyvsp[-1].integer) == INTEGER_SET_ENUMERATION)\n        {\n          // Pop the first integer\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Pop higher bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset + 3, &addr, NULL);\n\n          // Pop lower bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, NULL, NULL);\n        }\n\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);\n        compiler->loop_depth++;\n      }\n#line 2676 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 65:\n#line 1098 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // The value at the top of the stack is the result of\n        // evaluating the boolean expression, so it could be\n        // 0, 1 or UNDEFINED. Add this value to a counter\n        // keeping the number of expressions evaluating to true.\n        // If the value is UNDEFINED instruction OP_ADD_M\n        // does nothing.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        if ((yyvsp[-5].integer) == INTEGER_SET_ENUMERATION)\n        {\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JNUNDEF,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Increment lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_INCR_M, mem_offset, NULL, NULL);\n\n          // Push lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset, NULL, NULL);\n\n          // Push higher bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset + 3, NULL, NULL);\n\n          // Compare higher bound with lower bound, do loop again\n          // if lower bound is still lower or equal than higher bound\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JLE,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n        }\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at the top of the stack. Check if the quantifier\n        // is undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        yr_free((yyvsp[-8].c_string));\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2759 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 66:\n#line 1177 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n            ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        if (compiler->loop_for_of_mem_offset != -1)\n          compiler->last_result = \\\n            ERROR_NESTED_FOR_OF_LOOP;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        // Pop the first string.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n\n        compiler->loop_for_of_mem_offset = mem_offset;\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        compiler->loop_depth++;\n      }\n#line 2793 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 67:\n#line 1207 \"grammar.y\" /* yacc.c:1646  */\n    {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        compiler->loop_for_of_mem_offset = -1;\n\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // Increment counter by the value returned by the\n        // boolean expression (0 or 1). If the boolean expression\n        // returned UNDEFINED the OP_ADD_M won't do anything.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        // If next string is not undefined, go back to the\n        // beginning of the loop.\n        yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JNUNDEF,\n            compiler->loop_address[compiler->loop_depth],\n            NULL,\n            NULL);\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at top of the stack. Check if the quantifier is\n        // undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n\n      }\n#line 2846 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 68:\n#line 1256 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit(yyscanner, OP_OF, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2856 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 69:\n#line 1262 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit(yyscanner, OP_NOT, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2866 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 70:\n#line 1268 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JFALSE,\n            0,          // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // create a fixup entry for the jump and push it in the stack\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n#line 2896 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 71:\n#line 1294 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        uint8_t* and_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the AND opcode and one for opcode following the\n        // AND. This is necessary because we need to compute the address for the\n        // opcode following the AND, and we don't want the AND in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_AND, &and_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the AND. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the AND opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the AND\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(and_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 2936 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 72:\n#line 1330 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JTRUE,\n            0,         // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n#line 2965 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 73:\n#line 1355 \"grammar.y\" /* yacc.c:1646  */\n    {\n        YR_FIXUP* fixup;\n        uint8_t* or_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the OR opcode and one for opcode following the\n        // OR. This is necessary because we need to compute the address for the\n        // opcode following the OR, and we don't want the OR in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_OR, &or_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the OP_OR. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the OR opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the OR\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(or_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3005 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 74:\n#line 1391 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3018 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 75:\n#line 1400 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3031 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 76:\n#line 1409 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<=\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3044 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 77:\n#line 1418 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">=\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3057 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 78:\n#line 1427 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"==\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3070 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 79:\n#line 1436 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"!=\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n      }\n#line 3083 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 80:\n#line 1445 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[0].expression);\n      }\n#line 3091 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 81:\n#line 1449 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[-1].expression);\n      }\n#line 3099 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 82:\n#line 1456 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = INTEGER_SET_ENUMERATION; }\n#line 3105 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 83:\n#line 1457 \"grammar.y\" /* yacc.c:1646  */\n    { (yyval.integer) = INTEGER_SET_RANGE; }\n#line 3111 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 84:\n#line 1463 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's lower bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's upper bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3133 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 85:\n#line 1485 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3149 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 86:\n#line 1497 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3164 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 87:\n#line 1512 \"grammar.y\" /* yacc.c:1646  */\n    {\n        // Push end-of-list marker\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n#line 3173 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 89:\n#line 1518 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n        yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3184 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 92:\n#line 1535 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3195 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 93:\n#line 1542 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3206 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 95:\n#line 1554 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n#line 3214 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 96:\n#line 1558 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);\n      }\n#line 3222 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 97:\n#line 1566 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[-1].expression);\n      }\n#line 3230 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 98:\n#line 1570 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_FILESIZE, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3244 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 99:\n#line 1580 \"grammar.y\" /* yacc.c:1646  */\n    {\n        yywarning(yyscanner,\n            \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"\n            \"function from PE module instead.\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_ENTRYPOINT, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3262 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 100:\n#line 1594 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");\n\n        // _INTEGER_FUNCTION_ could be any of int8, int16, int32, uint8,\n        // uint32, etc. $1 contains an index that added to OP_READ_INT results\n        // in the proper OP_INTXX opcode.\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, (uint8_t) (OP_READ_INT + (yyvsp[-3].integer)), NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3282 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 101:\n#line 1610 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = (yyvsp[0].integer);\n      }\n#line 3296 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 102:\n#line 1620 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg_double(\n            yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n      }\n#line 3309 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 103:\n#line 1629 \"grammar.y\" /* yacc.c:1646  */\n    {\n        SIZED_STRING* sized_string;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->sz_arena,\n            (yyvsp[0].sized_string),\n            (yyvsp[0].sized_string)->length + sizeof(SIZED_STRING),\n            (void**) &sized_string);\n\n        yr_free((yyvsp[0].sized_string));\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              sized_string,\n              NULL,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_STRING;\n        (yyval.expression).value.sized_string = sized_string;\n      }\n#line 3338 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 104:\n#line 1654 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3354 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 105:\n#line 1666 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);\n\n        yr_free((yyvsp[-3].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3370 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 106:\n#line 1678 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, (yyvsp[0].c_string), OP_OFFSET, UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3390 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 107:\n#line 1694 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);\n\n        yr_free((yyvsp[-3].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3406 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 108:\n#line 1706 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, (yyvsp[0].c_string), OP_LENGTH, UNDEFINED);\n\n        yr_free((yyvsp[0].c_string));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = UNDEFINED;\n      }\n#line 3426 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 109:\n#line 1722 \"grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          (yyval.expression).value.integer = UNDEFINED;\n        }\n        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;\n          (yyval.expression).value.integer = UNDEFINED;\n        }\n        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_OBJECT)\n        {\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_OBJ_VALUE, NULL);\n\n          switch((yyvsp[0].expression).value.object->type)\n          {\n            case OBJECT_TYPE_INTEGER:\n              (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n              (yyval.expression).value.integer = UNDEFINED;\n              break;\n            case OBJECT_TYPE_FLOAT:\n              (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n              break;\n            case OBJECT_TYPE_STRING:\n              (yyval.expression).type = EXPRESSION_TYPE_STRING;\n              (yyval.expression).value.sized_string = NULL;\n              break;\n            default:\n              yr_compiler_set_error_extra_info_fmt(\n                  compiler,\n                  \"wrong usage of identifier \\\"%s\\\"\",\n                  (yyvsp[0].expression).identifier);\n              compiler->last_result = ERROR_WRONG_TYPE;\n          }\n        }\n        else\n        {\n          assert(FALSE);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3475 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 110:\n#line 1767 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");\n\n        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?\n              UNDEFINED : -((yyvsp[0].expression).value.integer);\n          compiler->last_result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);\n        }\n        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_FLOAT)\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n          compiler->last_result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n#line 3498 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 111:\n#line 1786 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3520 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 112:\n#line 1804 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3542 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 113:\n#line 1822 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3564 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 114:\n#line 1840 \"grammar.y\" /* yacc.c:1646  */\n    {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&\n            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)\n        {\n          if ((yyvsp[0].expression).value.integer != 0)\n          {\n            (yyval.expression).value.integer = OPERATION(/, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n            (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n          }\n          else\n          {\n            compiler->last_result = ERROR_DIVISION_BY_ZERO;\n            ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n          }\n        }\n        else\n        {\n          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n#line 3594 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 115:\n#line 1866 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");\n\n        yr_parser_emit(yyscanner, OP_MOD, NULL);\n\n        if ((yyvsp[0].expression).value.integer != 0)\n        {\n          (yyval.expression).value.integer = OPERATION(%, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          compiler->last_result = ERROR_DIVISION_BY_ZERO;\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n      }\n#line 3616 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 116:\n#line 1884 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3630 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 117:\n#line 1894 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3644 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 118:\n#line 1904 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"|\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"|\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3658 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 119:\n#line 1914 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"~\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?\n            UNDEFINED : ~((yyvsp[0].expression).value.integer);\n      }\n#line 3672 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 120:\n#line 1924 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"<<\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"<<\");\n\n        yr_parser_emit(yyscanner, OP_SHL, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3686 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 121:\n#line 1934 \"grammar.y\" /* yacc.c:1646  */\n    {\n        CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \">>\");\n        CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \">>\");\n\n        yr_parser_emit(yyscanner, OP_SHR, NULL);\n\n        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;\n        (yyval.expression).value.integer = OPERATION(>>, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);\n      }\n#line 3700 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 122:\n#line 1944 \"grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.expression) = (yyvsp[0].expression);\n      }\n#line 3708 \"grammar.c\" /* yacc.c:1646  */\n    break;\n\n\n#line 3712 \"grammar.c\" /* yacc.c:1646  */\n      default: break;\n    }\n  /* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */\n  YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\n\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n\n  *++yyvsp = yyval;\n\n  /* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */\n\n  yyn = yyr1[yyn];\n\n  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;\n  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)\n    yystate = yytable[yystate];\n  else\n    yystate = yydefgoto[yyn - YYNTOKENS];\n\n  goto yynewstate;\n\n\n/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/\nyyerrlab:\n  /* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */\n  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);\n\n  /* If not already recovering from an error, report this error.  */\n  if (!yyerrstatus)\n    {\n      ++yynerrs;\n#if ! YYERROR_VERBOSE\n      yyerror (yyscanner, compiler, YY_(\"syntax error\"));\n#else\n# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\\n                                        yyssp, yytoken)\n      {\n        char const *yymsgp = YY_(\"syntax error\");\n        int yysyntax_error_status;\n        yysyntax_error_status = YYSYNTAX_ERROR;\n        if (yysyntax_error_status == 0)\n          yymsgp = yymsg;\n        else if (yysyntax_error_status == 1)\n          {\n            if (yymsg != yymsgbuf)\n              YYSTACK_FREE (yymsg);\n            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);\n            if (!yymsg)\n              {\n                yymsg = yymsgbuf;\n                yymsg_alloc = sizeof yymsgbuf;\n                yysyntax_error_status = 2;\n              }\n            else\n              {\n                yysyntax_error_status = YYSYNTAX_ERROR;\n                yymsgp = yymsg;\n              }\n          }\n        yyerror (yyscanner, compiler, yymsgp);\n        if (yysyntax_error_status == 2)\n          goto yyexhaustedlab;\n      }\n# undef YYSYNTAX_ERROR\n#endif\n    }\n\n\n\n  if (yyerrstatus == 3)\n    {\n      /* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */\n\n      if (yychar <= YYEOF)\n        {\n          /* Return failure if at end of input.  */\n          if (yychar == YYEOF)\n            YYABORT;\n        }\n      else\n        {\n          yydestruct (\"Error: discarding\",\n                      yytoken, &yylval, yyscanner, compiler);\n          yychar = YYEMPTY;\n        }\n    }\n\n  /* Else will try to reuse lookahead token after shifting the error\n     token.  */\n  goto yyerrlab1;\n\n\n/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/\nyyerrorlab:\n\n  /* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */\n  if (/*CONSTCOND*/ 0)\n     goto yyerrorlab;\n\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n  yystate = *yyssp;\n  goto yyerrlab1;\n\n\n/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/\nyyerrlab1:\n  yyerrstatus = 3;      /* Each real token shifted decrements this.  */\n\n  for (;;)\n    {\n      yyn = yypact[yystate];\n      if (!yypact_value_is_default (yyn))\n        {\n          yyn += YYTERROR;\n          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)\n            {\n              yyn = yytable[yyn];\n              if (0 < yyn)\n                break;\n            }\n        }\n\n      /* Pop the current state because it cannot handle the error token.  */\n      if (yyssp == yyss)\n        YYABORT;\n\n\n      yydestruct (\"Error: popping\",\n                  yystos[yystate], yyvsp, yyscanner, compiler);\n      YYPOPSTACK (1);\n      yystate = *yyssp;\n      YY_STACK_PRINT (yyss, yyssp);\n    }\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n\n  /* Shift the error token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);\n\n  yystate = yyn;\n  goto yynewstate;\n\n\n/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/\nyyacceptlab:\n  yyresult = 0;\n  goto yyreturn;\n\n/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/\nyyabortlab:\n  yyresult = 1;\n  goto yyreturn;\n\n#if !defined yyoverflow || YYERROR_VERBOSE\n/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/\nyyexhaustedlab:\n  yyerror (yyscanner, compiler, YY_(\"memory exhausted\"));\n  yyresult = 2;\n  /* Fall through.  */\n#endif\n\nyyreturn:\n  if (yychar != YYEMPTY)\n    {\n      /* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */\n      yytoken = YYTRANSLATE (yychar);\n      yydestruct (\"Cleanup: discarding lookahead\",\n                  yytoken, &yylval, yyscanner, compiler);\n    }\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */\n  YYPOPSTACK (yylen);\n  YY_STACK_PRINT (yyss, yyssp);\n  while (yyssp != yyss)\n    {\n      yydestruct (\"Cleanup: popping\",\n                  yystos[*yyssp], yyvsp, yyscanner, compiler);\n      YYPOPSTACK (1);\n    }\n#ifndef yyoverflow\n  if (yyss != yyssa)\n    YYSTACK_FREE (yyss);\n#endif\n#if YYERROR_VERBOSE\n  if (yymsg != yymsgbuf)\n    YYSTACK_FREE (yymsg);\n#endif\n  return yyresult;\n}\n#line 1949 \"grammar.y\" /* yacc.c:1906  */\n\n", "/*\nCopyright (c) 2007-2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n%{\n\n\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n#include <stddef.h>\n\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/strutils.h>\n#include <yara/compiler.h>\n#include <yara/object.h>\n#include <yara/sizedstr.h>\n#include <yara/exec.h>\n#include <yara/error.h>\n#include <yara/mem.h>\n#include <yara/lexer.h>\n#include <yara/parser.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define INTEGER_SET_ENUMERATION   1\n#define INTEGER_SET_RANGE         2\n\n#define ERROR_IF(x) \\\n    if (x) \\\n    { \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    } \\\n\n\n#define CHECK_TYPE(expression, expected_type, op) \\\n    if (((expression.type) & (expected_type)) == 0) \\\n    { \\\n      switch(expression.type) \\\n      { \\\n        case EXPRESSION_TYPE_INTEGER: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"integer\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_FLOAT: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"float\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_STRING: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"string\\\" for \" op \" operator\"); \\\n          break; \\\n        case EXPRESSION_TYPE_BOOLEAN: \\\n          yr_compiler_set_error_extra_info( \\\n              compiler, \"wrong type \\\"boolean\\\" for \" op \" operator\"); \\\n          break; \\\n      } \\\n      compiler->last_result = ERROR_WRONG_TYPE; \\\n      yyerror(yyscanner, compiler, NULL); \\\n      YYERROR; \\\n    }\n%}\n\n\n%expect 1   // expect 1 shift/reduce conflicts\n\n// Uncomment this line to print parsing information that can be useful to\n// debug YARA's grammar.\n\n// %debug\n\n%name-prefix=\"yara_yy\"\n%pure-parser\n%parse-param {void *yyscanner}\n%parse-param {YR_COMPILER* compiler}\n%lex-param {yyscan_t yyscanner}\n%lex-param {YR_COMPILER* compiler}\n\n%token _DOT_DOT_\n%token _RULE_\n%token _PRIVATE_\n%token _GLOBAL_\n%token _META_\n%token <string> _STRINGS_\n%token _CONDITION_\n%token <c_string> _IDENTIFIER_\n%token <c_string> _STRING_IDENTIFIER_\n%token <c_string> _STRING_COUNT_\n%token <c_string> _STRING_OFFSET_\n%token <c_string> _STRING_LENGTH_\n%token <c_string> _STRING_IDENTIFIER_WITH_WILDCARD_\n%token <integer> _NUMBER_\n%token <double_> _DOUBLE_\n%token <integer> _INTEGER_FUNCTION_\n%token <sized_string> _TEXT_STRING_\n%token <sized_string> _HEX_STRING_\n%token <sized_string> _REGEXP_\n%token _ASCII_\n%token _WIDE_\n%token _NOCASE_\n%token _FULLWORD_\n%token _AT_\n%token _FILESIZE_\n%token _ENTRYPOINT_\n%token _ALL_\n%token _ANY_\n%token _IN_\n%token _OF_\n%token _FOR_\n%token _THEM_\n%token _MATCHES_\n%token _CONTAINS_\n%token _IMPORT_\n\n%token _TRUE_\n%token _FALSE_\n\n%left _OR_\n%left _AND_\n%left '|'\n%left '^'\n%left '&'\n%left _EQ_ _NEQ_\n%left _LT_ _LE_ _GT_ _GE_\n%left _SHIFT_LEFT_ _SHIFT_RIGHT_\n%left '+' '-'\n%left '*' '\\\\' '%'\n%right _NOT_ '~' UNARY_MINUS\n\n%type <rule>   rule\n\n%type <string> strings\n%type <string> string_declaration\n%type <string> string_declarations\n\n%type <meta> meta\n%type <meta> meta_declaration\n%type <meta> meta_declarations\n\n%type <c_string> tags\n%type <c_string> tag_list\n\n%type <integer> string_modifier\n%type <integer> string_modifiers\n\n%type <integer> integer_set\n\n%type <integer> rule_modifier\n%type <integer> rule_modifiers\n\n\n%type <expression> primary_expression\n%type <expression> boolean_expression\n%type <expression> expression\n%type <expression> identifier\n%type <expression> regexp\n\n%type <c_string> arguments\n%type <c_string> arguments_list\n\n%destructor { yr_free($$); } _IDENTIFIER_\n%destructor { yr_free($$); } _STRING_COUNT_\n%destructor { yr_free($$); } _STRING_OFFSET_\n%destructor { yr_free($$); } _STRING_LENGTH_\n%destructor { yr_free($$); } _STRING_IDENTIFIER_\n%destructor { yr_free($$); } _STRING_IDENTIFIER_WITH_WILDCARD_\n%destructor { yr_free($$); } _TEXT_STRING_\n%destructor { yr_free($$); } _HEX_STRING_\n%destructor { yr_free($$); } _REGEXP_\n\n%union {\n  EXPRESSION      expression;\n  SIZED_STRING*   sized_string;\n  char*           c_string;\n  int64_t         integer;\n  double          double_;\n  YR_STRING*      string;\n  YR_META*        meta;\n  YR_RULE*        rule;\n}\n\n\n%%\n\nrules\n    : /* empty */\n    | rules rule\n    | rules import\n    | rules error rule      /* on error skip until next rule..*/\n    | rules error import    /* .. or import statement */\n    | rules error \"include\" /* .. or include statement */\n    ;\n\n\nimport\n    : _IMPORT_ _TEXT_STRING_\n      {\n        int result = yr_parser_reduce_import(yyscanner, $2);\n\n        yr_free($2);\n\n        ERROR_IF(result != ERROR_SUCCESS);\n      }\n    ;\n\n\nrule\n    : rule_modifiers _RULE_ _IDENTIFIER_\n      {\n        YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(\n            yyscanner, (int32_t) $1, $3);\n\n        ERROR_IF(rule == NULL);\n\n        $<rule>$ = rule;\n      }\n      tags '{' meta strings\n      {\n        YR_RULE* rule = $<rule>4; // rule created in phase 1\n\n        rule->tags = $5;\n        rule->metas = $7;\n        rule->strings = $8;\n      }\n      condition '}'\n      {\n        YR_RULE* rule = $<rule>4; // rule created in phase 1\n\n        compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(\n            yyscanner, rule);\n\n        yr_free($3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nmeta\n    : /* empty */\n      {\n        $$ = NULL;\n      }\n    | _META_ ':' meta_declarations\n      {\n        // Each rule have a list of meta-data info, consisting in a\n        // sequence of YR_META structures. The last YR_META structure does\n        // not represent a real meta-data, it's just a end-of-list marker\n        // identified by a specific type (META_TYPE_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_META null_meta;\n\n        memset(&null_meta, 0xFF, sizeof(YR_META));\n        null_meta.type = META_TYPE_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->metas_arena,\n            &null_meta,\n            sizeof(YR_META),\n            NULL);\n\n        $$ = $3;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nstrings\n    : /* empty */\n      {\n        $$ = NULL;\n      }\n    | _STRINGS_ ':' string_declarations\n      {\n        // Each rule have a list of strings, consisting in a sequence\n        // of YR_STRING structures. The last YR_STRING structure does not\n        // represent a real string, it's just a end-of-list marker\n        // identified by a specific flag (STRING_FLAGS_NULL). Here we\n        // write the end-of-list marker.\n\n        YR_STRING null_string;\n\n        memset(&null_string, 0xFF, sizeof(YR_STRING));\n        null_string.g_flags = STRING_GFLAGS_NULL;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->strings_arena,\n            &null_string,\n            sizeof(YR_STRING),\n            NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $3;\n      }\n    ;\n\n\ncondition\n    : _CONDITION_ ':' boolean_expression\n    ;\n\n\nrule_modifiers\n    : /* empty */                      { $$ = 0;  }\n    | rule_modifiers rule_modifier     { $$ = $1 | $2; }\n    ;\n\n\nrule_modifier\n    : _PRIVATE_      { $$ = RULE_GFLAGS_PRIVATE; }\n    | _GLOBAL_       { $$ = RULE_GFLAGS_GLOBAL; }\n    ;\n\n\ntags\n    : /* empty */\n      {\n        $$ = NULL;\n      }\n    | ':' tag_list\n      {\n        // Tags list is represented in the arena as a sequence\n        // of null-terminated strings, the sequence ends with an\n        // additional null character. Here we write the ending null\n        //character. Example: tag1\\0tag2\\0tag3\\0\\0\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, \"\", NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $2;\n      }\n    ;\n\n\ntag_list\n    : _IDENTIFIER_\n      {\n        char* identifier;\n\n        compiler->last_result = yr_arena_write_string(\n            yyget_extra(yyscanner)->sz_arena, $1, &identifier);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = identifier;\n      }\n    | tag_list _IDENTIFIER_\n      {\n        char* tag_name = $1;\n        size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n\n        while (tag_length > 0)\n        {\n          if (strcmp(tag_name, $2) == 0)\n          {\n            yr_compiler_set_error_extra_info(compiler, tag_name);\n            compiler->last_result = ERROR_DUPLICATED_TAG_IDENTIFIER;\n            break;\n          }\n\n          tag_name = (char*) yr_arena_next_address(\n              yyget_extra(yyscanner)->sz_arena,\n              tag_name,\n              tag_length + 1);\n\n          tag_length = tag_name != NULL ? strlen(tag_name) : 0;\n        }\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_arena_write_string(\n              yyget_extra(yyscanner)->sz_arena, $2, NULL);\n\n        yr_free($2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $1;\n      }\n    ;\n\n\n\nmeta_declarations\n    : meta_declaration                    {  $$ = $1; }\n    | meta_declarations meta_declaration  {  $$ = $1; }\n    ;\n\n\nmeta_declaration\n    : _IDENTIFIER_ '=' _TEXT_STRING_\n      {\n        SIZED_STRING* sized_string = $3;\n\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_STRING,\n            $1,\n            sized_string->c_string,\n            0);\n\n        yr_free($1);\n        yr_free($3);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' _NUMBER_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            $1,\n            NULL,\n            $3);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' '-' _NUMBER_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_INTEGER,\n            $1,\n            NULL,\n            -$4);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' _TRUE_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            $1,\n            NULL,\n            TRUE);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    | _IDENTIFIER_ '=' _FALSE_\n      {\n        $$ = yr_parser_reduce_meta_declaration(\n            yyscanner,\n            META_TYPE_BOOLEAN,\n            $1,\n            NULL,\n            FALSE);\n\n        yr_free($1);\n\n        ERROR_IF($$ == NULL);\n      }\n    ;\n\n\nstring_declarations\n    : string_declaration                      { $$ = $1; }\n    | string_declarations string_declaration  { $$ = $1; }\n    ;\n\n\nstring_declaration\n    : _STRING_IDENTIFIER_ '='\n      {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n      _TEXT_STRING_ string_modifiers\n      {\n        $$ = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) $5, $1, $4);\n\n        yr_free($1);\n        yr_free($4);\n\n        ERROR_IF($$ == NULL);\n        compiler->error_line = 0;\n      }\n    | _STRING_IDENTIFIER_ '='\n      {\n        compiler->error_line = yyget_lineno(yyscanner);\n      }\n      _REGEXP_ string_modifiers\n      {\n        $$ = yr_parser_reduce_string_declaration(\n            yyscanner, (int32_t) $5 | STRING_GFLAGS_REGEXP, $1, $4);\n\n        yr_free($1);\n        yr_free($4);\n\n        ERROR_IF($$ == NULL);\n\n        compiler->error_line = 0;\n      }\n    | _STRING_IDENTIFIER_ '=' _HEX_STRING_\n      {\n        $$ = yr_parser_reduce_string_declaration(\n            yyscanner, STRING_GFLAGS_HEXADECIMAL, $1, $3);\n\n        yr_free($1);\n        yr_free($3);\n\n        ERROR_IF($$ == NULL);\n      }\n    ;\n\n\nstring_modifiers\n    : /* empty */                         { $$ = 0; }\n    | string_modifiers string_modifier    { $$ = $1 | $2; }\n    ;\n\n\nstring_modifier\n    : _WIDE_        { $$ = STRING_GFLAGS_WIDE; }\n    | _ASCII_       { $$ = STRING_GFLAGS_ASCII; }\n    | _NOCASE_      { $$ = STRING_GFLAGS_NO_CASE; }\n    | _FULLWORD_    { $$ = STRING_GFLAGS_FULL_WORD; }\n    ;\n\n\nidentifier\n    : _IDENTIFIER_\n      {\n        int var_index = yr_parser_lookup_loop_variable(yyscanner, $1);\n\n        if (var_index >= 0)\n        {\n          compiler->last_result = yr_parser_emit_with_arg(\n              yyscanner,\n              OP_PUSH_M,\n              LOOP_LOCAL_VARS * var_index,\n              NULL,\n              NULL);\n\n          $$.type = EXPRESSION_TYPE_INTEGER;\n          $$.value.integer = UNDEFINED;\n          $$.identifier = compiler->loop_identifier[var_index];\n        }\n        else\n        {\n          // Search for identifier within the global namespace, where the\n          // externals variables reside.\n\n          YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(\n              compiler->objects_table, $1, NULL);\n\n          if (object == NULL)\n          {\n            // If not found, search within the current namespace.\n            char* ns = compiler->current_namespace->name;\n\n            object = (YR_OBJECT*) yr_hash_table_lookup(\n                compiler->objects_table, $1, ns);\n          }\n\n          if (object != NULL)\n          {\n            char* id;\n\n            compiler->last_result = yr_arena_write_string(\n                compiler->sz_arena, $1, &id);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_LOAD,\n                  id,\n                  NULL,\n                  NULL);\n\n            $$.type = EXPRESSION_TYPE_OBJECT;\n            $$.value.object = object;\n            $$.identifier = object->identifier;\n          }\n          else\n          {\n            YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(\n                compiler->rules_table,\n                $1,\n                compiler->current_namespace->name);\n\n            if (rule != NULL)\n            {\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_PUSH_RULE,\n                  rule,\n                  NULL,\n                  NULL);\n\n              $$.type = EXPRESSION_TYPE_BOOLEAN;\n              $$.value.integer = UNDEFINED;\n              $$.identifier = rule->identifier;\n            }\n            else\n            {\n              yr_compiler_set_error_extra_info(compiler, $1);\n              compiler->last_result = ERROR_UNDEFINED_IDENTIFIER;\n            }\n          }\n        }\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | identifier '.' _IDENTIFIER_\n      {\n        YR_OBJECT* field = NULL;\n\n        if ($1.type == EXPRESSION_TYPE_OBJECT &&\n            $1.value.object->type == OBJECT_TYPE_STRUCTURE)\n        {\n          field = yr_object_lookup_field($1.value.object, $3);\n\n          if (field != NULL)\n          {\n            char* ident;\n\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, $3, &ident);\n\n            if (compiler->last_result == ERROR_SUCCESS)\n              compiler->last_result = yr_parser_emit_with_arg_reloc(\n                  yyscanner,\n                  OP_OBJ_FIELD,\n                  ident,\n                  NULL,\n                  NULL);\n\n            $$.type = EXPRESSION_TYPE_OBJECT;\n            $$.value.object = field;\n            $$.identifier = field->identifier;\n          }\n          else\n          {\n            yr_compiler_set_error_extra_info(compiler, $3);\n            compiler->last_result = ERROR_INVALID_FIELD_NAME;\n          }\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $1.identifier);\n\n          compiler->last_result = ERROR_NOT_A_STRUCTURE;\n        }\n\n        yr_free($3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | identifier '[' primary_expression ']'\n      {\n        YR_OBJECT_ARRAY* array;\n        YR_OBJECT_DICTIONARY* dict;\n\n        if ($1.type == EXPRESSION_TYPE_OBJECT &&\n            $1.value.object->type == OBJECT_TYPE_ARRAY)\n        {\n          if ($3.type != EXPRESSION_TYPE_INTEGER)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"array indexes must be of integer type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_INDEX_ARRAY, NULL);\n\n          array = (YR_OBJECT_ARRAY*) $1.value.object;\n\n          $$.type = EXPRESSION_TYPE_OBJECT;\n          $$.value.object = array->prototype_item;\n          $$.identifier = array->identifier;\n        }\n        else if ($1.type == EXPRESSION_TYPE_OBJECT &&\n                 $1.value.object->type == OBJECT_TYPE_DICTIONARY)\n        {\n          if ($3.type != EXPRESSION_TYPE_STRING)\n          {\n            yr_compiler_set_error_extra_info(\n                compiler, \"dictionary keys must be of string type\");\n            compiler->last_result = ERROR_WRONG_TYPE;\n          }\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_LOOKUP_DICT, NULL);\n\n          dict = (YR_OBJECT_DICTIONARY*) $1.value.object;\n\n          $$.type = EXPRESSION_TYPE_OBJECT;\n          $$.value.object = dict->prototype_item;\n          $$.identifier = dict->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $1.identifier);\n\n          compiler->last_result = ERROR_NOT_INDEXABLE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n\n    | identifier '(' arguments ')'\n      {\n        YR_OBJECT_FUNCTION* function;\n        char* args_fmt;\n\n        if ($1.type == EXPRESSION_TYPE_OBJECT &&\n            $1.value.object->type == OBJECT_TYPE_FUNCTION)\n        {\n          compiler->last_result = yr_parser_check_types(\n              compiler, (YR_OBJECT_FUNCTION*) $1.value.object, $3);\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_arena_write_string(\n              compiler->sz_arena, $3, &args_fmt);\n\n          if (compiler->last_result == ERROR_SUCCESS)\n            compiler->last_result = yr_parser_emit_with_arg_reloc(\n                yyscanner,\n                OP_CALL,\n                args_fmt,\n                NULL,\n                NULL);\n\n          function = (YR_OBJECT_FUNCTION*) $1.value.object;\n\n          $$.type = EXPRESSION_TYPE_OBJECT;\n          $$.value.object = function->return_obj;\n          $$.identifier = function->identifier;\n        }\n        else\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $1.identifier);\n\n          compiler->last_result = ERROR_NOT_A_FUNCTION;\n        }\n\n        yr_free($3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\narguments\n    : /* empty */     { $$ = yr_strdup(\"\"); }\n    | arguments_list  { $$ = $1; }\n\n\narguments_list\n    : expression\n      {\n        $$ = (char*) yr_malloc(MAX_FUNCTION_ARGS + 1);\n\n        switch($1.type)\n        {\n          case EXPRESSION_TYPE_INTEGER:\n            strlcpy($$, \"i\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_FLOAT:\n            strlcpy($$, \"f\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_BOOLEAN:\n            strlcpy($$, \"b\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_STRING:\n            strlcpy($$, \"s\", MAX_FUNCTION_ARGS);\n            break;\n          case EXPRESSION_TYPE_REGEXP:\n            strlcpy($$, \"r\", MAX_FUNCTION_ARGS);\n            break;\n          default:\n            assert(FALSE);\n        }\n\n        ERROR_IF($$ == NULL);\n      }\n    | arguments_list ',' expression\n      {\n        if (strlen($1) == MAX_FUNCTION_ARGS)\n        {\n          compiler->last_result = ERROR_TOO_MANY_ARGUMENTS;\n        }\n        else\n        {\n          switch($3.type)\n          {\n            case EXPRESSION_TYPE_INTEGER:\n              strlcat($1, \"i\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_FLOAT:\n              strlcat($1, \"f\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_BOOLEAN:\n              strlcat($1, \"b\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_STRING:\n              strlcat($1, \"s\", MAX_FUNCTION_ARGS);\n              break;\n            case EXPRESSION_TYPE_REGEXP:\n              strlcat($1, \"r\", MAX_FUNCTION_ARGS);\n              break;\n            default:\n              assert(FALSE);\n          }\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$ = $1;\n      }\n    ;\n\n\nregexp\n    : _REGEXP_\n      {\n        SIZED_STRING* sized_string = $1;\n        RE* re;\n        RE_ERROR error;\n\n        int re_flags = 0;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_NO_CASE)\n          re_flags |= RE_FLAGS_NO_CASE;\n\n        if (sized_string->flags & SIZED_STRING_FLAGS_DOT_ALL)\n          re_flags |= RE_FLAGS_DOT_ALL;\n\n        compiler->last_result = yr_re_compile(\n            sized_string->c_string,\n            re_flags,\n            compiler->re_code_arena,\n            &re,\n            &error);\n\n        yr_free($1);\n\n        if (compiler->last_result == ERROR_INVALID_REGULAR_EXPRESSION)\n          yr_compiler_set_error_extra_info(compiler, error.message);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              re->root_node->forward_code,\n              NULL,\n              NULL);\n\n        yr_re_destroy(re);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_REGEXP;\n      }\n    ;\n\n\nboolean_expression\n    : expression\n      {\n        if ($1.type == EXPRESSION_TYPE_STRING)\n        {\n          if ($1.value.sized_string != NULL)\n          {\n            yywarning(yyscanner,\n              \"Using literal string \\\"%s\\\" in a boolean operation.\",\n              $1.value.sized_string->c_string);\n          }\n\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_STR_TO_BOOL, NULL);\n\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    ;\n\nexpression\n    : _TRUE_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _FALSE_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 0, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _MATCHES_ regexp\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_STRING, \"matches\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_REGEXP, \"matches\");\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit(\n              yyscanner,\n              OP_MATCHES,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _CONTAINS_ primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_STRING, \"contains\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_STRING, \"contains\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_CONTAINS, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _STRING_IDENTIFIER_\n      {\n        int result = yr_parser_reduce_string_identifier(\n            yyscanner,\n            $1,\n            OP_FOUND,\n            UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _STRING_IDENTIFIER_ _AT_ primary_expression\n      {\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"at\");\n\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_FOUND_AT, $3.value.integer);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _STRING_IDENTIFIER_ _IN_ range\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_FOUND_IN, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result!= ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _FOR_ for_expression error\n      {\n        if (compiler->loop_depth > 0)\n        {\n          compiler->loop_depth--;\n          compiler->loop_identifier[compiler->loop_depth] = NULL;\n        }\n\n        YYERROR;\n      }\n    | _FOR_ for_expression _IDENTIFIER_ _IN_\n      {\n        int var_index;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n              ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        var_index = yr_parser_lookup_loop_variable(\n            yyscanner, $3);\n\n        if (var_index >= 0)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, $3);\n\n          compiler->last_result = \\\n              ERROR_DUPLICATED_LOOP_IDENTIFIER;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Push end-of-list marker\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n      integer_set ':'\n      {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        // Clear counter for number of expressions evaluating\n        // to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        // Clear iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        if ($6 == INTEGER_SET_ENUMERATION)\n        {\n          // Pop the first integer\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Pop higher bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset + 3, &addr, NULL);\n\n          // Pop lower bound of set range\n          yr_parser_emit_with_arg(\n              yyscanner, OP_POP_M, mem_offset, NULL, NULL);\n        }\n\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = $3;\n        compiler->loop_depth++;\n      }\n      '(' boolean_expression ')'\n      {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // The value at the top of the stack is the result of\n        // evaluating the boolean expression, so it could be\n        // 0, 1 or UNDEFINED. Add this value to a counter\n        // keeping the number of expressions evaluating to true.\n        // If the value is UNDEFINED instruction OP_ADD_M\n        // does nothing.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        if ($6 == INTEGER_SET_ENUMERATION)\n        {\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JNUNDEF,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n        }\n        else // INTEGER_SET_RANGE\n        {\n          // Increment lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_INCR_M, mem_offset, NULL, NULL);\n\n          // Push lower bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset, NULL, NULL);\n\n          // Push higher bound of integer set\n          yr_parser_emit_with_arg(\n              yyscanner, OP_PUSH_M, mem_offset + 3, NULL, NULL);\n\n          // Compare higher bound with lower bound, do loop again\n          // if lower bound is still lower or equal than higher bound\n          yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_JLE,\n              compiler->loop_address[compiler->loop_depth],\n              NULL,\n              NULL);\n\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n          yr_parser_emit(yyscanner, OP_POP, NULL);\n        }\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at the top of the stack. Check if the quantifier\n        // is undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        yr_free($3);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _FOR_ for_expression _OF_ string_set ':'\n      {\n        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n        uint8_t* addr;\n\n        if (compiler->loop_depth == MAX_LOOP_NESTING)\n          compiler->last_result = \\\n            ERROR_LOOP_NESTING_LIMIT_EXCEEDED;\n\n        if (compiler->loop_for_of_mem_offset != -1)\n          compiler->last_result = \\\n            ERROR_NESTED_FOR_OF_LOOP;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);\n\n        // Pop the first string.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_POP_M, mem_offset, &addr, NULL);\n\n        compiler->loop_for_of_mem_offset = mem_offset;\n        compiler->loop_address[compiler->loop_depth] = addr;\n        compiler->loop_identifier[compiler->loop_depth] = NULL;\n        compiler->loop_depth++;\n      }\n      '(' boolean_expression ')'\n      {\n        int mem_offset;\n\n        compiler->loop_depth--;\n        compiler->loop_for_of_mem_offset = -1;\n\n        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;\n\n        // Increment counter by the value returned by the\n        // boolean expression (0 or 1). If the boolean expression\n        // returned UNDEFINED the OP_ADD_M won't do anything.\n\n        yr_parser_emit_with_arg(\n            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);\n\n        // Increment iterations counter.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);\n\n        // If next string is not undefined, go back to the\n        // beginning of the loop.\n        yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JNUNDEF,\n            compiler->loop_address[compiler->loop_depth],\n            NULL,\n            NULL);\n\n        // Pop end-of-list marker.\n        yr_parser_emit(yyscanner, OP_POP, NULL);\n\n        // At this point the loop quantifier (any, all, 1, 2,..)\n        // is at top of the stack. Check if the quantifier is\n        // undefined (meaning \"all\") and replace it with the\n        // iterations counter in that case.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);\n\n        // Compare the loop quantifier with the number of\n        // expressions evaluating to TRUE.\n        yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);\n\n        yr_parser_emit(yyscanner, OP_INT_LE, NULL);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n\n      }\n    | for_expression _OF_ string_set\n      {\n        yr_parser_emit(yyscanner, OP_OF, NULL);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | _NOT_ boolean_expression\n      {\n        yr_parser_emit(yyscanner, OP_NOT, NULL);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | boolean_expression _AND_\n      {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JFALSE,\n            0,          // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // create a fixup entry for the jump and push it in the stack\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n      boolean_expression\n      {\n        YR_FIXUP* fixup;\n        uint8_t* and_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the AND opcode and one for opcode following the\n        // AND. This is necessary because we need to compute the address for the\n        // opcode following the AND, and we don't want the AND in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_AND, &and_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the AND. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the AND opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the AND\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(and_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | boolean_expression _OR_\n      {\n        YR_FIXUP* fixup;\n        void* jmp_destination_addr;\n\n        compiler->last_result = yr_parser_emit_with_arg_reloc(\n            yyscanner,\n            OP_JTRUE,\n            0,         // still don't know the jump destination\n            NULL,\n            &jmp_destination_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));\n\n        if (fixup == NULL)\n          compiler->last_error = ERROR_INSUFFICIENT_MEMORY;\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        fixup->address = jmp_destination_addr;\n        fixup->next = compiler->fixup_stack_head;\n        compiler->fixup_stack_head = fixup;\n      }\n      boolean_expression\n      {\n        YR_FIXUP* fixup;\n        uint8_t* or_addr;\n\n        // Ensure that we have at least two consecutive bytes in the arena's\n        // current page, one for the OR opcode and one for opcode following the\n        // OR. This is necessary because we need to compute the address for the\n        // opcode following the OR, and we don't want the OR in one page and\n        // the following opcode in another page.\n\n        compiler->last_result = yr_arena_reserve_memory(\n            compiler->code_arena, 2);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        compiler->last_result = yr_parser_emit(yyscanner, OP_OR, &or_addr);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        // Now we know the jump destination, which is the address of the\n        // instruction following the OP_OR. Let's fixup the jump address.\n\n        fixup = compiler->fixup_stack_head;\n\n        // We know that the OR opcode and the following one are within the same\n        // page, so we can compute the address for the opcode following the OR\n        // by simply adding one to its address.\n\n        *(void**)(fixup->address) = (void*)(or_addr + 1);\n\n        compiler->fixup_stack_head = fixup->next;\n        yr_free(fixup);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _LT_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _GT_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _LE_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"<=\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _GE_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \">=\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _EQ_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"==\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression _NEQ_ primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"!=\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_BOOLEAN;\n      }\n    | primary_expression\n      {\n        $$ = $1;\n      }\n    |'(' expression ')'\n      {\n        $$ = $2;\n      }\n    ;\n\n\ninteger_set\n    : '(' integer_enumeration ')'  { $$ = INTEGER_SET_ENUMERATION; }\n    | range                        { $$ = INTEGER_SET_RANGE; }\n    ;\n\n\nrange\n    : '(' primary_expression _DOT_DOT_  primary_expression ')'\n      {\n        if ($2.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's lower bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        if ($4.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for range's upper bound\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\ninteger_enumeration\n    : primary_expression\n      {\n        if ($1.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | integer_enumeration ',' primary_expression\n      {\n        if ($3.type != EXPRESSION_TYPE_INTEGER)\n        {\n          yr_compiler_set_error_extra_info(\n              compiler, \"wrong type for enumeration item\");\n          compiler->last_result = ERROR_WRONG_TYPE;\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nstring_set\n    : '('\n      {\n        // Push end-of-list marker\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n      string_enumeration ')'\n    | _THEM_\n      {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n        yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nstring_enumeration\n    : string_enumeration_item\n    | string_enumeration ',' string_enumeration_item\n    ;\n\n\nstring_enumeration_item\n    : _STRING_IDENTIFIER_\n      {\n        yr_parser_emit_pushes_for_strings(yyscanner, $1);\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | _STRING_IDENTIFIER_WITH_WILDCARD_\n      {\n        yr_parser_emit_pushes_for_strings(yyscanner, $1);\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    ;\n\n\nfor_expression\n    : primary_expression\n    | _ALL_\n      {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);\n      }\n    | _ANY_\n      {\n        yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);\n      }\n    ;\n\n\nprimary_expression\n    : '(' primary_expression ')'\n      {\n        $$ = $2;\n      }\n    | _FILESIZE_\n      {\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_FILESIZE, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _ENTRYPOINT_\n      {\n        yywarning(yyscanner,\n            \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"\n            \"function from PE module instead.\");\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, OP_ENTRYPOINT, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _INTEGER_FUNCTION_ '(' primary_expression ')'\n      {\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");\n\n        // _INTEGER_FUNCTION_ could be any of int8, int16, int32, uint8,\n        // uint32, etc. $1 contains an index that added to OP_READ_INT results\n        // in the proper OP_INTXX opcode.\n\n        compiler->last_result = yr_parser_emit(\n            yyscanner, (uint8_t) (OP_READ_INT + $1), NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _NUMBER_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, $1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = $1;\n      }\n    | _DOUBLE_\n      {\n        compiler->last_result = yr_parser_emit_with_arg_double(\n            yyscanner, OP_PUSH, $1, NULL, NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_FLOAT;\n      }\n    | _TEXT_STRING_\n      {\n        SIZED_STRING* sized_string;\n\n        compiler->last_result = yr_arena_write_data(\n            compiler->sz_arena,\n            $1,\n            $1->length + sizeof(SIZED_STRING),\n            (void**) &sized_string);\n\n        yr_free($1);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_emit_with_arg_reloc(\n              yyscanner,\n              OP_PUSH,\n              sized_string,\n              NULL,\n              NULL);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_STRING;\n        $$.value.sized_string = sized_string;\n      }\n    | _STRING_COUNT_\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_COUNT, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_OFFSET_ '[' primary_expression ']'\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_OFFSET, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_OFFSET_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, $1, OP_OFFSET, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_LENGTH_ '[' primary_expression ']'\n      {\n        compiler->last_result = yr_parser_reduce_string_identifier(\n            yyscanner, $1, OP_LENGTH, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | _STRING_LENGTH_\n      {\n        compiler->last_result = yr_parser_emit_with_arg(\n            yyscanner, OP_PUSH, 1, NULL, NULL);\n\n        if (compiler->last_result == ERROR_SUCCESS)\n          compiler->last_result = yr_parser_reduce_string_identifier(\n              yyscanner, $1, OP_LENGTH, UNDEFINED);\n\n        yr_free($1);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = UNDEFINED;\n      }\n    | identifier\n      {\n        if ($1.type == EXPRESSION_TYPE_INTEGER)  // loop identifier\n        {\n          $$.type = EXPRESSION_TYPE_INTEGER;\n          $$.value.integer = UNDEFINED;\n        }\n        else if ($1.type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier\n        {\n          $$.type = EXPRESSION_TYPE_BOOLEAN;\n          $$.value.integer = UNDEFINED;\n        }\n        else if ($1.type == EXPRESSION_TYPE_OBJECT)\n        {\n          compiler->last_result = yr_parser_emit(\n              yyscanner, OP_OBJ_VALUE, NULL);\n\n          switch($1.value.object->type)\n          {\n            case OBJECT_TYPE_INTEGER:\n              $$.type = EXPRESSION_TYPE_INTEGER;\n              $$.value.integer = UNDEFINED;\n              break;\n            case OBJECT_TYPE_FLOAT:\n              $$.type = EXPRESSION_TYPE_FLOAT;\n              break;\n            case OBJECT_TYPE_STRING:\n              $$.type = EXPRESSION_TYPE_STRING;\n              $$.value.sized_string = NULL;\n              break;\n            default:\n              yr_compiler_set_error_extra_info_fmt(\n                  compiler,\n                  \"wrong usage of identifier \\\"%s\\\"\",\n                  $1.identifier);\n              compiler->last_result = ERROR_WRONG_TYPE;\n          }\n        }\n        else\n        {\n          assert(FALSE);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | '-' primary_expression %prec UNARY_MINUS\n      {\n        CHECK_TYPE($2, EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");\n\n        if ($2.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.type = EXPRESSION_TYPE_INTEGER;\n          $$.value.integer = ($2.value.integer == UNDEFINED) ?\n              UNDEFINED : -($2.value.integer);\n          compiler->last_result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);\n        }\n        else if ($2.type == EXPRESSION_TYPE_FLOAT)\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n          compiler->last_result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);\n        }\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n      }\n    | primary_expression '+' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"+\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.value.integer = OPERATION(+, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '-' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"-\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.value.integer = OPERATION(-, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '*' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"*\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          $$.value.integer = OPERATION(*, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '\\\\' primary_expression\n      {\n        compiler->last_result = yr_parser_reduce_operation(\n            yyscanner, \"\\\\\", $1, $3);\n\n        ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n\n        if ($1.type == EXPRESSION_TYPE_INTEGER &&\n            $3.type == EXPRESSION_TYPE_INTEGER)\n        {\n          if ($3.value.integer != 0)\n          {\n            $$.value.integer = OPERATION(/, $1.value.integer, $3.value.integer);\n            $$.type = EXPRESSION_TYPE_INTEGER;\n          }\n          else\n          {\n            compiler->last_result = ERROR_DIVISION_BY_ZERO;\n            ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n          }\n        }\n        else\n        {\n          $$.type = EXPRESSION_TYPE_FLOAT;\n        }\n      }\n    | primary_expression '%' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"%\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"%\");\n\n        yr_parser_emit(yyscanner, OP_MOD, NULL);\n\n        if ($3.value.integer != 0)\n        {\n          $$.value.integer = OPERATION(%, $1.value.integer, $3.value.integer);\n          $$.type = EXPRESSION_TYPE_INTEGER;\n        }\n        else\n        {\n          compiler->last_result = ERROR_DIVISION_BY_ZERO;\n          ERROR_IF(compiler->last_result != ERROR_SUCCESS);\n        }\n      }\n    | primary_expression '^' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(^, $1.value.integer, $3.value.integer);\n      }\n    | primary_expression '&' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"^\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"^\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(&, $1.value.integer, $3.value.integer);\n      }\n    | primary_expression '|' primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"|\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"|\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(|, $1.value.integer, $3.value.integer);\n      }\n    | '~' primary_expression\n      {\n        CHECK_TYPE($2, EXPRESSION_TYPE_INTEGER, \"~\");\n\n        yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = ($2.value.integer == UNDEFINED) ?\n            UNDEFINED : ~($2.value.integer);\n      }\n    | primary_expression _SHIFT_LEFT_ primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \"<<\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \"<<\");\n\n        yr_parser_emit(yyscanner, OP_SHL, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(<<, $1.value.integer, $3.value.integer);\n      }\n    | primary_expression _SHIFT_RIGHT_ primary_expression\n      {\n        CHECK_TYPE($1, EXPRESSION_TYPE_INTEGER, \">>\");\n        CHECK_TYPE($3, EXPRESSION_TYPE_INTEGER, \">>\");\n\n        yr_parser_emit(yyscanner, OP_SHR, NULL);\n\n        $$.type = EXPRESSION_TYPE_INTEGER;\n        $$.value.integer = OPERATION(>>, $1.value.integer, $3.value.integer);\n      }\n    | regexp\n      {\n        $$ = $1;\n      }\n    ;\n\n%%\n"], "filenames": ["libyara/grammar.c", "libyara/grammar.y"], "buggy_code_start_loc": [614, 826], "buggy_code_end_loc": [3935, 1024], "fixing_code_start_loc": [614, 827], "fixing_code_end_loc": [3941, 1031], "type": "CWE-125", "message": "libyara/grammar.y in YARA 3.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted rule that is mishandled in the yara_yyparse function.", "other": {"cve": {"id": "CVE-2017-5923", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-03T05:59:00.707", "lastModified": "2017-05-02T01:59:02.893", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "libyara/grammar.y in YARA 3.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted rule that is mishandled in the yara_yyparse function."}, {"lang": "es", "value": "libyara/grammar.y en YARA 3.5.0 permite a atacantes remotos provocar una denegaci\u00f3n de servicio (lectura basada en memoria din\u00e1mica - lectura basada fuera de los l\u00edmites y ca\u00edda de la aplicaci\u00f3n) a trav\u00e9s de una regla manipulada que no se maneja correctamente en la funci\u00f3n the yara_yyparse."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:virustotal:yara:3.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "0254F781-4B89-4557-8F17-1F228A3A8216"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/98080", "source": "cve@mitre.org"}, {"url": "https://github.com/VirusTotal/yara/commit/ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/VirusTotal/yara/issues/597", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/VirusTotal/yara/commit/ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636"}}