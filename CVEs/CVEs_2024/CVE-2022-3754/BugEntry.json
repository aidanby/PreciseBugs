{"buggy_code": ["<?php\n\n/**\n * Form to change password of the current user.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2003-02-23\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Filter;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n?>\n  <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n      <i aria-hidden=\"true\" class=\"fa fa-lock\"></i>\n        <?= $PMF_LANG['ad_passwd_cop'] ?>\n    </h1>\n  </div>\n<?php\nif ($user->perm->hasPermission($user->getUserId(), 'passwd')) {\n    // If we have to save a new password, do that first\n    $save = Filter::filterInput(INPUT_POST, 'save', FILTER_UNSAFE_RAW);\n    $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n    if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n        $csrfCheck = false;\n    } else {\n        $csrfCheck = true;\n    }\n\n    if (!is_null($save) && $csrfCheck) {\n        // Define the (Local/Current) Authentication Source\n        $auth = new Auth($faqConfig);\n        $authSource = $auth->selectAuth($user->getAuthSource('name'));\n        $authSource->selectEncType($user->getAuthData('encType'));\n        $authSource->setReadOnly($user->getAuthData('readOnly'));\n\n        $oldPassword = Filter::filterInput(INPUT_POST, 'opass', FILTER_UNSAFE_RAW);\n        $newPassword = Filter::filterInput(INPUT_POST, 'npass', FILTER_UNSAFE_RAW);\n        $retypedPassword = Filter::filterInput(INPUT_POST, 'bpass', FILTER_UNSAFE_RAW);\n\n        if (($authSource->checkCredentials($user->getLogin(), $oldPassword)) && ($newPassword == $retypedPassword)) {\n            if (!$user->changePassword($newPassword)) {\n                printf(\n                    '<p class=\"alert alert-danger\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                    $PMF_LANG['ad_passwd_fail']\n                );\n            }\n            printf(\n                '<p class=\"alert alert-success\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                $PMF_LANG['ad_passwdsuc']\n            );\n        } else {\n            printf(\n                '<p class=\"alert alert-danger\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                $PMF_LANG['ad_passwd_fail']\n            );\n        }\n    }\n    ?>\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n      <form action=\"?action=passwd\" method=\"post\" accept-charset=\"utf-8\">\n        <input type=\"hidden\" name=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n        <input type=\"hidden\" name=\"save\" value=\"newpassword\">\n        <div class=\"form-group row\">\n          <label class=\"col-lg-2 col-form-label\" for=\"opass\">\n              <?= $PMF_LANG['ad_passwd_old'] ?>\n          </label>\n          <div class=\"col-lg-3\">\n            <input type=\"password\" autocomplete=\"off\" name=\"opass\" id=\"opass\" class=\"form-control\" required>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-lg-2 col-form-label\" for=\"npass\">\n              <?= $PMF_LANG['ad_passwd_new'] ?>\n          </label>\n          <div class=\"col-lg-3\">\n            <input type=\"password\" autocomplete=\"off\" name=\"npass\" id=\"npass\" class=\"form-control\" required>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-lg-2 col-form-label\" for=\"bpass\">\n              <?= $PMF_LANG['ad_passwd_con'] ?>\n          </label>\n          <div class=\"col-lg-3\">\n            <input type=\"password\" autocomplete=\"off\" name=\"bpass\" id=\"bpass\" class=\"form-control\" required>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"offset-lg-2 col-lg-3\">\n            <button class=\"btn btn-primary\" type=\"submit\">\n                <?= $PMF_LANG['ad_passwd_change'] ?>\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n    <?php\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n", "<?php\n\n/**\n * The Installer class installs phpMyFAQ. Classy.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Florian Anderiasch <florian@phpmyfaq.net>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2012-08-27\n */\n\nnamespace phpMyFAQ;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Elasticsearch\\ClientBuilder;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Database\\DatabaseDriver;\nuse phpMyFAQ\\Instance\\Database as InstanceDatabase;\nuse phpMyFAQ\\Instance\\Database\\Stopwords;\nuse phpMyFAQ\\Instance\\Elasticsearch;\nuse phpMyFAQ\\Instance\\Master;\nuse phpMyFAQ\\Instance\\Setup;\n\n/**\n * Class Installer\n *\n * @package phpMyFAQ\n */\nclass Installer\n{\n    /**\n     * System object.\n     *\n     * @var System\n     */\n    protected System $system;\n\n    /**\n     * Array with user rights.\n     *\n     * @var array\n     */\n    protected array $mainRights = [\n        [\n            'name' => 'add_user',\n            'description' => 'Right to add user accounts',\n        ],\n        [\n            'name' => 'edit_user',\n            'description' => 'Right to edit user accounts',\n        ],\n        [\n            'name' => 'delete_user',\n            'description' => 'Right to delete user accounts',\n        ],\n        //4 => \"add_faq\",\n        [\n            'name' => 'add_faq',\n            'description' => 'Right to add faq entries',\n        ],\n        //5 => \"edit_faq\",\n        [\n            'name' => 'edit_faq',\n            'description' => 'Right to edit faq entries',\n        ],\n        //6 => \"delete_faq\",\n        [\n            'name' => 'delete_faq',\n            'description' => 'Right to delete faq entries',\n        ],\n        //7 => \"viewlog\",\n        [\n            'name' => 'viewlog',\n            'description' => 'Right to view logfiles',\n        ],\n        //8 => \"adminlog\",\n        [\n            'name' => 'adminlog',\n            'description' => 'Right to view admin log',\n        ],\n        //9 => \"delcomment\",\n        [\n            'name' => 'delcomment',\n            'description' => 'Right to delete comments',\n        ],\n        //10 => \"addnews\",\n        [\n            'name' => 'addnews',\n            'description' => 'Right to add news',\n        ],\n        //11 => \"editnews\",\n        [\n            'name' => 'editnews',\n            'description' => 'Right to edit news',\n        ],\n        //12 => \"delnews\",\n        [\n            'name' => 'delnews',\n            'description' => 'Right to delete news',\n        ],\n        //13 => \"addcateg\",\n        [\n            'name' => 'addcateg',\n            'description' => 'Right to add categories',\n        ],\n        //14 => \"editcateg\",\n        [\n            'name' => 'editcateg',\n            'description' => 'Right to edit categories',\n        ],\n        //15 => \"delcateg\",\n        [\n            'name' => 'delcateg',\n            'description' => 'Right to delete categories',\n        ],\n        //16 => \"passwd\",\n        [\n            'name' => 'passwd',\n            'description' => 'Right to change passwords',\n        ],\n        //17 => \"editconfig\",\n        [\n            'name' => 'editconfig',\n            'description' => 'Right to edit configuration',\n        ],\n        //18 => \"viewadminlink\",\n        [\n            'name' => 'viewadminlink',\n            'description' => 'Right to see the link to the admin section'\n        ],\n        //19 => \"backup delatt\", // Duplicate, removed with 2.7.3\n        //[\n        //    'name' => 'delatt',\n        //    'description' => 'Right to delete attachments'\n        //],\n        //20 => \"backup\",\n        [\n            'name' => 'backup',\n            'description' => 'Right to save backups',\n        ],\n        //21 => \"restore\",\n        [\n            'name' => 'restore',\n            'description' => 'Right to load backups',\n        ],\n        //22 => \"delquestion\",\n        [\n            'name' => 'delquestion',\n            'description' => 'Right to delete questions',\n        ],\n        //23 => 'addglossary',\n        [\n            'name' => 'addglossary',\n            'description' => 'Right to add glossary entries',\n        ],\n        //24 => 'editglossary',\n        [\n            'name' => 'editglossary',\n            'description' => 'Right to edit glossary entries',\n        ],\n        //25 => 'delglossary'\n        [\n            'name' => 'delglossary',\n            'description' => 'Right to delete glossary entries',\n        ],\n        //26 => 'changebtrevs'\n        [\n            'name' => 'changebtrevs',\n            'description' => 'Right to edit revisions',\n        ],\n        //27 => \"addgroup\",\n        [\n            'name' => 'addgroup',\n            'description' => 'Right to add group accounts',\n        ],\n        //28 => \"editgroup\",\n        [\n            'name' => 'editgroup',\n            'description' => 'Right to edit group accounts',\n        ],\n        //29 => \"delgroup\",\n        [\n            'name' => 'delgroup',\n            'description' => 'Right to delete group accounts',\n        ],\n        //30 => \"addtranslation\",\n        [\n            'name' => 'addtranslation',\n            'description' => 'Right to add translation',\n        ],\n        //31 => \"edittranslation\",\n        [\n            'name' => 'edittranslation',\n            'description' => 'Right to edit translations',\n        ],\n        //32 => \"deltranslation\",\n        [\n            'name' => 'deltranslation',\n            'description' => 'Right to delete translations',\n        ],\n        // 33 => 'approverec'\n        [\n            'name' => 'approverec',\n            'description' => 'Right to approve records',\n        ],\n        // 34 => 'addattachment'\n        [\n            'name' => 'addattachment',\n            'description' => 'Right to add attachments',\n        ],\n        // 35 => 'editattachment'\n        [\n            'name' => 'editattachment',\n            'description' => 'Right to edit attachments',\n        ],\n        // 36 => 'delattachment'\n        [\n            'name' => 'delattachment',\n            'description' => 'Right to delete attachments',\n        ],\n        // 37 => 'dlattachment'\n        [\n            'name' => 'dlattachment',\n            'description' => 'Right to download attachments',\n        ],\n        // 38 => 'reports'\n        [\n            'name' => 'reports',\n            'description' => 'Right to generate reports',\n        ],\n        // 39 => 'addfaq'\n        [\n            'name' => 'addfaq',\n            'description' => 'Right to add FAQs in frontend',\n        ],\n        // 40 => 'addquestion'\n        [\n            'name' => 'addquestion',\n            'description' => 'Right to add questions in frontend',\n        ],\n        // 41 => 'addcomment'\n        [\n            'name' => 'addcomment',\n            'description' => 'Right to add comments in frontend',\n        ],\n        // 42 => 'editinstances'\n        [\n            'name' => 'editinstances',\n            'description' => 'Right to edit multi-site instances',\n        ],\n        // 43 => 'addinstances'\n        [\n            'name' => 'addinstances',\n            'description' => 'Right to add multi-site instances',\n        ],\n        // 44 => 'delinstances'\n        [\n            'name' => 'delinstances',\n            'description' => 'Right to delete multi-site instances',\n        ],\n        [\n            'name' => 'export',\n            'description' => 'Right to export the complete FAQ',\n        ],\n        [\n            'name' => 'view_faqs',\n            'description' => 'Right to view FAQs'\n        ],\n        [\n            'name' => 'view_categories',\n            'description' => 'Right to view categories'\n        ],\n        [\n            'name' => 'view_sections',\n            'description' => 'Right to view sections'\n        ],\n        [\n            'name' => 'view_news',\n            'description' => 'Right to view news'\n        ],\n        [\n            'name' => 'add_section',\n            'description' => 'Right to add sections'\n        ],\n        [\n            'name' => 'edit_section',\n            'description' => 'Right to edit sections'\n        ],\n        [\n            'name' => 'delete_section',\n            'description' => 'Right to delete sections'\n        ],\n        [\n            'name' => 'administrate_sections',\n            'description' => 'Right to administrate sections'\n        ],\n        [\n            'name' => 'administrate_groups',\n            'description' => 'Right to administrate groups'\n        ],\n    ];\n\n    /**\n     * Configuration array.\n     *\n     * @var array\n     */\n    protected array $mainConfig = [\n        'main.currentVersion' => null,\n        'main.currentApiVersion' => null,\n        'main.language' => '__PHPMYFAQ_LANGUAGE__',\n        'main.languageDetection' => 'true',\n        'main.phpMyFAQToken' => null,\n        'main.referenceURL' => '__PHPMYFAQ_REFERENCE_URL__',\n        'main.administrationMail' => 'webmaster@example.org',\n        'main.contactInformations' => '',\n        'main.enableAdminLog' => 'true',\n        'main.enableRewriteRules' => 'false',\n        'main.enableUserTracking' => 'true',\n        'main.metaDescription' => 'phpMyFAQ should be the answer for all questions in life',\n        'main.metaKeywords' => '',\n        'main.metaPublisher' => '__PHPMYFAQ_PUBLISHER__',\n        'main.send2friendText' => '',\n        'main.titleFAQ' => 'phpMyFAQ Codename Poseidon',\n        'main.urlValidateInterval' => '86400',\n        'main.enableWysiwygEditor' => 'true',\n        'main.enableWysiwygEditorFrontend' => 'false',\n        'main.enableMarkdownEditor' => 'false',\n        'main.templateSet' => 'default',\n        'main.optionalMailAddress' => 'false',\n        'main.dateFormat' => 'Y-m-d H:i',\n        'main.maintenanceMode' => 'false',\n        'main.enableGravatarSupport' => 'false',\n        'main.enableGzipCompression' => 'true',\n        'main.enableLinkVerification' => 'true',\n        'main.customPdfHeader' => '',\n        'main.customPdfFooter' => '',\n        'main.enableSmartAnswering' => 'true',\n        'main.enableCategoryRestrictions' => 'true',\n        'main.enableSendToFriend' => 'true',\n        'main.privacyURL' => '',\n        'main.enableAutoUpdateHint' => 'true',\n        'main.loginWithEmailAddress' => 'false',\n\n        'records.numberOfRecordsPerPage' => '10',\n        'records.numberOfShownNewsEntries' => '3',\n        'records.defaultActivation' => 'false',\n        'records.defaultAllowComments' => 'false',\n        'records.enableVisibilityQuestions' => 'false',\n        'records.numberOfRelatedArticles' => '5',\n        'records.orderby' => 'id',\n        'records.sortby' => 'DESC',\n        'records.orderingPopularFaqs' => 'visits',\n        'records.disableAttachments' => 'true',\n        'records.maxAttachmentSize' => '100000',\n        'records.attachmentsPath' => 'attachments',\n        'records.attachmentsStorageType' => '0',\n        'records.enableAttachmentEncryption' => 'false',\n        'records.defaultAttachmentEncKey' => '',\n        'records.enableCloseQuestion' => 'false',\n        'records.enableDeleteQuestion' => 'false',\n        'records.randomSort' => 'false',\n        'records.allowCommentsForGuests' => 'true',\n        'records.allowQuestionsForGuests' => 'true',\n        'records.allowNewFaqsForGuests' => 'true',\n        'records.hideEmptyCategories' => 'false',\n        'records.allowDownloadsForGuests' => 'false',\n        'records.numberMaxStoredRevisions' => '10',\n        'records.enableAutoRevisions' => 'false',\n\n        'search.numberSearchTerms' => '10',\n        'search.relevance' => 'thema,content,keywords',\n        'search.enableRelevance' => 'false',\n        'search.enableHighlighting' => 'true',\n        'search.searchForSolutionId' => 'true',\n        'search.enableElasticsearch' => 'false',\n\n        'security.permLevel' => 'basic',\n        'security.ipCheck' => 'false',\n        'security.enableLoginOnly' => 'false',\n        'security.bannedIPs' => '',\n        'security.ssoSupport' => 'false',\n        'security.ssoLogoutRedirect' => '',\n        'security.useSslForLogins' => 'false',\n        'security.useSslOnly' => 'false',\n        'security.forcePasswordUpdate' => 'false',\n        'security.enableRegistration' => 'true',\n        'security.domainWhiteListForRegistrations' => '',\n\n        'spam.checkBannedWords' => 'true',\n        'spam.enableCaptchaCode' => null,\n        'spam.enableSafeEmail' => 'true',\n        'spam.manualActivation' => 'true',\n\n        'socialnetworks.enableTwitterSupport' => 'false',\n        'socialnetworks.twitterConsumerKey' => '',\n        'socialnetworks.twitterConsumerSecret' => '',\n        'socialnetworks.twitterAccessTokenKey' => '',\n        'socialnetworks.twitterAccessTokenSecret' => '',\n        'socialnetworks.disableAll' => 'false',\n\n        'seo.metaTagsHome' => 'index, follow',\n        'seo.metaTagsFaqs' => 'index, follow',\n        'seo.metaTagsCategories' => 'index, follow',\n        'seo.metaTagsPages' => 'index, follow',\n        'seo.metaTagsAdmin' => 'noindex, nofollow',\n        'seo.enableXMLSitemap' => 'true',\n\n        'mail.remoteSMTP' => 'false',\n        'mail.remoteSMTPServer' => '',\n        'mail.remoteSMTPUsername' => '',\n        'mail.remoteSMTPPassword' => '',\n        'mail.remoteSMTPPort' => '25',\n        'mail.remoteSMTPEncryption' => '',\n\n        'ldap.ldapSupport' => 'false',\n        'ldap.ldap_mapping.name' => 'cn',\n        'ldap.ldap_mapping.username' => 'samAccountName',\n        'ldap.ldap_mapping.mail' => 'mail',\n        'ldap.ldap_mapping.memberOf' => '',\n        'ldap.ldap_use_domain_prefix' => 'true',\n        'ldap.ldap_options.LDAP_OPT_PROTOCOL_VERSION' => '3',\n        'ldap.ldap_options.LDAP_OPT_REFERRALS' => '0',\n        'ldap.ldap_use_memberOf' => 'false',\n        'ldap.ldap_use_sasl' => 'false',\n        'ldap.ldap_use_multiple_servers' => 'false',\n        'ldap.ldap_use_anonymous_login' => 'false',\n        'ldap.ldap_use_dynamic_login' => 'false',\n        'ldap.ldap_dynamic_login_attribute' => 'uid',\n\n        'api.enableAccess' => 'true',\n        'api.apiClientToken' => '',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->system = new System();\n        $dynMainConfig = [\n            'main.currentVersion' => System::getVersion(),\n            'main.currentApiVersion' => System::getApiVersion(),\n            'main.phpMyFAQToken' => bin2hex(random_bytes(16)),\n            'spam.enableCaptchaCode' => (extension_loaded('gd') ? 'true' : 'false'),\n        ];\n        $this->mainConfig = array_merge($this->mainConfig, $dynMainConfig);\n    }\n\n    /**\n     * Check absolutely necessary stuff and die.\n     */\n    public function checkBasicStuff(): void\n    {\n        if (!$this->checkMinimumPhpVersion()) {\n            printf(\n                '<p class=\"alert alert-danger\">Sorry, but you need PHP %s or later!</p>',\n                System::VERSION_MINIMUM_PHP\n            );\n            System::renderFooter();\n        }\n\n        if (!function_exists('date_default_timezone_set')) {\n            echo '<p class=\"alert alert-danger\">Sorry, but setting a default timezone doesn\\'t work in your ' .\n                'environment!</p>';\n            System::renderFooter();\n        }\n\n        if (!$this->system->checkDatabase()) {\n            echo '<p class=\"alert alert-danger\">No supported database detected! Please install one of the following' .\n                ' database systems and enable the corresponding PHP extension in php.ini:</p>';\n            echo '<ul>';\n            foreach ($this->system->getSupportedDatabases() as $database) {\n                printf('    <li>%s</li>', $database[1]);\n            }\n            echo '</ul>';\n            System::renderFooter();\n        }\n\n        if (!$this->system->checkRequiredExtensions()) {\n            echo '<p class=\"alert alert-danger\">The following extensions are missing! Please enable the PHP ' .\n                'extension(s) in php.ini.</p>';\n            echo '<ul>';\n            foreach ($this->system->getMissingExtensions() as $extension) {\n                printf('    <li>ext/%s</li>', $extension);\n            }\n            echo '</ul>';\n            System::renderFooter();\n        }\n\n        if (!$this->system->checkInstallation()) {\n            echo '<p class=\"alert alert-danger\">The setup script found the file <code>config/database.php</code>. It ' .\n                'looks like you\\'re already running a version of phpMyFAQ. Please run the <a href=\"update.php\">update' .\n                ' script</a>.</p>';\n            System::renderFooter();\n        }\n    }\n\n    /**\n     * Checks the minimum required PHP version, defined in System.\n     *\n     * @return bool\n     */\n    public function checkMinimumPhpVersion(): bool\n    {\n        if (version_compare(PHP_VERSION, System::VERSION_MINIMUM_PHP, '<')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks for the minimum PHP requirement and if the database credentials file is readable.\n     *\n     * @param string $databaseType\n     * @return void\n     */\n    public function checkPreUpgrade(string $databaseType)\n    {\n        if (!$this->checkMinimumPhpVersion()) {\n            printf(\n                '<p class=\"alert alert-danger\">Sorry, but you need PHP %s or later!</p>',\n                System::VERSION_MINIMUM_PHP\n            );\n            System::renderFooter();\n        }\n\n        if (!is_readable(PMF_ROOT_DIR . '/inc/data.php') && !is_readable(PMF_ROOT_DIR . '/config/database.php')) {\n            echo '<p class=\"alert alert-danger\">It seems you never run a version of phpMyFAQ.<br>' .\n                'Please use the <a href=\"index.php\">install script</a>.</p>';\n            System::renderFooter();\n        }\n\n        if ('' !== $databaseType) {\n            $databaseFound = false;\n            foreach ($this->system->getSupportedDatabases() as $database => $values) {\n                if ($database === $databaseType) {\n                    $databaseFound = true;\n                    break;\n                }\n            }\n            if (!$databaseFound) {\n                echo '<p class=\"alert alert-danger\">It seems you\\'re using an unsupported database version.<br>' .\n                    'We found ' . ucfirst($database) .\n                    '<br>' . 'Please use the change the database type in <code>config/database.php</code>.</p>';\n                System::renderFooter();\n            }\n        }\n    }\n\n    /**\n     * Checks if the file permissions are okay.\n     */\n    public function checkFilesystemPermissions(): void\n    {\n        $instanceSetup = new Setup();\n        $instanceSetup->setRootDir(PMF_ROOT_DIR);\n\n        $dirs = ['/attachments', '/config', '/data', '/images'];\n        $failedDirs = $instanceSetup->checkDirs($dirs);\n        $numDirs = sizeof($failedDirs);\n\n        if (1 <= $numDirs) {\n            printf(\n                '<p class=\"alert alert-danger\">The following %s could not be created or %s not writable:</p><ul>',\n                (1 < $numDirs) ? 'directories' : 'directory',\n                (1 < $numDirs) ? 'are' : 'is'\n            );\n            foreach ($failedDirs as $dir) {\n                echo \"<li>$dir</li>\\n\";\n            }\n            printf(\n                '</ul><p class=\"alert alert-danger\">Please create %s manually and/or change access to chmod 775 (or ' .\n                'greater if necessary).</p>',\n                (1 < $numDirs) ? 'them' : 'it'\n            );\n            System::renderFooter();\n        }\n    }\n\n    /**\n     * Checks some non-critical settings and print some hints.\n     *\n     * @todo We should return an array of messages\n     */\n    public function checkNoncriticalSettings(): void\n    {\n        if (!extension_loaded('gd')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have GD support enabled in your PHP installation. Please ' .\n                'enable GD support in your php.ini file otherwise you can\\'t use Captchas for spam protection.</p>';\n        }\n        if (!function_exists('imagettftext')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have Freetype support enabled in the GD extension of ' .\n                'your PHP installation. Please enable Freetype support in GD extension otherwise the Captchas ' .\n                'for spam protection will be quite easy to break.</p>';\n        }\n        if (!extension_loaded('curl') || !extension_loaded('openssl')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have cURL and/or OpenSSL support enabled in your PHP ' .\n                'installation. Please enable cURL and/or OpenSSL support in your php.ini file otherwise you can\\'t ' .\n                'use the Twitter  support or Elasticsearch.</p>';\n        }\n        if (!extension_loaded('fileinfo')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have Fileinfo support enabled in your PHP installation. ' .\n                'Please enable Fileinfo support in your php.ini file otherwise you can\\'t use our backup/restore ' .\n                'functionality.</p>';\n        }\n    }\n\n    /**\n     * Checks if phpMyFAQ database tables are available\n     *\n     * @param DatabaseDriver $database\n     */\n    public function checkAvailableDatabaseTables(DatabaseDriver $database): void\n    {\n        $query = sprintf(\n            'SELECT * FROM %s%s',\n            Database::getTablePrefix(),\n            'faqconfig'\n        );\n        $result = $database->query($query);\n        if ($database->numRows($result) === 0) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Table faqconfig not found.</p>\\n\";\n            System::renderFooter(true);\n        }\n    }\n\n    /**\n     * Starts the installation.\n     *\n     * @param array|null $setup\n     * @throws Exception\n     */\n    public function startInstall(array $setup = null): void\n    {\n        $query = $uninst = $dbSetup = [];\n\n        // Check table prefix\n        $dbSetup['dbPrefix'] = Filter::filterInput(INPUT_POST, 'sqltblpre', FILTER_UNSAFE_RAW, '');\n        if ('' !== $dbSetup['dbPrefix']) {\n            Database::setTablePrefix($dbSetup['dbPrefix']);\n        }\n\n        // Check database entries\n        if (!isset($setup['dbType'])) {\n            $dbSetup['dbType'] = Filter::filterInput(INPUT_POST, 'sql_type', FILTER_UNSAFE_RAW);\n        } else {\n            $dbSetup['dbType'] = $setup['dbType'];\n        }\n        if (!is_null($dbSetup['dbType'])) {\n            $dbSetup['dbType'] = trim($dbSetup['dbType']);\n            if (!file_exists(PMF_SRC_DIR . '/phpMyFAQ/Instance/Database/' . ucfirst($dbSetup['dbType']) . '.php')) {\n                printf(\n                    '<p class=\"alert alert-danger\"><strong>Error:</strong> Invalid server type: %s</p>',\n                    $dbSetup['dbType']\n                );\n                System::renderFooter(true);\n            }\n        } else {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please select a database type.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        $dbSetup['dbServer'] = Filter::filterInput(INPUT_POST, 'sql_server', FILTER_UNSAFE_RAW, '');\n        if (is_null($dbSetup['dbServer']) && !System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a database server.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        // Check database port\n        if (!isset($setup['dbType'])) {\n            $dbSetup['dbPort'] = Filter::filterInput(INPUT_POST, 'sql_port', FILTER_VALIDATE_INT);\n        } else {\n            $dbSetup['dbPort'] = $setup['dbPort'];\n        }\n        if (is_null($dbSetup['dbPort']) && ! System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-error\\\"><strong>Error:</strong> Please add a valid database port.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        $dbSetup['dbUser'] = Filter::filterInput(INPUT_POST, 'sql_user', FILTER_UNSAFE_RAW, '');\n        if (is_null($dbSetup['dbUser']) && !System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a database username.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        $dbSetup['dbPassword'] = Filter::filterInput(INPUT_POST, 'sql_password', FILTER_UNSAFE_RAW, '');\n        if (is_null($dbSetup['dbPassword']) && !System::isSqlite($dbSetup['dbType'])) {\n            // Password can be empty...\n            $dbSetup['dbPassword'] = '';\n        }\n\n        // Check database name\n        if (!isset($setup['dbType'])) {\n            $dbSetup['dbDatabaseName'] = Filter::filterInput(INPUT_POST, 'sql_db', FILTER_UNSAFE_RAW);\n        } else {\n            $dbSetup['dbDatabaseName'] = $setup['dbDatabaseName'];\n        }\n        if (is_null($dbSetup['dbDatabaseName']) && !System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a database name.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        if (System::isSqlite($dbSetup['dbType'])) {\n            $dbSetup['dbServer'] = Filter::filterInput(\n                INPUT_POST,\n                'sql_sqlitefile',\n                FILTER_UNSAFE_RAW,\n                $setup['dbServer']\n            );\n            if (is_null($dbSetup['dbServer'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a SQLite database \" .\n                    \"filename.</p>\\n\";\n                System::renderFooter(true);\n            }\n        }\n\n        // check database connection\n        Database::setTablePrefix($dbSetup['dbPrefix']);\n        $db = Database::factory($dbSetup['dbType']);\n        try {\n            $db->connect(\n                $dbSetup['dbServer'],\n                $dbSetup['dbUser'],\n                $dbSetup['dbPassword'],\n                $dbSetup['dbDatabaseName'],\n                $dbSetup['dbPort']\n            );\n        } catch (Exception $e) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $e->getMessage());\n        }\n        if (!$db) {\n            System::renderFooter(true);\n        }\n\n        $configuration = new Configuration($db);\n\n        //\n        // Check LDAP if enabled\n        //\n        $ldapEnabled = Filter::filterInput(INPUT_POST, 'ldap_enabled', FILTER_UNSAFE_RAW);\n        if (extension_loaded('ldap') && !is_null($ldapEnabled)) {\n            $ldapSetup = [];\n\n            // check LDAP entries\n            $ldapSetup['ldapServer'] = Filter::filterInput(INPUT_POST, 'ldap_server', FILTER_UNSAFE_RAW);\n            if (is_null($ldapSetup['ldapServer'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a LDAP server.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $ldapSetup['ldapPort'] = Filter::filterInput(INPUT_POST, 'ldap_port', FILTER_VALIDATE_INT);\n            if (is_null($ldapSetup['ldapPort'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a LDAP port.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $ldapSetup['ldapBase'] = Filter::filterInput(INPUT_POST, 'ldap_base', FILTER_UNSAFE_RAW);\n            if (is_null($ldapSetup['ldapBase'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a LDAP base search DN.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            // LDAP User and LDAP password are optional\n            $ldapSetup['ldapUser'] = Filter::filterInput(INPUT_POST, 'ldap_user', FILTER_UNSAFE_RAW);\n            $ldapSetup['ldapPassword'] = Filter::filterInput(INPUT_POST, 'ldap_password', FILTER_UNSAFE_RAW);\n\n            // set LDAP Config to prevent DB query\n            foreach ($this->mainConfig as $configKey => $configValue) {\n                if (strpos($configKey, 'ldap.') !== false) {\n                    $configuration->config[$configKey] = $configValue;\n                }\n            }\n\n            // check LDAP connection\n            $ldap = new Ldap($configuration);\n            $ldap->connect(\n                $ldapSetup['ldapServer'],\n                $ldapSetup['ldapPort'],\n                $ldapSetup['ldapBase'],\n                $ldapSetup['ldapUser'],\n                $ldapSetup['ldapPassword']\n            );\n            if (!$ldap) {\n                echo '<p class=\"alert alert-danger\"><strong>LDAP Error:</strong> ' . $ldap->error() . \"</p>\\n\";\n                System::renderFooter(true);\n            }\n        }\n\n        //\n        // Check Elasticsearch if enabled\n        //\n        $esEnabled = Filter::filterInput(INPUT_POST, 'elasticsearch_enabled', FILTER_UNSAFE_RAW);\n        if (!is_null($esEnabled)) {\n            $esSetup = [];\n            $esHostFilter = [\n                'elasticsearch_server' => [\n                    'filter' => FILTER_UNSAFE_RAW,\n                    'flags' => FILTER_REQUIRE_ARRAY\n                ]\n            ];\n\n            // ES hosts\n            $esHosts = Filter::filterInputArray(INPUT_POST, $esHostFilter);\n            if (is_null($esHosts)) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add at least one Elasticsearch \" .\n                    \"host.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $esSetup['hosts'] = $esHosts['elasticsearch_server'];\n\n            // ES Index name\n            $esSetup['index'] = Filter::filterInput(INPUT_POST, 'elasticsearch_index', FILTER_UNSAFE_RAW);\n            if (is_null($esSetup['index'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add an Elasticsearch index \" .\n                    \"name.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $psr4Loader = new ClassLoader();\n            $psr4Loader->addPsr4('Elasticsearch\\\\', PMF_SRC_DIR . '/libs/elasticsearch/src/Elasticsearch');\n            $psr4Loader->addPsr4('GuzzleHttp\\\\Ring\\\\', PMF_SRC_DIR . '/libs/guzzlehttp/ringphp/src');\n            $psr4Loader->addPsr4('Monolog\\\\', PMF_SRC_DIR . '/libs/monolog/src/Monolog');\n            $psr4Loader->addPsr4('Psr\\\\', PMF_SRC_DIR . '/libs/psr/log/Psr');\n            $psr4Loader->addPsr4('React\\\\Promise\\\\', PMF_SRC_DIR . '/libs/react/promise/src');\n            $psr4Loader->register();\n\n            // check LDAP connection\n            $esHosts = array_values($esHosts['elasticsearch_server']);\n            $esClient = ClientBuilder::create()->setHosts($esHosts)->build();\n\n            if (!$esClient) {\n                echo '<p class=\"alert alert-danger\"><strong>Elasticsearch Error:</strong> No connection.</p>';\n                System::renderFooter(true);\n            }\n        } else {\n            $esSetup = [];\n        }\n\n        // check loginname\n        if (!isset($setup['loginname'])) {\n            $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        } else {\n            $loginName = $setup['loginname'];\n        }\n        if (is_null($loginName)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please add a loginname for your account.</p>';\n            System::renderFooter(true);\n        }\n\n        // check user entries\n        if (!isset($setup['password'])) {\n            $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        } else {\n            $password = $setup['password'];\n        }\n        if (is_null($password)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please add a password for the your ' .\n                'account.</p>';\n            System::renderFooter(true);\n        }\n\n        if (!isset($setup['password_retyped'])) {\n            $passwordRetyped = Filter::filterInput(INPUT_POST, 'password_retyped', FILTER_UNSAFE_RAW);\n        } else {\n            $passwordRetyped = $setup['password_retyped'];\n        }\n        if (is_null($passwordRetyped)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please add a retyped password.</p>';\n            System::renderFooter(true);\n        }\n\n        if (strlen($password) <= 5 || strlen($passwordRetyped) <= 5) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Your password and retyped password are too ' .\n                'short. Please set your password and your retyped password with a minimum of 6 characters.</p>';\n            System::renderFooter(true);\n        }\n        if ($password != $passwordRetyped) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Your password and retyped password are not ' .\n                'equal. Please check your password and your retyped password.</p>';\n            System::renderFooter(true);\n        }\n\n        $language = Filter::filterInput(INPUT_POST, 'language', FILTER_UNSAFE_RAW, 'en');\n        $realname = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW, '');\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL, '');\n        $permLevel = Filter::filterInput(INPUT_POST, 'permLevel', FILTER_UNSAFE_RAW, 'basic');\n\n        $rootDir = isset($setup['rootDir']) ? $setup['rootDir'] : PMF_ROOT_DIR;\n\n        $instanceSetup = new setUp();\n        $instanceSetup->setRootDir($rootDir);\n\n        // Write the DB variables in database.php\n        if (!$instanceSetup->createDatabaseFile($dbSetup)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Setup cannot write to ./config/database.php.' .\n                '</p>';\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n\n        // check LDAP is enabled\n        if (extension_loaded('ldap') && !is_null($ldapEnabled) && count($ldapSetup)) {\n            if (!$instanceSetup->createLdapFile($ldapSetup, '')) {\n                echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Setup cannot write to ./config/ldap.php.' .\n                    '</p>';\n                $this->system->cleanFailedInstallationFiles();\n                System::renderFooter(true);\n            }\n        }\n\n        // check if Elasticsearch is enabled\n        if (!is_null($esEnabled) && count($esSetup)) {\n            if (!$instanceSetup->createElasticsearchFile($esSetup, '')) {\n                echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Setup cannot write to ' .\n                    './config/elasticsearch.php.</p>';\n                $this->system->cleanFailedInstallationFiles();\n                System::renderFooter(true);\n            }\n        }\n\n        // connect to the database using config/database.php\n        include $rootDir . '/config/database.php';\n        try {\n            $db = Database::factory($dbSetup['dbType']);\n        } catch (Exception $exception) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $exception->getMessage());\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n\n        $db->connect($DB['server'], $DB['user'], $DB['password'], $DB['db'], (int)$DB['port']);\n        if (!$db) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $db->error());\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n        try {\n            $databaseInstaller = InstanceDatabase::factory($configuration, $dbSetup['dbType']);\n            $databaseInstaller->createTables($dbSetup['dbPrefix']);\n        } catch (Exception $exception) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $exception->getMessage());\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n\n        $stopWords = new Stopwords($configuration);\n        $stopWords->executeInsertQueries($dbSetup['dbPrefix']);\n\n        $this->system->setDatabase($db);\n\n        // Erase any table before starting creating the required ones\n        if (!System::isSqlite($dbSetup['dbType'])) {\n            $this->system->dropTables($uninst);\n        }\n\n        // Start creating the required tables\n        $count = 0;\n        foreach ($query as $executeQuery) {\n            $result = @$db->query($executeQuery);\n            if (!$result) {\n                echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please install your version of phpMyFAQ \n                    once again or send us a <a href=\\\"https://www.phpmyfaq.de\\\" target=\\\"_blank\\\">bug report</a>.</p>';\n                printf('<p class=\"alert alert-danger\"><strong>DB error:</strong> %s</p>', $db->error());\n                printf('<code>%s</code>', htmlentities($executeQuery));\n                $this->system->dropTables($uninst);\n                $this->system->cleanFailedInstallationFiles();\n                System::renderFooter(true);\n            }\n            usleep(1000);\n            ++$count;\n            if (!($count % 10)) {\n                echo '| ';\n            }\n        }\n\n        $link = new Link('', $configuration);\n\n        // add main configuration, add personal settings\n        $this->mainConfig['main.metaPublisher'] = $realname;\n        $this->mainConfig['main.administrationMail'] = $email;\n        $this->mainConfig['main.language'] = $language;\n        $this->mainConfig['security.permLevel'] = $permLevel;\n\n        foreach ($this->mainConfig as $name => $value) {\n            $configuration->add($name, $value);\n        }\n\n        $configuration->update(['main.referenceURL' => $link->getSystemUri('/setup/index.php')]);\n        $configuration->add('security.salt', md5($configuration->getDefaultUrl()));\n\n        // add admin account and rights\n        $admin = new User($configuration);\n        if (!$admin->createUser($loginName, $password, '', 1)) {\n            printf(\n                '<p class=\"alert alert-danger\"><strong>Fatal installation error:</strong><br>' .\n                \"Couldn't create the admin user: %s</p>\\n\",\n                $admin->error()\n            );\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n        $admin->setStatus('protected');\n        $adminData = [\n            'display_name' => $realname,\n            'email' => $email,\n        ];\n        $admin->setUserData($adminData);\n\n        // add default rights\n        foreach ($this->mainRights as $right) {\n            $admin->perm->grantUserRight(1, $admin->perm->addRight($right));\n        }\n\n        // Add anonymous user account\n        $instanceSetup->createAnonymousUser($configuration);\n\n        // Add master instance\n        $instanceData = [\n            'url' => $link->getSystemUri($_SERVER['SCRIPT_NAME']),\n            'instance' => $link->getSystemRelativeUri('setup/index.php'),\n            'comment' => 'phpMyFAQ ' . System::getVersion(),\n        ];\n        $faqInstance = new Instance($configuration);\n        $faqInstance->addInstance($instanceData);\n\n        $faqInstanceMaster = new Master($configuration);\n        $faqInstanceMaster->createMaster($faqInstance);\n\n        // connect to Elasticsearch if enabled\n        if (!is_null($esEnabled) && is_file($rootDir . '/config/elasticsearch.php')) {\n            include $rootDir . '/config/elasticsearch.php';\n\n            $configuration->setElasticsearchConfig($PMF_ES);\n\n            $esClient = ClientBuilder::create()->setHosts($PMF_ES['hosts'])->build();\n\n            $configuration->setElasticsearch($esClient);\n\n            $faqInstanceElasticsearch = new Elasticsearch($configuration);\n            $faqInstanceElasticsearch->createIndex();\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Form to change password of the current user.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2003-02-23\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Filter;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n?>\n  <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n      <i aria-hidden=\"true\" class=\"fa fa-lock\"></i>\n        <?= $PMF_LANG['ad_passwd_cop'] ?>\n    </h1>\n  </div>\n<?php\nif ($user->perm->hasPermission($user->getUserId(), 'passwd')) {\n    // If we have to save a new password, do that first\n    $save = Filter::filterInput(INPUT_POST, 'save', FILTER_UNSAFE_RAW);\n    $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n    if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n        $csrfCheck = false;\n    } else {\n        $csrfCheck = true;\n    }\n\n    if (!is_null($save) && $csrfCheck) {\n        // Define the (Local/Current) Authentication Source\n        $auth = new Auth($faqConfig);\n        $authSource = $auth->selectAuth($user->getAuthSource('name'));\n        $authSource->selectEncType($user->getAuthData('encType'));\n        $authSource->setReadOnly($user->getAuthData('readOnly'));\n\n        $oldPassword = Filter::filterInput(INPUT_POST, 'opass', FILTER_UNSAFE_RAW);\n        $newPassword = Filter::filterInput(INPUT_POST, 'npass', FILTER_UNSAFE_RAW);\n        $retypedPassword = Filter::filterInput(INPUT_POST, 'bpass', FILTER_UNSAFE_RAW);\n\n        if (strlen($newPassword) <= 7 || strlen($retypedPassword) <= 7) {\n            printf(\n                '<p class=\"alert alert-danger\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                $PMF_LANG['ad_passwd_fail']\n            );\n        } else {\n            if (($authSource->checkCredentials($user->getLogin(), $oldPassword)) && ($newPassword == $retypedPassword)) {\n                if (!$user->changePassword($newPassword)) {\n                    printf(\n                        '<p class=\"alert alert-danger\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                        $PMF_LANG['ad_passwd_fail']\n                    );\n                }\n                printf(\n                    '<p class=\"alert alert-success\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                    $PMF_LANG['ad_passwdsuc']\n                );\n            } else {\n                printf(\n                    '<p class=\"alert alert-danger\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>%s</p>',\n                    $PMF_LANG['ad_passwd_fail']\n                );\n            }\n        }\n    }\n    ?>\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n      <form action=\"?action=passwd\" method=\"post\" accept-charset=\"utf-8\">\n        <input type=\"hidden\" name=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n        <input type=\"hidden\" name=\"save\" value=\"newpassword\">\n        <div class=\"form-group row\">\n          <label class=\"col-lg-2 col-form-label\" for=\"opass\">\n              <?= $PMF_LANG['ad_passwd_old'] ?>\n          </label>\n          <div class=\"col-lg-3\">\n            <input type=\"password\" autocomplete=\"off\" name=\"opass\" id=\"opass\" class=\"form-control\" required>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-lg-2 col-form-label\" for=\"npass\">\n              <?= $PMF_LANG['ad_passwd_new'] ?>\n          </label>\n          <div class=\"col-lg-3\">\n            <input type=\"password\" autocomplete=\"off\" name=\"npass\" id=\"npass\" class=\"form-control\" required>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-lg-2 col-form-label\" for=\"bpass\">\n              <?= $PMF_LANG['ad_passwd_con'] ?>\n          </label>\n          <div class=\"col-lg-3\">\n            <input type=\"password\" autocomplete=\"off\" name=\"bpass\" id=\"bpass\" class=\"form-control\" required>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"offset-lg-2 col-lg-3\">\n            <button class=\"btn btn-primary\" type=\"submit\">\n                <?= $PMF_LANG['ad_passwd_change'] ?>\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n    <?php\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n", "<?php\n\n/**\n * The Installer class installs phpMyFAQ. Classy.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Florian Anderiasch <florian@phpmyfaq.net>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2012-08-27\n */\n\nnamespace phpMyFAQ;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Elasticsearch\\ClientBuilder;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Database\\DatabaseDriver;\nuse phpMyFAQ\\Instance\\Database as InstanceDatabase;\nuse phpMyFAQ\\Instance\\Database\\Stopwords;\nuse phpMyFAQ\\Instance\\Elasticsearch;\nuse phpMyFAQ\\Instance\\Master;\nuse phpMyFAQ\\Instance\\Setup;\n\n/**\n * Class Installer\n *\n * @package phpMyFAQ\n */\nclass Installer\n{\n    /**\n     * System object.\n     *\n     * @var System\n     */\n    protected System $system;\n\n    /**\n     * Array with user rights.\n     *\n     * @var array\n     */\n    protected array $mainRights = [\n        [\n            'name' => 'add_user',\n            'description' => 'Right to add user accounts',\n        ],\n        [\n            'name' => 'edit_user',\n            'description' => 'Right to edit user accounts',\n        ],\n        [\n            'name' => 'delete_user',\n            'description' => 'Right to delete user accounts',\n        ],\n        //4 => \"add_faq\",\n        [\n            'name' => 'add_faq',\n            'description' => 'Right to add faq entries',\n        ],\n        //5 => \"edit_faq\",\n        [\n            'name' => 'edit_faq',\n            'description' => 'Right to edit faq entries',\n        ],\n        //6 => \"delete_faq\",\n        [\n            'name' => 'delete_faq',\n            'description' => 'Right to delete faq entries',\n        ],\n        //7 => \"viewlog\",\n        [\n            'name' => 'viewlog',\n            'description' => 'Right to view logfiles',\n        ],\n        //8 => \"adminlog\",\n        [\n            'name' => 'adminlog',\n            'description' => 'Right to view admin log',\n        ],\n        //9 => \"delcomment\",\n        [\n            'name' => 'delcomment',\n            'description' => 'Right to delete comments',\n        ],\n        //10 => \"addnews\",\n        [\n            'name' => 'addnews',\n            'description' => 'Right to add news',\n        ],\n        //11 => \"editnews\",\n        [\n            'name' => 'editnews',\n            'description' => 'Right to edit news',\n        ],\n        //12 => \"delnews\",\n        [\n            'name' => 'delnews',\n            'description' => 'Right to delete news',\n        ],\n        //13 => \"addcateg\",\n        [\n            'name' => 'addcateg',\n            'description' => 'Right to add categories',\n        ],\n        //14 => \"editcateg\",\n        [\n            'name' => 'editcateg',\n            'description' => 'Right to edit categories',\n        ],\n        //15 => \"delcateg\",\n        [\n            'name' => 'delcateg',\n            'description' => 'Right to delete categories',\n        ],\n        //16 => \"passwd\",\n        [\n            'name' => 'passwd',\n            'description' => 'Right to change passwords',\n        ],\n        //17 => \"editconfig\",\n        [\n            'name' => 'editconfig',\n            'description' => 'Right to edit configuration',\n        ],\n        //18 => \"viewadminlink\",\n        [\n            'name' => 'viewadminlink',\n            'description' => 'Right to see the link to the admin section'\n        ],\n        //19 => \"backup delatt\", // Duplicate, removed with 2.7.3\n        //[\n        //    'name' => 'delatt',\n        //    'description' => 'Right to delete attachments'\n        //],\n        //20 => \"backup\",\n        [\n            'name' => 'backup',\n            'description' => 'Right to save backups',\n        ],\n        //21 => \"restore\",\n        [\n            'name' => 'restore',\n            'description' => 'Right to load backups',\n        ],\n        //22 => \"delquestion\",\n        [\n            'name' => 'delquestion',\n            'description' => 'Right to delete questions',\n        ],\n        //23 => 'addglossary',\n        [\n            'name' => 'addglossary',\n            'description' => 'Right to add glossary entries',\n        ],\n        //24 => 'editglossary',\n        [\n            'name' => 'editglossary',\n            'description' => 'Right to edit glossary entries',\n        ],\n        //25 => 'delglossary'\n        [\n            'name' => 'delglossary',\n            'description' => 'Right to delete glossary entries',\n        ],\n        //26 => 'changebtrevs'\n        [\n            'name' => 'changebtrevs',\n            'description' => 'Right to edit revisions',\n        ],\n        //27 => \"addgroup\",\n        [\n            'name' => 'addgroup',\n            'description' => 'Right to add group accounts',\n        ],\n        //28 => \"editgroup\",\n        [\n            'name' => 'editgroup',\n            'description' => 'Right to edit group accounts',\n        ],\n        //29 => \"delgroup\",\n        [\n            'name' => 'delgroup',\n            'description' => 'Right to delete group accounts',\n        ],\n        //30 => \"addtranslation\",\n        [\n            'name' => 'addtranslation',\n            'description' => 'Right to add translation',\n        ],\n        //31 => \"edittranslation\",\n        [\n            'name' => 'edittranslation',\n            'description' => 'Right to edit translations',\n        ],\n        //32 => \"deltranslation\",\n        [\n            'name' => 'deltranslation',\n            'description' => 'Right to delete translations',\n        ],\n        // 33 => 'approverec'\n        [\n            'name' => 'approverec',\n            'description' => 'Right to approve records',\n        ],\n        // 34 => 'addattachment'\n        [\n            'name' => 'addattachment',\n            'description' => 'Right to add attachments',\n        ],\n        // 35 => 'editattachment'\n        [\n            'name' => 'editattachment',\n            'description' => 'Right to edit attachments',\n        ],\n        // 36 => 'delattachment'\n        [\n            'name' => 'delattachment',\n            'description' => 'Right to delete attachments',\n        ],\n        // 37 => 'dlattachment'\n        [\n            'name' => 'dlattachment',\n            'description' => 'Right to download attachments',\n        ],\n        // 38 => 'reports'\n        [\n            'name' => 'reports',\n            'description' => 'Right to generate reports',\n        ],\n        // 39 => 'addfaq'\n        [\n            'name' => 'addfaq',\n            'description' => 'Right to add FAQs in frontend',\n        ],\n        // 40 => 'addquestion'\n        [\n            'name' => 'addquestion',\n            'description' => 'Right to add questions in frontend',\n        ],\n        // 41 => 'addcomment'\n        [\n            'name' => 'addcomment',\n            'description' => 'Right to add comments in frontend',\n        ],\n        // 42 => 'editinstances'\n        [\n            'name' => 'editinstances',\n            'description' => 'Right to edit multi-site instances',\n        ],\n        // 43 => 'addinstances'\n        [\n            'name' => 'addinstances',\n            'description' => 'Right to add multi-site instances',\n        ],\n        // 44 => 'delinstances'\n        [\n            'name' => 'delinstances',\n            'description' => 'Right to delete multi-site instances',\n        ],\n        [\n            'name' => 'export',\n            'description' => 'Right to export the complete FAQ',\n        ],\n        [\n            'name' => 'view_faqs',\n            'description' => 'Right to view FAQs'\n        ],\n        [\n            'name' => 'view_categories',\n            'description' => 'Right to view categories'\n        ],\n        [\n            'name' => 'view_sections',\n            'description' => 'Right to view sections'\n        ],\n        [\n            'name' => 'view_news',\n            'description' => 'Right to view news'\n        ],\n        [\n            'name' => 'add_section',\n            'description' => 'Right to add sections'\n        ],\n        [\n            'name' => 'edit_section',\n            'description' => 'Right to edit sections'\n        ],\n        [\n            'name' => 'delete_section',\n            'description' => 'Right to delete sections'\n        ],\n        [\n            'name' => 'administrate_sections',\n            'description' => 'Right to administrate sections'\n        ],\n        [\n            'name' => 'administrate_groups',\n            'description' => 'Right to administrate groups'\n        ],\n    ];\n\n    /**\n     * Configuration array.\n     *\n     * @var array\n     */\n    protected array $mainConfig = [\n        'main.currentVersion' => null,\n        'main.currentApiVersion' => null,\n        'main.language' => '__PHPMYFAQ_LANGUAGE__',\n        'main.languageDetection' => 'true',\n        'main.phpMyFAQToken' => null,\n        'main.referenceURL' => '__PHPMYFAQ_REFERENCE_URL__',\n        'main.administrationMail' => 'webmaster@example.org',\n        'main.contactInformations' => '',\n        'main.enableAdminLog' => 'true',\n        'main.enableRewriteRules' => 'false',\n        'main.enableUserTracking' => 'true',\n        'main.metaDescription' => 'phpMyFAQ should be the answer for all questions in life',\n        'main.metaKeywords' => '',\n        'main.metaPublisher' => '__PHPMYFAQ_PUBLISHER__',\n        'main.send2friendText' => '',\n        'main.titleFAQ' => 'phpMyFAQ Codename Poseidon',\n        'main.urlValidateInterval' => '86400',\n        'main.enableWysiwygEditor' => 'true',\n        'main.enableWysiwygEditorFrontend' => 'false',\n        'main.enableMarkdownEditor' => 'false',\n        'main.templateSet' => 'default',\n        'main.optionalMailAddress' => 'false',\n        'main.dateFormat' => 'Y-m-d H:i',\n        'main.maintenanceMode' => 'false',\n        'main.enableGravatarSupport' => 'false',\n        'main.enableGzipCompression' => 'true',\n        'main.enableLinkVerification' => 'true',\n        'main.customPdfHeader' => '',\n        'main.customPdfFooter' => '',\n        'main.enableSmartAnswering' => 'true',\n        'main.enableCategoryRestrictions' => 'true',\n        'main.enableSendToFriend' => 'true',\n        'main.privacyURL' => '',\n        'main.enableAutoUpdateHint' => 'true',\n        'main.loginWithEmailAddress' => 'false',\n\n        'records.numberOfRecordsPerPage' => '10',\n        'records.numberOfShownNewsEntries' => '3',\n        'records.defaultActivation' => 'false',\n        'records.defaultAllowComments' => 'false',\n        'records.enableVisibilityQuestions' => 'false',\n        'records.numberOfRelatedArticles' => '5',\n        'records.orderby' => 'id',\n        'records.sortby' => 'DESC',\n        'records.orderingPopularFaqs' => 'visits',\n        'records.disableAttachments' => 'true',\n        'records.maxAttachmentSize' => '100000',\n        'records.attachmentsPath' => 'attachments',\n        'records.attachmentsStorageType' => '0',\n        'records.enableAttachmentEncryption' => 'false',\n        'records.defaultAttachmentEncKey' => '',\n        'records.enableCloseQuestion' => 'false',\n        'records.enableDeleteQuestion' => 'false',\n        'records.randomSort' => 'false',\n        'records.allowCommentsForGuests' => 'true',\n        'records.allowQuestionsForGuests' => 'true',\n        'records.allowNewFaqsForGuests' => 'true',\n        'records.hideEmptyCategories' => 'false',\n        'records.allowDownloadsForGuests' => 'false',\n        'records.numberMaxStoredRevisions' => '10',\n        'records.enableAutoRevisions' => 'false',\n\n        'search.numberSearchTerms' => '10',\n        'search.relevance' => 'thema,content,keywords',\n        'search.enableRelevance' => 'false',\n        'search.enableHighlighting' => 'true',\n        'search.searchForSolutionId' => 'true',\n        'search.enableElasticsearch' => 'false',\n\n        'security.permLevel' => 'basic',\n        'security.ipCheck' => 'false',\n        'security.enableLoginOnly' => 'false',\n        'security.bannedIPs' => '',\n        'security.ssoSupport' => 'false',\n        'security.ssoLogoutRedirect' => '',\n        'security.useSslForLogins' => 'false',\n        'security.useSslOnly' => 'false',\n        'security.forcePasswordUpdate' => 'false',\n        'security.enableRegistration' => 'true',\n        'security.domainWhiteListForRegistrations' => '',\n\n        'spam.checkBannedWords' => 'true',\n        'spam.enableCaptchaCode' => null,\n        'spam.enableSafeEmail' => 'true',\n        'spam.manualActivation' => 'true',\n\n        'socialnetworks.enableTwitterSupport' => 'false',\n        'socialnetworks.twitterConsumerKey' => '',\n        'socialnetworks.twitterConsumerSecret' => '',\n        'socialnetworks.twitterAccessTokenKey' => '',\n        'socialnetworks.twitterAccessTokenSecret' => '',\n        'socialnetworks.disableAll' => 'false',\n\n        'seo.metaTagsHome' => 'index, follow',\n        'seo.metaTagsFaqs' => 'index, follow',\n        'seo.metaTagsCategories' => 'index, follow',\n        'seo.metaTagsPages' => 'index, follow',\n        'seo.metaTagsAdmin' => 'noindex, nofollow',\n        'seo.enableXMLSitemap' => 'true',\n\n        'mail.remoteSMTP' => 'false',\n        'mail.remoteSMTPServer' => '',\n        'mail.remoteSMTPUsername' => '',\n        'mail.remoteSMTPPassword' => '',\n        'mail.remoteSMTPPort' => '25',\n        'mail.remoteSMTPEncryption' => '',\n\n        'ldap.ldapSupport' => 'false',\n        'ldap.ldap_mapping.name' => 'cn',\n        'ldap.ldap_mapping.username' => 'samAccountName',\n        'ldap.ldap_mapping.mail' => 'mail',\n        'ldap.ldap_mapping.memberOf' => '',\n        'ldap.ldap_use_domain_prefix' => 'true',\n        'ldap.ldap_options.LDAP_OPT_PROTOCOL_VERSION' => '3',\n        'ldap.ldap_options.LDAP_OPT_REFERRALS' => '0',\n        'ldap.ldap_use_memberOf' => 'false',\n        'ldap.ldap_use_sasl' => 'false',\n        'ldap.ldap_use_multiple_servers' => 'false',\n        'ldap.ldap_use_anonymous_login' => 'false',\n        'ldap.ldap_use_dynamic_login' => 'false',\n        'ldap.ldap_dynamic_login_attribute' => 'uid',\n\n        'api.enableAccess' => 'true',\n        'api.apiClientToken' => '',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->system = new System();\n        $dynMainConfig = [\n            'main.currentVersion' => System::getVersion(),\n            'main.currentApiVersion' => System::getApiVersion(),\n            'main.phpMyFAQToken' => bin2hex(random_bytes(16)),\n            'spam.enableCaptchaCode' => (extension_loaded('gd') ? 'true' : 'false'),\n        ];\n        $this->mainConfig = array_merge($this->mainConfig, $dynMainConfig);\n    }\n\n    /**\n     * Check absolutely necessary stuff and die.\n     */\n    public function checkBasicStuff(): void\n    {\n        if (!$this->checkMinimumPhpVersion()) {\n            printf(\n                '<p class=\"alert alert-danger\">Sorry, but you need PHP %s or later!</p>',\n                System::VERSION_MINIMUM_PHP\n            );\n            System::renderFooter();\n        }\n\n        if (!function_exists('date_default_timezone_set')) {\n            echo '<p class=\"alert alert-danger\">Sorry, but setting a default timezone doesn\\'t work in your ' .\n                'environment!</p>';\n            System::renderFooter();\n        }\n\n        if (!$this->system->checkDatabase()) {\n            echo '<p class=\"alert alert-danger\">No supported database detected! Please install one of the following' .\n                ' database systems and enable the corresponding PHP extension in php.ini:</p>';\n            echo '<ul>';\n            foreach ($this->system->getSupportedDatabases() as $database) {\n                printf('    <li>%s</li>', $database[1]);\n            }\n            echo '</ul>';\n            System::renderFooter();\n        }\n\n        if (!$this->system->checkRequiredExtensions()) {\n            echo '<p class=\"alert alert-danger\">The following extensions are missing! Please enable the PHP ' .\n                'extension(s) in php.ini.</p>';\n            echo '<ul>';\n            foreach ($this->system->getMissingExtensions() as $extension) {\n                printf('    <li>ext/%s</li>', $extension);\n            }\n            echo '</ul>';\n            System::renderFooter();\n        }\n\n        if (!$this->system->checkInstallation()) {\n            echo '<p class=\"alert alert-danger\">The setup script found the file <code>config/database.php</code>. It ' .\n                'looks like you\\'re already running a version of phpMyFAQ. Please run the <a href=\"update.php\">update' .\n                ' script</a>.</p>';\n            System::renderFooter();\n        }\n    }\n\n    /**\n     * Checks the minimum required PHP version, defined in System.\n     *\n     * @return bool\n     */\n    public function checkMinimumPhpVersion(): bool\n    {\n        if (version_compare(PHP_VERSION, System::VERSION_MINIMUM_PHP, '<')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks for the minimum PHP requirement and if the database credentials file is readable.\n     *\n     * @param string $databaseType\n     * @return void\n     */\n    public function checkPreUpgrade(string $databaseType)\n    {\n        if (!$this->checkMinimumPhpVersion()) {\n            printf(\n                '<p class=\"alert alert-danger\">Sorry, but you need PHP %s or later!</p>',\n                System::VERSION_MINIMUM_PHP\n            );\n            System::renderFooter();\n        }\n\n        if (!is_readable(PMF_ROOT_DIR . '/inc/data.php') && !is_readable(PMF_ROOT_DIR . '/config/database.php')) {\n            echo '<p class=\"alert alert-danger\">It seems you never run a version of phpMyFAQ.<br>' .\n                'Please use the <a href=\"index.php\">install script</a>.</p>';\n            System::renderFooter();\n        }\n\n        if ('' !== $databaseType) {\n            $databaseFound = false;\n            foreach ($this->system->getSupportedDatabases() as $database => $values) {\n                if ($database === $databaseType) {\n                    $databaseFound = true;\n                    break;\n                }\n            }\n            if (!$databaseFound) {\n                echo '<p class=\"alert alert-danger\">It seems you\\'re using an unsupported database version.<br>' .\n                    'We found ' . ucfirst($database) .\n                    '<br>' . 'Please use the change the database type in <code>config/database.php</code>.</p>';\n                System::renderFooter();\n            }\n        }\n    }\n\n    /**\n     * Checks if the file permissions are okay.\n     */\n    public function checkFilesystemPermissions(): void\n    {\n        $instanceSetup = new Setup();\n        $instanceSetup->setRootDir(PMF_ROOT_DIR);\n\n        $dirs = ['/attachments', '/config', '/data', '/images'];\n        $failedDirs = $instanceSetup->checkDirs($dirs);\n        $numDirs = sizeof($failedDirs);\n\n        if (1 <= $numDirs) {\n            printf(\n                '<p class=\"alert alert-danger\">The following %s could not be created or %s not writable:</p><ul>',\n                (1 < $numDirs) ? 'directories' : 'directory',\n                (1 < $numDirs) ? 'are' : 'is'\n            );\n            foreach ($failedDirs as $dir) {\n                echo \"<li>$dir</li>\\n\";\n            }\n            printf(\n                '</ul><p class=\"alert alert-danger\">Please create %s manually and/or change access to chmod 775 (or ' .\n                'greater if necessary).</p>',\n                (1 < $numDirs) ? 'them' : 'it'\n            );\n            System::renderFooter();\n        }\n    }\n\n    /**\n     * Checks some non-critical settings and print some hints.\n     *\n     * @todo We should return an array of messages\n     */\n    public function checkNoncriticalSettings(): void\n    {\n        if (!extension_loaded('gd')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have GD support enabled in your PHP installation. Please ' .\n                'enable GD support in your php.ini file otherwise you can\\'t use Captchas for spam protection.</p>';\n        }\n        if (!function_exists('imagettftext')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have Freetype support enabled in the GD extension of ' .\n                'your PHP installation. Please enable Freetype support in GD extension otherwise the Captchas ' .\n                'for spam protection will be quite easy to break.</p>';\n        }\n        if (!extension_loaded('curl') || !extension_loaded('openssl')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have cURL and/or OpenSSL support enabled in your PHP ' .\n                'installation. Please enable cURL and/or OpenSSL support in your php.ini file otherwise you can\\'t ' .\n                'use the Twitter  support or Elasticsearch.</p>';\n        }\n        if (!extension_loaded('fileinfo')) {\n            echo '<p class=\"alert alert-danger\">You don\\'t have Fileinfo support enabled in your PHP installation. ' .\n                'Please enable Fileinfo support in your php.ini file otherwise you can\\'t use our backup/restore ' .\n                'functionality.</p>';\n        }\n    }\n\n    /**\n     * Checks if phpMyFAQ database tables are available\n     *\n     * @param DatabaseDriver $database\n     */\n    public function checkAvailableDatabaseTables(DatabaseDriver $database): void\n    {\n        $query = sprintf(\n            'SELECT * FROM %s%s',\n            Database::getTablePrefix(),\n            'faqconfig'\n        );\n        $result = $database->query($query);\n        if ($database->numRows($result) === 0) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Table faqconfig not found.</p>\\n\";\n            System::renderFooter(true);\n        }\n    }\n\n    /**\n     * Starts the installation.\n     *\n     * @param array|null $setup\n     * @throws Exception\n     */\n    public function startInstall(array $setup = null): void\n    {\n        $query = $uninst = $dbSetup = [];\n\n        // Check table prefix\n        $dbSetup['dbPrefix'] = Filter::filterInput(INPUT_POST, 'sqltblpre', FILTER_UNSAFE_RAW, '');\n        if ('' !== $dbSetup['dbPrefix']) {\n            Database::setTablePrefix($dbSetup['dbPrefix']);\n        }\n\n        // Check database entries\n        if (!isset($setup['dbType'])) {\n            $dbSetup['dbType'] = Filter::filterInput(INPUT_POST, 'sql_type', FILTER_UNSAFE_RAW);\n        } else {\n            $dbSetup['dbType'] = $setup['dbType'];\n        }\n        if (!is_null($dbSetup['dbType'])) {\n            $dbSetup['dbType'] = trim($dbSetup['dbType']);\n            if (!file_exists(PMF_SRC_DIR . '/phpMyFAQ/Instance/Database/' . ucfirst($dbSetup['dbType']) . '.php')) {\n                printf(\n                    '<p class=\"alert alert-danger\"><strong>Error:</strong> Invalid server type: %s</p>',\n                    $dbSetup['dbType']\n                );\n                System::renderFooter(true);\n            }\n        } else {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please select a database type.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        $dbSetup['dbServer'] = Filter::filterInput(INPUT_POST, 'sql_server', FILTER_UNSAFE_RAW, '');\n        if (is_null($dbSetup['dbServer']) && !System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a database server.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        // Check database port\n        if (!isset($setup['dbType'])) {\n            $dbSetup['dbPort'] = Filter::filterInput(INPUT_POST, 'sql_port', FILTER_VALIDATE_INT);\n        } else {\n            $dbSetup['dbPort'] = $setup['dbPort'];\n        }\n        if (is_null($dbSetup['dbPort']) && ! System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-error\\\"><strong>Error:</strong> Please add a valid database port.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        $dbSetup['dbUser'] = Filter::filterInput(INPUT_POST, 'sql_user', FILTER_UNSAFE_RAW, '');\n        if (is_null($dbSetup['dbUser']) && !System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a database username.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        $dbSetup['dbPassword'] = Filter::filterInput(INPUT_POST, 'sql_password', FILTER_UNSAFE_RAW, '');\n        if (is_null($dbSetup['dbPassword']) && !System::isSqlite($dbSetup['dbType'])) {\n            // Password can be empty...\n            $dbSetup['dbPassword'] = '';\n        }\n\n        // Check database name\n        if (!isset($setup['dbType'])) {\n            $dbSetup['dbDatabaseName'] = Filter::filterInput(INPUT_POST, 'sql_db', FILTER_UNSAFE_RAW);\n        } else {\n            $dbSetup['dbDatabaseName'] = $setup['dbDatabaseName'];\n        }\n        if (is_null($dbSetup['dbDatabaseName']) && !System::isSqlite($dbSetup['dbType'])) {\n            echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a database name.</p>\\n\";\n            System::renderFooter(true);\n        }\n\n        if (System::isSqlite($dbSetup['dbType'])) {\n            $dbSetup['dbServer'] = Filter::filterInput(\n                INPUT_POST,\n                'sql_sqlitefile',\n                FILTER_UNSAFE_RAW,\n                $setup['dbServer']\n            );\n            if (is_null($dbSetup['dbServer'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a SQLite database \" .\n                    \"filename.</p>\\n\";\n                System::renderFooter(true);\n            }\n        }\n\n        // check database connection\n        Database::setTablePrefix($dbSetup['dbPrefix']);\n        $db = Database::factory($dbSetup['dbType']);\n        try {\n            $db->connect(\n                $dbSetup['dbServer'],\n                $dbSetup['dbUser'],\n                $dbSetup['dbPassword'],\n                $dbSetup['dbDatabaseName'],\n                $dbSetup['dbPort']\n            );\n        } catch (Exception $e) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $e->getMessage());\n        }\n        if (!$db) {\n            System::renderFooter(true);\n        }\n\n        $configuration = new Configuration($db);\n\n        //\n        // Check LDAP if enabled\n        //\n        $ldapEnabled = Filter::filterInput(INPUT_POST, 'ldap_enabled', FILTER_UNSAFE_RAW);\n        if (extension_loaded('ldap') && !is_null($ldapEnabled)) {\n            $ldapSetup = [];\n\n            // check LDAP entries\n            $ldapSetup['ldapServer'] = Filter::filterInput(INPUT_POST, 'ldap_server', FILTER_UNSAFE_RAW);\n            if (is_null($ldapSetup['ldapServer'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a LDAP server.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $ldapSetup['ldapPort'] = Filter::filterInput(INPUT_POST, 'ldap_port', FILTER_VALIDATE_INT);\n            if (is_null($ldapSetup['ldapPort'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a LDAP port.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $ldapSetup['ldapBase'] = Filter::filterInput(INPUT_POST, 'ldap_base', FILTER_UNSAFE_RAW);\n            if (is_null($ldapSetup['ldapBase'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add a LDAP base search DN.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            // LDAP User and LDAP password are optional\n            $ldapSetup['ldapUser'] = Filter::filterInput(INPUT_POST, 'ldap_user', FILTER_UNSAFE_RAW);\n            $ldapSetup['ldapPassword'] = Filter::filterInput(INPUT_POST, 'ldap_password', FILTER_UNSAFE_RAW);\n\n            // set LDAP Config to prevent DB query\n            foreach ($this->mainConfig as $configKey => $configValue) {\n                if (strpos($configKey, 'ldap.') !== false) {\n                    $configuration->config[$configKey] = $configValue;\n                }\n            }\n\n            // check LDAP connection\n            $ldap = new Ldap($configuration);\n            $ldap->connect(\n                $ldapSetup['ldapServer'],\n                $ldapSetup['ldapPort'],\n                $ldapSetup['ldapBase'],\n                $ldapSetup['ldapUser'],\n                $ldapSetup['ldapPassword']\n            );\n            if (!$ldap) {\n                echo '<p class=\"alert alert-danger\"><strong>LDAP Error:</strong> ' . $ldap->error() . \"</p>\\n\";\n                System::renderFooter(true);\n            }\n        }\n\n        //\n        // Check Elasticsearch if enabled\n        //\n        $esEnabled = Filter::filterInput(INPUT_POST, 'elasticsearch_enabled', FILTER_UNSAFE_RAW);\n        if (!is_null($esEnabled)) {\n            $esSetup = [];\n            $esHostFilter = [\n                'elasticsearch_server' => [\n                    'filter' => FILTER_UNSAFE_RAW,\n                    'flags' => FILTER_REQUIRE_ARRAY\n                ]\n            ];\n\n            // ES hosts\n            $esHosts = Filter::filterInputArray(INPUT_POST, $esHostFilter);\n            if (is_null($esHosts)) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add at least one Elasticsearch \" .\n                    \"host.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $esSetup['hosts'] = $esHosts['elasticsearch_server'];\n\n            // ES Index name\n            $esSetup['index'] = Filter::filterInput(INPUT_POST, 'elasticsearch_index', FILTER_UNSAFE_RAW);\n            if (is_null($esSetup['index'])) {\n                echo \"<p class=\\\"alert alert-danger\\\"><strong>Error:</strong> Please add an Elasticsearch index \" .\n                    \"name.</p>\\n\";\n                System::renderFooter(true);\n            }\n\n            $psr4Loader = new ClassLoader();\n            $psr4Loader->addPsr4('Elasticsearch\\\\', PMF_SRC_DIR . '/libs/elasticsearch/src/Elasticsearch');\n            $psr4Loader->addPsr4('GuzzleHttp\\\\Ring\\\\', PMF_SRC_DIR . '/libs/guzzlehttp/ringphp/src');\n            $psr4Loader->addPsr4('Monolog\\\\', PMF_SRC_DIR . '/libs/monolog/src/Monolog');\n            $psr4Loader->addPsr4('Psr\\\\', PMF_SRC_DIR . '/libs/psr/log/Psr');\n            $psr4Loader->addPsr4('React\\\\Promise\\\\', PMF_SRC_DIR . '/libs/react/promise/src');\n            $psr4Loader->register();\n\n            // check LDAP connection\n            $esHosts = array_values($esHosts['elasticsearch_server']);\n            $esClient = ClientBuilder::create()->setHosts($esHosts)->build();\n\n            if (!$esClient) {\n                echo '<p class=\"alert alert-danger\"><strong>Elasticsearch Error:</strong> No connection.</p>';\n                System::renderFooter(true);\n            }\n        } else {\n            $esSetup = [];\n        }\n\n        // check login name\n        if (!isset($setup['loginname'])) {\n            $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        } else {\n            $loginName = $setup['loginname'];\n        }\n        if (is_null($loginName)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please add a login name for your account.</p>';\n            System::renderFooter(true);\n        }\n\n        // check user entries\n        if (!isset($setup['password'])) {\n            $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        } else {\n            $password = $setup['password'];\n        }\n        if (is_null($password)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please add a password for your account.</p>';\n            System::renderFooter(true);\n        }\n\n        if (!isset($setup['password_retyped'])) {\n            $passwordRetyped = Filter::filterInput(INPUT_POST, 'password_retyped', FILTER_UNSAFE_RAW);\n        } else {\n            $passwordRetyped = $setup['password_retyped'];\n        }\n\n        if (is_null($passwordRetyped)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please add a retyped password.</p>';\n            System::renderFooter(true);\n        }\n\n        if (strlen($password) <= 7 || strlen($passwordRetyped) <= 7) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Your password and retyped password are too ' .\n                'short. Please set your password and your retyped password with a minimum of 6 characters.</p>';\n            System::renderFooter(true);\n        }\n\n        if ($password != $passwordRetyped) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Your password and retyped password are not ' .\n                'equal. Please check your password and your retyped password.</p>';\n            System::renderFooter(true);\n        }\n\n        $language = Filter::filterInput(INPUT_POST, 'language', FILTER_UNSAFE_RAW, 'en');\n        $realname = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW, '');\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL, '');\n        $permLevel = Filter::filterInput(INPUT_POST, 'permLevel', FILTER_UNSAFE_RAW, 'basic');\n\n        $rootDir = isset($setup['rootDir']) ? $setup['rootDir'] : PMF_ROOT_DIR;\n\n        $instanceSetup = new setUp();\n        $instanceSetup->setRootDir($rootDir);\n\n        // Write the DB variables in database.php\n        if (!$instanceSetup->createDatabaseFile($dbSetup)) {\n            echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Setup cannot write to ./config/database.php.' .\n                '</p>';\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n\n        // check LDAP is enabled\n        if (extension_loaded('ldap') && !is_null($ldapEnabled) && count($ldapSetup)) {\n            if (!$instanceSetup->createLdapFile($ldapSetup, '')) {\n                echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Setup cannot write to ./config/ldap.php.' .\n                    '</p>';\n                $this->system->cleanFailedInstallationFiles();\n                System::renderFooter(true);\n            }\n        }\n\n        // check if Elasticsearch is enabled\n        if (!is_null($esEnabled) && count($esSetup)) {\n            if (!$instanceSetup->createElasticsearchFile($esSetup, '')) {\n                echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Setup cannot write to ' .\n                    './config/elasticsearch.php.</p>';\n                $this->system->cleanFailedInstallationFiles();\n                System::renderFooter(true);\n            }\n        }\n\n        // connect to the database using config/database.php\n        include $rootDir . '/config/database.php';\n        try {\n            $db = Database::factory($dbSetup['dbType']);\n        } catch (Exception $exception) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $exception->getMessage());\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n\n        $db->connect($DB['server'], $DB['user'], $DB['password'], $DB['db'], (int)$DB['port']);\n        if (!$db) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $db->error());\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n        try {\n            $databaseInstaller = InstanceDatabase::factory($configuration, $dbSetup['dbType']);\n            $databaseInstaller->createTables($dbSetup['dbPrefix']);\n        } catch (Exception $exception) {\n            printf(\"<p class=\\\"alert alert-danger\\\"><strong>DB Error:</strong> %s</p>\\n\", $exception->getMessage());\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n\n        $stopWords = new Stopwords($configuration);\n        $stopWords->executeInsertQueries($dbSetup['dbPrefix']);\n\n        $this->system->setDatabase($db);\n\n        // Erase any table before starting creating the required ones\n        if (!System::isSqlite($dbSetup['dbType'])) {\n            $this->system->dropTables($uninst);\n        }\n\n        // Start creating the required tables\n        $count = 0;\n        foreach ($query as $executeQuery) {\n            $result = @$db->query($executeQuery);\n            if (!$result) {\n                echo '<p class=\"alert alert-danger\"><strong>Error:</strong> Please install your version of phpMyFAQ \n                    once again or send us a <a href=\\\"https://www.phpmyfaq.de\\\" target=\\\"_blank\\\">bug report</a>.</p>';\n                printf('<p class=\"alert alert-danger\"><strong>DB error:</strong> %s</p>', $db->error());\n                printf('<code>%s</code>', htmlentities($executeQuery));\n                $this->system->dropTables($uninst);\n                $this->system->cleanFailedInstallationFiles();\n                System::renderFooter(true);\n            }\n            usleep(1000);\n            ++$count;\n            if (!($count % 10)) {\n                echo '| ';\n            }\n        }\n\n        $link = new Link('', $configuration);\n\n        // add main configuration, add personal settings\n        $this->mainConfig['main.metaPublisher'] = $realname;\n        $this->mainConfig['main.administrationMail'] = $email;\n        $this->mainConfig['main.language'] = $language;\n        $this->mainConfig['security.permLevel'] = $permLevel;\n\n        foreach ($this->mainConfig as $name => $value) {\n            $configuration->add($name, $value);\n        }\n\n        $configuration->update(['main.referenceURL' => $link->getSystemUri('/setup/index.php')]);\n        $configuration->add('security.salt', md5($configuration->getDefaultUrl()));\n\n        // add admin account and rights\n        $admin = new User($configuration);\n        if (!$admin->createUser($loginName, $password, '', 1)) {\n            printf(\n                '<p class=\"alert alert-danger\"><strong>Fatal installation error:</strong><br>' .\n                \"Couldn't create the admin user: %s</p>\\n\",\n                $admin->error()\n            );\n            $this->system->cleanFailedInstallationFiles();\n            System::renderFooter(true);\n        }\n        $admin->setStatus('protected');\n        $adminData = [\n            'display_name' => $realname,\n            'email' => $email,\n        ];\n        $admin->setUserData($adminData);\n\n        // add default rights\n        foreach ($this->mainRights as $right) {\n            $admin->perm->grantUserRight(1, $admin->perm->addRight($right));\n        }\n\n        // Add anonymous user account\n        $instanceSetup->createAnonymousUser($configuration);\n\n        // Add master instance\n        $instanceData = [\n            'url' => $link->getSystemUri($_SERVER['SCRIPT_NAME']),\n            'instance' => $link->getSystemRelativeUri('setup/index.php'),\n            'comment' => 'phpMyFAQ ' . System::getVersion(),\n        ];\n        $faqInstance = new Instance($configuration);\n        $faqInstance->addInstance($instanceData);\n\n        $faqInstanceMaster = new Master($configuration);\n        $faqInstanceMaster->createMaster($faqInstance);\n\n        // connect to Elasticsearch if enabled\n        if (!is_null($esEnabled) && is_file($rootDir . '/config/elasticsearch.php')) {\n            include $rootDir . '/config/elasticsearch.php';\n\n            $configuration->setElasticsearchConfig($PMF_ES);\n\n            $esClient = ClientBuilder::create()->setHosts($PMF_ES['hosts'])->build();\n\n            $configuration->setElasticsearch($esClient);\n\n            $faqInstanceElasticsearch = new Elasticsearch($configuration);\n            $faqInstanceElasticsearch->createIndex();\n        }\n    }\n}\n"], "filenames": ["phpmyfaq/admin/pwd.change.php", "phpmyfaq/src/phpMyFAQ/Installer.php"], "buggy_code_start_loc": [56, 848], "buggy_code_end_loc": [72, 885], "fixing_code_start_loc": [56, 848], "fixing_code_end_loc": [78, 887], "type": "CWE-521", "message": "Weak Password Requirements in GitHub repository thorsten/phpmyfaq prior to 3.1.8.", "other": {"cve": {"id": "CVE-2022-3754", "sourceIdentifier": "security@huntr.dev", "published": "2022-10-29T13:15:09.477", "lastModified": "2022-10-31T20:10:00.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weak Password Requirements in GitHub repository thorsten/phpmyfaq prior to 3.1.8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.8", "matchCriteriaId": "268E620F-3F05-4A1E-A49B-046B7CC8796C"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/d7a87d2646287828c70401ca8976ef531fbc77ea", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f4711d7f-1368-48ab-9bef-45f32e356c47", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/d7a87d2646287828c70401ca8976ef531fbc77ea"}}