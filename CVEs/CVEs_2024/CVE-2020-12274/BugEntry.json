{"buggy_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later.\n *  \n * Custom Fields definition export management\n *\n * @package   TestLink\n * @author    Francisco Mancardi (francisco.mancardi@gmail.com)\n * @copyright   2005-2009, TestLink community \n * @version     CVS: $Id: cfieldsExport.php,v 1.4 2010/03/15 20:23:09 franciscom Exp $\n * @link    http://www.teamst.org/index.php\n * @uses    config.inc.php\n *\n * @internal Revisions:\n * 20100315 - franciscom - added tlInputParameter() on init_args + goback managament\n * 20090719 - franciscom - db table prefix management   \n *\n */\nrequire_once(\"../../config.inc.php\");\nrequire_once(\"common.php\");\nrequire_once('../../third_party/adodb_xml/class.ADODB_XML.php');\n\ntestlinkInitPage($db,false,false,\"checkRights\");\n$templateCfg = templateConfiguration();\n$args = init_args();\n\n$gui = new stdClass();\n$gui->page_title = lang_get('export_cfields');\n$gui->do_it = 1;\n$gui->nothing_todo_msg = '';\n$gui->goback_url = !is_null($args->goback_url) ? $args->goback_url : ''; \n$gui->export_filename = is_null($args->export_filename) ? 'customFields.xml' : $args->export_filename;\n$gui->exportTypes = array('XML' => 'XML');\n\nswitch( $args->doAction )\n{\n    case 'doExport':\n      doExport($db,$gui->export_filename);\n      break;  \n    \n    default:\n      break;  \n}\n\n$smarty = new TLSmarty();\n$smarty->assign('gui',$gui);\n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n/*\n  function: init_args()\n\n  args:\n  \n  returns: \n\n*/\nfunction init_args()\n{\n  $args = new stdClass();\n  $_REQUEST = strings_stripSlashes($_REQUEST);\n\n  $iParams = array(\"doAction\" => array(tlInputParameter::STRING_N,0,50),\n           \"export_filename\" => array(tlInputParameter::STRING_N,0,100),\n           \"goback_url\" => array(tlInputParameter::STRING_N,0,2048));\n\n  R_PARAMS($iParams,$args);\n    $args->userID = $_SESSION['userID'];\n\n  return $args;\n}\n\n\n\n/*\n  function: doExport()\n\n  args: dbHandler\n        filename: where to export\n  \n  returns: -\n\n*/\nfunction doExport(&$dbHandler,$filename)\n{\n  $tables = tlObjectWithDB::getDBTables(array('custom_fields','cfield_node_types'));\n\n  // To solve issues with MAC OS\n  $tmp = (PHP_OS == 'Darwin') ? config_get('temp_dir') : null;\n\n  $adodbXML = new ADODB_XML(\"1.0\", \"ISO-8859-1\",$tmp);\n  $sql = \" SELECT name,label,type,possible_values,default_value,valid_regexp, \" .\n         \" length_min,length_max,show_on_design,enable_on_design,show_on_execution,\" .\n         \" enable_on_execution,show_on_testplan_design,enable_on_testplan_design, \" .\n         \" node_type_id \" .\n         \" FROM {$tables['custom_fields']} CF,{$tables['cfield_node_types']} \" .\n         \" WHERE CF.id=field_id \";\n  \n  $adodbXML->setRootTagName('custom_fields');\n  $adodbXML->setRowTagName('custom_field');\n\n  $content = $adodbXML->ConvertToXMLString($dbHandler->db, $sql);\n  downloadContentsToFile($content,$filename);\n  exit();\n}\n\nfunction checkRights(&$db,&$user)\n{\n  return $user->hasRight($db,\"cfield_view\");\n}\n?>", "<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later.\n *  \n * Custom Fields definition import management\n *\n * @package \t  TestLink\n * @author \t\t  Francisco Mancardi (francisco.mancardi@gmail.com)\n * @copyright \t2005-2013, TestLink community \n * @filesource  cfieldsImport.php,v 1.5 2010/03/15 20:22:42 franciscom Exp $\n * @link \t\t    http://www.teamst.org/index.php\n * @uses \t\t    config.inc.php\n *\n * @internal revisions\n * @since 1.9.9\n */\nrequire('../../config.inc.php');\nrequire_once('common.php');\nrequire_once('xml.inc.php');\n\ntestlinkInitPage($db,false,false,\"checkRights\");\n$templateCfg = templateConfiguration();\n\n$resultMap = null;\n$args = init_args();\n\n$gui=new stdClass();\n$gui->page_title=lang_get('import_cfields');\n$gui->goback_url = !is_null($args->goback_url) ? $args->goback_url : ''; \n$gui->file_check = array('show_results' => 0, 'status_ok' => 1, \n                         'msg' => 'ok', 'filename' => '');\n\nswitch( $args->doAction )\n{\n    case 'doImport':\n        $gui->file_check = doImport($db);\n    \tbreak;  \n    \n    default:\n    \tbreak;  \n}\n\n$obj_mgr = new cfield_mgr($db);\n$gui->importTypes = array('XML' => 'XML');\n$gui->importLimitKB = (config_get('import_file_max_size_bytes') / 1024);\n\n$smarty = new TLSmarty();\n$smarty->assign('gui',$gui);  \n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n\n/*\n  function: init_args()\n\n  args:\n  \n  returns: \n\n*/\nfunction init_args()\n{\n\t$args = new stdClass();\n\t$_REQUEST = strings_stripSlashes($_REQUEST);\n\n\t$iParams = array(\"doAction\" => array(tlInputParameter::STRING_N,0,50),\n\t \t\t\t\t \"export_filename\" => array(tlInputParameter::STRING_N,0,100),\n\t \t\t\t\t \"goback_url\" => array(tlInputParameter::STRING_N,0,2048));\n\n\tR_PARAMS($iParams,$args);\n\n  \t// $args->doAction = isset($_REQUEST['doAction']) ? $_REQUEST['doAction'] : null;\n  \t// $args->export_filename=isset($_REQUEST['export_filename']) ? $_REQUEST['export_filename'] : null;\n  \t// $args->goback_url = isset($_REQUEST['goback_url']) ? $_REQUEST['goback_url'] : null;\n\n  \t$args->userID = $_SESSION['userID'];\n\n\treturn $args;\n}\n\n\n/**\n * @param object dbHandler reference to db handler\n *\n */\nfunction doImport(&$dbHandler)\n{\n\n  \t$import_msg=array('ok' => array(), 'ko' => array());\n  \t$file_check=array('show_results' => 0, 'status_ok' => 0, 'msg' => '', \n                    'filename' => '', 'import_msg' => $import_msg);\n  \n  \t$key='targetFilename';\n\t$dest = TL_TEMP_PATH . session_id(). \"-import_cfields.tmp\";\n\t$source = isset($_FILES[$key]['tmp_name']) ? $_FILES[$key]['tmp_name'] : null;\n\t\n\tif (($source != 'none') && ($source != ''))\n\t{ \n\t\t$file_check['filename'] = $_FILES[$key]['name'];\n\t\t$file_check['status_ok'] = 1;\n\t\tif (move_uploaded_file($source, $dest))\n\t\t{\n      $file_check['status_ok']=!(($xml=@simplexml_load_file_wrapper($dest)) === FALSE);\n\t\t}\n    if( $file_check['status_ok'] )\n    {\n      $file_check['show_results']=1;\n      $cfield_mgr = new cfield_mgr($dbHandler);\n      foreach($xml as $cf)\n      {\n        if( is_null($cfield_mgr->get_by_name($cf->name)) )\n        {\n          $cfield_mgr->create((array) $cf);\n          $import_msg['ok'][]=sprintf(lang_get('custom_field_imported'),$cf->name);              \n        }\n        else\n        {\n          $import_msg['ko'][]=sprintf(lang_get('custom_field_already_exists'),$cf->name);              \n        }\n      }      \n    }\n    else\n    {\n      $file_check['msg']=lang_get('problems_loading_xml_content');  \n    }\n \t}\n\telse\n\t{\n\t\t$file_check = array('show_results'=>0, 'status_ok' => 0, \n\t\t                    'msg' => lang_get('please_choose_file_to_import'));\n\t}\n  \n  $file_check['import_msg']=$import_msg;\n  return $file_check;\n}\n\n/**\n * \n *\n */\nfunction checkRights(&$db,&$user)\n{\n\treturn $user->hasRight($db,\"cfield_management\");\n}\n?>"], "fixing_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later.\n *  \n * Custom Fields definition export management\n *\n * @package   TestLink\n * @author    Francisco Mancardi (francisco.mancardi@gmail.com)\n * @copyright   2005-2020, TestLink community \n * @uses    config.inc.php\n *\n *\n */\nrequire_once(\"../../config.inc.php\");\nrequire_once(\"common.php\");\nrequire_once('../../third_party/adodb_xml/class.ADODB_XML.php');\n\ntestlinkInitPage($db,false,false,\"checkRights\");\n$templateCfg = templateConfiguration();\n$args = init_args();\n\n\n$gui = new stdClass();\n$gui->page_title = lang_get('export_cfields');\n$gui->do_it = 1;\n$gui->nothing_todo_msg = '';\n$gui->goback_url = !is_null($args->goback_url) ? $args->goback_url : ''; \n$gui->export_filename = is_null($args->export_filename) ? 'customFields.xml' : $args->export_filename;\n$gui->exportTypes = array('XML' => 'XML');\n\nswitch( $args->doAction )\n{\n    case 'doExport':\n      doExport($db,$gui->export_filename);\n      break;  \n    \n    default:\n      break;  \n}\n\n$smarty = new TLSmarty();\n$smarty->assign('gui',$gui);\n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n/*\n  function: init_args()\n\n  args:\n  \n  returns: \n\n*/\nfunction init_args()\n{\n  $args = new stdClass();\n  $_REQUEST = strings_stripSlashes($_REQUEST);\n\n  $iParams = \n    array(\"doAction\" \n             => array(tlInputParameter::STRING_N,0,50),\n           \"export_filename\" \n              => array(tlInputParameter::STRING_N,0,100));\n\n  R_PARAMS($iParams,$args);\n  $args->userID = $_SESSION['userID'];\n\n  $args->goback_url = $_SESSION['basehref'] .\n                      'lib/cfields/cfieldsView.php';\n\n  return $args;\n}\n\n\n\n/*\n  function: doExport()\n\n  args: dbHandler\n        filename: where to export\n  \n  returns: -\n\n*/\nfunction doExport(&$dbHandler,$filename)\n{\n  $tables = tlObjectWithDB::getDBTables(array('custom_fields','cfield_node_types'));\n\n  // To solve issues with MAC OS\n  $tmp = (PHP_OS == 'Darwin') ? config_get('temp_dir') : null;\n\n  $adodbXML = new ADODB_XML(\"1.0\", \"ISO-8859-1\",$tmp);\n  $sql = \" SELECT name,label,type,possible_values,default_value,valid_regexp, \" .\n         \" length_min,length_max,show_on_design,enable_on_design,show_on_execution,\" .\n         \" enable_on_execution,show_on_testplan_design,enable_on_testplan_design, \" .\n         \" node_type_id \" .\n         \" FROM {$tables['custom_fields']} CF,{$tables['cfield_node_types']} \" .\n         \" WHERE CF.id=field_id \";\n  \n  $adodbXML->setRootTagName('custom_fields');\n  $adodbXML->setRowTagName('custom_field');\n\n  $content = $adodbXML->ConvertToXMLString($dbHandler->db, $sql);\n  downloadContentsToFile($content,$filename);\n  exit();\n}\n\nfunction checkRights(&$db,&$user)\n{\n  return $user->hasRight($db,\"cfield_view\");\n}\n?>", "<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later.\n *  \n * Custom Fields definition import management\n *\n * @package \t  TestLink\n * @author \t\t  Francisco Mancardi (francisco.mancardi@gmail.com)\n * @copyright \t2005-2020, TestLink community \n * @filesource  cfieldsImport.php\n * @uses \t\t    config.inc.php\n *\n */\nrequire('../../config.inc.php');\nrequire_once('common.php');\nrequire_once('xml.inc.php');\n\ntestlinkInitPage($db,false,false,\"checkRights\");\n$templateCfg = templateConfiguration();\n\n$resultMap = null;\n$args = init_args();\n\n$gui=new stdClass();\n$gui->page_title=lang_get('import_cfields');\n$gui->goback_url = !is_null($args->goback_url) ? $args->goback_url : ''; \n$gui->file_check = array('show_results' => 0, 'status_ok' => 1, \n                         'msg' => 'ok', 'filename' => '');\n\nswitch( $args->doAction )\n{\n    case 'doImport':\n        $gui->file_check = doImport($db);\n    \tbreak;  \n    \n    default:\n    \tbreak;  \n}\n\n$obj_mgr = new cfield_mgr($db);\n$gui->importTypes = array('XML' => 'XML');\n$gui->importLimitKB = (config_get('import_file_max_size_bytes') / 1024);\n\n$smarty = new TLSmarty();\n$smarty->assign('gui',$gui);  \n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n\n/*\n  function: init_args()\n\n  args:\n  \n  returns: \n\n*/\nfunction init_args()\n{\n\t$args = new stdClass();\n\t$_REQUEST = strings_stripSlashes($_REQUEST);\n\n\t$iParams = \n    array(\"doAction\" => array(tlInputParameter::STRING_N,0,50),\n\t \t\t\t\t\"export_filename\" \n             => array(tlInputParameter::STRING_N,0,100));\n\n\tR_PARAMS($iParams,$args);\n  $args->userID = $_SESSION['userID'];\n\n  $args->goback_url = $_SESSION['basehref'] .\n                      'lib/cfields/cfieldsView.php';\n\n\treturn $args;\n}\n\n\n/**\n * @param object dbHandler reference to db handler\n *\n */\nfunction doImport(&$dbHandler)\n{\n\n  \t$import_msg=array('ok' => array(), 'ko' => array());\n  \t$file_check=array('show_results' => 0, 'status_ok' => 0, 'msg' => '', \n                    'filename' => '', 'import_msg' => $import_msg);\n  \n  \t$key='targetFilename';\n\t$dest = TL_TEMP_PATH . session_id(). \"-import_cfields.tmp\";\n\t$source = isset($_FILES[$key]['tmp_name']) ? $_FILES[$key]['tmp_name'] : null;\n\t\n\tif (($source != 'none') && ($source != ''))\n\t{ \n\t\t$file_check['filename'] = $_FILES[$key]['name'];\n\t\t$file_check['status_ok'] = 1;\n\t\tif (move_uploaded_file($source, $dest))\n\t\t{\n      $file_check['status_ok']=!(($xml=@simplexml_load_file_wrapper($dest)) === FALSE);\n\t\t}\n    if( $file_check['status_ok'] )\n    {\n      $file_check['show_results']=1;\n      $cfield_mgr = new cfield_mgr($dbHandler);\n      foreach($xml as $cf)\n      {\n        if( is_null($cfield_mgr->get_by_name($cf->name)) )\n        {\n          $cfield_mgr->create((array) $cf);\n          $import_msg['ok'][]=sprintf(lang_get('custom_field_imported'),$cf->name);              \n        }\n        else\n        {\n          $import_msg['ko'][]=sprintf(lang_get('custom_field_already_exists'),$cf->name);              \n        }\n      }      \n    }\n    else\n    {\n      $file_check['msg']=lang_get('problems_loading_xml_content');  \n    }\n \t}\n\telse\n\t{\n\t\t$file_check = array('show_results'=>0, 'status_ok' => 0, \n\t\t                    'msg' => lang_get('please_choose_file_to_import'));\n\t}\n  \n  $file_check['import_msg']=$import_msg;\n  return $file_check;\n}\n\n/**\n * \n *\n */\nfunction checkRights(&$db,&$user)\n{\n\treturn $user->hasRight($db,\"cfield_management\");\n}\n?>"], "filenames": ["lib/cfields/cfieldsExport.php", "lib/cfields/cfieldsImport.php"], "buggy_code_start_loc": [10, 10], "buggy_code_end_loc": [70, 78], "fixing_code_start_loc": [10, 10], "fixing_code_end_loc": [71, 74], "type": "NVD-CWE-noinfo", "message": "In TestLink 1.9.20, the lib/cfields/cfieldsExport.php goback_url parameter causes a security risk because it depends on client input and is not constrained to lib/cfields/cfieldsView.php at the web site associated with the session.", "other": {"cve": {"id": "CVE-2020-12274", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-27T13:15:12.553", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In TestLink 1.9.20, the lib/cfields/cfieldsExport.php goback_url parameter causes a security risk because it depends on client input and is not constrained to lib/cfields/cfieldsView.php at the web site associated with the session."}, {"lang": "es", "value": "En TestLink versi\u00f3n 1.9.20, el par\u00e1metro goback_url de la biblioteca  lib/cfields/cfieldsExport.php causa un riesgo de seguridad porque depende de una entrada del cliente y no est\u00e1 restringida en la biblioteca  lib/cfields/cfieldsView.php en el sitio web asociado con la sesi\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testlink:testlink:1.9.20:*:*:*:*:*:*:*", "matchCriteriaId": "1007C963-3BC2-41CF-9C5F-C8F54EAAAF8A"}]}]}], "references": [{"url": "http://mantis.testlink.org/view.php?id=8894", "source": "cve@mitre.org", "tags": ["Permissions Required"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/2d17cd00f981f8e8c97de34a12e368ba2a55e3d0", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/2d17cd00f981f8e8c97de34a12e368ba2a55e3d0"}}