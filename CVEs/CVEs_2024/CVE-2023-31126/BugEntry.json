{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n/*\n * Alternatively, at your choice, the contents of this file may be used under the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.regex.Pattern;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.phase.Initializable;\nimport org.xwiki.component.phase.InitializationException;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.xml.html.HTMLElementSanitizer;\n\n/**\n * Secure default implementation of {@link HTMLElementSanitizer} based on a definition of allowed elements and\n * attributes.\n * <p>\n * This is heavily inspired by DOMPurify by Cure53 and other contributors | Released under the Apache license 2.0 and\n * Mozilla Public License 2.0 - <a href=\"https://github.com/cure53/DOMPurify/blob/main/LICENSE\">LICENSE</a>.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@Component\n@Named(SecureHTMLElementSanitizer.HINT)\n@Singleton\n@Unstable\npublic class SecureHTMLElementSanitizer implements HTMLElementSanitizer, Initializable\n{\n    /**\n     * The hint of this component.\n     */\n    public static final String HINT = \"secure\";\n\n    static final Pattern IS_SCRIPT_OR_DATA = Pattern.compile(\"^(?:\\\\w+script|data):\", Pattern.CASE_INSENSITIVE);\n\n    static final Pattern ATTR_WHITESPACE =\n        Pattern.compile(\"[\\\\u0000-\\\\u0020\\\\u00A0\\\\u1680\\\\u180E\\\\u2000-\\\\u2029\\\\u205F\\\\u3000]\");\n\n    static final Pattern DATA_ATTR = Pattern.compile(\"^data-[\\\\-\\\\w.\\\\u00B7-\\\\uFFFF]\");\n\n    static final Pattern ARIA_ATTR = Pattern.compile(\"^aria-[\\\\-\\\\w]+$\");\n\n    static final Pattern IS_ALLOWED_URI = Pattern.compile(\"^(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):\",\n        Pattern.CASE_INSENSITIVE);\n\n    static final Pattern IS_NO_URI = Pattern.compile(\"^(?:[^a-z]|[a-z+.\\\\-]+(?:[^a-z+.\\\\-:]|$))\",\n        Pattern.CASE_INSENSITIVE);\n\n    @Inject\n    private HTMLElementSanitizerConfiguration htmlElementSanitizerConfiguration;\n\n    @Inject\n    private HTMLDefinitions htmlDefinitions;\n\n    @Inject\n    private SVGDefinitions svgDefinitions;\n\n    @Inject\n    private MathMLDefinitions mathMLDefinitions;\n\n    /**\n     * Additionally allowed elements.\n     */\n    private final Set<String> extraAllowedTags;\n\n    /**\n     * Additionally allowed attributes.\n     */\n    private final Set<String> extraAllowedAttributes;\n\n    /**\n     * XML attributes that should be allowed.\n     */\n    private final Set<String> xmlAttributes;\n\n    /**\n     * Tags that are safe for data: URIs.\n     */\n    private final Set<String> dataUriTags;\n\n    /**\n     * Attributes safe for values like \"javascript:\".\n     */\n    private final Set<String> uriSafeAttributes;\n\n    private final Set<String> forbidTags;\n\n    private final Set<String> forbidAttributes;\n\n    private boolean allowUnknownProtocols;\n\n    private Pattern allowedUriPattern;\n\n    /**\n     * Default constructor.\n     */\n    public SecureHTMLElementSanitizer()\n    {\n        this.dataUriTags = new HashSet<>(Arrays.asList(\"audio\", \"video\", \"img\", \"source\", \"image\", \"track\"));\n\n        this.uriSafeAttributes = new HashSet<>(\n            Arrays.asList(\"alt\", \"class\", \"for\", \"id\", \"label\", \"name\", \"pattern\", \"placeholder\", \"role\", \"summary\",\n                \"title\", \"value\", \"style\", \"xmlns\"));\n\n        this.xmlAttributes =\n            new HashSet<>(Arrays.asList(\"xlink:href\", \"xml:id\", \"xlink:title\", \"xml:space\", \"xmlns:xlink\"));\n\n        this.extraAllowedTags = new HashSet<>();\n\n        this.extraAllowedAttributes = new HashSet<>();\n\n        this.forbidTags = new HashSet<>();\n\n        this.forbidAttributes = new HashSet<>();\n\n        this.allowedUriPattern = IS_ALLOWED_URI;\n    }\n\n    @Override\n    public void initialize() throws InitializationException\n    {\n        this.extraAllowedTags.addAll(this.htmlElementSanitizerConfiguration.getExtraAllowedTags());\n        this.extraAllowedAttributes.addAll(this.htmlElementSanitizerConfiguration.getExtraAllowedAttributes());\n        this.uriSafeAttributes.addAll(this.htmlElementSanitizerConfiguration.getExtraUriSafeAttributes());\n        this.dataUriTags.addAll(this.htmlElementSanitizerConfiguration.getExtraDataUriTags());\n        this.allowUnknownProtocols = this.htmlElementSanitizerConfiguration.isAllowUnknownProtocols();\n        this.forbidTags.addAll(this.htmlElementSanitizerConfiguration.getForbidTags());\n        this.forbidAttributes.addAll(this.htmlElementSanitizerConfiguration.getForbidAttributes());\n        String configuredRegexp = this.htmlElementSanitizerConfiguration.getAllowedUriRegexp();\n        if (StringUtils.isNotBlank(configuredRegexp)) {\n            this.allowedUriPattern = Pattern.compile(configuredRegexp, Pattern.CASE_INSENSITIVE);\n        }\n    }\n\n    @Override\n    public boolean isElementAllowed(String elementName)\n    {\n        return !this.forbidTags.contains(elementName)\n            && (this.extraAllowedTags.contains(elementName) || isElementSafe(elementName));\n    }\n\n    private boolean isElementSafe(String elementName)\n    {\n        return this.htmlDefinitions.isSafeTag(elementName) || this.svgDefinitions.isSafeTag(elementName)\n            || this.mathMLDefinitions.isSafeTag(elementName);\n    }\n\n    @Override\n    public boolean isAttributeAllowed(String elementName, String attributeName, String attributeValue)\n    {\n        boolean result = false;\n\n        String lowerElement = elementName.toLowerCase();\n        String lowerAttribute = attributeName.toLowerCase();\n\n        if ((DATA_ATTR.matcher(lowerAttribute).find() || ARIA_ATTR.matcher(lowerAttribute).find())\n            && !this.forbidAttributes.contains(lowerAttribute))\n        {\n            result = true;\n        } else if (isAttributeAllowed(lowerAttribute) && !this.forbidAttributes.contains(lowerAttribute)) {\n            result = isAllowedValue(lowerElement, lowerAttribute, attributeValue);\n        }\n\n        return result;\n    }\n\n    private boolean isAllowedValue(String lowercaseElementName, String lowercaseAttributeName, String attributeValue)\n    {\n        // Break into several statements to avoid too long boolean expression.\n        boolean result = StringUtils.isBlank(attributeValue);\n        if (!result) {\n            String valueNoWhitespace = ATTR_WHITESPACE.matcher(attributeValue).replaceAll(\"\");\n            result = this.uriSafeAttributes.contains(lowercaseAttributeName);\n            result = result || IS_NO_URI.matcher(valueNoWhitespace).find();\n            result = result || this.allowedUriPattern.matcher(valueNoWhitespace).find();\n            result = result || isAllowedDataValue(lowercaseElementName, lowercaseAttributeName, attributeValue);\n            result = result || (this.allowUnknownProtocols && !isScriptOrData(attributeValue));\n        }\n        return result;\n    }\n\n    private boolean isAttributeAllowed(String attributeName)\n    {\n        boolean result = this.extraAllowedAttributes.contains(attributeName);\n        result = result || this.htmlDefinitions.isAllowedAttribute(attributeName);\n        result = result || this.svgDefinitions.isAllowedAttribute(attributeName);\n        result = result || this.mathMLDefinitions.isAllowedAttribute(attributeName);\n        result = result || this.xmlAttributes.contains(attributeName);\n        return result;\n    }\n\n    private boolean isScriptOrData(String attributeValue)\n    {\n        return IS_SCRIPT_OR_DATA.matcher(ATTR_WHITESPACE.matcher(attributeValue).replaceAll(\"\")).find();\n    }\n\n    private boolean isAllowedDataValue(String elementName, String attributeName, String attributeValue)\n    {\n        boolean attributeAllowsData = \"src\".equals(attributeName) || \"xlink:href\".equals(attributeName)\n            || \"href\".equals(attributeName);\n        return attributeAllowsData && !\"script\".equals(elementName) && attributeValue.startsWith(\"data:\")\n            && this.dataUriTags.contains(elementName);\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.test.annotation.BeforeComponent;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.xml.html.HTMLConstants;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for the {@link SecureHTMLElementSanitizer}.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@ComponentTest\n@ComponentList({\n    HTMLDefinitions.class,\n    MathMLDefinitions.class,\n    SVGDefinitions.class\n})\nclass SecureHTMLElementSanitizerTest\n{\n    private static final String ALLOWED_ATTRIBUTE = \"allowed_attribute\";\n\n    private static final String ONERROR = \"onerror\";\n\n    @MockComponent\n    private HTMLElementSanitizerConfiguration htmlElementSanitizerConfiguration;\n\n    @InjectMockComponents\n    private SecureHTMLElementSanitizer secureHTMLElementSanitizer;\n\n    @BeforeComponent\n    void setupMocks()\n    {\n        when(this.htmlElementSanitizerConfiguration.getForbidTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_A));\n        when(this.htmlElementSanitizerConfiguration.getForbidAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_ALT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_SCRIPT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedAttributes())\n            .thenReturn(Arrays.asList(ALLOWED_ATTRIBUTE, ONERROR));\n        when(this.htmlElementSanitizerConfiguration.getExtraUriSafeAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_SRC));\n        when(this.htmlElementSanitizerConfiguration.getExtraDataUriTags())\n            .thenReturn(Arrays.asList(HTMLConstants.TAG_SCRIPT, HTMLConstants.TAG_NAV));\n        when(this.htmlElementSanitizerConfiguration.isAllowUnknownProtocols())\n            .thenReturn(false);\n        when(this.htmlElementSanitizerConfiguration.getAllowedUriRegexp())\n            .thenReturn(\"^(xwiki|https):\");\n    }\n\n    @Test\n    void forbiddenTags()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_A));\n    }\n\n    @Test\n    void forbiddenAttributes()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_ALT, \"XWiki\"));\n    }\n\n    @Test\n    void extraAllowedTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_SCRIPT));\n    }\n\n    @Test\n    void extraAllowedAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ALLOWED_ATTRIBUTE,\n            \"value\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ONERROR, \"alert(1)\"));\n    }\n\n    @Test\n    void extraUriSafeAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_SRC, \"javascript:alert(1)\"));\n    }\n\n    @Test\n    void extraDataUriTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_NAV,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:test\"));\n        // Script cannot be enabled for data-attributes.\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_SCRIPT,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:script\"));\n    }\n\n    @Test\n    void restrictedURIs()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"https://www.xwiki.org\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"xwiki:test\"));\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"http://example.com\"));\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n/*\n * Alternatively, at your choice, the contents of this file may be used under the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.regex.Pattern;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.phase.Initializable;\nimport org.xwiki.component.phase.InitializationException;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.xml.html.HTMLElementSanitizer;\n\n/**\n * Secure default implementation of {@link HTMLElementSanitizer} based on a definition of allowed elements and\n * attributes.\n * <p>\n * This is heavily inspired by DOMPurify by Cure53 and other contributors | Released under the Apache license 2.0 and\n * Mozilla Public License 2.0 - <a href=\"https://github.com/cure53/DOMPurify/blob/main/LICENSE\">LICENSE</a>.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@Component\n@Named(SecureHTMLElementSanitizer.HINT)\n@Singleton\n@Unstable\npublic class SecureHTMLElementSanitizer implements HTMLElementSanitizer, Initializable\n{\n    /**\n     * The hint of this component.\n     */\n    public static final String HINT = \"secure\";\n\n    static final Pattern IS_SCRIPT_OR_DATA = Pattern.compile(\"^(?:\\\\w+script|data):\", Pattern.CASE_INSENSITIVE);\n\n    static final Pattern ATTR_WHITESPACE =\n        Pattern.compile(\"[\\\\u0000-\\\\u0020\\\\u00A0\\\\u1680\\\\u180E\\\\u2000-\\\\u2029\\\\u205F\\\\u3000]\");\n\n    /**\n     * Pattern that matches valid data-attributes.\n     * <p>\n     * Following the <a href=\"https://html.spec.whatwg.org/multipage/dom.html\n     #embedding-custom-non-visible-data-with-the-data-*-attributes\">HTML standard</a>\n     * this means that the name starts with \"data-\", has at least one character after the hyphen and is\n     * <a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible\">XML-compatible</a>,\n     * i.e., matches the <a href=\"https://www.w3.org/TR/xml/#NT-Name\">Name production</a> without \":\".\n     */\n    static final Pattern DATA_ATTR = Pattern.compile(\"^data-[A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\"\n        + \"\\\\u00F8-\\\\u02ff\\\\u0370-\\\\u037d\\\\u037f-\\\\u1fff\\\\u200c\\\\u200d\\\\u2070-\\\\u218f\\\\u2c00-\\\\u2fef\\\\u3001-\\\\ud7ff\"\n        + \"\\\\uf900-\\\\ufdcf\\\\ufdf0-\\\\ufffd\\\\x{10000}-\\\\x{EFFFF}\\\\-.0-9\\\\u00b7\\\\u0300-\\\\u036f\\\\u203f-\\\\u2040]+$\");\n\n    static final Pattern ARIA_ATTR = Pattern.compile(\"^aria-[\\\\-\\\\w]+$\");\n\n    static final Pattern IS_ALLOWED_URI = Pattern.compile(\"^(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):\",\n        Pattern.CASE_INSENSITIVE);\n\n    static final Pattern IS_NO_URI = Pattern.compile(\"^(?:[^a-z]|[a-z+.\\\\-]+(?:[^a-z+.\\\\-:]|$))\",\n        Pattern.CASE_INSENSITIVE);\n\n    @Inject\n    private HTMLElementSanitizerConfiguration htmlElementSanitizerConfiguration;\n\n    @Inject\n    private HTMLDefinitions htmlDefinitions;\n\n    @Inject\n    private SVGDefinitions svgDefinitions;\n\n    @Inject\n    private MathMLDefinitions mathMLDefinitions;\n\n    /**\n     * Additionally allowed elements.\n     */\n    private final Set<String> extraAllowedTags;\n\n    /**\n     * Additionally allowed attributes.\n     */\n    private final Set<String> extraAllowedAttributes;\n\n    /**\n     * XML attributes that should be allowed.\n     */\n    private final Set<String> xmlAttributes;\n\n    /**\n     * Tags that are safe for data: URIs.\n     */\n    private final Set<String> dataUriTags;\n\n    /**\n     * Attributes safe for values like \"javascript:\".\n     */\n    private final Set<String> uriSafeAttributes;\n\n    private final Set<String> forbidTags;\n\n    private final Set<String> forbidAttributes;\n\n    private boolean allowUnknownProtocols;\n\n    private Pattern allowedUriPattern;\n\n    /**\n     * Default constructor.\n     */\n    public SecureHTMLElementSanitizer()\n    {\n        this.dataUriTags = new HashSet<>(Arrays.asList(\"audio\", \"video\", \"img\", \"source\", \"image\", \"track\"));\n\n        this.uriSafeAttributes = new HashSet<>(\n            Arrays.asList(\"alt\", \"class\", \"for\", \"id\", \"label\", \"name\", \"pattern\", \"placeholder\", \"role\", \"summary\",\n                \"title\", \"value\", \"style\", \"xmlns\"));\n\n        this.xmlAttributes =\n            new HashSet<>(Arrays.asList(\"xlink:href\", \"xml:id\", \"xlink:title\", \"xml:space\", \"xmlns:xlink\"));\n\n        this.extraAllowedTags = new HashSet<>();\n\n        this.extraAllowedAttributes = new HashSet<>();\n\n        this.forbidTags = new HashSet<>();\n\n        this.forbidAttributes = new HashSet<>();\n\n        this.allowedUriPattern = IS_ALLOWED_URI;\n    }\n\n    @Override\n    public void initialize() throws InitializationException\n    {\n        this.extraAllowedTags.addAll(this.htmlElementSanitizerConfiguration.getExtraAllowedTags());\n        this.extraAllowedAttributes.addAll(this.htmlElementSanitizerConfiguration.getExtraAllowedAttributes());\n        this.uriSafeAttributes.addAll(this.htmlElementSanitizerConfiguration.getExtraUriSafeAttributes());\n        this.dataUriTags.addAll(this.htmlElementSanitizerConfiguration.getExtraDataUriTags());\n        this.allowUnknownProtocols = this.htmlElementSanitizerConfiguration.isAllowUnknownProtocols();\n        this.forbidTags.addAll(this.htmlElementSanitizerConfiguration.getForbidTags());\n        this.forbidAttributes.addAll(this.htmlElementSanitizerConfiguration.getForbidAttributes());\n        String configuredRegexp = this.htmlElementSanitizerConfiguration.getAllowedUriRegexp();\n        if (StringUtils.isNotBlank(configuredRegexp)) {\n            this.allowedUriPattern = Pattern.compile(configuredRegexp, Pattern.CASE_INSENSITIVE);\n        }\n    }\n\n    @Override\n    public boolean isElementAllowed(String elementName)\n    {\n        return !this.forbidTags.contains(elementName)\n            && (this.extraAllowedTags.contains(elementName) || isElementSafe(elementName));\n    }\n\n    private boolean isElementSafe(String elementName)\n    {\n        return this.htmlDefinitions.isSafeTag(elementName) || this.svgDefinitions.isSafeTag(elementName)\n            || this.mathMLDefinitions.isSafeTag(elementName);\n    }\n\n    @Override\n    public boolean isAttributeAllowed(String elementName, String attributeName, String attributeValue)\n    {\n        boolean result = false;\n\n        String lowerElement = elementName.toLowerCase();\n        String lowerAttribute = attributeName.toLowerCase();\n\n        if ((DATA_ATTR.matcher(lowerAttribute).matches() || ARIA_ATTR.matcher(lowerAttribute).matches())\n            && !this.forbidAttributes.contains(lowerAttribute))\n        {\n            result = true;\n        } else if (isAttributeAllowed(lowerAttribute) && !this.forbidAttributes.contains(lowerAttribute)) {\n            result = isAllowedValue(lowerElement, lowerAttribute, attributeValue);\n        }\n\n        return result;\n    }\n\n    private boolean isAllowedValue(String lowercaseElementName, String lowercaseAttributeName, String attributeValue)\n    {\n        // Break into several statements to avoid too long boolean expression.\n        boolean result = StringUtils.isBlank(attributeValue);\n        if (!result) {\n            String valueNoWhitespace = ATTR_WHITESPACE.matcher(attributeValue).replaceAll(\"\");\n            result = this.uriSafeAttributes.contains(lowercaseAttributeName);\n            result = result || IS_NO_URI.matcher(valueNoWhitespace).find();\n            result = result || this.allowedUriPattern.matcher(valueNoWhitespace).find();\n            result = result || isAllowedDataValue(lowercaseElementName, lowercaseAttributeName, attributeValue);\n            result = result || (this.allowUnknownProtocols && !isScriptOrData(attributeValue));\n        }\n        return result;\n    }\n\n    private boolean isAttributeAllowed(String attributeName)\n    {\n        boolean result = this.extraAllowedAttributes.contains(attributeName);\n        result = result || this.htmlDefinitions.isAllowedAttribute(attributeName);\n        result = result || this.svgDefinitions.isAllowedAttribute(attributeName);\n        result = result || this.mathMLDefinitions.isAllowedAttribute(attributeName);\n        result = result || this.xmlAttributes.contains(attributeName);\n        return result;\n    }\n\n    private boolean isScriptOrData(String attributeValue)\n    {\n        return IS_SCRIPT_OR_DATA.matcher(ATTR_WHITESPACE.matcher(attributeValue).replaceAll(\"\")).find();\n    }\n\n    private boolean isAllowedDataValue(String elementName, String attributeName, String attributeValue)\n    {\n        boolean attributeAllowsData = \"src\".equals(attributeName) || \"xlink:href\".equals(attributeName)\n            || \"href\".equals(attributeName);\n        return attributeAllowsData && !\"script\".equals(elementName) && attributeValue.startsWith(\"data:\")\n            && this.dataUriTags.contains(elementName);\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.xwiki.test.annotation.BeforeComponent;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.xml.html.HTMLConstants;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for the {@link SecureHTMLElementSanitizer}.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@ComponentTest\n@ComponentList({\n    HTMLDefinitions.class,\n    MathMLDefinitions.class,\n    SVGDefinitions.class\n})\nclass SecureHTMLElementSanitizerTest\n{\n    private static final String ALLOWED_ATTRIBUTE = \"allowed_attribute\";\n\n    private static final String ONERROR = \"onerror\";\n\n    @MockComponent\n    private HTMLElementSanitizerConfiguration htmlElementSanitizerConfiguration;\n\n    @InjectMockComponents\n    private SecureHTMLElementSanitizer secureHTMLElementSanitizer;\n\n    @BeforeComponent\n    void setupMocks()\n    {\n        when(this.htmlElementSanitizerConfiguration.getForbidTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_A));\n        when(this.htmlElementSanitizerConfiguration.getForbidAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_ALT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_SCRIPT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedAttributes())\n            .thenReturn(Arrays.asList(ALLOWED_ATTRIBUTE, ONERROR));\n        when(this.htmlElementSanitizerConfiguration.getExtraUriSafeAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_SRC));\n        when(this.htmlElementSanitizerConfiguration.getExtraDataUriTags())\n            .thenReturn(Arrays.asList(HTMLConstants.TAG_SCRIPT, HTMLConstants.TAG_NAV));\n        when(this.htmlElementSanitizerConfiguration.isAllowUnknownProtocols())\n            .thenReturn(false);\n        when(this.htmlElementSanitizerConfiguration.getAllowedUriRegexp())\n            .thenReturn(\"^(xwiki|https):\");\n    }\n\n    @Test\n    void forbiddenTags()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_A));\n    }\n\n    @Test\n    void forbiddenAttributes()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_ALT, \"XWiki\"));\n    }\n\n    @Test\n    void extraAllowedTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_SCRIPT));\n    }\n\n    @Test\n    void extraAllowedAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ALLOWED_ATTRIBUTE,\n            \"value\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ONERROR, \"alert(1)\"));\n    }\n\n    @Test\n    void extraUriSafeAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_SRC, \"javascript:alert(1)\"));\n    }\n\n    @Test\n    void extraDataUriTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_NAV,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:test\"));\n        // Script cannot be enabled for data-attributes.\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_SCRIPT,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:script\"));\n    }\n\n    @Test\n    void restrictedURIs()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"https://www.xwiki.org\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"xwiki:test\"));\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"http://example.com\"));\n    }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"data-, false\",\n        \"data-a, true\",\n        \"data-x-wiki.test_\\u0192, true\",\n        \"data-x\\u2713, false\",\n        \"data-x/test, false\",\n        \"data-x>test, false\",\n        \"data-x:y, false\"\n    })\n    void dataAttributes(String attribute, boolean accepted)\n    {\n        assertEquals(accepted, this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_DIV, attribute,\n            \"hello\"));\n    }\n}\n"], "filenames": ["xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/SecureHTMLElementSanitizer.java", "xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/internal/html/SecureHTMLElementSanitizerTest.java"], "buggy_code_start_loc": [68, 25], "buggy_code_end_loc": [186, 135], "fixing_code_start_loc": [68, 26], "fixing_code_end_loc": [197, 155], "type": "CWE-79", "message": "`org.xwiki.commons:xwiki-commons-xml` is an XML library used by the open-source wiki platform XWiki. The HTML sanitizer, introduced in version 14.6-rc-1, allows the injection of arbitrary HTML code and thus cross-site scripting via invalid data attributes. This vulnerability does not affect restricted cleaning in HTMLCleaner as there attributes are cleaned and thus characters like `/` and `>` are removed in all attribute names. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by making sure that data attributes only contain allowed characters. There are no known workarounds apart from upgrading to a version including the fix.", "other": {"cve": {"id": "CVE-2023-31126", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-09T13:15:18.427", "lastModified": "2023-05-16T18:36:04.127", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "`org.xwiki.commons:xwiki-commons-xml` is an XML library used by the open-source wiki platform XWiki. The HTML sanitizer, introduced in version 14.6-rc-1, allows the injection of arbitrary HTML code and thus cross-site scripting via invalid data attributes. This vulnerability does not affect restricted cleaning in HTMLCleaner as there attributes are cleaned and thus characters like `/` and `>` are removed in all attribute names. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by making sure that data attributes only contain allowed characters. There are no known workarounds apart from upgrading to a version including the fix."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-86"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.6", "versionEndExcluding": "14.10.4", "matchCriteriaId": "5473BF57-ACC7-496C-802F-47FC874F5B28"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-commons/commit/0b8e9c45b7e7457043938f35265b2aa5adc76a68", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-commons/security/advisories/GHSA-pv7v-ph6g-3gxv", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XCOMMONS-2606", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-commons/commit/0b8e9c45b7e7457043938f35265b2aa5adc76a68"}}