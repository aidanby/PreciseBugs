{"buggy_code": ["package com.dimtion.shaarlier;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by dimtion on 12/05/2015.\n * Interface between the table TAGS and the JAVA objects\n */\nclass TagsSource {\n    private final String[] allColumns = {MySQLiteHelper.TAGS_COLUMN_ID,\n            MySQLiteHelper.TAGS_COLUMN_ID_ACCOUNT,\n            MySQLiteHelper.TAGS_COLUMN_TAG};\n    private final MySQLiteHelper dbHelper;\n    private SQLiteDatabase db;\n\n    public TagsSource(Context context) {\n        dbHelper = new MySQLiteHelper(context);\n    }\n\n    public void rOpen() throws SQLException {\n        db = dbHelper.getReadableDatabase();\n    }\n\n    public void wOpen() throws SQLException {\n        db = dbHelper.getWritableDatabase();\n    }\n\n    public void close() {\n        dbHelper.close();\n    }\n\n    public List<Tag> getAllTags() {\n        List<Tag> tags = new ArrayList<>();\n\n        Cursor cursor = db.query(MySQLiteHelper.TABLE_TAGS, allColumns, null, null, null, null, null);\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()) {\n            Tag account = cursorToTag(cursor);\n            tags.add(account);\n            cursor.moveToNext();\n        }\n\n        cursor.close();\n        return tags;\n    }\n\n    public Tag createTag(ShaarliAccount masterAccount, String value) {\n        Tag tag = new Tag();\n        tag.setMasterAccount(masterAccount);\n        tag.setValue(value.trim());\n\n        ContentValues values = new ContentValues();\n        values.put(MySQLiteHelper.TAGS_COLUMN_ID_ACCOUNT, masterAccount.getId());\n        values.put(MySQLiteHelper.TAGS_COLUMN_TAG, tag.getValue());\n\n        // If existing, do nothing :\n        Cursor cursor = db.query(MySQLiteHelper.TABLE_TAGS, allColumns,\n                MySQLiteHelper.TAGS_COLUMN_ID_ACCOUNT + \" = \" + tag.getMasterAccountId() + \" AND \" +\n                        MySQLiteHelper.TAGS_COLUMN_TAG + \" = '\" + tag.getValue() + \"'\",\n                null, null, null, null);\n        try {\n            cursor.moveToFirst();\n            if (cursor.isAfterLast()) {\n                long insertId = db.insert(MySQLiteHelper.TABLE_TAGS, null, values);\n                tag.setId(insertId);\n                return tag;\n            } else {\n                tag = cursorToTag(cursor);\n            }\n        } catch (Exception e){\n            tag = null;\n        } finally {\n            cursor.close();\n        }\n        return tag;\n    }\n\n    private Tag cursorToTag(Cursor cursor) {  // If necessary (later), load the full account in the tag\n        Tag tag = new Tag();\n        tag.setId(cursor.getLong(0));\n        tag.setMasterAccountId(cursor.getLong(1));\n        tag.setValue(cursor.getString(2));\n        return tag;\n    }\n\n    private void deleteAllTags() {\n        db.delete(MySQLiteHelper.TABLE_TAGS, null, null);\n    }\n}\n"], "fixing_code": ["package com.dimtion.shaarlier;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by dimtion on 12/05/2015.\n * Interface between the table TAGS and the JAVA objects\n */\nclass TagsSource {\n    private final String[] allColumns = {MySQLiteHelper.TAGS_COLUMN_ID,\n            MySQLiteHelper.TAGS_COLUMN_ID_ACCOUNT,\n            MySQLiteHelper.TAGS_COLUMN_TAG};\n    private final MySQLiteHelper dbHelper;\n    private SQLiteDatabase db;\n\n    public TagsSource(Context context) {\n        dbHelper = new MySQLiteHelper(context);\n    }\n\n    public void rOpen() throws SQLException {\n        db = dbHelper.getReadableDatabase();\n    }\n\n    public void wOpen() throws SQLException {\n        db = dbHelper.getWritableDatabase();\n    }\n\n    public void close() {\n        dbHelper.close();\n    }\n\n    public List<Tag> getAllTags() {\n        List<Tag> tags = new ArrayList<>();\n\n        Cursor cursor = db.query(MySQLiteHelper.TABLE_TAGS, allColumns, null, null, null, null, null);\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()) {\n            Tag account = cursorToTag(cursor);\n            tags.add(account);\n            cursor.moveToNext();\n        }\n\n        cursor.close();\n        return tags;\n    }\n\n    public Tag createTag(ShaarliAccount masterAccount, String value) {\n        Tag tag = new Tag();\n        tag.setMasterAccount(masterAccount);\n        tag.setValue(value.trim());\n\n        ContentValues values = new ContentValues();\n        values.put(MySQLiteHelper.TAGS_COLUMN_ID_ACCOUNT, masterAccount.getId());\n        values.put(MySQLiteHelper.TAGS_COLUMN_TAG, tag.getValue());\n\n        // If existing, do nothing :\n        String[] getTagArgs = {String.valueOf(tag.getMasterAccountId()), tag.getValue()};\n\n        Cursor cursor = db.query(MySQLiteHelper.TABLE_TAGS, allColumns,\n                MySQLiteHelper.TAGS_COLUMN_ID_ACCOUNT + \" = ? AND \" +\n                        MySQLiteHelper.TAGS_COLUMN_TAG + \" = ?\",\n                getTagArgs, null, null, null);\n        try {\n            cursor.moveToFirst();\n            if (cursor.isAfterLast()) {\n                long insertId = db.insert(MySQLiteHelper.TABLE_TAGS, null, values);\n                tag.setId(insertId);\n                return tag;\n            } else {\n                tag = cursorToTag(cursor);\n            }\n        } catch (Exception e){\n            tag = null;\n        } finally {\n            cursor.close();\n        }\n        return tag;\n    }\n\n    private Tag cursorToTag(Cursor cursor) {  // If necessary (later), load the full account in the tag\n        Tag tag = new Tag();\n        tag.setId(cursor.getLong(0));\n        tag.setMasterAccountId(cursor.getLong(1));\n        tag.setValue(cursor.getString(2));\n        return tag;\n    }\n\n    private void deleteAllTags() {\n        db.delete(MySQLiteHelper.TABLE_TAGS, null, null);\n    }\n}\n"], "filenames": ["app/src/main/java/com/dimtion/shaarlier/TagsSource.java"], "buggy_code_start_loc": [63], "buggy_code_end_loc": [68], "fixing_code_start_loc": [64], "fixing_code_end_loc": [70], "type": "CWE-89", "message": "A vulnerability was found in dimtion Shaarlier up to 1.2.2. It has been declared as critical. Affected by this vulnerability is the function createTag of the file app/src/main/java/com/dimtion/shaarlier/TagsSource.java of the component Tag Handler. The manipulation leads to sql injection. Upgrading to version 1.2.3 is able to address this issue. The name of the patch is 3d1d9b239d9b3cd87e8bed45a0f02da583ad371e. It is recommended to upgrade the affected component. The identifier VDB-220453 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10076", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-09T23:15:11.017", "lastModified": "2023-02-16T18:12:12.960", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in dimtion Shaarlier up to 1.2.2. It has been declared as critical. Affected by this vulnerability is the function createTag of the file app/src/main/java/com/dimtion/shaarlier/TagsSource.java of the component Tag Handler. The manipulation leads to sql injection. Upgrading to version 1.2.3 is able to address this issue. The name of the patch is 3d1d9b239d9b3cd87e8bed45a0f02da583ad371e. It is recommended to upgrade the affected component. The identifier VDB-220453 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shaarlier_project:shaarlier:*:*:*:*:*:android:*:*", "versionEndExcluding": "1.2.3", "matchCriteriaId": "8A82E7E7-582B-4A65-B033-C378A03B8AD7"}]}]}], "references": [{"url": "https://github.com/dimtion/Shaarlier/commit/3d1d9b239d9b3cd87e8bed45a0f02da583ad371e", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/dimtion/Shaarlier/releases/tag/v1.2.3", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.220453", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.220453", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dimtion/Shaarlier/commit/3d1d9b239d9b3cd87e8bed45a0f02da583ad371e"}}