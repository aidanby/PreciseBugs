{"buggy_code": ["/* Pi-hole: A black hole for Internet advertisements\n *  (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n *  Network-wide ad blocking via your own hardware.\n *\n *  This file is copyright under the latest version of the EUPL.\n *  Please see LICENSE file for your rights under this license. */\n\n/* global utils:false */\n\nvar table;\nvar groups = [];\nvar token = $(\"#token\").text();\n\nfunction reloadClientSuggestions() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_unconfigured_clients\", token: token },\n    function (data) {\n      var sel = $(\"#select\");\n      var customWasSelected = sel.val() === \"custom\";\n      sel.empty();\n      for (var key in data) {\n        if (!Object.prototype.hasOwnProperty.call(data, key)) {\n          continue;\n        }\n\n        var text = key;\n        if (data[key].length > 0) {\n          text += \" (\" + data[key] + \")\";\n        }\n\n        sel.append($(\"<option />\").val(key).text(text));\n      }\n\n      if (data.length === 0) {\n        $(\"#ip-custom\").prop(\"disabled\", false);\n      }\n\n      sel.append($(\"<option />\").val(\"custom\").text(\"Custom, specified below...\"));\n      if (customWasSelected) {\n        sel.val(\"custom\");\n      }\n    },\n    \"json\"\n  );\n}\n\nfunction getGroups() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_groups\", token: token },\n    function (data) {\n      groups = data.data;\n      initTable();\n    },\n    \"json\"\n  );\n}\n\n$(function () {\n  $(\"#btnAdd\").on(\"click\", addClient);\n\n  reloadClientSuggestions();\n  utils.setBsSelectDefaults();\n  getGroups();\n\n  $(\"#select\").on(\"change\", function () {\n    $(\"#ip-custom\").val(\"\");\n    $(\"#ip-custom\").prop(\"disabled\", $(\"#select option:selected\").val() !== \"custom\");\n  });\n});\n\nfunction initTable() {\n  table = $(\"#clientsTable\").DataTable({\n    ajax: {\n      url: \"scripts/pi-hole/php/groups.php\",\n      data: { action: \"get_clients\", token: token },\n      type: \"POST\"\n    },\n    order: [[0, \"asc\"]],\n    columns: [\n      { data: \"id\", visible: false },\n      { data: \"ip\", type: \"ip-address\" },\n      { data: \"comment\" },\n      { data: \"groups\", searchable: false },\n      { data: \"name\", width: \"80px\", orderable: false }\n    ],\n    drawCallback: function () {\n      $('button[id^=\"deleteClient_\"]').on(\"click\", deleteClient);\n      // Remove visible dropdown to prevent orphaning\n      $(\"body > .bootstrap-select.dropdown\").remove();\n    },\n    rowCallback: function (row, data) {\n      $(row).attr(\"data-id\", data.id);\n      var tooltip =\n        \"Added: \" +\n        utils.datetime(data.date_added) +\n        \"\\nLast modified: \" +\n        utils.datetime(data.date_modified) +\n        \"\\nDatabase ID: \" +\n        data.id;\n      var ipName =\n        '<code id=\"ip_' +\n        data.id +\n        '\" title=\"' +\n        tooltip +\n        '\" class=\"breakall\">' +\n        data.ip +\n        \"</code>\";\n      if (data.name !== null && data.name.length > 0)\n        ipName +=\n          '<br><code id=\"name_' +\n          data.id +\n          '\" title=\"' +\n          tooltip +\n          '\" class=\"breakall\">' +\n          data.name +\n          \"</code>\";\n      $(\"td:eq(0)\", row).html(ipName);\n\n      $(\"td:eq(1)\", row).html('<input id=\"comment_' + data.id + '\" class=\"form-control\">');\n      var commentEl = $(\"#comment_\" + data.id, row);\n      commentEl.val(data.comment);\n      commentEl.on(\"change\", editClient);\n\n      $(\"td:eq(2)\", row).empty();\n      $(\"td:eq(2)\", row).append(\n        '<select class=\"selectpicker\" id=\"multiselect_' + data.id + '\" multiple></select>'\n      );\n      var selectEl = $(\"#multiselect_\" + data.id, row);\n      // Add all known groups\n      for (var i = 0; i < groups.length; i++) {\n        var dataSub = \"\";\n        if (!groups[i].enabled) {\n          dataSub = 'data-subtext=\"(disabled)\"';\n        }\n\n        selectEl.append(\n          $(\"<option \" + dataSub + \"/>\")\n            .val(groups[i].id)\n            .text(groups[i].name)\n        );\n      }\n\n      // Select assigned groups\n      selectEl.val(data.groups);\n      // Initialize bootstrap-select\n      selectEl\n        // fix dropdown if it would stick out right of the viewport\n        .on(\"show.bs.select\", function () {\n          var winWidth = $(window).width();\n          var dropdownEl = $(\"body > .bootstrap-select.dropdown\");\n          if (dropdownEl.length > 0) {\n            dropdownEl.removeClass(\"align-right\");\n            var width = dropdownEl.width();\n            var left = dropdownEl.offset().left;\n            if (left + width > winWidth) {\n              dropdownEl.addClass(\"align-right\");\n            }\n          }\n        })\n        .on(\"changed.bs.select\", function () {\n          // enable Apply button\n          if ($(applyBtn).prop(\"disabled\")) {\n            $(applyBtn)\n              .addClass(\"btn-success\")\n              .prop(\"disabled\", false)\n              .on(\"click\", function () {\n                editClient.call(selectEl);\n              });\n          }\n        })\n        .on(\"hide.bs.select\", function () {\n          // Restore values if drop-down menu is closed without clicking the Apply button\n          if (!$(applyBtn).prop(\"disabled\")) {\n            $(this).val(data.groups).selectpicker(\"refresh\");\n            $(applyBtn).removeClass(\"btn-success\").prop(\"disabled\", true).off(\"click\");\n          }\n        })\n        .selectpicker()\n        .siblings(\".dropdown-menu\")\n        .find(\".bs-actionsbox\")\n        .prepend(\n          '<button type=\"button\" id=btn_apply_' +\n            data.id +\n            ' class=\"btn btn-block btn-sm\" disabled>Apply</button>'\n        );\n\n      var applyBtn = \"#btn_apply_\" + data.id;\n\n      var button =\n        '<button type=\"button\" class=\"btn btn-danger btn-xs\" id=\"deleteClient_' +\n        data.id +\n        '\">' +\n        '<span class=\"far fa-trash-alt\"></span>' +\n        \"</button>\";\n      $(\"td:eq(3)\", row).html(button);\n    },\n    dom:\n      \"<'row'<'col-sm-4'l><'col-sm-8'f>>\" +\n      \"<'row'<'col-sm-12'<'table-responsive'tr>>>\" +\n      \"<'row'<'col-sm-5'i><'col-sm-7'p>>\",\n    lengthMenu: [\n      [10, 25, 50, 100, -1],\n      [10, 25, 50, 100, \"All\"]\n    ],\n    stateSave: true,\n    stateSaveCallback: function (settings, data) {\n      utils.stateSaveCallback(\"groups-clients-table\", data);\n    },\n    stateLoadCallback: function () {\n      var data = utils.stateLoadCallback(\"groups-clients-table\");\n      // Return if not available\n      if (data === null) {\n        return null;\n      }\n\n      // Reset visibility of ID column\n      data.columns[0].visible = false;\n      // Apply loaded state to table\n      return data;\n    }\n  });\n  // Disable autocorrect in the search box\n  var input = document.querySelector(\"input[type=search]\");\n  if (input !== null) {\n    input.setAttribute(\"autocomplete\", \"off\");\n    input.setAttribute(\"autocorrect\", \"off\");\n    input.setAttribute(\"autocapitalize\", \"off\");\n    input.setAttribute(\"spellcheck\", false);\n  }\n\n  table.on(\"order.dt\", function () {\n    var order = table.order();\n    if (order[0][0] !== 0 || order[0][1] !== \"asc\") {\n      $(\"#resetButton\").removeClass(\"hidden\");\n    } else {\n      $(\"#resetButton\").addClass(\"hidden\");\n    }\n  });\n  $(\"#resetButton\").on(\"click\", function () {\n    table.order([[0, \"asc\"]]).draw();\n    $(\"#resetButton\").addClass(\"hidden\");\n  });\n}\n\nfunction addClient() {\n  var ip = $(\"#select\").val();\n  var comment = utils.escapeHtml($(\"#new_comment\").val());\n  if (ip === \"custom\") {\n    ip = utils.escapeHtml($(\"#ip-custom\").val().trim());\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Adding client...\", ip);\n\n  if (ip.length === 0) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Please specify a client IP address\");\n    return;\n  }\n\n  // Validate IP address (may contain CIDR details)\n  var ipv6format = ip.includes(\":\");\n\n  if (!ipv6format && !utils.validateIPv4CIDR(ip)) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Invalid IPv4 address!\");\n    return;\n  }\n\n  if (ipv6format && !utils.validateIPv6CIDR(ip)) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Invalid IPv6 address!\");\n    return;\n  }\n\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"add_client\", ip: ip, comment: comment, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-plus\", \"Successfully added client\", ip);\n        reloadClientSuggestions();\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while adding new client\", response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while adding new client\", jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    }\n  });\n}\n\nfunction editClient() {\n  var elem = $(this).attr(\"id\");\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var groups = tr.find(\"#multiselect_\" + id).val();\n  var ip = tr.find(\"#ip_\" + id).text();\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n  var comment = utils.escapeHtml(tr.find(\"#comment_\" + id).val());\n\n  var done = \"edited\";\n  var notDone = \"editing\";\n  switch (elem) {\n    case \"multiselect_\" + id:\n      done = \"edited groups of\";\n      notDone = \"editing groups of\";\n      break;\n    case \"comment_\" + id:\n      done = \"edited comment of\";\n      notDone = \"editing comment of\";\n      break;\n    default:\n      alert(\"bad element or invalid data-id!\");\n      return;\n  }\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Editing client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: {\n      action: \"edit_client\",\n      id: id,\n      groups: groups,\n      token: token,\n      comment: comment\n    },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-pencil-alt\", \"Successfully \" + done + \" client\", ip);\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\n          \"error\",\n          \"Error while \" + notDone + \" client with ID \" + id,\n          response.message\n        );\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\n        \"error\",\n        \"\",\n        \"Error while \" + notDone + \" client with ID \" + id,\n        jqXHR.responseText\n      );\n      console.log(exception); // eslint-disable-line no-console\n    }\n  });\n}\n\nfunction deleteClient() {\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var ip = tr.find(\"#ip_\" + id).text();\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Deleting client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"delete_client\", id: id, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"far fa-trash-alt\", \"Successfully deleted client \", ip);\n        table.row(tr).remove().draw(false).ajax.reload(null, false);\n        reloadClientSuggestions();\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    }\n  });\n}\n"], "fixing_code": ["/* Pi-hole: A black hole for Internet advertisements\n *  (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n *  Network-wide ad blocking via your own hardware.\n *\n *  This file is copyright under the latest version of the EUPL.\n *  Please see LICENSE file for your rights under this license. */\n\n/* global utils:false */\n\nvar table;\nvar groups = [];\nvar token = $(\"#token\").text();\n\nfunction reloadClientSuggestions() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_unconfigured_clients\", token: token },\n    function (data) {\n      var sel = $(\"#select\");\n      var customWasSelected = sel.val() === \"custom\";\n      sel.empty();\n      for (var key in data) {\n        if (!Object.prototype.hasOwnProperty.call(data, key)) {\n          continue;\n        }\n\n        var text = key;\n        if (data[key].length > 0) {\n          text += \" (\" + data[key] + \")\";\n        }\n\n        sel.append($(\"<option />\").val(key).text(text));\n      }\n\n      if (data.length === 0) {\n        $(\"#ip-custom\").prop(\"disabled\", false);\n      }\n\n      sel.append($(\"<option />\").val(\"custom\").text(\"Custom, specified below...\"));\n      if (customWasSelected) {\n        sel.val(\"custom\");\n      }\n    },\n    \"json\"\n  );\n}\n\nfunction getGroups() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_groups\", token: token },\n    function (data) {\n      groups = data.data;\n      initTable();\n    },\n    \"json\"\n  );\n}\n\n$(function () {\n  $(\"#btnAdd\").on(\"click\", addClient);\n\n  reloadClientSuggestions();\n  utils.setBsSelectDefaults();\n  getGroups();\n\n  $(\"#select\").on(\"change\", function () {\n    $(\"#ip-custom\").val(\"\");\n    $(\"#ip-custom\").prop(\"disabled\", $(\"#select option:selected\").val() !== \"custom\");\n  });\n});\n\nfunction initTable() {\n  table = $(\"#clientsTable\").DataTable({\n    ajax: {\n      url: \"scripts/pi-hole/php/groups.php\",\n      data: { action: \"get_clients\", token: token },\n      type: \"POST\"\n    },\n    order: [[0, \"asc\"]],\n    columns: [\n      { data: \"id\", visible: false },\n      { data: \"ip\", type: \"ip-address\" },\n      { data: \"comment\" },\n      { data: \"groups\", searchable: false },\n      { data: \"name\", width: \"80px\", orderable: false }\n    ],\n    drawCallback: function () {\n      $('button[id^=\"deleteClient_\"]').on(\"click\", deleteClient);\n      // Remove visible dropdown to prevent orphaning\n      $(\"body > .bootstrap-select.dropdown\").remove();\n    },\n    rowCallback: function (row, data) {\n      $(row).attr(\"data-id\", data.id);\n      var tooltip =\n        \"Added: \" +\n        utils.datetime(data.date_added) +\n        \"\\nLast modified: \" +\n        utils.datetime(data.date_modified) +\n        \"\\nDatabase ID: \" +\n        data.id;\n      var ipName =\n        '<code id=\"ip_' +\n        data.id +\n        '\" title=\"' +\n        tooltip +\n        '\" class=\"breakall\">' +\n        data.ip +\n        \"</code>\";\n      if (data.name !== null && data.name.length > 0)\n        ipName +=\n          '<br><code id=\"name_' +\n          data.id +\n          '\" title=\"' +\n          tooltip +\n          '\" class=\"breakall\">' +\n          data.name +\n          \"</code>\";\n      $(\"td:eq(0)\", row).html(ipName);\n\n      $(\"td:eq(1)\", row).html('<input id=\"comment_' + data.id + '\" class=\"form-control\">');\n      var commentEl = $(\"#comment_\" + data.id, row);\n      commentEl.val(data.comment);\n      commentEl.on(\"change\", editClient);\n\n      $(\"td:eq(2)\", row).empty();\n      $(\"td:eq(2)\", row).append(\n        '<select class=\"selectpicker\" id=\"multiselect_' + data.id + '\" multiple></select>'\n      );\n      var selectEl = $(\"#multiselect_\" + data.id, row);\n      // Add all known groups\n      for (var i = 0; i < groups.length; i++) {\n        var dataSub = \"\";\n        if (!groups[i].enabled) {\n          dataSub = 'data-subtext=\"(disabled)\"';\n        }\n\n        selectEl.append(\n          $(\"<option \" + dataSub + \"/>\")\n            .val(groups[i].id)\n            .text(groups[i].name)\n        );\n      }\n\n      // Select assigned groups\n      selectEl.val(data.groups);\n      // Initialize bootstrap-select\n      selectEl\n        // fix dropdown if it would stick out right of the viewport\n        .on(\"show.bs.select\", function () {\n          var winWidth = $(window).width();\n          var dropdownEl = $(\"body > .bootstrap-select.dropdown\");\n          if (dropdownEl.length > 0) {\n            dropdownEl.removeClass(\"align-right\");\n            var width = dropdownEl.width();\n            var left = dropdownEl.offset().left;\n            if (left + width > winWidth) {\n              dropdownEl.addClass(\"align-right\");\n            }\n          }\n        })\n        .on(\"changed.bs.select\", function () {\n          // enable Apply button\n          if ($(applyBtn).prop(\"disabled\")) {\n            $(applyBtn)\n              .addClass(\"btn-success\")\n              .prop(\"disabled\", false)\n              .on(\"click\", function () {\n                editClient.call(selectEl);\n              });\n          }\n        })\n        .on(\"hide.bs.select\", function () {\n          // Restore values if drop-down menu is closed without clicking the Apply button\n          if (!$(applyBtn).prop(\"disabled\")) {\n            $(this).val(data.groups).selectpicker(\"refresh\");\n            $(applyBtn).removeClass(\"btn-success\").prop(\"disabled\", true).off(\"click\");\n          }\n        })\n        .selectpicker()\n        .siblings(\".dropdown-menu\")\n        .find(\".bs-actionsbox\")\n        .prepend(\n          '<button type=\"button\" id=btn_apply_' +\n            data.id +\n            ' class=\"btn btn-block btn-sm\" disabled>Apply</button>'\n        );\n\n      var applyBtn = \"#btn_apply_\" + data.id;\n\n      var button =\n        '<button type=\"button\" class=\"btn btn-danger btn-xs\" id=\"deleteClient_' +\n        data.id +\n        '\">' +\n        '<span class=\"far fa-trash-alt\"></span>' +\n        \"</button>\";\n      $(\"td:eq(3)\", row).html(button);\n    },\n    dom:\n      \"<'row'<'col-sm-4'l><'col-sm-8'f>>\" +\n      \"<'row'<'col-sm-12'<'table-responsive'tr>>>\" +\n      \"<'row'<'col-sm-5'i><'col-sm-7'p>>\",\n    lengthMenu: [\n      [10, 25, 50, 100, -1],\n      [10, 25, 50, 100, \"All\"]\n    ],\n    stateSave: true,\n    stateSaveCallback: function (settings, data) {\n      utils.stateSaveCallback(\"groups-clients-table\", data);\n    },\n    stateLoadCallback: function () {\n      var data = utils.stateLoadCallback(\"groups-clients-table\");\n      // Return if not available\n      if (data === null) {\n        return null;\n      }\n\n      // Reset visibility of ID column\n      data.columns[0].visible = false;\n      // Apply loaded state to table\n      return data;\n    }\n  });\n  // Disable autocorrect in the search box\n  var input = document.querySelector(\"input[type=search]\");\n  if (input !== null) {\n    input.setAttribute(\"autocomplete\", \"off\");\n    input.setAttribute(\"autocorrect\", \"off\");\n    input.setAttribute(\"autocapitalize\", \"off\");\n    input.setAttribute(\"spellcheck\", false);\n  }\n\n  table.on(\"order.dt\", function () {\n    var order = table.order();\n    if (order[0][0] !== 0 || order[0][1] !== \"asc\") {\n      $(\"#resetButton\").removeClass(\"hidden\");\n    } else {\n      $(\"#resetButton\").addClass(\"hidden\");\n    }\n  });\n  $(\"#resetButton\").on(\"click\", function () {\n    table.order([[0, \"asc\"]]).draw();\n    $(\"#resetButton\").addClass(\"hidden\");\n  });\n}\n\nfunction addClient() {\n  var ip = $(\"#select\").val();\n  var comment = utils.escapeHtml($(\"#new_comment\").val());\n  if (ip === \"custom\") {\n    ip = utils.escapeHtml($(\"#ip-custom\").val().trim());\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Adding client...\", ip);\n\n  if (ip.length === 0) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Please specify a client IP address\");\n    return;\n  }\n\n  // Validate IP address (may contain CIDR details)\n  var ipv6format = ip.includes(\":\");\n\n  if (!ipv6format && !utils.validateIPv4CIDR(ip)) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Invalid IPv4 address!\");\n    return;\n  }\n\n  if (ipv6format && !utils.validateIPv6CIDR(ip)) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Invalid IPv6 address!\");\n    return;\n  }\n\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"add_client\", ip: ip, comment: comment, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-plus\", \"Successfully added client\", ip);\n        reloadClientSuggestions();\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while adding new client\", response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while adding new client\", jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    }\n  });\n}\n\nfunction editClient() {\n  var elem = $(this).attr(\"id\");\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var groups = tr.find(\"#multiselect_\" + id).val();\n  var ip = utils.escapeHtml(tr.find(\"#ip_\" + id).text());\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n  var comment = utils.escapeHtml(tr.find(\"#comment_\" + id).val());\n\n  var done = \"edited\";\n  var notDone = \"editing\";\n  switch (elem) {\n    case \"multiselect_\" + id:\n      done = \"edited groups of\";\n      notDone = \"editing groups of\";\n      break;\n    case \"comment_\" + id:\n      done = \"edited comment of\";\n      notDone = \"editing comment of\";\n      break;\n    default:\n      alert(\"bad element or invalid data-id!\");\n      return;\n  }\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Editing client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: {\n      action: \"edit_client\",\n      id: id,\n      groups: groups,\n      token: token,\n      comment: comment\n    },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-pencil-alt\", \"Successfully \" + done + \" client\", ip);\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\n          \"error\",\n          \"Error while \" + notDone + \" client with ID \" + id,\n          response.message\n        );\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\n        \"error\",\n        \"\",\n        \"Error while \" + notDone + \" client with ID \" + id,\n        jqXHR.responseText\n      );\n      console.log(exception); // eslint-disable-line no-console\n    }\n  });\n}\n\nfunction deleteClient() {\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var ip = tr.find(\"#ip_\" + id).text();\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Deleting client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"delete_client\", id: id, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"far fa-trash-alt\", \"Successfully deleted client \", ip);\n        table.row(tr).remove().draw(false).ajax.reload(null, false);\n        reloadClientSuggestions();\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    }\n  });\n}\n"], "filenames": ["scripts/pi-hole/js/groups-clients.js"], "buggy_code_start_loc": [306], "buggy_code_end_loc": [307], "fixing_code_start_loc": [306], "fixing_code_end_loc": [307], "type": "CWE-862", "message": "Pi-hole through 5.0 allows code injection in piholedhcp (the Static DHCP Leases section) by modifying Teleporter backup files and then restoring them. This occurs in settings.php. To exploit this, an attacker would request a backup of limited files via teleporter.php. These are placed into a .tar.gz archive. The attacker then modifies the host parameter in dnsmasq.d files, and then compresses and uploads these files again.", "other": {"cve": {"id": "CVE-2020-14971", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-23T14:15:12.950", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pi-hole through 5.0 allows code injection in piholedhcp (the Static DHCP Leases section) by modifying Teleporter backup files and then restoring them. This occurs in settings.php. To exploit this, an attacker would request a backup of limited files via teleporter.php. These are placed into a .tar.gz archive. The attacker then modifies the host parameter in dnsmasq.d files, and then compresses and uploads these files again."}, {"lang": "es", "value": "Pi-hole versiones hasta 5.0, permite una inyecci\u00f3n de c\u00f3digo en piholedhcp (la secci\u00f3n Static DHCP Leases) al modificar los archivos de respaldo de Teleporter y luego restaur\u00e1ndolos. Esto ocurre en el archivo settings.php. Para explotar esto, un atacante solicitar\u00eda una copia de seguridad de archivos limitados por medio del archivo teleporter.php. Estos se colocan en un archivo .tar.gz. Luego, el atacante modifica el par\u00e1metro del host en los archivos dnsmasq.d, y luego comprime y carga estos archivos de nuevo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pi-hole:pi-hole:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.0", "matchCriteriaId": "E14E10D0-24B9-452D-B508-3FFF2B487A60"}]}]}], "references": [{"url": "https://blog.telspace.co.za/2020/06/pi-hole-code-injection-cve-2020-14971.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/pi-hole/AdminLTE/commit/8f6e1365b6dec0ae1aa0b0b15b102c9133f347e5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pi-hole/AdminLTE/commit/c949516ee15fa6a9b0c8511cc4c4d6b0893f3e69", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pi-hole/AdminLTE/pull/1443", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pi-hole/AdminLTE/commit/8f6e1365b6dec0ae1aa0b0b15b102c9133f347e5"}}