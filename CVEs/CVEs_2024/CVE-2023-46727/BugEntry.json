{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @copyright 2010-2022 by the FusionInventory Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nclass RuleImportAsset extends Rule\n{\n    const RULE_ACTION_LINK_OR_IMPORT    = 0;\n    const RULE_ACTION_LINK_OR_NO_IMPORT = 1;\n    const RULE_ACTION_DENIED            = 2;\n\n    const PATTERN_ENTITY_RESTRICT       = 202;\n    const PATTERN_NETWORK_PORT_RESTRICT = 203;\n    const PATTERN_ONLY_CRITERIA_RULE    = 204;\n\n    const LINK_RESULT_DENIED            = 0;\n    const LINK_RESULT_CREATE            = 1;\n    const LINK_RESULT_LINK              = 2;\n\n    public $restrict_matching = Rule::AND_MATCHING;\n    public $can_sort          = true;\n\n    public static $rightname         = 'rule_import';\n\n    /** @var bool */\n    private $restrict_entity = false;\n    /** @var integer */\n    private $found_criteria = 0;\n    /** @var array */\n    private $complex_criteria = [];\n    /** @var boolean */\n    private $only_these_criteria = false;\n    /** @var boolean */\n    private $link_criteria_port = false;\n\n\n    public function getTitle()\n    {\n        $col = new RuleImportAssetCollection();\n        return $col->getTitle();\n    }\n\n\n    public function maxActionsCount()\n    {\n        return 1;\n    }\n\n\n    public function getCriterias()\n    {\n\n        static $criteria = [];\n\n        if (count($criteria)) {\n            return $criteria;\n        }\n\n        $criteria = [\n            'entities_id' => [\n                'table'     => 'glpi_entities',\n                'field'     => 'entities_id',\n                'name'      => __('Target entity for the asset'),\n                'linkfield' => 'entities_id',\n                'type'      => 'dropdown',\n                'is_global'       => false,\n                'allow_condition' => [\n                    Rule::PATTERN_IS,\n                    Rule::PATTERN_IS_NOT,\n                    Rule::PATTERN_CONTAIN,\n                    Rule::PATTERN_NOT_CONTAIN,\n                    Rule::PATTERN_BEGIN,\n                    Rule::PATTERN_END,\n                    Rule::REGEX_MATCH,\n                    Rule::REGEX_NOT_MATCH\n                ],\n            ],\n            'states_id'  => [\n                'table'     => 'glpi_states',\n                'field'     => 'name',\n                'name'      => __('Having the status'),\n                'linkfield' => 'state',\n                'type'      => 'dropdown',\n            //Means that this criterion can only be used in a global search query\n                'is_global' => true,\n                'allow_condition' => [Rule::PATTERN_IS, Rule::PATTERN_IS_NOT]\n            ],\n            'model' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), _n('Model', 'Models', 1)),\n            ],\n            'manufacturer' => [ // Manufacturer as Text to allow text criteria (contains, regex, ...)\n                'name'            => Manufacturer::getTypeName(1)\n            ],\n            'mac' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), __('MAC')),\n            ],\n            'ip' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), __('IP')),\n            ],\n            'ifdescr' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), __('Port description'))\n            ],\n            'ifnumber' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), _n('Port number', 'Ports number', 1)),\n            ],\n            'serial' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Serial number')),\n            ],\n            'uuid' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('UUID')),\n            ],\n            'device_id' => [\n                'name'            => sprintf('%s > %s', Agent::getTypeName(1), __('Device_id')),\n            ],\n            'mskey' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Serial of the operating system')),\n            ],\n            'name' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Name')),\n            ],\n            'tag' => [\n                'name'            => sprintf('%s > %s', Agent::getTypeName(1), __('Inventory tag')),\n            ],\n            'osname' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), OperatingSystem::getTypeName(1)),\n            ],\n            'oscomment' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), OperatingSystem::getTypeName(1), __('Comments'))\n            ],\n            'itemtype' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Item type')),\n                'type'            => 'dropdown_inventory_itemtype',\n                'is_global'       => false,\n                'allow_condition' => [\n                    Rule::PATTERN_IS,\n                    Rule::PATTERN_IS_NOT,\n                    Rule::PATTERN_EXISTS,\n                    Rule::PATTERN_DOES_NOT_EXISTS,\n                ],\n            ],\n            'domains_id' => [\n                'table'           => 'glpi_domains',\n                'field'           => 'name',\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), Domain::getTypeName(1)),\n                'linkfield'       => 'domain',\n                'type'            => 'dropdown',\n                'is_global'       => false,\n            ],\n\n            'linked_item' => [\n                'name'            => _n('Linked asset', 'Linked assets', 1),\n                'type'            => 'yesno',\n                'allow_condition' => [Rule::PATTERN_FIND]\n            ],\n\n            'entityrestrict' => [\n                'name'            => sprintf('%s > %s', __('General'), __('Restrict search in defined entity')),\n                'allow_condition' => [self::PATTERN_ENTITY_RESTRICT],\n            ],\n            'link_criteria_port' => [\n                'name'            => sprintf('%s > %s', __('General'), __('Restrict criteria to same network port')),\n                'allow_condition' => [self::PATTERN_NETWORK_PORT_RESTRICT],\n                'is_global'       => true\n            ],\n            'only_these_criteria' => [\n                'name'            => sprintf('%s > %s', __('General'), __('Only criteria of this rule in data')),\n                'allow_condition' => [self::PATTERN_ONLY_CRITERIA_RULE],\n                'is_global'       => true\n            ],\n            'partial' => [\n                'name'   => __('Is partial'),\n                'type'   => 'yesno',\n                'allow_condition' => [Rule::PATTERN_IS, Rule::PATTERN_IS_NOT]\n            ]\n        ];\n\n        return $criteria;\n    }\n\n\n    public function getActions()\n    {\n        $actions = [\n            '_inventory'   => [\n                'name'   => __('Inventory link'),\n                'type'   => 'inventory_type'\n            ],\n            '_ignore_import'  => [\n                'name'   => __('Refuse import'),\n                'type'   => 'yesonly'\n            ]\n        ];\n        return $actions;\n    }\n\n\n    public static function getRuleActionValues()\n    {\n        return [\n            self::RULE_ACTION_LINK_OR_IMPORT    => __('Link if possible'),\n            self::RULE_ACTION_LINK_OR_NO_IMPORT => __('Link if possible, otherwise imports declined'),\n            self::RULE_ACTION_DENIED            => __('Import denied (no log)')\n        ];\n    }\n\n\n    public function displayAdditionRuleActionValue($value)\n    {\n\n        $values = self::getRuleActionValues();\n        if (isset($values[$value])) {\n            return $values[$value];\n        }\n        return '';\n    }\n\n\n    public function manageSpecificCriteriaValues($criteria, $name, $value)\n    {\n\n        switch ($criteria['type']) {\n            case \"state\":\n                $link_array = [\n                    \"0\" => __('No'),\n                    \"1\" => __('Yes if equal'),\n                    \"2\" => __('Yes if empty')\n                ];\n\n                Dropdown::showFromArray($name, $link_array, ['value' => $value]);\n        }\n        return false;\n    }\n\n\n    /**\n     * Add more criteria\n     *\n     * @param string $criterion\n     * @return array\n     */\n    public static function addMoreCriteria($criterion = '')\n    {\n        switch ($criterion) {\n            case 'entityrestrict':\n                return [self::PATTERN_ENTITY_RESTRICT => __('Yes')];\n            case 'link_criteria_port':\n                return [self::PATTERN_NETWORK_PORT_RESTRICT => __('Yes')];\n            case 'only_these_criteria':\n                return [self::PATTERN_ONLY_CRITERIA_RULE => __('Yes')];\n            default:\n                return [\n                    self::PATTERN_FIND      => __('is already present'),\n                    self::PATTERN_IS_EMPTY  => __('is empty')\n                ];\n        }\n    }\n\n\n    public function getAdditionalCriteriaDisplayPattern($ID, $condition, $pattern)\n    {\n\n        if (\n            $condition == self::PATTERN_IS_EMPTY\n            || $condition == self::PATTERN_ENTITY_RESTRICT\n            || $condition == self::PATTERN_NETWORK_PORT_RESTRICT\n            || $condition == self::PATTERN_ONLY_CRITERIA_RULE\n        ) {\n            return __('Yes');\n        }\n        if ($condition == self::PATTERN_IS || $condition == self::PATTERN_IS_NOT) {\n            $crit = $this->getCriteria($ID);\n            if (\n                isset($crit['type'])\n                 && $crit['type'] == 'dropdown_inventory_itemtype'\n            ) {\n                $array = $this->getItemTypesForRules();\n                return $array[$pattern];\n            }\n        }\n        return false;\n    }\n\n\n    public function displayAdditionalRuleCondition($condition, $criteria, $name, $value, $test = false)\n    {\n\n        if ($test) {\n            return false;\n        }\n\n        switch ($condition) {\n            case self::PATTERN_ENTITY_RESTRICT:\n            case self::PATTERN_NETWORK_PORT_RESTRICT:\n                return true;\n\n            case Rule::PATTERN_FIND:\n            case Rule::PATTERN_IS_EMPTY:\n                Dropdown::showYesNo($name, 0, 0);\n                return true;\n\n            case Rule::PATTERN_EXISTS:\n            case Rule::PATTERN_DOES_NOT_EXISTS:\n                Dropdown::showYesNo($name, 1, 0);\n                return true;\n        }\n\n        return false;\n    }\n\n\n    public function displayAdditionalRuleAction(array $action, $value = '')\n    {\n\n        switch ($action['type']) {\n            case 'inventory_type':\n            case 'fusion_type':\n                Dropdown::showFromArray('value', self::getRuleActionValues());\n                return true;\n        }\n        return false;\n    }\n\n\n    public function getCriteriaByID($ID)\n    {\n\n        $criteria = [];\n        foreach ($this->criterias as $criterion) {\n            if ($ID == $criterion->fields['criteria']) {\n                $criteria[] = $criterion;\n            }\n        }\n        return $criteria;\n    }\n\n    /**\n     * Pre compute criteria to detect rules specificities\n     *\n     * @param array $input Input\n     *\n     * @return boolean\n     */\n    public function preComputeCriteria(array $input): bool\n    {\n        $global_criteria   = $this->getGlobalCriteria();\n\n        foreach ($global_criteria as $criterion) {\n            $criteria = $this->getCriteriaByID($criterion);\n            if (!empty($criteria)) {\n                foreach ($criteria as $crit) {\n                    if (!isset($input[$criterion]) || ($input[$criterion] == '' && $crit->fields['condition'] != self::PATTERN_IS_EMPTY)) {\n                        $definition_criteria = $this->getCriteria($crit->fields['criteria']);\n                        if ($crit->fields[\"criteria\"] == 'link_criteria_port') {\n                            $this->link_criteria_port = true;\n                        } else if ($crit->fields[\"criteria\"] == 'only_these_criteria') {\n                            $this->only_these_criteria = true;\n                        } else if (\n                            isset($definition_criteria['is_global'])\n                             && $definition_criteria['is_global']\n                        ) {\n                         //If a value is missing, then there's a problem !\n                            trigger_error('A value seems missing, criterion was: ' . $criterion, E_USER_WARNING);\n                            return false;\n                        }\n                    } else if (in_array($crit->fields[\"condition\"], [Rule::PATTERN_FIND, Rule::PATTERN_IS_EMPTY])) {\n                        $this->complex_criteria[] = $crit;\n                        ++$this->found_criteria;\n                    } else if ($crit->fields[\"condition\"] == Rule::PATTERN_EXISTS) {\n                        if (\n                            !isset($input[$crit->fields['criteria']])\n                            || empty($input[$crit->fields['criteria']])\n                        ) {\n                            trigger_error('A value seems missing, criterion was: ' . $criterion, E_USER_WARNING);\n                            return false;\n                        }\n                    } else if ($crit->fields[\"criteria\"] == 'itemtype') {\n                        $this->complex_criteria[] = $crit;\n                    } else if ($crit->fields[\"criteria\"] == 'entityrestrict') {\n                        $this->restrict_entity = true;\n                    }\n                }\n            }\n        }\n\n        foreach ($this->getCriteriaByID('tag') as $crit) {\n            $this->complex_criteria[] = $crit;\n        }\n\n        foreach ($this->getCriteriaByID('states_id') as $crit) {\n            $this->complex_criteria[] = $crit;\n        }\n\n       // check only_these_criteria\n        if ($this->only_these_criteria) {\n            $complex_strings = [];\n            foreach ($global_criteria as $criterion) {\n                $criteria = $this->getCriteriaByID($criterion);\n                foreach ($criteria as $crit) {\n                    $complex_strings[] = $crit->fields[\"criteria\"];\n                }\n            }\n            foreach ($input as $key => $crit) {\n                if (\n                    !in_array($key, $complex_strings)\n                    && $key != \"class\"\n                    && !is_object($crit)\n                ) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public function findWithGlobalCriteria($input)\n    {\n        /**\n         * @var array $CFG_GLPI\n         * @var \\DBmysql $DB\n         * @var array $PLUGIN_HOOKS\n         */\n        global $CFG_GLPI, $DB, $PLUGIN_HOOKS;\n\n        $this->complex_criteria = [];\n        $this->restrict_entity = false;\n        $this->only_these_criteria = false;\n        $this->link_criteria_port = false;\n\n        if (!$this->preComputeCriteria($input)) {\n           //logged in place, just exit\n            return false;\n        }\n\n       //No complex criteria\n        if (empty($this->complex_criteria) || $this->found_criteria == 0) {\n            return true;\n        }\n\n       // Get all equipment type\n        $itemtypeselected = [];\n        if (\n            isset($input['itemtype'])\n            && (is_array($input['itemtype']))\n        ) {\n            $itemtypeselected = array_merge($itemtypeselected, $input['itemtype']);\n        } else if (\n            isset($input['itemtype'])\n            && (!empty($input['itemtype']))\n        ) {\n            $itemtypeselected[] = $input['itemtype'];\n        } else {\n            foreach ($CFG_GLPI[\"asset_types\"] as $itemtype) {\n                if (\n                    class_exists($itemtype)\n                    && $itemtype != 'SoftwareLicense'\n                    && $itemtype != 'Certificate'\n                ) {\n                    $itemtypeselected[] = $itemtype;\n                }\n            }\n            $itemtypeselected[] = \"Unmanaged\";\n            $itemtypeselected[] = \"Peripheral\";//used for networkinventory\n        }\n\n        $found = false;\n        foreach ($itemtypeselected as $itemtype) {\n            $item = new $itemtype();\n            $itemtable = $item->getTable();\n\n           //Build the request to check if the asset exists in GLPI\n            $where_entity = $input['entities_id'] ?? [];\n            if (!empty($where_entity) && !is_array($where_entity)) {\n                $where_entity = [$where_entity];\n            }\n\n            $it_criteria = [\n                'SELECT' => [\"$itemtable.id\"],\n                'FROM'   => $itemtable, //to fill\n                'WHERE'  => [] //to fill\n            ];\n\n            if ($this->link_criteria_port) {\n                $this->handleLinkCriteriaPort($item, $it_criteria);\n            } else {\n               // 1 join per criterion\n                $this->handleOneJoinPerCriteria($item, $it_criteria);\n            }\n\n            $this->handleFieldsCriteria($item, $it_criteria, $input);\n\n            if (isset($PLUGIN_HOOKS['use_rules'])) {\n                foreach ($PLUGIN_HOOKS['use_rules'] as $plugin => $val) {\n                    if (!Plugin::isPluginActive($plugin)) {\n                        continue;\n                    }\n                    if (is_array($val) && in_array($this->getType(), $val)) {\n                        $params = [\n                            'where_entity' => $where_entity,\n                            'itemtype'     => $itemtype,\n                            'input'        => $input,\n                            'criteria'     => $this->complex_criteria,\n                            'sql_criteria' => $it_criteria,\n                        ];\n                        $sql_results = Plugin::doOneHook(\n                            $plugin,\n                            \"ruleImportAsset_getSqlRestriction\",\n                            $params\n                        );\n\n                        $it_criteria = array_merge_recursive($it_criteria, $sql_results);\n                    }\n                }\n            }\n\n            $result_glpi = $DB->request($it_criteria);\n\n            if (count($result_glpi)) {\n                $this->criterias_results['found_port'] = [];\n                foreach ($result_glpi as $data) {\n                    $this->criterias_results['found_inventories'][$itemtype][] = $data['id'];\n                    foreach ($data as $alias => $value) {\n                        if (\n                            strstr($alias, \"portid\")\n                            && !is_null($value)\n                            && is_numeric($value)\n                            && $value > 0\n                        ) {\n                            $this->criterias_results['found_port'][] = $value;\n                        }\n                    }\n                }\n                $found = true;\n            }\n        }\n\n        if ($found) {\n            return true;\n        }\n\n        if (count($this->actions)) {\n            foreach ($this->actions as $action) {\n                if ($action->fields['field'] == '_inventory' || $action->fields['field'] == '_fusion') {\n                    if ($action->fields[\"value\"] == self::RULE_ACTION_LINK_OR_NO_IMPORT) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * ?\n     *\n     * @param CommonDBTM $item         Item instance\n     * @param array      &$it_criteria Iterator criteria\n     *\n     * @return void\n     */\n    public function handleLinkCriteriaPort(CommonDBTM $item, array &$it_criteria)\n    {\n        $is_ip          = false;\n        $is_networkport = false;\n        $itemtable      = $item->getTable();\n        $itemtype       = $item->getType();\n\n        foreach ($this->complex_criteria as $criteria) {\n            if ($criteria->fields['criteria'] == 'ip') {\n                $is_ip = true;\n                break;\n            } else if ($this->isNetPort($criteria->fields['criteria'])) {\n                $is_networkport = true;\n            }\n        }\n\n        if ($is_ip) {\n            $it_criteria['LEFT JOIN']['glpi_networkports'] = [\n                'ON'  => [\n                    $itemtable           => 'id',\n                    'glpi_networkports'  => 'items_id', [\n                        'AND' => ['glpi_networkports.itemtype' => $itemtype]\n                    ]\n                ]\n            ];\n            $it_criteria['LEFT JOIN']['glpi_networknames'] = [\n                'ON'  => [\n                    'glpi_networkports'  => 'id',\n                    'glpi_networknames'  => 'items_id', [\n                        'AND' => ['glpi_networknames.itemtype' => 'NetworkPort']\n                    ]\n                ]\n            ];\n            $it_criteria['LEFT JOIN']['glpi_ipaddresses'] = [\n                'ON'  => [\n                    'glpi_networknames'  => 'id',\n                    'glpi_ipaddresses'   => 'items_id', [\n                        'AND' => ['glpi_ipaddresses.itemtype' => 'NetworkName']\n                    ]\n                ]\n            ];\n        } else if ($is_networkport) {\n            $it_criteria['LEFT JOIN']['glpi_networkports'] = [\n                'ON'  => [\n                    $itemtable           => 'id',\n                    'glpi_networkports'  => 'items_id', [\n                        'AND' => ['glpi_networkports.itemtype' => $itemtype]\n                    ]\n                ]\n            ];\n        }\n    }\n\n    /**\n     * ?\n     *\n     * @param CommonDBTM $item         Item instance\n     * @param array      &$it_criteria Iterator criteria\n     *\n     * @return void\n     */\n    public function handleOneJoinPerCriteria(CommonDBTM $item, array &$it_criteria)\n    {\n        $itemtable      = $item->getTable();\n        $itemtype       = $item->getType();\n\n        foreach ($this->complex_criteria as $criterion) {\n            if ($criterion->fields['criteria'] == 'ip') {\n                $astable = 'networkports_' . $criterion->fields['criteria'];\n                $it_criteria['LEFT JOIN']['glpi_networkports AS ' . $astable] = [\n                    'ON'  => [\n                        $itemtable  => 'id',\n                        $astable    => 'items_id', [\n                            'AND' => [$astable . '.itemtype' => $itemtype]\n                        ]\n                    ]\n                ];\n                $it_criteria['LEFT JOIN']['glpi_networknames'] = [\n                    'ON'  => [\n                        $astable  => 'id',\n                        'glpi_networknames'  => 'items_id', [\n                            'AND' => ['glpi_networknames.itemtype' => 'NetworkPort']\n                        ]\n                    ]\n                ];\n                $it_criteria['LEFT JOIN']['glpi_ipaddresses'] = [\n                    'ON'  => [\n                        'glpi_networknames'  => 'id',\n                        'glpi_ipaddresses'   => 'items_id', [\n                            'AND' => ['glpi_ipaddresses.itemtype' => 'NetworkName']\n                        ]\n                    ]\n                ];\n            } else if ($this->isNetPort($criterion->fields['criteria'])) {\n                $astable = 'networkports_' . $criterion->fields['criteria'];\n                $it_criteria['LEFT JOIN']['glpi_networkports AS ' . $astable] = [\n                    'ON'  => [\n                        $itemtable  => 'id',\n                        $astable    => 'items_id', [\n                            'AND' => [$astable . '.itemtype' => $itemtype]\n                        ]\n                    ]\n                ];\n            }\n        }\n    }\n\n    /**\n     * Handle fields criteria\n     *\n     * @param CommonDBTM $item         Item instance\n     * @param array      &$it_criteria Iterator criteria\n     * @param array      $input        Input\n     *\n     * @return void\n     */\n    public function handleFieldsCriteria(CommonDBTM $item, &$it_criteria, $input)\n    {\n        $itemtable      = $item->getTable();\n        $itemtype       = $item->getType();\n\n        foreach ($this->complex_criteria as $criterion) {\n            switch ($criterion->fields['criteria']) {\n                case 'name':\n                    if ($criterion->fields['condition'] == Rule::PATTERN_IS_EMPTY) {\n                        $it_criteria['WHERE']['OR'] = [\n                            [\"$itemtable.name\" => ''],\n                            [\"$itemtable.name\"   => null]\n                        ];\n                    } else {\n                        $it_criteria['WHERE'][] = [\"$itemtable.name\" => $input['name']];\n                    }\n                    break;\n\n                case 'mac':\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = 'networkports_' . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n\n                    if (!is_array($input['mac'])) {\n                        $input['mac'] = [$input['mac']];\n                    }\n                    $it_criteria['WHERE'][] = [\n                        $ntable . '.mac' => $input['mac']\n                    ];\n                    break;\n\n                case 'ip':\n                    if (!is_array($input['ip'])) {\n                        $input['ip'] = [$input['ip']];\n                    }\n\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = \"networkports_\" . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else if (!in_array('glpi_networkports.id AS portid', $it_criteria['SELECT'])) {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n\n                    $it_criteria['WHERE'][] = ['glpi_ipaddresses.name' => $input['ip']];\n                    break;\n\n                case 'ifdescr':\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = \"networkports_\" . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else if (!in_array('glpi_networkports.id AS portid', $it_criteria['SELECT'])) {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n\n                    $it_criteria['WHERE'][] = [$ntable . '.ifdescr' => $input['ifdescr']];\n                    break;\n\n                case 'ifnumber':\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = \"networkports_\" . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else if (!in_array('glpi_networkports.id AS portid', $it_criteria['SELECT'])) {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n                    $it_criteria['WHERE'][] = [$ntable . '.logical_number' => $input['ifnumber']];\n                    break;\n\n                case 'tag':\n                    if (isset($input['tag']) && isset($input['deviceid'])) {\n                        $it_criteria['LEFT JOIN']['glpi_agents'] = [\n                            'ON'  => [\n                                'glpi_agents'  => 'items_id',\n                                $itemtable     => 'id'\n                            ]\n                        ];\n                        $it_criteria['WHERE'][] = [\n                            'glpi_agents.deviceid' => $input['deviceid'],\n                            'glpi_agents.tag' => $input['tag']\n                        ];\n                    }\n                    break;\n\n                case 'serial':\n                    $serial = $input['serial'];\n                    $conf = new Glpi\\Inventory\\Conf();\n\n                    if (\n                        isset($input['itemtype'])\n                        && $input['itemtype'] == 'Monitor'\n                        && $conf->import_monitor_on_partial_sn == true\n                        && strlen($input[\"serial\"]) >= 4\n                    ) {\n                        $serial = ['LIKE', '%' . $input['serial'] . '%'];\n                    }\n\n                    $it_criteria['WHERE'][] = [\"$itemtable.serial\" => $serial];\n                    break;\n\n                case 'otherserial':\n                    if ($criterion->fields['condition'] == self::PATTERN_IS_EMPTY) {\n                        $it_criteria['WHERE'][] = [\n                            'OR' => [\n                                [\"$itemtable.otherserial\" => ''],\n                                [\"$itemtable.otherserial\" => null]\n                            ]\n                        ];\n                    } else {\n                        $it_criteria['WHERE'][] = [\"$itemtable.otherserial\" => $input['otherserial']];\n                    }\n                    break;\n\n                case 'model':\n                    $modelclass = $itemtype . 'Model';\n                    $options    = ['manufacturer' => addslashes($input['manufacturer'])];\n                    $mid        = Dropdown::importExternal(\n                        $modelclass,\n                        addslashes($input['model']),\n                        -1,\n                        $options,\n                        '',\n                        false\n                    );\n                    $it_criteria['WHERE'][] = [$itemtable . '.' . $modelclass::getForeignKeyField() => $mid];\n                    break;\n\n                case 'manufacturer':\n                    $mid = Dropdown::importExternal(\n                        'Manufacturer',\n                        addslashes($input['manufacturer']),\n                        -1,\n                        [],\n                        '',\n                        false\n                    );\n                    $it_criteria['WHERE'][] = [\"$itemtable.manufacturers_id\" => $mid];\n                    break;\n\n                case 'states_id':\n                    $condition = [\"$itemtable.states_id\" => $criterion->fields['pattern']];\n                    if ($criterion->fields['condition'] == Rule::PATTERN_IS) {\n                        $it_criteria['WHERE'][] = $condition;\n                    } else {\n                        $it_criteria['WHERE'][] = ['NOT' => $condition];\n                    }\n                    break;\n\n                case 'uuid':\n                    if ($criterion->fields['condition'] == self::PATTERN_IS_EMPTY) {\n                        $it_criteria['WHERE'][] = [\n                            'OR' => [\n                                [\"$itemtable.uuid\" => ''],\n                                [\"$itemtable.uuid\" => null]\n                            ]\n                        ];\n                    } else {\n                        $it_criteria['WHERE'][] = [\"$itemtable.uuid\" => $input['uuid']];\n                    }\n                    break;\n\n                case 'device_id':\n                    $it_criteria['LEFT JOIN']['glpi_agents'] = [\n                        'ON'  => [\n                            'glpi_agents'  => 'items_id',\n                            $itemtable     => 'id'\n                        ]\n                    ];\n                    $it_criteria['WHERE'][] = [\n                        'glpi_agents.device_id' => $input['device_id']\n                    ];\n                    break;\n\n                case 'domain':\n                    $it_criteria['LEFT JOIN']['glpi_domains'] = [\n                        'ON'  => [\n                            'glpi_domains' => 'id',\n                            $itemtable     => 'domains_id'\n                        ]\n                    ];\n                    $it_criteria['WHERE'][] = [\n                        'glpi_domains.name'  => $input['domains_id']\n                    ];\n                    break;\n\n                case 'linked_item':\n                    $it_criteria['WHERE'][] = [\n                        'itemtype' => $input['linked_item']['itemtype'],\n                        'items_id' => $input['linked_item']['items_id']\n                    ];\n                    break;\n            }\n        }\n    }\n\n    public function executeActions($output, $params, array $input = [])\n    {\n        $class = $params['class'] ?? null;\n        $rules_id = $this->fields['id'];\n        $output['rules_id'] = $rules_id;\n\n        $rulesmatched = new RuleMatchedLog();\n        $inputrulelog = [\n            'date'      => date('Y-m-d H:i:s'),\n            'rules_id'  => $rules_id\n        ];\n\n        if ($class && method_exists($class, 'getAgent') && $class->getAgent()) {\n            $inputrulelog['agents_id'] = $class->getAgent()->fields['id'];\n        }\n\n        if (!isset($params['return'])) {\n            $inputrulelog['method'] = 'inventory'; //$class->getMethod();\n        }\n\n        if (count($this->actions)) {\n            foreach ($this->actions as $action) {\n                if ($action->fields[\"value\"] == self::RULE_ACTION_DENIED) {\n                    $output['action'] = self::LINK_RESULT_DENIED;\n                    return $output;\n                }\n\n                if ($action->fields['field'] == '_ignore_import') {\n                    $output['action'] = self::LINK_RESULT_CREATE;\n                    return $output;\n                }\n\n                if ($action->fields['field'] != '_inventory' && $action->fields['field'] != '_fusion') {\n                    if (count($this->criterias)) {\n                        foreach ($this->criterias as $criterion) {\n                            if ($criterion->fields['criteria'] == 'itemtype' && !is_numeric($criterion->fields['pattern'])) {\n                                $itemtype = $criterion->fields['pattern'];\n                                if ($class && method_exists($class, 'rulepassed')) {\n                                    if (!isset($params['return'])) {\n                                          $class->rulepassed(\"0\", $itemtype, $rules_id);\n                                    }\n                                    $output['found_inventories'] = [0, $itemtype, $rules_id];\n                                } else {\n                                    $output['action'] = self::LINK_RESULT_CREATE;\n                                }\n                                return $output;\n                            }\n                        }\n                    }\n\n                    $back_class = Unmanaged::class;\n                    if (is_a($class, \\Glpi\\Inventory\\Asset\\MainAsset::class)) {\n                        $back_class = $class->getItemtype();\n                    }\n                    if ($class && !isset($params['return'])) {\n                        $class->rulepassed(\"0\", $back_class, $rules_id);\n                    }\n                    $output['found_inventories'] = [0, $back_class, $rules_id];\n                    return $output;\n                }\n\n                if (\n                    $action->fields[\"value\"] == self::RULE_ACTION_LINK_OR_IMPORT\n                    || $action->fields[\"value\"] == self::RULE_ACTION_LINK_OR_NO_IMPORT\n                ) {\n                    if (isset($this->criterias_results['found_inventories'])) {\n                        foreach ($this->criterias_results['found_inventories'] as $itemtype => $inventory) {\n                             $items_id = current($inventory);\n                             $output['found_inventories'] = [$items_id, $itemtype, $rules_id];\n                            if (!isset($params['return'])) {\n                                if ($class) {\n                                    $class->rulepassed($items_id, $itemtype, $rules_id, $this->criterias_results['found_port']);\n                                } else {\n                                    $inputrulelog = $inputrulelog + [\n                                        'items_id'  => $items_id,\n                                        'itemtype'  => $itemtype\n                                    ];\n                                    $rulesmatched->add($inputrulelog);\n                                    $rulesmatched->cleanOlddata($items_id, $itemtype);\n                                }\n                            }\n                            return $output;\n                        }\n                    } else if ($action->fields[\"value\"] != self::RULE_ACTION_LINK_OR_NO_IMPORT) {\n                       // Import into new equipment\n                        if (count($this->criterias)) {\n                            foreach ($this->criterias as $criterion) {\n                                if ($criterion->fields['criteria'] == 'itemtype' && !is_numeric($criterion->fields['pattern'])) {\n                                    $itemtype = $criterion->fields['pattern'];\n                                    if ($class && !isset($params['return'])) {\n                                         $class->rulepassed(\"0\", $itemtype, $rules_id);\n                                    }\n                                    $output['found_inventories'] = [0, $itemtype, $rules_id];\n                                    return $output;\n                                }\n                            }\n                        }\n\n                        $back_class = Unmanaged::class;\n                        if (is_a($class, \\Glpi\\Inventory\\Asset\\MainAsset::class)) {\n                            $back_class = $class->getItemtype();\n                        }\n                        if ($class && !isset($params['return'])) {\n                            $class->rulepassed(\"0\", $back_class, $rules_id);\n                        }\n                        $output['found_inventories'] = [0, $back_class, $rules_id];\n                        return $output;\n                    }\n                }\n            }\n        }\n        return $output;\n    }\n\n\n    public function showSpecificCriteriasForPreview($fields)\n    {\n\n        $entity_as_criterion = false;\n        foreach ($this->criterias as $criterion) {\n            if ($criterion->fields['criteria'] == 'entities_id') {\n                $entity_as_criterion = true;\n                break;\n            }\n        }\n        if (!$entity_as_criterion) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . Entity::getTypeName(1) . \"</td>\";\n            echo \"<td>\";\n            Dropdown::show('Entity');\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th colspan='2'>\" . __('Use values found from an already refused equipment') . \"</th>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . RefusedEquipment::getTypeName(1) . \"</td>\";\n        echo \"<td>\";\n        Dropdown::show(RefusedEquipment::getType(), ['value' => ($fields['refusedequipments_id'] ?? null)]);\n        echo \"</td></tr>\";\n    }\n\n    /**\n     * Get itemtypes have state_type and unmanaged devices\n     *\n     * @global array $CFG_GLPI\n     * @return array\n     */\n    public static function getItemTypesForRules()\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n        $types = [];\n        foreach ($CFG_GLPI[\"state_types\"] as $itemtype) {\n            if (class_exists($itemtype)) {\n                $item = new $itemtype();\n                $types[$itemtype] = $item->getTypeName();\n            }\n        }\n        $types[\"\"] = __('No itemtype defined');\n        ksort($types);\n        return $types;\n    }\n\n    public function addSpecificParamsForPreview($params)\n    {\n        $class = new class {\n            public function rulepassed($items_id, $itemtype, $rules_id)\n            {\n            }\n        };\n        return $params + ['class' => $class];\n    }\n\n    /**\n     * Get criteria related to network ports\n     *\n     * @return array\n     */\n    public function getNetportCriteria(): array\n    {\n        return [\n            'mac',\n            'ip',\n            'ifnumber',\n            'ifdescr'\n        ];\n    }\n\n    /**\n     * Get global criteria\n     *\n     * @return array\n     */\n    public function getGlobalCriteria(): array\n    {\n        /** @var array $PLUGIN_HOOKS */\n        global $PLUGIN_HOOKS;\n\n        $criteria = array_merge([\n            'manufacturer',\n            'model',\n            'name',\n            'serial',\n            'otherserial',\n            'uuid',\n            'device_id',\n            'itemtype',\n            'domains_id',\n            'linked_item',\n            'entity_restrict',\n            'link_criteria_port',\n            'only_these_criteria'\n        ], $this->getNetportCriteria());\n\n       //Add plugin global criteria\n        if (isset($PLUGIN_HOOKS['use_rules'])) {\n            foreach ($PLUGIN_HOOKS['use_rules'] as $plugin => $val) {\n                if (!Plugin::isPluginActive($plugin)) {\n                    continue;\n                }\n                if (is_array($val) && in_array($this->getType(), $val)) {\n                    $criteria = Plugin::doOneHook(\n                        $plugin,\n                        \"ruleImportAsset_addGlobalCriteria\",\n                        $criteria\n                    );\n                }\n            }\n        }\n\n        return $criteria;\n    }\n\n    /**\n     * Check if criterion is related to network ports\n     *\n     * @param string $criterion Criterion to check\n     *\n     * @return boolean\n     */\n    public function isNetPort($criterion): bool\n    {\n        return in_array($criterion, $this->getNetportCriteria());\n    }\n\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'id':\n                $rule = new static();\n                $rule->getFromDB($values['id']);\n                return $rule->getLink();\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n        switch ($field) {\n            case 'id':\n                $options['display'] = false;\n                return Rule::dropdown(\n                    [\n                        'sub_type' => static::class,\n                        'display' => false,\n                        'name' => $name\n                    ] + $options\n                );\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units\\Glpi\\Inventory\\Asset;\n\ninclude_once __DIR__ . '/../../../../abstracts/AbstractInventoryAsset.php';\n\n/* Test for inc/inventory/asset/firmware.class.php */\n\nclass Bios extends AbstractInventoryAsset\n{\n    protected function assetProvider(): array\n    {\n        return [\n            [\n                'xml' => \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <BIOS>\n      <ASSETTAG />  <BDATE>06/02/2016</BDATE>\n      <BMANUFACTURER>Dell Inc.</BMANUFACTURER>\n      <BVERSION>1.4.3</BVERSION>\n      <MMANUFACTURER>Dell Inc.</MMANUFACTURER>\n      <MMODEL>07TYC2</MMODEL>\n      <MSN>/640HP72/CN129636460078/</MSN>\n      <SKUNUMBER>0704</SKUNUMBER>\n      <SMANUFACTURER>Dell Inc.</SMANUFACTURER>\n      <SMODEL>XPS 13 9350</SMODEL>\n      <SSN>640HP72</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>glpixps.teclib.infra-2018-10-03-08-42-36</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  </REQUEST>\",\n                'expected'  => '{\"bdate\": \"2016-02-06\", \"bmanufacturer\": \"Dell Inc.\", \"bversion\": \"1.4.3\", \"mmanufacturer\": \"Dell Inc.\", \"mmodel\": \"07TYC2\", \"msn\": \"/640HP72/CN129636460078/\", \"skunumber\": \"0704\", \"smanufacturer\": \"Dell Inc.\", \"smodel\": \"XPS 13 9350\", \"ssn\": \"640HP72\", \"date\": \"2016-02-06\", \"version\": \"1.4.3\", \"manufacturers_id\": \"Dell Inc.\", \"designation\": \"Dell Inc. BIOS\", \"devicefirmwaretypes_id\": \"BIOS\"}'\n            ], [\n                'xml' => \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <BIOS>\n      <BVERSION>IM51.0090.B09</BVERSION>\n      <SMANUFACTURER>Apple Computer, Inc.</SMANUFACTURER>\n      <SMODEL>iMac5,1</SMODEL>\n      <SSN>W87051UGVUV</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>glpixps.teclib.infra-2018-10-03-08-42-36</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  </REQUEST>\",\n                'expected'  => '{\"bversion\": \"IM51.0090.B09\", \"smanufacturer\": \"Apple Computer, Inc.\", \"smodel\": \"iMac5,1\", \"ssn\": \"W87051UGVUV\", \"version\": \"IM51.0090.B09\", \"designation\": \" BIOS\", \"devicefirmwaretypes_id\": \"BIOS\"}'\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider assetProvider\n     */\n    public function testPrepare($xml, $expected)\n    {\n        $converter = new \\Glpi\\Inventory\\Converter();\n        $data = $converter->convert($xml);\n        $json = json_decode($data);\n\n        $computer = getItemByTypeName('Computer', '_test_pc01');\n        $asset = new \\Glpi\\Inventory\\Asset\\Bios($computer, (array)$json->content->bios);\n        $asset->setExtraData((array)$json->content);\n        $result = $asset->prepare();\n        $this->object($result[0])->isEqualTo(json_decode($expected));\n    }\n\n    public function testHandle()\n    {\n        $computer = getItemByTypeName('Computer', '_test_pc01');\n\n       //first, check there are no controller linked to this computer\n        $idf = new \\Item_DeviceFirmware();\n        $this->boolean($idf->getFromDbByCrit(['items_id' => $computer->fields['id'], 'itemtype' => 'Computer']))\n           ->isFalse('A firmware is already linked to computer!');\n\n       //convert data\n        $expected = $this->assetProvider()[0];\n\n        $converter = new \\Glpi\\Inventory\\Converter();\n        $data = $converter->convert($expected['xml']);\n        $json = json_decode($data);\n\n        $computer = getItemByTypeName('Computer', '_test_pc01');\n        $asset = new \\Glpi\\Inventory\\Asset\\Bios($computer, (array)$json->content->bios);\n        $asset->setExtraData((array)$json->content);\n        $result = $asset->prepare();\n        $this->object($result[0])->isEqualTo(json_decode($expected['expected']));\n\n       //handle\n        $asset->handleLinks();\n        $asset->handle();\n        $this->boolean($idf->getFromDbByCrit(['items_id' => $computer->fields['id'], 'itemtype' => 'Computer']))\n           ->isTrue('Firmware has not been linked to computer :(');\n    }\n\n    public function testInventoryUpdate()\n    {\n        $computer = new \\Computer();\n        $device_bios = new \\DeviceFirmware();\n        $item_bios = new \\Item_DeviceFirmware();\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7ne7</SSN>\n      <BMANUFACTURER>Dell Inc.</BMANUFACTURER>\n      <BVERSION>1.4.3</BVERSION>\n      <MMANUFACTURER>Dell Inc.</MMANUFACTURER>\n      <MMODEL>07TYC2</MMODEL>\n      <MSN>/640HP72/CN129636460078/</MSN>\n      <SKUNUMBER>0704</SKUNUMBER>\n      <SMANUFACTURER>Dell Inc.</SMANUFACTURER>\n      <SMODEL>XPS 13 9350</SMODEL>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n</REQUEST>\";\n\n        $type = new \\DeviceFirmwareType();\n        $type->getFromDBByCrit([\n            'name' => 'BIOS'\n        ]);\n        $types_id = $type->getID();\n\n        $manufacturer = new \\Manufacturer();\n        $manufacturers_id = $manufacturer->add([\n            'name' => 'Dell Inc.'\n        ]);\n        $this->integer($manufacturers_id)->isGreaterThan(0);\n\n        //create manually a computer, with a bios\n        $computers_id = $computer->add([\n            'name'   => 'pc002',\n            'serial' => 'ggheb7ne7',\n            'entities_id' => 0\n        ]);\n        $this->integer($computers_id)->isGreaterThan(0);\n\n        $bios_id = $device_bios->add([\n            'designation' => 'Dell Inc. BIOS',\n            'devicefirmwaretypes_id' => $types_id,\n            'manufacturers_id' => $manufacturers_id,\n            'version' => '1.4.3'\n        ]);\n\n        $item_bios_id = $item_bios->add([\n            'items_id' => $computers_id,\n            'itemtype' => 'Computer',\n            'devicefirmwares_id' => $bios_id\n        ]);\n        $this->integer($item_bios_id)->isGreaterThan(0);\n\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n        foreach ($firmwares as $firmware) {\n            $this->variable($firmware['is_dynamic'])->isEqualTo(0);\n        }\n\n        //computer inventory knows bios\n        $this->doInventory($xml_source, true);\n\n        //we still have 1 bios linked to the computer\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //bios present in the inventory source is now dynamic\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id, 'is_dynamic' => 1]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //Redo inventory, but with modified firmware => will create a new one\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7ne7</SSN>\n      <BMANUFACTURER>Dell Inc.</BMANUFACTURER>\n      <BVERSION>1.4.4</BVERSION>\n      <MMANUFACTURER>Dell Inc.</MMANUFACTURER>\n      <MMODEL>07TYC2</MMODEL>\n      <MSN>/640HP72/CN129636460078/</MSN>\n      <SKUNUMBER>0704</SKUNUMBER>\n      <SMANUFACTURER>Dell Inc.</SMANUFACTURER>\n      <SMODEL>XPS 13 9350</SMODEL>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //we still have one firmware\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //bios present in the inventory source is still dynamic\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id, 'is_dynamic' => 1]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //\"original\" firmware has been removed\n        $this->boolean($item_bios->getFromDB($item_bios_id))->isFalse();\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units\\Glpi\\Inventory;\n\nuse InventoryTestCase;\nuse Item_OperatingSystem;\nuse Lockedfield;\nuse OperatingSystem;\nuse OperatingSystemArchitecture;\nuse OperatingSystemServicePack;\nuse OperatingSystemVersion;\nuse RuleCriteria;\nuse wapmorgan\\UnifiedArchive\\UnifiedArchive;\n\nclass Inventory extends InventoryTestCase\n{\n    private function checkComputer1($computers_id)\n    {\n        global $DB;\n\n        //get computer models, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\ComputerModel::getTable(), 'WHERE' => ['name' => 'XPS 13 9350']])->current();\n        $this->array($cmodels);\n        $computermodels_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\ComputerType::getTable(), 'WHERE' => ['name' => 'Laptop']])->current();\n        $this->array($ctypes);\n        $computertypes_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Dell Inc.']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'glpixps',\n            'serial' => '640HP72',\n            'otherserial' => null,\n            'contact' => 'trasher/root',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '4c4c4544-0034-3010-8048-b6c04f503732',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => '2020-06-09 07:58:08',\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora 31 (Workstation Edition)',\n            'version' => '31 (Workstation Edition)',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n       //remote management\n        $mgmt = new \\Item_RemoteManagement();\n        $iterator = $mgmt->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $remote = $iterator->current();\n        unset($remote['id']);\n        $this->array($remote)->isIdenticalTo([\n            'itemtype' => $computer->getType(),\n            'items_id' => $computer->fields['id'],\n            'remoteid' => '123456789',\n            'type' => 'teamviewer',\n            'is_dynamic' => 1,\n            'is_deleted' => 0\n        ]);\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $monitor_link = $iterator->current();\n        unset($monitor_link['date_mod']);\n        unset($monitor_link['date_creation']);\n\n        $mmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Sharp Corporation']])->current();\n        $this->array($mmanuf);\n        $manufacturers_id = $mmanuf['id'];\n\n        $mmodel = $DB->request(['FROM' => \\MonitorModel::getTable(), 'WHERE' => ['name' => 'DJCP6']])->current();\n        $this->array($mmodel);\n        $models_id = $mmodel['id'];\n\n        $expected = [\n            'id' => $monitor_link['id'],\n            'entities_id' => 0,\n            'name' => 'DJCP6',\n            'contact' => 'trasher/root',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'serial' => 'ABH55D',\n            'otherserial' => null,\n            'size' => '0.00',\n            'have_micro' => 0,\n            'have_speaker' => 0,\n            'have_subd' => 0,\n            'have_bnc' => 0,\n            'have_dvi' => 0,\n            'have_pivot' => 0,\n            'have_hdmi' => 0,\n            'have_displayport' => 0,\n            'locations_id' => 0,\n            'monitortypes_id' => 0,\n            'monitormodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_global' => 0,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'autoupdatesystems_id' => 0,\n            'uuid' => null,\n            'is_recursive' => 0,\n            'linkid' => $monitor_link['linkid'],\n            'glpi_computers_items_is_dynamic' => 1,\n            'entity' => 0,\n        ];\n        $this->array($monitor_link)->isIdenticalTo($expected);\n\n        $monitor = new \\Monitor();\n        $this->boolean($monitor->getFromDB($monitor_link['id']))->isTrue();\n        $this->boolean((bool)$monitor->fields['is_dynamic'])->isTrue();\n        $this->string($monitor->fields['name'])->isIdenticalTo('DJCP6');\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(5);\n\n        $expecteds = [\n            [\n                'logical_number' => 0,\n                'name' => 'lo',\n                'instantiation_type' => 'NetworkPortEthernet',\n                'mac' => '00:00:00:00:00:00',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 1,\n                'name' => 'enp57s0u1u4',\n                'instantiation_type' => 'NetworkPortEthernet',\n                'mac' => '00:e0:4c:68:01:db',\n                'ifstatus' => '1',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 1,\n                'name' => 'wlp58s0',\n                'instantiation_type' => 'NetworkPortWifi',\n                'mac' => '44:85:00:2b:90:bc',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 0,\n                'name' => 'virbr0',\n                'instantiation_type' => 'NetworkPortEthernet',\n                'mac' => '52:54:00:fa:20:0e',\n                'ifstatus' => '2',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 0,\n                'name' => 'virbr0-nic',\n                'instantiation_type' => null,\n                'mac' => '52:54:00:fa:20:0e',\n                'ifstatus' => '2',\n                'ifinternalstatus' => '2',\n            ]\n        ];\n\n        $ips = [\n            'lo'  => [\n                'v4'   => '127.0.0.1',\n                'v6'   => '::1'\n            ],\n            'enp57s0u1u4'  => [\n                'v4'   => '192.168.1.142',\n                'v6'   => 'fe80::b283:4fa3:d3f2:96b1'\n            ],\n            'wlp58s0'   => [\n                'v4'   => '192.168.1.118',\n                'v6'   => 'fe80::92a4:26c6:99dd:2d60'\n            ],\n            'virbr0' => [\n                'v4'   => '192.168.122.1'\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            $expected = $expecteds[$i];\n            $expected = $expected + [\n                'items_id' => $computers_id,\n                'itemtype' => 'Computer',\n                'entities_id' => 0,\n                'is_recursive' => 0,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'ifmtu' => 0,\n                'ifspeed' => 0,\n                'ifinternalstatus' => null,\n                'ifconnectionstatus' => 0,\n                'iflastchange' => null,\n                'ifinbytes' => 0,\n                'ifinerrors' => 0,\n                'ifoutbytes' => 0,\n                'ifouterrors' => 0,\n                'ifstatus' => null,\n                'ifdescr' => null,\n                'ifalias' => null,\n                'portduplex' => null,\n                'trunk' => 0,\n                'lastup' => null\n            ];\n\n            $this->array($port)->isEqualTo($expected);\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                //FIXME: missing all ipv6 :(\n                $ip = $ip_iterator->current();\n                $this->integer((int)$ip['version'])->isIdenticalTo(4);\n                $this->string($ip['name'])->isIdenticalTo($ips[$port['name']]['v4']);\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => 0,\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceProcessor' => 1,\n            'Item_DeviceMemory' => 2,\n            'Item_DeviceHardDrive' => 1,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DeviceDrive' => 0,\n            'Item_DeviceBattery' => 1,\n            'Item_DeviceGraphicCard' => 0,\n            'Item_DeviceSoundCard' => 1,\n            'Item_DeviceControl' => 25,\n            'Item_DevicePci' => 0,\n            'Item_DeviceCase' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n            'Item_DeviceSensor' => 0\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo(\n                $count,\n                sprintf(\n                    'Expected %1$s %2$s, got %3$s',\n                    $count,\n                    $type,\n                    count($components[$type])\n                )\n            );\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => [],\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceProcessor' =>\n               [\n                   [\n                       'items_id' => $computers_id,\n                       'itemtype' => 'Computer',\n                       'deviceprocessors_id' => 3060400,\n                       'frequency' => 2300,\n                       'serial' => null,\n                       'is_deleted' => 0,\n                       'is_dynamic' => 1,\n                       'nbcores' => 2,\n                       'nbthreads' => 4,\n                       'entities_id' => 0,\n                       'is_recursive' => 0,\n                       'busID' => null,\n                       'otherserial' => null,\n                       'locations_id' => 0,\n                       'states_id' => 0,\n                   ],\n               ],\n            'Item_DeviceMemory' =>\n               [\n                   [\n                       'items_id' => $computers_id,\n                       'itemtype' => 'Computer',\n                       'devicememories_id' => 104,\n                       'size' => 4096,\n                       'serial' => '12161217',\n                       'is_deleted' => 0,\n                       'is_dynamic' => 1,\n                       'entities_id' => 0,\n                       'is_recursive' => 0,\n                       'busID' => '1',\n                       'otherserial' => null,\n                       'locations_id' => 0,\n                       'states_id' => 0,\n                   ], [\n                       'items_id' => $computers_id,\n                       'itemtype' => 'Computer',\n                       'devicememories_id' => 104,\n                       'size' => 4096,\n                       'serial' => '12121212',\n                       'is_deleted' => 0,\n                       'is_dynamic' => 1,\n                       'entities_id' => 0,\n                       'is_recursive' => 0,\n                       'busID' => '2',\n                       'otherserial' => null,\n                       'locations_id' => 0,\n                       'states_id' => 0,\n                   ],\n               ],\n            'Item_DeviceHardDrive' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'deviceharddrives_id' => 104,\n                    'capacity' => 256060,\n                    'serial' => 'S29NNXAH146409',\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DeviceNetworkCard' => [],\n            'Item_DeviceDrive' => [],\n            // 'Item_DeviceBattery' is not tested here, see self::checkComputer1Batteries()\n            'Item_DeviceGraphicCard' => [],\n            'Item_DeviceSoundCard' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicesoundcards_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DeviceControl' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2246,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => 'xyz',\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2247,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2248,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2249,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2250,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2251,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2252,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2253,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2254,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2255,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2256,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2257,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2258,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2259,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2260,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2261,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2262,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2264,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2265,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2266,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2267,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DevicePci' => [],\n            'Item_DeviceCase' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [],\n            'Item_DeviceSensor' => [],\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n           //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //check printer\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Printer');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $printer_link = $iterator->current();\n        unset($printer_link['date_mod'], $printer_link['date_creation']);\n\n        $expected = [\n            'id' => $printer_link['id'],\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'Officejet_Pro_8600_34AF9E_',\n            'contact' => 'trasher/root',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'serial' => 'MY47L1W1JHEB6',\n            'otherserial' => null,\n            'have_serial' => 0,\n            'have_parallel' => 0,\n            'have_usb' => 0,\n            'have_wifi' => 0,\n            'have_ethernet' => 0,\n            'comment' => null,\n            'memory_size' => null,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'printertypes_id' => 0,\n            'printermodels_id' => 0,\n            'manufacturers_id' => 0,\n            'is_global' => 0,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'init_pages_counter' => 0,\n            'last_pages_counter' => 0,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'sysdescr' => null,\n            'last_inventory_update' => $_SESSION['glpi_currenttime'],\n            'snmpcredentials_id' => 0,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'linkid' => $printer_link['linkid'],\n            'glpi_computers_items_is_dynamic' => 1,\n            'entity' => 0,\n        ];\n        $this->array($printer_link)->isIdenticalTo($expected);\n\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDB($printer_link['id']))->isTrue();\n        $this->boolean((bool)$printer->fields['is_dynamic'])->isTrue();\n        $this->string($printer->fields['name'])->isIdenticalTo('Officejet_Pro_8600_34AF9E_');\n\n        return $computer;\n    }\n\n    private function checkComputer1Volumes(\\Computer $computer, array $freesizes = [])\n    {\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(6);\n\n        $expecteds = [\n            [\n                'fsname' => 'ext4',\n                'name' => '/',\n                'device' => '/dev/mapper/xps-root',\n                'mountpoint' => '/',\n                'filesystems_id' => 4,\n                'totalsize' => 40189,\n                'freesize' => 11683,\n                'encryption_status' => 1,\n                'encryption_tool' => 'LUKS1',\n                'encryption_algorithm' => 'aes-xts-plain64',\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/var/www',\n                'device' => '/dev/mapper/xps-www',\n                'mountpoint' => '/var/www',\n                'filesystems_id' => 4,\n                'totalsize' => 20030,\n                'freesize' => 11924,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/boot',\n                'device' => '/dev/nvme0n1p2',\n                'mountpoint' => '/boot',\n                'filesystems_id' => 4,\n                'totalsize' => 975,\n                'freesize' => 703,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/var/lib/mysql',\n                'device' => '/dev/mapper/xps-maria',\n                'mountpoint' => '/var/lib/mysql',\n                'filesystems_id' => 4,\n                'totalsize' => 20030,\n                'freesize' => 15740,\n                'encryption_status' => 1,\n                'encryption_tool' => 'LUKS1',\n                'encryption_algorithm' => 'aes-xts-plain64',\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/home',\n                'device' => '/dev/mapper/xps-home',\n                'mountpoint' => '/home',\n                'filesystems_id' => 4,\n                'totalsize' => 120439,\n                'freesize' => 24872,\n                'encryption_status' => 1,\n                'encryption_tool' => 'LUKS1',\n                'encryption_algorithm' => 'aes-xts-plain64',\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'VFAT',\n                'name' => '/boot/efi',\n                'device' => '/dev/nvme0n1p1',\n                'mountpoint' => '/boot/efi',\n                'filesystems_id' => 7,\n                'totalsize' => 199,\n                'freesize' => 191,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id'], $volume['date_mod'], $volume['date_creation']);\n            $expected = $expecteds[$i];\n            if (count($freesizes)) {\n                $expected['freesize'] = $freesizes[$i];\n            }\n            $expected += [\n                'items_id' => $computer->fields['id'],\n                'itemtype' => 'Computer',\n                'entities_id' => 0,\n                'is_deleted' => 0,\n                'is_dynamic' => 1\n            ];\n\n            ksort($expected);\n            ksort($volume);\n\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n    }\n\n    private function checkComputer1Softwares(\\Computer $computer, array $versions = [])\n    {\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(7);\n\n        $expecteds = [\n            [\n                'softname' => 'expat',\n                'version' => '2.2.8-1.fc31',\n                'dateinstall' => '2019-12-19',\n            ],[\n                'softname' => 'Fedora 31 (Workstation Edition)',\n                'version' => '31 (Workstation Edition)',\n                'dateinstall' => null,\n            ], [\n                'softname' => 'gettext',\n                'version' => '0.20.1-3.fc31',\n                'dateinstall' => '2020-01-15',\n            ], [\n                'softname' => 'gitg',\n                'version' => '3.32.1-1.fc31',\n                'dateinstall' => '2019-12-19',\n            ], [\n                'softname' => 'gnome-calculator',\n                'version' => '3.34.1-1.fc31',\n                'dateinstall' => '2019-12-19',\n            ], [\n                'softname' => 'libcryptui',\n                'version' => '3.12.2-18.fc31',\n                'dateinstall' => '2019-12-19',\n            ], [\n                'softname' => 'tar',\n                'version' => '1.32-2.fc31',\n                'dateinstall' => '2019-12-19',\n            ],\n        ];\n\n        $i = 0;\n        foreach ($iterator as $soft) {\n            $expected = $expecteds[$i];\n            if (count($versions)) {\n                $expected['version'] = $versions[$i];\n            }\n            $this->array([\n                'softname'     => $soft['softname'],\n                'version'      => $soft['version'],\n                'dateinstall'  => $soft['dateinstall']\n            ])->isEqualTo($expected);\n            ++$i;\n        }\n    }\n\n    private function checkComputer1Batteries(\\Computer $computer, array $capacities = [])\n    {\n        global $DB;\n\n        $link        = getItemForItemtype(\\Item_DeviceBattery::class);\n        $iterator = $DB->request($link->getTableGroupCriteria($computer));\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $battery = [];\n        foreach ($iterator as $row) {\n            unset($row['id']);\n            $battery = $row;\n        }\n\n        $expected = [\n            'items_id' => $computer->fields['id'],\n            'itemtype' => $computer->getType(),\n            'devicebatteries_id' => 104,\n            'manufacturing_date' => '2019-07-06',\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'serial' => '34605',\n            'otherserial' => null,\n            'locations_id' => 0,\n            'states_id' => 0,\n            'real_capacity' => $capacities[0] ?? 50570\n        ];\n\n       //hack to replace expected fkeys\n        foreach (array_keys($expected) as $key) {\n            if (isForeignKeyField($key)) {\n                $expected[$key] = $battery[$key];\n            }\n        }\n\n        $this->array($battery)->isIdenticalTo($expected);\n    }\n\n    public function testImportComputer()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $inventory = $this->doInventory($json);\n\n       //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['tag']->isIdenticalTo('000005');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computer = $this->checkComputer1($agent['items_id']);\n        $this->checkComputer1Volumes($computer);\n        $this->checkComputer1Softwares($computer);\n        $this->checkComputer1Batteries($computer);\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(3);\n\n        $criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $monitor_criteria = $criteria;\n        $monitor_criteria['WHERE'] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $printer_criteria = $criteria;\n        $printer_criteria['WHERE'] = ['itemtype' => \\Printer::getType()];\n        $iterator = $DB->request($printer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Printer import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $criteria;\n        $computer_criteria['WHERE'] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Computer import (by serial + uuid)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n    }\n\n    public function testUpdateComputer()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_3.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.3.19')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['tag']->isIdenticalTo('000005');\n        $this->array($metadata['provider'])->hasSize(9);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['name']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('2.3.19')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $mrules_found = $mlogs->find();\n        $this->array($mrules_found)->hasSize(2);\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $monitor_criteria = $mrules_criteria;\n        $monitor_criteria['WHERE'] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $mrules_criteria;\n        $computer_criteria['WHERE'] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Computer import (by serial + uuid)');\n        $this->integer($iterator->current()['items_id'])->isIdenticalTo($agent['items_id']);\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        //get computer models, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\ComputerModel::getTable(), 'WHERE' => ['name' => 'PORTEGE Z30-A']])->current();\n        $this->array($cmodels);\n        $computermodels_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\ComputerType::getTable(), 'WHERE' => ['name' => 'Notebook']])->current();\n        $this->array($ctypes);\n        $computertypes_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Toshiba']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        //check created computer\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'LF014',\n            'serial' => '8C554721F',\n            'otherserial' => '0000000000',\n            'contact' => 'johan',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '0055ADC9-1D3A-E411-8043-B05D95113232',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => \"2017-02-20 08:11:53\",\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora release 25 (Twenty Five)',\n            'version' => '25',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3);\n\n        $expecteds_fs = [\n            [\n                'fsname' => 'ext4',\n                'name' => '/',\n                'device' => '/dev/mapper/fedora-root',\n                'mountpoint' => '/',\n                'filesystems_id' => 4,\n                'totalsize' => 50268,\n                'freesize' => 13336,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/boot',\n                'device' => '/dev/sda1',\n                'mountpoint' => '/boot',\n                'filesystems_id' => 4,\n                'totalsize' => 476,\n                'freesize' => 279,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/home',\n                'device' => '/dev/mapper/fedora-home',\n                'mountpoint' => '/home',\n                'filesystems_id' => 4,\n                'totalsize' => 181527,\n                'freesize' => 72579,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds_fs[$i];\n            $expected = $expected + [\n                'items_id'     => $computers_id,\n                'itemtype'     => 'Computer',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds_components = [\n            'Item_DeviceMotherboard' => 0,\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceProcessor' => 1,\n            'Item_DeviceMemory' => 2,\n            'Item_DeviceHardDrive' => 1,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DeviceDrive' => 0,\n            'Item_DeviceBattery' => 1,\n            'Item_DeviceGraphicCard' => 0,\n            'Item_DeviceSoundCard' => 2,\n            'Item_DeviceControl' => 14,\n            'Item_DevicePci' => 0,\n            'Item_DeviceCase' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n            'Item_DeviceSensor' => 0\n        ];\n\n        foreach ($expecteds_components as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, \"$type \" . count($components[$type]));\n        }\n\n        //check memory\n        $this->array($components['Item_DeviceMemory'])->hasSize(2);\n        $mem_component1 = array_pop($components['Item_DeviceMemory']);\n        $mem_component2 = array_pop($components['Item_DeviceMemory']);\n        $this->integer($mem_component1['devicememories_id'])->isGreaterThan(0);\n        $expected_mem_component = [\n            'items_id' => $mem_component1['items_id'],\n            'itemtype' => \"Computer\",\n            'devicememories_id' => $mem_component1['devicememories_id'],\n            'size' => 2048,\n            'serial' => \"23853943\",\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'busID' => \"2\",\n            'otherserial' => null,\n            'locations_id' => 0,\n            'states_id' => 0\n        ];\n        $this->array($mem_component1)->isIdenticalTo($expected_mem_component);\n        $expected_mem_component['busID'] = \"1\";\n        $this->array($mem_component2)->isIdenticalTo($expected_mem_component);\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3034);\n\n        //computer has been created, check logs.\n        //check for expected logs\n        $nblogsnow = countElementsInTable(\\Log::getTable());\n        $logs = $DB->request([\n            'FROM' => \\Log::getTable(),\n            'LIMIT' => $nblogsnow,\n            'OFFSET' => $this->nblogs,\n        ]);\n        $this->integer(count($logs))->isIdenticalTo(0);\n\n        //fake computer update (nothing has changed)\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_3.json'));\n        $this->doInventory($json);\n\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'LF014',\n            'serial' => '8C554721F',\n            'otherserial' => '0000000000',\n            'contact' => 'johan',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '0055ADC9-1D3A-E411-8043-B05D95113232',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => \"2017-02-20 08:11:53\",\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora release 25 (Twenty Five)',\n            'version' => '25',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3);\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds_fs[$i];\n            $expected = $expected + [\n                'items_id'     => $computers_id,\n                'itemtype'     => 'Computer',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        foreach ($expecteds_components as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, \"$type \" . count($components[$type]));\n        }\n\n        //check memory\n        $this->array($components['Item_DeviceMemory'])->hasSize(2);\n        $mem_component1 = array_pop($components['Item_DeviceMemory']);\n        $mem_component2 = array_pop($components['Item_DeviceMemory']);\n        $this->integer($mem_component1['devicememories_id'])->isGreaterThan(0);\n        $expected_mem_component['busID'] = \"2\";\n        $this->array($mem_component1)->isIdenticalTo($expected_mem_component);\n        $expected_mem_component['busID'] = \"1\";\n        $this->array($mem_component2)->isIdenticalTo($expected_mem_component);\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3034);\n\n        //check for expected logs\n        $nblogsnow = countElementsInTable(\\Log::getTable());\n        $logs = $DB->request([\n            'FROM' => \\Log::getTable(),\n            'LIMIT' => $nblogsnow,\n            'OFFSET' => $this->nblogs,\n        ]);\n        $this->integer(count($logs))->isIdenticalTo(0);\n\n        //real computer update\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_3_updated.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.3.20')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n        ;\n        $this->array($metadata['provider'])->hasSize(9);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['name']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('2.3.20')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->integer['items_id']->isIdenticalTo($computers_id)\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'LF014',\n            'serial' => '8C554721F',\n            'otherserial' => '0000000000',\n            'contact' => 'johan',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '0055ADC9-1D3A-E411-8043-B05D95113232',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => \"2017-06-08 07:06:47\",\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora release 25 (Twenty Five)',\n            'version' => '25',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3);\n\n        //update fs values\n        $expecteds_fs[0]['totalsize'] = 150268;\n        $expecteds_fs[0]['freesize'] = 7914;\n        $expecteds_fs[1]['freesize'] = 277;\n        $expecteds_fs[2]['freesize'] = 68968;\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds_fs[$i];\n            $expected = $expected + [\n                'items_id'     => $computers_id,\n                'itemtype'     => 'Computer',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(0);\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(7);\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        foreach ($expecteds_components as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, \"$type \" . count($components[$type]));\n        }\n\n        //check memory\n        $this->array($components['Item_DeviceMemory'])->hasSize(2);\n        $mem_component1 = array_pop($components['Item_DeviceMemory']);\n        $mem_component2 = array_pop($components['Item_DeviceMemory']);\n        $expected_mem_component = [\n            'items_id' => $mem_component1['items_id'],\n            'itemtype' => \"Computer\",\n            'devicememories_id' => $mem_component1['devicememories_id'],\n            'size' => 4096,\n            'serial' => \"53853943\",\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'busID' => \"2\",\n            'otherserial' => null,\n            'locations_id' => 0,\n            'states_id' => 0\n        ];\n        $this->array($mem_component1)->isIdenticalTo($expected_mem_component);\n        $expected_mem_component['busID'] = \"1\";\n        $this->array($mem_component2)->isIdenticalTo($expected_mem_component);\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3185);\n\n        //check for expected logs after update\n        $logs = $DB->request([\n            'FROM' => \\Log::getTable(),\n            'LIMIT' => countElementsInTable(\\Log::getTable()),\n            'OFFSET' => $nblogsnow,\n        ]);\n\n        $this->integer(count($logs))->isIdenticalTo(4412);\n\n        $expected_types_count = [\n            0 => 3, //Agent version, disks usage\n            \\Log::HISTORY_ADD_RELATION => 1, //new IPNetwork/IPAddress\n            \\Log::HISTORY_DEL_RELATION => 2,//monitor-computer relation\n            \\Log::HISTORY_ADD_SUBITEM => 3247,//network port/name, ip address, VMs, Software\n            \\Log::HISTORY_UPDATE_SUBITEM => 828,//disks usage, software updates\n            \\Log::HISTORY_DELETE_SUBITEM => 99,//networkport and networkname, Software?\n            \\Log::HISTORY_CREATE_ITEM => 230, //virtual machines, os, manufacturer, net ports, net names, software category ...\n            \\Log::HISTORY_UPDATE_RELATION => 2,//kernel version\n        ];\n\n        $types_count = [];\n        foreach ($logs as $row) {\n            $this->string($row['user_name'])->isIdenticalTo('inventory', print_r($row, true));\n            if (!isset($types_count[$row['linked_action']])) {\n                $types_count[$row['linked_action']] = 0;\n            }\n            ++$types_count[$row['linked_action']];\n        }\n\n        ksort($types_count);\n        ksort($expected_types_count);\n        $this->array($types_count)->isEqualTo(\n            $expected_types_count,\n            sprintf(\n                \"\\nGot:\\n%s\\n\\nExpected:\\n%s\",\n                print_r($types_count, true),\n                print_r($expected_types_count, true)\n            )\n        );\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find(['NOT' => ['id' => array_keys($mrules_found)]]);\n        $mrules_criteria['WHERE'] = ['NOT' => [\\RuleMatchedLog::getTable() . '.id' => array_keys($mrules_found)]];\n        $this->array($found)->hasSize(3);\n\n        $monitor_criteria = $mrules_criteria;\n        $monitor_criteria['WHERE'][] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor update (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $mrules_criteria;\n        $computer_criteria['WHERE'][] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n\n        $this->integer(count($iterator))->isIdenticalTo(2);\n        foreach ($iterator as $rmlog) {\n            $this->string($rmlog['name'])->isIdenticalTo('Computer update (by serial + uuid)');\n            $this->integer($rmlog['items_id'])->isIdenticalTo($agent['items_id']);\n            $this->string($rmlog['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n    }\n\n    public function testImportNetworkEquipment()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_1.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION['glpi_currenttime'] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('foo')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n       //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n       //no agent with deviceid equals to \"foo\"\n        $this->integer(count($agents))->isIdenticalTo(0);\n\n       //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'UCS 6248UP 48-Port']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Cisco']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'paris.pa3']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created asset\n        $equipments = $DB->request(['FROM' => \\NetworkEquipment::getTable(), 'WHERE' => ['is_dynamic' => 1]]);\n        //no agent with deviceid equals to \"foo\"\n        $this->integer(count($equipments))->isIdenticalTo(1);\n        $equipments_id = $equipments->current()['id'];\n\n        $equipment = new \\NetworkEquipment();\n        $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n\n        $expected = [\n            'id' => $equipments_id,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'ucs6248up-cluster-pa3-B',\n            'ram' => null,\n            'serial' => 'SSI1912014B',\n            'otherserial' => null,\n            'contact' => 'noc@glpi-project.org',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => $equipment->fields['date_mod'],\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => $equipment->fields['date_creation'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 4,\n            'uptime' => '482 days, 05:42:18.50',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 4,\n        ];\n        $this->array($equipment->fields)->isIdenticalTo($expected);\n\n        //check network ports\n        $expected_count = 164;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $equipments_id,\n                'itemtype'           => 'NetworkEquipment',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_count);\n\n        $expecteds = [\n            ($expected_count - 1) => [\n                'logical_number' => 0,\n                'name' => 'Management',\n                'instantiation_type' => 'NetworkPortAggregate',\n                'mac' => '8c:60:4f:8d:ae:fc',\n            ],\n        ];\n\n        $ips = [\n            'Management' => [\n                '10.2.5.10',\n                '192.168.12.5',\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            if (isset($expecteds[$i])) {\n                $expected = $expecteds[$i];\n                $expected = $expected + [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'ifmtu' => 0,\n                    'ifspeed' => 0,\n                    'ifinternalstatus' => null,\n                    'ifconnectionstatus' => 0,\n                    'iflastchange' => null,\n                    'ifinbytes' => 0,\n                    'ifinerrors' => 0,\n                    'ifoutbytes' => 0,\n                    'ifouterrors' => 0,\n                    'ifstatus' => null,\n                    'ifdescr' => null,\n                    'ifalias' => null,\n                    'portduplex' => null,\n                    'trunk' => 0,\n                    'lastup' => null\n                ];\n\n                $this->array($port)->isEqualTo($expected);\n            } else {\n                $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n            }\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                foreach ($ip_iterator as $ip) {\n                    $this->array($ips[$port['name']])->contains($ip['name']);\n                }\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($equipment));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceMemory' => 0,\n            'Item_DeviceHardDrive' => 0,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DevicePci' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo(\n                $count,\n                sprintf(\n                    'Expected %1$s %2$s, got %3$s of them',\n                    $count,\n                    $type,\n                    count($components[$type])\n                )\n            );\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceMemory' => [],\n            'Item_DeviceHardDrive' => [],\n            'Item_DeviceNetworkCard' => [],\n            'Item_DevicePci' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [],\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n            //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //ports connections\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(5);\n\n        //unmanaged equipments\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(5);\n\n        $expecteds = [\n            'sw2-mgmt-eqnx' => \"Cisco IOS Software, C2960 Software (C2960-LANLITEK9-M), Version 12.2(50)SE5, RELEASE SOFTWARE (fc1)\nTechnical Support: http://www.cisco.com/techsupport\nCopyright (c) 1986-2010 by Cisco Systems, Inc.\nCompiled Tue 28-Sep-10 13:44 by prod_rel_team\",\n            'n9k-1-pa3' => 'Cisco Nexus Operating System (NX-OS) Software, Version 7.0(3)I7(6)',\n            'n9k-2-pa3' => 'Cisco Nexus Operating System (NX-OS) Software, Version 7.0(3)I7(6)',\n        ];\n\n        foreach ($unmanageds as $unmanaged) {\n            $this->boolean(in_array($unmanaged['name'], array_keys($expecteds)))->isTrue($unmanaged['name']);\n            $this->string($unmanaged['sysdescr'])->isIdenticalTo($expecteds[$unmanaged['name']]);\n        }\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(6);//1 equipment, 5 unmanageds\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->integer($neteq['items_id'])->isIdenticalTo($equipments_id);\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(5);\n        foreach ($iterator as $unmanaged) {\n            $this->string($unmanaged['name'])->isIdenticalTo('Global import (by ip+ifdescr)');\n            $this->string($unmanaged['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n    }\n\n    public function testImportStackedNetworkEquipment()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_2.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION['glpi_currenttime'] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('3k-1-pa3.glpi-project.infra-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('3k-1-pa3.glpi-project.infra-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('3k-1-pa3.glpi-project.infra-2020-12-31-11-28-51')\n         //->string['version']->isIdenticalTo('')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'WS-C3750G-48TS-S']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Cisco']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'paris.pa3']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created equipments\n        $expected_eq_count = 5;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkEquipment::getTable(),\n            'WHERE'  => ['is_dynamic' => 1]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n\n        $main_expected = [\n            'id' => null,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => '3k-1-pa3.glpi-project.infra',\n            'ram' => 128,\n            'serial' => 'FOC1243W0ED',\n            'otherserial' => null,\n            'contact' => null,\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => null,\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => null,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 47,\n            'uptime' => '103 days, 13:53:28.28',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n\n        $stacks = [\n            1 => [\n                'serial'       => 'FOC1243W0ED',\n                'connections'  => 0\n            ],\n            2 => [\n                'serial'       => 'FOC1127Z4LH',\n                'connections'  => 2\n            ],\n            3 => [\n                'serial'       => 'FOC1232W0JH',\n                'connections'  => 5\n            ],\n            4 => [\n                'serial'       => 'FOC1033Y0M7',\n                'connections'  => 2\n            ],\n            8 => [\n                'serial'       => 'FOC0929U1SR',\n                'connections'  => 2\n            ]\n        ];\n\n        foreach ($iterator as $row) {\n            $expected = $main_expected;\n            $equipments_id = $row['id'];\n            $expected['id'] = $equipments_id;\n            $equipment = new \\NetworkEquipment();\n            $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n            $expected['date_mod'] = $row['date_mod'];\n            $expected['date_creation'] = $row['date_creation'];\n            $stack_id = preg_replace('/.+ - (\\d)/', '$1', $row['name']);\n            $this->array($stacks)->hasKey($stack_id);\n            $expected['name'] .= ' - ' . $stack_id;\n            $expected['serial'] = $stacks[$stack_id]['serial'];\n            $this->array($row)->isIdenticalTo($expected);\n\n            //check network ports\n            $expected_count = 53;\n            $ports_iterator = $DB->request([\n                'FROM'   => \\NetworkPort::getTable(),\n                'WHERE'  => [\n                    'items_id'           => $equipments_id,\n                    'itemtype'           => 'NetworkEquipment',\n                ],\n            ]);\n            $this->integer(count($ports_iterator))->isIdenticalTo(\n                $expected_count,\n                sprintf(\n                    '%s ports found on %s, %s expected',\n                    count($ports_iterator),\n                    $row['name'],\n                    $expected_count\n                )\n            );\n\n            $expecteds = [\n                ($expected_count - 1) => [\n                    'logical_number' => 0,\n                    'name' => 'Management',\n                    'instantiation_type' => 'NetworkPortAggregate',\n                    'mac' => '00:23:ac:6a:01:00',\n                ],\n            ];\n\n            $ips = [\n                'Management' => [\n                    '10.1.0.100',\n                    '10.1.0.22',\n                    '10.1.0.41',\n                    '10.1.0.45',\n                    '10.1.0.59',\n                    '10.11.11.1',\n                    '10.11.11.5',\n                    '10.11.13.1',\n                    '10.11.13.5',\n                    '172.21.0.1',\n                    '172.21.0.7',\n                    '172.22.0.1',\n                    '172.22.0.5',\n                    '172.23.0.1',\n                    '172.23.0.5',\n                    '172.24.0.1',\n                    '172.24.0.5',\n                    '172.25.1.15',\n                    '172.28.200.1',\n                    '172.28.200.5',\n                    '172.28.211.5',\n                    '172.28.215.1',\n                    '172.28.221.1',\n                    '185.10.253.65',\n                    '185.10.253.97',\n                    '185.10.254.1',\n                    '185.10.255.146',\n                    '185.10.255.224',\n                    '185.10.255.250',\n                ]\n            ];\n\n            $i = 0;\n            $netport = new \\NetworkPort();\n            $all_ports_ids = [];\n            foreach ($ports_iterator as $port) {\n                $ports_id = $port['id'];\n                $all_ports_ids[] = $port['id'];\n                $this->boolean($netport->getFromDB($ports_id))->isTrue();\n                $instantiation = $netport->getInstantiation();\n                if ($port['instantiation_type'] === null) {\n                    $this->boolean($instantiation)->isFalse();\n                } else {\n                    $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n                }\n\n                unset($port['id']);\n                unset($port['date_creation']);\n                unset($port['date_mod']);\n                unset($port['comment']);\n\n                if (isset($expecteds[$i])) {\n                    $expected = $expecteds[$i];\n                    $expected = $expected + [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'ifmtu' => 0,\n                        'ifspeed' => 0,\n                        'ifinternalstatus' => null,\n                        'ifconnectionstatus' => 0,\n                        'iflastchange' => null,\n                        'ifinbytes' => 0,\n                        'ifinerrors' => 0,\n                        'ifoutbytes' => 0,\n                        'ifouterrors' => 0,\n                        'ifstatus' => null,\n                        'ifdescr' => null,\n                        'ifalias' => null,\n                        'portduplex' => null,\n                        'trunk' => 0,\n                        'lastup' => null\n                    ];\n\n                    $this->array($port)->isEqualTo($expected);\n                } else {\n                    $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                    $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                    $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                    $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                    $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n                }\n                ++$i;\n\n                //check for ips\n                $ip_iterator = $DB->request([\n                    'SELECT'       => [\n                        \\IPAddress::getTable() . '.name',\n                        \\IPAddress::getTable() . '.version'\n                    ],\n                    'FROM'   => \\IPAddress::getTable(),\n                    'INNER JOIN'   => [\n                        \\NetworkName::getTable()   => [\n                            'ON'  => [\n                                \\IPAddress::getTable()     => 'items_id',\n                                \\NetworkName::getTable()   => 'id', [\n                                    'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                                ]\n                            ]\n                        ]\n                    ],\n                    'WHERE'  => [\n                        \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                        \\NetworkName::getTable() . '.items_id'  => $ports_id\n                    ]\n                ]);\n\n                $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n                if (isset($ips[$port['name']])) {\n                    foreach ($ip_iterator as $ip) {\n                        $this->array($ips[$port['name']])->contains($ip['name']);\n                    }\n                }\n            }\n\n            //check for components\n            $components = [];\n            $allcount = 0;\n            foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n                $link = getItemForItemtype($link_type);\n                $dev_iterator = $DB->request($link->getTableGroupCriteria($equipment));\n                $allcount += count($dev_iterator);\n                $components[$link_type] = [];\n\n                foreach ($dev_iterator as $row) {\n                    $lid = $row['id'];\n                    unset($row['id']);\n                    $components[$link_type][$lid] = $row;\n                }\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => 1,\n                'Item_DeviceMemory' => 0,\n                'Item_DeviceHardDrive' => 0,\n                'Item_DeviceNetworkCard' => 0,\n                'Item_DevicePci' => 0,\n                'Item_DevicePowerSupply' => 0,\n                'Item_DeviceGeneric' => 0,\n                'Item_DeviceSimcard' => 0,\n            ];\n\n            foreach ($expecteds as $type => $count) {\n                $this->integer(count($components[$type]))->isIdenticalTo(\n                    $count,\n                    sprintf(\n                        'Expected %1$s %2$s, got %3$s of them',\n                        $count,\n                        $type,\n                        count($components[$type])\n                    )\n                );\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => [\n                    [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'devicefirmwares_id' => 104,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'serial' => null,\n                        'otherserial' => null,\n                        'locations_id' => 0,\n                        'states_id' => 0,\n                    ]\n                ],\n                'Item_DeviceMemory' => [],\n                'Item_DeviceHardDrive' => [],\n                'Item_DeviceNetworkCard' => [],\n                'Item_DevicePci' => [],\n                'Item_DevicePowerSupply' => [],\n                'Item_DeviceGeneric' => [],\n                'Item_DeviceSimcard' => [],\n            ];\n\n            foreach ($expecteds as $type => $expected) {\n                $component = array_values($components[$type]);\n               //hack to replace expected fkeys\n                foreach ($expected as $i => &$row) {\n                    foreach (array_keys($row) as $key) {\n                        if (isForeignKeyField($key)) {\n                            $row[$key] = $component[$i][$key];\n                        }\n                    }\n                }\n                $this->array($component)->isIdenticalTo($expected);\n            }\n\n            //ports connections\n            $connections = $DB->request([\n                'FROM'   => \\NetworkPort_NetworkPort::getTable(),\n                'WHERE'  => [\n                    'networkports_id_1' => $all_ports_ids\n                ]\n            ]);\n\n            $this->integer(count($connections))->isIdenticalTo(\n                $stacks[$stack_id]['connections'],\n                sprintf(\n                    '%s connections found on stack %s, %s expected',\n                    count($connections),\n                    $stack_id,\n                    $stacks[$stack_id]['connections']\n                )\n            );\n        }\n\n        $db_ports = $DB->request(['FROM' => \\NetworkPort::getTable()]);\n        $this->integer(count($db_ports))->isIdenticalTo(325);\n\n        $db_neteq_ports = $DB->request(['FROM' => \\NetworkPort::getTable(), 'WHERE' => ['itemtype' => 'NetworkEquipment']]);\n        $this->integer(count($db_neteq_ports))->isIdenticalTo(265);\n\n        $db_connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($db_connections))->isIdenticalTo(26);\n\n        $db_unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($db_unmanageds))->isIdenticalTo(45);\n\n        $db_ips = $DB->request(['FROM' => \\IPAddress::getTable()]);\n        $this->integer(count($db_ips))->isIdenticalTo(150);\n\n        $expected_names = [\n            'san-replication',\n            'leadiance-pub',\n            'san-clients',\n            'default',\n            'prod',\n            'backup',\n            'management',\n            '1060-pub',\n            '1060-priv',\n            'public_servlib',\n            'UGIPS',\n            '0001-pub'\n        ];\n        $db_vlans = $DB->request(['FROM' => \\Vlan::getTable()]);\n        $this->integer(count($db_vlans))->isIdenticalTo(count($expected_names));\n\n        $i = 0;\n        foreach ($db_vlans as $row) {\n            $this->string($row['name'])->isEqualTo($expected_names[$i]);\n            ++$i;\n        }\n\n        $db_vlans_ports = $DB->request(['FROM' => \\NetworkPort_Vlan::getTable()]);\n        $this->integer(count($db_vlans_ports))->isIdenticalTo(219);\n\n        $db_netnames = $DB->request(['FROM' => \\NetworkName::getTable()]);\n        $this->integer(count($db_netnames))->isIdenticalTo(10);\n\n        $expecteds = [\n            [\n                'name' => 'sw1-mgmt-eqnx',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '172.25.1.1',\n            ], [\n                'name' => '3k-1-th2',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '172.28.200.3',\n            ], [\n                'name' => 'sw2-mgmt-eqnx',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '172.25.1.2',\n            ], [\n                'name' => 'n9k-2-pa3(SAL1929KJ27)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '10.1.0.58',\n            ], [\n                'name' => 'n9k-1-pa3(SAL1929KJ2J)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '10.1.0.57',\n            ]\n        ];\n\n        $i = 0;\n       /*foreach ($unmanageds as $unmanaged) {\n         foreach ($expecteds[$i] as $key => $value) {\n            $this->variable($unmanaged[$key])->isEqualTo($value);\n         }\n         ++$i;\n       }*/\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(48);\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(43);\n    }\n\n    public function testImportNetworkEquipmentMultiConnections()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_3.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION['glpi_currenttime'] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('HP-2530-48G-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('2.5')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('HP-2530-48G-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('HP-2530-48G-2020-12-31-11-28-51')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => '2530-48G']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Hewlett-Packard']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n        $locations_id = 0;\n\n        //check created equipments\n        $expected_count = 1;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkEquipment::getTable(),\n            'WHERE'  => ['is_dynamic' => 1]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_count);\n\n        $expected = [\n            'id' => null,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'HP-2530-48G',\n            'ram' => null,\n            'serial' => 'CN5BFP62CP',\n            'otherserial' => null,\n            'contact' => null,\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => null,\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => null,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 0,\n            'uptime' => '(78894038) 9 days, 3:09:00.38',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n\n        foreach ($iterator as $row) {\n            $equipments_id = $row['id'];\n            $expected['id'] = $equipments_id;\n            $equipment = new \\NetworkEquipment();\n            $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n            $expected['date_mod'] = $row['date_mod'];\n            $expected['date_creation'] = $row['date_creation'];\n            $this->array($row)->isIdenticalTo($expected);\n\n            //check network ports\n            $expected_count = 53;\n            $ports_iterator = $DB->request([\n                'FROM'   => \\NetworkPort::getTable(),\n                'WHERE'  => [\n                    'items_id'           => $equipments_id,\n                    'itemtype'           => 'NetworkEquipment',\n                ],\n            ]);\n            $this->integer(count($ports_iterator))->isIdenticalTo(\n                $expected_count,\n                sprintf(\n                    '%s ports found on %s, %s expected',\n                    count($ports_iterator),\n                    $row['name'],\n                    $expected_count\n                )\n            );\n\n            $expecteds = [\n                ($expected_count - 1) => [\n                    'logical_number' => 0,\n                    'name' => 'Management',\n                    'instantiation_type' => 'NetworkPortAggregate',\n                    'mac' => 'b0:5a:da:10:10:80',\n                ],\n            ];\n\n            $ips = [\n                'Management' => [\n                    '192.168.63.30',\n                ]\n            ];\n\n            $i = 0;\n            $netport = new \\NetworkPort();\n            $all_ports_ids = [];\n            foreach ($ports_iterator as $port) {\n                $ports_id = $port['id'];\n                $all_ports_ids[] = $port['id'];\n                $this->boolean($netport->getFromDB($ports_id))->isTrue();\n                $instantiation = $netport->getInstantiation();\n                if ($port['instantiation_type'] === null) {\n                    $this->boolean($instantiation)->isFalse();\n                } else {\n                    $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n                }\n\n                unset($port['id']);\n                unset($port['date_creation']);\n                unset($port['date_mod']);\n                unset($port['comment']);\n\n                if (isset($expecteds[$i])) {\n                    $expected = $expecteds[$i];\n                    $expected = $expected + [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'ifmtu' => 0,\n                        'ifspeed' => 0,\n                        'ifinternalstatus' => null,\n                        'ifconnectionstatus' => 0,\n                        'iflastchange' => null,\n                        'ifinbytes' => 0,\n                        'ifinerrors' => 0,\n                        'ifoutbytes' => 0,\n                        'ifouterrors' => 0,\n                        'ifstatus' => null,\n                        'ifdescr' => null,\n                        'ifalias' => null,\n                        'portduplex' => null,\n                        'trunk' => 0,\n                        'lastup' => null\n                    ];\n\n                    $this->array($port)->isEqualTo($expected);\n                } else {\n                    $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                    $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                    $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                    $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                    $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n                }\n                ++$i;\n\n                //check for ips\n                $ip_iterator = $DB->request([\n                    'SELECT'       => [\n                        \\IPAddress::getTable() . '.name',\n                        \\IPAddress::getTable() . '.version'\n                    ],\n                    'FROM'   => \\IPAddress::getTable(),\n                    'INNER JOIN'   => [\n                        \\NetworkName::getTable()   => [\n                            'ON'  => [\n                                \\IPAddress::getTable()     => 'items_id',\n                                \\NetworkName::getTable()   => 'id', [\n                                    'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                                ]\n                            ]\n                        ]\n                    ],\n                    'WHERE'  => [\n                        \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                        \\NetworkName::getTable() . '.items_id'  => $ports_id\n                    ]\n                ]);\n\n                $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n                if (isset($ips[$port['name']])) {\n                    foreach ($ip_iterator as $ip) {\n                        $this->array($ips[$port['name']])->contains($ip['name']);\n                    }\n                }\n            }\n\n            //check for components\n            $components = [];\n            $allcount = 0;\n            foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n                $link = getItemForItemtype($link_type);\n                $dev_iterator = $DB->request($link->getTableGroupCriteria($equipment));\n                $allcount += count($dev_iterator);\n                $components[$link_type] = [];\n\n                foreach ($dev_iterator as $row) {\n                    $lid = $row['id'];\n                    unset($row['id']);\n                    $components[$link_type][$lid] = $row;\n                }\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => 1,\n                'Item_DeviceMemory' => 0,\n                'Item_DeviceHardDrive' => 0,\n                'Item_DeviceNetworkCard' => 0,\n                'Item_DevicePci' => 0,\n                'Item_DevicePowerSupply' => 0,\n                'Item_DeviceGeneric' => 0,\n                'Item_DeviceSimcard' => 0,\n            ];\n\n            foreach ($expecteds as $type => $count) {\n                $this->integer(count($components[$type]))->isIdenticalTo(\n                    $count,\n                    sprintf(\n                        'Expected %1$s %2$s, got %3$s of them',\n                        $count,\n                        $type,\n                        count($components[$type])\n                    )\n                );\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => [\n                    [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'devicefirmwares_id' => 104,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'serial' => null,\n                        'otherserial' => null,\n                        'locations_id' => 0,\n                        'states_id' => 0,\n                    ]\n                ],\n                'Item_DeviceMemory' => [],\n                'Item_DeviceHardDrive' => [],\n                'Item_DeviceNetworkCard' => [],\n                'Item_DevicePci' => [],\n                'Item_DevicePowerSupply' => [],\n                'Item_DeviceGeneric' => [],\n                'Item_DeviceSimcard' => [],\n            ];\n\n            foreach ($expecteds as $type => $expected) {\n                $component = array_values($components[$type]);\n                //hack to replace expected fkeys\n                foreach ($expected as $i => &$row) {\n                    foreach (array_keys($row) as $key) {\n                        if (isForeignKeyField($key)) {\n                            $row[$key] = $component[$i][$key];\n                        }\n                    }\n                }\n                $this->array($component)->isIdenticalTo($expected);\n            }\n\n            //ports connections\n            $connections = $DB->request([\n                'FROM'   => \\NetworkPort_NetworkPort::getTable(),\n            ]);\n\n            $this->integer(count($connections))->isIdenticalTo(63);\n        }\n\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(63);\n\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(63);\n\n        $expecteds = [\n            [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.52',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.156',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.40',\n            ], [\n                'name' => 'Hewlett Packard',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.55',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.81',\n            ], [\n                'name' => 'Xiamen Yeastar Information Technology Co., Ltd.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.115',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.76',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.97',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.167',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.82',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.112',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.80',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.157',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.87',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.108',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.54',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.88',\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Samsung Electronics Co.,Ltd',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hon Hai Precision Ind. Co.,Ltd.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hon Hai Precision Ind. Co.,Ltd.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Samsung Electronics Co.,Ltd',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Ubiquiti Inc',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hub',\n                'accepted' => 0,\n                'hub' => 1,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'SAMSUNG ELECTRO-MECHANICS(THAILAND)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Ubiquiti Inc',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hub',\n                'accepted' => 0,\n                'hub' => 1,\n                'ip' => null,\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'ASUSTek COMPUTER INC.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.146',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.140',\n            ], [\n                'name' => 'KYOCERA Display Corporation',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Routerboard.com',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Routerboard.com',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Ubiquiti Inc',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hub',\n                'accepted' => 0,\n                'hub' => 1,\n                'ip' => null,\n            ], [\n                'name' => 'Microsoft Corporation',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.51',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.128',\n            ]\n        ];\n\n        $this->integer(count($expecteds))->isIdenticalTo($unmanageds->count());\n\n        $i = 0;\n        foreach ($unmanageds as $unmanaged) {\n            foreach ($expecteds[$i] as $key => $value) {\n                $this->variable($unmanaged[$key])->isEqualTo($value);\n            }\n            ++$i;\n        }\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(61);\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->integer($neteq['items_id'])->isIdenticalTo($equipments_id);\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(60);\n    }\n\n    public function testImportNetworkEquipmentWireless()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_4.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION[\"glpi_currenttime\"] = $date_now;\n        $inventory = $this->doInventory($json);\n\n       //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('CH-GV1-DSI-WLC-INSID-1-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n       //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('CH-GV1-DSI-WLC-INSID-1-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('CH-GV1-DSI-WLC-INSID-1-2020-12-31-11-28-51')\n         //->string['version']->isIdenticalTo('')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n       //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'CT5520']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Cisco']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'MERY']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created equipments\n        $expected_eq_count = 302;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkEquipment::getTable(),\n            'WHERE'  => ['is_dynamic' => 1]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n\n        $expected_eq = [\n            'id' => null,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'CH-GV1-DSI-WLC-INSID-1',\n            'ram' => null,\n            'serial' => 'FCH1946V219',\n            'otherserial' => null,\n            'contact' => null,\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => null,\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => null,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 0,\n            'uptime' => '53 days, 4:19:42.16',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n\n        $first = true;\n        foreach ($iterator as $row) {\n            $equipments_id = $row['id'];\n            $expected_eq['id'] = $equipments_id;\n            $equipment = new \\NetworkEquipment();\n            $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n            $expected_eq['date_mod'] = $row['date_mod'];\n            $expected_eq['date_creation'] = $row['date_creation'];\n            if (!$first) {\n                $expected_eq['name'] = $row['name'];\n                $expected_eq['serial'] = $row['serial'];\n                $expected_eq['locations_id'] = $row['locations_id'];\n                $expected_eq['networkequipmenttypes_id'] = $row['networkequipmenttypes_id'];\n                $expected_eq['networkequipmentmodels_id'] = $row['networkequipmentmodels_id'];\n                $expected_eq['manufacturers_id'] = $row['manufacturers_id'];\n            }\n            $this->array($row)->isIdenticalTo($expected_eq, print_r($row, true) . print_r($expected_eq, true));\n\n           //check network ports\n            $expected_count = ($first ? 4 : 1);\n            $ports_iterator = $DB->request([\n                'FROM'   => \\NetworkPort::getTable(),\n                'WHERE'  => [\n                    'items_id'           => $equipments_id,\n                    'itemtype'           => 'NetworkEquipment',\n                ],\n            ]);\n            $this->integer(count($ports_iterator))->isIdenticalTo(\n                $expected_count,\n                sprintf(\n                    '%s ports found on %s, %s expected',\n                    count($ports_iterator),\n                    $row['name'],\n                    $expected_count\n                )\n            );\n\n            $expecteds = [\n                'Management' => [\n                    'logical_number' => 0,\n                    'name' => 'Management',\n                    'instantiation_type' => 'NetworkPortAggregate',\n                    'mac' => '58:ac:78:59:45:fb',\n                ],\n            ];\n\n            $ips = [\n                'Management' => [\n                    '1.1.1.1',\n                    '10.65.0.184',\n                    '10.65.0.192',\n                    '169.254.0.192',\n                    '192.168.200.116'\n                ]\n            ];\n\n            $i = 0;\n            $netport = new \\NetworkPort();\n            $all_ports_ids = [];\n            foreach ($ports_iterator as $port) {\n                $ports_id = $port['id'];\n                $all_ports_ids[] = $port['id'];\n                $this->boolean($netport->getFromDB($ports_id))->isTrue();\n                $instantiation = $netport->getInstantiation();\n                if ($port['instantiation_type'] === null) {\n                    $this->boolean($instantiation)->isFalse();\n                } else {\n                    $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n                }\n\n                unset($port['id']);\n                unset($port['date_creation']);\n                unset($port['date_mod']);\n                unset($port['comment']);\n\n                if ($port['mac'] == '58:ac:78:59:45:fb') {\n                    $expected = $expecteds['Management'];\n                    $expected = $expected + [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'ifmtu' => 0,\n                        'ifspeed' => 0,\n                        'ifinternalstatus' => null,\n                        'ifconnectionstatus' => 0,\n                        'iflastchange' => null,\n                        'ifinbytes' => 0,\n                        'ifinerrors' => 0,\n                        'ifoutbytes' => 0,\n                        'ifouterrors' => 0,\n                        'ifstatus' => null,\n                        'ifdescr' => null,\n                        'ifalias' => null,\n                        'portduplex' => null,\n                        'trunk' => 0,\n                        'lastup' => null\n                    ];\n\n                    $this->array($port)->isEqualTo($expected);\n                } else {\n                    $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                    $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                   //$this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortAggregate', print_r($port, true));\n                    $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                    $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n                }\n                ++$i;\n\n               //check for ips\n                $ip_iterator = $DB->request([\n                    'SELECT'       => [\n                        \\IPAddress::getTable() . '.name',\n                        \\IPAddress::getTable() . '.version'\n                    ],\n                    'FROM'   => \\IPAddress::getTable(),\n                    'INNER JOIN'   => [\n                        \\NetworkName::getTable()   => [\n                            'ON'  => [\n                                \\IPAddress::getTable()     => 'items_id',\n                                \\NetworkName::getTable()   => 'id', [\n                                    'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                                ]\n                            ]\n                        ]\n                    ],\n                    'WHERE'  => [\n                        \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                        \\NetworkName::getTable() . '.items_id'  => $ports_id\n                    ]\n                ]);\n\n               //$this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? ['one' => 'one']));\n                if ($port['mac'] == '58:ac:78:59:45:fb') {\n                    foreach ($ip_iterator as $ip) {\n                        $this->array($ips[$port['name']])->contains($ip['name']);\n                    }\n                }\n            }\n\n           //check for components\n            $components = [];\n            $allcount = 0;\n            foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n                $link = getItemForItemtype($link_type);\n                $dev_iterator = $DB->request($link->getTableGroupCriteria($equipment));\n                $allcount += count($dev_iterator);\n                $components[$link_type] = [];\n\n                foreach ($dev_iterator as $row) {\n                    $lid = $row['id'];\n                    unset($row['id']);\n                    $components[$link_type][$lid] = $row;\n                }\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => 1,\n                'Item_DeviceMemory' => 0,\n                'Item_DeviceHardDrive' => 0,\n                'Item_DeviceNetworkCard' => 0,\n                'Item_DevicePci' => 0,\n                'Item_DevicePowerSupply' => 0,\n                'Item_DeviceGeneric' => 0,\n                'Item_DeviceSimcard' => 0,\n            ];\n\n            foreach ($expecteds as $type => $count) {\n                $this->integer(count($components[$type]))->isIdenticalTo(\n                    $count,\n                    sprintf(\n                        'Expected %1$s %2$s, got %3$s of them',\n                        $count,\n                        $type,\n                        count($components[$type])\n                    )\n                );\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => [\n                    [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'devicefirmwares_id' => 104,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'serial' => null,\n                        'otherserial' => null,\n                        'locations_id' => 0,\n                        'states_id' => 0,\n                    ]\n                ],\n                'Item_DeviceMemory' => [],\n                'Item_DeviceHardDrive' => [],\n                'Item_DeviceNetworkCard' => [],\n                'Item_DevicePci' => [],\n                'Item_DevicePowerSupply' => [],\n                'Item_DeviceGeneric' => [],\n                'Item_DeviceSimcard' => [],\n            ];\n\n            foreach ($expecteds as $type => $expected) {\n                $component = array_values($components[$type]);\n               //hack to replace expected fkeys\n                foreach ($expected as $i => &$row) {\n                    foreach (array_keys($row) as $key) {\n                        if (isForeignKeyField($key)) {\n                            $row[$key] = $component[$i][$key];\n                        }\n                    }\n                }\n                $this->array($component)->isIdenticalTo($expected);\n            }\n\n            $first = false;\n        }\n\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(2);\n\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(2);\n\n        $expecteds = [\n            [\n                'name' => 'CH-GV2-DSI-SW-BBONE-1(FOX1819GEG6)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.200.6',\n            ], [\n                'name' => 'CH-GV2-DSI-SW-BBONE-2(FOX1819GEG1)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.200.7',\n            ]\n        ];\n\n        $i = 0;\n        foreach ($unmanageds as $unmanaged) {\n            foreach ($expecteds[$i] as $key => $value) {\n                $this->variable($unmanaged[$key])->isEqualTo($value);\n            }\n            ++$i;\n        }\n\n       //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize($expected_eq_count + count($unmanageds));\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(count($unmanageds));\n        foreach ($iterator as $unmanaged) {\n            $this->string($unmanaged['name'])->isIdenticalTo('Global import (by ip+ifdescr)');\n            $this->string($unmanaged['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n    }\n\n    public function testImportNetworkEquipmentWAggregatedPorts()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_5.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION[\"glpi_currenttime\"] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('DGS-3420-52T-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('DGS-3420-52T-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('DGS-3420-52T-2020-12-31-11-28-51')\n         //->string['version']->isIdenticalTo('')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'DGS-3420-52T']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'D-Link']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'WOB Serverraum']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created computer\n        $equipments_id = $inventory->getAgent()->fields['items_id'];\n        $this->integer($equipments_id)->isGreaterThan(0);\n        $equipment = new \\NetworkEquipment();\n        $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n\n        $expected = [\n            'id' => $equipments_id,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'DGS-3420-52T',\n            'ram' => null,\n            'serial' => 'R3843D1000001',\n            'otherserial' => null,\n            'contact' => 'noc@glpi-project.org',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => $equipment->fields['date_mod'],\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => $equipment->fields['date_creation'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 0,\n            'uptime' => '65 days, 20:13:08.93',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n        $this->array($equipment->fields)->isIdenticalTo($expected);\n\n        //check network ports\n        $expected_count = 53;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $equipments_id,\n                'itemtype'           => 'NetworkEquipment',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_count);\n\n        $expecteds = [\n            0 => [\n                'itemtype' => 'NetworkEquipment',\n                'logical_number' => 1,\n                'name' => '1/1',\n                'instantiation_type' => 'NetworkPortAggregate',\n                'mac' => 'ac:f1:df:8e:8e:00',\n                'ifmtu' => 1500,\n                'ifspeed' => 1000000000,\n                'ifinternalstatus' => '1',\n                'iflastchange' => '16 days, 3:10:22.89',\n                'ifstatus' => '1',\n                'ifdescr' => 'D-Link DGS-3420-52T R1.50.B03 Port 1 on Unit 1',\n                'ifinbytes' => 1636476664,\n                'ifoutbytes' => 2829646176,\n                'portduplex' => 3\n            ],\n            ($expected_count - 1) => [\n                'logical_number' => 0,\n                'name' => 'Management',\n                'instantiation_type' => 'NetworkPortAggregate',\n                'mac' => 'ac:f1:df:8e:8e:00',\n            ],\n        ];\n\n        $ips = [\n            'Management' => [\n                '192.168.16.51',\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            if (isset($expecteds[$i])) {\n                $expected = $expecteds[$i];\n                $expected = $expected + [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'ifmtu' => 0,\n                    'ifspeed' => 0,\n                    'ifinternalstatus' => null,\n                    'ifconnectionstatus' => 0,\n                    'iflastchange' => null,\n                    'ifinbytes' => null,\n                    'ifinerrors' => 0,\n                    'ifoutbytes' => 0,\n                    'ifouterrors' => 0,\n                    'ifstatus' => null,\n                    'ifdescr' => null,\n                    'ifalias' => null,\n                    'portduplex' => null,\n                    'trunk' => 0,\n                    'lastup' => null\n                ];\n\n                $this->array($port)->isEqualTo($expected);\n            } else {\n                $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n            }\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                foreach ($ip_iterator as $ip) {\n                    $this->array($ips[$port['name']])->contains($ip['name']);\n                }\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($equipment));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceMemory' => 0,\n            'Item_DeviceHardDrive' => 0,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DevicePci' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo(\n                $count,\n                sprintf(\n                    'Expected %1$s %2$s, got %3$s of them',\n                    $count,\n                    $type,\n                    count($components[$type])\n                )\n            );\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceMemory' => [],\n            'Item_DeviceHardDrive' => [],\n            'Item_DeviceNetworkCard' => [],\n            'Item_DevicePci' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [],\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n           //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //ports connections\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(36);\n\n        //unmanaged equipments\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(36);\n    }\n\n    public function testImportRefusedFromAssetRulesWithNoLog()\n    {\n        $rule = new \\Rule();\n\n        //prepares needed rules id\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer constraint (name)'])\n        )->isTrue();\n        $rules_id_torefuse = $rule->fields['id'];\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import denied'])\n        )->isTrue();\n        $rules_id_refuse = $rule->fields['id'];\n        // update action to refused import with no log\n        $action = new \\RuleAction();\n        $action->getFromDBByCrit([\n            \"rules_id\" => $rules_id_refuse,\n        ]);\n        $action->fields['field'] = '_inventory';\n        $action->fields['value'] = 2;\n        $action->update($action->fields);\n\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import (by name)'])\n        )->isTrue();\n        $rules_id_toaccept = $rule->fields['id'];\n\n        //move rule to refuse computer inventory\n        $rulecollection = new \\RuleImportAssetCollection();\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_torefuse,\n                \\RuleCollection::MOVE_BEFORE\n            )\n        )->isTrue();\n\n        //do inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $inventory = $this->doInventory($json);\n\n        //move rule back to accept computer inventory\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_toaccept,\n                \\RuleCollection::MOVE_AFTER\n            )\n        )->isTrue();\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isIdenticalTo(0);\n\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(0);\n    }\n\n    public function testImportRefusedFromAssetRulesWithLog()\n    {\n        $rule = new \\Rule();\n\n        //prepares needed rules id\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer constraint (name)'])\n        )->isTrue();\n        $rules_id_torefuse = $rule->fields['id'];\n\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import denied'])\n        )->isTrue();\n        $rules_id_refuse = $rule->fields['id'];\n\n        //update ruleAction to refused import with log\n        $ruleaction = new \\RuleAction();\n        $this->boolean($ruleaction->getFromDBByCrit(['rules_id' => $rules_id_refuse]))->isTrue();\n        $this->boolean(\n            $ruleaction->update([\n                'id'    => $ruleaction->fields['id'],\n                'field' => '_ignore_import',\n                'action_type' => 'assign',\n                'value' => 1\n            ])\n        )->isTrue();\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import (by name)'])\n        )->isTrue();\n        $rules_id_toaccept = $rule->fields['id'];\n\n        //move rule to refuse computer inventory\n        $rulecollection = new \\RuleImportAssetCollection();\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_torefuse,\n                \\RuleCollection::MOVE_BEFORE\n            )\n        )->isTrue();\n\n        //do inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $inventory = $this->doInventory($json);\n\n        //move rule back to accept computer inventory\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_toaccept,\n                \\RuleCollection::MOVE_AFTER\n            )\n        )->isTrue();\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isIdenticalTo(0);\n\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $result = $iterator->current();\n        $expected = [\n            'id' => $result['id'],\n            'name' => 'glpixps',\n            'itemtype' => 'Computer',\n            'entities_id' => 0,\n            'ip' => '[\"192.168.1.142\",\"fe80::b283:4fa3:d3f2:96b1\",\"192.168.1.118\",\"fe80::92a4:26c6:99dd:2d60\",\"192.168.122.1\"]',\n            'mac' => '[\"00:e0:4c:68:01:db\",\"44:85:00:2b:90:bc\",\"52:54:00:fa:20:0e\",\"52:54:00:fa:20:0e\"]',\n            'rules_id' => $result['rules_id'],\n            'method' => null,\n            'serial' => '640HP72',\n            'uuid' => '4c4c4544-0034-3010-8048-b6c04f503732',\n            'agents_id' => 0,\n            'date_creation' => $result['date_creation'],\n            'date_mod' => $result['date_mod'],\n            'autoupdatesystems_id' => $result['autoupdatesystems_id']\n        ];\n\n        $this->array($result)->isEqualTo($expected);\n\n        //check no matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(0);\n\n        //test inventory from refused equipment, will be accepted since rules has been reset ;)\n        $refused = new \\RefusedEquipment();\n        $this->boolean($refused->getFromDB($result['id']))->isTrue();\n\n        $inventory_request = new \\Glpi\\Inventory\\Request();\n        $inventory_request->handleContentType('application/json');\n        $contents = file_get_contents($refused->getInventoryFileName());\n        $inventory_request->handleRequest($contents);\n\n        $redirect_url = $refused->handleInventoryRequest($inventory_request);\n        $this->hasSessionMessages(\n            INFO,\n            [\n                'Inventory is successful, refused entry log has been removed.'\n            ]\n        );\n\n        //refused equipment has been removed\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(0);\n\n        //but a linked computer\n        $gagent = new \\Agent();\n        $this->boolean($gagent->getFromDB($agent['id']))->isTrue();\n\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($gagent->fields['items_id']))->isTrue();\n        $this->string($computer->fields['name'])->isIdenticalTo('glpixps');\n\n        //check no matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(3);\n\n        $criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $monitor_criteria = $criteria;\n        $monitor_criteria['WHERE'] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $printer_criteria = $criteria;\n        $printer_criteria['WHERE'] = ['itemtype' => \\Printer::getType()];\n        $iterator = $DB->request($printer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Printer import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $criteria;\n        $computer_criteria['WHERE'] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Computer import (by serial + uuid)');\n        $this->integer($iterator->current()['items_id'])->isIdenticalTo($gagent->fields['items_id']);\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n    }\n\n    public function testImportRefusedFromEntitiesRules()\n    {\n        $this->login();\n\n        $rule = new \\Rule();\n        $input = [\n            'is_active' => 1,\n            'name'      => 'entity refuse rule',\n            'match'     => 'AND',\n            'sub_type'  => \\RuleImportEntity::class,\n            'ranking'   => 1\n        ];\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        // Add criteria\n        $rulecriteria = new \\RuleCriteria();\n        $this->integer(\n            $rulecriteria->add([\n                'rules_id'  => $rules_id,\n                'criteria'  => \"deviceid\",\n                'pattern'   => \"/^glpixps.*/\",\n                'condition' => \\RuleImportEntity::REGEX_MATCH\n            ])\n        )->isGreaterThan(0);\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $this->integer(\n            $ruleaction->add([\n                'rules_id'    => $rules_id,\n                'action_type' => 'assign',\n                'field'       => '_ignore_import',\n                'value'       => 1\n            ])\n        )->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        unset($json->content->bios);\n        unset($json->content->hardware->name);\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isIdenticalTo(0);\n\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $result = $iterator->current();\n        $expected = [\n            'id' => $result['id'],\n            'name' => '',\n            'itemtype' => 'Computer',\n            'entities_id' => 0,\n            'ip' => '[\"192.168.1.142\",\"fe80::b283:4fa3:d3f2:96b1\",\"192.168.1.118\",\"fe80::92a4:26c6:99dd:2d60\",\"192.168.122.1\"]',\n            'mac' => '[\"00:e0:4c:68:01:db\",\"44:85:00:2b:90:bc\",\"52:54:00:fa:20:0e\",\"52:54:00:fa:20:0e\"]',\n            'rules_id' => $result['rules_id'],\n            'method' => null,\n            'serial' => '',\n            'uuid' => '4c4c4544-0034-3010-8048-b6c04f503732',\n            'agents_id' => 0,\n            'date_creation' => $result['date_creation'],\n            'date_mod' => $result['date_mod'],\n            'autoupdatesystems_id' => $result['autoupdatesystems_id']\n        ];\n\n        $this->array($result)->isEqualTo($expected);\n    }\n\n    public function testImportFiles()\n    {\n        $nbcomputers = countElementsInTable(\\Computer::getTable());\n        $nbprinters = countElementsInTable(\\Printer::getTable());\n\n        $json_name = 'computer_1.json';\n        $json_path = self::INV_FIXTURES . $json_name;\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $result = $conf->importFiles([$json_name => $json_path]);\n        $this\n            ->array($result[$json_name])\n            ->then\n            ->boolean($result[$json_name]['success'])\n            ->isTrue()\n            ->then\n            ->object($result[$json_name]['items'][0])\n            ->isInstanceOf('Computer');\n\n        //1 computer and 1 printer has been inventoried\n        $nbcomputers++;\n        $nbprinters++;\n\n        $this->integer($nbcomputers)->isIdenticalTo(countElementsInTable(\\Computer::getTable()));\n        $this->integer($nbprinters)->isIdenticalTo(countElementsInTable(\\Printer::getTable()));\n    }\n\n    /**\n     * @extensions zip\n     */\n    public function testArchive()\n    {\n        $nbcomputers = countElementsInTable(\\Computer::getTable());\n        $nbprinters = countElementsInTable(\\Printer::getTable());\n        $nbnetequps = countElementsInTable(\\NetworkEquipment::getTable());\n\n        $json_paths = [\n            self::INV_FIXTURES . 'computer_1.json',\n            self::INV_FIXTURES . 'networkequipment_1.json',\n            self::INV_FIXTURES . 'printer_1.json',\n        ];\n\n        UnifiedArchive::archiveFiles($json_paths, self::INVENTORY_ARCHIVE_PATH);\n\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $result = $conf->importFiles(['to_inventory.zip' => self::INVENTORY_ARCHIVE_PATH]);\n\n        $this->array($result)->hasSize(3);\n\n        // Expected result for computer_1.json\n        $this\n            ->boolean($result['to_inventory.zip/computer_1.json']['success'])\n            ->isTrue()\n            ->then\n            ->object($result['to_inventory.zip/computer_1.json']['items'][0])\n            ->isInstanceOf('Computer');\n\n        // Expected result for networkequipment_1.json\n        $this\n            ->boolean($result['to_inventory.zip/networkequipment_1.json']['success'])\n            ->isTrue()\n            ->then\n            ->object($result['to_inventory.zip/networkequipment_1.json']['items'][0])\n            ->isInstanceOf('NetworkEquipment');\n\n        // Expected result for printer_1.json\n        $this\n            ->boolean($result['to_inventory.zip/printer_1.json']['success'])\n            ->isTrue()\n            ->then\n            ->object($result['to_inventory.zip/printer_1.json']['items'][0])\n            ->isInstanceOf('Printer');\n\n        //1 computer 2 printers and a network equipment has been inventoried\n        $nbcomputers++;\n        $nbprinters += 2;\n        $nbnetequps++;\n\n        $this->integer($nbcomputers)->isIdenticalTo(countElementsInTable(\\Computer::getTable()));\n        $this->integer($nbprinters)->isIdenticalTo(countElementsInTable(\\Printer::getTable()));\n        $this->integer($nbnetequps)->isIdenticalTo(countElementsInTable(\\NetworkEquipment::getTable()));\n    }\n\n    public function testImportVirtualMachines()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $count_vms = count($json->content->virtualmachines);\n        $this->integer($count_vms)->isIdenticalTo(6);\n\n        $nb_vms = countElementsInTable(\\ComputerVirtualMachine::getTable());\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check we add only one computer\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers);\n        //check created vms\n        $nb_vms += $count_vms;\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        //change config to import vms as computers\n        $this->login();\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $this->boolean($conf->saveConf(['vm_as_computer' => 1]))->isTrue();\n        $this->logout();\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check we add main computer and one computer per vm\n        //one does not have an uuid, so no computer is created.\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + $count_vms - 1);\n        //check created vms\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        //partial inventory: postgres vm has been stopped\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_vms.json'));\n        $this->doInventory($json);\n\n        //check nothing has changed\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + $count_vms - 1);\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        $iterator = $DB->request([\n            'SELECT' => [\n                \\ComputerVirtualMachine::getTable() . '.id',\n                \\ComputerVirtualMachine::getTable() . '.name AS vm_name',\n                \\VirtualMachineState::getTable() . '.name AS state_name',\n            ],\n            'FROM' => \\ComputerVirtualMachine::getTable(),\n            'INNER JOIN' => [\n                \\VirtualMachineState::getTable() => [\n                    'ON' => [\n                        \\VirtualMachineState::getTable() => 'id',\n                        \\ComputerVirtualMachine::getTable() => 'virtualmachinestates_id'\n                    ]\n                ]\n            ],\n            'WHERE' => [\n                \\ComputerVirtualMachine::getTable() . '.name' => 'db',\n                \\VirtualMachineState::getTable() . '.name' => 'off'\n            ]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n    }\n\n    public function testUpdateVirtualMachines()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(GLPI_ROOT . '/tests/fixtures/inventories/lxc-server-1.json'));\n\n        $count_vms = count($json->content->virtualmachines);\n        $this->integer($count_vms)->isIdenticalTo(1);\n\n        $nb_vms = countElementsInTable(\\ComputerVirtualMachine::getTable());\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('lxc-server-2022-08-09-17-49-51')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('lxc-server-2022-08-09-17-49-51')\n            ->string['name']->isIdenticalTo('lxc-server-2022-08-09-17-49-51')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n        $computers_id = $agent['items_id'];\n\n        //check we add only one computer\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers);\n        //check created vms\n        $nb_vms += $count_vms;\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        $cvms = new \\ComputerVirtualMachine();\n        $this->boolean($cvms->getFromDBByCrit(['computers_id' => $computers_id]))->isTrue();\n\n        $this->array($cvms->fields)\n            ->string['name']->isIdenticalTo('glpi-10-rc1')\n            ->integer['vcpu']->isIdenticalTo(2)\n            ->integer['ram']->isIdenticalTo(2048)\n            ->string['uuid']->isIdenticalTo('487dfdb542a4bfb23670b8d4e76d8b6886c2ed35')\n        ;\n\n        //import again, RAM has changed\n        $json = json_decode(file_get_contents(GLPI_ROOT . '/tests/fixtures/inventories/lxc-server-1.json'));\n        $json_vm = $json->content->virtualmachines[0];\n        $json_vm->memory = 4096;\n        $json_vms = [$json_vm];\n        $json->content->virtualmachines = $json_vms;\n\n        $this->doInventory($json);\n\n        $this->boolean($cvms->getFromDBByCrit(['computers_id' => $computers_id]))->isTrue();\n\n        $this->array($cvms->fields)\n            ->string['name']->isIdenticalTo('glpi-10-rc1')\n            ->integer['vcpu']->isIdenticalTo(2)\n            ->integer['ram']->isIdenticalTo(4096)\n            ->string['uuid']->isIdenticalTo('487dfdb542a4bfb23670b8d4e76d8b6886c2ed35')\n        ;\n    }\n\n    public function testRuleRefuseImportVirtualMachines()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $count_vms = count($json->content->virtualmachines);\n        $this->integer($count_vms)->isIdenticalTo(6);\n\n        $nb_vms = countElementsInTable(\\ComputerVirtualMachine::getTable());\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n\n        //change config to import vms as computers\n        $this->login();\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $this->boolean($conf->saveConf(['vm_as_computer' => 1]))->isTrue();\n        $this->logout();\n\n        //IMPORT rule to refuse \"db\" virtual machine\n        $criteria = [\n            [\n                'condition' => 0,\n                'criteria'  => 'itemtype',\n                'pattern'   => 'Computer',\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_IS,\n                'criteria'  => 'name',\n                'pattern'   => 'db'\n            ]\n        ];\n        $action = [\n            'action_type' => 'assign',\n            'field'       => '_ignore_import',\n            'value'       => \\RuleImportAsset::RULE_ACTION_LINK_OR_NO_IMPORT\n        ];\n        $rule = new \\RuleImportAsset();\n        $collection = new \\RuleImportAssetCollection();\n        $rulecriteria = new \\RuleCriteria();\n\n        $input = [\n            'is_active' => 1,\n            'name'      => 'Refuse one VM creation',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleImportAsset',\n        ];\n\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n        $this->boolean($collection->moveRule($rules_id, 0, $collection::MOVE_BEFORE))->isTrue();\n\n        // Add criteria\n        foreach ($criteria as $crit) {\n            $input = [\n                'rules_id'  => $rules_id,\n                'criteria'  => $crit['criteria'],\n                'pattern'   => $crit['pattern'],\n                'condition' => $crit['condition'],\n            ];\n            $this->integer((int)$rulecriteria->add($input))->isGreaterThan(0);\n        }\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $input = [\n            'rules_id'    => $rules_id,\n            'action_type' => $action['action_type'],\n            'field'       => $action['field'],\n            'value'       => $action['value'],\n        ];\n        $this->integer((int)$ruleaction->add($input))->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        global $DB;\n\n        //check created vms\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($count_vms);\n\n        //check we add main computer and one computer per vm\n        //one does not have an uuid, so no computer is created.\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + $count_vms - 2);\n    }\n\n    public function testImportDatabases()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        //partial inventory: add databases\n\n        //IMPORT rule\n        $criteria = [\n            [\n                'condition' => 0,\n                'criteria'  => 'itemtype',\n                'pattern'   => 'DatabaseInstance',\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_EXISTS,\n                'criteria'  => 'name',\n                'pattern'   => '1'\n            ]\n        ];\n        $action = [\n            'action_type' => 'assign',\n            'field'       => '_inventory',\n            'value'       => \\RuleImportAsset::RULE_ACTION_LINK_OR_IMPORT\n        ];\n        $rule = new \\RuleImportAsset();\n        $collection = new \\RuleImportAssetCollection();\n        $rulecriteria = new \\RuleCriteria();\n\n        $input = [\n            'is_active' => 1,\n            'name'      => 'Database server import (by name)',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleImportAsset',\n        ];\n\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n        $this->boolean($collection->moveRule($rules_id, 0, $collection::MOVE_BEFORE))->isTrue();\n\n        // Add criteria\n        foreach ($criteria as $crit) {\n            $input = [\n                'rules_id'  => $rules_id,\n                'criteria'  => $crit['criteria'],\n                'pattern'   => $crit['pattern'],\n                'condition' => $crit['condition'],\n            ];\n            $this->integer((int)$rulecriteria->add($input))->isGreaterThan(0);\n        }\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $input = [\n            'rules_id'    => $rules_id,\n            'action_type' => $action['action_type'],\n            'field'       => $action['field'],\n            'value'       => $action['value'],\n        ];\n        $this->integer((int)$ruleaction->add($input))->isGreaterThan(0);\n\n        //UPDATE rule\n        $criteria = [\n            [\n                'condition' => 0,\n                'criteria'  => 'itemtype',\n                'pattern'   => 'DatabaseInstance',\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_FIND,\n                'criteria'  => 'name',\n                'pattern'   => '1'\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_EXISTS,\n                'criteria' => 'name',\n                'pattern' => '1'\n            ]\n        ];\n        $action = [\n            'action_type' => 'assign',\n            'field'       => '_inventory',\n            'value'       => \\RuleImportAsset::RULE_ACTION_LINK_OR_IMPORT\n        ];\n        $rule = new \\RuleImportAsset();\n        $collection = new \\RuleImportAssetCollection();\n        $rulecriteria = new \\RuleCriteria();\n\n        $input = [\n            'is_active' => 1,\n            'name'      => 'Database server update (by name)',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleImportAsset',\n        ];\n\n        $prev_rules_id = $rules_id;\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n        $this->boolean($collection->moveRule($rules_id, $prev_rules_id, $collection::MOVE_BEFORE))->isTrue();\n\n        // Add criteria\n        foreach ($criteria as $crit) {\n            $input = [\n                'rules_id'  => $rules_id,\n                'criteria'  => $crit['criteria'],\n                'pattern'   => $crit['pattern'],\n                'condition' => $crit['condition'],\n            ];\n            $this->integer((int)$rulecriteria->add($input))->isGreaterThan(0);\n        }\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $input = [\n            'rules_id'    => $rules_id,\n            'action_type' => $action['action_type'],\n            'field'       => $action['field'],\n            'value'       => $action['value'],\n        ];\n        $this->integer((int)$ruleaction->add($input))->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $this->doInventory($json);\n\n        //check nothing has changed\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + 1);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable()))->isIdenticalTo(2);\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_dynamic' => 1]))->isIdenticalTo(2);\n        $this->integer(countElementsInTable(\\Database::getTable()))->isIdenticalTo(3);\n\n        //play an update - nothing should have changed\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $this->doInventory($json);\n\n        //check nothing has changed\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + 1);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable()))->isIdenticalTo(2);\n        $this->integer(countElementsInTable(\\Database::getTable()))->isIdenticalTo(3);\n\n        //keep only mysql\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $mysql = $json->content->databases_services[0];\n        //update version\n        $mysql->version = 'Ver 15.1 Distrib 10.5.10-MariaDB-modified';\n        $dbs = $mysql->databases;\n\n        $db_glpi = &$dbs[0];\n        $db_glpi->size = 55000;\n        $db_glpi->last_backup_date = '2021-06-25 08:52:44';\n\n        $db_new = &$dbs[1];\n        $db_new->name = 'new_database';\n        $db_new->size = 2048;\n\n        $services = [$mysql];\n        $json->content->databases_services = $services;\n\n        $this->doInventory($json);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_deleted' => 0]))->isIdenticalTo(1);\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_deleted' => 1]))->isIdenticalTo(1);\n\n        //ensure database version has been updated\n        $database = new \\DatabaseInstance();\n        $this->boolean($database->getFromDBByCrit(['name' => 'MariaDB']))->isTrue();\n        $this->string($database->fields['version'])->isIdenticalTo('Ver 15.1 Distrib 10.5.10-MariaDB-modified');\n\n        //- ensure existing instances has been updated\n        $databases = $database->getDatabases();\n        $this->array($databases)->hasSize(2);\n        $this->array(array_pop($databases))\n            ->string['name']->isIdenticalTo('new_database')\n            ->integer['size']->isIdenticalTo(2048);\n        $this->array(array_pop($databases))\n            ->string['name']->isIdenticalTo('glpi')\n            ->integer['size']->isIdenticalTo(55000);\n    }\n\n\n    public function testImportPhoneSimCardNoReset()\n    {\n        global $DB;\n\n        $xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <SIMCARDS>\n        <COUNTRY>fr</COUNTRY>\n        <OPERATOR_CODE>2081</OPERATOR_CODE>\n        <OPERATOR_NAME>Orange F</OPERATOR_NAME>\n        <SERIAL>89330126162002971850</SERIAL>\n        <STATE>SIM_STATE_READY</STATE>\n        <LINE_NUMBER></LINE_NUMBER>\n        <SUBSCRIBER_ID>1</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7ne7</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  <ITEMTYPE>Phone</ITEMTYPE>\n</REQUEST>\";\n\n        $this->doInventory($xml, true);\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n\n        //check created computer\n        $phone = new \\Phone();\n        $this->boolean($phone->getFromDB($agent['items_id']))->isTrue();\n\n        //check for components\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_first = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_first))->isIdenticalTo(1);\n\n        //re run inventory to check if item_simcard ID is changed\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'phone_1.json'));\n\n        $this->doInventory($json);\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_second = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_second))->isIdenticalTo(1);\n\n        $this->array($simcards_first)->isIdenticalTo($simcards_second);\n    }\n\n    public function testImportPhoneMultiSimCardNoReset()\n    {\n        global $DB;\n\n        $xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <SIMCARDS>\n        <COUNTRY>fr</COUNTRY>\n        <OPERATOR_CODE>2081</OPERATOR_CODE>\n        <OPERATOR_NAME>Orange F</OPERATOR_NAME>\n        <SERIAL>89330126162002971850</SERIAL>\n        <STATE>SIM_STATE_READY</STATE>\n        <LINE_NUMBER></LINE_NUMBER>\n        <SUBSCRIBER_ID>1</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <SIMCARDS>\n        <COUNTRY>fr</COUNTRY>\n        <OPERATOR_CODE>2081</OPERATOR_CODE>\n        <OPERATOR_NAME>Orange F</OPERATOR_NAME>\n        <SERIAL>23168441316812316511</SERIAL>\n        <STATE>SIM_STATE_READY</STATE>\n        <LINE_NUMBER></LINE_NUMBER>\n        <SUBSCRIBER_ID>2</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7ne7</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  <ITEMTYPE>Phone</ITEMTYPE>\n</REQUEST>\";\n\n        $this->doInventory($xml, true);\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n\n        //check created computer\n        $phone = new \\Phone();\n        $this->boolean($phone->getFromDB($agent['items_id']))->isTrue();\n\n        //check for components\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_first = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_first))->isIdenticalTo(2);\n\n        //re run inventory to check if item_simcard ID is changed\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'phone_1.json'));\n\n        $this->doInventory($json);\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_second = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_second))->isIdenticalTo(2);\n\n        $this->array($simcards_first)->isIdenticalTo($simcards_second);\n    }\n\n\n    public function testImportPhone()\n    {\n        global $DB, $CFG_GLPI;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'phone_1.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('Mi9TPro-T\u00e9l\u00e9phoneM-2019-12-18-14-30-16')\n         ->string['version']->isIdenticalTo('example-app-java')\n         ->string['itemtype']->isIdenticalTo('Phone')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('Mi9TPro-T\u00e9l\u00e9phoneM-2019-12-18-14-30-16')\n         ->string['name']->isIdenticalTo('Mi9TPro-T\u00e9l\u00e9phoneM-2019-12-18-14-30-16')\n         ->string['itemtype']->isIdenticalTo('Phone')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n         ->integer['items_id']->isGreaterThan(0);\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(1);\n\n        $criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => ['itemtype' => \\Phone::getType()]\n        ];\n\n        $iterator = $DB->request($criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Phone import (by serial + uuid)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        //get phone models, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\PhoneModel::getTable(), 'WHERE' => ['name' => 'Mi 9T Pro']])->current();\n        $this->array($cmodels);\n        $computermodels_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\PhoneType::getTable(), 'WHERE' => ['name' => 'Mi 9T Pro']])->current();\n        $this->array($ctypes);\n        $computertypes_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Xiaomi']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        //check created phone\n        $phones_id = $inventory->getAgent()->fields['items_id'];\n        $this->integer($phones_id)->isGreaterThan(0);\n        $phone = new \\Phone();\n        $this->boolean($phone->getFromDB($phones_id))->isTrue();\n\n        $expected = [\n            'id' => $phones_id,\n            'entities_id' => 0,\n            'name' => 'Mi9TPro-T\u00e9l\u00e9phoneM',\n            'date_mod' => $phone->fields['date_mod'],\n            'contact' => 'builder',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'serial' => 'af8d8fcfa6fa4794',\n            'otherserial' => 'release-keys',\n            'locations_id' => 0,\n            'phonetypes_id' => $computertypes_id,\n            'phonemodels_id' => $computermodels_id,\n            'brand' => null,\n            'phonepowersupplies_id' => 0,\n            'number_line' => null,\n            'have_headset' => 0,\n            'have_hp' => 0,\n            'manufacturers_id' => $manufacturers_id,\n            'is_global' => 0,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'uuid' => 'af8d3fcfa6fe4784',\n            'date_creation' => $phone->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $phone->fields['last_inventory_update'],\n        ];\n        $this->array($phone->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($phone);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Q Android 10.0 api 29',\n            'version' => '29',\n            'architecture' => 'arm64-v8a,armeabi-v7a,armeabi',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //remote management\n        $mgmt = new \\Item_RemoteManagement();\n        $iterator = $mgmt->getFromItem($phone);\n        $this->integer(count($iterator))->isIdenticalTo(0);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($phone);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        $expecteds = [\n            [\n                'totalsize' => 3471,\n                'freesize' => 23,\n            ], [\n                'totalsize' => 51913,\n                'freesize' => 33722,\n            ], [\n                'totalsize' => 51913,\n                'freesize' => 33722,\n            ], [\n                'totalsize' => 51913,\n                'freesize' => 33722,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds[$i];\n            $expected = $expected + [\n                'fsname'       => null,\n                'name'         => null,\n                'device'       => null,\n                'mountpoint'   => null,\n                'filesystems_id' => 0,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n                'items_id'     => $phones_id,\n                'itemtype'     => 'Phone',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            ksort($volume);\n            ksort($expected);\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $phones_id,\n                'itemtype'           => 'Phone',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $expecteds = [\n            [\n                'logical_number' => 1,\n                'name' => 'No description found',\n                'instantiation_type' => 'NetworkPortWifi',\n                'mac' => 'e0:dc:ff:ed:09:59',\n                'ifstatus' => '1',\n                'ifinternalstatus' => '1',\n            ]\n        ];\n\n        $ips = [\n            'No description found'  => [\n                'v4'   => '172.28.214.132',\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            $expected = $expecteds[$i];\n            $expected = $expected + [\n                'items_id' => $phones_id,\n                'itemtype' => 'Phone',\n                'entities_id' => 0,\n                'is_recursive' => 0,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'ifmtu' => 0,\n                'ifspeed' => 0,\n                'ifinternalstatus' => null,\n                'ifconnectionstatus' => 0,\n                'iflastchange' => null,\n                'ifinbytes' => 0,\n                'ifinerrors' => 0,\n                'ifoutbytes' => 0,\n                'ifouterrors' => 0,\n                'ifstatus' => null,\n                'ifdescr' => null,\n                'ifalias' => null,\n                'portduplex' => null,\n                'trunk' => 0,\n                'lastup' => null\n            ];\n\n            $this->array($port)->isEqualTo($expected);\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                //FIXME: missing all ipv6 :(\n                $ip = $ip_iterator->current();\n                $this->integer((int)$ip['version'])->isIdenticalTo(4);\n                $this->string($ip['name'])->isIdenticalTo($ips[$port['name']]['v4']);\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($phone));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => 0,\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceProcessor' => 1,\n            'Item_DeviceMemory' => 1,\n            'Item_DeviceHardDrive' => 0,\n            'Item_DeviceNetworkCard' => 1,\n            'Item_DeviceDrive' => 0,\n            'Item_DeviceBattery' => 1,\n            'Item_DeviceGraphicCard' => 0,\n            'Item_DeviceSoundCard' => 0,\n            'Item_DeviceControl' => 0,\n            'Item_DevicePci' => 0,\n            'Item_DeviceCase' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 1,\n            'Item_DeviceSensor' => 48,\n            'Item_DeviceCamera' => 2\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, count($components[$type]) . ' ' . $type);\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => [],\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceProcessor' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'deviceprocessors_id' => 3060400,\n                    'frequency' => 1785,\n                    'serial' => null,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'nbcores' => 8,\n                    'nbthreads' => 8,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DeviceMemory' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicememories_id' => 4,\n                    'size' => 5523,\n                    'serial' => null,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0\n                ],\n            ],\n            'Item_DeviceHardDrive' => [],\n            'Item_DeviceNetworkCard' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicenetworkcards_id' => 66,\n                    'mac' => 'e0:dc:ff:ed:09:59',\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceDrive' => [],\n            'Item_DeviceBattery' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicebatteries_id' => 70,\n                    'manufacturing_date' => null,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                    'real_capacity' => 0\n                ],\n            ],\n            'Item_DeviceGraphicCard' => [],\n            'Item_DeviceSoundCard' => [],\n            'Item_DeviceControl' => [],\n            'Item_DevicePci' => [],\n            'Item_DeviceCase' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicesimcards_id' => 68,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => '8933150319050352521',\n                    'otherserial' => null,\n                    'states_id' => 0,\n                    'locations_id' => 0,\n                    'lines_id' => 0,\n                    'users_id' => 0,\n                    'groups_id' => 0,\n                    'pin' => '',\n                    'pin2' => '',\n                    'puk' => '',\n                    'puk2' => '',\n                    'msin' => '',\n                    'comment' => null,\n                ]\n            ],\n            'Item_DeviceCamera' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicecameras_id' => 4,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                ], [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicecameras_id' => 4,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                ]\n            ]\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n            //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($phone);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        $expecteds = [\n            [\n                'softname' => 'Boutique Amazon',\n                'version' => '18.21.2.100',\n                'dateinstall' => '2019-08-31',\n            ], [\n                'softname' => 'CameraTools',\n                'version' => '1.0',\n                'dateinstall' => '2008-12-31',\n            ], [\n                'softname' => 'Enregistreur d\\'\u00e9cran',\n                'version' => '1.5.9',\n                'dateinstall' => '2008-12-31',\n            ], [\n                'softname' => 'Q Android 10.0 api 29',\n                'version' => '29',\n                'dateinstall' => null,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $soft) {\n            $expected = $expecteds[$i];\n            $this->array([\n                'softname'     => $soft['softname'],\n                'version'      => $soft['version'],\n                'dateinstall'  => $soft['dateinstall']\n            ])->isEqualTo($expected);\n            ++$i;\n        }\n    }\n\n    public function testPartialComputerImport()\n    {\n        global $DB;\n\n        //initial import\n        $this->testImportComputer();\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1_partial_volumes.json'));\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(6)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computer = $this->checkComputer1($agent['items_id']);\n\n        //volumes free sizes\n        $sizes = [\n            11883,\n            15924,\n            603,\n            10740,\n            20872,\n            191\n        ];\n        $this->checkComputer1Volumes($computer, $sizes);\n        $this->checkComputer1Softwares($computer);\n        $this->checkComputer1Batteries($computer);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1_partial_softs.json'));\n        $this->doInventory($json);\n\n        //software versions\n        $versions = [\n            '2.2.8-1.fc31',\n            '31 (Workstation Edition)',\n            '0.20.1-3.fc31',\n            '3.33.0-1.fc31',\n            '3.34.1-1.fc31',\n            '3.12.2-18.fc31',\n            '1.32-2.fc31'\n        ];\n        $this->checkComputer1Softwares($computer, $versions);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1_partial_batteries.json'));\n        $this->doInventory($json);\n\n        //software versions\n        $capacities = [\n            40570,\n        ];\n        $this->checkComputer1Batteries($computer, $capacities);\n    }\n\n    public function testDictionnaryManufacturer()\n    {\n        global $DB;\n\n        //create manufacturer dictionary entry\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n        $collection = new \\RuleDictionnaryManufacturerCollection();\n        $manufacturer = new \\Manufacturer();\n        //$manufacturers_id = $manufacturer->importExternal('Mozilla');\n\n        $rules_id = $rule->add(['name' => 'Set manufacturer',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryManufacturer',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_IS,\n                'pattern' => 'Dell Inc.'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'Dictionary manufacturer'\n            ])\n        )->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        //check we add only one computer\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['name']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $manufacturer = new \\Manufacturer();\n        $this->boolean($manufacturer->getFromDB($computer->fields['manufacturers_id']))->isTrue();\n        $this->string($manufacturer->fields['name'])->isIdenticalTo('Dictionary manufacturer');\n    }\n\n    public function testDictionnaryOperatingSystem()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system = new OperatingSystem();\n        $this->boolean(\n            $operating_system->getFromDB($item_operating->fields['operatingsystems_id'])\n        )->isTrue();\n\n        $this->string($operating_system->fields['name'])->isEqualTo(\"Fedora 31 (Workstation Edition)\");\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystem',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => 'Fedora 31'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'Ubuntu'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system = new OperatingSystem();\n        $this->boolean(\n            $operating_system->getFromDB($item_operating->fields['operatingsystems_id'])\n        )->isTrue();\n\n        $this->string($operating_system->fields['name'])->isEqualTo(\"Ubuntu\");\n    }\n\n    public function testDictionnaryOperatingSystemVersion()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system_version = new OperatingSystemVersion();\n        $this->boolean(\n            $operating_system_version->getFromDB($item_operating->fields['operatingsystemversions_id'])\n        )->isTrue();\n\n        //check if is original value\n        $this->string($operating_system_version->fields['name'])->isEqualTo(\"31 (Workstation Edition)\");\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem version',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystemVersion',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => '31 (Workstation Edition)'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'New version'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system_version = new OperatingSystemVersion();\n        $this->boolean(\n            $operating_system_version->getFromDB($item_operating->fields['operatingsystemversions_id'])\n        )->isTrue();\n\n        //check if is specific value\n        $this->string($operating_system_version->fields['name'])->isEqualTo(\"New version\");\n    }\n\n    public function testDictionnaryOperatingSystemArchitecture()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_arch = new OperatingSystemArchitecture();\n        $this->boolean(\n            $operating_arch->getFromDB($item_operating->fields['operatingsystemarchitectures_id'])\n        )->isTrue();\n        //check if is original value\n        $this->string($operating_arch->fields['name'])->isEqualTo(\"x86_64\");\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem arch',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystemArchitecture',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => 'x86_64'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'New arch'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_arch = new OperatingSystemArchitecture();\n        $this->boolean(\n            $operating_arch->getFromDB($item_operating->fields['operatingsystemarchitectures_id'])\n        )->isTrue();\n\n        //check if is specific value\n        $this->string($operating_arch->fields['name'])->isEqualTo(\"New arch\");\n    }\n\n    public function testDictionnaryOperatingSystemServicePack()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        //No service pack from linux (normal)\n        $this->integer($item_operating->fields['operatingsystemservicepacks_id'])->isEqualto(0);\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem service pack',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystemServicePack',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria on os_name\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'os_name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => 'Fedora 31'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'New service_pack'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_service_pack = new OperatingSystemServicePack();\n        $this->boolean(\n            $operating_service_pack->getFromDB($item_operating->fields['operatingsystemservicepacks_id'])\n        )->isTrue();\n        //check if is specific value\n        $this->string($operating_service_pack->fields['name'])->isEqualTo(\"New service_pack\");\n    }\n\n    public function testImportStatusAfterClean()\n    {\n        global $DB;\n\n        $this->login();\n\n        //create states to use\n        $state = new \\State();\n        $inv_states_id = $state->add([\n            'name' => 'Has been inventoried'\n        ]);\n        $this->integer($inv_states_id)->isGreaterThan(0);\n\n        $cleaned_states_id = $state->add([\n            'name' => 'Has been cleaned'\n        ]);\n        $this->integer($cleaned_states_id)->isGreaterThan(0);\n\n        \\Config::setConfigurationValues(\n            'inventory',\n            [\n                'states_id_default' => $inv_states_id,\n                'stale_agents_delay' => 1,\n                'stale_agents_action' => exportArrayToDB([\n                    \\Glpi\\Inventory\\Conf::STALE_AGENT_ACTION_STATUS\n                ]),\n                'stale_agents_status' => $cleaned_states_id\n            ]\n        );\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $agents_id = $agent['id'];\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        //check states has been set\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($inv_states_id);\n\n        $lockedfield = new \\Lockedfield();\n        $this->boolean($lockedfield->isHandled($computer))->isTrue();\n        $this->array($lockedfield->getLockedValues($computer->getType(), $computers_id))->isEmpty();\n\n        //set agent inventory date in past\n        $invdate = new \\DateTime($agent['last_contact']);\n        $invdate->sub(new \\DateInterval('P1Y'));\n\n        $agent = new \\Agent();\n        $this->boolean(\n            $agent->update([\n                'id' => $agents_id,\n                'last_contact' => $invdate->format('Y-m-d H:i:s')\n            ])\n        )->isTrue();\n\n        //cleanup old agents\n        $name = \\CronTask::launch(-\\CronTask::MODE_INTERNAL, 1, 'Cleanoldagents');\n        $this->string($name)->isIdenticalTo('Cleanoldagents');\n\n        //check computer state has been updated\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($cleaned_states_id);\n\n        $this->boolean($lockedfield->isHandled($computer))->isTrue();\n        $this->array($lockedfield->getLockedValues($computer->getType(), $computers_id))->isEmpty();\n    }\n\n\n    public function testDefaultStatesOnAddWithGlobalLock()\n    {\n        global $DB;\n\n        $this->login();\n\n        //create default states to use\n        $default_states = new \\State();\n        $default_states_id = $default_states->add([\n            'name' => 'Has been inventoried'\n        ]);\n        $this->integer($default_states_id)->isGreaterThan(0);\n\n        $other_state = new \\State();\n        $other_states_id = $other_state->add([\n            'name' => 'Another states'\n        ]);\n        $this->integer($other_states_id)->isGreaterThan(0);\n\n        \\Config::setConfigurationValues(\n            'inventory',\n            [\n                'states_id_default' => $default_states_id,\n            ]\n        );\n\n        //create global  lock on Computer states_id\n        $lock = new Lockedfield();\n        $lock_id = $lock->add([\n            'itemtype' => 'Computer',\n            'items_id' => 0,\n            'field' => 'states_id',\n            'is_global' => 1\n        ]);\n        $this->integer($lock_id)->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $agents_id = $agent['id'];\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        //check default states has been set\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($default_states_id);\n\n        //update states\n        $this->boolean($computer->update(['id' => $computers_id, 'states_id' => $other_states_id]))->isTrue();\n\n        //redo inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //reload computer\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n        //check is same on update\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($other_states_id);\n    }\n\n\n    public function testOtherSerialFromTag()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'use TAG as otherserial',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_tag',\n            'condition' => \\Rule::REGEX_MATCH,\n            'pattern' => '/(.*)/'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'regex_result',\n            'field' => 'otherserial',\n            'value' => '#0'\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $tag = 'a_tag';\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_otherserial_from_tag</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        <TAG>\" . $tag . \"</TAG>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_otherserial_from_tag']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->string($agent['tag'])->isIdenticalTo($tag);\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['otherserial'])->isIdenticalTo($tag);\n\n\n        //redo inventory by updating tag\n        $tag = 'other_tag';\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_otherserial_from_tag</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        <TAG>\" . $tag . \"</TAG>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n\n        //check agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_otherserial_from_tag']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->string($agent['tag'])->isIdenticalTo($tag);\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['otherserial'])->isIdenticalTo($tag);\n    }\n\n    public function testBusinessRuleOnAddComputer()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'Business rule test',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Computer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Computer add\n        $computer = new \\Computer();\n        $computers_id = $computer->add(['name' => 'Test computer', 'entities_id' => 0]);\n        $this->integer($computers_id)->isGreaterThan(0);\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new computer\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnUpdateComputer()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Computer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Computer add\n        $computer = new \\Computer();\n        $computers_id = $computer->add(['name' => 'Test computer', 'entities_id' => 0]);\n        $this->integer($computers_id)->isGreaterThan(0);\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->variable($computer->fields['comment'])->isNull();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo(0);\n\n        //update computer\n        $this->boolean(\n            $computer->update([\n                'id' => $computers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new computer\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->variable($computer->fields['comment'])->isNull();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo(0);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddAndOnUpdateComputer()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Computer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Computer add\n        $computer = new \\Computer();\n        $computers_id = $computer->add(['name' => 'Test computer', 'entities_id' => 0]);\n        $this->integer($computers_id)->isGreaterThan(0);\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //update computer\n        $this->boolean(\n            $computer->update([\n                'id' => $computers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new computer\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n            <REQUEST>\n            <CONTENT>\n              <HARDWARE>\n                <NAME>glpixps</NAME>\n                <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n              </HARDWARE>\n              <BIOS>\n                <MSN>640HP72</MSN>\n              </BIOS>\n              <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n            </CONTENT>\n            <DEVICEID>test_setstatusifinventory</DEVICEID>\n            <QUERY>INVENTORY</QUERY>\n            </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddNetworkEquipment()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'Business rule test',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\NetworkEquipment::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Network Equipment add\n        $neteq = new \\NetworkEquipment();\n        $networkeequipments_id = $neteq->add(['name' => 'Test network equipment', 'entities_id' => 0]);\n        $this->integer($networkeequipments_id)->isGreaterThan(0);\n        $this->boolean($neteq->getFromDB($networkeequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new network equipment\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <DEVICE>\n      <FIRMWARES>\n        <DESCRIPTION>device firmware</DESCRIPTION>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <NAME>UCS 6248UP 48-Port</NAME>\n        <TYPE>device</TYPE>\n        <VERSION>5.0(3)N2(4.02b)</VERSION>\n      </FIRMWARES>\n      <INFO>\n        <COMMENTS>Cisco NX-OS(tm) ucs, Software (ucs-6100-k9-system), Version 5.0(3)N2(4.02b), RELEASE SOFTWARE Copyright (c) 2002-2013 by Cisco Systems, Inc.   Compiled 1/16/2019 18:00:00</COMMENTS>\n        <CONTACT>noc@glpi-project.org</CONTACT>\n        <CPU>4</CPU>\n        <FIRMWARE>5.0(3)N2(4.02b)</FIRMWARE>\n        <ID>0</ID>\n        <LOCATION>paris.pa3</LOCATION>\n        <MAC>8c:60:4f:8d:ae:fc</MAC>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <MODEL>UCS 6248UP 48-Port</MODEL>\n        <NAME>ucs6248up-cluster-pa3-B</NAME>\n        <SERIAL>SSI1912014B</SERIAL>\n        <TYPE>NETWORKING</TYPE>\n        <UPTIME>482 days, 05:42:18.50</UPTIME>\n        <IPS>\n           <IP>127.0.0.1</IP>\n           <IP>10.2.5.10</IP>\n           <IP>192.168.12.5</IP>\n        </IPS>\n      </INFO>\n    </DEVICE>\n    <MODULEVERSION>4.1</MODULEVERSION>\n    <PROCESSNUMBER>1</PROCESSNUMBER>\n  </CONTENT>\n  <DEVICEID>foo</DEVICEID>\n  <QUERY>SNMPQUERY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created networkequipment\n        $neteq = new \\NetworkEquipment();\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        //location is not set by rule on update, but is set from inventory data\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'paris.pa3', true));\n    }\n\n    public function testBusinessRuleOnUpdateNetworkEquipment()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\NetworkEquipment::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Network equipment add\n        $neteq = new \\NetworkEquipment();\n        $networkequipments_id = $neteq->add(['name' => 'Test network equipment', 'entities_id' => 0]);\n        $this->integer($networkequipments_id)->isGreaterThan(0);\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->variable($neteq->fields['comment'])->isNull();\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo(0);\n\n        //update network equipment\n        $this->boolean(\n            $neteq->update([\n                'id' => $networkequipments_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new network equipment\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <DEVICE>\n      <FIRMWARES>\n        <DESCRIPTION>device firmware</DESCRIPTION>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <NAME>UCS 6248UP 48-Port</NAME>\n        <TYPE>device</TYPE>\n        <VERSION>5.0(3)N2(4.02b)</VERSION>\n      </FIRMWARES>\n      <INFO>\n        <COMMENTS>Cisco NX-OS(tm) ucs, Software (ucs-6100-k9-system), Version 5.0(3)N2(4.02b), RELEASE SOFTWARE Copyright (c) 2002-2013 by Cisco Systems, Inc.   Compiled 1/16/2019 18:00:00</COMMENTS>\n        <CONTACT>noc@glpi-project.org</CONTACT>\n        <CPU>4</CPU>\n        <FIRMWARE>5.0(3)N2(4.02b)</FIRMWARE>\n        <ID>0</ID>\n        <LOCATION>paris.pa3</LOCATION>\n        <MAC>8c:60:4f:8d:ae:fc</MAC>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <MODEL>UCS 6248UP 48-Port</MODEL>\n        <NAME>ucs6248up-cluster-pa3-B</NAME>\n        <SERIAL>SSI1912014B</SERIAL>\n        <TYPE>NETWORKING</TYPE>\n        <UPTIME>482 days, 05:42:18.50</UPTIME>\n        <IPS>\n           <IP>127.0.0.1</IP>\n           <IP>10.2.5.10</IP>\n           <IP>192.168.12.5</IP>\n        </IPS>\n      </INFO>\n    </DEVICE>\n    <MODULEVERSION>4.1</MODULEVERSION>\n    <PROCESSNUMBER>1</PROCESSNUMBER>\n  </CONTENT>\n  <DEVICEID>foo</DEVICEID>\n  <QUERY>SNMPQUERY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created network equipment\n        $neteq = new \\NetworkEquipment();\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->variable($neteq->fields['comment'])->isNull();\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'paris.pa3', true));\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddAndOnUpdateNetworkEquipment()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\NetworkEquipment::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Network equipment add\n        $neteq = new \\NetworkEquipment();\n        $networkequipments_id = $neteq->add(['name' => 'Test network equipment', 'entities_id' => 0]);\n        $this->integer($networkequipments_id)->isGreaterThan(0);\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //update network equipment\n        $this->boolean(\n            $neteq->update([\n                'id' => $networkequipments_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new network equipment\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <DEVICE>\n      <FIRMWARES>\n        <DESCRIPTION>device firmware</DESCRIPTION>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <NAME>UCS 6248UP 48-Port</NAME>\n        <TYPE>device</TYPE>\n        <VERSION>5.0(3)N2(4.02b)</VERSION>\n      </FIRMWARES>\n      <INFO>\n        <COMMENTS>Cisco NX-OS(tm) ucs, Software (ucs-6100-k9-system), Version 5.0(3)N2(4.02b), RELEASE SOFTWARE Copyright (c) 2002-2013 by Cisco Systems, Inc.   Compiled 1/16/2019 18:00:00</COMMENTS>\n        <CONTACT>noc@glpi-project.org</CONTACT>\n        <CPU>4</CPU>\n        <FIRMWARE>5.0(3)N2(4.02b)</FIRMWARE>\n        <ID>0</ID>\n        <LOCATION>paris.pa3</LOCATION>\n        <MAC>8c:60:4f:8d:ae:fc</MAC>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <MODEL>UCS 6248UP 48-Port</MODEL>\n        <NAME>ucs6248up-cluster-pa3-B</NAME>\n        <SERIAL>SSI1912014B</SERIAL>\n        <TYPE>NETWORKING</TYPE>\n        <UPTIME>482 days, 05:42:18.50</UPTIME>\n        <IPS>\n           <IP>127.0.0.1</IP>\n           <IP>10.2.5.10</IP>\n           <IP>192.168.12.5</IP>\n        </IPS>\n      </INFO>\n    </DEVICE>\n    <MODULEVERSION>4.1</MODULEVERSION>\n    <PROCESSNUMBER>1</PROCESSNUMBER>\n  </CONTENT>\n  <DEVICEID>foo</DEVICEID>\n  <QUERY>SNMPQUERY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created network equipment\n        $neteq = new \\NetworkEquipment();\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddPrinter()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'Business rule test',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Printer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular printer add\n        $printer = new \\Printer();\n        $printers_id = $printer->add(['name' => 'Test printer', 'entities_id' => 0]);\n        $this->integer($printers_id)->isGreaterThan(0);\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new printer\n        $xml_source = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <REQUEST>\n          <CONTENT>\n            <DEVICE>\n              <INFO>\n                <COMMENTS>RICOH MP C5503 1.38 / RICOH Network Printer C model / RICOH Network Scanner C model / RICOH Network Facsimile C model</COMMENTS>\n                <ID>1</ID>\n                <IPS>\n                  <IP>0.0.0.0</IP>\n                  <IP>10.100.51.207</IP>\n                  <IP>127.0.0.1</IP>\n                </IPS>\n                <LOCATION>Location</LOCATION>\n                <MAC>00:26:73:12:34:56</MAC>\n                <MANUFACTURER>Ricoh</MANUFACTURER>\n                <MEMORY>1</MEMORY>\n                <MODEL>MP C5503</MODEL>\n                <NAME>CLPSF99</NAME>\n                <RAM>1973</RAM>\n                <SERIAL>E1234567890</SERIAL>\n                <TYPE>PRINTER</TYPE>\n                <UPTIME>33 days, 22:19:01.00</UPTIME>\n              </INFO>\n              <PAGECOUNTERS>\n                <TOTAL>1164615</TOTAL>\n              </PAGECOUNTERS>\n            </DEVICE>\n            <MODULEVERSION>5.1</MODULEVERSION>\n            <PROCESSNUMBER>7</PROCESSNUMBER>\n          </CONTENT>\n          <DEVICEID>foo</DEVICEID>\n          <QUERY>SNMPQUERY</QUERY>\n        </REQUEST>\n        ';\n\n        $this->doInventory($xml_source, true);\n\n        //check created printer\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        //location is not set by rule on update, but is set from inventory data\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'Location', true));\n    }\n\n    public function testBusinessRuleOnUpdatePrinter()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Printer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular printer add\n        $printer = new \\Printer();\n        $printers_id = $printer->add(['name' => 'Test printer', 'entities_id' => 0]);\n        $this->integer($printers_id)->isGreaterThan(0);\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->variable($printer->fields['comment'])->isNull();\n        $this->integer($printer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo(0);\n\n        //update printer\n        $this->boolean(\n            $printer->update([\n                'id' => $printers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new printer\n        $xml_source = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <REQUEST>\n          <CONTENT>\n            <DEVICE>\n              <INFO>\n                <COMMENTS>RICOH MP C5503 1.38 / RICOH Network Printer C model / RICOH Network Scanner C model / RICOH Network Facsimile C model</COMMENTS>\n                <ID>1</ID>\n                <IPS>\n                  <IP>0.0.0.0</IP>\n                  <IP>10.100.51.207</IP>\n                  <IP>127.0.0.1</IP>\n                </IPS>\n                <LOCATION>Location</LOCATION>\n                <MAC>00:26:73:12:34:56</MAC>\n                <MANUFACTURER>Ricoh</MANUFACTURER>\n                <MEMORY>1</MEMORY>\n                <MODEL>MP C5503</MODEL>\n                <NAME>CLPSF99</NAME>\n                <RAM>1973</RAM>\n                <SERIAL>E1234567890</SERIAL>\n                <TYPE>PRINTER</TYPE>\n                <UPTIME>33 days, 22:19:01.00</UPTIME>\n              </INFO>\n              <PAGECOUNTERS>\n                <TOTAL>1164615</TOTAL>\n              </PAGECOUNTERS>\n            </DEVICE>\n            <MODULEVERSION>5.1</MODULEVERSION>\n            <PROCESSNUMBER>7</PROCESSNUMBER>\n          </CONTENT>\n          <DEVICEID>foo</DEVICEID>\n          <QUERY>SNMPQUERY</QUERY>\n        </REQUEST>\n        ';\n\n        $this->doInventory($xml_source, true);\n\n        //check created printer\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->variable($printer->fields['comment'])->isNull();\n        $this->integer($printer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'Location', true));\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddAndOnUpdatePrinter()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Printer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular printer add\n        $printer = new \\Printer();\n        $printers_id = $printer->add(['name' => 'Test printer', 'entities_id' => 0]);\n        $this->integer($printers_id)->isGreaterThan(0);\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //update network equipment\n        $this->boolean(\n            $printer->update([\n                'id' => $printers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new printer\n        $xml_source = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <REQUEST>\n          <CONTENT>\n            <DEVICE>\n              <INFO>\n                <COMMENTS>RICOH MP C5503 1.38 / RICOH Network Printer C model / RICOH Network Scanner C model / RICOH Network Facsimile C model</COMMENTS>\n                <ID>1</ID>\n                <IPS>\n                  <IP>0.0.0.0</IP>\n                  <IP>10.100.51.207</IP>\n                  <IP>127.0.0.1</IP>\n                </IPS>\n                <LOCATION>Location</LOCATION>\n                <MAC>00:26:73:12:34:56</MAC>\n                <MANUFACTURER>Ricoh</MANUFACTURER>\n                <MEMORY>1</MEMORY>\n                <MODEL>MP C5503</MODEL>\n                <NAME>CLPSF99</NAME>\n                <RAM>1973</RAM>\n                <SERIAL>E1234567890</SERIAL>\n                <TYPE>PRINTER</TYPE>\n                <UPTIME>33 days, 22:19:01.00</UPTIME>\n              </INFO>\n              <PAGECOUNTERS>\n                <TOTAL>1164615</TOTAL>\n              </PAGECOUNTERS>\n            </DEVICE>\n            <MODULEVERSION>5.1</MODULEVERSION>\n            <PROCESSNUMBER>7</PROCESSNUMBER>\n          </CONTENT>\n          <DEVICEID>foo</DEVICEID>\n          <QUERY>SNMPQUERY</QUERY>\n        </REQUEST>\n        ';\n\n        $this->doInventory($xml_source, true);\n\n        //check created printer\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testStatusIfInventoryOnAdd()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'set status if inventory',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_auto',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => '1'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'test_status_if_inventory']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n    }\n\n    public function testStatusIfInventoryOnUpdate()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'set status if inventory',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_auto',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => '1'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'test_status_if_inventory']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo(0);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n    }\n\n    public function testStatusIfInventoryOnAddUpdate()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'set status if inventory',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_auto',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => '1'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'test_status_if_inventory']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @copyright 2010-2022 by the FusionInventory Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Toolbox\\Sanitizer;\n\nclass RuleImportAsset extends Rule\n{\n    const RULE_ACTION_LINK_OR_IMPORT    = 0;\n    const RULE_ACTION_LINK_OR_NO_IMPORT = 1;\n    const RULE_ACTION_DENIED            = 2;\n\n    const PATTERN_ENTITY_RESTRICT       = 202;\n    const PATTERN_NETWORK_PORT_RESTRICT = 203;\n    const PATTERN_ONLY_CRITERIA_RULE    = 204;\n\n    const LINK_RESULT_DENIED            = 0;\n    const LINK_RESULT_CREATE            = 1;\n    const LINK_RESULT_LINK              = 2;\n\n    public $restrict_matching = Rule::AND_MATCHING;\n    public $can_sort          = true;\n\n    public static $rightname         = 'rule_import';\n\n    /** @var bool */\n    private $restrict_entity = false;\n    /** @var integer */\n    private $found_criteria = 0;\n    /** @var array */\n    private $complex_criteria = [];\n    /** @var boolean */\n    private $only_these_criteria = false;\n    /** @var boolean */\n    private $link_criteria_port = false;\n\n\n    public function getTitle()\n    {\n        $col = new RuleImportAssetCollection();\n        return $col->getTitle();\n    }\n\n\n    public function maxActionsCount()\n    {\n        return 1;\n    }\n\n\n    public function getCriterias()\n    {\n\n        static $criteria = [];\n\n        if (count($criteria)) {\n            return $criteria;\n        }\n\n        $criteria = [\n            'entities_id' => [\n                'table'     => 'glpi_entities',\n                'field'     => 'entities_id',\n                'name'      => __('Target entity for the asset'),\n                'linkfield' => 'entities_id',\n                'type'      => 'dropdown',\n                'is_global'       => false,\n                'allow_condition' => [\n                    Rule::PATTERN_IS,\n                    Rule::PATTERN_IS_NOT,\n                    Rule::PATTERN_CONTAIN,\n                    Rule::PATTERN_NOT_CONTAIN,\n                    Rule::PATTERN_BEGIN,\n                    Rule::PATTERN_END,\n                    Rule::REGEX_MATCH,\n                    Rule::REGEX_NOT_MATCH\n                ],\n            ],\n            'states_id'  => [\n                'table'     => 'glpi_states',\n                'field'     => 'name',\n                'name'      => __('Having the status'),\n                'linkfield' => 'state',\n                'type'      => 'dropdown',\n            //Means that this criterion can only be used in a global search query\n                'is_global' => true,\n                'allow_condition' => [Rule::PATTERN_IS, Rule::PATTERN_IS_NOT]\n            ],\n            'model' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), _n('Model', 'Models', 1)),\n            ],\n            'manufacturer' => [ // Manufacturer as Text to allow text criteria (contains, regex, ...)\n                'name'            => Manufacturer::getTypeName(1)\n            ],\n            'mac' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), __('MAC')),\n            ],\n            'ip' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), __('IP')),\n            ],\n            'ifdescr' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), __('Port description'))\n            ],\n            'ifnumber' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), NetworkPort::getTypename(1), _n('Port number', 'Ports number', 1)),\n            ],\n            'serial' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Serial number')),\n            ],\n            'uuid' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('UUID')),\n            ],\n            'device_id' => [\n                'name'            => sprintf('%s > %s', Agent::getTypeName(1), __('Device_id')),\n            ],\n            'mskey' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Serial of the operating system')),\n            ],\n            'name' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Name')),\n            ],\n            'tag' => [\n                'name'            => sprintf('%s > %s', Agent::getTypeName(1), __('Inventory tag')),\n            ],\n            'osname' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), OperatingSystem::getTypeName(1)),\n            ],\n            'oscomment' => [\n                'name'            => sprintf('%s > %s > %s', _n('Asset', 'Assets', 1), OperatingSystem::getTypeName(1), __('Comments'))\n            ],\n            'itemtype' => [\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), __('Item type')),\n                'type'            => 'dropdown_inventory_itemtype',\n                'is_global'       => false,\n                'allow_condition' => [\n                    Rule::PATTERN_IS,\n                    Rule::PATTERN_IS_NOT,\n                    Rule::PATTERN_EXISTS,\n                    Rule::PATTERN_DOES_NOT_EXISTS,\n                ],\n            ],\n            'domains_id' => [\n                'table'           => 'glpi_domains',\n                'field'           => 'name',\n                'name'            => sprintf('%s > %s', _n('Asset', 'Assets', 1), Domain::getTypeName(1)),\n                'linkfield'       => 'domain',\n                'type'            => 'dropdown',\n                'is_global'       => false,\n            ],\n\n            'linked_item' => [\n                'name'            => _n('Linked asset', 'Linked assets', 1),\n                'type'            => 'yesno',\n                'allow_condition' => [Rule::PATTERN_FIND]\n            ],\n\n            'entityrestrict' => [\n                'name'            => sprintf('%s > %s', __('General'), __('Restrict search in defined entity')),\n                'allow_condition' => [self::PATTERN_ENTITY_RESTRICT],\n            ],\n            'link_criteria_port' => [\n                'name'            => sprintf('%s > %s', __('General'), __('Restrict criteria to same network port')),\n                'allow_condition' => [self::PATTERN_NETWORK_PORT_RESTRICT],\n                'is_global'       => true\n            ],\n            'only_these_criteria' => [\n                'name'            => sprintf('%s > %s', __('General'), __('Only criteria of this rule in data')),\n                'allow_condition' => [self::PATTERN_ONLY_CRITERIA_RULE],\n                'is_global'       => true\n            ],\n            'partial' => [\n                'name'   => __('Is partial'),\n                'type'   => 'yesno',\n                'allow_condition' => [Rule::PATTERN_IS, Rule::PATTERN_IS_NOT]\n            ]\n        ];\n\n        return $criteria;\n    }\n\n\n    public function getActions()\n    {\n        $actions = [\n            '_inventory'   => [\n                'name'   => __('Inventory link'),\n                'type'   => 'inventory_type'\n            ],\n            '_ignore_import'  => [\n                'name'   => __('Refuse import'),\n                'type'   => 'yesonly'\n            ]\n        ];\n        return $actions;\n    }\n\n\n    public static function getRuleActionValues()\n    {\n        return [\n            self::RULE_ACTION_LINK_OR_IMPORT    => __('Link if possible'),\n            self::RULE_ACTION_LINK_OR_NO_IMPORT => __('Link if possible, otherwise imports declined'),\n            self::RULE_ACTION_DENIED            => __('Import denied (no log)')\n        ];\n    }\n\n\n    public function displayAdditionRuleActionValue($value)\n    {\n\n        $values = self::getRuleActionValues();\n        if (isset($values[$value])) {\n            return $values[$value];\n        }\n        return '';\n    }\n\n\n    public function manageSpecificCriteriaValues($criteria, $name, $value)\n    {\n\n        switch ($criteria['type']) {\n            case \"state\":\n                $link_array = [\n                    \"0\" => __('No'),\n                    \"1\" => __('Yes if equal'),\n                    \"2\" => __('Yes if empty')\n                ];\n\n                Dropdown::showFromArray($name, $link_array, ['value' => $value]);\n        }\n        return false;\n    }\n\n\n    /**\n     * Add more criteria\n     *\n     * @param string $criterion\n     * @return array\n     */\n    public static function addMoreCriteria($criterion = '')\n    {\n        switch ($criterion) {\n            case 'entityrestrict':\n                return [self::PATTERN_ENTITY_RESTRICT => __('Yes')];\n            case 'link_criteria_port':\n                return [self::PATTERN_NETWORK_PORT_RESTRICT => __('Yes')];\n            case 'only_these_criteria':\n                return [self::PATTERN_ONLY_CRITERIA_RULE => __('Yes')];\n            default:\n                return [\n                    self::PATTERN_FIND      => __('is already present'),\n                    self::PATTERN_IS_EMPTY  => __('is empty')\n                ];\n        }\n    }\n\n\n    public function getAdditionalCriteriaDisplayPattern($ID, $condition, $pattern)\n    {\n\n        if (\n            $condition == self::PATTERN_IS_EMPTY\n            || $condition == self::PATTERN_ENTITY_RESTRICT\n            || $condition == self::PATTERN_NETWORK_PORT_RESTRICT\n            || $condition == self::PATTERN_ONLY_CRITERIA_RULE\n        ) {\n            return __('Yes');\n        }\n        if ($condition == self::PATTERN_IS || $condition == self::PATTERN_IS_NOT) {\n            $crit = $this->getCriteria($ID);\n            if (\n                isset($crit['type'])\n                 && $crit['type'] == 'dropdown_inventory_itemtype'\n            ) {\n                $array = $this->getItemTypesForRules();\n                return $array[$pattern];\n            }\n        }\n        return false;\n    }\n\n\n    public function displayAdditionalRuleCondition($condition, $criteria, $name, $value, $test = false)\n    {\n\n        if ($test) {\n            return false;\n        }\n\n        switch ($condition) {\n            case self::PATTERN_ENTITY_RESTRICT:\n            case self::PATTERN_NETWORK_PORT_RESTRICT:\n                return true;\n\n            case Rule::PATTERN_FIND:\n            case Rule::PATTERN_IS_EMPTY:\n                Dropdown::showYesNo($name, 0, 0);\n                return true;\n\n            case Rule::PATTERN_EXISTS:\n            case Rule::PATTERN_DOES_NOT_EXISTS:\n                Dropdown::showYesNo($name, 1, 0);\n                return true;\n        }\n\n        return false;\n    }\n\n\n    public function displayAdditionalRuleAction(array $action, $value = '')\n    {\n\n        switch ($action['type']) {\n            case 'inventory_type':\n            case 'fusion_type':\n                Dropdown::showFromArray('value', self::getRuleActionValues());\n                return true;\n        }\n        return false;\n    }\n\n\n    public function getCriteriaByID($ID)\n    {\n\n        $criteria = [];\n        foreach ($this->criterias as $criterion) {\n            if ($ID == $criterion->fields['criteria']) {\n                $criteria[] = $criterion;\n            }\n        }\n        return $criteria;\n    }\n\n    /**\n     * Pre compute criteria to detect rules specificities\n     *\n     * @param array $input Input\n     *\n     * @return boolean\n     */\n    public function preComputeCriteria(array $input): bool\n    {\n        $global_criteria   = $this->getGlobalCriteria();\n\n        foreach ($global_criteria as $criterion) {\n            $criteria = $this->getCriteriaByID($criterion);\n            if (!empty($criteria)) {\n                foreach ($criteria as $crit) {\n                    if (!isset($input[$criterion]) || ($input[$criterion] == '' && $crit->fields['condition'] != self::PATTERN_IS_EMPTY)) {\n                        $definition_criteria = $this->getCriteria($crit->fields['criteria']);\n                        if ($crit->fields[\"criteria\"] == 'link_criteria_port') {\n                            $this->link_criteria_port = true;\n                        } else if ($crit->fields[\"criteria\"] == 'only_these_criteria') {\n                            $this->only_these_criteria = true;\n                        } else if (\n                            isset($definition_criteria['is_global'])\n                             && $definition_criteria['is_global']\n                        ) {\n                         //If a value is missing, then there's a problem !\n                            trigger_error('A value seems missing, criterion was: ' . $criterion, E_USER_WARNING);\n                            return false;\n                        }\n                    } else if (in_array($crit->fields[\"condition\"], [Rule::PATTERN_FIND, Rule::PATTERN_IS_EMPTY])) {\n                        $this->complex_criteria[] = $crit;\n                        ++$this->found_criteria;\n                    } else if ($crit->fields[\"condition\"] == Rule::PATTERN_EXISTS) {\n                        if (\n                            !isset($input[$crit->fields['criteria']])\n                            || empty($input[$crit->fields['criteria']])\n                        ) {\n                            trigger_error('A value seems missing, criterion was: ' . $criterion, E_USER_WARNING);\n                            return false;\n                        }\n                    } else if ($crit->fields[\"criteria\"] == 'itemtype') {\n                        $this->complex_criteria[] = $crit;\n                    } else if ($crit->fields[\"criteria\"] == 'entityrestrict') {\n                        $this->restrict_entity = true;\n                    }\n                }\n            }\n        }\n\n        foreach ($this->getCriteriaByID('tag') as $crit) {\n            $this->complex_criteria[] = $crit;\n        }\n\n        foreach ($this->getCriteriaByID('states_id') as $crit) {\n            $this->complex_criteria[] = $crit;\n        }\n\n       // check only_these_criteria\n        if ($this->only_these_criteria) {\n            $complex_strings = [];\n            foreach ($global_criteria as $criterion) {\n                $criteria = $this->getCriteriaByID($criterion);\n                foreach ($criteria as $crit) {\n                    $complex_strings[] = $crit->fields[\"criteria\"];\n                }\n            }\n            foreach ($input as $key => $crit) {\n                if (\n                    !in_array($key, $complex_strings)\n                    && $key != \"class\"\n                    && !is_object($crit)\n                ) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public function findWithGlobalCriteria($input)\n    {\n        /**\n         * @var array $CFG_GLPI\n         * @var \\DBmysql $DB\n         * @var array $PLUGIN_HOOKS\n         */\n        global $CFG_GLPI, $DB, $PLUGIN_HOOKS;\n\n        $this->complex_criteria = [];\n        $this->restrict_entity = false;\n        $this->only_these_criteria = false;\n        $this->link_criteria_port = false;\n\n        if (!$this->preComputeCriteria($input)) {\n           //logged in place, just exit\n            return false;\n        }\n\n       //No complex criteria\n        if (empty($this->complex_criteria) || $this->found_criteria == 0) {\n            return true;\n        }\n\n       // Get all equipment type\n        $itemtypeselected = [];\n        if (\n            isset($input['itemtype'])\n            && (is_array($input['itemtype']))\n        ) {\n            $itemtypeselected = array_merge($itemtypeselected, $input['itemtype']);\n        } else if (\n            isset($input['itemtype'])\n            && (!empty($input['itemtype']))\n        ) {\n            $itemtypeselected[] = $input['itemtype'];\n        } else {\n            foreach ($CFG_GLPI[\"asset_types\"] as $itemtype) {\n                if (\n                    class_exists($itemtype)\n                    && $itemtype != 'SoftwareLicense'\n                    && $itemtype != 'Certificate'\n                ) {\n                    $itemtypeselected[] = $itemtype;\n                }\n            }\n            $itemtypeselected[] = \"Unmanaged\";\n            $itemtypeselected[] = \"Peripheral\";//used for networkinventory\n        }\n\n        $found = false;\n        foreach ($itemtypeselected as $itemtype) {\n            $item = new $itemtype();\n            $itemtable = $item->getTable();\n\n           //Build the request to check if the asset exists in GLPI\n            $where_entity = $input['entities_id'] ?? [];\n            if (!empty($where_entity) && !is_array($where_entity)) {\n                $where_entity = [$where_entity];\n            }\n\n            $it_criteria = [\n                'SELECT' => [\"$itemtable.id\"],\n                'FROM'   => $itemtable, //to fill\n                'WHERE'  => [] //to fill\n            ];\n\n            if ($this->link_criteria_port) {\n                $this->handleLinkCriteriaPort($item, $it_criteria);\n            } else {\n               // 1 join per criterion\n                $this->handleOneJoinPerCriteria($item, $it_criteria);\n            }\n\n            $this->handleFieldsCriteria($item, $it_criteria, Sanitizer::sanitize($input));\n\n            if (isset($PLUGIN_HOOKS['use_rules'])) {\n                foreach ($PLUGIN_HOOKS['use_rules'] as $plugin => $val) {\n                    if (!Plugin::isPluginActive($plugin)) {\n                        continue;\n                    }\n                    if (is_array($val) && in_array($this->getType(), $val)) {\n                        $params = [\n                            'where_entity' => $where_entity,\n                            'itemtype'     => $itemtype,\n                            'input'        => $input,\n                            'criteria'     => $this->complex_criteria,\n                            'sql_criteria' => $it_criteria,\n                        ];\n                        $sql_results = Plugin::doOneHook(\n                            $plugin,\n                            \"ruleImportAsset_getSqlRestriction\",\n                            $params\n                        );\n\n                        $it_criteria = array_merge_recursive($it_criteria, $sql_results);\n                    }\n                }\n            }\n\n            $result_glpi = $DB->request($it_criteria);\n\n            if (count($result_glpi)) {\n                $this->criterias_results['found_port'] = [];\n                foreach ($result_glpi as $data) {\n                    $this->criterias_results['found_inventories'][$itemtype][] = $data['id'];\n                    foreach ($data as $alias => $value) {\n                        if (\n                            strstr($alias, \"portid\")\n                            && !is_null($value)\n                            && is_numeric($value)\n                            && $value > 0\n                        ) {\n                            $this->criterias_results['found_port'][] = $value;\n                        }\n                    }\n                }\n                $found = true;\n            }\n        }\n\n        if ($found) {\n            return true;\n        }\n\n        if (count($this->actions)) {\n            foreach ($this->actions as $action) {\n                if ($action->fields['field'] == '_inventory' || $action->fields['field'] == '_fusion') {\n                    if ($action->fields[\"value\"] == self::RULE_ACTION_LINK_OR_NO_IMPORT) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * ?\n     *\n     * @param CommonDBTM $item         Item instance\n     * @param array      &$it_criteria Iterator criteria\n     *\n     * @return void\n     */\n    public function handleLinkCriteriaPort(CommonDBTM $item, array &$it_criteria)\n    {\n        $is_ip          = false;\n        $is_networkport = false;\n        $itemtable      = $item->getTable();\n        $itemtype       = $item->getType();\n\n        foreach ($this->complex_criteria as $criteria) {\n            if ($criteria->fields['criteria'] == 'ip') {\n                $is_ip = true;\n                break;\n            } else if ($this->isNetPort($criteria->fields['criteria'])) {\n                $is_networkport = true;\n            }\n        }\n\n        if ($is_ip) {\n            $it_criteria['LEFT JOIN']['glpi_networkports'] = [\n                'ON'  => [\n                    $itemtable           => 'id',\n                    'glpi_networkports'  => 'items_id', [\n                        'AND' => ['glpi_networkports.itemtype' => $itemtype]\n                    ]\n                ]\n            ];\n            $it_criteria['LEFT JOIN']['glpi_networknames'] = [\n                'ON'  => [\n                    'glpi_networkports'  => 'id',\n                    'glpi_networknames'  => 'items_id', [\n                        'AND' => ['glpi_networknames.itemtype' => 'NetworkPort']\n                    ]\n                ]\n            ];\n            $it_criteria['LEFT JOIN']['glpi_ipaddresses'] = [\n                'ON'  => [\n                    'glpi_networknames'  => 'id',\n                    'glpi_ipaddresses'   => 'items_id', [\n                        'AND' => ['glpi_ipaddresses.itemtype' => 'NetworkName']\n                    ]\n                ]\n            ];\n        } else if ($is_networkport) {\n            $it_criteria['LEFT JOIN']['glpi_networkports'] = [\n                'ON'  => [\n                    $itemtable           => 'id',\n                    'glpi_networkports'  => 'items_id', [\n                        'AND' => ['glpi_networkports.itemtype' => $itemtype]\n                    ]\n                ]\n            ];\n        }\n    }\n\n    /**\n     * ?\n     *\n     * @param CommonDBTM $item         Item instance\n     * @param array      &$it_criteria Iterator criteria\n     *\n     * @return void\n     */\n    public function handleOneJoinPerCriteria(CommonDBTM $item, array &$it_criteria)\n    {\n        $itemtable      = $item->getTable();\n        $itemtype       = $item->getType();\n\n        foreach ($this->complex_criteria as $criterion) {\n            if ($criterion->fields['criteria'] == 'ip') {\n                $astable = 'networkports_' . $criterion->fields['criteria'];\n                $it_criteria['LEFT JOIN']['glpi_networkports AS ' . $astable] = [\n                    'ON'  => [\n                        $itemtable  => 'id',\n                        $astable    => 'items_id', [\n                            'AND' => [$astable . '.itemtype' => $itemtype]\n                        ]\n                    ]\n                ];\n                $it_criteria['LEFT JOIN']['glpi_networknames'] = [\n                    'ON'  => [\n                        $astable  => 'id',\n                        'glpi_networknames'  => 'items_id', [\n                            'AND' => ['glpi_networknames.itemtype' => 'NetworkPort']\n                        ]\n                    ]\n                ];\n                $it_criteria['LEFT JOIN']['glpi_ipaddresses'] = [\n                    'ON'  => [\n                        'glpi_networknames'  => 'id',\n                        'glpi_ipaddresses'   => 'items_id', [\n                            'AND' => ['glpi_ipaddresses.itemtype' => 'NetworkName']\n                        ]\n                    ]\n                ];\n            } else if ($this->isNetPort($criterion->fields['criteria'])) {\n                $astable = 'networkports_' . $criterion->fields['criteria'];\n                $it_criteria['LEFT JOIN']['glpi_networkports AS ' . $astable] = [\n                    'ON'  => [\n                        $itemtable  => 'id',\n                        $astable    => 'items_id', [\n                            'AND' => [$astable . '.itemtype' => $itemtype]\n                        ]\n                    ]\n                ];\n            }\n        }\n    }\n\n    /**\n     * Handle fields criteria\n     *\n     * @param CommonDBTM $item         Item instance\n     * @param array      &$it_criteria Iterator criteria\n     * @param array      $input        Input\n     *\n     * @return void\n     */\n    public function handleFieldsCriteria(CommonDBTM $item, &$it_criteria, $input)\n    {\n        $itemtable      = $item->getTable();\n        $itemtype       = $item->getType();\n\n        foreach ($this->complex_criteria as $criterion) {\n            switch ($criterion->fields['criteria']) {\n                case 'name':\n                    if ($criterion->fields['condition'] == Rule::PATTERN_IS_EMPTY) {\n                        $it_criteria['WHERE']['OR'] = [\n                            [\"$itemtable.name\" => ''],\n                            [\"$itemtable.name\"   => null]\n                        ];\n                    } else {\n                        $it_criteria['WHERE'][] = [\"$itemtable.name\" => $input['name']];\n                    }\n                    break;\n\n                case 'mac':\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = 'networkports_' . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n\n                    if (!is_array($input['mac'])) {\n                        $input['mac'] = [$input['mac']];\n                    }\n                    $it_criteria['WHERE'][] = [\n                        $ntable . '.mac' => $input['mac']\n                    ];\n                    break;\n\n                case 'ip':\n                    if (!is_array($input['ip'])) {\n                        $input['ip'] = [$input['ip']];\n                    }\n\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = \"networkports_\" . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else if (!in_array('glpi_networkports.id AS portid', $it_criteria['SELECT'])) {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n\n                    $it_criteria['WHERE'][] = ['glpi_ipaddresses.name' => $input['ip']];\n                    break;\n\n                case 'ifdescr':\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = \"networkports_\" . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else if (!in_array('glpi_networkports.id AS portid', $it_criteria['SELECT'])) {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n\n                    $it_criteria['WHERE'][] = [$ntable . '.ifdescr' => $input['ifdescr']];\n                    break;\n\n                case 'ifnumber':\n                    $ntable = 'glpi_networkports';\n                    if (!$this->link_criteria_port) {\n                        $ntable = \"networkports_\" . $criterion->fields['criteria'];\n                        $it_criteria['SELECT'][] = $ntable . \".id AS portid_\" . $criterion->fields['criteria'];\n                    } else if (!in_array('glpi_networkports.id AS portid', $it_criteria['SELECT'])) {\n                        $it_criteria['SELECT'][] = 'glpi_networkports.id AS portid';\n                    }\n                    $it_criteria['WHERE'][] = [$ntable . '.logical_number' => $input['ifnumber']];\n                    break;\n\n                case 'tag':\n                    if (isset($input['tag']) && isset($input['deviceid'])) {\n                        $it_criteria['LEFT JOIN']['glpi_agents'] = [\n                            'ON'  => [\n                                'glpi_agents'  => 'items_id',\n                                $itemtable     => 'id'\n                            ]\n                        ];\n                        $it_criteria['WHERE'][] = [\n                            'glpi_agents.deviceid' => $input['deviceid'],\n                            'glpi_agents.tag' => $input['tag']\n                        ];\n                    }\n                    break;\n\n                case 'serial':\n                    $serial = $input['serial'];\n                    $conf = new Glpi\\Inventory\\Conf();\n\n                    if (\n                        isset($input['itemtype'])\n                        && $input['itemtype'] == 'Monitor'\n                        && $conf->import_monitor_on_partial_sn == true\n                        && strlen($input[\"serial\"]) >= 4\n                    ) {\n                        $serial = ['LIKE', '%' . $input['serial'] . '%'];\n                    }\n\n                    $it_criteria['WHERE'][] = [\"$itemtable.serial\" => $serial];\n                    break;\n\n                case 'otherserial':\n                    if ($criterion->fields['condition'] == self::PATTERN_IS_EMPTY) {\n                        $it_criteria['WHERE'][] = [\n                            'OR' => [\n                                [\"$itemtable.otherserial\" => ''],\n                                [\"$itemtable.otherserial\" => null]\n                            ]\n                        ];\n                    } else {\n                        $it_criteria['WHERE'][] = [\"$itemtable.otherserial\" => $input['otherserial']];\n                    }\n                    break;\n\n                case 'model':\n                    $modelclass = $itemtype . 'Model';\n                    $options    = ['manufacturer' => addslashes($input['manufacturer'])];\n                    $mid        = Dropdown::importExternal(\n                        $modelclass,\n                        addslashes($input['model']),\n                        -1,\n                        $options,\n                        '',\n                        false\n                    );\n                    $it_criteria['WHERE'][] = [$itemtable . '.' . $modelclass::getForeignKeyField() => $mid];\n                    break;\n\n                case 'manufacturer':\n                    $mid = Dropdown::importExternal(\n                        'Manufacturer',\n                        addslashes($input['manufacturer']),\n                        -1,\n                        [],\n                        '',\n                        false\n                    );\n                    $it_criteria['WHERE'][] = [\"$itemtable.manufacturers_id\" => $mid];\n                    break;\n\n                case 'states_id':\n                    $condition = [\"$itemtable.states_id\" => $criterion->fields['pattern']];\n                    if ($criterion->fields['condition'] == Rule::PATTERN_IS) {\n                        $it_criteria['WHERE'][] = $condition;\n                    } else {\n                        $it_criteria['WHERE'][] = ['NOT' => $condition];\n                    }\n                    break;\n\n                case 'uuid':\n                    if ($criterion->fields['condition'] == self::PATTERN_IS_EMPTY) {\n                        $it_criteria['WHERE'][] = [\n                            'OR' => [\n                                [\"$itemtable.uuid\" => ''],\n                                [\"$itemtable.uuid\" => null]\n                            ]\n                        ];\n                    } else {\n                        $it_criteria['WHERE'][] = [\"$itemtable.uuid\" => $input['uuid']];\n                    }\n                    break;\n\n                case 'device_id':\n                    $it_criteria['LEFT JOIN']['glpi_agents'] = [\n                        'ON'  => [\n                            'glpi_agents'  => 'items_id',\n                            $itemtable     => 'id'\n                        ]\n                    ];\n                    $it_criteria['WHERE'][] = [\n                        'glpi_agents.device_id' => $input['device_id']\n                    ];\n                    break;\n\n                case 'domain':\n                    $it_criteria['LEFT JOIN']['glpi_domains'] = [\n                        'ON'  => [\n                            'glpi_domains' => 'id',\n                            $itemtable     => 'domains_id'\n                        ]\n                    ];\n                    $it_criteria['WHERE'][] = [\n                        'glpi_domains.name'  => $input['domains_id']\n                    ];\n                    break;\n\n                case 'linked_item':\n                    $it_criteria['WHERE'][] = [\n                        'itemtype' => $input['linked_item']['itemtype'],\n                        'items_id' => $input['linked_item']['items_id']\n                    ];\n                    break;\n            }\n        }\n    }\n\n    public function executeActions($output, $params, array $input = [])\n    {\n        $class = $params['class'] ?? null;\n        $rules_id = $this->fields['id'];\n        $output['rules_id'] = $rules_id;\n\n        $rulesmatched = new RuleMatchedLog();\n        $inputrulelog = [\n            'date'      => date('Y-m-d H:i:s'),\n            'rules_id'  => $rules_id\n        ];\n\n        if ($class && method_exists($class, 'getAgent') && $class->getAgent()) {\n            $inputrulelog['agents_id'] = $class->getAgent()->fields['id'];\n        }\n\n        if (!isset($params['return'])) {\n            $inputrulelog['method'] = 'inventory'; //$class->getMethod();\n        }\n\n        if (count($this->actions)) {\n            foreach ($this->actions as $action) {\n                if ($action->fields[\"value\"] == self::RULE_ACTION_DENIED) {\n                    $output['action'] = self::LINK_RESULT_DENIED;\n                    return $output;\n                }\n\n                if ($action->fields['field'] == '_ignore_import') {\n                    $output['action'] = self::LINK_RESULT_CREATE;\n                    return $output;\n                }\n\n                if ($action->fields['field'] != '_inventory' && $action->fields['field'] != '_fusion') {\n                    if (count($this->criterias)) {\n                        foreach ($this->criterias as $criterion) {\n                            if ($criterion->fields['criteria'] == 'itemtype' && !is_numeric($criterion->fields['pattern'])) {\n                                $itemtype = $criterion->fields['pattern'];\n                                if ($class && method_exists($class, 'rulepassed')) {\n                                    if (!isset($params['return'])) {\n                                          $class->rulepassed(\"0\", $itemtype, $rules_id);\n                                    }\n                                    $output['found_inventories'] = [0, $itemtype, $rules_id];\n                                } else {\n                                    $output['action'] = self::LINK_RESULT_CREATE;\n                                }\n                                return $output;\n                            }\n                        }\n                    }\n\n                    $back_class = Unmanaged::class;\n                    if (is_a($class, \\Glpi\\Inventory\\Asset\\MainAsset::class)) {\n                        $back_class = $class->getItemtype();\n                    }\n                    if ($class && !isset($params['return'])) {\n                        $class->rulepassed(\"0\", $back_class, $rules_id);\n                    }\n                    $output['found_inventories'] = [0, $back_class, $rules_id];\n                    return $output;\n                }\n\n                if (\n                    $action->fields[\"value\"] == self::RULE_ACTION_LINK_OR_IMPORT\n                    || $action->fields[\"value\"] == self::RULE_ACTION_LINK_OR_NO_IMPORT\n                ) {\n                    if (isset($this->criterias_results['found_inventories'])) {\n                        foreach ($this->criterias_results['found_inventories'] as $itemtype => $inventory) {\n                             $items_id = current($inventory);\n                             $output['found_inventories'] = [$items_id, $itemtype, $rules_id];\n                            if (!isset($params['return'])) {\n                                if ($class) {\n                                    $class->rulepassed($items_id, $itemtype, $rules_id, $this->criterias_results['found_port']);\n                                } else {\n                                    $inputrulelog = $inputrulelog + [\n                                        'items_id'  => $items_id,\n                                        'itemtype'  => $itemtype\n                                    ];\n                                    $rulesmatched->add($inputrulelog);\n                                    $rulesmatched->cleanOlddata($items_id, $itemtype);\n                                }\n                            }\n                            return $output;\n                        }\n                    } else if ($action->fields[\"value\"] != self::RULE_ACTION_LINK_OR_NO_IMPORT) {\n                       // Import into new equipment\n                        if (count($this->criterias)) {\n                            foreach ($this->criterias as $criterion) {\n                                if ($criterion->fields['criteria'] == 'itemtype' && !is_numeric($criterion->fields['pattern'])) {\n                                    $itemtype = $criterion->fields['pattern'];\n                                    if ($class && !isset($params['return'])) {\n                                         $class->rulepassed(\"0\", $itemtype, $rules_id);\n                                    }\n                                    $output['found_inventories'] = [0, $itemtype, $rules_id];\n                                    return $output;\n                                }\n                            }\n                        }\n\n                        $back_class = Unmanaged::class;\n                        if (is_a($class, \\Glpi\\Inventory\\Asset\\MainAsset::class)) {\n                            $back_class = $class->getItemtype();\n                        }\n                        if ($class && !isset($params['return'])) {\n                            $class->rulepassed(\"0\", $back_class, $rules_id);\n                        }\n                        $output['found_inventories'] = [0, $back_class, $rules_id];\n                        return $output;\n                    }\n                }\n            }\n        }\n        return $output;\n    }\n\n\n    public function showSpecificCriteriasForPreview($fields)\n    {\n\n        $entity_as_criterion = false;\n        foreach ($this->criterias as $criterion) {\n            if ($criterion->fields['criteria'] == 'entities_id') {\n                $entity_as_criterion = true;\n                break;\n            }\n        }\n        if (!$entity_as_criterion) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . Entity::getTypeName(1) . \"</td>\";\n            echo \"<td>\";\n            Dropdown::show('Entity');\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th colspan='2'>\" . __('Use values found from an already refused equipment') . \"</th>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . RefusedEquipment::getTypeName(1) . \"</td>\";\n        echo \"<td>\";\n        Dropdown::show(RefusedEquipment::getType(), ['value' => ($fields['refusedequipments_id'] ?? null)]);\n        echo \"</td></tr>\";\n    }\n\n    /**\n     * Get itemtypes have state_type and unmanaged devices\n     *\n     * @global array $CFG_GLPI\n     * @return array\n     */\n    public static function getItemTypesForRules()\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n        $types = [];\n        foreach ($CFG_GLPI[\"state_types\"] as $itemtype) {\n            if (class_exists($itemtype)) {\n                $item = new $itemtype();\n                $types[$itemtype] = $item->getTypeName();\n            }\n        }\n        $types[\"\"] = __('No itemtype defined');\n        ksort($types);\n        return $types;\n    }\n\n    public function addSpecificParamsForPreview($params)\n    {\n        $class = new class {\n            public function rulepassed($items_id, $itemtype, $rules_id)\n            {\n            }\n        };\n        return $params + ['class' => $class];\n    }\n\n    /**\n     * Get criteria related to network ports\n     *\n     * @return array\n     */\n    public function getNetportCriteria(): array\n    {\n        return [\n            'mac',\n            'ip',\n            'ifnumber',\n            'ifdescr'\n        ];\n    }\n\n    /**\n     * Get global criteria\n     *\n     * @return array\n     */\n    public function getGlobalCriteria(): array\n    {\n        /** @var array $PLUGIN_HOOKS */\n        global $PLUGIN_HOOKS;\n\n        $criteria = array_merge([\n            'manufacturer',\n            'model',\n            'name',\n            'serial',\n            'otherserial',\n            'uuid',\n            'device_id',\n            'itemtype',\n            'domains_id',\n            'linked_item',\n            'entity_restrict',\n            'link_criteria_port',\n            'only_these_criteria'\n        ], $this->getNetportCriteria());\n\n       //Add plugin global criteria\n        if (isset($PLUGIN_HOOKS['use_rules'])) {\n            foreach ($PLUGIN_HOOKS['use_rules'] as $plugin => $val) {\n                if (!Plugin::isPluginActive($plugin)) {\n                    continue;\n                }\n                if (is_array($val) && in_array($this->getType(), $val)) {\n                    $criteria = Plugin::doOneHook(\n                        $plugin,\n                        \"ruleImportAsset_addGlobalCriteria\",\n                        $criteria\n                    );\n                }\n            }\n        }\n\n        return $criteria;\n    }\n\n    /**\n     * Check if criterion is related to network ports\n     *\n     * @param string $criterion Criterion to check\n     *\n     * @return boolean\n     */\n    public function isNetPort($criterion): bool\n    {\n        return in_array($criterion, $this->getNetportCriteria());\n    }\n\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'id':\n                $rule = new static();\n                $rule->getFromDB($values['id']);\n                return $rule->getLink();\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n        switch ($field) {\n            case 'id':\n                $options['display'] = false;\n                return Rule::dropdown(\n                    [\n                        'sub_type' => static::class,\n                        'display' => false,\n                        'name' => $name\n                    ] + $options\n                );\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units\\Glpi\\Inventory\\Asset;\n\ninclude_once __DIR__ . '/../../../../abstracts/AbstractInventoryAsset.php';\n\n/* Test for inc/inventory/asset/firmware.class.php */\n\nclass Bios extends AbstractInventoryAsset\n{\n    protected function assetProvider(): array\n    {\n        return [\n            [\n                'xml' => \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <BIOS>\n      <ASSETTAG />  <BDATE>06/02/2016</BDATE>\n      <BMANUFACTURER>Dell Inc.</BMANUFACTURER>\n      <BVERSION>1.4.3</BVERSION>\n      <MMANUFACTURER>Dell Inc.</MMANUFACTURER>\n      <MMODEL>07TYC2</MMODEL>\n      <MSN>/640HP72/CN129636460078/</MSN>\n      <SKUNUMBER>0704</SKUNUMBER>\n      <SMANUFACTURER>Dell Inc.</SMANUFACTURER>\n      <SMODEL>XPS 13 9350</SMODEL>\n      <SSN>640HP72</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>glpixps.teclib.infra-2018-10-03-08-42-36</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  </REQUEST>\",\n                'expected'  => '{\"bdate\": \"2016-02-06\", \"bmanufacturer\": \"Dell Inc.\", \"bversion\": \"1.4.3\", \"mmanufacturer\": \"Dell Inc.\", \"mmodel\": \"07TYC2\", \"msn\": \"/640HP72/CN129636460078/\", \"skunumber\": \"0704\", \"smanufacturer\": \"Dell Inc.\", \"smodel\": \"XPS 13 9350\", \"ssn\": \"640HP72\", \"date\": \"2016-02-06\", \"version\": \"1.4.3\", \"manufacturers_id\": \"Dell Inc.\", \"designation\": \"Dell Inc. BIOS\", \"devicefirmwaretypes_id\": \"BIOS\"}'\n            ], [\n                'xml' => \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <BIOS>\n      <BVERSION>IM51.0090.B09</BVERSION>\n      <SMANUFACTURER>Apple Computer, Inc.</SMANUFACTURER>\n      <SMODEL>iMac5,1</SMODEL>\n      <SSN>W87051UGVUV</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>glpixps.teclib.infra-2018-10-03-08-42-36</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  </REQUEST>\",\n                'expected'  => '{\"bversion\": \"IM51.0090.B09\", \"smanufacturer\": \"Apple Computer, Inc.\", \"smodel\": \"iMac5,1\", \"ssn\": \"W87051UGVUV\", \"version\": \"IM51.0090.B09\", \"designation\": \" BIOS\", \"devicefirmwaretypes_id\": \"BIOS\"}'\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider assetProvider\n     */\n    public function testPrepare($xml, $expected)\n    {\n        $converter = new \\Glpi\\Inventory\\Converter();\n        $data = $converter->convert($xml);\n        $json = json_decode($data);\n\n        $computer = getItemByTypeName('Computer', '_test_pc01');\n        $asset = new \\Glpi\\Inventory\\Asset\\Bios($computer, (array)$json->content->bios);\n        $asset->setExtraData((array)$json->content);\n        $result = $asset->prepare();\n        $this->object($result[0])->isEqualTo(json_decode($expected));\n    }\n\n    public function testHandle()\n    {\n        $computer = getItemByTypeName('Computer', '_test_pc01');\n\n       //first, check there are no controller linked to this computer\n        $idf = new \\Item_DeviceFirmware();\n        $this->boolean($idf->getFromDbByCrit(['items_id' => $computer->fields['id'], 'itemtype' => 'Computer']))\n           ->isFalse('A firmware is already linked to computer!');\n\n       //convert data\n        $expected = $this->assetProvider()[0];\n\n        $converter = new \\Glpi\\Inventory\\Converter();\n        $data = $converter->convert($expected['xml']);\n        $json = json_decode($data);\n\n        $computer = getItemByTypeName('Computer', '_test_pc01');\n        $asset = new \\Glpi\\Inventory\\Asset\\Bios($computer, (array)$json->content->bios);\n        $asset->setExtraData((array)$json->content);\n        $result = $asset->prepare();\n        $this->object($result[0])->isEqualTo(json_decode($expected['expected']));\n\n       //handle\n        $asset->handleLinks();\n        $asset->handle();\n        $this->boolean($idf->getFromDbByCrit(['items_id' => $computer->fields['id'], 'itemtype' => 'Computer']))\n           ->isTrue('Firmware has not been linked to computer :(');\n    }\n\n    public function testInventoryUpdate()\n    {\n        $computer = new \\Computer();\n        $device_bios = new \\DeviceFirmware();\n        $item_bios = new \\Item_DeviceFirmware();\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7'ne7</SSN>\n      <BMANUFACTURER>Dell Inc.</BMANUFACTURER>\n      <BVERSION>1.4.3</BVERSION>\n      <MMANUFACTURER>Dell Inc.</MMANUFACTURER>\n      <MMODEL>07TYC2</MMODEL>\n      <MSN>/640HP72/CN129636460078/</MSN>\n      <SKUNUMBER>0704</SKUNUMBER>\n      <SMANUFACTURER>Dell Inc.</SMANUFACTURER>\n      <SMODEL>XPS 13 9350</SMODEL>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n</REQUEST>\";\n\n        $type = new \\DeviceFirmwareType();\n        $type->getFromDBByCrit([\n            'name' => 'BIOS'\n        ]);\n        $types_id = $type->getID();\n\n        $manufacturer = new \\Manufacturer();\n        $manufacturers_id = $manufacturer->add([\n            'name' => 'Dell Inc.'\n        ]);\n        $this->integer($manufacturers_id)->isGreaterThan(0);\n\n        //create manually a computer, with a bios\n        $computers_id = $computer->add([\n            'name'   => 'pc002',\n            'serial' => addslashes(\"ggheb7'ne7\"),\n            'entities_id' => 0\n        ]);\n        $this->integer($computers_id)->isGreaterThan(0);\n\n        $bios_id = $device_bios->add([\n            'designation' => 'Dell Inc. BIOS',\n            'devicefirmwaretypes_id' => $types_id,\n            'manufacturers_id' => $manufacturers_id,\n            'version' => '1.4.3'\n        ]);\n\n        $item_bios_id = $item_bios->add([\n            'items_id' => $computers_id,\n            'itemtype' => 'Computer',\n            'devicefirmwares_id' => $bios_id\n        ]);\n        $this->integer($item_bios_id)->isGreaterThan(0);\n\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n        foreach ($firmwares as $firmware) {\n            $this->variable($firmware['is_dynamic'])->isEqualTo(0);\n        }\n\n        //computer inventory knows bios\n        $this->doInventory($xml_source, true);\n\n        //we still have 1 bios linked to the computer\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //bios present in the inventory source is now dynamic\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id, 'is_dynamic' => 1]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //Redo inventory, but with modified firmware => will create a new one\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7'ne7</SSN>\n      <BMANUFACTURER>Dell Inc.</BMANUFACTURER>\n      <BVERSION>1.4.4</BVERSION>\n      <MMANUFACTURER>Dell Inc.</MMANUFACTURER>\n      <MMODEL>07TYC2</MMODEL>\n      <MSN>/640HP72/CN129636460078/</MSN>\n      <SKUNUMBER>0704</SKUNUMBER>\n      <SMANUFACTURER>Dell Inc.</SMANUFACTURER>\n      <SMODEL>XPS 13 9350</SMODEL>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //we still have one firmware\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //bios present in the inventory source is still dynamic\n        $firmwares = $item_bios->find(['itemtype' => 'Computer', 'items_id' => $computers_id, 'is_dynamic' => 1]);\n        $this->integer(count($firmwares))->isIdenticalTo(1);\n\n        //\"original\" firmware has been removed\n        $this->boolean($item_bios->getFromDB($item_bios_id))->isFalse();\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units\\Glpi\\Inventory;\n\nuse InventoryTestCase;\nuse Item_OperatingSystem;\nuse Lockedfield;\nuse OperatingSystem;\nuse OperatingSystemArchitecture;\nuse OperatingSystemServicePack;\nuse OperatingSystemVersion;\nuse RuleCriteria;\nuse wapmorgan\\UnifiedArchive\\UnifiedArchive;\n\nclass Inventory extends InventoryTestCase\n{\n    private function checkComputer1($computers_id)\n    {\n        global $DB;\n\n        //get computer models, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\ComputerModel::getTable(), 'WHERE' => ['name' => 'XPS 13 9350']])->current();\n        $this->array($cmodels);\n        $computermodels_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\ComputerType::getTable(), 'WHERE' => ['name' => 'Laptop']])->current();\n        $this->array($ctypes);\n        $computertypes_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Dell Inc.']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'glpixps',\n            'serial' => '640HP72',\n            'otherserial' => null,\n            'contact' => 'trasher/root',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '4c4c4544-0034-3010-8048-b6c04f503732',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => '2020-06-09 07:58:08',\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora 31 (Workstation Edition)',\n            'version' => '31 (Workstation Edition)',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n       //remote management\n        $mgmt = new \\Item_RemoteManagement();\n        $iterator = $mgmt->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $remote = $iterator->current();\n        unset($remote['id']);\n        $this->array($remote)->isIdenticalTo([\n            'itemtype' => $computer->getType(),\n            'items_id' => $computer->fields['id'],\n            'remoteid' => '123456789',\n            'type' => 'teamviewer',\n            'is_dynamic' => 1,\n            'is_deleted' => 0\n        ]);\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $monitor_link = $iterator->current();\n        unset($monitor_link['date_mod']);\n        unset($monitor_link['date_creation']);\n\n        $mmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Sharp Corporation']])->current();\n        $this->array($mmanuf);\n        $manufacturers_id = $mmanuf['id'];\n\n        $mmodel = $DB->request(['FROM' => \\MonitorModel::getTable(), 'WHERE' => ['name' => 'DJCP6']])->current();\n        $this->array($mmodel);\n        $models_id = $mmodel['id'];\n\n        $expected = [\n            'id' => $monitor_link['id'],\n            'entities_id' => 0,\n            'name' => 'DJCP6',\n            'contact' => 'trasher/root',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'serial' => 'ABH55D',\n            'otherserial' => null,\n            'size' => '0.00',\n            'have_micro' => 0,\n            'have_speaker' => 0,\n            'have_subd' => 0,\n            'have_bnc' => 0,\n            'have_dvi' => 0,\n            'have_pivot' => 0,\n            'have_hdmi' => 0,\n            'have_displayport' => 0,\n            'locations_id' => 0,\n            'monitortypes_id' => 0,\n            'monitormodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_global' => 0,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'autoupdatesystems_id' => 0,\n            'uuid' => null,\n            'is_recursive' => 0,\n            'linkid' => $monitor_link['linkid'],\n            'glpi_computers_items_is_dynamic' => 1,\n            'entity' => 0,\n        ];\n        $this->array($monitor_link)->isIdenticalTo($expected);\n\n        $monitor = new \\Monitor();\n        $this->boolean($monitor->getFromDB($monitor_link['id']))->isTrue();\n        $this->boolean((bool)$monitor->fields['is_dynamic'])->isTrue();\n        $this->string($monitor->fields['name'])->isIdenticalTo('DJCP6');\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(5);\n\n        $expecteds = [\n            [\n                'logical_number' => 0,\n                'name' => 'lo',\n                'instantiation_type' => 'NetworkPortEthernet',\n                'mac' => '00:00:00:00:00:00',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 1,\n                'name' => 'enp57s0u1u4',\n                'instantiation_type' => 'NetworkPortEthernet',\n                'mac' => '00:e0:4c:68:01:db',\n                'ifstatus' => '1',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 1,\n                'name' => 'wlp58s0',\n                'instantiation_type' => 'NetworkPortWifi',\n                'mac' => '44:85:00:2b:90:bc',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 0,\n                'name' => 'virbr0',\n                'instantiation_type' => 'NetworkPortEthernet',\n                'mac' => '52:54:00:fa:20:0e',\n                'ifstatus' => '2',\n                'ifinternalstatus' => '1',\n            ], [\n                'logical_number' => 0,\n                'name' => 'virbr0-nic',\n                'instantiation_type' => null,\n                'mac' => '52:54:00:fa:20:0e',\n                'ifstatus' => '2',\n                'ifinternalstatus' => '2',\n            ]\n        ];\n\n        $ips = [\n            'lo'  => [\n                'v4'   => '127.0.0.1',\n                'v6'   => '::1'\n            ],\n            'enp57s0u1u4'  => [\n                'v4'   => '192.168.1.142',\n                'v6'   => 'fe80::b283:4fa3:d3f2:96b1'\n            ],\n            'wlp58s0'   => [\n                'v4'   => '192.168.1.118',\n                'v6'   => 'fe80::92a4:26c6:99dd:2d60'\n            ],\n            'virbr0' => [\n                'v4'   => '192.168.122.1'\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            $expected = $expecteds[$i];\n            $expected = $expected + [\n                'items_id' => $computers_id,\n                'itemtype' => 'Computer',\n                'entities_id' => 0,\n                'is_recursive' => 0,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'ifmtu' => 0,\n                'ifspeed' => 0,\n                'ifinternalstatus' => null,\n                'ifconnectionstatus' => 0,\n                'iflastchange' => null,\n                'ifinbytes' => 0,\n                'ifinerrors' => 0,\n                'ifoutbytes' => 0,\n                'ifouterrors' => 0,\n                'ifstatus' => null,\n                'ifdescr' => null,\n                'ifalias' => null,\n                'portduplex' => null,\n                'trunk' => 0,\n                'lastup' => null\n            ];\n\n            $this->array($port)->isEqualTo($expected);\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                //FIXME: missing all ipv6 :(\n                $ip = $ip_iterator->current();\n                $this->integer((int)$ip['version'])->isIdenticalTo(4);\n                $this->string($ip['name'])->isIdenticalTo($ips[$port['name']]['v4']);\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => 0,\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceProcessor' => 1,\n            'Item_DeviceMemory' => 2,\n            'Item_DeviceHardDrive' => 1,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DeviceDrive' => 0,\n            'Item_DeviceBattery' => 1,\n            'Item_DeviceGraphicCard' => 0,\n            'Item_DeviceSoundCard' => 1,\n            'Item_DeviceControl' => 25,\n            'Item_DevicePci' => 0,\n            'Item_DeviceCase' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n            'Item_DeviceSensor' => 0\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo(\n                $count,\n                sprintf(\n                    'Expected %1$s %2$s, got %3$s',\n                    $count,\n                    $type,\n                    count($components[$type])\n                )\n            );\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => [],\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceProcessor' =>\n               [\n                   [\n                       'items_id' => $computers_id,\n                       'itemtype' => 'Computer',\n                       'deviceprocessors_id' => 3060400,\n                       'frequency' => 2300,\n                       'serial' => null,\n                       'is_deleted' => 0,\n                       'is_dynamic' => 1,\n                       'nbcores' => 2,\n                       'nbthreads' => 4,\n                       'entities_id' => 0,\n                       'is_recursive' => 0,\n                       'busID' => null,\n                       'otherserial' => null,\n                       'locations_id' => 0,\n                       'states_id' => 0,\n                   ],\n               ],\n            'Item_DeviceMemory' =>\n               [\n                   [\n                       'items_id' => $computers_id,\n                       'itemtype' => 'Computer',\n                       'devicememories_id' => 104,\n                       'size' => 4096,\n                       'serial' => '12161217',\n                       'is_deleted' => 0,\n                       'is_dynamic' => 1,\n                       'entities_id' => 0,\n                       'is_recursive' => 0,\n                       'busID' => '1',\n                       'otherserial' => null,\n                       'locations_id' => 0,\n                       'states_id' => 0,\n                   ], [\n                       'items_id' => $computers_id,\n                       'itemtype' => 'Computer',\n                       'devicememories_id' => 104,\n                       'size' => 4096,\n                       'serial' => '12121212',\n                       'is_deleted' => 0,\n                       'is_dynamic' => 1,\n                       'entities_id' => 0,\n                       'is_recursive' => 0,\n                       'busID' => '2',\n                       'otherserial' => null,\n                       'locations_id' => 0,\n                       'states_id' => 0,\n                   ],\n               ],\n            'Item_DeviceHardDrive' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'deviceharddrives_id' => 104,\n                    'capacity' => 256060,\n                    'serial' => 'S29NNXAH146409',\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DeviceNetworkCard' => [],\n            'Item_DeviceDrive' => [],\n            // 'Item_DeviceBattery' is not tested here, see self::checkComputer1Batteries()\n            'Item_DeviceGraphicCard' => [],\n            'Item_DeviceSoundCard' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicesoundcards_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DeviceControl' => [\n                [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2246,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => 'xyz',\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2247,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2248,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2249,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2250,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2251,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2252,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2253,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2254,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2255,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2256,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2257,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2258,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2259,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2260,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2261,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2262,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2263,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2264,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2265,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2266,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ], [\n                    'items_id' => $computers_id,\n                    'itemtype' => 'Computer',\n                    'devicecontrols_id' => 2267,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DevicePci' => [],\n            'Item_DeviceCase' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [],\n            'Item_DeviceSensor' => [],\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n           //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //check printer\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Printer');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $printer_link = $iterator->current();\n        unset($printer_link['date_mod'], $printer_link['date_creation']);\n\n        $expected = [\n            'id' => $printer_link['id'],\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'Officejet_Pro_8600_34AF9E_',\n            'contact' => 'trasher/root',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'serial' => 'MY47L1W1JHEB6',\n            'otherserial' => null,\n            'have_serial' => 0,\n            'have_parallel' => 0,\n            'have_usb' => 0,\n            'have_wifi' => 0,\n            'have_ethernet' => 0,\n            'comment' => null,\n            'memory_size' => null,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'printertypes_id' => 0,\n            'printermodels_id' => 0,\n            'manufacturers_id' => 0,\n            'is_global' => 0,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'init_pages_counter' => 0,\n            'last_pages_counter' => 0,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'sysdescr' => null,\n            'last_inventory_update' => $_SESSION['glpi_currenttime'],\n            'snmpcredentials_id' => 0,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'linkid' => $printer_link['linkid'],\n            'glpi_computers_items_is_dynamic' => 1,\n            'entity' => 0,\n        ];\n        $this->array($printer_link)->isIdenticalTo($expected);\n\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDB($printer_link['id']))->isTrue();\n        $this->boolean((bool)$printer->fields['is_dynamic'])->isTrue();\n        $this->string($printer->fields['name'])->isIdenticalTo('Officejet_Pro_8600_34AF9E_');\n\n        return $computer;\n    }\n\n    private function checkComputer1Volumes(\\Computer $computer, array $freesizes = [])\n    {\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(6);\n\n        $expecteds = [\n            [\n                'fsname' => 'ext4',\n                'name' => '/',\n                'device' => '/dev/mapper/xps-root',\n                'mountpoint' => '/',\n                'filesystems_id' => 4,\n                'totalsize' => 40189,\n                'freesize' => 11683,\n                'encryption_status' => 1,\n                'encryption_tool' => 'LUKS1',\n                'encryption_algorithm' => 'aes-xts-plain64',\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/var/www',\n                'device' => '/dev/mapper/xps-www',\n                'mountpoint' => '/var/www',\n                'filesystems_id' => 4,\n                'totalsize' => 20030,\n                'freesize' => 11924,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/boot',\n                'device' => '/dev/nvme0n1p2',\n                'mountpoint' => '/boot',\n                'filesystems_id' => 4,\n                'totalsize' => 975,\n                'freesize' => 703,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/var/lib/mysql',\n                'device' => '/dev/mapper/xps-maria',\n                'mountpoint' => '/var/lib/mysql',\n                'filesystems_id' => 4,\n                'totalsize' => 20030,\n                'freesize' => 15740,\n                'encryption_status' => 1,\n                'encryption_tool' => 'LUKS1',\n                'encryption_algorithm' => 'aes-xts-plain64',\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/home',\n                'device' => '/dev/mapper/xps-home',\n                'mountpoint' => '/home',\n                'filesystems_id' => 4,\n                'totalsize' => 120439,\n                'freesize' => 24872,\n                'encryption_status' => 1,\n                'encryption_tool' => 'LUKS1',\n                'encryption_algorithm' => 'aes-xts-plain64',\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'VFAT',\n                'name' => '/boot/efi',\n                'device' => '/dev/nvme0n1p1',\n                'mountpoint' => '/boot/efi',\n                'filesystems_id' => 7,\n                'totalsize' => 199,\n                'freesize' => 191,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id'], $volume['date_mod'], $volume['date_creation']);\n            $expected = $expecteds[$i];\n            if (count($freesizes)) {\n                $expected['freesize'] = $freesizes[$i];\n            }\n            $expected += [\n                'items_id' => $computer->fields['id'],\n                'itemtype' => 'Computer',\n                'entities_id' => 0,\n                'is_deleted' => 0,\n                'is_dynamic' => 1\n            ];\n\n            ksort($expected);\n            ksort($volume);\n\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n    }\n\n    private function checkComputer1Softwares(\\Computer $computer, array $versions = [])\n    {\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(7);\n\n        $expecteds = [\n            [\n                'softname' => 'expat',\n                'version' => '2.2.8-1.fc31',\n                'dateinstall' => '2019-12-19',\n            ],[\n                'softname' => 'Fedora 31 (Workstation Edition)',\n                'version' => '31 (Workstation Edition)',\n                'dateinstall' => null,\n            ], [\n                'softname' => 'gettext',\n                'version' => '0.20.1-3.fc31',\n                'dateinstall' => '2020-01-15',\n            ], [\n                'softname' => 'gitg',\n                'version' => '3.32.1-1.fc31',\n                'dateinstall' => '2019-12-19',\n            ], [\n                'softname' => 'gnome-calculator',\n                'version' => '3.34.1-1.fc31',\n                'dateinstall' => '2019-12-19',\n            ], [\n                'softname' => 'libcryptui',\n                'version' => '3.12.2-18.fc31',\n                'dateinstall' => '2019-12-19',\n            ], [\n                'softname' => 'tar',\n                'version' => '1.32-2.fc31',\n                'dateinstall' => '2019-12-19',\n            ],\n        ];\n\n        $i = 0;\n        foreach ($iterator as $soft) {\n            $expected = $expecteds[$i];\n            if (count($versions)) {\n                $expected['version'] = $versions[$i];\n            }\n            $this->array([\n                'softname'     => $soft['softname'],\n                'version'      => $soft['version'],\n                'dateinstall'  => $soft['dateinstall']\n            ])->isEqualTo($expected);\n            ++$i;\n        }\n    }\n\n    private function checkComputer1Batteries(\\Computer $computer, array $capacities = [])\n    {\n        global $DB;\n\n        $link        = getItemForItemtype(\\Item_DeviceBattery::class);\n        $iterator = $DB->request($link->getTableGroupCriteria($computer));\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $battery = [];\n        foreach ($iterator as $row) {\n            unset($row['id']);\n            $battery = $row;\n        }\n\n        $expected = [\n            'items_id' => $computer->fields['id'],\n            'itemtype' => $computer->getType(),\n            'devicebatteries_id' => 104,\n            'manufacturing_date' => '2019-07-06',\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'serial' => '34605',\n            'otherserial' => null,\n            'locations_id' => 0,\n            'states_id' => 0,\n            'real_capacity' => $capacities[0] ?? 50570\n        ];\n\n       //hack to replace expected fkeys\n        foreach (array_keys($expected) as $key) {\n            if (isForeignKeyField($key)) {\n                $expected[$key] = $battery[$key];\n            }\n        }\n\n        $this->array($battery)->isIdenticalTo($expected);\n    }\n\n    public function testImportComputer()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $inventory = $this->doInventory($json);\n\n       //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['tag']->isIdenticalTo('000005');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computer = $this->checkComputer1($agent['items_id']);\n        $this->checkComputer1Volumes($computer);\n        $this->checkComputer1Softwares($computer);\n        $this->checkComputer1Batteries($computer);\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(3);\n\n        $criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $monitor_criteria = $criteria;\n        $monitor_criteria['WHERE'] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $printer_criteria = $criteria;\n        $printer_criteria['WHERE'] = ['itemtype' => \\Printer::getType()];\n        $iterator = $DB->request($printer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Printer import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $criteria;\n        $computer_criteria['WHERE'] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Computer import (by serial + uuid)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n    }\n\n    public function testUpdateComputer()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_3.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.3.19')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['tag']->isIdenticalTo('000005');\n        $this->array($metadata['provider'])->hasSize(9);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['name']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('2.3.19')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $mrules_found = $mlogs->find();\n        $this->array($mrules_found)->hasSize(2);\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $monitor_criteria = $mrules_criteria;\n        $monitor_criteria['WHERE'] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $mrules_criteria;\n        $computer_criteria['WHERE'] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Computer import (by serial + uuid)');\n        $this->integer($iterator->current()['items_id'])->isIdenticalTo($agent['items_id']);\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        //get computer models, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\ComputerModel::getTable(), 'WHERE' => ['name' => 'PORTEGE Z30-A']])->current();\n        $this->array($cmodels);\n        $computermodels_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\ComputerType::getTable(), 'WHERE' => ['name' => 'Notebook']])->current();\n        $this->array($ctypes);\n        $computertypes_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Toshiba']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        //check created computer\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'LF014',\n            'serial' => '8C554721F',\n            'otherserial' => '0000000000',\n            'contact' => 'johan',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '0055ADC9-1D3A-E411-8043-B05D95113232',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => \"2017-02-20 08:11:53\",\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora release 25 (Twenty Five)',\n            'version' => '25',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3);\n\n        $expecteds_fs = [\n            [\n                'fsname' => 'ext4',\n                'name' => '/',\n                'device' => '/dev/mapper/fedora-root',\n                'mountpoint' => '/',\n                'filesystems_id' => 4,\n                'totalsize' => 50268,\n                'freesize' => 13336,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/boot',\n                'device' => '/dev/sda1',\n                'mountpoint' => '/boot',\n                'filesystems_id' => 4,\n                'totalsize' => 476,\n                'freesize' => 279,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ], [\n                'fsname' => 'ext4',\n                'name' => '/home',\n                'device' => '/dev/mapper/fedora-home',\n                'mountpoint' => '/home',\n                'filesystems_id' => 4,\n                'totalsize' => 181527,\n                'freesize' => 72579,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds_fs[$i];\n            $expected = $expected + [\n                'items_id'     => $computers_id,\n                'itemtype'     => 'Computer',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds_components = [\n            'Item_DeviceMotherboard' => 0,\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceProcessor' => 1,\n            'Item_DeviceMemory' => 2,\n            'Item_DeviceHardDrive' => 1,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DeviceDrive' => 0,\n            'Item_DeviceBattery' => 1,\n            'Item_DeviceGraphicCard' => 0,\n            'Item_DeviceSoundCard' => 2,\n            'Item_DeviceControl' => 14,\n            'Item_DevicePci' => 0,\n            'Item_DeviceCase' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n            'Item_DeviceSensor' => 0\n        ];\n\n        foreach ($expecteds_components as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, \"$type \" . count($components[$type]));\n        }\n\n        //check memory\n        $this->array($components['Item_DeviceMemory'])->hasSize(2);\n        $mem_component1 = array_pop($components['Item_DeviceMemory']);\n        $mem_component2 = array_pop($components['Item_DeviceMemory']);\n        $this->integer($mem_component1['devicememories_id'])->isGreaterThan(0);\n        $expected_mem_component = [\n            'items_id' => $mem_component1['items_id'],\n            'itemtype' => \"Computer\",\n            'devicememories_id' => $mem_component1['devicememories_id'],\n            'size' => 2048,\n            'serial' => \"23853943\",\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'busID' => \"2\",\n            'otherserial' => null,\n            'locations_id' => 0,\n            'states_id' => 0\n        ];\n        $this->array($mem_component1)->isIdenticalTo($expected_mem_component);\n        $expected_mem_component['busID'] = \"1\";\n        $this->array($mem_component2)->isIdenticalTo($expected_mem_component);\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3034);\n\n        //computer has been created, check logs.\n        //check for expected logs\n        $nblogsnow = countElementsInTable(\\Log::getTable());\n        $logs = $DB->request([\n            'FROM' => \\Log::getTable(),\n            'LIMIT' => $nblogsnow,\n            'OFFSET' => $this->nblogs,\n        ]);\n        $this->integer(count($logs))->isIdenticalTo(0);\n\n        //fake computer update (nothing has changed)\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_3.json'));\n        $this->doInventory($json);\n\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'LF014',\n            'serial' => '8C554721F',\n            'otherserial' => '0000000000',\n            'contact' => 'johan',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '0055ADC9-1D3A-E411-8043-B05D95113232',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => \"2017-02-20 08:11:53\",\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora release 25 (Twenty Five)',\n            'version' => '25',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3);\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds_fs[$i];\n            $expected = $expected + [\n                'items_id'     => $computers_id,\n                'itemtype'     => 'Computer',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        foreach ($expecteds_components as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, \"$type \" . count($components[$type]));\n        }\n\n        //check memory\n        $this->array($components['Item_DeviceMemory'])->hasSize(2);\n        $mem_component1 = array_pop($components['Item_DeviceMemory']);\n        $mem_component2 = array_pop($components['Item_DeviceMemory']);\n        $this->integer($mem_component1['devicememories_id'])->isGreaterThan(0);\n        $expected_mem_component['busID'] = \"2\";\n        $this->array($mem_component1)->isIdenticalTo($expected_mem_component);\n        $expected_mem_component['busID'] = \"1\";\n        $this->array($mem_component2)->isIdenticalTo($expected_mem_component);\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3034);\n\n        //check for expected logs\n        $nblogsnow = countElementsInTable(\\Log::getTable());\n        $logs = $DB->request([\n            'FROM' => \\Log::getTable(),\n            'LIMIT' => $nblogsnow,\n            'OFFSET' => $this->nblogs,\n        ]);\n        $this->integer(count($logs))->isIdenticalTo(0);\n\n        //real computer update\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_3_updated.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.3.20')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n        ;\n        $this->array($metadata['provider'])->hasSize(9);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['name']->isIdenticalTo('LF014-2017-02-20-12-19-56')\n            ->string['version']->isIdenticalTo('2.3.20')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->integer['items_id']->isIdenticalTo($computers_id)\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $expected = [\n            'id' => $computers_id,\n            'entities_id' => 0,\n            'name' => 'LF014',\n            'serial' => '8C554721F',\n            'otherserial' => '0000000000',\n            'contact' => 'johan',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'date_mod' => $computer->fields['date_mod'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'locations_id' => 0,\n            'networks_id' => 0,\n            'computermodels_id' => $computermodels_id,\n            'computertypes_id' => $computertypes_id,\n            'is_template' => 0,\n            'template_name' => null,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'uuid' => '0055ADC9-1D3A-E411-8043-B05D95113232',\n            'date_creation' => $computer->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $computer->fields['last_inventory_update'],\n            'last_boot' => \"2017-06-08 07:06:47\",\n        ];\n        $this->array($computer->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($computer);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Fedora release 25 (Twenty Five)',\n            'version' => '25',\n            'architecture' => 'x86_64',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3);\n\n        //update fs values\n        $expecteds_fs[0]['totalsize'] = 150268;\n        $expecteds_fs[0]['freesize'] = 7914;\n        $expecteds_fs[1]['freesize'] = 277;\n        $expecteds_fs[2]['freesize'] = 68968;\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds_fs[$i];\n            $expected = $expected + [\n                'items_id'     => $computers_id,\n                'itemtype'     => 'Computer',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //connections\n        $iterator = \\Computer_Item::getTypeItems($computers_id, 'Monitor');\n        $this->integer(count($iterator))->isIdenticalTo(0);\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $computers_id,\n                'itemtype'           => 'Computer',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(7);\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($computer));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        foreach ($expecteds_components as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, \"$type \" . count($components[$type]));\n        }\n\n        //check memory\n        $this->array($components['Item_DeviceMemory'])->hasSize(2);\n        $mem_component1 = array_pop($components['Item_DeviceMemory']);\n        $mem_component2 = array_pop($components['Item_DeviceMemory']);\n        $expected_mem_component = [\n            'items_id' => $mem_component1['items_id'],\n            'itemtype' => \"Computer\",\n            'devicememories_id' => $mem_component1['devicememories_id'],\n            'size' => 4096,\n            'serial' => \"53853943\",\n            'is_deleted' => 0,\n            'is_dynamic' => 1,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'busID' => \"2\",\n            'otherserial' => null,\n            'locations_id' => 0,\n            'states_id' => 0\n        ];\n        $this->array($mem_component1)->isIdenticalTo($expected_mem_component);\n        $expected_mem_component['busID'] = \"1\";\n        $this->array($mem_component2)->isIdenticalTo($expected_mem_component);\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($computer);\n        $this->integer(count($iterator))->isIdenticalTo(3185);\n\n        //check for expected logs after update\n        $logs = $DB->request([\n            'FROM' => \\Log::getTable(),\n            'LIMIT' => countElementsInTable(\\Log::getTable()),\n            'OFFSET' => $nblogsnow,\n        ]);\n\n        $this->integer(count($logs))->isIdenticalTo(4412);\n\n        $expected_types_count = [\n            0 => 3, //Agent version, disks usage\n            \\Log::HISTORY_ADD_RELATION => 1, //new IPNetwork/IPAddress\n            \\Log::HISTORY_DEL_RELATION => 2,//monitor-computer relation\n            \\Log::HISTORY_ADD_SUBITEM => 3247,//network port/name, ip address, VMs, Software\n            \\Log::HISTORY_UPDATE_SUBITEM => 828,//disks usage, software updates\n            \\Log::HISTORY_DELETE_SUBITEM => 99,//networkport and networkname, Software?\n            \\Log::HISTORY_CREATE_ITEM => 230, //virtual machines, os, manufacturer, net ports, net names, software category ...\n            \\Log::HISTORY_UPDATE_RELATION => 2,//kernel version\n        ];\n\n        $types_count = [];\n        foreach ($logs as $row) {\n            $this->string($row['user_name'])->isIdenticalTo('inventory', print_r($row, true));\n            if (!isset($types_count[$row['linked_action']])) {\n                $types_count[$row['linked_action']] = 0;\n            }\n            ++$types_count[$row['linked_action']];\n        }\n\n        ksort($types_count);\n        ksort($expected_types_count);\n        $this->array($types_count)->isEqualTo(\n            $expected_types_count,\n            sprintf(\n                \"\\nGot:\\n%s\\n\\nExpected:\\n%s\",\n                print_r($types_count, true),\n                print_r($expected_types_count, true)\n            )\n        );\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find(['NOT' => ['id' => array_keys($mrules_found)]]);\n        $mrules_criteria['WHERE'] = ['NOT' => [\\RuleMatchedLog::getTable() . '.id' => array_keys($mrules_found)]];\n        $this->array($found)->hasSize(3);\n\n        $monitor_criteria = $mrules_criteria;\n        $monitor_criteria['WHERE'][] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor update (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $mrules_criteria;\n        $computer_criteria['WHERE'][] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n\n        $this->integer(count($iterator))->isIdenticalTo(2);\n        foreach ($iterator as $rmlog) {\n            $this->string($rmlog['name'])->isIdenticalTo('Computer update (by serial + uuid)');\n            $this->integer($rmlog['items_id'])->isIdenticalTo($agent['items_id']);\n            $this->string($rmlog['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n    }\n\n    public function testImportNetworkEquipment()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_1.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION['glpi_currenttime'] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('foo')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n       //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n       //no agent with deviceid equals to \"foo\"\n        $this->integer(count($agents))->isIdenticalTo(0);\n\n       //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'UCS 6248UP 48-Port']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Cisco']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'paris.pa3']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created asset\n        $equipments = $DB->request(['FROM' => \\NetworkEquipment::getTable(), 'WHERE' => ['is_dynamic' => 1]]);\n        //no agent with deviceid equals to \"foo\"\n        $this->integer(count($equipments))->isIdenticalTo(1);\n        $equipments_id = $equipments->current()['id'];\n\n        $equipment = new \\NetworkEquipment();\n        $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n\n        $expected = [\n            'id' => $equipments_id,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'ucs6248up-cluster-pa3-B',\n            'ram' => null,\n            'serial' => 'SSI1912014B',\n            'otherserial' => null,\n            'contact' => 'noc@glpi-project.org',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => $equipment->fields['date_mod'],\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => $equipment->fields['date_creation'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 4,\n            'uptime' => '482 days, 05:42:18.50',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 4,\n        ];\n        $this->array($equipment->fields)->isIdenticalTo($expected);\n\n        //check network ports\n        $expected_count = 164;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $equipments_id,\n                'itemtype'           => 'NetworkEquipment',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_count);\n\n        $expecteds = [\n            ($expected_count - 1) => [\n                'logical_number' => 0,\n                'name' => 'Management',\n                'instantiation_type' => 'NetworkPortAggregate',\n                'mac' => '8c:60:4f:8d:ae:fc',\n            ],\n        ];\n\n        $ips = [\n            'Management' => [\n                '10.2.5.10',\n                '192.168.12.5',\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            if (isset($expecteds[$i])) {\n                $expected = $expecteds[$i];\n                $expected = $expected + [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'ifmtu' => 0,\n                    'ifspeed' => 0,\n                    'ifinternalstatus' => null,\n                    'ifconnectionstatus' => 0,\n                    'iflastchange' => null,\n                    'ifinbytes' => 0,\n                    'ifinerrors' => 0,\n                    'ifoutbytes' => 0,\n                    'ifouterrors' => 0,\n                    'ifstatus' => null,\n                    'ifdescr' => null,\n                    'ifalias' => null,\n                    'portduplex' => null,\n                    'trunk' => 0,\n                    'lastup' => null\n                ];\n\n                $this->array($port)->isEqualTo($expected);\n            } else {\n                $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n            }\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                foreach ($ip_iterator as $ip) {\n                    $this->array($ips[$port['name']])->contains($ip['name']);\n                }\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($equipment));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceMemory' => 0,\n            'Item_DeviceHardDrive' => 0,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DevicePci' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo(\n                $count,\n                sprintf(\n                    'Expected %1$s %2$s, got %3$s of them',\n                    $count,\n                    $type,\n                    count($components[$type])\n                )\n            );\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceMemory' => [],\n            'Item_DeviceHardDrive' => [],\n            'Item_DeviceNetworkCard' => [],\n            'Item_DevicePci' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [],\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n            //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //ports connections\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(5);\n\n        //unmanaged equipments\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(5);\n\n        $expecteds = [\n            'sw2-mgmt-eqnx' => \"Cisco IOS Software, C2960 Software (C2960-LANLITEK9-M), Version 12.2(50)SE5, RELEASE SOFTWARE (fc1)\nTechnical Support: http://www.cisco.com/techsupport\nCopyright (c) 1986-2010 by Cisco Systems, Inc.\nCompiled Tue 28-Sep-10 13:44 by prod_rel_team\",\n            'n9k-1-pa3' => 'Cisco Nexus Operating System (NX-OS) Software, Version 7.0(3)I7(6)',\n            'n9k-2-pa3' => 'Cisco Nexus Operating System (NX-OS) Software, Version 7.0(3)I7(6)',\n        ];\n\n        foreach ($unmanageds as $unmanaged) {\n            $this->boolean(in_array($unmanaged['name'], array_keys($expecteds)))->isTrue($unmanaged['name']);\n            $this->string($unmanaged['sysdescr'])->isIdenticalTo($expecteds[$unmanaged['name']]);\n        }\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(6);//1 equipment, 5 unmanageds\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->integer($neteq['items_id'])->isIdenticalTo($equipments_id);\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(5);\n        foreach ($iterator as $unmanaged) {\n            $this->string($unmanaged['name'])->isIdenticalTo('Global import (by ip+ifdescr)');\n            $this->string($unmanaged['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n    }\n\n    public function testImportStackedNetworkEquipment()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_2.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION['glpi_currenttime'] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('3k-1-pa3.glpi-project.infra-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('3k-1-pa3.glpi-project.infra-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('3k-1-pa3.glpi-project.infra-2020-12-31-11-28-51')\n         //->string['version']->isIdenticalTo('')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'WS-C3750G-48TS-S']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Cisco']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'paris.pa3']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created equipments\n        $expected_eq_count = 5;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkEquipment::getTable(),\n            'WHERE'  => ['is_dynamic' => 1]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n\n        $main_expected = [\n            'id' => null,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => '3k-1-pa3.glpi-project.infra',\n            'ram' => 128,\n            'serial' => 'FOC1243W0ED',\n            'otherserial' => null,\n            'contact' => null,\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => null,\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => null,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 47,\n            'uptime' => '103 days, 13:53:28.28',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n\n        $stacks = [\n            1 => [\n                'serial'       => 'FOC1243W0ED',\n                'connections'  => 0\n            ],\n            2 => [\n                'serial'       => 'FOC1127Z4LH',\n                'connections'  => 2\n            ],\n            3 => [\n                'serial'       => 'FOC1232W0JH',\n                'connections'  => 5\n            ],\n            4 => [\n                'serial'       => 'FOC1033Y0M7',\n                'connections'  => 2\n            ],\n            8 => [\n                'serial'       => 'FOC0929U1SR',\n                'connections'  => 2\n            ]\n        ];\n\n        foreach ($iterator as $row) {\n            $expected = $main_expected;\n            $equipments_id = $row['id'];\n            $expected['id'] = $equipments_id;\n            $equipment = new \\NetworkEquipment();\n            $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n            $expected['date_mod'] = $row['date_mod'];\n            $expected['date_creation'] = $row['date_creation'];\n            $stack_id = preg_replace('/.+ - (\\d)/', '$1', $row['name']);\n            $this->array($stacks)->hasKey($stack_id);\n            $expected['name'] .= ' - ' . $stack_id;\n            $expected['serial'] = $stacks[$stack_id]['serial'];\n            $this->array($row)->isIdenticalTo($expected);\n\n            //check network ports\n            $expected_count = 53;\n            $ports_iterator = $DB->request([\n                'FROM'   => \\NetworkPort::getTable(),\n                'WHERE'  => [\n                    'items_id'           => $equipments_id,\n                    'itemtype'           => 'NetworkEquipment',\n                ],\n            ]);\n            $this->integer(count($ports_iterator))->isIdenticalTo(\n                $expected_count,\n                sprintf(\n                    '%s ports found on %s, %s expected',\n                    count($ports_iterator),\n                    $row['name'],\n                    $expected_count\n                )\n            );\n\n            $expecteds = [\n                ($expected_count - 1) => [\n                    'logical_number' => 0,\n                    'name' => 'Management',\n                    'instantiation_type' => 'NetworkPortAggregate',\n                    'mac' => '00:23:ac:6a:01:00',\n                ],\n            ];\n\n            $ips = [\n                'Management' => [\n                    '10.1.0.100',\n                    '10.1.0.22',\n                    '10.1.0.41',\n                    '10.1.0.45',\n                    '10.1.0.59',\n                    '10.11.11.1',\n                    '10.11.11.5',\n                    '10.11.13.1',\n                    '10.11.13.5',\n                    '172.21.0.1',\n                    '172.21.0.7',\n                    '172.22.0.1',\n                    '172.22.0.5',\n                    '172.23.0.1',\n                    '172.23.0.5',\n                    '172.24.0.1',\n                    '172.24.0.5',\n                    '172.25.1.15',\n                    '172.28.200.1',\n                    '172.28.200.5',\n                    '172.28.211.5',\n                    '172.28.215.1',\n                    '172.28.221.1',\n                    '185.10.253.65',\n                    '185.10.253.97',\n                    '185.10.254.1',\n                    '185.10.255.146',\n                    '185.10.255.224',\n                    '185.10.255.250',\n                ]\n            ];\n\n            $i = 0;\n            $netport = new \\NetworkPort();\n            $all_ports_ids = [];\n            foreach ($ports_iterator as $port) {\n                $ports_id = $port['id'];\n                $all_ports_ids[] = $port['id'];\n                $this->boolean($netport->getFromDB($ports_id))->isTrue();\n                $instantiation = $netport->getInstantiation();\n                if ($port['instantiation_type'] === null) {\n                    $this->boolean($instantiation)->isFalse();\n                } else {\n                    $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n                }\n\n                unset($port['id']);\n                unset($port['date_creation']);\n                unset($port['date_mod']);\n                unset($port['comment']);\n\n                if (isset($expecteds[$i])) {\n                    $expected = $expecteds[$i];\n                    $expected = $expected + [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'ifmtu' => 0,\n                        'ifspeed' => 0,\n                        'ifinternalstatus' => null,\n                        'ifconnectionstatus' => 0,\n                        'iflastchange' => null,\n                        'ifinbytes' => 0,\n                        'ifinerrors' => 0,\n                        'ifoutbytes' => 0,\n                        'ifouterrors' => 0,\n                        'ifstatus' => null,\n                        'ifdescr' => null,\n                        'ifalias' => null,\n                        'portduplex' => null,\n                        'trunk' => 0,\n                        'lastup' => null\n                    ];\n\n                    $this->array($port)->isEqualTo($expected);\n                } else {\n                    $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                    $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                    $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                    $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                    $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n                }\n                ++$i;\n\n                //check for ips\n                $ip_iterator = $DB->request([\n                    'SELECT'       => [\n                        \\IPAddress::getTable() . '.name',\n                        \\IPAddress::getTable() . '.version'\n                    ],\n                    'FROM'   => \\IPAddress::getTable(),\n                    'INNER JOIN'   => [\n                        \\NetworkName::getTable()   => [\n                            'ON'  => [\n                                \\IPAddress::getTable()     => 'items_id',\n                                \\NetworkName::getTable()   => 'id', [\n                                    'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                                ]\n                            ]\n                        ]\n                    ],\n                    'WHERE'  => [\n                        \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                        \\NetworkName::getTable() . '.items_id'  => $ports_id\n                    ]\n                ]);\n\n                $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n                if (isset($ips[$port['name']])) {\n                    foreach ($ip_iterator as $ip) {\n                        $this->array($ips[$port['name']])->contains($ip['name']);\n                    }\n                }\n            }\n\n            //check for components\n            $components = [];\n            $allcount = 0;\n            foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n                $link = getItemForItemtype($link_type);\n                $dev_iterator = $DB->request($link->getTableGroupCriteria($equipment));\n                $allcount += count($dev_iterator);\n                $components[$link_type] = [];\n\n                foreach ($dev_iterator as $row) {\n                    $lid = $row['id'];\n                    unset($row['id']);\n                    $components[$link_type][$lid] = $row;\n                }\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => 1,\n                'Item_DeviceMemory' => 0,\n                'Item_DeviceHardDrive' => 0,\n                'Item_DeviceNetworkCard' => 0,\n                'Item_DevicePci' => 0,\n                'Item_DevicePowerSupply' => 0,\n                'Item_DeviceGeneric' => 0,\n                'Item_DeviceSimcard' => 0,\n            ];\n\n            foreach ($expecteds as $type => $count) {\n                $this->integer(count($components[$type]))->isIdenticalTo(\n                    $count,\n                    sprintf(\n                        'Expected %1$s %2$s, got %3$s of them',\n                        $count,\n                        $type,\n                        count($components[$type])\n                    )\n                );\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => [\n                    [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'devicefirmwares_id' => 104,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'serial' => null,\n                        'otherserial' => null,\n                        'locations_id' => 0,\n                        'states_id' => 0,\n                    ]\n                ],\n                'Item_DeviceMemory' => [],\n                'Item_DeviceHardDrive' => [],\n                'Item_DeviceNetworkCard' => [],\n                'Item_DevicePci' => [],\n                'Item_DevicePowerSupply' => [],\n                'Item_DeviceGeneric' => [],\n                'Item_DeviceSimcard' => [],\n            ];\n\n            foreach ($expecteds as $type => $expected) {\n                $component = array_values($components[$type]);\n               //hack to replace expected fkeys\n                foreach ($expected as $i => &$row) {\n                    foreach (array_keys($row) as $key) {\n                        if (isForeignKeyField($key)) {\n                            $row[$key] = $component[$i][$key];\n                        }\n                    }\n                }\n                $this->array($component)->isIdenticalTo($expected);\n            }\n\n            //ports connections\n            $connections = $DB->request([\n                'FROM'   => \\NetworkPort_NetworkPort::getTable(),\n                'WHERE'  => [\n                    'networkports_id_1' => $all_ports_ids\n                ]\n            ]);\n\n            $this->integer(count($connections))->isIdenticalTo(\n                $stacks[$stack_id]['connections'],\n                sprintf(\n                    '%s connections found on stack %s, %s expected',\n                    count($connections),\n                    $stack_id,\n                    $stacks[$stack_id]['connections']\n                )\n            );\n        }\n\n        $db_ports = $DB->request(['FROM' => \\NetworkPort::getTable()]);\n        $this->integer(count($db_ports))->isIdenticalTo(325);\n\n        $db_neteq_ports = $DB->request(['FROM' => \\NetworkPort::getTable(), 'WHERE' => ['itemtype' => 'NetworkEquipment']]);\n        $this->integer(count($db_neteq_ports))->isIdenticalTo(265);\n\n        $db_connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($db_connections))->isIdenticalTo(26);\n\n        $db_unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($db_unmanageds))->isIdenticalTo(45);\n\n        $db_ips = $DB->request(['FROM' => \\IPAddress::getTable()]);\n        $this->integer(count($db_ips))->isIdenticalTo(150);\n\n        $expected_names = [\n            'san-replication',\n            'leadiance-pub',\n            'san-clients',\n            'default',\n            'prod',\n            'backup',\n            'management',\n            '1060-pub',\n            '1060-priv',\n            'public_servlib',\n            'UGIPS',\n            '0001-pub'\n        ];\n        $db_vlans = $DB->request(['FROM' => \\Vlan::getTable()]);\n        $this->integer(count($db_vlans))->isIdenticalTo(count($expected_names));\n\n        $i = 0;\n        foreach ($db_vlans as $row) {\n            $this->string($row['name'])->isEqualTo($expected_names[$i]);\n            ++$i;\n        }\n\n        $db_vlans_ports = $DB->request(['FROM' => \\NetworkPort_Vlan::getTable()]);\n        $this->integer(count($db_vlans_ports))->isIdenticalTo(219);\n\n        $db_netnames = $DB->request(['FROM' => \\NetworkName::getTable()]);\n        $this->integer(count($db_netnames))->isIdenticalTo(10);\n\n        $expecteds = [\n            [\n                'name' => 'sw1-mgmt-eqnx',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '172.25.1.1',\n            ], [\n                'name' => '3k-1-th2',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '172.28.200.3',\n            ], [\n                'name' => 'sw2-mgmt-eqnx',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '172.25.1.2',\n            ], [\n                'name' => 'n9k-2-pa3(SAL1929KJ27)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '10.1.0.58',\n            ], [\n                'name' => 'n9k-1-pa3(SAL1929KJ2J)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '10.1.0.57',\n            ]\n        ];\n\n        $i = 0;\n       /*foreach ($unmanageds as $unmanaged) {\n         foreach ($expecteds[$i] as $key => $value) {\n            $this->variable($unmanaged[$key])->isEqualTo($value);\n         }\n         ++$i;\n       }*/\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(48);\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(43);\n    }\n\n    public function testImportNetworkEquipmentMultiConnections()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_3.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION['glpi_currenttime'] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('HP-2530-48G-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('2.5')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('HP-2530-48G-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('HP-2530-48G-2020-12-31-11-28-51')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => '2530-48G']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Hewlett-Packard']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n        $locations_id = 0;\n\n        //check created equipments\n        $expected_count = 1;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkEquipment::getTable(),\n            'WHERE'  => ['is_dynamic' => 1]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_count);\n\n        $expected = [\n            'id' => null,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'HP-2530-48G',\n            'ram' => null,\n            'serial' => 'CN5BFP62CP',\n            'otherserial' => null,\n            'contact' => null,\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => null,\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => null,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 0,\n            'uptime' => '(78894038) 9 days, 3:09:00.38',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n\n        foreach ($iterator as $row) {\n            $equipments_id = $row['id'];\n            $expected['id'] = $equipments_id;\n            $equipment = new \\NetworkEquipment();\n            $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n            $expected['date_mod'] = $row['date_mod'];\n            $expected['date_creation'] = $row['date_creation'];\n            $this->array($row)->isIdenticalTo($expected);\n\n            //check network ports\n            $expected_count = 53;\n            $ports_iterator = $DB->request([\n                'FROM'   => \\NetworkPort::getTable(),\n                'WHERE'  => [\n                    'items_id'           => $equipments_id,\n                    'itemtype'           => 'NetworkEquipment',\n                ],\n            ]);\n            $this->integer(count($ports_iterator))->isIdenticalTo(\n                $expected_count,\n                sprintf(\n                    '%s ports found on %s, %s expected',\n                    count($ports_iterator),\n                    $row['name'],\n                    $expected_count\n                )\n            );\n\n            $expecteds = [\n                ($expected_count - 1) => [\n                    'logical_number' => 0,\n                    'name' => 'Management',\n                    'instantiation_type' => 'NetworkPortAggregate',\n                    'mac' => 'b0:5a:da:10:10:80',\n                ],\n            ];\n\n            $ips = [\n                'Management' => [\n                    '192.168.63.30',\n                ]\n            ];\n\n            $i = 0;\n            $netport = new \\NetworkPort();\n            $all_ports_ids = [];\n            foreach ($ports_iterator as $port) {\n                $ports_id = $port['id'];\n                $all_ports_ids[] = $port['id'];\n                $this->boolean($netport->getFromDB($ports_id))->isTrue();\n                $instantiation = $netport->getInstantiation();\n                if ($port['instantiation_type'] === null) {\n                    $this->boolean($instantiation)->isFalse();\n                } else {\n                    $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n                }\n\n                unset($port['id']);\n                unset($port['date_creation']);\n                unset($port['date_mod']);\n                unset($port['comment']);\n\n                if (isset($expecteds[$i])) {\n                    $expected = $expecteds[$i];\n                    $expected = $expected + [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'ifmtu' => 0,\n                        'ifspeed' => 0,\n                        'ifinternalstatus' => null,\n                        'ifconnectionstatus' => 0,\n                        'iflastchange' => null,\n                        'ifinbytes' => 0,\n                        'ifinerrors' => 0,\n                        'ifoutbytes' => 0,\n                        'ifouterrors' => 0,\n                        'ifstatus' => null,\n                        'ifdescr' => null,\n                        'ifalias' => null,\n                        'portduplex' => null,\n                        'trunk' => 0,\n                        'lastup' => null\n                    ];\n\n                    $this->array($port)->isEqualTo($expected);\n                } else {\n                    $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                    $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                    $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                    $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                    $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n                }\n                ++$i;\n\n                //check for ips\n                $ip_iterator = $DB->request([\n                    'SELECT'       => [\n                        \\IPAddress::getTable() . '.name',\n                        \\IPAddress::getTable() . '.version'\n                    ],\n                    'FROM'   => \\IPAddress::getTable(),\n                    'INNER JOIN'   => [\n                        \\NetworkName::getTable()   => [\n                            'ON'  => [\n                                \\IPAddress::getTable()     => 'items_id',\n                                \\NetworkName::getTable()   => 'id', [\n                                    'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                                ]\n                            ]\n                        ]\n                    ],\n                    'WHERE'  => [\n                        \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                        \\NetworkName::getTable() . '.items_id'  => $ports_id\n                    ]\n                ]);\n\n                $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n                if (isset($ips[$port['name']])) {\n                    foreach ($ip_iterator as $ip) {\n                        $this->array($ips[$port['name']])->contains($ip['name']);\n                    }\n                }\n            }\n\n            //check for components\n            $components = [];\n            $allcount = 0;\n            foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n                $link = getItemForItemtype($link_type);\n                $dev_iterator = $DB->request($link->getTableGroupCriteria($equipment));\n                $allcount += count($dev_iterator);\n                $components[$link_type] = [];\n\n                foreach ($dev_iterator as $row) {\n                    $lid = $row['id'];\n                    unset($row['id']);\n                    $components[$link_type][$lid] = $row;\n                }\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => 1,\n                'Item_DeviceMemory' => 0,\n                'Item_DeviceHardDrive' => 0,\n                'Item_DeviceNetworkCard' => 0,\n                'Item_DevicePci' => 0,\n                'Item_DevicePowerSupply' => 0,\n                'Item_DeviceGeneric' => 0,\n                'Item_DeviceSimcard' => 0,\n            ];\n\n            foreach ($expecteds as $type => $count) {\n                $this->integer(count($components[$type]))->isIdenticalTo(\n                    $count,\n                    sprintf(\n                        'Expected %1$s %2$s, got %3$s of them',\n                        $count,\n                        $type,\n                        count($components[$type])\n                    )\n                );\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => [\n                    [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'devicefirmwares_id' => 104,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'serial' => null,\n                        'otherserial' => null,\n                        'locations_id' => 0,\n                        'states_id' => 0,\n                    ]\n                ],\n                'Item_DeviceMemory' => [],\n                'Item_DeviceHardDrive' => [],\n                'Item_DeviceNetworkCard' => [],\n                'Item_DevicePci' => [],\n                'Item_DevicePowerSupply' => [],\n                'Item_DeviceGeneric' => [],\n                'Item_DeviceSimcard' => [],\n            ];\n\n            foreach ($expecteds as $type => $expected) {\n                $component = array_values($components[$type]);\n                //hack to replace expected fkeys\n                foreach ($expected as $i => &$row) {\n                    foreach (array_keys($row) as $key) {\n                        if (isForeignKeyField($key)) {\n                            $row[$key] = $component[$i][$key];\n                        }\n                    }\n                }\n                $this->array($component)->isIdenticalTo($expected);\n            }\n\n            //ports connections\n            $connections = $DB->request([\n                'FROM'   => \\NetworkPort_NetworkPort::getTable(),\n            ]);\n\n            $this->integer(count($connections))->isIdenticalTo(63);\n        }\n\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(63);\n\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(63);\n\n        $expecteds = [\n            [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.52',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.156',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.40',\n            ], [\n                'name' => 'Hewlett Packard',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.55',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.81',\n            ], [\n                'name' => 'Xiamen Yeastar Information Technology Co., Ltd.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.115',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.76',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.97',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.167',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.82',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.112',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.80',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.157',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.87',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.108',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.54',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.88',\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Samsung Electronics Co.,Ltd',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hon Hai Precision Ind. Co.,Ltd.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hon Hai Precision Ind. Co.,Ltd.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Samsung Electronics Co.,Ltd',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Ubiquiti Inc',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hub',\n                'accepted' => 0,\n                'hub' => 1,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Intel Corporate',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'SAMSUNG ELECTRO-MECHANICS(THAILAND)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Ubiquiti Inc',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hub',\n                'accepted' => 0,\n                'hub' => 1,\n                'ip' => null,\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'ASUSTek COMPUTER INC.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.146',\n            ], [\n                'name' => 'G-PRO COMPUTER',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.140',\n            ], [\n                'name' => 'KYOCERA Display Corporation',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Routerboard.com',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Routerboard.com',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Ubiquiti Inc',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Apple, Inc.',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Hub',\n                'accepted' => 0,\n                'hub' => 1,\n                'ip' => null,\n            ], [\n                'name' => 'Microsoft Corporation',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => null,\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.51',\n            ], [\n                'name' => 'Cisco IP Phone SPA303',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.63.128',\n            ]\n        ];\n\n        $this->integer(count($expecteds))->isIdenticalTo($unmanageds->count());\n\n        $i = 0;\n        foreach ($unmanageds as $unmanaged) {\n            foreach ($expecteds[$i] as $key => $value) {\n                $this->variable($unmanaged[$key])->isEqualTo($value);\n            }\n            ++$i;\n        }\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(61);\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->integer($neteq['items_id'])->isIdenticalTo($equipments_id);\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(60);\n    }\n\n    public function testImportNetworkEquipmentWireless()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_4.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION[\"glpi_currenttime\"] = $date_now;\n        $inventory = $this->doInventory($json);\n\n       //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('CH-GV1-DSI-WLC-INSID-1-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n       //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('CH-GV1-DSI-WLC-INSID-1-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('CH-GV1-DSI-WLC-INSID-1-2020-12-31-11-28-51')\n         //->string['version']->isIdenticalTo('')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n       //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'CT5520']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Cisco']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'MERY']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created equipments\n        $expected_eq_count = 302;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkEquipment::getTable(),\n            'WHERE'  => ['is_dynamic' => 1]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n\n        $expected_eq = [\n            'id' => null,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'CH-GV1-DSI-WLC-INSID-1',\n            'ram' => null,\n            'serial' => 'FCH1946V219',\n            'otherserial' => null,\n            'contact' => null,\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => null,\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => null,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 0,\n            'uptime' => '53 days, 4:19:42.16',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n\n        $first = true;\n        foreach ($iterator as $row) {\n            $equipments_id = $row['id'];\n            $expected_eq['id'] = $equipments_id;\n            $equipment = new \\NetworkEquipment();\n            $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n            $expected_eq['date_mod'] = $row['date_mod'];\n            $expected_eq['date_creation'] = $row['date_creation'];\n            if (!$first) {\n                $expected_eq['name'] = $row['name'];\n                $expected_eq['serial'] = $row['serial'];\n                $expected_eq['locations_id'] = $row['locations_id'];\n                $expected_eq['networkequipmenttypes_id'] = $row['networkequipmenttypes_id'];\n                $expected_eq['networkequipmentmodels_id'] = $row['networkequipmentmodels_id'];\n                $expected_eq['manufacturers_id'] = $row['manufacturers_id'];\n            }\n            $this->array($row)->isIdenticalTo($expected_eq, print_r($row, true) . print_r($expected_eq, true));\n\n           //check network ports\n            $expected_count = ($first ? 4 : 1);\n            $ports_iterator = $DB->request([\n                'FROM'   => \\NetworkPort::getTable(),\n                'WHERE'  => [\n                    'items_id'           => $equipments_id,\n                    'itemtype'           => 'NetworkEquipment',\n                ],\n            ]);\n            $this->integer(count($ports_iterator))->isIdenticalTo(\n                $expected_count,\n                sprintf(\n                    '%s ports found on %s, %s expected',\n                    count($ports_iterator),\n                    $row['name'],\n                    $expected_count\n                )\n            );\n\n            $expecteds = [\n                'Management' => [\n                    'logical_number' => 0,\n                    'name' => 'Management',\n                    'instantiation_type' => 'NetworkPortAggregate',\n                    'mac' => '58:ac:78:59:45:fb',\n                ],\n            ];\n\n            $ips = [\n                'Management' => [\n                    '1.1.1.1',\n                    '10.65.0.184',\n                    '10.65.0.192',\n                    '169.254.0.192',\n                    '192.168.200.116'\n                ]\n            ];\n\n            $i = 0;\n            $netport = new \\NetworkPort();\n            $all_ports_ids = [];\n            foreach ($ports_iterator as $port) {\n                $ports_id = $port['id'];\n                $all_ports_ids[] = $port['id'];\n                $this->boolean($netport->getFromDB($ports_id))->isTrue();\n                $instantiation = $netport->getInstantiation();\n                if ($port['instantiation_type'] === null) {\n                    $this->boolean($instantiation)->isFalse();\n                } else {\n                    $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n                }\n\n                unset($port['id']);\n                unset($port['date_creation']);\n                unset($port['date_mod']);\n                unset($port['comment']);\n\n                if ($port['mac'] == '58:ac:78:59:45:fb') {\n                    $expected = $expecteds['Management'];\n                    $expected = $expected + [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'ifmtu' => 0,\n                        'ifspeed' => 0,\n                        'ifinternalstatus' => null,\n                        'ifconnectionstatus' => 0,\n                        'iflastchange' => null,\n                        'ifinbytes' => 0,\n                        'ifinerrors' => 0,\n                        'ifoutbytes' => 0,\n                        'ifouterrors' => 0,\n                        'ifstatus' => null,\n                        'ifdescr' => null,\n                        'ifalias' => null,\n                        'portduplex' => null,\n                        'trunk' => 0,\n                        'lastup' => null\n                    ];\n\n                    $this->array($port)->isEqualTo($expected);\n                } else {\n                    $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                    $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                   //$this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortAggregate', print_r($port, true));\n                    $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                    $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n                }\n                ++$i;\n\n               //check for ips\n                $ip_iterator = $DB->request([\n                    'SELECT'       => [\n                        \\IPAddress::getTable() . '.name',\n                        \\IPAddress::getTable() . '.version'\n                    ],\n                    'FROM'   => \\IPAddress::getTable(),\n                    'INNER JOIN'   => [\n                        \\NetworkName::getTable()   => [\n                            'ON'  => [\n                                \\IPAddress::getTable()     => 'items_id',\n                                \\NetworkName::getTable()   => 'id', [\n                                    'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                                ]\n                            ]\n                        ]\n                    ],\n                    'WHERE'  => [\n                        \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                        \\NetworkName::getTable() . '.items_id'  => $ports_id\n                    ]\n                ]);\n\n               //$this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? ['one' => 'one']));\n                if ($port['mac'] == '58:ac:78:59:45:fb') {\n                    foreach ($ip_iterator as $ip) {\n                        $this->array($ips[$port['name']])->contains($ip['name']);\n                    }\n                }\n            }\n\n           //check for components\n            $components = [];\n            $allcount = 0;\n            foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n                $link = getItemForItemtype($link_type);\n                $dev_iterator = $DB->request($link->getTableGroupCriteria($equipment));\n                $allcount += count($dev_iterator);\n                $components[$link_type] = [];\n\n                foreach ($dev_iterator as $row) {\n                    $lid = $row['id'];\n                    unset($row['id']);\n                    $components[$link_type][$lid] = $row;\n                }\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => 1,\n                'Item_DeviceMemory' => 0,\n                'Item_DeviceHardDrive' => 0,\n                'Item_DeviceNetworkCard' => 0,\n                'Item_DevicePci' => 0,\n                'Item_DevicePowerSupply' => 0,\n                'Item_DeviceGeneric' => 0,\n                'Item_DeviceSimcard' => 0,\n            ];\n\n            foreach ($expecteds as $type => $count) {\n                $this->integer(count($components[$type]))->isIdenticalTo(\n                    $count,\n                    sprintf(\n                        'Expected %1$s %2$s, got %3$s of them',\n                        $count,\n                        $type,\n                        count($components[$type])\n                    )\n                );\n            }\n\n            $expecteds = [\n                'Item_DeviceFirmware' => [\n                    [\n                        'items_id' => $equipments_id,\n                        'itemtype' => 'NetworkEquipment',\n                        'devicefirmwares_id' => 104,\n                        'is_deleted' => 0,\n                        'is_dynamic' => 1,\n                        'entities_id' => 0,\n                        'is_recursive' => 0,\n                        'serial' => null,\n                        'otherserial' => null,\n                        'locations_id' => 0,\n                        'states_id' => 0,\n                    ]\n                ],\n                'Item_DeviceMemory' => [],\n                'Item_DeviceHardDrive' => [],\n                'Item_DeviceNetworkCard' => [],\n                'Item_DevicePci' => [],\n                'Item_DevicePowerSupply' => [],\n                'Item_DeviceGeneric' => [],\n                'Item_DeviceSimcard' => [],\n            ];\n\n            foreach ($expecteds as $type => $expected) {\n                $component = array_values($components[$type]);\n               //hack to replace expected fkeys\n                foreach ($expected as $i => &$row) {\n                    foreach (array_keys($row) as $key) {\n                        if (isForeignKeyField($key)) {\n                            $row[$key] = $component[$i][$key];\n                        }\n                    }\n                }\n                $this->array($component)->isIdenticalTo($expected);\n            }\n\n            $first = false;\n        }\n\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(2);\n\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(2);\n\n        $expecteds = [\n            [\n                'name' => 'CH-GV2-DSI-SW-BBONE-1(FOX1819GEG6)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.200.6',\n            ], [\n                'name' => 'CH-GV2-DSI-SW-BBONE-2(FOX1819GEG1)',\n                'accepted' => 0,\n                'hub' => 0,\n                'ip' => '192.168.200.7',\n            ]\n        ];\n\n        $i = 0;\n        foreach ($unmanageds as $unmanaged) {\n            foreach ($expecteds[$i] as $key => $value) {\n                $this->variable($unmanaged[$key])->isEqualTo($value);\n            }\n            ++$i;\n        }\n\n       //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize($expected_eq_count + count($unmanageds));\n\n        $mrules_criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $neteq_criteria = $mrules_criteria;\n        $neteq_criteria['WHERE'][] = ['itemtype' => \\NetworkEquipment::getType()];\n        $iterator = $DB->request($neteq_criteria);\n        $this->integer(count($iterator))->isIdenticalTo($expected_eq_count);\n        foreach ($iterator as $neteq) {\n            $this->string($neteq['name'])->isIdenticalTo('NetworkEquipment import (by serial)');\n            $this->string($neteq['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n\n        $unmanaged_criteria = $mrules_criteria;\n        $unmanaged_criteria['WHERE'][] = ['itemtype' => \\Unmanaged::getType()];\n        $iterator = $DB->request($unmanaged_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(count($unmanageds));\n        foreach ($iterator as $unmanaged) {\n            $this->string($unmanaged['name'])->isIdenticalTo('Global import (by ip+ifdescr)');\n            $this->string($unmanaged['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n        }\n    }\n\n    public function testImportNetworkEquipmentWAggregatedPorts()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'networkequipment_5.json'));\n\n        $date_now = date('Y-m-d H:i:s');\n        $_SESSION[\"glpi_currenttime\"] = $date_now;\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('DGS-3420-52T-2020-12-31-11-28-51')\n         ->string['version']->isIdenticalTo('4.1')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('netinventory');\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $this->array($inventory->getAgent()->fields)\n         ->string['deviceid']->isIdenticalTo('DGS-3420-52T-2020-12-31-11-28-51')\n         ->string['name']->isIdenticalTo('DGS-3420-52T-2020-12-31-11-28-51')\n         //->string['version']->isIdenticalTo('')\n         ->string['itemtype']->isIdenticalTo('NetworkEquipment')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        //get model, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\NetworkEquipmentModel::getTable(), 'WHERE' => ['name' => 'DGS-3420-52T']])->current();\n        $this->array($cmodels);\n        $models_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\NetworkEquipmentType::getTable(), 'WHERE' => ['name' => 'Networking']])->current();\n        $this->array($ctypes);\n        $types_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'D-Link']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        $cloc = $DB->request(['FROM' => \\Location::getTable(), 'WHERE' => ['name' => 'WOB Serverraum']])->current();\n        $this->array($cloc);\n        $locations_id = $cloc['id'];\n\n        //check created computer\n        $equipments_id = $inventory->getAgent()->fields['items_id'];\n        $this->integer($equipments_id)->isGreaterThan(0);\n        $equipment = new \\NetworkEquipment();\n        $this->boolean($equipment->getFromDB($equipments_id))->isTrue();\n\n        $expected = [\n            'id' => $equipments_id,\n            'entities_id' => 0,\n            'is_recursive' => 0,\n            'name' => 'DGS-3420-52T',\n            'ram' => null,\n            'serial' => 'R3843D1000001',\n            'otherserial' => null,\n            'contact' => 'noc@glpi-project.org',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'date_mod' => $equipment->fields['date_mod'],\n            'comment' => null,\n            'locations_id' => $locations_id,\n            'networks_id' => 0,\n            'networkequipmenttypes_id' => $types_id,\n            'networkequipmentmodels_id' => $models_id,\n            'manufacturers_id' => $manufacturers_id,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'uuid' => null,\n            'date_creation' => $equipment->fields['date_creation'],\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'sysdescr' => null,\n            'cpu' => 0,\n            'uptime' => '65 days, 20:13:08.93',\n            'last_inventory_update' => $date_now,\n            'snmpcredentials_id' => 0,\n        ];\n        $this->array($equipment->fields)->isIdenticalTo($expected);\n\n        //check network ports\n        $expected_count = 53;\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $equipments_id,\n                'itemtype'           => 'NetworkEquipment',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo($expected_count);\n\n        $expecteds = [\n            0 => [\n                'itemtype' => 'NetworkEquipment',\n                'logical_number' => 1,\n                'name' => '1/1',\n                'instantiation_type' => 'NetworkPortAggregate',\n                'mac' => 'ac:f1:df:8e:8e:00',\n                'ifmtu' => 1500,\n                'ifspeed' => 1000000000,\n                'ifinternalstatus' => '1',\n                'iflastchange' => '16 days, 3:10:22.89',\n                'ifstatus' => '1',\n                'ifdescr' => 'D-Link DGS-3420-52T R1.50.B03 Port 1 on Unit 1',\n                'ifinbytes' => 1636476664,\n                'ifoutbytes' => 2829646176,\n                'portduplex' => 3\n            ],\n            ($expected_count - 1) => [\n                'logical_number' => 0,\n                'name' => 'Management',\n                'instantiation_type' => 'NetworkPortAggregate',\n                'mac' => 'ac:f1:df:8e:8e:00',\n            ],\n        ];\n\n        $ips = [\n            'Management' => [\n                '192.168.16.51',\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            if (isset($expecteds[$i])) {\n                $expected = $expecteds[$i];\n                $expected = $expected + [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'ifmtu' => 0,\n                    'ifspeed' => 0,\n                    'ifinternalstatus' => null,\n                    'ifconnectionstatus' => 0,\n                    'iflastchange' => null,\n                    'ifinbytes' => null,\n                    'ifinerrors' => 0,\n                    'ifoutbytes' => 0,\n                    'ifouterrors' => 0,\n                    'ifstatus' => null,\n                    'ifdescr' => null,\n                    'ifalias' => null,\n                    'portduplex' => null,\n                    'trunk' => 0,\n                    'lastup' => null\n                ];\n\n                $this->array($port)->isEqualTo($expected);\n            } else {\n                $this->string($port['itemtype'])->isIdenticalTo('NetworkEquipment');\n                $this->integer($port['items_id'])->isIdenticalTo($equipments_id);\n                $this->string($port['instantiation_type'])->isIdenticalTo('NetworkPortEthernet', print_r($port, true));\n                $this->string($port['mac'])->matches('/^(?:(?:[0-9a-f]{2}[\\:]{1}){5}|(?:[0-9a-f]{2}[-]{1}){5}|(?:[0-9a-f]{2}){5})[0-9a-f]{2}$/i');\n                $this->integer($port['is_dynamic'])->isIdenticalTo(1);\n            }\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                foreach ($ip_iterator as $ip) {\n                    $this->array($ips[$port['name']])->contains($ip['name']);\n                }\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('NetworkEquipment') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($equipment));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceMemory' => 0,\n            'Item_DeviceHardDrive' => 0,\n            'Item_DeviceNetworkCard' => 0,\n            'Item_DevicePci' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 0,\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo(\n                $count,\n                sprintf(\n                    'Expected %1$s %2$s, got %3$s of them',\n                    $count,\n                    $type,\n                    count($components[$type])\n                )\n            );\n        }\n\n        $expecteds = [\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $equipments_id,\n                    'itemtype' => 'NetworkEquipment',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceMemory' => [],\n            'Item_DeviceHardDrive' => [],\n            'Item_DeviceNetworkCard' => [],\n            'Item_DevicePci' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [],\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n           //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //ports connections\n        $connections = $DB->request(['FROM' => \\NetworkPort_NetworkPort::getTable()]);\n        $this->integer(count($connections))->isIdenticalTo(36);\n\n        //unmanaged equipments\n        $unmanageds = $DB->request(['FROM' => \\Unmanaged::getTable()]);\n        $this->integer(count($unmanageds))->isIdenticalTo(36);\n    }\n\n    public function testImportRefusedFromAssetRulesWithNoLog()\n    {\n        $rule = new \\Rule();\n\n        //prepares needed rules id\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer constraint (name)'])\n        )->isTrue();\n        $rules_id_torefuse = $rule->fields['id'];\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import denied'])\n        )->isTrue();\n        $rules_id_refuse = $rule->fields['id'];\n        // update action to refused import with no log\n        $action = new \\RuleAction();\n        $action->getFromDBByCrit([\n            \"rules_id\" => $rules_id_refuse,\n        ]);\n        $action->fields['field'] = '_inventory';\n        $action->fields['value'] = 2;\n        $action->update($action->fields);\n\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import (by name)'])\n        )->isTrue();\n        $rules_id_toaccept = $rule->fields['id'];\n\n        //move rule to refuse computer inventory\n        $rulecollection = new \\RuleImportAssetCollection();\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_torefuse,\n                \\RuleCollection::MOVE_BEFORE\n            )\n        )->isTrue();\n\n        //do inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $inventory = $this->doInventory($json);\n\n        //move rule back to accept computer inventory\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_toaccept,\n                \\RuleCollection::MOVE_AFTER\n            )\n        )->isTrue();\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isIdenticalTo(0);\n\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(0);\n    }\n\n    public function testImportRefusedFromAssetRulesWithLog()\n    {\n        $rule = new \\Rule();\n\n        //prepares needed rules id\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer constraint (name)'])\n        )->isTrue();\n        $rules_id_torefuse = $rule->fields['id'];\n\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import denied'])\n        )->isTrue();\n        $rules_id_refuse = $rule->fields['id'];\n\n        //update ruleAction to refused import with log\n        $ruleaction = new \\RuleAction();\n        $this->boolean($ruleaction->getFromDBByCrit(['rules_id' => $rules_id_refuse]))->isTrue();\n        $this->boolean(\n            $ruleaction->update([\n                'id'    => $ruleaction->fields['id'],\n                'field' => '_ignore_import',\n                'action_type' => 'assign',\n                'value' => 1\n            ])\n        )->isTrue();\n\n        $this->boolean(\n            $rule->getFromDBByCrit(['name' => 'Computer import (by name)'])\n        )->isTrue();\n        $rules_id_toaccept = $rule->fields['id'];\n\n        //move rule to refuse computer inventory\n        $rulecollection = new \\RuleImportAssetCollection();\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_torefuse,\n                \\RuleCollection::MOVE_BEFORE\n            )\n        )->isTrue();\n\n        //do inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $inventory = $this->doInventory($json);\n\n        //move rule back to accept computer inventory\n        $this->boolean(\n            $rulecollection->moveRule(\n                $rules_id_refuse,\n                $rules_id_toaccept,\n                \\RuleCollection::MOVE_AFTER\n            )\n        )->isTrue();\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isIdenticalTo(0);\n\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $result = $iterator->current();\n        $expected = [\n            'id' => $result['id'],\n            'name' => 'glpixps',\n            'itemtype' => 'Computer',\n            'entities_id' => 0,\n            'ip' => '[\"192.168.1.142\",\"fe80::b283:4fa3:d3f2:96b1\",\"192.168.1.118\",\"fe80::92a4:26c6:99dd:2d60\",\"192.168.122.1\"]',\n            'mac' => '[\"00:e0:4c:68:01:db\",\"44:85:00:2b:90:bc\",\"52:54:00:fa:20:0e\",\"52:54:00:fa:20:0e\"]',\n            'rules_id' => $result['rules_id'],\n            'method' => null,\n            'serial' => '640HP72',\n            'uuid' => '4c4c4544-0034-3010-8048-b6c04f503732',\n            'agents_id' => 0,\n            'date_creation' => $result['date_creation'],\n            'date_mod' => $result['date_mod'],\n            'autoupdatesystems_id' => $result['autoupdatesystems_id']\n        ];\n\n        $this->array($result)->isEqualTo($expected);\n\n        //check no matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(0);\n\n        //test inventory from refused equipment, will be accepted since rules has been reset ;)\n        $refused = new \\RefusedEquipment();\n        $this->boolean($refused->getFromDB($result['id']))->isTrue();\n\n        $inventory_request = new \\Glpi\\Inventory\\Request();\n        $inventory_request->handleContentType('application/json');\n        $contents = file_get_contents($refused->getInventoryFileName());\n        $inventory_request->handleRequest($contents);\n\n        $redirect_url = $refused->handleInventoryRequest($inventory_request);\n        $this->hasSessionMessages(\n            INFO,\n            [\n                'Inventory is successful, refused entry log has been removed.'\n            ]\n        );\n\n        //refused equipment has been removed\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(0);\n\n        //but a linked computer\n        $gagent = new \\Agent();\n        $this->boolean($gagent->getFromDB($agent['id']))->isTrue();\n\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($gagent->fields['items_id']))->isTrue();\n        $this->string($computer->fields['name'])->isIdenticalTo('glpixps');\n\n        //check no matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(3);\n\n        $criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => []\n        ];\n\n        $monitor_criteria = $criteria;\n        $monitor_criteria['WHERE'] = ['itemtype' => \\Monitor::getType()];\n        $iterator = $DB->request($monitor_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Monitor import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $printer_criteria = $criteria;\n        $printer_criteria['WHERE'] = ['itemtype' => \\Printer::getType()];\n        $iterator = $DB->request($printer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Printer import (by serial)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        $computer_criteria = $criteria;\n        $computer_criteria['WHERE'] = ['itemtype' => \\Computer::getType()];\n        $iterator = $DB->request($computer_criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Computer import (by serial + uuid)');\n        $this->integer($iterator->current()['items_id'])->isIdenticalTo($gagent->fields['items_id']);\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n    }\n\n    public function testImportRefusedFromEntitiesRules()\n    {\n        $this->login();\n\n        $rule = new \\Rule();\n        $input = [\n            'is_active' => 1,\n            'name'      => 'entity refuse rule',\n            'match'     => 'AND',\n            'sub_type'  => \\RuleImportEntity::class,\n            'ranking'   => 1\n        ];\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        // Add criteria\n        $rulecriteria = new \\RuleCriteria();\n        $this->integer(\n            $rulecriteria->add([\n                'rules_id'  => $rules_id,\n                'criteria'  => \"deviceid\",\n                'pattern'   => \"/^glpixps.*/\",\n                'condition' => \\RuleImportEntity::REGEX_MATCH\n            ])\n        )->isGreaterThan(0);\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $this->integer(\n            $ruleaction->add([\n                'rules_id'    => $rules_id,\n                'action_type' => 'assign',\n                'field'       => '_ignore_import',\n                'value'       => 1\n            ])\n        )->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        unset($json->content->bios);\n        unset($json->content->hardware->name);\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(7)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n        $this->array($metadata['provider'])->hasSize(10);\n\n        global $DB;\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['tag']->isIdenticalTo('000005')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isIdenticalTo(0);\n\n        $iterator = $DB->request([\n            'FROM'   => \\RefusedEquipment::getTable(),\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $result = $iterator->current();\n        $expected = [\n            'id' => $result['id'],\n            'name' => '',\n            'itemtype' => 'Computer',\n            'entities_id' => 0,\n            'ip' => '[\"192.168.1.142\",\"fe80::b283:4fa3:d3f2:96b1\",\"192.168.1.118\",\"fe80::92a4:26c6:99dd:2d60\",\"192.168.122.1\"]',\n            'mac' => '[\"00:e0:4c:68:01:db\",\"44:85:00:2b:90:bc\",\"52:54:00:fa:20:0e\",\"52:54:00:fa:20:0e\"]',\n            'rules_id' => $result['rules_id'],\n            'method' => null,\n            'serial' => '',\n            'uuid' => '4c4c4544-0034-3010-8048-b6c04f503732',\n            'agents_id' => 0,\n            'date_creation' => $result['date_creation'],\n            'date_mod' => $result['date_mod'],\n            'autoupdatesystems_id' => $result['autoupdatesystems_id']\n        ];\n\n        $this->array($result)->isEqualTo($expected);\n    }\n\n    public function testImportFiles()\n    {\n        $nbcomputers = countElementsInTable(\\Computer::getTable());\n        $nbprinters = countElementsInTable(\\Printer::getTable());\n\n        $json_name = 'computer_1.json';\n        $json_path = self::INV_FIXTURES . $json_name;\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $result = $conf->importFiles([$json_name => $json_path]);\n        $this\n            ->array($result[$json_name])\n            ->then\n            ->boolean($result[$json_name]['success'])\n            ->isTrue()\n            ->then\n            ->object($result[$json_name]['items'][0])\n            ->isInstanceOf('Computer');\n\n        //1 computer and 1 printer has been inventoried\n        $nbcomputers++;\n        $nbprinters++;\n\n        $this->integer($nbcomputers)->isIdenticalTo(countElementsInTable(\\Computer::getTable()));\n        $this->integer($nbprinters)->isIdenticalTo(countElementsInTable(\\Printer::getTable()));\n    }\n\n    /**\n     * @extensions zip\n     */\n    public function testArchive()\n    {\n        $nbcomputers = countElementsInTable(\\Computer::getTable());\n        $nbprinters = countElementsInTable(\\Printer::getTable());\n        $nbnetequps = countElementsInTable(\\NetworkEquipment::getTable());\n\n        $json_paths = [\n            self::INV_FIXTURES . 'computer_1.json',\n            self::INV_FIXTURES . 'networkequipment_1.json',\n            self::INV_FIXTURES . 'printer_1.json',\n        ];\n\n        UnifiedArchive::archiveFiles($json_paths, self::INVENTORY_ARCHIVE_PATH);\n\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $result = $conf->importFiles(['to_inventory.zip' => self::INVENTORY_ARCHIVE_PATH]);\n\n        $this->array($result)->hasSize(3);\n\n        // Expected result for computer_1.json\n        $this\n            ->boolean($result['to_inventory.zip/computer_1.json']['success'])\n            ->isTrue()\n            ->then\n            ->object($result['to_inventory.zip/computer_1.json']['items'][0])\n            ->isInstanceOf('Computer');\n\n        // Expected result for networkequipment_1.json\n        $this\n            ->boolean($result['to_inventory.zip/networkequipment_1.json']['success'])\n            ->isTrue()\n            ->then\n            ->object($result['to_inventory.zip/networkequipment_1.json']['items'][0])\n            ->isInstanceOf('NetworkEquipment');\n\n        // Expected result for printer_1.json\n        $this\n            ->boolean($result['to_inventory.zip/printer_1.json']['success'])\n            ->isTrue()\n            ->then\n            ->object($result['to_inventory.zip/printer_1.json']['items'][0])\n            ->isInstanceOf('Printer');\n\n        //1 computer 2 printers and a network equipment has been inventoried\n        $nbcomputers++;\n        $nbprinters += 2;\n        $nbnetequps++;\n\n        $this->integer($nbcomputers)->isIdenticalTo(countElementsInTable(\\Computer::getTable()));\n        $this->integer($nbprinters)->isIdenticalTo(countElementsInTable(\\Printer::getTable()));\n        $this->integer($nbnetequps)->isIdenticalTo(countElementsInTable(\\NetworkEquipment::getTable()));\n    }\n\n    public function testImportVirtualMachines()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $count_vms = count($json->content->virtualmachines);\n        $this->integer($count_vms)->isIdenticalTo(6);\n\n        $nb_vms = countElementsInTable(\\ComputerVirtualMachine::getTable());\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check we add only one computer\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers);\n        //check created vms\n        $nb_vms += $count_vms;\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        //change config to import vms as computers\n        $this->login();\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $this->boolean($conf->saveConf(['vm_as_computer' => 1]))->isTrue();\n        $this->logout();\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check we add main computer and one computer per vm\n        //one does not have an uuid, so no computer is created.\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + $count_vms - 1);\n        //check created vms\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        //partial inventory: postgres vm has been stopped\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_vms.json'));\n        $this->doInventory($json);\n\n        //check nothing has changed\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + $count_vms - 1);\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        $iterator = $DB->request([\n            'SELECT' => [\n                \\ComputerVirtualMachine::getTable() . '.id',\n                \\ComputerVirtualMachine::getTable() . '.name AS vm_name',\n                \\VirtualMachineState::getTable() . '.name AS state_name',\n            ],\n            'FROM' => \\ComputerVirtualMachine::getTable(),\n            'INNER JOIN' => [\n                \\VirtualMachineState::getTable() => [\n                    'ON' => [\n                        \\VirtualMachineState::getTable() => 'id',\n                        \\ComputerVirtualMachine::getTable() => 'virtualmachinestates_id'\n                    ]\n                ]\n            ],\n            'WHERE' => [\n                \\ComputerVirtualMachine::getTable() . '.name' => 'db',\n                \\VirtualMachineState::getTable() . '.name' => 'off'\n            ]\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n    }\n\n    public function testUpdateVirtualMachines()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(GLPI_ROOT . '/tests/fixtures/inventories/lxc-server-1.json'));\n\n        $count_vms = count($json->content->virtualmachines);\n        $this->integer($count_vms)->isIdenticalTo(1);\n\n        $nb_vms = countElementsInTable(\\ComputerVirtualMachine::getTable());\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('lxc-server-2022-08-09-17-49-51')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('lxc-server-2022-08-09-17-49-51')\n            ->string['name']->isIdenticalTo('lxc-server-2022-08-09-17-49-51')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n        $computers_id = $agent['items_id'];\n\n        //check we add only one computer\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers);\n        //check created vms\n        $nb_vms += $count_vms;\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($nb_vms);\n\n        $cvms = new \\ComputerVirtualMachine();\n        $this->boolean($cvms->getFromDBByCrit(['computers_id' => $computers_id]))->isTrue();\n\n        $this->array($cvms->fields)\n            ->string['name']->isIdenticalTo('glpi-10-rc1')\n            ->integer['vcpu']->isIdenticalTo(2)\n            ->integer['ram']->isIdenticalTo(2048)\n            ->string['uuid']->isIdenticalTo('487dfdb542a4bfb23670b8d4e76d8b6886c2ed35')\n        ;\n\n        //import again, RAM has changed\n        $json = json_decode(file_get_contents(GLPI_ROOT . '/tests/fixtures/inventories/lxc-server-1.json'));\n        $json_vm = $json->content->virtualmachines[0];\n        $json_vm->memory = 4096;\n        $json_vms = [$json_vm];\n        $json->content->virtualmachines = $json_vms;\n\n        $this->doInventory($json);\n\n        $this->boolean($cvms->getFromDBByCrit(['computers_id' => $computers_id]))->isTrue();\n\n        $this->array($cvms->fields)\n            ->string['name']->isIdenticalTo('glpi-10-rc1')\n            ->integer['vcpu']->isIdenticalTo(2)\n            ->integer['ram']->isIdenticalTo(4096)\n            ->string['uuid']->isIdenticalTo('487dfdb542a4bfb23670b8d4e76d8b6886c2ed35')\n        ;\n    }\n\n    public function testRuleRefuseImportVirtualMachines()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $count_vms = count($json->content->virtualmachines);\n        $this->integer($count_vms)->isIdenticalTo(6);\n\n        $nb_vms = countElementsInTable(\\ComputerVirtualMachine::getTable());\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n\n        //change config to import vms as computers\n        $this->login();\n        $conf = new \\Glpi\\Inventory\\Conf();\n        $this->boolean($conf->saveConf(['vm_as_computer' => 1]))->isTrue();\n        $this->logout();\n\n        //IMPORT rule to refuse \"db\" virtual machine\n        $criteria = [\n            [\n                'condition' => 0,\n                'criteria'  => 'itemtype',\n                'pattern'   => 'Computer',\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_IS,\n                'criteria'  => 'name',\n                'pattern'   => 'db'\n            ]\n        ];\n        $action = [\n            'action_type' => 'assign',\n            'field'       => '_ignore_import',\n            'value'       => \\RuleImportAsset::RULE_ACTION_LINK_OR_NO_IMPORT\n        ];\n        $rule = new \\RuleImportAsset();\n        $collection = new \\RuleImportAssetCollection();\n        $rulecriteria = new \\RuleCriteria();\n\n        $input = [\n            'is_active' => 1,\n            'name'      => 'Refuse one VM creation',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleImportAsset',\n        ];\n\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n        $this->boolean($collection->moveRule($rules_id, 0, $collection::MOVE_BEFORE))->isTrue();\n\n        // Add criteria\n        foreach ($criteria as $crit) {\n            $input = [\n                'rules_id'  => $rules_id,\n                'criteria'  => $crit['criteria'],\n                'pattern'   => $crit['pattern'],\n                'condition' => $crit['condition'],\n            ];\n            $this->integer((int)$rulecriteria->add($input))->isGreaterThan(0);\n        }\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $input = [\n            'rules_id'    => $rules_id,\n            'action_type' => $action['action_type'],\n            'field'       => $action['field'],\n            'value'       => $action['value'],\n        ];\n        $this->integer((int)$ruleaction->add($input))->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        global $DB;\n\n        //check created vms\n        $this->integer(countElementsInTable(\\ComputerVirtualMachine::getTable()))->isIdenticalTo($count_vms);\n\n        //check we add main computer and one computer per vm\n        //one does not have an uuid, so no computer is created.\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + $count_vms - 2);\n    }\n\n    public function testImportDatabases()\n    {\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        //partial inventory: add databases\n\n        //IMPORT rule\n        $criteria = [\n            [\n                'condition' => 0,\n                'criteria'  => 'itemtype',\n                'pattern'   => 'DatabaseInstance',\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_EXISTS,\n                'criteria'  => 'name',\n                'pattern'   => '1'\n            ]\n        ];\n        $action = [\n            'action_type' => 'assign',\n            'field'       => '_inventory',\n            'value'       => \\RuleImportAsset::RULE_ACTION_LINK_OR_IMPORT\n        ];\n        $rule = new \\RuleImportAsset();\n        $collection = new \\RuleImportAssetCollection();\n        $rulecriteria = new \\RuleCriteria();\n\n        $input = [\n            'is_active' => 1,\n            'name'      => 'Database server import (by name)',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleImportAsset',\n        ];\n\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n        $this->boolean($collection->moveRule($rules_id, 0, $collection::MOVE_BEFORE))->isTrue();\n\n        // Add criteria\n        foreach ($criteria as $crit) {\n            $input = [\n                'rules_id'  => $rules_id,\n                'criteria'  => $crit['criteria'],\n                'pattern'   => $crit['pattern'],\n                'condition' => $crit['condition'],\n            ];\n            $this->integer((int)$rulecriteria->add($input))->isGreaterThan(0);\n        }\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $input = [\n            'rules_id'    => $rules_id,\n            'action_type' => $action['action_type'],\n            'field'       => $action['field'],\n            'value'       => $action['value'],\n        ];\n        $this->integer((int)$ruleaction->add($input))->isGreaterThan(0);\n\n        //UPDATE rule\n        $criteria = [\n            [\n                'condition' => 0,\n                'criteria'  => 'itemtype',\n                'pattern'   => 'DatabaseInstance',\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_FIND,\n                'criteria'  => 'name',\n                'pattern'   => '1'\n            ], [\n                'condition' => \\RuleImportAsset::PATTERN_EXISTS,\n                'criteria' => 'name',\n                'pattern' => '1'\n            ]\n        ];\n        $action = [\n            'action_type' => 'assign',\n            'field'       => '_inventory',\n            'value'       => \\RuleImportAsset::RULE_ACTION_LINK_OR_IMPORT\n        ];\n        $rule = new \\RuleImportAsset();\n        $collection = new \\RuleImportAssetCollection();\n        $rulecriteria = new \\RuleCriteria();\n\n        $input = [\n            'is_active' => 1,\n            'name'      => 'Database server update (by name)',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleImportAsset',\n        ];\n\n        $prev_rules_id = $rules_id;\n        $rules_id = $rule->add($input);\n        $this->integer($rules_id)->isGreaterThan(0);\n        $this->boolean($collection->moveRule($rules_id, $prev_rules_id, $collection::MOVE_BEFORE))->isTrue();\n\n        // Add criteria\n        foreach ($criteria as $crit) {\n            $input = [\n                'rules_id'  => $rules_id,\n                'criteria'  => $crit['criteria'],\n                'pattern'   => $crit['pattern'],\n                'condition' => $crit['condition'],\n            ];\n            $this->integer((int)$rulecriteria->add($input))->isGreaterThan(0);\n        }\n\n        // Add action\n        $ruleaction = new \\RuleAction();\n        $input = [\n            'rules_id'    => $rules_id,\n            'action_type' => $action['action_type'],\n            'field'       => $action['field'],\n            'value'       => $action['value'],\n        ];\n        $this->integer((int)$ruleaction->add($input))->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $this->doInventory($json);\n\n        //check nothing has changed\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + 1);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable()))->isIdenticalTo(2);\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_dynamic' => 1]))->isIdenticalTo(2);\n        $this->integer(countElementsInTable(\\Database::getTable()))->isIdenticalTo(3);\n\n        //play an update - nothing should have changed\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $this->doInventory($json);\n\n        //check nothing has changed\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers + 1);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable()))->isIdenticalTo(2);\n        $this->integer(countElementsInTable(\\Database::getTable()))->isIdenticalTo(3);\n\n        //keep only mysql\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $mysql = $json->content->databases_services[0];\n        //update version\n        $mysql->version = 'Ver 15.1 Distrib 10.5.10-MariaDB-modified';\n        $dbs = $mysql->databases;\n\n        $db_glpi = &$dbs[0];\n        $db_glpi->size = 55000;\n        $db_glpi->last_backup_date = '2021-06-25 08:52:44';\n\n        $db_new = &$dbs[1];\n        $db_new->name = 'new_database';\n        $db_new->size = 2048;\n\n        $services = [$mysql];\n        $json->content->databases_services = $services;\n\n        $this->doInventory($json);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_deleted' => 0]))->isIdenticalTo(1);\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_deleted' => 1]))->isIdenticalTo(1);\n\n        //ensure database version has been updated\n        $database = new \\DatabaseInstance();\n        $this->boolean($database->getFromDBByCrit(['name' => 'MariaDB']))->isTrue();\n        $this->string($database->fields['version'])->isIdenticalTo('Ver 15.1 Distrib 10.5.10-MariaDB-modified');\n\n        //- ensure existing instances has been updated\n        $databases = $database->getDatabases();\n        $this->array($databases)->hasSize(2);\n        $this->array(array_pop($databases))\n            ->string['name']->isIdenticalTo('new_database')\n            ->integer['size']->isIdenticalTo(2048);\n        $this->array(array_pop($databases))\n            ->string['name']->isIdenticalTo('glpi')\n            ->integer['size']->isIdenticalTo(55000);\n\n        //test sql syntax error\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));\n        $mysql = $json->content->databases_services[0];\n        //update version\n        $mysql->name = \"Maria'DB\";\n        $dbs = $mysql->databases;\n\n        $db_glpi = &$dbs[0];\n        $db_glpi->size = 55000;\n        $db_glpi->last_backup_date = '2021-06-25 08:52:44';\n\n        $db_new = &$dbs[1];\n        $db_new->name = 'new_database';\n        $db_new->size = 2048;\n\n        $services = [$mysql];\n        $json->content->databases_services = $services;\n\n        $this->doInventory($json);\n\n        //check created databases & instances\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_deleted' => 0]))->isIdenticalTo(1);\n        $this->integer(countElementsInTable(\\DatabaseInstance::getTable(), ['is_deleted' => 1]))->isIdenticalTo(2);\n\n        //ensure database version has been updated\n        $database = new \\DatabaseInstance();\n        $this->boolean($database->getFromDBByCrit(['name' => 'MariaDB']))->isTrue();\n        $this->string($database->fields['version'])->isIdenticalTo('Ver 15.1 Distrib 10.5.10-MariaDB-modified');\n\n        //- ensure existing instances has been updated\n        $databases = $database->getDatabases();\n        $this->array($databases)->hasSize(2);\n        $this->array(array_pop($databases))\n            ->string['name']->isIdenticalTo('new_database')\n            ->integer['size']->isIdenticalTo(2048);\n        $this->array(array_pop($databases))\n            ->string['name']->isIdenticalTo('glpi')\n            ->integer['size']->isIdenticalTo(55000);\n    }\n\n\n    public function testImportPhoneSimCardNoReset()\n    {\n        global $DB;\n\n        $xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <SIMCARDS>\n        <COUNTRY>fr</COUNTRY>\n        <OPERATOR_CODE>2081</OPERATOR_CODE>\n        <OPERATOR_NAME>Orange F</OPERATOR_NAME>\n        <SERIAL>89330126162002971850</SERIAL>\n        <STATE>SIM_STATE_READY</STATE>\n        <LINE_NUMBER></LINE_NUMBER>\n        <SUBSCRIBER_ID>1</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7ne7</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  <ITEMTYPE>Phone</ITEMTYPE>\n</REQUEST>\";\n\n        $this->doInventory($xml, true);\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n\n        //check created computer\n        $phone = new \\Phone();\n        $this->boolean($phone->getFromDB($agent['items_id']))->isTrue();\n\n        //check for components\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_first = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_first))->isIdenticalTo(1);\n\n        //re run inventory to check if item_simcard ID is changed\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'phone_1.json'));\n\n        $this->doInventory($json);\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_second = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_second))->isIdenticalTo(1);\n\n        $this->array($simcards_first)->isIdenticalTo($simcards_second);\n    }\n\n    public function testImportPhoneMultiSimCardNoReset()\n    {\n        global $DB;\n\n        $xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <SIMCARDS>\n        <COUNTRY>fr</COUNTRY>\n        <OPERATOR_CODE>2081</OPERATOR_CODE>\n        <OPERATOR_NAME>Orange F</OPERATOR_NAME>\n        <SERIAL>89330126162002971850</SERIAL>\n        <STATE>SIM_STATE_READY</STATE>\n        <LINE_NUMBER></LINE_NUMBER>\n        <SUBSCRIBER_ID>1</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <SIMCARDS>\n        <COUNTRY>fr</COUNTRY>\n        <OPERATOR_CODE>2081</OPERATOR_CODE>\n        <OPERATOR_NAME>Orange F</OPERATOR_NAME>\n        <SERIAL>23168441316812316511</SERIAL>\n        <STATE>SIM_STATE_READY</STATE>\n        <LINE_NUMBER></LINE_NUMBER>\n        <SUBSCRIBER_ID>2</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <HARDWARE>\n      <NAME>pc002</NAME>\n    </HARDWARE>\n    <BIOS>\n      <SSN>ggheb7ne7</SSN>\n    </BIOS>\n    <VERSIONCLIENT>FusionInventory-Agent_v2.3.19</VERSIONCLIENT>\n  </CONTENT>\n  <DEVICEID>test-pc002</DEVICEID>\n  <QUERY>INVENTORY</QUERY>\n  <ITEMTYPE>Phone</ITEMTYPE>\n</REQUEST>\";\n\n        $this->doInventory($xml, true);\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n\n        //check created computer\n        $phone = new \\Phone();\n        $this->boolean($phone->getFromDB($agent['items_id']))->isTrue();\n\n        //check for components\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_first = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_first))->isIdenticalTo(2);\n\n        //re run inventory to check if item_simcard ID is changed\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'phone_1.json'));\n\n        $this->doInventory($json);\n        $item_devicesimcard = new \\Item_DeviceSimcard();\n        $simcards_second = $item_devicesimcard->find(['itemtype' => 'Phone' , 'items_id' => $agent['items_id']]);\n        $this->integer(count($simcards_second))->isIdenticalTo(2);\n\n        $this->array($simcards_first)->isIdenticalTo($simcards_second);\n    }\n\n\n    public function testImportPhone()\n    {\n        global $DB, $CFG_GLPI;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'phone_1.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n         ->string['deviceid']->isIdenticalTo('Mi9TPro-T\u00e9l\u00e9phoneM-2019-12-18-14-30-16')\n         ->string['version']->isIdenticalTo('example-app-java')\n         ->string['itemtype']->isIdenticalTo('Phone')\n         ->variable['port']->isIdenticalTo(null)\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('Mi9TPro-T\u00e9l\u00e9phoneM-2019-12-18-14-30-16')\n         ->string['name']->isIdenticalTo('Mi9TPro-T\u00e9l\u00e9phoneM-2019-12-18-14-30-16')\n         ->string['itemtype']->isIdenticalTo('Phone')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n         ->integer['items_id']->isGreaterThan(0);\n\n        //check matchedlogs\n        $mlogs = new \\RuleMatchedLog();\n        $found = $mlogs->find();\n        $this->array($found)->hasSize(1);\n\n        $criteria = [\n            'FROM' => \\RuleMatchedLog::getTable(),\n            'LEFT JOIN' => [\n                \\Rule::getTable() => [\n                    'ON' => [\n                        \\RuleMatchedLog::getTable() => 'rules_id',\n                        \\Rule::getTable() => 'id'\n                    ]\n                ]\n            ],\n            'WHERE' => ['itemtype' => \\Phone::getType()]\n        ];\n\n        $iterator = $DB->request($criteria);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n        $this->string($iterator->current()['name'])->isIdenticalTo('Phone import (by serial + uuid)');\n        $this->string($iterator->current()['method'])->isIdenticalTo(\\Glpi\\Inventory\\Request::INVENT_QUERY);\n\n        //get phone models, manufacturer, ...\n        $autoupdatesystems = $DB->request(['FROM' => \\AutoupdateSystem::getTable(), 'WHERE' => ['name' => 'GLPI Native Inventory']])->current();\n        $this->array($autoupdatesystems);\n        $autoupdatesystems_id = $autoupdatesystems['id'];\n\n        $cmodels = $DB->request(['FROM' => \\PhoneModel::getTable(), 'WHERE' => ['name' => 'Mi 9T Pro']])->current();\n        $this->array($cmodels);\n        $computermodels_id = $cmodels['id'];\n\n        $ctypes = $DB->request(['FROM' => \\PhoneType::getTable(), 'WHERE' => ['name' => 'Mi 9T Pro']])->current();\n        $this->array($ctypes);\n        $computertypes_id = $ctypes['id'];\n\n        $cmanuf = $DB->request(['FROM' => \\Manufacturer::getTable(), 'WHERE' => ['name' => 'Xiaomi']])->current();\n        $this->array($cmanuf);\n        $manufacturers_id = $cmanuf['id'];\n\n        //check created phone\n        $phones_id = $inventory->getAgent()->fields['items_id'];\n        $this->integer($phones_id)->isGreaterThan(0);\n        $phone = new \\Phone();\n        $this->boolean($phone->getFromDB($phones_id))->isTrue();\n\n        $expected = [\n            'id' => $phones_id,\n            'entities_id' => 0,\n            'name' => 'Mi9TPro-T\u00e9l\u00e9phoneM',\n            'date_mod' => $phone->fields['date_mod'],\n            'contact' => 'builder',\n            'contact_num' => null,\n            'users_id_tech' => 0,\n            'groups_id_tech' => 0,\n            'comment' => null,\n            'serial' => 'af8d8fcfa6fa4794',\n            'otherserial' => 'release-keys',\n            'locations_id' => 0,\n            'phonetypes_id' => $computertypes_id,\n            'phonemodels_id' => $computermodels_id,\n            'brand' => null,\n            'phonepowersupplies_id' => 0,\n            'number_line' => null,\n            'have_headset' => 0,\n            'have_hp' => 0,\n            'manufacturers_id' => $manufacturers_id,\n            'is_global' => 0,\n            'is_deleted' => 0,\n            'is_template' => 0,\n            'template_name' => null,\n            'users_id' => 0,\n            'groups_id' => 0,\n            'states_id' => 0,\n            'ticket_tco' => '0.0000',\n            'is_dynamic' => 1,\n            'autoupdatesystems_id' => $autoupdatesystems_id,\n            'uuid' => 'af8d3fcfa6fe4784',\n            'date_creation' => $phone->fields['date_creation'],\n            'is_recursive' => 0,\n            'last_inventory_update' => $phone->fields['last_inventory_update'],\n        ];\n        $this->array($phone->fields)->isIdenticalTo($expected);\n\n        //operating system\n        $ios = new \\Item_OperatingSystem();\n        $iterator = $ios->getFromItem($phone);\n        $record = $iterator->current();\n\n        $expected = [\n            'assocID' => $record['assocID'],\n            'name' => 'Q Android 10.0 api 29',\n            'version' => '29',\n            'architecture' => 'arm64-v8a,armeabi-v7a,armeabi',\n            'servicepack' => null,\n        ];\n        $this->array($record)->isIdenticalTo($expected);\n\n        //remote management\n        $mgmt = new \\Item_RemoteManagement();\n        $iterator = $mgmt->getFromItem($phone);\n        $this->integer(count($iterator))->isIdenticalTo(0);\n\n        //volumes\n        $idisks = new \\Item_Disk();\n        $iterator = $idisks->getFromItem($phone);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        $expecteds = [\n            [\n                'totalsize' => 3471,\n                'freesize' => 23,\n            ], [\n                'totalsize' => 51913,\n                'freesize' => 33722,\n            ], [\n                'totalsize' => 51913,\n                'freesize' => 33722,\n            ], [\n                'totalsize' => 51913,\n                'freesize' => 33722,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $volume) {\n            unset($volume['id']);\n            unset($volume['date_mod']);\n            unset($volume['date_creation']);\n            $expected = $expecteds[$i];\n            $expected = $expected + [\n                'fsname'       => null,\n                'name'         => null,\n                'device'       => null,\n                'mountpoint'   => null,\n                'filesystems_id' => 0,\n                'encryption_status' => 0,\n                'encryption_tool' => null,\n                'encryption_algorithm' => null,\n                'encryption_type' => null,\n                'items_id'     => $phones_id,\n                'itemtype'     => 'Phone',\n                'entities_id'  => 0,\n                'is_deleted'   => 0,\n                'is_dynamic'   => 1\n            ];\n            ksort($volume);\n            ksort($expected);\n            $this->array($volume)->isEqualTo($expected);\n            ++$i;\n        }\n\n        //check network ports\n        $iterator = $DB->request([\n            'FROM'   => \\NetworkPort::getTable(),\n            'WHERE'  => [\n                'items_id'           => $phones_id,\n                'itemtype'           => 'Phone',\n            ],\n        ]);\n        $this->integer(count($iterator))->isIdenticalTo(1);\n\n        $expecteds = [\n            [\n                'logical_number' => 1,\n                'name' => 'No description found',\n                'instantiation_type' => 'NetworkPortWifi',\n                'mac' => 'e0:dc:ff:ed:09:59',\n                'ifstatus' => '1',\n                'ifinternalstatus' => '1',\n            ]\n        ];\n\n        $ips = [\n            'No description found'  => [\n                'v4'   => '172.28.214.132',\n            ]\n        ];\n\n        $i = 0;\n        $netport = new \\NetworkPort();\n        foreach ($iterator as $port) {\n            $ports_id = $port['id'];\n            $this->boolean($netport->getFromDB($ports_id))->isTrue();\n            $instantiation = $netport->getInstantiation();\n            if ($port['instantiation_type'] === null) {\n                $this->boolean($instantiation)->isFalse();\n            } else {\n                $this->object($instantiation)->isInstanceOf($port['instantiation_type']);\n            }\n\n            unset($port['id']);\n            unset($port['date_creation']);\n            unset($port['date_mod']);\n            unset($port['comment']);\n\n            $expected = $expecteds[$i];\n            $expected = $expected + [\n                'items_id' => $phones_id,\n                'itemtype' => 'Phone',\n                'entities_id' => 0,\n                'is_recursive' => 0,\n                'is_deleted' => 0,\n                'is_dynamic' => 1,\n                'ifmtu' => 0,\n                'ifspeed' => 0,\n                'ifinternalstatus' => null,\n                'ifconnectionstatus' => 0,\n                'iflastchange' => null,\n                'ifinbytes' => 0,\n                'ifinerrors' => 0,\n                'ifoutbytes' => 0,\n                'ifouterrors' => 0,\n                'ifstatus' => null,\n                'ifdescr' => null,\n                'ifalias' => null,\n                'portduplex' => null,\n                'trunk' => 0,\n                'lastup' => null\n            ];\n\n            $this->array($port)->isEqualTo($expected);\n            ++$i;\n\n            //check for ips\n            $ip_iterator = $DB->request([\n                'SELECT'       => [\n                    \\IPAddress::getTable() . '.name',\n                    \\IPAddress::getTable() . '.version'\n                ],\n                'FROM'   => \\IPAddress::getTable(),\n                'INNER JOIN'   => [\n                    \\NetworkName::getTable()   => [\n                        'ON'  => [\n                            \\IPAddress::getTable()     => 'items_id',\n                            \\NetworkName::getTable()   => 'id', [\n                                'AND' => [\\IPAddress::getTable() . '.itemtype'  => \\NetworkName::getType()]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'  => [\n                    \\NetworkName::getTable() . '.itemtype'  => \\NetworkPort::getType(),\n                    \\NetworkName::getTable() . '.items_id'  => $ports_id\n                ]\n            ]);\n\n            $this->integer(count($ip_iterator))->isIdenticalTo(count($ips[$port['name']] ?? []));\n            if (isset($ips[$port['name']])) {\n                //FIXME: missing all ipv6 :(\n                $ip = $ip_iterator->current();\n                $this->integer((int)$ip['version'])->isIdenticalTo(4);\n                $this->string($ip['name'])->isIdenticalTo($ips[$port['name']]['v4']);\n            }\n        }\n\n        //check for components\n        $components = [];\n        $allcount = 0;\n        foreach (\\Item_Devices::getItemAffinities('Computer') as $link_type) {\n            $link        = getItemForItemtype($link_type);\n            $iterator = $DB->request($link->getTableGroupCriteria($phone));\n            $allcount += count($iterator);\n            $components[$link_type] = [];\n\n            foreach ($iterator as $row) {\n                $lid = $row['id'];\n                unset($row['id']);\n                $components[$link_type][$lid] = $row;\n            }\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => 0,\n            'Item_DeviceFirmware' => 1,\n            'Item_DeviceProcessor' => 1,\n            'Item_DeviceMemory' => 1,\n            'Item_DeviceHardDrive' => 0,\n            'Item_DeviceNetworkCard' => 1,\n            'Item_DeviceDrive' => 0,\n            'Item_DeviceBattery' => 1,\n            'Item_DeviceGraphicCard' => 0,\n            'Item_DeviceSoundCard' => 0,\n            'Item_DeviceControl' => 0,\n            'Item_DevicePci' => 0,\n            'Item_DeviceCase' => 0,\n            'Item_DevicePowerSupply' => 0,\n            'Item_DeviceGeneric' => 0,\n            'Item_DeviceSimcard' => 1,\n            'Item_DeviceSensor' => 48,\n            'Item_DeviceCamera' => 2\n        ];\n\n        foreach ($expecteds as $type => $count) {\n            $this->integer(count($components[$type]))->isIdenticalTo($count, count($components[$type]) . ' ' . $type);\n        }\n\n        $expecteds = [\n            'Item_DeviceMotherboard' => [],\n            'Item_DeviceFirmware' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicefirmwares_id' => 104,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceProcessor' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'deviceprocessors_id' => 3060400,\n                    'frequency' => 1785,\n                    'serial' => null,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'nbcores' => 8,\n                    'nbthreads' => 8,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ],\n            ],\n            'Item_DeviceMemory' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicememories_id' => 4,\n                    'size' => 5523,\n                    'serial' => null,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0\n                ],\n            ],\n            'Item_DeviceHardDrive' => [],\n            'Item_DeviceNetworkCard' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicenetworkcards_id' => 66,\n                    'mac' => 'e0:dc:ff:ed:09:59',\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'busID' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                ]\n            ],\n            'Item_DeviceDrive' => [],\n            'Item_DeviceBattery' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicebatteries_id' => 70,\n                    'manufacturing_date' => null,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => null,\n                    'otherserial' => null,\n                    'locations_id' => 0,\n                    'states_id' => 0,\n                    'real_capacity' => 0\n                ],\n            ],\n            'Item_DeviceGraphicCard' => [],\n            'Item_DeviceSoundCard' => [],\n            'Item_DeviceControl' => [],\n            'Item_DevicePci' => [],\n            'Item_DeviceCase' => [],\n            'Item_DevicePowerSupply' => [],\n            'Item_DeviceGeneric' => [],\n            'Item_DeviceSimcard' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicesimcards_id' => 68,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                    'serial' => '8933150319050352521',\n                    'otherserial' => null,\n                    'states_id' => 0,\n                    'locations_id' => 0,\n                    'lines_id' => 0,\n                    'users_id' => 0,\n                    'groups_id' => 0,\n                    'pin' => '',\n                    'pin2' => '',\n                    'puk' => '',\n                    'puk2' => '',\n                    'msin' => '',\n                    'comment' => null,\n                ]\n            ],\n            'Item_DeviceCamera' => [\n                [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicecameras_id' => 4,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                ], [\n                    'items_id' => $phones_id,\n                    'itemtype' => 'Phone',\n                    'devicecameras_id' => 4,\n                    'is_deleted' => 0,\n                    'is_dynamic' => 1,\n                    'entities_id' => 0,\n                    'is_recursive' => 0,\n                ]\n            ]\n        ];\n\n        foreach ($expecteds as $type => $expected) {\n            $component = array_values($components[$type]);\n            //hack to replace expected fkeys\n            foreach ($expected as $i => &$row) {\n                foreach (array_keys($row) as $key) {\n                    if (isForeignKeyField($key)) {\n                        $row[$key] = $component[$i][$key];\n                    }\n                }\n            }\n            $this->array($component)->isIdenticalTo($expected);\n        }\n\n        //software\n        $isoft = new \\Item_SoftwareVersion();\n        $iterator = $isoft->getFromItem($phone);\n        $this->integer(count($iterator))->isIdenticalTo(4);\n\n        $expecteds = [\n            [\n                'softname' => 'Boutique Amazon',\n                'version' => '18.21.2.100',\n                'dateinstall' => '2019-08-31',\n            ], [\n                'softname' => 'CameraTools',\n                'version' => '1.0',\n                'dateinstall' => '2008-12-31',\n            ], [\n                'softname' => 'Enregistreur d\\'\u00e9cran',\n                'version' => '1.5.9',\n                'dateinstall' => '2008-12-31',\n            ], [\n                'softname' => 'Q Android 10.0 api 29',\n                'version' => '29',\n                'dateinstall' => null,\n            ]\n        ];\n\n        $i = 0;\n        foreach ($iterator as $soft) {\n            $expected = $expecteds[$i];\n            $this->array([\n                'softname'     => $soft['softname'],\n                'version'      => $soft['version'],\n                'dateinstall'  => $soft['dateinstall']\n            ])->isEqualTo($expected);\n            ++$i;\n        }\n    }\n\n    public function testPartialComputerImport()\n    {\n        global $DB;\n\n        //initial import\n        $this->testImportComputer();\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1_partial_volumes.json'));\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(6)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('FusionInventory-Agent_v2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->string['action']->isIdenticalTo('inventory');\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n         ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n         ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n         ->string['itemtype']->isIdenticalTo('Computer')\n         ->integer['agenttypes_id']->isIdenticalTo($agenttype['id']);\n\n        $computer = $this->checkComputer1($agent['items_id']);\n\n        //volumes free sizes\n        $sizes = [\n            11883,\n            15924,\n            603,\n            10740,\n            20872,\n            191\n        ];\n        $this->checkComputer1Volumes($computer, $sizes);\n        $this->checkComputer1Softwares($computer);\n        $this->checkComputer1Batteries($computer);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1_partial_softs.json'));\n        $this->doInventory($json);\n\n        //software versions\n        $versions = [\n            '2.2.8-1.fc31',\n            '31 (Workstation Edition)',\n            '0.20.1-3.fc31',\n            '3.33.0-1.fc31',\n            '3.34.1-1.fc31',\n            '3.12.2-18.fc31',\n            '1.32-2.fc31'\n        ];\n        $this->checkComputer1Softwares($computer, $versions);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1_partial_batteries.json'));\n        $this->doInventory($json);\n\n        //software versions\n        $capacities = [\n            40570,\n        ];\n        $this->checkComputer1Batteries($computer, $capacities);\n    }\n\n    public function testDictionnaryManufacturer()\n    {\n        global $DB;\n\n        //create manufacturer dictionary entry\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n        $collection = new \\RuleDictionnaryManufacturerCollection();\n        $manufacturer = new \\Manufacturer();\n        //$manufacturers_id = $manufacturer->importExternal('Mozilla');\n\n        $rules_id = $rule->add(['name' => 'Set manufacturer',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryManufacturer',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_IS,\n                'pattern' => 'Dell Inc.'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'Dictionary manufacturer'\n            ])\n        )->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2.json'));\n\n        $nb_computers = countElementsInTable(\\Computer::getTable());\n        $inventory = $this->doInventory($json);\n\n        //check inventory metadata\n        $metadata = $inventory->getMetadata();\n        $this->array($metadata)->hasSize(5)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->variable['port']->isIdenticalTo(null)\n            ->string['action']->isIdenticalTo('inventory');\n\n        //check we add only one computer\n        ++$nb_computers;\n        $this->integer(countElementsInTable(\\Computer::getTable()))->isIdenticalTo($nb_computers);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['name']->isIdenticalTo('acomputer-2021-01-26-14-32-36')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $manufacturer = new \\Manufacturer();\n        $this->boolean($manufacturer->getFromDB($computer->fields['manufacturers_id']))->isTrue();\n        $this->string($manufacturer->fields['name'])->isIdenticalTo('Dictionary manufacturer');\n    }\n\n    public function testDictionnaryOperatingSystem()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system = new OperatingSystem();\n        $this->boolean(\n            $operating_system->getFromDB($item_operating->fields['operatingsystems_id'])\n        )->isTrue();\n\n        $this->string($operating_system->fields['name'])->isEqualTo(\"Fedora 31 (Workstation Edition)\");\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystem',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => 'Fedora 31'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'Ubuntu'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system = new OperatingSystem();\n        $this->boolean(\n            $operating_system->getFromDB($item_operating->fields['operatingsystems_id'])\n        )->isTrue();\n\n        $this->string($operating_system->fields['name'])->isEqualTo(\"Ubuntu\");\n    }\n\n    public function testDictionnaryOperatingSystemVersion()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system_version = new OperatingSystemVersion();\n        $this->boolean(\n            $operating_system_version->getFromDB($item_operating->fields['operatingsystemversions_id'])\n        )->isTrue();\n\n        //check if is original value\n        $this->string($operating_system_version->fields['name'])->isEqualTo(\"31 (Workstation Edition)\");\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem version',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystemVersion',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => '31 (Workstation Edition)'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'New version'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_system_version = new OperatingSystemVersion();\n        $this->boolean(\n            $operating_system_version->getFromDB($item_operating->fields['operatingsystemversions_id'])\n        )->isTrue();\n\n        //check if is specific value\n        $this->string($operating_system_version->fields['name'])->isEqualTo(\"New version\");\n    }\n\n    public function testDictionnaryOperatingSystemArchitecture()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_arch = new OperatingSystemArchitecture();\n        $this->boolean(\n            $operating_arch->getFromDB($item_operating->fields['operatingsystemarchitectures_id'])\n        )->isTrue();\n        //check if is original value\n        $this->string($operating_arch->fields['name'])->isEqualTo(\"x86_64\");\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem arch',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystemArchitecture',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => 'x86_64'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'New arch'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_arch = new OperatingSystemArchitecture();\n        $this->boolean(\n            $operating_arch->getFromDB($item_operating->fields['operatingsystemarchitectures_id'])\n        )->isTrue();\n\n        //check if is specific value\n        $this->string($operating_arch->fields['name'])->isEqualTo(\"New arch\");\n    }\n\n    public function testDictionnaryOperatingSystemServicePack()\n    {\n        global $DB;\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        //No service pack from linux (normal)\n        $this->integer($item_operating->fields['operatingsystemservicepacks_id'])->isEqualto(0);\n\n        //create rule dictionnary operating system\n        $rule = new \\Rule();\n        $criteria = new \\RuleCriteria();\n        $action = new \\RuleAction();\n\n        $rules_id = $rule->add(['name' => 'Set specific operatingSystem service pack',\n            'is_active' => 1,\n            'entities_id' => 0,\n            'sub_type' => 'RuleDictionnaryOperatingSystemServicePack',\n            'match' => \\Rule::AND_MATCHING,\n            'condition' => 0,\n            'description' => ''\n        ]);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria on os_name\n        $this->integer(\n            $criteria->add([\n                'rules_id' => $rules_id,\n                'criteria' => 'os_name',\n                'condition' => \\Rule::PATTERN_CONTAIN,\n                'pattern' => 'Fedora 31'\n            ])\n        )->isGreaterThan(0);\n\n        $this->integer(\n            $action->add([\n                'rules_id' => $rules_id,\n                'action_type' => 'assign',\n                'field' => 'name',\n                'value' => 'New service_pack'\n            ])\n        )->isGreaterThan(0);\n\n        //redo an inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check updated computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n\n        //check OS\n        $item_operating = new Item_OperatingSystem();\n        $this->boolean(\n            $item_operating->getFromDBByCrit([\n                \"itemtype\" => 'Computer',\n                \"items_id\" => $agent['items_id'],\n            ])\n        )->isTrue();\n\n        $operating_service_pack = new OperatingSystemServicePack();\n        $this->boolean(\n            $operating_service_pack->getFromDB($item_operating->fields['operatingsystemservicepacks_id'])\n        )->isTrue();\n        //check if is specific value\n        $this->string($operating_service_pack->fields['name'])->isEqualTo(\"New service_pack\");\n    }\n\n    public function testImportStatusAfterClean()\n    {\n        global $DB;\n\n        $this->login();\n\n        //create states to use\n        $state = new \\State();\n        $inv_states_id = $state->add([\n            'name' => 'Has been inventoried'\n        ]);\n        $this->integer($inv_states_id)->isGreaterThan(0);\n\n        $cleaned_states_id = $state->add([\n            'name' => 'Has been cleaned'\n        ]);\n        $this->integer($cleaned_states_id)->isGreaterThan(0);\n\n        \\Config::setConfigurationValues(\n            'inventory',\n            [\n                'states_id_default' => $inv_states_id,\n                'stale_agents_delay' => 1,\n                'stale_agents_action' => exportArrayToDB([\n                    \\Glpi\\Inventory\\Conf::STALE_AGENT_ACTION_STATUS\n                ]),\n                'stale_agents_status' => $cleaned_states_id\n            ]\n        );\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n\n        $inventory = $this->doInventory($json);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $agents_id = $agent['id'];\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        //check states has been set\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($inv_states_id);\n\n        $lockedfield = new \\Lockedfield();\n        $this->boolean($lockedfield->isHandled($computer))->isTrue();\n        $this->array($lockedfield->getLockedValues($computer->getType(), $computers_id))->isEmpty();\n\n        //set agent inventory date in past\n        $invdate = new \\DateTime($agent['last_contact']);\n        $invdate->sub(new \\DateInterval('P1Y'));\n\n        $agent = new \\Agent();\n        $this->boolean(\n            $agent->update([\n                'id' => $agents_id,\n                'last_contact' => $invdate->format('Y-m-d H:i:s')\n            ])\n        )->isTrue();\n\n        //cleanup old agents\n        $name = \\CronTask::launch(-\\CronTask::MODE_INTERNAL, 1, 'Cleanoldagents');\n        $this->string($name)->isIdenticalTo('Cleanoldagents');\n\n        //check computer state has been updated\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($cleaned_states_id);\n\n        $this->boolean($lockedfield->isHandled($computer))->isTrue();\n        $this->array($lockedfield->getLockedValues($computer->getType(), $computers_id))->isEmpty();\n    }\n\n\n    public function testDefaultStatesOnAddWithGlobalLock()\n    {\n        global $DB;\n\n        $this->login();\n\n        //create default states to use\n        $default_states = new \\State();\n        $default_states_id = $default_states->add([\n            'name' => 'Has been inventoried'\n        ]);\n        $this->integer($default_states_id)->isGreaterThan(0);\n\n        $other_state = new \\State();\n        $other_states_id = $other_state->add([\n            'name' => 'Another states'\n        ]);\n        $this->integer($other_states_id)->isGreaterThan(0);\n\n        \\Config::setConfigurationValues(\n            'inventory',\n            [\n                'states_id_default' => $default_states_id,\n            ]\n        );\n\n        //create global  lock on Computer states_id\n        $lock = new Lockedfield();\n        $lock_id = $lock->add([\n            'itemtype' => 'Computer',\n            'items_id' => 0,\n            'field' => 'states_id',\n            'is_global' => 1\n        ]);\n        $this->integer($lock_id)->isGreaterThan(0);\n\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //check created agent\n        $agenttype = $DB->request(['FROM' => \\AgentType::getTable(), 'WHERE' => ['name' => 'Core']])->current();\n        $agents = $DB->request(['FROM' => \\Agent::getTable()]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $agents_id = $agent['id'];\n        $this->array($agent)\n            ->string['deviceid']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['name']->isIdenticalTo('glpixps-2018-07-09-09-07-13')\n            ->string['version']->isIdenticalTo('2.5.2-1.fc31')\n            ->string['itemtype']->isIdenticalTo('Computer')\n            ->string['tag']->isIdenticalTo('000005')\n            ->integer['agenttypes_id']->isIdenticalTo($agenttype['id'])\n            ->integer['items_id']->isGreaterThan(0);\n\n        //check created computer\n        $computers_id = $agent['items_id'];\n        $this->integer($computers_id)->isGreaterThan(0);\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        //check default states has been set\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($default_states_id);\n\n        //update states\n        $this->boolean($computer->update(['id' => $computers_id, 'states_id' => $other_states_id]))->isTrue();\n\n        //redo inventory\n        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_1.json'));\n        $this->doInventory($json);\n\n        //reload computer\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n        //check is same on update\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($other_states_id);\n    }\n\n\n    public function testOtherSerialFromTag()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'use TAG as otherserial',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_tag',\n            'condition' => \\Rule::REGEX_MATCH,\n            'pattern' => '/(.*)/'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'regex_result',\n            'field' => 'otherserial',\n            'value' => '#0'\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $tag = 'a_tag';\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_otherserial_from_tag</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        <TAG>\" . $tag . \"</TAG>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_otherserial_from_tag']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->string($agent['tag'])->isIdenticalTo($tag);\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['otherserial'])->isIdenticalTo($tag);\n\n\n        //redo inventory by updating tag\n        $tag = 'other_tag';\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_otherserial_from_tag</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        <TAG>\" . $tag . \"</TAG>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n\n        //check agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_otherserial_from_tag']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n        $this->string($agent['tag'])->isIdenticalTo($tag);\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['otherserial'])->isIdenticalTo($tag);\n    }\n\n    public function testBusinessRuleOnAddComputer()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'Business rule test',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Computer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Computer add\n        $computer = new \\Computer();\n        $computers_id = $computer->add(['name' => 'Test computer', 'entities_id' => 0]);\n        $this->integer($computers_id)->isGreaterThan(0);\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new computer\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnUpdateComputer()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Computer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Computer add\n        $computer = new \\Computer();\n        $computers_id = $computer->add(['name' => 'Test computer', 'entities_id' => 0]);\n        $this->integer($computers_id)->isGreaterThan(0);\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->variable($computer->fields['comment'])->isNull();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo(0);\n\n        //update computer\n        $this->boolean(\n            $computer->update([\n                'id' => $computers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new computer\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->variable($computer->fields['comment'])->isNull();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo(0);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddAndOnUpdateComputer()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Computer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Computer add\n        $computer = new \\Computer();\n        $computers_id = $computer->add(['name' => 'Test computer', 'entities_id' => 0]);\n        $this->integer($computers_id)->isGreaterThan(0);\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //update computer\n        $this->boolean(\n            $computer->update([\n                'id' => $computers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($computer->getFromDB($computers_id))->isTrue();\n\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new computer\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n            <REQUEST>\n            <CONTENT>\n              <HARDWARE>\n                <NAME>glpixps</NAME>\n                <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n              </HARDWARE>\n              <BIOS>\n                <MSN>640HP72</MSN>\n              </BIOS>\n              <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n            </CONTENT>\n            <DEVICEID>test_setstatusifinventory</DEVICEID>\n            <QUERY>INVENTORY</QUERY>\n            </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->string($computer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($computer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddNetworkEquipment()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'Business rule test',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\NetworkEquipment::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Network Equipment add\n        $neteq = new \\NetworkEquipment();\n        $networkeequipments_id = $neteq->add(['name' => 'Test network equipment', 'entities_id' => 0]);\n        $this->integer($networkeequipments_id)->isGreaterThan(0);\n        $this->boolean($neteq->getFromDB($networkeequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new network equipment\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <DEVICE>\n      <FIRMWARES>\n        <DESCRIPTION>device firmware</DESCRIPTION>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <NAME>UCS 6248UP 48-Port</NAME>\n        <TYPE>device</TYPE>\n        <VERSION>5.0(3)N2(4.02b)</VERSION>\n      </FIRMWARES>\n      <INFO>\n        <COMMENTS>Cisco NX-OS(tm) ucs, Software (ucs-6100-k9-system), Version 5.0(3)N2(4.02b), RELEASE SOFTWARE Copyright (c) 2002-2013 by Cisco Systems, Inc.   Compiled 1/16/2019 18:00:00</COMMENTS>\n        <CONTACT>noc@glpi-project.org</CONTACT>\n        <CPU>4</CPU>\n        <FIRMWARE>5.0(3)N2(4.02b)</FIRMWARE>\n        <ID>0</ID>\n        <LOCATION>paris.pa3</LOCATION>\n        <MAC>8c:60:4f:8d:ae:fc</MAC>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <MODEL>UCS 6248UP 48-Port</MODEL>\n        <NAME>ucs6248up-cluster-pa3-B</NAME>\n        <SERIAL>SSI1912014B</SERIAL>\n        <TYPE>NETWORKING</TYPE>\n        <UPTIME>482 days, 05:42:18.50</UPTIME>\n        <IPS>\n           <IP>127.0.0.1</IP>\n           <IP>10.2.5.10</IP>\n           <IP>192.168.12.5</IP>\n        </IPS>\n      </INFO>\n    </DEVICE>\n    <MODULEVERSION>4.1</MODULEVERSION>\n    <PROCESSNUMBER>1</PROCESSNUMBER>\n  </CONTENT>\n  <DEVICEID>foo</DEVICEID>\n  <QUERY>SNMPQUERY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created networkequipment\n        $neteq = new \\NetworkEquipment();\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        //location is not set by rule on update, but is set from inventory data\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'paris.pa3', true));\n    }\n\n    public function testBusinessRuleOnUpdateNetworkEquipment()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\NetworkEquipment::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Network equipment add\n        $neteq = new \\NetworkEquipment();\n        $networkequipments_id = $neteq->add(['name' => 'Test network equipment', 'entities_id' => 0]);\n        $this->integer($networkequipments_id)->isGreaterThan(0);\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->variable($neteq->fields['comment'])->isNull();\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo(0);\n\n        //update network equipment\n        $this->boolean(\n            $neteq->update([\n                'id' => $networkequipments_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new network equipment\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <DEVICE>\n      <FIRMWARES>\n        <DESCRIPTION>device firmware</DESCRIPTION>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <NAME>UCS 6248UP 48-Port</NAME>\n        <TYPE>device</TYPE>\n        <VERSION>5.0(3)N2(4.02b)</VERSION>\n      </FIRMWARES>\n      <INFO>\n        <COMMENTS>Cisco NX-OS(tm) ucs, Software (ucs-6100-k9-system), Version 5.0(3)N2(4.02b), RELEASE SOFTWARE Copyright (c) 2002-2013 by Cisco Systems, Inc.   Compiled 1/16/2019 18:00:00</COMMENTS>\n        <CONTACT>noc@glpi-project.org</CONTACT>\n        <CPU>4</CPU>\n        <FIRMWARE>5.0(3)N2(4.02b)</FIRMWARE>\n        <ID>0</ID>\n        <LOCATION>paris.pa3</LOCATION>\n        <MAC>8c:60:4f:8d:ae:fc</MAC>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <MODEL>UCS 6248UP 48-Port</MODEL>\n        <NAME>ucs6248up-cluster-pa3-B</NAME>\n        <SERIAL>SSI1912014B</SERIAL>\n        <TYPE>NETWORKING</TYPE>\n        <UPTIME>482 days, 05:42:18.50</UPTIME>\n        <IPS>\n           <IP>127.0.0.1</IP>\n           <IP>10.2.5.10</IP>\n           <IP>192.168.12.5</IP>\n        </IPS>\n      </INFO>\n    </DEVICE>\n    <MODULEVERSION>4.1</MODULEVERSION>\n    <PROCESSNUMBER>1</PROCESSNUMBER>\n  </CONTENT>\n  <DEVICEID>foo</DEVICEID>\n  <QUERY>SNMPQUERY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created network equipment\n        $neteq = new \\NetworkEquipment();\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->variable($neteq->fields['comment'])->isNull();\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'paris.pa3', true));\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddAndOnUpdateNetworkEquipment()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\NetworkEquipment::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular Network equipment add\n        $neteq = new \\NetworkEquipment();\n        $networkequipments_id = $neteq->add(['name' => 'Test network equipment', 'entities_id' => 0]);\n        $this->integer($networkequipments_id)->isGreaterThan(0);\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //update network equipment\n        $this->boolean(\n            $neteq->update([\n                'id' => $networkequipments_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($neteq->getFromDB($networkequipments_id))->isTrue();\n\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new network equipment\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<REQUEST>\n  <CONTENT>\n    <DEVICE>\n      <FIRMWARES>\n        <DESCRIPTION>device firmware</DESCRIPTION>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <NAME>UCS 6248UP 48-Port</NAME>\n        <TYPE>device</TYPE>\n        <VERSION>5.0(3)N2(4.02b)</VERSION>\n      </FIRMWARES>\n      <INFO>\n        <COMMENTS>Cisco NX-OS(tm) ucs, Software (ucs-6100-k9-system), Version 5.0(3)N2(4.02b), RELEASE SOFTWARE Copyright (c) 2002-2013 by Cisco Systems, Inc.   Compiled 1/16/2019 18:00:00</COMMENTS>\n        <CONTACT>noc@glpi-project.org</CONTACT>\n        <CPU>4</CPU>\n        <FIRMWARE>5.0(3)N2(4.02b)</FIRMWARE>\n        <ID>0</ID>\n        <LOCATION>paris.pa3</LOCATION>\n        <MAC>8c:60:4f:8d:ae:fc</MAC>\n        <MANUFACTURER>Cisco</MANUFACTURER>\n        <MODEL>UCS 6248UP 48-Port</MODEL>\n        <NAME>ucs6248up-cluster-pa3-B</NAME>\n        <SERIAL>SSI1912014B</SERIAL>\n        <TYPE>NETWORKING</TYPE>\n        <UPTIME>482 days, 05:42:18.50</UPTIME>\n        <IPS>\n           <IP>127.0.0.1</IP>\n           <IP>10.2.5.10</IP>\n           <IP>192.168.12.5</IP>\n        </IPS>\n      </INFO>\n    </DEVICE>\n    <MODULEVERSION>4.1</MODULEVERSION>\n    <PROCESSNUMBER>1</PROCESSNUMBER>\n  </CONTENT>\n  <DEVICEID>foo</DEVICEID>\n  <QUERY>SNMPQUERY</QUERY>\n</REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created network equipment\n        $neteq = new \\NetworkEquipment();\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($neteq->getFromDBByCrit(['serial' => 'SSI1912014B']))->isTrue();\n        $this->string($neteq->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($neteq->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($neteq->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddPrinter()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'Business rule test',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Printer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular printer add\n        $printer = new \\Printer();\n        $printers_id = $printer->add(['name' => 'Test printer', 'entities_id' => 0]);\n        $this->integer($printers_id)->isGreaterThan(0);\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new printer\n        $xml_source = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <REQUEST>\n          <CONTENT>\n            <DEVICE>\n              <INFO>\n                <COMMENTS>RICOH MP C5503 1.38 / RICOH Network Printer C model / RICOH Network Scanner C model / RICOH Network Facsimile C model</COMMENTS>\n                <ID>1</ID>\n                <IPS>\n                  <IP>0.0.0.0</IP>\n                  <IP>10.100.51.207</IP>\n                  <IP>127.0.0.1</IP>\n                </IPS>\n                <LOCATION>Location</LOCATION>\n                <MAC>00:26:73:12:34:56</MAC>\n                <MANUFACTURER>Ricoh</MANUFACTURER>\n                <MEMORY>1</MEMORY>\n                <MODEL>MP C5503</MODEL>\n                <NAME>CLPSF99</NAME>\n                <RAM>1973</RAM>\n                <SERIAL>E1234567890</SERIAL>\n                <TYPE>PRINTER</TYPE>\n                <UPTIME>33 days, 22:19:01.00</UPTIME>\n              </INFO>\n              <PAGECOUNTERS>\n                <TOTAL>1164615</TOTAL>\n              </PAGECOUNTERS>\n            </DEVICE>\n            <MODULEVERSION>5.1</MODULEVERSION>\n            <PROCESSNUMBER>7</PROCESSNUMBER>\n          </CONTENT>\n          <DEVICEID>foo</DEVICEID>\n          <QUERY>SNMPQUERY</QUERY>\n        </REQUEST>\n        ';\n\n        $this->doInventory($xml_source, true);\n\n        //check created printer\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        //location is not set by rule on update, but is set from inventory data\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'Location', true));\n    }\n\n    public function testBusinessRuleOnUpdatePrinter()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Printer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular printer add\n        $printer = new \\Printer();\n        $printers_id = $printer->add(['name' => 'Test printer', 'entities_id' => 0]);\n        $this->integer($printers_id)->isGreaterThan(0);\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->variable($printer->fields['comment'])->isNull();\n        $this->integer($printer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo(0);\n\n        //update printer\n        $this->boolean(\n            $printer->update([\n                'id' => $printers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new printer\n        $xml_source = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <REQUEST>\n          <CONTENT>\n            <DEVICE>\n              <INFO>\n                <COMMENTS>RICOH MP C5503 1.38 / RICOH Network Printer C model / RICOH Network Scanner C model / RICOH Network Facsimile C model</COMMENTS>\n                <ID>1</ID>\n                <IPS>\n                  <IP>0.0.0.0</IP>\n                  <IP>10.100.51.207</IP>\n                  <IP>127.0.0.1</IP>\n                </IPS>\n                <LOCATION>Location</LOCATION>\n                <MAC>00:26:73:12:34:56</MAC>\n                <MANUFACTURER>Ricoh</MANUFACTURER>\n                <MEMORY>1</MEMORY>\n                <MODEL>MP C5503</MODEL>\n                <NAME>CLPSF99</NAME>\n                <RAM>1973</RAM>\n                <SERIAL>E1234567890</SERIAL>\n                <TYPE>PRINTER</TYPE>\n                <UPTIME>33 days, 22:19:01.00</UPTIME>\n              </INFO>\n              <PAGECOUNTERS>\n                <TOTAL>1164615</TOTAL>\n              </PAGECOUNTERS>\n            </DEVICE>\n            <MODULEVERSION>5.1</MODULEVERSION>\n            <PROCESSNUMBER>7</PROCESSNUMBER>\n          </CONTENT>\n          <DEVICEID>foo</DEVICEID>\n          <QUERY>SNMPQUERY</QUERY>\n        </REQUEST>\n        ';\n\n        $this->doInventory($xml_source, true);\n\n        //check created printer\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->variable($printer->fields['comment'])->isNull();\n        $this->integer($printer->fields['states_id'])->isIdenticalTo(0);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo(getItemByTypeName(\\Location::class, 'Location', true));\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testBusinessRuleOnAddAndOnUpdatePrinter()\n    {\n        global $DB;\n\n        //prepare rule contents\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'Test status']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        $location = new \\Location();\n        $locations_id = $location->add(['name' => 'Test location']);\n        $this->integer($locations_id)->isGreaterThan(0);\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name' => 'Business rule test',\n            'match' => 'AND',\n            'sub_type' => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id' => $rules_id,\n            'criteria' => '_itemtype',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => \\Printer::getType()\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        //create actions\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'locations_id',\n            'value' => $locations_id\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        $input_action = [\n            'rules_id' => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'comment',\n            'value' => 'A comment'\n        ];\n        $rule_action = new \\RuleAction();\n        $this->integer($rule_action->add($input_action))->isGreaterThan(0);\n\n        //ensure business rule work on regular printer add\n        $printer = new \\Printer();\n        $printers_id = $printer->add(['name' => 'Test printer', 'entities_id' => 0]);\n        $this->integer($printers_id)->isGreaterThan(0);\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //update network equipment\n        $this->boolean(\n            $printer->update([\n                'id' => $printers_id,\n                'comment' => 'Another comment'\n            ])\n        )->isTrue();\n        $this->boolean($printer->getFromDB($printers_id))->isTrue();\n\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //inventory a new printer\n        $xml_source = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <REQUEST>\n          <CONTENT>\n            <DEVICE>\n              <INFO>\n                <COMMENTS>RICOH MP C5503 1.38 / RICOH Network Printer C model / RICOH Network Scanner C model / RICOH Network Facsimile C model</COMMENTS>\n                <ID>1</ID>\n                <IPS>\n                  <IP>0.0.0.0</IP>\n                  <IP>10.100.51.207</IP>\n                  <IP>127.0.0.1</IP>\n                </IPS>\n                <LOCATION>Location</LOCATION>\n                <MAC>00:26:73:12:34:56</MAC>\n                <MANUFACTURER>Ricoh</MANUFACTURER>\n                <MEMORY>1</MEMORY>\n                <MODEL>MP C5503</MODEL>\n                <NAME>CLPSF99</NAME>\n                <RAM>1973</RAM>\n                <SERIAL>E1234567890</SERIAL>\n                <TYPE>PRINTER</TYPE>\n                <UPTIME>33 days, 22:19:01.00</UPTIME>\n              </INFO>\n              <PAGECOUNTERS>\n                <TOTAL>1164615</TOTAL>\n              </PAGECOUNTERS>\n            </DEVICE>\n            <MODULEVERSION>5.1</MODULEVERSION>\n            <PROCESSNUMBER>7</PROCESSNUMBER>\n          </CONTENT>\n          <DEVICEID>foo</DEVICEID>\n          <QUERY>SNMPQUERY</QUERY>\n        </REQUEST>\n        ';\n\n        $this->doInventory($xml_source, true);\n\n        //check created printer\n        $printer = new \\Printer();\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($printer->getFromDBByCrit(['serial' => 'E1234567890']))->isTrue();\n        $this->string($printer->fields['comment'])->isIdenticalTo('A comment');\n        $this->integer($printer->fields['states_id'])->isIdenticalTo($states_id);\n        $this->integer($printer->fields['locations_id'])->isIdenticalTo($locations_id);\n    }\n\n    public function testStatusIfInventoryOnAdd()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'set status if inventory',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_auto',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => '1'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'test_status_if_inventory']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n    }\n\n    public function testStatusIfInventoryOnUpdate()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'set status if inventory',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_auto',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => '1'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'test_status_if_inventory']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo(0);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n    }\n\n    public function testStatusIfInventoryOnAddUpdate()\n    {\n        global $DB;\n\n        //create rule\n        $input_rule = [\n            'is_active' => 1,\n            'name'      => 'set status if inventory',\n            'match'     => 'AND',\n            'sub_type'  => 'RuleAsset',\n            'condition' => \\RuleAsset::ONADD + \\RuleAsset::ONUPDATE\n        ];\n\n        $rule = new \\Rule();\n        $rules_id = $rule->add($input_rule);\n        $this->integer($rules_id)->isGreaterThan(0);\n\n        //create criteria\n        $input_criteria = [\n            'rules_id'  => $rules_id,\n            'criteria'      => '_auto',\n            'condition' => \\Rule::PATTERN_IS,\n            'pattern' => '1'\n        ];\n        $rule_criteria = new \\RuleCriteria();\n        $rule_criteria_id = $rule_criteria->add($input_criteria);\n        $this->integer($rule_criteria_id)->isGreaterThan(0);\n\n        $state = new \\State();\n        $states_id = $state->add(['name' => 'test_status_if_inventory']);\n        $this->integer($states_id)->isGreaterThan(0);\n\n        //create action\n        $input_action = [\n            'rules_id'  => $rules_id,\n            'action_type' => 'assign',\n            'field' => 'states_id',\n            'value' => $states_id\n        ];\n        $rule_action = new \\RuleAction();\n        $rule_action_id = $rule_action->add($input_action);\n        $this->integer($rule_action_id)->isGreaterThan(0);\n\n        $xml_source = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n        <REQUEST>\n        <CONTENT>\n          <HARDWARE>\n            <NAME>glpixps</NAME>\n            <UUID>25C1BB60-5BCB-11D9-B18F-5404A6A534C4</UUID>\n          </HARDWARE>\n          <BIOS>\n            <MSN>640HP72</MSN>\n          </BIOS>\n          <VERSIONCLIENT>FusionInventory-Inventory_v2.4.1-2.fc28</VERSIONCLIENT>\n        </CONTENT>\n        <DEVICEID>test_setstatusifinventory</DEVICEID>\n        <QUERY>INVENTORY</QUERY>\n        </REQUEST>\";\n\n        $this->doInventory($xml_source, true);\n\n        //check created agent\n        $agents = $DB->request(['FROM' => \\Agent::getTable(), \"WHERE\" => ['deviceid' => 'test_setstatusifinventory']]);\n        $this->integer(count($agents))->isIdenticalTo(1);\n        $agent = $agents->current();\n\n        //check created computer\n        $computer = new \\Computer();\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n\n        //redo inventory\n        $this->doInventory($xml_source, true);\n        $this->boolean($computer->getFromDB($agent['items_id']))->isTrue();\n        $this->integer($computer->fields['states_id'])->isIdenticalTo($states_id);\n    }\n}\n"], "filenames": ["src/RuleImportAsset.php", "tests/functional/Glpi/Inventory/Assets/Bios.php", "tests/functional/Glpi/Inventory/Inventory.php"], "buggy_code_start_loc": [36, 147, 4912], "buggy_code_end_loc": [522, 223, 4912], "fixing_code_start_loc": [37, 147, 4913], "fixing_code_end_loc": [524, 223, 4952], "type": "CWE-89", "message": "GLPI is a free asset and IT management software package. Starting in version 10.0.0 and prior to version 10.0.11, GLPI inventory endpoint can be used to drive a SQL injection attack. Version 10.0.11 contains a patch for the issue. As a workaround, disable native inventory.", "other": {"cve": {"id": "CVE-2023-46727", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-13T19:15:08.047", "lastModified": "2023-12-18T18:57:31.453", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a free asset and IT management software package. Starting in version 10.0.0 and prior to version 10.0.11, GLPI inventory endpoint can be used to drive a SQL injection attack. Version 10.0.11 contains a patch for the issue. As a workaround, disable native inventory."}, {"lang": "es", "value": "GLPI es un paquete de software gratuito de gesti\u00f3n de activos y TI. A partir de la versi\u00f3n 10.0.0 y anteriores a la versi\u00f3n 10.0.11, el endpoint del inventario GLPI se puede utilizar para impulsar un ataque de inyecci\u00f3n SQL. La versi\u00f3n 10.0.11 contiene un parche para el problema. Como workaround, deshabilite el inventario nativo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.0.11", "matchCriteriaId": "26DF2F46-6455-4440-BB5D-75FEB6798705"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/ee2d674481ebef177037e8e14d35c9455b5cfd46", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/glpi-project/glpi/releases/tag/10.0.11", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-v799-2mp3-wgfr", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/ee2d674481ebef177037e8e14d35c9455b5cfd46"}}