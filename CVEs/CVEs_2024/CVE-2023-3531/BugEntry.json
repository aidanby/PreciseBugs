{"buggy_code": ["/*\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @version   \n * @file      functions.js\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\n/**\n*   Countdown before session expiration\n**/\nfunction countdown()\n{\n    // if a process is in progress then do not decrease the time counter.\n    if (typeof ProcessInProgress !== 'undefined' && ProcessInProgress === true) {\n        $('.countdown-icon')\n            .addClass('fas fa-history')\n            .removeClass('far fa-clock');\n        \n        $(this).delay(1000).queue(function()\n        {\n            countdown();\n            $(this).dequeue();\n        });\n\n        return false;\n    }\n\n    // Continue\n    let DayTill;\n    let hoursInDay = 24;\n    let limitTen = 10;\n    let oneSecondsMs = 1000;\n    let theDay =  $('#temps_restant').val();\n    let today = new Date();\n    let second = Math.floor(theDay - today.getTime() / oneSecondsMs);\n    let minute = Math.floor(second / hourInMinutes);\n    let hour = Math.floor(minute / hourInMinutes);\n    let CHour= hour % hoursInDay;\n    if (CHour < limitTen) {\n        CHour = '0' + CHour;\n    }\n    let CMinute= minute % hourInMinutes;\n    if (CMinute < limitTen) {\n        CMinute = '0' + CMinute;\n    }\n    let CSecond= second % hourInMinutes;\n    if (CSecond < limitTen) {\n        CSecond = '0' + CSecond;\n    }\n    DayTill = CHour + ':' + CMinute + ':' + CSecond;\n\n    // Session will soon be closed\n    if (DayTill === '00:00:50') {\n        showExtendSession();\n        $('#countdown').css('color', 'red');\n    }\n\n    // Manage end of session\n    if ($('#temps_restant').val() !== '' && DayTill <= '00:00:00' && parseInt($('#please_login').val()) !== 1) {\n        $('#please_login').val('1');\n        $(location).attr('href','index.php?session=expired');\n    }\n\n    //Rewrite the string to the correct information.\n    if ($('#countdown')) {\n        $('#countdown').html('<i class=\"far fa-clock countdown-icon mr-1\"></i>' + DayTill);\n    }\n\n    //Create the timer 'counter' that will automatic restart function countdown() again every second.\n    $(this).delay(1000).queue(function()\n    {\n        countdown();\n        $(this).dequeue();\n    });\n}\n\n\n/**\n*\n**/\nfunction unsanitizeString(string) {\n    if(string !== \"\" && string !== null) {\n        string = string.replace(/\\\\/g,\"\").replace(/&#92;/g, \"\\\\\").replace(/&quot;/g, '\"');\n    }\n    return string;\n}\n\n/**\n*   Clean up a string and delete any scripting tags\n**/\nfunction sanitizeString(string) {\n    if(string !== \"\" && string !== null && string !== undefined) {\n        string = string.replace(/\\\\/g,\"&#92;\").replace(/\"/g,\"&quot;\");\n        string = string.replace(new RegExp(\"\\\\s*<script[^>]*>[\\\\s\\\\S]*?</script>\\\\s*\",\"ig\"), \"\");\n    }\n    return string;\n}\n\n/**\n*   Checks if URL has expected format\n**/\nfunction validateURL(url) {\n    let urlregex = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return urlregex.test(url);\n}\n\n\nfunction split( val ) {\n    return val.split( / \\s*/ );\n}\n\nfunction extractLast( term ) {\n    return split( term ).pop();\n}\n\n/**\n * Shows error message\n * @param  {string} message  Message to display\n * @return {boolean}         False\n */\nfunction jsonErrorHdl(message)\n{\n    //show as confirm\n    // Prepare modal\n    showModalDialogBox(\n        '#warningModal',\n        '<i class=\"fas fa-warning fa-lg warning mr-2\"></i>Caution',\n        message,\n        '',\n        'Close',\n        true,\n        true\n    );\n\n    // Actions on modal buttons\n    $(document).on('click', '#warningModalButtonClose', function() {\n        \n    });\n    $(document).on('click', '#warningModalButtonAction', function() {\n        // SHow user\n    });\n    return false;\n}\n\n/**\n * [prepareExchangedData description]\n * @param  {[type]} data [description]\n * @param  {[type]} type [description]\n * @param  {[type]} key  [description]\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n * @return {[type]}      [description]\n */\nfunction prepareExchangedData(data, type, key, fileName = '', functionName = '')\n{\n    if (type === 'decode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            try {\n                return $.parseJSON(data);\n            }\n            catch (e) {\n                return jsonErrorHdl(data);\n            }\n        } else {\n            try {\n                let encryption = new Encryption();\n                return JSON.parse(encryption.decrypt(data, key));\n            }\n            catch (e) {\n                return jsonErrorHdl('<b>Next error occurred</b><div>' + e + '</div>'\n                    + (fileName !== '' ? '<br><b>Informations:</b><div>  - File: ' + fileName + '<br>  - Function: ' + functionName + '</div>': '')\n                    + '<div><br><b>Raw answer from server:</b><br>'+data+'</div>');\n            }\n        }\n    } else if (type === 'encode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            return stripHtml(data);\n        } else {\n            let encryption = new Encryption();\n            return encryption.encrypt(data, key);\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction isJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n\n/**\n * Returns the text from a HTML string\n * \n * @param {string} String The html string\n */\nfunction stripHtml(html) {\n    // Create a new div element\n    let temporalDivElement = document.createElement('div');\n    // Set the HTML content with the providen\n    temporalDivElement.innerHTML = html;\n    // Retrieve the text property of the element (cross-browser support)\n    return temporalDivElement.textContent || temporalDivElement.innerText || '';\n}\n\n\n/**\n * \n * @param {string} data Crypted string\n * @param {string} key  Session key\n */\nfunction unCryptData(data, key)\n{\n    if (data !== undefined && data.substr(0, 7) === 'crypted') {\n        let uncryptedData = prepareExchangedData(\n            data.substr(7),\n            'decode',\n            key\n        )\n        \n        if (uncryptedData.password.length > 0)\n            return uncryptedData.password;\n        else\n            return false;\n    }\n    return false;\n}\n\n/**\n * \n * @param {string}data Crypted string\n * @param {string}key  Session key\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n */\nfunction decodeQueryReturn(data, key, fileName = '', functionName = '')\n{\n    try {\n        return prepareExchangedData(data , \"decode\", key, fileName, functionName);\n    } catch (e) {\n        // error\n        toastr.remove();\n        toastr.error(\n            'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n            'Error', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n        return false;\n    }\n}\n\n/**\n * \n * @param {string} action Action\n * @param {string} name   Name\n * @param {array} data    Data\n */\nfunction browserSession(action, name, data)\n{\n    // Initialize the session\n    if (action === 'init') {\n        if (store.get(name) === 'undefined'\n            || store.get(name) === undefined\n        ) {\n            store.set(\n                name,\n                data\n            );\n        } else {\n            // Ensure all entries exist\n            $(data).each(function(value, key) {\n                store.update(\n                    name,\n                    function(bSession)\n                    {\n                        bSession.key = value;\n                    }\n                )\n            });\n        }\n    }\n}\n\n/**\n * \n * @param {string} modalId      Modal id\n * @param {string} title        Title\n * @param {string} body         Body\n * @param {string} actionButton Action Button\n * @param {string} closeButton  Close Button\n * @param {string} xlSize       Size\n * @param {string} warningModal Warning Modal\n * @param {string} closeCross   Close on cross\n */\nfunction showModalDialogBox(\n    modalId,\n    title,\n    body,\n    actionButton,\n    closeButton,\n    xlSize = false,\n    warningModal = false,\n    closeCross = true\n) {\n    $(modalId + 'Title').html(title);\n    $(modalId + 'Body').html(body);\n    if (actionButton === '') {\n        $(modalId + 'ButtonAction').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonAction').removeClass('hidden');\n        $(modalId + 'ButtonAction').html(actionButton);\n    }\n    if (closeButton === '') {\n        $(modalId + 'ButtonClose').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonClose').removeClass('hidden');\n        $(modalId + 'ButtonClose').html(closeButton);\n    }\n    if (xlSize === true) {\n        $(modalId + ' div:first').addClass('modal-xl');\n    } else {\n        $(modalId + ' div:first').removeClass('modal-xl');\n    }\n    if (warningModal === true) {\n        $(modalId + ':eq(1)').addClass('bg-warning');\n    } else {\n        $(modalId + ':eq(1)').removeClass('bg-warning');\n    }\n    if (closeCross === false) {\n        $(modalId + 'CrossClose').addClass('hidden');\n    } else {\n        $(modalId + 'CrossClose').removeClass('hidden');\n    }\n    $(modalId).modal({\n        backdrop : 'static',\n        keyboard : false,\n        show: true,\n        focus: true\n    });\n    $(modalId).modal('handleUpdate');\n}\n\n/**\n * Sanitize a string\n * \n * @param {string} str  The string\n */\nfunction htmlEncode(str){\n    return String(str).replace(/[^\\w. ]/gi, function(c){\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n/* Extend String object with method to encode multi-byte string to utf8\n * - monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\n * - note utf8Encode is an identity function with 7-bit ascii strings, but not with 8-bit strings;\n * - utf8Encode('x') = 'x', but utf8Encode('\u00e7a') = '\u00c3\u00a7a', and utf8Encode('\u00c3\u00a7a') = '\u00c3\u0083\u00c2\u00a7a'*/\nif (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function() {\n        return unescape( encodeURIComponent( this ) );\n    };\n}\n\n/* Extend String object with method to decode utf8 string to multi-byte */\nif (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function() {\n        try {\n            return decodeURIComponent( escape( this ) );\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n}\n\nfunction simplePurifier(\n    text,\n    bHtml = false,\n    bSvg = false,\n    bSvgFilters = false\n)\n{\n    return DOMPurify.sanitize(\n        text\n            .replaceAll('&lt;', '<')\n            .replaceAll('&gt;', '>')\n            .replaceAll('&amp;', '&')\n            .replaceAll('&quot;', '\"')\n            .replaceAll('&#39;', \"'\"),\n        {USE_PROFILES: {html:bHtml, svg:bSvg, svgFilters: bSvgFilters}}\n    );\n}\n\n/**\n * Permits to purify the content of a string using domPurify\n * @param {*} field \n * @param {*} bHtml \n * @param {*} bSvg \n * @param {*} bSvgFilters \n * @param {*} text \n * @returns bool||string\n */\nfunction fieldDomPurifier(\n    field,\n    bHtml = false,\n    bSvg = false,\n    bSvgFilters = false,\n    text = ''\n)\n{\n    if (field === undefined ||field === '') {\n        return false;\n    }\n    let string = '';\n    text = (text === '') ? $(field).val() : text;\n\n    // Purify string\n    string = simplePurifier(text, bHtml, bSvg, bSvgFilters);\n    \n    // Clear field if string is empty and warn user\n    if (string === '' && text !== '') {\n        $(field).val('');\n        return false;\n    }\n\n    return string;\n}\n\n/**\n * Permits to get all fields of a class and purify them\n * @param {*} elementClass \n * @returns array\n */\nfunction fieldDomPurifierLoop(elementClass)\n{\n    let purifyStop = false,\n        arrFields = [];\n    $.each($(elementClass), function(index, element) {\n        purifiedField = fieldDomPurifier(\n            '#' + $(element).attr('id'), \n            $(element).hasClass('purifyHtml') === true ? true : false,\n            $(element).hasClass('purifySvg') === true ? true : false,\n            $(element).hasClass('purifySvgFilter') === true ? true : false,\n            typeof $(element).data('purify-text') !== undefined ? $(element).data('purify-text') : ''\n        );\n\n        if (purifiedField === false) {\n            // Label is empty\n            toastr.remove();\n            toastr.warning(\n                'XSS attempt detected. Please remove all special characters from your input.',\n                'Error', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            $('#' + $(element).attr('id')).focus();\n            purifyStop = true;\n            return {\n                'purifyStop' : purifyStop,\n                'arrFields' : arrFields\n            };\n        } else {\n            $(element).val(purifiedField);\n            arrFields[$(element).data('field')] = purifiedField;\n        }\n    });\n    \n    // return\n    return {\n        'purifyStop' : purifyStop,\n        'arrFields' : arrFields\n    };\n}\n\n/**\n * Permits to purify the content of a string using domPurify\n * @param {*} field \n * @param {*} bHtml \n * @param {*} bSvg \n * @param {*} bSvgFilters \n * @returns bool||string\n */\nfunction fieldDomPurifierWithWarning(\n    field,\n    bHtml = false,\n    bSvg = false,\n    bSvgFilters = false,\n)\n{\n    if (field === undefined || field === '') {\n        return false;\n    }\n    if ($(field).val() === '') {\n        return '';\n    }\n    let string = '';\n\n    // Purify string\n    string = simplePurifier($(field).val(), bHtml, bSvg, bSvgFilters);\n    \n    // Clear field if string is empty and warn user\n    if (string === '') {\n        toastr.remove();\n        toastr.warning(\n            'XSS attempt detected. Please remove all special characters from your input.',\n            'Error', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n        $(field).focus();\n        return false;\n    }\n\n    return string;\n}", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      install.queries.php\n * ---\n * @author    Nils Laumaill\u0102\u00a9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\nuse TiBeN\\CrontabManager\\CrontabJob;\nuse TiBeN\\CrontabManager\\CrontabAdapter;\nuse TiBeN\\CrontabManager\\CrontabRepository;\n\nset_time_limit(600);\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\nheader('Content-type: text/html; charset=utf-8');\n$session_db_encoding = 'utf8';\ndefine('MIN_PHP_VERSION', 7.4);\n\n/**\n * Generates a random key.\n */\nfunction generateRandomKey()\n{\n    // load passwordLib library\n    $path = '../includes/libraries/PasswordGenerator/Generator/';\n    include_once $path . 'ComputerPasswordGenerator.php';\n\n    $generator = new PasswordGenerator\\Generator\\ComputerPasswordGenerator();\n\n    $generator->setLength(40);\n    $generator->setSymbols(false);\n    $generator->setLowercase(true);\n    $generator->setUppercase(true);\n    $generator->setNumbers(true);\n\n    $key = $generator->generatePasswords();\n\n    return $key[0];\n}\n\n/**\n * Permits to encrypt a message using Defuse.\n *\n * @param string $message   Message to encrypt\n * @param string $ascii_key Key to hash\n *\n * @return array String + Error\n */\nfunction encryptFollowingDefuse($message, $ascii_key)\n{\n    // load PhpEncryption library\n    $path = '../includes/libraries/Encryption/Encryption/';\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    require_once $path . 'Crypto.php';\n    require_once $path . 'Encoding.php';\n    require_once $path . 'DerivedKeys.php';\n    require_once $path . 'Key.php';\n    require_once $path . 'KeyOrPassword.php';\n    require_once $path . 'File.php';\n    require_once $path . 'RuntimeTests.php';\n    require_once $path . 'KeyProtectedByPassword.php';\n    require_once $path . 'Core.php';\n    //echo $message . \" -- \".$ascii_key.\"<br>\";\n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n\n    try {\n        $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.';\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    return array(\n        'string' => isset($text) ? $text : '',\n        'error' => $err,\n    );\n}\n\n// Prepare POST variables\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_FULL_SPECIAL_CHARS, FILTER_FLAG_NO_ENCODE_QUOTES);\n$post_activity = filter_input(INPUT_POST, 'activity', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_task = filter_input(INPUT_POST, 'task', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_index = filter_input(INPUT_POST, 'index', FILTER_SANITIZE_NUMBER_INT);\n$post_multiple = filter_input(INPUT_POST, 'multiple', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_db = filter_input(INPUT_POST, 'db', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n// Load libraries\nrequire_once '../sources/main.functions.php';\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare SESSION variables\n$session_url_path = $superGlobal->get('url_path', 'SESSION');\n$session_abspath = $superGlobal->get('absolute_path', 'SESSION');\n$session_db_encoding = $superGlobal->get('db_encoding', 'SESSION');\nif (empty($session_db_encoding) === true) {\n    $session_db_encoding = 'utf8';\n}\n\n$superGlobal->put('CPM', 1, 'SESSION');\n\nif (null !== $post_type) {\n    switch ($post_type) {\n        case 'step_2':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data = json_decode($json, true);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_activity, 'cpm', 128);\n            $data = array_merge($data, array('activity' => $json));\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_task, 'cpm', 128);\n            $data = array_merge($data, array('task' => $json));\n\n            $abspath = str_replace('\\\\', '/', $data['absolute_path']);\n            if (substr($abspath, strlen($abspath) - 1) == '/') {\n                $abspath = substr($abspath, 0, strlen($abspath) - 1);\n            }\n            $session_abspath = $abspath;\n            $session_url_path = $data['url_path'];\n\n            if (isset($data['activity']) && $data['activity'] === 'folder') {\n                $targetPath = $abspath . '/' . $data['task'] . '/';\n                if (is_writable($targetPath) === true) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \" Path ' . $targetPath . ' is not writable!\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'extension') {\n                if (extension_loaded($data['task'])) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \" Extension ' . $data['task'] . ' is not loaded!\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'function') {\n                if (function_exists($data['task'])) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \" Function ' . $data['task'] . ' is not available!\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'version') {\n                if (version_compare(phpversion(), MIN_PHP_VERSION, '>=')) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \"PHP version ' . phpversion() . ' is not OK (minimum is '.MIN_PHP_VERSION.')\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'ini') {\n                if (ini_get($data['task']) >= 30) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\"}]';\n                } else {\n                    echo '[{\"error\" : \"PHP \\\"Maximum execution time\\\" is set to ' . ini_get('max_execution_time') . ' seconds. Please try to set to 30s at least during installation.\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n            break;\n\n        case 'step_3':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data = json_decode($json, true);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            $post_abspath = str_replace('\\\\', '/', $data['absolute_path']);\n            if (substr($abspath, strlen($post_abspath) - 1) == '/') {\n                $post_abspath = substr($post_abspath, 0, strlen($post_abspath) - 1);\n            }\n            $post_urlpath = $data['url_path'];\n\n            // launch\n            if ($dbTmp = mysqli_connect($db['db_host'], $db['db_login'], $db['db_pw'], $db['db_bdd'], $db['db_port'])) {\n                // create temporary INSTALL mysqli table\n                $mysqli_result = mysqli_query(\n                    $dbTmp,\n                    'CREATE TABLE IF NOT EXISTS `_install` (\n                    `key` varchar(100) NOT NULL,\n                    `value` varchar(500) NOT NULL,\n                    PRIMARY KEY (`key`)\n                    ) CHARSET=utf8;'\n                );\n                //print_r($data);\n                // store values\n                foreach ($data as $key => $value) {\n                    $superGlobal->put($key, $value, 'SESSION');\n                    $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = '\" . $key . \"'\"));\n                    if (intval($tmp) === 0) {\n                        mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('\" . $key . \"', '\" . $value . \"');\");\n                    } else {\n                        mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\" . $value . \"' WHERE `key` = '\" . $key . \"';\");\n                    }\n                }\n                $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = 'url_path'\"));\n                if (intval($tmp) === 0) {\n                    mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('url_path', '\" . empty($post_urlpath) ? $db['url_path'] : $post_urlpath . \"');\");\n                }/* else {\n                    mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\". empty($session_url_path) ? $data['url_path'] : $session_url_path. \"' WHERE `key` = 'url_path';\");\n                }*/\n                $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = 'absolute_path'\"));\n                if (intval($tmp) === 0) {\n                    mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('absolute_path', '\" . empty($post_abspath) ? $data['absolute_path'] : $post_abspath . \"');\");\n                }/* else {\n                    mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\" . empty($session_abspath) ? $data['absolute_path'] : $session_abspath . \"' WHERE `key` = 'absolute_path';\");\n                }*/\n\n                echo '[{\"error\" : \"\", \"result\" : \"Connection is successful\", \"multiple\" : \"\"}]';\n            } else {\n                echo '[{\"error\" : \"' . addslashes(str_replace(array(\"'\", \"\\n\", \"\\r\"), array('\"', '', ''), mysqli_connect_error())) . '\", \"result\" : \"Failed\", \"multiple\" : \"\"}]';\n            }\n            mysqli_close($dbTmp);\n            break;\n\n        case 'step_4':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data = json_decode($json, true);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            $dbTmp = mysqli_connect($db['db_host'], $db['db_login'], $db['db_pw'], $db['db_bdd'], $db['db_port']);\n\n            // prepare data\n            foreach ($data as $key => $value) {\n                $data[$key] = str_replace(array('&quot;', '&#92;'), array('\"\"', '\\\\\\\\'), $value);\n            }\n\n            // check skpath\n            if (empty($data['sk_path'])) {\n                $data['sk_path'] = $session_abspath . '/includes';\n            } else {\n                $data['sk_path'] = str_replace('&#92;', '/', $data['sk_path']);\n            }\n            if (substr($data['sk_path'], strlen($data['sk_path']) - 1) == '/' || substr($data['sk_path'], strlen($data['sk_path']) - 1) == '\"') {\n                $data['sk_path'] = substr($data['sk_path'], 0, strlen($data['sk_path']) - 1);\n            }\n            if (is_dir($data['sk_path'])) {\n                if (is_writable($data['sk_path'])) {\n                    // store all variables in SESSION\n                    foreach ($data as $key => $value) {\n                        $superGlobal->put($key, $value, 'SESSION');\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = '\" . $key . \"'\"));\n                        if (intval($tmp) === 0) {\n                            mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('\" . $key . \"', '\" . $value . \"');\");\n                        } else {\n                            mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\" . $value . \"' WHERE `key` = '\" . $key . \"';\");\n                        }\n                    }\n                    echo '[{\"error\" : \"\", \"result\" : \"Information stored\", \"multiple\" : \"\"}]';\n                } else {\n                    echo '[{\"error\" : \"The Directory must be writable!\", \"result\" : \"Information stored\", \"multiple\" : \"\"}]';\n                }\n            } else {\n                echo '[{\"error\" : \"' . $data['sk_path'] . ' is not a Directory!\", \"result\" : \"Information stored\", \"multiple\" : \"\"}]';\n            }\n            mysqli_close($dbTmp);\n            break;\n\n        case 'step_5':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $activity = Encryption\\Crypt\\aesctr::decrypt($post_activity, 'cpm', 128);\n            $task = Encryption\\Crypt\\aesctr::decrypt($post_task, 'cpm', 128);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            // launch\n            $dbTmp = mysqli_connect($db['db_host'], $db['db_login'], $db['db_pw'], $db['db_bdd'], $db['db_port']);\n            $dbBdd = $db['db_bdd'];\n            if ($dbTmp) {\n                $mysqli_result = '';\n\n                // read install variables\n                $result = mysqli_query($dbTmp, 'SELECT * FROM `_install`');\n                while ($row = $result->fetch_array()) {\n                    $var[$row[0]] = $row[1];\n                }\n\n                if ($activity === 'table') {\n                    if ($task === 'utf8') {\n                        //FORCE UTF8 DATABASE\n                        mysqli_query($dbTmp, 'ALTER DATABASE `' . $dbBdd . '` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci');\n                    } elseif ($task === 'defuse_passwords') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'defuse_passwords` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`type` varchar(100) NOT NULL,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`password` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'notification') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'notification` (\n\t\t\t\t\t\t\t\t`increment_id` INT(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`item_id` INT(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` INT(12) NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'sharekeys_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_items` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'ALTER TABLE `' . $var['tbl_prefix'] . 'sharekeys_items`\n                                ADD KEY `object_id_idx` (`object_id`),\n                                ADD KEY `user_id_idx` (`user_id`);'\n                        );\n                    } elseif ($task === 'sharekeys_logs') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_logs` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'ALTER TABLE `' . $var['tbl_prefix'] . 'sharekeys_logs`\n                                ADD KEY `object_id_idx` (`object_id`),\n                                ADD KEY `user_id_idx` (`user_id`);'\n                        );\n                    } elseif ($task === 'sharekeys_fields') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_fields` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'sharekeys_suggestions') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_suggestions` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'sharekeys_files') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_files` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"items` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `label` varchar(500) NOT NULL,\n                            `description` text DEFAULT NULL,\n                            `pw` text DEFAULT NULL,\n                            `pw_iv` text DEFAULT NULL,\n                            `pw_len` int(5) NOT NULL DEFAULT '0',\n                            `url` varchar(500) DEFAULT NULL,\n                            `id_tree` varchar(10) DEFAULT NULL,\n                            `perso` tinyint(1) NOT null DEFAULT '0',\n                            `login` varchar(200) DEFAULT NULL,\n                            `inactif` tinyint(1) NOT null DEFAULT '0',\n                            `restricted_to` varchar(200) DEFAULT NULL,\n                            `anyone_can_modify` tinyint(1) NOT null DEFAULT '0',\n                            `email` varchar(100) DEFAULT NULL,\n                            `notification` varchar(250) DEFAULT NULL,\n                            `viewed_no` int(12) NOT null DEFAULT '0',\n                            `complexity_level` varchar(3) NOT null DEFAULT '-1',\n                            `auto_update_pwd_frequency` tinyint(2) NOT null DEFAULT '0',\n                            `auto_update_pwd_next_date` varchar(100) NOT null DEFAULT '0',\n                            `encryption_type` VARCHAR(20) NOT NULL DEFAULT 'not_set',\n                            `fa_icon` varchar(100) DEFAULT NULL,\n                            `item_key` varchar(500) NOT NULL DEFAULT '-1',\n                            PRIMARY KEY (`id`),\n                            KEY `restricted_inactif_idx` (`restricted_to`,`inactif`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'log_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"log_items` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `id_item` int(8) NOT NULL,\n                            `date` varchar(50) NOT NULL,\n                            `id_user` int(8) NOT NULL,\n                            `action` varchar(250) NULL,\n                            `raison` text NULL,\n                            `raison_iv` text NULL,\n                            `encryption_type` VARCHAR(20) NOT NULL DEFAULT 'not_set',\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                        // create index\n                        mysqli_query(\n                            $dbTmp,\n                            'CREATE INDEX teampass_log_items_id_item_IDX ON ' . $var['tbl_prefix'] . 'log_items (id_item,date);'\n                        );\n                    } elseif ($task === 'misc') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'misc` (\n                            `increment_id` int(12) NOT null AUTO_INCREMENT,\n                            `type` varchar(50) NOT NULL,\n                            `intitule` varchar(100) NOT NULL,\n                            `valeur` varchar(500) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n\n                        // include constants\n                        require_once '../includes/config/include.php';\n\n                        // prepare config file\n                        $tp_config_file = '../includes/config/tp.config.php';\n                        if (file_exists($tp_config_file)) {\n                            if (!copy($tp_config_file, $tp_config_file . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                                echo '[{\"error\" : \"includes/config/tp.config.php file already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                                break;\n                            } else {\n                                unlink($tp_config_file);\n                            }\n                        }\n                        $file_handler = fopen($tp_config_file, 'w');\n                        $config_text = '<?php\nglobal $SETTINGS;\n$SETTINGS = array (';\n\n                        // add by default settings\n                        $aMiscVal = array(\n                            array('admin', 'max_latest_items', '10'),\n                            array('admin', 'enable_favourites', '1'),\n                            array('admin', 'show_last_items', '1'),\n                            array('admin', 'enable_pf_feature', '0'),\n                            array('admin', 'log_connections', '1'),\n                            array('admin', 'log_accessed', '1'),\n                            array('admin', 'time_format', 'H:i:s'),\n                            array('admin', 'date_format', 'd/m/Y'),\n                            array('admin', 'duplicate_folder', '0'),\n                            array('admin', 'item_duplicate_in_same_folder', '0'),\n                            array('admin', 'duplicate_item', '0'),\n                            array('admin', 'number_of_used_pw', '3'),\n                            array('admin', 'manager_edit', '1'),\n                            array('admin', 'cpassman_dir', $var['absolute_path']),\n                            array('admin', 'cpassman_url', $var['url_path']),\n                            array('admin', 'favicon', $var['url_path'] . '/favicon.ico'),\n                            array('admin', 'path_to_upload_folder', $var['absolute_path'] . '/upload'),\n                            array('admin', 'path_to_files_folder', $var['absolute_path'] . '/files'),\n                            array('admin', 'url_to_files_folder', $var['url_path'] . '/files'),\n                            array('admin', 'activate_expiration', '0'),\n                            array('admin', 'pw_life_duration', '0'),\n                            array('admin', 'maintenance_mode', '1'),\n                            array('admin', 'enable_sts', '0'),\n                            array('admin', 'encryptClientServer', '1'),\n                            array('admin', 'teampass_version', TP_VERSION),\n                            array('admin', 'ldap_mode', '0'),\n                            array('admin', 'ldap_type', '0'),\n                            array('admin', 'ldap_suffix', '0'),\n                            array('admin', 'ldap_domain_dn', '0'),\n                            array('admin', 'ldap_domain_controler', '0'),\n                            array('admin', 'ldap_user_attribute', '0'),\n                            array('admin', 'ldap_ssl', '0'),\n                            array('admin', 'ldap_tls', '0'),\n                            array('admin', 'ldap_search_base', '0'),\n                            array('admin', 'ldap_port', '389'),\n                            array('admin', 'richtext', '0'),\n                            array('admin', 'allow_print', '0'),\n                            array('admin', 'roles_allowed_to_print', '0'),\n                            array('admin', 'show_description', '1'),\n                            array('admin', 'anyone_can_modify', '0'),\n                            array('admin', 'anyone_can_modify_bydefault', '0'),\n                            array('admin', 'nb_bad_authentication', '0'),\n                            array('admin', 'utf8_enabled', '1'),\n                            array('admin', 'restricted_to', '0'),\n                            array('admin', 'restricted_to_roles', '0'),\n                            array('admin', 'enable_send_email_on_user_login', '0'),\n                            array('admin', 'enable_user_can_create_folders', '0'),\n                            array('admin', 'insert_manual_entry_item_history', '0'),\n                            array('admin', 'enable_kb', '0'),\n                            array('admin', 'enable_email_notification_on_item_shown', '0'),\n                            array('admin', 'enable_email_notification_on_user_pw_change', '0'),\n                            array('admin', 'custom_logo', ''),\n                            array('admin', 'custom_login_text', ''),\n                            array('admin', 'default_language', 'english'),\n                            array('admin', 'send_stats', '0'),\n                            array('admin', 'send_statistics_items', 'stat_country;stat_users;stat_items;stat_items_shared;stat_folders;stat_folders_shared;stat_admins;stat_managers;stat_ro;stat_mysqlversion;stat_phpversion;stat_teampassversion;stat_languages;stat_kb;stat_suggestion;stat_customfields;stat_api;stat_2fa;stat_agses;stat_duo;stat_ldap;stat_syslog;stat_stricthttps;stat_fav;stat_pf;'),\n                            array('admin', 'send_stats_time', time() - 2592000),\n                            array('admin', 'get_tp_info', '1'),\n                            array('admin', 'send_mail_on_user_login', '0'),\n                            array('cron', 'sending_emails', '0'),\n                            array('admin', 'nb_items_by_query', 'auto'),\n                            array('admin', 'enable_delete_after_consultation', '0'),\n                            array('admin', 'enable_personal_saltkey_cookie', '0'),\n                            array('admin', 'personal_saltkey_cookie_duration', '31'),\n                            array('admin', 'email_smtp_server', ''),\n                            array('admin', 'email_smtp_auth', ''),\n                            array('admin', 'email_auth_username', ''),\n                            array('admin', 'email_auth_pwd', ''),\n                            array('admin', 'email_port', ''),\n                            array('admin', 'email_security', ''),\n                            array('admin', 'email_server_url', ''),\n                            array('admin', 'email_from', ''),\n                            array('admin', 'email_from_name', ''),\n                            array('admin', 'pwd_maximum_length', '40'),\n                            array('admin', 'google_authentication', '0'),\n                            array('admin', 'delay_item_edition', '0'),\n                            array('admin', 'allow_import', '0'),\n                            array('admin', 'proxy_ip', ''),\n                            array('admin', 'proxy_port', ''),\n                            array('admin', 'upload_maxfilesize', '10mb'),\n                            array('admin', 'upload_docext', 'doc,docx,dotx,xls,xlsx,xltx,rtf,csv,txt,pdf,ppt,pptx,pot,dotx,xltx'),\n                            array('admin', 'upload_imagesext', 'jpg,jpeg,gif,png'),\n                            array('admin', 'upload_pkgext', '7z,rar,tar,zip'),\n                            array('admin', 'upload_otherext', 'sql,xml'),\n                            array('admin', 'upload_imageresize_options', '1'),\n                            array('admin', 'upload_imageresize_width', '800'),\n                            array('admin', 'upload_imageresize_height', '600'),\n                            array('admin', 'upload_imageresize_quality', '90'),\n                            array('admin', 'use_md5_password_as_salt', '0'),\n                            array('admin', 'ga_website_name', 'TeamPass for ChangeMe'),\n                            array('admin', 'api', '0'),\n                            array('admin', 'subfolder_rights_as_parent', '0'),\n                            array('admin', 'show_only_accessible_folders', '0'),\n                            array('admin', 'enable_suggestion', '0'),\n                            array('admin', 'otv_expiration_period', '7'),\n                            array('admin', 'default_session_expiration_time', '60'),\n                            array('admin', 'duo', '0'),\n                            array('admin', 'enable_server_password_change', '0'),\n                            array('admin', 'ldap_object_class', '0'),\n                            array('admin', 'bck_script_path', $var['absolute_path'] . '/backups'),\n                            array('admin', 'bck_script_filename', 'bck_teampass'),\n                            array('admin', 'syslog_enable', '0'),\n                            array('admin', 'syslog_host', 'localhost'),\n                            array('admin', 'syslog_port', '514'),\n                            array('admin', 'manager_move_item', '0'),\n                            array('admin', 'create_item_without_password', '0'),\n                            array('admin', 'otv_is_enabled', '0'),\n                            array('admin', 'agses_authentication_enabled', '0'),\n                            array('admin', 'item_extra_fields', '0'),\n                            array('admin', 'saltkey_ante_2127', 'none'),\n                            array('admin', 'migration_to_2127', 'done'),\n                            array('admin', 'files_with_defuse', 'done'),\n                            array('admin', 'timezone', 'UTC'),\n                            array('admin', 'enable_attachment_encryption', '1'),\n                            array('admin', 'personal_saltkey_security_level', '50'),\n                            array('admin', 'ldap_new_user_is_administrated_by', '0'),\n                            array('admin', 'disable_show_forgot_pwd_link', '0'),\n                            array('admin', 'offline_key_level', '0'),\n                            array('admin', 'enable_http_request_login', '0'),\n                            array('admin', 'ldap_and_local_authentication', '0'),\n                            array('admin', 'secure_display_image', '1'),\n                            array('admin', 'upload_zero_byte_file', '0'),\n                            array('admin', 'upload_all_extensions_file', '0'),\n                            array('admin', 'bck_script_passkey', generateRandomKey()),\n                            array('admin', 'admin_2fa_required', '1'),\n                            array('admin', 'password_overview_delay', '4'),\n                            array('admin', 'copy_to_clipboard_small_icons', '1'),\n                            array('admin', 'duo_ikey', ''),\n                            array('admin', 'duo_skey', ''),\n                            array('admin', 'duo_host', ''),\n                            array('admin', 'duo_failmode', 'secure'),\n                            array('admin', 'roles_allowed_to_print_select', ''),\n                            array('admin', 'clipboard_life_duration', '30'),\n                            array('admin', 'mfa_for_roles', ''),\n                            array('admin', 'tree_counters', '0'),\n                            array('admin', 'settings_offline_mode', '0'),\n                            array('admin', 'settings_tree_counters', '0'),\n                            array('admin', 'enable_massive_move_delete', '0'),\n                            array('admin', 'email_debug_level', '0'),\n                            array('admin', 'ga_reset_by_user', ''),\n                            array('admin', 'onthefly-backup-key', ''),\n                            array('admin', 'onthefly-restore-key', ''),\n                            array('admin', 'ldap_user_dn_attribute', ''),\n                            array('admin', 'ldap_dn_additional_user_dn', ''),\n                            array('admin', 'ldap_user_object_filter', ''),\n                            array('admin', 'ldap_bdn', ''),\n                            array('admin', 'ldap_hosts', ''),\n                            array('admin', 'ldap_password', ''),\n                            array('admin', 'ldap_username', ''),\n                            array('admin', 'api_token_duration', '60'),\n                            array('timestamp', 'last_folder_change', ''),\n                            array('admin', 'enable_tasks_manager', '1'),\n                            array('admin', 'task_maximum_run_time', '300'),\n                            array('admin', 'tasks_manager_refreshing_period', '20'),\n                            array('admin', 'maximum_number_of_items_to_treat', '100'),\n                            array('admin', 'ldap_tls_certifacte_check', 'LDAP_OPT_X_TLS_NEVER'),\n                            array('admin', 'enable_tasks_log', '0'),\n                            array('admin', 'upgrade_timestamp', time()),\n                            array('admin', 'enable_ad_users_with_ad_groups', '0'),\n                            array('admin', 'enable_ad_user_auto_creation', '0'),\n                            array('admin', 'ldap_group_object_filter', ''),\n                            array('admin', 'ldap_guid_attibute', 'objectguid'),\n                            array('admin', 'sending_emails_job_frequency', '2'),\n                            array('admin', 'user_keys_job_frequency', '1'),\n                            array('admin', 'items_statistics_job_frequency', '5'),\n                            array('admin', 'users_personal_folder_task', ''),\n                            array('admin', 'clean_orphan_objects_task', ''),\n                            array('admin', 'purge_temporary_files_task', ''),\n                            array('admin', 'rebuild_config_file', ''),\n                            array('admin', 'reload_cache_table_task', ''),\n                        );\n                        foreach ($aMiscVal as $elem) {\n                            //Check if exists before inserting\n                            $tmp = mysqli_num_rows(\n                                mysqli_query(\n                                    $dbTmp,\n                                    \"SELECT * FROM `\" . $var['tbl_prefix'] . \"misc`\n                                    WHERE type='\" . $elem[0] . \"' AND intitule='\" . $elem[1] . \"'\"\n                                )\n                            );\n                            if (intval($tmp) === 0) {\n                                $queryRes = mysqli_query(\n                                    $dbTmp,\n                                    \"INSERT INTO `\" . $var['tbl_prefix'] . \"misc`\n                                    (`type`, `intitule`, `valeur`) VALUES\n                                    ('\" . $elem[0] . \"', '\" . $elem[1] . \"', '\" .\n                                        str_replace(\"'\", '', $elem[2]) . \"');\"\n                                ); // or die(mysqli_error($dbTmp))\n                            }\n\n                            // append new setting in config file\n                            $config_text .= \"\n    '\" . $elem[1] . \"' => '\" . str_replace(\"'\", '', $elem[2]) . \"',\";\n                        }\n\n                        // write to config file\n                        $result = fwrite(\n                            $file_handler,\n                            utf8_encode(\n                                $config_text . '\n);'\n                            )\n                        );\n                        fclose($file_handler);\n\n                        // --\n                    } elseif ($task === 'nested_tree') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"nested_tree` (\n                            `id` bigint(20) unsigned NOT null AUTO_INCREMENT,\n                            `parent_id` int(11) NOT NULL,\n                            `title` varchar(255) NOT NULL,\n                            `nleft` int(11) NOT NULL DEFAULT '0',\n                            `nright` int(11) NOT NULL DEFAULT '0',\n                            `nlevel` int(11) NOT NULL DEFAULT '0',\n                            `bloquer_creation` tinyint(1) NOT null DEFAULT '0',\n                            `bloquer_modification` tinyint(1) NOT null DEFAULT '0',\n                            `personal_folder` tinyint(1) NOT null DEFAULT '0',\n                            `renewal_period` int(5) NOT null DEFAULT '0',\n                            `fa_icon` VARCHAR(100) NOT NULL DEFAULT 'fas fa-folder',\n                            `fa_icon_selected` VARCHAR(100) NOT NULL DEFAULT 'fas fa-folder-open',\n                            `categories` longtext NOT NULL,\n                            `nb_items_in_folder` int(10) NOT NULL DEFAULT '0',\n                            `nb_subfolders` int(10) NOT NULL DEFAULT '0',\n                            `nb_items_in_subfolders` int(10) NOT NULL DEFAULT '0',\n                            PRIMARY KEY (`id`),\n                            KEY `nested_tree_parent_id` (`parent_id`),\n                            KEY `nested_tree_nleft` (`nleft`),\n                            KEY `nested_tree_nright` (`nright`),\n                            KEY `nested_tree_nlevel` (`nlevel`),\n                            KEY `personal_folder_idx` (`personal_folder`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'rights') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"rights` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `tree_id` int(12) NOT NULL,\n                            `fonction_id` int(12) NOT NULL,\n                            `authorized` tinyint(1) NOT null DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'users') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"users` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `login` varchar(50) NOT NULL,\n                            `pw` varchar(400) NOT NULL,\n                            `groupes_visibles` varchar(1000) NOT NULL,\n                            `derniers` text NULL,\n                            `key_tempo` varchar(100) NULL,\n                            `last_pw_change` varchar(30) NULL,\n                            `last_pw` text NULL,\n                            `admin` tinyint(1) NOT null DEFAULT '0',\n                            `fonction_id` varchar(1000) NULL,\n                            `groupes_interdits` varchar(1000) NULL,\n                            `last_connexion` varchar(30) NULL,\n                            `gestionnaire` int(11) NOT null DEFAULT '0',\n                            `email` varchar(300) NOT NULL DEFAULT 'none',\n                            `favourites` varchar(1000) NULL,\n                            `latest_items` varchar(1000) NULL,\n                            `personal_folder` int(1) NOT null DEFAULT '0',\n                            `disabled` tinyint(1) NOT null DEFAULT '0',\n                            `no_bad_attempts` tinyint(1) NOT null DEFAULT '0',\n                            `can_create_root_folder` tinyint(1) NOT null DEFAULT '0',\n                            `read_only` tinyint(1) NOT null DEFAULT '0',\n                            `timestamp` varchar(30) NOT null DEFAULT '0',\n                            `user_language` varchar(50) NOT null DEFAULT '0',\n                            `name` varchar(100) NULL,\n                            `lastname` varchar(100) NULL,\n                            `session_end` varchar(30) NULL,\n                            `isAdministratedByRole` tinyint(5) NOT null DEFAULT '0',\n                            `psk` varchar(400) NULL,\n                            `ga` varchar(50) NULL,\n                            `ga_temporary_code` VARCHAR(20) NOT NULL DEFAULT 'none',\n                            `avatar` varchar(1000) NULL DEFAULT NULL,\n                            `avatar_thumb` varchar(1000) NULL DEFAULT NULL,\n                            `upgrade_needed` BOOLEAN NOT NULL DEFAULT FALSE,\n                            `treeloadstrategy` varchar(30) NOT null DEFAULT 'full',\n                            `can_manage_all_users` tinyint(1) NOT NULL DEFAULT '0',\n                            `usertimezone` VARCHAR(50) NOT NULL DEFAULT 'not_defined',\n                            `agses-usercardid` VARCHAR(50) NOT NULL DEFAULT '0',\n                            `encrypted_psk` text NULL,\n                            `user_ip` varchar(400) NOT null DEFAULT 'none',\n                            `user_ip_lastdate` varchar(50) NULL DEFAULT NULL,\n                            `yubico_user_key` varchar(100) NOT null DEFAULT 'none',\n                            `yubico_user_id` varchar(100) NOT null DEFAULT 'none',\n                            `public_key` TEXT DEFAULT NULL,\n                            `private_key` TEXT DEFAULT NULL,\n                            `special` VARCHAR(250) NOT NULL DEFAULT 'none',\n                            `auth_type` VARCHAR(200) NOT NULL DEFAULT 'local',\n                            `is_ready_for_usage` BOOLEAN NOT NULL DEFAULT FALSE,\n                            `otp_provided` BOOLEAN NOT NULL DEFAULT FALSE,\n                            `roles_from_ad_groups` varchar(1000) NULL,\n                            `ongoing_process_id` VARCHAR(100) NULL,\n                            `mfa_enabled` tinyint(1) NOT null DEFAULT '1',\n                            `created_at` varchar(30) NULL,\n                            `updated_at` varchar(30) NULL,\n                            `deleted_at` varchar(30) NULL,\n                            PRIMARY KEY (`id`),\n                            UNIQUE KEY `login` (`login`)\n                            ) CHARSET=utf8;\"\n                        );\n\n                        require_once '../includes/config/include.php';\n                        // check that admin accounts doesn't exist\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE login = 'admin'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `admin`, `gestionnaire`, `personal_folder`, `groupes_visibles`, `email`, `encrypted_psk`, `last_pw_change`, `name`, `lastname`, `can_create_root_folder`, `public_key`, `private_key`, `is_ready_for_usage`, `otp_provided`) VALUES ('1', 'admin', '\" . bCrypt($var['admin_pwd'], '13') . \"', '1', '0', '0', '0', '\" . $var['admin_email'] . \"', '', '\" . time() . \"', '\" . $var['admin_name'] . \"', '\" . $var['admin_lastname'] . \"', '1', 'none', 'none', '1', '1')\"\n                            );\n                        } else {\n                            $mysqli_result = mysqli_query($dbTmp, 'UPDATE `' . $var['tbl_prefix'] . \"users` SET `pw` = '\" . bCrypt($var['admin_pwd'], '13') . \"' WHERE login = 'admin' AND id = '1'\");\n                        }\n\n                        // check that API doesn't exist\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE id = '\" . API_USER_ID . \"'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `groupes_visibles`, `derniers`, `key_tempo`, `last_pw_change`, `last_pw`, `admin`, `fonction_id`, `groupes_interdits`, `last_connexion`, `gestionnaire`, `email`, `favourites`, `latest_items`, `personal_folder`, `is_ready_for_usage`, `otp_provided`) VALUES ('\" . API_USER_ID . \"', 'API', '', '', '', '', '', '', '1', '', '', '', '0', '', '', '', '0', '0', '1')\"\n                            );\n                        }\n\n                        // check that OTV doesn't exist\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE id = '\" . OTV_USER_ID . \"'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `groupes_visibles`, `derniers`, `key_tempo`, `last_pw_change`, `last_pw`, `admin`, `fonction_id`, `groupes_interdits`, `last_connexion`, `gestionnaire`, `email`, `favourites`, `latest_items`, `personal_folder`, `is_ready_for_usage`, `otp_provided`) VALUES ('\" . OTV_USER_ID . \"', 'OTV', '', '', '', '', '', '', '1', '', '', '', '0', '', '', '', '0', '0', '1')\"\n                            );\n                        }\n                    } elseif ($task === 'tags') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'tags` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `tag` varchar(30) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'log_system') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'log_system` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `type` varchar(20) NOT NULL,\n                            `date` varchar(30) NOT NULL,\n                            `label` text NOT NULL,\n                            `qui` varchar(255) NOT NULL,\n                            `field_1` varchar(250) DEFAULT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'files') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"files` (\n                            `id` int(11) NOT null AUTO_INCREMENT,\n                            `id_item` int(11) NOT NULL,\n                            `name` TEXT NOT NULL,\n                            `size` int(10) NOT NULL,\n                            `extension` varchar(10) NOT NULL,\n                            `type` varchar(255) NOT NULL,\n                            `file` varchar(50) NOT NULL,\n                            `status` varchar(50) NOT NULL DEFAULT '0',\n                            `content` longblob DEFAULT NULL,\n\t\t\t\t\t\t\t`confirmed` INT(1) NOT NULL DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'cache') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"cache` (\n                            `increment_id`INT(12) NOT NULL AUTO_INCREMENT,\n                            `id` int(12) NOT NULL,\n                            `label` varchar(500) NOT NULL,\n                            `description` text NOT NULL,\n                            `tags` text DEFAULT NULL,\n                            `id_tree` int(12) NOT NULL,\n                            `perso` tinyint(1) NOT NULL,\n                            `restricted_to` varchar(200) DEFAULT NULL,\n                            `login` text DEFAULT NULL,\n                            `folder` text NOT NULL,\n                            `author` varchar(50) NOT NULL,\n                            `renewal_period` tinyint(4) NOT NULL DEFAULT '0',\n                            `timestamp` varchar(50) DEFAULT NULL,\n                            `url` varchar(500) NOT NULL DEFAULT '0',\n                            `encryption_type` VARCHAR(50) DEFAULT NULL DEFAULT '0',\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'roles_title') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"roles_title` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `title` varchar(50) NOT NULL,\n                            `allow_pw_change` TINYINT(1) NOT null DEFAULT '0',\n                            `complexity` INT(5) NOT null DEFAULT '0',\n                            `creator_id` int(11) NOT null DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n\n                        // create Default role\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"roles_title` WHERE id = '0'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"roles_title` (`id`, `title`, `allow_pw_change`, `complexity`, `creator_id`) VALUES (NULL, 'Default', '0', '48', '0')\"\n                            );\n                        }\n                    } elseif ($task === 'roles_values') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"roles_values` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n                            `role_id` int(12) NOT NULL,\n                            `folder_id` int(12) NOT NULL,\n                            `type` varchar(5) NOT NULL DEFAULT 'R',\n                            KEY `role_id_idx` (`role_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'kb') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"kb` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `category_id` int(12) NOT NULL,\n                            `label` varchar(200) NOT NULL,\n                            `description` text NOT NULL,\n                            `author_id` int(12) NOT NULL,\n                            `anyone_can_modify` tinyint(1) NOT null DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'kb_categories') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'kb_categories` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `category` varchar(50) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'kb_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'kb_items` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `kb_id` int(12) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task == 'restriction_to_roles') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'restriction_to_roles` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `role_id` int(12) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'languages') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'languages` (\n                            `id` INT(10) NOT null AUTO_INCREMENT,\n                            `name` VARCHAR(50) NOT null ,\n                            `label` VARCHAR(50) NOT null ,\n                            `code` VARCHAR(10) NOT null ,\n                            `flag` VARCHAR(50) NOT NULL,\n                            `code_poeditor` VARCHAR(30) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n\n                        // add lanaguages\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"languages` WHERE name = 'french'\"));\n                        if ($tmp === 0) {\n                            $mysql_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"languages` (`id`, `name`, `label`, `code`, `flag`, `code_poeditor`) VALUES\n                                (1, 'french', 'French', 'fr', 'fr.png', 'fr'),\n                                (2, 'english', 'English', 'us', 'us.png', 'en'),\n                                (3, 'spanish', 'Spanish', 'es', 'es.png', 'es'),\n                                (4, 'german', 'German', 'de', 'de.png', 'de'),\n                                (5, 'czech', 'Czech', 'cs', 'cz.png', 'cs'),\n                                (6, 'italian', 'Italian', 'it', 'it.png', 'it'),\n                                (7, 'russian', 'Russian', 'ru', 'ru.png', 'ru'),\n                                (8, 'turkish', 'Turkish', 'tr', 'tr.png', 'tr'),\n                                (9, 'norwegian', 'Norwegian', 'no', 'no.png', 'no'),\n                                (10, 'japanese', 'Japanese', 'ja', 'ja.png', 'ja'),\n                                (11, 'portuguese', 'Portuguese', 'pr', 'pr.png', 'pt'),\n                                (12, 'portuguese_br', 'Portuguese (Brazil)', 'pr-bt', 'pr-bt.png', 'pt-br'),\n                                (13, 'chinese', 'Chinese', 'zh-Hans', 'cn.png', 'zh-Hans'),\n                                (14, 'swedish', 'Swedish', 'se', 'se.png', 'sv'),\n                                (15, 'dutch', 'Dutch', 'nl', 'nl.png', 'nl'),\n                                (16, 'catalan', 'Catalan', 'ca', 'ct.png', 'ca'),\n                                (17, 'bulgarian', 'Bulgarian', 'bg', 'bg.png', 'bg'),\n                                (18, 'greek', 'Greek', 'gr', 'gr.png', 'el'),\n                                (19, 'hungarian', 'Hungarian', 'hu', 'hu.png', 'hu'),\n                                (20, 'polish', 'Polish', 'pl', 'pl.png', 'pl'),\n                                (21, 'romanian', 'Romanian', 'ro', 'ro.png', 'ro'),\n                                (22, 'ukrainian', 'Ukrainian', 'ua', 'ua.png', 'uk'),\n                                (23, 'vietnamese', 'Vietnamese', 'vi', 'vi.png', 'vi'),\n                                (24, 'estonian', 'Estonian', 'et', 'ee.png', 'et');\"\n                            );\n                        }\n                    } elseif ($task === 'emails') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'emails` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `timestamp` INT(30) NOT null ,\n                            `subject` TEXT NOT null ,\n                            `body` TEXT NOT null ,\n                            `receivers` TEXT NOT null ,\n                            `status` VARCHAR(30) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'automatic_del') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'automatic_del` (\n                            `item_id` int(11) NOT NULL,\n                            `del_enabled` tinyint(1) NOT NULL,\n                            `del_type` tinyint(1) NOT NULL,\n                            `del_value` varchar(35) NOT NULL,\n                            PRIMARY KEY (`item_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'items_edition') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'items_edition` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `item_id` int(11) NOT NULL,\n                            `user_id` int(12) NOT NULL,\n                            `timestamp` varchar(50) NOT NULL,\n                            KEY `item_id_idx` (`item_id`),\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'categories') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"categories` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `parent_id` int(12) NOT NULL,\n                            `title` varchar(255) NOT NULL,\n                            `level` int(2) NOT NULL,\n                            `description` text NULL,\n                            `type` varchar(50) NULL default '',\n                            `masked` tinyint(1) NOT NULL default '0',\n                            `order` int(12) NOT NULL default '0',\n                            `encrypted_data` tinyint(1) NOT NULL default '1',\n                            `role_visibility` varchar(255) NOT NULL DEFAULT 'all',\n                            `is_mandatory` tinyint(1) NOT NULL DEFAULT '0',\n                            `regex` varchar(255) NULL default '',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'categories_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"categories_items` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `field_id` int(11) NOT NULL,\n                            `item_id` int(11) NOT NULL,\n                            `data` text NOT NULL,\n                            `data_iv` text NOT NULL,\n                            `encryption_type` VARCHAR(20) NOT NULL DEFAULT 'not_set',\n                            `is_mandatory` BOOLEAN NOT NULL DEFAULT FALSE ,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'categories_folders') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'categories_folders` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `id_category` int(12) NOT NULL,\n                            `id_folder` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'api') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'api` (\n                            `increment_id` int(20) NOT NULL AUTO_INCREMENT,\n                            `type` varchar(15) NOT NULL,\n                            `label` varchar(255) DEFAULT NULL,\n                            `value` text DEFAULT NULL,\n                            `timestamp` varchar(50) NOT NULL,\n                            `user_id` int(13) DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`),\n                            KEY `USER` (`user_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'otv') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"otv` (\n                            `id` int(10) NOT NULL AUTO_INCREMENT,\n                            `timestamp` text NOT NULL,\n                            `code` varchar(100) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            `originator` int(12) NOT NULL,\n                            `encrypted` text NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'suggestion') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"suggestion` (\n                            `id` tinyint(12) NOT NULL AUTO_INCREMENT,\n                            `label` varchar(255) NOT NULL,\n                            `pw` text NOT NULL,\n                            `pw_iv` text NOT NULL,\n                            `pw_len` int(5) NOT NULL,\n                            `description` text NOT NULL,\n                            `author_id` int(12) NOT NULL,\n                            `folder_id` int(12) NOT NULL,\n                            `comment` text NOT NULL,\n                            `suggestion_type` varchar(10) NOT NULL default 'new',\n                            `encryption_type` varchar(20) NOT NULL default 'not_set',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"export` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `export_tag` varchar(20) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            `label` varchar(500) NOT NULL,\n                            `login` varchar(100) NOT NULL,\n                            `description` text NOT NULL,\n                            `pw` text NOT NULL,\n                            `path` varchar(500) NOT NULL,\n                            `email` varchar(500) NOT NULL default 'none',\n                            `url` varchar(500) NOT NULL default 'none',\n                            `kbs` varchar(500) NOT NULL default 'none',\n                            `tags` varchar(500) NOT NULL default 'none',\n                            `folder_id` varchar(10) NOT NULL,\n                            `perso` tinyint(1) NOT NULL default '0',\n                            `restricted_to` varchar(200) DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'tokens') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'tokens` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `user_id` int(12) NOT NULL,\n                            `token` varchar(255) NOT NULL,\n                            `reason` varchar(255) NOT NULL,\n                            `creation_timestamp` varchar(50) NOT NULL,\n                            `end_timestamp` varchar(50) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'items_change') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"items_change` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `item_id` int(12) NOT NULL,\n                            `label` varchar(255) NOT NULL DEFAULT 'none',\n                            `pw` text NOT NULL,\n                            `login` varchar(255) NOT NULL DEFAULT 'none',\n                            `email` varchar(255) NOT NULL DEFAULT 'none',\n                            `url` varchar(255) NOT NULL DEFAULT 'none',\n                            `description` text NOT NULL,\n                            `comment` text NOT NULL,\n                            `folder_id` tinyint(12) NOT NULL,\n                            `user_id` int(12) NOT NULL,\n                            `timestamp` varchar(50) NOT NULL DEFAULT 'none',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'templates') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'templates` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `item_id` int(12) NOT NULL,\n                            `category_id` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'cache_tree') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"cache_tree` (\n                            `increment_id` smallint(32) NOT NULL AUTO_INCREMENT,\n                            `data` longtext DEFAULT NULL CHECK (json_valid(`data`)),\n                            `visible_folders` longtext NOT NULL,\n                            `timestamp` varchar(50) NOT NULL,\n                            `user_id` int(12) NOT NULL,\n                            `folders` longtext DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } else if ($task === 'processes_tasks') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"processes_tasks` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `process_id` int(12) NOT NULL,\n                            `created_at` varchar(50) NOT NULL,\n                            `updated_at` varchar(50) DEFAULT NULL,\n                            `finished_at` varchar(50) DEFAULT NULL,\n                            `task` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`task`)),\n                            `system_process_id` int(12) DEFAULT NULL,\n                            `is_in_progress` tinyint(1) NOT NULL DEFAULT 0,\n                            `sub_task_in_progress` tinyint(1) NOT NULL DEFAULT 0,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'ALTER TABLE `' . $var['tbl_prefix'] . 'processes_tasks`\n                                ADD KEY `process_id_idx` (`process_id`);'\n                        );\n                    } else if ($task === 'processes') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"processes` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `created_at` varchar(50) NOT NULL,\n                            `updated_at` varchar(50) DEFAULT NULL,\n                            `finished_at` varchar(50) DEFAULT NULL,\n                            `process_id` int(12) DEFAULT NULL,\n                            `process_type` varchar(20) NOT NULL,\n                            `output` text DEFAULT NULL,\n                            `arguments` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`arguments`)),\n                            `is_in_progress` tinyint(1) NOT NULL DEFAULT 0,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } else if ($task === 'processes_logs') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"processes_logs` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `created_at` varchar(20) NOT NULL,\n                            `job` varchar(50) NOT NULL,\n                            `status` varchar(10) NOT NULL,\n                            `updated_at` varchar(20) DEFAULT NULL,\n                            `finished_at` varchar(20) DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } else if ($task === 'ldap_groups_roles') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"ldap_groups_roles` (\n                            `increment_id` INT(12) NOT NULL AUTO_INCREMENT,\n                            `role_id` INT(12) NOT NULL,\n                            `ldap_group_id` INT(12) NOT NULL,\n                            `ldap_group_label` VARCHAR(255) NOT NULL,\n                            PRIMARY KEY (`increment_id`),\n                            KEY `ROLE` (`role_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    }\n                    // CARREFULL - WHEN ADDING NEW TABLE\n                    // Add the command inside install.js file\n                    // in task array at step 5\n                }\n                // answer back\n                if ($mysqli_result) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\", \"task\" : \"' . $task . '\", \"activity\" : \"' . $activity . '\"}]';\n                } else {\n                    echo '[{\"error\" : \"' . addslashes(str_replace(array(\"'\", \"\\n\", \"\\r\"), array('\"', '', ''), mysqli_error($dbTmp))) . '\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\", \"table\" : \"' . $task . '\"}]';\n                }\n            } else {\n                echo '[{\"error\" : \"' . addslashes(str_replace(array(\"'\", \"\\n\", \"\\r\"), array('\"', '', ''), mysqli_connect_error())) . '\", \"result\" : \"Failed\", \"multiple\" : \"\"}]';\n            }\n\n            mysqli_close($dbTmp);\n            // Destroy session without writing to disk\n            define('NODESTROY_SESSION', 'true');\n            session_destroy();\n            break;\n\n        case 'step_6':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $activity = Encryption\\Crypt\\aesctr::decrypt($post_activity, 'cpm', 128);\n            $data_sent = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data_sent = json_decode($data_sent, true);\n            $task = Encryption\\Crypt\\aesctr::decrypt($post_task, 'cpm', 128);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            $dbTmp = mysqli_connect(\n                $db['db_host'],\n                $db['db_login'],\n                $db['db_pw'],\n                $db['db_bdd'],\n                $db['db_port']\n            );\n\n            // read install variables\n            $result = mysqli_query($dbTmp, 'SELECT * FROM `_install`');\n            while ($row = $result->fetch_array()) {\n                $var[$row[0]] = $row[1];\n            }\n\n            // launch\n            if (empty($var['sk_path'])) {\n                $securePath = $var['absolute_path'];\n            } else {\n                //ensure $var['sk_path'] has no trailing slash\n                $var['sk_path'] = rtrim(str_replace('\\/', '//', $var['sk_path']), '/\\\\');\n                $securePath = $var['sk_path'];\n            }\n\n            $events = '';\n\n            if ($activity === 'file') {\n                if ($task === 'settings.php') {\n                    // first is to create teampass-seckey.txt\n                    // 0- check if exists\n                    define('SECUREFILE', generateRandomKey(25));\n                    $filename_seckey = $securePath . '/' . SECUREFILE;\n\n                    if (file_exists($filename_seckey)) {\n                        if (!copy($filename_seckey, $filename_seckey . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                            echo '[{\"error\" : \"File `$filename_seckey` already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                            break;\n                        } else {\n                            unlink($filename);\n                        }\n                    }\n\n                    // 1- generate saltkey\n                    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n                    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n                    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n                    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n                    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n                    require_once '../includes/libraries/Encryption/Encryption/File.php';\n                    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n                    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n                    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n                    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n                    $new_salt = $key->saveToAsciiSafeString();\n\n                    // 2- store key in file\n                    file_put_contents(\n                        $filename_seckey,\n                        $new_salt\n                    );\n\n                    // Now create settings file\n                    $filename = '../includes/config/settings.php';\n\n                    if (file_exists($filename)) {\n                        if (!copy($filename, $filename . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                            echo '[{\"error\" : \"Setting.php file already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                            break;\n                        } else {\n                            unlink($filename);\n                        }\n                    }\n                    //echo \">\". $db['db_pw'].\" -- \".$new_salt.\" ;; \";\n                    // Encrypt the DB password\n                    $encrypted_text = encryptFollowingDefuse(\n                        $db['db_pw'],\n                        $new_salt\n                    )['string'];\n\n                    // Open and write Settings file\n                    $file_handler = fopen($filename, 'w');\n                    $result = fwrite(\n                        $file_handler,\n                        utf8_encode(\n                            '<?php\n// DATABASE connexion parameters\ndefine(\"DB_HOST\", \"' . $db['db_host'] . '\");\ndefine(\"DB_USER\", \"' . $db['db_login'] . '\");\ndefine(\"DB_PASSWD\", \"' . str_replace('$', '\\$', $encrypted_text) . '\");\ndefine(\"DB_NAME\", \"' . $db['db_bdd'] . '\");\ndefine(\"DB_PREFIX\", \"' . $var['tbl_prefix'] . '\");\ndefine(\"DB_PORT\", \"' . $db['db_port'] . '\");\ndefine(\"DB_ENCODING\", \"' . $session_db_encoding . '\");\ndefine(\"DB_SSL\", array(\n    \"key\" => \"\",\n    \"cert\" => \"\",\n    \"ca_cert\" => \"\",\n    \"ca_path\" => \"\",\n    \"cipher\" => \"\"\n));\ndefine(\"DB_CONNECT_OPTIONS\", array(\n    MYSQLI_OPT_CONNECT_TIMEOUT => 10\n));\ndefine(\"SECUREPATH\", \"' . $securePath . '\");\ndefine(\"SECUREFILE\", \"' . SECUREFILE. '\");\n\nif (isset($_SESSION[\\'settings\\'][\\'timezone\\']) === true) {\n    date_default_timezone_set($_SESSION[\\'settings\\'][\\'timezone\\']);\n}\n'\n                        )\n                    );\n                    fclose($file_handler);\n\n                    // Create TP USER\n                    require_once '../includes/config/include.php';\n                    $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE id = '\" . TP_USER_ID . \"'\"));\n                    if ($tmp === 0) {\n                        // generate key for password\n                        $pwd = GenerateCryptKey(25, true, true, true, true);\n                        $encrypted_pwd = cryption(\n                            $pwd,\n                            $new_salt,\n                            'encrypt'\n                        )['string'];\n\n                        // GEnerate new public and private keys\n                        $userKeys = generateUserKeys($pwd);\n\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `groupes_visibles`, `derniers`, `key_tempo`, `last_pw_change`, `last_pw`, `admin`, `fonction_id`, `groupes_interdits`, `last_connexion`, `gestionnaire`, `email`, `favourites`, `latest_items`, `personal_folder`, `public_key`, `private_key`, `is_ready_for_usage`, `otp_provided`) VALUES ('\" . TP_USER_ID . \"', 'TP', '\".$encrypted_pwd.\"', '', '', '', '', '', '1', '', '', '', '0', '', '', '', '0', '\".$userKeys['public_key'].\"', '\".$userKeys['private_key'].\"', '1', '1')\"\n                        );\n                    }\n\n                    if ($result === false) {\n                        echo '[{\"error\" : \"Setting.php file could not be created. Please check the path and the rights\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    } else {\n                        echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    }\n                } elseif ($task === 'security') {\n                    // Sort out the file permissions\n\n                    // is server Windows or Linux?\n                    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n                        // Change directory permissions\n                        if (is_null($session_abspath) === false) {\n                            $result = recursiveChmod($session_abspath, 0770, 0740);\n                            if ($result) {\n                                $result = recursiveChmod($session_abspath . '/files', 0770, 0770);\n                            }\n                            if ($result) {\n                                $result = recursiveChmod($session_abspath . '/upload', 0770, 0770);\n                            }\n                        }\n                    }\n                    $result = true;\n                    if ($result === false) {\n                        echo '[{\"error\" : \"Cannot change directory permissions - please fix manually\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    } else {\n                        echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    }\n                } elseif ($task === 'csrfp-token') {\n                    // update CSRFP TOKEN\n                    $csrfp_file_sample = '../includes/libraries/csrfp/libs/csrfp.config.sample.php';\n                    $csrfp_file = '../includes/libraries/csrfp/libs/csrfp.config.php';\n                    if (file_exists($csrfp_file)) {\n                        if (!copy($csrfp_file, $csrfp_file . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                            echo '[{\"error\" : \"csrfp.config.php file already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                            break;\n                        } else {\n                            $events .= \"The file $csrfp_file already exist. A copy has been created.<br />\";\n                        }\n                    }\n                    unlink($csrfp_file); // delete existing csrfp.config file\n                    copy($csrfp_file_sample, $csrfp_file); // make a copy of csrfp.config.sample file\n                    $data = file_get_contents($csrfp_file);\n                    $newdata = str_replace('\"CSRFP_TOKEN\" => \"\"', '\"CSRFP_TOKEN\" => \"' . bin2hex(openssl_random_pseudo_bytes(25)) . '\"', $data);\n                    $jsUrl = $data_sent['url_path'] . '/includes/libraries/csrfp/js/csrfprotector.js';\n                    $newdata = str_replace('\"jsUrl\" => \"\"', '\"jsUrl\" => \"' . $jsUrl . '\"', $newdata);\n                    file_put_contents('../includes/libraries/csrfp/libs/csrfp.config.php', $newdata);\n\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n            } elseif ($activity === 'install') {\n                if ($task === 'cleanup') {\n                    // Mark a tag to force Install stuff (folders, files and table) to be cleanup while first login\n                    mysqli_query($dbTmp, \"INSERT INTO `\" . $var['tbl_prefix'] . \"misc` (`type`, `intitule`, `valeur`) VALUES ('install', 'clear_install_folder', 'true')\");\n\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } elseif ($task === 'init') {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } elseif ($task === 'cronJob') {\n                    // Create cronjob\n                    require_once '../includes/libraries/TiBeN/CrontabManager/CrontabAdapter.php';\n                    require_once '../includes/libraries/TiBeN/CrontabManager/CrontabJob.php';\n                    require_once '../includes/libraries/TiBeN/CrontabManager/CrontabRepository.php';\n\n                    // get php location\n                    require_once 'tp.functions.php';\n                    $phpLocation = findPhpBinary();\n                    if ($phpLocation['error'] === false) {\n                        // Instantiate the adapter and repository\n                        try {\n                            $crontabRepository = new CrontabRepository(new CrontabAdapter());\n                            $results = $crontabRepository->findJobByRegex('/Teampass\\ scheduler/');\n                            if (count($results) === 0) {\n                                // Add the job\n                                $crontabJob = new CrontabJob();\n                                $crontabJob\n                                    ->setMinutes('*')\n                                    ->setHours('*')\n                                    ->setDayOfMonth('*')\n                                    ->setMonths('*')\n                                    ->setDayOfWeek('*')\n                                    ->setTaskCommandLine($phpLocation . ' ' . $SETTINGS['cpassman_dir'] . '/sources/scheduler.php')\n                                    ->setComments('Teampass scheduler');\n                                \n                                $crontabRepository->addJob($crontabJob);\n                                $crontabRepository->persist();\n                            }\n                        } catch (Exception $e) {\n                            // do nothing\n                        }\n                    } else {\n                        echo '[{\"error\" : \"Cannot find PHP binary location. Please add a cronjob manually (see documentation).\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    }\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n            }\n\n            mysqli_close($dbTmp);\n            // Destroy session without writing to disk\n            define('NODESTROY_SESSION', 'true');\n            session_destroy();\n            break;\n    }\n}\n", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      upgrade_operations.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\nset_time_limit(600);\n\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\n$_SESSION['CPM'] = 1;\n\n//include librairies\nrequire_once '../includes/language/english.php';\nrequire_once '../includes/config/include.php';\nrequire_once '../includes/config/settings.php';\nrequire_once '../sources/main.functions.php';\nrequire_once '../includes/libraries/Tree/NestedTree/NestedTree.php';\nrequire_once 'tp.functions.php';\nrequire_once 'libs/aesctr.php';\nrequire_once '../includes/config/tp.config.php';\n\n// Prepare POST variables\n$post_nb = filter_input(INPUT_POST, 'nb', FILTER_SANITIZE_NUMBER_INT);\n$post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n\n// Load libraries\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Some init\n$_SESSION['settings']['loaded'] = '';\n$finish = true;\n\n// Get the encrypted password\ndefine('DB_PASSWD_CLEAR', defuse_return_decrypted(DB_PASSWD));\n\n// DataBase\n// Test DB connexion\n$pass = DB_PASSWD_CLEAR;\n$server = DB_HOST;\n$pre = DB_PREFIX;\n$database = DB_NAME;\n$port = DB_PORT;\n$user = DB_USER;\n\nif (mysqli_connect(\n    $server,\n    $user,\n    $pass,\n    $database,\n    $port\n)) {\n    $db_link = mysqli_connect(\n        $server,\n        $user,\n        $pass,\n        $database,\n        $port\n    );\n} else {\n    $res = 'Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error());\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error()) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Load libraries\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Get POST with operation to perform\n$post_operation = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\nif (isset($post_operation) === true && empty($post_operation) === false) {\n    // ---->\n    // OPERATION - 20230604_1 - generate key for item_key\n\n    // Get items to treat\n    $rows = mysqli_query(\n        $db_link,\n        \"SELECT id FROM \".$pre.\"items\n        WHERE item_key = '-1'\n        ORDER BY id\n        LIMIT \".$post_nb.\";\"\n    );\n    // Handle error on query\n    if (!$rows) {\n        echo '[{\"finish\":\"1\" , \"error\":\"'.mysqli_error($db_link).'\"}]';\n        exit();\n    }\n\n    // Get total of items to treat\n    $total = mysqli_num_rows($rows);\n\n    // Loop on items and update for requested ones\n    if ((int) $total > 0) {\n        while ($row = mysqli_fetch_array($rows, MYSQLI_ASSOC)) {\n            // Gererate a key and update\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\".$pre.\"items`\n                SET `item_key` = '\".uniqidReal(50).\"'\n                WHERE `id` = \".$row['id'].\";\"\n            );\n            if (mysqli_error($db_link)) {\n                echo '[{\"finish\":\"1\", \"next\":\"\", \"error\":\"MySQL Error! '.addslashes(mysqli_error($db_link)).'\"}]';\n                exit();\n            }\n        }\n    }\n\n    // Manage end of operation\n    if ($total === 0) {\n        $finish = 1;\n    } else {\n        $finish = 0;\n    }\n    // ----<\n}\n\n// Close connection\nmysqli_close($db_link);\n\n\n// Return back\necho '[{\"finish\":\"'.$finish.'\" , \"next\":\"\", \"error\":\"\", \"total\":\"'.$total.'\"}]';", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      upgrade_run_3.0.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\nset_time_limit(600);\n\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\n$_SESSION['CPM'] = 1;\n\n//include librairies\nrequire_once '../includes/language/english.php';\nrequire_once '../includes/config/include.php';\nrequire_once '../includes/config/settings.php';\nrequire_once '../sources/main.functions.php';\nrequire_once '../includes/libraries/Tree/NestedTree/NestedTree.php';\nrequire_once 'tp.functions.php';\nrequire_once 'libs/aesctr.php';\nrequire_once '../includes/config/tp.config.php';\n\n// Get the encrypted password\ndefine('DB_PASSWD_CLEAR', defuse_return_decrypted(DB_PASSWD));\n\n/*\n//Build tree\n$tree = new Tree\\NestedTree\\NestedTree(\n    $pre . 'nested_tree',\n    'id',\n    'parent_id',\n    'title'\n);\n*/\n\n// DataBase\n// Test DB connexion\n$pass = DB_PASSWD_CLEAR;\n$server = DB_HOST;\n$pre = DB_PREFIX;\n$database = DB_NAME;\n$port = DB_PORT;\n$user = DB_USER;\n\nif (mysqli_connect(\n    $server,\n    $user,\n    $pass,\n    $database,\n    $port\n)) {\n    $db_link = mysqli_connect(\n        $server,\n        $user,\n        $pass,\n        $database,\n        $port\n    );\n} else {\n    $res = 'Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error());\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error()) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Load libraries\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n\n//--->BEGIN 3.0.1\n\n// Ensure admin user is ready\nmysqli_query(\n    $db_link,\n    \"UPDATE \".$pre.\"users \n    SET is_ready_for_usage = 1, otp_provided = 1 \n    WHERE id = 1\"\n);\n\n//---<END 3.0.1\n\n\n//--->BEGIN 3.0.5\n\n// Add the INDEX process_id_idx to the processes_tasks table\n$res = checkIndexExist(\n    $pre . 'processes_tasks',\n    'process_id_idx',\n    \"ADD KEY `process_id_idx` (`process_id`)\"\n);\nif (!$res) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding the INDEX process_id_idx to the processes_tasks table! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n//---<END 3.0.5\n\n\n//--->BEGIN 3.0.6\n// Add new setting 'sending_emails_job_frequency'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'sending_emails_job_frequency'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'sending_emails_job_frequency', '2')\"\n    );\n}\n// Add new setting 'user_keys_job_frequency'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'user_keys_job_frequency'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'user_keys_job_frequency', '1')\"\n    );\n}\n// Add new setting 'items_statistics_job_frequency'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'enable_tasks_items_statistics_job_frequencymanager'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'items_statistics_job_frequency', '5')\"\n    );\n}\n\n// Add field ongoing_process_id to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'ongoing_process_id',\n    \"varchar(100) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field ongoing_process_id to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n//---<END 3.0.6\n\n\n//--->BEGIN 3.0.7\n// Alter\ntry {\n    mysqli_query(\n        $db_link,\n        'ALTER TABLE `' . $pre . 'cache_tree` CHANGE `data` `data` LONGTEXT DEFAULT NULL;'\n    );\n} catch (Exception $e) {\n    // Do nothing\n}\n\n// Fix for #3679\nmysqli_query(\n    $db_link,\n    \"UPDATE `\" . $pre . \"users` SET `treeloadstrategy` = 'full' WHERE treeloadstrategy NOT IN ('full','sequential');\"\n);\n\n//---<END 3.0.7\n\n\n//--->BEGIN 3.0.8\n// Add field mfa_disabled to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'mfa_enabled',\n    \"tinyint(1) NOT null DEFAULT '1';\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field mfa_disabled to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n//---<END 3.0.8\n\n\n//--->BEGIN 3.0.9\n// Add new setting 'reload_cache_table_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'reload_cache_table_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'reload_cache_table_task', '')\"\n    );\n}\n// Add new setting 'rebuild_config_file'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'rebuild_config_file'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'rebuild_config_file', '')\"\n    );\n}// Add new setting 'purge_temporary_files_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'purge_temporary_files_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'purge_temporary_files_task', '')\"\n    );\n}\n// Add new setting 'clean_orphan_objects_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'clean_orphan_objects_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'clean_orphan_objects_task', '')\"\n    );\n}\n// Add new setting 'users_personal_folder_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'users_personal_folder_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'users_personal_folder_task', '')\"\n    );\n}\n\n// Remove unused settings\nmysqli_query(\n    $db_link,\n    \"DELETE FROM `\" . $pre . \"misc` WHERE `intitule`='maintenance_job_tasks';\"\n);\nmysqli_query(\n    $db_link,\n    \"DELETE FROM `\" . $pre . \"misc` WHERE `intitule`='maintenance_job_frequency';\"\n);\n\n// Add field item_key to ITEMS table\n$res = addColumnIfNotExist(\n    $pre . 'items',\n    'item_key',\n    \"varchar(500) NOT NULL DEFAULT '-1';\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field item_key to table ITEMS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Remove column unique from ITEMS table\n$res = removeColumnIfNotExist(\n    $pre . 'items',\n    'unique'\n);\n\n// Add field export_tag to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'export_tag',\n    \"varchar(20) NOT NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field export_tag to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field folder_id to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'folder_id',\n    \"varchar(10) NOT NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field folder_id to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field perso to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'perso',\n    \"tinyint(1) NOT NULL default '0';\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field perso to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field restricted_to to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'restricted_to',\n    \"varchar(200) DEFAULT NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field restricted_to to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Rename column id to item_id in EXPORT table\nchangeColumnName(\n    $pre . 'export',\n    'id',\n    'item_id',\n    \"int(12) NOT NULL\"\n);\n\n// Add field created_at to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'created_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field created_at to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field updated_at to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'updated_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field updated_at to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field deleted_at to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'deleted_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field deleted_at to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n//\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"users` WHERE created_at IS NOT NULL\"));\nif (intval($tmp) === 0) {\n    populateUsersTable($pre);\n}\n\n\n// populate created_at, updated_at and deleted_at fields in USERS table\n\n//---<END 3.0.9\n\n// Save timestamp\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'upgrade_timestamp'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'upgrade_timestamp', \".time().\")\"\n    );\n} else {\n    mysqli_query(\n        $db_link,\n        \"UPDATE `\" . $pre . \"misc` SET valeur = \".time().\" WHERE type = 'admin' AND intitule = 'upgrade_timestamp'\"\n    );\n}\n\n//---< END 3.0.X upgrade steps\n\n// Close connection\nmysqli_close($db_link);\n\n// Finished\necho '[{\"finish\":\"1\" , \"next\":\"\", \"error\":\"\"}]';\n\n\n//---< FUNCTIONS\n\nfunction populateUsersTable($pre)\n{\n    global $db_link;\n    // loop on users - created_at\n    $users = mysqli_query(\n        $db_link,\n        \"select u.id as uid, ls.date as datetime\n        from `\" . $pre . \"users` as u\n        inner join `\" . $pre . \"log_system` as ls on ls.field_1 = u.id\n        WHERE ls.type = 'user_mngt' AND ls.label = 'at_user_added'\"\n    );\n    while ($user = mysqli_fetch_assoc($users)) {\n        if (empty((string) $user['datetime']) === false && is_null($user['datetime']) === false) {\n            // update created_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"users` SET created_at = '\".$user['datetime'].\"' WHERE id = \".$user['uid']\n            );\n        }\n    }\n\n    // loop on users - updated_at\n    $users = mysqli_query(\n        $db_link,\n        \"select u.id as uid, (select date from \" . $pre . \"log_system where type = 'user_mngt' and field_1=uid order by date DESC limit 1) as datetime from `\" . $pre . \"users` as u;\"\n    );\n    while ($user = mysqli_fetch_assoc($users)) {\n        if (empty((string) $user['datetime']) === false && is_null($user['datetime']) === false) {\n            // update updated_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"users` SET updated_at = '\".$user['datetime'].\"' WHERE id = \".$user['uid']\n            );\n        }\n    }\n}", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      upgrade_scripts_manager.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\nset_time_limit(600);\n\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\n$_SESSION['db_encoding'] = 'utf8';\n$_SESSION['CPM'] = 1;\nrequire_once '../includes/config/include.php';\n\n// Prepare POST variables\n$post_file_number = filter_input(INPUT_POST, 'file_number', FILTER_SANITIZE_NUMBER_INT);\n\n$scripts_list = array(\n    array('upgrade_run_3.0.0.php', 'user_id'),\n    array('upgrade_run_3.0.0_passwords.php', 'user_id'),\n    array('upgrade_run_3.0.0_logs.php', 'user_id'),\n    array('upgrade_run_3.0.0_fields.php', 'user_id'),\n    array('upgrade_run_3.0.0_suggestions.php', 'user_id'),\n    array('upgrade_run_3.0.0_files.php', 'user_id'),\n    array('upgrade_run_3.0.php', 'user_id'),\n    array('upgrade_operations.php', '20230604_1'),\n);\n$param = '';\n\n// test if finished\nif (intval($post_file_number) >= count($scripts_list)) {\n    $finished = 1;\n} else {\n    $finished = 0;\n}\necho '[{\"finish\":\"'.$finished.'\", \"scriptname\":\"'.$scripts_list[$post_file_number][0].'\", \"parameter\":\"'.$scripts_list[$post_file_number][1].'\"}]';\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      items.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (! checkUser($_SESSION['user_id'], $_SESSION['key'], curPage($SETTINGS), $SETTINGS)) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n$var = [];\n$var['hidden_asterisk'] = '<i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk\"></i>';\n\n?>\n\n\n<script type=\"text/javascript\">\n    var requestRunning = false,\n        clipboardForLogin,\n        clipboardForPassword,\n        clipboardForLink,\n        query_in_progress = 0,\n        screenHeight = $(window).height(),\n        quick_icon_query_status = true,\n        first_group = 1,\n        folderSearchCriteria = $('#jstree_search').val(),\n        userDidAChange = false,\n        userUploadedFile = false,\n        selectedFolder = false,\n        selectedFolderId = false,\n        itemClipboard,\n        startedItemsListQuery = false,\n        itemStorageInformation = '',\n        applicationVars,\n        initialPageLoad = true,\n        previousSelectedFolder=-1,\n        debugJavascript = false;\n\n    // Manage memory\n    browserSession(\n        'init',\n        'teampassApplication', {\n            lastItemSeen: false,\n            itemsListStop: '',\n            itemsListStart: '',\n            selectedFolder: '',\n            itemsListFolderId: false,\n            itemsListRestricted: '',\n            itemsShownByQuery: '',\n            foldersList: [],\n            personalSaltkeyRequired: 0,\n            uploadedFileId: '',\n            tempScrollTop: 0,\n        }\n    );\n\n    browserSession(\n        'init',\n        'teampassItem', {\n            IsPersonalFolder: '',\n            hasAccessLevel: '',\n            hasCustomCategories: '',\n            id: '',\n            timestamp: '',\n            folderId: ''\n        }\n    );\n\n    if (debugJavascript === true) {\n        console.log('User information')\n        console.log(store.get('teampassUser'))\n    }\n\n    // Show loader\n    toastr.remove();\n    toastr.info('<?php echo langHdl('loading_data'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n    // Build tree\n    $('#jstree').jstree({\n        'core': {\n            'animation': 0,\n            'check_callback': true,\n            'data': {\n                'url': './sources/tree.php',\n                'dataType': 'json',\n                'icons': false,\n                'data': function(node) {\n                    if (debugJavascript === true) {\n                        console.info('Les r\u00e9pertoires sont charg\u00e9s');\n                        console.log(node);\n                    }\n                    return {\n                        'id': node.id.split('_')[1],\n                        'force_refresh': store.get('teampassApplication') !== undefined ?\n                            store.get('teampassApplication').jstreeForceRefresh : 0\n                    };\n                }\n            },\n            'strings': {\n                'Loading ...': '<?php echo langHdl('loading'); ?>...'\n            },\n            'themes': {\n                'icons': false,\n            },\n        },\n        'plugins': [\n            'state', 'search'\n        ]\n    })\n    // On node select\n    .bind('select_node.jstree', function(e, data) {\n        if (debugJavascript === true) console.log('JSTREE BIND');\n        selectedFolder = $('#jstree').jstree('get_selected', true)[0]\n        selectedFolderId = parseInt(selectedFolder.id.split('_')[1]);\n\n        // manage icon open/closed\n        var selectedFolderIcon = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder'),\n            selectedFolderIconSelected = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder-selected');\n\n        // remove selected on previous folder\n        $($('#fld_'+previousSelectedFolder).children('.tree-folder'))\n            .removeClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder-selected'))\n            .addClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder'));\n        // show selected icon\n        $('#fld_'+selectedFolderId).children('.tree-folder')\n            .removeClass(selectedFolderIcon)\n            .addClass(selectedFolderIconSelected);\n\n        if (debugJavascript === true) {\n            console.info('SELECTED NODE ' + selectedFolderId + \" -- \" + startedItemsListQuery);\n            console.log(selectedFolder);\n            console.log(selectedFolder.original.is_pf)\n        }\n\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.selectedFolder = selectedFolderId,\n                teampassApplication.selectedFolderTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderParentId = selectedFolder.parent !== \"#\" ? selectedFolder.parent.split('_')[1] : 0,\n                teampassApplication.selectedFolderParentTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderIcon = selectedFolderIcon,\n                teampassApplication.selectedFolderIconSelected = selectedFolderIconSelected,\n                teampassApplication.selectedFolderIsPF = selectedFolder.original.is_pf,\n                teampassApplication.userCanEdit = selectedFolder.original.can_edit\n            }\n        )\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = selectedFolderId\n            }\n        );\n\n        // Prepare list of items\n        if (startedItemsListQuery === false) {\n            startedItemsListQuery = true;\n            ListerItems(selectedFolderId, '', 0);\n        }\n\n        previousSelectedFolder = selectedFolderId;\n        initialPageLoad = false;\n    })\n    // Search in tree\n    .bind('search.jstree', function(e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($('#jstree li>a.jstree-search').attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // Find folders in jstree\n    $('#jstree_search')\n        .keypress(function(e) {\n            if (e.keyCode === 13) {\n                $('#jstree').jstree('search', $('#jstree_search').val());\n            }\n        })\n        .focus(function() {\n            $(this).val('');\n        })\n        .blur(function() {\n            $(this).val(folderSearchCriteria);\n        });\n\n    // Is this a short url\n    var queryDict = {},\n        showItemOnPageLoad = false,\n        itemIdToShow = '';\n    location.search.substr(1).split(\"&\").forEach(function(item) {\n        queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]\n    });\n\n    if (queryDict['group'] !== undefined && queryDict['group'] !== '' &&\n        queryDict['id'] !== undefined && queryDict['id'] !== ''\n    ) {\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Store current view\n        savePreviousView();\n\n        // Store the folder to open\n        store.set(\n            'teampassApplication', {\n                selectedFolder: parseInt(queryDict['group']),\n                selectedItem: parseInt(queryDict['id'])\n            }\n        );\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = parseInt(queryDict['group'])\n            }\n        );\n\n        showItemOnPageLoad = true;\n        itemIdToShow = queryDict['id'];\n        startedItemsListQuery = true;\n\n        $('.item-details-card').removeClass('hidden');\n        $('#folders-tree-card, .columns-position').addClass('hidden');\n\n        // refresh selection in jstree\n        $('#jstree').jstree('deselect_all');\n        $('#jstree').jstree('select_node', '#li_' + itemIdToShow);\n        $('#jstree').jstree(true).hide_icons()\n\n        // Get list of items in this folder\n        startedItemsListQuery = true;\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n        // Show details\n        $.when(\n            Details(itemIdToShow, 'show', true)\n        ).then(function() {\n            //requestRunning = false;\n            console.log('Item detail affich\u00e9')\n            // Force previous view to Tree folders\n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.previousView = '#folders-tree-card';\n                }\n            );\n        });\n    }\n\n    // Preload list of items\n    if (store.get('teampassApplication') !== undefined &&\n        store.get('teampassApplication').selectedFolder !== undefined &&\n        store.get('teampassApplication').selectedFolder !== ''\n    ) {\n        startedItemsListQuery = true;\n\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n    }\n\n\n\n    // Close on escape key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 27) {\n            closeItemDetailsCard();\n        }\n    });\n\n    /*// Edit on e key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 69 && $('.item-details-card').is(':visible') === true) {\n            if ($('#form-item').hasClass('hidden') === false) {\n                showItemEditForm(store.get('teampassItem').id);\n            }\n        }\n    });\n    */\n\n    // load list of visible folders for current user\n    $(this).delay(500).queue(function() {\n        refreshVisibleFolders();\n\n        $(this).dequeue();\n    });\n\n    // Keep the scroll position\n    $(window).on(\"scroll\", function() {\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    tempScrollTop: $(window).scrollTop()\n                }\n            );\n        }\n    });\n\n\n    // Ensure correct height of folders tree\n    $('#jstree').height(screenHeight - 200);\n\n    // Prepare iCheck format for checkboxes\n    $('input[type=\"checkbox\"].flat-blue, input[type=\"radio\"].flat-blue').iCheck({\n        checkboxClass: 'icheckbox_flat-blue',\n        radioClass: 'iradio_flat-blue'\n    });\n\n    // Prepare some UI elements\n    $('#limited-search').prop('checked', false);\n\n    $(document).on('blur', '#form-item-icon', function() {\n        $('#form-item-icon-show').html('<i class=\"fas '+$(this).val()+'\"></i>');\n    });\n\n    // Manage the password show button\n    // including autohide after a couple of seconds\n    $(document).on('click', '#card-item-pwd-show-button', function() {\n        if ($(this).hasClass('pwd-shown') === false) {\n            $(this).addClass('pwd-shown');\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            // Change class and show spinner\n            $('.pwd-show-spinner')\n                .removeClass('far fa-eye')\n                .addClass('fas fa-circle-notch fa-spin text-warning');\n\n            // display raw password\n            $('#card-item-pwd')\n                .text($('#hidden-item-pwd').val())\n                .addClass('pointer_none');\n\n            // log password is shown\n            itemLog(\n                'at_password_shown',\n                store.get('teampassItem').id,\n                $('#card-item-label').text()\n            );\n\n            // Autohide\n            setTimeout(() => {\n                $(this).removeClass('pwd-shown');\n                $('#card-item-pwd')\n                    .html('<?php echo $var['hidden_asterisk']; ?>')\n                    .removeClass('pointer_none');\n                $('.pwd-show-spinner')\n                    .removeClass('fas fa-circle-notch fa-spin text-warning')\n                    .addClass('far fa-eye');\n            }, <?php echo isset($SETTINGS['password_overview_delay']) === true ? $SETTINGS['password_overview_delay'] * 1000 : 4000; ?>);\n        } else {\n            $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    });\n\n\n    // Manage folders action\n    $('.tp-action').click(function() {\n        // SHow user\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fas fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n        if ($(this).data('folder-action') === 'refresh') {\n            // Force refresh\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 1\n                }\n            );\n            if (selectedFolderId !== '') {\n                refreshTree(selectedFolderId, true);\n            } else {\n                refreshTree();\n            }\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 0\n                }\n            );\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'expand') {\n            $('#jstree').jstree('open_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'collapse') {\n            $('#jstree').jstree('close_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'add') {\n            if (debugJavascript === true) console.info('SHOW ADD FOLDER');\n            toastr.remove();\n\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20 &&\n                store.get('teampassUser').can_create_root_folder === 0\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Store last\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n\n            // Prepare some data in the form\n            if (selectedFolder.parent !== undefined && selectedFolder.parent !== '') {\n                $('#form-folder-add-parent').val(selectedFolder.parent.split('_')[1]).change();\n            }\n\n            $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n\n            $('#form-folder-add-label')\n                .val('')\n                .focus();\n            $('#form-folder-add-icon-selected, #form-folder-add-icon').val('');\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'add');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            if (debugJavascript === true) console.log(store.get('teampassApplication'));\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Show edit form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n            // Prepare some data in the form\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolder + \"']\")\n                .prop('disabled', true);\n            $('#form-folder-add-parent').val(store.get('teampassApplication').selectedFolderParentId).change();\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolderParentId + \"']\")\n                .prop('disabled', false);\n            $('#form-folder-add-label')\n                .val(store.get('teampassApplication').selectedFolderParentTitle)\n                .focus();\n            // is PF 1st level\n            if (store.get('teampassApplication').selectedFolderIsPF === 1 && store.get('teampassApplication').selectedFolderParentId !== 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            } else if (store.get('teampassApplication').userCanEdit === 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', true);\n            } else {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            }\n\n            $('#form-folder-add-complexicity').val(store.get('teampassItem').folderComplexity).change();\n            $('#form-folder-add-icon')\n                .val(store.get('teampassApplication').selectedFolderIcon);\n            $('#form-folder-add-icon-selected')\n                .val(store.get('teampassApplication').selectedFolderIconSelected);\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'update');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-copy');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-copy').removeClass('hidden');\n            // Prepare some data in the form\n            $('#form-folder-copy-source').val(store.get('teampassApplication').selectedFolder).change();\n            //$(\"#form-folder-copy-destination option[value='\"+selectedFolder.id.split('_')[1]+\"']\")\n            //.prop('disabled', true);\n            $('#form-folder-copy-destination').val(0).change();\n            $('#form-folder-copy-label')\n                .val(store.get('teampassApplication').selectedFolderTitle + ' <?php echo strtolower(langHdl('copy')); ?>')\n                .focus();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'delete') {\n            if (debugJavascript === true) console.info('SHOW DELETE FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 30) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-delete');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-delete').removeClass('hidden');\n\n            // Prepare some data in the form\n            $('#form-folder-delete-selection').val(store.get('teampassApplication').selectedFolder).change();\n            $('#form-folder-confirm-delete').iCheck('uncheck');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'import') {\n            // IMPORT ITEMS\n            if (debugJavascript === true) console.info('SHOW IMPORT ITEMS');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-folder-import');\n\n\n            // Show import form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-import').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'new') {\n            if (debugJavascript === true) console.info('SHOW NEW ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView();\n\n            // Remove validated class\n            $('#form-item').removeClass('was-validated');\n\n            // Get some info\n            $.when(\n                retPrivileges = getPrivilegesOnItem(store.get('teampassApplication').itemsListFolderId, 0)\n            ).then(function() {\n                if (retPrivileges === false) {\n                    return false;\n                }\n                // If previous item was seen then clean session\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 1,\n                        teampassItem.id = ''\n                    }\n                );\n\n                // Show Visibility and minimum complexity\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // HIde\n                $('.form-item-copy, #folders-tree-card, .columns-position, #form-item-password-options, .form-item-action, #form-item-attachments-zone')\n                    .addClass('hidden');\n                // Destroy editor\n                $('#form-item-description').summernote('destroy');\n\n                // Clean select2 lists\n                $('.select2').val('');\n                /*if ($('.select2') !== null) {if (debugJavascript === true) console.log($('.select2').length)\n                    $('.select2').change();\n                }*/\n                // Do some form cleaning\n                $('.clear-me-val').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html').html('');\n                $('.form-item-control').val('');\n                // Show edition form\n                $('.form-item').removeClass('hidden');\n                $('.item-details-card').addClass('hidden');\n                // Force update of simplepassmeter\n                $('#form-item-password').focus();\n                $('#form-item-label').focus();\n                // Prepare editor\n                $('#form-item-description').summernote({\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['insert', ['link', 'picture']],\n                        //['height', ['height']],\n                        ['view', ['codeview']]\n                    ],\n                    codeviewFilter: true,\n                    codeviewIframeFilter: true\n                });\n\n                // Set folder\n                $('#form-item-folder').val(selectedFolderId).change();\n                // Select tab#1\n                $('#form-item-nav-pills li:first-child a').tab('show');\n                // Preselect\n                $('#pwd-definition-size').val(12);\n                // Set type of action\n                $('#form-item-button-save').data('action', 'new_item');\n                // Does this folder contain Custom Fields\n                if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                    $('#form-item-field').removeClass('hidden');\n                    $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                        $('#form-item-category-' + category).removeClass('hidden');\n                    })\n                } else {\n                    $('#form-item-field, .form-item-category').addClass('hidden');\n                }\n                \n                // Add track-change class\n                //$('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change');\n\n                // Update variable\n                userDidAChange = false;\n\n                toastr.remove();\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT ITEM');\n            $.when(\n                getPrivilegesOnItem(selectedFolderId, 1)\n            ).then(function() {\n                // Is user allowed\n                if (store.get('teampassItem').item_rights < 20) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Store current view\n                savePreviousView();\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // Remove validated class\n                $('#form-item').removeClass('was-validated');\n\n                // Now manage edtion\n                showItemEditForm(selectedFolderId);\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView('.form-item-copy');\n\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show copy form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-copy, .item-details-card-menu').removeClass('hidden');\n                // Prepare some data in the form\n                $('#form-item-copy-new-label').val($('#form-item-label').val());\n                $('#form-item-copy-destination').val($('#form-item-folder').val()).change();\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'delete') {\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-delete');\n\n            if (debugJavascript === true) console.info('SHOW DELETE ITEM');\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show delete form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-delete, .item-details-card-menu').removeClass('hidden');\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'share') {\n            if (debugJavascript === true) console.info('SHOW SHARE ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-share');\n\n            // Show share form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-share, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'notify') {\n            if (debugJavascript === true) console.info('SHOW NOTIFY ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-notify');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-notify, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'otv') {\n            if (debugJavascript === true) console.info('SHOW OTV ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-otv');\n\n            // Generate link\n            prepareOneTimeView();\n\n            $('#form-item-otv-link').val('');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-otv, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'server') {\n            if (debugJavascript === true) console.info('SHOW SERVER UPDATE ITEM');\n            toastr.remove();\n\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-item-server');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-server, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        }\n\n        return false;\n    });\n\n    /**\n     * Saves the current view of user\n     */\n    function savePreviousView(newElement = '') {\n        var element = '';\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            element = '#folders-tree-card';\n        } else if ($('.form-item').hasClass('hidden') === false) {\n            element = '.form-item';\n        } else if ($('.item-details-card-menu').hasClass('hidden') === false) {\n            element = '.item-details-card';\n        }\n        \n        if (debugJavascript === true) {console.log('>>> ' + element + ' -- ' + newElement);}\n\n        if (element === '.item-details-card') element = '#folders-tree-card';\n\n        // Store current view\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.previousView = element;\n            }\n        );\n\n        // Store the new one to display\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.currentView = newElement;\n            }\n        );\n    }\n\n\n    $('.but-back').click(function() {\n        userDidAChange = false;\n        if ($(this).hasClass('but-back-to-item') === false) {\n            // Is this form the edition one?\n            if ($(this).hasClass('item-edit') === true && userUploadedFile === true) {\n                // Do some operation such as cancel file upload\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_uploaded_files_but_not_saved');\n                        if (debugJavascript === true) console.log(data);\n                    }\n                );\n            }\n\n            // Clear pickfiles div\n            $('#form-item-upload-pickfilesList').html('');\n\n            // Hide all\n            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, .columns-position, #item-details-card-categories, #form-item-upload-pickfilesList, #card-item-expired')\n                .addClass('hidden');\n\n            // Show expected one\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n\n            closeItemDetailsCard();\n        } else {\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n            $(store.get('teampassUser').currentView).addClass('hidden');\n        }\n        $('.but-prev-item, .but-next-item').addClass('hidden').text('');\n    });\n\n\n    // Quit item details card back to items list\n    $('.but-back-to-list').click(function() {\n        closeItemDetailsCard();\n    });\n\n\n\n    // Manage if change is performed by user\n    $('#form-item .form-item-control')\n        .on('change', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on #form-item > ' + userDidAChange + \" - Element \" + $(this).attr('id'));\n                //$(this).attr('data-change-ongoing', true);\n            }\n        })\n        .on('ifToggled', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on ifToggled > ' + userDidAChange);\n                //$(this).attr('data-change-ongoing', true);\n            }\n        });\n\n    /**\n     * Click on perform IMPORT\n     */\n    $(document).on('click', '#form-item-import-perform', function() {\n        if (debugJavascript === true) console.log('START IMPORT');\n    });\n\n\n    /**\n     * Click on ITEM REQUEST ACCESS\n     */\n    $(document).on('click', '.fa-clickable-access-request', function() {\n        // Store current view\n        savePreviousView();\n\n        // Adapt the form\n        $('#form-item-request-access-label')\n            .html($(this).closest('.list-item-description').find('.list-item-row-description').text());\n\n        // Store current item ID\n        var selectedItemId = $(this).closest('.list-item-row').data('item-id');\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.id = selectedItemId;\n            }\n        );\n\n        // Show user\n        $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n        $('.form-item-request-access').removeClass('hidden');\n    });\n\n    /**\n     * Send an access request to author\n     */\n    $(document).on('click', '#form-item-request-access-perform', function() {\n        // No reason is provided\n        if ($('#form-item-request-access-reason').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_provide_reason'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'id': store.get('teampassItem').id,\n            'email': DOMPurify.sanitize($('#form-item-request-access-reason').val()),\n        }\n        // NOw send the email\n        $.post(\n            \"sources/items.queries.php\", {\n                type: 'send_request_access',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_request_access');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change view\n                    $('.form-item-request-access').addClass('hidden');\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n\n        scrollBackToPosition();\n    });\n\n\n    /**\n     * Show/Hide the Password generation options\n     */\n    $('#item-button-password-showOptions').click(function() {\n        if ($('#form-item-password-options').hasClass('hidden') === true) {\n            $('#form-item-password-options').removeClass('hidden');\n        } else {\n            $('#form-item-password-options').addClass('hidden');\n        }\n    });\n\n\n\n    /**\n     * Adapt the top rules of item form on change of folders\n     */\n    $('#form-item-folder').change(function() {\n        if ($(this).val() !== null && store.get('teampass-folders') !== undefined) {\n            if (debugJavascript === true) {\n                console.log('teampass-folders');\n                console.log(store.get('teampass-folders'))\n            }\n            var folders = JSON.parse(store.get('teampass-folders'));\n            $('#card-item-visibility').html(folders[$(this).val()].visibilityRoles);\n            $('#card-item-minimum-complexity').html(folders[$(this).val()].complexity.text);\n        }\n\n    });\n\n    /**\n     * NOTIFY - Perform save\n     */\n    $('#form-item-notify-perform').click(function() {\n        var form = $('#form-item-notify');\n\n\n        var data = {\n            'notification_status': $('#form-item-notify-checkbox').is(':checked') === true ? 1 : 0,\n            'item_id': store.get('teampassItem').id,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'save_notification_status',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'save_notification_status');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change the icon for Notification\n                    if ($('#form-item-notify-checkbox').is(':checked') === true) {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span>');\n                    } else {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span>');\n                    }\n\n                    // Show/hide forms\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-notify').addClass('hidden');\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-notify-checkbox').iCheck('uncheck');\n                }\n            }\n        );\n    });\n\n\n\n    /**\n     * SHARE - validate the email\n     */\n    $('#form-item-share-perform').click(function() {\n        var form = $('#form-item-share');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Prepare data\n        var data = {\n            'id': store.get('teampassItem').id,\n            'receipt': DOMPurify.sanitize($('#form-item-share-email').val()),\n            'cat': 'share_this_item',\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'send_email',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_email');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-share').addClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-share-email').val('');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * DELETE - recycle item\n     */\n    $('#form-item-delete-perform').click(function() {\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'folder_id': selectedFolderId,\n            'label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n            'access_level': store.get('teampassItem').hasAccessLevel,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'delete_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_item');\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    $('.form-item-action, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(selectedFolderId, true);\n                    // Load list of items\n                    ListerItems(selectedFolderId, '', 0);\n                    // Close\n                    closeItemDetailsCard();\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * NOTIFY - save status\n     */\n    $('#form-item-share-perform').click(function() {\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'notify_user_on_item_change',\n                id: store.get('teampassItem').id,\n                value: $('#form-item-anyoneCanModify').is(':checked') === true ? 1 : 0,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                if (data[0].error === '') {\n                    $('.form-item, .item-details-card, .form-item-action').removeClass('hidden');\n                    $('.form-item-share, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear\n                    $('#form-item-anyoneCanModify').attr('checked', '');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            },\n            'json'\n        );\n    });\n\n\n    /**\n     * COPY - perform copy item\n     */\n    $('#form-item-copy-perform').click(function() {\n        // Do check\n        if ($('#form-item-copy-new-label').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('item_copying'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'source_id': selectedFolderId,\n            'dest_id': $('#form-item-copy-destination').val(),\n            'new_label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'copy_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(parseInt($('#form-item-copy-destination').val()), true);\n                    // Load list of items\n                    ListerItems(parseInt($('#form-item-copy-destination').val()), '', 0);\n\n                    // Reopen Item details form\n                    Details(\n                        data.new_id,\n                        'show',\n                        true\n                    );\n                    \n                    // Close\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-copy').addClass('hidden');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * SERVER - perform server update\n     */\n    $('#form-item-server-perform').click(function() {\n        // Decide what action is performing the user\n\n        if ($('#tab-one-shot').hasClass('active') === true) {\n            // Do check\n            if ($('#form-item-server-login').val() === '' ||\n                $('#form-item-server-old-password').val() === '' ||\n                $('#form-item-server-password').val() === ''\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Show cog\n            toastr.remove();\n            toastr.info(\n                '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>',\n            );\n\n            // Force user did a change to false\n            userDidAChange = false;\n            userUploadedFile = false;\n\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'new_pwd': DOMPurify.sanitize($('#form-item-server-password').val()),\n                'ssh_root': DOMPurify.sanitize($('#form-item-server-login').val()),\n                'ssh_pwd': DOMPurify.sanitize($('#form-item-server-old-password').val()),\n                'user_id': <?php echo $_SESSION['user_id']; ?>,\n            }\n\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password\",\n                    data: prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (debugJavascript === true) console.log(data);\n                    //check if format error\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Warn user\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n\n                        // Info\n                        $(\"#form-item-server-status\")\n                            .html(\"<?php echo langHdl('done'); ?> \" + data.text)\n                            .removeClass('hidden');\n                    }\n                }\n            );\n        } else if ($('#tab-scheduled').hasClass('active') === true) {\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password_frequency\",\n                    id: store.get('teampassItem').id,\n                    freq: $('#form-item-server-cron-frequency').val(),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].error != \"\") {\n                        toastr.remove();\n                        toastr.error(\n                            data[0].error,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('#form-item-server-cron-frequency').val(0).change();\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                },\n                \"json\"\n            );\n        }\n    });\n\n\n    /**\n     * SUGGESTION - perform new suggestion on item\n     */\n    $('#form-item-suggestion-perform').click(function() {\n        var form = $('#form-item-suggestion');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 10000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'label': DOMPurify.sanitize($('#form-item-suggestion-label').val()),\n            'login': DOMPurify.sanitize($('#form-item-suggestion-login').val()),\n            'password': DOMPurify.sanitize($('#form-item-suggestion-password').val()),\n            'email': DOMPurify.sanitize($('#form-item-suggestion-email').val()),\n            'url': DOMPurify.sanitize($('#form-item-suggestion-url').val()),\n            'description': DOMPurify.sanitize($('#form-item-suggestion-description').summernote('code'), {USE_PROFILES: {html: true}}),\n            'comment': DOMPurify.sanitize($('#form-item-suggestion-comment').val(), {USE_PROFILES: {html: true}}),\n            'folder_id': selectedFolderId,\n            'item_id': store.get('teampassItem').id\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'suggest_item_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'suggest_item_change');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear form\n                    $('.form-item-suggestion').html('');\n\n                    // Collapse form\n                    //$('.card-item-extra').collapse('toggle');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER NEW - Add a new folder\n     */\n    $('#form-folder-add-perform').click(function() {\n        var form = $('#form-folder-add');\n        if (debugJavascript === true) {\n            console.log(form[0]);\n            console.log(form[0].checkValidity());\n        }\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Error if folder text is only numeric\n        if (/^\\d+$/.test($('#form-folder-add-label').val())) {\n            $('#form-folder-add-label').addClass('is-invalid');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_only_numbers_in_folder_name'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        // Sanitize text fields\n        let formLabel = fieldDomPurifier('#form-folder-add-label', false, false, false),\n            formIcon = fieldDomPurifier('#form-folder-add-icon', false, false, false),\n            formIconSelected = fieldDomPurifier('#form-folder-add-icon-selected', false, false, false);\n        if (formLabel === false || formIcon === false || formIconSelected === false) {\n            // Label is empty\n            toastr.remove();\n            toastr.warning(\n                'XSS attempt detected. Field has been emptied.',\n                'Error', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'title': formLabel,\n            'parentId': $('#form-folder-add-parent option:selected').val(),\n            'complexity': $('#form-folder-add-complexicity option:selected').val(),\n            //'access_rights_strategy': $('#form-folder-add-rights option:selected').val(),\n            'icon': formIcon,\n            'iconSelected': formIconSelected,\n            'id': selectedFolderId,\n        }\n        if (debugJavascript === true) console.log(data);\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: $('#form-folder-add').data('action') + '_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', $('#form-folder-add').data('action') + '_folder');\n                if (debugJavascript === true) {\n                    console.log(data);\n                }\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    if ($('#form-folder-add').data('action') === 'add') {\n                        // Refresh tree\n                        refreshTree(data.newId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(data.newId, '', 0);\n                    } else {\n                        // Refresh tree\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 1;\n                            }\n                        );\n                        refreshTree(selectedFolderId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(selectedFolderId, '', 0);\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 0;\n                            }\n                        );\n                    }\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER DELETE - Delete an existing folder\n     */\n    $('#form-folder-delete-perform').click(function() {\n        // Do check\n        if ($('#form-folder-confirm-delete').is(':checked') === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_confirm'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($('#form-folder-delete-selection option:selected').text() === '<?php echo $_SESSION['login']; ?>') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_not_allowed_to'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Is a folder selected\n        if ($('#form-folder-delete-selection option:selected').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        \n        // Ensure Root is not selected\n        } else if (parseInt($('#form-folder-delete-selection option:selected').val()) === 0) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        \n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n\n        var selectedFolders = [],\n            data = {\n                'selectedFolders': [$('#form-folder-delete-selection option:selected').val()]\n            }\n        if (debugJavascript === true) console.log(data)\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'delete_folders',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'delete_folders');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree(data.parent_id, true);\n                    // Refresh list of items inside the folder\n                    ListerItems(data.parent_id, '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n\n                $('#form-folder-confirm-delete').iCheck('uncheck');\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER COPY - Copy an existing folder\n     */\n    $('#form-folder-copy-perform').click(function() {\n        // Do check\n        if ($(\"#form-folder-copy-source\").val() === \"\" || $(\"#form-folder-copy-destination\").val() === \"\") {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_must_enter_all_fields'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($(\"#form-folder-copy-source\").val() === $(\"#form-folder-copy-destination\").val()) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_source_and_destination_are_equal'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        var data = {\n            'source_folder_id': $('#form-folder-copy-source option:selected').val(),\n            'target_folder_id': $('#form-folder-copy-destination option:selected').val(),\n            'folder_label': DOMPurify.sanitize($('#form-folder-copy-label').val(), {USE_PROFILES: {html: false}}),\n        }\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'copy_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'copy_folder');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree($('#form-folder-copy-destination option:selected').val(), true);\n                    // Refresh list of items inside the folder\n                    ListerItems($('#form-folder-copy-destination option:selected').val(), '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n    $(document).on('change', '#form-folder-copy-source', function() {\n        $('#form-folder-copy-label')\n            .val($('#form-folder-copy-source option:selected').text()\n                .substring(0, $('#form-folder-copy-source option:selected').text().lastIndexOf('[')).trim() +\n                ' <?php echo strtolower(langHdl('copy')); ?>');\n    });\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function closeItemDetailsCard() {\n        if (debugJavascript === true) console.log('CLOSE - user did a change? ' + userDidAChange + \" - User previous view: \" + store.get('teampassUser').previousView);\n        if (userDidAChange === true) {\n            toastr\n                .warning(\n                    '<?php echo langHdl('changes_ongoing'); ?><br>' +\n                    '<button type=\"button\" class=\"btn clear\" id=\"discard-changes\"><?php echo langHdl('yes'); ?></button>' +\n                    '<button type=\"button\" class=\"btn clear ml-2\" id=\"keep-changes\"><?php echo langHdl('no'); ?></button>',\n                    '<?php echo langHdl('caution'); ?>', {\n                        closeButton: true\n                    }\n                );\n            $(document).on('click', '#discard-changes', function() {\n                userDidAChange = false;\n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n                closeItemDetailsCard();\n            });\n        } else {\n            if (store.get('teampassUser').previousView === '.item-details-card' &&\n                $('.item-details-card').hasClass('hidden') === false\n            ) {\n                $('.item-details-card').removeClass('hidden');\n                $('#folders-tree-card, .columns-position, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                    .addClass('hidden');\n\n                // Force previous view to folders list\n                store.update(\n                    'teampassUser',\n                    function(teampassUser) {\n                        teampassUser.previousView = '#folders-tree-card';\n                    }\n                );\n            } else {\n                if (store.get('teampassUser').previousView === '.item-details-card') {\n                    // Force previous view to folders list\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.previousView = '#folders-tree-card';\n                        }\n                    );\n                    // Reopen Item details form\n                    Details(\n                        store.get('teampassItem').id,\n                        'show',\n                        true\n                    );\n\n                    return false;\n                }\n                if (store.get('teampassUser').previousView === '#folders-tree-card' ||\n                    $('.item-details-card').hasClass('hidden') === false\n                ) {\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n                    $('.item-details-card, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                        .addClass('hidden');\n                } else {\n                    // Hide all\n                    $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired')\n                        .addClass('hidden');\n\n                    // Show expected one\n                    $(store.get('teampassUser').previousView).removeClass('hidden');\n                }\n\n                // Do some form cleaning\n                $('.clear-me-val, .form-item-control').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html, .card-item-field-value').html('');\n                $('.form-check-input').attr('checked', '');\n                //$('.card-item-extra').collapse();\n                $('.collapse').removeClass('show');\n                $('.to_be_deleted').remove();\n                $('#card-item-attachments, #card-item-history').html('');\n                $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n\n                // Move back fields\n                $('.fields-to-move')\n                    .detach()\n                    .appendTo('#card-item-fields');\n\n                // Ensure the form is correct\n                $('#list-group-item-main, #item-details-card-categories')\n                    .children('.list-group')\n                    .removeClass('hidden');\n\n                // SHow save button in card\n                //$('#form-item-buttons').removeClass('sticky-footer');\n\n                // Destroy editors\n                $('#form-item-description').summernote('destroy');\n                $('#form-item-suggestion-description').summernote('destroy');\n\n                // Show loading\n                $('.overlay').removeClass('hidden');\n\n                // Collapse accordion\n                //$('.collapseme').addClass('collapsed-card');\n\n                // Restore scroll position\n                $(window).scrollTop(userScrollPosition);\n\n                userDidAChange = false;                \n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n            if (debugJavascript === true) console.log('Edit for closed');\n        }\n\n\n\n        // Scroll back to position\n        scrollBackToPosition();\n    }\n\n\n    /**\n     * Click on button with class but-navigate-item\n     */\n    $(document)\n        .on('click', '.but-navigate-item', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details(\n                //$(this).hasClass('but-prev-item') === true ? $('#list-item-row_' + $(this).attr('data-prev-item-key')) : $('#list-item-row_' + $(this).attr('data-next-item-key')),\n                $(this).hasClass('but-prev-item') === true ? $('#list-item-row_' + $(this).attr('data-prev-item-id')) : $('#list-item-row_' + $(this).attr('data-next-item-id')),\n                'show'\n            );\n\n            $('.but-navigate-item').addClass('hidden');\n        });\n\n\n    /**\n     * Click on item\n     */\n    $(document)\n        .on('click', '.list-item-clicktoshow', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details($(this).closest('tr'), 'show');\n        })\n        .on('click', '.list-item-clicktoedit', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            if (debugJavascript === true) console.log('EDIT ME');\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n            \n            // Load item info\n            Details($(this).closest('tr'), 'edit');\n        });\n\n    /**\n     *  Manage mini icons on mouse over\n     */\n    $(document)\n        .on('mouseenter', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").removeClass('hidden');\n        })\n        .on('mouseleave', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").addClass('hidden');\n        });\n\n    $(document)\n        .on('change', '.form-check-input-template', function() {\n            $('.form-check-input-template').not(this).prop('checked', false);\n            userDidAChange = true;\n            if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        });\n\n    $('.form-check-input-template').on('ifChecked', function() {\n        $('.form-check-input-template').not(this).iCheck('uncheck');\n        userDidAChange = true;\n        if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        //$('.form-check-input-template').attr('data-change-ongoing', true);;\n    });\n\n    /**\n     * Manage change of color\n     */\n    $(document)\n        .on('mouseenter', '.fa-clickable', function() {\n            $(this).addClass('text-info');\n        })\n        .on('mouseleave', '.fa-clickable', function() {\n            $(this).removeClass('text-info');\n        });\n\n    $('#form-item-label').change(function() {\n        $('#form-item-title').html($(this).val());\n    });\n\n    /**\n     * Make the item favourite by clicking on icon\n     */\n    $(document)\n        .on('click', '.item-favourite', function() {\n            if (quick_icon_query_status === true) {\n                quick_icon_query_status = false;\n                var elem = $(this);\n\n                //Send query\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('success'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                var data = {\n                    item_id: $(this).data('item-id'),\n                    action: $(this).data('item-favourited'),\n                }\n\n                console.log(data)\n\n                $.post('sources/items.queries.php', {\n                        type: 'action_on_quick_icon',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(ret) {\n                        //change quick icon\n                        if (elem.data('item-favourited') === 0) {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>');\n                        } else {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse\"></i></span>');\n                        }\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                        quick_icon_query_status = true;\n                    }\n                );\n            }\n        });\n\n    // Click to reaveal password\n    $('#item-button-password-show')\n        .mouseup(function() {\n            $('#form-item-password').attr('type', 'password');\n        })\n        .mousedown(function() {\n            $('#form-item-password').attr('type', 'text');\n        });\n    $('.btn-no-click')\n        .click(function(e) {\n            e.preventDefault();\n        });\n\n\n\n    // show password during longpress\n    var mouseStillDown = false;\n    $('.item-details-card').on('mousedown', '.unhide_masked_data', function(event) {\n            mouseStillDown = true;\n            showPwdContinuous();\n        })\n        .on('mouseup', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        })\n        .on('mouseleave', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        });\n    var showPwdContinuous = function() {\n        if (mouseStillDown === true) {\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            $('#card-item-pwd')\n                .html(\n                    '<span style=\"cursor:none;\">' +\n                    $('#hidden-item-pwd').val()\n                    .replace(/</g, '&lt;')\n                    .replace(/>/g, '&gt;') +\n                    '</span>'\n                );\n\n            setTimeout('showPwdContinuous(\"card-item-pwd\")', 50);\n            // log password is shown\n            if ($('#card-item-pwd').hasClass('pwd-shown') === false) {\n                itemLog(\n                    'at_password_shown',\n                    store.get('teampassItem').id,\n                    $('#card-item-label').text()\n                );\n                $('#card-item-pwd').addClass('pwd-shown');\n            }\n        } else {\n            $('#card-item-pwd')\n                .html('<?php echo $var['hidden_asterisk']; ?>')\n                .removeClass('pwd-shown');\n        }\n    };\n\n    // Fields - show masked field\n    var selectedElement;\n    $('.item-details-card').on('mousedown', '.replace-asterisk', function(event) {\n            mouseStillDown = true;\n            selectedElement = $(this);\n            showContinuousMasked();\n        })\n        .on('mouseup', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        })\n        .on('mouseleave', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        });\n    var showContinuousMasked = function() {\n        if (mouseStillDown) {\n            $(selectedElement)\n                .text($('#hidden-card-item-field-value-' + selectedElement.data('field-id')).val());\n\n            setTimeout('showContinuousMasked()', 50);\n        } else {\n            $(selectedElement).html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    };\n\n\n    /**\n     * Launch the items search\n     */\n    $('#find_items').bind('keypress', function(e) {\n        var code = e.keyCode || e.which;\n        if (code == 13) {\n            searchItems($(this).val());\n        }\n    });\n\n    $('#find_items_button').click(function() {\n        if ($('#find_items').val() !== '') {\n            searchItems($('#find_items').val());\n        }\n    });\n\n\n    // Password strength\n    var pwdOptions = {};\n    pwdOptions = {\n        common: {\n            zxcvbn: true,\n            debug: false,\n            minChar: 4,\n            onScore: function (options, word, totalScoreCalculated) {\n                if (word.length === 20 && totalScoreCalculated < options.ui.scores[1]) {\n                    // Score doesn't meet the score[1]. So we will return the min\n                    // numbers of points to get that score instead.\n                    return options.ui.score[1]\n                }\n                $(\"#form-item-password-complex\").val(totalScoreCalculated);\n                return totalScoreCalculated;\n            },\n            usernameField: \"#form-item-login\",\n        },\n        rules: {},\n        ui: {\n            colorClasses: [\"text-danger\", \"text-danger\", \"text-danger\", \"text-warning\", \"text-warning\", \"text-success\"],\n            showPopover: false,\n            showStatus: true,\n            showErrors: false,\n            showVerdictsInsideProgressBar: true,\n            container: \"#tab_1\",\n            viewports: {\n                progress: \"#form-item-password-strength\",\n                score: \"#form-item-password-strength\"\n            },\n            scores: [<?php echo TP_PW_STRENGTH_1;?>, <?php echo TP_PW_STRENGTH_2;?>, <?php echo TP_PW_STRENGTH_3;?>, <?php echo TP_PW_STRENGTH_4;?>, <?php echo TP_PW_STRENGTH_5;?>],\n        },\n        i18n : {\n            t: function (key) {\n                var phrases = {\n                    weak: '<?php echo langHdl('complex_level1'); ?>',\n                    normal: '<?php echo langHdl('complex_level2'); ?>',\n                    medium: '<?php echo langHdl('complex_level3'); ?>',\n                    strong: '<?php echo langHdl('complex_level4'); ?>',\n                    veryStrong: '<?php echo langHdl('complex_level5'); ?>'\n                };\n                var result = phrases[key];\n\n                return result === key ? '' : result;\n            }\n        }\n    };\n    $('#form-item-password').pwstrength(pwdOptions);\n    \n\n\n    /**\n     * PLUPLOAD\n     */\n    var uploader_attachments = new plupload.Uploader({\n        runtimes: 'html5,flash,silverlight,html4',\n        browse_button: 'form-item-attach-pickfiles',\n        container: 'form-item-upload-zone',\n        max_file_size: '<?php\n            if (strrpos($SETTINGS['upload_maxfilesize'], 'mb') === false) {\n                echo $SETTINGS['upload_maxfilesize'] . 'mb';\n            } else {\n                echo $SETTINGS['upload_maxfilesize'];\n            }\n            ?>',\n        chunk_size: '1mb',\n        dragdrop: true,\n        url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/upload.attachments.php',\n        flash_swf_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.swf',\n        silverlight_xap_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.xap',\n        filters: {\n            mime_types: [\n                <?php\n                if (\n                    isset($SETTINGS['upload_all_extensions_file']) === false\n                    || (isset($SETTINGS['upload_all_extensions_file']) === true\n                        && (int) $SETTINGS['upload_all_extensions_file'] === 0)\n                ) {\n                    ?> {\n                        title: 'Image files',\n                        extensions: '<?php echo $SETTINGS['upload_imagesext']; ?>'\n                    },\n                    {\n                        title: 'Package files',\n                        extensions: '<?php echo $SETTINGS['upload_pkgext']; ?>'\n                    },\n                    {\n                        title: 'Documents files',\n                        extensions: '<?php echo $SETTINGS['upload_docext']; ?>'\n                    },\n                    {\n                        title: 'Other files',\n                        extensions: '<?php echo $SETTINGS['upload_otherext']; ?>'\n                    }\n                <?php\n                }\n                ?>\n            ],\n            <?php\n            if (isset($SETTINGS['upload_zero_byte_file']) === true && (int) $SETTINGS['upload_zero_byte_file'] === 1) {\n                ?>\n                prevent_empty: false\n            <?php\n            }\n            ?>\n        },\n        <?php\n        if ((int) $SETTINGS['upload_imageresize_options'] === 1) {\n            ?>\n            resize: {\n                width: <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n                height: <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n                quality: <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n            },\n        <?php\n        }\n        ?>\n        init: {\n            BeforeUpload: function(up, file) {\n                toastr.info(\n                    '<i class=\"fa-solid fa-cloud-arrow-up fa-bounce mr-2\"></i><?php echo langHdl('uploading'); ?>',\n                    '', {\n                        timeOut: 0\n                    }\n                );\n\n                // Get random number\n                if (store.get('teampassApplication').uploadedFileId === '') {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.uploadedFileId = CreateRandomString(9, 'num_no_0');\n                        }\n                    );\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID: '<?php echo $_SESSION['user_id']; ?>',\n                    itemId: store.get('teampassItem').id,\n                    type_upload: 'item_attachments',\n                    isNewItem: store.get('teampassItem').isNewItem,\n                    isPersonal: store.get('teampassItem').folderIsPersonal,\n                    edit_item: false,\n                    user_token: store.get('teampassApplication').attachmentToken,\n                    randomId: store.get('teampassApplication').uploadedFileId,\n                    files_number: $('#form-item-hidden-pickFilesNumber').val(),\n                    file_size: file.size\n                });\n                console.log('DEBUG IMAGE - BeforeUpload')\n                console.log(up);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind('UploadProgress', function(up, file) {\n        //console.log('uploader_attachments.bind')\n        $('#upload-file_' + file.id).html('<i class=\"fas fa-file fa-sm mr-2\"></i>' + htmlEncode(file.name) + '<span id=\"fileStatus_'+file.id+'\">- ' + file.percent + '%</span>');\n        if (file.percent === 100) {\n            $('#fileStatus_'+file.id).html('<i class=\"fa-solid fa-circle-check text-success ml-2 fa-1x\"></i>');\n            userUploadedFile = true;\n            userDidAChange = true;\n            toastr.remove();\n        }\n    });\n    uploader_attachments.bind('Error', function(up, err) {\n        toastr.remove();\n        toastr.error(\n            err.message + (err.file ? ', File: ' + err.file.name : ''),\n            '', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    $(\"#form-item-upload-pickfiles\").click(function(e) {\n        if ($('#form-item-upload-pickfilesList').text() !== '') {\n            // generate and save token\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"save_token\",\n                    type_category: 'action_system',\n                    size: 25,\n                    capital: true,\n                    numeric: true,\n                    ambiguous: true,\n                    reason: \"item_attachments\",\n                    duration: 10,\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.attachmentToken = data[0].token;\n                        }\n                    );\n                    console.log('start upload')\n                    uploader_attachments.start();\n                },\n                \"json\"\n            );\n            e.preventDefault();\n        } else {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_file_to_upload'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        if (debugJavascript === true) {\n            console.log('uploader_attachments.FilesAdded')\n        }\n        $('#form-item-upload-pickfilesList').removeClass('hidden');\n        var addedFiles = '';\n        $.each(files, function(i, file) {\n            $('#form-item-upload-pickfilesList').append(\n                '<div id=\"upload-file_' + file.id + '\">' +\n                '<span id=\"upload-file-remove_' + file.id +\n                '><a href=\"#\" onclick=\"$(this).closest(\\'div\\').remove();\"><i class=\" fa fa-trash mr-2 pointer\"></i></a></span> ' +\n                htmlEncode(file.name) + ' (' + plupload.formatSize(file.size) + ')' +\n                '</div>');\n            $(\"#form-item-hidden-pickFilesNumber\").val(\n                parseInt($(\"#form-item-hidden-pickFilesNumber\").val()) + 1\n            );\n            if (debugJavascript === true) {\n                console.info('Info du fichier :');\n                console.log(file);\n            }\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    //->\n\n\n\n    /**\n     * Save item changes\n     */\n    $('#form-item-button-save').click(function() {\n        var arrayQuery = [],\n            originalFolderId = $('#form-item-folder').val(),\n            itemsList = [],\n            userItemRight = '';\n\n        // What action is this?\n        if ($('#form-item-button-save').data('action') === '' ||\n            $('#form-item-button-save').data('action') === undefined\n        ) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_no_action_identified'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Don't save if no change\n        if (userDidAChange === false && userUploadedFile === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('no_change_performed'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Validate form\n        var form = $('#form-item');\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Loop on all changed fields\n        $('.form-item-field-custom').each(function(i, obj) {\n            if ($(this).data('change-ongoing') === true) {\n                // Create an array with changed inputs\n                arrayQuery.push({\n                    'input': $(this).attr('id'),\n                    'field': $(this).data('field-name'),\n                    'value': $(this).val(),\n                });\n            }\n        });\n        if (debugJavascript === true) {\n            console.log('CHANGED FIELDS '+userUploadedFile + ' ' + userDidAChange);\n            console.log(arrayQuery);\n        }\n\n        // is user allowed to edit this item\n        if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n            itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n        }\n        if (itemsList.length > 0) {\n            userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n        }\n\n        \n\n        // Do checks\n        if (arrayQuery.length > 0 || userDidAChange === true) {\n            var reg = new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n            // Sanitize text fields\n            let formLabel = fieldDomPurifier('#form-item-label', false, false, false),\n                formDescription = $('#form-item-description').summernote('code') !== \"<p><br></p>\" ? fieldDomPurifier('#form-item-description', true, false, false, $('#form-item-description').summernote('code')) : '',\n                formEmail = fieldDomPurifier('#form-item-email'),\n                formTags = fieldDomPurifier('#form-item-tags'),\n                formUrl = fieldDomPurifier('#form-item-url'),\n                formIcon = fieldDomPurifier('#form-item-icon');\n            if (formLabel === false || formDescription === false || formEmail === false || formTags === false || formUrl === false || formIcon === false) {\n                // Label is empty\n                toastr.remove();\n                toastr.warning(\n                    'XSS attempt detected. Field has been emptied.',\n                    'Error', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            \n            // Do some easy checks\n            if (formLabel === '') {\n                // Label is empty\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_label'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if (formTags !== '' &&\n                reg.test(formTags)\n            ) {\n                // Tags not wel formated\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_tags'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').val() === '' ||\n                typeof $('#form-item-folder option:selected').val() === 'undefined'\n            ) {\n                // No folder selected\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_no_selected_folder'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').attr('disabled') === 'disabled' && userItemRight && userItemRight <= 40) {\n                // Folder is not allowed\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_folder_not_allowed'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else {\n                // Continue preparation of saving query\n\n                //Manage restriction\n                var restriction = new Array(),\n                    restrictionRole = new Array(),\n                    userInRestrictionList = false;\n                $('#form-item-restrictedto option:selected').each(function() {\n                    if ($(this).val() !== '') {\n                        if ($(this).hasClass('restriction_is_role') === true) {\n                            restrictionRole.push($(this).val().substring(5));\n                        } else {\n                            restriction.push($(this).val());\n                            // Is the user part of the restriction option\n                            if ($(this).val() === '<?php echo $_SESSION['user_id']; ?>') {\n                                userInRestrictionList = true;\n                            }\n                        }\n                    }\n                });\n                // IF any restriction, then ensure the author is in\n                if (userInRestrictionList === false && restriction.length > 0) {\n                    restriction.push('<?php echo $_SESSION['user_id']; ?>;');\n                }\n\n                // Manage diffusion list\n                var diffusion = new Array();\n                var diffusionNames = new Array();\n                $('#form-item-anounce option:selected').each(function() {\n                    diffusion.push($(this).val());\n                    diffusionNames.push($(this).text());\n                });\n\n                // Get item field values\n                // Ensure that mandatory ones are filled in too\n                // and they are compliant to regexes\n                var fields = [];\n                var errorExit = false;\n                var reason = '';\n                $('.form-item-field-custom').each(function(key, data) {\n                    fields.push({\n                        'id': $(this).data('field-name'),\n                        'value': $(this).val(),\n                    });\n\n                    // Mandatory?\n                    if (parseInt($(this).data('field-mandatory')) === 1 &&\n                        $(this).val() === '' &&\n                        $('#form-item-field-' + $(this).data('field-name')).parent().hasClass('hidden') === false\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        return false;\n                    }\n                    if ($(this).val().length > 0 && $(this).data('field-regex').length > 0 &&\n                        !$(this).val().match($(this).data('field-regex'))\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        reason = 'regex';\n                        return false;\n                    }\n                });\n                if (errorExit === true) {\n                    toastr.remove();\n                    if (reason === 'regex') {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_regex'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                    return false;\n                }\n                    \n                //prepare data\n                var data = {\n                    'anyone_can_modify': $('#form-item-anyoneCanModify').is(':checked') ? 1 : 0,\n                    'complexity_level': parseInt($('#form-item-password-complex').val()),\n                    'description': formDescription,\n                    'diffusion_list': diffusion,\n                    'diffusion_list_names': diffusionNames,\n                    'folder': parseInt($('#form-item-folder').val()),\n                    'email': formEmail,\n                    'fields': fields,\n                    'folder_is_personal': store.get('teampassItem').IsPersonalFolder === 1 ? 1 : 0,\n                    'id': store.get('teampassItem').id,\n                    'label': formLabel,\n                    'login': DOMPurify.sanitize($('#form-item-login').val()),\n                    'pw': $('#form-item-password').val(),\n                    'restricted_to': restriction,\n                    'restricted_to_roles': restrictionRole,\n                    'tags': formTags,\n                    'template_id': parseInt($('input.form-check-input-template:checkbox:checked').data('category-id')),\n                    'to_be_deleted_after_date': ($('#form-item-deleteAfterDate').length !== 0 &&\n                        $('#form-item-deleteAfterDate').val() !== '') ? $('#form-item-deleteAfterDate').val() : '',\n                    'to_be_deleted_after_x_views': ($('#form-item-deleteAfterShown').length !== 0 &&\n                            $('#form-item-deleteAfterShown').val() !== '' && $('#form-item-deleteAfterShown').val() >= 1) ?\n                        parseInt($('#form-item-deleteAfterShown').val()) : '',\n                    'url': formUrl,\n                    'user_id': parseInt('<?php echo $_SESSION['user_id']; ?>'),\n                    'uploaded_file_id': store.get('teampassApplication').uploadedFileId === undefined ? '' : store.get('teampassApplication').uploadedFileId,\n                    'fa_icon': formIcon,\n                };\n                if (debugJavascript === true) {\n                    console.log('SAVING DATA');\n                    console.log(data);\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n                );\n\n                // CLear tempo var\n                store.update(\n                    'teampassApplication',\n                    function(teampassApplication) {\n                        teampassApplication.uploadedFileId = '';\n                    }\n                );\n\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: $('#form-item-button-save').data('action'),\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //decrypt data\n                        try {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                        } catch (e) {\n                            // error\n                            $(\"#div_loading\").addClass(\"hidden\");\n                            //requestRunning = false;\n                            $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\" + data);\n                            $(\"#div_dialog_message\").dialog(\"open\");\n\n                            toastr.remove();\n                            toastr.error(\n                                'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        }\n                        if (debugJavascript === true) console.log('RETURNED DATA');\n                        if (debugJavascript === true) console.log(data);\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        } else {\n                            // Refresh tree\n                            if ($('#form-item-button-save').data('action') === 'update_item') {\n                                if ($('#form-item-folder').val() !== '' &&\n                                    originalFolderId !== $('#form-item-folder').val()\n                                ) {\n                                    refreshTree($('#form-item-folder').val(), false);\n                                }\n                                // Send query to confirm attachments\n                                var data = {\n                                    'item_id': store.get('teampassItem').id,\n                                }\n                                $.post(\n                                    \"sources/items.queries.php\", {\n                                        type: 'confirm_attachments',\n                                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                                        key: '<?php echo $_SESSION['key']; ?>'\n                                    }\n                                );\n                            } else {\n                                refreshTree($('#form-item-folder').val(), true);\n                            }\n\n                            // Refresh list of items inside the folder\n                            ListerItems($('#form-item-folder').val(), '', 0);\n\n                            // Inform user\n                            toastr.info(\n                                '<?php echo langHdl('success'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n\n                            // Close\n                            userDidAChange = false;\n                            userUploadedFile = false;\n\n                            closeItemDetailsCard();\n                            /*\n                            // Hide all\n                            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired').addClass('hidden');\n\n                            // Show expected one\n                            $(store.get('teampassUser').previousView).removeClass('hidden');\n                            */\n                        }\n                    }\n                );\n            }\n        } else if (userUploadedFile === true) {\n            // Send query to confirm attachments\n            var data = {\n                'item_id': store.get('teampassItem').id,\n            }\n\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'confirm_attachments',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                }\n            );\n\n            store.update(\n                'teampassItem',\n                function(teampassItem) {\n                    teampassItem.isNewItem = 0\n                }\n            );\n\n            // Inform user\n            toastr.info(\n                '<?php echo langHdl('done'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Close\n            userUploadedFile = false;\n            closeItemDetailsCard();\n        } else {\n            if (debugJavascript === true) console.info('NOTHING TO SAVE');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('nothing_to_save'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    //->\n\n\n    //autocomplete for TAGS\n    $(\"#form-item-tags\")\n        //.focus()\n        .bind(\"keydown\", function(event) {\n            if (event.keyCode === $.ui.keyCode.TAB &&\n                $(this).data(\"autocomplete\").menu.active) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            source: function(request, response) {\n                $.getJSON(\"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast(request.term)\n                }, response);\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast(this.value);\n            },\n            select: function(event, ui) {\n                var terms = split(this.value);\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push(ui.item.value);\n                // add placeholder to get the comma-and-space at the end\n                terms.push(\"\");\n                this.value = terms.join(\" \");\n\n                return false;\n            }\n        });\n\n    // Warn in case of limited search\n    $(document).on('click', '#limited-search', function() {\n        if ($(this).is(\":checked\") === true) {\n            $('#find_items').css({\n                \"background-color\": \"#f56954\"\n            });\n        } else {\n            $('#find_items').css({\n                \"background-color\": \"#FFF\"\n            })\n        }\n    });\n\n\n    function showItemEditForm(selectedFolderId) {\n        if (debugJavascript === true) console.info('SHOW EDIT ITEM ' + selectedFolderId);\n        \n        //$.when(\n        //    getPrivilegesOnItem(selectedFolderId, 0)\n        //).then(function() {\n        // Now read\n        if (store.get('teampassItem').error === true) {\n            toastr.remove();\n            toastr.error(\n                store.get('teampassItem').message,\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        } else {\n            $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n            $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n            // Show edition form\n            $('.form-item, #form-item-attachments-zone')\n                .removeClass('hidden');\n            $('.item-details-card, .form-item-copy, #form-item-password-options, .form-item-action, #item-details-card-categories, #folders-tree-card, .columns-position')\n                .addClass('hidden');\n\n            // Initial 'user did a change'\n            userDidAChange = false;\n\n            // Force update of simplepassmeter\n            $('#form-item-password').pwstrength(\"forceUpdate\");\n            $('#form-item-label').focus();\n\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n\n            // Does this folder contain Custom Fields\n            if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                $('#form-item-field').removeClass('hidden');\n                $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                    $('#form-item-category-' + category).removeClass('hidden');\n                })\n            } else {\n                $('#form-item-field, .form-item-category').addClass('hidden');\n            }            \n\n            // is user allowed to edit this item - overpass readonly folder\n            if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n                var itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n                userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n                if (userItemRight && userItemRight > 40 && $('#form-item-folder option:selected').attr('disabled') === 'disabled') {\n                    $('#form-item-folder option:selected').removeAttr('disabled');\n                }\n            }\n\n            toastr.remove();\n            // ---\n        }\n        //});\n    }\n\n\n    /**\n     * Start items search\n     */\n    function searchItems(criteria) {\n        if (criteria !== '') {\n            // stop items loading (if on-going)\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 1;\n                }\n            );\n\n            // wait\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('searching'); ?>'\n            );\n\n            // clean\n            $('#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, .fields, #item_extra_info').html('');\n            $('#button_quick_login_copy, #button_quick_pw_copy').addClass('hidden');\n            $('#teampass_items_list').html('');\n\n            // Continu the list of results\n            finishingItemsFind(\n                'search_for_items',\n                $('#limited-search').is(\":checked\") === true ? store.get('teampassApplication').selectedFolder : false,\n                criteria,\n                0\n            );\n        }\n    }\n\n    /**\n     * \n     */\n    function finishingItemsFind(type, limited, criteria, start) {\n        // send query\n        $.get(\n            'sources/find.queries.php', {\n                type: type,\n                limited: limited,\n                search: criteria,\n                start: start,\n                length: 10,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                var pwd_error = '',\n                    icon_login,\n                    incon_link,\n                    icon_pwd,\n                    icon_favorite;\n\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'find.queries.php', type);\n                if (debugJavascript === true) console.log(data);\n\n                // Ensure correct div is not hidden\n                $('#info_teampass_items_list').addClass('hidden');\n                $('#table_teampass_items_list').removeClass('hidden');\n\n                // Show Items list\n                sList(data.html_json);\n\n                if (data.start !== -1 && (data.start <= data.total)) {\n                    // Continu the list of results\n                    finishingItemsFind(\n                        'search_for_items',\n                        $('#limited-search').is(\":checked\") === true ?\n                        store.get('teampassApplication').selectedFolder : false,\n                        criteria,\n                        data.start\n                    )\n                } else {\n                    toastr.remove();\n                    toastr.info(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    // Do some post treatments\n                    $('#form-folder-path').html('');\n                    $('#find_items').val('');\n\n                    // Do drag'n'drop for the folders\n                    prepareFolderDragNDrop();\n\n                    adjustElemsSize();\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function refreshVisibleFolders(forceRefreshCache = false) {\n        var data = {\n            'force_refresh_cache': forceRefreshCache,\n        }\n        if (debugJavascript === true) {\n            console.log('Refresh visible folders');\n            console.log(data);\n        }\n\n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_visible_folders',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_visible_folders');\n                if (debugJavascript === true) {\n                    console.log('TREE');\n                    console.log(data);\n                }\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Build html lists\n                    var html_visible = '',\n                        html_full_visible = '',\n                        html_active_visible = '',\n                        indentation = '',\n                        disabled = '';\n\n                    if (typeof data.html_json === 'undefined' || typeof data.html_json.folders === 'undefined') {\n                        $('#jstree').html('<div class=\"alert alert-warning mt-3 mr-1 ml-1\"><i class=\"fas fa-exclamation-triangle mr-2\"></i>' +\n                            '<?php echo langHdl('no_data_to_display'); ?>' +\n                            '</div>');\n                        //return false;\n                    } else {\n                        refreshFoldersInfo(data.html_json.folders, 'clear');\n                    }\n\n                    // Shall we show the root folder\n                    if (data.html_json.can_create_root_folder === 1) {\n                        html_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_full_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_active_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                    } else {\n                        html_visible = '<option value=\"0\" disabled=\"disabled\"><?php echo langHdl('root'); ?></option>';\n                    }\n\n                    //\n                    $.each(data.html_json.folders, function(i, value) {\n                        // Prepare options lists\n                        html_visible += '<option value=\"' + value.id + '\"' +\n                            ((value.disabled === 1) ? ' disabled=\"disabled\"' : '') +\n                            ' data-parent-id=\"' + value.parent_id + '\">' +\n                            '&nbsp;'.repeat(value.level) +\n                            value.title + (value.path !== '' ? ' [' + value.path + ']' : '') + '</option>';\n                    });\n\n                    // Append new list\n                    $('#form-item-folder, #form-item-copy-destination, #form-folder-add-parent,' +\n                            '#form-folder-delete-selection, #form-folder-copy-source, #form-folder-copy-destination')\n                        .find('option')\n                        .remove()\n                        .end()\n                        .append(html_visible);\n                    $(\".no-root option[value='0']\").remove();\n\n                    if (debugJavascript === true) {\n                        console.info('HTML VISIBLE:')\n                        console.log(html_visible);\n                    }\n\n                    // Store in teampassUser\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.folders = html_visible;\n                        }\n                    );\n\n\n                    // remove ROOT option if exists\n                    $('#form-item-copy-destination option[value=\"0\"]').remove();\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Get more info about folders (Categories)\n     *\n     * @return void\n     */\n    function refreshFoldersInfo(folders, action) {\n        var action = action || '',\n            sending = '';\n\n        if (null === folders) return false;\n\n        if (action === 'clear') {\n            sending = JSON.stringify(folders.map(a => parseInt(a.id)));\n        } else if (action === 'update') {\n            sending = JSON.stringify([folders]);\n        }\n\n        if (debugJavascript === true) {\n            console.info('INPUTS for refresh_folders_other_info');\n            console.log(sending);\n        }\n        \n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_folders_other_info',\n                data: sending,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_folders_other_info');\n                if (debugJavascript === true) {\n                    console.info('RESULTS for refresh_folders_other_info');\n                    console.log(data);\n                }\n\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Store in session\n                    if (action === 'clear') {\n                        // Handle the data\n                        $.each(folders, function(index, item) {\n                            if (typeof data.result !== 'undefined' && typeof data.result[item.id] !== 'undefined') {\n                                folders[index]['categories'] = data.result[item.id].categories;\n                                folders[index]['complexity'] = data.result[item.id].complexity;\n                                folders[index]['visibilityRoles'] = data.result[item.id].visibilityRoles;\n                            }\n                        });\n                        // Stare the data\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.foldersList = folders;\n                            }\n                        );\n                    } else if (action === 'update') {\n                        // Store the data\n                        var currentFoldersList = store.get('teampassApplication').foldersList;\n                        $.each(currentFoldersList, function(index, item) {\n                            if (item.id === parseInt(folders) && typeof data.result[folders] !== 'undefined') {\n                                currentFoldersList[index].categories = data.result[folders].categories;\n                                currentFoldersList[index].complexity = data.result[folders].complexity;\n                                currentFoldersList[index].visibilityRoles = data.result[folders].visibilityRoles;\n\n                                store.update(\n                                    'teampassApplication',\n                                    function(teampassApplication) {\n                                        foldersList = currentFoldersList;\n                                    }\n                                );\n                                return true;\n                            }\n                        });\n\n                    }\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n                toastr.remove();\n            }\n        );\n    }\n\n\n    /*\n     * builds the folders tree\n     */\n    function refreshTree(node_to_select, do_refresh, refresh_visible_folders) {\n        do_refresh = do_refresh || ''\n        node_to_select = node_to_select || '';\n        refresh_visible_folders = refresh_visible_folders || true;\n\n        if (refresh_visible_folders !== true) {\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n            return false;\n        }\n\n        if (do_refresh === true || store.get('teampassApplication').jstreeForceRefresh === 1) {\n            $('#jstree').jstree(true).refresh();\n        }\n\n        if (node_to_select !== '') {\n            $('#jstree').jstree('deselect_all');\n\n            $('#jstree')\n                .one('refresh.jstree', function(e, data) {\n                    data.instance.select_node('#li_' + node_to_select);\n                });\n        }\n\n        $(this).delay(500).queue(function() {\n            refreshVisibleFolders(true);\n            $(this).dequeue();\n        });\n    }\n\n    /**\n     * \n     */\n    function ListerItems(groupe_id, restricted, start, stop_listing_current_folder) {\n        var me = $(this);\n        stop_listing_current_folder = stop_listing_current_folder || '0';\n        if (debugJavascript === true) console.log('LIST OF ITEMS FOR FOLDER ' + groupe_id)\n        // Exit if no folder is selected\n        if (groupe_id === undefined) return false;\n\n        // case where we should stop listing the items\n        if (store.get('teampassApplication') !== undefined && store.get('teampassApplication').itemsListStop === 1) {\n            //requestRunning = false;\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n        }\n\n        //Evaluate number of items to display - depends on screen height\n        //adapt to the screen height\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsShownByQuery = Math.max(Math.round((screenHeight - 450) / 23), 2);\n            }\n        );\n\n        if (stop_listing_current_folder === 1) {\n            me.data('requestRunning', false);\n            // Store listing criteria\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt(groupe_id),\n                        teampassApplication.itemsListRestricted = restricted,\n                        teampassApplication.itemsListStart = start,\n                        teampassApplication.itemsListStop = 0\n                }\n            );\n        } else {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0\n                }\n            );\n        }\n\n\n        // prevent launch of similar query in case of doubleclick\n        if (requestRunning === true) {\n            return false;\n        }\n        requestRunning = true;\n\n        // Hide any info\n        $('#info_teampass_items_list').addClass('hidden');\n\n        if (groupe_id !== undefined || groupe_id !== '') {\n            //refreshTree(groupe_id);\n            if (query_in_progress != 0 && query_in_progress != groupe_id && request !== undefined) {\n                request.abort(); //kill previous query if needed\n            }\n            query_in_progress = groupe_id;\n            if (start == 0) {\n                //clean form\n                $('#teampass_items_list, #items_folder_path').html('');\n            }\n\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt(groupe_id),\n                    teampassApplication.itemsList = ''\n                }\n            );\n\n            if ($('.tr_fields') !== undefined) {\n                $('.tr_fields, .newItemCat, .editItemCat').addClass('hidden');\n            }\n\n            // Inform user\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n            );\n\n            // clear storage \n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.itemsList = '';\n                }\n            );\n\n            // Prepare data to be sent\n            var dataArray = {\n                id: store.get('teampassApplication').selectedFolder,\n                restricted: restricted === \"\" ? \"\" : restricted,\n                start: start !== undefined ? start : 0,\n                uniqueLoadData: store.get('teampassApplication').queryUniqueLoad !== undefined ? store.get('teampassApplication').queryUniqueLoad : \"\",\n                nb_items_to_display_once: store.get('teampassApplication').itemsShownByQuery,\n            };\n\n            if (debugJavascript === true) {\n                console.log('Do list of items in folder with next parameters:');\n                console.log(JSON.stringify(dataArray));\n            }\n            \n            //ajax query\n            var request = $.post('sources/items.queries.php', {\n                    type: 'do_items_list_in_folder',\n                    data: prepareExchangedData(JSON.stringify(dataArray), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>',\n                },\n                function(retData) {\n                    //get data\n                    data = decodeQueryReturn(retData, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'do_items_list_in_folder');\n\n                    if (debugJavascript === true) {\n                        console.log('LIST ITEMS');\n                        console.log(data);\n                    }\n\n                    // reset doubleclick prevention\n                    requestRunning = false;\n\n                    // manage not allowed\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        return false;\n                    }\n\n                    // Hide New button if restricted folder\n                    if (data.access_level === 10) {\n                        $('#btn-new-item').addClass('hidden');\n                    } else {\n                        $('#btn-new-item').removeClass('hidden');\n                    }\n\n                    // to be done only in 1st list load\n                    if (data.list_to_be_continued === 'end') {\n                        var initialQueryData = $.parseJSON(data.uniqueLoadData);\n\n                        // Update hidden variables\n                        store.update(\n                            'teampassItem',\n                            function(teampassItem) {\n                                teampassItem.IsPersonalFolder = parseInt(data.IsPersonalFolder),\n                                    teampassItem.hasAccessLevel = parseInt(data.access_level),\n                                    teampassItem.folderComplexity = parseInt(data.folder_complexity),\n                                    teampassItem.hasCustomCategories = data.categoriesStructure\n                            }\n                        );\n                        \n\n                        // display path of folders\n                        if ((initialQueryData.path.length > 0)) {\n                            $('#form-folder-path')\n                                .html('')\n                                .append(rebuildPath(initialQueryData.path));\n                        } else {\n                            $('#form-folder-path').html('');\n                        }\n\n                        /*\n                        // PSK is requested but not set\n                        if (data.folder_requests_psk === 1\n                            && (store.get('teampassUser').pskSetForSession === ''\n                            || store.get('teampassUser').pskSetForSession === undefined)\n                        ) {\n                            showPersonalSKDialog();\n                        }\n                        */\n\n                        // show correct fodler in Tree\n                        if ($('#jstree').jstree('get_selected', true)[0] !== undefined &&\n                            'li_' + groupe_id !== $('#jstree').jstree('get_selected', true)[0].id\n                        ) {\n                            $('#jstree').jstree('deselect_all');\n                            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n                        }\n\n                        // Delete existing clipboard\n                        if (clipboardForPassword) {\n                            clipboardForPassword.destroy();\n                        }\n                        if (clipboardForLogin) {\n                            clipboardForLogin.destroy();\n                        }\n\n                        // Prepare clipboard items\n                        clipboardForLogin = new ClipboardJS('.fa-clickable-login');\n                        clipboardForLogin.on('success', function(e) {\n                            toastr.info(\n                                '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                '', {\n                                    timeOut: 2000,\n                                    positionClass: 'toast-top-right',\n                                    progressBar: true\n                                }\n                            );\n                            e.clearSelection();\n                        });\n\n                        // Prepare clipboard for PAssword\n                        // This will request a query to server to get the pwd\n                        clipboardForPassword = new ClipboardJS('.fa-clickable-password', {\n                            text: function(trigger) {\n                                // Send query and get password\n                                var result = '',\n                                    error = false;\n\n                                // Warn user that it starts\n                                /*toastr.remove();\n                                toastr.info(\n                                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                                );*/\n                                \n                                $.ajax({\n                                    type: \"POST\",\n                                    async: false,\n                                    url: 'sources/items.queries.php',\n                                    data: 'type=show_item_password&item_key=' + trigger.getAttribute('data-item-key') +\n                                        '&key=<?php echo $_SESSION['key']; ?>',\n                                    dataType: \"\",\n                                    success: function(data) {\n                                        //decrypt data\n                                        try {\n                                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                                        } catch (e) {\n                                            // error\n                                            toastr.remove();\n                                            toastr.warning(\n                                                '<?php echo langHdl('no_item_to_display'); ?>'\n                                            );\n                                            return false;\n                                        }\n                                        if (data.error === true) {\n                                            error = true;\n                                        } else {\n                                            if (data.password_error !== '') {\n                                                error = true;\n                                            } else {\n                                                result = atob(data.password).utf8Decode();\n                                            }\n                                            if (result === '') {\n                                                toastr.info(\n                                                    '<?php echo langHdl('password_is_empty'); ?>',\n                                                    '', {\n                                                        timeOut: 2000,\n                                                        positionClass: 'toast-bottom-right',\n                                                        progressBar: true\n                                                    }\n                                                );\n                                            }\n                                        }\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                        clipboardForPassword.on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.itemId,\n                                e.trigger.dataset.itemLabel\n                            );\n                            \n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.remove();\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    } else if (data.error === 'not_authorized') {\n                        $('#items_folder_path').html('<i class=\"fas fa-folder-open-o\"></i>&nbsp;' + rebuildPath(data.arborescence));\n                    } else {\n                        // Store query results\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.queryUniqueLoad = data.uniqueLoadData;\n                            }\n                        );\n                        if ($('#items_loading_progress').length == 0) {\n                            $('#items_list_loader').after('<span id=\"items_loading_progress\">' + Math.round(data.next_start * 100 / data.counter_full, 0) + '%</span>');\n                        } else {\n                            $('#items_loading_progress').html(Math.round(data.next_start * 100 / data.counter_full, 0) + '%');\n                        }\n                    }\n                    //-----\n                    if (data.array_items !== undefined &&\n                        data.array_items.length === 0 &&\n                        $('#teampass_items_list').html() === ''\n                    ) {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('no_item_to_display'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n                    }\n\n                    if (data.error === 'is_pf_but_no_saltkey') {\n                        //warn user about his saltkey\n                        toastr.remove();\n                        toastr.warning(\n                            '<?php echo langHdl('home_personal_saltkey_label'); ?>',\n                            '', {\n                                timeOut: 10000\n                            }\n                        );\n                        return false;\n                    } else if (data.error === 'not_authorized' || data.access_level === '') {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-lg-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-warning mr-2\"></i><?php echo langHdl('not_allowed_to_see_pw'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n\n                    } else if ((store.get('teampassApplication').userIsReadOnly === 1) //&& data.folder_requests_psk == 0\n                        ||\n                        data.access_level === 10\n                    ) {\n                        //readonly user\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n                        //$('#more_items').remove();\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    } else {\n                        //Display items\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        // Prepare next iteration if needed\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n\n                            if (debugJavascript === true) {\n                                console.log('Liste complete des items')\n                                console.log(JSON.parse(store.get('teampassApplication').itemsList));\n                            }\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    }\n                }\n            );\n        }\n    }\n\n    function sList(listOfItems) {\n        if (debugJavascript === true) {\n            console.log(listOfItems);\n        }\n        var counter = 0,\n            prevIdForNextItem = -1;\n\n        // Manage store\n        if (store.get('teampassApplication').itemsList === '' || store.get('teampassApplication').itemsList === undefined) {\n            var stored_datas = listOfItems;\n        } else {\n            var stored_datas = String(JSON.parse(store.get('teampassApplication').itemsList)).concat(listOfItems);\n        }\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsList = JSON.stringify(stored_datas);\n            }\n        );\n        \n        $.each(listOfItems, function(i, value) {\n            var new_line = '',\n                pwd_error = '',\n                icon_all_can_modify = '',\n                icon_cannot_see = '',\n                icon_login = '',\n                icon_link = '',\n                icon_pwd = '',\n                icon_favorite = '',\n                item_flag = '',\n                item_grippy = '',\n                visible_by_user = '';\n\n            counter += 1;\n\n            // ENsure numbers are ints\n            value.anyone_can_modify = parseInt(value.anyone_can_modify);\n            value.canMove = parseInt(value.canMove);\n            value.expired = parseInt(value.expired);\n            value.is_favorite = parseInt(value.is_favorite);\n            value.is_result_of_search = parseInt(value.is_result_of_search);\n            value.item_id = parseInt(value.item_id);\n            value.open_edit = parseInt(value.open_edit);\n            value.rights = parseInt(value.rights);\n            value.tree_id = parseInt(value.tree_id);\n            value.display = parseInt(value.display);\n            value.display_item = parseInt(value.display_item);\n            value.enable_favourites = parseInt(value.enable_favourites);\n\n            // Check access restriction\n            if (value.rights > 0) {\n                // Should I populate previous item with this new id\n                if (debugJavascript === true) {\n                    console.log('current id: '+value.item_id);\n                    console.log(prevIdForNextItem);\n                }\n                if (prevIdForNextItem !== -1) {\n                    //$('#list-item-row_' + value.item_id).attr('data-next-item-id', prevIdForNextItem.item_id);\n                    //$('#list-item-row_' + value.item_id).attr('data-next-item-label', value.label);\n                    $('[data-item-key=\"'+value.item_key+'\"]')\n                        //.attr('data-next-item-id', prevIdForNextItem.item_id)\n                        .attr('data-next-item-key', prevIdForNextItem.item_key)\n                        .attr('data-next-item-label', value.label);\n                }\n                \n                // Prepare anyone can modify icon\n                if (value.anyone_can_modify === 1 || value.open_edit === 1) {\n                    icon_all_can_modify = '<span class=\"fa-stack fa-clickable pointer infotip list-item-clicktoedit mr-2\" title=\"<?php echo langHdl('edit'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-pen fa-stack-1x fa-inverse\"></i></span>';\n                }\n\n                // Prepare mini icons\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').copy_to_clipboard_small_icons) === 1 &&\n                    value.rights > 10\n                ) {\n                    // Login icon\n                    if (value.login !== '') {\n                        icon_login = '<span class=\"fa-stack fa-clickable fa-clickable-login pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_login'); ?>\" data-clipboard-text=\"' + sanitizeString(value.login) + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-user fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                    // Pwd icon\n                    if (value.pw_status !== 'pw_is_empty' && value.pw_status !== 'encryption_error') {\n                        icon_pwd = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_pw'); ?>\" data-item-key=\"' + value.item_key + '\" data-item-label=\"' + value.label + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-key fa-stack-1x fa-inverse\"></i></span>';\n                    }\n\n                    // Now check if pwd is empty. If it is then warn user\n                    if (value.pw_status === 'pw_is_empty') {\n                        pwd_error = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('password_is_empty'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-exclamation-triangle text-warning fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Link icon\n                if (value.link !== '') {\n                    icon_link = '<span class=\"fa-stack fa-clickable pointer infotip mr-2\" title=\"<?php echo langHdl('open_website'); ?>\"><a href=\"' + sanitizeString(value.link) + '\" target=\"_blank\" class=\"no-link\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-link fa-stack-1x fa-inverse\"></i></a></span>';\n                }\n\n                // Prepare Favorite icon\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').enable_favourites) === 1 &&\n                    value.rights > 10\n                ) {\n                    if (value.is_favourited === 1) {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-key=\"' + value.item_key + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>';\n                    } else {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-key=\"' + value.item_key + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"far fa-star fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Prepare Description\n                if (value.desc !== '') {\n                    value.desc = ' <span class=\"text-secondary small\">- ' + value.desc + '</span>';\n                }\n\n                $('#teampass_items_list').append(\n                    '<tr class=\"list-item-row' + (value.canMove === 1 ? ' is-draggable' : '') + '\" id=\"list-item-row_' + value.item_id + '\" data-item-key=\"' + value.item_key + '\" data-item-edition=\"' + value.open_edit + '\" data-item-id=\"' + value.item_id + '\" data-item-sk=\"' + value.sk + '\" data-item-expired=\"' + value.expired + '\" data-item-rights=\"' + value.rights + '\" data-item-display=\"' + value.display + '\" data-item-open-edit=\"' + value.open_edit + '\" data-item-tree-id=\"' + value.tree_id + '\" data-is-search-result=\"' + value.is_result_of_search + '\" data-label=\"' + escape(value.label) + '\">' +\n                    '<td class=\"list-item-description\" style=\"width: 100%;\">' +\n                    // Show user a grippy bar to move item\n                    (value.canMove === 1  ? '<i class=\"fas fa-ellipsis-v mr-2 dragndrop\"></i>' : '') + //&& value.is_result_of_search === 0\n                    // Show user a ban icon if expired\n                    (value.expired === 1 ? '<i class=\"far fa-calendar-times mr-2 text-warning infotip\" title=\"<?php echo langHdl('not_allowed_to_see_pw_is_expired'); ?>\"></i>' : '') +\n                    // Show user that Item is not accessible\n                    (value.rights === 10 ? '<i class=\"far fa-eye-slash fa-xs mr-2 text-primary infotip\" title=\"<?php echo langHdl('item_with_restricted_access'); ?>\"></i>' : '') +\n                    // Show user that password is badly encrypted\n                    (value.pw_status === 'encryption_error' ? '<i class=\"fas fa-exclamation-triangle fa-xs text-danger infotip mr-1\" title=\"<?php echo langHdl('pw_encryption_error'); ?>\"></i>' : '') +\n                    // Show item fa_icon if set\n                    (value.fa_icon !== '' ? '<i class=\"'+value.fa_icon+' mr-1\"></i>' : '') +\n                    // Prepare item info\n                    '<span class=\"list-item-clicktoshow' + (value.rights === 10 ? '' : ' pointer') + '\" data-item-id=\"' + value.item_id + '\" data-item-key=\"' + value.item_key + '\">' +\n                    '<span class=\"list-item-row-description' + (value.rights === 10 ? ' font-weight-light' : '') + '\">' + value.label + '</span>' + (value.rights === 10 ? '' : value.desc) + '</span>' +\n                    '<span class=\"list-item-actions hidden\">' +\n                    (value.rights === 10 ?\n                        '<span class=\"fa-stack fa-clickable fa-clickable-access-request pointer infotip mr-2\" title=\"<?php echo langHdl('need_access'); ?>\"><i class=\"fas fa-circle fa-stack-2x text-danger\"></i><i class=\"far fa-handshake fa-stack-1x fa-inverse\"></i></span>' :\n                        pwd_error + icon_all_can_modify + icon_login + icon_pwd + icon_link + icon_favorite) +\n                    '</span>' +\n                    (value.folder !== undefined ?\n                        '<br><span class=\"text-secondary small font-italic pointer open-folder\" data-tree-id=\"' +\n                        value.tree_id + '\"\">[' + value.folder + ']</span>' : '') +\n                    '</td>' +\n                    '</tr>'\n                );\n\n                // Save id for usage\n                prevIdForNextItem = {\n                    //'item_id' : value.item_id,\n                    'item_key' : value.item_key,\n                    'label': value.label,\n                };\n\n                //---------------------\n            }\n        });\n\n        // Sort entries\n        var $tbody = $('#teampass_items_list');\n        $tbody.find('tr').sort(function(a, b) {\n            var tda = $(a).find('.list-item-row-description').text();\n            var tdb = $(b).find('.list-item-row-description').text();\n            // if a < b return 1\n            return tda > tdb ? 1 :\n                tda < tdb ? -1 :\n                0;\n        }).appendTo($tbody);\n\n        // Trick for list with only one entry\n        if (counter === 1) {\n            $('#teampass_items_list')\n                .append('<tr class=\"row\"><td class=\"\">&nbsp;</td></tr>');\n        }\n        adjustElemsSize();\n\n        // Show tooltips\n        $('.infotip').tooltip();\n    }\n\n    $(document).on('click', '.open-folder', function() {\n        if ($(this).data('tree-id') !== undefined) {\n            if (debugJavascript === true) console.log($(this).data('tree-id'))\n\n            // Prepare\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStart = 0;\n                }\n            );\n\n            // Show\n            ListerItems(\n                $(this).data('tree-id'),\n                '',\n                0\n            );\n\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + $(this).data('tree-id'));\n        }\n    });\n\n\n    function adjustElemsSize() {\n        // Adjust height of folders tree\n        if ($('#teampass_items_list').height() > (screenHeight - 215)) {\n            $('#jstree').height($('#teampass_items_list').height() + 75);\n        } else {\n            $('#jstree').height($(window).height() - 215);\n        }\n    }\n\n    /**\n     * Builds the HTML path\n     * @param  {[type]} data [description]\n     * @return {[type]}      [description]\n     */\n    function rebuildPath(data) {\n        var new_path = new_path_elem = '';\n        $.each((data), function(i, value) {\n            new_path_elem = '';\n            if (value['visible'] === 1) {\n                new_path_elem = ' class=\"pointer\" onclick=\"ListerItems(' + value['id'] + ', \\'\\', 0)\"';\n            }\n\n            new_path += '<li class=\"breadcrumb-item\" id=\"path_elem_' + value['id'] + '\"' + new_path_elem + '>' + value['title'] + '</li>';\n        });\n\n        return new_path;\n    }\n\n    /**\n\n     */\n    function proceed_list_update(stop_proceeding) {\n        stop_proceeding = stop_proceeding || '';\n\n        if (stop_proceeding === '1' ||\n            (store.get('teampassApplication').itemsListFolderId !== '' &&\n                store.get('teampassApplication').itemsListStart !== 'end')\n        ) {\n            // Clear storage\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n            // Perform listing\n            ListerItems(\n                store.get('teampassApplication').itemsListFolderId,\n                store.get('teampassApplication').itemsListRestricted,\n                store.get('teampassApplication').itemsListStart,\n                store.get('teampassApplication').itemsListStop\n            );\n            return false;\n        }\n\n        if (store.get('teampassApplication').itemsListStart !== 'end') {\n            //Check if nb of items do display > to 0\n            if (store.get('teampassApplication').itemsShownByQuery > 0) {\n                ListerItems(\n                    store.get('teampassApplication').selectedFolder,\n                    '',\n                    store.get('teampassApplication').itemsListStart\n                );\n            }\n        } else {\n            // Show tooltips\n            $('.infotip').tooltip();\n\n            // Update silently the info about the folder\n            refreshFoldersInfo(\n                store.get('teampassApplication').selectedFolder,\n                'update'\n            );\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('data_refreshed'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Do drag'n'drop for the folders\n            prepareFolderDragNDrop();\n        }\n    }\n\n\n    function checkAccess(itemId, treeId, userId)\n    {\n        var data = {\n            'itemId': parseInt(itemId),\n            'treeId': parseInt(treeId),\n            'userId': parseInt(userId),\n        };\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'check_current_access_rights',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"DEBUG: checkAccess\");\n                    console.log(data);\n                }\n\n\n                return false;\n            }\n        );\n    }\n\n\n    /**\n     *\n     */\n    function Details(itemDefinition, actionType, hotlink = false) {\n        if (debugJavascript === true) {\n            console.info('EXPECTED ACTION on ' + itemDefinition + ' is ' + actionType + ' -- ');\n            console.log(itemDefinition);\n        }\n\n        // Init\n        if (hotlink === false) {\n            var itemId = parseInt($(itemDefinition).data('item-id')) || '';\n            var itemKey = parseInt($(itemDefinition).data('item-key')) || '';\n            var itemTreeId = parseInt($(itemDefinition).data('item-tree-id')) || '';\n            var itemSk = parseInt($(itemDefinition).data('item-sk')) || 0;\n            var itemExpired = parseInt($(itemDefinition).data('item-expired')) || '';\n            var itemRestricted = parseInt($(itemDefinition).data('item-restricted-id')) || '';\n            var itemDisplay = parseInt($(itemDefinition).data('item-display')) || 0;\n            var itemOpenEdit = parseInt($(itemDefinition).data('item-open-edit')) || 0;\n            var itemReload = parseInt($(itemDefinition).data('item-reload')) || 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        } else {\n            var itemId = itemDefinition || '';\n            var itemKey = itemDefinition || '';\n            var itemTreeId = store.get('teampassApplication').selectedFolder || '';\n            var itemSk = 0;\n            var itemExpired = '';\n            var itemRestricted = '';\n            var itemDisplay = 1;\n            var itemOpenEdit = 0;\n            var itemReload = 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        }\n\n        // check if user still has access\n        if (checkAccess(itemId, itemTreeId, <?php echo $_SESSION['user_id']; ?>) === false) {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Finished\n            return false;\n        }\n\n        // Store current view\n        savePreviousView();\n        \n        if (debugJavascript === true) console.log(\"Request is running: \" + requestRunning)\n\n        // Store status query running\n        requestRunning = true;\n        userDidAChange = false;\n\n        // Select tab#1\n        $('#form-item-nav-pills li:first-child a').tab('show');\n\n        // Don't show details\n        if (itemDisplay === 'no_display') {\n            // Inform user\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Clear ongoing request status\n            requestRunning = false;\n\n            // Finished\n            return false;\n        }\n\n        // If opening new item, reinit hidden fields\n        if (store.get('teampassApplication').lastItemSeen !== itemId) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.lastItemSeen = parseInt(itemId);\n                }\n            );\n            if (debugJavascript === true) console.log(\"Last seen item \" + store.get('teampassApplication').lastItemSeen)\n        }\n\n        // Prepare data to be sent\n        var data = {\n            'id': parseInt(itemId),\n            'folder_id': parseInt(itemTreeId),\n            'salt_key_required': itemSk,\n            'expired_item': itemExpired,\n            'restricted': itemRestricted,\n            'folder_access_level': store.get('teampassItem').hasAccessLevel,\n            'page': 'items',\n            'rights': itemRights,\n        };\n\n        if (debugJavascript === true) console.log(\"SEND\");\n        if (debugJavascript === true) console.log(data);\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'show_details_item',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"RECEIVED object details\");\n                    console.log(data);\n                }\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // remove any track-change class on item form\n                //$('.form-item-control').removeClass('track-change');\n\n                if (data.error === true) {\n                    toastr.remove();\n                    requestRunning = false;\n\n                    // Manage personal items key error\n                    if (data.error_type !== 'undefined' && data.error_type === 'private_items_to_encrypt') {\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        store.update(\n                            'teampassUser', {},\n                            function(teampassUser) {\n                                teampassUser.special = 'private_items_to_encrypt';\n                            }\n                        );\n                        document.location.href = \"index.php?page=items\";\n                    } else if (data.error_type !== 'undefined' && data.error_type === 'user_should_reencrypt_private_key' && store.get('teampassUser').temporary_code === '') {\n                        // we have to ask the user to re-encrypt his privatekey\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 10000,\n                                progressBar: true\n                            }\n                        );\n                        \n                        if (debugJavascript === true) console.log('LDAP user password has to encrypt his private key with hos new LDAP password')\n                        // HIde\n                        $('.content-header, .content').addClass('hidden');\n\n                        // Show passwords inputs and form\n                        $('#dialog-ldap-user-change-password-info')\n                            .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                            .removeClass('hidden');\n                        $('#dialog-ldap-user-change-password').removeClass('hidden');\n                    }\n\n\n                    return false;\n                } else if ((data.user_can_modify === 0 && actionType === 'edit') ||\n                    parseInt(data.show_details) === 0\n                ) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    requestRunning = false;\n                    return false;\n                }\n\n\n                // Store scroll position\n                userScrollPosition = $(window).scrollTop();\n\n                // Scroll to top\n                $(window).scrollTop(0);\n\n                // SHould we show?\n                if (parseInt(data.show_detail_option) === 1 || itemExpired === 1) {\n                    // SHow expiration alert\n                    $('#card-item-expired').removeClass('hidden');\n                } else if (parseInt(data.show_detail_option) === 2) {\n                    // Don't show anything\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('not_allowed_to_see_pw'); ?>',\n                        '<?php echo langHdl('warning'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    return false;\n                }\n\n                // Show header info\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // Hide NEW button in case access_level < 30\n                if (store.get('teampassItem').hasAccessLevel === 10) {\n                    $('#item-form-new-button').addClass('hidden');\n                } else {\n                    $('#item-form-new-button').removeClass('hidden');\n                }\n\n                // Uncrypt the pwd\n                if (data.pw !== undefined) {\n                    data.pw = atob(data.pw).utf8Decode();\n                }\n\n                // Update hidden variables\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.id = parseInt(data.id),\n                            teampassItem.timestamp = data.timestamp,\n                            teampassItem.user_can_modify = data.user_can_modify,\n                            teampassItem.anyone_can_modify = data.anyone_can_modify,\n                            teampassItem.edit_item_salt_key = data.edit_item_salt_key,\n                            teampassItem.id_restricted_to = data.id_restricted_to,\n                            teampassItem.id_restricted_to_roles = data.id_restricted_to_roles,\n                            teampassItem.item_rights = itemRights\n                    }\n                );\n\n                // Prepare forms\n                $('#folders-tree-card, .columns-position').addClass('hidden');\n                if (actionType === 'show') {\n                    // Prepare Views\n                    $('.item-details-card, #item-details-card-categories').removeClass('hidden');\n                    $('.form-item').addClass('hidden');\n\n                    $('#form-item-suggestion-password').focus();\n                    // If Description empty then remove it\n                    if (data.description === '<p>&nbsp;</p>') {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .addClass('hidden');\n                    } else {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .removeClass('hidden');\n                    }\n                } else {\n                    $('.form-item').removeClass('hidden');\n                    $('.item-details-card, #item-details-card-categories').addClass('hidden');\n                }\n                $('#pwd-definition-size').val(data.pw.length);\n\n                // Prepare card\n                const itemIcon = (data.fa_icon !== \"\") ? '<i class=\"'+data.fa_icon+' mr-1\"></i>' : '';\n                $('#card-item-label, #form-item-title').html(itemIcon + data.label);\n                $('#form-item-label, #form-item-suggestion-label').val(data.label);\n                $('#card-item-description, #form-item-suggestion-description').html(data.description);\n                if (data.description === '') {\n                    $('#card-item-description').addClass('hidden');\n                } else {\n                    $('#card-item-description').removeClass('hidden');\n                }\n                $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n                $('#hidden-item-pwd, #form-item-suggestion-password').val(data.pw);\n                $('#form-item-password, #form-item-password-confirmation, #form-item-server-old-password').val(data.pw);\n                $('#card-item-login').html(data.login);\n                $('#form-item-login, #form-item-suggestion-login, #form-item-server-login').val(data.login);\n\n                $('#card-item-email').text(data.email);\n                $('#form-item-email, #form-item-suggestion-email').val(data.email);\n                $('#card-item-url').html(data.url);\n                $('#form-item-url, #form-item-suggestion-url').val($(data.url).text());\n                $('#form-item-restrictedToUsers').val(JSON.stringify(data.id_restricted_to));\n                $('#form-item-restrictedToRoles').val(JSON.stringify(data.id_restricted_to_roles));\n                $('#form-item-folder').val(data.folder);\n                $('#form-item-tags').val(data.tags.join(' '));\n                $('#form-item-icon').val(data.fa_icon);\n                $('#form-item-icon-show').html(itemIcon);\n\n                $('#form-item-password').pwstrength(\"forceUpdate\");\n                $('#form-item-label').focus();\n\n                // Editor for description field\n                if (debugJavascript === true) {console.log('>>>> create summernote');}\n                $('#form-item-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (debugJavascript === true) console.log('Editor onChange:' + userDidAChange + \" - \" + requestRunning);\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-description > ' + userDidAChange);\n                                    //$('#form-item-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    })\n                //.summernote('editor.insertText', data.description);\n\n                $('#form-item-suggestion-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-suggestion-description > ' + userDidAChange);\n                                    //$('#form-item-suggestion-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    });\n\n\n                //prepare nice list of users / groups\n                var html_users = '',\n                    html_groups = '',\n                    html_tags = '',\n                    html_kbs = '';\n\n                $(data.tags).each(function(index, value) {\n                    html_tags += '<span class=\"badge badge-success pointer tip mr-2\" title=\"<?php echo langHdl('list_items_with_tag'); ?>\" onclick=\"searchItemsWithTags(\\'' + value + '\\')\"><i class=\"fas fa-tag fa-sm\"></i>&nbsp;<span class=\"item_tag\">' + value + '</span></span>';\n                });\n                if (html_tags === '') {\n                    $('#card-item-tags').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-tags').html(html_tags);\n                }\n\n                $(data.links_to_kbs).each(function(index, value) {\n                    html_kbs += '<a class=\"badge badge-primary pointer tip mr-2\" href=\"<?php echo $SETTINGS['cpassman_url']; ?>/index.php?page=kb&id=' + value['id'] + '\"><i class=\"fas fa-map-pin fa-sm\"></i>&nbsp;' + value['label'] + '</a>';\n\n                });\n                if (html_kbs === '') {\n                    $('#card-item-kbs').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-kbs').html(html_kbs);\n                }\n\n\n                // Manage CATEGORIES / CUSTOM FIELDS\n                if (data.categories.length === 0) {\n                    $('.card-item-category, .card-item-field, .form-item-category, #item-details-card-categories')\n                        .addClass('hidden');\n                    $('.no-item-fields').removeClass('hidden');\n                    $('#card-item-fields').closest().addClass('collapsed');\n                } else {\n                    // \n                    if (data.template_id === '') {\n                        $('#list-group-item-main')\n                            .children('.list-group')\n                            .removeClass('hidden');\n                        $('#card-item-category').removeClass('hidden');\n                    }\n\n                    if (data.fields.length === 0) {\n                        if (actionType === 'show') {\n                            $('#item-details-card-categories').addClass('hidden');\n                            // Refresh last item seen\n                            refreshListLastSeenItems();\n                        } else {\n                            // Show the inputs for EDITION\n                            $(data.categories).each(function(index, category) {\n                                $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                            });\n                        }\n                    } else {\n                        // Show expected categories\n                        $('.no-item-fields, .form-item-category').addClass('hidden');\n\n                        // In edition mode, show all fields in expected Categories\n                        $(data.categories).each(function(index, category) {\n                            $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                        });\n\n                        // Now show expected fields and values\n                        $(data.fields).each(function(index, field) {\n                            // Show cateogry\n                            $('#card-item-category-' + field.parent_id).removeClass('hidden');\n\n                            // Is data encrypted\n                            // Then base64 decode is required\n                            if (field.encrypted === 1) {\n                                field.value = atob(field.value);\n                            }\n\n                            // Show field\n                            if (field.masked === 1) {\n                                // Item card\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(\n                                        '<span data-field-id=\"' + field.id + '\" class=\"pointer replace-asterisk\"><?php echo $var['hidden_asterisk']; ?></span>' +\n                                        '<input type=\"text\" style=\"width:0px; height:0px; border:0px;\" id=\"hidden-card-item-field-value-' + field.id + '\" value=\"' + (field.value) + '\">'\n                                    )\n                                $('#card-item-field-' + field.id)\n                                    .children(\".btn-copy-clipboard-clear\")\n                                    .attr('data-clipboard-target', '#hidden-card-item-field-value-' + field.id);\n                            } else {\n                                // Show Field\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(field.value);\n                            }\n                            // Item edit form\n                            $('#form-item-field-' + field.id)\n                                .children(\".form-item-field-custom\")\n                                .val(field.value);\n                        });\n\n                        // Manage template to show\n                        if (data.template_id !== '' && $.inArray(data.template_id, data.categories) > -1) {\n                            // Tick the box in edit mode\n                            $('#template_' + data.template_id).iCheck('check');\n\n                            // Hide existing data as replaced by Category template                                \n                            $('#list-group-item-main, #item-details-card-categories')\n                                .children('.list-group')\n                                .addClass('hidden');\n\n                            // Move the template in place of item main  \n                            $('#card-item-category-' + data.template_id)\n                                .addClass('fields-to-move')\n                                .detach()\n                                .appendTo('#list-group-item-main');\n\n                            // If only one category of Custom Fields\n                            // Then hide the CustomFields div\n                            if (actionType === 'show') {\n                                if (data.categories.length === 1) {\n                                    $('#item-details-card-categories').addClass('hidden');\n                                } else {\n                                    $('#item-details-card-categories').removeClass('hidden');\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n                // Waiting\n                $('#card-item-attachments').html(\"<?php echo langHdl('please_wait'); ?>\");\n\n                // Manage clipboard for link\n                if (clipboardForLink) clipboardForLink.destroy();\n                clipboardForLink = new ClipboardJS(\n                    '#get_item_link',\n                    {\n                        text: function(e) {\n                            return (\"<?php echo $SETTINGS['cpassman_url'];?>/index.php?page=items&group=\"+store.get('teampassItem').folderId+\"&id=\"+store.get('teampassItem').id);\n                        }\n                    })\n                    .on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                progressBar: true,\n                                positionClass: 'toast-top-right'\n                            }\n                        );\n                        e.clearSelection();\n                    });\n\n                // Manage clipboard button\n                if (itemClipboard) itemClipboard.destroy();\n                itemClipboard = new ClipboardJS('.btn-copy-clipboard-clear', {\n                    text: function(e) {\n                        return ($($(e).data('clipboard-target')).val());\n                    }\n                })\n                .on('success', function(e) {\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('copy_to_clipboard'); ?>',\n                        '', {\n                            timeOut: 2000,\n                            progressBar: true,\n                            positionClass: 'toast-top-right'\n                        }\n                    );\n                    e.clearSelection();\n                });\n\n                // Prepare clipboard - COPY LOGIN\n                if (data.login !== '') {\n                    $('#card-item-login-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-login-btn').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY PASSWORD\n                if (data.pw !== '') {\n                    new ClipboardJS('#card-item-pwd-button', {\n                            text: function() {\n                                return (data.pw);\n                            }\n                        })\n                        .on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.clipboardId,\n                                $('#card-item-label').text()\n                            );\n\n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    $('#card-item-pwd-button').removeClass('hidden');\n                } else {\n                    $('#card-item-pwd-button').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY EMAIL\n                if (data.email !== '') {\n                    $('#card-item-email-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-email-btn').addClass('hidden');\n                }\n\n                // Prepare auto_update info\n                $('#card-item-misc').html('');\n                if (parseInt(data.auto_update_pwd_frequency) !== '0') {\n                    $('#card-item-misc')\n                        .append('<span class=\"fas fa-shield infotip mr-4\" title=\"<?php echo langHdl('auto_update_enabled'); ?>&nbsp;' + data.auto_update_pwd_frequency + '\"></span>');\n                }\n\n                // Show Notification engaged\n                if (data.notification_status === true) {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span></span>');\n                } else {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span></span>');\n                }\n\n                // Prepare counter\n                $('#card-item-misc')\n                    .append('<span class=\"icon-badge mr-4\"><span class=\"far fa-eye infotip\" title=\"<?php echo langHdl('viewed_number'); ?>\"></span><span class=\"badge badge-info icon-badge-text icon-badge-far\">' + data.viewed_no + '</span></span>');\n\n                // Delete after X views\n                if (data.to_be_deleted !== '') {\n                    if (parseInt(data.to_be_deleted_type) === 1) {\n                        $('#form-item-deleteAfterShown').val(data.to_be_deleted);\n                        $('#form-item-deleteAfterDate').val('');\n                    } else {\n                        $('#form-item-deleteAfterShown').val('');\n                        $('#form-item-deleteAfterDate').val(data.to_be_deleted);\n                    }\n                    // Show icon\n                    $('#card-item-misc')\n                        .append('<span class=\"icon-badge mr-5\"><span class=\"far fa-trash-alt infotip\" title=\"<?php echo langHdl('automatic_deletion_engaged'); ?>\"></span><span class=\"badge badge-danger icon-badge-text-bottom-right\">' + data.to_be_deleted + '</span></span>');\n                }\n\n                // reset password shown info\n                $('#card-item-pwd').removeClass('pwd-shown');\n\n                //Anyone can modify button\n                if (parseInt(data.anyone_can_modify) === 1) {\n                    $('#form-item-anyoneCanModify').iCheck('check');\n                } else {\n                    $('#form-item-anyoneCanModify').iCheck('uncheck');\n                }\n\n                if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) !== 2) {\n                    // continue loading data\n                    showDetailsStep2(itemId, actionType);\n                } else if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) === 2) {\n                    $('#item_details_nok').addClass('hidden');\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired_full').show();\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                } else {\n                    //Dont show details\n                    $('#item_details_nok').removeClass('hidden');\n                    $('#item_details_nok_restriction_list').html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo langHdl('author'); ?>: </b>' + data.author + '<br /><b><?php echo langHdl('restricted_to'); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"openReasonToAccess()\"><?php echo langHdl('request_access_ot_item'); ?></a></u></div>');\n\n                    $('#reason_to_access').remove();\n                    $('#item_details_nok')\n                        .append('<input type=\"hidden\" id=\"reason_to_access\" value=\"' + data.id + ',' + data.id_user + '\">');\n\n                    // Protect\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired').addClass('hidden');\n                    $('#item_details_expired_full').addClass('hidden');\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                }\n\n                // Prepare bottom buttons\n                if ($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-prev-item')\n                        .html('<i class=\"fas fa-arrow-left mr-2\"></i>' + unescape($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-label')))\n                        .attr('data-prev-item-id', $('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                if ($('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-next-item')\n                        .html('<i class=\"fas fa-arrow-right mr-2\"></i>' + unescape($('#list-item-row_'+data.id).next('.list-item-row').attr('data-label')))\n                        .attr('data-next-item-id', $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n\n                /*\n                dataItemKey = $('[data-item-key=\"'+data.item_key+'\"]');\n                if (dataItemKey.prev('.list-item-row').attr('data-item-key') !== undefined) {\n                    $('.but-prev-item')\n                        .html('<i class=\"fas fa-arrow-left mr-2\"></i>' + unescape(dataItemKey.prev('.list-item-row').attr('data-label')))\n                        .attr('data-prev-item-key', dataItemKey.attr('data-item-key'))\n                        .removeClass('hidden');\n                }\n                if (dataItemKey.next('.list-item-row').attr('data-item-key') !== undefined) {\n                    $('.but-next-item')\n                        .html('<i class=\"fas fa-arrow-right mr-2\"></i>' + unescape(dataItemKey.next('.list-item-row').attr('data-label')))\n                        .attr('data-next-item-id', dataItemKey.next('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                */\n                if (debugJavascript === true) {\n                    //console.log(\"PREV: \" + dataItemKey.attr('data-item-key') + \" - NEXT: \" + $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'));\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('done'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                return true;\n            }\n        );\n    }\n\n\n    /*\n     * Loading Item details step 2\n     */\n    function showDetailsStep2(id, actionType) {\n        requestRunning = true;\n        $.post(\n            'sources/items.queries.php', {\n                type: 'showDetailsStep2',\n                id: id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'showDetailsStep2');\n\n                if (debugJavascript === true) {\n                    console.log('RECEIVED STEP2 - used key: <?php echo $_SESSION['key']; ?>');\n                    console.log(data);\n                }\n\n                // Attachments\n                if (data !== false) {\n                    if (data.attachments.length === 0) {\n                        $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n                        $('#card-item-attachments')\n                            .html('<?php echo langHdl('no_attachment'); ?>')\n                            .parent()\n                            .addClass('collapsed');\n                    } else {\n                        var html = '',\n                            htmlFull = '',\n                            counter = 1,\n                            nbFiles = 0;\n                        $.each(data.attachments, function(i, value) {\n                            // Manage new row\n                            if (counter === 1) {\n                                htmlFull += '<div class=\"row\">';\n                                html += '<div class=\"row\">';\n                            }\n\n                            html += '<div class=\"col-6\">' +\n                                '<div class=\"callout callout-info\">' +\n                                '<i class=\"' + value.icon + ' mr-2 text-info\"></i>';\n\n                            // Show VIEW image icon\n                            if (value.is_image === 1) {\n                                html +=\n                                    '<i class=\"fas fa-eye infotip preview-image pointer mr-2\" ' +\n                                    'title=\"<?php echo langHdl('see'); ?>\" ' +\n                                    'data-file-id=\"' + value.id + '\" data-file-title=\"' +\n                                    (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '\"></i>';\n                            }\n\n                            // Show DOWNLOAD icon\n                            downloadIcon =\n                                '<a class=\"text-secondary infotip mr-2\" href=\"sources/downloadFile.php?name=' + encodeURI(value.filename) + '&key=<?php echo $_SESSION['key']; ?>&key_tmp=' + value.key + '&fileid=' + value.id + '\" title=\"<?php echo langHdl('download'); ?>\">' +\n                                '<i class=\"fas fa-file-download\"></i></a>';\n                            html += downloadIcon;\n\n                            // Show other info\n                            html +=\n                                '<span class=\"font-weight-bold mr-3\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '</span>' +\n                                '<span class=\"mr-2 font-weight-light\">(' + value.extension + ')</span>' +\n                                '<span class=\"font-italic\">' + value.size + '</span>' +\n                                '</div></div>';\n\n                            htmlFull += '<div class=\"col-6 edit-attachment-div\"><div class=\"info-box bg-secondary-gradient\">' +\n                                '<span class=\"info-box-icon bg-info\"><i class=\"' + value.icon + '\"></i></span>' +\n                                '<div class=\"info-box-content\"><span class=\"info-box-text\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '.' + value.extension + '</span>' +\n                                '<span class=\"info-box-text\">' + downloadIcon +'</span>' +\n                                '<span class=\"info-box-text\"><i class=\"fas fa-trash pointer delete-file\" data-file-id=\"' + value.id + '\"></i></span></div>' +\n                                '</div></div>';\n\n                            if (counter === 2) {\n                                htmlFull += '</div>';\n                                html += '</div>';\n                                counter = 1;\n                            } else {\n                                counter += 1;\n                            }\n                            nbFiles += 1;\n                        });\n                        $('#card-item-attachments').html(html);\n                        $('#card-item-attachments-badge').html(nbFiles);\n                        $('#form-item-attachments').html(htmlFull);\n                        $('#form-item-attachments-zone').removeClass('hidden');\n                    }\n                }\n                // Hide loading state\n                $('#card-item-attachments').nextAll().addClass('hidden');\n\n                // Show restrictions with Badges\n                var html_restrictions = '';\n                $.each(store.get('teampassItem').id_restricted_to, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.users_list.find(x => x.id === parseInt(value)).name + '</span>';\n                });\n                $.each(store.get('teampassItem').id_restricted_to_roles, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.roles_list.find(x => x.id === parseInt(value)).title + '</span>';\n                });\n                if (html_restrictions === '') {\n                    $('#card-item-restrictedto').html('<?php echo langHdl('no_special_restriction'); ?>');\n                } else {\n                    $('#card-item-restrictedto').html(html_restrictions);\n                }\n\n\n                $('#edit_past_pwds').attr('title', (data.history_of_pwds)); //htmlspecialchars_decode \n                $('#edit_past_pwds_div').html((data.history_of_pwds)); //htmlspecialchars_decode \n\n                //$('#id_files').html(data.files_id);\n                //$('#hid_files').val(data.files_id);\n                //$('#item_edit_list_files').html(data.files_edit);\n\n                //$('#index-last-pwds').html(htmlspecialchars_decode(data.div_last_items));\n\n                // function calling image lightbox when clicking on link\n                $('a.image_dialog').click(function(event) {\n                    event.preventDefault();\n                    PreviewImage($(this).attr('href'), $(this).attr('title'));\n                });\n\n\n                // set indicator if item has change proposal\n                if (parseInt(data.has_change_proposal) > 0) {\n                    $('#item_extra_info').prepend('<i class=\"fas fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo langHdl('item_has_change_proposal'); ?>\"></i>&nbsp;');\n                }\n\n\n                $('.infotip').tooltip();\n\n                // Now load History\n                if (actionType === 'show') {\n                    $.post(\n                        \"sources/items.queries.php\", {\n                            type: \"load_item_history\",\n                            item_id: store.get('teampassItem').id,\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //decrypt data\n                            data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'load_item_history');\n                            if (debugJavascript === true) {\n                                console.info('History:');\n                                console.log(data);\n                            }\n                            if (data.error === '') {\n                                var html = '',\n                                    nbHistoryEvents = 0;\n                                $.each(data.history, function(i, value) {\n                                    html += '<div class=\"direct-chat-msg\"><div class=\"direct-chat-info clearfix\">' +\n                                        '<span class=\"direct-chat-name float-left\">' + value.name + '</span>' +\n                                        '<span class=\"direct-chat-timestamp float-right\">' + value.date + '</span>' +\n                                        '</div>' +\n                                        '<img class=\"direct-chat-img\" src=\"' + value.avatar + '\" alt=\"Message User Image\">' +\n                                        '<div class=\"direct-chat-text\"><span class=\"text-capitalize\">' +\n                                        (value.action === '' ? '' : (value.action)) + '</span> ' +\n                                        (value.detail === '' ? '' : (' | ' + value.detail)) + '</div></div>';\n                                    nbHistoryEvents += 1;\n                                });\n                                // Display\n                                $('#card-item-history').html(html);\n                                $('#card-item-history-badge').html(nbHistoryEvents);\n                            }\n\n                            // Collapse History\n                            $('#card-item-history').closest().addClass('collapsed');\n\n                            // Hide loading state\n                            $('#card-item-history').nextAll().addClass('hidden');\n                        }\n                    );\n                } else if (actionType === 'edit') {\n                    getPrivilegesOnItem(\n                        selectedFolderId,\n                        0\n                    );\n                }\n\n                // Prepare Select2 inputs\n                $('.select2').select2({\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare datePicker\n                $('#form-item-deleteAfterDate, .datepicker').datepicker({\n                    format: '<?php echo str_replace(['Y', 'M'], ['yyyy', 'mm'], $SETTINGS['date_format']); ?>',\n                    todayHighlight: true,\n                    todayBtn: true,\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare Date range picker with time picker\n                $('.timepicker').timepicker({\n                    minuteStep: 5,\n                    template: false,\n                    showSeconds: true,\n                    showMeridian: false,\n                    showInputs: false,\n                    explicitMode: true\n                });\n\n                // Delete inputs related files uploaded but not confirmed\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function (data) {\n                        /*// add track-change class on item form\n                        setTimeout(\n                            $('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change'),\n                            2000\n                        );*/\n\n                        requestRunning = false;\n                    }\n                );\n            }\n        );\n    };\n\n    // Clear history form\n    $(document)\n        .on('click', '#form-item-history-clear', function() {\n            $('.history').val('');\n        })\n        .on('click', '#form-item-history-insert', function() {\n            if ($('#form-item-history-label').val() === '' ||\n                $('#form-item-history-date').val() === '' ||\n                $('#form-item-history-time').val() === ''\n            ) {\n                // Inform user\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('all_fields_mandatory'); ?>',\n                    '<?php echo langHdl('warning'); ?>', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Insert new entry\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'label': DOMPurify.sanitize($('#form-item-history-label').val()),\n                'date': DOMPurify.sanitize($('#form-item-history-date').val()),\n                'time': DOMPurify.sanitize($('#form-item-history-time').val()),\n            }\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'history_entry_add',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'history_entry_add');\n                    if (debugJavascript === true) console.log(data);\n                    $('.history').val('');\n\n                    // Inform user\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            );\n        })\n        .on('click', '.nav-link', function() {\n            if ($(this).attr('href') === '#tab_5') {\n                $('#form-item-buttons').addClass('hidden');\n            } else {\n                $('#form-item-buttons').removeClass('hidden');\n            }\n\n        });\n\n    // When click on Trash attachment icon\n    $(document).on('click', '.delete-file', function() {\n        var thisButton = $(this),\n            thisFileId = thisButton.data('file-id');\n\n        if (thisFileId !== undefined && thisFileId !== '') {\n            // Delete the file\n            var data = {\n                'file_id': thisFileId,\n            };\n\n            $.post(\n                'sources/items.queries.php', {\n                    type: 'delete_attached_file',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    //decrypt data\n                    data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_attached_file');\n                    if (debugJavascript === true) console.log(data);\n\n                    //check if format error\n                    if (data.error === true) {\n                        // ERROR\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Remove the file in UI\n                        thisButton.closest('.edit-attachment-div').remove();\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n        }\n    });\n\n    //calling image lightbox when clicking on link\n    $(document).on('click', '.preview-image', function(event) {\n        event.preventDefault();\n        PreviewImage($(this).data('file-id'));\n    });\n\n    PreviewImage = function(fileId) {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('loading_image'); ?>...<i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-2\"></i>'\n        );\n\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"image_preview_preparation\",\n                id: fileId,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'image_preview_preparation');\n                //if (debugJavascript === true) console.log(data);\n\n                //check if format error\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $(\"#card-item-preview\").html('<img id=\"image_files\" src=\"\">');\n                    //Get the HTML Elements\n                    imageDialog = $(\"#card-item-preview\");\n                    imageTag = $('#image_files');\n\n                    //Set the image src\n                    imageTag.attr(\"src\", \"data:\" + data.file_type + \";base64,\" + data.file_content);\n                    imageTag.attr(\"class\", \"img-fluid\");\n\n                    //When the image has loaded, display the dialog\n                    showModalDialogBox(\n                        '#warningModal',\n                        data.filename,\n                        $(imageDialog).html(),\n                        '',\n                        'Close',\n                        'modal-xl'\n                    );\n\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n\n                    /*\n                                        var pre = document.createElement('pre');\n                                        pre.style.textAlign = \"center\";\n                                        $(pre).append($(imageDialog).html());\n                                        alertify\n                                            .alert(pre)\n                                            .set({\n                                                label: '<?php echo langHdl('close'); ?>',\n                                                closable: false,\n                                                padding: false,\n                                                title: data.filename,\n                                                resizable: true,\n                                            })\n                                            .resizeTo('90%', '250px');*/\n                }\n            }\n        );\n    };\n\n    /**\n     */\n    function itemLog(logCase, itemId, itemLabel) {\n        itemId = itemId || $('#id_item').val();\n\n        var data = {\n            \"id\": itemId,\n            \"label\": DOMPurify.sanitize(itemLabel),\n            \"user_id\": \"<?php echo $_SESSION['user_id']; ?>\",\n            \"action\": logCase,\n            \"login\": \"<?php echo $_SESSION['login']; ?>\"\n        };\n\n        $.post(\n            \"sources/items.logs.php\", {\n                type: \"log_action_on_item\",\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            }\n        );\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function prepareOneTimeView() {\n        //Send query\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"generate_OTV_url\",\n                id: store.get('teampassItem').id,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //check if format error\n                if (data.error == \"\") {\n                    $('#form-item-otv-link').val(data.url);\n                    // prepare clipboard\n                    var clipboard = new ClipboardJS(\"#form-item-otv-copy-button\", {\n                        text: function() {\n                            return data.url;\n                        }\n                    });\n                    clipboard.on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                positionClass: 'toast-top-right',\n                                progressBar: true\n                            }\n                        );\n                        e.clearSelection();\n                    });\n                }\n            },\n            \"json\"\n        );\n    }\n\n    /**\n     */\n    function getPrivilegesOnItem(val, edit, context) {\n        context = context || \"\"; // make context optional\n\n        // make sure to use correct selected folder\n        if (val === false) {\n            val = selectedFolderId;\n        }\n        if (debugJavascript === true) console.log('Get privilege for folder ' + val);\n            \n        if (val === \"\" || typeof val === \"undefined\" || val === false) {\n            toastr.remove();\n            toastr.error(\n                '',\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                {\n                    timeOut: 5000,\n                    positionClass: 'toast-top-right',\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        return $.post(\n            \"sources/items.queries.php\", {\n                type: \"get_complixity_level\",\n                folder_id: val,\n                context: context,\n                item_id: store.get('teampassItem').id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'get_complixity_level');\n\n                if (debugJavascript === true) {\n                    console.info('GET COMPLEXITY LEVEL');\n                    console.log(data);\n                }\n                var executionStatus = true;\n\n                if (data.error === false) {\n                    // Do some prepartion\n\n                    // Prepare list of users where needed\n                    $('#form-item-restrictedto, #form-item-anounce').empty().change(); //.val('')\n                    // Users restriction list\n                    var html_restrictions = '';\n\n                    $(data.usersList).each(function(index, value) {\n                        // Prepare list for FORM\n                        $(\"#form-item-restrictedto\")\n                            .append('<option value=\"' + value.id + '\" class=\"restriction_is_user\">' + value.name + '</option>');\n\n                        // Prepare list of emailers\n                        $('#form-item-anounce').append('<option value=\"' + value.email + '\">' + value.name + '</option>');\n                    });\n                    if (data.setting_restricted_to_roles === 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup label=\"<?php echo langHdl('users'); ?>\">');\n                        $(\".restriction_is_user\").wrapAll(optgroup);\n\n                        // Now add the roles to the list\n                        $(data.rolesList).each(function(index, value) {\n                            $(\"#form-item-restrictedto\")\n                                .append('<option value=\"role_' + value.id + '\" class=\"restriction_is_role\">' +\n                                    value.title + '</option>');\n                        });\n                        /// Add a group label for Groups\n                        $('.restriction_is_role').wrapAll($('<optgroup label=\"<?php echo langHdl('roles'); ?>\">'));\n                    }\n\n\n                    //\n                    $('#card-item-visibility').html(data.visibility);\n\n                    // Prepare Select2\n                    $('.select2').select2({\n                        language: '<?php echo $_SESSION['user_language_code']; ?>'\n                    });\n\n                    // Show selected restricted inputs\n                    $('#form-item-restrictedto')\n                        .val(data.usersList.concat(\n                            data.rolesList.map(i => 'role_' + i)))\n                        .change();\n\n                    // If restricted to Users then select them\n                    if (store.get('teampassItem').id_restricted_to !== undefined) {\n                        $('#form-item-restrictedto')\n                            .val(store.get('teampassItem').id_restricted_to)\n                            .trigger('change');\n                    }\n\n                }\n\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.folderId = val,\n                            teampassItem.error = data.error === undefined ? '' : data.error,\n                            teampassItem.message = data.message === undefined ? '' : data.message,\n                            teampassItem.folderComplexity = data.val === undefined ? '' : parseInt(data.val),\n                            teampassItem.folderIsPersonal = data.personal === undefined ? '' : parseInt(data.personal),\n                            teampassItem.itemMinimumComplexity = data.complexity === undefined ? '' : data.complexity,\n                            teampassItem.itemVisibility = data.visibility === undefined ? '' : data.visibility,\n                            teampassItem.id_restricted_to = data.usersList === undefined ? '' : data.usersList,\n                            teampassItem.id_restricted_to_roles = data.rolesList === undefined ? '' : data.rolesList,\n                            teampassItem.item_rights = data.itemAccessRight === undefined ? '' : data.itemAccessRight\n                    }\n                );\n                //if (debugJavascript === true) console.log('Content of teampassItem;')\n                //if (debugJavascript === true) console.log(store.get('teampassItem'))\n            }\n        );\n    }\n\n    $('.password-generate').click(function() {\n        var elementId = $(this).data('id');\n        $('#' + elementId).focus();\n        if (debugJavascript === true) console.log(elementId);\n\n        // If no criteria is set then do secure\n        var secure_pwd = false;\n        var anyBoxesChecked = false;\n        if ($('.password-definition:checked').length > 0) {\n            anyBoxesChecked = true;\n        }\n        if (anyBoxesChecked === false || $('#pwd-definition-secure').prop('checked') === true) {\n            secure_pwd = true;\n        }\n        \n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"generate_password\",\n                type_category: 'action_user',\n                size: $('#pwd-definition-size').val(),\n                lowercase: $('#pwd-definition-lcl').prop(\"checked\"),\n                numerals: $('#pwd-definition-numeric').prop(\"checked\"),\n                capitalize: $('#pwd-definition-ucl').prop(\"checked\"),\n                symbols: $('#pwd-definition-symbols').prop(\"checked\"),\n                secure_pwd: secure_pwd,\n                force: \"false\",\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (debugJavascript === true) console.log(data)\n                if (data.error == \"true\") {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        data.error_msg,\n                        '<?php echo langHdl('error'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                } else {\n                    $(\"#\" + elementId).val(data.key).focus();\n\n                    // Form has changed\n                    userDidAChange = true;\n                    if (debugJavascript === true) console.log('User did a change during generate_password > ' + userDidAChange);\n                    //$('#' + elementId).attr('data-change-ongoing', true);;\n\n                    $(\"#form-item-password\").pwstrength(\"forceUpdate\");\n\n                    // SHow button in sticky footer\n                    //$('#form-item-buttons').addClass('sticky-footer');\n                }\n            }\n        );\n    });\n\n    $('#item-button-password-copy').click(function() {\n        $('#form-item-password-confirmation').val($('#form-item-password').val());\n    });\n\n    /**\n     * On tag badge click, launch the search query\n     */\n    function searchItemsWithTags(criteria) {\n        if (criteria !== '') {\n            $('#folders-tree-card, .columns-position').removeClass('hidden');\n            $('.item-details-card, .form-item-action, .form-item, .form-folder-action').addClass('hidden');\n\n            $('#find_items').val(criteria);\n\n            searchItems(criteria);\n        }\n    }\n\n    /**\n     * Checks if string is base64 encoded\n     *\n     * @return bool\n     */\n    function isBase64(str) {\n        try {\n            return btoa(atob(str)) == str;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Scroll back to previous vertical position\n     *\n     * @return void\n     */\n    function scrollBackToPosition() {\n        // Scroll back to position\n        if (store.get('teampassApplication').tempScrollTop > 0) {\n            window.scrollTo({\n                top: store.get('teampassApplication').tempScrollTop\n            });\n        }\n    }\n\n\n    function prepareFolderDragNDrop()\n    {\n        $('.is-draggable').draggable({\n            cursor: 'move',\n            cursorAt: {\n                top: -5,\n                left: -5\n            },\n            opacity: 0.8,\n            appendTo: 'body',\n            stop: function(event, ui) {\n                $(this).removeClass('bg-warning');\n            },\n            start: function(event, ui) {\n                $(this).addClass('bg-warning');\n            },\n            helper: function(event) {\n                return $('<div class=\"bg-gray p-2 font-weight-light\">' + $(this).find('.list-item-row-description').text() + '</div>');\n            }\n        });\n        $('.folder').droppable({\n            hoverClass: 'bg-warning',\n            tolerance: 'pointer',\n            drop: function(event, ui) {\n                // Check if same folder\n                if (parseInt($(this).attr('id').substring(4)) === parseInt(ui.draggable.data('item-tree-id'))) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Warn user that it starts\n                toastr.info(\n                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                );\n\n                // Hide helper\n                ui.draggable.addClass('hidden');\n\n                //move item\n                var data = {\n                    'item_id': ui.draggable.data('item-id'),\n                    'folder_id': $(this).attr('id').substring(4)\n                }\n                $.post(\n                    'sources/items.queries.php', {\n                        type: 'move_item',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'move_item');\n\n                        if (debugJavascript === true) console.log(data)\n\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            ui.draggable.removeClass('hidden');\n                            return false;\n                        }\n                        \n                        //increment / decrement number of items in folders\n                        $('#itcount_' + data.from_folder).text(refreshFolderCounters($('#itcount_' + data.from_folder).text(), 'decrement'));\n                        $('#itcount_' + data.to_folder).text(refreshFolderCounters($('#itcount_' + data.to_folder).text(), 'increment'));\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                );\n            }\n        });\n    }\n\n    /**\n     * Permits to refresh the folder counters when performing an item drag and drop\n     */\n    function refreshFolderCounters(counter, operation)\n    {\n        var splitCounter = counter.split('/');\n        if (splitCounter.length <= 3) {\n            if (operation === 'increment') {\n                splitCounter[0]++;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]++;\n                }\n            } else {\n                splitCounter[0]--;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]--;\n                }\n            }\n        }\n        \n        return splitCounter.join('/');\n    }\n\n    /*\n    // Get parameters from url\n    var currentTeampassUrl = new URL(window.location.href);\n    var actionFromUrl = currentTeampassUrl.searchParams.get('action');\n    if (actionFromUrl !== undefined && atob(actionFromUrl) === 'reset_private_key') {\n        // Case where we need to re-encrypt all share keys\n        if (debugJavascript === true) console.log(\"ACTION RE-ENCRYPTION OF SHAREKEYS\");\n\n        $('#dialog-encryption-keys').removeClass('hidden');    \n\n        // Hide other\n        $('.content-header, .content').addClass('hidden');\n\n        alertify.dismissAll();\n    }\n    */\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      items.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], curPage($SETTINGS), $SETTINGS) === false) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n// Load\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare SESSION variables\n$session_user_admin = $superGlobal->get('user_admin', 'SESSION');\n\nif ((int) $session_user_admin === 1) {\n    $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n}\n\n// Get list of users\n$usersList = [];\n$rows = DB::query('SELECT id,login,email FROM ' . prefixTable('users') . ' ORDER BY login ASC');\nforeach ($rows as $record) {\n    $usersList[$record['login']] = [\n        'id' => $record['id'],\n        'login' => $record['login'],\n        'email' => $record['email'],\n    ];\n}\n// Get list of roles\n$arrRoles = [];\n$listRoles = '';\n$rows = DB::query('SELECT id,title FROM ' . prefixTable('roles_title') . ' ORDER BY title ASC');\nforeach ($rows as $reccord) {\n    $arrRoles[$reccord['title']] = [\n        'id' => $reccord['id'],\n        'title' => $reccord['title'],\n    ];\n    if (empty($listRoles)) {\n        $listRoles = $reccord['id'] . '#' . $reccord['title'];\n    } else {\n        $listRoles .= ';' . $reccord['id'] . '#' . $reccord['title'];\n    }\n}\n\n?>\n\n<!-- Content Header (Page header) -->\n<div class=\"content-header\">\n    <div class=\"container-fluid\">\n        <div class=\"row mb-2\">\n            <div class=\"col-sm-2\">\n                <h1 class=\"m-0 text-dark\"><i class=\"fas fa-key mr-2\"></i><?php echo langHdl('items'); ?></h1>\n            </div><!-- /.col -->\n            <div class=\"col-sm-10\">\n                <ol class=\"breadcrumb float-sm-right\" id=\"form-folder-path\"></ol>\n            </div><!-- /.col -->\n        </div><!-- /.row -->\n    </div><!-- /.container-fluid -->\n</div>\n<!-- /.content-header -->\n\n\n<!-- Main content -->\n<section class=\"content\">\n\n    <!-- EXPIRED ITEM -->\n    <div class=\"row hidden\" id=\"card-item-expired\">\n        <div class=\"col-12\">\n            <div class=\"alert alert-danger\">\n                <h5><i class=\"fas fa-exclamation-triangle mr-2\"></i><?php echo langHdl('warning'); ?></h5>\n                <?php echo langHdl('pw_is_expired_-_update_it'); ?>\n            </div>\n        </div>\n    </div>\n\n    <!-- ITEM FORM -->\n    <div class=\"row hidden form-item\">\n        <div class=\"col-12\">\n\n            <div class=\"card text-center\">\n                <div class=\"card-header\">\n                    <div class=\"card-tools-left\">\n                        <button type=\"button\" class=\"btn btn-gray but-back\">\n                            <i class=\"fas fa-arrow-left\"></i>\n                        </button>\n                    </div>\n\n                    <h5 id=\"form-item-title\" class=\"clear-me-html\" style=\"min-height:23px;\"></h5>\n\n                    <div class=\"card-tools\">\n                        <button type=\"button\" class=\"btn btn-tool btn-sm but-back\">\n                            <i class=\"fas fa-times\"></i>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div>\n                        <label><i class=\"fas fa-users mr-2\"></i><?php echo langHdl('visible_by'); ?></label>\n                        <span id=\"card-item-visibility\" class=\"text-info font-weight-bold ml-2\"></span>\n                    </div>\n                    <div>\n                        <label><i class=\"fas fa-key mr-2\"></i><?php echo langHdl('complex_asked'); ?></label>\n                        <span id=\"card-item-minimum-complexity\" class=\"text-info font-weight-bold ml-2\"></span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header d-flex\">\n                    <ul class=\"nav nav-pills\" id=\"form-item-nav-pills\">\n                        <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#tab_1\" data-toggle=\"tab\"><i class=\"fas fa-home mr-2\"></i><?php echo langHdl('main'); ?></a></li>\n                        <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_2\" data-toggle=\"tab\"><i class=\"fas fa-list mr-2\"></i><?php echo langHdl('details'); ?></a></li>\n                        <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_3\" data-toggle=\"tab\"><i class=\"fas fa-archive mr-2\"></i><?php echo langHdl('attachments'); ?></a></li>\n                        <?php\n                        echo isset($SETTINGS['item_extra_fields']) === true && (int) $SETTINGS['item_extra_fields'] === 1 ? '\n                            <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_4\" data-toggle=\"tab\"><i class=\"fas fa-cubes mr-2\"></i>' . langHdl('fields') . '</a></li>' : '';\n                        echo isset($SETTINGS['insert_manual_entry_item_history']) === true && (int) $SETTINGS['insert_manual_entry_item_history'] === 1 ? '\n                            <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_5\" data-toggle=\"tab\"><i class=\"fas fa-history mr-2\"></i>' . langHdl('history') . '</a></li>' : '';\n                        ?>\n                    </ul>\n                </div><!-- /.card-header -->\n                <div class=\"card-body\">\n                    <form id=\"form-item\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                        <div class=\"tab-content\">\n                            <div class=\"tab-pane active\" id=\"tab_1\">\n                                <!-- LABEL -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('label'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-label\" type=\"text\" class=\"form-control form-item-control\" data-change-ongoing=\"\" data-field-name=\"label\">\n                                </div>\n                                <!-- DESCRIPTION -->\n                                <div class=\"mb-3\">\n                                    <div id=\"form-item-description\" class=\"form-item-control w-100 clear-me-html\" data-field-name=\"description\" data-change-ongoing=\"\"></div>\n                                </div>\n                                <!-- LOGIN -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('login'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-login\" type=\"text\" class=\"form-control form-item-control\" data-field-name=\"login\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- PASSWORD -->\n                                <div class=\"input-group mb-2\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('password'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-password\" type=\"password\" class=\"form-control form-item-control\" placeholder=\"<?php echo langHdl('password'); ?>\" data-field-name=\"pwd\" data-change-ongoing=\"\">\n                                    <div class=\"input-group-append\">\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip password-generate\" id=\"item-button-password-generate\" title=\"<?php echo langHdl('pw_generate'); ?>\" data-id=\"form-item-password\"><i class=\"fas fa-random\"></i></button>\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip\" id=\"item-button-password-showOptions\" title=\"<?php echo langHdl('options'); ?>\"><i class=\"fas fa-sliders-h\"></i></button>\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip\" id=\"item-button-password-show\" title=\"<?php echo langHdl('mask_pw'); ?>\"><i class=\"fas fa-low-vision\"></i></button>\n                                    </div>\n                                </div>\n                                <div class=\"container-fluid mb-0\">\n                                    <div class=\"row\">\n                                        <div class=\"col-md-12 justify-content-center\">\n                                            <div id=\"form-item-password-strength\" class=\"justify-content-center\" style=\"\"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <input type=\"hidden\" id=\"form-item-password-complex\" value=\"0\">\n                                <div class=\"mt-1 hidden\" id=\"form-item-password-options\">\n                                    <div class=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                                        <div class=\"btn-group btn-group-sm btn-group-toggle mr-2\" data-toggle=\"buttons\">\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-lcl\">abc</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-ucl\">ABC</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-numeric\">123</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-symbols\">@#&amp;</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-secure\"><?php echo langHdl('secure'); ?></label>\n                                        </div>\n\n                                        <div class=\"input-group input-group-sm\">\n                                            <div class=\"input-group-prepend\">\n                                                <div class=\"input-group-text\"><?php echo langHdl('size'); ?></div>\n                                            </div>\n                                            <select class=\"form-control form-control-sm w-10\" id=\"pwd-definition-size\">\n                                                <?php\n                                                for ($i = 4; $i <= $SETTINGS['pwd_maximum_length']; ++$i) {\n                                                    echo '\n                                                <option>' . $i . '</option>';\n                                                }\n                                                ?>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- EMAIL -->\n                                <div class=\"input-group mb-3 mt-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('email'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-email\" type=\"email\" class=\"form-control form-item-control\" data-field-name=\"email\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- URL -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('url'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-url\" type=\"url\" class=\"form-control form-item-control\" data-field-name=\"url\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- ICON -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('icon'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-icon\" type=\"text\" class=\"form-control form-item-control\" data-field-name=\"icon\" data-change-ongoing=\"\">\n                                    <span class=\"ml-2 col-md-1 clear-me-html\" id=\"form-item-icon-show\"></span>\n                                </div>\n                                <small class='form-text text-muted'>\n                                    <?php echo langHdl('fontawesome_icon_tip'); ?><a href=\"<?php echo FONTAWESOME_URL;?>\" target=\"_blank\"><i class=\"fas fa-external-link-alt ml-1\"></i></a>\n                                </small>\n                            </div>\n\n                            <div class=\"tab-pane\" id=\"tab_2\">\n                                <!-- FOLDERS -->\n                                <div class=\"form-group mb-3\">\n                                    <label><?php echo langHdl('folder'); ?></label>\n                                    <select id=\"form-item-folder\" class=\"form-control form-item-control select2 no-root\" style=\"width:100%;\" data-change-ongoing=\"\"></select>\n                                </div>\n\n                                <!-- RESTRICTED TO -->\n                                <div class=\"input-group mb-3\">\n                                    <label><?php echo langHdl('restricted_to'); ?></label>\n                                    <select id=\"form-item-restrictedto\" class=\"form-control form-item-control select2\" style=\"width:100%;\" multiple=\"multiple\" data-change-ongoing=\"\"></select>\n                                    <input type=\"hidden\" id=\"form-item-restrictedToUsers\" class=\"form-item-control\">\n                                    <input type=\"hidden\" id=\"form-item-restrictedToRoles\" class=\"form-item-control\">\n                                </div>\n                                <!-- TAGS -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('tags'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-tags\" type=\"text\" class=\"form-control form-item-control autocomplete\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- ANYONE CAN MODIFY -->\n                                <?php\n                                if (\n                                    isset($SETTINGS['anyone_can_modify']) === true\n                                    && (int) $SETTINGS['anyone_can_modify'] === 1\n                                ) {\n                                    ?>\n                                    <div class=\"form-check mb-3 icheck-blue\">\n                                        <input type=\"checkbox\" class=\"form-check-input form-item-control flat-blue\" id=\"form-item-anyoneCanModify\" <?php\n                                            echo isset($SETTINGS['anyone_can_modify_bydefault']) === true\n                                            && (int) $SETTINGS['anyone_can_modify_bydefault'] === 1 ? ' checked' : ''; ?> data-change-ongoing=\"\">\n                                        <label class=\"form-check-label ml-3\" for=\"form-item-anyoneCanModify\"><?php echo langHdl('anyone_can_modify'); ?></label>\n                                    </div>\n                                <?php\n                                }\n                                ?>\n                                <!-- DELETE AFTER CONSULTATION -->\n                                <?php\n                                if (\n                                    isset($SETTINGS['enable_delete_after_consultation']) === true\n                                    && (int) $SETTINGS['enable_delete_after_consultation'] === 1\n                                ) {\n                                    ?>\n                                    <div class=\"callout callout-primary mb-3\">\n                                        <div class=\"card-header\">\n                                            <h3 class=\"card-title\">\n                                                <i class=\"fas fa-eraser\"></i>\n                                                <?php echo langHdl('allow_item_to_be_deleted'); ?>\n                                            </h3>\n                                        </div>\n                                        <!-- /.card-header -->\n                                        <div class=\"card-body\">\n                                            <div class=\"row\">\n                                                <div class=\"d-inline p-2\">\n                                                    <?php echo langHdl('item_deleted_after_being_viewed_x_times'); ?>\n                                                </div>\n                                                <div class=\"d-inline p-2\">\n                                                    <input type=\"text\" class=\"form-control form-item-control\" id=\"form-item-deleteAfterShown\" data-change-ongoing=\"\">\n                                                </div>\n                                            </div>\n                                            <div class=\"row\">\n                                                <div class=\"d-inline p-2\">\n                                                    <?php echo langHdl('item_deleted_after_date'); ?>\n                                                </div>\n                                                <div class=\"d-inline p-2\">\n                                                    <div class=\"input-group date inline\">\n                                                        <div class=\"input-group-prepend\">\n                                                            <span class=\"input-group-text\">\n                                                                <i class=\"fas fa-calendar\"></i>\n                                                            </span>\n                                                        </div>\n                                                        <input type=\"text\" class=\"form-control float-right form-item-control\" id=\"form-item-deleteAfterDate\" data-change-ongoing=\"\">\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                <?php\n                                }\n                                ?>\n\n                                <div class=\"callout callout-primary mb-3\">\n                                    <div class=\"card-header\">\n                                        <h3 class=\"card-title\">\n                                            <i class=\"fas fa-bullhorn\"></i>\n                                            <?php echo langHdl('anounce_item_by_email'); ?>\n                                        </h3>\n                                    </div>\n                                    <!-- /.card-header -->\n                                    <div class=\"card-body\">\n                                        <select id=\"form-item-anounce\" class=\"form-control form-item-control select2\" style=\"width:100%;\" multiple=\"multiple\" data-placeholder=\"<?php echo langHdl('select_users_if_needed'); ?>\" data-change-ongoing=\"\"></select>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- ATTACHMENTS -->\n                            <div class=\"tab-pane\" id=\"tab_3\">\n                                <div class=\"callout callout-primary mb-3 hidden\" id=\"form-item-attachments-zone\">\n                                    <div class=\"card-header\">\n                                        <h3 class=\"card-title\">\n                                            <i class=\"fas fa-paperclip mr-3\"></i>\n                                            <?php echo langHdl('attached_files'); ?>\n                                        </h3>\n                                    </div>\n                                    <!-- /.card-header -->\n                                    <div class=\"card-body clear-me-html\" id=\"form-item-attachments\">\n                                    </div>\n                                </div>\n                                <div class=\"callout callout-primary mb-3\">\n                                    <div class=\"card-header\">\n                                        <h3 class=\"card-title\">\n                                            <i class=\"fas fa-plus mr-3\"></i>\n                                            <?php echo langHdl('select_files'); ?>\n                                        </h3>\n                                    </div>\n                                    <!-- /.card-header -->\n                                    <div class=\"card-body\">\n                                        <div class=\"row\" id=\"form-item-upload-zone\">\n                                            <div class=\"col-6\">\n                                                <a class=\"btn btn-app text-capitalize\" id=\"form-item-attach-pickfiles\">\n                                                    <i class=\"fas fa-search mr-1\"></i><?php echo langHdl('select'); ?>\n                                                </a>\n                                                <a class=\"btn btn-app\" id=\"form-item-upload-pickfiles\">\n                                                    <i class=\"fas fa-upload mr-1\"></i><?php echo langHdl('start_upload'); ?>\n                                                </a>\n                                                <input type=\"hidden\" id=\"form-item-hidden-pickFilesNumber\" value=\"0\" />\n                                                <small class=\"form-text text-muted\">\n                                                    <?php echo langHdl('add_files_and_click_start'); ?>\n                                                </small>\n                                            </div>\n                                            <div class=\"col-6\">\n                                                <div class=\"callout callout-info hidden clear-me-html\" id=\"form-item-upload-pickfilesList\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- CUSTOM FIELDS -->\n                            <div class=\"tab-pane\" id=\"tab_4\">\n                                <div id=\"form-item-field\" class=\"hidden\">\n                                    <?php\n                                        if (isset($_SESSION['item_fields']) === true) {\n                                            foreach ($_SESSION['item_fields'] as $category) {\n                                                echo '\n                                            <div class=\"callout callout-info form-item-category hidden\" id=\"form-item-category-' . $category['id'] . '\">\n                                                <h5>' . $category['title'] . '</h5>\n                                                <p>';\n                                                foreach ($category['fields'] as $field) {\n                                                    if ($field['type'] === 'textarea') {\n                                                        echo '\n                                                    <div class=\"form-group mb-3 form-item-field\" id=\"form-item-field-' . $field['id'] . '\" data-field-id=\"' . $field['id'] . '\">\n                                                        <label>' . $field['title'],\n                                                            $field['is_mandatory'] === '1' ?\n                                                                '<span class=\"fas fa-fire text-danger ml-1 infotip\" title=\"' . langHdl('is_mandatory') . '\"></span>' : '',\n                                                            '</label>\n                                                        <textarea class=\"form-control form-item-control form-item-field-custom\" rows=\"2\" data-field-name=\"' . $field['id'] . '\" data-field-mandatory=\"' . $field['is_mandatory'] . '\" data-field-regex=\"' . $field['regex'] . '\" data-change-ongoing=\"0\"></textarea>\n                                                    </div>';\n                                                    } else {\n                                                        echo '\n                                                    <div class=\"input-group mb-3 form-item-field\" id=\"form-item-field-' . $field['id'] . '\" data-field-id=\"' . $field['id'] . '\">\n                                                        <div class=\"input-group-prepend\">\n                                                            <span class=\"input-group-text\">' . $field['title'],\n                                                            $field['is_mandatory'] === '1' ?\n                                                                '<span class=\"fas fa-fire text-danger ml-1 infotip\" title=\"' . langHdl('is_mandatory') . '\"></span>' : '',\n                                                            '</span>\n                                                        </div>\n                                                        <input type=\"' . $field['type'] . '\" class=\"form-control form-item-control form-item-field-custom\" data-field-name=\"' . $field['id'] . '\" data-field-mandatory=\"' . $field['is_mandatory'] . '\" data-field-regex=\"' . $field['regex'] . '\" data-change-ongoing=\"0\">\n                                                    </div>';\n                                                    }\n                                                    if (!empty($field['regex'])) {\n                                                        echo '\n                                                    <div>Regex: '. $field['regex'] .'</div>\n                                                        ';\n                                                    }\n                                                }\n                                                // Manage template\n                                                if (\n                                                    isset($SETTINGS['item_creation_templates']) === true\n                                                    && $SETTINGS['item_creation_templates'] === '1'\n                                                ) {\n                                                    echo '\n                                                    <div class=\"form-check icheck-blue\">\n                                                        <input type=\"checkbox\" class=\"form-check-input form-check-input-template form-item-control flat-blue\" data-category-id=\"' . $category['id'] . '\" data-change-ongoing=\"0\" data-field-name=\"template\" id=\"template_' . $category['id'] . '\">\n                                                        <label class=\"form-check-label ml-3\" for=\"template_' . $category['id'] . '\">' . langHdl('main_template') . '</label>\n                                                    </div>';\n                                                }\n                                                echo '\n                                                </p>\n                                            </div>';\n                                            }\n                                        } ?>\n                                </div>\n                                <div class=\"alert alert-info hidden no-item-fields\">\n                                    <h5><i class=\"icon fa fa-info mr-3\"></i><?php echo langHdl('information'); ?></h5>\n                                    <?php echo langHdl('no_fields'); ?>\n                                </div>\n                            </div>\n\n                            <!-- HISTORY -->\n                            <div class=\"tab-pane\" id=\"tab_5\">\n                                <div class=\"alert alert-info\">\n                                    <h5><i class=\"icon fa fa-info mr-3\"></i><?php echo langHdl('information'); ?></h5>\n                                    <?php echo langHdl('info_about_history_insertion'); ?>\n                                </div>\n                                <!-- LABEL -->\n                                <div class=\"row\">\n                                    <div class=\"col-12 input-group mb-3\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><?php echo langHdl('label'); ?></span>\n                                        </div>\n                                        <input id=\"form-item-history-label\" type=\"text\" class=\"form-control form-item-control history\" data-change-ongoing=\"\" data-field-name=\"history-label\">\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-6 input-group date inline\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-calendar\"></i>\n                                            </span>\n                                        </div>\n                                        <input type=\"text\" class=\"form-control float-right form-item-control datepicker history\" id=\"form-item-history-date\" data-change-ongoing=\"\" data-field-name=\"history-date\">\n                                    </div>\n                                    <div class=\"col-6 input-group time inline\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-clock\"></i>\n                                            </span>\n                                        </div>\n                                        <input type=\"text\" class=\"form-control float-right form-item-control timepicker history\" id=\"form-item-history-time\" data-change-ongoing=\"\" data-field-name=\"history-time\">\n                                    </div>\n                                </div>\n                                <div class=\"row col-12 mt-3\">\n                                    <button type=\"button\" class=\"btn btn-default mr-2\" id=\"form-item-history-insert\" data-action=\"\"><i class=\"fas fa-broom mr-2\"></i><?php echo langHdl('history_insert_entry'); ?></button>\n                                    <button type=\"button\" class=\"btn btn-default\" id=\"form-item-history-clear\" data-action=\"\"><i class=\"fas fa-broom mr-2\"></i><?php echo langHdl('clear_form'); ?></button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div class=\"card-footer\" id=\"form-item-buttons\">\n                    <button type=\"button\" class=\"btn btn-info mr-2\" id=\"form-item-button-save\" data-action=\"\"><?php echo langHdl('save'); ?></button>\n                    <button type=\"button\" class=\"btn btn-default but-back item-edit\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n                <!-- /.card-footer -->\n            </div>\n        </div>\n    </div>\n\n\n    <!-- ITEM DETAILS -->\n    <div class=\"row hidden item-details-card item-details-card-menu\">\n        <div class=\"col-12\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <span class=\"mr-3 align-middle\">\n                        <button type=\"button\" class=\"btn btn-gray but-back-to-list\">\n                            <i class=\"fas fa-arrow-left\"></i>\n                        </button>\n                    </span>\n                    <h3 class=\"d-inline align-middle\" id=\"card-item-label\"></h3>\n                    <div class=\"card-tools\">\n                        <button type=\"button\" class=\"btn btn-tool btn-sm but-back mt-2\">\n                            <i class=\"fas fa-times\"></i>\n                        </button>\n                    </div>\n                </div>\n\n                <div class=\"card-body p-0\">\n                    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span class=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                            <ul class=\"navbar-nav\">\n                                <li class=\"nav-item\" id=\"item-form-new-button\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"new\"><i class=\"far fa-plus-square mr-1\"></i><small><?php echo langHdl('new'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"edit\"><i class=\"far fa-edit mr-1\"></i><small><?php echo langHdl('edit'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"delete\"><i class=\"far fa-trash-alt mr-1\"></i><small><?php echo langHdl('delete'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"copy\"><i class=\"far fa-copy mr-1\"></i><small><?php echo langHdl('copy'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy ml-3\" href=\"#\" data-item-action=\"link\" id=\"get_item_link\"><i class=\"fa-solid fa-link mr-1\"></i><small><?php echo langHdl('link'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"share\"><i class=\"far fa-share-square mr-1\"></i><small><?php echo langHdl('share'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"notify\"><i class=\"far fa-bell mr-1\"></i><small><?php echo langHdl('notify'); ?></small></a>\n                                </li>\n                                <?php\n                                if (\n                                    isset($SETTINGS['enable_server_password_change']) === true\n                                    && (int) $SETTINGS['enable_server_password_change'] === 1\n                                ) {\n                                    ?>\n                                    <li class=\"nav-item\">\n                                        <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"server\"><i class=\"fas fa-server mr-1\"></i><small><?php echo langHdl('server'); ?></small></a>\n                                    </li>\n                                <?php\n                                }\n                                if (\n                                    isset($SETTINGS['otv_is_enabled']) === true\n                                    && (int) $SETTINGS['otv_is_enabled'] === 1\n                                ) {\n                                    ?>\n                                    <li class=\"nav-item\">\n                                        <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"otv\"><i class=\"fab fa-slideshare mr-1\"></i><small><?php echo langHdl('one_time_view'); ?></small></a>\n                                    </li>\n                                <?php\n                                }\n                                ?>\n                            </ul>\n                        </div>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"card-item-preview\" class=\"hidden\"></div>\n\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-md-7\">\n            <div class=\"card card-primary card-outline\">\n                <div class=\"card-body\" id=\"list-group-item-main\">\n                    <ul class=\"list-group list-group-unbordered mb-3\">\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('pw'); ?></b>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm btn-copy-clipboard\" id=\"card-item-pwd-button\">\n                                <i class=\"far fa-copy\"></i>\n                            </button>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm mr-1\" id=\"card-item-pwd-show-button\">\n                                <i class=\"far fa-eye pwd-show-spinner\"></i>\n                            </button>\n                            <span id=\"card-item-pwd\" class=\"float-right unhide_masked_data pointer mr-2\"></span>\n                            <input id=\"hidden-item-pwd\" type=\"hidden\">\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('index_login'); ?></b>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm ml-1 btn-copy-clipboard-clear\" data-clipboard-target=\"#card-item-login\" id=\"card-item-login-btn\">\n                                <i class=\"far fa-copy\"></i>\n                            </button>\n                            <span id=\"card-item-login\" class=\"float-right\"></span>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('email'); ?></b>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm ml-1 btn-copy-clipboard-clear\" data-clipboard-target=\"#card-item-email\" id=\"card-item-email-btn\">\n                                <i class=\"far fa-copy\"></i>\n                            </button>\n                            <span id=\"card-item-email\" class=\"float-right ml-1\"></span>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('url'); ?></b>\n                            <a id=\"card-item-url\" class=\"float-right ml-1\" href=\"#\" target=\"_blank\"></a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-md-5\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <ul class=\"list-group list-group-unbordered mb-3\">\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('restricted_to'); ?></b>\n                            <a id=\"card-item-restrictedto\" class=\"float-right ml-1\"></a>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('tags'); ?></b>\n                            <a id=\"card-item-tags\" class=\"float-right ml-1\"></a>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('kbs'); ?></b>\n                            <a id=\"card-item-kbs\" class=\"float-right ml-1\"></a>\n                        </li>\n                        <li class=\"list-group-item\" id=\"card-item-misc\">\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-12\">\n            <div class=\"callout callout-info visible\" id=\"card-item-description\">No description</div>\n        </div>\n    </div>\n\n\n    <?php\n    if (\n        isset($SETTINGS['item_extra_fields']) === true\n        && (int) $SETTINGS['item_extra_fields'] === 1\n    ) {\n        ?>\n        <div class=\"row hidden item-details-card\" id=\"item-details-card-categories\">\n            <div class=\"col-12\">\n                <div class=\"card card-default\">\n                    <div class=\"card-header bg-gray-dark\">\n                        <h3 class=\"card-title pointer\" data-toggle=\"collapse\" data-target=\"#card-item-fields\">\n                            <i class=\"fas fa-random mr-2\"></i><?php echo langHdl('categories'); ?>\n                        </h3>\n                        <!-- /.card-tools -->\n                    </div>\n                    <!-- /.card-header -->\n                    <div class=\"card-body collapse show\" id=\"card-item-fields\">\n                        <?php\n                            foreach ($_SESSION['item_fields'] as $elem) {\n                                echo '\n                        <div class=\"callout callout-info card-item-category hidden\" id=\"card-item-category-' . $elem['id'] . '\">\n                            <h5>' . $elem['title'] . '</h5>\n                            <p>\n                                <ul class=\"list-group list-group-unbordered mb-3\">';\n                                foreach ($elem['fields'] as $field) {\n                                    echo '\n                                    <li class=\"list-group-item card-item-field hidden\" id=\"card-item-field-' . $field['id'] . '\">\n                                        <b>' . $field['title'] . '</b>\n                                        <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm ml-1 btn-copy-clipboard-clear\"  data-clipboard-target=\"#card-item-field-value-' . $field['id'] . '\">\n                                            <i class=\"fas fa-copy\"></i>\n                                        </button>\n                                        <span class=\"card-item-field-value float-right ml-1\" id=\"card-item-field-value-' . $field['id'] . '\"></span>\n                                    </li>';\n                                }\n                                echo '\n                                </ul>\n                            </p>\n                        </div>';\n                            } ?>\n                        <div class=\"hidden no-item-fields\"><?php echo langHdl('no_custom_fields'); ?></div>\n                    </div>\n                    <!-- /.card-body -->\n                </div>\n            </div>\n        </div>\n    <?php\n    }\n    ?>\n\n    <div class=\"row hidden item-details-card item-card-attachments\">\n        <div class=\"col-12\">\n            <div class=\"card card-default collapsed\">\n                <div class=\"card-header bg-gray-dark\">\n                    <h3 class=\"card-title pointer\" data-toggle=\"collapse\" data-target=\"#card-item-attachments\">\n                        <i class=\"fas fa-paperclip mr-2\"></i><?php echo langHdl('attachments'); ?>\n                        <span class=\"badge badge-secondary ml-2\" id=\"card-item-attachments-badge\"></span>\n                    </h3>\n                </div>\n                <!-- /.card-header -->\n                <div class=\"card-body collapse clear-me-html\" id=\"card-item-attachments\">\n                </div>\n                <!-- /.card-body -->\n                <div class=\"overlay\">\n                    <i class=\"fas fa-refresh fa-spin\"></i>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-12\">\n            <div class=\"card card-default collapsed\">\n                <div class=\"card-header bg-gray-dark\">\n                    <h3 class=\"card-title pointer\" data-toggle=\"collapse\" data-target=\"#card-item-history\">\n                        <i class=\"fas fa-history mr-2\"></i><?php echo langHdl('history'); ?>\n                        <span class=\"badge badge-secondary ml-2\" id=\"card-item-history-badge\"></span>\n                    </h3>\n                    <!-- /.card-tools -->\n                </div>\n                <!-- /.card-header -->\n                <div class=\"card-body collapse\" id=\"card-item-history\">\n                </div>\n                <!-- /.card-body -->\n                <div class=\"overlay\">\n                    <i class=\"fas fa-refresh fa-spin\"></i>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <?php\n    if (isset($SETTINGS['enable_suggestion']) === true && (int) $SETTINGS['enable_suggestion'] === 1) {\n        /*\n            // TODO: NOT YET PORTED ?>\n        <div class=\"row hidden item-details-card\">\n            <div class=\"col-12\">\n                <div class=\"card card-default collapsed-card card-item-extra collapseme\">\n                    <div class=\"card-header bg-gray\">\n                        <h3 class=\"card-title pointer\" data-widget=\"collapse\">\n                            <i class=\"fas fa-random mr-2\"></i><?php echo langHdl('suggest_password_change'); ?>\n                        </h3>\n                        <!-- /.card-tools -->\n                    </div>\n                    <!-- /.card-header -->\n                    <div class=\"card-body collapse show\">\n                        <form id=\"form-item-suggestion\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                            <div class=\"alert alert-info\">\n                                <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                                <?php echo langHdl('suggestion_information'); ?>\n                            </div>\n                            <!-- LABEL -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('label'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-label\" type=\"text\" class=\"form-control form-item-control form-item-suggestion\" data-change-ongoing=\"\" data-field-name=\"label\">\n                            </div>\n                            <!-- DESCRIPTION -->\n                            <div class=\"mb-3\">\n                                <textarea id=\"form-item-suggestion-description\" class=\"form-item-control form-item-suggestion w-100 clear-me-html\" data-field-name=\"description\" data-change-ongoing=\"\"></textarea>\n                            </div>\n                            <!-- LOGIN -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('login'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-login\" type=\"text\" class=\"form-control form-item-control form-item-suggestion\" data-field-name=\"login\" data-change-ongoing=\"\">\n                            </div>\n                            <!-- PASSWORD -->\n                            <div class=\"input-group mb-0\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text p-1\"><div id=\"form-item-suggestion-password-strength\"></div></span>\n                                </div>\n                                <input id=\"form-item-suggestion-password\" type=\"password\" class=\"form-control form-item-control form-item-suggestion\" placeholder=\"<?php echo langHdl('password'); ?>\" data-field-name=\"pwd\" data-change-ongoing=\"\">\n                            </div>\n                            <input type=\"hidden\" id=\"form-item-suggestion-password-complex\" value=\"0\">\n                            <!-- EMAIL -->\n                            <div class=\"input-group mb-3 mt-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('email'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-email\" type=\"email\" class=\"form-control form-item-control form-item-suggestion\" data-field-name=\"email\" data-change-ongoing=\"\">\n                            </div>\n                            <!-- URL -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('url'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-url\" type=\"url\" class=\"form-control form-item-control form-item-suggestion\" data-field-name=\"url\" data-change-ongoing=\"\">\n                            </div>\n                            <!-- COMMENT -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('comment'); ?></span>\n                                </div>\n                                <textarea id=\"form-item-suggestion-comment\" class=\"form-control form-item-control form-item-suggestion\" rows=\"2\" data-field-name=\"comment\" data-change-ongoing=\"\"></textarea>\n                            </div>\n                        </form>\n                    </div>\n                    <!-- /.card-body -->\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-suggestion-perform\"><?php echo langHdl('perform'); ?></button>\n                    </div>\n                    <!-- /.card-footer -->\n                </div>\n            </div>\n        </div>\n        <?php\n        */\n    }\n    ?>\n\n    <!--\n        <div class=\"row hidden item-details-card\">\n            <div class=\"col-12\">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <button type=\"button\" class=\"btn btn-warning btn-copy-clipboard\"  id=\"card-item-otv-generate-button\"><?php echo langHdl('generate_otv_link'); ?></button>\n                    </div>\n                    <div class=\"input-group-prepend\">\n                        <button type=\"button\" class=\"btn btn-warning btn-copy-clipboard\"  id=\"card-item-otv-copy-button\"><?php echo langHdl('copy'); ?></button>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" placeholder=\"OTV link\" id=\"card-item-otv\">\n                </div>\n            </div>\n        </div>\n        -->\n\n    <!-- SERVER UPDATE --><?php\n                            if (DEBUG === true) {\n                                ?>\n        <div class=\"row hidden form-item-server form-item-action\">\n            <div class=\"col-12\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header bg-navy\">\n                        <h5>\n                            <i class=\"fas fa-server mr-2\"></i><?php echo langHdl('update_server_password'); ?>\n                        </h5>\n                        <!-- /.card-tools -->\n                    </div>\n                    <!-- /.card-header -->\n                    <div class=\"card-body\">\n                        <ul class=\"nav nav-tabs\" id=\"server-tab\">\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link active\" href=\"#tab-one-shot\" data-action=\"ssh-one-shot\" data-toggle=\"tab\"><?php echo langHdl('ssh_one_shot_change'); ?></a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" href=\"#tab-scheduled\" data-action=\"ssh-scheduled\" data-toggle=\"tab\"><?php echo langHdl('ssh_scheduled_change'); ?></a>\n                            </li>\n                        </ul>\n                        <div class=\"tab-content\" id=\"myTabContent\">\n                            <div class=\"tab-pane fade show active tab-pane\" id=\"tab-one-shot\">\n                                <div class=\"alert alert-info mt-3 form-text text-muted\">\n                                    <?php echo langHdl('auto_update_server_password_info'); ?>\n                                </div>\n                                <div class=\"input-group mb-3 mt-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('ssh_user'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-server-login\" type=\"text\" class=\"form-control form-item-control form-item-server\" data-field-name=\"login\" data-change-ongoing=\"\">\n                                </div>\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('ssh_pwd'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-server-old-password\" type=\"password\" class=\"form-control form-item-control form-item-server\" data-field-name=\"old-password\" data-change-ongoing=\"\">\n                                </div>\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('index_new_pw'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-server-password\" type=\"password\" class=\"form-control form-item-control form-item-server\" data-field-name=\"password\" data-change-ongoing=\"\">\n                                    <div class=\"input-group-append\">\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip password-generate\" title=\"<?php echo langHdl('pw_generate'); ?>\" data-id=\"form-item-server-password\"><i class=\"fas fa-random\"></i></button>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"tab-pane fade tab-pane\" id=\"tab-scheduled\">\n                                <div class=\"alert alert-info mt-3 form-text text-muted\">\n                                    <?php echo langHdl('ssh_password_frequency_change_info'); ?>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label><?php echo langHdl('ssh_password_frequency_change'); ?></label>\n                                    <select class=\"form-control form-item-control select2\" style=\"width:100%;\" id=\"form-item-server-cron-frequency\">\n                                        <option value=\"0\">0</option>\n                                        <option value=\"1\">1</option>\n                                        <option value=\"2\">2</option>\n                                        <option value=\"3\">3</option>\n                                        <option value=\"4\">4</option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div class=\"callout callout-alert mt-3 hidden\" id=\"form-item-server-status\">\n\n                            </div>\n                        </div>\n                    </div>\n                    <!-- /.card-body -->\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-server-perform\"><?php echo langHdl('perform'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    <?php\n                            } else {\n                                ?>\n        <!--\n            <div class=\"mt-4\">\n            <div class=\"alert alert-warning\">\n                <i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('not_yet_implemented'); ?>\n            </div>\n        </div>\n        -->\n    <?php\n                            }\n    ?>\n\n    <!-- Bottom bar -->\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-12\">\n            <div class=\"card\">\n                    <div class=\"card-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary but-navigate-item but-prev-item hidden\" data-prev-item-id=\"\"></button>\n                        <button type=\"button\" class=\"btn btn-secondary but-navigate-item but-next-item hidden\" data-next-item-id=\"\"></button>\n                        <button type=\"button\" class=\"btn btn-info float-right but-back\"><?php echo langHdl('close'); ?></button>\n                    </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- COPY ITEM FORM -->\n    <div class=\"row hidden form-item-copy form-item-action\">\n        <div class=\"col-12\">\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-copy mr-2\"></i><?php echo langHdl('copy_item'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('new_label'); ?></label>\n                        <input type=\"text\" class=\"form-control form-item-control\" id=\"form-item-copy-new-label\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_destination_folder'); ?></label>\n                        <select class=\"form-control form-item-control select2 no-root\" style=\"width:100%;\" id=\"form-item-copy-destination\"></select>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-copy-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- DELETE ITEM FORM -->\n    <div class=\"row hidden form-item-delete form-item-action\">\n        <div class=\"col-12\">\n\n            <div class=\"card card-warning\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-trash mr-2\"></i><?php echo langHdl('delete_item'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"alert alert-info alert-dismissible\">\n                        <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('warning'); ?></h5>\n                        <?php echo langHdl('delete_item_message'); ?>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-warning\" id=\"form-item-delete-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- SHARE ITEM FORM -->\n    <div class=\"row hidden form-item-share form-item-action\">\n        <div class=\"col-12\">\n            <form id=\"form-item-share\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-share-alt mr-2\"></i><?php echo langHdl('share_item'); ?></h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"callout callout-info\">\n                            <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                            <p><?php echo langHdl('share_item_message'); ?></p>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"form-item-share-email\"><?php echo langHdl('email_address'); ?></label>\n                            <input type=\"email\" class=\"form-control clear-me-val\" id=\"form-item-share-email\" placeholder=\"<?php echo langHdl('enter_email'); ?>\" required>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-share-perform\"><?php echo langHdl('perform'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n\n    <!-- NOTIFY ITEM FORM -->\n    <div class=\"row hidden form-item-notify form-item-action\">\n        <div class=\"col-12\">\n\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-bullhorn mr-2\"></i><?php echo langHdl('notification'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"callout callout-info\">\n                        <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                        <p><?php echo langHdl('notification_message'); ?></p>\n                    </div>\n                    <div class=\"form-group\">\n                        <input type=\"checkbox\" class=\"form-check-input form-item-control flat-blue\" id=\"form-item-notify-checkbox\"><label for=\"form-item-notify-checkbox\" class=\"ml-3\"><?php echo langHdl('notify_on_change'); ?></label>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-notify-perform\"><?php echo langHdl('confirm'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- OTV ITEM FORM -->\n    <div class=\"row hidden form-item-otv form-item-action\">\n        <div class=\"col-12\">\n\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"far fa-eye mr-2\"></i><?php echo langHdl('one_time_view'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"callout callout-info\">\n                        <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                        <p><?php\n                            echo str_replace(\n        ['##otv_expiration_period##', '. '],\n        ['<span class=\"text-bold text-primary\">' . $SETTINGS['otv_expiration_period'] . '</span>', '<br>'],\n        langHdl('otv_message')\n    );\n                            ?></p>\n                    </div>\n\n\n                    <div class=\"form-group\">\n                        <label for=\"form-item-otv-link\"><?php echo langHdl('otv_link'); ?></label>\n                        <div class=\"input-group mb-3\">\n                            <input type=\"text\" class=\"form-control clear-me-val\" id=\"form-item-otv-link\">\n                            <div class=\"input-group-prepend\">\n                                <button type=\"button\" class=\"btn btn-warning btn-copy-clipboard\" id=\"form-item-otv-copy-button\"><?php echo langHdl('copy'); ?></button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('close'); ?></button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- REQUEST ACCESS TO ITEM FORM -->\n    <div class=\"row hidden form-item-request-access form-item-action\">\n        <div class=\"col-12\">\n            <form id=\"form-item-request-access\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-handshake mr-2\"></i><?php echo langHdl('request_access'); ?></h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <h3 id=\"form-item-request-access-label\" class=\"mb-5\"></h3>\n                        <div class=\"callout callout-info\">\n                            <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                            <p><?php echo langHdl('request_access_message'); ?></p>\n                        </div>\n                        <textarea class=\"form-control mt-4\" rows=\"3\" placeholder=\"<?php echo langHdl('request_access_reason'); ?>\" id=\"form-item-request-access-reason\"></textarea>\n                    </div>\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-request-access-perform\"><?php echo langHdl('confirm'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n\n    <!-- ADD FOLDER FORM -->\n    <div class=\"row hidden form-folder-add form-folder-action\">\n        <div class=\"col-12\">\n            <form id=\"form-folder-add\" class=\"needs-validation\" novalidate onsubmit=\"return false;\" data-action=\"\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-plus mr-2\"></i><?php echo langHdl('add_folder'); ?></h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('label'); ?></label>\n                            <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-add-label\" required>\n                        </div>\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('select_folder_parent'); ?></label>\n                            <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-add-parent\" required></select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('complex_asked'); ?></label>\n                            <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-add-complexicity\" required>\n                                <?php\n                                foreach (TP_PW_COMPLEXITY as $key => $value) {\n                                    echo '<option value=\"' . $key . '\">' . $value[1] . '</option>';\n                                }\n                                ?>\n                            </select>\n                        </div>\n                        <!--\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('folder_creation_rights_strategy'); ?></label>\n                            <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-add-rights\" required>\n                                <option value=\"folder_creation_rights_as_user_groups\"><?php echo langHdl('folder_creation_rights_as_user_groups').' ('.langHdl('by_default').')'; ?></option>\n                                <option value=\"folder_creation_rights_as_folder_groups\"><?php echo langHdl('folder_creation_rights_as_folder_groups'); ?></option>\n                            </select>\n                        </div>\n                            -->\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('icon'); ?></label>\n                            <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-add-icon\">\n                            <small class='form-text text-muted'>\n                                <?php echo langHdl('fontawesome_icon_tip'); ?><a href=\"<?php echo FONTAWESOME_URL;?>\" target=\"_blank\"><i class=\"fas fa-external-link-alt ml-1\"></i></a>\n                            </small>\n                        </div>\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('icon_on_selection'); ?></label>\n                            <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-add-icon-selected\">\n                            <small class='form-text text-muted'>\n                                <?php echo langHdl('fontawesome_icon_tip'); ?><a href=\"<?php echo FONTAWESOME_URL;?>\" target=\"_blank\"><i class=\"fas fa-external-link-alt ml-1\"></i></a>\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-folder-add-perform\"><?php echo langHdl('perform'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n\n    <!-- DELETE FOLDER FORM -->\n    <div class=\"row hidden form-folder-delete form-folder-action\">\n        <div class=\"col-12\">\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-trash mr-2\"></i><?php echo langHdl('delete_folder'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_folder_to_delete'); ?></label>\n                        <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-delete-selection\" required></select>\n                    </div>\n                    <div class=\"form-check mb-3 alert alert-warning icheck-red\">\n                        <input type=\"checkbox\" class=\"form-check-input form-item-control flat-blue\" id=\"form-folder-confirm-delete\" required>\n                        <label class=\"form-check-label ml-3\" for=\"form-folder-confirm-delete\"><i class=\"fas fa-info fa-lg mr-2\"></i><?php echo langHdl('folder_delete_confirm'); ?></label>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-folder-delete-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- COPY FOLDER FORM -->\n    <div class=\"row hidden form-folder-copy form-folder-action\">\n        <div class=\"col-12\">\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-copy mr-2\"></i><?php echo langHdl('copy_folder'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('label'); ?></label>\n                        <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-copy-label\" required></select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_source_folder'); ?></label>\n                        <select class=\"form-control form-folder-control select2 no-root\" style=\"width:100%;\" id=\"form-folder-copy-source\" required></select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_destination_folder'); ?></label>\n                        <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-copy-destination\" required>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-folder-copy-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- EXPORT FORM -->\n    <div class=\"row hidden form-item-export form-item-action\">\n        <div class=\"col-12\">\n\n        </div>\n    </div>\n\n    <!-- OFFLINE FORM -->\n    <div class=\"row hidden form-item-offline form-item-action\">\n        <div class=\"col-12\">\n\n        </div>\n    </div>\n\n\n    <div class=\"row h-25\" id=\"folders-tree-card\">\n        <div class=\"col-md-5 column-left\">\n            <div class=\"card card-info card-outline\">\n                <div class=\"card-header\">\n                    <div class=\"row justify-content-end\">\n                        <div class=\"col-6\">\n                            <h3 class=\"card-title\"><i class=\"far fa-folder-open mr-2\">\n                                </i><span class=\"\"><?php echo langHdl('folders'); ?></span>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"btn-group float-right\">\n                                <button type=\"button\" class=\"btn btn-info btn-sm dropdown-toggle\" data-toggle=\"dropdown\">\n                                    <i class=\"fas fa-bars\"></i>\n                                    <span class=\"caret\"></span>\n                                </button>\n                                <div class=\"dropdown-menu\">\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"refresh\"><i class=\"fas fa-sync-alt fa-fw mr-2\"></i><?php echo langHdl('refresh'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"expand\"><i class=\"fas fa-expand fa-fw mr-2\"></i><?php echo langHdl('expand'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"collapse\"><i class=\"fas fa-compress fa-fw mr-2\"></i><?php echo langHdl('collapse'); ?></a>\n                                    <div class=\"dropdown-divider\"></div>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"add\"><i class=\"far fa-plus-square fa-fw mr-2\"></i><?php echo langHdl('add'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"edit\"><i class=\"far fa-edit fa-fw mr-2\"></i><?php echo langHdl('edit'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"copy\"><i class=\"far fa-copy fa-fw mr-2\"></i><?php echo langHdl('copy'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"delete\"><i class=\"far fa-trash-alt fa-fw mr-2\"></i><?php echo langHdl('delete'); ?></a>\n                                    <div class=\"dropdown-divider\"></div>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"\">\n                                        <div class=\"input-group input-group-sm\">\n                                            <input type=\"text\" class=\"form-control\" placeholder=\"<?php echo langHdl('find'); ?>\" id=\"jstree_search\">\n                                            <div class=\"input-group-append\">\n                                                <div class=\"btn btn-primary\">\n                                                    <i class=\"fas fa-search\"></i>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body p-0\" style=\"\">\n                    <!-- FOLDERS PLACE -->\n                    <div id=\"jstree\" style=\"overflow:auto;\"></div>\n                </div>\n            </div><!-- /.card -->\n        </div>\n        <!-- /.col-md-6 -->\n        <div class=\"col-md-7\">\n            <div class=\"card card-primary card-outline\" id=\"items-list-card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title w-100\">\n                        <div class=\"row\">\n                            <div class=\"col\">\n                                <div class=\"btn-group\" id=\"btn-new-item\">\n                                    <button type=\"button\" class=\"btn btn-primary btn-sm tp-action\" data-item-action=\"new\">\n                                        <i class=\"fas fa-plus mr-2\"></i><?php echo langHdl('new_item'); ?>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"col text-right\">\n                                <div class=\"input-group input-group-sm\">\n                                    <input type=\"text\" class=\"form-control\" placeholder=\"<?php echo langHdl('find'); ?>\" id=\"find_items\">\n                                    <div class=\"input-group-append\">\n                                        <div class=\"btn btn-primary\" id=\"find_items_button\">\n                                            <i class=\"fas fa-search\"></i>\n                                        </div>\n                                        <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                            <span class=\"sr-only\">Toggle Dropdown</span>\n                                        </button>\n                                        <div class=\"dropdown-menu\">\n                                            <div class=\"dropdown-item\">\n                                                <input type=\"checkbox\" class=\" mr-2\" id=\"limited-search\">\n                                                <label class=\"form-check-label\" for=\"limited-search\"><?php echo langHdl('limited_search'); ?></label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- /.card-tools -->\n                </div>\n                <!-- /.card-header -->\n                <div class=\"card-body p-1\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-truncated table-hover table-striped\" id=\"table_teampass_items_list\" style=\"width:100%;\">\n                            <tbody id=\"teampass_items_list\"></tbody>\n                        </table>\n                        <!-- /.table -->\n                    </div>\n\n                    <div class=\"form-group row justify-content-md-center\" id=\"info_teampass_items_list\">\n                        <div class=\"alert alert-info text-center col col-10\" role=\"alert\">\n                            <i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('please_select_a_folder'); ?></b>\n                        </div>\n                    </div>\n                    <!-- /.mail-box-messages -->\n                </div>\n                <!-- /.card-body -->\n                <div class=\"card-footer p-0\">\n                </div>\n            </div>\n            <!-- /. box -->\n        </div>\n    </div>\n    <!-- /.col -->\n\n</section>\n<!-- /.content -->\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      items.queries.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\n\nrequire_once 'SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] === false || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Do checks\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\n\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'items', $SETTINGS) === false) {\n    // Not allowed page\n    echo \"> \".$_SESSION['user_id'].\" < - > \".$_SESSION['key'].\" <\";\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n/*\n * Define Timezone\n*/\nif (isset($SETTINGS['timezone']) === true) {\n    date_default_timezone_set($SETTINGS['timezone']);\n} else {\n    date_default_timezone_set('UTC');\n}\n\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/language/' . $_SESSION['user']['user_language'] . '.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\nrequire_once 'main.functions.php';\n\n// Ensure Complexity levels are translated\nif (defined('TP_PW_COMPLEXITY') === false) {\n    define(\n        'TP_PW_COMPLEXITY',\n        array(\n            TP_PW_STRENGTH_1 => array(TP_PW_STRENGTH_1, langHdl('complex_level1'), 'fas fa-thermometer-empty text-danger'),\n            TP_PW_STRENGTH_2 => array(TP_PW_STRENGTH_2, langHdl('complex_level2'), 'fas fa-thermometer-quarter text-warning'),\n            TP_PW_STRENGTH_3 => array(TP_PW_STRENGTH_3, langHdl('complex_level3'), 'fas fa-thermometer-half text-warning'),\n            TP_PW_STRENGTH_4 => array(TP_PW_STRENGTH_4, langHdl('complex_level4'), 'fas fa-thermometer-three-quarters text-success'),\n            TP_PW_STRENGTH_5 => array(TP_PW_STRENGTH_5, langHdl('complex_level5'), 'fas fa-thermometer-full text-success'),\n        )\n    );\n}\n\n// Load AntiXSS\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-ascii-master/src/voku/helper/ASCII.php';\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-utf8-master/src/voku/helper/UTF8.php';\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n$antiXss = new voku\\helper\\AntiXSS();\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\nif (defined('DB_PASSWD_CLEAR') === false) {\n    define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n}\nDB::$host = DB_HOST;\nDB::$user = DB_USER;\nDB::$password = DB_PASSWD_CLEAR;\nDB::$dbName = DB_NAME;\nDB::$port = DB_PORT;\nDB::$encoding = DB_ENCODING;\nDB::$ssl = DB_SSL;\nDB::$connect_options = DB_CONNECT_OPTIONS;\n\n// Load Tree\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tree/NestedTree/NestedTree.php';\n$tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n\n\n// Prepare POST variables\n$data = [\n    'type' => isset($_POST['type']) === true ? $_POST['type'] : '',\n    'data' => isset($_POST['data']) === true ? $_POST['data'] : '',\n    'key' => isset($_POST['key']) === true ? $_POST['key'] : '',\n    'label' => isset($_POST['label']) === true ? $_POST['label'] : '',\n    'status' => isset($_POST['status']) === true ? $_POST['status'] : '',\n    'cat' => isset($_POST['cat']) === true ? $_POST['cat'] : '',\n    'receipt' => isset($_POST['receipt']) === true ? $_POST['receipt'] : '',\n    'itemId' => isset($_POST['item_id']) === true ? $_POST['item_id'] : '',\n    'folderId' => isset($_POST['folder_id']) === true ? $_POST['folder_id'] : '',\n    'id' => isset($_POST['id']) === true ? $_POST['id'] : '',\n    'destination' => isset($_POST['destination']) === true ? $_POST['destination'] : '',\n    'source' => isset($_POST['source']) === true ? $_POST['source'] : '',\n    'userId' => isset($_POST['user_id']) === true ? $_POST['user_id'] : '',\n    'getType' => isset($_GET['type']) === true ? $_GET['type'] : '',\n    'getTerm' => isset($_GET['term']) === true ? $_GET['term'] : '',\n    'option' => isset($_POST['option']) === true ? $_POST['option'] : '',\n    'fileSuffix' => isset($_POST['file_suffix']) === true ? $_POST['file_suffix'] : '',\n    'context' => isset($_POST['context']) === true ? $_POST['context'] : '',\n    'notifyType' => isset($_POST['notify_type']) === true ? $_POST['notify_type'] : '',\n    'timestamp' => isset($_POST['timestamp']) === true ? $_POST['timestamp'] : '',\n    'itemKey' => isset($_POST['item_key']) === true ? $_POST['item_key'] : '',\n];\n\n$filters = [\n    'type' => 'trim|escape',\n    'data' => 'trim|escape',\n    'key' => 'trim|escape',\n    'label' => 'trim|escape',\n    'status' => 'trim|escape',\n    'cat' => 'trim|escape',\n    'receipt' => 'trim|escape',\n    'itemId' => 'cast:integer',\n    'folderId' => 'cast:integer',\n    'id' => 'cast:integer',\n    'destination' => 'cast:integer',\n    'source' => 'cast:integer',\n    'userId' => 'cast:integer',\n    'getType' => 'trim|escape',\n    'getTerm' => 'trim|escape',\n    'option' => 'trim|escape',\n    'fileSuffix' => 'trim|escape',\n    'context' => 'trim|escape',\n    'notifyType' => 'trim|escape',\n    'timestamp' => 'cast:integer',\n    'itemKey' => 'trim|escape',\n];\n\n$inputData = dataSanitizer(\n    $data,\n    $filters,\n    $SETTINGS['cpassman_dir']\n);\n\n// Do asked action\nswitch ($inputData['type']) {\n    /*\n    * CASE\n    * creating a new ITEM\n    */\n    case 'new_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // init\n        $returnValues = array();\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        if (is_array($dataReceived) === true && count($dataReceived) > 0) {\n            // Prepare variables\n            $post_anyone_can_modify = filter_var($dataReceived['anyone_can_modify'], FILTER_SANITIZE_NUMBER_INT);\n            $post_complexity_level = filter_var($dataReceived['complexity_level'], FILTER_SANITIZE_NUMBER_INT);\n            $post_description = $antiXss->xss_clean($dataReceived['description']);\n            $post_diffusion_list = filter_var_array(\n                $dataReceived['diffusion_list'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_diffusion_list_names = filter_var_array(\n                $dataReceived['diffusion_list_names'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_EMAIL);\n            $post_fields = filter_var_array(\n                $dataReceived['fields'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $inputData['folderId'] = filter_var($dataReceived['folder'], FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_is_personal = filter_var($dataReceived['folder_is_personal'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['label'] = filter_var($dataReceived['label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_login = filter_var($dataReceived['login'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_password = htmlspecialchars_decode($dataReceived['pw']);\n            $post_restricted_to = filter_var(\n                $dataReceived['restricted_to'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_restricted_to = $post_restricted_to !== false ? json_decode($post_restricted_to) : '';\n            $post_restricted_to_roles = filter_var(\n                $dataReceived['restricted_to_roles'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_restricted_to_roles = $post_restricted_to_roles !== false ? json_decode($post_restricted_to_roles) : '';\n            $post_salt_key_set = isset($_SESSION['user']['session_psk']) === true\n                && empty($_SESSION['user']['session_psk']) === false ? '1' : '0';\n            $post_tags = htmlspecialchars_decode($dataReceived['tags']);\n            $post_template_id = filter_var($dataReceived['template_id'], FILTER_SANITIZE_NUMBER_INT);\n            $post_url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_URL);\n            $post_uploaded_file_id = filter_var($dataReceived['uploaded_file_id'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['userId'] = filter_var($dataReceived['user_id'], FILTER_SANITIZE_NUMBER_INT);\n            $post_to_be_deleted_after_date = filter_var($dataReceived['to_be_deleted_after_date'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_to_be_deleted_after_x_views = filter_var($dataReceived['to_be_deleted_after_x_views'], FILTER_SANITIZE_NUMBER_INT);\n            $post_fa_icon = filter_var(($dataReceived['fa_icon']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n            //-> DO A SET OF CHECKS\n            // Perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true\n                && (in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n                || $post_folder_is_personal !== 1)\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Is author authorized to create in this folder\n            if (count($_SESSION['list_folders_limited']) > 0) {\n                if (in_array($inputData['folderId'], array_keys($_SESSION['list_folders_limited'])) === false\n                    && in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n                    && in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n                ) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                        ),\n                        'encode'\n                    );\n                    break;\n                }\n            } else {\n                if (in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                        ),\n                        'encode'\n                    );\n                    break;\n                }\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if (\n                $_SESSION['user_read_only'] === true\n                && in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // is pwd empty?\n            if (\n                empty($post_password) === true\n                && isset($_SESSION['user']['create_item_without_password']) === true\n                && (int) $_SESSION['user']['create_item_without_password'] !== 1\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('password_cannot_be_empty'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Check length\n            if (strlen($post_password) > $SETTINGS['pwd_maximum_length']) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('password_too_long'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Need info in DB\n            // About special settings\n            $dataFolderSettings = DB::queryFirstRow(\n                'SELECT bloquer_creation, bloquer_modification, personal_folder\n                FROM ' . prefixTable('nested_tree') . ' \n                WHERE id = %i',\n                $inputData['folderId']\n            );\n            $itemInfos = [];\n            $itemInfos['personal_folder'] = $dataFolderSettings['personal_folder'];\n            if ((int) $itemInfos['personal_folder'] === 1) {\n                $itemInfos['no_complex_check_on_modification'] = 1;\n                $itemInfos['no_complex_check_on_creation'] = 1;\n            } else {\n                $itemInfos['no_complex_check_on_modification'] = (int) $dataFolderSettings['bloquer_modification'];\n                $itemInfos['no_complex_check_on_creation'] = (int) $dataFolderSettings['bloquer_creation'];\n            }\n\n            // Get folder complexity\n            $folderComplexity = DB::queryfirstrow(\n                'SELECT valeur\n                FROM ' . prefixTable('misc') . '\n                WHERE type = %s AND intitule = %i',\n                'complex',\n                $inputData['folderId']\n            );\n            $itemInfos['requested_folder_complexity'] = $folderComplexity !== null ? (int) $folderComplexity['valeur'] : 0;\n\n            // Check COMPLEXITY\n            if ($post_complexity_level < $itemInfos['requested_folder_complexity'] && $itemInfos['no_complex_check_on_creation'] === 0) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_security_level_not_reached'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // ./ END\n\n            // check if element doesn't already exist\n            $itemExists = 0;\n            $newID = '';\n            $data = DB::queryfirstrow(\n                'SELECT * FROM ' . prefixTable('items') . '\n                WHERE label = %s AND inactif = %i',\n                $inputData['label'],\n                0\n            );\n            $counter = DB::count();\n            if ($counter > 0) {\n                $itemExists = 1;\n            } else {\n                $itemExists = 0;\n            }\n\n            // Manage case where item is personal.\n            // In this case, duplication is allowed\n            if (\n                isset($SETTINGS['duplicate_item']) === true\n                && (int) $SETTINGS['duplicate_item'] === 0\n                && (int) $post_salt_key_set === 1\n                && isset($post_salt_key_set) === true\n                && (int) $post_folder_is_personal === 1\n                && isset($post_folder_is_personal) === true\n            ) {\n                $itemExists = 0;\n            }\n\n            if ((isset($SETTINGS['duplicate_item']) === true\n                    && (int) $SETTINGS['duplicate_item'] === 0\n                    && (int) $itemExists === 0)\n                || (isset($SETTINGS['duplicate_item']) === true\n                    && (int) $SETTINGS['duplicate_item'] === 1)\n            ) {\n                // Handle case where pw is empty\n                // if not allowed then warn user\n                if ((isset($_SESSION['user']['create_item_without_password']) === true\n                        && (int) $_SESSION['user']['create_item_without_password'] !== 1) ||\n                    empty($post_password) === false\n                ) {\n                    // NEW ENCRYPTION\n                    $cryptedStuff = doDataEncryption($post_password);\n                } else {\n                    $cryptedStuff['encrypted'] = '';\n                    $cryptedStuff['objectKey'] = '';\n                }\n\n                $post_password = $cryptedStuff['encrypted'];\n\n                // ADD item\n                DB::insert(\n                    prefixTable('items'),\n                    array(\n                        'label' => $inputData['label'],\n                        'description' => $post_description,\n                        'pw' => $post_password,\n                        'pw_iv' => '',\n                        'email' => $post_email,\n                        'url' => $post_url,\n                        'id_tree' => $inputData['folderId'],\n                        'login' => $post_login,\n                        'inactif' => 0,\n                        'restricted_to' => empty($post_restricted_to) === true ?\n                            '' : (is_array($post_restricted_to) === true ? implode(';', $post_restricted_to) : $post_restricted_to),\n                        'perso' => (isset($post_folder_is_personal) === true && (int) $post_folder_is_personal === 1) ?\n                            1 : 0,\n                        'anyone_can_modify' => (isset($post_anyone_can_modify) === true\n                            && $post_anyone_can_modify === 'on') ? 1 : 0,\n                        'complexity_level' => $post_complexity_level,\n                        'encryption_type' => 'teampass_aes',\n                        'fa_icon' => $post_fa_icon,\n                        'item_key' => uniqidReal(50),\n                    )\n                );\n                $newID = DB::insertId();\n\n                // Create sharekeys for users\n                storeUsersShareKey(\n                    prefixTable('sharekeys_items'),\n                    (int) $post_folder_is_personal,\n                    (int) $inputData['folderId'],\n                    (int) $newID,\n                    $cryptedStuff['objectKey'],\n                    $SETTINGS\n                );\n\n                // update fields\n                if (\n                    isset($SETTINGS['item_extra_fields']) === true\n                    && (int) $SETTINGS['item_extra_fields'] === 1\n                ) {\n                    foreach ($post_fields as $field) {\n                        if (empty($field['value']) === false) {\n                            // should we encrypt the data\n                            $dataTmp = DB::queryFirstRow(\n                                'SELECT encrypted_data\n                                FROM ' . prefixTable('categories') . '\n                                WHERE id = %i',\n                                $field['id']\n                            );\n\n                            // Should we encrypt the data\n                            if ((int) $dataTmp['encrypted_data'] === 1) {\n                                // Create sharekeys for users\n                                $cryptedStuff = doDataEncryption($field['value']);\n\n                                // Store value\n                                DB::insert(\n                                    prefixTable('categories_items'),\n                                    array(\n                                        'item_id' => $newID,\n                                        'field_id' => $field['id'],\n                                        'data' => $cryptedStuff['encrypted'],\n                                        'data_iv' => '',\n                                        'encryption_type' => TP_ENCRYPTION_NAME,\n                                    )\n                                );\n                                $newBojectId = DB::insertId();\n\n                                // Store key\n                                storeUsersShareKey(\n                                    prefixTable('sharekeys_fields'),\n                                    (int) $post_folder_is_personal,\n                                    (int) $inputData['folderId'],\n                                    (int) $newBojectId,\n                                    $cryptedStuff['objectKey'],\n                                    $SETTINGS\n                                );\n                            } else {\n                                // update value\n                                DB::insert(\n                                    prefixTable('categories_items'),\n                                    array(\n                                        'item_id' => $newID,\n                                        'field_id' => $field['id'],\n                                        'data' => $field['value'],\n                                        'data_iv' => '',\n                                        'encryption_type' => 'not_set',\n                                    )\n                                );\n                            }\n                        }\n                    }\n                }\n\n                // If template enable, is there a main one selected?\n                if (\n                    isset($SETTINGS['item_creation_templates']) === true\n                    && (int) $SETTINGS['item_creation_templates'] === 1\n                    && isset($post_template_id) === true\n                    && empty($post_template_id) === false\n                ) {\n                    DB::queryFirstRow(\n                        'SELECT *\n                        FROM ' . prefixTable('templates') . '\n                        WHERE item_id = %i',\n                        $newID\n                    );\n                    if (DB::count() === 0) {\n                        // store field text\n                        DB::insert(\n                            prefixTable('templates'),\n                            array(\n                                'item_id' => $newID,\n                                'category_id' => $post_template_id,\n                            )\n                        );\n                    } else {\n                        // Delete if empty\n                        if (empty($post_template_id) === true) {\n                            DB::delete(\n                                prefixTable('templates'),\n                                'item_id = %i',\n                                $newID\n                            );\n                        } else {\n                            // Update value\n                            DB::update(\n                                prefixTable('templates'),\n                                array(\n                                    'category_id' => $post_template_id,\n                                ),\n                                'item_id = %i',\n                                $newID\n                            );\n                        }\n                    }\n                }\n\n                // If automatic deletion asked\n                if (\n                    isset($SETTINGS['enable_delete_after_consultation']) === true\n                    && (int) $SETTINGS['enable_delete_after_consultation'] === 1\n                    && is_null($post_to_be_deleted_after_x_views) === false\n                    && is_null($post_to_be_deleted_after_date) === false\n                ) {\n                    if (\n                        empty($post_to_be_deleted_after_date) === false\n                        || $post_to_be_deleted_after_x_views > 0\n                    ) {\n                        // Automatic deletion to be added\n                        DB::insert(\n                            prefixTable('automatic_del'),\n                            array(\n                                'item_id' => $newID,\n                                'del_enabled' => 1,\n                                'del_type' => $post_to_be_deleted_after_x_views > 0 ? 1 : 2, //1 = numeric : 2 = date\n                                'del_value' => $post_to_be_deleted_after_x_views > 0 ? $post_to_be_deleted_after_x_views : dateToStamp($post_to_be_deleted_after_date, $SETTINGS['date_format']),\n                            )\n                        );\n                    }\n                }\n\n                // Get readable list of restriction\n                $listOfRestricted = $oldRestrictionList = '';\n                if (\n                    is_array($post_restricted_to) === true\n                    && count($post_restricted_to) > 0\n                    && isset($SETTINGS['restricted_to']) === true\n                    && (int) $SETTINGS['restricted_to'] === 1\n                ) {\n                    foreach ($post_restricted_to as $userRest) {\n                        if (empty($userRest) === false) {\n                            $dataTmp = DB::queryfirstrow('SELECT login FROM ' . prefixTable('users') . ' WHERE id= %i', $userRest);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['login'];\n                            } else {\n                                $listOfRestricted .= ';' . $dataTmp['login'];\n                            }\n                        }\n                    }\n                }\n                if (\n                    $post_restricted_to !== null\n                    && $data !== null\n                    && $data['restricted_to'] !== $post_restricted_to\n                    && (int) $SETTINGS['restricted_to'] === 1\n                ) {\n                    if (empty($data['restricted_to']) === false) {\n                        foreach (explode(';', $data['restricted_to']) as $userRest) {\n                            if (empty($userRest) === false) {\n                                $dataTmp = DB::queryfirstrow('SELECT login FROM ' . prefixTable('users') . ' WHERE id= ' . $userRest);\n                                if (empty($oldRestrictionList) === true) {\n                                    $oldRestrictionList = $dataTmp['login'];\n                                } else {\n                                    $oldRestrictionList .= ';' . $dataTmp['login'];\n                                }\n                            }\n                        }\n                    }\n                }\n                // Manage retriction_to_roles\n                if (\n                    is_array($post_restricted_to_roles) === true\n                    && count($post_restricted_to_roles) > 0\n                    && isset($SETTINGS['restricted_to_roles']) === true\n                    && (int) $SETTINGS['restricted_to_roles'] === 1\n                ) {\n                    // add roles for item\n                    if (\n                        is_array($post_restricted_to_roles) === true\n                        && count($post_restricted_to_roles) > 0\n                    ) {\n                        foreach ($post_restricted_to_roles as $role) {\n                            if (count($role) > 1) {\n                                $role = $role[1];\n                            } else {\n                                $role = $role[0];\n                            }\n                            DB::insert(\n                                prefixTable('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $inputData['itemId'],\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // log\n                logItems(\n                    $SETTINGS,\n                    (int) $newID,\n                    $inputData['label'],\n                    $_SESSION['user_id'],\n                    'at_creation',\n                    $_SESSION['login']\n                );\n\n                // Add tags\n                $tags = explode(' ', $post_tags);\n                foreach ($tags as $tag) {\n                    if (empty($tag) === false) {\n                        DB::insert(\n                            prefixTable('tags'),\n                            array(\n                                'item_id' => $newID,\n                                'tag' => strtolower($tag),\n                            )\n                        );\n                    }\n                }\n\n                // Check if any files have been added\n                if (empty($post_uploaded_file_id) === false) {\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('files') . '\n                        WHERE id_item = %s',\n                        $post_uploaded_file_id\n                    );\n                    foreach ($rows as $record) {\n                        // update item_id in files table\n                        DB::update(\n                            prefixTable('files'),\n                            array(\n                                'id_item' => $newID,\n                                'confirmed' => 1,\n                            ),\n                            'id=%i',\n                            $record['id']\n                        );\n                    }\n                }\n\n                // Announce by email?\n                if (empty($post_diffusion_list) === false) {\n                    // get links url\n                    if (empty($SETTINGS['email_server_url'])) {\n                        $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                    }\n\n                    // Get path\n                    $path = geItemReadablePath(\n                        (int) $inputData['folderId'],\n                        $label,\n                        $SETTINGS\n                    );\n\n                    // send email\n                    if (is_array($post_diffusion_list) === true && count($post_diffusion_list) > 0) {\n                        $cpt = 0;\n                        foreach ($post_diffusion_list as $emailAddress) {\n                            if (empty($emailAddress) === false) {\n                                prepareSendingEmail(\n                                    langHdl('email_subject_item_updated'),\n                                    str_replace(\n                                        array('#label', '#link'),\n                                            array($path, $SETTINGS['email_server_url'] . '/index.php?page=items&group=' . $inputData['folderId'] . '&id=' . $newID . $txt['email_body3']),\n                                            langHdl('new_item_email_body')\n                                    ),\n                                    $emailAddress,\n                                    $post_diffusion_list_names[$cpt],\n                                    $SETTINGS\n                                );\n                            }\n                            $cpt++;\n                        }\n                    }\n                }\n            } elseif (\n                isset($SETTINGS['duplicate_item']) === true\n                && (int) $SETTINGS['duplicate_item'] === 0\n                && (int) $itemExists === 1\n            ) {\n                // Encrypt data to return\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_item_exists'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Add item to CACHE table if new item has been created\n            if (isset($newID) === true) {\n                updateCacheTable(\n                    'add_value',\n                    $SETTINGS,\n                    (int) $newID\n                );\n            }\n\n            $arrData = array(\n                'error' => false,\n            );\n        } else {\n            // an error appears on JSON format\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('json_error_format'),\n                ),\n                'encode'\n            );\n        }\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $arrData,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * update an ITEM\n    */\n    case 'update_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // init\n        $returnValues = array();\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        if (is_array($dataReceived) === true && count($dataReceived) > 0) {\n            // Prepare variables\n            $itemInfos = array();\n            $inputData['label'] = filter_var($dataReceived['label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_URL);\n            $post_password = $original_pw = htmlspecialchars_decode($dataReceived['pw']);\n            $post_login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_tags = htmlspecialchars_decode($dataReceived['tags']);\n            $post_email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_EMAIL);\n            $post_template_id = (int) filter_var($dataReceived['template_id'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['itemId'] = (int) filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n            $post_anyone_can_modify = (int) filter_var($dataReceived['anyone_can_modify'], FILTER_SANITIZE_NUMBER_INT);\n            $post_complexity_level = (int) filter_var($dataReceived['complexity_level'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['folderId'] = (int) filter_var($dataReceived['folder'], FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_is_personal = (int) filter_var($dataReceived['folder_is_personal'], FILTER_SANITIZE_NUMBER_INT);\n            $post_restricted_to = filter_var_array(\n                $dataReceived['restricted_to'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_restricted_to_roles = filter_var_array(\n                $dataReceived['restricted_to_roles'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_diffusion_list = filter_var_array(\n                $dataReceived['diffusion_list'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_diffusion_list_names = filter_var_array(\n                $dataReceived['diffusion_list_names'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            //$post_diffusion_list_names = $post_diffusion_list_names !== false ? json_decode($post_diffusion_list_names) : '';\n            $post_to_be_deleted_after_x_views = filter_var(\n                $dataReceived['to_be_deleted_after_x_views'],\n                FILTER_SANITIZE_NUMBER_INT\n            );\n            $post_to_be_deleted_after_date = filter_var(\n                $dataReceived['to_be_deleted_after_date'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_fields = (filter_var_array(\n                $dataReceived['fields'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            ));\n            $post_description = $antiXss->xss_clean($dataReceived['description']);\n            $post_fa_icon = filter_var(($dataReceived['fa_icon']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n            //-> DO A SET OF CHECKS\n            // Perform a check in case of Read-Only user creating an item in his PF\n            if (\n                $_SESSION['user_read_only'] === true\n                && (in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n                    || $post_folder_is_personal !== 1)\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            $dataCheck = validateDataFields(prefixTable('items'), $dataReceived);\n            if ($dataCheck['state'] !== true) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_data_not_valid').' - '.langHdl('field').' '.strtoupper($dataCheck['field']).' '.langHdl('exceeds_maximum_length_of').' '.$dataCheck['maxLength'].' ('.$dataCheck['currentLength'].')',\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Check PWD EMPTY\n            if (\n                empty($pw) === true\n                && isset($_SESSION['user']['create_item_without_password']) === true\n                && (int) $_SESSION['user']['create_item_without_password'] !== 1\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_pw'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Need info in DB\n            // About special settings\n            $dataFolderSettings = DB::queryFirstRow(\n                'SELECT bloquer_creation, bloquer_modification, personal_folder, title\n                FROM ' . prefixTable('nested_tree') . ' \n                WHERE id = %i',\n                $inputData['folderId']\n            );\n            $itemInfos['personal_folder'] = (int) $dataFolderSettings['personal_folder'];\n            if ((int) $itemInfos['personal_folder'] === 1) {\n                $itemInfos['no_complex_check_on_modification'] = 1;\n                $itemInfos['no_complex_check_on_creation'] = 1;\n            } else {\n                $itemInfos['no_complex_check_on_modification'] = (int) $dataFolderSettings['bloquer_modification'];\n                $itemInfos['no_complex_check_on_creation'] = (int) $dataFolderSettings['bloquer_creation'];\n            }\n\n            // Get folder complexity\n            $folderComplexity = DB::queryfirstrow(\n                'SELECT valeur\n                FROM ' . prefixTable('misc') . '\n                WHERE type = %s AND intitule = %i',\n                'complex',\n                $inputData['folderId']\n            );\n            $itemInfos['requested_folder_complexity'] = is_null($folderComplexity) === false ? (int) $folderComplexity['valeur'] : 0;\n            // Check COMPLEXITY\n            if ($post_complexity_level < $itemInfos['requested_folder_complexity'] && $itemInfos['no_complex_check_on_modification'] === 0) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_security_level_not_reached'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Check length\n            if (strlen($post_password) > $SETTINGS['pwd_maximum_length']) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_pw_too_long'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // ./ END\n\n            // Init\n            $arrayOfChanges = array();\n\n            // Get all informations for this item\n            $dataItem = DB::queryfirstrow(\n                'SELECT *\n                FROM ' . prefixTable('items') . ' as i\n                INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n                WHERE i.id=%i AND l.action = %s',\n                $inputData['itemId'],\n                'at_creation'\n            );\n\n            // Does the user has the sharekey\n            //db::debugmode(true);\n            DB::query(\n                'SELECT *\n                FROM ' . prefixTable('sharekeys_items') . '\n                WHERE object_id = %i AND user_id = %s',\n                $inputData['itemId'],\n                $_SESSION['user_id']\n            );\n            if (DB::count() === 0) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n            if (in_array($_SESSION['user_id'], $restrictedTo) === true) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to']) === true) {\n                $restrictionActive = false;\n            }\n\n            if ((in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true\n                    && ((int) $dataItem['perso'] === 0\n                        || ((int) $dataItem['perso'] === 1\n                            //&& (int) $_SESSION['user_id'] === (int) $dataItem['id_user']))\n                        ))\n                    && $restrictionActive === false)\n                || (isset($SETTINGS['anyone_can_modify']) === true\n                    && (int) $SETTINGS['anyone_can_modify'] === 1\n                    && (int) $dataItem['anyone_can_modify'] === 1\n                    && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true\n                        || (int) $_SESSION['is_admin'] === 1)\n                    && $restrictionActive === false)\n                || (null !== $inputData['folderId']\n                    && isset($_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                    && in_array($inputData['id'], $_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                    && $restrictionActive === false)\n            ) {\n                // Get existing values\n                $data = DB::queryfirstrow(\n                    'SELECT i.id as id, i.label as label, i.description as description, i.pw as pw, i.url as url, i.id_tree as id_tree, i.perso as perso, i.login as login, \n                    i.inactif as inactif, i.restricted_to as restricted_to, i.anyone_can_modify as anyone_can_modify, i.email as email, i.notification as notification,\n                    u.login as user_login, u.email as user_email\n                    FROM ' . prefixTable('items') . ' as i\n                    INNER JOIN ' . prefixTable('log_items') . ' as l ON (i.id=l.id_item)\n                    INNER JOIN ' . prefixTable('users') . ' as u ON (u.id=l.id_user)\n                    WHERE i.id=%i',\n                    $inputData['itemId']\n                );\n\n                // Should we log a password change?\n                $userKey = DB::queryFirstRow(\n                    'SELECT share_key\n                    FROM ' . prefixTable('sharekeys_items') . '\n                    WHERE user_id = %i AND object_id = %i',\n                    $_SESSION['user_id'],\n                    $inputData['itemId']\n                );\n                if (DB::count() === 0 || empty($data['pw']) === true) {\n                    // No share key found\n                    $pw = '';\n                } else {\n                    $pw = base64_decode(doDataDecryption(\n                        $data['pw'],\n                        decryptUserObjectKey(\n                            $userKey['share_key'],\n                            $_SESSION['user']['private_key']\n                        )\n                    ));\n                }\n\n                if ($post_password !== $pw) {\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_pw',\n                        TP_ENCRYPTION_NAME\n                    );\n\n                    /*\n                    // send email if asked\n                    if (isKeyExistingAndEqual('enable_email_notification_on_user_pw_change', 1, $SETTINGS) === true) {\n                        prepareSendingEmail(\n                            langHdl('email_subject_item_updated'),\n                            str_replace(\n                                array('#label', '#link'),\n                                    array($path, $SETTINGS['email_server_url'] . '/index.php?page=items&group=' . $inputData['folderId'] . '&id=' . $newID . $txt['email_body3']),\n                                    langHdl('new_item_email_body')\n                            ),\n                            $emailAddress,\n                            $post_diffusion_list_names[$cpt],\n                            $SETTINGS\n                        );\n                    }\n                    */\n                }\n\n                // encrypt PW\n                if ((isset($_SESSION['user']['create_item_without_password']) === true\n                        && (int) $_SESSION['user']['create_item_without_password'] !== 1)\n                    || empty($post_password) === false\n                ) {\n                    //-----\n                    // NEW ENCRYPTION\n                    $cryptedStuff = doDataEncryption($post_password);\n\n                    $encrypted_password = $cryptedStuff['encrypted'];\n\n                    // Create sharekeys for users\n                    storeUsersShareKey(\n                        prefixTable('sharekeys_items'),\n                        (int) $post_folder_is_personal,\n                        (int) $inputData['folderId'],\n                        (int) $inputData['itemId'],\n                        $cryptedStuff['objectKey'],\n                        $SETTINGS\n                    );\n                } else {\n                    $encrypted_password = '';\n                }\n\n                // ---Manage tags\n                // Get list of tags\n                $itemTags = DB::queryFirstColumn(\n                    'SELECT tag\n                    FROM ' . prefixTable('tags') . '\n                    WHERE item_id = %i',\n                    $inputData['itemId']\n                );\n\n                // deleting existing tags for this item\n                DB::delete(\n                    prefixTable('tags'),\n                    'item_id = %i',\n                    $inputData['itemId']\n                );\n\n                // Add new tags\n                $postArrayTags = [];\n                if (empty($post_tags) === false) {\n                    $postArrayTags = explode(' ', $post_tags);\n                    foreach ($postArrayTags as $tag) {\n                        if (empty($tag) === false) {\n                        // save in DB\n                            DB::insert(\n                                prefixTable('tags'),\n                                array(\n                                    'item_id' => $inputData['itemId'],\n                                    'tag' => strtolower($tag),\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // Store LOG\n                if (count(array_diff($postArrayTags, $itemTags)) > 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        'tags'\n                    );\n\n                    // update LOG\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_tag : ' . implode(' ', $itemTags) . ' => ' . $post_tags\n                    );\n                }\n\n                // update item\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'label' => $inputData['label'],\n                        'description' => $post_description,\n                        'pw' => $encrypted_password,\n                        'email' => $post_email,\n                        'login' => $post_login,\n                        'url' => $post_url,\n                        'id_tree' => $inputData['folderId'],\n                        'restricted_to' => empty($post_restricted_to) === true || count($post_restricted_to) === 0 ? '' : implode(';', $post_restricted_to),\n                        'anyone_can_modify' => (int) $post_anyone_can_modify,\n                        'complexity_level' => (int) $post_complexity_level,\n                        'encryption_type' => TP_ENCRYPTION_NAME,\n                        'perso' => in_array($inputData['folderId'], $_SESSION['personal_folders']) === true ? 1 : 0,\n                        'fa_icon' => $post_fa_icon,\n                    ),\n                    'id=%i',\n                    $inputData['itemId']\n                );\n\n                // update fields\n                if (\n                    isset($SETTINGS['item_extra_fields']) === true\n                    && (int) $SETTINGS['item_extra_fields'] === 1\n                    && empty($post_fields) === false\n                ) {\n                    foreach ($post_fields as $field) {\n                        if (empty($field['value']) === false) {\n                            $dataTmpCat = DB::queryFirstRow(\n                                'SELECT c.id AS id, c.title AS title, i.data AS data, i.data_iv AS data_iv,\n                                i.encryption_type AS encryption_type, c.encrypted_data AS encrypted_data,\n                                c.masked AS masked, i.id AS field_item_id\n                                FROM ' . prefixTable('categories_items') . ' AS i\n                                INNER JOIN ' . prefixTable('categories') . ' AS c ON (i.field_id=c.id)\n                                WHERE i.field_id = %i AND i.item_id = %i',\n                                $field['id'],\n                                $inputData['itemId']\n                            );\n\n                            // store Field text in DB\n                            if (DB::count() === 0) {\n                                // The data for this foeld doesn't exist\n                                // It has to be added\n\n                                // Perform new query\n                                $dataTmpCat = DB::queryFirstRow(\n                                    'SELECT id, title, encrypted_data, masked\n                                    FROM ' . prefixTable('categories') . '\n                                    WHERE id = %i',\n                                    $field['id']\n                                );\n\n                                // store field text\n                                DB::insert(\n                                    prefixTable('categories_items'),\n                                    array(\n                                        'item_id' => $inputData['itemId'],\n                                        'field_id' => $field['id'],\n                                        'data' => $field['value'],\n                                        'data_iv' => '',\n                                        'encryption_type' => 'not_set',\n                                    )\n                                );\n\n                                $newId = DB::insertId();\n\n                                // Should we encrypt the data\n                                if ((int) $dataTmpCat['encrypted_data'] === 1) {\n                                    $cryptedStuff = doDataEncryption($field['value']);\n\n                                    // Create sharekeys for users\n                                    storeUsersShareKey(\n                                        prefixTable('sharekeys_fields'),\n                                        (int) $post_folder_is_personal,\n                                        (int) $inputData['folderId'],\n                                        (int) $newId,\n                                        $cryptedStuff['objectKey'],\n                                        $SETTINGS\n                                    );\n\n                                    // update value\n                                    DB::update(\n                                        prefixTable('categories_items'),\n                                        array(\n                                            'data' => $cryptedStuff['encrypted'],\n                                            'data_iv' => '',\n                                            'encryption_type' => TP_ENCRYPTION_NAME,\n                                        ),\n                                        'id = %i',\n                                        $newId\n                                    );\n                                } else {\n                                    // update value\n                                    DB::update(\n                                        prefixTable('categories_items'),\n                                        array(\n                                            'data' => $field['value'],\n                                            'data_iv' => '',\n                                            'encryption_type' => 'not_set',\n                                        ),\n                                        'id = %i',\n                                        $newId\n                                    );\n                                }\n\n                                // Store updates performed\n                                array_push(\n                                    $arrayOfChanges,\n                                    $dataTmpCat['title']\n                                );\n\n                                // update LOG\n                                logItems(\n                                    $SETTINGS,\n                                    (int) $inputData['itemId'],\n                                    $inputData['label'],\n                                    $_SESSION['user_id'],\n                                    'at_modification',\n                                    $_SESSION['login'],\n                                    'at_field : ' . $dataTmpCat['title'] . ' : ' . $field['value']\n                                );\n                            } else {\n                                // compare the old and new value\n                                if ($dataTmpCat['encryption_type'] !== 'not_set') {\n                                    // Get user sharekey for this field\n                                    $userKey = DB::queryFirstRow(\n                                        'SELECT share_key\n                                        FROM ' . prefixTable('sharekeys_fields') . '\n                                        WHERE user_id = %i AND object_id = %i',\n                                        $_SESSION['user_id'],\n                                        $dataTmpCat['field_item_id']\n                                    );\n\n                                    // Decrypt the current value\n                                    $oldVal = base64_decode(doDataDecryption(\n                                        $dataTmpCat['data'],\n                                        decryptUserObjectKey(\n                                            $userKey['share_key'],\n                                            $_SESSION['user']['private_key']\n                                        )\n                                    ));\n                                } else {\n                                    $oldVal = $dataTmpCat['data'];\n                                }\n\n                                // Compare both values to see if any change was done\n                                if ($field['value'] !== $oldVal) {\n                                    // The strings are different\n                                    $encrypt = [];\n\n                                    // Should we encrypt the data\n                                    if ((int) $dataTmpCat['encrypted_data'] === 1) {\n                                        $cryptedStuff = doDataEncryption($field['value']);\n                                        $encrypt['string'] = $cryptedStuff['encrypted'];\n                                        $encrypt['type'] = TP_ENCRYPTION_NAME;\n\n                                        // Create sharekeys for users\n                                        storeUsersShareKey(\n                                            prefixTable('sharekeys_fields'),\n                                            (int) $post_folder_is_personal,\n                                            (int) $inputData['folderId'],\n                                            (int) $dataTmpCat['field_item_id'],\n                                            $cryptedStuff['objectKey'],\n                                            $SETTINGS\n                                        );\n                                    } else {\n                                        $encrypt['string'] = $field['value'];\n                                        $encrypt['type'] = 'not_set';\n                                    }\n\n                                    // update value\n                                    DB::update(\n                                        prefixTable('categories_items'),\n                                        array(\n                                            'data' => $encrypt['string'],\n                                            'data_iv' => '',\n                                            'encryption_type' => $encrypt['type'],\n                                        ),\n                                        'item_id = %i AND field_id = %i',\n                                        $inputData['itemId'],\n                                        $field['id']\n                                    );\n\n                                    // Store updates performed\n                                    array_push(\n                                        $arrayOfChanges,\n                                        $dataTmpCat['title']\n                                    );\n\n                                    // update LOG\n                                    logItems(\n                                        $SETTINGS,\n                                        (int) $inputData['itemId'],\n                                        $inputData['label'],\n                                        $_SESSION['user_id'],\n                                        'at_modification',\n                                        $_SESSION['login'],\n                                        'at_field : ' . $dataTmpCat['title'] . ' => ' . $oldVal\n                                    );\n                                }\n                            }\n                        } else {\n                            if (empty($field_data[1]) === true) {\n                                DB::delete(\n                                    prefixTable('categories_items'),\n                                    'item_id = %i AND field_id = %s',\n                                    $inputData['itemId'],\n                                    $field['id']\n                                );\n                            }\n                        }\n                    }\n                }\n\n                // If template enable, is there a main one selected?\n                if (\n                    isset($SETTINGS['item_creation_templates']) === true\n                    && (int) $SETTINGS['item_creation_templates'] === 1\n                    && isset($post_template_id) === true\n                ) {\n                    DB::queryFirstRow(\n                        'SELECT *\n                        FROM ' . prefixTable('templates') . '\n                        WHERE item_id = %i',\n                        $inputData['itemId']\n                    );\n                    if (DB::count() === 0 && empty($post_template_id) === false) {\n                        // store field text\n                        DB::insert(\n                            prefixTable('templates'),\n                            array(\n                                'item_id' => $inputData['itemId'],\n                                'category_id' => $post_template_id,\n                            )\n                        );\n                    } else {\n                        // Delete if empty\n                        if (empty($post_template_id) === true) {\n                            DB::delete(\n                                prefixTable('templates'),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n                        } else {\n                            // Update value\n                            DB::update(\n                                prefixTable('templates'),\n                                array(\n                                    'category_id' => $post_template_id,\n                                ),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n                        }\n                    }\n                }\n\n                // Update automatic deletion - Only by the creator of the Item\n                if (\n                    isset($SETTINGS['enable_delete_after_consultation']) === true\n                    && (int) $SETTINGS['enable_delete_after_consultation'] === 1\n                ) {\n                    // check if elem exists in Table. If not add it or update it.\n                    DB::query(\n                        'SELECT *\n                        FROM ' . prefixTable('automatic_del') . '\n                        WHERE item_id = %i',\n                        $inputData['itemId']\n                    );\n\n                    if (DB::count() === 0) {\n                        // No automatic deletion for this item\n                        if (\n                            empty($post_to_be_deleted_after_date) === false\n                            || (int) $post_to_be_deleted_after_x_views > 0\n                        ) {\n                            // Automatic deletion to be added\n                            DB::insert(\n                                prefixTable('automatic_del'),\n                                array(\n                                    'item_id' => $inputData['itemId'],\n                                    'del_enabled' => 1,\n                                    'del_type' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        1 : 2, //1 = numeric : 2 = date\n                                    'del_value' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        (int) $post_to_be_deleted_after_x_views : dateToStamp($post_to_be_deleted_after_date, $SETTINGS['date_format']),\n                                )\n                            );\n\n                            // Store updates performed\n                            array_push(\n                                $arrayOfChanges,\n                                langHdl('automatic_deletion_engaged') . ': ' . langHdl('enabled')\n                            );\n\n                            // update LOG\n                            logItems(\n                                $SETTINGS,\n                                (int) $inputData['itemId'],\n                                $inputData['label'],\n                                $_SESSION['user_id'],\n                                'at_modification',\n                                $_SESSION['login'],\n                                'at_automatic_del : enabled'\n                            );\n                        }\n                    } else {\n                        // Automatic deletion exists for this item\n                        if (\n                            empty($post_to_be_deleted_after_date) === false\n                            || (int) $post_to_be_deleted_after_x_views > 0\n                        ) {\n                            // Update automatic deletion\n                            DB::update(\n                                prefixTable('automatic_del'),\n                                array(\n                                    'del_type' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        1 : 2, //1 = numeric : 2 = date\n                                    'del_value' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        $post_to_be_deleted_after_x_views : dateToStamp($post_to_be_deleted_after_date, $SETTINGS['date_format']),\n                                ),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n                        } else {\n                            // delete automatic deleteion for this item\n                            DB::delete(\n                                prefixTable('automatic_del'),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n\n                            // Store updates performed\n                            array_push(\n                                $arrayOfChanges,\n                                langHdl('automatic_deletion_engaged') . ': ' . langHdl('disabled')\n                            );\n\n                            // update LOG\n                            logItems(\n                                $SETTINGS,\n                                (int) $inputData['itemId'],\n                                $inputData['label'],\n                                $_SESSION['user_id'],\n                                'at_modification',\n                                $_SESSION['login'],\n                                'at_automatic_del : disabled'\n                            );\n                        }\n                    }\n                }\n\n                // get readable list of restriction\n                $listOfRestricted = $oldRestrictionList = '';\n                $arrayOfUsersRestriction = array();\n                $arrayOfUsersIdRestriction = array();\n                $diffUsersRestiction = array();\n                $diffRolesRestiction = array();\n                if (\n                    is_array($post_restricted_to) === true\n                    && count($post_restricted_to) > 0\n                    && isset($SETTINGS['restricted_to']) === true\n                    && (int) $SETTINGS['restricted_to'] === 1\n                ) {\n                    foreach ($post_restricted_to as $userId) {\n                        if (empty($userId) === false) {\n                            $dataTmp = DB::queryfirstrow(\n                                'SELECT id, name, lastname\n                                FROM ' . prefixTable('users') . '\n                                WHERE id= %i',\n                                $userId\n                            );\n\n                            // Add to array\n                            array_push(\n                                $arrayOfUsersRestriction,\n                                $dataTmp['name'] . ' ' . $dataTmp['lastname']\n                            );\n                            array_push(\n                                $arrayOfUsersIdRestriction,\n                                $dataTmp['id']\n                            );\n                        }\n                    }\n                }\n                if ((int) $SETTINGS['restricted_to'] === 1) {\n                    $diffUsersRestiction = array_diff(\n                        empty($data['restricted_to']) === false ?\n                            explode(';', $data['restricted_to']) : array(),\n                        $arrayOfUsersIdRestriction\n                    );\n                }\n\n                // Manage retriction_to_roles\n                if (\n                    is_array($post_restricted_to_roles) === true\n                    && count($post_restricted_to_roles) > 0\n                    && isset($SETTINGS['restricted_to_roles']) === true\n                    && (int) $SETTINGS['restricted_to_roles'] === 1\n                ) {\n                    // Init\n                    $arrayOfRestrictionRolesOld = array();\n                    $arrayOfRestrictionRoles = array();\n\n                    // get values before deleting them\n                    $rows = DB::query(\n                        'SELECT t.title, t.id AS id\n                        FROM ' . prefixTable('roles_title') . ' as t\n                        INNER JOIN ' . prefixTable('restriction_to_roles') . ' as r ON (t.id=r.role_id)\n                        WHERE r.item_id = %i\n                        ORDER BY t.title ASC',\n                        $inputData['itemId']\n                    );\n                    foreach ($rows as $record) {\n                        // Add to array\n                        array_push(\n                            $arrayOfRestrictionRolesOld,\n                            $record['title']\n                        );\n                    }\n                    // delete previous values\n                    DB::delete(\n                        prefixTable('restriction_to_roles'),\n                        'item_id = %i',\n                        $inputData['itemId']\n                    );\n\n                    // add roles for item\n                    if (\n                        is_array($post_restricted_to_roles) === true\n                        && count($post_restricted_to_roles) > 0\n                    ) {\n                        foreach ($post_restricted_to_roles as $role) {\n                            DB::insert(\n                                prefixTable('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $inputData['itemId'],\n                                )\n                            );\n                            $dataTmp = DB::queryfirstrow(\n                                'SELECT title\n                                FROM ' . prefixTable('roles_title') . '\n                                WHERE id = %i',\n                                $role\n                            );\n\n                            // Add to array\n                            array_push(\n                                $arrayOfRestrictionRoles,\n                                $dataTmp['title']\n                            );\n                        }\n\n                        if ((int) $SETTINGS['restricted_to'] === 1) {\n                            $diffRolesRestiction = array_diff(\n                                $arrayOfRestrictionRoles,\n                                $arrayOfRestrictionRolesOld\n                            );\n                        }\n                    }\n                }\n                // Update CACHE table\n                updateCacheTable('update_value', $SETTINGS, (int) $inputData['itemId']);\n\n                //---- Log all modifications done ----\n\n                // RESTRICTIONS\n                if (count($diffRolesRestiction) > 0 || count($diffUsersRestiction) > 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_restriction')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_restriction : ' . (count($diffUsersRestiction) > 0 ?\n                            implode(', ', $arrayOfUsersRestriction) . (count($diffRolesRestiction) > 0 ? ', ' : '') : '') . (count($diffRolesRestiction) > 0 ? implode(', ', $arrayOfRestrictionRoles) : '')\n                    );\n                }\n\n                // LABEL\n                if ($data['label'] !== $inputData['label']) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_label')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_label : ' . $data['label'] . ' => ' . $inputData['label']\n                    );\n                }\n                // LOGIN\n                if ($data['login'] !== $post_login) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_login')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_login : ' . $data['login'] . ' => ' . $post_login\n                    );\n                }\n                // EMAIL\n                if ($post_email !== null && $data['email'] !== null && strcmp($data['email'], $post_email) !== 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_email')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_email : ' . $data['email'] . ' => ' . $post_email\n                    );\n                }\n                // URL\n                if ($data['url'] !== $post_url && $post_url !== 'http://') {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_url')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_url : ' . $data['url'] . ' => ' . $post_url\n                    );\n                }\n                // DESCRIPTION\n                if (strcmp(md5($data['description']), md5($post_description)) !== 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_description')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_description'\n                    );\n                }\n                // FOLDER\n                if ((int) $data['id_tree'] !== (int) $inputData['folderId']) {\n                    // Get name of folders\n                    $dataTmp = DB::query('SELECT title FROM ' . prefixTable('nested_tree') . ' WHERE id IN %li', array($data['id_tree'], $inputData['folderId']));\n\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_category')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_category : ' . $dataTmp[0]['title'] . ' => ' . $dataTmp[1]['title']\n                    );\n                }\n                // ANYONE_CAN_MODIFY\n                if ((int) $post_anyone_can_modify !== (int) $data['anyone_can_modify']) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_anyoneconmodify') . ': ' . ((int) $post_anyone_can_modify === 0 ? langHdl('disabled') : langHdl('enabled'))\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_anyoneconmodify : ' . ((int) $post_anyone_can_modify === 0 ? 'disabled' : 'enabled')\n                    );\n                }\n\n                // Reload new values\n                $dataItem = DB::queryfirstrow(\n                    'SELECT *\n                    FROM ' . prefixTable('items') . ' as i\n                    INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n                    WHERE i.id = %i AND l.action = %s',\n                    $inputData['itemId'],\n                    'at_creation'\n                );\n                // Reload History\n                $history = '';\n                $rows = DB::query(\n                    'SELECT l.date as date, l.action as action, l.raison as raison, u.login as login\n                    FROM ' . prefixTable('log_items') . ' as l\n                    LEFT JOIN ' . prefixTable('users') . ' as u ON (l.id_user=u.id)\n                    WHERE l.action <> %s AND id_item=%s',\n                    'at_shown',\n                    $inputData['itemId']\n                );\n                foreach ($rows as $record) {\n                    if ($record['raison'] === NULL) continue;\n                    $reason = explode(':', $record['raison']);\n                    if (count($reason) > 0) {\n                        $sentence = date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], (int) $record['date']) . ' - '\n                            . $record['login'] . ' - ' . langHdl($record['action']) . ' - '\n                            . (empty($record['raison']) === false ? (count($reason) > 1 ? langHdl(trim($reason[0])) . ' : ' . $reason[1]\n                                : langHdl(trim($reason[0]))) : '');\n                        if (empty($history)) {\n                            $history = $sentence;\n                        } else {\n                            $history .= '<br />' . $sentence;\n                        }\n                    }\n                }\n\n                // generate 2d key\n                $_SESSION['key_tmp'] = bin2hex(GenerateCryptKey(16, false, true, true, false, true, $SETTINGS));\n\n                // Send email\n                if (is_array($post_diffusion_list) === true && count($post_diffusion_list) > 0) {\n                    $cpt = 0;\n                    foreach ($post_diffusion_list as $emailAddress) {\n                        if (empty($emailAddress) === false) {\n                            prepareSendingEmail(\n                                langHdl('email_subject_item_updated'),\n                                str_replace(\n                                    array('#item_label#', '#item_category#', '#item_id#', '#url#', '#name#', '#lastname#', '#folder_name#'),\n                                    array($inputData['label'], $inputData['folderId'], $inputData['itemId'], $SETTINGS['cpassman_url'], $_SESSION['name'], $_SESSION['lastname'], $dataFolderSettings['title']),\n                                    langHdl('email_body_item_updated')\n                                ),\n                                $emailAddress,\n                                $post_diffusion_list_names[$cpt],\n                                $SETTINGS\n                            );\n                            $cpt++;\n                        }\n                    }\n                }\n\n                // Notifiy changes to the users\n                notifyChangesToSubscribers($inputData['itemId'], $inputData['label'], $arrayOfChanges, $SETTINGS);\n\n                // Prepare some stuff to return\n                $arrData = array(\n                    'error' => false,\n                    'message' => '',\n                );\n            } else {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_edit_item'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n        } else {\n            // an error appears on JSON format\n            $arrData = array(\n                'error' => true,\n                'message' => 'ERR_JSON_FORMAT',\n            );\n        }\n        // return data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $arrData,\n            'encode'\n        );\n        break;\n\n        /*\n        * CASE\n        * Copy an Item\n    */\n    case 'copy_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Prepare POST variables\n        $post_new_label = (string) filter_var($dataReceived['new_label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $post_source_id = (int) filter_var($dataReceived['source_id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_dest_id = (int) filter_var($dataReceived['dest_id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // perform a check in case of Read-Only user creating an item in his PF\n        if (\n            (int) $_SESSION['user_read_only'] === 1\n            && (in_array($post_source_id, $_SESSION['personal_folders']) === false\n                || in_array($post_dest_id, $_SESSION['personal_folders']) === false)\n        ) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Init\n        $returnValues = '';\n        $pw = '';\n        $is_perso = 0;\n\n        if (\n            empty($inputData['itemId']) === false\n            && empty($post_dest_id) === false\n        ) {\n            // load the original record into an array\n            $originalRecord = DB::queryfirstrow(\n                'SELECT * FROM ' . prefixTable('items') . '\n                WHERE id = %i',\n                $inputData['itemId']\n            );\n\n            // Check if the folder where this item is accessible to the user\n            if (in_array($originalRecord['id_tree'], $_SESSION['groupes_visibles']) === false) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Load the destination folder record into an array\n            $dataDestination = DB::queryfirstrow(\n                'SELECT personal_folder FROM ' . prefixTable('nested_tree') . '\n                WHERE id = %i',\n                $post_dest_id\n            );\n\n            // Get the ITEM object key for the user\n            $userKey = DB::queryFirstRow(\n                'SELECT share_key\n                FROM ' . prefixTable('sharekeys_items') . '\n                WHERE user_id = %i AND object_id = %i',\n                $_SESSION['user_id'],\n                $inputData['itemId']\n            );\n            if (DB::count() === 0) {\n                // ERROR - No sharekey found for this item and user\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Decrypt / Encrypt the password\n            $cryptedStuff = doDataEncryption(\n                base64_decode(\n                    doDataDecryption(\n                        $originalRecord['pw'],\n                        decryptUserObjectKey(\n                            $userKey['share_key'],\n                            $_SESSION['user']['private_key']\n                        )\n                    )\n                )\n            );\n            // reaffect pw\n            $originalRecord['pw'] = $cryptedStuff['encrypted'];\n\n            // generate the query to update the new record with the previous values\n            $aSet = array();\n            foreach ($originalRecord as $key => $value) {\n                if ($key === 'id_tree') {\n                    $aSet['id_tree'] = $post_dest_id;\n                } elseif ($key === 'label') {\n                    $aSet[$key] = $post_new_label;\n                } elseif ($key === 'viewed_no') {\n                    $aSet['viewed_no'] = '0';\n                } elseif ($key === 'pw' && empty($pw) === false) {\n                    $aSet['pw'] = $originalRecord['pw'];\n                    $aSet['pw_iv'] = '';\n                } elseif ($key === 'perso') {\n                    $aSet['perso'] = $is_perso;\n                } elseif ($key !== 'id' && $key !== 'key') {\n                    $aSet[$key] = $value;\n                }\n            }\n\n            // insert the new record and get the new auto_increment id\n            DB::insert(\n                prefixTable('items'),\n                $aSet\n            );\n            $newItemId = DB::insertId();\n\n            // Create sharekeys for users of this new ITEM\n            storeUsersShareKey(\n                prefixTable('sharekeys_items'),\n                (int) $dataDestination['personal_folder'],\n                (int) $post_dest_id,\n                (int) $newItemId,\n                $cryptedStuff['objectKey'],\n                $SETTINGS\n            );\n\n            // --------------------\n            // Manage Custom Fields\n            $rows = DB::query(\n                'SELECT *\n                FROM ' . prefixTable('categories_items') . '\n                WHERE item_id = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $field) {\n                // Create the entry for the new item\n\n                // Is the data encrypted\n                if ((int) $field['encryption_type'] === TP_ENCRYPTION_NAME) {\n                    $cryptedStuff = doDataEncryption($field['value']);\n                }\n\n                // store field text\n                DB::insert(\n                    prefixTable('categories_items'),\n                    array(\n                        'item_id' => $newItemId,\n                        'field_id' => $field['field_id'],\n                        'data' => (int) $field['encryption_type'] === TP_ENCRYPTION_NAME ?\n                            $cryptedStuff['encrypted'] : $field['data'],\n                        'data_iv' => '',\n                        'encryption_type' => (int) $field['encryption_type'] === TP_ENCRYPTION_NAME ?\n                            TP_ENCRYPTION_NAME : 'not_set',\n                    )\n                );\n                $newFieldId = DB::insertId();\n\n                // Create sharekeys for users\n                if ((int) $field['encryption_type'] === TP_ENCRYPTION_NAME) {\n                    storeUsersShareKey(\n                        prefixTable('sharekeys_fields'),\n                        (int) $dataDestination['personal_folder'],\n                        (int) $post_dest_id,\n                        (int) $newFieldId,\n                        $cryptedStuff['objectKey'],\n                        $SETTINGS\n                    );\n                }\n            }\n            // <---\n\n            // ------------------\n            // Manage attachments\n\n            // get file key\n            $rows = DB::query(\n                'SELECT f.id AS id, f.file AS file, f.name AS name, f.status AS status, f.extension AS extension,\n                f.size AS size, f.type AS type, s.share_key AS share_key\n                FROM ' . prefixTable('files') . ' AS f\n                INNER JOIN ' . prefixTable('sharekeys_files') . ' AS s ON (f.id = s.object_id)\n                WHERE s.user_id = %i AND f.id_item = %i',\n                $_SESSION['user_id'],\n                $inputData['itemId']\n            );\n            foreach ($rows as $record) {\n                // Check if file still exists\n                if (file_exists($SETTINGS['path_to_upload_folder'] . DIRECTORY_SEPARATOR . TP_FILE_PREFIX . base64_decode($record['file'])) === true) {\n                    // Step1 - decrypt the file\n                    $fileContent = decryptFile(\n                        $record['file'],\n                        $SETTINGS['path_to_upload_folder'],\n                        decryptUserObjectKey($record['share_key'], $_SESSION['user']['private_key'])\n                    );\n\n                    // Step2 - create file\n                    $newFileName = md5(time() . '_' . $record['id']) . '.' . $record['extension'];\n                    $outstream = fopen($SETTINGS['path_to_upload_folder'] . DIRECTORY_SEPARATOR . $newFileName, 'ab');\n                    if ($outstream === false) {\n                        echo prepareExchangedData(\n                            $SETTINGS['cpassman_dir'],\n                            array(\n                                'error' => true,\n                                'message' => langHdl('error_cannot_open_file'),\n                            ),\n                            'encode'\n                        );\n                        break;\n                    }\n                    fwrite(\n                        $outstream,\n                        base64_decode($fileContent)\n                    );\n\n                    // Step3 - encrypt the file\n                    $newFile = encryptFile($newFileName, $SETTINGS['path_to_upload_folder']);\n\n                    // Step4 - store in database\n                    DB::insert(\n                        prefixTable('files'),\n                        array(\n                            'id_item' => $newItemId,\n                            'name' => $record['name'],\n                            'size' => $record['size'],\n                            'extension' => $record['extension'],\n                            'type' => $record['type'],\n                            'file' => $newFile['fileHash'],\n                            'status' => TP_ENCRYPTION_NAME,\n                            'confirmed' => 1,\n                        )\n                    );\n                    $newFileId = DB::insertId();\n\n                    // Step5 - create sharekeys\n                    storeUsersShareKey(\n                        prefixTable('sharekeys_files'),\n                        (int) $dataDestination['personal_folder'],\n                        (int) $post_dest_id,\n                        (int) $newFileId,\n                        $newFile['objectKey'],\n                        $SETTINGS\n                    );\n                }\n            }\n            // <---\n\n            // -------------------------\n            // Add specific restrictions\n            $rows = DB::query('SELECT * FROM ' . prefixTable('restriction_to_roles') . ' WHERE item_id = %i', $inputData['itemId']);\n            foreach ($rows as $record) {\n                DB::insert(\n                    prefixTable('restriction_to_roles'),\n                    array(\n                        'item_id' => $newItemId,\n                        'role_id' => $record['role_id'],\n                    )\n                );\n            }\n\n            // Add Tags\n            $rows = DB::query('SELECT * FROM ' . prefixTable('tags') . ' WHERE item_id = %i', $inputData['itemId']);\n            foreach ($rows as $record) {\n                DB::insert(\n                    prefixTable('tags'),\n                    array(\n                        'item_id' => $newItemId,\n                        'tag' => $record['tag'],\n                    )\n                );\n            }\n\n            // Add this duplicate in logs\n            logItems(\n                $SETTINGS,\n                (int) $newItemId,\n                $originalRecord['label'],\n                $_SESSION['user_id'],\n                'at_creation',\n                $_SESSION['login']\n            );\n            // Add the fact that item has been copied in logs\n            logItems(\n                $SETTINGS,\n                (int) $newItemId,\n                $originalRecord['label'],\n                $_SESSION['user_id'],\n                'at_copy',\n                $_SESSION['login']\n            );\n            // reload cache table\n            include_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n            updateCacheTable('reload', $SETTINGS, null);\n\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => false,\n                    'message' => '',\n                    'new_id' => $newItemId\n                ),\n                'encode'\n            );\n        } else {\n            // no item\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_missing_id'),\n                ),\n                'encode'\n            );\n        }\n        break;\n\n        /*\n        * CASE\n        * Display informations of selected item\n    */\n    case 'show_details_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Step #1\n        $_SESSION['user']['show_step2'] = false;\n\n        // Decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],$inputData['data'],\n            'decode'\n        );\n\n        // Init post variables\n        $inputData['id'] = filter_var(($dataReceived['id']), FILTER_SANITIZE_NUMBER_INT);\n        $inputData['folderId'] = filter_var(($dataReceived['folder_id']), FILTER_SANITIZE_NUMBER_INT);\n        $post_expired_item = filter_var(($dataReceived['expired_item']), FILTER_SANITIZE_NUMBER_INT);\n        $post_restricted = filter_var(($dataReceived['restricted']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $post_folder_access_level = isset($dataReceived['folder_access_level']) === true ?\n            filter_var(($dataReceived['folder_access_level']), FILTER_SANITIZE_FULL_SPECIAL_CHARS)\n            : '';\n        $post_item_rights = filter_var($dataReceived['rights'], FILTER_SANITIZE_NUMBER_INT);\n\n        $arrData = array();\n        // return ID\n        $arrData['id'] = (int) $inputData['id'];\n        $arrData['id_user'] = API_USER_ID;\n        $arrData['author'] = 'API';\n\n        // Check if item is deleted\n        // taking into account that item can be restored.\n        // so if restoration timestamp is higher than the deletion one\n        // then we can show it\n        $item_deleted = DB::queryFirstRow(\n            'SELECT *\n            FROM ' . prefixTable('log_items') . '\n            WHERE id_item = %i AND action = %s\n            ORDER BY date DESC\n            LIMIT 0, 1',\n            $inputData['id'],\n            'at_delete'\n        );\n        $dataDeleted = DB::count();\n\n        $item_restored = DB::queryFirstRow(\n            'SELECT *\n            FROM ' . prefixTable('log_items') . '\n            WHERE id_item = %i AND action = %s\n            ORDER BY date DESC\n            LIMIT 0, 1',\n            $inputData['id'],\n            'at_restored'\n        );\n\n        if ($dataDeleted !== 0 && intval($item_deleted['date']) > intval($item_restored['date'])) {\n            // This item is deleted => exit\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('not_allowed_to_see_pw'),\n                    'show_detail_option' => 2,\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Get all informations for this item\n        $dataItem = DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('items') . ' as i\n            INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n            WHERE i.id = %i AND l.action = %s',\n            $inputData['id'],\n            'at_creation'\n        );\n\n        // Notification\n        DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('notification') . '\n            WHERE item_id = %i AND user_id = %i',\n            $inputData['id'],\n            $_SESSION['user_id']\n        );\n        if (DB::count() > 0) {\n            $arrData['notification_status'] = true;\n        } else {\n            $arrData['notification_status'] = false;\n        }\n\n        // Get all USERS infos\n        $listeRestriction = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        $_SESSION['listNotificationEmails'] = '';\n\n        /*$user_in_restricted_list_of_item = false;\n        $rows = DB::query(\n            'SELECT id, login, email, admin, name, lastname\n            FROM ' . prefixTable('users') .'\n            WHERE id in %ls',\n            replace(';', ',', $dataItem['restricted_to'])\n        );\n        $listeRestriction = [];\n        foreach ($rows as $user) {\n            // Get auhtor\n            if ($user['id'] === $dataItem['id_user']) {\n                $arrData['author'] = $user['login'];\n                $arrData['author_email'] = $user['email'];\n                $arrData['id_user'] = (int) $dataItem['id_user'];\n            }\n\n            // Get restriction list for users\n            if (in_array($user['id'], $listRest) === true) {\n                array_push($listeRestriction, $user['id']);\n                if ($_SESSION['user_id'] === $user['id']) {\n                    $user_in_restricted_list_of_item = true;\n                }\n            }\n        }*/\n        $user_in_restricted_list_of_item = in_array($_SESSION['user_id'], $listeRestriction) === true ? true : false;\n\n        // manage case of API user\n        if ($dataItem['id_user'] === API_USER_ID) {\n            $arrData['author'] = 'API [' . $dataItem['description'] . ']';\n            $arrData['id_user'] = API_USER_ID;\n            $arrData['author_email'] = '';\n            $arrData['notification_status'] = false;\n        }\n\n        // Get all tags for this item\n        $tags = array();\n        $rows = DB::query(\n            'SELECT tag\n            FROM ' . prefixTable('tags') . '\n            WHERE item_id = %i',\n            $inputData['id']\n        );\n        foreach ($rows as $record) {\n            array_push($tags, $record['tag']);\n        }\n\n        // TODO -> improve this check\n        // check that actual user can access this item\n        $restrictionActive = true;\n        $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        if (\n            in_array($_SESSION['user_id'], $restrictedTo) === true\n            || ((int) $_SESSION['user_manager'] === 1 && (int) $SETTINGS['manager_edit'] === 1)\n        ) {\n            $restrictionActive = false;\n        }\n        if (empty($dataItem['restricted_to']) === true) {\n            $restrictionActive = false;\n        }\n\n        // Check if user has a role that is accepted\n        $rows_tmp = DB::query(\n            'SELECT role_id\n            FROM ' . prefixTable('restriction_to_roles') . '\n            WHERE item_id=%i',\n            $inputData['id']\n        );\n        foreach ($rows_tmp as $rec_tmp) {\n            if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                $restrictionActive = false;\n            }\n        }\n\n        // Uncrypt PW\n        // Get the object key for the user\n        $userKey = DB::queryFirstRow(\n            'SELECT share_key\n            FROM ' . prefixTable('sharekeys_items') . '\n            WHERE user_id = %i AND object_id = %i',\n            $_SESSION['user_id'],\n            $inputData['id']\n        );\n        if (DB::count() === 0 || empty($dataItem['pw']) === true) {\n            // No share key found\n            // Is this a personal and defuse password?\n            if ((int) $dataItem['perso'] === 1 && substr($dataItem['pw'], 0, 3) === 'def') {\n                // Yes, then ask for decryption with old personal salt key\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error'),\n                        'show_detail_option' => 2,\n                        'error_type' => 'private_items_to_encrypt',\n                    ),\n                    'encode'\n                );\n                break;\n            } else {\n                $pw = '';\n            }\n        } else {\n            $decryptedObject = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n            // if null then we have an error.\n            // suspecting bad password\n            if (empty($decryptedObject) === false) {\n                $pw = doDataDecryption(\n                    $dataItem['pw'],\n                    $decryptedObject\n                );\n            } else {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_new_ldap_password_detected'),\n                        'show_detail_option' => 2,\n                        'error_type' => 'inconsistent_password',\n                    ),\n                    'encode'\n                );\n                break;\n            }\n        }\n\n        // echo $dataItem['id_tree'].\" ;; \";\n        //print_r($_SESSION['groupes_visibles']);\n        //echo in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']).' ;; '.$restrictionActive.\" ;; \";\n        // check user is admin\n        if (\n            (int) $_SESSION['user_admin'] === 1\n            && (int) $dataItem['perso'] !== 1\n        ) {\n            $arrData['show_details'] = 0;\n            // ---\n            // ---\n        } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true || (int) $_SESSION['is_admin'] === 1)\n                && ((int) $dataItem['perso'] === 0 || ((int) $dataItem['perso'] === 1 && in_array($dataItem['id_tree'], $_SESSION['personal_folders']) === true))\n                && $restrictionActive === false)\n            || (isset($SETTINGS['anyone_can_modify']) && (int) $SETTINGS['anyone_can_modify'] === 1\n                && (int) $dataItem['anyone_can_modify'] === 1\n                && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || (int) $_SESSION['is_admin'] === 1)\n                && $restrictionActive === false)\n            || (null !== $inputData['folderId']\n                && isset($_SESSION['list_restricted_folders_for_items'][$inputData['folderId']])\n                && in_array($inputData['id'], $_SESSION['list_restricted_folders_for_items'][$inputData['folderId']])\n                && (int) $post_restricted === 1\n                && $user_in_restricted_list_of_item === true)\n            || (isset($SETTINGS['restricted_to_roles']) && (int) $SETTINGS['restricted_to_roles'] === 1\n                && $restrictionActive === false)\n        ) {\n            // Check if actual USER can see this ITEM\n            // Allow show details\n            $arrData['show_details'] = 1;\n\n            // Regarding user's roles, what type of modification is allowed?\n            /*$rows = DB::query(\n                'SELECT r.type\n                FROM '.prefixTable('roles_values').' AS r\n                WHERE r.folder_id = %i AND r.role_id IN %ls',\n                $dataItem['id_tree'],\n                $_SESSION['groupes_visibles']\n            );\n            foreach ($rows as $record) {\n                // TODO\n            }*/\n\n            // Display menu icon for deleting if user is allowed\n            if (\n                (int) $dataItem['id_user'] === (int) $_SESSION['user_id']\n                || (int) $_SESSION['is_admin'] === 1\n                || ((int) $_SESSION['user_manager'] === 1 && (int) $SETTINGS['manager_edit'] === 1)\n                || (int) $dataItem['anyone_can_modify'] === 1\n                || in_array($dataItem['id_tree'], $_SESSION['list_folders_editable_by_role']) === true\n                || in_array($_SESSION['user_id'], $restrictedTo) === true\n                //|| count($restrictedTo) === 0\n                || (int) $post_folder_access_level === 30\n                || (int) $post_item_rights >= 40\n            ) {\n                $arrData['user_can_modify'] = 1;\n                $user_is_allowed_to_modify = true;\n            } else {\n                $arrData['user_can_modify'] = 0;\n                $user_is_allowed_to_modify = false;\n            }\n\n            // Get restriction list for roles\n            $listRestrictionRoles = array();\n            if (isset($SETTINGS['restricted_to_roles']) && (int) $SETTINGS['restricted_to_roles'] === 1) {\n                // Add restriction if item is restricted to roles\n                $rows = DB::query(\n                    'SELECT t.title, t.id\n                    FROM ' . prefixTable('roles_title') . ' AS t\n                    INNER JOIN ' . prefixTable('restriction_to_roles') . ' AS r ON (t.id=r.role_id)\n                    WHERE r.item_id = %i\n                    ORDER BY t.title ASC',\n                    $inputData['id']\n                );\n                foreach ($rows as $record) {\n                    if (!in_array($record['title'], $listRestrictionRoles)) {\n                        array_push($listRestrictionRoles, $record['id']);\n                    }\n                }\n            }\n            // Check if any KB is linked to this item\n            if (isset($SETTINGS['enable_kb']) && (int) $SETTINGS['enable_kb'] === 1) {\n                $tmp = array();\n                $rows = DB::query(\n                    'SELECT k.label, k.id\n                    FROM ' . prefixTable('kb_items') . ' as i\n                    INNER JOIN ' . prefixTable('kb') . ' as k ON (i.kb_id=k.id)\n                    WHERE i.item_id = %i\n                    ORDER BY k.label ASC',\n                    $inputData['id']\n                );\n                foreach ($rows as $record) {\n                    array_push(\n                        $tmp,\n                        array(\n                            'id' => $record['id'],\n                            'label' => $record['label'],\n                        )\n                    );\n                }\n                $arrData['links_to_kbs'] = $tmp;\n            }\n            // Prepare DIalogBox data\n            if ((int) $post_expired_item === 0) {\n                $arrData['show_detail_option'] = 0;\n            } elseif ($user_is_allowed_to_modify === true && (int) $post_expired_item === 1) {\n                $arrData['show_detail_option'] = 1;\n            } else {\n                $arrData['show_detail_option'] = 2;\n            }\n\n            $arrData['label'] = htmlspecialchars_decode($dataItem['label'], ENT_QUOTES);\n            $arrData['pw'] = $pw;\n            $arrData['email'] = empty($dataItem['email']) === true || $dataItem['email'] === null ? '' : $dataItem['email'];\n            $arrData['url'] = empty($dataItem['url']) === true ? '' : '<a href=\"'.$dataItem['url'].'\" target=\"_blank\">'.$dataItem['url'].'</a>';\n            $arrData['folder'] = $dataItem['id_tree'];\n\n            $arrData['description'] = $dataItem['description'];\n            $arrData['login'] = htmlspecialchars_decode(str_replace(array('\"'), array('&quot;'), $dataItem['login']), ENT_QUOTES);\n            $arrData['id_restricted_to'] = $listeRestriction;\n            $arrData['id_restricted_to_roles'] = $listRestrictionRoles;\n            $arrData['tags'] = $tags;\n            $arrData['folder'] = (int) $dataItem['id_tree'];\n            $arrData['fa_icon'] = $dataItem['fa_icon'];\n            $arrData['item_key'] = $dataItem['item_key'];\n\n            if (\n                isset($SETTINGS['enable_server_password_change'])\n                && (int) $SETTINGS['enable_server_password_change'] === 1\n            ) {\n                $arrData['auto_update_pwd_frequency'] = $dataItem['auto_update_pwd_frequency'];\n            } else {\n                $arrData['auto_update_pwd_frequency'] = '0';\n            }\n\n            $arrData['anyone_can_modify'] = (int) $dataItem['anyone_can_modify'];\n\n            // Add the fact that item has been viewed in logs\n            if (isset($SETTINGS['log_accessed']) && (int) $SETTINGS['log_accessed'] === 1) {\n                logItems(\n                    $SETTINGS,\n                    (int) $inputData['id'],\n                    $dataItem['label'],\n                    (int) $_SESSION['user_id'],\n                    'at_shown',\n                    $_SESSION['login']\n                );\n            }\n\n            // statistics\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'viewed_no' => $dataItem['viewed_no'] + 1,\n                ),\n                'id = %i',\n                $inputData['id']\n            );\n            $arrData['viewed_no'] = $dataItem['viewed_no'] + 1;\n\n            // get fields\n            $fieldsTmp = array();\n            $arrCatList = $template_id = '';\n            if (isset($SETTINGS['item_extra_fields']) && (int) $SETTINGS['item_extra_fields'] === 1) {\n                // get list of associated Categories\n                $arrCatList = array();\n                $rows_tmp = DB::query(\n                    'SELECT id_category\n                    FROM ' . prefixTable('categories_folders') . '\n                    WHERE id_folder=%i',\n                    $inputData['folderId']\n                );\n                \n                if (DB::count() > 0) {\n                    foreach ($rows_tmp as $row) {\n                        array_push($arrCatList, (int) $row['id_category']);\n                    }\n\n                    // get fields for this Item\n                    $rows_tmp = DB::query(\n                        'SELECT i.id AS id, i.field_id AS field_id, i.data AS data, i.item_id AS item_id,\n                        i.encryption_type AS encryption_type, c.encrypted_data, c.parent_id AS parent_id,\n                        c.type as field_type, c.masked AS field_masked, c.role_visibility AS role_visibility\n                        FROM ' . prefixTable('categories_items') . ' AS i\n                        INNER JOIN ' . prefixTable('categories') . ' AS c ON (i.field_id=c.id)\n                        WHERE i.item_id=%i AND c.parent_id IN %ls',\n                        $inputData['id'],\n                        $arrCatList\n                    );\n                    foreach ($rows_tmp as $row) {\n                        // Uncrypt data\n                        // Get the object key for the user\n                        //db::debugmode(true);\n                        $userKey = DB::queryFirstRow(\n                            'SELECT share_key\n                            FROM ' . prefixTable('sharekeys_fields') . '\n                            WHERE user_id = %i AND object_id = %i',\n                            $_SESSION['user_id'],\n                            $row['id']\n                        );\n                        //db::debugmode(false);\n                        $fieldText = [];\n                        if (DB::count() === 0) {\n                            // Not encrypted\n                            $fieldText['string'] = $row['data'];\n                            $fieldText['encrypted'] = false;\n                        } else {\n                            $fieldText['string'] = doDataDecryption(\n                                $row['data'],\n                                decryptUserObjectKey(\n                                    $userKey['share_key'],\n                                    $_SESSION['user']['private_key']\n                                )\n                            );\n                            $fieldText['encrypted'] = true;\n                        }\n\n                        // Manage textarea string\n                        if ($row['field_type'] === 'textarea') {\n                            $fieldText = $fieldText;\n                        }\n\n                        // build returned list of Fields text\n                        array_push(\n                            $fieldsTmp,\n                            array(\n                                'id' => (int) $row['field_id'],\n                                'value' => $fieldText['string'],\n                                'encrypted' => (int) $fieldText['encrypted'],\n                                'parent_id' => (int) $row['parent_id'],\n                                'type' => $row['field_type'],\n                                'masked' => (int) $row['field_masked'],\n                            )\n                        );\n                    }\n                }\n            }\n\n            // Now get the selected template (if exists)\n            if (isset($SETTINGS['item_creation_templates']) && (int) $SETTINGS['item_creation_templates'] === 1) {\n                $rows_tmp = DB::queryfirstrow(\n                    'SELECT category_id\n                    FROM ' . prefixTable('templates') . '\n                    WHERE item_id = %i',\n                    $inputData['id']\n                );\n                if (DB::count() > 0) {\n                    $template_id = $rows_tmp['category_id'];\n                }\n            }\n            //}\n            $arrData['fields'] = $fieldsTmp;\n            $arrData['categories'] = $arrCatList;\n            $arrData['template_id'] = (int) $template_id;\n            $arrData['to_be_deleted'] = '';\n\n            // Manage user restriction\n            if (null !== $post_restricted) {\n                $arrData['restricted'] = $post_restricted;\n            } else {\n                $arrData['restricted'] = '';\n            }\n            // Decrement the number before being deleted\n            if (isset($SETTINGS['enable_delete_after_consultation']) && (int) $SETTINGS['enable_delete_after_consultation'] === 1) {\n                // Is the Item to be deleted?\n                $dataDelete = DB::queryfirstrow(\n                    'SELECT * \n                    FROM ' . prefixTable('automatic_del') . '\n                    WHERE item_id = %i',\n                    $inputData['id']\n                );\n                if (DB::count() > 0) {\n                    $arrData['to_be_deleted'] = $dataDelete['del_value'];\n                    $arrData['to_be_deleted_type'] = (int) $dataDelete['del_type'];\n                }\n\n                // Now delete if required\n                if ($dataDelete !== null && ((int) $dataDelete['del_enabled'] === 1\n                    || intval($arrData['id_user']) !== intval($_SESSION['user_id'])))\n                {\n                    if ((int) $dataDelete['del_type'] === 1 && $dataDelete['del_value'] >= 1) {\n                        // decrease counter\n                        DB::update(\n                            prefixTable('automatic_del'),\n                            array(\n                                'del_value' => $dataDelete['del_value'] - 1,\n                            ),\n                            'item_id = %i',\n                            $inputData['id']\n                        );\n                        // store value\n                        $arrData['to_be_deleted'] = $dataDelete['del_value'] - 1;\n                    } elseif (\n                        (int) $dataDelete['del_type'] === 1\n                        && $dataDelete['del_value'] <= 1\n                        || (int) $dataDelete['del_type'] === 2\n                        && $dataDelete['del_value'] < time()\n                    ) {\n                        $arrData['show_details'] = 0;\n                        // delete item\n                        DB::delete(prefixTable('automatic_del'), 'item_id = %i', $inputData['id']);\n                        // make inactive object\n                        DB::update(\n                            prefixTable('items'),\n                            array(\n                                'inactif' => 1,\n                            ),\n                            'id = %i',\n                            $inputData['id']\n                        );\n\n                        // log\n                        logItems(\n                            $SETTINGS,\n                            (int) $inputData['id'],\n                            $dataItem['label'],\n                            (int) $_SESSION['user_id'],\n                            'at_delete',\n                            $_SESSION['login'],\n                            'at_automatically_deleted'\n                        );\n\n                        // Update cache table\n                        updateCacheTable(\n                            'delete_value',\n                            $SETTINGS,\n                            (int) $inputData['id']\n                        );\n\n                        $arrData['show_detail_option'] = 1;\n                        $arrData['to_be_deleted'] = 0;\n                    } elseif ($dataDelete['del_type'] === '2') {\n                        $arrData['to_be_deleted'] = date($SETTINGS['date_format'], (int) $dataDelete['del_value']);\n                    }\n                } else {\n                    $arrData['to_be_deleted'] = '';\n                }\n            } else {\n                $arrData['to_be_deleted'] = langHdl('no');\n            }\n            // ---\n            // ---\n        } else {\n            $arrData['show_details'] = 0;\n            // get readable list of restriction\n            $listOfRestricted = '';\n            if (empty($dataItem['restricted_to']) === false) {\n                foreach (explode(';', $dataItem['restricted_to']) as $userRest) {\n                    if (empty($userRest) === false) {\n                        $dataTmp = DB::queryfirstrow('SELECT login FROM ' . prefixTable('users') . ' WHERE id= ' . $userRest);\n                        if (empty($listOfRestricted)) {\n                            $listOfRestricted = $dataTmp['login'];\n                        } else {\n                            $listOfRestricted .= ';' . $dataTmp['login'];\n                        }\n                    }\n                }\n            }\n            $arrData['restricted_to'] = $listOfRestricted;\n            $arrData['notification_list'] = '';\n            $arrData['notification_status'] = '';\n        }\n\n        // Set a timestamp\n        $arrData['timestamp'] = time();\n\n        // Set temporary session variable to allow step2\n        $_SESSION['user']['show_step2'] = true;\n\n        // Error\n        $arrData['error'] = '';\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $arrData, \n            'encode'\n        );\n        break;\n\n        /*\n        * CASE\n        * Display History of the selected Item\n    */\n    case 'showDetailsStep2':\n        // Is this query expected (must be run after a step1 and not standalone)\n        if ($_SESSION['user']['show_step2'] !== true) {\n            // Check KEY and rights\n            if ($inputData['key'] !== $_SESSION['key']) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('key_is_not_correct'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n            if ($_SESSION['user_read_only'] === true) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n        }\n        $returnArray = array();\n\n        // Load item data\n        $dataItem = DB::queryFirstRow(\n            'SELECT i.*, n.title AS folder_title\n            FROM ' . prefixTable('items') . ' AS i\n            INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (i.id_tree = n.id)\n            WHERE i.id = %i',\n            $inputData['id']\n        );\n\n        // check that actual user can access this item\n        $restrictionActive = true;\n        $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        if (\n            in_array($_SESSION['user_id'], $restrictedTo)\n            || (((int) $_SESSION['user_manager'] === 1 || (int) $_SESSION['user_can_manage_all_users'] === 1)\n                && (int) $SETTINGS['manager_edit'] === 1)\n        ) {\n            $restrictionActive = false;\n        }\n        if (empty($dataItem['restricted_to'])) {\n            $restrictionActive = false;\n        }\n\n        // Check if user has a role that is accepted\n        $rows_tmp = DB::query(\n            'SELECT role_id\n            FROM ' . prefixTable('restriction_to_roles') . '\n            WHERE item_id=%i',\n            $inputData['id']\n        );\n        foreach ($rows_tmp as $rec_tmp) {\n            if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                $restrictionActive = false;\n            }\n        }\n\n        // check user is admin\n        if (\n            (int) $_SESSION['is_admin'] === 1\n            && (int) $dataItem['perso'] === 0\n        ) {\n            $returnArray['show_details'] = 0;\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $returnArray,\n                'encode'\n            );\n        // Check if actual USER can see this ITEM\n        } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true || (int) $_SESSION['is_admin'] === 1)\n                && ((int) $dataItem['perso'] === 0 || ((int) $dataItem['perso'] === 1 && in_array($dataItem['id_tree'], $_SESSION['personal_folders']) === true))\n                && $restrictionActive === false) === true\n            || (isset($SETTINGS['anyone_can_modify']) === true && (int) $SETTINGS['anyone_can_modify'] === 1\n                && (int) (int) $dataItem['anyone_can_modify'] === 1\n                && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || (int) $_SESSION['is_admin'] === 1)\n                && $restrictionActive === false) === true\n            || (null !== $inputData['folderId']\n                && isset($_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                && in_array($inputData['id'], $_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                && (int) $post_restricted === 1\n                && $user_in_restricted_list_of_item === true) === true\n            || (isset($SETTINGS['restricted_to_roles']) === true && (int) $SETTINGS['restricted_to_roles'] === 1\n                && $restrictionActive === false) === true\n        ) {\n            // generate 2d key\n            $_SESSION['key_tmp'] = bin2hex(GenerateCryptKey(16, false, true, true, false, true, $SETTINGS));\n\n            // Prepare files listing\n            $attachments = array();\n            \n            // launch query\n            $rows = DB::query(\n                'SELECT id, name, file, extension, size\n                FROM ' . prefixTable('files') . '\n                WHERE id_item = %i AND confirmed = 1',\n                $inputData['id']\n            );\n            foreach ($rows as $record) {\n                array_push(\n                    $attachments,\n                    array(\n                        'icon' => fileFormatImage(strtolower($record['extension'])),\n                        'filename' => basename($record['name'], '.' . $record['extension']),\n                        'extension' => $record['extension'],\n                        'size' => formatSizeUnits((int) $record['size']),\n                        'is_image' => in_array(strtolower($record['extension']), TP_IMAGE_FILE_EXT) === true ? 1 : 0,\n                        'id' => $record['id'],\n                        'key' => $_SESSION['key_tmp'],\n                    )\n                );\n            }\n            $returnArray['attachments'] = $attachments;\n\n            // disable add bookmark if alread bookmarked\n            $returnArray['favourite'] = in_array($inputData['id'], $_SESSION['favourites']) === true ? 1 : 0;\n\n            // Add this item to the latests list\n            if (isset($_SESSION['latest_items']) && isset($SETTINGS['max_latest_items']) && !in_array($dataItem['id'], $_SESSION['latest_items'])) {\n                if (count($_SESSION['latest_items']) >= $SETTINGS['max_latest_items']) {\n                    array_pop($_SESSION['latest_items']); //delete last items\n                }\n                array_unshift($_SESSION['latest_items'], $dataItem['id']);\n                // update DB\n                DB::update(\n                    prefixTable('users'),\n                    array(\n                        'latest_items' => implode(';', $_SESSION['latest_items']),\n                    ),\n                    'id=' . $_SESSION['user_id']\n                );\n            }\n\n            // get list of roles\n            $listOptionsForUsers = array();\n            $listOptionsForRoles = array();\n            $rows = DB::query(\n                'SELECT r.role_id AS role_id, t.title AS title\n                FROM ' . prefixTable('roles_values') . ' AS r\n                INNER JOIN ' . prefixTable('roles_title') . ' AS t ON (r.role_id = t.id)\n                WHERE r.folder_id = %i',\n                $dataItem['id_tree']\n            );\n            foreach ($rows as $record) {\n                array_push(\n                    $listOptionsForRoles,\n                    array(\n                        'id' => (int) $record['role_id'],\n                        'title' => $record['title'],\n                    )\n                );\n                $rows2 = DB::query(\n                    'SELECT id, login, fonction_id, email, name, lastname\n                    FROM ' . prefixTable('users') . '\n                    WHERE fonction_id LIKE %s',\n                    '%' . $record['role_id'] . '%'\n                );\n                foreach ($rows2 as $record2) {\n                    foreach (explode(';', $record2['fonction_id']) as $role) {\n                        if (\n                            array_search($record2['id'], array_column($listOptionsForUsers, 'id')) === false\n                            && $role === $record['role_id']\n                        ) {\n                            array_push(\n                                $listOptionsForUsers,\n                                array(\n                                    'id' => (int) $record2['id'],\n                                    'login' => $record2['login'],\n                                    'name' => $record2['name'] . ' ' . $record2['lastname'],\n                                    'email' => $record2['email'],\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n\n            $returnArray['users_list'] = $listOptionsForUsers;\n            $returnArray['roles_list'] = $listOptionsForRoles;\n\n            // send notification if enabled\n            if (isset($SETTINGS['enable_email_notification_on_item_shown']) === true && (int) $SETTINGS['enable_email_notification_on_item_shown'] === 1) {\n                // Get path\n                $arbo = $tree->getPath($dataItem['id_tree'], true);\n                $path = '';\n                foreach ($arbo as $elem) {\n                    if (empty($path) === true) {\n                        $path = htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES) . ' ';\n                    } else {\n                        $path .= '&#8594; ' . htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n                    }\n                }\n                // Build text to show user\n                if (empty($path) === true) {\n                    $path = addslashes($dataItem['label']);\n                } else {\n                    $path = addslashes($dataItem['label']) . ' (' . $path . ')';\n                }\n\n                // Add Admins to notification list if expected\n                $reveivers = [];\n                $rows = DB::query(\n                    'SELECT email\n                    FROM ' . prefixTable('users').'\n                    WHERE admin = %i',\n                    1\n                );\n                foreach ($rows as $user) {\n                    array_push($reveivers, $user['email']);\n                }\n\n                // prepare sending email\n                prepareSendingEmail(\n                    langHdl('email_on_open_notification_subject'),\n                    str_replace(\n                        array('#tp_user#', '#tp_item#', '#tp_link#'),\n                        array(\n                            addslashes($_SESSION['login']),\n                            $path,\n                            $SETTINGS['cpassman_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $dataItem['id'],\n                        ),\n                        langHdl('email_on_open_notification_mail')\n                    ),\n                    implode(\",\", $reveivers),\n                    \"\",\n                    $SETTINGS\n                );\n            }\n\n            // has this item a change proposal\n            DB::query('SELECT * FROM ' . prefixTable('items_change') . ' WHERE item_id = %i', $inputData['id']);\n            $returnArray['has_change_proposal'] = DB::count();\n\n            // Setting\n            $returnArray['setting_restricted_to_roles'] = isset($SETTINGS['restricted_to_roles']) === true\n                && (int) $SETTINGS['restricted_to_roles'] === 1 ? 1 : 0;\n\n            $_SESSION['user']['show_step2'] = false;\n            \n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $returnArray,\n                'encode'\n            );\n        } else {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $returnArray,\n                'encode'\n            );\n        }\n        break;\n\n        /*\n        * CASE\n        * Delete an item\n    */\n    case 'delete_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Prepare POST variables\n        $inputData['label'] = filter_var($dataReceived['label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['folderId'] = (int) filter_var($dataReceived['folder_id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_access_level = (int) filter_var($dataReceived['access_level'], FILTER_SANITIZE_NUMBER_INT);\n\n        // perform a check in case of Read-Only user creating an item in his PF\n        if (($_SESSION['user_read_only'] === true\n                && in_array($inputData['label'], $_SESSION['personal_folders']) === false)\n            || (int) $post_access_level <= 20\n        ) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Check that user can access this item\n        $granted = accessToItemIsGranted($inputData['itemId'], $SETTINGS);\n        if ($granted !== true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => $granted,\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Load item data\n        $data = DB::queryFirstRow(\n            'SELECT id_tree\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $inputData['itemId']\n        );\n\n        // delete item consists in disabling it\n        DB::update(\n            prefixTable('items'),\n            array(\n                'inactif' => '1',\n            ),\n            'id = %i',\n            $inputData['itemId']\n        );\n\n        // log\n        logItems(\n            $SETTINGS,\n            (int) $inputData['itemId'],\n            $inputData['label'],\n            $_SESSION['user_id'],\n            'at_delete',\n            $_SESSION['login']\n        );\n        // Update CACHE table\n        updateCacheTable('delete_value', $SETTINGS, (int) $inputData['itemId']);\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * Update a Group\n    */\n    case 'update_folder':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n$SETTINGS['cpassman_dir'],$inputData['data'], 'decode');\n\n        // Prepare variables\n        $title = filter_var(htmlspecialchars_decode($dataReceived['title'], ENT_QUOTES), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['folderId'] = filter_var(htmlspecialchars_decode($dataReceived['folder']), FILTER_SANITIZE_NUMBER_INT);\n\n        // Check if user is allowed to access this folder\n        if (!in_array($inputData['folderId'], $_SESSION['groupes_visibles'])) {\n            echo '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            break;\n        }\n\n        // Check if title doesn't contains html codes\n        if (preg_match_all('|<[^>]+>(.*)</[^>]+>|U', $title, $out)) {\n            echo '[ { \"error\" : \"' . langHdl('error_html_codes') . '\" } ]';\n            break;\n        }\n        // check that title is not numeric\n        if (is_numeric($title) === true) {\n            echo '[{\"error\" : \"ERR_TITLE_ONLY_WITH_NUMBERS\"}]';\n            break;\n        }\n\n        // Check if duplicate folders name are allowed\n        if (isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] === '0') {\n            $data = DB::queryFirstRow('SELECT id, title FROM ' . prefixTable('nested_tree') . ' WHERE title = %s', $title);\n            if (empty($data['id']) === false && $dataReceived['folder'] !== $data['id']) {\n                echo '[ { \"error\" : \"' . langHdl('error_group_exist') . '\" } ]';\n                break;\n            }\n        }\n\n        // query on folder\n        $data = DB::queryfirstrow(\n            'SELECT parent_id, personal_folder\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $inputData['folderId']\n        );\n\n        // check if complexity level is good\n        // if manager or admin don't care\n        if ($_SESSION['is_admin'] !== 1 && $_SESSION['user_manager'] !== 1 && $data['personal_folder'] === '0') {\n            $data = DB::queryfirstrow(\n                'SELECT valeur\n                FROM ' . prefixTable('misc') . '\n                WHERE intitule = %i AND type = %s',\n                $data['parent_id'],\n                'complex'\n            );\n            if (intval($dataReceived['complexity']) < intval($data['valeur'])) {\n                echo '[ { \"error\" : \"' . langHdl('error_folder_complexity_lower_than_top_folder') . ' [<b>' . TP_PW_COMPLEXITY[$data['valeur']][1] . '</b>]\"} ]';\n                break;\n            }\n        }\n\n        // update Folders table\n        $tmp = DB::queryFirstRow(\n            'SELECT title, parent_id, personal_folder FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n            $dataReceived['folder']\n        );\n        if ($tmp['parent_id'] !== 0 || $tmp['title'] !== $_SESSION['user_id'] || $tmp['personal_folder'] !== 1) {\n            DB::update(\n                prefixTable('nested_tree'),\n                array(\n                    'title' => $title,\n                ),\n                'id=%s',\n                $inputData['folderId']\n            );\n            // update complixity value\n            DB::update(\n                prefixTable('misc'),\n                array(\n                    'valeur' => $dataReceived['complexity'],\n                ),\n                'intitule = %s AND type = %s',\n                $inputData['folderId'],\n                'complex'\n            );\n            // rebuild fuild tree folder\n            $tree->rebuild();\n        }\n        // send data\n        echo '[{\"error\" : \"\"}]';\n        break;\n\n        /*\n    * CASE\n    * Move a Group including sub-folders\n    */\n    case 'move_folder':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n$SETTINGS['cpassman_dir'],$inputData['data'], 'decode');\n        $post_source_folder_id = filter_var(htmlspecialchars_decode($dataReceived['source_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n        $post_target_folder_id = filter_var(htmlspecialchars_decode($dataReceived['target_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n\n        // Check that user can access this folder\n        if ((in_array($post_source_folder_id, $_SESSION['groupes_visibles']) === false ||\n                in_array($post_target_folder_id, $_SESSION['groupes_visibles']) === false) && ($post_target_folder_id === '0' &&\n                isset($SETTINGS['can_create_root_folder']) === true && (int) $SETTINGS['can_create_root_folder'] === 1)\n        ) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        $tmp_source = DB::queryFirstRow(\n            'SELECT title, parent_id, personal_folder\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $post_source_folder_id\n        );\n\n        $tmp_target = DB::queryFirstRow(\n            'SELECT title, parent_id, personal_folder\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $post_target_folder_id\n        );\n\n        // check if target is not a child of source\n        if ($tree->isChildOf($post_target_folder_id, $post_source_folder_id) === true) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        // check if source or target folder is PF. If Yes, then cancel operation\n        if ((int) $tmp_source['personal_folder'] === 1 || (int) $tmp_target['personal_folder'] === 1) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        // check if source or target folder is PF. If Yes, then cancel operation\n        if ($tmp_source['title'] === $_SESSION['user_id'] || $tmp_target['title'] === $_SESSION['user_id']) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        // moving SOURCE folder\n        DB::update(\n            prefixTable('nested_tree'),\n            array(\n                'parent_id' => $post_target_folder_id,\n            ),\n            'id=%s',\n            $post_source_folder_id\n        );\n        $tree->rebuild();\n\n        // send data\n        echo '[{\"error\" : \"\"}]';\n        break;\n\n        /*\n    * CASE\n    * Store hierarchic position of Group\n    */\n    case 'save_position':\n        DB::update(\n            prefixTable('nested_tree'),\n            array(\n                'parent_id' => $inputData['destination'],\n            ),\n            'id = %i',\n            $inputData['source']\n        );\n        $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n        $tree->rebuild();\n        break;\n\n        /*\n    * CASE\n    * List items of a group\n    */\n    case 'do_items_list_in_folder':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        if (count($_SESSION['user_roles']) === 0) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        if (is_array($dataReceived) === true && array_key_exists('id', $dataReceived) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_unknown'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Prepare POST variables\n        $inputData['id'] = filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_restricted = filter_var($dataReceived['restricted'], FILTER_SANITIZE_NUMBER_INT);\n        $post_start = filter_var($dataReceived['start'], FILTER_SANITIZE_NUMBER_INT);\n        $post_nb_items_to_display_once = filter_var($dataReceived['nb_items_to_display_once'], FILTER_SANITIZE_NUMBER_INT);\n\n        $arr_arbo = [];\n        $folderIsPf = false;\n        $showError = 0;\n        $itemsIDList = $rights = $returnedData = $uniqueLoadData = $html_json = array();\n        // Build query limits\n        if (empty($post_start) === true) {\n            $start = 0;\n        } else {\n            $start = $post_start;\n        }\n\n        // to do only on 1st iteration\n        if ((int) $start === 0) {\n            // Prepare tree\n            $arbo = $tree->getPath($inputData['id'], true);\n            foreach ($arbo as $elem) {\n                if ($elem->title === $_SESSION['user_id'] && (int) $elem->nlevel === 1) {\n                    $elem->title = $_SESSION['login'];\n                    $folderIsPf = true;\n                }\n                // Store path elements\n                array_push(\n                    $arr_arbo,\n                    array(\n                        'id' => $elem->id,\n                        'title' => htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES),\n                        'visible' => in_array($elem->id, $_SESSION['groupes_visibles']) ? 1 : 0,\n                    )\n                );\n            }\n            $uniqueLoadData['path'] = $arr_arbo;\n\n            // store last folder accessed in cookie\n            $arr_cookie_options = array (\n                'expires' => time() + TP_ONE_DAY_SECONDS * 5,\n                'path' => '/', \n                'secure' => true,\n                'httponly' => true,\n                'samesite' => 'Lax' // None || Lax  || Strict\n            );\n            setcookie(\n                'jstree_select',\n                $inputData['id'],\n                $arr_cookie_options\n            );\n\n            // CHeck if roles have 'allow_pw_change' set to true\n            $forceItemEditPrivilege = false;\n            foreach ($_SESSION['user_roles'] as $role) {\n                $roleQ = DB::queryfirstrow(\n                    'SELECT allow_pw_change\n                    FROM ' . prefixTable('roles_title') . '\n                    WHERE id = %i',\n                    $role\n                );\n                if ((int) $roleQ['allow_pw_change'] === 1) {\n                    $forceItemEditPrivilege = true;\n                    break;\n                }\n            }\n\n            // is this folder a personal one\n            $folder_is_personal = in_array($inputData['id'], $_SESSION['personal_folders']);\n            $uniqueLoadData['folder_is_personal'] = $folder_is_personal;\n\n            $folder_is_in_personal = in_array($inputData['id'], array_merge($_SESSION['personal_visible_groups'], $_SESSION['personal_folders']));\n            $uniqueLoadData['folder_is_in_personal'] = $folder_is_in_personal;\n\n\n            // check role access on this folder (get the most restrictive) (2.1.23)\n            if ((int) $folder_is_personal === 0) {\n                $accessLevel = 20;\n                $arrTmp = [];\n                \n                foreach ($_SESSION['user_roles'] as $role) {\n                    $access = DB::queryFirstRow(\n                        'SELECT type FROM ' . prefixTable('roles_values') . ' WHERE role_id = %i AND folder_id = %i',\n                        $role,\n                        $inputData['id']\n                    );\n                    if (DB::count()>0) {\n                        if ($access['type'] === 'R') {\n                            array_push($arrTmp, 10);\n                        } elseif ($access['type'] === 'W') {\n                            array_push($arrTmp, 30);\n                        } elseif (\n                            $access['type'] === 'ND'\n                            || ($forceItemEditPrivilege === true && $access['type'] === 'NDNE')\n                        ) {\n                            array_push($arrTmp, 20);\n                        } elseif ($access['type'] === 'NE') {\n                            array_push($arrTmp, 10);\n                        } elseif ($access['type'] === 'NDNE') {\n                            array_push($arrTmp, 15);\n                        } else {\n                            // Ensure to give access Right if allowed folder\n                            if (in_array($inputData['id'], $_SESSION['groupes_visibles']) === true) {\n                                array_push($arrTmp, 30);\n                            } else {\n                                array_push($arrTmp, 0);\n                            }\n                        }\n                    }\n                }\n                // 3.0.0.0 - changed  MIN to MAX\n                $accessLevel = count($arrTmp) > 0 ? max($arrTmp) : $accessLevel;\n            } else {\n                $accessLevel = 30;\n            }\n            $uniqueLoadData['accessLevel'] = $accessLevel;\n\n            /*\n            // check if this folder is a PF. If yes check if saltket is set\n            if ((!isset($_SESSION['user']['encrypted_psk']) || empty($_SESSION['user']['encrypted_psk'])) && $folderIsPf === true) {\n                $showError = 'is_pf_but_no_saltkey';\n            }\n            */\n            $uniqueLoadData['showError'] = $showError;\n\n            // check if items exist\n            $where = new WhereClause('and');\n            if (null !== $post_restricted && (int) $post_restricted === 1 && empty($_SESSION['list_folders_limited'][$inputData['id']]) === false) {\n                $counter = count($_SESSION['list_folders_limited'][$inputData['id']]);\n                $uniqueLoadData['counter'] = $counter;\n                // check if this folder is visible\n            } elseif (!in_array(\n                $inputData['id'],\n                array_merge(\n                    $_SESSION['groupes_visibles'],\n                    is_array($_SESSION['list_restricted_folders_for_items']) === true ? array_keys($_SESSION['list_restricted_folders_for_items']) : array(),\n                    is_array($_SESSION['list_folders_limited']) === true ? array_keys($_SESSION['list_folders_limited']) : array()\n                )\n            )) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => 'not_authorized',\n                        'arborescence' => $arr_arbo,\n                    ),\n                    'encode'\n                );\n                break;\n            } else {\n                DB::query(\n                    'SELECT *\n                    FROM ' . prefixTable('items') . '\n                    WHERE inactif = %i',\n                    0\n                );\n                $counter = DB::count();\n                $uniqueLoadData['counter'] = $counter;\n            }\n\n            // Get folder complexity\n            $folderComplexity = DB::queryFirstRow(\n                'SELECT valeur FROM ' . prefixTable('misc') . ' WHERE type = %s AND intitule = %i',\n                'complex',\n                $inputData['id']\n            );\n            $folderComplexity = $folderComplexity !== null ? (int) $folderComplexity['valeur'] : 0;\n            $uniqueLoadData['folderComplexity'] = $folderComplexity;\n\n            // Has this folder some categories to be displayed?\n            $categoriesStructure = array();\n            if (isset($SETTINGS['item_extra_fields']) && (int) $SETTINGS['item_extra_fields'] === 1) {\n                $folderRow = DB::query(\n                    'SELECT id_category\n                    FROM ' . prefixTable('categories_folders') . '\n                    WHERE id_folder = %i',\n                    $inputData['id']\n                );\n                foreach ($folderRow as $category) {\n                    array_push(\n                        $categoriesStructure,\n                        $category['id_category']\n                    );\n                }\n            }\n            $uniqueLoadData['categoriesStructure'] = $categoriesStructure;\n\n            /*$categoriesStructure = array();\n            if (isset($SETTINGS['item_extra_fields']) && (int) $SETTINGS['item_extra_fields'] === 1) {\n                $folderRow = DB::query(\n                    'SELECT f.id_category, c.title AS title\n                    FROM '.prefixTable('categories_folders').' AS f\n                    INNER JOIN '.prefixTable('categories').' AS c ON (c.id = f.id_category)\n                    WHERE f.id_folder = %i',\n                    $inputData['id']\n                );\n                foreach ($folderRow as $category) {\n                    $arrFields = array();\n                    // Get each category definition with fields\n                    $categoryRow = DB::query(\n                        \"SELECT *\n                        FROM \".prefixTable(\"categories\").\"\n                        WHERE parent_id=%i\n                        ORDER BY `order` ASC\",\n                        $category['id_category']\n                    );\n\n                    if (DB::count() > 0) {\n                        foreach ($categoryRow as $field) {\n                            // Is this Field visibile by user?\n                            if ($field['role_visibility'] === 'all'\n                                || count(\n                                    array_intersect(\n                                        explode(';', $_SESSION['fonction_id']),\n                                        explode(',', $field['role_visibility'])\n                                    )\n                                ) > 0\n                            ) {\n                                array_push(\n                                    $arrFields,\n                                    array(\n                                        $field['id'],\n                                        $field['title'],\n                                        $field['encrypted_data'],\n                                        $field['type'],\n                                        $field['masked'],\n                                        $field['is_mandatory']\n                                    )\n                                );\n                            }\n                        }\n                    }\n\n                    // store the categories\n                    array_push(\n                        $categoriesStructure,\n                        array(\n                            $category['id_category'],\n                            $category['title'],\n                            $arrFields\n                        )\n                    );\n                }\n            }\n            $uniqueLoadData['categoriesStructure'] = $categoriesStructure;\n            */\n\n            if (isset($_SESSION['list_folders_editable_by_role'])) {\n                $list_folders_editable_by_role = in_array($inputData['id'], $_SESSION['list_folders_editable_by_role']);\n            } else {\n                $list_folders_editable_by_role = '';\n            }\n            $uniqueLoadData['list_folders_editable_by_role'] = $list_folders_editable_by_role;\n        } else {\n            $uniqueLoadData = json_decode(\n                filter_var($dataReceived['uniqueLoadData'], FILTER_UNSAFE_RAW),\n                true\n            );\n\n            // initialize main variables\n            $showError = $uniqueLoadData['showError'];\n            $accessLevel = $uniqueLoadData['accessLevel'];\n            $counter = $uniqueLoadData['counter'];\n            $counter_full = $uniqueLoadData['counter_full'];\n            $categoriesStructure = $uniqueLoadData['categoriesStructure'];\n            $folderComplexity = $uniqueLoadData['folderComplexity'];\n            $folder_is_personal = $uniqueLoadData['folder_is_personal'];\n            $folder_is_in_personal = $uniqueLoadData['folder_is_in_personal'];\n            //$list_folders_editable_by_role = $uniqueLoadData['list_folders_editable_by_role'];\n        }\n        \n        // prepare query WHere conditions\n        $where = new WhereClause('and');\n        if (null !== $post_restricted && (int) $post_restricted === 1 && empty($_SESSION['list_folders_limited'][$inputData['id']]) === false) {\n            $where->add('i.id IN %ls', $_SESSION['list_folders_limited'][$inputData['id']]);\n        } else {\n            $where->add('i.id_tree=%i', $inputData['id']);\n        }\n\n        // build the HTML for this set of Items\n        if ($counter > 0 && empty($showError)) {\n            // init variables\n            $expired_item = false;\n            $limited_to_items = '';\n\n            // List all ITEMS\n            if ($folderIsPf === false) {\n                $where->add('i.inactif=%i', 0);\n                $where->add('l.date=%l', '(SELECT date FROM ' . prefixTable('log_items') . \" WHERE action IN ('at_creation', 'at_modification') AND id_item=i.id ORDER BY date DESC LIMIT 1)\");\n                if (empty($limited_to_items) === false) {\n                    $where->add('i.id IN %ls', explode(',', $limited_to_items));\n                }\n\n                $query_limit = ' LIMIT ' .\n                    $start . ',' .\n                    $post_nb_items_to_display_once;\n                //db::debugmode(true);\n                $rows = DB::query(\n                    'SELECT i.id AS id, i.item_key AS item_key, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                    MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                    MIN(i.anyone_can_modify) AS anyone_can_modify, l.date AS date, i.id_tree AS tree_id, i.fa_icon AS fa_icon,\n                    MIN(n.renewal_period) AS renewal_period,\n                    MIN(l.action) AS log_action,\n                    l.id_user AS log_user,\n                    i.url AS link\n                    FROM ' . prefixTable('items') . ' AS i\n                    INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (i.id_tree = n.id)\n                    INNER JOIN ' . prefixTable('log_items') . ' AS l ON (i.id = l.id_item)\n                    WHERE %l\n                    GROUP BY i.id, l.date, l.id_user, l.action\n                    ORDER BY i.label ASC, l.date DESC' . $query_limit,\n                    $where\n                );\n                //db::debugmode(false);\n            } else {\n                $post_nb_items_to_display_once = 'max';\n                $where->add('i.inactif=%i', 0);\n\n                $rows = DB::query(\n                    'SELECT i.id AS id, i.item_key AS item_key, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                    MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                    MIN(i.anyone_can_modify) AS anyone_can_modify,l.date AS date, i.id_tree AS tree_id, i.fa_icon AS fa_icon,\n                    MIN(n.renewal_period) AS renewal_period,\n                    MIN(l.action) AS log_action,\n                    l.id_user AS log_user,\n                    i.url AS link\n                    FROM ' . prefixTable('items') . ' AS i\n                    INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (i.id_tree = n.id)\n                    INNER JOIN ' . prefixTable('log_items') . ' AS l ON (i.id = l.id_item)\n                    WHERE %l\n                    GROUP BY i.id, l.date, l.id_user, l.action\n                    ORDER BY i.label ASC, l.date DESC',\n                    $where\n                );\n            }\n\n            $idManaged = '';\n\n            foreach ($rows as $record) {\n                // exclude all results except the first one returned by query\n                if (empty($idManaged) === true || $idManaged !== $record['id']) {\n                    // Fix a bug on Personal Item creation - field `perso` must be set to `1`\n                    if ((int) $record['perso'] !== 1 && (int) $folder_is_personal === 1) {\n                        DB::update(\n                            prefixTable('items'),\n                            array(\n                                'perso' => 1,\n                            ),\n                            'id=%i',\n                            $record['id']\n                        );\n                        $record['perso'] = 1;\n                    }\n\n                    // Does this item has restriction to groups of users?\n                    $item_is_restricted_to_role = false;\n                    DB::queryfirstrow(\n                        'SELECT role_id\n                        FROM ' . prefixTable('restriction_to_roles') . '\n                        WHERE item_id = %i',\n                        $record['id']\n                    );\n                    if (DB::count() > 0) {\n                        $item_is_restricted_to_role = true;\n                    }\n\n                    // Has this item a restriction to Groups of Users\n                    $user_is_included_in_role = false;\n                    DB::query(\n                        'SELECT role_id\n                        FROM ' . prefixTable('restriction_to_roles') . '\n                        WHERE item_id = %i AND role_id IN %ls',\n                        $record['id'],\n                        $_SESSION['user_roles']\n                    );\n                    if (DB::count() > 0) {\n                        $user_is_included_in_role = true;\n                    }\n\n                    // Is user in restricted list of users\n                    if (empty($record['restricted_to']) === false) {\n                        if (\n                            in_array($_SESSION['user_id'], explode(';', $record['restricted_to'])) === true\n                            || (((int) $_SESSION['user_manager'] === 1 || (int) $_SESSION['user_can_manage_all_users'] === 1)\n                                && (int) $SETTINGS['manager_edit'] === 1)\n                        ) {\n                            $user_is_in_restricted_list = true;\n                        } else {\n                            $user_is_in_restricted_list = false;\n                        }\n                    } else {\n                        $user_is_in_restricted_list = false;\n                    }\n\n                    // Get Expiration date\n                    $expired_item = 0;\n                    if (\n                        (int) $SETTINGS['activate_expiration'] === 1\n                        && $record['renewal_period'] > 0\n                        && ($record['date'] + ($record['renewal_period'] * TP_ONE_MONTH_SECONDS)) < time()\n                    ) {\n                        $expired_item = 1;\n                    }\n                    // Init\n                    $html_json[$record['id']]['expired'] = (int) $expired_item;\n                    $html_json[$record['id']]['item_id'] = (int) $record['id'];\n                    $html_json[$record['id']]['item_key'] = (string) $record['item_key'];\n                    $html_json[$record['id']]['tree_id'] = (int) $record['tree_id'];\n                    $html_json[$record['id']]['label'] = strip_tags($record['label']);\n                    if (isset($SETTINGS['show_description']) === true && (int) $SETTINGS['show_description'] === 1) {\n                        $html_json[$record['id']]['desc'] = substr(preg_replace('#<[^>]+>#', ' ', $record['description']), 0, 200);\n                    } else {\n                        $html_json[$record['id']]['desc'] = '';\n                    }\n                    $html_json[$record['id']]['login'] = $record['login'];\n                    $html_json[$record['id']]['anyone_can_modify'] = (int) $record['anyone_can_modify'];\n                    $html_json[$record['id']]['is_result_of_search'] = 0;\n                    $html_json[$record['id']]['is_favourited'] = in_array($record['id'], $_SESSION['favourites']) === true ? 1 : 0;\n                    $html_json[$record['id']]['link'] = $record['link'];\n                    $html_json[$record['id']]['fa_icon'] = $record['fa_icon'];\n\n                    // Possible values:\n                    // 0 -> no access to item\n                    // 10 -> appears in list but no view\n                    // 20 -> can view without edit (no copy) or move\n                    // 30 -> can view without edit (no copy) but can move\n                    // 40 -> can edit but not move\n                    // 50 -> can edit and move\n                    $itemIsPersonal = false;\n\n                    // Let's identify the rights belonging to this ITEM\n                    if (\n                        (int) $record['perso'] === 1\n                        && $record['log_action'] === 'at_creation'\n                        && $record['log_user'] === $_SESSION['user_id']\n                        && (int) $folder_is_in_personal === 1\n                        && (int) $folder_is_personal === 1\n                    ) {\n                        // Case 1 - Is this item personal and user its owner?\n                        // If yes then allow\n                        // If no then continue\n                        $itemIsPersonal = true;\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 1 -----\n                    } elseif (((isset($_SESSION['user_manager']) === true && (int) $_SESSION['user_manager'] === 1)\n                            || (isset($_SESSION['user_can_manage_all_users']) === true && (int) $_SESSION['user_can_manage_all_users'] === 1))\n                        && (isset($SETTINGS['manager_edit']) === true && (int) $SETTINGS['manager_edit'] === 1)\n                        && (int) $record['perso'] !== 1\n                        && $user_is_in_restricted_list === true\n                    ) {\n                        // Case 2 - Is user manager and option \"manager_edit\" set to true?\n                        // Allow all rights\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 2 -----\n                    } elseif (\n                        (int) $record['anyone_can_modify'] === 1\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 3 - Has this item the setting \"anyone can modify\" set to true?\n                        // Allow all rights\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 3 -----\n                    } elseif (\n                        $user_is_in_restricted_list === true\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 4 - Is this item limited to Users? Is current user in this list?\n                        // Allow all rights\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 4 -----\n                    } elseif (\n                        $user_is_included_in_role === true\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 5 - Is this item limited to group of users? Is current user in one of those groups?\n                        // Allow all rights\n                        $right = 60;\n                        // ---\n                        // ----- END CASE 5 -----\n                    } elseif (\n                        (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] === 1\n                    ) {\n                        // Case 6 - Is user readonly?\n                        // Allow limited rights\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 6 -----\n                    } elseif (\n                        (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] === 1\n                    ) {\n                        // Case 7 - Is user readonly?\n                        // Allow limited rights\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 7 -----\n                    } elseif (\n                        (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] === 1\n                    ) {\n                        // Case 8 - Is user allowed to access?\n                        // Allow rights\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 8 -----\n                    } elseif (($user_is_included_in_role === false && $item_is_restricted_to_role === true)\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 9 - Is this item limited to Users or Groups? Is current user in this list?\n                        // If no then Allow none\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 9 -----\n                    } else {\n                        // Define the access based upon setting on folder\n                        // 0 -> no access to item\n                        // 10 -> appears in list but no view\n                        // 20 -> can view without edit (no copy) or move or delete\n                        // 30 -> can view without edit (no copy) or delete but can move\n                        // 40 -> can edit but not move and not delete\n                        // 50 -> can edit and delete but not move\n                        // 60 -> can edit and move but not delete\n                        // 70 -> can edit and move\n                        if ((int) $accessLevel === 0) {\n                            $right = 0;\n                        } elseif ((10 <= (int) $accessLevel) && ((int) $accessLevel < 20)) {\n                            $right = 20;\n                        } elseif ((20 <= (int) $accessLevel) && ((int) $accessLevel < 30)) {\n                            $right = 60;\n                        } elseif ((int) $accessLevel === 30) {\n                            $right = 70;\n                        } else {\n                            $right = 10;\n                        }\n                    }\n\n                    // Now finalize the data to send back\n                    $html_json[$record['id']]['rights'] = $right;\n                    $html_json[$record['id']]['perso'] = 'fa-tag mi-red';\n                    $html_json[$record['id']]['sk'] = $itemIsPersonal === true ? 1 : 0;\n                    $html_json[$record['id']]['display'] = $right > 0 ? 1 : 0;\n                    $html_json[$record['id']]['open_edit'] = in_array($right, array(40, 50, 60, 70)) === true ? 1 : 0;\n                    $html_json[$record['id']]['canMove'] = in_array($right, array(30, 60, 70)) === true ? 1 : 0;\n\n                    //*************** */\n\n                    // Build array with items\n                    array_push(\n                        $itemsIDList,\n                        array(\n                            'id' => (int) $record['id'],\n                            //'display' => $displayItem,\n                            'edit' => $html_json[$record['id']]['open_edit'],\n                        )\n                    );\n                }\n                $idManaged = $record['id'];\n            }\n\n            $rights = recupDroitCreationSansComplexite($inputData['id']);\n        }\n\n        // DELETE - 2.1.19 - AND (l.action = 'at_creation' OR (l.action = 'at_modification' AND l.raison LIKE 'at_pw :%'))\n        // count\n        if ((int) $start === 0) {\n            DB::query(\n                'SELECT i.id\n                FROM ' . prefixTable('items') . ' as i\n                INNER JOIN ' . prefixTable('nested_tree') . ' as n ON (i.id_tree = n.id)\n                INNER JOIN ' . prefixTable('log_items') . ' as l ON (i.id = l.id_item)\n                WHERE %l\n                ORDER BY i.label ASC, l.date DESC',\n                $where\n            );\n            $counter_full = DB::count();\n            $uniqueLoadData['counter_full'] = $counter_full;\n        }\n\n        // Check list to be continued status\n        if ($post_nb_items_to_display_once !== 'max' && ($post_nb_items_to_display_once + $start) < $counter_full) {\n            $listToBeContinued = 'yes';\n        } else {\n            $listToBeContinued = 'end';\n        }\n\n        // Prepare returned values\n        $returnValues = array(\n            'html_json' => $html_json,\n            //'folder_requests_psk' => $findPfGroup,\n            'arborescence' => $arr_arbo,\n            'array_items' => $itemsIDList,\n            'error' => $showError,\n            //'saltkey_is_required' => $folderIsPf === true ? 1 : 0,\n            'show_clipboard_small_icons' => isset($SETTINGS['copy_to_clipboard_small_icons']) && (int) $SETTINGS['copy_to_clipboard_small_icons'] === 1 ? 1 : 0,\n            'next_start' => intval($post_nb_items_to_display_once) + intval($start),\n            'list_to_be_continued' => $listToBeContinued,\n            'items_count' => $counter,\n            'counter_full' => $counter_full,\n            'folder_complexity' => (int) $folderComplexity,\n            'categoriesStructure' => $categoriesStructure,\n            'access_level' => $accessLevel,\n            'IsPersonalFolder' => $folderIsPf === true ? 1 : 0,\n            'uniqueLoadData' => json_encode($uniqueLoadData),\n        );\n        // Check if $rights is not null\n        if (count($rights) > 0) {\n            $returnValues = array_merge($returnValues, $rights);\n        }\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n\n        break;\n\n    case 'show_item_password':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Run query\n        $dataItem = DB::queryfirstrow(\n            'SELECT i.pw AS pw, s.share_key AS share_key\n            FROM ' . prefixTable('items') . ' AS i\n            INNER JOIN ' . prefixTable('sharekeys_items') . ' AS s ON (s.object_id = i.id)\n            WHERE user_id = %i AND i.item_key = %s',\n            $_SESSION['user_id'],\n            $inputData['itemKey']\n        );\n\n        // Uncrypt PW\n        if (DB::count() === 0) {\n            // No share key found\n            $pw = '';\n        } else {\n            $pw = doDataDecryption(\n                $dataItem['pw'],\n                decryptUserObjectKey(\n                    $dataItem['share_key'],\n                    $_SESSION['user']['private_key']\n                )\n            );\n        }\n\n        $returnValues = array(\n            'error' => false,\n            'password' => $pw,\n            'password_error' => '',\n        );\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * Get complexity level of a group\n    */\n    case 'get_complixity_level':\n        // get some info about ITEM\n        if (null !== $inputData['itemId'] && empty($inputData['itemId']) === false) {\n            $dataItem = DB::queryfirstrow(\n                'SELECT perso, anyone_can_modify\n                FROM ' . prefixTable('items') . '\n                WHERE id=%i',\n                $inputData['itemId']\n            );\n            \n            /*\n            // is user allowed to access this folder - readonly\n            if (null !== $inputData['folderId'] && empty($inputData['folderId']) === false) {\n                if (\n                    in_array($inputData['folderId'], $_SESSION['read_only_folders']) === true\n                    || in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n                ) {\n                    // check if this item can be modified by anyone\n                    if (isset($SETTINGS['anyone_can_modify']) && (int) $SETTINGS['anyone_can_modify'] === 1) {\n                        if ((int) $dataItem['anyone_can_modify'] !== 1) {\n                            // else return not authorized\n                            $returnValues = array(\n                                'error' => true,\n                                'message' => langHdl('error_not_allowed_to'),\n                            );\n                            echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],$returnValues, 'encode');\n                            break;\n                        }\n                    } else {\n                        // else return not authorized\n                        $returnValues = array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to'),\n                        );\n                        echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],$returnValues, 'encode');\n                        break;\n                    }\n                }\n            }\n            */\n\n            // Lock Item (if already locked), go back and warn\n            $dataTmp = DB::queryFirstRow('SELECT timestamp, user_id FROM ' . prefixTable('items_edition') . ' WHERE item_id = %i', $inputData['itemId']);\n\n            // If token is taken for this Item and delay is passed then delete it.\n            if (\n                isset($SETTINGS['delay_item_edition']) &&\n                $SETTINGS['delay_item_edition'] > 0 && empty($dataTmp['timestamp']) === false &&\n                round(abs(time() - $dataTmp['timestamp']) / 60, 2) > $SETTINGS['delay_item_edition']\n            ) {\n                DB::delete(prefixTable('items_edition'), 'item_id = %i', $inputData['itemId']);\n                //reload the previous data\n                $dataTmp = DB::queryFirstRow(\n                    'SELECT timestamp, user_id FROM ' . prefixTable('items_edition') . ' WHERE item_id = %i',\n                    $inputData['itemId']\n                );\n            }\n\n            // If edition by same user (and token not freed before for any reason, then update timestamp)\n            if (empty($dataTmp['timestamp']) === false && $dataTmp['user_id'] === $_SESSION['user_id']) {\n                DB::update(\n                    prefixTable('items_edition'),\n                    array(\n                        'timestamp' => time(),\n                    ),\n                    'user_id = %i AND item_id = %i',\n                    $_SESSION['user_id'],\n                    $inputData['itemId']\n                );\n                // If no token for this Item, then initialize one\n            } elseif (empty($dataTmp[0])) {\n                DB::insert(\n                    prefixTable('items_edition'),\n                    array(\n                        'timestamp' => time(),\n                        'item_id' => $inputData['itemId'],\n                        'user_id' => (int) $_SESSION['user_id'],\n                    )\n                );\n                // Edition not possible\n            } else {\n                $returnValues = array(\n                    'error' => true,\n                    'message' => langHdl('error_no_edition_possible_locked'),\n                );\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    $returnValues,\n                    'encode'\n                );\n                break;\n            }\n        }\n\n        // do query on this folder\n        $data_this_folder = DB::queryFirstRow(\n            'SELECT id, personal_folder, title\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %s',\n            $inputData['folderId']\n        );\n\n        // check if user can perform this action\n        if (\n            null !== $inputData['context']\n            && empty($inputData['context']) === false\n        ) {\n            if (\n                $inputData['context'] === 'create_folder'\n                || $inputData['context'] === 'edit_folder'\n                || $inputData['context'] === 'delete_folder'\n                || $inputData['context'] === 'copy_folder'\n            ) {\n                if (\n                    (int) $_SESSION['is_admin'] !== 1\n                    && ((int) $_SESSION['user_manager'] !== 1)\n                    && (isset($SETTINGS['enable_user_can_create_folders'])\n                        && (int) $SETTINGS['enable_user_can_create_folders'] !== 1)\n                    && ((int) $data_this_folder['personal_folder'] !== 1 && $data_this_folder['title'] !== $_SESSION['user_id'])   // take into consideration if this is a personal folder\n                ) {\n                    $returnValues = array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    );\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        $returnValues,\n                        'encode'\n                    );\n                    break;\n                }\n            }\n        }\n\n        // Get required Complexity for this Folder\n        $visibilite = '';\n        $data = DB::queryFirstRow(\n            'SELECT m.valeur, n.personal_folder\n            FROM ' . prefixTable('misc') . ' AS m\n            INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (m.intitule = n.id)\n            WHERE type=%s AND intitule = %s',\n            'complex',\n            $inputData['folderId']\n        );\n\n        if (isset($data['valeur']) === true && (empty($data['valeur']) === false || $data['valeur'] === '0')) {\n            $complexity = TP_PW_COMPLEXITY[$data['valeur']][1];\n            $folder_is_personal = (int) $data['personal_folder'];\n\n            // Prepare Item actual visibility (what Users/Roles can see it)\n            $rows = DB::query(\n                'SELECT t.title\n                FROM ' . prefixTable('roles_values') . ' as v\n                INNER JOIN ' . prefixTable('roles_title') . ' as t ON (v.role_id = t.id)\n                WHERE v.folder_id = %i\n                GROUP BY title',\n                $inputData['folderId']\n            );\n            foreach ($rows as $record) {\n                if (empty($visibilite)) {\n                    $visibilite = $record['title'];\n                } else {\n                    $visibilite .= ' - ' . $record['title'];\n                }\n            }\n        } else {\n            $complexity = langHdl('not_defined');\n\n            // if not defined, then previous query failed and personal_folder is null\n            // do new query to know if current folder is pf\n            $data_pf = DB::queryFirstRow(\n                'SELECT personal_folder\n                FROM ' . prefixTable('nested_tree') . '\n                WHERE id = %s',\n                $inputData['folderId']\n            );\n            \n            $folder_is_personal = $data_pf !== null ? (int) $data_pf['personal_folder'] : 0;\n            \n            $visibilite = $_SESSION['name'] . ' ' . $_SESSION['lastname'] . ' (' . $_SESSION['login'] . ')';\n        }\n\n        recupDroitCreationSansComplexite($inputData['folderId']);\n\n        // get list of roles\n        $listOptionsForUsers = array();\n        $listOptionsForRoles = array();\n        $rows = DB::query(\n            'SELECT r.role_id AS role_id, t.title AS title\n            FROM ' . prefixTable('roles_values') . ' AS r\n            INNER JOIN ' . prefixTable('roles_title') . ' AS t ON (r.role_id = t.id)\n            WHERE r.folder_id = %i',\n            $inputData['folderId']\n        );\n        foreach ($rows as $record) {\n            array_push(\n                $listOptionsForRoles,\n                array(\n                    'id' => $record['role_id'],\n                    'title' => $record['title'],\n                )\n            );\n            $rows2 = DB::query(\n                'SELECT id, login, fonction_id, email, name, lastname\n                FROM ' . prefixTable('users') . '\n                WHERE admin = 0 AND fonction_id is not null'\n            );\n            foreach ($rows2 as $record2) {\n                foreach (explode(';', $record2['fonction_id']) as $role) {\n                    if (\n                        array_search($record2['id'], array_column($listOptionsForUsers, 'id')) === false\n                        && $role === $record['role_id']\n                    ) {\n                        array_push(\n                            $listOptionsForUsers,\n                            array(\n                                'id' => $record2['id'],\n                                'login' => $record2['login'],\n                                'name' => $record2['name'] . ' ' . $record2['lastname'],\n                                'email' => $record2['email'],\n                            )\n                        );\n                    }\n                }\n            }\n        }\n        \n        // Get access level for this folder\n        $accessLevel = 20;\n        if ($folder_is_personal === 0) {\n            $arrTmp = [];\n            foreach ($_SESSION['user_roles'] as $role) {\n                //db::debugmode(true);\n                $access = DB::queryFirstRow(\n                    'SELECT type\n                    FROM ' . prefixTable('roles_values') . '\n                    WHERE role_id = %i AND folder_id = %i',\n                    $role,\n                    $inputData['folderId']\n                );\n                //db::debugmode(false);\n                if (DB::count()>0) {\n                    if ($access['type'] === 'R') {\n                        array_push($arrTmp, 10);\n                    } elseif ($access['type'] === 'W') {\n                        array_push($arrTmp, 30);\n                    } elseif ($access['type'] === 'ND') {\n                        array_push($arrTmp, 20);\n                    } elseif ($access['type'] === 'NE') {\n                        array_push($arrTmp, 10);\n                    } elseif ($access['type'] === 'NDNE') {\n                        array_push($arrTmp, 15);\n                    } else {\n                        // Ensure to give access Right if allowed folder\n                        if (in_array($inputData['id'], $_SESSION['groupes_visibles']) === true) {\n                            array_push($arrTmp, 30);\n                        } else {\n                            array_push($arrTmp, 0);\n                        }\n                    }\n                }\n            }\n            // 3.0.0.0 - changed  MIN to MAX\n            $accessLevel = count($arrTmp) > 0 ? max($arrTmp) : $accessLevel;\n        } elseif ($folder_is_personal === 1) {\n            $accessLevel = 30;\n        }\n\n        $returnValues = array(\n            'folderId' => (int) $inputData['folderId'],\n            'error' => false,\n            'val' => $data !== null ? (int) $data['valeur'] : 0,\n            'visibility' => $visibilite,\n            'complexity' => $complexity,\n            'personal' => $folder_is_personal,\n            'usersList' => $listOptionsForUsers,\n            'rolesList' => $listOptionsForRoles,\n            'setting_restricted_to_roles' => isset($SETTINGS['restricted_to_roles']) === true\n                && (int) $SETTINGS['restricted_to_roles'] === 1 ? 1 : 0,\n            'itemAccessRight' => isset($accessLevel) === true ? $accessLevel : '',\n        );\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * DELETE attached file from an item\n    */\n    case 'delete_attached_file':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $fileId = filter_var($dataReceived['file_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Get some info before deleting\n        $data = DB::queryFirstRow(\n            'SELECT name, id_item, file\n            FROM ' . prefixTable('files') . '\n            WHERE id = %i',\n            $fileId\n        );\n\n        // Load item data\n        $data_item = DB::queryFirstRow(\n            'SELECT id_tree\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $data['id_item']\n        );\n\n        // Check that user can access this folder\n        if (in_array($data_item['id_tree'], $_SESSION['groupes_visibles']) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array('error' => 'ERR_FOLDER_NOT_ALLOWED'),\n                'encode'\n            );\n            break;\n        }\n\n        if (empty($data['id_item']) === false) {\n            // Delete from FILES table\n            DB::delete(\n                prefixTable('files'),\n                'id = %i',\n                $fileId\n            );\n\n            // Update the log\n            logItems(\n                $SETTINGS,\n                (int) $data['id_item'],\n                $data['name'],\n                $_SESSION['user_id'],\n                'at_modification',\n                $_SESSION['login'],\n                'at_del_file : ' . $data['name']\n            );\n\n            // DElete sharekeys\n            DB::delete(\n                prefixTable('sharekeys_files'),\n                'object_id = %i',\n                $fileId\n            );\n\n            // Delete file from server\n            fileDelete($SETTINGS['path_to_upload_folder'] . '/' . TP_FILE_PREFIX . base64_decode($data['file']), $SETTINGS);\n        }\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n    * FUNCTION\n    * Launch an action when clicking on a quick icon\n    * $action = 0 => Make not favorite\n    * $action = 1 => Make favorite\n    */\n    case 'action_on_quick_icon':\n        // Check KEY and rights\n        if (\n            $inputData['key'] !== $_SESSION['key']\n            || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])\n        ) {\n            // error\n            exit;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $inputData['action'] = (int) filter_var($dataReceived['action'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        if ((int) $inputData['action'] === 0) {\n            // Add new favourite\n            array_push($_SESSION['favourites'], $inputData['itemId']);\n            //print_r($_SESSION['favourites']);\n            DB::update(\n                prefixTable('users'),\n                array(\n                    'favourites' => implode(';', $_SESSION['favourites']),\n                ),\n                'id = %i',\n                $_SESSION['user_id']\n            );\n            // Update SESSION with this new favourite\n            $data = DB::queryfirstrow(\n                'SELECT label,id_tree\n                FROM ' . prefixTable('items') . '\n                WHERE id = %i',\n                $inputData['itemId']\n            );\n            $_SESSION['favourites_tab'][$inputData['itemId']] = array(\n                'label' => $data['label'],\n                'url' => 'index.php?page=items&amp;group=' . $data['id_tree'] . '&amp;id=' . $inputData['itemId'],\n            );\n        } elseif ((int) $inputData['action'] === 1) {\n            // delete from session\n            foreach ($_SESSION['favourites'] as $key => $value) {\n                if ($_SESSION['favourites'][$key] === $inputData['itemId']) {\n                    unset($_SESSION['favourites'][$key]);\n                    break;\n                }\n            }\n            // delete from DB\n            DB::update(\n                prefixTable('users'),\n                array(\n                    'favourites' => implode(';', $_SESSION['favourites']),\n                ),\n                'id = %i',\n                $_SESSION['user_id']\n            );\n            // refresh session fav list\n            if (isset($_SESSION['favourites_tab'])) {\n                foreach ($_SESSION['favourites_tab'] as $key => $value) {\n                    if ($key === $inputData['id']) {\n                        unset($_SESSION['favourites_tab'][$key]);\n                        break;\n                    }\n                }\n            }\n        }\n        break;\n\n        /*\n    * CASE\n    * Move an ITEM\n    */\n    case 'move_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true || isset($SETTINGS['pwd_maximum_length']) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $inputData['folderId'] = (int) filter_var($dataReceived['folder_id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // get data about item\n        $dataSource = DB::queryfirstrow(\n            'SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n            FROM ' . prefixTable('items') . ' as i\n            INNER JOIN ' . prefixTable('nested_tree') . ' as f ON (i.id_tree=f.id)\n            WHERE i.id=%i',\n            $inputData['itemId']\n        );\n\n        // get data about new folder\n        $dataDestination = DB::queryfirstrow(\n            'SELECT personal_folder, title\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $inputData['folderId']\n        );\n\n        // Check that user can access this folder\n        if (\n            in_array($dataSource['id_tree'], $_SESSION['groupes_visibles']) === false\n            || in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n            //|| (int) $dataSource['personal_folder'] === (int) $dataDestination['personal_folder']\n        ) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Manage possible cases\n        if ((int) $dataSource['personal_folder'] === 0 && (int) $dataDestination['personal_folder'] === 0) {\n            // Previous is non personal folder and new too\n            // Just update is needed. Item key is the same\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n            // ---\n            // ---\n        } elseif ((int) $dataSource['personal_folder'] === 0 && (int) $dataDestination['personal_folder'] === 1) {\n            // Source is public and destination is personal\n            // Decrypt and remove all sharekeys (items, fields, files)\n            // Encrypt only for the user\n\n            // Remove all item sharekeys items\n            DB::delete(\n                prefixTable('sharekeys_items'),\n                'object_id = %i AND user_id != %i',\n                $inputData['itemId'],\n                $_SESSION['user_id']\n            );\n\n            // Remove all item sharekeys fields\n            // Get fields for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('categories_items') . '\n                WHERE item_id = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $field) {\n                DB::delete(\n                    prefixTable('sharekeys_fields'),\n                    'object_id = %i AND user_id != %i',\n                    $field['id'],\n                    $_SESSION['user_id']\n                );\n            }\n\n            // Remove all item sharekeys files\n            // Get FILES for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('files') . '\n                WHERE id_item = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $attachment) {\n                DB::delete(\n                    prefixTable('sharekeys_files'),\n                    'object_id = %i AND user_id != %i',\n                    $attachment['id'],\n                    $_SESSION['user_id']\n                );\n            }\n\n            // update pw\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                    'perso' => 1,\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n            // ---\n            // ---\n        } elseif ((int) $dataSource['personal_folder'] === 1 && (int) $dataDestination['personal_folder'] === 1) {\n            // If previous is personal folder and new is personal folder too => no key exist on item\n            // just update is needed. Item key is the same\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n            // ---\n            // ---\n        } elseif ((int) $dataSource['personal_folder'] === 1 && (int) $dataDestination['personal_folder'] === 0) {\n            // If previous is personal folder and new is not personal folder => no key exist on item => add new\n            // Create keys for all users\n\n            // Get the ITEM object key for the user\n            $userKey = DB::queryFirstRow(\n                'SELECT share_key\n                FROM ' . prefixTable('sharekeys_items') . '\n                WHERE user_id = %i AND object_id = %i',\n                $_SESSION['user_id'],\n                $inputData['itemId']\n            );\n            if (DB::count() > 0) {\n                $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                // This is a public object\n                $users = DB::query(\n                    'SELECT id, public_key\n                    FROM ' . prefixTable('users') . '\n                    WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                    AND public_key != \"\"'\n                );\n                foreach ($users as $user) {\n                    // Insert in DB the new object key for this item by user\n                    DB::insert(\n                        prefixTable('sharekeys_items'),\n                        array(\n                            'object_id' => $inputData['itemId'],\n                            'user_id' => (int) $user['id'],\n                            'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                        )\n                    );\n                }\n            }\n\n            // Get the FIELDS object key for the user\n            // Get fields for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('categories_items') . '\n                WHERE item_id = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $field) {\n                $userKey = DB::queryFirstRow(\n                    'SELECT share_key\n                    FROM ' . prefixTable('sharekeys_fields') . '\n                    WHERE user_id = %i AND object_id = %i',\n                    $_SESSION['user_id'],\n                    $field['id']\n                );\n                if (DB::count() > 0) {\n                    $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                    // This is a public object\n                    $users = DB::query(\n                        'SELECT id, public_key\n                        FROM ' . prefixTable('users') . '\n                        WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                        AND public_key != \"\"'\n                    );\n                    foreach ($users as $user) {\n                        // Insert in DB the new object key for this item by user\n                        DB::insert(\n                            prefixTable('sharekeys_fields'),\n                            array(\n                                'object_id' => $field['id'],\n                                'user_id' => (int) $user['id'],\n                                'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                            )\n                        );\n                    }\n                }\n            }\n\n            // Get the FILE object key for the user\n            // Get FILES for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('files') . '\n                WHERE id_item = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $attachment) {\n                $userKey = DB::queryFirstRow(\n                    'SELECT share_key\n                    FROM ' . prefixTable('sharekeys_files') . '\n                    WHERE user_id = %i AND object_id = %i',\n                    $_SESSION['user_id'],\n                    $attachment['id']\n                );\n                if (DB::count() > 0) {\n                    $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                    // This is a public object\n                    $users = DB::query(\n                        'SELECT id, public_key\n                        FROM ' . prefixTable('users') . '\n                        WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                        AND public_key != \"\"'\n                    );\n                    foreach ($users as $user) {\n                        // Insert in DB the new object key for this item by user\n                        DB::insert(\n                            prefixTable('sharekeys_files'),\n                            array(\n                                'object_id' => $attachment['id'],\n                                'user_id' => (int) $user['id'],\n                                'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                            )\n                        );\n                    }\n                }\n            }\n\n            // update item\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                    'perso' => 0,\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n        }\n\n        // Log item moved\n        logItems(\n            $SETTINGS,\n            (int) $inputData['itemId'],\n            $dataSource['label'],\n            $_SESSION['user_id'],\n            'at_modification',\n            $_SESSION['login'],\n            'at_moved : ' . $dataSource['title'] . ' -> ' . $dataDestination['title']\n        );\n\n        // Update cache table\n        updateCacheTable(\n            'update_value',\n            $SETTINGS,\n            (int) $inputData['itemId']\n        );\n\n        $returnValues = array(\n            'error' => '',\n            'message' => '',\n            'from_folder' => $dataSource['id_tree'],\n            'to_folder' => $inputData['folderId'],\n        );\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * MASSIVE Move an ITEM\n    */\n    case 'mass_move_items':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true || isset($SETTINGS['pwd_maximum_length']) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $inputData['folderId'] = filter_var($dataReceived['folder_id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_item_ids = filter_var($dataReceived['item_ids'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n        // loop on items to move\n        foreach (explode(';', $post_item_ids) as $item_id) {\n            if (empty($item_id) === false) {\n                // get data about item\n                $dataSource = DB::queryfirstrow(\n                    'SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                    FROM ' . prefixTable('items') . ' as i\n                    INNER JOIN ' . prefixTable('nested_tree') . ' as f ON (i.id_tree=f.id)\n                    WHERE i.id=%i',\n                    $item_id\n                );\n\n                // Check that user can access this folder\n                if (\n                    in_array($dataSource['id_tree'], $_SESSION['groupes_visibles']) === false\n                    || in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n                ) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to'),\n                        ),\n                        'encode'\n                    );\n                    exit;\n                }\n\n                // get data about new folder\n                $dataDestination = DB::queryfirstrow(\n                    'SELECT personal_folder, title FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n                    $inputData['folderId']\n                );\n\n                // previous is non personal folder and new too\n                if (\n                    (int) $dataSource['personal_folder'] === 0\n                    && (int) $dataDestination['personal_folder'] === 0\n                ) {\n                    // just update is needed. Item key is the same\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                        ),\n                        'id = %i',\n                        $item_id\n                    );\n                    // ---\n                    // ---\n                    // ---\n                } elseif (\n                    (int) $dataSource['personal_folder'] === 0\n                    && (int) $dataDestination['personal_folder'] === 1\n                ) {\n                    // Source is public and destination is personal\n                    // Decrypt and remove all sharekeys (items, fields, files)\n                    // Encrypt only for the user\n\n                    // Remove all item sharekeys items\n                    DB::delete(\n                        prefixTable('sharekeys_items'),\n                        'object_id = %i AND user_id != %i',\n                        $item_id,\n                        $_SESSION['user_id']\n                    );\n\n                    // Remove all item sharekeys fields\n                    // Get fields for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('categories_items') . '\n                        WHERE item_id = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $field) {\n                        DB::delete(\n                            prefixTable('sharekeys_fields'),\n                            'object_id = %i AND user_id != %i',\n                            $field['id'],\n                            $_SESSION['user_id']\n                        );\n                    }\n\n                    // Remove all item sharekeys files\n                    // Get FILES for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('files') . '\n                        WHERE id_item = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $attachment) {\n                        DB::delete(\n                            prefixTable('sharekeys_files'),\n                            'object_id = %i AND user_id != %i',\n                            $attachment['id'],\n                            $_SESSION['user_id']\n                        );\n                    }\n\n                    // update pw\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                            'perso' => 1,\n                        ),\n                        'id = %i',\n                        $item_id\n                    );\n                    // ---\n                    // ---\n                    // ---\n                } elseif (\n                    (int) $dataSource['personal_folder'] === 1\n                    && (int) $dataDestination['personal_folder'] === 1\n                ) {\n                    // If previous is personal folder and new is personal folder too => no key exist on item\n                    // just update is needed. Item key is the same\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                        ),\n                        'id = %i',\n                        $item_id\n                    );\n                    // ---\n                    // ---\n                    // ---\n                } elseif (\n                    (int) $dataSource['personal_folder'] === 1\n                    && (int) $dataDestination['personal_folder'] === 0\n                ) {\n                    // If previous is personal folder and new is not personal folder => no key exist on item => add new\n                    // Create keys for all users\n\n                    // Get the ITEM object key for the user\n                    $userKey = DB::queryFirstRow(\n                        'SELECT share_key\n                        FROM ' . prefixTable('sharekeys_items') . '\n                        WHERE user_id = %i AND object_id = %i',\n                        $_SESSION['user_id'],\n                        $item_id\n                    );\n                    if (DB::count() > 0) {\n                        $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                        // This is a public object\n                        $users = DB::query(\n                            'SELECT id, public_key\n                            FROM ' . prefixTable('users') . '\n                            WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                            AND public_key != \"\"'\n                        );\n                        foreach ($users as $user) {\n                            // Insert in DB the new object key for this item by user\n                            DB::insert(\n                                prefixTable('sharekeys_items'),\n                                array(\n                                    'object_id' => $item_id,\n                                    'user_id' => (int) $user['id'],\n                                    'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                                )\n                            );\n                        }\n                    }\n\n                    // Get the FIELDS object key for the user\n                    // Get fields for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('categories_items') . '\n                        WHERE item_id = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $field) {\n                        $userKey = DB::queryFirstRow(\n                            'SELECT share_key\n                            FROM ' . prefixTable('sharekeys_fields') . '\n                            WHERE user_id = %i AND object_id = %i',\n                            $_SESSION['user_id'],\n                            $field['id']\n                        );\n                        if (DB::count() > 0) {\n                            $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                            // This is a public object\n                            $users = DB::query(\n                                'SELECT id, public_key\n                                FROM ' . prefixTable('users') . '\n                                WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                                AND public_key != \"\"'\n                            );\n                            foreach ($users as $user) {\n                                // Insert in DB the new object key for this item by user\n                                DB::insert(\n                                    prefixTable('sharekeys_fields'),\n                                    array(\n                                        'object_id' => $field['id'],\n                                        'user_id' => (int) $user['id'],\n                                        'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                                    )\n                                );\n                            }\n                        }\n                    }\n\n                    // Get the FILE object key for the user\n                    // Get FILES for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('files') . '\n                        WHERE id_item = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $attachment) {\n                        $userKey = DB::queryFirstRow(\n                            'SELECT share_key\n                            FROM ' . prefixTable('sharekeys_files') . '\n                            WHERE user_id = %i AND object_id = %i',\n                            $_SESSION['user_id'],\n                            $attachment['id']\n                        );\n                        if (DB::count() > 0) {\n                            $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                            // This is a public object\n                            $users = DB::query(\n                                'SELECT id, public_key\n                                FROM ' . prefixTable('users') . '\n                                WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                                AND public_key != \"\"'\n                            );\n                            foreach ($users as $user) {\n                                // Insert in DB the new object key for this item by user\n                                DB::insert(\n                                    prefixTable('sharekeys_files'),\n                                    array(\n                                        'object_id' => $attachment['id'],\n                                        'user_id' => (int) $user['id'],\n                                        'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                                    )\n                                );\n                            }\n                        }\n                    }\n\n                    // update item\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                            'perso' => 0,\n                        ),\n                        'id=%i',\n                        $item_id\n                    );\n                }\n                // Log item moved\n                logItems(\n                    $SETTINGS,\n                    (int) $item_id,\n                    $dataSource['label'],\n                    $_SESSION['user_id'],\n                    'at_modification',\n                    $_SESSION['login'],\n                    'at_moved : ' . $dataSource['title'] . ' -> ' . $dataDestination['title']\n                );\n            }\n        }\n\n        // reload cache table\n        require_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n        updateCacheTable('reload', $SETTINGS, null);\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n        * CASE\n        * MASSIVE Delete an item\n    */\n    case 'mass_delete_items':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n$SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $post_item_ids = filter_var($dataReceived['item_ids'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n        // perform a check in case of Read-Only user creating an item in his PF\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // loop on items to move\n        foreach (explode(';', $post_item_ids) as $item_id) {\n            if (empty($item_id) === false) {\n                // get info\n                $dataSource = DB::queryfirstrow(\n                    'SELECT label, id_tree\n                    FROM ' . prefixTable('items') . '\n                    WHERE id=%i',\n                    $item_id\n                );\n\n                // Check that user can access this folder\n                if (\n                    in_array($dataSource['id_tree'], $_SESSION['groupes_visibles']) === false\n                ) {\n                    echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to'),\n                        ),\n                        'encode'\n                    );\n                    break;\n                }\n\n                // delete item consists in disabling it\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'inactif' => '1',\n                    ),\n                    'id = %i',\n                    $item_id\n                );\n\n                // log\n                logItems(\n                    $SETTINGS,\n                    (int) $item_id,\n                    $dataSource['label'],\n                    $_SESSION['user_id'],\n                    'at_delete',\n                    $_SESSION['login']\n                );\n\n                // Update CACHE table\n                updateCacheTable('delete_value', $SETTINGS, (int) $item_id);\n            }\n        }\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        break;\n\n        /*\n        * CASE\n        * Send email\n    */\n    case 'send_email':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Prepare variables\n        $inputData['id'] = filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['receipt'] = filter_var($dataReceived['receipt'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['cat'] = filter_var($dataReceived['cat'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $post_content = isset($_POST['name']) === true ? explode(',', filter_input(INPUT_POST, 'content', FILTER_SANITIZE_FULL_SPECIAL_CHARS)) : '';\n\n        // get links url\n        if (empty($SETTINGS['email_server_url']) === true) {\n            $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n        }\n        if ($inputData['cat'] === 'request_access_to_author') {\n            // Variables\n            $dataAuthor = DB::queryfirstrow('SELECT email,login FROM ' . prefixTable('users') . ' WHERE id = ' . $post_content[1]);\n            $dataItem = DB::queryfirstrow('SELECT label, id_tree FROM ' . prefixTable('items') . ' WHERE id = ' . $post_content[0]);\n\n            // Get path\n            $path = geItemReadablePath(\n                (int) $dataItem['id_tree'],\n                $dataItem['label'],\n                $SETTINGS\n            );\n\n            // Prepare email\n            prepareSendingEmail(\n                langHdl('email_request_access_subject'),\n                str_replace(\n                    array('#tp_item_author#', '#tp_user#', '#tp_item#'),\n                    array(' ' . addslashes($dataAuthor['login']), addslashes($_SESSION['login']), $path),\n                    langHdl('email_request_access_mail')\n                ),\n                $dataAuthor['email'],\n                \"\",\n                $SETTINGS\n            );\n        } elseif ($inputData['cat'] === 'share_this_item') {\n            $dataItem = DB::queryfirstrow(\n                'SELECT label,id_tree\n                FROM ' . prefixTable('items') . '\n                WHERE id= %i',\n                $inputData['id']\n            );\n\n            // Get path\n            $path = geItemReadablePath(\n                (int) $dataItem['id_tree'],\n                $dataItem['label'],\n                $SETTINGS\n            );\n\n            // Prepare email\n            prepareSendingEmail(\n                langHdl('email_share_item_subject'),\n                str_replace(\n                    array(\n                        '#tp_link#',\n                        '#tp_user#',\n                        '#tp_item#',\n                    ),\n                    array(\n                        empty($SETTINGS['email_server_url']) === false ?\n                            $SETTINGS['email_server_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $inputData['id'] : $SETTINGS['cpassman_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $inputData['id'],\n                        addslashes($_SESSION['login']),\n                        addslashes($path),\n                    ),\n                    langHdl('email_share_item_mail')\n                ),\n                $inputData['receipt'],\n                \"\",\n                $SETTINGS\n            );\n        }\n\n        break;\n\n    /*\n    * CASE\n    * manage notification of an Item\n    */\n    /*\n    case 'notify_a_user':\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[{\"error\" : \"something_wrong\"}]';\n            break;\n        }\n        if ($inputData['notifyType'] === 'on_show') {\n            // Check if values already exist\n            $data = DB::queryfirstrow(\n                'SELECT notification FROM ' . prefixTable('items') . ' WHERE id = %i',\n                $inputData['itemId']\n            );\n            $notifiedUsers = explode(';', $data['notification']);\n            // User is not in actual notification list\n            if ($inputData['status'] === 'true' && !in_array($inputData['userId'], $notifiedUsers)) {\n                // User is not in actual notification list and wants to be notified\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'notification' => empty($data['notification']) ?\n                            $inputData['userId'] . ';'\n                            : $data['notification'] . $inputData['userId'] ,\n                    ),\n                    'id=%i',\n                    $inputData['itemId']\n                );\n                echo '[{\"error\" : \"\", \"new_status\":\"true\"}]';\n                break;\n            }\n            if ($inputData['status'] === 'false' && in_array($inputData['userId'], $notifiedUsers)) {\n                // TODO : delete user from array and store in DB\n                // User is in actual notification list and doesn't want to be notified\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'notification' => empty($data['notification']) ?\n                        $inputData['userId']\n                            : $data['notification'] . ';' . $inputData['userId'],\n                    ),\n                    'id=%i',\n                    $inputData['itemId']\n                );\n            }\n        }\n        break;\n    */\n\n        /*\n    * CASE\n    * Item History Log - add new entry\n    */\n    case 'history_entry_add':\n        if ($inputData['key'] !== $_SESSION['key']) {\n            $data = array('error' => 'key_is_wrong');\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $data,\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        // Get all informations for this item\n        $dataItem = DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('items') . ' as i\n            INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n            WHERE i.id=%i AND l.action = %s',\n            $dataReceived['item_id'],\n            'at_creation'\n        );\n        // check that actual user can access this item\n        $restrictionActive = true;\n        $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        if (in_array($_SESSION['user_id'], $restrictedTo)) {\n            $restrictionActive = false;\n        }\n        if (empty($dataItem['restricted_to'])) {\n            $restrictionActive = false;\n        }\n\n        if (((in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) && ((int) $dataItem['perso'] === 0 || ((int) $dataItem['perso'] === 1 && $dataItem['id_user'] === $_SESSION['user_id'])) && $restrictionActive === false)\n            || (isset($SETTINGS['anyone_can_modify']) && (int) $SETTINGS['anyone_can_modify'] === 1 && (int) $dataItem['anyone_can_modify'] === 1 && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || (int) $_SESSION['is_admin'] === 1) && $restrictionActive === false)\n            || (is_array($_SESSION['list_folders_limited'][$inputData['folderId']]) === true && in_array($inputData['id'], $_SESSION['list_folders_limited'][$inputData['folderId']]) === true)\n        ) {\n            // Query\n            logItems(\n                $SETTINGS,\n                (int) $dataReceived['item_id'],\n                $dataItem['label'],\n                $_SESSION['user_id'],\n                'at_manual',\n                $_SESSION['login'],\n                htmlspecialchars_decode($dataReceived['label'], ENT_QUOTES)\n            );\n            // Prepare new line\n            $data = DB::queryfirstrow(\n                'SELECT * FROM ' . prefixTable('log_items') . ' WHERE id_item = %i ORDER BY date DESC',\n                $dataReceived['item_id']\n            );\n            $historic = date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], $data['date']) . ' - ' . $_SESSION['login'] . ' - ' . langHdl($data['action']) . ' - ' . $data['raison'];\n            // send back\n            $data = array(\n                'error' => '',\n                'new_line' => '<br>' . addslashes($historic),\n            );\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $data,\n                'encode'\n            );\n        } else {\n            $data = array('error' => 'something_wrong');\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $data,\n                'encode'\n            );\n            break;\n        }\n        break;\n\n        /*\n    * CASE\n    * Free Item for Edition\n    */\n    case 'free_item_for_edition':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n        // Do\n        DB::delete(\n            prefixTable('items_edition'),\n            'item_id = %i',\n            $inputData['id']\n        );\n        break;\n\n        /*\n    * CASE\n    * Check if Item has been changed since loaded\n    */\n    /*\n    case 'is_item_changed':\n        $data = DB::queryFirstRow(\n            'SELECT date FROM ' . prefixTable('log_items') . ' WHERE action = %s AND id_item = %i ORDER BY date DESC',\n            'at_modification',\n            $inputData['itemId']\n        );\n        // Check if it's in a personal folder. If yes, then force complexity overhead.\n        if ((int) $data['date'] > (int) $inputData['timestamp']) {\n            echo '{ \"modified\" : \"1\" }';\n        } else {\n            echo '{ \"modified\" : \"0\" }';\n        }\n        break;\n        */\n\n        /*\n    * CASE\n    * Check if Item has been changed since loaded\n    */\n    case 'generate_OTV_url':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n\n        // delete all existing old otv codes\n        $rows = DB::query('SELECT id FROM ' . prefixTable('otv') . ' WHERE timestamp < ' . (time() - $SETTINGS['otv_expiration_period'] * 86400));\n        foreach ($rows as $record) {\n            DB::delete(prefixTable('otv'), 'id=%i', $record['id']);\n        }\n\n        // generate session\n        $otv_code = GenerateCryptKey(32, false, true, true, false, true, $SETTINGS);\n        $otv_key = GenerateCryptKey(32, false, true, true, false, true, $SETTINGS);\n\n        // Generate Defuse key\n        $otv_user_code_encrypted = defuse_generate_personal_key($otv_key);\n\n        // check if psk is correct.\n        $otv_key_encoded = defuse_validate_personal_key(\n            $otv_key,\n            $otv_user_code_encrypted\n        );\n\n        // Decrypt the pwd\n        // Should we log a password change?\n        $itemQ = DB::queryFirstRow(\n            'SELECT s.share_key, i.pw\n            FROM ' . prefixTable('items') . ' AS i\n            INNER JOIN ' . prefixTable('sharekeys_items') . ' AS s ON (i.id = s.object_id)\n            WHERE s.user_id = %i AND s.object_id = %i',\n            $_SESSION['user_id'],\n            $inputData['id']\n        );\n        if (DB::count() === 0 || empty($itemQ['pw']) === true) {\n            // No share key found\n            $pw = '';\n        } else {\n            $pw = base64_decode(doDataDecryption(\n                $itemQ['pw'],\n                decryptUserObjectKey(\n                    $itemQ['share_key'],\n                    $_SESSION['user']['private_key']\n                )\n            ));\n        }\n\n        // Encrypt it with DEFUSE using the generated code as key\n        // This is required as the OTV is used by someone without any Teampass account\n        $passwd = cryption(\n            $pw,\n            $otv_key_encoded,\n            'encrypt',\n            $SETTINGS\n        );\n\n        DB::insert(\n            prefixTable('otv'),\n            array(\n                'id' => null,\n                'item_id' => $inputData['id'],\n                'timestamp' => time(),\n                'originator' => intval($_SESSION['user_id']),\n                'code' => $otv_code,\n                'encrypted' => $passwd['string'],\n            )\n        );\n        $newID = DB::insertId();\n\n        // Prepare URL content\n        $otv_session = array(\n            'code' => $otv_code,\n            'key' => $otv_key_encoded,\n            'stamp' => time(),\n        );\n\n        if (isset($SETTINGS['otv_expiration_period']) === false) {\n            $SETTINGS['otv_expiration_period'] = 7;\n        }\n        $url = $SETTINGS['cpassman_url'] . '/index.php?otv=true&' . http_build_query($otv_session);\n        //$exp_date = date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], time() + (intval($SETTINGS['otv_expiration_period']) * 86400));\n\n        echo json_encode(\n            array(\n                'error' => '',\n                'url' => $url,\n                /*'text' => str_replace(\n                    array('#URL#', '#DAY#'),\n                    array('<span id=\\'otv_link\\'>'.$url.'</span>&nbsp;<span class=\\'fa-stack tip\" title=\\''.langHdl('copy').'\\' style=\\'cursor:pointer;\\' id=\\'button_copy_otv_link\\'><span class=\\'fa fa-square fa-stack-2x\\'></span><span class=\\'fa fa-clipboard fa-stack-1x fa-inverse\\'></span></span>', $exp_date),\n                    langHdl('one_time_view_item_url_box')\n                ),*/\n            )\n        );\n        break;\n\n        /*\n    * CASE\n    * Free Item for Edition\n    */\n    case 'image_preview_preparation':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // get file info\n        $file_info = DB::queryfirstrow(\n            'SELECT f.id AS id, f.file AS file, f.name AS name, f.status AS status,\n            f.extension AS extension, f.type AS type,\n            s.share_key AS share_key\n            FROM ' . prefixTable('files') . ' AS f\n            INNER JOIN ' . prefixTable('sharekeys_files') . ' AS s ON (f.id = s.object_id)\n            WHERE s.user_id = %i AND s.object_id = %i',\n            $_SESSION['user_id'],\n            $inputData['id']\n        );\n\n        // Check if user has this sharekey\n        if (empty($file_info['share_key']) === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('no_sharekey_found'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        //$fileName = basename($file_info['name'], '.'.$file_info['extension']);\n\n        // prepare image info\n        $post_title = basename($file_info['name'], '.' . $file_info['extension']);\n        $post_title = isBase64($post_title) === true ?\n            base64_decode($post_title) : $post_title;\n        $image_code = $file_info['file'];\n        //$extension = $file_info['extension'];\n\n        // Get image content\n        $fileContent = decryptFile(\n            $image_code,\n            $SETTINGS['path_to_upload_folder'],\n            decryptUserObjectKey($file_info['share_key'], $_SESSION['user']['private_key'])\n        );\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'filename' => $post_title . '.' . $file_info['extension'],\n                'file_type' => $file_info['type'],\n                'file_content' => $fileContent,\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * Free Item for Edition\n    */\n    /*\n    case 'delete_file':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n\n        // get file info\n        $result = DB::queryfirstrow(\n            'SELECT file FROM ' . prefixTable('files') . ' WHERE id=%i',\n            intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_FULL_SPECIAL_CHARS), 1))\n        );\n\n        fileDelete($SETTINGS['path_to_upload_folder'] . '/' . $result['file'] . $inputData['fileSuffix'], $SETTINGS);\n\n        break;\n        */\n\n        /*\n    * CASE\n    * Get list of users that have access to the folder\n    */\n    case 'check_for_title_duplicate':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n        $duplicate = 0;\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        // Prepare variables\n        $label = htmlspecialchars_decode($dataReceived['label']);\n        $idFolder = $dataReceived['idFolder'];\n\n        // don't check if Personal Folder\n        $data = DB::queryFirstRow('SELECT title FROM ' . prefixTable('nested_tree') . ' WHERE id = %i', $idFolder);\n        if ($data['title'] === $_SESSION['user_id']) {\n            // send data\n            echo '[{\"duplicate\" : \"' . $duplicate . '\" , error\" : \"\"}]';\n        } else {\n            if ($inputData['option'] === 'same_folder') {\n                // case unique folder\n                DB::query(\n                    'SELECT label\n                    FROM ' . prefixTable('items') . '\n                    WHERE id_tree = %i AND label = %s',\n                    $idFolder,\n                    $label\n                );\n            } else {\n                // case complete database\n\n                //get list of personal folders\n                $arrayPf = array();\n                if (empty($row['id']) === false) {\n                    $rows = DB::query(\n                        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i',\n                        '1'\n                    );\n                    foreach ($rows as $record) {\n                        if (!in_array($record['id'], $arrayPf)) {\n                            array_push($arrayPf, $record['id']);\n                        }\n                    }\n                }\n\n                // build WHERE condition\n                $where = new WhereClause('and');\n                $where->add('id_tree = %i', $idFolder);\n                $where->add('label = %s', $label);\n                if (empty($arrayPf) === false) {\n                    $where->add('id_tree NOT IN (' . implode(',', $arrayPf) . ')');\n                }\n\n                DB::query(\n                    'SELECT label\n                    FROM ' . prefixTable('items') . '\n                    WHERE %l',\n                    $where\n                );\n            }\n\n            // count results\n            if (DB::count() > 0) {\n                $duplicate = 1;\n            }\n\n            // send data\n            echo '[{\"duplicate\" : \"' . $duplicate . '\" , \"error\" : \"\"}]';\n        }\n        break;\n\n        /*\n    * CASE\n    * Get list of users that have access to the folder\n    */\n    case 'refresh_visible_folders':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        $arr_data = [];\n        $arr_folders = [];\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Will we show the root folder?\n        if (\n            isset($_SESSION['can_create_root_folder']) === true\n            && (int) $_SESSION['can_create_root_folder'] === 1\n        ) {\n            $arr_data['can_create_root_folder'] = 1;\n        } else {\n            $arr_data['can_create_root_folder'] = 0;\n        }\n\n        // do we have a cache to be used?\n        if (isset($dataReceived['force_refresh_cache']) === true && $dataReceived['force_refresh_cache'] === false) {\n            $goCachedFolders = loadFoldersListByCache('visible_folders', 'folders');\n            if ($goCachedFolders['state'] === true) {\n                $arr_data['folders'] = json_decode($goCachedFolders['data'], true);//print_r($arr_data);\n                // send data\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    [\n                        'error' => 'false',\n                        'html_json' => $arr_data,\n                    ],\n                    'encode'\n                );\n                break;\n            }\n        }\n\n        // Build list of visible folders\n        if (\n            (int) $_SESSION['user_admin'] === 1\n        ) {\n            $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n        }\n\n        if (isset($_SESSION['list_folders_limited']) && count($_SESSION['list_folders_limited']) > 0) {\n            $listFoldersLimitedKeys = is_array($_SESSION['list_folders_limited']) === true ? array_keys($_SESSION['list_folders_limited']) : [];\n        } else {\n            $listFoldersLimitedKeys = array();\n        }\n        // list of items accessible but not in an allowed folder\n        if (\n            isset($_SESSION['list_restricted_folders_for_items'])\n            && count($_SESSION['list_restricted_folders_for_items']) > 0\n        ) {\n            $listRestrictedFoldersForItemsKeys = is_array($_SESSION['list_restricted_folders_for_items']) === true ? array_keys($_SESSION['list_restricted_folders_for_items']) : [];\n        } else {\n            $listRestrictedFoldersForItemsKeys = array();\n        }\n\n        //Build tree\n        require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tree/NestedTree/NestedTree.php';\n        $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n        $tree->rebuild();\n        $folders = $tree->getDescendants();\n        $inc = 0;\n\n        foreach ($folders as $folder) {\n            // Be sure that user can only see folders he/she is allowed to\n            if (\n                in_array($folder->id, $_SESSION['forbiden_pfs']) === false\n                || in_array($folder->id, $_SESSION['groupes_visibles']) === true\n                || in_array($folder->id, $listFoldersLimitedKeys) === true\n                || in_array($folder->id, $listRestrictedFoldersForItemsKeys) === true\n            ) {\n                // Init\n                $displayThisNode = false;\n\n                // Check if any allowed folder is part of the descendants of this node\n                $nodeDescendants = $tree->getDescendants($folder->id, true, false, true);\n                foreach ($nodeDescendants as $node) {\n                    // manage tree counters\n                    if (\n                        in_array($node, array_merge($_SESSION['groupes_visibles'], $_SESSION['list_restricted_folders_for_items'])) === true\n                        || (is_array($listFoldersLimitedKeys) === true && in_array($node, $listFoldersLimitedKeys) === true)\n                        || (is_array($listRestrictedFoldersForItemsKeys) === true && in_array($node, $listRestrictedFoldersForItemsKeys) === true)\n                    ) {\n                        $displayThisNode = true;\n                        //break;\n                    }\n                }\n\n                if ($displayThisNode === true) {\n                    // ALL FOLDERS\n                    // Is this folder disabled?\n                    $disabled = 0;\n                    if (\n                        in_array($folder->id, $_SESSION['groupes_visibles']) === false\n                        || in_array($folder->id, $_SESSION['read_only_folders']) === true\n                        //|| ((int) $_SESSION['user_read_only'] === 1 && in_array($folder->id, $_SESSION['personal_visible_groups']) === false)\n                    ) {\n                        $disabled = 1;\n                    }\n\n                    // Build path\n                    $arbo = $tree->getPath($folder->id, false);\n                    $arr_data['folders'][$inc]['path'] = '';\n                    foreach ($arbo as $elem) {\n                        if (empty($arr_data['folders'][$inc]['path']) === true) {\n                            $arr_data['folders'][$inc]['path'] = htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n                        } else {\n                            $arr_data['folders'][$inc]['path'] .= ' / ' . htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n                        }\n                    }\n\n                    // Build array\n                    $arr_data['folders'][$inc]['id'] = (int) $folder->id;\n                    $arr_data['folders'][$inc]['level'] = (int) $folder->nlevel;\n                    $arr_data['folders'][$inc]['title'] = ((int) $folder->title === (int) $_SESSION['user_id'] && (int) $folder->nlevel === 1) ? htmlspecialchars_decode($_SESSION['login']) : htmlspecialchars_decode($folder->title, ENT_QUOTES);\n                    $arr_data['folders'][$inc]['disabled'] = $disabled;\n                    $arr_data['folders'][$inc]['parent_id'] = (int) $folder->parent_id;\n                    $arr_data['folders'][$inc]['perso'] = (int) $folder->personal_folder;\n                    //array_push($arr_folders, (int) $folder->id);\n\n                    // Is this folder an active folders? (where user can do something)\n                    $is_visible_active = 0;\n                    if (\n                        isset($_SESSION['read_only_folders']) === true\n                        && in_array($folder->id, $_SESSION['read_only_folders']) === true\n                    ) {\n                        $is_visible_active = 1;\n                    }\n                    $arr_data['folders'][$inc]['is_visible_active'] = $is_visible_active;\n\n                    ++$inc;\n                }\n            }\n        }\n        /*\n        if (isset($arr_data['folders']) === true) {\n            // save to cache_tree\n            cacheTreeUserHandler(\n                (int) $_SESSION['user_id'],\n                json_encode($arr_data['folders']),\n                $SETTINGS,\n                'visible_folders',\n            );\n\n            // save to cache_tree\n            cacheTreeUserHandler(\n                (int) $_SESSION['user_id'],\n                json_encode($arr_folders),\n                $SETTINGS,\n                'folders',\n            );\n        }\n        */\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'error' => 'false',\n                'html_json' => $arr_data,\n            ],\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * Get list of users that have access to the folder\n    */\n    case 'refresh_folders_other_info':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        $ret = [];\n        $foldersArray = json_decode($inputData['data'], true);\n        if (is_array($foldersArray) === true && $inputData['data'] !== '[null]') {\n            $rows = DB::query(\n                'SELECT id, categories\n                FROM ' . prefixTable('nested_tree') . '\n                WHERE id IN (%l)',\n                implode(',', $foldersArray)\n            );\n            foreach ($rows as $record) {\n                if (empty($record['categories']) === false) {\n                    array_push(\n                        $ret,\n                        array($record['id'] => json_decode($record['categories'], true))\n                    );\n                }\n            }\n        }\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'error' => '',\n                'result' => $ret,\n            ],\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * Load item history\n    */\n    case 'load_item_history':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array('error' => 'ERR_KEY_NOT_CORRECT'),\n                'encode'\n            );\n            break;\n        }\n        \n        // get item info\n        $dataItem = DB::queryFirstRow(\n            'SELECT *\n            FROM ' . prefixTable('items') . '\n            WHERE id=%i',\n            $inputData['itemId']\n        );\n\n        // get item history\n        $history = [];\n        $rows = DB::query(\n            'SELECT l.date as date, l.action as action, l.raison as raison,\n            u.login as login, u.avatar_thumb as avatar_thumb, u.name as name, u.lastname as lastname\n            FROM ' . prefixTable('log_items') . ' as l\n            LEFT JOIN ' . prefixTable('users') . ' as u ON (l.id_user=u.id)\n            WHERE id_item=%i AND l.action NOT IN (%l)\n            ORDER BY date DESC',\n            $inputData['itemId'],\n            '\"at_shown\",\"at_password_copied\", \"at_shown\", \"at_password_shown\"'\n        );\n        foreach ($rows as $record) {\n            if (empty($record['raison']) === true) {\n                $reason[0] = '';\n            } else {\n                $reason = array_map('trim', explode(':', $record['raison']));\n            }\n            \n            // imported via API\n            if (empty($record['login']) === true) {\n                $record['login'] = langHdl('imported_via_api') . ' [' . $record['raison'] . ']';\n            }\n            \n            // Prepare avatar\n            if (isset($record['avatar_thumb']) && empty($record['avatar_thumb']) === false) {\n                if (file_exists($SETTINGS['cpassman_dir'] . '/includes/avatars/' . $record['avatar_thumb'])) {\n                    $avatar = $SETTINGS['cpassman_url'] . '/includes/avatars/' . $record['avatar_thumb'];\n                } else {\n                    $avatar = $SETTINGS['cpassman_url'] . '/includes/images/photo.jpg';\n                }\n            } else {\n                $avatar = $SETTINGS['cpassman_url'] . '/includes/images/photo.jpg';\n            }\n\n            // Prepare action\n            $action = '';\n            $detail = '';\n            if ($reason[0] === 'at_pw') {\n                $action = langHdl($reason[0]);\n            } elseif ($record['action'] === 'at_manual') {\n                $detail = $reason[0];\n                $action = langHdl($record['action']);\n            } elseif ($reason[0] === 'at_description') {\n                $action = langHdl('description_has_changed');\n            } elseif (empty($record['raison']) === false && $reason[0] !== 'at_creation') {\n                $action = langHdl($reason[0]);\n                if ($reason[0] === 'at_moved') {\n                    $tmp = explode(' -> ', $reason[1]);\n                    $detail = langHdl('from') . ' <span class=\"font-weight-light\">' . $tmp[0] . '</span> ' . langHdl('to') . ' <span class=\"font-weight-light\">' . $tmp[1] . ' </span>';\n                } elseif ($reason[0] === 'at_field') {\n                    $tmp = explode(' => ', $reason[1]);\n                    if (count($tmp) > 1) {\n                        $detail = '<b>' . trim($tmp[0]) . '</b> | ' . langHdl('previous_value') .\n                            ': <span class=\"font-weight-light\">' . trim($tmp[1]) . '</span>';\n                    } else {\n                        $detail = trim($reason[1]);\n                    }\n                } elseif (in_array($reason[0], array('at_restriction', 'at_email', 'at_login', 'at_label', 'at_url', 'at_tag')) === true) {\n                    $tmp = explode(' => ', $reason[1]);\n                    $detail = empty(trim($tmp[0])) === true ?\n                        langHdl('no_previous_value') : langHdl('previous_value') . ': <span class=\"font-weight-light\">' . $tmp[0] . ' </span>';\n                } elseif ($reason[0] === 'at_automatic_del') {\n                    $detail = langHdl($reason[1]);\n                } elseif ($reason[0] === 'at_anyoneconmodify') {\n                    $detail = langHdl($reason[1]);\n                } elseif ($reason[0] === 'at_add_file' || $reason[0] === 'at_del_file') {\n                    $tmp = explode(':', $reason[1]);\n                    $tmp = explode('.', $tmp[0]);\n                    $detail = isBase64($tmp[0]) === true ?\n                        base64_decode($tmp[0]) . '.' . $tmp[1] : $tmp[0];\n                } elseif ($reason[0] === 'at_import') {\n                    $detail = '';\n                } elseif (in_array($reason[0], array('csv', 'pdf')) === true) {\n                    $detail = $reason[0];\n                    $action = langHdl('exported_to_file');\n                } else {\n                    $detail = $reason[0];\n                }\n            } else {\n                $detail = langHdl($record['action']);\n                $action = '';\n            }\n\n            array_push(\n                $history,\n                array(\n                    'avatar' => $avatar,\n                    'login' => $record['login'],\n                    'name' => $record['name'] . ' ' . $record['lastname'],\n                    'date' => date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], (int) $record['date']),\n                    'action' => $action,\n                    'detail' => $detail,\n                )\n            );\n        }\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'error' => '',\n                'history' => $history,\n            ],\n            'encode'\n        );\n\n        break;\n\n    case 'suggest_item_change':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $data_received = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $label = htmlspecialchars_decode($data_received['label'], ENT_QUOTES);\n        $pwd = htmlspecialchars_decode($data_received['password']);\n        $login = htmlspecialchars_decode($data_received['login'], ENT_QUOTES);\n        $email = htmlspecialchars_decode($data_received['email']);\n        $url = htmlspecialchars_decode($data_received['url']);\n        $folder = htmlspecialchars_decode($data_received['folder_id']);\n        $comment = htmlspecialchars_decode($data_received['comment']);\n        $item_id = htmlspecialchars_decode($data_received['item_id']);\n\n        if (empty($pwd)) {\n            $cryptedStuff['encrypted'] = '';\n            $cryptedStuff['objectKey'] = '';\n        } else {\n            $cryptedStuff = doDataEncryption($pwd);\n        }\n\n        // query\n        DB::insert(\n            prefixTable('items_change'),\n            array(\n                'item_id' => $item_id,\n                'label' => $label,\n                'pw' => $encrypt['string'],\n                'login' => $login,\n                'email' => $email,\n                'url' => $url,\n                'description' => '',\n                'comment' => $comment,\n                'folder_id' => $folder,\n                'user_id' => (int) $_SESSION['user_id'],\n                'timestamp' => time(),\n            )\n        );\n        $newID = DB::insertId();\n\n        // Create sharekeys for users\n        storeUsersShareKey(\n            prefixTable('sharekeys_items'),\n            0,\n            (int) $folder,\n            (int) $newID,\n            $cryptedStuff['objectKey'],\n            $SETTINGS\n        );\n\n        // get some info to add to the notification email\n        $resp_user = DB::queryfirstrow(\n            'SELECT login FROM ' . prefixTable('users') . ' WHERE id = %i',\n            $_SESSION['user_id']\n        );\n        $resp_folder = DB::queryfirstrow(\n            'SELECT title FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n            $folder\n        );\n\n        // notify Managers\n        $rows = DB::query(\n            'SELECT email\n            FROM ' . prefixTable('users') . '\n            WHERE `gestionnaire` = %i AND `email` IS NOT NULL',\n            1\n        );\n        foreach ($rows as $record) {\n            sendEmail(\n                langHdl('suggestion_notify_subject'),\n                str_replace(array('#tp_label#', '#tp_user#', '#tp_folder#'), array(addslashes($label), addslashes($resp_user['login']), addslashes($resp_folder['title'])), langHdl('suggestion_notify_body')),\n                $record['email'],\n                $SETTINGS\n            );\n        }\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => '',\n            ),\n            'encode'\n        );\n        break;\n\n    case 'build_list_of_users':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n\n        // Get list of users\n        $usersList = array();\n        $usersString = '';\n        $rows = DB::query('SELECT id,login,email FROM ' . prefixTable('users') . ' ORDER BY login ASC');\n        foreach ($rows as $record) {\n            $usersList[$record['login']] = array(\n                'id' => $record['id'],\n                'login' => $record['login'],\n                'email' => $record['email'],\n            );\n            $usersString .= $record['id'] . '#' . $record['login'] . ';';\n        }\n\n        $data = array(\n            'error' => '',\n            'list' => $usersString,\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n        break;\n\n    case 'send_request_access':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        //$post_email_body = filter_var($dataReceived['email'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['itemId'] = (int) filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Send email\n        $dataItem = DB::queryfirstrow(\n            'SELECT label, id_tree\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $inputData['itemId']\n        );\n        /*\n        $dataItemLog = DB::queryfirstrow(\n            'SELECT id_user\n            FROM ' . prefixTable('log_items') . '\n            WHERE id_item = %i AND action = %s',\n            $inputData['itemId'],\n            'at_creation'\n        );\n        $dataAuthor = DB::queryfirstrow(\n            'SELECT email, login\n            FROM ' . prefixTable('users') . '\n            WHERE id = %i',\n            $dataItemLog['id_user']\n        );\n\n        // Get path\n        $path = geItemReadablePath(\n            $dataItem['id_tree'],\n            $dataItem['label'],\n            $SETTINGS\n        );\n        */\n\n        /*$ret = sendEmail(\n            langHdl('email_request_access_subject'),\n            str_replace(\n                array(\n                    '#tp_item_author#',\n                    '#tp_user#',\n                    '#tp_item#',\n                    '#tp_reason#',\n                ),\n                array(\n                    ' '.addslashes($dataAuthor['login']),\n                    addslashes($_SESSION['login']),\n                    $path,\n                    nl2br(addslashes($post_email_body)),\n                ),\n                langHdl('email_request_access_mail')\n            ),\n            $dataAuthor['email'],\n            $SETTINGS\n        );*/\n\n        // Do log\n        logItems(\n            $SETTINGS,\n            (int) $inputData['itemId'],\n            $dataItem['label'],\n            $_SESSION['user_id'],\n            'at_access',\n            $_SESSION['login']\n        );\n\n        // Return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * save_notification_status\n    */\n    case 'save_notification_status':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $post_notification_status = (int) filter_var($dataReceived['notification_status'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        DB::query(\n            'SELECT *\n            FROM ' . prefixTable('notification') . '\n            WHERE item_id = %i AND user_id = %i',\n            $inputData['itemId'],\n            $_SESSION['user_id']\n        );\n        if (DB::count() > 0) {\n            // Notification is set for this user on this item\n            if ((int) $post_notification_status === 0) {\n                // Remove the notification\n                DB::delete(\n                    prefixTable('notification'),\n                    'item_id = %i AND user_id = %i',\n                    $inputData['itemId'],\n                    $_SESSION['user_id']\n                );\n            }\n        } else {\n            // Notification is not set on this item\n            if ((int) $post_notification_status === 1) {\n                // Add the notification\n                DB::insert(\n                    prefixTable('notification'),\n                    array(\n                        'item_id' => $inputData['itemId'],\n                        'user_id' => (int) $_SESSION['user_id'],\n                    )\n                );\n            }\n        }\n\n        $data = array(\n            'error' => false,\n            'message' => '',\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * delete_uploaded_files_but_not_saved\n    */\n    case 'delete_uploaded_files_but_not_saved':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Delete non confirmed files for this item\n        // And related logs\n        $rows = DB::query(\n            'SELECT id, file AS filename\n            FROM ' . prefixTable('files') . '\n            WHERE id_item = %i AND confirmed = %i',\n            $inputData['itemId'],\n            0\n        );\n        foreach ($rows as $file) {\n            // Delete file in DB\n            DB::delete(\n                prefixTable('files'),\n                'id = %i',\n                $file['id']\n            );\n\n            // Delete file on server\n            unlink($SETTINGS['path_to_upload_folder'] . '/' . TP_FILE_PREFIX . base64_decode($file['filename']));\n\n            // Delete related logs\n            $logFile = DB::query(\n                'SELECT increment_id, raison\n                FROM ' . prefixTable('log_items') . '\n                WHERE id_item = %i AND id_user = %i AND action = %s AND raison LIKE \"at_add_file :%\"',\n                $inputData['itemId'],\n                $_SESSION['user_id'],\n                'at_modification'\n            );\n            foreach ($logFile as $log) {\n                $tmp = explode(':', $log['raison']);\n                if (count($tmp) === 3 && (int) $tmp[2] === (int) $file['id']) {\n                    DB::delete(\n                        prefixTable('log_items'),\n                        'increment_id = %i',\n                        $log['increment_id']\n                    );\n                }\n            }\n        }\n\n        $data = array(\n            'error' => false,\n            'message' => '',\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * confirm_attachments\n    */\n    case 'confirm_attachments':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Confirm attachments\n        $rows = DB::query(\n            'SELECT id, file AS filename\n            FROM ' . prefixTable('files') . '\n            WHERE id_item = %i AND confirmed = %i',\n            $inputData['itemId'],\n            0\n        );\n        foreach ($rows as $file) {\n            DB::update(\n                prefixTable('files'),\n                array(\n                    'confirmed' => 1,\n                ),\n                'id_item = %i',\n                $inputData['itemId']\n            );\n        }\n\n        $data = array(\n            'error' => false,\n            'message' => '',\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n\n    /*\n    * CASE\n    * check_current_access_rights\n    */\n    case 'check_current_access_rights':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $inputData['userId'] = (int) filter_var($dataReceived['userId'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['itemId'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['treeId'] = (int) filter_var($dataReceived['treeId'], FILTER_SANITIZE_NUMBER_INT);\n\n        $data = DB::queryFirstRow(\n            'SELECT visible_folders\n            FROM ' . prefixTable('cache_tree') . ' WHERE user_id = %i',\n            $inputData['userId']\n        );\n        // Check if tree ID is in visible folders.\n        if (null !== $data['visible_folders']) {\n            $arr = json_decode($data['visible_folders'], true);\n            $ids = is_null($arr) === true ? [] : array_column($arr, 'id');\n        }\n\n\n        $data = array(\n            'error' => false,\n            'access' => isset($inputData['treeId']) === true && in_array($inputData['treeId'], $ids) === true ? true : false,\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n}\n\n// Build the QUERY in case of GET\nif (isset($inputData['getType'])) {\n    switch ($inputData['getType']) {\n        /*\n        * CASE\n        * Autocomplet for TAGS\n        */\n        case 'autocomplete_tags':\n            // Get a list off all existing TAGS\n            $listOfTags = '';\n            $rows = DB::query('SELECT tag FROM ' . prefixTable('tags') . ' WHERE tag LIKE %ss GROUP BY tag', $inputData['getTerm']);\n            foreach ($rows as $record) {\n                if (empty($listOfTags)) {\n                    $listOfTags = '\"' . $record['tag'] . '\"';\n                } else {\n                    $listOfTags .= ', \"' . $record['tag'] . '\"';\n                }\n            }\n            echo '[' . $listOfTags . ']';\n            break;\n    }\n}\n\n/**\n * Identify if this group authorize creation of item without the complexit level reached\n *\n * @param int $groupe ID for group\n *\n * @return array list of roles\n*/\nfunction recupDroitCreationSansComplexite($groupe)\n{\n    $data = DB::queryFirstRow(\n        'SELECT bloquer_creation, bloquer_modification, personal_folder\n        FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n        $groupe\n    );\n    // Check if it's in a personal folder. If yes, then force complexity overhead.\n    if ($data !== null && (int) $data['personal_folder'] === 1) {\n        return array(\n            'bloquer_modification_complexite' => 1,\n            'bloquer_creation_complexite' => 1,\n        );\n    }\n\n    return array(\n        'bloquer_modification_complexite' => $data !== null ? (int) $data['bloquer_modification'] : 0,\n        'bloquer_creation_complexite' => $data !== null ? (int) $data['bloquer_creation'] : 0,\n    );\n}\n\n/**\n * Permits to identify what icon to display depending on file extension.\n *\n * @param string $ext extension\n *\n * @return string\n */\nfunction fileFormatImage($ext)\n{\n    if (in_array($ext, TP_OFFICE_FILE_EXT)) {\n        $image = 'fas fa-file-word';\n    } elseif ($ext === 'pdf') {\n        $image = 'fas fa-file-pdf';\n    } elseif (in_array($ext, TP_IMAGE_FILE_EXT)) {\n        $image = 'fas fa-file-image';\n    } elseif ($ext === 'txt') {\n        $image = 'fas fa-file-alt';\n    } else {\n        $image = 'fas fa-file';\n    }\n\n    return $image;\n}\n\n/**\n * Returns a cleaned up password.\n *\n * @param string $pwd String for pwd\n *\n * @return string\n */\nfunction passwordReplacement($pwd)\n{\n    $pwPatterns = array('/ETCOMMERCIAL/', '/SIGNEPLUS/');\n    $pwRemplacements = array('&', '+');\n\n    return preg_replace($pwPatterns, $pwRemplacements, $pwd);\n}\n"], "fixing_code": ["/*\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @version   \n * @file      functions.js\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\n/**\n*   Countdown before session expiration\n**/\nfunction countdown()\n{\n    // if a process is in progress then do not decrease the time counter.\n    if (typeof ProcessInProgress !== 'undefined' && ProcessInProgress === true) {\n        $('.countdown-icon')\n            .addClass('fas fa-history')\n            .removeClass('far fa-clock');\n        \n        $(this).delay(1000).queue(function()\n        {\n            countdown();\n            $(this).dequeue();\n        });\n\n        return false;\n    }\n\n    // Continue\n    let DayTill;\n    let hoursInDay = 24;\n    let limitTen = 10;\n    let oneSecondsMs = 1000;\n    let theDay =  $('#temps_restant').val();\n    let today = new Date();\n    let second = Math.floor(theDay - today.getTime() / oneSecondsMs);\n    let minute = Math.floor(second / hourInMinutes);\n    let hour = Math.floor(minute / hourInMinutes);\n    let CHour= hour % hoursInDay;\n    if (CHour < limitTen) {\n        CHour = '0' + CHour;\n    }\n    let CMinute= minute % hourInMinutes;\n    if (CMinute < limitTen) {\n        CMinute = '0' + CMinute;\n    }\n    let CSecond= second % hourInMinutes;\n    if (CSecond < limitTen) {\n        CSecond = '0' + CSecond;\n    }\n    DayTill = CHour + ':' + CMinute + ':' + CSecond;\n\n    // Session will soon be closed\n    if (DayTill === '00:00:50') {\n        showExtendSession();\n        $('#countdown').css('color', 'red');\n    }\n\n    // Manage end of session\n    if ($('#temps_restant').val() !== '' && DayTill <= '00:00:00' && parseInt($('#please_login').val()) !== 1) {\n        $('#please_login').val('1');\n        $(location).attr('href','index.php?session=expired');\n    }\n\n    //Rewrite the string to the correct information.\n    if ($('#countdown')) {\n        $('#countdown').html('<i class=\"far fa-clock countdown-icon mr-1\"></i>' + DayTill);\n    }\n\n    //Create the timer 'counter' that will automatic restart function countdown() again every second.\n    $(this).delay(1000).queue(function()\n    {\n        countdown();\n        $(this).dequeue();\n    });\n}\n\n\n/**\n*\n**/\nfunction unsanitizeString(string) {\n    if(string !== \"\" && string !== null) {\n        string = string.replace(/\\\\/g,\"\").replace(/&#92;/g, \"\\\\\").replace(/&quot;/g, '\"');\n    }\n    return string;\n}\n\n/**\n*   Clean up a string and delete any scripting tags\n**/\nfunction sanitizeString(string) {\n    if(string !== \"\" && string !== null && string !== undefined) {\n        string = string.replace(/\\\\/g,\"&#92;\").replace(/\"/g,\"&quot;\");\n        string = string.replace(new RegExp(\"\\\\s*<script[^>]*>[\\\\s\\\\S]*?</script>\\\\s*\",\"ig\"), \"\");\n    }\n    return string;\n}\n\n/**\n*   Checks if URL has expected format\n**/\nfunction validateURL(url) {\n    let urlregex = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return urlregex.test(url);\n}\n\n\nfunction split( val ) {\n    return val.split( / \\s*/ );\n}\n\nfunction extractLast( term ) {\n    return split( term ).pop();\n}\n\n/**\n * Shows error message\n * @param  {string} message  Message to display\n * @return {boolean}         False\n */\nfunction jsonErrorHdl(message)\n{\n    //show as confirm\n    // Prepare modal\n    showModalDialogBox(\n        '#warningModal',\n        '<i class=\"fas fa-warning fa-lg warning mr-2\"></i>Caution',\n        message,\n        '',\n        'Close',\n        true,\n        true\n    );\n\n    // Actions on modal buttons\n    $(document).on('click', '#warningModalButtonClose', function() {\n        \n    });\n    $(document).on('click', '#warningModalButtonAction', function() {\n        // SHow user\n    });\n    return false;\n}\n\n/**\n * [prepareExchangedData description]\n * @param  {[type]} data [description]\n * @param  {[type]} type [description]\n * @param  {[type]} key  [description]\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n * @return {[type]}      [description]\n */\nfunction prepareExchangedData(data, type, key, fileName = '', functionName = '')\n{\n    if (type === 'decode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            try {\n                return $.parseJSON(data);\n            }\n            catch (e) {\n                return jsonErrorHdl(data);\n            }\n        } else {\n            try {\n                let encryption = new Encryption();\n                return JSON.parse(encryption.decrypt(data, key));\n            }\n            catch (e) {\n                return jsonErrorHdl('<b>Next error occurred</b><div>' + e + '</div>'\n                    + (fileName !== '' ? '<br><b>Informations:</b><div>  - File: ' + fileName + '<br>  - Function: ' + functionName + '</div>': '')\n                    + '<div><br><b>Raw answer from server:</b><br>'+data+'</div>');\n            }\n        }\n    } else if (type === 'encode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            return stripHtml(data);\n        } else {\n            let encryption = new Encryption();\n            return encryption.encrypt(data, key);\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction isJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n\n/**\n * Returns the text from a HTML string\n * \n * @param {string} String The html string\n */\nfunction stripHtml(html) {\n    // Create a new div element\n    let temporalDivElement = document.createElement('div');\n    // Set the HTML content with the providen\n    temporalDivElement.innerHTML = html;\n    // Retrieve the text property of the element (cross-browser support)\n    return temporalDivElement.textContent || temporalDivElement.innerText || '';\n}\n\n\n/**\n * \n * @param {string} data Crypted string\n * @param {string} key  Session key\n */\nfunction unCryptData(data, key)\n{\n    if (data !== undefined && data.substr(0, 7) === 'crypted') {\n        let uncryptedData = prepareExchangedData(\n            data.substr(7),\n            'decode',\n            key\n        )\n        \n        if (uncryptedData.password.length > 0)\n            return uncryptedData.password;\n        else\n            return false;\n    }\n    return false;\n}\n\n/**\n * \n * @param {string}data Crypted string\n * @param {string}key  Session key\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n */\nfunction decodeQueryReturn(data, key, fileName = '', functionName = '')\n{\n    try {\n        return prepareExchangedData(data , \"decode\", key, fileName, functionName);\n    } catch (e) {\n        // error\n        toastr.remove();\n        toastr.error(\n            'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n            'Error', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n        return false;\n    }\n}\n\n/**\n * \n * @param {string} action Action\n * @param {string} name   Name\n * @param {array} data    Data\n */\nfunction browserSession(action, name, data)\n{\n    // Initialize the session\n    if (action === 'init') {\n        if (store.get(name) === 'undefined'\n            || store.get(name) === undefined\n        ) {\n            store.set(\n                name,\n                data\n            );\n        } else {\n            // Ensure all entries exist\n            $(data).each(function(value, key) {\n                store.update(\n                    name,\n                    function(bSession)\n                    {\n                        bSession.key = value;\n                    }\n                )\n            });\n        }\n    }\n}\n\n/**\n * \n * @param {string} modalId      Modal id\n * @param {string} title        Title\n * @param {string} body         Body\n * @param {string} actionButton Action Button\n * @param {string} closeButton  Close Button\n * @param {string} xlSize       Size\n * @param {string} warningModal Warning Modal\n * @param {string} closeCross   Close on cross\n */\nfunction showModalDialogBox(\n    modalId,\n    title,\n    body,\n    actionButton,\n    closeButton,\n    xlSize = false,\n    warningModal = false,\n    closeCross = true\n) {\n    $(modalId + 'Title').html(title);\n    $(modalId + 'Body').html(body);\n    if (actionButton === '') {\n        $(modalId + 'ButtonAction').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonAction').removeClass('hidden');\n        $(modalId + 'ButtonAction').html(actionButton);\n    }\n    if (closeButton === '') {\n        $(modalId + 'ButtonClose').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonClose').removeClass('hidden');\n        $(modalId + 'ButtonClose').html(closeButton);\n    }\n    if (xlSize === true) {\n        $(modalId + ' div:first').addClass('modal-xl');\n    } else {\n        $(modalId + ' div:first').removeClass('modal-xl');\n    }\n    if (warningModal === true) {\n        $(modalId + ':eq(1)').addClass('bg-warning');\n    } else {\n        $(modalId + ':eq(1)').removeClass('bg-warning');\n    }\n    if (closeCross === false) {\n        $(modalId + 'CrossClose').addClass('hidden');\n    } else {\n        $(modalId + 'CrossClose').removeClass('hidden');\n    }\n    $(modalId).modal({\n        backdrop : 'static',\n        keyboard : false,\n        show: true,\n        focus: true\n    });\n    $(modalId).modal('handleUpdate');\n}\n\n/**\n * Sanitize a string\n * \n * @param {string} str  The string\n */\nfunction htmlEncode(str){\n    return String(str).replace(/[^\\w. ]/gi, function(c){\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n/* Extend String object with method to encode multi-byte string to utf8\n * - monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\n * - note utf8Encode is an identity function with 7-bit ascii strings, but not with 8-bit strings;\n * - utf8Encode('x') = 'x', but utf8Encode('\u00e7a') = '\u00c3\u00a7a', and utf8Encode('\u00c3\u00a7a') = '\u00c3\u0083\u00c2\u00a7a'*/\nif (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function() {\n        return unescape( encodeURIComponent( this ) );\n    };\n}\n\n/* Extend String object with method to decode utf8 string to multi-byte */\nif (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function() {\n        try {\n            return decodeURIComponent( escape( this ) );\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n}\n\nfunction simplePurifier(\n    text,\n    bHtml = false,\n    bSvg = false,\n    bSvgFilters = false\n)\n{\n    return DOMPurify.sanitize(\n        text\n            .replaceAll('&lt;', '<')\n            .replaceAll('&#x3C;', '<')\n            .replaceAll('&#60;', '<')\n            .replaceAll('&gt;', '>')\n            .replaceAll('&#x3E;', '>')\n            .replaceAll('&#62;', '>')\n            .replaceAll('&amp;', '&')\n            .replaceAll('&#38;', '&')\n            .replaceAll('&#x26;', '&')\n            .replaceAll('&quot;', '\"')\n            .replaceAll('&#34;;', '\"')\n            .replaceAll('&#x22;', '\"')\n            .replaceAll('&#39;', \"'\"),\n        {USE_PROFILES: {html:bHtml, svg:bSvg, svgFilters: bSvgFilters}}\n    );\n}\n\n/**\n * Permits to purify the content of a string using domPurify\n * @param {*} field \n * @param {*} bHtml \n * @param {*} bSvg \n * @param {*} bSvgFilters \n * @param {*} text \n * @returns bool||string\n */\nfunction fieldDomPurifier(\n    field,\n    bHtml = false,\n    bSvg = false,\n    bSvgFilters = false,\n    text = ''\n)\n{\n    if (field === undefined ||field === '') {\n        return false;\n    }\n    let string = '';\n    text = (text === '') ? $(field).val() : text;\n\n    // Purify string\n    string = simplePurifier(text, bHtml, bSvg, bSvgFilters);\n    \n    // Clear field if string is empty and warn user\n    if (string === '' && text !== '') {\n        $(field).val('');\n        return false;\n    }\n\n    return string;\n}\n\n/**\n * Permits to get all fields of a class and purify them\n * @param {*} elementClass \n * @returns array\n */\nfunction fieldDomPurifierLoop(elementClass)\n{\n    let purifyStop = false,\n        arrFields = [];\n    $.each($(elementClass), function(index, element) {\n        purifiedField = fieldDomPurifier(\n            '#' + $(element).attr('id'), \n            $(element).hasClass('purifyHtml') === true ? true : false,\n            $(element).hasClass('purifySvg') === true ? true : false,\n            $(element).hasClass('purifySvgFilter') === true ? true : false,\n            typeof $(element).data('purify-text') !== 'undefined' ? $(element).data('purify-text') : ''\n        );\n\n        if (purifiedField === false) {\n            // Label is empty\n            toastr.remove();\n            toastr.warning(\n                'XSS attempt detected. Please remove all special characters from your input.',\n                'Error', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            $('#' + $(element).attr('id')).focus();\n            purifyStop = true;\n            return {\n                'purifyStop' : purifyStop,\n                'arrFields' : arrFields\n            };\n        } else {\n            $(element).val(purifiedField);\n            if (typeof $(element).data('field') !== 'undefined') {\n                arrFields[$(element).data('field')] = purifiedField;\n            } else if (typeof $(element).data('field-name') !== 'undefined') {\n                arrFields[$(element).data('field-name')] = purifiedField;\n            }\n        }\n    });\n    \n    // return\n    return {\n        'purifyStop' : purifyStop,\n        'arrFields' : arrFields\n    };\n}\n\n/**\n * Permits to purify the content of a string using domPurify\n * @param {*} field \n * @param {*} bHtml \n * @param {*} bSvg \n * @param {*} bSvgFilters \n * @returns bool||string\n */\nfunction fieldDomPurifierWithWarning(\n    field,\n    bHtml = false,\n    bSvg = false,\n    bSvgFilters = false,\n)\n{\n    if (field === undefined || field === '') {\n        return false;\n    }\n    if ($(field).val() === '') {\n        return '';\n    }\n    let string = '';\n\n    // Purify string\n    string = simplePurifier($(field).val(), bHtml, bSvg, bSvgFilters);\n    \n    // Clear field if string is empty and warn user\n    if (string === '') {\n        toastr.remove();\n        toastr.warning(\n            'XSS attempt detected. Please remove all special characters from your input.',\n            'Error', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n        $(field).focus();\n        return false;\n    }\n\n    return string;\n}", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      install.queries.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\nuse TiBeN\\CrontabManager\\CrontabJob;\nuse TiBeN\\CrontabManager\\CrontabAdapter;\nuse TiBeN\\CrontabManager\\CrontabRepository;\n\nset_time_limit(600);\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\nheader('Content-type: text/html; charset=utf-8');\n$session_db_encoding = 'utf8';\ndefine('MIN_PHP_VERSION', 7.4);\n\n/**\n * Generates a random key.\n */\nfunction generateRandomKey()\n{\n    // load passwordLib library\n    $path = '../includes/libraries/PasswordGenerator/Generator/';\n    include_once $path . 'ComputerPasswordGenerator.php';\n\n    $generator = new PasswordGenerator\\Generator\\ComputerPasswordGenerator();\n\n    $generator->setLength(40);\n    $generator->setSymbols(false);\n    $generator->setLowercase(true);\n    $generator->setUppercase(true);\n    $generator->setNumbers(true);\n\n    $key = $generator->generatePasswords();\n\n    return $key[0];\n}\n\n/**\n * Permits to encrypt a message using Defuse.\n *\n * @param string $message   Message to encrypt\n * @param string $ascii_key Key to hash\n *\n * @return array String + Error\n */\nfunction encryptFollowingDefuse($message, $ascii_key)\n{\n    // load PhpEncryption library\n    $path = '../includes/libraries/Encryption/Encryption/';\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    require_once $path . 'Crypto.php';\n    require_once $path . 'Encoding.php';\n    require_once $path . 'DerivedKeys.php';\n    require_once $path . 'Key.php';\n    require_once $path . 'KeyOrPassword.php';\n    require_once $path . 'File.php';\n    require_once $path . 'RuntimeTests.php';\n    require_once $path . 'KeyProtectedByPassword.php';\n    require_once $path . 'Core.php';\n    //echo $message . \" -- \".$ascii_key.\"<br>\";\n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n\n    try {\n        $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.';\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    return array(\n        'string' => isset($text) ? $text : '',\n        'error' => $err,\n    );\n}\n\n// Prepare POST variables\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_FULL_SPECIAL_CHARS, FILTER_FLAG_NO_ENCODE_QUOTES);\n$post_activity = filter_input(INPUT_POST, 'activity', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_task = filter_input(INPUT_POST, 'task', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_index = filter_input(INPUT_POST, 'index', FILTER_SANITIZE_NUMBER_INT);\n$post_multiple = filter_input(INPUT_POST, 'multiple', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_db = filter_input(INPUT_POST, 'db', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n// Load libraries\nrequire_once '../sources/main.functions.php';\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare SESSION variables\n$session_url_path = $superGlobal->get('url_path', 'SESSION');\n$session_abspath = $superGlobal->get('absolute_path', 'SESSION');\n$session_db_encoding = $superGlobal->get('db_encoding', 'SESSION');\nif (empty($session_db_encoding) === true) {\n    $session_db_encoding = 'utf8';\n}\n\n$superGlobal->put('CPM', 1, 'SESSION');\n\nif (null !== $post_type) {\n    switch ($post_type) {\n        case 'step_2':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data = json_decode($json, true);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_activity, 'cpm', 128);\n            $data = array_merge($data, array('activity' => $json));\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_task, 'cpm', 128);\n            $data = array_merge($data, array('task' => $json));\n\n            $abspath = str_replace('\\\\', '/', $data['absolute_path']);\n            if (substr($abspath, strlen($abspath) - 1) == '/') {\n                $abspath = substr($abspath, 0, strlen($abspath) - 1);\n            }\n            $session_abspath = $abspath;\n            $session_url_path = $data['url_path'];\n\n            if (isset($data['activity']) && $data['activity'] === 'folder') {\n                $targetPath = $abspath . '/' . $data['task'] . '/';\n                if (is_writable($targetPath) === true) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \" Path ' . $targetPath . ' is not writable!\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'extension') {\n                if (extension_loaded($data['task'])) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \" Extension ' . $data['task'] . ' is not loaded!\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'function') {\n                if (function_exists($data['task'])) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \" Function ' . $data['task'] . ' is not available!\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'version') {\n                if (version_compare(phpversion(), MIN_PHP_VERSION, '>=')) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } else {\n                    echo '[{\"error\" : \"PHP version ' . phpversion() . ' is not OK (minimum is '.MIN_PHP_VERSION.')\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n\n            if (isset($data['activity']) && $data['activity'] === 'ini') {\n                if (ini_get($data['task']) >= 30) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\"}]';\n                } else {\n                    echo '[{\"error\" : \"PHP \\\"Maximum execution time\\\" is set to ' . ini_get('max_execution_time') . ' seconds. Please try to set to 30s at least during installation.\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n                break;\n            }\n            break;\n\n        case 'step_3':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data = json_decode($json, true);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            $post_abspath = str_replace('\\\\', '/', $data['absolute_path']);\n            if (substr($abspath, strlen($post_abspath) - 1) == '/') {\n                $post_abspath = substr($post_abspath, 0, strlen($post_abspath) - 1);\n            }\n            $post_urlpath = $data['url_path'];\n\n            // launch\n            if ($dbTmp = mysqli_connect($db['db_host'], $db['db_login'], $db['db_pw'], $db['db_bdd'], $db['db_port'])) {\n                // create temporary INSTALL mysqli table\n                $mysqli_result = mysqli_query(\n                    $dbTmp,\n                    'CREATE TABLE IF NOT EXISTS `_install` (\n                    `key` varchar(100) NOT NULL,\n                    `value` varchar(500) NOT NULL,\n                    PRIMARY KEY (`key`)\n                    ) CHARSET=utf8;'\n                );\n                //print_r($data);\n                // store values\n                foreach ($data as $key => $value) {\n                    $superGlobal->put($key, $value, 'SESSION');\n                    $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = '\" . $key . \"'\"));\n                    if (intval($tmp) === 0) {\n                        mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('\" . $key . \"', '\" . $value . \"');\");\n                    } else {\n                        mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\" . $value . \"' WHERE `key` = '\" . $key . \"';\");\n                    }\n                }\n                $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = 'url_path'\"));\n                if (intval($tmp) === 0) {\n                    mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('url_path', '\" . empty($post_urlpath) ? $db['url_path'] : $post_urlpath . \"');\");\n                }/* else {\n                    mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\". empty($session_url_path) ? $data['url_path'] : $session_url_path. \"' WHERE `key` = 'url_path';\");\n                }*/\n                $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = 'absolute_path'\"));\n                if (intval($tmp) === 0) {\n                    mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('absolute_path', '\" . empty($post_abspath) ? $data['absolute_path'] : $post_abspath . \"');\");\n                }/* else {\n                    mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\" . empty($session_abspath) ? $data['absolute_path'] : $session_abspath . \"' WHERE `key` = 'absolute_path';\");\n                }*/\n\n                echo '[{\"error\" : \"\", \"result\" : \"Connection is successful\", \"multiple\" : \"\"}]';\n            } else {\n                echo '[{\"error\" : \"' . addslashes(str_replace(array(\"'\", \"\\n\", \"\\r\"), array('\"', '', ''), mysqli_connect_error())) . '\", \"result\" : \"Failed\", \"multiple\" : \"\"}]';\n            }\n            mysqli_close($dbTmp);\n            break;\n\n        case 'step_4':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data = json_decode($json, true);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            $dbTmp = mysqli_connect($db['db_host'], $db['db_login'], $db['db_pw'], $db['db_bdd'], $db['db_port']);\n\n            // prepare data\n            foreach ($data as $key => $value) {\n                $data[$key] = str_replace(array('&quot;', '&#92;'), array('\"\"', '\\\\\\\\'), $value);\n            }\n\n            // check skpath\n            if (empty($data['sk_path'])) {\n                $data['sk_path'] = $session_abspath . '/includes';\n            } else {\n                $data['sk_path'] = str_replace('&#92;', '/', $data['sk_path']);\n            }\n            if (substr($data['sk_path'], strlen($data['sk_path']) - 1) == '/' || substr($data['sk_path'], strlen($data['sk_path']) - 1) == '\"') {\n                $data['sk_path'] = substr($data['sk_path'], 0, strlen($data['sk_path']) - 1);\n            }\n            if (is_dir($data['sk_path'])) {\n                if (is_writable($data['sk_path'])) {\n                    // store all variables in SESSION\n                    foreach ($data as $key => $value) {\n                        $superGlobal->put($key, $value, 'SESSION');\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `_install` WHERE `key` = '\" . $key . \"'\"));\n                        if (intval($tmp) === 0) {\n                            mysqli_query($dbTmp, \"INSERT INTO `_install` (`key`, `value`) VALUES ('\" . $key . \"', '\" . $value . \"');\");\n                        } else {\n                            mysqli_query($dbTmp, \"UPDATE `_install` SET `value` = '\" . $value . \"' WHERE `key` = '\" . $key . \"';\");\n                        }\n                    }\n                    echo '[{\"error\" : \"\", \"result\" : \"Information stored\", \"multiple\" : \"\"}]';\n                } else {\n                    echo '[{\"error\" : \"The Directory must be writable!\", \"result\" : \"Information stored\", \"multiple\" : \"\"}]';\n                }\n            } else {\n                echo '[{\"error\" : \"' . $data['sk_path'] . ' is not a Directory!\", \"result\" : \"Information stored\", \"multiple\" : \"\"}]';\n            }\n            mysqli_close($dbTmp);\n            break;\n\n        case 'step_5':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $activity = Encryption\\Crypt\\aesctr::decrypt($post_activity, 'cpm', 128);\n            $task = Encryption\\Crypt\\aesctr::decrypt($post_task, 'cpm', 128);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            // launch\n            $dbTmp = mysqli_connect($db['db_host'], $db['db_login'], $db['db_pw'], $db['db_bdd'], $db['db_port']);\n            $dbBdd = $db['db_bdd'];\n            if ($dbTmp) {\n                $mysqli_result = '';\n\n                // read install variables\n                $result = mysqli_query($dbTmp, 'SELECT * FROM `_install`');\n                while ($row = $result->fetch_array()) {\n                    $var[$row[0]] = $row[1];\n                }\n\n                if ($activity === 'table') {\n                    if ($task === 'utf8') {\n                        //FORCE UTF8 DATABASE\n                        mysqli_query($dbTmp, 'ALTER DATABASE `' . $dbBdd . '` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci');\n                    } elseif ($task === 'defuse_passwords') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'defuse_passwords` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`type` varchar(100) NOT NULL,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`password` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'notification') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'notification` (\n\t\t\t\t\t\t\t\t`increment_id` INT(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`item_id` INT(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` INT(12) NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'sharekeys_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_items` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'ALTER TABLE `' . $var['tbl_prefix'] . 'sharekeys_items`\n                                ADD KEY `object_id_idx` (`object_id`),\n                                ADD KEY `user_id_idx` (`user_id`);'\n                        );\n                    } elseif ($task === 'sharekeys_logs') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_logs` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'ALTER TABLE `' . $var['tbl_prefix'] . 'sharekeys_logs`\n                                ADD KEY `object_id_idx` (`object_id`),\n                                ADD KEY `user_id_idx` (`user_id`);'\n                        );\n                    } elseif ($task === 'sharekeys_fields') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_fields` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'sharekeys_suggestions') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_suggestions` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'sharekeys_files') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'sharekeys_files` (\n\t\t\t\t\t\t\t\t`increment_id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t\t\t\t\t\t`object_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`user_id` int(12) NOT NULL,\n\t\t\t\t\t\t\t\t`share_key` text NOT NULL,\n\t\t\t\t\t\t\t\tPRIMARY KEY (`increment_id`)\n\t\t\t\t\t\t\t) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"items` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `label` varchar(500) NOT NULL,\n                            `description` text DEFAULT NULL,\n                            `pw` text DEFAULT NULL,\n                            `pw_iv` text DEFAULT NULL,\n                            `pw_len` int(5) NOT NULL DEFAULT '0',\n                            `url` varchar(500) DEFAULT NULL,\n                            `id_tree` varchar(10) DEFAULT NULL,\n                            `perso` tinyint(1) NOT null DEFAULT '0',\n                            `login` varchar(200) DEFAULT NULL,\n                            `inactif` tinyint(1) NOT null DEFAULT '0',\n                            `restricted_to` varchar(200) DEFAULT NULL,\n                            `anyone_can_modify` tinyint(1) NOT null DEFAULT '0',\n                            `email` varchar(100) DEFAULT NULL,\n                            `notification` varchar(250) DEFAULT NULL,\n                            `viewed_no` int(12) NOT null DEFAULT '0',\n                            `complexity_level` varchar(3) NOT null DEFAULT '-1',\n                            `auto_update_pwd_frequency` tinyint(2) NOT null DEFAULT '0',\n                            `auto_update_pwd_next_date` varchar(100) NOT null DEFAULT '0',\n                            `encryption_type` VARCHAR(20) NOT NULL DEFAULT 'not_set',\n                            `fa_icon` varchar(100) DEFAULT NULL,\n                            `item_key` varchar(500) NOT NULL DEFAULT '-1',\n                            `created_at` varchar(30) NULL,\n                            `updated_at` varchar(30) NULL,\n                            `deleted_at` varchar(30) NULL,\n                            PRIMARY KEY (`id`),\n                            KEY `restricted_inactif_idx` (`restricted_to`,`inactif`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'log_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"log_items` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `id_item` int(8) NOT NULL,\n                            `date` varchar(50) NOT NULL,\n                            `id_user` int(8) NOT NULL,\n                            `action` varchar(250) NULL,\n                            `raison` text NULL,\n                            `raison_iv` text NULL,\n                            `encryption_type` VARCHAR(20) NOT NULL DEFAULT 'not_set',\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                        // create index\n                        mysqli_query(\n                            $dbTmp,\n                            'CREATE INDEX teampass_log_items_id_item_IDX ON ' . $var['tbl_prefix'] . 'log_items (id_item,date);'\n                        );\n                    } elseif ($task === 'misc') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'misc` (\n                            `increment_id` int(12) NOT null AUTO_INCREMENT,\n                            `type` varchar(50) NOT NULL,\n                            `intitule` varchar(100) NOT NULL,\n                            `valeur` varchar(500) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n\n                        // include constants\n                        require_once '../includes/config/include.php';\n\n                        // prepare config file\n                        $tp_config_file = '../includes/config/tp.config.php';\n                        if (file_exists($tp_config_file)) {\n                            if (!copy($tp_config_file, $tp_config_file . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                                echo '[{\"error\" : \"includes/config/tp.config.php file already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                                break;\n                            } else {\n                                unlink($tp_config_file);\n                            }\n                        }\n                        $file_handler = fopen($tp_config_file, 'w');\n                        $config_text = '<?php\nglobal $SETTINGS;\n$SETTINGS = array (';\n\n                        // add by default settings\n                        $aMiscVal = array(\n                            array('admin', 'max_latest_items', '10'),\n                            array('admin', 'enable_favourites', '1'),\n                            array('admin', 'show_last_items', '1'),\n                            array('admin', 'enable_pf_feature', '0'),\n                            array('admin', 'log_connections', '1'),\n                            array('admin', 'log_accessed', '1'),\n                            array('admin', 'time_format', 'H:i:s'),\n                            array('admin', 'date_format', 'd/m/Y'),\n                            array('admin', 'duplicate_folder', '0'),\n                            array('admin', 'item_duplicate_in_same_folder', '0'),\n                            array('admin', 'duplicate_item', '0'),\n                            array('admin', 'number_of_used_pw', '3'),\n                            array('admin', 'manager_edit', '1'),\n                            array('admin', 'cpassman_dir', $var['absolute_path']),\n                            array('admin', 'cpassman_url', $var['url_path']),\n                            array('admin', 'favicon', $var['url_path'] . '/favicon.ico'),\n                            array('admin', 'path_to_upload_folder', $var['absolute_path'] . '/upload'),\n                            array('admin', 'path_to_files_folder', $var['absolute_path'] . '/files'),\n                            array('admin', 'url_to_files_folder', $var['url_path'] . '/files'),\n                            array('admin', 'activate_expiration', '0'),\n                            array('admin', 'pw_life_duration', '0'),\n                            array('admin', 'maintenance_mode', '1'),\n                            array('admin', 'enable_sts', '0'),\n                            array('admin', 'encryptClientServer', '1'),\n                            array('admin', 'teampass_version', TP_VERSION),\n                            array('admin', 'ldap_mode', '0'),\n                            array('admin', 'ldap_type', '0'),\n                            array('admin', 'ldap_suffix', '0'),\n                            array('admin', 'ldap_domain_dn', '0'),\n                            array('admin', 'ldap_domain_controler', '0'),\n                            array('admin', 'ldap_user_attribute', '0'),\n                            array('admin', 'ldap_ssl', '0'),\n                            array('admin', 'ldap_tls', '0'),\n                            array('admin', 'ldap_search_base', '0'),\n                            array('admin', 'ldap_port', '389'),\n                            array('admin', 'richtext', '0'),\n                            array('admin', 'allow_print', '0'),\n                            array('admin', 'roles_allowed_to_print', '0'),\n                            array('admin', 'show_description', '1'),\n                            array('admin', 'anyone_can_modify', '0'),\n                            array('admin', 'anyone_can_modify_bydefault', '0'),\n                            array('admin', 'nb_bad_authentication', '0'),\n                            array('admin', 'utf8_enabled', '1'),\n                            array('admin', 'restricted_to', '0'),\n                            array('admin', 'restricted_to_roles', '0'),\n                            array('admin', 'enable_send_email_on_user_login', '0'),\n                            array('admin', 'enable_user_can_create_folders', '0'),\n                            array('admin', 'insert_manual_entry_item_history', '0'),\n                            array('admin', 'enable_kb', '0'),\n                            array('admin', 'enable_email_notification_on_item_shown', '0'),\n                            array('admin', 'enable_email_notification_on_user_pw_change', '0'),\n                            array('admin', 'custom_logo', ''),\n                            array('admin', 'custom_login_text', ''),\n                            array('admin', 'default_language', 'english'),\n                            array('admin', 'send_stats', '0'),\n                            array('admin', 'send_statistics_items', 'stat_country;stat_users;stat_items;stat_items_shared;stat_folders;stat_folders_shared;stat_admins;stat_managers;stat_ro;stat_mysqlversion;stat_phpversion;stat_teampassversion;stat_languages;stat_kb;stat_suggestion;stat_customfields;stat_api;stat_2fa;stat_agses;stat_duo;stat_ldap;stat_syslog;stat_stricthttps;stat_fav;stat_pf;'),\n                            array('admin', 'send_stats_time', time() - 2592000),\n                            array('admin', 'get_tp_info', '1'),\n                            array('admin', 'send_mail_on_user_login', '0'),\n                            array('cron', 'sending_emails', '0'),\n                            array('admin', 'nb_items_by_query', 'auto'),\n                            array('admin', 'enable_delete_after_consultation', '0'),\n                            array('admin', 'enable_personal_saltkey_cookie', '0'),\n                            array('admin', 'personal_saltkey_cookie_duration', '31'),\n                            array('admin', 'email_smtp_server', ''),\n                            array('admin', 'email_smtp_auth', ''),\n                            array('admin', 'email_auth_username', ''),\n                            array('admin', 'email_auth_pwd', ''),\n                            array('admin', 'email_port', ''),\n                            array('admin', 'email_security', ''),\n                            array('admin', 'email_server_url', ''),\n                            array('admin', 'email_from', ''),\n                            array('admin', 'email_from_name', ''),\n                            array('admin', 'pwd_maximum_length', '40'),\n                            array('admin', 'google_authentication', '0'),\n                            array('admin', 'delay_item_edition', '0'),\n                            array('admin', 'allow_import', '0'),\n                            array('admin', 'proxy_ip', ''),\n                            array('admin', 'proxy_port', ''),\n                            array('admin', 'upload_maxfilesize', '10mb'),\n                            array('admin', 'upload_docext', 'doc,docx,dotx,xls,xlsx,xltx,rtf,csv,txt,pdf,ppt,pptx,pot,dotx,xltx'),\n                            array('admin', 'upload_imagesext', 'jpg,jpeg,gif,png'),\n                            array('admin', 'upload_pkgext', '7z,rar,tar,zip'),\n                            array('admin', 'upload_otherext', 'sql,xml'),\n                            array('admin', 'upload_imageresize_options', '1'),\n                            array('admin', 'upload_imageresize_width', '800'),\n                            array('admin', 'upload_imageresize_height', '600'),\n                            array('admin', 'upload_imageresize_quality', '90'),\n                            array('admin', 'use_md5_password_as_salt', '0'),\n                            array('admin', 'ga_website_name', 'TeamPass for ChangeMe'),\n                            array('admin', 'api', '0'),\n                            array('admin', 'subfolder_rights_as_parent', '0'),\n                            array('admin', 'show_only_accessible_folders', '0'),\n                            array('admin', 'enable_suggestion', '0'),\n                            array('admin', 'otv_expiration_period', '7'),\n                            array('admin', 'default_session_expiration_time', '60'),\n                            array('admin', 'duo', '0'),\n                            array('admin', 'enable_server_password_change', '0'),\n                            array('admin', 'ldap_object_class', '0'),\n                            array('admin', 'bck_script_path', $var['absolute_path'] . '/backups'),\n                            array('admin', 'bck_script_filename', 'bck_teampass'),\n                            array('admin', 'syslog_enable', '0'),\n                            array('admin', 'syslog_host', 'localhost'),\n                            array('admin', 'syslog_port', '514'),\n                            array('admin', 'manager_move_item', '0'),\n                            array('admin', 'create_item_without_password', '0'),\n                            array('admin', 'otv_is_enabled', '0'),\n                            array('admin', 'agses_authentication_enabled', '0'),\n                            array('admin', 'item_extra_fields', '0'),\n                            array('admin', 'saltkey_ante_2127', 'none'),\n                            array('admin', 'migration_to_2127', 'done'),\n                            array('admin', 'files_with_defuse', 'done'),\n                            array('admin', 'timezone', 'UTC'),\n                            array('admin', 'enable_attachment_encryption', '1'),\n                            array('admin', 'personal_saltkey_security_level', '50'),\n                            array('admin', 'ldap_new_user_is_administrated_by', '0'),\n                            array('admin', 'disable_show_forgot_pwd_link', '0'),\n                            array('admin', 'offline_key_level', '0'),\n                            array('admin', 'enable_http_request_login', '0'),\n                            array('admin', 'ldap_and_local_authentication', '0'),\n                            array('admin', 'secure_display_image', '1'),\n                            array('admin', 'upload_zero_byte_file', '0'),\n                            array('admin', 'upload_all_extensions_file', '0'),\n                            array('admin', 'bck_script_passkey', generateRandomKey()),\n                            array('admin', 'admin_2fa_required', '1'),\n                            array('admin', 'password_overview_delay', '4'),\n                            array('admin', 'copy_to_clipboard_small_icons', '1'),\n                            array('admin', 'duo_ikey', ''),\n                            array('admin', 'duo_skey', ''),\n                            array('admin', 'duo_host', ''),\n                            array('admin', 'duo_failmode', 'secure'),\n                            array('admin', 'roles_allowed_to_print_select', ''),\n                            array('admin', 'clipboard_life_duration', '30'),\n                            array('admin', 'mfa_for_roles', ''),\n                            array('admin', 'tree_counters', '0'),\n                            array('admin', 'settings_offline_mode', '0'),\n                            array('admin', 'settings_tree_counters', '0'),\n                            array('admin', 'enable_massive_move_delete', '0'),\n                            array('admin', 'email_debug_level', '0'),\n                            array('admin', 'ga_reset_by_user', ''),\n                            array('admin', 'onthefly-backup-key', ''),\n                            array('admin', 'onthefly-restore-key', ''),\n                            array('admin', 'ldap_user_dn_attribute', ''),\n                            array('admin', 'ldap_dn_additional_user_dn', ''),\n                            array('admin', 'ldap_user_object_filter', ''),\n                            array('admin', 'ldap_bdn', ''),\n                            array('admin', 'ldap_hosts', ''),\n                            array('admin', 'ldap_password', ''),\n                            array('admin', 'ldap_username', ''),\n                            array('admin', 'api_token_duration', '60'),\n                            array('timestamp', 'last_folder_change', ''),\n                            array('admin', 'enable_tasks_manager', '1'),\n                            array('admin', 'task_maximum_run_time', '300'),\n                            array('admin', 'tasks_manager_refreshing_period', '20'),\n                            array('admin', 'maximum_number_of_items_to_treat', '100'),\n                            array('admin', 'ldap_tls_certifacte_check', 'LDAP_OPT_X_TLS_NEVER'),\n                            array('admin', 'enable_tasks_log', '0'),\n                            array('admin', 'upgrade_timestamp', time()),\n                            array('admin', 'enable_ad_users_with_ad_groups', '0'),\n                            array('admin', 'enable_ad_user_auto_creation', '0'),\n                            array('admin', 'ldap_group_object_filter', ''),\n                            array('admin', 'ldap_guid_attibute', 'objectguid'),\n                            array('admin', 'sending_emails_job_frequency', '2'),\n                            array('admin', 'user_keys_job_frequency', '1'),\n                            array('admin', 'items_statistics_job_frequency', '5'),\n                            array('admin', 'users_personal_folder_task', ''),\n                            array('admin', 'clean_orphan_objects_task', ''),\n                            array('admin', 'purge_temporary_files_task', ''),\n                            array('admin', 'rebuild_config_file', ''),\n                            array('admin', 'reload_cache_table_task', ''),\n                        );\n                        foreach ($aMiscVal as $elem) {\n                            //Check if exists before inserting\n                            $tmp = mysqli_num_rows(\n                                mysqli_query(\n                                    $dbTmp,\n                                    \"SELECT * FROM `\" . $var['tbl_prefix'] . \"misc`\n                                    WHERE type='\" . $elem[0] . \"' AND intitule='\" . $elem[1] . \"'\"\n                                )\n                            );\n                            if (intval($tmp) === 0) {\n                                $queryRes = mysqli_query(\n                                    $dbTmp,\n                                    \"INSERT INTO `\" . $var['tbl_prefix'] . \"misc`\n                                    (`type`, `intitule`, `valeur`) VALUES\n                                    ('\" . $elem[0] . \"', '\" . $elem[1] . \"', '\" .\n                                        str_replace(\"'\", '', $elem[2]) . \"');\"\n                                ); // or die(mysqli_error($dbTmp))\n                            }\n\n                            // append new setting in config file\n                            $config_text .= \"\n    '\" . $elem[1] . \"' => '\" . str_replace(\"'\", '', $elem[2]) . \"',\";\n                        }\n\n                        // write to config file\n                        $result = fwrite(\n                            $file_handler,\n                            utf8_encode(\n                                $config_text . '\n);'\n                            )\n                        );\n                        fclose($file_handler);\n\n                        // --\n                    } elseif ($task === 'nested_tree') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"nested_tree` (\n                            `id` bigint(20) unsigned NOT null AUTO_INCREMENT,\n                            `parent_id` int(11) NOT NULL,\n                            `title` varchar(255) NOT NULL,\n                            `nleft` int(11) NOT NULL DEFAULT '0',\n                            `nright` int(11) NOT NULL DEFAULT '0',\n                            `nlevel` int(11) NOT NULL DEFAULT '0',\n                            `bloquer_creation` tinyint(1) NOT null DEFAULT '0',\n                            `bloquer_modification` tinyint(1) NOT null DEFAULT '0',\n                            `personal_folder` tinyint(1) NOT null DEFAULT '0',\n                            `renewal_period` int(5) NOT null DEFAULT '0',\n                            `fa_icon` VARCHAR(100) NOT NULL DEFAULT 'fas fa-folder',\n                            `fa_icon_selected` VARCHAR(100) NOT NULL DEFAULT 'fas fa-folder-open',\n                            `categories` longtext NOT NULL,\n                            `nb_items_in_folder` int(10) NOT NULL DEFAULT '0',\n                            `nb_subfolders` int(10) NOT NULL DEFAULT '0',\n                            `nb_items_in_subfolders` int(10) NOT NULL DEFAULT '0',\n                            PRIMARY KEY (`id`),\n                            KEY `nested_tree_parent_id` (`parent_id`),\n                            KEY `nested_tree_nleft` (`nleft`),\n                            KEY `nested_tree_nright` (`nright`),\n                            KEY `nested_tree_nlevel` (`nlevel`),\n                            KEY `personal_folder_idx` (`personal_folder`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'rights') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"rights` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `tree_id` int(12) NOT NULL,\n                            `fonction_id` int(12) NOT NULL,\n                            `authorized` tinyint(1) NOT null DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'users') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"users` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `login` varchar(50) NOT NULL,\n                            `pw` varchar(400) NOT NULL,\n                            `groupes_visibles` varchar(1000) NOT NULL,\n                            `derniers` text NULL,\n                            `key_tempo` varchar(100) NULL,\n                            `last_pw_change` varchar(30) NULL,\n                            `last_pw` text NULL,\n                            `admin` tinyint(1) NOT null DEFAULT '0',\n                            `fonction_id` varchar(1000) NULL,\n                            `groupes_interdits` varchar(1000) NULL,\n                            `last_connexion` varchar(30) NULL,\n                            `gestionnaire` int(11) NOT null DEFAULT '0',\n                            `email` varchar(300) NOT NULL DEFAULT 'none',\n                            `favourites` varchar(1000) NULL,\n                            `latest_items` varchar(1000) NULL,\n                            `personal_folder` int(1) NOT null DEFAULT '0',\n                            `disabled` tinyint(1) NOT null DEFAULT '0',\n                            `no_bad_attempts` tinyint(1) NOT null DEFAULT '0',\n                            `can_create_root_folder` tinyint(1) NOT null DEFAULT '0',\n                            `read_only` tinyint(1) NOT null DEFAULT '0',\n                            `timestamp` varchar(30) NOT null DEFAULT '0',\n                            `user_language` varchar(50) NOT null DEFAULT '0',\n                            `name` varchar(100) NULL,\n                            `lastname` varchar(100) NULL,\n                            `session_end` varchar(30) NULL,\n                            `isAdministratedByRole` tinyint(5) NOT null DEFAULT '0',\n                            `psk` varchar(400) NULL,\n                            `ga` varchar(50) NULL,\n                            `ga_temporary_code` VARCHAR(20) NOT NULL DEFAULT 'none',\n                            `avatar` varchar(1000) NULL DEFAULT NULL,\n                            `avatar_thumb` varchar(1000) NULL DEFAULT NULL,\n                            `upgrade_needed` BOOLEAN NOT NULL DEFAULT FALSE,\n                            `treeloadstrategy` varchar(30) NOT null DEFAULT 'full',\n                            `can_manage_all_users` tinyint(1) NOT NULL DEFAULT '0',\n                            `usertimezone` VARCHAR(50) NOT NULL DEFAULT 'not_defined',\n                            `agses-usercardid` VARCHAR(50) NOT NULL DEFAULT '0',\n                            `encrypted_psk` text NULL,\n                            `user_ip` varchar(400) NOT null DEFAULT 'none',\n                            `user_ip_lastdate` varchar(50) NULL DEFAULT NULL,\n                            `yubico_user_key` varchar(100) NOT null DEFAULT 'none',\n                            `yubico_user_id` varchar(100) NOT null DEFAULT 'none',\n                            `public_key` TEXT DEFAULT NULL,\n                            `private_key` TEXT DEFAULT NULL,\n                            `special` VARCHAR(250) NOT NULL DEFAULT 'none',\n                            `auth_type` VARCHAR(200) NOT NULL DEFAULT 'local',\n                            `is_ready_for_usage` BOOLEAN NOT NULL DEFAULT FALSE,\n                            `otp_provided` BOOLEAN NOT NULL DEFAULT FALSE,\n                            `roles_from_ad_groups` varchar(1000) NULL,\n                            `ongoing_process_id` VARCHAR(100) NULL,\n                            `mfa_enabled` tinyint(1) NOT null DEFAULT '1',\n                            `created_at` varchar(30) NULL,\n                            `updated_at` varchar(30) NULL,\n                            `deleted_at` varchar(30) NULL,\n                            PRIMARY KEY (`id`),\n                            UNIQUE KEY `login` (`login`)\n                            ) CHARSET=utf8;\"\n                        );\n\n                        require_once '../includes/config/include.php';\n                        // check that admin accounts doesn't exist\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE login = 'admin'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `admin`, `gestionnaire`, `personal_folder`, `groupes_visibles`, `email`, `encrypted_psk`, `last_pw_change`, `name`, `lastname`, `can_create_root_folder`, `public_key`, `private_key`, `is_ready_for_usage`, `otp_provided`) VALUES ('1', 'admin', '\" . bCrypt($var['admin_pwd'], '13') . \"', '1', '0', '0', '0', '\" . $var['admin_email'] . \"', '', '\" . time() . \"', '\" . $var['admin_name'] . \"', '\" . $var['admin_lastname'] . \"', '1', 'none', 'none', '1', '1')\"\n                            );\n                        } else {\n                            $mysqli_result = mysqli_query($dbTmp, 'UPDATE `' . $var['tbl_prefix'] . \"users` SET `pw` = '\" . bCrypt($var['admin_pwd'], '13') . \"' WHERE login = 'admin' AND id = '1'\");\n                        }\n\n                        // check that API doesn't exist\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE id = '\" . API_USER_ID . \"'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `groupes_visibles`, `derniers`, `key_tempo`, `last_pw_change`, `last_pw`, `admin`, `fonction_id`, `groupes_interdits`, `last_connexion`, `gestionnaire`, `email`, `favourites`, `latest_items`, `personal_folder`, `is_ready_for_usage`, `otp_provided`) VALUES ('\" . API_USER_ID . \"', 'API', '', '', '', '', '', '', '1', '', '', '', '0', '', '', '', '0', '0', '1')\"\n                            );\n                        }\n\n                        // check that OTV doesn't exist\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE id = '\" . OTV_USER_ID . \"'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `groupes_visibles`, `derniers`, `key_tempo`, `last_pw_change`, `last_pw`, `admin`, `fonction_id`, `groupes_interdits`, `last_connexion`, `gestionnaire`, `email`, `favourites`, `latest_items`, `personal_folder`, `is_ready_for_usage`, `otp_provided`) VALUES ('\" . OTV_USER_ID . \"', 'OTV', '', '', '', '', '', '', '1', '', '', '', '0', '', '', '', '0', '0', '1')\"\n                            );\n                        }\n                    } elseif ($task === 'tags') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'tags` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `tag` varchar(30) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'log_system') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'log_system` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `type` varchar(20) NOT NULL,\n                            `date` varchar(30) NOT NULL,\n                            `label` text NOT NULL,\n                            `qui` varchar(255) NOT NULL,\n                            `field_1` varchar(250) DEFAULT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'files') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"files` (\n                            `id` int(11) NOT null AUTO_INCREMENT,\n                            `id_item` int(11) NOT NULL,\n                            `name` TEXT NOT NULL,\n                            `size` int(10) NOT NULL,\n                            `extension` varchar(10) NOT NULL,\n                            `type` varchar(255) NOT NULL,\n                            `file` varchar(50) NOT NULL,\n                            `status` varchar(50) NOT NULL DEFAULT '0',\n                            `content` longblob DEFAULT NULL,\n\t\t\t\t\t\t\t`confirmed` INT(1) NOT NULL DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'cache') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"cache` (\n                            `increment_id`INT(12) NOT NULL AUTO_INCREMENT,\n                            `id` int(12) NOT NULL,\n                            `label` varchar(500) NOT NULL,\n                            `description` text NOT NULL,\n                            `tags` text DEFAULT NULL,\n                            `id_tree` int(12) NOT NULL,\n                            `perso` tinyint(1) NOT NULL,\n                            `restricted_to` varchar(200) DEFAULT NULL,\n                            `login` text DEFAULT NULL,\n                            `folder` text NOT NULL,\n                            `author` varchar(50) NOT NULL,\n                            `renewal_period` tinyint(4) NOT NULL DEFAULT '0',\n                            `timestamp` varchar(50) DEFAULT NULL,\n                            `url` varchar(500) NOT NULL DEFAULT '0',\n                            `encryption_type` VARCHAR(50) DEFAULT NULL DEFAULT '0',\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'roles_title') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"roles_title` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `title` varchar(50) NOT NULL,\n                            `allow_pw_change` TINYINT(1) NOT null DEFAULT '0',\n                            `complexity` INT(5) NOT null DEFAULT '0',\n                            `creator_id` int(11) NOT null DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n\n                        // create Default role\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"roles_title` WHERE id = '0'\"));\n                        if ($tmp === 0) {\n                            $mysqli_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"roles_title` (`id`, `title`, `allow_pw_change`, `complexity`, `creator_id`) VALUES (NULL, 'Default', '0', '48', '0')\"\n                            );\n                        }\n                    } elseif ($task === 'roles_values') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"roles_values` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n                            `role_id` int(12) NOT NULL,\n                            `folder_id` int(12) NOT NULL,\n                            `type` varchar(5) NOT NULL DEFAULT 'R',\n                            KEY `role_id_idx` (`role_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'kb') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"kb` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `category_id` int(12) NOT NULL,\n                            `label` varchar(200) NOT NULL,\n                            `description` text NOT NULL,\n                            `author_id` int(12) NOT NULL,\n                            `anyone_can_modify` tinyint(1) NOT null DEFAULT '0',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'kb_categories') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'kb_categories` (\n                            `id` int(12) NOT null AUTO_INCREMENT,\n                            `category` varchar(50) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'kb_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'kb_items` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `kb_id` int(12) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task == 'restriction_to_roles') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'restriction_to_roles` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `role_id` int(12) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'languages') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'languages` (\n                            `id` INT(10) NOT null AUTO_INCREMENT,\n                            `name` VARCHAR(50) NOT null ,\n                            `label` VARCHAR(50) NOT null ,\n                            `code` VARCHAR(10) NOT null ,\n                            `flag` VARCHAR(50) NOT NULL,\n                            `code_poeditor` VARCHAR(30) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n\n                        // add lanaguages\n                        $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"languages` WHERE name = 'french'\"));\n                        if ($tmp === 0) {\n                            $mysql_result = mysqli_query(\n                                $dbTmp,\n                                \"INSERT INTO `\" . $var['tbl_prefix'] . \"languages` (`id`, `name`, `label`, `code`, `flag`, `code_poeditor`) VALUES\n                                (1, 'french', 'French', 'fr', 'fr.png', 'fr'),\n                                (2, 'english', 'English', 'us', 'us.png', 'en'),\n                                (3, 'spanish', 'Spanish', 'es', 'es.png', 'es'),\n                                (4, 'german', 'German', 'de', 'de.png', 'de'),\n                                (5, 'czech', 'Czech', 'cs', 'cz.png', 'cs'),\n                                (6, 'italian', 'Italian', 'it', 'it.png', 'it'),\n                                (7, 'russian', 'Russian', 'ru', 'ru.png', 'ru'),\n                                (8, 'turkish', 'Turkish', 'tr', 'tr.png', 'tr'),\n                                (9, 'norwegian', 'Norwegian', 'no', 'no.png', 'no'),\n                                (10, 'japanese', 'Japanese', 'ja', 'ja.png', 'ja'),\n                                (11, 'portuguese', 'Portuguese', 'pr', 'pr.png', 'pt'),\n                                (12, 'portuguese_br', 'Portuguese (Brazil)', 'pr-bt', 'pr-bt.png', 'pt-br'),\n                                (13, 'chinese', 'Chinese', 'zh-Hans', 'cn.png', 'zh-Hans'),\n                                (14, 'swedish', 'Swedish', 'se', 'se.png', 'sv'),\n                                (15, 'dutch', 'Dutch', 'nl', 'nl.png', 'nl'),\n                                (16, 'catalan', 'Catalan', 'ca', 'ct.png', 'ca'),\n                                (17, 'bulgarian', 'Bulgarian', 'bg', 'bg.png', 'bg'),\n                                (18, 'greek', 'Greek', 'gr', 'gr.png', 'el'),\n                                (19, 'hungarian', 'Hungarian', 'hu', 'hu.png', 'hu'),\n                                (20, 'polish', 'Polish', 'pl', 'pl.png', 'pl'),\n                                (21, 'romanian', 'Romanian', 'ro', 'ro.png', 'ro'),\n                                (22, 'ukrainian', 'Ukrainian', 'ua', 'ua.png', 'uk'),\n                                (23, 'vietnamese', 'Vietnamese', 'vi', 'vi.png', 'vi'),\n                                (24, 'estonian', 'Estonian', 'et', 'ee.png', 'et');\"\n                            );\n                        }\n                    } elseif ($task === 'emails') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'emails` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `timestamp` INT(30) NOT null ,\n                            `subject` TEXT NOT null ,\n                            `body` TEXT NOT null ,\n                            `receivers` TEXT NOT null ,\n                            `status` VARCHAR(30) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'automatic_del') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'automatic_del` (\n                            `item_id` int(11) NOT NULL,\n                            `del_enabled` tinyint(1) NOT NULL,\n                            `del_type` tinyint(1) NOT NULL,\n                            `del_value` varchar(35) NOT NULL,\n                            PRIMARY KEY (`item_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'items_edition') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'items_edition` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `item_id` int(11) NOT NULL,\n                            `user_id` int(12) NOT NULL,\n                            `timestamp` varchar(50) NOT NULL,\n                            KEY `item_id_idx` (`item_id`),\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'categories') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"categories` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `parent_id` int(12) NOT NULL,\n                            `title` varchar(255) NOT NULL,\n                            `level` int(2) NOT NULL,\n                            `description` text NULL,\n                            `type` varchar(50) NULL default '',\n                            `masked` tinyint(1) NOT NULL default '0',\n                            `order` int(12) NOT NULL default '0',\n                            `encrypted_data` tinyint(1) NOT NULL default '1',\n                            `role_visibility` varchar(255) NOT NULL DEFAULT 'all',\n                            `is_mandatory` tinyint(1) NOT NULL DEFAULT '0',\n                            `regex` varchar(255) NULL default '',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'categories_items') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"categories_items` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `field_id` int(11) NOT NULL,\n                            `item_id` int(11) NOT NULL,\n                            `data` text NOT NULL,\n                            `data_iv` text NOT NULL,\n                            `encryption_type` VARCHAR(20) NOT NULL DEFAULT 'not_set',\n                            `is_mandatory` BOOLEAN NOT NULL DEFAULT FALSE ,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'categories_folders') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'categories_folders` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `id_category` int(12) NOT NULL,\n                            `id_folder` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'api') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'api` (\n                            `increment_id` int(20) NOT NULL AUTO_INCREMENT,\n                            `type` varchar(15) NOT NULL,\n                            `label` varchar(255) DEFAULT NULL,\n                            `value` text DEFAULT NULL,\n                            `timestamp` varchar(50) NOT NULL,\n                            `user_id` int(13) DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`),\n                            KEY `USER` (`user_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'otv') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"otv` (\n                            `id` int(10) NOT NULL AUTO_INCREMENT,\n                            `timestamp` text NOT NULL,\n                            `code` varchar(100) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            `originator` int(12) NOT NULL,\n                            `encrypted` text NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'suggestion') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"suggestion` (\n                            `id` tinyint(12) NOT NULL AUTO_INCREMENT,\n                            `label` varchar(255) NOT NULL,\n                            `pw` text NOT NULL,\n                            `pw_iv` text NOT NULL,\n                            `pw_len` int(5) NOT NULL,\n                            `description` text NOT NULL,\n                            `author_id` int(12) NOT NULL,\n                            `folder_id` int(12) NOT NULL,\n                            `comment` text NOT NULL,\n                            `suggestion_type` varchar(10) NOT NULL default 'new',\n                            `encryption_type` varchar(20) NOT NULL default 'not_set',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"export` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `export_tag` varchar(20) NOT NULL,\n                            `item_id` int(12) NOT NULL,\n                            `label` varchar(500) NOT NULL,\n                            `login` varchar(100) NOT NULL,\n                            `description` text NOT NULL,\n                            `pw` text NOT NULL,\n                            `path` varchar(500) NOT NULL,\n                            `email` varchar(500) NOT NULL default 'none',\n                            `url` varchar(500) NOT NULL default 'none',\n                            `kbs` varchar(500) NOT NULL default 'none',\n                            `tags` varchar(500) NOT NULL default 'none',\n                            `folder_id` varchar(10) NOT NULL,\n                            `perso` tinyint(1) NOT NULL default '0',\n                            `restricted_to` varchar(200) DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'tokens') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'tokens` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `user_id` int(12) NOT NULL,\n                            `token` varchar(255) NOT NULL,\n                            `reason` varchar(255) NOT NULL,\n                            `creation_timestamp` varchar(50) NOT NULL,\n                            `end_timestamp` varchar(50) NOT NULL,\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'items_change') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"items_change` (\n                            `id` int(12) NOT NULL AUTO_INCREMENT,\n                            `item_id` int(12) NOT NULL,\n                            `label` varchar(255) NOT NULL DEFAULT 'none',\n                            `pw` text NOT NULL,\n                            `login` varchar(255) NOT NULL DEFAULT 'none',\n                            `email` varchar(255) NOT NULL DEFAULT 'none',\n                            `url` varchar(255) NOT NULL DEFAULT 'none',\n                            `description` text NOT NULL,\n                            `comment` text NOT NULL,\n                            `folder_id` tinyint(12) NOT NULL,\n                            `user_id` int(12) NOT NULL,\n                            `timestamp` varchar(50) NOT NULL DEFAULT 'none',\n                            PRIMARY KEY (`id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } elseif ($task === 'templates') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'CREATE TABLE IF NOT EXISTS `' . $var['tbl_prefix'] . 'templates` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `item_id` int(12) NOT NULL,\n                            `category_id` int(12) NOT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;'\n                        );\n                    } elseif ($task === 'cache_tree') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"cache_tree` (\n                            `increment_id` smallint(32) NOT NULL AUTO_INCREMENT,\n                            `data` longtext DEFAULT NULL CHECK (json_valid(`data`)),\n                            `visible_folders` longtext NOT NULL,\n                            `timestamp` varchar(50) NOT NULL,\n                            `user_id` int(12) NOT NULL,\n                            `folders` longtext DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } else if ($task === 'processes_tasks') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"processes_tasks` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `process_id` int(12) NOT NULL,\n                            `created_at` varchar(50) NOT NULL,\n                            `updated_at` varchar(50) DEFAULT NULL,\n                            `finished_at` varchar(50) DEFAULT NULL,\n                            `task` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`task`)),\n                            `system_process_id` int(12) DEFAULT NULL,\n                            `is_in_progress` tinyint(1) NOT NULL DEFAULT 0,\n                            `sub_task_in_progress` tinyint(1) NOT NULL DEFAULT 0,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            'ALTER TABLE `' . $var['tbl_prefix'] . 'processes_tasks`\n                                ADD KEY `process_id_idx` (`process_id`);'\n                        );\n                    } else if ($task === 'processes') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"processes` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `created_at` varchar(50) NOT NULL,\n                            `updated_at` varchar(50) DEFAULT NULL,\n                            `finished_at` varchar(50) DEFAULT NULL,\n                            `process_id` int(12) DEFAULT NULL,\n                            `process_type` varchar(20) NOT NULL,\n                            `output` text DEFAULT NULL,\n                            `arguments` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`arguments`)),\n                            `is_in_progress` tinyint(1) NOT NULL DEFAULT 0,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } else if ($task === 'processes_logs') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"processes_logs` (\n                            `increment_id` int(12) NOT NULL AUTO_INCREMENT,\n                            `created_at` varchar(20) NOT NULL,\n                            `job` varchar(50) NOT NULL,\n                            `status` varchar(10) NOT NULL,\n                            `updated_at` varchar(20) DEFAULT NULL,\n                            `finished_at` varchar(20) DEFAULT NULL,\n                            PRIMARY KEY (`increment_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    } else if ($task === 'ldap_groups_roles') {\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"CREATE TABLE IF NOT EXISTS `\" . $var['tbl_prefix'] . \"ldap_groups_roles` (\n                            `increment_id` INT(12) NOT NULL AUTO_INCREMENT,\n                            `role_id` INT(12) NOT NULL,\n                            `ldap_group_id` INT(12) NOT NULL,\n                            `ldap_group_label` VARCHAR(255) NOT NULL,\n                            PRIMARY KEY (`increment_id`),\n                            KEY `ROLE` (`role_id`)\n                            ) CHARSET=utf8;\"\n                        );\n                    }\n                    // CARREFULL - WHEN ADDING NEW TABLE\n                    // Add the command inside install.js file\n                    // in task array at step 5\n                }\n                // answer back\n                if ($mysqli_result) {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\", \"task\" : \"' . $task . '\", \"activity\" : \"' . $activity . '\"}]';\n                } else {\n                    echo '[{\"error\" : \"' . addslashes(str_replace(array(\"'\", \"\\n\", \"\\r\"), array('\"', '', ''), mysqli_error($dbTmp))) . '\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\", \"table\" : \"' . $task . '\"}]';\n                }\n            } else {\n                echo '[{\"error\" : \"' . addslashes(str_replace(array(\"'\", \"\\n\", \"\\r\"), array('\"', '', ''), mysqli_connect_error())) . '\", \"result\" : \"Failed\", \"multiple\" : \"\"}]';\n            }\n\n            mysqli_close($dbTmp);\n            // Destroy session without writing to disk\n            define('NODESTROY_SESSION', 'true');\n            session_destroy();\n            break;\n\n        case 'step_6':\n            //decrypt\n            require_once 'libs/aesctr.php'; // AES Counter Mode implementation\n            $activity = Encryption\\Crypt\\aesctr::decrypt($post_activity, 'cpm', 128);\n            $data_sent = Encryption\\Crypt\\aesctr::decrypt($post_data, 'cpm', 128);\n            $data_sent = json_decode($data_sent, true);\n            $task = Encryption\\Crypt\\aesctr::decrypt($post_task, 'cpm', 128);\n            $json = Encryption\\Crypt\\aesctr::decrypt($post_db, 'cpm', 128);\n            $db = json_decode($json, true);\n\n            $dbTmp = mysqli_connect(\n                $db['db_host'],\n                $db['db_login'],\n                $db['db_pw'],\n                $db['db_bdd'],\n                $db['db_port']\n            );\n\n            // read install variables\n            $result = mysqli_query($dbTmp, 'SELECT * FROM `_install`');\n            while ($row = $result->fetch_array()) {\n                $var[$row[0]] = $row[1];\n            }\n\n            // launch\n            if (empty($var['sk_path'])) {\n                $securePath = $var['absolute_path'];\n            } else {\n                //ensure $var['sk_path'] has no trailing slash\n                $var['sk_path'] = rtrim(str_replace('\\/', '//', $var['sk_path']), '/\\\\');\n                $securePath = $var['sk_path'];\n            }\n\n            $events = '';\n\n            if ($activity === 'file') {\n                if ($task === 'settings.php') {\n                    // first is to create teampass-seckey.txt\n                    // 0- check if exists\n                    define('SECUREFILE', generateRandomKey(25));\n                    $filename_seckey = $securePath . '/' . SECUREFILE;\n\n                    if (file_exists($filename_seckey)) {\n                        if (!copy($filename_seckey, $filename_seckey . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                            echo '[{\"error\" : \"File `$filename_seckey` already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                            break;\n                        } else {\n                            unlink($filename);\n                        }\n                    }\n\n                    // 1- generate saltkey\n                    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n                    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n                    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n                    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n                    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n                    require_once '../includes/libraries/Encryption/Encryption/File.php';\n                    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n                    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n                    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n                    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n                    $new_salt = $key->saveToAsciiSafeString();\n\n                    // 2- store key in file\n                    file_put_contents(\n                        $filename_seckey,\n                        $new_salt\n                    );\n\n                    // Now create settings file\n                    $filename = '../includes/config/settings.php';\n\n                    if (file_exists($filename)) {\n                        if (!copy($filename, $filename . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                            echo '[{\"error\" : \"Setting.php file already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                            break;\n                        } else {\n                            unlink($filename);\n                        }\n                    }\n                    //echo \">\". $db['db_pw'].\" -- \".$new_salt.\" ;; \";\n                    // Encrypt the DB password\n                    $encrypted_text = encryptFollowingDefuse(\n                        $db['db_pw'],\n                        $new_salt\n                    )['string'];\n\n                    // Open and write Settings file\n                    $file_handler = fopen($filename, 'w');\n                    $result = fwrite(\n                        $file_handler,\n                        utf8_encode(\n                            '<?php\n// DATABASE connexion parameters\ndefine(\"DB_HOST\", \"' . $db['db_host'] . '\");\ndefine(\"DB_USER\", \"' . $db['db_login'] . '\");\ndefine(\"DB_PASSWD\", \"' . str_replace('$', '\\$', $encrypted_text) . '\");\ndefine(\"DB_NAME\", \"' . $db['db_bdd'] . '\");\ndefine(\"DB_PREFIX\", \"' . $var['tbl_prefix'] . '\");\ndefine(\"DB_PORT\", \"' . $db['db_port'] . '\");\ndefine(\"DB_ENCODING\", \"' . $session_db_encoding . '\");\ndefine(\"DB_SSL\", array(\n    \"key\" => \"\",\n    \"cert\" => \"\",\n    \"ca_cert\" => \"\",\n    \"ca_path\" => \"\",\n    \"cipher\" => \"\"\n));\ndefine(\"DB_CONNECT_OPTIONS\", array(\n    MYSQLI_OPT_CONNECT_TIMEOUT => 10\n));\ndefine(\"SECUREPATH\", \"' . $securePath . '\");\ndefine(\"SECUREFILE\", \"' . SECUREFILE. '\");\n\nif (isset($_SESSION[\\'settings\\'][\\'timezone\\']) === true) {\n    date_default_timezone_set($_SESSION[\\'settings\\'][\\'timezone\\']);\n}\n'\n                        )\n                    );\n                    fclose($file_handler);\n\n                    // Create TP USER\n                    require_once '../includes/config/include.php';\n                    $tmp = mysqli_num_rows(mysqli_query($dbTmp, \"SELECT * FROM `\" . $var['tbl_prefix'] . \"users` WHERE id = '\" . TP_USER_ID . \"'\"));\n                    if ($tmp === 0) {\n                        // generate key for password\n                        $pwd = GenerateCryptKey(25, true, true, true, true);\n                        $encrypted_pwd = cryption(\n                            $pwd,\n                            $new_salt,\n                            'encrypt'\n                        )['string'];\n\n                        // GEnerate new public and private keys\n                        $userKeys = generateUserKeys($pwd);\n\n                        $mysqli_result = mysqli_query(\n                            $dbTmp,\n                            \"INSERT INTO `\" . $var['tbl_prefix'] . \"users` (`id`, `login`, `pw`, `groupes_visibles`, `derniers`, `key_tempo`, `last_pw_change`, `last_pw`, `admin`, `fonction_id`, `groupes_interdits`, `last_connexion`, `gestionnaire`, `email`, `favourites`, `latest_items`, `personal_folder`, `public_key`, `private_key`, `is_ready_for_usage`, `otp_provided`) VALUES ('\" . TP_USER_ID . \"', 'TP', '\".$encrypted_pwd.\"', '', '', '', '', '', '1', '', '', '', '0', '', '', '', '0', '\".$userKeys['public_key'].\"', '\".$userKeys['private_key'].\"', '1', '1')\"\n                        );\n                    }\n\n                    if ($result === false) {\n                        echo '[{\"error\" : \"Setting.php file could not be created. Please check the path and the rights\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    } else {\n                        echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    }\n                } elseif ($task === 'security') {\n                    // Sort out the file permissions\n\n                    // is server Windows or Linux?\n                    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n                        // Change directory permissions\n                        if (is_null($session_abspath) === false) {\n                            $result = recursiveChmod($session_abspath, 0770, 0740);\n                            if ($result) {\n                                $result = recursiveChmod($session_abspath . '/files', 0770, 0770);\n                            }\n                            if ($result) {\n                                $result = recursiveChmod($session_abspath . '/upload', 0770, 0770);\n                            }\n                        }\n                    }\n                    $result = true;\n                    if ($result === false) {\n                        echo '[{\"error\" : \"Cannot change directory permissions - please fix manually\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    } else {\n                        echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    }\n                } elseif ($task === 'csrfp-token') {\n                    // update CSRFP TOKEN\n                    $csrfp_file_sample = '../includes/libraries/csrfp/libs/csrfp.config.sample.php';\n                    $csrfp_file = '../includes/libraries/csrfp/libs/csrfp.config.php';\n                    if (file_exists($csrfp_file)) {\n                        if (!copy($csrfp_file, $csrfp_file . '.' . date('Y_m_d', mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y'))))) {\n                            echo '[{\"error\" : \"csrfp.config.php file already exists and cannot be renamed. Please do it by yourself and click on button Launch.\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                            break;\n                        } else {\n                            $events .= \"The file $csrfp_file already exist. A copy has been created.<br />\";\n                        }\n                    }\n                    unlink($csrfp_file); // delete existing csrfp.config file\n                    copy($csrfp_file_sample, $csrfp_file); // make a copy of csrfp.config.sample file\n                    $data = file_get_contents($csrfp_file);\n                    $newdata = str_replace('\"CSRFP_TOKEN\" => \"\"', '\"CSRFP_TOKEN\" => \"' . bin2hex(openssl_random_pseudo_bytes(25)) . '\"', $data);\n                    $jsUrl = $data_sent['url_path'] . '/includes/libraries/csrfp/js/csrfprotector.js';\n                    $newdata = str_replace('\"jsUrl\" => \"\"', '\"jsUrl\" => \"' . $jsUrl . '\"', $newdata);\n                    file_put_contents('../includes/libraries/csrfp/libs/csrfp.config.php', $newdata);\n\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n            } elseif ($activity === 'install') {\n                if ($task === 'cleanup') {\n                    // Mark a tag to force Install stuff (folders, files and table) to be cleanup while first login\n                    mysqli_query($dbTmp, \"INSERT INTO `\" . $var['tbl_prefix'] . \"misc` (`type`, `intitule`, `valeur`) VALUES ('install', 'clear_install_folder', 'true')\");\n\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } elseif ($task === 'init') {\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                } elseif ($task === 'cronJob') {\n                    // Create cronjob\n                    require_once '../includes/libraries/TiBeN/CrontabManager/CrontabAdapter.php';\n                    require_once '../includes/libraries/TiBeN/CrontabManager/CrontabJob.php';\n                    require_once '../includes/libraries/TiBeN/CrontabManager/CrontabRepository.php';\n\n                    // get php location\n                    require_once 'tp.functions.php';\n                    $phpLocation = findPhpBinary();\n                    if ($phpLocation['error'] === false) {\n                        // Instantiate the adapter and repository\n                        try {\n                            $crontabRepository = new CrontabRepository(new CrontabAdapter());\n                            $results = $crontabRepository->findJobByRegex('/Teampass\\ scheduler/');\n                            if (count($results) === 0) {\n                                // Add the job\n                                $crontabJob = new CrontabJob();\n                                $crontabJob\n                                    ->setMinutes('*')\n                                    ->setHours('*')\n                                    ->setDayOfMonth('*')\n                                    ->setMonths('*')\n                                    ->setDayOfWeek('*')\n                                    ->setTaskCommandLine($phpLocation . ' ' . $SETTINGS['cpassman_dir'] . '/sources/scheduler.php')\n                                    ->setComments('Teampass scheduler');\n                                \n                                $crontabRepository->addJob($crontabJob);\n                                $crontabRepository->persist();\n                            }\n                        } catch (Exception $e) {\n                            // do nothing\n                        }\n                    } else {\n                        echo '[{\"error\" : \"Cannot find PHP binary location. Please add a cronjob manually (see documentation).\", \"result\":\"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                    }\n                    echo '[{\"error\" : \"\", \"index\" : \"' . $post_index . '\", \"multiple\" : \"' . $post_multiple . '\"}]';\n                }\n            }\n\n            mysqli_close($dbTmp);\n            // Destroy session without writing to disk\n            define('NODESTROY_SESSION', 'true');\n            session_destroy();\n            break;\n    }\n}\n", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      upgrade_operations.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\nset_time_limit(600);\n\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\n$_SESSION['CPM'] = 1;\n\n//include librairies\nrequire_once '../includes/language/english.php';\nrequire_once '../includes/config/include.php';\nrequire_once '../includes/config/settings.php';\nrequire_once '../sources/main.functions.php';\nrequire_once '../includes/libraries/Tree/NestedTree/NestedTree.php';\nrequire_once 'tp.functions.php';\nrequire_once 'libs/aesctr.php';\nrequire_once '../includes/config/tp.config.php';\n\n// Prepare POST variables\n$post_nb = filter_input(INPUT_POST, 'nb', FILTER_SANITIZE_NUMBER_INT);\n$post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n\n// Load libraries\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Some init\n$_SESSION['settings']['loaded'] = '';\n$finish = true;\n\n// Get the encrypted password\ndefine('DB_PASSWD_CLEAR', defuse_return_decrypted(DB_PASSWD));\n\n// DataBase\n// Test DB connexion\n$pass = DB_PASSWD_CLEAR;\n$server = DB_HOST;\n$pre = DB_PREFIX;\n$database = DB_NAME;\n$port = DB_PORT;\n$user = DB_USER;\n\nif (mysqli_connect(\n    $server,\n    $user,\n    $pass,\n    $database,\n    $port\n)) {\n    $db_link = mysqli_connect(\n        $server,\n        $user,\n        $pass,\n        $database,\n        $port\n    );\n} else {\n    $res = 'Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error());\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error()) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Load libraries\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Get POST with operation to perform\n$post_operation = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\nif (isset($post_operation) === true && empty($post_operation) === false) {\n    if ($post_operation === '20230604_1') {\n        // ---->\n        // OPERATION - 20230604_1 - generate key for item_key\n\n        // Get items to treat\n        $rows = mysqli_query(\n            $db_link,\n            \"SELECT id FROM \".$pre.\"items\n            WHERE item_key = '-1'\n            ORDER BY id\n            LIMIT \".$post_nb.\";\"\n        );\n        // Handle error on query\n        if (!$rows) {\n            echo '[{\"finish\":\"1\" , \"error\":\"'.mysqli_error($db_link).'\"}]';\n            exit();\n        }\n\n        // Get total of items to treat\n        $total = mysqli_num_rows($rows);\n\n        // Loop on items and update for requested ones\n        if ((int) $total > 0) {\n            while ($row = mysqli_fetch_array($rows, MYSQLI_ASSOC)) {\n                // Gererate a key and update\n                mysqli_query(\n                    $db_link,\n                    \"UPDATE `\".$pre.\"items`\n                    SET `item_key` = '\".uniqidReal(50).\"'\n                    WHERE `id` = \".$row['id'].\";\"\n                );\n                if (mysqli_error($db_link)) {\n                    echo '[{\"finish\":\"1\", \"next\":\"\", \"error\":\"MySQL Error! '.addslashes(mysqli_error($db_link)).'\"}]';\n                    exit();\n                }\n            }\n        }\n\n        // Manage end of operation\n        if ($total === 0) {\n            $finish = 1;\n        } else {\n            $finish = 0;\n        }\n        // ----<\n    } elseif ($post_operation === 'populateItemsTable_CreatedAt') {\n        $finish = populateItemsTable_CreatedAt($pre, $post_nb);\n    } elseif ($post_operation === 'populateItemsTable_UpdatedAt') {\n        $finish = populateItemsTable_UpdatedAt($pre);\n    } elseif ($post_operation === 'populateItemsTable_DeletedAt') {\n        $finish = populateItemsTable_DeletedAt($pre);\n    }\n}\n\n// Close connection\nmysqli_close($db_link);\n\n\n// Return back\necho '[{\"finish\":\"'.$finish.'\" , \"next\":\"\", \"error\":\"\", \"total\":\"'.$total.'\"}]';\n\n\n\nfunction populateItemsTable_CreatedAt($pre, $post_nb)\n{\n    global $db_link;\n    // loop on items - created_at\n    $items = mysqli_query(\n        $db_link,\n        \"select i.id as id, ls.date as datetime\n        from `\" . $pre . \"items` as i\n        inner join `\" . $pre . \"log_items` as ls on ls.id_item = i.id\n        WHERE ls.action = 'at_creation' AND i.created_at IS NULL\n        LIMIT \" . $post_nb.\";\"\n    );\n    while ($item = mysqli_fetch_assoc($items)) {\n        if (empty((string) $item['datetime']) === false && is_null($item['datetime']) === false) {\n            // update created_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"items` SET created_at = '\".$item['datetime'].\"' WHERE id = \".$item['id']\n            );\n        }\n    }\n\n    // Is it finished?\n    $remainingItems = mysqli_num_rows(\n        mysqli_query(\n            $db_link,\n            \"SELECT * FROM `\" . $pre . \"items` WHERE created_at IS NULL\"\n        )\n    );\n    return $remainingItems > 0 ? 0 : 1;\n}\n\nfunction populateItemsTable_UpdatedAt($pre)\n{\n    global $db_link;\n    // loop on items - updated_at\n    $items = mysqli_query(\n        $db_link,\n        \"select i.id as id, (select date from \" . $pre . \"log_items where action = 'at_modification' and id_item=id order by date DESC limit 1) as datetime \n        from `\" . $pre . \"items` as i;\"\n    );\n    while ($item = mysqli_fetch_assoc($items)) {\n        if (is_null($item['datetime']) === false) {\n            // update updated_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"items` SET updated_at = '\".$item['datetime'].\"' WHERE id = \".$item['id']\n            );\n        }\n    }\n\n    return 1;\n}\n\nfunction populateItemsTable_DeletedAt($pre)\n{\n    global $db_link;\n    // loop on items - deleted_at\n    $items = mysqli_query(\n        $db_link,\n        \"select i.id as id, (select date from \" . $pre . \"log_items where action = 'at_deleted' and id_item=id order by date DESC limit 1) as datetime\n        from `\" . $pre . \"items` as i;\"\n    );\n    while ($item = mysqli_fetch_assoc($items)) {\n        if (is_null($item['datetime']) === false) {\n            // update updated_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"items` SET deleted_at = '\".$item['datetime'].\"' WHERE id = \".$item['id']\n            );\n        }\n    }\n\n    return 1;\n}", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      upgrade_run_3.0.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\nset_time_limit(600);\n\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\n$_SESSION['CPM'] = 1;\n\n//include librairies\nrequire_once '../includes/language/english.php';\nrequire_once '../includes/config/include.php';\nrequire_once '../includes/config/settings.php';\nrequire_once '../sources/main.functions.php';\nrequire_once '../includes/libraries/Tree/NestedTree/NestedTree.php';\nrequire_once 'tp.functions.php';\nrequire_once 'libs/aesctr.php';\nrequire_once '../includes/config/tp.config.php';\n\n// Get the encrypted password\ndefine('DB_PASSWD_CLEAR', defuse_return_decrypted(DB_PASSWD));\n\n/*\n//Build tree\n$tree = new Tree\\NestedTree\\NestedTree(\n    $pre . 'nested_tree',\n    'id',\n    'parent_id',\n    'title'\n);\n*/\n\n// DataBase\n// Test DB connexion\n$pass = DB_PASSWD_CLEAR;\n$server = DB_HOST;\n$pre = DB_PREFIX;\n$database = DB_NAME;\n$port = DB_PORT;\n$user = DB_USER;\n\nif (mysqli_connect(\n    $server,\n    $user,\n    $pass,\n    $database,\n    $port\n)) {\n    $db_link = mysqli_connect(\n        $server,\n        $user,\n        $pass,\n        $database,\n        $port\n    );\n} else {\n    $res = 'Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error());\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"Impossible to get connected to server. Error is: ' . addslashes(mysqli_connect_error()) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Load libraries\nrequire_once '../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.1\n\n// Ensure admin user is ready\nmysqli_query(\n    $db_link,\n    \"UPDATE \".$pre.\"users \n    SET is_ready_for_usage = 1, otp_provided = 1 \n    WHERE id = 1\"\n);\n\n//---<END 3.0.1\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.5\n\n// Add the INDEX process_id_idx to the processes_tasks table\n$res = checkIndexExist(\n    $pre . 'processes_tasks',\n    'process_id_idx',\n    \"ADD KEY `process_id_idx` (`process_id`)\"\n);\nif (!$res) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding the INDEX process_id_idx to the processes_tasks table! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n//---<END 3.0.5\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.6\n// Add new setting 'sending_emails_job_frequency'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'sending_emails_job_frequency'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'sending_emails_job_frequency', '2')\"\n    );\n}\n// Add new setting 'user_keys_job_frequency'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'user_keys_job_frequency'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'user_keys_job_frequency', '1')\"\n    );\n}\n// Add new setting 'items_statistics_job_frequency'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'enable_tasks_items_statistics_job_frequencymanager'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'items_statistics_job_frequency', '5')\"\n    );\n}\n\n// Add field ongoing_process_id to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'ongoing_process_id',\n    \"varchar(100) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field ongoing_process_id to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n//---<END 3.0.6\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.7\n// Alter\ntry {\n    mysqli_query(\n        $db_link,\n        'ALTER TABLE `' . $pre . 'cache_tree` CHANGE `data` `data` LONGTEXT DEFAULT NULL;'\n    );\n} catch (Exception $e) {\n    // Do nothing\n}\n\n// Fix for #3679\nmysqli_query(\n    $db_link,\n    \"UPDATE `\" . $pre . \"users` SET `treeloadstrategy` = 'full' WHERE treeloadstrategy NOT IN ('full','sequential');\"\n);\n\n//---<END 3.0.7\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.8\n// Add field mfa_disabled to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'mfa_enabled',\n    \"tinyint(1) NOT null DEFAULT '1';\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field mfa_disabled to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n//---<END 3.0.8\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.9\n// Add new setting 'reload_cache_table_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'reload_cache_table_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'reload_cache_table_task', '')\"\n    );\n}\n// Add new setting 'rebuild_config_file'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'rebuild_config_file'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'rebuild_config_file', '')\"\n    );\n}// Add new setting 'purge_temporary_files_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'purge_temporary_files_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'purge_temporary_files_task', '')\"\n    );\n}\n// Add new setting 'clean_orphan_objects_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'clean_orphan_objects_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'clean_orphan_objects_task', '')\"\n    );\n}\n// Add new setting 'users_personal_folder_task'\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'users_personal_folder_task'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'users_personal_folder_task', '')\"\n    );\n}\n\n// Remove unused settings\nmysqli_query(\n    $db_link,\n    \"DELETE FROM `\" . $pre . \"misc` WHERE `intitule`='maintenance_job_tasks';\"\n);\nmysqli_query(\n    $db_link,\n    \"DELETE FROM `\" . $pre . \"misc` WHERE `intitule`='maintenance_job_frequency';\"\n);\n\n// Add field item_key to ITEMS table\n$res = addColumnIfNotExist(\n    $pre . 'items',\n    'item_key',\n    \"varchar(500) NOT NULL DEFAULT '-1';\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field item_key to table ITEMS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Remove column unique from ITEMS table\n$res = removeColumnIfNotExist(\n    $pre . 'items',\n    'unique'\n);\n\n// Add field export_tag to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'export_tag',\n    \"varchar(20) NOT NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field export_tag to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field folder_id to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'folder_id',\n    \"varchar(10) NOT NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field folder_id to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field perso to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'perso',\n    \"tinyint(1) NOT NULL default '0';\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field perso to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field restricted_to to EXPORT table\n$res = addColumnIfNotExist(\n    $pre . 'export',\n    'restricted_to',\n    \"varchar(200) DEFAULT NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field restricted_to to table EXPORT! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Rename column id to item_id in EXPORT table\nchangeColumnName(\n    $pre . 'export',\n    'id',\n    'item_id',\n    \"int(12) NOT NULL\"\n);\n\n// Add field created_at to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'created_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field created_at to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field updated_at to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'updated_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field updated_at to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field deleted_at to USERS table\n$res = addColumnIfNotExist(\n    $pre . 'users',\n    'deleted_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field deleted_at to table USERS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// populate created_at, updated_at and deleted_at fields in USERS table\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"users` WHERE created_at IS NOT NULL\"));\nif (intval($tmp) === 0) {\n    populateUsersTable($pre);\n}\n//---<END 3.0.9\n\n//---------------------------------------------------------------------\n\n//--->BEGIN 3.0.10\n\n// Add field created_at to ITEMS table\n$res = addColumnIfNotExist(\n    $pre . 'items',\n    'created_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field created_at to table ITEMS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field updated_at to ITEMS table\n$res = addColumnIfNotExist(\n    $pre . 'items',\n    'updated_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field updated_at to table ITEMS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n\n// Add field deleted_at to ITEMS table\n$res = addColumnIfNotExist(\n    $pre . 'items',\n    'deleted_at',\n    \"varchar(30) NULL;\"\n);\nif ($res === false) {\n    echo '[{\"finish\":\"1\", \"msg\":\"\", \"error\":\"An error appears when adding field deleted_at to table ITEMS! ' . mysqli_error($db_link) . '!\"}]';\n    mysqli_close($db_link);\n    exit();\n}\n/*\n// populate created_at, updated_at and deleted_at fields in ITEMS table\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"items` WHERE created_at IS NOT NULL\"));\nif (intval($tmp) === 0) {\n    populateItemsTable($pre);\n}*/\n//---<END 3.0.10\n\n//---------------------------------------------------------------------\n\n// Save timestamp\n$tmp = mysqli_num_rows(mysqli_query($db_link, \"SELECT * FROM `\" . $pre . \"misc` WHERE type = 'admin' AND intitule = 'upgrade_timestamp'\"));\nif (intval($tmp) === 0) {\n    mysqli_query(\n        $db_link,\n        \"INSERT INTO `\" . $pre . \"misc` (`type`, `intitule`, `valeur`) VALUES ('admin', 'upgrade_timestamp', \".time().\")\"\n    );\n} else {\n    mysqli_query(\n        $db_link,\n        \"UPDATE `\" . $pre . \"misc` SET valeur = \".time().\" WHERE type = 'admin' AND intitule = 'upgrade_timestamp'\"\n    );\n}\n\n//---< END 3.0.X upgrade steps\n\n// Close connection\nmysqli_close($db_link);\n\n// Finished\necho '[{\"finish\":\"1\" , \"next\":\"\", \"error\":\"\"}]';\n\n\n//---< FUNCTIONS\n\nfunction populateUsersTable($pre)\n{\n    global $db_link;\n    // loop on users - created_at\n    $users = mysqli_query(\n        $db_link,\n        \"select u.id as uid, ls.date as datetime\n        from `\" . $pre . \"users` as u\n        inner join `\" . $pre . \"log_system` as ls on ls.field_1 = u.id\n        WHERE ls.type = 'user_mngt' AND ls.label = 'at_user_added'\"\n    );\n    while ($user = mysqli_fetch_assoc($users)) {\n        if (empty((string) $user['datetime']) === false && is_null($user['datetime']) === false) {\n            // update created_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"users` SET created_at = '\".$user['datetime'].\"' WHERE id = \".$user['uid']\n            );\n        }\n    }\n\n    // loop on users - updated_at\n    $users = mysqli_query(\n        $db_link,\n        \"select u.id as uid, (select date from \" . $pre . \"log_system where type = 'user_mngt' and field_1=uid order by date DESC limit 1) as datetime from `\" . $pre . \"users` as u;\"\n    );\n    while ($user = mysqli_fetch_assoc($users)) {\n        if (empty((string) $user['datetime']) === false && is_null($user['datetime']) === false) {\n            // update updated_at field\n            mysqli_query(\n                $db_link,\n                \"UPDATE `\" . $pre . \"users` SET updated_at = '\".$user['datetime'].\"' WHERE id = \".$user['uid']\n            );\n        }\n    }\n}\n", "<?php\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      upgrade_scripts_manager.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\nset_time_limit(600);\n\n\nrequire_once '../sources/SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nerror_reporting(E_ERROR | E_PARSE);\n$_SESSION['db_encoding'] = 'utf8';\n$_SESSION['CPM'] = 1;\nrequire_once '../includes/config/include.php';\n\n// Prepare POST variables\n$post_file_number = filter_input(INPUT_POST, 'file_number', FILTER_SANITIZE_NUMBER_INT);\n\n$scripts_list = array(\n    array('upgrade_run_3.0.0.php', 'user_id'),\n    array('upgrade_run_3.0.0_passwords.php', 'user_id'),\n    array('upgrade_run_3.0.0_logs.php', 'user_id'),\n    array('upgrade_run_3.0.0_fields.php', 'user_id'),\n    array('upgrade_run_3.0.0_suggestions.php', 'user_id'),\n    array('upgrade_run_3.0.0_files.php', 'user_id'),\n    array('upgrade_run_3.0.php', 'user_id'),\n    array('upgrade_operations.php', '20230604_1'),\n    array('upgrade_operations.php', 'populateItemsTable_CreatedAt'),\n    array('upgrade_operations.php', 'populateItemsTable_UpdatedAt'),\n    array('upgrade_operations.php', 'populateItemsTable_DeletedAt'),\n);\n$param = '';\n\n// test if finished\nif (intval($post_file_number) >= count($scripts_list)) {\n    $finished = 1;\n} else {\n    $finished = 0;\n}\necho '[{\"finish\":\"'.$finished.'\", \"scriptname\":\"'.$scripts_list[$post_file_number][0].'\", \"parameter\":\"'.$scripts_list[$post_file_number][1].'\"}]';\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      items.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (! checkUser($_SESSION['user_id'], $_SESSION['key'], curPage($SETTINGS), $SETTINGS)) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n$var = [];\n$var['hidden_asterisk'] = '<i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk\"></i>';\n\n?>\n\n\n<script type=\"text/javascript\">\n    var requestRunning = false,\n        clipboardForLogin,\n        clipboardForPassword,\n        clipboardForLink,\n        query_in_progress = 0,\n        screenHeight = $(window).height(),\n        quick_icon_query_status = true,\n        first_group = 1,\n        folderSearchCriteria = $('#jstree_search').val(),\n        userDidAChange = false,\n        userUploadedFile = false,\n        selectedFolder = false,\n        selectedFolderId = false,\n        itemClipboard,\n        startedItemsListQuery = false,\n        itemStorageInformation = '',\n        applicationVars,\n        initialPageLoad = true,\n        previousSelectedFolder=-1,\n        debugJavascript = false;\n\n    // Manage memory\n    browserSession(\n        'init',\n        'teampassApplication', {\n            lastItemSeen: false,\n            itemsListStop: '',\n            itemsListStart: '',\n            selectedFolder: '',\n            itemsListFolderId: false,\n            itemsListRestricted: '',\n            itemsShownByQuery: '',\n            foldersList: [],\n            personalSaltkeyRequired: 0,\n            uploadedFileId: '',\n            tempScrollTop: 0,\n        }\n    );\n\n    browserSession(\n        'init',\n        'teampassItem', {\n            IsPersonalFolder: '',\n            hasAccessLevel: '',\n            hasCustomCategories: '',\n            id: '',\n            timestamp: '',\n            folderId: ''\n        }\n    );\n\n    if (debugJavascript === true) {\n        console.log('User information')\n        console.log(store.get('teampassUser'))\n    }\n\n    // Show loader\n    toastr.remove();\n    toastr.info('<?php echo langHdl('loading_data'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n    // Build tree\n    $('#jstree').jstree({\n        'core': {\n            'animation': 0,\n            'check_callback': true,\n            'data': {\n                'url': './sources/tree.php',\n                'dataType': 'json',\n                'icons': false,\n                'data': function(node) {\n                    if (debugJavascript === true) {\n                        console.info('Les r\u00e9pertoires sont charg\u00e9s');\n                        console.log(node);\n                    }\n                    return {\n                        'id': node.id.split('_')[1],\n                        'force_refresh': store.get('teampassApplication') !== undefined ?\n                            store.get('teampassApplication').jstreeForceRefresh : 0\n                    };\n                }\n            },\n            'strings': {\n                'Loading ...': '<?php echo langHdl('loading'); ?>...'\n            },\n            'themes': {\n                'icons': false,\n            },\n        },\n        'plugins': [\n            'state', 'search'\n        ]\n    })\n    // On node select\n    .bind('select_node.jstree', function(e, data) {\n        if (debugJavascript === true) console.log('JSTREE BIND');\n        selectedFolder = $('#jstree').jstree('get_selected', true)[0]\n        selectedFolderId = parseInt(selectedFolder.id.split('_')[1]);\n\n        // manage icon open/closed\n        var selectedFolderIcon = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder'),\n            selectedFolderIconSelected = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder-selected');\n\n        // remove selected on previous folder\n        $($('#fld_'+previousSelectedFolder).children('.tree-folder'))\n            .removeClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder-selected'))\n            .addClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder'));\n        // show selected icon\n        $('#fld_'+selectedFolderId).children('.tree-folder')\n            .removeClass(selectedFolderIcon)\n            .addClass(selectedFolderIconSelected);\n\n        if (debugJavascript === true) {\n            console.info('SELECTED NODE ' + selectedFolderId + \" -- \" + startedItemsListQuery);\n            console.log(selectedFolder);\n            console.log(selectedFolder.original.is_pf)\n        }\n\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.selectedFolder = selectedFolderId,\n                teampassApplication.selectedFolderTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderParentId = selectedFolder.parent !== \"#\" ? selectedFolder.parent.split('_')[1] : 0,\n                teampassApplication.selectedFolderParentTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderIcon = selectedFolderIcon,\n                teampassApplication.selectedFolderIconSelected = selectedFolderIconSelected,\n                teampassApplication.selectedFolderIsPF = selectedFolder.original.is_pf,\n                teampassApplication.userCanEdit = selectedFolder.original.can_edit\n            }\n        )\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = selectedFolderId\n            }\n        );\n\n        // Prepare list of items\n        if (startedItemsListQuery === false) {\n            startedItemsListQuery = true;\n            ListerItems(selectedFolderId, '', 0);\n        }\n\n        previousSelectedFolder = selectedFolderId;\n        initialPageLoad = false;\n    })\n    // Search in tree\n    .bind('search.jstree', function(e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($('#jstree li>a.jstree-search').attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // Find folders in jstree\n    $('#jstree_search')\n        .keypress(function(e) {\n            if (e.keyCode === 13) {\n                $('#jstree').jstree('search', $('#jstree_search').val());\n            }\n        })\n        .focus(function() {\n            $(this).val('');\n        })\n        .blur(function() {\n            $(this).val(folderSearchCriteria);\n        });\n\n    // Is this a short url\n    var queryDict = {},\n        showItemOnPageLoad = false,\n        itemIdToShow = '';\n    location.search.substr(1).split(\"&\").forEach(function(item) {\n        queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]\n    });\n\n    if (queryDict['group'] !== undefined && queryDict['group'] !== '' &&\n        queryDict['id'] !== undefined && queryDict['id'] !== ''\n    ) {\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Store current view\n        savePreviousView();\n\n        // Store the folder to open\n        store.set(\n            'teampassApplication', {\n                selectedFolder: parseInt(queryDict['group']),\n                selectedItem: parseInt(queryDict['id'])\n            }\n        );\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = parseInt(queryDict['group'])\n            }\n        );\n\n        showItemOnPageLoad = true;\n        itemIdToShow = queryDict['id'];\n        startedItemsListQuery = true;\n\n        $('.item-details-card').removeClass('hidden');\n        $('#folders-tree-card, .columns-position').addClass('hidden');\n\n        // refresh selection in jstree\n        $('#jstree').jstree('deselect_all');\n        $('#jstree').jstree('select_node', '#li_' + itemIdToShow);\n        $('#jstree').jstree(true).hide_icons()\n\n        // Get list of items in this folder\n        startedItemsListQuery = true;\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n        // Show details\n        $.when(\n            Details(itemIdToShow, 'show', true)\n        ).then(function() {\n            //requestRunning = false;\n            console.log('Item detail affich\u00e9')\n            // Force previous view to Tree folders\n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.previousView = '#folders-tree-card';\n                }\n            );\n        });\n    }\n\n    // Preload list of items\n    if (store.get('teampassApplication') !== undefined &&\n        store.get('teampassApplication').selectedFolder !== undefined &&\n        store.get('teampassApplication').selectedFolder !== ''\n    ) {\n        startedItemsListQuery = true;\n\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n    }\n\n\n\n    // Close on escape key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 27) {\n            closeItemDetailsCard();\n        }\n    });\n\n    /*// Edit on e key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 69 && $('.item-details-card').is(':visible') === true) {\n            if ($('#form-item').hasClass('hidden') === false) {\n                showItemEditForm(store.get('teampassItem').id);\n            }\n        }\n    });\n    */\n\n    // load list of visible folders for current user\n    $(this).delay(500).queue(function() {\n        refreshVisibleFolders();\n\n        $(this).dequeue();\n    });\n\n    // Keep the scroll position\n    $(window).on(\"scroll\", function() {\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    tempScrollTop: $(window).scrollTop()\n                }\n            );\n        }\n    });\n\n\n    // Ensure correct height of folders tree\n    $('#jstree').height(screenHeight - 200);\n\n    // Prepare iCheck format for checkboxes\n    $('input[type=\"checkbox\"].flat-blue, input[type=\"radio\"].flat-blue').iCheck({\n        checkboxClass: 'icheckbox_flat-blue',\n        radioClass: 'iradio_flat-blue'\n    });\n\n    // Prepare some UI elements\n    $('#limited-search').prop('checked', false);\n\n    $(document).on('blur', '#form-item-icon', function() {\n        $('#form-item-icon-show').html('<i class=\"fas '+$(this).val()+'\"></i>');\n    });\n\n    // Manage the password show button\n    // including autohide after a couple of seconds\n    $(document).on('click', '#card-item-pwd-show-button', function() {\n        if ($(this).hasClass('pwd-shown') === false) {\n            $(this).addClass('pwd-shown');\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            // Change class and show spinner\n            $('.pwd-show-spinner')\n                .removeClass('far fa-eye')\n                .addClass('fas fa-circle-notch fa-spin text-warning');\n\n            // display raw password\n            $('#card-item-pwd')\n                .text($('#hidden-item-pwd').val())\n                .addClass('pointer_none');\n\n            // log password is shown\n            itemLog(\n                'at_password_shown',\n                store.get('teampassItem').id,\n                $('#card-item-label').text()\n            );\n\n            // Autohide\n            setTimeout(() => {\n                $(this).removeClass('pwd-shown');\n                $('#card-item-pwd')\n                    .html('<?php echo $var['hidden_asterisk']; ?>')\n                    .removeClass('pointer_none');\n                $('.pwd-show-spinner')\n                    .removeClass('fas fa-circle-notch fa-spin text-warning')\n                    .addClass('far fa-eye');\n            }, <?php echo isset($SETTINGS['password_overview_delay']) === true ? $SETTINGS['password_overview_delay'] * 1000 : 4000; ?>);\n        } else {\n            $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    });\n\n\n    // Manage folders action\n    $('.tp-action').click(function() {\n        // SHow user\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fas fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n        if ($(this).data('folder-action') === 'refresh') {\n            // Force refresh\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 1\n                }\n            );\n            if (selectedFolderId !== '') {\n                refreshTree(selectedFolderId, true);\n            } else {\n                refreshTree();\n            }\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 0\n                }\n            );\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'expand') {\n            $('#jstree').jstree('open_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'collapse') {\n            $('#jstree').jstree('close_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'add') {\n            if (debugJavascript === true) console.info('SHOW ADD FOLDER');\n            toastr.remove();\n\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20 &&\n                store.get('teampassUser').can_create_root_folder === 0\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Store last\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n\n            // Prepare some data in the form\n            if (selectedFolder.parent !== undefined && selectedFolder.parent !== '') {\n                $('#form-folder-add-parent').val(selectedFolder.parent.split('_')[1]).change();\n            }\n\n            $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n\n            $('#form-folder-add-label')\n                .val('')\n                .focus();\n            $('#form-folder-add-icon-selected, #form-folder-add-icon').val('');\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'add');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            if (debugJavascript === true) console.log(store.get('teampassApplication'));\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Show edit form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n            // Prepare some data in the form\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolder + \"']\")\n                .prop('disabled', true);\n            $('#form-folder-add-parent').val(store.get('teampassApplication').selectedFolderParentId).change();\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolderParentId + \"']\")\n                .prop('disabled', false);\n            $('#form-folder-add-label')\n                .val(store.get('teampassApplication').selectedFolderParentTitle)\n                .focus();\n            // is PF 1st level\n            if (store.get('teampassApplication').selectedFolderIsPF === 1 && store.get('teampassApplication').selectedFolderParentId !== 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            } else if (store.get('teampassApplication').userCanEdit === 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', true);\n            } else {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            }\n\n            $('#form-folder-add-complexicity').val(store.get('teampassItem').folderComplexity).change();\n            $('#form-folder-add-icon')\n                .val(store.get('teampassApplication').selectedFolderIcon);\n            $('#form-folder-add-icon-selected')\n                .val(store.get('teampassApplication').selectedFolderIconSelected);\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'update');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-copy');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-copy').removeClass('hidden');\n            // Prepare some data in the form\n            $('#form-folder-copy-source').val(store.get('teampassApplication').selectedFolder).change();\n            //$(\"#form-folder-copy-destination option[value='\"+selectedFolder.id.split('_')[1]+\"']\")\n            //.prop('disabled', true);\n            $('#form-folder-copy-destination').val(0).change();\n            $('#form-folder-copy-label')\n                .val(store.get('teampassApplication').selectedFolderTitle + ' <?php echo strtolower(langHdl('copy')); ?>')\n                .focus();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'delete') {\n            if (debugJavascript === true) console.info('SHOW DELETE FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 30) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-delete');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-delete').removeClass('hidden');\n\n            // Prepare some data in the form\n            $('#form-folder-delete-selection').val(store.get('teampassApplication').selectedFolder).change();\n            $('#form-folder-confirm-delete').iCheck('uncheck');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'import') {\n            // IMPORT ITEMS\n            if (debugJavascript === true) console.info('SHOW IMPORT ITEMS');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-folder-import');\n\n\n            // Show import form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-import').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'new') {\n            if (debugJavascript === true) console.info('SHOW NEW ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView();\n\n            // Remove validated class\n            $('#form-item').removeClass('was-validated');\n\n            // Get some info\n            $.when(\n                retPrivileges = getPrivilegesOnItem(store.get('teampassApplication').itemsListFolderId, 0)\n            ).then(function() {\n                if (retPrivileges === false) {\n                    return false;\n                }\n                // If previous item was seen then clean session\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 1,\n                        teampassItem.id = ''\n                    }\n                );\n\n                // Show Visibility and minimum complexity\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // HIde\n                $('.form-item-copy, #folders-tree-card, .columns-position, #form-item-password-options, .form-item-action, #form-item-attachments-zone')\n                    .addClass('hidden');\n                // Destroy editor\n                $('#form-item-description').summernote('destroy');\n\n                // Clean select2 lists\n                $('.select2').val('');\n                /*if ($('.select2') !== null) {if (debugJavascript === true) console.log($('.select2').length)\n                    $('.select2').change();\n                }*/\n                // Do some form cleaning\n                $('.clear-me-val').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html').html('');\n                $('.form-item-control').val('');\n                // Show edition form\n                $('.form-item').removeClass('hidden');\n                $('.item-details-card').addClass('hidden');\n                // Force update of simplepassmeter\n                $('#form-item-password').focus();\n                $('#form-item-label').focus();\n                // Prepare editor\n                $('#form-item-description').summernote({\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['insert', ['link', 'picture']],\n                        //['height', ['height']],\n                        ['view', ['codeview']]\n                    ],\n                    codeviewFilter: true,\n                    codeviewIframeFilter: true\n                });\n\n                // Set folder\n                $('#form-item-folder').val(selectedFolderId).change();\n                // Select tab#1\n                $('#form-item-nav-pills li:first-child a').tab('show');\n                // Preselect\n                $('#pwd-definition-size').val(12);\n                // Set type of action\n                $('#form-item-button-save').data('action', 'new_item');\n                // Does this folder contain Custom Fields\n                if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                    $('#form-item-field').removeClass('hidden');\n                    $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                        $('#form-item-category-' + category).removeClass('hidden');\n                    })\n                } else {\n                    $('#form-item-field, .form-item-category').addClass('hidden');\n                }\n\n\n\n                // Prepare datePicker\n                $('#form-item-deleteAfterDate, .datepicker').datepicker({\n                    format: '<?php echo str_replace(['Y', 'M'], ['yyyy', 'mm'], $SETTINGS['date_format']); ?>',\n                    todayHighlight: true,\n                    todayBtn: true,\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n                \n                // Add track-change class\n                //$('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change');\n\n                // Update variable\n                userDidAChange = false;\n\n                toastr.remove();\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT ITEM');\n            $.when(\n                getPrivilegesOnItem(selectedFolderId, 1)\n            ).then(function() {\n                // Is user allowed\n                if (store.get('teampassItem').item_rights < 20) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Store current view\n                savePreviousView();\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // Remove validated class\n                $('#form-item').removeClass('was-validated');\n\n                // Now manage edtion\n                showItemEditForm(selectedFolderId);\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView('.form-item-copy');\n\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show copy form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-copy, .item-details-card-menu').removeClass('hidden');\n                // Prepare some data in the form\n                $('#form-item-copy-new-label').val($('#form-item-label').val());\n                $('#form-item-copy-destination').val($('#form-item-folder').val()).change();\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'delete') {\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-delete');\n\n            if (debugJavascript === true) console.info('SHOW DELETE ITEM');\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show delete form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-delete, .item-details-card-menu').removeClass('hidden');\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'share') {\n            if (debugJavascript === true) console.info('SHOW SHARE ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-share');\n\n            // Show share form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-share, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'notify') {\n            if (debugJavascript === true) console.info('SHOW NOTIFY ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-notify');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-notify, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'otv') {\n            if (debugJavascript === true) console.info('SHOW OTV ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-otv');\n\n            // Generate link\n            prepareOneTimeView();\n\n            $('#form-item-otv-link').val('');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-otv, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'server') {\n            if (debugJavascript === true) console.info('SHOW SERVER UPDATE ITEM');\n            toastr.remove();\n\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-item-server');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-server, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        }\n\n        return false;\n    });\n\n    /**\n     * Saves the current view of user\n     */\n    function savePreviousView(newElement = '') {\n        var element = '';\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            element = '#folders-tree-card';\n        } else if ($('.form-item').hasClass('hidden') === false) {\n            element = '.form-item';\n        } else if ($('.item-details-card-menu').hasClass('hidden') === false) {\n            element = '.item-details-card';\n        }\n        \n        if (debugJavascript === true) {console.log('>>> ' + element + ' -- ' + newElement);}\n\n        if (element === '.item-details-card') element = '#folders-tree-card';\n\n        // Store current view\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.previousView = element;\n            }\n        );\n\n        // Store the new one to display\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.currentView = newElement;\n            }\n        );\n    }\n\n\n    $('.but-back').click(function() {\n        userDidAChange = false;\n        if ($(this).hasClass('but-back-to-item') === false) {\n            // Is this form the edition one?\n            if ($(this).hasClass('item-edit') === true && userUploadedFile === true) {\n                // Do some operation such as cancel file upload\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_uploaded_files_but_not_saved');\n                        if (debugJavascript === true) console.log(data);\n                    }\n                );\n            }\n\n            // Clear pickfiles div\n            $('#form-item-upload-pickfilesList').html('');\n\n            // Hide all\n            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, .columns-position, #item-details-card-categories, #form-item-upload-pickfilesList, #card-item-expired')\n                .addClass('hidden');\n\n            // Show expected one\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n\n            closeItemDetailsCard();\n        } else {\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n            $(store.get('teampassUser').currentView).addClass('hidden');\n        }\n        $('.but-prev-item, .but-next-item').addClass('hidden').text('');\n    });\n\n\n    // Quit item details card back to items list\n    $('.but-back-to-list').click(function() {\n        closeItemDetailsCard();\n    });\n\n\n\n    // Manage if change is performed by user\n    $('#form-item .form-item-control')\n        .on('change', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on #form-item > ' + userDidAChange + \" - Element \" + $(this).attr('id'));\n                //$(this).attr('data-change-ongoing', true);\n            }\n        })\n        .on('ifToggled', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on ifToggled > ' + userDidAChange);\n                //$(this).attr('data-change-ongoing', true);\n            }\n        });\n\n    /**\n     * Click on perform IMPORT\n     */\n    $(document).on('click', '#form-item-import-perform', function() {\n        if (debugJavascript === true) console.log('START IMPORT');\n    });\n\n\n    /**\n     * Click on ITEM REQUEST ACCESS\n     */\n    $(document).on('click', '.fa-clickable-access-request', function() {\n        // Store current view\n        savePreviousView();\n\n        // Adapt the form\n        $('#form-item-request-access-label')\n            .html($(this).closest('.list-item-description').find('.list-item-row-description').text());\n\n        // Store current item ID\n        var selectedItemId = $(this).closest('.list-item-row').data('item-id');\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.id = selectedItemId;\n            }\n        );\n\n        // Show user\n        $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n        $('.form-item-request-access').removeClass('hidden');\n    });\n\n    /**\n     * Send an access request to author\n     */\n    $(document).on('click', '#form-item-request-access-perform', function() {\n        // No reason is provided\n        if ($('#form-item-request-access-reason').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_provide_reason'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'id': store.get('teampassItem').id,\n            'email': DOMPurify.sanitize($('#form-item-request-access-reason').val()),\n        }\n        // NOw send the email\n        $.post(\n            \"sources/items.queries.php\", {\n                type: 'send_request_access',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_request_access');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change view\n                    $('.form-item-request-access').addClass('hidden');\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n\n        scrollBackToPosition();\n    });\n\n\n    /**\n     * Show/Hide the Password generation options\n     */\n    $('#item-button-password-showOptions').click(function() {\n        if ($('#form-item-password-options').hasClass('hidden') === true) {\n            $('#form-item-password-options').removeClass('hidden');\n        } else {\n            $('#form-item-password-options').addClass('hidden');\n        }\n    });\n\n\n\n    /**\n     * Adapt the top rules of item form on change of folders\n     */\n    $('#form-item-folder').change(function() {\n        if ($(this).val() !== null && store.get('teampass-folders') !== undefined) {\n            if (debugJavascript === true) {\n                console.log('teampass-folders');\n                console.log(store.get('teampass-folders'))\n            }\n            var folders = JSON.parse(store.get('teampass-folders'));\n            $('#card-item-visibility').html(folders[$(this).val()].visibilityRoles);\n            $('#card-item-minimum-complexity').html(folders[$(this).val()].complexity.text);\n        }\n\n    });\n\n    /**\n     * NOTIFY - Perform save\n     */\n    $('#form-item-notify-perform').click(function() {\n        var form = $('#form-item-notify');\n\n\n        var data = {\n            'notification_status': $('#form-item-notify-checkbox').is(':checked') === true ? 1 : 0,\n            'item_id': store.get('teampassItem').id,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'save_notification_status',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'save_notification_status');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change the icon for Notification\n                    if ($('#form-item-notify-checkbox').is(':checked') === true) {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span>');\n                    } else {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span>');\n                    }\n\n                    // Show/hide forms\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-notify').addClass('hidden');\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-notify-checkbox').iCheck('uncheck');\n                }\n            }\n        );\n    });\n\n\n\n    /**\n     * SHARE - validate the email\n     */\n    $('#form-item-share-perform').click(function() {\n        var form = $('#form-item-share');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Prepare data\n        var data = {\n            'id': store.get('teampassItem').id,\n            'receipt': DOMPurify.sanitize($('#form-item-share-email').val()),\n            'cat': 'share_this_item',\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'send_email',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_email');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-share').addClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-share-email').val('');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * DELETE - recycle item\n     */\n    $('#form-item-delete-perform').click(function() {\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'folder_id': selectedFolderId,\n            'access_level': store.get('teampassItem').hasAccessLevel,\n        }\n        \n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'delete_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_item');\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    $('.form-item-action, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(selectedFolderId, true);\n                    // Load list of items\n                    ListerItems(selectedFolderId, '', 0);\n                    // Close\n                    closeItemDetailsCard();\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * NOTIFY - save status\n     */\n    $('#form-item-share-perform').click(function() {\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'notify_user_on_item_change',\n                id: store.get('teampassItem').id,\n                value: $('#form-item-anyoneCanModify').is(':checked') === true ? 1 : 0,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                if (data[0].error === '') {\n                    $('.form-item, .item-details-card, .form-item-action').removeClass('hidden');\n                    $('.form-item-share, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear\n                    $('#form-item-anyoneCanModify').attr('checked', '');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            },\n            'json'\n        );\n    });\n\n\n    /**\n     * COPY - perform copy item\n     */\n    $('#form-item-copy-perform').click(function() {\n        // Do check\n        if ($('#form-item-copy-new-label').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('item_copying'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'source_id': selectedFolderId,\n            'dest_id': $('#form-item-copy-destination').val(),\n            'new_label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'copy_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(parseInt($('#form-item-copy-destination').val()), true);\n                    // Load list of items\n                    ListerItems(parseInt($('#form-item-copy-destination').val()), '', 0);\n\n                    // Reopen Item details form\n                    Details(\n                        data.new_id,\n                        'show',\n                        true\n                    );\n                    \n                    // Close\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-copy').addClass('hidden');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * SERVER - perform server update\n     */\n    $('#form-item-server-perform').click(function() {\n        // Decide what action is performing the user\n\n        if ($('#tab-one-shot').hasClass('active') === true) {\n            // Do check\n            if ($('#form-item-server-login').val() === '' ||\n                $('#form-item-server-old-password').val() === '' ||\n                $('#form-item-server-password').val() === ''\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Show cog\n            toastr.remove();\n            toastr.info(\n                '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>',\n            );\n\n            // Force user did a change to false\n            userDidAChange = false;\n            userUploadedFile = false;\n\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'new_pwd': DOMPurify.sanitize($('#form-item-server-password').val()),\n                'ssh_root': DOMPurify.sanitize($('#form-item-server-login').val()),\n                'ssh_pwd': DOMPurify.sanitize($('#form-item-server-old-password').val()),\n                'user_id': <?php echo $_SESSION['user_id']; ?>,\n            }\n\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password\",\n                    data: prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (debugJavascript === true) console.log(data);\n                    //check if format error\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Warn user\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n\n                        // Info\n                        $(\"#form-item-server-status\")\n                            .html(\"<?php echo langHdl('done'); ?> \" + data.text)\n                            .removeClass('hidden');\n                    }\n                }\n            );\n        } else if ($('#tab-scheduled').hasClass('active') === true) {\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password_frequency\",\n                    id: store.get('teampassItem').id,\n                    freq: $('#form-item-server-cron-frequency').val(),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].error != \"\") {\n                        toastr.remove();\n                        toastr.error(\n                            data[0].error,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('#form-item-server-cron-frequency').val(0).change();\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                },\n                \"json\"\n            );\n        }\n    });\n\n\n    /**\n     * SUGGESTION - perform new suggestion on item\n     */\n    $('#form-item-suggestion-perform').click(function() {\n        var form = $('#form-item-suggestion');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 10000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'label': DOMPurify.sanitize($('#form-item-suggestion-label').val()),\n            'login': DOMPurify.sanitize($('#form-item-suggestion-login').val()),\n            'password': DOMPurify.sanitize($('#form-item-suggestion-password').val()),\n            'email': DOMPurify.sanitize($('#form-item-suggestion-email').val()),\n            'url': DOMPurify.sanitize($('#form-item-suggestion-url').val()),\n            'description': DOMPurify.sanitize($('#form-item-suggestion-description').summernote('code'), {USE_PROFILES: {html: true}}),\n            'comment': DOMPurify.sanitize($('#form-item-suggestion-comment').val(), {USE_PROFILES: {html: true}}),\n            'folder_id': selectedFolderId,\n            'item_id': store.get('teampassItem').id\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'suggest_item_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'suggest_item_change');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear form\n                    $('.form-item-suggestion').html('');\n\n                    // Collapse form\n                    //$('.card-item-extra').collapse('toggle');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER NEW - Add a new folder\n     */\n    $('#form-folder-add-perform').click(function() {\n        var form = $('#form-folder-add');\n        if (debugJavascript === true) {\n            console.log(form[0]);\n            console.log(form[0].checkValidity());\n        }\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Error if folder text is only numeric\n        if (/^\\d+$/.test($('#form-folder-add-label').val())) {\n            $('#form-folder-add-label').addClass('is-invalid');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_only_numbers_in_folder_name'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        // Sanitize text fields\n        let formLabel = fieldDomPurifier('#form-folder-add-label', false, false, false),\n            formIcon = fieldDomPurifier('#form-folder-add-icon', false, false, false),\n            formIconSelected = fieldDomPurifier('#form-folder-add-icon-selected', false, false, false);\n        if (formLabel === false || formIcon === false || formIconSelected === false) {\n            // Label is empty\n            toastr.remove();\n            toastr.warning(\n                'XSS attempt detected. Field has been emptied.',\n                'Error', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'title': formLabel,\n            'parentId': $('#form-folder-add-parent option:selected').val(),\n            'complexity': $('#form-folder-add-complexicity option:selected').val(),\n            //'access_rights_strategy': $('#form-folder-add-rights option:selected').val(),\n            'icon': formIcon,\n            'iconSelected': formIconSelected,\n            'id': selectedFolderId,\n        }\n        if (debugJavascript === true) console.log(data);\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: $('#form-folder-add').data('action') + '_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', $('#form-folder-add').data('action') + '_folder');\n                if (debugJavascript === true) {\n                    console.log(data);\n                }\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    if ($('#form-folder-add').data('action') === 'add') {\n                        // Refresh tree\n                        refreshTree(data.newId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(data.newId, '', 0);\n                    } else {\n                        // Refresh tree\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 1;\n                            }\n                        );\n                        refreshTree(selectedFolderId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(selectedFolderId, '', 0);\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 0;\n                            }\n                        );\n                    }\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER DELETE - Delete an existing folder\n     */\n    $('#form-folder-delete-perform').click(function() {\n        // Do check\n        if ($('#form-folder-confirm-delete').is(':checked') === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_confirm'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($('#form-folder-delete-selection option:selected').text() === '<?php echo $_SESSION['login']; ?>') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_not_allowed_to'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Is a folder selected\n        if ($('#form-folder-delete-selection option:selected').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        \n        // Ensure Root is not selected\n        } else if (parseInt($('#form-folder-delete-selection option:selected').val()) === 0) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        \n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n\n        var selectedFolders = [],\n            data = {\n                'selectedFolders': [$('#form-folder-delete-selection option:selected').val()]\n            }\n        if (debugJavascript === true) console.log(data)\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'delete_folders',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'delete_folders');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree(data.parent_id, true);\n                    // Refresh list of items inside the folder\n                    ListerItems(data.parent_id, '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n\n                $('#form-folder-confirm-delete').iCheck('uncheck');\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER COPY - Copy an existing folder\n     */\n    $('#form-folder-copy-perform').click(function() {\n        // Do check\n        if ($(\"#form-folder-copy-source\").val() === \"\" || $(\"#form-folder-copy-destination\").val() === \"\") {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_must_enter_all_fields'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($(\"#form-folder-copy-source\").val() === $(\"#form-folder-copy-destination\").val()) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_source_and_destination_are_equal'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        var data = {\n            'source_folder_id': $('#form-folder-copy-source option:selected').val(),\n            'target_folder_id': $('#form-folder-copy-destination option:selected').val(),\n            'folder_label': DOMPurify.sanitize($('#form-folder-copy-label').val(), {USE_PROFILES: {html: false}}),\n        }\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'copy_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'copy_folder');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree($('#form-folder-copy-destination option:selected').val(), true);\n                    // Refresh list of items inside the folder\n                    ListerItems($('#form-folder-copy-destination option:selected').val(), '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n    $(document).on('change', '#form-folder-copy-source', function() {\n        $('#form-folder-copy-label')\n            .val($('#form-folder-copy-source option:selected').text()\n                .substring(0, $('#form-folder-copy-source option:selected').text().lastIndexOf('[')).trim() +\n                ' <?php echo strtolower(langHdl('copy')); ?>');\n    });\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function closeItemDetailsCard() {\n        if (debugJavascript === true) console.log('CLOSE - user did a change? ' + userDidAChange + \" - User previous view: \" + store.get('teampassUser').previousView);\n        if (userDidAChange === true) {\n            toastr\n                .warning(\n                    '<?php echo langHdl('changes_ongoing'); ?><br>' +\n                    '<button type=\"button\" class=\"btn clear\" id=\"discard-changes\"><?php echo langHdl('yes'); ?></button>' +\n                    '<button type=\"button\" class=\"btn clear ml-2\" id=\"keep-changes\"><?php echo langHdl('no'); ?></button>',\n                    '<?php echo langHdl('caution'); ?>', {\n                        closeButton: true\n                    }\n                );\n            $(document).on('click', '#discard-changes', function() {\n                userDidAChange = false;\n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n                closeItemDetailsCard();\n            });\n        } else {\n            if (store.get('teampassUser').previousView === '.item-details-card' &&\n                $('.item-details-card').hasClass('hidden') === false\n            ) {\n                $('.item-details-card').removeClass('hidden');\n                $('#folders-tree-card, .columns-position, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                    .addClass('hidden');\n\n                // Force previous view to folders list\n                store.update(\n                    'teampassUser',\n                    function(teampassUser) {\n                        teampassUser.previousView = '#folders-tree-card';\n                    }\n                );\n            } else {\n                if (store.get('teampassUser').previousView === '.item-details-card') {\n                    // Force previous view to folders list\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.previousView = '#folders-tree-card';\n                        }\n                    );\n                    // Reopen Item details form\n                    Details(\n                        store.get('teampassItem').id,\n                        'show',\n                        true\n                    );\n\n                    return false;\n                }\n                if (store.get('teampassUser').previousView === '#folders-tree-card' ||\n                    $('.item-details-card').hasClass('hidden') === false\n                ) {\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n                    $('.item-details-card, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                        .addClass('hidden');\n                } else {\n                    // Hide all\n                    $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired')\n                        .addClass('hidden');\n\n                    // Show expected one\n                    $(store.get('teampassUser').previousView).removeClass('hidden');\n                }\n\n                // Do some form cleaning\n                $('.clear-me-val, .form-item-control').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html, .card-item-field-value').html('');\n                $('.form-check-input').attr('checked', '');\n                //$('.card-item-extra').collapse();\n                $('.collapse').removeClass('show');\n                $('.to_be_deleted').remove();\n                $('#card-item-attachments, #card-item-history').html('');\n                $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n\n                // Move back fields\n                $('.fields-to-move')\n                    .detach()\n                    .appendTo('#card-item-fields');\n\n                // Ensure the form is correct\n                $('#list-group-item-main, #item-details-card-categories')\n                    .children('.list-group')\n                    .removeClass('hidden');\n\n                // SHow save button in card\n                //$('#form-item-buttons').removeClass('sticky-footer');\n\n                // Destroy editors\n                $('#form-item-description').summernote('destroy');\n                $('#form-item-suggestion-description').summernote('destroy');\n\n                // Show loading\n                $('.overlay').removeClass('hidden');\n\n                // Collapse accordion\n                //$('.collapseme').addClass('collapsed-card');\n\n                // Restore scroll position\n                $(window).scrollTop(userScrollPosition);\n\n                userDidAChange = false;                \n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n            if (debugJavascript === true) console.log('Edit for closed');\n        }\n\n\n\n        // Scroll back to position\n        scrollBackToPosition();\n    }\n\n\n    /**\n     * Click on button with class but-navigate-item\n     */\n    $(document)\n        .on('click', '.but-navigate-item', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details(\n                //$(this).hasClass('but-prev-item') === true ? $('#list-item-row_' + $(this).attr('data-prev-item-key')) : $('#list-item-row_' + $(this).attr('data-next-item-key')),\n                $(this).hasClass('but-prev-item') === true ? $('#list-item-row_' + $(this).attr('data-prev-item-id')) : $('#list-item-row_' + $(this).attr('data-next-item-id')),\n                'show'\n            );\n\n            $('.but-navigate-item').addClass('hidden');\n        });\n\n\n    /**\n     * Click on item\n     */\n    $(document)\n        .on('click', '.list-item-clicktoshow', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details($(this).closest('tr'), 'show');\n        })\n        .on('click', '.list-item-clicktoedit', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            if (debugJavascript === true) console.log('EDIT ME');\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n            \n            // Load item info\n            Details($(this).closest('tr'), 'edit');\n        });\n\n    /**\n     *  Manage mini icons on mouse over\n     */\n    $(document)\n        .on('mouseenter', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").removeClass('hidden');\n        })\n        .on('mouseleave', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").addClass('hidden');\n        });\n\n    $(document)\n        .on('change', '.form-check-input-template', function() {\n            $('.form-check-input-template').not(this).prop('checked', false);\n            userDidAChange = true;\n            if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        });\n\n    $('.form-check-input-template').on('ifChecked', function() {\n        $('.form-check-input-template').not(this).iCheck('uncheck');\n        userDidAChange = true;\n        if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        //$('.form-check-input-template').attr('data-change-ongoing', true);;\n    });\n\n    /**\n     * Manage change of color\n     */\n    $(document)\n        .on('mouseenter', '.fa-clickable', function() {\n            $(this).addClass('text-info');\n        })\n        .on('mouseleave', '.fa-clickable', function() {\n            $(this).removeClass('text-info');\n        });\n\n    $('#form-item-label').change(function() {\n        $('#form-item-title').html($(this).val());\n    });\n\n    /**\n     * Make the item favourite by clicking on icon\n     */\n    $(document)\n        .on('click', '.item-favourite', function() {\n            if (quick_icon_query_status === true) {\n                quick_icon_query_status = false;\n                var elem = $(this);\n\n                //Send query\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('success'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                var data = {\n                    item_id: $(this).data('item-id'),\n                    action: $(this).data('item-favourited'),\n                }\n\n                console.log(data)\n\n                $.post('sources/items.queries.php', {\n                        type: 'action_on_quick_icon',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(ret) {\n                        //change quick icon\n                        if (elem.data('item-favourited') === 0) {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>');\n                        } else {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse\"></i></span>');\n                        }\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                        quick_icon_query_status = true;\n                    }\n                );\n            }\n        });\n\n    // Click to reaveal password\n    $('#item-button-password-show')\n        .mouseup(function() {\n            $('#form-item-password').attr('type', 'password');\n        })\n        .mousedown(function() {\n            $('#form-item-password').attr('type', 'text');\n        });\n    $('.btn-no-click')\n        .click(function(e) {\n            e.preventDefault();\n        });\n\n\n\n    // show password during longpress\n    var mouseStillDown = false;\n    $('.item-details-card').on('mousedown', '.unhide_masked_data', function(event) {\n            mouseStillDown = true;\n            showPwdContinuous();\n        })\n        .on('mouseup', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        })\n        .on('mouseleave', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        });\n    var showPwdContinuous = function() {\n        if (mouseStillDown === true) {\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            $('#card-item-pwd')\n                .html(\n                    '<span style=\"cursor:none;\">' +\n                    $('#hidden-item-pwd').val()\n                    .replace(/</g, '&lt;')\n                    .replace(/>/g, '&gt;') +\n                    '</span>'\n                );\n\n            setTimeout('showPwdContinuous(\"card-item-pwd\")', 50);\n            // log password is shown\n            if ($('#card-item-pwd').hasClass('pwd-shown') === false) {\n                itemLog(\n                    'at_password_shown',\n                    store.get('teampassItem').id,\n                    $('#card-item-label').text()\n                );\n                $('#card-item-pwd').addClass('pwd-shown');\n            }\n        } else {\n            $('#card-item-pwd')\n                .html('<?php echo $var['hidden_asterisk']; ?>')\n                .removeClass('pwd-shown');\n        }\n    };\n\n    // Fields - show masked field\n    var selectedElement;\n    $('.item-details-card').on('mousedown', '.replace-asterisk', function(event) {\n            mouseStillDown = true;\n            selectedElement = $(this);\n            showContinuousMasked();\n        })\n        .on('mouseup', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        })\n        .on('mouseleave', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        });\n    var showContinuousMasked = function() {\n        if (mouseStillDown) {\n            $(selectedElement)\n                .text($('#hidden-card-item-field-value-' + selectedElement.data('field-id')).val());\n\n            setTimeout('showContinuousMasked()', 50);\n        } else {\n            $(selectedElement).html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    };\n\n\n    /**\n     * Launch the items search\n     */\n    $('#find_items').bind('keypress', function(e) {\n        var code = e.keyCode || e.which;\n        if (code == 13) {\n            searchItems($(this).val());\n        }\n    });\n\n    $('#find_items_button').click(function() {\n        if ($('#find_items').val() !== '') {\n            searchItems($('#find_items').val());\n        }\n    });\n\n\n    // Password strength\n    var pwdOptions = {};\n    pwdOptions = {\n        common: {\n            zxcvbn: true,\n            debug: false,\n            minChar: 4,\n            onScore: function (options, word, totalScoreCalculated) {\n                if (word.length === 20 && totalScoreCalculated < options.ui.scores[1]) {\n                    // Score doesn't meet the score[1]. So we will return the min\n                    // numbers of points to get that score instead.\n                    return options.ui.score[1]\n                }\n                $(\"#form-item-password-complex\").val(totalScoreCalculated);\n                return totalScoreCalculated;\n            },\n            usernameField: \"#form-item-login\",\n        },\n        rules: {},\n        ui: {\n            colorClasses: [\"text-danger\", \"text-danger\", \"text-danger\", \"text-warning\", \"text-warning\", \"text-success\"],\n            showPopover: false,\n            showStatus: true,\n            showErrors: false,\n            showVerdictsInsideProgressBar: true,\n            container: \"#tab_1\",\n            viewports: {\n                progress: \"#form-item-password-strength\",\n                score: \"#form-item-password-strength\"\n            },\n            scores: [<?php echo TP_PW_STRENGTH_1;?>, <?php echo TP_PW_STRENGTH_2;?>, <?php echo TP_PW_STRENGTH_3;?>, <?php echo TP_PW_STRENGTH_4;?>, <?php echo TP_PW_STRENGTH_5;?>],\n        },\n        i18n : {\n            t: function (key) {\n                var phrases = {\n                    weak: '<?php echo langHdl('complex_level1'); ?>',\n                    normal: '<?php echo langHdl('complex_level2'); ?>',\n                    medium: '<?php echo langHdl('complex_level3'); ?>',\n                    strong: '<?php echo langHdl('complex_level4'); ?>',\n                    veryStrong: '<?php echo langHdl('complex_level5'); ?>'\n                };\n                var result = phrases[key];\n\n                return result === key ? '' : result;\n            }\n        }\n    };\n    $('#form-item-password').pwstrength(pwdOptions);\n    \n\n\n    /**\n     * PLUPLOAD\n     */\n    var uploader_attachments = new plupload.Uploader({\n        runtimes: 'html5,flash,silverlight,html4',\n        browse_button: 'form-item-attach-pickfiles',\n        container: 'form-item-upload-zone',\n        max_file_size: '<?php\n            if (strrpos($SETTINGS['upload_maxfilesize'], 'mb') === false) {\n                echo $SETTINGS['upload_maxfilesize'] . 'mb';\n            } else {\n                echo $SETTINGS['upload_maxfilesize'];\n            }\n            ?>',\n        chunk_size: '1mb',\n        dragdrop: true,\n        url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/upload.attachments.php',\n        flash_swf_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.swf',\n        silverlight_xap_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.xap',\n        filters: {\n            mime_types: [\n                <?php\n                if (\n                    isset($SETTINGS['upload_all_extensions_file']) === false\n                    || (isset($SETTINGS['upload_all_extensions_file']) === true\n                        && (int) $SETTINGS['upload_all_extensions_file'] === 0)\n                ) {\n                    ?> {\n                        title: 'Image files',\n                        extensions: '<?php echo $SETTINGS['upload_imagesext']; ?>'\n                    },\n                    {\n                        title: 'Package files',\n                        extensions: '<?php echo $SETTINGS['upload_pkgext']; ?>'\n                    },\n                    {\n                        title: 'Documents files',\n                        extensions: '<?php echo $SETTINGS['upload_docext']; ?>'\n                    },\n                    {\n                        title: 'Other files',\n                        extensions: '<?php echo $SETTINGS['upload_otherext']; ?>'\n                    }\n                <?php\n                }\n                ?>\n            ],\n            <?php\n            if (isset($SETTINGS['upload_zero_byte_file']) === true && (int) $SETTINGS['upload_zero_byte_file'] === 1) {\n                ?>\n                prevent_empty: false\n            <?php\n            }\n            ?>\n        },\n        <?php\n        if ((int) $SETTINGS['upload_imageresize_options'] === 1) {\n            ?>\n            resize: {\n                width: <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n                height: <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n                quality: <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n            },\n        <?php\n        }\n        ?>\n        init: {\n            BeforeUpload: function(up, file) {\n                toastr.info(\n                    '<i class=\"fa-solid fa-cloud-arrow-up fa-bounce mr-2\"></i><?php echo langHdl('uploading'); ?>',\n                    '', {\n                        timeOut: 0\n                    }\n                );\n\n                // Get random number\n                if (store.get('teampassApplication').uploadedFileId === '') {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.uploadedFileId = CreateRandomString(9, 'num_no_0');\n                        }\n                    );\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID: '<?php echo $_SESSION['user_id']; ?>',\n                    itemId: store.get('teampassItem').id,\n                    type_upload: 'item_attachments',\n                    isNewItem: store.get('teampassItem').isNewItem,\n                    isPersonal: store.get('teampassItem').folderIsPersonal,\n                    edit_item: false,\n                    user_token: store.get('teampassApplication').attachmentToken,\n                    randomId: store.get('teampassApplication').uploadedFileId,\n                    files_number: $('#form-item-hidden-pickFilesNumber').val(),\n                    file_size: file.size\n                });\n                console.log('DEBUG IMAGE - BeforeUpload')\n                console.log(up);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind('UploadProgress', function(up, file) {\n        //console.log('uploader_attachments.bind')\n        $('#upload-file_' + file.id).html('<i class=\"fas fa-file fa-sm mr-2\"></i>' + htmlEncode(file.name) + '<span id=\"fileStatus_'+file.id+'\">- ' + file.percent + '%</span>');\n        if (file.percent === 100) {\n            $('#fileStatus_'+file.id).html('<i class=\"fa-solid fa-circle-check text-success ml-2 fa-1x\"></i>');\n            userUploadedFile = true;\n            userDidAChange = true;\n            toastr.remove();\n        }\n    });\n    uploader_attachments.bind('Error', function(up, err) {\n        toastr.remove();\n        toastr.error(\n            err.message + (err.file ? ', File: ' + err.file.name : ''),\n            '', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    $(\"#form-item-upload-pickfiles\").click(function(e) {\n        if ($('#form-item-upload-pickfilesList').text() !== '') {\n            // generate and save token\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"save_token\",\n                    type_category: 'action_system',\n                    size: 25,\n                    capital: true,\n                    numeric: true,\n                    ambiguous: true,\n                    reason: \"item_attachments\",\n                    duration: 10,\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.attachmentToken = data[0].token;\n                        }\n                    );\n                    console.log('start upload')\n                    uploader_attachments.start();\n                },\n                \"json\"\n            );\n            e.preventDefault();\n        } else {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_file_to_upload'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        if (debugJavascript === true) {\n            console.log('uploader_attachments.FilesAdded')\n        }\n        $('#form-item-upload-pickfilesList').removeClass('hidden');\n        var addedFiles = '';\n        $.each(files, function(i, file) {\n            $('#form-item-upload-pickfilesList').append(\n                '<div id=\"upload-file_' + file.id + '\">' +\n                '<span id=\"upload-file-remove_' + file.id +\n                '><a href=\"#\" onclick=\"$(this).closest(\\'div\\').remove();\"><i class=\" fa fa-trash mr-2 pointer\"></i></a></span> ' +\n                htmlEncode(file.name) + ' (' + plupload.formatSize(file.size) + ')' +\n                '</div>');\n            $(\"#form-item-hidden-pickFilesNumber\").val(\n                parseInt($(\"#form-item-hidden-pickFilesNumber\").val()) + 1\n            );\n            if (debugJavascript === true) {\n                console.info('Info du fichier :');\n                console.log(file);\n            }\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    //->\n\n\n\n    /**\n     * Save item changes\n     */\n    $('#form-item-button-save').click(function() {\n        var arrayQuery = [],\n            originalFolderId = $('#form-item-folder').val(),\n            itemsList = [],\n            userItemRight = '';\n\n        // What action is this?\n        if ($('#form-item-button-save').data('action') === '' ||\n            $('#form-item-button-save').data('action') === undefined\n        ) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_no_action_identified'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Don't save if no change\n        if (userDidAChange === false && userUploadedFile === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('no_change_performed'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Validate form\n        var form = $('#form-item');\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Loop on all changed fields\n        $('.form-item-field-custom').each(function(i, obj) {\n            if ($(this).data('change-ongoing') === true) {\n                // Create an array with changed inputs\n                arrayQuery.push({\n                    'input': $(this).attr('id'),\n                    'field': $(this).data('field-name'),\n                    'value': $(this).val(),\n                });\n            }\n        });\n        if (debugJavascript === true) {\n            console.log('CHANGED FIELDS '+userUploadedFile + ' ' + userDidAChange);\n            console.log(arrayQuery);\n        }\n\n        // is user allowed to edit this item\n        if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n            itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n        }\n        if (itemsList.length > 0) {\n            userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n        }\n\n        \n\n        // Do checks\n        if (arrayQuery.length > 0 || userDidAChange === true) {\n            var reg = new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n            // Sanitize text fields\n            purifyRes = fieldDomPurifierLoop('#form-item .purify');\n            if (purifyRes.purifyStop === true) {\n                // if purify failed, stop\n                return false;\n            }\n            \n            // Do some easy checks\n            if (purifyRes.arrFields['label'] === '') {\n                // Label is empty\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_label'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if (purifyRes.arrFields['tags'] !== '' && reg.test(purifyRes.arrFields['tags'])\n            ) {\n                // Tags not wel formated\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_tags'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').val() === '' ||\n                typeof $('#form-item-folder option:selected').val() === 'undefined'\n            ) {\n                // No folder selected\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_no_selected_folder'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').attr('disabled') === 'disabled' && userItemRight && userItemRight <= 40) {\n                // Folder is not allowed\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_folder_not_allowed'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else {\n                // Continue preparation of saving query\n\n                //Manage restriction\n                var restriction = new Array(),\n                    restrictionRole = new Array(),\n                    userInRestrictionList = false;\n                $('#form-item-restrictedto option:selected').each(function() {\n                    if ($(this).val() !== '') {\n                        if ($(this).hasClass('restriction_is_role') === true) {\n                            restrictionRole.push($(this).val().substring(5));\n                        } else {\n                            restriction.push($(this).val());\n                            // Is the user part of the restriction option\n                            if ($(this).val() === '<?php echo $_SESSION['user_id']; ?>') {\n                                userInRestrictionList = true;\n                            }\n                        }\n                    }\n                });\n                // IF any restriction, then ensure the author is in\n                if (userInRestrictionList === false && restriction.length > 0) {\n                    restriction.push('<?php echo $_SESSION['user_id']; ?>;');\n                }\n\n                // Manage diffusion list\n                var diffusion = new Array();\n                var diffusionNames = new Array();\n                $('#form-item-anounce option:selected').each(function() {\n                    diffusion.push($(this).val());\n                    diffusionNames.push($(this).text());\n                });\n\n                // Get item field values\n                // Ensure that mandatory ones are filled in too\n                // and they are compliant to regexes\n                var fields = [];\n                var errorExit = false;\n                var reason = '';\n                $('.form-item-field-custom').each(function(key, data) {\n                    fields.push({\n                        'id': $(this).data('field-name'),\n                        'value': $(this).val(),\n                    });\n\n                    // Mandatory?\n                    if (parseInt($(this).data('field-mandatory')) === 1 &&\n                        $(this).val() === '' &&\n                        $('#form-item-field-' + $(this).data('field-name')).parent().hasClass('hidden') === false\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        return false;\n                    }\n                    if ($(this).val().length > 0 && $(this).data('field-regex').length > 0 &&\n                        !$(this).val().match($(this).data('field-regex'))\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        reason = 'regex';\n                        return false;\n                    }\n                });\n                if (errorExit === true) {\n                    toastr.remove();\n                    if (reason === 'regex') {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_regex'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                    return false;\n                }\n                    \n                //prepare data\n                var data = {\n                    'anyone_can_modify': $('#form-item-anyoneCanModify').is(':checked') ? 1 : 0,\n                    'complexity_level': parseInt($('#form-item-password-complex').val()),\n                    'description': $('#form-item-description').summernote('code'),\n                    'diffusion_list': diffusion,\n                    'diffusion_list_names': diffusionNames,\n                    'folder': parseInt($('#form-item-folder').val()),\n                    'email': purifyRes.arrFields['email'],\n                    'fields': fields,\n                    'folder_is_personal': store.get('teampassItem').IsPersonalFolder === 1 ? 1 : 0,\n                    'id': store.get('teampassItem').id,\n                    'label': purifyRes.arrFields['label'],\n                    'login': purifyRes.arrFields['login'],\n                    'pw': $('#form-item-password').val(),\n                    'restricted_to': restriction,\n                    'restricted_to_roles': restrictionRole,\n                    'tags': purifyRes.arrFields['tags'],\n                    'template_id': parseInt($('input.form-check-input-template:checkbox:checked').data('category-id')),\n                    'to_be_deleted_after_date': purifyRes.arrFields['deleteAfterDate'] !== '' ? purifyRes.arrFields['deleteAfterDate'] : '',\n                    'to_be_deleted_after_x_views': parseInt(purifyRes.arrFields['deleteAfterShown']) > 0 ? parseInt(purifyRes.arrFields['deleteAfterShown']) : '',\n                    'url': purifyRes.arrFields['url'],\n                    'user_id': parseInt('<?php echo $_SESSION['user_id']; ?>'),\n                    'uploaded_file_id': store.get('teampassApplication').uploadedFileId === undefined ? '' : store.get('teampassApplication').uploadedFileId,\n                    'fa_icon': purifyRes.arrFields['icon'],\n                };\n                if (debugJavascript === true) {\n                    console.log('SAVING DATA');\n                    console.log(data);\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n                );\n\n                // CLear tempo var\n                store.update(\n                    'teampassApplication',\n                    function(teampassApplication) {\n                        teampassApplication.uploadedFileId = '';\n                    }\n                );\n\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: $('#form-item-button-save').data('action'),\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //decrypt data\n                        try {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                        } catch (e) {\n                            // error\n                            $(\"#div_loading\").addClass(\"hidden\");\n                            //requestRunning = false;\n                            $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\" + data);\n                            $(\"#div_dialog_message\").dialog(\"open\");\n\n                            toastr.remove();\n                            toastr.error(\n                                'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        }\n                        if (debugJavascript === true) console.log('RETURNED DATA');\n                        if (debugJavascript === true) console.log(data);\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        } else {\n                            // Refresh tree\n                            if ($('#form-item-button-save').data('action') === 'update_item') {\n                                if ($('#form-item-folder').val() !== '' &&\n                                    originalFolderId !== $('#form-item-folder').val()\n                                ) {\n                                    refreshTree($('#form-item-folder').val(), false);\n                                }\n                                // Send query to confirm attachments\n                                var data = {\n                                    'item_id': store.get('teampassItem').id,\n                                }\n                                $.post(\n                                    \"sources/items.queries.php\", {\n                                        type: 'confirm_attachments',\n                                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                                        key: '<?php echo $_SESSION['key']; ?>'\n                                    }\n                                );\n                            } else {\n                                refreshTree($('#form-item-folder').val(), true);\n                            }\n\n                            // Refresh list of items inside the folder\n                            ListerItems($('#form-item-folder').val(), '', 0);\n\n                            // Inform user\n                            toastr.info(\n                                '<?php echo langHdl('success'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n\n                            // Close\n                            userDidAChange = false;\n                            userUploadedFile = false;\n\n                            closeItemDetailsCard();\n                            /*\n                            // Hide all\n                            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired').addClass('hidden');\n\n                            // Show expected one\n                            $(store.get('teampassUser').previousView).removeClass('hidden');\n                            */\n                        }\n                    }\n                );\n            }\n        } else if (userUploadedFile === true) {\n            // Send query to confirm attachments\n            var data = {\n                'item_id': store.get('teampassItem').id,\n            }\n\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'confirm_attachments',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                }\n            );\n\n            store.update(\n                'teampassItem',\n                function(teampassItem) {\n                    teampassItem.isNewItem = 0\n                }\n            );\n\n            // Inform user\n            toastr.info(\n                '<?php echo langHdl('done'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Close\n            userUploadedFile = false;\n            closeItemDetailsCard();\n        } else {\n            if (debugJavascript === true) console.info('NOTHING TO SAVE');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('nothing_to_save'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    //->\n\n\n    //autocomplete for TAGS\n    $(\"#form-item-tags\")\n        //.focus()\n        .bind(\"keydown\", function(event) {\n            if (event.keyCode === $.ui.keyCode.TAB &&\n                $(this).data(\"autocomplete\").menu.active) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            source: function(request, response) {\n                $.getJSON(\"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast(request.term)\n                }, response);\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast(this.value);\n            },\n            select: function(event, ui) {\n                var terms = split(this.value);\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push(ui.item.value);\n                // add placeholder to get the comma-and-space at the end\n                terms.push(\"\");\n                this.value = terms.join(\" \");\n\n                return false;\n            }\n        });\n\n    // Warn in case of limited search\n    $(document).on('click', '#limited-search', function() {\n        if ($(this).is(\":checked\") === true) {\n            $('#find_items').css({\n                \"background-color\": \"#f56954\"\n            });\n        } else {\n            $('#find_items').css({\n                \"background-color\": \"#FFF\"\n            })\n        }\n    });\n\n\n    function showItemEditForm(selectedFolderId) {\n        if (debugJavascript === true) console.info('SHOW EDIT ITEM ' + selectedFolderId);\n        \n        //$.when(\n        //    getPrivilegesOnItem(selectedFolderId, 0)\n        //).then(function() {\n        // Now read\n        if (store.get('teampassItem').error === true) {\n            toastr.remove();\n            toastr.error(\n                store.get('teampassItem').message,\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        } else {\n            $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n            $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n            // Show edition form\n            $('.form-item, #form-item-attachments-zone')\n                .removeClass('hidden');\n            $('.item-details-card, .form-item-copy, #form-item-password-options, .form-item-action, #item-details-card-categories, #folders-tree-card, .columns-position')\n                .addClass('hidden');\n\n            // Initial 'user did a change'\n            userDidAChange = false;\n\n            // Force update of simplepassmeter\n            $('#form-item-password').pwstrength(\"forceUpdate\");\n            $('#form-item-label').focus();\n\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n\n            // Does this folder contain Custom Fields\n            if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                $('#form-item-field').removeClass('hidden');\n                $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                    $('#form-item-category-' + category).removeClass('hidden');\n                })\n            } else {\n                $('#form-item-field, .form-item-category').addClass('hidden');\n            }            \n\n            // is user allowed to edit this item - overpass readonly folder\n            if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n                var itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n                userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n                if (userItemRight && userItemRight > 40 && $('#form-item-folder option:selected').attr('disabled') === 'disabled') {\n                    $('#form-item-folder option:selected').removeAttr('disabled');\n                }\n            }\n\n            toastr.remove();\n            // ---\n        }\n        //});\n    }\n\n\n    /**\n     * Start items search\n     */\n    function searchItems(criteria) {\n        if (criteria !== '') {\n            // stop items loading (if on-going)\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 1;\n                }\n            );\n\n            // wait\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('searching'); ?>'\n            );\n\n            // clean\n            $('#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, .fields, #item_extra_info').html('');\n            $('#button_quick_login_copy, #button_quick_pw_copy').addClass('hidden');\n            $('#teampass_items_list').html('');\n\n            // Continu the list of results\n            finishingItemsFind(\n                'search_for_items',\n                $('#limited-search').is(\":checked\") === true ? store.get('teampassApplication').selectedFolder : false,\n                criteria,\n                0\n            );\n        }\n    }\n\n    /**\n     * \n     */\n    function finishingItemsFind(type, limited, criteria, start) {\n        // send query\n        $.get(\n            'sources/find.queries.php', {\n                type: type,\n                limited: limited,\n                search: criteria,\n                start: start,\n                length: 10,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                var pwd_error = '',\n                    icon_login,\n                    incon_link,\n                    icon_pwd,\n                    icon_favorite;\n\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'find.queries.php', type);\n                if (debugJavascript === true) console.log(data);\n\n                // Ensure correct div is not hidden\n                $('#info_teampass_items_list').addClass('hidden');\n                $('#table_teampass_items_list').removeClass('hidden');\n\n                // Show Items list\n                sList(data.html_json);\n\n                if (data.start !== -1 && (data.start <= data.total)) {\n                    // Continu the list of results\n                    finishingItemsFind(\n                        'search_for_items',\n                        $('#limited-search').is(\":checked\") === true ?\n                        store.get('teampassApplication').selectedFolder : false,\n                        criteria,\n                        data.start\n                    )\n                } else {\n                    toastr.remove();\n                    toastr.info(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    // Do some post treatments\n                    $('#form-folder-path').html('');\n                    $('#find_items').val('');\n\n                    // Do drag'n'drop for the folders\n                    prepareFolderDragNDrop();\n\n                    adjustElemsSize();\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function refreshVisibleFolders(forceRefreshCache = false) {\n        var data = {\n            'force_refresh_cache': forceRefreshCache,\n        }\n        if (debugJavascript === true) {\n            console.log('Refresh visible folders');\n            console.log(data);\n        }\n\n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_visible_folders',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_visible_folders');\n                if (debugJavascript === true) {\n                    console.log('TREE');\n                    console.log(data);\n                }\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Build html lists\n                    var html_visible = '',\n                        html_full_visible = '',\n                        html_active_visible = '',\n                        indentation = '',\n                        disabled = '';\n\n                    if (typeof data.html_json === 'undefined' || typeof data.html_json.folders === 'undefined') {\n                        $('#jstree').html('<div class=\"alert alert-warning mt-3 mr-1 ml-1\"><i class=\"fas fa-exclamation-triangle mr-2\"></i>' +\n                            '<?php echo langHdl('no_data_to_display'); ?>' +\n                            '</div>');\n                        //return false;\n                    } else {\n                        refreshFoldersInfo(data.html_json.folders, 'clear');\n                    }\n\n                    // Shall we show the root folder\n                    if (data.html_json.can_create_root_folder === 1) {\n                        html_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_full_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_active_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                    } else {\n                        html_visible = '<option value=\"0\" disabled=\"disabled\"><?php echo langHdl('root'); ?></option>';\n                    }\n\n                    //\n                    $.each(data.html_json.folders, function(i, value) {\n                        // Prepare options lists\n                        html_visible += '<option value=\"' + value.id + '\"' +\n                            ((value.disabled === 1) ? ' disabled=\"disabled\"' : '') +\n                            ' data-parent-id=\"' + value.parent_id + '\">' +\n                            '&nbsp;'.repeat(value.level) +\n                            value.title + (value.path !== '' ? ' [' + value.path + ']' : '') + '</option>';\n                    });\n\n                    // Append new list\n                    $('#form-item-folder, #form-item-copy-destination, #form-folder-add-parent,' +\n                            '#form-folder-delete-selection, #form-folder-copy-source, #form-folder-copy-destination')\n                        .find('option')\n                        .remove()\n                        .end()\n                        .append(html_visible);\n                    $(\".no-root option[value='0']\").remove();\n\n                    if (debugJavascript === true) {\n                        console.info('HTML VISIBLE:')\n                        console.log(html_visible);\n                    }\n\n                    // Store in teampassUser\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.folders = html_visible;\n                        }\n                    );\n\n\n                    // remove ROOT option if exists\n                    $('#form-item-copy-destination option[value=\"0\"]').remove();\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Get more info about folders (Categories)\n     *\n     * @return void\n     */\n    function refreshFoldersInfo(folders, action) {\n        var action = action || '',\n            sending = '';\n\n        if (null === folders) return false;\n\n        if (action === 'clear') {\n            sending = JSON.stringify(folders.map(a => parseInt(a.id)));\n        } else if (action === 'update') {\n            sending = JSON.stringify([folders]);\n        }\n\n        if (debugJavascript === true) {\n            console.info('INPUTS for refresh_folders_other_info');\n            console.log(sending);\n        }\n        \n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_folders_other_info',\n                data: sending,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_folders_other_info');\n                if (debugJavascript === true) {\n                    console.info('RESULTS for refresh_folders_other_info');\n                    console.log(data);\n                }\n\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Store in session\n                    if (action === 'clear') {\n                        // Handle the data\n                        $.each(folders, function(index, item) {\n                            if (typeof data.result !== 'undefined' && typeof data.result[item.id] !== 'undefined') {\n                                folders[index]['categories'] = data.result[item.id].categories;\n                                folders[index]['complexity'] = data.result[item.id].complexity;\n                                folders[index]['visibilityRoles'] = data.result[item.id].visibilityRoles;\n                            }\n                        });\n                        // Stare the data\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.foldersList = folders;\n                            }\n                        );\n                    } else if (action === 'update') {\n                        // Store the data\n                        var currentFoldersList = store.get('teampassApplication').foldersList;\n                        $.each(currentFoldersList, function(index, item) {\n                            if (item.id === parseInt(folders) && typeof data.result[folders] !== 'undefined') {\n                                currentFoldersList[index].categories = data.result[folders].categories;\n                                currentFoldersList[index].complexity = data.result[folders].complexity;\n                                currentFoldersList[index].visibilityRoles = data.result[folders].visibilityRoles;\n\n                                store.update(\n                                    'teampassApplication',\n                                    function(teampassApplication) {\n                                        foldersList = currentFoldersList;\n                                    }\n                                );\n                                return true;\n                            }\n                        });\n\n                    }\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n                toastr.remove();\n            }\n        );\n    }\n\n\n    /*\n     * builds the folders tree\n     */\n    function refreshTree(node_to_select, do_refresh, refresh_visible_folders) {\n        do_refresh = do_refresh || ''\n        node_to_select = node_to_select || '';\n        refresh_visible_folders = refresh_visible_folders || true;\n\n        if (refresh_visible_folders !== true) {\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n            return false;\n        }\n\n        if (do_refresh === true || store.get('teampassApplication').jstreeForceRefresh === 1) {\n            $('#jstree').jstree(true).refresh();\n        }\n\n        if (node_to_select !== '') {\n            $('#jstree').jstree('deselect_all');\n\n            $('#jstree')\n                .one('refresh.jstree', function(e, data) {\n                    data.instance.select_node('#li_' + node_to_select);\n                });\n        }\n\n        $(this).delay(500).queue(function() {\n            refreshVisibleFolders(true);\n            $(this).dequeue();\n        });\n    }\n\n    /**\n     * \n     */\n    function ListerItems(groupe_id, restricted, start, stop_listing_current_folder) {\n        var me = $(this);\n        stop_listing_current_folder = stop_listing_current_folder || '0';\n        if (debugJavascript === true) console.log('LIST OF ITEMS FOR FOLDER ' + groupe_id)\n        // Exit if no folder is selected\n        if (groupe_id === undefined) return false;\n\n        // case where we should stop listing the items\n        if (store.get('teampassApplication') !== undefined && store.get('teampassApplication').itemsListStop === 1) {\n            //requestRunning = false;\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n        }\n\n        //Evaluate number of items to display - depends on screen height\n        //adapt to the screen height\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsShownByQuery = Math.max(Math.round((screenHeight - 450) / 23), 2);\n            }\n        );\n\n        if (stop_listing_current_folder === 1) {\n            me.data('requestRunning', false);\n            // Store listing criteria\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt(groupe_id),\n                        teampassApplication.itemsListRestricted = restricted,\n                        teampassApplication.itemsListStart = start,\n                        teampassApplication.itemsListStop = 0\n                }\n            );\n        } else {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0\n                }\n            );\n        }\n\n\n        // prevent launch of similar query in case of doubleclick\n        if (requestRunning === true) {\n            return false;\n        }\n        requestRunning = true;\n\n        // Hide any info\n        $('#info_teampass_items_list').addClass('hidden');\n\n        if (groupe_id !== undefined || groupe_id !== '') {\n            //refreshTree(groupe_id);\n            if (query_in_progress != 0 && query_in_progress != groupe_id && request !== undefined) {\n                request.abort(); //kill previous query if needed\n            }\n            query_in_progress = groupe_id;\n            if (start == 0) {\n                //clean form\n                $('#teampass_items_list, #items_folder_path').html('');\n            }\n\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt(groupe_id),\n                    teampassApplication.itemsList = ''\n                }\n            );\n\n            if ($('.tr_fields') !== undefined) {\n                $('.tr_fields, .newItemCat, .editItemCat').addClass('hidden');\n            }\n\n            // Inform user\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n            );\n\n            // clear storage \n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.itemsList = '';\n                }\n            );\n\n            // Prepare data to be sent\n            var dataArray = {\n                id: store.get('teampassApplication').selectedFolder,\n                restricted: restricted === \"\" ? \"\" : restricted,\n                start: start !== undefined ? start : 0,\n                uniqueLoadData: store.get('teampassApplication').queryUniqueLoad !== undefined ? store.get('teampassApplication').queryUniqueLoad : \"\",\n                nb_items_to_display_once: store.get('teampassApplication').itemsShownByQuery,\n            };\n\n            if (debugJavascript === true) {\n                console.log('Do list of items in folder with next parameters:');\n                console.log(JSON.stringify(dataArray));\n            }\n            \n            //ajax query\n            var request = $.post('sources/items.queries.php', {\n                    type: 'do_items_list_in_folder',\n                    data: prepareExchangedData(JSON.stringify(dataArray), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>',\n                },\n                function(retData) {\n                    //get data\n                    data = decodeQueryReturn(retData, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'do_items_list_in_folder');\n\n                    if (debugJavascript === true) {\n                        console.log('LIST ITEMS');\n                        console.log(data);\n                    }\n\n                    // reset doubleclick prevention\n                    requestRunning = false;\n\n                    // manage not allowed\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        return false;\n                    }\n\n                    // Hide New button if restricted folder\n                    if (data.access_level === 10) {\n                        $('#btn-new-item').addClass('hidden');\n                    } else {\n                        $('#btn-new-item').removeClass('hidden');\n                    }\n\n                    // to be done only in 1st list load\n                    if (data.list_to_be_continued === 'end') {\n                        var initialQueryData = $.parseJSON(data.uniqueLoadData);\n\n                        // Update hidden variables\n                        store.update(\n                            'teampassItem',\n                            function(teampassItem) {\n                                teampassItem.IsPersonalFolder = parseInt(data.IsPersonalFolder),\n                                    teampassItem.hasAccessLevel = parseInt(data.access_level),\n                                    teampassItem.folderComplexity = parseInt(data.folder_complexity),\n                                    teampassItem.hasCustomCategories = data.categoriesStructure\n                            }\n                        );\n                        \n\n                        // display path of folders\n                        if ((initialQueryData.path.length > 0)) {\n                            $('#form-folder-path')\n                                .html('')\n                                .append(rebuildPath(initialQueryData.path));\n                        } else {\n                            $('#form-folder-path').html('');\n                        }\n\n                        /*\n                        // PSK is requested but not set\n                        if (data.folder_requests_psk === 1\n                            && (store.get('teampassUser').pskSetForSession === ''\n                            || store.get('teampassUser').pskSetForSession === undefined)\n                        ) {\n                            showPersonalSKDialog();\n                        }\n                        */\n\n                        // show correct fodler in Tree\n                        if ($('#jstree').jstree('get_selected', true)[0] !== undefined &&\n                            'li_' + groupe_id !== $('#jstree').jstree('get_selected', true)[0].id\n                        ) {\n                            $('#jstree').jstree('deselect_all');\n                            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n                        }\n\n                        // Delete existing clipboard\n                        if (clipboardForPassword) {\n                            clipboardForPassword.destroy();\n                        }\n                        if (clipboardForLogin) {\n                            clipboardForLogin.destroy();\n                        }\n\n                        // Prepare clipboard items\n                        clipboardForLogin = new ClipboardJS('.fa-clickable-login');\n                        clipboardForLogin.on('success', function(e) {\n                            toastr.info(\n                                '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                '', {\n                                    timeOut: 2000,\n                                    positionClass: 'toast-top-right',\n                                    progressBar: true\n                                }\n                            );\n                            e.clearSelection();\n                        });\n\n                        // Prepare clipboard for PAssword\n                        // This will request a query to server to get the pwd\n                        clipboardForPassword = new ClipboardJS('.fa-clickable-password', {\n                            text: function(trigger) {\n                                // Send query and get password\n                                var result = '',\n                                    error = false;\n\n                                // Warn user that it starts\n                                /*toastr.remove();\n                                toastr.info(\n                                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                                );*/\n                                \n                                $.ajax({\n                                    type: \"POST\",\n                                    async: false,\n                                    url: 'sources/items.queries.php',\n                                    data: 'type=show_item_password&item_key=' + trigger.getAttribute('data-item-key') +\n                                        '&key=<?php echo $_SESSION['key']; ?>',\n                                    dataType: \"\",\n                                    success: function(data) {\n                                        //decrypt data\n                                        try {\n                                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                                        } catch (e) {\n                                            // error\n                                            toastr.remove();\n                                            toastr.warning(\n                                                '<?php echo langHdl('no_item_to_display'); ?>'\n                                            );\n                                            return false;\n                                        }\n                                        if (data.error === true) {\n                                            error = true;\n                                        } else {\n                                            if (data.password_error !== '') {\n                                                error = true;\n                                            } else {\n                                                result = atob(data.password).utf8Decode();\n                                            }\n                                            if (result === '') {\n                                                toastr.info(\n                                                    '<?php echo langHdl('password_is_empty'); ?>',\n                                                    '', {\n                                                        timeOut: 2000,\n                                                        positionClass: 'toast-bottom-right',\n                                                        progressBar: true\n                                                    }\n                                                );\n                                            }\n                                        }\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                        clipboardForPassword.on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.itemId,\n                                e.trigger.dataset.itemLabel\n                            );\n                            \n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.remove();\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    } else if (data.error === 'not_authorized') {\n                        $('#items_folder_path').html('<i class=\"fas fa-folder-open-o\"></i>&nbsp;' + rebuildPath(data.arborescence));\n                    } else {\n                        // Store query results\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.queryUniqueLoad = data.uniqueLoadData;\n                            }\n                        );\n                        if ($('#items_loading_progress').length == 0) {\n                            $('#items_list_loader').after('<span id=\"items_loading_progress\">' + Math.round(data.next_start * 100 / data.counter_full, 0) + '%</span>');\n                        } else {\n                            $('#items_loading_progress').html(Math.round(data.next_start * 100 / data.counter_full, 0) + '%');\n                        }\n                    }\n                    //-----\n                    if (data.array_items !== undefined &&\n                        data.array_items.length === 0 &&\n                        $('#teampass_items_list').html() === ''\n                    ) {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('no_item_to_display'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n                    }\n\n                    if (data.error === 'is_pf_but_no_saltkey') {\n                        //warn user about his saltkey\n                        toastr.remove();\n                        toastr.warning(\n                            '<?php echo langHdl('home_personal_saltkey_label'); ?>',\n                            '', {\n                                timeOut: 10000\n                            }\n                        );\n                        return false;\n                    } else if (data.error === 'not_authorized' || data.access_level === '') {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-lg-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-warning mr-2\"></i><?php echo langHdl('not_allowed_to_see_pw'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n\n                    } else if ((store.get('teampassApplication').userIsReadOnly === 1) //&& data.folder_requests_psk == 0\n                        ||\n                        data.access_level === 10\n                    ) {\n                        //readonly user\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n                        //$('#more_items').remove();\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    } else {\n                        //Display items\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        // Prepare next iteration if needed\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n\n                            if (debugJavascript === true) {\n                                console.log('Liste complete des items')\n                                console.log(JSON.parse(store.get('teampassApplication').itemsList));\n                            }\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    }\n                }\n            );\n        }\n    }\n\n    function sList(listOfItems) {\n        if (debugJavascript === true) {\n            console.log(listOfItems);\n        }\n        var counter = 0,\n            prevIdForNextItem = -1;\n\n        // Manage store\n        if (store.get('teampassApplication').itemsList === '' || store.get('teampassApplication').itemsList === undefined) {\n            var stored_datas = listOfItems;\n        } else {\n            var stored_datas = String(JSON.parse(store.get('teampassApplication').itemsList)).concat(listOfItems);\n        }\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsList = JSON.stringify(stored_datas);\n            }\n        );\n        \n        $.each(listOfItems, function(i, value) {\n            var new_line = '',\n                pwd_error = '',\n                icon_all_can_modify = '',\n                icon_cannot_see = '',\n                icon_login = '',\n                icon_link = '',\n                icon_pwd = '',\n                icon_favorite = '',\n                item_flag = '',\n                item_grippy = '',\n                visible_by_user = '';\n\n            counter += 1;\n\n            // ENsure numbers are ints\n            value.anyone_can_modify = parseInt(value.anyone_can_modify);\n            value.canMove = parseInt(value.canMove);\n            value.expired = parseInt(value.expired);\n            value.is_favorite = parseInt(value.is_favorite);\n            value.is_result_of_search = parseInt(value.is_result_of_search);\n            value.item_id = parseInt(value.item_id);\n            value.open_edit = parseInt(value.open_edit);\n            value.rights = parseInt(value.rights);\n            value.tree_id = parseInt(value.tree_id);\n            value.display = parseInt(value.display);\n            value.display_item = parseInt(value.display_item);\n            value.enable_favourites = parseInt(value.enable_favourites);\n\n            // Check access restriction\n            if (value.rights > 0) {\n                // Should I populate previous item with this new id\n                if (debugJavascript === true) {\n                    console.log('current id: '+value.item_id);\n                    console.log(prevIdForNextItem);\n                }\n                if (prevIdForNextItem !== -1) {\n                    //$('#list-item-row_' + value.item_id).attr('data-next-item-id', prevIdForNextItem.item_id);\n                    //$('#list-item-row_' + value.item_id).attr('data-next-item-label', value.label);\n                    $('[data-item-key=\"'+value.item_key+'\"]')\n                        //.attr('data-next-item-id', prevIdForNextItem.item_id)\n                        .attr('data-next-item-key', prevIdForNextItem.item_key)\n                        .attr('data-next-item-label', value.label);\n                }\n                \n                // Prepare anyone can modify icon\n                if (value.anyone_can_modify === 1 || value.open_edit === 1) {\n                    icon_all_can_modify = '<span class=\"fa-stack fa-clickable pointer infotip list-item-clicktoedit mr-2\" title=\"<?php echo langHdl('edit'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-pen fa-stack-1x fa-inverse\"></i></span>';\n                }\n\n                // Prepare mini icons\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').copy_to_clipboard_small_icons) === 1 &&\n                    value.rights > 10\n                ) {\n                    // Login icon\n                    if (value.login !== '') {\n                        icon_login = '<span class=\"fa-stack fa-clickable fa-clickable-login pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_login'); ?>\" data-clipboard-text=\"' + sanitizeString(value.login) + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-user fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                    // Pwd icon\n                    if (value.pw_status !== 'pw_is_empty' && value.pw_status !== 'encryption_error') {\n                        icon_pwd = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_pw'); ?>\" data-item-key=\"' + value.item_key + '\" data-item-label=\"' + value.label + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-key fa-stack-1x fa-inverse\"></i></span>';\n                    }\n\n                    // Now check if pwd is empty. If it is then warn user\n                    if (value.pw_status === 'pw_is_empty') {\n                        pwd_error = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('password_is_empty'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-exclamation-triangle text-warning fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Link icon\n                if (value.link !== '') {\n                    icon_link = '<span class=\"fa-stack fa-clickable pointer infotip mr-2\" title=\"<?php echo langHdl('open_website'); ?>\"><a href=\"' + sanitizeString(value.link) + '\" target=\"_blank\" class=\"no-link\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-link fa-stack-1x fa-inverse\"></i></a></span>';\n                }\n\n                // Prepare Favorite icon\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').enable_favourites) === 1 &&\n                    value.rights > 10\n                ) {\n                    if (value.is_favourited === 1) {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-key=\"' + value.item_key + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>';\n                    } else {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-key=\"' + value.item_key + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"far fa-star fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Prepare Description\n                if (value.desc !== '') {\n                    value.desc = ' <span class=\"text-secondary small\">- ' + value.desc + '</span>';\n                }\n\n                $('#teampass_items_list').append(\n                    '<tr class=\"list-item-row' + (value.canMove === 1 ? ' is-draggable' : '') + '\" id=\"list-item-row_' + value.item_id + '\" data-item-key=\"' + value.item_key + '\" data-item-edition=\"' + value.open_edit + '\" data-item-id=\"' + value.item_id + '\" data-item-sk=\"' + value.sk + '\" data-item-expired=\"' + value.expired + '\" data-item-rights=\"' + value.rights + '\" data-item-display=\"' + value.display + '\" data-item-open-edit=\"' + value.open_edit + '\" data-item-tree-id=\"' + value.tree_id + '\" data-is-search-result=\"' + value.is_result_of_search + '\" data-label=\"' + escape(value.label) + '\">' +\n                    '<td class=\"list-item-description\" style=\"width: 100%;\">' +\n                    // Show user a grippy bar to move item\n                    (value.canMove === 1  ? '<i class=\"fas fa-ellipsis-v mr-2 dragndrop\"></i>' : '') + //&& value.is_result_of_search === 0\n                    // Show user a ban icon if expired\n                    (value.expired === 1 ? '<i class=\"far fa-calendar-times mr-2 text-warning infotip\" title=\"<?php echo langHdl('not_allowed_to_see_pw_is_expired'); ?>\"></i>' : '') +\n                    // Show user that Item is not accessible\n                    (value.rights === 10 ? '<i class=\"far fa-eye-slash fa-xs mr-2 text-primary infotip\" title=\"<?php echo langHdl('item_with_restricted_access'); ?>\"></i>' : '') +\n                    // Show user that password is badly encrypted\n                    (value.pw_status === 'encryption_error' ? '<i class=\"fas fa-exclamation-triangle fa-xs text-danger infotip mr-1\" title=\"<?php echo langHdl('pw_encryption_error'); ?>\"></i>' : '') +\n                    // Show item fa_icon if set\n                    (value.fa_icon !== '' ? '<i class=\"'+value.fa_icon+' mr-1\"></i>' : '') +\n                    // Prepare item info\n                    '<span class=\"list-item-clicktoshow' + (value.rights === 10 ? '' : ' pointer') + '\" data-item-id=\"' + value.item_id + '\" data-item-key=\"' + value.item_key + '\">' +\n                    '<span class=\"list-item-row-description' + (value.rights === 10 ? ' font-weight-light' : '') + '\">' + value.label + '</span>' + (value.rights === 10 ? '' : value.desc) + '</span>' +\n                    '<span class=\"list-item-actions hidden\">' +\n                    (value.rights === 10 ?\n                        '<span class=\"fa-stack fa-clickable fa-clickable-access-request pointer infotip mr-2\" title=\"<?php echo langHdl('need_access'); ?>\"><i class=\"fas fa-circle fa-stack-2x text-danger\"></i><i class=\"far fa-handshake fa-stack-1x fa-inverse\"></i></span>' :\n                        pwd_error + icon_all_can_modify + icon_login + icon_pwd + icon_link + icon_favorite) +\n                    '</span>' +\n                    (value.folder !== undefined ?\n                        '<br><span class=\"text-secondary small font-italic pointer open-folder\" data-tree-id=\"' +\n                        value.tree_id + '\"\">[' + value.folder + ']</span>' : '') +\n                    '</td>' +\n                    '</tr>'\n                );\n\n                // Save id for usage\n                prevIdForNextItem = {\n                    //'item_id' : value.item_id,\n                    'item_key' : value.item_key,\n                    'label': value.label,\n                };\n\n                //---------------------\n            }\n        });\n\n        // Sort entries\n        var $tbody = $('#teampass_items_list');\n        $tbody.find('tr').sort(function(a, b) {\n            var tda = $(a).find('.list-item-row-description').text();\n            var tdb = $(b).find('.list-item-row-description').text();\n            // if a < b return 1\n            return tda > tdb ? 1 :\n                tda < tdb ? -1 :\n                0;\n        }).appendTo($tbody);\n\n        // Trick for list with only one entry\n        if (counter === 1) {\n            $('#teampass_items_list')\n                .append('<tr class=\"row\"><td class=\"\">&nbsp;</td></tr>');\n        }\n        adjustElemsSize();\n\n        // Show tooltips\n        $('.infotip').tooltip();\n    }\n\n    $(document).on('click', '.open-folder', function() {\n        if ($(this).data('tree-id') !== undefined) {\n            if (debugJavascript === true) console.log($(this).data('tree-id'))\n\n            // Prepare\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStart = 0;\n                }\n            );\n\n            // Show\n            ListerItems(\n                $(this).data('tree-id'),\n                '',\n                0\n            );\n\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + $(this).data('tree-id'));\n        }\n    });\n\n\n    function adjustElemsSize() {\n        // Adjust height of folders tree\n        if ($('#teampass_items_list').height() > (screenHeight - 215)) {\n            $('#jstree').height($('#teampass_items_list').height() + 75);\n        } else {\n            $('#jstree').height($(window).height() - 215);\n        }\n    }\n\n    /**\n     * Builds the HTML path\n     * @param  {[type]} data [description]\n     * @return {[type]}      [description]\n     */\n    function rebuildPath(data) {\n        var new_path = new_path_elem = '';\n        $.each((data), function(i, value) {\n            new_path_elem = '';\n            if (value['visible'] === 1) {\n                new_path_elem = ' class=\"pointer\" onclick=\"ListerItems(' + value['id'] + ', \\'\\', 0)\"';\n            }\n\n            new_path += '<li class=\"breadcrumb-item\" id=\"path_elem_' + value['id'] + '\"' + new_path_elem + '>' + value['title'] + '</li>';\n        });\n\n        return new_path;\n    }\n\n    /**\n\n     */\n    function proceed_list_update(stop_proceeding) {\n        stop_proceeding = stop_proceeding || '';\n\n        if (stop_proceeding === '1' ||\n            (store.get('teampassApplication').itemsListFolderId !== '' &&\n                store.get('teampassApplication').itemsListStart !== 'end')\n        ) {\n            // Clear storage\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n            // Perform listing\n            ListerItems(\n                store.get('teampassApplication').itemsListFolderId,\n                store.get('teampassApplication').itemsListRestricted,\n                store.get('teampassApplication').itemsListStart,\n                store.get('teampassApplication').itemsListStop\n            );\n            return false;\n        }\n\n        if (store.get('teampassApplication').itemsListStart !== 'end') {\n            //Check if nb of items do display > to 0\n            if (store.get('teampassApplication').itemsShownByQuery > 0) {\n                ListerItems(\n                    store.get('teampassApplication').selectedFolder,\n                    '',\n                    store.get('teampassApplication').itemsListStart\n                );\n            }\n        } else {\n            // Show tooltips\n            $('.infotip').tooltip();\n\n            // Update silently the info about the folder\n            refreshFoldersInfo(\n                store.get('teampassApplication').selectedFolder,\n                'update'\n            );\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('data_refreshed'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Do drag'n'drop for the folders\n            prepareFolderDragNDrop();\n        }\n    }\n\n\n    function checkAccess(itemId, treeId, userId)\n    {\n        var data = {\n            'itemId': parseInt(itemId),\n            'treeId': parseInt(treeId),\n            'userId': parseInt(userId),\n        };\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'check_current_access_rights',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"DEBUG: checkAccess\");\n                    console.log(data);\n                }\n\n\n                return false;\n            }\n        );\n    }\n\n\n    /**\n     *\n     */\n    function Details(itemDefinition, actionType, hotlink = false) {\n        if (debugJavascript === true) {\n            console.info('EXPECTED ACTION on ' + itemDefinition + ' is ' + actionType + ' -- ');\n            console.log(itemDefinition);\n        }\n\n        // Init\n        if (hotlink === false) {\n            var itemId = parseInt($(itemDefinition).data('item-id')) || '';\n            var itemKey = parseInt($(itemDefinition).data('item-key')) || '';\n            var itemTreeId = parseInt($(itemDefinition).data('item-tree-id')) || '';\n            var itemSk = parseInt($(itemDefinition).data('item-sk')) || 0;\n            var itemExpired = parseInt($(itemDefinition).data('item-expired')) || '';\n            var itemRestricted = parseInt($(itemDefinition).data('item-restricted-id')) || '';\n            var itemDisplay = parseInt($(itemDefinition).data('item-display')) || 0;\n            var itemOpenEdit = parseInt($(itemDefinition).data('item-open-edit')) || 0;\n            var itemReload = parseInt($(itemDefinition).data('item-reload')) || 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        } else {\n            var itemId = itemDefinition || '';\n            var itemKey = itemDefinition || '';\n            var itemTreeId = store.get('teampassApplication').selectedFolder || '';\n            var itemSk = 0;\n            var itemExpired = '';\n            var itemRestricted = '';\n            var itemDisplay = 1;\n            var itemOpenEdit = 0;\n            var itemReload = 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        }\n\n        // check if user still has access\n        if (checkAccess(itemId, itemTreeId, <?php echo $_SESSION['user_id']; ?>) === false) {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Finished\n            return false;\n        }\n\n        // Store current view\n        savePreviousView();\n        \n        if (debugJavascript === true) console.log(\"Request is running: \" + requestRunning)\n\n        // Store status query running\n        requestRunning = true;\n        userDidAChange = false;\n\n        // Select tab#1\n        $('#form-item-nav-pills li:first-child a').tab('show');\n\n        // Don't show details\n        if (itemDisplay === 'no_display') {\n            // Inform user\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Clear ongoing request status\n            requestRunning = false;\n\n            // Finished\n            return false;\n        }\n\n        // If opening new item, reinit hidden fields\n        if (store.get('teampassApplication').lastItemSeen !== itemId) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.lastItemSeen = parseInt(itemId);\n                }\n            );\n            if (debugJavascript === true) console.log(\"Last seen item \" + store.get('teampassApplication').lastItemSeen)\n        }\n\n        // Prepare data to be sent\n        var data = {\n            'id': parseInt(itemId),\n            'folder_id': parseInt(itemTreeId),\n            'salt_key_required': itemSk,\n            'expired_item': itemExpired,\n            'restricted': itemRestricted,\n            'folder_access_level': store.get('teampassItem').hasAccessLevel,\n            'page': 'items',\n            'rights': itemRights,\n        };\n\n        if (debugJavascript === true) console.log(\"SEND\");\n        if (debugJavascript === true) console.log(data);\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'show_details_item',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"RECEIVED object details\");\n                    console.log(data);\n                }\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // remove any track-change class on item form\n                //$('.form-item-control').removeClass('track-change');\n\n                if (data.error === true) {\n                    toastr.remove();\n                    requestRunning = false;\n\n                    // Manage personal items key error\n                    if (data.error_type !== 'undefined' && data.error_type === 'private_items_to_encrypt') {\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        store.update(\n                            'teampassUser', {},\n                            function(teampassUser) {\n                                teampassUser.special = 'private_items_to_encrypt';\n                            }\n                        );\n                        document.location.href = \"index.php?page=items\";\n                    } else if (data.error_type !== 'undefined' && data.error_type === 'user_should_reencrypt_private_key' && store.get('teampassUser').temporary_code === '') {\n                        // we have to ask the user to re-encrypt his privatekey\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 10000,\n                                progressBar: true\n                            }\n                        );\n                        \n                        if (debugJavascript === true) console.log('LDAP user password has to encrypt his private key with hos new LDAP password')\n                        // HIde\n                        $('.content-header, .content').addClass('hidden');\n\n                        // Show passwords inputs and form\n                        $('#dialog-ldap-user-change-password-info')\n                            .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                            .removeClass('hidden');\n                        $('#dialog-ldap-user-change-password').removeClass('hidden');\n                    }\n\n\n                    return false;\n                } else if ((data.user_can_modify === 0 && actionType === 'edit') ||\n                    parseInt(data.show_details) === 0\n                ) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    requestRunning = false;\n                    return false;\n                }\n\n\n                // Store scroll position\n                userScrollPosition = $(window).scrollTop();\n\n                // Scroll to top\n                $(window).scrollTop(0);\n\n                // SHould we show?\n                if (parseInt(data.show_detail_option) === 1 || itemExpired === 1) {\n                    // SHow expiration alert\n                    $('#card-item-expired').removeClass('hidden');\n                } else if (parseInt(data.show_detail_option) === 2) {\n                    // Don't show anything\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('not_allowed_to_see_pw'); ?>',\n                        '<?php echo langHdl('warning'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    return false;\n                }\n\n                // Show header info\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // Hide NEW button in case access_level < 30\n                if (store.get('teampassItem').hasAccessLevel === 10) {\n                    $('#item-form-new-button').addClass('hidden');\n                } else {\n                    $('#item-form-new-button').removeClass('hidden');\n                }\n\n                // Uncrypt the pwd\n                if (data.pw !== undefined) {\n                    data.pw = atob(data.pw).utf8Decode();\n                }\n\n                // Update hidden variables\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.id = parseInt(data.id),\n                            teampassItem.timestamp = data.timestamp,\n                            teampassItem.user_can_modify = data.user_can_modify,\n                            teampassItem.anyone_can_modify = data.anyone_can_modify,\n                            teampassItem.edit_item_salt_key = data.edit_item_salt_key,\n                            teampassItem.id_restricted_to = data.id_restricted_to,\n                            teampassItem.id_restricted_to_roles = data.id_restricted_to_roles,\n                            teampassItem.item_rights = itemRights\n                    }\n                );\n\n                // Prepare forms\n                $('#folders-tree-card, .columns-position').addClass('hidden');\n                if (actionType === 'show') {\n                    // Prepare Views\n                    $('.item-details-card, #item-details-card-categories').removeClass('hidden');\n                    $('.form-item').addClass('hidden');\n\n                    $('#form-item-suggestion-password').focus();\n                    // If Description empty then remove it\n                    if (data.description === '<p>&nbsp;</p>') {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .addClass('hidden');\n                    } else {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .removeClass('hidden');\n                    }\n                } else {\n                    $('.form-item').removeClass('hidden');\n                    $('.item-details-card, #item-details-card-categories').addClass('hidden');\n                }\n                $('#pwd-definition-size').val(data.pw.length);\n\n                // Prepare card\n                const itemIcon = (data.fa_icon !== \"\") ? '<i class=\"'+data.fa_icon+' mr-1\"></i>' : '';\n                $('#card-item-label, #form-item-title').html(itemIcon + data.label);\n                $('#form-item-label, #form-item-suggestion-label').val(data.label);\n                $('#card-item-description, #form-item-suggestion-description').html(data.description);\n                if (data.description === '') {\n                    $('#card-item-description').addClass('hidden');\n                } else {\n                    $('#card-item-description').removeClass('hidden');\n                }\n                $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n                $('#hidden-item-pwd, #form-item-suggestion-password').val(data.pw);\n                $('#form-item-password, #form-item-password-confirmation, #form-item-server-old-password').val(data.pw);\n                $('#card-item-login').html(data.login);\n                $('#form-item-login, #form-item-suggestion-login, #form-item-server-login').val(data.login);\n\n                $('#card-item-email').text(data.email);\n                $('#form-item-email, #form-item-suggestion-email').val(data.email);\n                $('#card-item-url').html(data.url);\n                $('#form-item-url, #form-item-suggestion-url').val($(data.url).text());\n                $('#form-item-restrictedToUsers').val(JSON.stringify(data.id_restricted_to));\n                $('#form-item-restrictedToRoles').val(JSON.stringify(data.id_restricted_to_roles));\n                $('#form-item-folder').val(data.folder);\n                $('#form-item-tags').val(data.tags.join(' '));\n                $('#form-item-icon').val(data.fa_icon);\n                $('#form-item-icon-show').html(itemIcon);\n\n                $('#form-item-password').pwstrength(\"forceUpdate\");\n                $('#form-item-label').focus();\n\n                // Editor for description field\n                if (debugJavascript === true) {console.log('>>>> create summernote');}\n                $('#form-item-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (debugJavascript === true) console.log('Editor onChange:' + userDidAChange + \" - \" + requestRunning);\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-description > ' + userDidAChange);\n                                    //$('#form-item-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    })\n                //.summernote('editor.insertText', data.description);\n\n                $('#form-item-suggestion-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-suggestion-description > ' + userDidAChange);\n                                    //$('#form-item-suggestion-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    });\n\n\n                //prepare nice list of users / groups\n                var html_users = '',\n                    html_groups = '',\n                    html_tags = '',\n                    html_kbs = '';\n\n                $(data.tags).each(function(index, value) {\n                    html_tags += '<span class=\"badge badge-success pointer tip mr-2\" title=\"<?php echo langHdl('list_items_with_tag'); ?>\" onclick=\"searchItemsWithTags(\\'' + value + '\\')\"><i class=\"fas fa-tag fa-sm\"></i>&nbsp;<span class=\"item_tag\">' + value + '</span></span>';\n                });\n                if (html_tags === '') {\n                    $('#card-item-tags').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-tags').html(html_tags);\n                }\n\n                $(data.links_to_kbs).each(function(index, value) {\n                    html_kbs += '<a class=\"badge badge-primary pointer tip mr-2\" href=\"<?php echo $SETTINGS['cpassman_url']; ?>/index.php?page=kb&id=' + value['id'] + '\"><i class=\"fas fa-map-pin fa-sm\"></i>&nbsp;' + value['label'] + '</a>';\n\n                });\n                if (html_kbs === '') {\n                    $('#card-item-kbs').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-kbs').html(html_kbs);\n                }\n\n\n                // Manage CATEGORIES / CUSTOM FIELDS\n                if (data.categories.length === 0) {\n                    $('.card-item-category, .card-item-field, .form-item-category, #item-details-card-categories')\n                        .addClass('hidden');\n                    $('.no-item-fields').removeClass('hidden');\n                    $('#card-item-fields').closest().addClass('collapsed');\n                } else {\n                    // \n                    if (data.template_id === '') {\n                        $('#list-group-item-main')\n                            .children('.list-group')\n                            .removeClass('hidden');\n                        $('#card-item-category').removeClass('hidden');\n                    }\n\n                    if (data.fields.length === 0) {\n                        if (actionType === 'show') {\n                            $('#item-details-card-categories').addClass('hidden');\n                            // Refresh last item seen\n                            refreshListLastSeenItems();\n                        } else {\n                            // Show the inputs for EDITION\n                            $(data.categories).each(function(index, category) {\n                                $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                            });\n                        }\n                    } else {\n                        // Show expected categories\n                        $('.no-item-fields, .form-item-category').addClass('hidden');\n\n                        // In edition mode, show all fields in expected Categories\n                        $(data.categories).each(function(index, category) {\n                            $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                        });\n\n                        // Now show expected fields and values\n                        $(data.fields).each(function(index, field) {\n                            // Show cateogry\n                            $('#card-item-category-' + field.parent_id).removeClass('hidden');\n\n                            // Is data encrypted\n                            // Then base64 decode is required\n                            if (field.encrypted === 1) {\n                                field.value = atob(field.value);\n                            }\n\n                            // Show field\n                            if (field.masked === 1) {\n                                // Item card\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(\n                                        '<span data-field-id=\"' + field.id + '\" class=\"pointer replace-asterisk\"><?php echo $var['hidden_asterisk']; ?></span>' +\n                                        '<input type=\"text\" style=\"width:0px; height:0px; border:0px;\" id=\"hidden-card-item-field-value-' + field.id + '\" value=\"' + (field.value) + '\">'\n                                    )\n                                $('#card-item-field-' + field.id)\n                                    .children(\".btn-copy-clipboard-clear\")\n                                    .attr('data-clipboard-target', '#hidden-card-item-field-value-' + field.id);\n                            } else {\n                                // Show Field\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(field.value);\n                            }\n                            // Item edit form\n                            $('#form-item-field-' + field.id)\n                                .children(\".form-item-field-custom\")\n                                .val(field.value);\n                        });\n\n                        // Manage template to show\n                        if (data.template_id !== '' && $.inArray(data.template_id, data.categories) > -1) {\n                            // Tick the box in edit mode\n                            $('#template_' + data.template_id).iCheck('check');\n\n                            // Hide existing data as replaced by Category template                                \n                            $('#list-group-item-main, #item-details-card-categories')\n                                .children('.list-group')\n                                .addClass('hidden');\n\n                            // Move the template in place of item main  \n                            $('#card-item-category-' + data.template_id)\n                                .addClass('fields-to-move')\n                                .detach()\n                                .appendTo('#list-group-item-main');\n\n                            // If only one category of Custom Fields\n                            // Then hide the CustomFields div\n                            if (actionType === 'show') {\n                                if (data.categories.length === 1) {\n                                    $('#item-details-card-categories').addClass('hidden');\n                                } else {\n                                    $('#item-details-card-categories').removeClass('hidden');\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n                // Waiting\n                $('#card-item-attachments').html(\"<?php echo langHdl('please_wait'); ?>\");\n\n                // Manage clipboard for link\n                if (clipboardForLink) clipboardForLink.destroy();\n                clipboardForLink = new ClipboardJS(\n                    '#get_item_link',\n                    {\n                        text: function(e) {\n                            return (\"<?php echo $SETTINGS['cpassman_url'];?>/index.php?page=items&group=\"+store.get('teampassItem').folderId+\"&id=\"+store.get('teampassItem').id);\n                        }\n                    })\n                    .on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                progressBar: true,\n                                positionClass: 'toast-top-right'\n                            }\n                        );\n                        e.clearSelection();\n                    });\n\n                // Manage clipboard button\n                if (itemClipboard) itemClipboard.destroy();\n                itemClipboard = new ClipboardJS('.btn-copy-clipboard-clear', {\n                    text: function(e) {\n                        return ($($(e).data('clipboard-target')).val());\n                    }\n                })\n                .on('success', function(e) {\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('copy_to_clipboard'); ?>',\n                        '', {\n                            timeOut: 2000,\n                            progressBar: true,\n                            positionClass: 'toast-top-right'\n                        }\n                    );\n                    e.clearSelection();\n                });\n\n                // Prepare clipboard - COPY LOGIN\n                if (data.login !== '') {\n                    $('#card-item-login-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-login-btn').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY PASSWORD\n                if (data.pw !== '') {\n                    new ClipboardJS('#card-item-pwd-button', {\n                            text: function() {\n                                return (data.pw);\n                            }\n                        })\n                        .on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.clipboardId,\n                                $('#card-item-label').text()\n                            );\n\n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    $('#card-item-pwd-button').removeClass('hidden');\n                } else {\n                    $('#card-item-pwd-button').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY EMAIL\n                if (data.email !== '') {\n                    $('#card-item-email-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-email-btn').addClass('hidden');\n                }\n\n                // Prepare auto_update info\n                $('#card-item-misc').html('');\n                if (parseInt(data.auto_update_pwd_frequency) !== '0') {\n                    $('#card-item-misc')\n                        .append('<span class=\"fas fa-shield infotip mr-4\" title=\"<?php echo langHdl('auto_update_enabled'); ?>&nbsp;' + data.auto_update_pwd_frequency + '\"></span>');\n                }\n\n                // Show Notification engaged\n                if (data.notification_status === true) {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span></span>');\n                } else {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span></span>');\n                }\n\n                // Prepare counter\n                $('#card-item-misc')\n                    .append('<span class=\"icon-badge mr-4\"><span class=\"far fa-eye infotip\" title=\"<?php echo langHdl('viewed_number'); ?>\"></span><span class=\"badge badge-info icon-badge-text icon-badge-far\">' + data.viewed_no + '</span></span>');\n\n                // Delete after X views\n                if (data.to_be_deleted !== '') {\n                    if (parseInt(data.to_be_deleted_type) === 1) {\n                        $('#form-item-deleteAfterShown').val(data.to_be_deleted);\n                        $('#form-item-deleteAfterDate').val('');\n                    } else {\n                        $('#form-item-deleteAfterShown').val('');\n                        $('#form-item-deleteAfterDate').val(data.to_be_deleted);\n                    }\n                    // Show icon\n                    $('#card-item-misc')\n                        .append('<span class=\"icon-badge mr-5\"><span class=\"far fa-trash-alt infotip\" title=\"<?php echo langHdl('automatic_deletion_engaged'); ?>\"></span><span class=\"badge badge-danger icon-badge-text-bottom-right\">' + data.to_be_deleted + '</span></span>');\n                }\n\n                // reset password shown info\n                $('#card-item-pwd').removeClass('pwd-shown');\n\n                //Anyone can modify button\n                if (parseInt(data.anyone_can_modify) === 1) {\n                    $('#form-item-anyoneCanModify').iCheck('check');\n                } else {\n                    $('#form-item-anyoneCanModify').iCheck('uncheck');\n                }\n\n                if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) !== 2) {\n                    // continue loading data\n                    showDetailsStep2(itemId, actionType);\n                } else if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) === 2) {\n                    $('#item_details_nok').addClass('hidden');\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired_full').show();\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                } else {\n                    //Dont show details\n                    $('#item_details_nok').removeClass('hidden');\n                    $('#item_details_nok_restriction_list').html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo langHdl('author'); ?>: </b>' + data.author + '<br /><b><?php echo langHdl('restricted_to'); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"openReasonToAccess()\"><?php echo langHdl('request_access_ot_item'); ?></a></u></div>');\n\n                    $('#reason_to_access').remove();\n                    $('#item_details_nok')\n                        .append('<input type=\"hidden\" id=\"reason_to_access\" value=\"' + data.id + ',' + data.id_user + '\">');\n\n                    // Protect\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired').addClass('hidden');\n                    $('#item_details_expired_full').addClass('hidden');\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                }\n\n                // Prepare bottom buttons\n                if ($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-prev-item')\n                        .html('<i class=\"fas fa-arrow-left mr-2\"></i>' + unescape($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-label')))\n                        .attr('data-prev-item-id', $('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                if ($('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-next-item')\n                        .html('<i class=\"fas fa-arrow-right mr-2\"></i>' + unescape($('#list-item-row_'+data.id).next('.list-item-row').attr('data-label')))\n                        .attr('data-next-item-id', $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n\n                /*\n                dataItemKey = $('[data-item-key=\"'+data.item_key+'\"]');\n                if (dataItemKey.prev('.list-item-row').attr('data-item-key') !== undefined) {\n                    $('.but-prev-item')\n                        .html('<i class=\"fas fa-arrow-left mr-2\"></i>' + unescape(dataItemKey.prev('.list-item-row').attr('data-label')))\n                        .attr('data-prev-item-key', dataItemKey.attr('data-item-key'))\n                        .removeClass('hidden');\n                }\n                if (dataItemKey.next('.list-item-row').attr('data-item-key') !== undefined) {\n                    $('.but-next-item')\n                        .html('<i class=\"fas fa-arrow-right mr-2\"></i>' + unescape(dataItemKey.next('.list-item-row').attr('data-label')))\n                        .attr('data-next-item-id', dataItemKey.next('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                */\n                if (debugJavascript === true) {\n                    //console.log(\"PREV: \" + dataItemKey.attr('data-item-key') + \" - NEXT: \" + $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'));\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('done'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                return true;\n            }\n        );\n    }\n\n\n    /*\n     * Loading Item details step 2\n     */\n    function showDetailsStep2(id, actionType) {\n        requestRunning = true;\n        $.post(\n            'sources/items.queries.php', {\n                type: 'showDetailsStep2',\n                id: id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'showDetailsStep2');\n\n                if (debugJavascript === true) {\n                    console.log('RECEIVED STEP2 - used key: <?php echo $_SESSION['key']; ?>');\n                    console.log(data);\n                }\n\n                // Attachments\n                if (data !== false) {\n                    if (data.attachments.length === 0) {\n                        $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n                        $('#card-item-attachments')\n                            .html('<?php echo langHdl('no_attachment'); ?>')\n                            .parent()\n                            .addClass('collapsed');\n                    } else {\n                        var html = '',\n                            htmlFull = '',\n                            counter = 1,\n                            nbFiles = 0;\n                        $.each(data.attachments, function(i, value) {\n                            // Manage new row\n                            if (counter === 1) {\n                                htmlFull += '<div class=\"row\">';\n                                html += '<div class=\"row\">';\n                            }\n\n                            html += '<div class=\"col-6\">' +\n                                '<div class=\"callout callout-info\">' +\n                                '<i class=\"' + value.icon + ' mr-2 text-info\"></i>';\n\n                            // Show VIEW image icon\n                            if (value.is_image === 1) {\n                                html +=\n                                    '<i class=\"fas fa-eye infotip preview-image pointer mr-2\" ' +\n                                    'title=\"<?php echo langHdl('see'); ?>\" ' +\n                                    'data-file-id=\"' + value.id + '\" data-file-title=\"' +\n                                    (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '\"></i>';\n                            }\n\n                            // Show DOWNLOAD icon\n                            downloadIcon =\n                                '<a class=\"text-secondary infotip mr-2\" href=\"sources/downloadFile.php?name=' + encodeURI(value.filename) + '&key=<?php echo $_SESSION['key']; ?>&key_tmp=' + value.key + '&fileid=' + value.id + '\" title=\"<?php echo langHdl('download'); ?>\">' +\n                                '<i class=\"fas fa-file-download\"></i></a>';\n                            html += downloadIcon;\n\n                            // Show other info\n                            html +=\n                                '<span class=\"font-weight-bold mr-3\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '</span>' +\n                                '<span class=\"mr-2 font-weight-light\">(' + value.extension + ')</span>' +\n                                '<span class=\"font-italic\">' + value.size + '</span>' +\n                                '</div></div>';\n\n                            htmlFull += '<div class=\"col-6 edit-attachment-div\"><div class=\"info-box bg-secondary-gradient\">' +\n                                '<span class=\"info-box-icon bg-info\"><i class=\"' + value.icon + '\"></i></span>' +\n                                '<div class=\"info-box-content\"><span class=\"info-box-text\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '.' + value.extension + '</span>' +\n                                '<span class=\"info-box-text\">' + downloadIcon +'</span>' +\n                                '<span class=\"info-box-text\"><i class=\"fas fa-trash pointer delete-file\" data-file-id=\"' + value.id + '\"></i></span></div>' +\n                                '</div></div>';\n\n                            if (counter === 2) {\n                                htmlFull += '</div>';\n                                html += '</div>';\n                                counter = 1;\n                            } else {\n                                counter += 1;\n                            }\n                            nbFiles += 1;\n                        });\n                        $('#card-item-attachments').html(html);\n                        $('#card-item-attachments-badge').html(nbFiles);\n                        $('#form-item-attachments').html(htmlFull);\n                        $('#form-item-attachments-zone').removeClass('hidden');\n                    }\n                }\n                // Hide loading state\n                $('#card-item-attachments').nextAll().addClass('hidden');\n\n                // Show restrictions with Badges\n                var html_restrictions = '';\n                $.each(store.get('teampassItem').id_restricted_to, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.users_list.find(x => x.id === parseInt(value)).name + '</span>';\n                });\n                $.each(store.get('teampassItem').id_restricted_to_roles, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.roles_list.find(x => x.id === parseInt(value)).title + '</span>';\n                });\n                if (html_restrictions === '') {\n                    $('#card-item-restrictedto').html('<?php echo langHdl('no_special_restriction'); ?>');\n                } else {\n                    $('#card-item-restrictedto').html(html_restrictions);\n                }\n\n\n                $('#edit_past_pwds').attr('title', (data.history_of_pwds)); //htmlspecialchars_decode \n                $('#edit_past_pwds_div').html((data.history_of_pwds)); //htmlspecialchars_decode \n\n                //$('#id_files').html(data.files_id);\n                //$('#hid_files').val(data.files_id);\n                //$('#item_edit_list_files').html(data.files_edit);\n\n                //$('#index-last-pwds').html(htmlspecialchars_decode(data.div_last_items));\n\n                // function calling image lightbox when clicking on link\n                $('a.image_dialog').click(function(event) {\n                    event.preventDefault();\n                    PreviewImage($(this).attr('href'), $(this).attr('title'));\n                });\n\n\n                // set indicator if item has change proposal\n                if (parseInt(data.has_change_proposal) > 0) {\n                    $('#item_extra_info').prepend('<i class=\"fas fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo langHdl('item_has_change_proposal'); ?>\"></i>&nbsp;');\n                }\n\n\n                $('.infotip').tooltip();\n\n                // Now load History\n                if (actionType === 'show') {\n                    $.post(\n                        \"sources/items.queries.php\", {\n                            type: \"load_item_history\",\n                            item_id: store.get('teampassItem').id,\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //decrypt data\n                            data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'load_item_history');\n                            if (debugJavascript === true) {\n                                console.info('History:');\n                                console.log(data);\n                            }\n                            if (data.error === '') {\n                                var html = '',\n                                    nbHistoryEvents = 0;\n                                $.each(data.history, function(i, value) {\n                                    html += '<div class=\"direct-chat-msg\"><div class=\"direct-chat-info clearfix\">' +\n                                        '<span class=\"direct-chat-name float-left\">' + value.name + '</span>' +\n                                        '<span class=\"direct-chat-timestamp float-right\">' + value.date + '</span>' +\n                                        '</div>' +\n                                        '<img class=\"direct-chat-img\" src=\"' + value.avatar + '\" alt=\"Message User Image\">' +\n                                        '<div class=\"direct-chat-text\"><span class=\"text-capitalize\">' +\n                                        (value.action === '' ? '' : (value.action)) + '</span> ' +\n                                        (value.detail === '' ? '' : (' | ' + value.detail)) + '</div></div>';\n                                    nbHistoryEvents += 1;\n                                });\n                                // Display\n                                $('#card-item-history').html(html);\n                                $('#card-item-history-badge').html(nbHistoryEvents);\n                            }\n\n                            // Collapse History\n                            $('#card-item-history').closest().addClass('collapsed');\n\n                            // Hide loading state\n                            $('#card-item-history').nextAll().addClass('hidden');\n                        }\n                    );\n                } else if (actionType === 'edit') {\n                    getPrivilegesOnItem(\n                        selectedFolderId,\n                        0\n                    );\n                }\n\n                // Prepare Select2 inputs\n                $('.select2').select2({\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare datePicker\n                $('#form-item-deleteAfterDate, .datepicker').datepicker({\n                    format: '<?php echo str_replace(['Y', 'M'], ['yyyy', 'mm'], $SETTINGS['date_format']); ?>',\n                    todayHighlight: true,\n                    todayBtn: true,\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare Date range picker with time picker\n                $('.timepicker').timepicker({\n                    minuteStep: 5,\n                    template: false,\n                    showSeconds: true,\n                    showMeridian: false,\n                    showInputs: false,\n                    explicitMode: true\n                });\n\n                // Delete inputs related files uploaded but not confirmed\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function (data) {\n                        /*// add track-change class on item form\n                        setTimeout(\n                            $('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change'),\n                            2000\n                        );*/\n\n                        requestRunning = false;\n                    }\n                );\n            }\n        );\n    };\n\n    // Clear history form\n    $(document)\n        .on('click', '#form-item-history-clear', function() {\n            $('.history').val('');\n        })\n        .on('click', '#form-item-history-insert', function() {\n            if ($('#form-item-history-label').val() === '' ||\n                $('#form-item-history-date').val() === '' ||\n                $('#form-item-history-time').val() === ''\n            ) {\n                // Inform user\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('all_fields_mandatory'); ?>',\n                    '<?php echo langHdl('warning'); ?>', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Insert new entry\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'label': DOMPurify.sanitize($('#form-item-history-label').val()),\n                'date': DOMPurify.sanitize($('#form-item-history-date').val()),\n                'time': DOMPurify.sanitize($('#form-item-history-time').val()),\n            }\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'history_entry_add',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'history_entry_add');\n                    if (debugJavascript === true) console.log(data);\n                    $('.history').val('');\n\n                    // Inform user\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            );\n        })\n        .on('click', '.nav-link', function() {\n            if ($(this).attr('href') === '#tab_5') {\n                $('#form-item-buttons').addClass('hidden');\n            } else {\n                $('#form-item-buttons').removeClass('hidden');\n            }\n\n        });\n\n    // When click on Trash attachment icon\n    $(document).on('click', '.delete-file', function() {\n        var thisButton = $(this),\n            thisFileId = thisButton.data('file-id');\n\n        if (thisFileId !== undefined && thisFileId !== '') {\n            // Delete the file\n            var data = {\n                'file_id': thisFileId,\n            };\n\n            $.post(\n                'sources/items.queries.php', {\n                    type: 'delete_attached_file',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    //decrypt data\n                    data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_attached_file');\n                    if (debugJavascript === true) console.log(data);\n\n                    //check if format error\n                    if (data.error === true) {\n                        // ERROR\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Remove the file in UI\n                        thisButton.closest('.edit-attachment-div').remove();\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n        }\n    });\n\n    //calling image lightbox when clicking on link\n    $(document).on('click', '.preview-image', function(event) {\n        event.preventDefault();\n        PreviewImage($(this).data('file-id'));\n    });\n\n    PreviewImage = function(fileId) {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('loading_image'); ?>...<i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-2\"></i>'\n        );\n\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"image_preview_preparation\",\n                id: fileId,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'image_preview_preparation');\n                //if (debugJavascript === true) console.log(data);\n\n                //check if format error\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $(\"#card-item-preview\").html('<img id=\"image_files\" src=\"\">');\n                    //Get the HTML Elements\n                    imageDialog = $(\"#card-item-preview\");\n                    imageTag = $('#image_files');\n\n                    //Set the image src\n                    imageTag.attr(\"src\", \"data:\" + data.file_type + \";base64,\" + data.file_content);\n                    imageTag.attr(\"class\", \"img-fluid\");\n\n                    //When the image has loaded, display the dialog\n                    showModalDialogBox(\n                        '#warningModal',\n                        data.filename,\n                        $(imageDialog).html(),\n                        '',\n                        'Close',\n                        'modal-xl'\n                    );\n\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n\n                    /*\n                                        var pre = document.createElement('pre');\n                                        pre.style.textAlign = \"center\";\n                                        $(pre).append($(imageDialog).html());\n                                        alertify\n                                            .alert(pre)\n                                            .set({\n                                                label: '<?php echo langHdl('close'); ?>',\n                                                closable: false,\n                                                padding: false,\n                                                title: data.filename,\n                                                resizable: true,\n                                            })\n                                            .resizeTo('90%', '250px');*/\n                }\n            }\n        );\n    };\n\n    /**\n     */\n    function itemLog(logCase, itemId, itemLabel) {\n        itemId = itemId || $('#id_item').val();\n\n        var data = {\n            \"id\": itemId,\n            \"label\": DOMPurify.sanitize(itemLabel),\n            \"user_id\": \"<?php echo $_SESSION['user_id']; ?>\",\n            \"action\": logCase,\n            \"login\": \"<?php echo $_SESSION['login']; ?>\"\n        };\n\n        $.post(\n            \"sources/items.logs.php\", {\n                type: \"log_action_on_item\",\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            }\n        );\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function prepareOneTimeView() {\n        //Send query\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"generate_OTV_url\",\n                id: store.get('teampassItem').id,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //check if format error\n                if (data.error == \"\") {\n                    $('#form-item-otv-link').val(data.url);\n                    // prepare clipboard\n                    var clipboard = new ClipboardJS(\"#form-item-otv-copy-button\", {\n                        text: function() {\n                            return data.url;\n                        }\n                    });\n                    clipboard.on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                positionClass: 'toast-top-right',\n                                progressBar: true\n                            }\n                        );\n                        e.clearSelection();\n                    });\n                }\n            },\n            \"json\"\n        );\n    }\n\n    /**\n     */\n    function getPrivilegesOnItem(val, edit, context) {\n        context = context || \"\"; // make context optional\n\n        // make sure to use correct selected folder\n        if (val === false) {\n            val = selectedFolderId;\n        }\n        if (debugJavascript === true) console.log('Get privilege for folder ' + val);\n            \n        if (val === \"\" || typeof val === \"undefined\" || val === false) {\n            toastr.remove();\n            toastr.error(\n                '',\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                {\n                    timeOut: 5000,\n                    positionClass: 'toast-top-right',\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        return $.post(\n            \"sources/items.queries.php\", {\n                type: \"get_complixity_level\",\n                folder_id: val,\n                context: context,\n                item_id: store.get('teampassItem').id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'get_complixity_level');\n\n                if (debugJavascript === true) {\n                    console.info('GET COMPLEXITY LEVEL');\n                    console.log(data);\n                }\n                var executionStatus = true;\n\n                if (data.error === false) {\n                    // Do some prepartion\n\n                    // Prepare list of users where needed\n                    $('#form-item-restrictedto, #form-item-anounce').empty().change(); //.val('')\n                    // Users restriction list\n                    var html_restrictions = '';\n\n                    $(data.usersList).each(function(index, value) {\n                        // Prepare list for FORM\n                        $(\"#form-item-restrictedto\")\n                            .append('<option value=\"' + value.id + '\" class=\"restriction_is_user\">' + value.name + '</option>');\n\n                        // Prepare list of emailers\n                        $('#form-item-anounce').append('<option value=\"' + value.email + '\">' + value.name + '</option>');\n                    });\n                    if (data.setting_restricted_to_roles === 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup label=\"<?php echo langHdl('users'); ?>\">');\n                        $(\".restriction_is_user\").wrapAll(optgroup);\n\n                        // Now add the roles to the list\n                        $(data.rolesList).each(function(index, value) {\n                            $(\"#form-item-restrictedto\")\n                                .append('<option value=\"role_' + value.id + '\" class=\"restriction_is_role\">' +\n                                    value.title + '</option>');\n                        });\n                        /// Add a group label for Groups\n                        $('.restriction_is_role').wrapAll($('<optgroup label=\"<?php echo langHdl('roles'); ?>\">'));\n                    }\n\n\n                    //\n                    $('#card-item-visibility').html(data.visibility);\n\n                    // Prepare Select2\n                    $('.select2').select2({\n                        language: '<?php echo $_SESSION['user_language_code']; ?>'\n                    });\n\n                    // Show selected restricted inputs\n                    $('#form-item-restrictedto')\n                        .val(data.usersList.concat(\n                            data.rolesList.map(i => 'role_' + i)))\n                        .change();\n\n                    // If restricted to Users then select them\n                    if (store.get('teampassItem').id_restricted_to !== undefined) {\n                        $('#form-item-restrictedto')\n                            .val(store.get('teampassItem').id_restricted_to)\n                            .trigger('change');\n                    }\n\n                }\n\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.folderId = val,\n                            teampassItem.error = data.error === undefined ? '' : data.error,\n                            teampassItem.message = data.message === undefined ? '' : data.message,\n                            teampassItem.folderComplexity = data.val === undefined ? '' : parseInt(data.val),\n                            teampassItem.folderIsPersonal = data.personal === undefined ? '' : parseInt(data.personal),\n                            teampassItem.itemMinimumComplexity = data.complexity === undefined ? '' : data.complexity,\n                            teampassItem.itemVisibility = data.visibility === undefined ? '' : data.visibility,\n                            teampassItem.id_restricted_to = data.usersList === undefined ? '' : data.usersList,\n                            teampassItem.id_restricted_to_roles = data.rolesList === undefined ? '' : data.rolesList,\n                            teampassItem.item_rights = data.itemAccessRight === undefined ? '' : data.itemAccessRight\n                    }\n                );\n                //if (debugJavascript === true) console.log('Content of teampassItem;')\n                //if (debugJavascript === true) console.log(store.get('teampassItem'))\n            }\n        );\n    }\n\n    $('.password-generate').click(function() {\n        var elementId = $(this).data('id');\n        $('#' + elementId).focus();\n        if (debugJavascript === true) console.log(elementId);\n\n        // If no criteria is set then do secure\n        var secure_pwd = false;\n        var anyBoxesChecked = false;\n        if ($('.password-definition:checked').length > 0) {\n            anyBoxesChecked = true;\n        }\n        if (anyBoxesChecked === false || $('#pwd-definition-secure').prop('checked') === true) {\n            secure_pwd = true;\n        }\n        \n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"generate_password\",\n                type_category: 'action_user',\n                size: $('#pwd-definition-size').val(),\n                lowercase: $('#pwd-definition-lcl').prop(\"checked\"),\n                numerals: $('#pwd-definition-numeric').prop(\"checked\"),\n                capitalize: $('#pwd-definition-ucl').prop(\"checked\"),\n                symbols: $('#pwd-definition-symbols').prop(\"checked\"),\n                secure_pwd: secure_pwd,\n                force: \"false\",\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (debugJavascript === true) console.log(data)\n                if (data.error == \"true\") {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        data.error_msg,\n                        '<?php echo langHdl('error'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                } else {\n                    $(\"#\" + elementId).val(data.key).focus();\n\n                    // Form has changed\n                    userDidAChange = true;\n                    if (debugJavascript === true) console.log('User did a change during generate_password > ' + userDidAChange);\n                    //$('#' + elementId).attr('data-change-ongoing', true);;\n\n                    $(\"#form-item-password\").pwstrength(\"forceUpdate\");\n\n                    // SHow button in sticky footer\n                    //$('#form-item-buttons').addClass('sticky-footer');\n                }\n            }\n        );\n    });\n\n    $('#item-button-password-copy').click(function() {\n        $('#form-item-password-confirmation').val($('#form-item-password').val());\n    });\n\n    /**\n     * On tag badge click, launch the search query\n     */\n    function searchItemsWithTags(criteria) {\n        if (criteria !== '') {\n            $('#folders-tree-card, .columns-position').removeClass('hidden');\n            $('.item-details-card, .form-item-action, .form-item, .form-folder-action').addClass('hidden');\n\n            $('#find_items').val(criteria);\n\n            searchItems(criteria);\n        }\n    }\n\n    /**\n     * Checks if string is base64 encoded\n     *\n     * @return bool\n     */\n    function isBase64(str) {\n        try {\n            return btoa(atob(str)) == str;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Scroll back to previous vertical position\n     *\n     * @return void\n     */\n    function scrollBackToPosition() {\n        // Scroll back to position\n        if (store.get('teampassApplication').tempScrollTop > 0) {\n            window.scrollTo({\n                top: store.get('teampassApplication').tempScrollTop\n            });\n        }\n    }\n\n\n    function prepareFolderDragNDrop()\n    {\n        $('.is-draggable').draggable({\n            cursor: 'move',\n            cursorAt: {\n                top: -5,\n                left: -5\n            },\n            opacity: 0.8,\n            appendTo: 'body',\n            stop: function(event, ui) {\n                $(this).removeClass('bg-warning');\n            },\n            start: function(event, ui) {\n                $(this).addClass('bg-warning');\n            },\n            helper: function(event) {\n                return $('<div class=\"bg-gray p-2 font-weight-light\">' + $(this).find('.list-item-row-description').text() + '</div>');\n            }\n        });\n        $('.folder').droppable({\n            hoverClass: 'bg-warning',\n            tolerance: 'pointer',\n            drop: function(event, ui) {\n                // Check if same folder\n                if (parseInt($(this).attr('id').substring(4)) === parseInt(ui.draggable.data('item-tree-id'))) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Warn user that it starts\n                toastr.info(\n                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                );\n\n                // Hide helper\n                ui.draggable.addClass('hidden');\n\n                //move item\n                var data = {\n                    'item_id': ui.draggable.data('item-id'),\n                    'folder_id': $(this).attr('id').substring(4)\n                }\n                $.post(\n                    'sources/items.queries.php', {\n                        type: 'move_item',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'move_item');\n\n                        if (debugJavascript === true) console.log(data)\n\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            ui.draggable.removeClass('hidden');\n                            return false;\n                        }\n                        \n                        //increment / decrement number of items in folders\n                        $('#itcount_' + data.from_folder).text(refreshFolderCounters($('#itcount_' + data.from_folder).text(), 'decrement'));\n                        $('#itcount_' + data.to_folder).text(refreshFolderCounters($('#itcount_' + data.to_folder).text(), 'increment'));\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                );\n            }\n        });\n    }\n\n    /**\n     * Permits to refresh the folder counters when performing an item drag and drop\n     */\n    function refreshFolderCounters(counter, operation)\n    {\n        var splitCounter = counter.split('/');\n        if (splitCounter.length <= 3) {\n            if (operation === 'increment') {\n                splitCounter[0]++;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]++;\n                }\n            } else {\n                splitCounter[0]--;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]--;\n                }\n            }\n        }\n        \n        return splitCounter.join('/');\n    }\n\n    /*\n    // Get parameters from url\n    var currentTeampassUrl = new URL(window.location.href);\n    var actionFromUrl = currentTeampassUrl.searchParams.get('action');\n    if (actionFromUrl !== undefined && atob(actionFromUrl) === 'reset_private_key') {\n        // Case where we need to re-encrypt all share keys\n        if (debugJavascript === true) console.log(\"ACTION RE-ENCRYPTION OF SHAREKEYS\");\n\n        $('#dialog-encryption-keys').removeClass('hidden');    \n\n        // Hide other\n        $('.content-header, .content').addClass('hidden');\n\n        alertify.dismissAll();\n    }\n    */\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      items.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], curPage($SETTINGS), $SETTINGS) === false) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n// Load\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare SESSION variables\n$session_user_admin = $superGlobal->get('user_admin', 'SESSION');\n\nif ((int) $session_user_admin === 1) {\n    $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n}\n\n// Get list of users\n$usersList = [];\n$rows = DB::query('SELECT id,login,email FROM ' . prefixTable('users') . ' ORDER BY login ASC');\nforeach ($rows as $record) {\n    $usersList[$record['login']] = [\n        'id' => $record['id'],\n        'login' => $record['login'],\n        'email' => $record['email'],\n    ];\n}\n// Get list of roles\n$arrRoles = [];\n$listRoles = '';\n$rows = DB::query('SELECT id,title FROM ' . prefixTable('roles_title') . ' ORDER BY title ASC');\nforeach ($rows as $reccord) {\n    $arrRoles[$reccord['title']] = [\n        'id' => $reccord['id'],\n        'title' => $reccord['title'],\n    ];\n    if (empty($listRoles)) {\n        $listRoles = $reccord['id'] . '#' . $reccord['title'];\n    } else {\n        $listRoles .= ';' . $reccord['id'] . '#' . $reccord['title'];\n    }\n}\n\n?>\n\n<!-- Content Header (Page header) -->\n<div class=\"content-header\">\n    <div class=\"container-fluid\">\n        <div class=\"row mb-2\">\n            <div class=\"col-sm-2\">\n                <h1 class=\"m-0 text-dark\"><i class=\"fas fa-key mr-2\"></i><?php echo langHdl('items'); ?></h1>\n            </div><!-- /.col -->\n            <div class=\"col-sm-10\">\n                <ol class=\"breadcrumb float-sm-right\" id=\"form-folder-path\"></ol>\n            </div><!-- /.col -->\n        </div><!-- /.row -->\n    </div><!-- /.container-fluid -->\n</div>\n<!-- /.content-header -->\n\n\n<!-- Main content -->\n<section class=\"content\">\n\n    <!-- EXPIRED ITEM -->\n    <div class=\"row hidden\" id=\"card-item-expired\">\n        <div class=\"col-12\">\n            <div class=\"alert alert-danger\">\n                <h5><i class=\"fas fa-exclamation-triangle mr-2\"></i><?php echo langHdl('warning'); ?></h5>\n                <?php echo langHdl('pw_is_expired_-_update_it'); ?>\n            </div>\n        </div>\n    </div>\n\n    <!-- ITEM FORM -->\n    <div class=\"row hidden form-item\">\n        <div class=\"col-12\">\n\n            <div class=\"card text-center\">\n                <div class=\"card-header\">\n                    <div class=\"card-tools-left\">\n                        <button type=\"button\" class=\"btn btn-gray but-back\">\n                            <i class=\"fas fa-arrow-left\"></i>\n                        </button>\n                    </div>\n\n                    <h5 id=\"form-item-title\" class=\"clear-me-html\" style=\"min-height:23px;\"></h5>\n\n                    <div class=\"card-tools\">\n                        <button type=\"button\" class=\"btn btn-tool btn-sm but-back\">\n                            <i class=\"fas fa-times\"></i>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div>\n                        <label><i class=\"fas fa-users mr-2\"></i><?php echo langHdl('visible_by'); ?></label>\n                        <span id=\"card-item-visibility\" class=\"text-info font-weight-bold ml-2\"></span>\n                    </div>\n                    <div>\n                        <label><i class=\"fas fa-key mr-2\"></i><?php echo langHdl('complex_asked'); ?></label>\n                        <span id=\"card-item-minimum-complexity\" class=\"text-info font-weight-bold ml-2\"></span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header d-flex\">\n                    <ul class=\"nav nav-pills\" id=\"form-item-nav-pills\">\n                        <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#tab_1\" data-toggle=\"tab\"><i class=\"fas fa-home mr-2\"></i><?php echo langHdl('main'); ?></a></li>\n                        <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_2\" data-toggle=\"tab\"><i class=\"fas fa-list mr-2\"></i><?php echo langHdl('details'); ?></a></li>\n                        <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_3\" data-toggle=\"tab\"><i class=\"fas fa-archive mr-2\"></i><?php echo langHdl('attachments'); ?></a></li>\n                        <?php\n                        echo isset($SETTINGS['item_extra_fields']) === true && (int) $SETTINGS['item_extra_fields'] === 1 ? '\n                            <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_4\" data-toggle=\"tab\"><i class=\"fas fa-cubes mr-2\"></i>' . langHdl('fields') . '</a></li>' : '';\n                        echo isset($SETTINGS['insert_manual_entry_item_history']) === true && (int) $SETTINGS['insert_manual_entry_item_history'] === 1 ? '\n                            <li class=\"nav-item\"><a class=\"nav-link\" href=\"#tab_5\" data-toggle=\"tab\"><i class=\"fas fa-history mr-2\"></i>' . langHdl('history') . '</a></li>' : '';\n                        ?>\n                    </ul>\n                </div><!-- /.card-header -->\n                <div class=\"card-body\">\n                    <form id=\"form-item\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                        <div class=\"tab-content\">\n                            <div class=\"tab-pane active\" id=\"tab_1\">\n                                <!-- LABEL -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('label'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-label\" type=\"text\" class=\"form-control form-item-control purify\" data-change-ongoing=\"\" data-field-name=\"label\">\n                                </div>\n                                <!-- DESCRIPTION -->\n                                <div class=\"mb-3\">\n                                    <div id=\"form-item-description\" class=\"form-item-control w-100 clear-me-html purify purifyHtml\" data-field-name=\"description\" data-change-ongoing=\"\"></div>\n                                </div>\n                                <!-- LOGIN -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('login'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-login\" type=\"text\" class=\"form-control form-item-control purify\" data-field-name=\"login\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- PASSWORD -->\n                                <div class=\"input-group mb-2\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('password'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-password\" type=\"password\" class=\"form-control form-item-control\" placeholder=\"<?php echo langHdl('password'); ?>\" data-field-name=\"pwd\" data-change-ongoing=\"\">\n                                    <div class=\"input-group-append\">\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip password-generate\" id=\"item-button-password-generate\" title=\"<?php echo langHdl('pw_generate'); ?>\" data-id=\"form-item-password\"><i class=\"fas fa-random\"></i></button>\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip\" id=\"item-button-password-showOptions\" title=\"<?php echo langHdl('options'); ?>\"><i class=\"fas fa-sliders-h\"></i></button>\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip\" id=\"item-button-password-show\" title=\"<?php echo langHdl('mask_pw'); ?>\"><i class=\"fas fa-low-vision\"></i></button>\n                                    </div>\n                                </div>\n                                <div class=\"container-fluid mb-0\">\n                                    <div class=\"row\">\n                                        <div class=\"col-md-12 justify-content-center\">\n                                            <div id=\"form-item-password-strength\" class=\"justify-content-center\" style=\"\"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <input type=\"hidden\" id=\"form-item-password-complex\" value=\"0\">\n                                <div class=\"mt-1 hidden\" id=\"form-item-password-options\">\n                                    <div class=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                                        <div class=\"btn-group btn-group-sm btn-group-toggle mr-2\" data-toggle=\"buttons\">\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-lcl\">abc</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-ucl\">ABC</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-numeric\">123</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-symbols\">@#&amp;</label>\n                                            <label class=\"btn btn-outline-secondary btn-sm\">\n                                                <input type=\"checkbox\" class=\"password-definition\" id=\"pwd-definition-secure\"><?php echo langHdl('secure'); ?></label>\n                                        </div>\n\n                                        <div class=\"input-group input-group-sm\">\n                                            <div class=\"input-group-prepend\">\n                                                <div class=\"input-group-text\"><?php echo langHdl('size'); ?></div>\n                                            </div>\n                                            <select class=\"form-control form-control-sm w-10\" id=\"pwd-definition-size\">\n                                                <?php\n                                                for ($i = 4; $i <= $SETTINGS['pwd_maximum_length']; ++$i) {\n                                                    echo '\n                                                <option>' . $i . '</option>';\n                                                }\n                                                ?>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- EMAIL -->\n                                <div class=\"input-group mb-3 mt-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('email'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-email\" type=\"email\" class=\"form-control form-item-control purify\" data-field-name=\"email\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- URL -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('url'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-url\" type=\"url\" class=\"form-control form-item-control purify\" data-field-name=\"url\" data-change-ongoing=\"\">\n                                </div>\n                                <!-- ICON -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('icon'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-icon\" type=\"text\" class=\"form-control form-item-control \" data-field-name=\"icon\" data-change-ongoing=\"\">\n                                    <span class=\"ml-2 col-md-1 clear-me-html\" id=\"form-item-icon-show\"></span>\n                                </div>\n                                <small class='form-text text-muted'>\n                                    <?php echo langHdl('fontawesome_icon_tip'); ?><a href=\"<?php echo FONTAWESOME_URL;?>\" target=\"_blank\"><i class=\"fas fa-external-link-alt ml-1\"></i></a>\n                                </small>\n                            </div>\n\n                            <div class=\"tab-pane\" id=\"tab_2\">\n                                <!-- FOLDERS -->\n                                <div class=\"form-group mb-3\">\n                                    <label><?php echo langHdl('folder'); ?></label>\n                                    <select id=\"form-item-folder\" class=\"form-control form-item-control select2 no-root\" style=\"width:100%;\" data-change-ongoing=\"\"></select>\n                                </div>\n\n                                <!-- RESTRICTED TO -->\n                                <div class=\"input-group mb-3\">\n                                    <label><?php echo langHdl('restricted_to'); ?></label>\n                                    <select id=\"form-item-restrictedto\" class=\"form-control form-item-control select2\" style=\"width:100%;\" multiple=\"multiple\" data-change-ongoing=\"\"></select>\n                                    <input type=\"hidden\" id=\"form-item-restrictedToUsers\" class=\"form-item-control\">\n                                    <input type=\"hidden\" id=\"form-item-restrictedToRoles\" class=\"form-item-control\">\n                                </div>\n                                <!-- TAGS -->\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('tags'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-tags\" type=\"text\" class=\"form-control form-item-control autocomplete purify\" data-change-ongoing=\"\" data-field-name=\"tags\">\n                                </div>\n                                <!-- ANYONE CAN MODIFY -->\n                                <?php\n                                if (\n                                    isset($SETTINGS['anyone_can_modify']) === true\n                                    && (int) $SETTINGS['anyone_can_modify'] === 1\n                                ) {\n                                    ?>\n                                    <div class=\"form-check mb-3 icheck-blue\">\n                                        <input type=\"checkbox\" class=\"form-check-input form-item-control flat-blue\" id=\"form-item-anyoneCanModify\" <?php\n                                            echo isset($SETTINGS['anyone_can_modify_bydefault']) === true\n                                            && (int) $SETTINGS['anyone_can_modify_bydefault'] === 1 ? ' checked' : ''; ?> data-change-ongoing=\"\">\n                                        <label class=\"form-check-label ml-3\" for=\"form-item-anyoneCanModify\"><?php echo langHdl('anyone_can_modify'); ?></label>\n                                    </div>\n                                <?php\n                                }\n                                ?>\n                                <!-- DELETE AFTER CONSULTATION -->\n                                <?php\n                                if (\n                                    isset($SETTINGS['enable_delete_after_consultation']) === true\n                                    && (int) $SETTINGS['enable_delete_after_consultation'] === 1\n                                ) {\n                                    ?>\n                                    <div class=\"callout callout-primary mb-3\">\n                                        <div class=\"card-header\">\n                                            <h3 class=\"card-title\">\n                                                <i class=\"fas fa-eraser\"></i>\n                                                <?php echo langHdl('allow_item_to_be_deleted'); ?>\n                                            </h3>\n                                        </div>\n                                        <!-- /.card-header -->\n                                        <div class=\"card-body\">\n                                            <div class=\"row\">\n                                                <div class=\"d-inline p-2\">\n                                                    <?php echo langHdl('item_deleted_after_being_viewed_x_times'); ?>\n                                                </div>\n                                                <div class=\"d-inline p-2\">\n                                                    <input type=\"text\" class=\"form-control form-item-control purify\" data-field-name=\"deleteAfterShown\" id=\"form-item-deleteAfterShown\" data-change-ongoing=\"\">\n                                                </div>\n                                            </div>\n                                            <div class=\"row\">\n                                                <div class=\"d-inline p-2\">\n                                                    <?php echo langHdl('item_deleted_after_date'); ?>\n                                                </div>\n                                                <div class=\"d-inline p-2\">\n                                                    <div class=\"input-group date inline\">\n                                                        <div class=\"input-group-prepend\">\n                                                            <span class=\"input-group-text\">\n                                                                <i class=\"fas fa-calendar\"></i>\n                                                            </span>\n                                                        </div>\n                                                        <input type=\"text\" class=\"form-control float-right form-item-control purify\" data-field-name=\"deleteAfterDate\" id=\"form-item-deleteAfterDate\" data-change-ongoing=\"\">\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                <?php\n                                }\n                                ?>\n\n                                <div class=\"callout callout-primary mb-3\">\n                                    <div class=\"card-header\">\n                                        <h3 class=\"card-title\">\n                                            <i class=\"fas fa-bullhorn\"></i>\n                                            <?php echo langHdl('anounce_item_by_email'); ?>\n                                        </h3>\n                                    </div>\n                                    <!-- /.card-header -->\n                                    <div class=\"card-body\">\n                                        <select id=\"form-item-anounce\" class=\"form-control form-item-control select2\" style=\"width:100%;\" multiple=\"multiple\" data-placeholder=\"<?php echo langHdl('select_users_if_needed'); ?>\" data-change-ongoing=\"\"></select>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- ATTACHMENTS -->\n                            <div class=\"tab-pane\" id=\"tab_3\">\n                                <div class=\"callout callout-primary mb-3 hidden\" id=\"form-item-attachments-zone\">\n                                    <div class=\"card-header\">\n                                        <h3 class=\"card-title\">\n                                            <i class=\"fas fa-paperclip mr-3\"></i>\n                                            <?php echo langHdl('attached_files'); ?>\n                                        </h3>\n                                    </div>\n                                    <!-- /.card-header -->\n                                    <div class=\"card-body clear-me-html\" id=\"form-item-attachments\">\n                                    </div>\n                                </div>\n                                <div class=\"callout callout-primary mb-3\">\n                                    <div class=\"card-header\">\n                                        <h3 class=\"card-title\">\n                                            <i class=\"fas fa-plus mr-3\"></i>\n                                            <?php echo langHdl('select_files'); ?>\n                                        </h3>\n                                    </div>\n                                    <!-- /.card-header -->\n                                    <div class=\"card-body\">\n                                        <div class=\"row\" id=\"form-item-upload-zone\">\n                                            <div class=\"col-6\">\n                                                <a class=\"btn btn-app text-capitalize\" id=\"form-item-attach-pickfiles\">\n                                                    <i class=\"fas fa-search mr-1\"></i><?php echo langHdl('select'); ?>\n                                                </a>\n                                                <a class=\"btn btn-app\" id=\"form-item-upload-pickfiles\">\n                                                    <i class=\"fas fa-upload mr-1\"></i><?php echo langHdl('start_upload'); ?>\n                                                </a>\n                                                <input type=\"hidden\" id=\"form-item-hidden-pickFilesNumber\" value=\"0\" />\n                                                <small class=\"form-text text-muted\">\n                                                    <?php echo langHdl('add_files_and_click_start'); ?>\n                                                </small>\n                                            </div>\n                                            <div class=\"col-6\">\n                                                <div class=\"callout callout-info hidden clear-me-html\" id=\"form-item-upload-pickfilesList\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- CUSTOM FIELDS -->\n                            <div class=\"tab-pane\" id=\"tab_4\">\n                                <div id=\"form-item-field\" class=\"hidden\">\n                                    <?php\n                                        echo \"coucou \".count($_SESSION['item_fields']);\n                                        if (isset($_SESSION['item_fields']) === true) {\n                                            foreach ($_SESSION['item_fields'] as $category) {\n                                                echo '\n                                            <div class=\"callout callout-info form-item-category hidden\" id=\"form-item-category-' . $category['id'] . '\">\n                                                <h5>' . $category['title'] . '</h5>\n                                                <p>';\n                                                foreach ($category['fields'] as $field) {\n                                                    if ($field['type'] === 'textarea') {\n                                                        echo '\n                                                    <div class=\"form-group mb-3 form-item-field\" id=\"form-item-field-' . $field['id'] . '\" data-field-id=\"' . $field['id'] . '\">\n                                                        <label>' . $field['title'],\n                                                            $field['is_mandatory'] === '1' ?\n                                                                '<span class=\"fas fa-fire text-danger ml-1 infotip\" title=\"' . langHdl('is_mandatory') . '\"></span>' : '',\n                                                            '</label>\n                                                        <textarea class=\"form-control form-item-control form-item-field-custom\" rows=\"2\" data-field-name=\"' . $field['id'] . '\" data-field-mandatory=\"' . $field['is_mandatory'] . '\" data-field-regex=\"' . $field['regex'] . '\" data-change-ongoing=\"0\"></textarea>\n                                                    </div>';\n                                                    } else {\n                                                        echo '\n                                                    <div class=\"input-group mb-3 form-item-field\" id=\"form-item-field-' . $field['id'] . '\" data-field-id=\"' . $field['id'] . '\">\n                                                        <div class=\"input-group-prepend\">\n                                                            <span class=\"input-group-text\">' . $field['title'],\n                                                            $field['is_mandatory'] === '1' ?\n                                                                '<span class=\"fas fa-fire text-danger ml-1 infotip\" title=\"' . langHdl('is_mandatory') . '\"></span>' : '',\n                                                            '</span>\n                                                        </div>\n                                                        <input type=\"' . $field['type'] . '\" class=\"form-control form-item-control form-item-field-custom\" data-field-name=\"' . $field['id'] . '\" data-field-mandatory=\"' . $field['is_mandatory'] . '\" data-field-regex=\"' . $field['regex'] . '\" data-change-ongoing=\"0\">\n                                                    </div>';\n                                                    }\n                                                    if (!empty($field['regex'])) {\n                                                        echo '\n                                                    <div>Regex: '. $field['regex'] .'</div>\n                                                        ';\n                                                    }\n                                                }\n                                                // Manage template\n                                                if (\n                                                    isset($SETTINGS['item_creation_templates']) === true\n                                                    && $SETTINGS['item_creation_templates'] === '1'\n                                                ) {\n                                                    echo '\n                                                    <div class=\"form-check icheck-blue\">\n                                                        <input type=\"checkbox\" class=\"form-check-input form-check-input-template form-item-control flat-blue\" data-category-id=\"' . $category['id'] . '\" data-change-ongoing=\"0\" data-field-name=\"template\" id=\"template_' . $category['id'] . '\">\n                                                        <label class=\"form-check-label ml-3\" for=\"template_' . $category['id'] . '\">' . langHdl('main_template') . '</label>\n                                                    </div>';\n                                                }\n                                                echo '\n                                                </p>\n                                            </div>';\n                                            }\n                                        } else {\n                                            echo\n                                            '<div class=\"alert alert-info\">\n                                                <h5><i class=\"icon fa fa-info mr-3\"></i>' . langHdl('information') . '</h5>\n                                                ' . langHdl('no_fields') . '\n                                            </div>';\n                                        } ?>\n                                </div>\n                                <div class=\"alert alert-info hidden no-item-fields\">\n                                    <h5><i class=\"icon fa fa-info mr-3\"></i><?php echo langHdl('information'); ?></h5>\n                                    <?php echo langHdl('no_fields'); ?>\n                                </div>\n                            </div>\n\n                            <!-- HISTORY -->\n                            <div class=\"tab-pane\" id=\"tab_5\">\n                                <div class=\"alert alert-info\">\n                                    <h5><i class=\"icon fa fa-info mr-3\"></i><?php echo langHdl('information'); ?></h5>\n                                    <?php echo langHdl('info_about_history_insertion'); ?>\n                                </div>\n                                <!-- LABEL -->\n                                <div class=\"row\">\n                                    <div class=\"col-12 input-group mb-3\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><?php echo langHdl('label'); ?></span>\n                                        </div>\n                                        <input id=\"form-item-history-label\" type=\"text\" class=\"form-control form-item-control history\" data-change-ongoing=\"\" data-field-name=\"history-label\">\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-6 input-group date inline\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-calendar\"></i>\n                                            </span>\n                                        </div>\n                                        <input type=\"text\" class=\"form-control float-right form-item-control datepicker history\" id=\"form-item-history-date\" data-change-ongoing=\"\" data-field-name=\"history-date\">\n                                    </div>\n                                    <div class=\"col-6 input-group time inline\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-clock\"></i>\n                                            </span>\n                                        </div>\n                                        <input type=\"text\" class=\"form-control float-right form-item-control timepicker history\" id=\"form-item-history-time\" data-change-ongoing=\"\" data-field-name=\"history-time\">\n                                    </div>\n                                </div>\n                                <div class=\"row col-12 mt-3\">\n                                    <button type=\"button\" class=\"btn btn-default mr-2\" id=\"form-item-history-insert\" data-action=\"\"><i class=\"fas fa-broom mr-2\"></i><?php echo langHdl('history_insert_entry'); ?></button>\n                                    <button type=\"button\" class=\"btn btn-default\" id=\"form-item-history-clear\" data-action=\"\"><i class=\"fas fa-broom mr-2\"></i><?php echo langHdl('clear_form'); ?></button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div class=\"card-footer\" id=\"form-item-buttons\">\n                    <button type=\"button\" class=\"btn btn-info mr-2\" id=\"form-item-button-save\" data-action=\"\"><?php echo langHdl('save'); ?></button>\n                    <button type=\"button\" class=\"btn btn-default but-back item-edit\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n                <!-- /.card-footer -->\n            </div>\n        </div>\n    </div>\n\n\n    <!-- ITEM DETAILS -->\n    <div class=\"row hidden item-details-card item-details-card-menu\">\n        <div class=\"col-12\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <span class=\"mr-3 align-middle\">\n                        <button type=\"button\" class=\"btn btn-gray but-back-to-list\">\n                            <i class=\"fas fa-arrow-left\"></i>\n                        </button>\n                    </span>\n                    <h3 class=\"d-inline align-middle\" id=\"card-item-label\"></h3>\n                    <div class=\"card-tools\">\n                        <button type=\"button\" class=\"btn btn-tool btn-sm but-back mt-2\">\n                            <i class=\"fas fa-times\"></i>\n                        </button>\n                    </div>\n                </div>\n\n                <div class=\"card-body p-0\">\n                    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span class=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                            <ul class=\"navbar-nav\">\n                                <li class=\"nav-item\" id=\"item-form-new-button\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"new\"><i class=\"far fa-plus-square mr-1\"></i><small><?php echo langHdl('new'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"edit\"><i class=\"far fa-edit mr-1\"></i><small><?php echo langHdl('edit'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"delete\"><i class=\"far fa-trash-alt mr-1\"></i><small><?php echo langHdl('delete'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"copy\"><i class=\"far fa-copy mr-1\"></i><small><?php echo langHdl('copy'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy ml-3\" href=\"#\" data-item-action=\"link\" id=\"get_item_link\"><i class=\"fa-solid fa-link mr-1\"></i><small><?php echo langHdl('link'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"share\"><i class=\"far fa-share-square mr-1\"></i><small><?php echo langHdl('share'); ?></small></a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"notify\"><i class=\"far fa-bell mr-1\"></i><small><?php echo langHdl('notify'); ?></small></a>\n                                </li>\n                                <?php\n                                if (\n                                    isset($SETTINGS['enable_server_password_change']) === true\n                                    && (int) $SETTINGS['enable_server_password_change'] === 1\n                                ) {\n                                    ?>\n                                    <li class=\"nav-item\">\n                                        <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"server\"><i class=\"fas fa-server mr-1\"></i><small><?php echo langHdl('server'); ?></small></a>\n                                    </li>\n                                <?php\n                                }\n                                if (\n                                    isset($SETTINGS['otv_is_enabled']) === true\n                                    && (int) $SETTINGS['otv_is_enabled'] === 1\n                                ) {\n                                    ?>\n                                    <li class=\"nav-item\">\n                                        <a class=\"text-navy tp-action ml-3\" href=\"#\" data-item-action=\"otv\"><i class=\"fab fa-slideshare mr-1\"></i><small><?php echo langHdl('one_time_view'); ?></small></a>\n                                    </li>\n                                <?php\n                                }\n                                ?>\n                            </ul>\n                        </div>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"card-item-preview\" class=\"hidden\"></div>\n\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-md-7\">\n            <div class=\"card card-primary card-outline\">\n                <div class=\"card-body\" id=\"list-group-item-main\">\n                    <ul class=\"list-group list-group-unbordered mb-3\">\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('pw'); ?></b>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm btn-copy-clipboard\" id=\"card-item-pwd-button\">\n                                <i class=\"far fa-copy\"></i>\n                            </button>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm mr-1\" id=\"card-item-pwd-show-button\">\n                                <i class=\"far fa-eye pwd-show-spinner\"></i>\n                            </button>\n                            <span id=\"card-item-pwd\" class=\"float-right unhide_masked_data pointer mr-2\"></span>\n                            <input id=\"hidden-item-pwd\" type=\"hidden\">\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('index_login'); ?></b>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm ml-1 btn-copy-clipboard-clear\" data-clipboard-target=\"#card-item-login\" id=\"card-item-login-btn\">\n                                <i class=\"far fa-copy\"></i>\n                            </button>\n                            <span id=\"card-item-login\" class=\"float-right\"></span>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('email'); ?></b>\n                            <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm ml-1 btn-copy-clipboard-clear\" data-clipboard-target=\"#card-item-email\" id=\"card-item-email-btn\">\n                                <i class=\"far fa-copy\"></i>\n                            </button>\n                            <span id=\"card-item-email\" class=\"float-right ml-1\"></span>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('url'); ?></b>\n                            <a id=\"card-item-url\" class=\"float-right ml-1\" href=\"#\" target=\"_blank\"></a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-md-5\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <ul class=\"list-group list-group-unbordered mb-3\">\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('restricted_to'); ?></b>\n                            <a id=\"card-item-restrictedto\" class=\"float-right ml-1\"></a>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('tags'); ?></b>\n                            <a id=\"card-item-tags\" class=\"float-right ml-1\"></a>\n                        </li>\n                        <li class=\"list-group-item\">\n                            <b><?php echo langHdl('kbs'); ?></b>\n                            <a id=\"card-item-kbs\" class=\"float-right ml-1\"></a>\n                        </li>\n                        <li class=\"list-group-item\" id=\"card-item-misc\">\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-12\">\n            <div class=\"callout callout-info visible\" id=\"card-item-description\">No description</div>\n        </div>\n    </div>\n\n\n    <?php\n    if (\n        isset($SETTINGS['item_extra_fields']) === true\n        && (int) $SETTINGS['item_extra_fields'] === 1\n    ) {\n        ?>\n        <div class=\"row hidden item-details-card\" id=\"item-details-card-categories\">\n            <div class=\"col-12\">\n                <div class=\"card card-default\">\n                    <div class=\"card-header bg-gray-dark\">\n                        <h3 class=\"card-title pointer\" data-toggle=\"collapse\" data-target=\"#card-item-fields\">\n                            <i class=\"fas fa-random mr-2\"></i><?php echo langHdl('categories'); ?>\n                        </h3>\n                        <!-- /.card-tools -->\n                    </div>\n                    <!-- /.card-header -->\n                    <div class=\"card-body collapse show\" id=\"card-item-fields\">\n                        <?php\n                            foreach ($_SESSION['item_fields'] as $elem) {\n                                echo '\n                        <div class=\"callout callout-info card-item-category hidden\" id=\"card-item-category-' . $elem['id'] . '\">\n                            <h5>' . $elem['title'] . '</h5>\n                            <p>\n                                <ul class=\"list-group list-group-unbordered mb-3\">';\n                                foreach ($elem['fields'] as $field) {\n                                    echo '\n                                    <li class=\"list-group-item card-item-field hidden\" id=\"card-item-field-' . $field['id'] . '\">\n                                        <b>' . $field['title'] . '</b>\n                                        <button type=\"button\" class=\"float-right btn btn-outline-info btn-sm ml-1 btn-copy-clipboard-clear\"  data-clipboard-target=\"#card-item-field-value-' . $field['id'] . '\">\n                                            <i class=\"fas fa-copy\"></i>\n                                        </button>\n                                        <span class=\"card-item-field-value float-right ml-1\" id=\"card-item-field-value-' . $field['id'] . '\"></span>\n                                    </li>';\n                                }\n                                echo '\n                                </ul>\n                            </p>\n                        </div>';\n                            } ?>\n                        <div class=\"hidden no-item-fields\"><?php echo langHdl('no_custom_fields'); ?></div>\n                    </div>\n                    <!-- /.card-body -->\n                </div>\n            </div>\n        </div>\n    <?php\n    }\n    ?>\n\n    <div class=\"row hidden item-details-card item-card-attachments\">\n        <div class=\"col-12\">\n            <div class=\"card card-default collapsed\">\n                <div class=\"card-header bg-gray-dark\">\n                    <h3 class=\"card-title pointer\" data-toggle=\"collapse\" data-target=\"#card-item-attachments\">\n                        <i class=\"fas fa-paperclip mr-2\"></i><?php echo langHdl('attachments'); ?>\n                        <span class=\"badge badge-secondary ml-2\" id=\"card-item-attachments-badge\"></span>\n                    </h3>\n                </div>\n                <!-- /.card-header -->\n                <div class=\"card-body collapse clear-me-html\" id=\"card-item-attachments\">\n                </div>\n                <!-- /.card-body -->\n                <div class=\"overlay\">\n                    <i class=\"fas fa-refresh fa-spin\"></i>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-12\">\n            <div class=\"card card-default collapsed\">\n                <div class=\"card-header bg-gray-dark\">\n                    <h3 class=\"card-title pointer\" data-toggle=\"collapse\" data-target=\"#card-item-history\">\n                        <i class=\"fas fa-history mr-2\"></i><?php echo langHdl('history'); ?>\n                        <span class=\"badge badge-secondary ml-2\" id=\"card-item-history-badge\"></span>\n                    </h3>\n                    <!-- /.card-tools -->\n                </div>\n                <!-- /.card-header -->\n                <div class=\"card-body collapse\" id=\"card-item-history\">\n                </div>\n                <!-- /.card-body -->\n                <div class=\"overlay\">\n                    <i class=\"fas fa-refresh fa-spin\"></i>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <?php\n    if (isset($SETTINGS['enable_suggestion']) === true && (int) $SETTINGS['enable_suggestion'] === 1) {\n        /*\n            // TODO: NOT YET PORTED ?>\n        <div class=\"row hidden item-details-card\">\n            <div class=\"col-12\">\n                <div class=\"card card-default collapsed-card card-item-extra collapseme\">\n                    <div class=\"card-header bg-gray\">\n                        <h3 class=\"card-title pointer\" data-widget=\"collapse\">\n                            <i class=\"fas fa-random mr-2\"></i><?php echo langHdl('suggest_password_change'); ?>\n                        </h3>\n                        <!-- /.card-tools -->\n                    </div>\n                    <!-- /.card-header -->\n                    <div class=\"card-body collapse show\">\n                        <form id=\"form-item-suggestion\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                            <div class=\"alert alert-info\">\n                                <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                                <?php echo langHdl('suggestion_information'); ?>\n                            </div>\n                            <!-- LABEL -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('label'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-label\" type=\"text\" class=\"form-control form-item-control form-item-suggestion\" data-change-ongoing=\"\" data-field-name=\"label\">\n                            </div>\n                            <!-- DESCRIPTION -->\n                            <div class=\"mb-3\">\n                                <textarea id=\"form-item-suggestion-description\" class=\"form-item-control form-item-suggestion w-100 clear-me-html\" data-field-name=\"description\" data-change-ongoing=\"\"></textarea>\n                            </div>\n                            <!-- LOGIN -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('login'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-login\" type=\"text\" class=\"form-control form-item-control form-item-suggestion\" data-field-name=\"login\" data-change-ongoing=\"\">\n                            </div>\n                            <!-- PASSWORD -->\n                            <div class=\"input-group mb-0\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text p-1\"><div id=\"form-item-suggestion-password-strength\"></div></span>\n                                </div>\n                                <input id=\"form-item-suggestion-password\" type=\"password\" class=\"form-control form-item-control form-item-suggestion\" placeholder=\"<?php echo langHdl('password'); ?>\" data-field-name=\"pwd\" data-change-ongoing=\"\">\n                            </div>\n                            <input type=\"hidden\" id=\"form-item-suggestion-password-complex\" value=\"0\">\n                            <!-- EMAIL -->\n                            <div class=\"input-group mb-3 mt-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('email'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-email\" type=\"email\" class=\"form-control form-item-control form-item-suggestion\" data-field-name=\"email\" data-change-ongoing=\"\">\n                            </div>\n                            <!-- URL -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('url'); ?></span>\n                                </div>\n                                <input id=\"form-item-suggestion-url\" type=\"url\" class=\"form-control form-item-control form-item-suggestion\" data-field-name=\"url\" data-change-ongoing=\"\">\n                            </div>\n                            <!-- COMMENT -->\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\"><?php echo langHdl('comment'); ?></span>\n                                </div>\n                                <textarea id=\"form-item-suggestion-comment\" class=\"form-control form-item-control form-item-suggestion\" rows=\"2\" data-field-name=\"comment\" data-change-ongoing=\"\"></textarea>\n                            </div>\n                        </form>\n                    </div>\n                    <!-- /.card-body -->\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-suggestion-perform\"><?php echo langHdl('perform'); ?></button>\n                    </div>\n                    <!-- /.card-footer -->\n                </div>\n            </div>\n        </div>\n        <?php\n        */\n    }\n    ?>\n\n    <!--\n        <div class=\"row hidden item-details-card\">\n            <div class=\"col-12\">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <button type=\"button\" class=\"btn btn-warning btn-copy-clipboard\"  id=\"card-item-otv-generate-button\"><?php echo langHdl('generate_otv_link'); ?></button>\n                    </div>\n                    <div class=\"input-group-prepend\">\n                        <button type=\"button\" class=\"btn btn-warning btn-copy-clipboard\"  id=\"card-item-otv-copy-button\"><?php echo langHdl('copy'); ?></button>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" placeholder=\"OTV link\" id=\"card-item-otv\">\n                </div>\n            </div>\n        </div>\n        -->\n\n    <!-- SERVER UPDATE --><?php\n                            if (DEBUG === true) {\n                                ?>\n        <div class=\"row hidden form-item-server form-item-action\">\n            <div class=\"col-12\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header bg-navy\">\n                        <h5>\n                            <i class=\"fas fa-server mr-2\"></i><?php echo langHdl('update_server_password'); ?>\n                        </h5>\n                        <!-- /.card-tools -->\n                    </div>\n                    <!-- /.card-header -->\n                    <div class=\"card-body\">\n                        <ul class=\"nav nav-tabs\" id=\"server-tab\">\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link active\" href=\"#tab-one-shot\" data-action=\"ssh-one-shot\" data-toggle=\"tab\"><?php echo langHdl('ssh_one_shot_change'); ?></a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" href=\"#tab-scheduled\" data-action=\"ssh-scheduled\" data-toggle=\"tab\"><?php echo langHdl('ssh_scheduled_change'); ?></a>\n                            </li>\n                        </ul>\n                        <div class=\"tab-content\" id=\"myTabContent\">\n                            <div class=\"tab-pane fade show active tab-pane\" id=\"tab-one-shot\">\n                                <div class=\"alert alert-info mt-3 form-text text-muted\">\n                                    <?php echo langHdl('auto_update_server_password_info'); ?>\n                                </div>\n                                <div class=\"input-group mb-3 mt-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('ssh_user'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-server-login\" type=\"text\" class=\"form-control form-item-control form-item-server\" data-field-name=\"login\" data-change-ongoing=\"\">\n                                </div>\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('ssh_pwd'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-server-old-password\" type=\"password\" class=\"form-control form-item-control form-item-server\" data-field-name=\"old-password\" data-change-ongoing=\"\">\n                                </div>\n                                <div class=\"input-group mb-3\">\n                                    <div class=\"input-group-prepend\">\n                                        <span class=\"input-group-text\"><?php echo langHdl('index_new_pw'); ?></span>\n                                    </div>\n                                    <input id=\"form-item-server-password\" type=\"password\" class=\"form-control form-item-control form-item-server\" data-field-name=\"password\" data-change-ongoing=\"\">\n                                    <div class=\"input-group-append\">\n                                        <button class=\"btn btn-outline-secondary btn-no-click infotip password-generate\" title=\"<?php echo langHdl('pw_generate'); ?>\" data-id=\"form-item-server-password\"><i class=\"fas fa-random\"></i></button>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"tab-pane fade tab-pane\" id=\"tab-scheduled\">\n                                <div class=\"alert alert-info mt-3 form-text text-muted\">\n                                    <?php echo langHdl('ssh_password_frequency_change_info'); ?>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label><?php echo langHdl('ssh_password_frequency_change'); ?></label>\n                                    <select class=\"form-control form-item-control select2\" style=\"width:100%;\" id=\"form-item-server-cron-frequency\">\n                                        <option value=\"0\">0</option>\n                                        <option value=\"1\">1</option>\n                                        <option value=\"2\">2</option>\n                                        <option value=\"3\">3</option>\n                                        <option value=\"4\">4</option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div class=\"callout callout-alert mt-3 hidden\" id=\"form-item-server-status\">\n\n                            </div>\n                        </div>\n                    </div>\n                    <!-- /.card-body -->\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-server-perform\"><?php echo langHdl('perform'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    <?php\n                            } else {\n                                ?>\n        <!--\n            <div class=\"mt-4\">\n            <div class=\"alert alert-warning\">\n                <i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('not_yet_implemented'); ?>\n            </div>\n        </div>\n        -->\n    <?php\n                            }\n    ?>\n\n    <!-- Bottom bar -->\n    <div class=\"row hidden item-details-card\">\n        <div class=\"col-12\">\n            <div class=\"card\">\n                    <div class=\"card-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary but-navigate-item but-prev-item hidden\" data-prev-item-id=\"\"></button>\n                        <button type=\"button\" class=\"btn btn-secondary but-navigate-item but-next-item hidden\" data-next-item-id=\"\"></button>\n                        <button type=\"button\" class=\"btn btn-info float-right but-back\"><?php echo langHdl('close'); ?></button>\n                    </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- COPY ITEM FORM -->\n    <div class=\"row hidden form-item-copy form-item-action\">\n        <div class=\"col-12\">\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-copy mr-2\"></i><?php echo langHdl('copy_item'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('new_label'); ?></label>\n                        <input type=\"text\" class=\"form-control form-item-control\" id=\"form-item-copy-new-label\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_destination_folder'); ?></label>\n                        <select class=\"form-control form-item-control select2 no-root\" style=\"width:100%;\" id=\"form-item-copy-destination\"></select>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-copy-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- DELETE ITEM FORM -->\n    <div class=\"row hidden form-item-delete form-item-action\">\n        <div class=\"col-12\">\n\n            <div class=\"card card-warning\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-trash mr-2\"></i><?php echo langHdl('delete_item'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"alert alert-info alert-dismissible\">\n                        <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('warning'); ?></h5>\n                        <?php echo langHdl('delete_item_message'); ?>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-warning\" id=\"form-item-delete-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- SHARE ITEM FORM -->\n    <div class=\"row hidden form-item-share form-item-action\">\n        <div class=\"col-12\">\n            <form id=\"form-item-share\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-share-alt mr-2\"></i><?php echo langHdl('share_item'); ?></h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"callout callout-info\">\n                            <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                            <p><?php echo langHdl('share_item_message'); ?></p>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"form-item-share-email\"><?php echo langHdl('email_address'); ?></label>\n                            <input type=\"email\" class=\"form-control clear-me-val\" id=\"form-item-share-email\" placeholder=\"<?php echo langHdl('enter_email'); ?>\" required>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-share-perform\"><?php echo langHdl('perform'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n\n    <!-- NOTIFY ITEM FORM -->\n    <div class=\"row hidden form-item-notify form-item-action\">\n        <div class=\"col-12\">\n\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-bullhorn mr-2\"></i><?php echo langHdl('notification'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"callout callout-info\">\n                        <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                        <p><?php echo langHdl('notification_message'); ?></p>\n                    </div>\n                    <div class=\"form-group\">\n                        <input type=\"checkbox\" class=\"form-check-input form-item-control flat-blue\" id=\"form-item-notify-checkbox\"><label for=\"form-item-notify-checkbox\" class=\"ml-3\"><?php echo langHdl('notify_on_change'); ?></label>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-notify-perform\"><?php echo langHdl('confirm'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- OTV ITEM FORM -->\n    <div class=\"row hidden form-item-otv form-item-action\">\n        <div class=\"col-12\">\n\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"far fa-eye mr-2\"></i><?php echo langHdl('one_time_view'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"callout callout-info\">\n                        <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                        <p><?php\n                            echo str_replace(\n        ['##otv_expiration_period##', '. '],\n        ['<span class=\"text-bold text-primary\">' . $SETTINGS['otv_expiration_period'] . '</span>', '<br>'],\n        langHdl('otv_message')\n    );\n                            ?></p>\n                    </div>\n\n\n                    <div class=\"form-group\">\n                        <label for=\"form-item-otv-link\"><?php echo langHdl('otv_link'); ?></label>\n                        <div class=\"input-group mb-3\">\n                            <input type=\"text\" class=\"form-control clear-me-val\" id=\"form-item-otv-link\">\n                            <div class=\"input-group-prepend\">\n                                <button type=\"button\" class=\"btn btn-warning btn-copy-clipboard\" id=\"form-item-otv-copy-button\"><?php echo langHdl('copy'); ?></button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('close'); ?></button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- REQUEST ACCESS TO ITEM FORM -->\n    <div class=\"row hidden form-item-request-access form-item-action\">\n        <div class=\"col-12\">\n            <form id=\"form-item-request-access\" class=\"needs-validation\" novalidate onsubmit=\"return false;\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-handshake mr-2\"></i><?php echo langHdl('request_access'); ?></h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <h3 id=\"form-item-request-access-label\" class=\"mb-5\"></h3>\n                        <div class=\"callout callout-info\">\n                            <h5><i class=\"icon fa fa-info mr-2\"></i><?php echo langHdl('information'); ?></h5>\n                            <p><?php echo langHdl('request_access_message'); ?></p>\n                        </div>\n                        <textarea class=\"form-control mt-4\" rows=\"3\" placeholder=\"<?php echo langHdl('request_access_reason'); ?>\" id=\"form-item-request-access-reason\"></textarea>\n                    </div>\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-item-request-access-perform\"><?php echo langHdl('confirm'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n\n    <!-- ADD FOLDER FORM -->\n    <div class=\"row hidden form-folder-add form-folder-action\">\n        <div class=\"col-12\">\n            <form id=\"form-folder-add\" class=\"needs-validation\" novalidate onsubmit=\"return false;\" data-action=\"\">\n                <div class=\"card card-primary\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-plus mr-2\"></i><?php echo langHdl('add_folder'); ?></h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('label'); ?></label>\n                            <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-add-label\" required>\n                        </div>\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('select_folder_parent'); ?></label>\n                            <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-add-parent\" required></select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('complex_asked'); ?></label>\n                            <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-add-complexicity\" required>\n                                <?php\n                                foreach (TP_PW_COMPLEXITY as $key => $value) {\n                                    echo '<option value=\"' . $key . '\">' . $value[1] . '</option>';\n                                }\n                                ?>\n                            </select>\n                        </div>\n                        <!--\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('folder_creation_rights_strategy'); ?></label>\n                            <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-add-rights\" required>\n                                <option value=\"folder_creation_rights_as_user_groups\"><?php echo langHdl('folder_creation_rights_as_user_groups').' ('.langHdl('by_default').')'; ?></option>\n                                <option value=\"folder_creation_rights_as_folder_groups\"><?php echo langHdl('folder_creation_rights_as_folder_groups'); ?></option>\n                            </select>\n                        </div>\n                            -->\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('icon'); ?></label>\n                            <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-add-icon\">\n                            <small class='form-text text-muted'>\n                                <?php echo langHdl('fontawesome_icon_tip'); ?><a href=\"<?php echo FONTAWESOME_URL;?>\" target=\"_blank\"><i class=\"fas fa-external-link-alt ml-1\"></i></a>\n                            </small>\n                        </div>\n                        <div class=\"form-group\">\n                            <label><?php echo langHdl('icon_on_selection'); ?></label>\n                            <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-add-icon-selected\">\n                            <small class='form-text text-muted'>\n                                <?php echo langHdl('fontawesome_icon_tip'); ?><a href=\"<?php echo FONTAWESOME_URL;?>\" target=\"_blank\"><i class=\"fas fa-external-link-alt ml-1\"></i></a>\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"form-folder-add-perform\"><?php echo langHdl('perform'); ?></button>\n                        <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n\n    <!-- DELETE FOLDER FORM -->\n    <div class=\"row hidden form-folder-delete form-folder-action\">\n        <div class=\"col-12\">\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-trash mr-2\"></i><?php echo langHdl('delete_folder'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_folder_to_delete'); ?></label>\n                        <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-delete-selection\" required></select>\n                    </div>\n                    <div class=\"form-check mb-3 alert alert-warning icheck-red\">\n                        <input type=\"checkbox\" class=\"form-check-input form-item-control flat-blue\" id=\"form-folder-confirm-delete\" required>\n                        <label class=\"form-check-label ml-3\" for=\"form-folder-confirm-delete\"><i class=\"fas fa-info fa-lg mr-2\"></i><?php echo langHdl('folder_delete_confirm'); ?></label>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-folder-delete-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- COPY FOLDER FORM -->\n    <div class=\"row hidden form-folder-copy form-folder-action\">\n        <div class=\"col-12\">\n            <div class=\"card card-primary\">\n                <div class=\"card-header\">\n                    <h5><i class=\"fas fa-copy mr-2\"></i><?php echo langHdl('copy_folder'); ?></h5>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('label'); ?></label>\n                        <input type=\"text\" class=\"form-control form-folder-control\" id=\"form-folder-copy-label\" required></select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_source_folder'); ?></label>\n                        <select class=\"form-control form-folder-control select2 no-root\" style=\"width:100%;\" id=\"form-folder-copy-source\" required></select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label><?php echo langHdl('select_destination_folder'); ?></label>\n                        <select class=\"form-control form-folder-control select2\" style=\"width:100%;\" id=\"form-folder-copy-destination\" required>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"form-folder-copy-perform\"><?php echo langHdl('perform'); ?></button>\n                    <button type=\"submit\" class=\"btn btn-default float-right but-back\"><?php echo langHdl('cancel'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- EXPORT FORM -->\n    <div class=\"row hidden form-item-export form-item-action\">\n        <div class=\"col-12\">\n\n        </div>\n    </div>\n\n    <!-- OFFLINE FORM -->\n    <div class=\"row hidden form-item-offline form-item-action\">\n        <div class=\"col-12\">\n\n        </div>\n    </div>\n\n\n    <div class=\"row h-25\" id=\"folders-tree-card\">\n        <div class=\"col-md-5 column-left\">\n            <div class=\"card card-info card-outline\">\n                <div class=\"card-header\">\n                    <div class=\"row justify-content-end\">\n                        <div class=\"col-6\">\n                            <h3 class=\"card-title\"><i class=\"far fa-folder-open mr-2\">\n                                </i><span class=\"\"><?php echo langHdl('folders'); ?></span>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"btn-group float-right\">\n                                <button type=\"button\" class=\"btn btn-info btn-sm dropdown-toggle\" data-toggle=\"dropdown\">\n                                    <i class=\"fas fa-bars\"></i>\n                                    <span class=\"caret\"></span>\n                                </button>\n                                <div class=\"dropdown-menu\">\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"refresh\"><i class=\"fas fa-sync-alt fa-fw mr-2\"></i><?php echo langHdl('refresh'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"expand\"><i class=\"fas fa-expand fa-fw mr-2\"></i><?php echo langHdl('expand'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"collapse\"><i class=\"fas fa-compress fa-fw mr-2\"></i><?php echo langHdl('collapse'); ?></a>\n                                    <div class=\"dropdown-divider\"></div>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"add\"><i class=\"far fa-plus-square fa-fw mr-2\"></i><?php echo langHdl('add'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"edit\"><i class=\"far fa-edit fa-fw mr-2\"></i><?php echo langHdl('edit'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"copy\"><i class=\"far fa-copy fa-fw mr-2\"></i><?php echo langHdl('copy'); ?></a>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"delete\"><i class=\"far fa-trash-alt fa-fw mr-2\"></i><?php echo langHdl('delete'); ?></a>\n                                    <div class=\"dropdown-divider\"></div>\n                                    <a class=\"dropdown-item tp-action\" href=\"#\" data-folder-action=\"\">\n                                        <div class=\"input-group input-group-sm\">\n                                            <input type=\"text\" class=\"form-control\" placeholder=\"<?php echo langHdl('find'); ?>\" id=\"jstree_search\">\n                                            <div class=\"input-group-append\">\n                                                <div class=\"btn btn-primary\">\n                                                    <i class=\"fas fa-search\"></i>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body p-0\" style=\"\">\n                    <!-- FOLDERS PLACE -->\n                    <div id=\"jstree\" style=\"overflow:auto;\"></div>\n                </div>\n            </div><!-- /.card -->\n        </div>\n        <!-- /.col-md-6 -->\n        <div class=\"col-md-7\">\n            <div class=\"card card-primary card-outline\" id=\"items-list-card\">\n                <div class=\"card-header\">\n                    <div class=\"card-title w-100\">\n                        <div class=\"row\">\n                            <div class=\"col\">\n                                <div class=\"btn-group\" id=\"btn-new-item\">\n                                    <button type=\"button\" class=\"btn btn-primary btn-sm tp-action\" data-item-action=\"new\">\n                                        <i class=\"fas fa-plus mr-2\"></i><?php echo langHdl('new_item'); ?>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"col text-right\">\n                                <div class=\"input-group input-group-sm\">\n                                    <input type=\"text\" class=\"form-control\" placeholder=\"<?php echo langHdl('find'); ?>\" id=\"find_items\">\n                                    <div class=\"input-group-append\">\n                                        <div class=\"btn btn-primary\" id=\"find_items_button\">\n                                            <i class=\"fas fa-search\"></i>\n                                        </div>\n                                        <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                            <span class=\"sr-only\">Toggle Dropdown</span>\n                                        </button>\n                                        <div class=\"dropdown-menu\">\n                                            <div class=\"dropdown-item\">\n                                                <input type=\"checkbox\" class=\" mr-2\" id=\"limited-search\">\n                                                <label class=\"form-check-label\" for=\"limited-search\"><?php echo langHdl('limited_search'); ?></label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- /.card-tools -->\n                </div>\n                <!-- /.card-header -->\n                <div class=\"card-body p-1\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-truncated table-hover table-striped\" id=\"table_teampass_items_list\" style=\"width:100%;\">\n                            <tbody id=\"teampass_items_list\"></tbody>\n                        </table>\n                        <!-- /.table -->\n                    </div>\n\n                    <div class=\"form-group row justify-content-md-center\" id=\"info_teampass_items_list\">\n                        <div class=\"alert alert-info text-center col col-10\" role=\"alert\">\n                            <i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('please_select_a_folder'); ?></b>\n                        </div>\n                    </div>\n                    <!-- /.mail-box-messages -->\n                </div>\n                <!-- /.card-body -->\n                <div class=\"card-footer p-0\">\n                </div>\n            </div>\n            <!-- /. box -->\n        </div>\n    </div>\n    <!-- /.col -->\n\n</section>\n<!-- /.content -->\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @file      items.queries.php\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\n\nrequire_once 'SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] === false || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Do checks\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\n\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'items', $SETTINGS) === false) {\n    // Not allowed page\n    echo \"> \".$_SESSION['user_id'].\" < - > \".$_SESSION['key'].\" <\";\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n/*\n * Define Timezone\n*/\nif (isset($SETTINGS['timezone']) === true) {\n    date_default_timezone_set($SETTINGS['timezone']);\n} else {\n    date_default_timezone_set('UTC');\n}\n\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/language/' . $_SESSION['user']['user_language'] . '.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\nrequire_once 'main.functions.php';\n\n// Ensure Complexity levels are translated\nif (defined('TP_PW_COMPLEXITY') === false) {\n    define(\n        'TP_PW_COMPLEXITY',\n        array(\n            TP_PW_STRENGTH_1 => array(TP_PW_STRENGTH_1, langHdl('complex_level1'), 'fas fa-thermometer-empty text-danger'),\n            TP_PW_STRENGTH_2 => array(TP_PW_STRENGTH_2, langHdl('complex_level2'), 'fas fa-thermometer-quarter text-warning'),\n            TP_PW_STRENGTH_3 => array(TP_PW_STRENGTH_3, langHdl('complex_level3'), 'fas fa-thermometer-half text-warning'),\n            TP_PW_STRENGTH_4 => array(TP_PW_STRENGTH_4, langHdl('complex_level4'), 'fas fa-thermometer-three-quarters text-success'),\n            TP_PW_STRENGTH_5 => array(TP_PW_STRENGTH_5, langHdl('complex_level5'), 'fas fa-thermometer-full text-success'),\n        )\n    );\n}\n\n// Load AntiXSS\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-ascii-master/src/voku/helper/ASCII.php';\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-utf8-master/src/voku/helper/UTF8.php';\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n$antiXss = new voku\\helper\\AntiXSS();\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\nif (defined('DB_PASSWD_CLEAR') === false) {\n    define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n}\nDB::$host = DB_HOST;\nDB::$user = DB_USER;\nDB::$password = DB_PASSWD_CLEAR;\nDB::$dbName = DB_NAME;\nDB::$port = DB_PORT;\nDB::$encoding = DB_ENCODING;\nDB::$ssl = DB_SSL;\nDB::$connect_options = DB_CONNECT_OPTIONS;\n\n// Load Tree\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tree/NestedTree/NestedTree.php';\n$tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n\n\n// Prepare POST variables\n$data = [\n    'type' => isset($_POST['type']) === true ? $_POST['type'] : '',\n    'data' => isset($_POST['data']) === true ? $_POST['data'] : '',\n    'key' => isset($_POST['key']) === true ? $_POST['key'] : '',\n    'label' => isset($_POST['label']) === true ? $_POST['label'] : '',\n    'status' => isset($_POST['status']) === true ? $_POST['status'] : '',\n    'cat' => isset($_POST['cat']) === true ? $_POST['cat'] : '',\n    'receipt' => isset($_POST['receipt']) === true ? $_POST['receipt'] : '',\n    'itemId' => isset($_POST['item_id']) === true ? $_POST['item_id'] : '',\n    'folderId' => isset($_POST['folder_id']) === true ? $_POST['folder_id'] : '',\n    'id' => isset($_POST['id']) === true ? $_POST['id'] : '',\n    'destination' => isset($_POST['destination']) === true ? $_POST['destination'] : '',\n    'source' => isset($_POST['source']) === true ? $_POST['source'] : '',\n    'userId' => isset($_POST['user_id']) === true ? $_POST['user_id'] : '',\n    'getType' => isset($_GET['type']) === true ? $_GET['type'] : '',\n    'getTerm' => isset($_GET['term']) === true ? $_GET['term'] : '',\n    'option' => isset($_POST['option']) === true ? $_POST['option'] : '',\n    'fileSuffix' => isset($_POST['file_suffix']) === true ? $_POST['file_suffix'] : '',\n    'context' => isset($_POST['context']) === true ? $_POST['context'] : '',\n    'notifyType' => isset($_POST['notify_type']) === true ? $_POST['notify_type'] : '',\n    'timestamp' => isset($_POST['timestamp']) === true ? $_POST['timestamp'] : '',\n    'itemKey' => isset($_POST['item_key']) === true ? $_POST['item_key'] : '',\n];\n\n$filters = [\n    'type' => 'trim|escape',\n    'data' => 'trim|escape',\n    'key' => 'trim|escape',\n    'label' => 'trim|escape',\n    'status' => 'trim|escape',\n    'cat' => 'trim|escape',\n    'receipt' => 'trim|escape',\n    'itemId' => 'cast:integer',\n    'folderId' => 'cast:integer',\n    'id' => 'cast:integer',\n    'destination' => 'cast:integer',\n    'source' => 'cast:integer',\n    'userId' => 'cast:integer',\n    'getType' => 'trim|escape',\n    'getTerm' => 'trim|escape',\n    'option' => 'trim|escape',\n    'fileSuffix' => 'trim|escape',\n    'context' => 'trim|escape',\n    'notifyType' => 'trim|escape',\n    'timestamp' => 'cast:integer',\n    'itemKey' => 'trim|escape',\n];\n\n$inputData = dataSanitizer(\n    $data,\n    $filters,\n    $SETTINGS['cpassman_dir']\n);\n\n// Do asked action\nswitch ($inputData['type']) {\n    /*\n    * CASE\n    * creating a new ITEM\n    */\n    case 'new_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // init\n        $returnValues = array();\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        if (is_array($dataReceived) === true && count($dataReceived) > 0) {\n            // Prepare variables\n            $post_anyone_can_modify = filter_var($dataReceived['anyone_can_modify'], FILTER_SANITIZE_NUMBER_INT);\n            $post_complexity_level = filter_var($dataReceived['complexity_level'], FILTER_SANITIZE_NUMBER_INT);\n            $post_description = $antiXss->xss_clean($dataReceived['description']);\n            $post_diffusion_list = filter_var_array(\n                $dataReceived['diffusion_list'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_diffusion_list_names = filter_var_array(\n                $dataReceived['diffusion_list_names'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_EMAIL);\n            $post_fields = filter_var_array(\n                $dataReceived['fields'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $inputData['folderId'] = filter_var($dataReceived['folder'], FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_is_personal = filter_var($dataReceived['folder_is_personal'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['label'] = filter_var($dataReceived['label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_login = filter_var($dataReceived['login'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_password = htmlspecialchars_decode($dataReceived['pw']);\n            $post_restricted_to = filter_var(\n                $dataReceived['restricted_to'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_restricted_to = $post_restricted_to !== false ? json_decode($post_restricted_to) : '';\n            $post_restricted_to_roles = filter_var(\n                $dataReceived['restricted_to_roles'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_restricted_to_roles = $post_restricted_to_roles !== false ? json_decode($post_restricted_to_roles) : '';\n            $post_salt_key_set = isset($_SESSION['user']['session_psk']) === true\n                && empty($_SESSION['user']['session_psk']) === false ? '1' : '0';\n            $post_tags = htmlspecialchars_decode($dataReceived['tags']);\n            $post_template_id = filter_var($dataReceived['template_id'], FILTER_SANITIZE_NUMBER_INT);\n            $post_url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_URL);\n            $post_uploaded_file_id = filter_var($dataReceived['uploaded_file_id'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['userId'] = filter_var($dataReceived['user_id'], FILTER_SANITIZE_NUMBER_INT);\n            $post_to_be_deleted_after_date = filter_var($dataReceived['to_be_deleted_after_date'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_to_be_deleted_after_x_views = filter_var($dataReceived['to_be_deleted_after_x_views'], FILTER_SANITIZE_NUMBER_INT);\n            $post_fa_icon = filter_var(($dataReceived['fa_icon']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n            //-> DO A SET OF CHECKS\n            // Perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true\n                && (in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n                || $post_folder_is_personal !== 1)\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Is author authorized to create in this folder\n            if (count($_SESSION['list_folders_limited']) > 0) {\n                if (in_array($inputData['folderId'], array_keys($_SESSION['list_folders_limited'])) === false\n                    && in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n                    && in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n                ) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                        ),\n                        'encode'\n                    );\n                    break;\n                }\n            } else {\n                if (in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                        ),\n                        'encode'\n                    );\n                    break;\n                }\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if (\n                $_SESSION['user_read_only'] === true\n                && in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // is pwd empty?\n            if (\n                empty($post_password) === true\n                && isset($_SESSION['user']['create_item_without_password']) === true\n                && (int) $_SESSION['user']['create_item_without_password'] !== 1\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('password_cannot_be_empty'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Check length\n            if (strlen($post_password) > $SETTINGS['pwd_maximum_length']) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('password_too_long'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Need info in DB\n            // About special settings\n            $dataFolderSettings = DB::queryFirstRow(\n                'SELECT bloquer_creation, bloquer_modification, personal_folder\n                FROM ' . prefixTable('nested_tree') . ' \n                WHERE id = %i',\n                $inputData['folderId']\n            );\n            $itemInfos = [];\n            $itemInfos['personal_folder'] = $dataFolderSettings['personal_folder'];\n            if ((int) $itemInfos['personal_folder'] === 1) {\n                $itemInfos['no_complex_check_on_modification'] = 1;\n                $itemInfos['no_complex_check_on_creation'] = 1;\n            } else {\n                $itemInfos['no_complex_check_on_modification'] = (int) $dataFolderSettings['bloquer_modification'];\n                $itemInfos['no_complex_check_on_creation'] = (int) $dataFolderSettings['bloquer_creation'];\n            }\n\n            // Get folder complexity\n            $folderComplexity = DB::queryfirstrow(\n                'SELECT valeur\n                FROM ' . prefixTable('misc') . '\n                WHERE type = %s AND intitule = %i',\n                'complex',\n                $inputData['folderId']\n            );\n            $itemInfos['requested_folder_complexity'] = $folderComplexity !== null ? (int) $folderComplexity['valeur'] : 0;\n\n            // Check COMPLEXITY\n            if ($post_complexity_level < $itemInfos['requested_folder_complexity'] && $itemInfos['no_complex_check_on_creation'] === 0) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_security_level_not_reached'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // ./ END\n\n            // check if element doesn't already exist\n            $itemExists = 0;\n            $newID = '';\n            $data = DB::queryfirstrow(\n                'SELECT * FROM ' . prefixTable('items') . '\n                WHERE label = %s AND inactif = %i',\n                $inputData['label'],\n                0\n            );\n            $counter = DB::count();\n            if ($counter > 0) {\n                $itemExists = 1;\n            } else {\n                $itemExists = 0;\n            }\n\n            // Manage case where item is personal.\n            // In this case, duplication is allowed\n            if (\n                isset($SETTINGS['duplicate_item']) === true\n                && (int) $SETTINGS['duplicate_item'] === 0\n                && (int) $post_salt_key_set === 1\n                && isset($post_salt_key_set) === true\n                && (int) $post_folder_is_personal === 1\n                && isset($post_folder_is_personal) === true\n            ) {\n                $itemExists = 0;\n            }\n\n            if ((isset($SETTINGS['duplicate_item']) === true\n                    && (int) $SETTINGS['duplicate_item'] === 0\n                    && (int) $itemExists === 0)\n                || (isset($SETTINGS['duplicate_item']) === true\n                    && (int) $SETTINGS['duplicate_item'] === 1)\n            ) {\n                // Handle case where pw is empty\n                // if not allowed then warn user\n                if ((isset($_SESSION['user']['create_item_without_password']) === true\n                        && (int) $_SESSION['user']['create_item_without_password'] !== 1) ||\n                    empty($post_password) === false\n                ) {\n                    // NEW ENCRYPTION\n                    $cryptedStuff = doDataEncryption($post_password);\n                } else {\n                    $cryptedStuff['encrypted'] = '';\n                    $cryptedStuff['objectKey'] = '';\n                }\n\n                $post_password = $cryptedStuff['encrypted'];\n\n                // ADD item\n                DB::insert(\n                    prefixTable('items'),\n                    array(\n                        'label' => $inputData['label'],\n                        'description' => $post_description,\n                        'pw' => $post_password,\n                        'pw_iv' => '',\n                        'email' => $post_email,\n                        'url' => $post_url,\n                        'id_tree' => $inputData['folderId'],\n                        'login' => $post_login,\n                        'inactif' => 0,\n                        'restricted_to' => empty($post_restricted_to) === true ?\n                            '' : (is_array($post_restricted_to) === true ? implode(';', $post_restricted_to) : $post_restricted_to),\n                        'perso' => (isset($post_folder_is_personal) === true && (int) $post_folder_is_personal === 1) ?\n                            1 : 0,\n                        'anyone_can_modify' => (isset($post_anyone_can_modify) === true\n                            && $post_anyone_can_modify === 'on') ? 1 : 0,\n                        'complexity_level' => $post_complexity_level,\n                        'encryption_type' => 'teampass_aes',\n                        'fa_icon' => $post_fa_icon,\n                        'item_key' => uniqidReal(50),\n                        'created_at' => time(),\n                    )\n                );\n                $newID = DB::insertId();\n\n                // Create sharekeys for users\n                storeUsersShareKey(\n                    prefixTable('sharekeys_items'),\n                    (int) $post_folder_is_personal,\n                    (int) $inputData['folderId'],\n                    (int) $newID,\n                    $cryptedStuff['objectKey'],\n                    $SETTINGS\n                );\n\n                // update fields\n                if (\n                    isset($SETTINGS['item_extra_fields']) === true\n                    && (int) $SETTINGS['item_extra_fields'] === 1\n                ) {\n                    foreach ($post_fields as $field) {\n                        if (empty($field['value']) === false) {\n                            // should we encrypt the data\n                            $dataTmp = DB::queryFirstRow(\n                                'SELECT encrypted_data\n                                FROM ' . prefixTable('categories') . '\n                                WHERE id = %i',\n                                $field['id']\n                            );\n\n                            // Should we encrypt the data\n                            if ((int) $dataTmp['encrypted_data'] === 1) {\n                                // Create sharekeys for users\n                                $cryptedStuff = doDataEncryption($field['value']);\n\n                                // Store value\n                                DB::insert(\n                                    prefixTable('categories_items'),\n                                    array(\n                                        'item_id' => $newID,\n                                        'field_id' => $field['id'],\n                                        'data' => $cryptedStuff['encrypted'],\n                                        'data_iv' => '',\n                                        'encryption_type' => TP_ENCRYPTION_NAME,\n                                    )\n                                );\n                                $newBojectId = DB::insertId();\n\n                                // Store key\n                                storeUsersShareKey(\n                                    prefixTable('sharekeys_fields'),\n                                    (int) $post_folder_is_personal,\n                                    (int) $inputData['folderId'],\n                                    (int) $newBojectId,\n                                    $cryptedStuff['objectKey'],\n                                    $SETTINGS\n                                );\n                            } else {\n                                // update value\n                                DB::insert(\n                                    prefixTable('categories_items'),\n                                    array(\n                                        'item_id' => $newID,\n                                        'field_id' => $field['id'],\n                                        'data' => $field['value'],\n                                        'data_iv' => '',\n                                        'encryption_type' => 'not_set',\n                                    )\n                                );\n                            }\n                        }\n                    }\n                }\n\n                // If template enable, is there a main one selected?\n                if (\n                    isset($SETTINGS['item_creation_templates']) === true\n                    && (int) $SETTINGS['item_creation_templates'] === 1\n                    && isset($post_template_id) === true\n                    && empty($post_template_id) === false\n                ) {\n                    DB::queryFirstRow(\n                        'SELECT *\n                        FROM ' . prefixTable('templates') . '\n                        WHERE item_id = %i',\n                        $newID\n                    );\n                    if (DB::count() === 0) {\n                        // store field text\n                        DB::insert(\n                            prefixTable('templates'),\n                            array(\n                                'item_id' => $newID,\n                                'category_id' => $post_template_id,\n                            )\n                        );\n                    } else {\n                        // Delete if empty\n                        if (empty($post_template_id) === true) {\n                            DB::delete(\n                                prefixTable('templates'),\n                                'item_id = %i',\n                                $newID\n                            );\n                        } else {\n                            // Update value\n                            DB::update(\n                                prefixTable('templates'),\n                                array(\n                                    'category_id' => $post_template_id,\n                                ),\n                                'item_id = %i',\n                                $newID\n                            );\n                        }\n                    }\n                }\n\n                // If automatic deletion asked\n                if (\n                    isset($SETTINGS['enable_delete_after_consultation']) === true\n                    && (int) $SETTINGS['enable_delete_after_consultation'] === 1\n                    && is_null($post_to_be_deleted_after_x_views) === false\n                    && is_null($post_to_be_deleted_after_date) === false\n                ) {\n                    if (\n                        empty($post_to_be_deleted_after_date) === false\n                        || $post_to_be_deleted_after_x_views > 0\n                    ) {\n                        // Automatic deletion to be added\n                        DB::insert(\n                            prefixTable('automatic_del'),\n                            array(\n                                'item_id' => $newID,\n                                'del_enabled' => 1,\n                                'del_type' => $post_to_be_deleted_after_x_views > 0 ? 1 : 2, //1 = numeric : 2 = date\n                                'del_value' => $post_to_be_deleted_after_x_views > 0 ? $post_to_be_deleted_after_x_views : dateToStamp($post_to_be_deleted_after_date, $SETTINGS['date_format']),\n                            )\n                        );\n                    }\n                }\n\n                // Get readable list of restriction\n                $listOfRestricted = $oldRestrictionList = '';\n                if (\n                    is_array($post_restricted_to) === true\n                    && count($post_restricted_to) > 0\n                    && isset($SETTINGS['restricted_to']) === true\n                    && (int) $SETTINGS['restricted_to'] === 1\n                ) {\n                    foreach ($post_restricted_to as $userRest) {\n                        if (empty($userRest) === false) {\n                            $dataTmp = DB::queryfirstrow('SELECT login FROM ' . prefixTable('users') . ' WHERE id= %i', $userRest);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['login'];\n                            } else {\n                                $listOfRestricted .= ';' . $dataTmp['login'];\n                            }\n                        }\n                    }\n                }\n                if (\n                    $post_restricted_to !== null\n                    && $data !== null\n                    && $data['restricted_to'] !== $post_restricted_to\n                    && (int) $SETTINGS['restricted_to'] === 1\n                ) {\n                    if (empty($data['restricted_to']) === false) {\n                        foreach (explode(';', $data['restricted_to']) as $userRest) {\n                            if (empty($userRest) === false) {\n                                $dataTmp = DB::queryfirstrow('SELECT login FROM ' . prefixTable('users') . ' WHERE id= ' . $userRest);\n                                if (empty($oldRestrictionList) === true) {\n                                    $oldRestrictionList = $dataTmp['login'];\n                                } else {\n                                    $oldRestrictionList .= ';' . $dataTmp['login'];\n                                }\n                            }\n                        }\n                    }\n                }\n                // Manage retriction_to_roles\n                if (\n                    is_array($post_restricted_to_roles) === true\n                    && count($post_restricted_to_roles) > 0\n                    && isset($SETTINGS['restricted_to_roles']) === true\n                    && (int) $SETTINGS['restricted_to_roles'] === 1\n                ) {\n                    // add roles for item\n                    if (\n                        is_array($post_restricted_to_roles) === true\n                        && count($post_restricted_to_roles) > 0\n                    ) {\n                        foreach ($post_restricted_to_roles as $role) {\n                            if (count($role) > 1) {\n                                $role = $role[1];\n                            } else {\n                                $role = $role[0];\n                            }\n                            DB::insert(\n                                prefixTable('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $inputData['itemId'],\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // log\n                logItems(\n                    $SETTINGS,\n                    (int) $newID,\n                    $inputData['label'],\n                    $_SESSION['user_id'],\n                    'at_creation',\n                    $_SESSION['login']\n                );\n\n                // Add tags\n                $tags = explode(' ', $post_tags);\n                foreach ($tags as $tag) {\n                    if (empty($tag) === false) {\n                        DB::insert(\n                            prefixTable('tags'),\n                            array(\n                                'item_id' => $newID,\n                                'tag' => strtolower($tag),\n                            )\n                        );\n                    }\n                }\n\n                // Check if any files have been added\n                if (empty($post_uploaded_file_id) === false) {\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('files') . '\n                        WHERE id_item = %s',\n                        $post_uploaded_file_id\n                    );\n                    foreach ($rows as $record) {\n                        // update item_id in files table\n                        DB::update(\n                            prefixTable('files'),\n                            array(\n                                'id_item' => $newID,\n                                'confirmed' => 1,\n                            ),\n                            'id=%i',\n                            $record['id']\n                        );\n                    }\n                }\n\n                // Announce by email?\n                if (empty($post_diffusion_list) === false) {\n                    // get links url\n                    if (empty($SETTINGS['email_server_url'])) {\n                        $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                    }\n\n                    // Get path\n                    $path = geItemReadablePath(\n                        (int) $inputData['folderId'],\n                        $label,\n                        $SETTINGS\n                    );\n\n                    // send email\n                    if (is_array($post_diffusion_list) === true && count($post_diffusion_list) > 0) {\n                        $cpt = 0;\n                        foreach ($post_diffusion_list as $emailAddress) {\n                            if (empty($emailAddress) === false) {\n                                prepareSendingEmail(\n                                    langHdl('email_subject_item_updated'),\n                                    str_replace(\n                                        array('#label', '#link'),\n                                            array($path, $SETTINGS['email_server_url'] . '/index.php?page=items&group=' . $inputData['folderId'] . '&id=' . $newID . $txt['email_body3']),\n                                            langHdl('new_item_email_body')\n                                    ),\n                                    $emailAddress,\n                                    $post_diffusion_list_names[$cpt],\n                                    $SETTINGS\n                                );\n                            }\n                            $cpt++;\n                        }\n                    }\n                }\n            } elseif (\n                isset($SETTINGS['duplicate_item']) === true\n                && (int) $SETTINGS['duplicate_item'] === 0\n                && (int) $itemExists === 1\n            ) {\n                // Encrypt data to return\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_item_exists'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Add item to CACHE table if new item has been created\n            if (isset($newID) === true) {\n                updateCacheTable(\n                    'add_value',\n                    $SETTINGS,\n                    (int) $newID\n                );\n            }\n\n            $arrData = array(\n                'error' => false,\n            );\n        } else {\n            // an error appears on JSON format\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('json_error_format'),\n                ),\n                'encode'\n            );\n        }\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $arrData,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * update an ITEM\n    */\n    case 'update_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // init\n        $returnValues = array();\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        if (is_array($dataReceived) === true && count($dataReceived) > 0) {\n            // Prepare variables\n            $itemInfos = array();\n            $inputData['label'] = filter_var($dataReceived['label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_URL);\n            $post_password = $original_pw = htmlspecialchars_decode($dataReceived['pw']);\n            $post_login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n            $post_tags = htmlspecialchars_decode($dataReceived['tags']);\n            $post_email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_EMAIL);\n            $post_template_id = (int) filter_var($dataReceived['template_id'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['itemId'] = (int) filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n            $post_anyone_can_modify = (int) filter_var($dataReceived['anyone_can_modify'], FILTER_SANITIZE_NUMBER_INT);\n            $post_complexity_level = (int) filter_var($dataReceived['complexity_level'], FILTER_SANITIZE_NUMBER_INT);\n            $inputData['folderId'] = (int) filter_var($dataReceived['folder'], FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_is_personal = (int) filter_var($dataReceived['folder_is_personal'], FILTER_SANITIZE_NUMBER_INT);\n            $post_restricted_to = filter_var_array(\n                $dataReceived['restricted_to'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_restricted_to_roles = filter_var_array(\n                $dataReceived['restricted_to_roles'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_diffusion_list = filter_var_array(\n                $dataReceived['diffusion_list'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_diffusion_list_names = filter_var_array(\n                $dataReceived['diffusion_list_names'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            //$post_diffusion_list_names = $post_diffusion_list_names !== false ? json_decode($post_diffusion_list_names) : '';\n            $post_to_be_deleted_after_x_views = filter_var(\n                $dataReceived['to_be_deleted_after_x_views'],\n                FILTER_SANITIZE_NUMBER_INT\n            );\n            $post_to_be_deleted_after_date = filter_var(\n                $dataReceived['to_be_deleted_after_date'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            );\n            $post_fields = (filter_var_array(\n                $dataReceived['fields'],\n                FILTER_SANITIZE_FULL_SPECIAL_CHARS\n            ));\n            $post_description = $antiXss->xss_clean($dataReceived['description']);\n            $post_fa_icon = filter_var(($dataReceived['fa_icon']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n            //-> DO A SET OF CHECKS\n            // Perform a check in case of Read-Only user creating an item in his PF\n            if (\n                $_SESSION['user_read_only'] === true\n                && (in_array($inputData['folderId'], $_SESSION['personal_folders']) === false\n                    || $post_folder_is_personal !== 1)\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_access_this_folder'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            $dataCheck = validateDataFields(prefixTable('items'), $dataReceived);\n            if ($dataCheck['state'] !== true) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_data_not_valid').' - '.langHdl('field').' '.strtoupper($dataCheck['field']).' '.langHdl('exceeds_maximum_length_of').' '.$dataCheck['maxLength'].' ('.$dataCheck['currentLength'].')',\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Check PWD EMPTY\n            if (\n                empty($pw) === true\n                && isset($_SESSION['user']['create_item_without_password']) === true\n                && (int) $_SESSION['user']['create_item_without_password'] !== 1\n            ) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_pw'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Need info in DB\n            // About special settings\n            $dataFolderSettings = DB::queryFirstRow(\n                'SELECT bloquer_creation, bloquer_modification, personal_folder, title\n                FROM ' . prefixTable('nested_tree') . ' \n                WHERE id = %i',\n                $inputData['folderId']\n            );\n            $itemInfos['personal_folder'] = (int) $dataFolderSettings['personal_folder'];\n            if ((int) $itemInfos['personal_folder'] === 1) {\n                $itemInfos['no_complex_check_on_modification'] = 1;\n                $itemInfos['no_complex_check_on_creation'] = 1;\n            } else {\n                $itemInfos['no_complex_check_on_modification'] = (int) $dataFolderSettings['bloquer_modification'];\n                $itemInfos['no_complex_check_on_creation'] = (int) $dataFolderSettings['bloquer_creation'];\n            }\n\n            // Get folder complexity\n            $folderComplexity = DB::queryfirstrow(\n                'SELECT valeur\n                FROM ' . prefixTable('misc') . '\n                WHERE type = %s AND intitule = %i',\n                'complex',\n                $inputData['folderId']\n            );\n            $itemInfos['requested_folder_complexity'] = is_null($folderComplexity) === false ? (int) $folderComplexity['valeur'] : 0;\n            // Check COMPLEXITY\n            if ($post_complexity_level < $itemInfos['requested_folder_complexity'] && $itemInfos['no_complex_check_on_modification'] === 0) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_security_level_not_reached'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Check length\n            if (strlen($post_password) > $SETTINGS['pwd_maximum_length']) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_pw_too_long'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // ./ END\n\n            // Init\n            $arrayOfChanges = array();\n\n            // Get all informations for this item\n            $dataItem = DB::queryfirstrow(\n                'SELECT *\n                FROM ' . prefixTable('items') . ' as i\n                INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n                WHERE i.id=%i AND l.action = %s',\n                $inputData['itemId'],\n                'at_creation'\n            );\n\n            // Does the user has the sharekey\n            //db::debugmode(true);\n            DB::query(\n                'SELECT *\n                FROM ' . prefixTable('sharekeys_items') . '\n                WHERE object_id = %i AND user_id = %s',\n                $inputData['itemId'],\n                $_SESSION['user_id']\n            );\n            if (DB::count() === 0) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n            if (in_array($_SESSION['user_id'], $restrictedTo) === true) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to']) === true) {\n                $restrictionActive = false;\n            }\n\n            if ((in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true\n                    && ((int) $dataItem['perso'] === 0\n                        || ((int) $dataItem['perso'] === 1\n                            //&& (int) $_SESSION['user_id'] === (int) $dataItem['id_user']))\n                        ))\n                    && $restrictionActive === false)\n                || (isset($SETTINGS['anyone_can_modify']) === true\n                    && (int) $SETTINGS['anyone_can_modify'] === 1\n                    && (int) $dataItem['anyone_can_modify'] === 1\n                    && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true\n                        || (int) $_SESSION['is_admin'] === 1)\n                    && $restrictionActive === false)\n                || (null !== $inputData['folderId']\n                    && isset($_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                    && in_array($inputData['id'], $_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                    && $restrictionActive === false)\n            ) {\n                // Get existing values\n                $data = DB::queryfirstrow(\n                    'SELECT i.id as id, i.label as label, i.description as description, i.pw as pw, i.url as url, i.id_tree as id_tree, i.perso as perso, i.login as login, \n                    i.inactif as inactif, i.restricted_to as restricted_to, i.anyone_can_modify as anyone_can_modify, i.email as email, i.notification as notification,\n                    u.login as user_login, u.email as user_email\n                    FROM ' . prefixTable('items') . ' as i\n                    INNER JOIN ' . prefixTable('log_items') . ' as l ON (i.id=l.id_item)\n                    INNER JOIN ' . prefixTable('users') . ' as u ON (u.id=l.id_user)\n                    WHERE i.id=%i',\n                    $inputData['itemId']\n                );\n\n                // Should we log a password change?\n                $userKey = DB::queryFirstRow(\n                    'SELECT share_key\n                    FROM ' . prefixTable('sharekeys_items') . '\n                    WHERE user_id = %i AND object_id = %i',\n                    $_SESSION['user_id'],\n                    $inputData['itemId']\n                );\n                if (DB::count() === 0 || empty($data['pw']) === true) {\n                    // No share key found\n                    $pw = '';\n                } else {\n                    $pw = base64_decode(doDataDecryption(\n                        $data['pw'],\n                        decryptUserObjectKey(\n                            $userKey['share_key'],\n                            $_SESSION['user']['private_key']\n                        )\n                    ));\n                }\n\n                if ($post_password !== $pw) {\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_pw',\n                        TP_ENCRYPTION_NAME\n                    );\n\n                    /*\n                    // send email if asked\n                    if (isKeyExistingAndEqual('enable_email_notification_on_user_pw_change', 1, $SETTINGS) === true) {\n                        prepareSendingEmail(\n                            langHdl('email_subject_item_updated'),\n                            str_replace(\n                                array('#label', '#link'),\n                                    array($path, $SETTINGS['email_server_url'] . '/index.php?page=items&group=' . $inputData['folderId'] . '&id=' . $newID . $txt['email_body3']),\n                                    langHdl('new_item_email_body')\n                            ),\n                            $emailAddress,\n                            $post_diffusion_list_names[$cpt],\n                            $SETTINGS\n                        );\n                    }\n                    */\n                }\n\n                // encrypt PW\n                if ((isset($_SESSION['user']['create_item_without_password']) === true\n                        && (int) $_SESSION['user']['create_item_without_password'] !== 1)\n                    || empty($post_password) === false\n                ) {\n                    //-----\n                    // NEW ENCRYPTION\n                    $cryptedStuff = doDataEncryption($post_password);\n\n                    $encrypted_password = $cryptedStuff['encrypted'];\n\n                    // Create sharekeys for users\n                    storeUsersShareKey(\n                        prefixTable('sharekeys_items'),\n                        (int) $post_folder_is_personal,\n                        (int) $inputData['folderId'],\n                        (int) $inputData['itemId'],\n                        $cryptedStuff['objectKey'],\n                        $SETTINGS\n                    );\n                } else {\n                    $encrypted_password = '';\n                }\n\n                // ---Manage tags\n                // Get list of tags\n                $itemTags = DB::queryFirstColumn(\n                    'SELECT tag\n                    FROM ' . prefixTable('tags') . '\n                    WHERE item_id = %i',\n                    $inputData['itemId']\n                );\n\n                // deleting existing tags for this item\n                DB::delete(\n                    prefixTable('tags'),\n                    'item_id = %i',\n                    $inputData['itemId']\n                );\n\n                // Add new tags\n                $postArrayTags = [];\n                if (empty($post_tags) === false) {\n                    $postArrayTags = explode(' ', $post_tags);\n                    foreach ($postArrayTags as $tag) {\n                        if (empty($tag) === false) {\n                        // save in DB\n                            DB::insert(\n                                prefixTable('tags'),\n                                array(\n                                    'item_id' => $inputData['itemId'],\n                                    'tag' => strtolower($tag),\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // Store LOG\n                if (count(array_diff($postArrayTags, $itemTags)) > 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        'tags'\n                    );\n\n                    // update LOG\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_tag : ' . implode(' ', $itemTags) . ' => ' . $post_tags\n                    );\n                }\n\n                // update item\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'label' => $inputData['label'],\n                        'description' => $post_description,\n                        'pw' => $encrypted_password,\n                        'email' => $post_email,\n                        'login' => $post_login,\n                        'url' => $post_url,\n                        'id_tree' => $inputData['folderId'],\n                        'restricted_to' => empty($post_restricted_to) === true || count($post_restricted_to) === 0 ? '' : implode(';', $post_restricted_to),\n                        'anyone_can_modify' => (int) $post_anyone_can_modify,\n                        'complexity_level' => (int) $post_complexity_level,\n                        'encryption_type' => TP_ENCRYPTION_NAME,\n                        'perso' => in_array($inputData['folderId'], $_SESSION['personal_folders']) === true ? 1 : 0,\n                        'fa_icon' => $post_fa_icon,\n                        'updated_at' => time(),\n                    ),\n                    'id=%i',\n                    $inputData['itemId']\n                );\n\n                // update fields\n                if (\n                    isset($SETTINGS['item_extra_fields']) === true\n                    && (int) $SETTINGS['item_extra_fields'] === 1\n                    && empty($post_fields) === false\n                ) {\n                    foreach ($post_fields as $field) {\n                        if (empty($field['value']) === false) {\n                            $dataTmpCat = DB::queryFirstRow(\n                                'SELECT c.id AS id, c.title AS title, i.data AS data, i.data_iv AS data_iv,\n                                i.encryption_type AS encryption_type, c.encrypted_data AS encrypted_data,\n                                c.masked AS masked, i.id AS field_item_id\n                                FROM ' . prefixTable('categories_items') . ' AS i\n                                INNER JOIN ' . prefixTable('categories') . ' AS c ON (i.field_id=c.id)\n                                WHERE i.field_id = %i AND i.item_id = %i',\n                                $field['id'],\n                                $inputData['itemId']\n                            );\n\n                            // store Field text in DB\n                            if (DB::count() === 0) {\n                                // The data for this foeld doesn't exist\n                                // It has to be added\n\n                                // Perform new query\n                                $dataTmpCat = DB::queryFirstRow(\n                                    'SELECT id, title, encrypted_data, masked\n                                    FROM ' . prefixTable('categories') . '\n                                    WHERE id = %i',\n                                    $field['id']\n                                );\n\n                                // store field text\n                                DB::insert(\n                                    prefixTable('categories_items'),\n                                    array(\n                                        'item_id' => $inputData['itemId'],\n                                        'field_id' => $field['id'],\n                                        'data' => $field['value'],\n                                        'data_iv' => '',\n                                        'encryption_type' => 'not_set',\n                                    )\n                                );\n\n                                $newId = DB::insertId();\n\n                                // Should we encrypt the data\n                                if ((int) $dataTmpCat['encrypted_data'] === 1) {\n                                    $cryptedStuff = doDataEncryption($field['value']);\n\n                                    // Create sharekeys for users\n                                    storeUsersShareKey(\n                                        prefixTable('sharekeys_fields'),\n                                        (int) $post_folder_is_personal,\n                                        (int) $inputData['folderId'],\n                                        (int) $newId,\n                                        $cryptedStuff['objectKey'],\n                                        $SETTINGS\n                                    );\n\n                                    // update value\n                                    DB::update(\n                                        prefixTable('categories_items'),\n                                        array(\n                                            'data' => $cryptedStuff['encrypted'],\n                                            'data_iv' => '',\n                                            'encryption_type' => TP_ENCRYPTION_NAME,\n                                        ),\n                                        'id = %i',\n                                        $newId\n                                    );\n                                } else {\n                                    // update value\n                                    DB::update(\n                                        prefixTable('categories_items'),\n                                        array(\n                                            'data' => $field['value'],\n                                            'data_iv' => '',\n                                            'encryption_type' => 'not_set',\n                                        ),\n                                        'id = %i',\n                                        $newId\n                                    );\n                                }\n\n                                // Store updates performed\n                                array_push(\n                                    $arrayOfChanges,\n                                    $dataTmpCat['title']\n                                );\n\n                                // update LOG\n                                logItems(\n                                    $SETTINGS,\n                                    (int) $inputData['itemId'],\n                                    $inputData['label'],\n                                    $_SESSION['user_id'],\n                                    'at_modification',\n                                    $_SESSION['login'],\n                                    'at_field : ' . $dataTmpCat['title'] . ' : ' . $field['value']\n                                );\n                            } else {\n                                // compare the old and new value\n                                if ($dataTmpCat['encryption_type'] !== 'not_set') {\n                                    // Get user sharekey for this field\n                                    $userKey = DB::queryFirstRow(\n                                        'SELECT share_key\n                                        FROM ' . prefixTable('sharekeys_fields') . '\n                                        WHERE user_id = %i AND object_id = %i',\n                                        $_SESSION['user_id'],\n                                        $dataTmpCat['field_item_id']\n                                    );\n\n                                    // Decrypt the current value\n                                    $oldVal = base64_decode(doDataDecryption(\n                                        $dataTmpCat['data'],\n                                        decryptUserObjectKey(\n                                            $userKey['share_key'],\n                                            $_SESSION['user']['private_key']\n                                        )\n                                    ));\n                                } else {\n                                    $oldVal = $dataTmpCat['data'];\n                                }\n\n                                // Compare both values to see if any change was done\n                                if ($field['value'] !== $oldVal) {\n                                    // The strings are different\n                                    $encrypt = [];\n\n                                    // Should we encrypt the data\n                                    if ((int) $dataTmpCat['encrypted_data'] === 1) {\n                                        $cryptedStuff = doDataEncryption($field['value']);\n                                        $encrypt['string'] = $cryptedStuff['encrypted'];\n                                        $encrypt['type'] = TP_ENCRYPTION_NAME;\n\n                                        // Create sharekeys for users\n                                        storeUsersShareKey(\n                                            prefixTable('sharekeys_fields'),\n                                            (int) $post_folder_is_personal,\n                                            (int) $inputData['folderId'],\n                                            (int) $dataTmpCat['field_item_id'],\n                                            $cryptedStuff['objectKey'],\n                                            $SETTINGS\n                                        );\n                                    } else {\n                                        $encrypt['string'] = $field['value'];\n                                        $encrypt['type'] = 'not_set';\n                                    }\n\n                                    // update value\n                                    DB::update(\n                                        prefixTable('categories_items'),\n                                        array(\n                                            'data' => $encrypt['string'],\n                                            'data_iv' => '',\n                                            'encryption_type' => $encrypt['type'],\n                                        ),\n                                        'item_id = %i AND field_id = %i',\n                                        $inputData['itemId'],\n                                        $field['id']\n                                    );\n\n                                    // Store updates performed\n                                    array_push(\n                                        $arrayOfChanges,\n                                        $dataTmpCat['title']\n                                    );\n\n                                    // update LOG\n                                    logItems(\n                                        $SETTINGS,\n                                        (int) $inputData['itemId'],\n                                        $inputData['label'],\n                                        $_SESSION['user_id'],\n                                        'at_modification',\n                                        $_SESSION['login'],\n                                        'at_field : ' . $dataTmpCat['title'] . ' => ' . $oldVal\n                                    );\n                                }\n                            }\n                        } else {\n                            if (empty($field_data[1]) === true) {\n                                DB::delete(\n                                    prefixTable('categories_items'),\n                                    'item_id = %i AND field_id = %s',\n                                    $inputData['itemId'],\n                                    $field['id']\n                                );\n                            }\n                        }\n                    }\n                }\n\n                // If template enable, is there a main one selected?\n                if (\n                    isset($SETTINGS['item_creation_templates']) === true\n                    && (int) $SETTINGS['item_creation_templates'] === 1\n                    && isset($post_template_id) === true\n                ) {\n                    DB::queryFirstRow(\n                        'SELECT *\n                        FROM ' . prefixTable('templates') . '\n                        WHERE item_id = %i',\n                        $inputData['itemId']\n                    );\n                    if (DB::count() === 0 && empty($post_template_id) === false) {\n                        // store field text\n                        DB::insert(\n                            prefixTable('templates'),\n                            array(\n                                'item_id' => $inputData['itemId'],\n                                'category_id' => $post_template_id,\n                            )\n                        );\n                    } else {\n                        // Delete if empty\n                        if (empty($post_template_id) === true) {\n                            DB::delete(\n                                prefixTable('templates'),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n                        } else {\n                            // Update value\n                            DB::update(\n                                prefixTable('templates'),\n                                array(\n                                    'category_id' => $post_template_id,\n                                ),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n                        }\n                    }\n                }\n\n                // Update automatic deletion - Only by the creator of the Item\n                if (\n                    isset($SETTINGS['enable_delete_after_consultation']) === true\n                    && (int) $SETTINGS['enable_delete_after_consultation'] === 1\n                ) {\n                    // check if elem exists in Table. If not add it or update it.\n                    DB::query(\n                        'SELECT *\n                        FROM ' . prefixTable('automatic_del') . '\n                        WHERE item_id = %i',\n                        $inputData['itemId']\n                    );\n\n                    if (DB::count() === 0) {\n                        // No automatic deletion for this item\n                        if (\n                            empty($post_to_be_deleted_after_date) === false\n                            || (int) $post_to_be_deleted_after_x_views > 0\n                        ) {\n                            // Automatic deletion to be added\n                            DB::insert(\n                                prefixTable('automatic_del'),\n                                array(\n                                    'item_id' => $inputData['itemId'],\n                                    'del_enabled' => 1,\n                                    'del_type' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        1 : 2, //1 = numeric : 2 = date\n                                    'del_value' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        (int) $post_to_be_deleted_after_x_views : dateToStamp($post_to_be_deleted_after_date, $SETTINGS['date_format']),\n                                )\n                            );\n\n                            // Store updates performed\n                            array_push(\n                                $arrayOfChanges,\n                                langHdl('automatic_deletion_engaged') . ': ' . langHdl('enabled')\n                            );\n\n                            // update LOG\n                            logItems(\n                                $SETTINGS,\n                                (int) $inputData['itemId'],\n                                $inputData['label'],\n                                $_SESSION['user_id'],\n                                'at_modification',\n                                $_SESSION['login'],\n                                'at_automatic_del : enabled'\n                            );\n                        }\n                    } else {\n                        // Automatic deletion exists for this item\n                        if (\n                            empty($post_to_be_deleted_after_date) === false\n                            || (int) $post_to_be_deleted_after_x_views > 0\n                        ) {\n                            // Update automatic deletion\n                            DB::update(\n                                prefixTable('automatic_del'),\n                                array(\n                                    'del_type' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        1 : 2, //1 = numeric : 2 = date\n                                    'del_value' => empty($post_to_be_deleted_after_x_views) === false ?\n                                        $post_to_be_deleted_after_x_views : dateToStamp($post_to_be_deleted_after_date, $SETTINGS['date_format']),\n                                ),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n                        } else {\n                            // delete automatic deleteion for this item\n                            DB::delete(\n                                prefixTable('automatic_del'),\n                                'item_id = %i',\n                                $inputData['itemId']\n                            );\n\n                            // Store updates performed\n                            array_push(\n                                $arrayOfChanges,\n                                langHdl('automatic_deletion_engaged') . ': ' . langHdl('disabled')\n                            );\n\n                            // update LOG\n                            logItems(\n                                $SETTINGS,\n                                (int) $inputData['itemId'],\n                                $inputData['label'],\n                                $_SESSION['user_id'],\n                                'at_modification',\n                                $_SESSION['login'],\n                                'at_automatic_del : disabled'\n                            );\n                        }\n                    }\n                }\n\n                // get readable list of restriction\n                $listOfRestricted = $oldRestrictionList = '';\n                $arrayOfUsersRestriction = array();\n                $arrayOfUsersIdRestriction = array();\n                $diffUsersRestiction = array();\n                $diffRolesRestiction = array();\n                if (\n                    is_array($post_restricted_to) === true\n                    && count($post_restricted_to) > 0\n                    && isset($SETTINGS['restricted_to']) === true\n                    && (int) $SETTINGS['restricted_to'] === 1\n                ) {\n                    foreach ($post_restricted_to as $userId) {\n                        if (empty($userId) === false) {\n                            $dataTmp = DB::queryfirstrow(\n                                'SELECT id, name, lastname\n                                FROM ' . prefixTable('users') . '\n                                WHERE id= %i',\n                                $userId\n                            );\n\n                            // Add to array\n                            array_push(\n                                $arrayOfUsersRestriction,\n                                $dataTmp['name'] . ' ' . $dataTmp['lastname']\n                            );\n                            array_push(\n                                $arrayOfUsersIdRestriction,\n                                $dataTmp['id']\n                            );\n                        }\n                    }\n                }\n                if ((int) $SETTINGS['restricted_to'] === 1) {\n                    $diffUsersRestiction = array_diff(\n                        empty($data['restricted_to']) === false ?\n                            explode(';', $data['restricted_to']) : array(),\n                        $arrayOfUsersIdRestriction\n                    );\n                }\n\n                // Manage retriction_to_roles\n                if (\n                    is_array($post_restricted_to_roles) === true\n                    && count($post_restricted_to_roles) > 0\n                    && isset($SETTINGS['restricted_to_roles']) === true\n                    && (int) $SETTINGS['restricted_to_roles'] === 1\n                ) {\n                    // Init\n                    $arrayOfRestrictionRolesOld = array();\n                    $arrayOfRestrictionRoles = array();\n\n                    // get values before deleting them\n                    $rows = DB::query(\n                        'SELECT t.title, t.id AS id\n                        FROM ' . prefixTable('roles_title') . ' as t\n                        INNER JOIN ' . prefixTable('restriction_to_roles') . ' as r ON (t.id=r.role_id)\n                        WHERE r.item_id = %i\n                        ORDER BY t.title ASC',\n                        $inputData['itemId']\n                    );\n                    foreach ($rows as $record) {\n                        // Add to array\n                        array_push(\n                            $arrayOfRestrictionRolesOld,\n                            $record['title']\n                        );\n                    }\n                    // delete previous values\n                    DB::delete(\n                        prefixTable('restriction_to_roles'),\n                        'item_id = %i',\n                        $inputData['itemId']\n                    );\n\n                    // add roles for item\n                    if (\n                        is_array($post_restricted_to_roles) === true\n                        && count($post_restricted_to_roles) > 0\n                    ) {\n                        foreach ($post_restricted_to_roles as $role) {\n                            DB::insert(\n                                prefixTable('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $inputData['itemId'],\n                                )\n                            );\n                            $dataTmp = DB::queryfirstrow(\n                                'SELECT title\n                                FROM ' . prefixTable('roles_title') . '\n                                WHERE id = %i',\n                                $role\n                            );\n\n                            // Add to array\n                            array_push(\n                                $arrayOfRestrictionRoles,\n                                $dataTmp['title']\n                            );\n                        }\n\n                        if ((int) $SETTINGS['restricted_to'] === 1) {\n                            $diffRolesRestiction = array_diff(\n                                $arrayOfRestrictionRoles,\n                                $arrayOfRestrictionRolesOld\n                            );\n                        }\n                    }\n                }\n                // Update CACHE table\n                updateCacheTable('update_value', $SETTINGS, (int) $inputData['itemId']);\n\n                //---- Log all modifications done ----\n\n                // RESTRICTIONS\n                if (count($diffRolesRestiction) > 0 || count($diffUsersRestiction) > 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_restriction')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_restriction : ' . (count($diffUsersRestiction) > 0 ?\n                            implode(', ', $arrayOfUsersRestriction) . (count($diffRolesRestiction) > 0 ? ', ' : '') : '') . (count($diffRolesRestiction) > 0 ? implode(', ', $arrayOfRestrictionRoles) : '')\n                    );\n                }\n\n                // LABEL\n                if ($data['label'] !== $inputData['label']) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_label')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_label : ' . $data['label'] . ' => ' . $inputData['label']\n                    );\n                }\n                // LOGIN\n                if ($data['login'] !== $post_login) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_login')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_login : ' . $data['login'] . ' => ' . $post_login\n                    );\n                }\n                // EMAIL\n                if ($post_email !== null && $data['email'] !== null && strcmp($data['email'], $post_email) !== 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_email')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_email : ' . $data['email'] . ' => ' . $post_email\n                    );\n                }\n                // URL\n                if ($data['url'] !== $post_url && $post_url !== 'http://') {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_url')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_url : ' . $data['url'] . ' => ' . $post_url\n                    );\n                }\n                // DESCRIPTION\n                if (strcmp(md5($data['description']), md5($post_description)) !== 0) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_description')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_description'\n                    );\n                }\n                // FOLDER\n                if ((int) $data['id_tree'] !== (int) $inputData['folderId']) {\n                    // Get name of folders\n                    $dataTmp = DB::query('SELECT title FROM ' . prefixTable('nested_tree') . ' WHERE id IN %li', array($data['id_tree'], $inputData['folderId']));\n\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_category')\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_category : ' . $dataTmp[0]['title'] . ' => ' . $dataTmp[1]['title']\n                    );\n                }\n                // ANYONE_CAN_MODIFY\n                if ((int) $post_anyone_can_modify !== (int) $data['anyone_can_modify']) {\n                    // Store updates performed\n                    array_push(\n                        $arrayOfChanges,\n                        langHdl('at_anyoneconmodify') . ': ' . ((int) $post_anyone_can_modify === 0 ? langHdl('disabled') : langHdl('enabled'))\n                    );\n\n                    // Log\n                    logItems(\n                        $SETTINGS,\n                        (int) $inputData['itemId'],\n                        $inputData['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_anyoneconmodify : ' . ((int) $post_anyone_can_modify === 0 ? 'disabled' : 'enabled')\n                    );\n                }\n\n                // Reload new values\n                $dataItem = DB::queryfirstrow(\n                    'SELECT *\n                    FROM ' . prefixTable('items') . ' as i\n                    INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n                    WHERE i.id = %i AND l.action = %s',\n                    $inputData['itemId'],\n                    'at_creation'\n                );\n                // Reload History\n                $history = '';\n                $rows = DB::query(\n                    'SELECT l.date as date, l.action as action, l.raison as raison, u.login as login\n                    FROM ' . prefixTable('log_items') . ' as l\n                    LEFT JOIN ' . prefixTable('users') . ' as u ON (l.id_user=u.id)\n                    WHERE l.action <> %s AND id_item=%s',\n                    'at_shown',\n                    $inputData['itemId']\n                );\n                foreach ($rows as $record) {\n                    if ($record['raison'] === NULL) continue;\n                    $reason = explode(':', $record['raison']);\n                    if (count($reason) > 0) {\n                        $sentence = date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], (int) $record['date']) . ' - '\n                            . $record['login'] . ' - ' . langHdl($record['action']) . ' - '\n                            . (empty($record['raison']) === false ? (count($reason) > 1 ? langHdl(trim($reason[0])) . ' : ' . $reason[1]\n                                : langHdl(trim($reason[0]))) : '');\n                        if (empty($history)) {\n                            $history = $sentence;\n                        } else {\n                            $history .= '<br />' . $sentence;\n                        }\n                    }\n                }\n\n                // generate 2d key\n                $_SESSION['key_tmp'] = bin2hex(GenerateCryptKey(16, false, true, true, false, true, $SETTINGS));\n\n                // Send email\n                if (is_array($post_diffusion_list) === true && count($post_diffusion_list) > 0) {\n                    $cpt = 0;\n                    foreach ($post_diffusion_list as $emailAddress) {\n                        if (empty($emailAddress) === false) {\n                            prepareSendingEmail(\n                                langHdl('email_subject_item_updated'),\n                                str_replace(\n                                    array('#item_label#', '#item_category#', '#item_id#', '#url#', '#name#', '#lastname#', '#folder_name#'),\n                                    array($inputData['label'], $inputData['folderId'], $inputData['itemId'], $SETTINGS['cpassman_url'], $_SESSION['name'], $_SESSION['lastname'], $dataFolderSettings['title']),\n                                    langHdl('email_body_item_updated')\n                                ),\n                                $emailAddress,\n                                $post_diffusion_list_names[$cpt],\n                                $SETTINGS\n                            );\n                            $cpt++;\n                        }\n                    }\n                }\n\n                // Notifiy changes to the users\n                notifyChangesToSubscribers($inputData['itemId'], $inputData['label'], $arrayOfChanges, $SETTINGS);\n\n                // Prepare some stuff to return\n                $arrData = array(\n                    'error' => false,\n                    'message' => '',\n                );\n            } else {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to_edit_item'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n        } else {\n            // an error appears on JSON format\n            $arrData = array(\n                'error' => true,\n                'message' => 'ERR_JSON_FORMAT',\n            );\n        }\n        // return data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $arrData,\n            'encode'\n        );\n        break;\n\n        /*\n        * CASE\n        * Copy an Item\n    */\n    case 'copy_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Prepare POST variables\n        $post_new_label = (string) filter_var($dataReceived['new_label'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $post_source_id = (int) filter_var($dataReceived['source_id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_dest_id = (int) filter_var($dataReceived['dest_id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // perform a check in case of Read-Only user creating an item in his PF\n        if (\n            (int) $_SESSION['user_read_only'] === 1\n            && (in_array($post_source_id, $_SESSION['personal_folders']) === false\n                || in_array($post_dest_id, $_SESSION['personal_folders']) === false)\n        ) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Init\n        $returnValues = '';\n        $pw = '';\n        $is_perso = 0;\n\n        if (\n            empty($inputData['itemId']) === false\n            && empty($post_dest_id) === false\n        ) {\n            // load the original record into an array\n            $originalRecord = DB::queryfirstrow(\n                'SELECT * FROM ' . prefixTable('items') . '\n                WHERE id = %i',\n                $inputData['itemId']\n            );\n\n            // Check if the folder where this item is accessible to the user\n            if (in_array($originalRecord['id_tree'], $_SESSION['groupes_visibles']) === false) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Load the destination folder record into an array\n            $dataDestination = DB::queryfirstrow(\n                'SELECT personal_folder FROM ' . prefixTable('nested_tree') . '\n                WHERE id = %i',\n                $post_dest_id\n            );\n\n            // Get the ITEM object key for the user\n            $userKey = DB::queryFirstRow(\n                'SELECT share_key\n                FROM ' . prefixTable('sharekeys_items') . '\n                WHERE user_id = %i AND object_id = %i',\n                $_SESSION['user_id'],\n                $inputData['itemId']\n            );\n            if (DB::count() === 0) {\n                // ERROR - No sharekey found for this item and user\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n\n            // Decrypt / Encrypt the password\n            $cryptedStuff = doDataEncryption(\n                base64_decode(\n                    doDataDecryption(\n                        $originalRecord['pw'],\n                        decryptUserObjectKey(\n                            $userKey['share_key'],\n                            $_SESSION['user']['private_key']\n                        )\n                    )\n                )\n            );\n            // reaffect pw\n            $originalRecord['pw'] = $cryptedStuff['encrypted'];\n\n            // generate the query to update the new record with the previous values\n            $aSet = array();\n            $aSet['created_at'] = time();\n            foreach ($originalRecord as $key => $value) {\n                if ($key === 'id_tree') {\n                    $aSet['id_tree'] = $post_dest_id;\n                } elseif ($key === 'label') {\n                    $aSet[$key] = $post_new_label;\n                } elseif ($key === 'viewed_no') {\n                    $aSet['viewed_no'] = '0';\n                } elseif ($key === 'pw' && empty($pw) === false) {\n                    $aSet['pw'] = $originalRecord['pw'];\n                    $aSet['pw_iv'] = '';\n                } elseif ($key === 'perso') {\n                    $aSet['perso'] = $is_perso;\n                } elseif ($key !== 'id' && $key !== 'key') {\n                    $aSet[$key] = $value;\n                }\n            }\n\n            // insert the new record and get the new auto_increment id\n            DB::insert(\n                prefixTable('items'),\n                $aSet\n            );\n            $newItemId = DB::insertId();\n\n            // Create sharekeys for users of this new ITEM\n            storeUsersShareKey(\n                prefixTable('sharekeys_items'),\n                (int) $dataDestination['personal_folder'],\n                (int) $post_dest_id,\n                (int) $newItemId,\n                $cryptedStuff['objectKey'],\n                $SETTINGS\n            );\n\n            // --------------------\n            // Manage Custom Fields\n            $rows = DB::query(\n                'SELECT *\n                FROM ' . prefixTable('categories_items') . '\n                WHERE item_id = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $field) {\n                // Create the entry for the new item\n\n                // Is the data encrypted\n                if ((int) $field['encryption_type'] === TP_ENCRYPTION_NAME) {\n                    $cryptedStuff = doDataEncryption($field['value']);\n                }\n\n                // store field text\n                DB::insert(\n                    prefixTable('categories_items'),\n                    array(\n                        'item_id' => $newItemId,\n                        'field_id' => $field['field_id'],\n                        'data' => (int) $field['encryption_type'] === TP_ENCRYPTION_NAME ?\n                            $cryptedStuff['encrypted'] : $field['data'],\n                        'data_iv' => '',\n                        'encryption_type' => (int) $field['encryption_type'] === TP_ENCRYPTION_NAME ?\n                            TP_ENCRYPTION_NAME : 'not_set',\n                    )\n                );\n                $newFieldId = DB::insertId();\n\n                // Create sharekeys for users\n                if ((int) $field['encryption_type'] === TP_ENCRYPTION_NAME) {\n                    storeUsersShareKey(\n                        prefixTable('sharekeys_fields'),\n                        (int) $dataDestination['personal_folder'],\n                        (int) $post_dest_id,\n                        (int) $newFieldId,\n                        $cryptedStuff['objectKey'],\n                        $SETTINGS\n                    );\n                }\n            }\n            // <---\n\n            // ------------------\n            // Manage attachments\n\n            // get file key\n            $rows = DB::query(\n                'SELECT f.id AS id, f.file AS file, f.name AS name, f.status AS status, f.extension AS extension,\n                f.size AS size, f.type AS type, s.share_key AS share_key\n                FROM ' . prefixTable('files') . ' AS f\n                INNER JOIN ' . prefixTable('sharekeys_files') . ' AS s ON (f.id = s.object_id)\n                WHERE s.user_id = %i AND f.id_item = %i',\n                $_SESSION['user_id'],\n                $inputData['itemId']\n            );\n            foreach ($rows as $record) {\n                // Check if file still exists\n                if (file_exists($SETTINGS['path_to_upload_folder'] . DIRECTORY_SEPARATOR . TP_FILE_PREFIX . base64_decode($record['file'])) === true) {\n                    // Step1 - decrypt the file\n                    $fileContent = decryptFile(\n                        $record['file'],\n                        $SETTINGS['path_to_upload_folder'],\n                        decryptUserObjectKey($record['share_key'], $_SESSION['user']['private_key'])\n                    );\n\n                    // Step2 - create file\n                    $newFileName = md5(time() . '_' . $record['id']) . '.' . $record['extension'];\n                    $outstream = fopen($SETTINGS['path_to_upload_folder'] . DIRECTORY_SEPARATOR . $newFileName, 'ab');\n                    if ($outstream === false) {\n                        echo prepareExchangedData(\n                            $SETTINGS['cpassman_dir'],\n                            array(\n                                'error' => true,\n                                'message' => langHdl('error_cannot_open_file'),\n                            ),\n                            'encode'\n                        );\n                        break;\n                    }\n                    fwrite(\n                        $outstream,\n                        base64_decode($fileContent)\n                    );\n\n                    // Step3 - encrypt the file\n                    $newFile = encryptFile($newFileName, $SETTINGS['path_to_upload_folder']);\n\n                    // Step4 - store in database\n                    DB::insert(\n                        prefixTable('files'),\n                        array(\n                            'id_item' => $newItemId,\n                            'name' => $record['name'],\n                            'size' => $record['size'],\n                            'extension' => $record['extension'],\n                            'type' => $record['type'],\n                            'file' => $newFile['fileHash'],\n                            'status' => TP_ENCRYPTION_NAME,\n                            'confirmed' => 1,\n                        )\n                    );\n                    $newFileId = DB::insertId();\n\n                    // Step5 - create sharekeys\n                    storeUsersShareKey(\n                        prefixTable('sharekeys_files'),\n                        (int) $dataDestination['personal_folder'],\n                        (int) $post_dest_id,\n                        (int) $newFileId,\n                        $newFile['objectKey'],\n                        $SETTINGS\n                    );\n                }\n            }\n            // <---\n\n            // -------------------------\n            // Add specific restrictions\n            $rows = DB::query('SELECT * FROM ' . prefixTable('restriction_to_roles') . ' WHERE item_id = %i', $inputData['itemId']);\n            foreach ($rows as $record) {\n                DB::insert(\n                    prefixTable('restriction_to_roles'),\n                    array(\n                        'item_id' => $newItemId,\n                        'role_id' => $record['role_id'],\n                    )\n                );\n            }\n\n            // Add Tags\n            $rows = DB::query('SELECT * FROM ' . prefixTable('tags') . ' WHERE item_id = %i', $inputData['itemId']);\n            foreach ($rows as $record) {\n                DB::insert(\n                    prefixTable('tags'),\n                    array(\n                        'item_id' => $newItemId,\n                        'tag' => $record['tag'],\n                    )\n                );\n            }\n\n            // Add this duplicate in logs\n            logItems(\n                $SETTINGS,\n                (int) $newItemId,\n                $originalRecord['label'],\n                $_SESSION['user_id'],\n                'at_creation',\n                $_SESSION['login']\n            );\n            // Add the fact that item has been copied in logs\n            logItems(\n                $SETTINGS,\n                (int) $newItemId,\n                $originalRecord['label'],\n                $_SESSION['user_id'],\n                'at_copy',\n                $_SESSION['login']\n            );\n            // reload cache table\n            include_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n            updateCacheTable('reload', $SETTINGS, null);\n\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => false,\n                    'message' => '',\n                    'new_id' => $newItemId\n                ),\n                'encode'\n            );\n        } else {\n            // no item\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_missing_id'),\n                ),\n                'encode'\n            );\n        }\n        break;\n\n        /*\n        * CASE\n        * Display informations of selected item\n    */\n    case 'show_details_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Step #1\n        $_SESSION['user']['show_step2'] = false;\n\n        // Decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],$inputData['data'],\n            'decode'\n        );\n\n        // Init post variables\n        $inputData['id'] = filter_var(($dataReceived['id']), FILTER_SANITIZE_NUMBER_INT);\n        $inputData['folderId'] = filter_var(($dataReceived['folder_id']), FILTER_SANITIZE_NUMBER_INT);\n        $post_expired_item = filter_var(($dataReceived['expired_item']), FILTER_SANITIZE_NUMBER_INT);\n        $post_restricted = filter_var(($dataReceived['restricted']), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $post_folder_access_level = isset($dataReceived['folder_access_level']) === true ?\n            filter_var(($dataReceived['folder_access_level']), FILTER_SANITIZE_FULL_SPECIAL_CHARS)\n            : '';\n        $post_item_rights = filter_var($dataReceived['rights'], FILTER_SANITIZE_NUMBER_INT);\n\n        $arrData = array();\n        // return ID\n        $arrData['id'] = (int) $inputData['id'];\n        $arrData['id_user'] = API_USER_ID;\n        $arrData['author'] = 'API';\n\n        // Check if item is deleted\n        // taking into account that item can be restored.\n        // so if restoration timestamp is higher than the deletion one\n        // then we can show it\n        $item_deleted = DB::queryFirstRow(\n            'SELECT *\n            FROM ' . prefixTable('log_items') . '\n            WHERE id_item = %i AND action = %s\n            ORDER BY date DESC\n            LIMIT 0, 1',\n            $inputData['id'],\n            'at_delete'\n        );\n        $dataDeleted = DB::count();\n\n        $item_restored = DB::queryFirstRow(\n            'SELECT *\n            FROM ' . prefixTable('log_items') . '\n            WHERE id_item = %i AND action = %s\n            ORDER BY date DESC\n            LIMIT 0, 1',\n            $inputData['id'],\n            'at_restored'\n        );\n\n        if ($dataDeleted !== 0 && intval($item_deleted['date']) > intval($item_restored['date'])) {\n            // This item is deleted => exit\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('not_allowed_to_see_pw'),\n                    'show_detail_option' => 2,\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Get all informations for this item\n        $dataItem = DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('items') . ' as i\n            INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n            WHERE i.id = %i AND l.action = %s',\n            $inputData['id'],\n            'at_creation'\n        );\n\n        // Notification\n        DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('notification') . '\n            WHERE item_id = %i AND user_id = %i',\n            $inputData['id'],\n            $_SESSION['user_id']\n        );\n        if (DB::count() > 0) {\n            $arrData['notification_status'] = true;\n        } else {\n            $arrData['notification_status'] = false;\n        }\n\n        // Get all USERS infos\n        $listeRestriction = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        $_SESSION['listNotificationEmails'] = '';\n\n        /*$user_in_restricted_list_of_item = false;\n        $rows = DB::query(\n            'SELECT id, login, email, admin, name, lastname\n            FROM ' . prefixTable('users') .'\n            WHERE id in %ls',\n            replace(';', ',', $dataItem['restricted_to'])\n        );\n        $listeRestriction = [];\n        foreach ($rows as $user) {\n            // Get auhtor\n            if ($user['id'] === $dataItem['id_user']) {\n                $arrData['author'] = $user['login'];\n                $arrData['author_email'] = $user['email'];\n                $arrData['id_user'] = (int) $dataItem['id_user'];\n            }\n\n            // Get restriction list for users\n            if (in_array($user['id'], $listRest) === true) {\n                array_push($listeRestriction, $user['id']);\n                if ($_SESSION['user_id'] === $user['id']) {\n                    $user_in_restricted_list_of_item = true;\n                }\n            }\n        }*/\n        $user_in_restricted_list_of_item = in_array($_SESSION['user_id'], $listeRestriction) === true ? true : false;\n\n        // manage case of API user\n        if ($dataItem['id_user'] === API_USER_ID) {\n            $arrData['author'] = 'API [' . $dataItem['description'] . ']';\n            $arrData['id_user'] = API_USER_ID;\n            $arrData['author_email'] = '';\n            $arrData['notification_status'] = false;\n        }\n\n        // Get all tags for this item\n        $tags = array();\n        $rows = DB::query(\n            'SELECT tag\n            FROM ' . prefixTable('tags') . '\n            WHERE item_id = %i',\n            $inputData['id']\n        );\n        foreach ($rows as $record) {\n            array_push($tags, $record['tag']);\n        }\n\n        // TODO -> improve this check\n        // check that actual user can access this item\n        $restrictionActive = true;\n        $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        if (\n            in_array($_SESSION['user_id'], $restrictedTo) === true\n            || ((int) $_SESSION['user_manager'] === 1 && (int) $SETTINGS['manager_edit'] === 1)\n        ) {\n            $restrictionActive = false;\n        }\n        if (empty($dataItem['restricted_to']) === true) {\n            $restrictionActive = false;\n        }\n\n        // Check if user has a role that is accepted\n        $rows_tmp = DB::query(\n            'SELECT role_id\n            FROM ' . prefixTable('restriction_to_roles') . '\n            WHERE item_id=%i',\n            $inputData['id']\n        );\n        foreach ($rows_tmp as $rec_tmp) {\n            if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                $restrictionActive = false;\n            }\n        }\n\n        // Uncrypt PW\n        // Get the object key for the user\n        $userKey = DB::queryFirstRow(\n            'SELECT share_key\n            FROM ' . prefixTable('sharekeys_items') . '\n            WHERE user_id = %i AND object_id = %i',\n            $_SESSION['user_id'],\n            $inputData['id']\n        );\n        if (DB::count() === 0 || empty($dataItem['pw']) === true) {\n            // No share key found\n            // Is this a personal and defuse password?\n            if ((int) $dataItem['perso'] === 1 && substr($dataItem['pw'], 0, 3) === 'def') {\n                // Yes, then ask for decryption with old personal salt key\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error'),\n                        'show_detail_option' => 2,\n                        'error_type' => 'private_items_to_encrypt',\n                    ),\n                    'encode'\n                );\n                break;\n            } else {\n                $pw = '';\n            }\n        } else {\n            $decryptedObject = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n            // if null then we have an error.\n            // suspecting bad password\n            if (empty($decryptedObject) === false) {\n                $pw = doDataDecryption(\n                    $dataItem['pw'],\n                    $decryptedObject\n                );\n            } else {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_new_ldap_password_detected'),\n                        'show_detail_option' => 2,\n                        'error_type' => 'inconsistent_password',\n                    ),\n                    'encode'\n                );\n                break;\n            }\n        }\n\n        // echo $dataItem['id_tree'].\" ;; \";\n        //print_r($_SESSION['groupes_visibles']);\n        //echo in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']).' ;; '.$restrictionActive.\" ;; \";\n        // check user is admin\n        if (\n            (int) $_SESSION['user_admin'] === 1\n            && (int) $dataItem['perso'] !== 1\n        ) {\n            $arrData['show_details'] = 0;\n            // ---\n            // ---\n        } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true || (int) $_SESSION['is_admin'] === 1)\n                && ((int) $dataItem['perso'] === 0 || ((int) $dataItem['perso'] === 1 && in_array($dataItem['id_tree'], $_SESSION['personal_folders']) === true))\n                && $restrictionActive === false)\n            || (isset($SETTINGS['anyone_can_modify']) && (int) $SETTINGS['anyone_can_modify'] === 1\n                && (int) $dataItem['anyone_can_modify'] === 1\n                && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || (int) $_SESSION['is_admin'] === 1)\n                && $restrictionActive === false)\n            || (null !== $inputData['folderId']\n                && isset($_SESSION['list_restricted_folders_for_items'][$inputData['folderId']])\n                && in_array($inputData['id'], $_SESSION['list_restricted_folders_for_items'][$inputData['folderId']])\n                && (int) $post_restricted === 1\n                && $user_in_restricted_list_of_item === true)\n            || (isset($SETTINGS['restricted_to_roles']) && (int) $SETTINGS['restricted_to_roles'] === 1\n                && $restrictionActive === false)\n        ) {\n            // Check if actual USER can see this ITEM\n            // Allow show details\n            $arrData['show_details'] = 1;\n\n            // Regarding user's roles, what type of modification is allowed?\n            /*$rows = DB::query(\n                'SELECT r.type\n                FROM '.prefixTable('roles_values').' AS r\n                WHERE r.folder_id = %i AND r.role_id IN %ls',\n                $dataItem['id_tree'],\n                $_SESSION['groupes_visibles']\n            );\n            foreach ($rows as $record) {\n                // TODO\n            }*/\n\n            // Display menu icon for deleting if user is allowed\n            if (\n                (int) $dataItem['id_user'] === (int) $_SESSION['user_id']\n                || (int) $_SESSION['is_admin'] === 1\n                || ((int) $_SESSION['user_manager'] === 1 && (int) $SETTINGS['manager_edit'] === 1)\n                || (int) $dataItem['anyone_can_modify'] === 1\n                || in_array($dataItem['id_tree'], $_SESSION['list_folders_editable_by_role']) === true\n                || in_array($_SESSION['user_id'], $restrictedTo) === true\n                //|| count($restrictedTo) === 0\n                || (int) $post_folder_access_level === 30\n                || (int) $post_item_rights >= 40\n            ) {\n                $arrData['user_can_modify'] = 1;\n                $user_is_allowed_to_modify = true;\n            } else {\n                $arrData['user_can_modify'] = 0;\n                $user_is_allowed_to_modify = false;\n            }\n\n            // Get restriction list for roles\n            $listRestrictionRoles = array();\n            if (isset($SETTINGS['restricted_to_roles']) && (int) $SETTINGS['restricted_to_roles'] === 1) {\n                // Add restriction if item is restricted to roles\n                $rows = DB::query(\n                    'SELECT t.title, t.id\n                    FROM ' . prefixTable('roles_title') . ' AS t\n                    INNER JOIN ' . prefixTable('restriction_to_roles') . ' AS r ON (t.id=r.role_id)\n                    WHERE r.item_id = %i\n                    ORDER BY t.title ASC',\n                    $inputData['id']\n                );\n                foreach ($rows as $record) {\n                    if (!in_array($record['title'], $listRestrictionRoles)) {\n                        array_push($listRestrictionRoles, $record['id']);\n                    }\n                }\n            }\n            // Check if any KB is linked to this item\n            if (isset($SETTINGS['enable_kb']) && (int) $SETTINGS['enable_kb'] === 1) {\n                $tmp = array();\n                $rows = DB::query(\n                    'SELECT k.label, k.id\n                    FROM ' . prefixTable('kb_items') . ' as i\n                    INNER JOIN ' . prefixTable('kb') . ' as k ON (i.kb_id=k.id)\n                    WHERE i.item_id = %i\n                    ORDER BY k.label ASC',\n                    $inputData['id']\n                );\n                foreach ($rows as $record) {\n                    array_push(\n                        $tmp,\n                        array(\n                            'id' => $record['id'],\n                            'label' => $record['label'],\n                        )\n                    );\n                }\n                $arrData['links_to_kbs'] = $tmp;\n            }\n            // Prepare DIalogBox data\n            if ((int) $post_expired_item === 0) {\n                $arrData['show_detail_option'] = 0;\n            } elseif ($user_is_allowed_to_modify === true && (int) $post_expired_item === 1) {\n                $arrData['show_detail_option'] = 1;\n            } else {\n                $arrData['show_detail_option'] = 2;\n            }\n\n            $arrData['label'] = htmlspecialchars_decode($dataItem['label'], ENT_QUOTES);\n            $arrData['pw'] = $pw;\n            $arrData['email'] = empty($dataItem['email']) === true || $dataItem['email'] === null ? '' : $dataItem['email'];\n            $arrData['url'] = empty($dataItem['url']) === true ? '' : '<a href=\"'.$dataItem['url'].'\" target=\"_blank\">'.$dataItem['url'].'</a>';\n            $arrData['folder'] = $dataItem['id_tree'];\n\n            $arrData['description'] = $dataItem['description'];\n            $arrData['login'] = htmlspecialchars_decode(str_replace(array('\"'), array('&quot;'), $dataItem['login']), ENT_QUOTES);\n            $arrData['id_restricted_to'] = $listeRestriction;\n            $arrData['id_restricted_to_roles'] = $listRestrictionRoles;\n            $arrData['tags'] = $tags;\n            $arrData['folder'] = (int) $dataItem['id_tree'];\n            $arrData['fa_icon'] = $dataItem['fa_icon'];\n            $arrData['item_key'] = $dataItem['item_key'];\n\n            if (\n                isset($SETTINGS['enable_server_password_change'])\n                && (int) $SETTINGS['enable_server_password_change'] === 1\n            ) {\n                $arrData['auto_update_pwd_frequency'] = $dataItem['auto_update_pwd_frequency'];\n            } else {\n                $arrData['auto_update_pwd_frequency'] = '0';\n            }\n\n            $arrData['anyone_can_modify'] = (int) $dataItem['anyone_can_modify'];\n\n            // Add the fact that item has been viewed in logs\n            if (isset($SETTINGS['log_accessed']) && (int) $SETTINGS['log_accessed'] === 1) {\n                logItems(\n                    $SETTINGS,\n                    (int) $inputData['id'],\n                    $dataItem['label'],\n                    (int) $_SESSION['user_id'],\n                    'at_shown',\n                    $_SESSION['login']\n                );\n            }\n\n            // statistics\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'viewed_no' => $dataItem['viewed_no'] + 1,\n                    'updated_at' => time(),\n                ),\n                'id = %i',\n                $inputData['id']\n            );\n            $arrData['viewed_no'] = $dataItem['viewed_no'] + 1;\n\n            // get fields\n            $fieldsTmp = array();\n            $arrCatList = $template_id = '';\n            if (isset($SETTINGS['item_extra_fields']) && (int) $SETTINGS['item_extra_fields'] === 1) {\n                // get list of associated Categories\n                $arrCatList = array();\n                $rows_tmp = DB::query(\n                    'SELECT id_category\n                    FROM ' . prefixTable('categories_folders') . '\n                    WHERE id_folder=%i',\n                    $inputData['folderId']\n                );\n                \n                if (DB::count() > 0) {\n                    foreach ($rows_tmp as $row) {\n                        array_push($arrCatList, (int) $row['id_category']);\n                    }\n\n                    // get fields for this Item\n                    $rows_tmp = DB::query(\n                        'SELECT i.id AS id, i.field_id AS field_id, i.data AS data, i.item_id AS item_id,\n                        i.encryption_type AS encryption_type, c.encrypted_data, c.parent_id AS parent_id,\n                        c.type as field_type, c.masked AS field_masked, c.role_visibility AS role_visibility\n                        FROM ' . prefixTable('categories_items') . ' AS i\n                        INNER JOIN ' . prefixTable('categories') . ' AS c ON (i.field_id=c.id)\n                        WHERE i.item_id=%i AND c.parent_id IN %ls',\n                        $inputData['id'],\n                        $arrCatList\n                    );\n                    foreach ($rows_tmp as $row) {\n                        // Uncrypt data\n                        // Get the object key for the user\n                        //db::debugmode(true);\n                        $userKey = DB::queryFirstRow(\n                            'SELECT share_key\n                            FROM ' . prefixTable('sharekeys_fields') . '\n                            WHERE user_id = %i AND object_id = %i',\n                            $_SESSION['user_id'],\n                            $row['id']\n                        );\n                        //db::debugmode(false);\n                        $fieldText = [];\n                        if (DB::count() === 0) {\n                            // Not encrypted\n                            $fieldText['string'] = $row['data'];\n                            $fieldText['encrypted'] = false;\n                        } else {\n                            $fieldText['string'] = doDataDecryption(\n                                $row['data'],\n                                decryptUserObjectKey(\n                                    $userKey['share_key'],\n                                    $_SESSION['user']['private_key']\n                                )\n                            );\n                            $fieldText['encrypted'] = true;\n                        }\n\n                        // Manage textarea string\n                        if ($row['field_type'] === 'textarea') {\n                            $fieldText = $fieldText;\n                        }\n\n                        // build returned list of Fields text\n                        array_push(\n                            $fieldsTmp,\n                            array(\n                                'id' => (int) $row['field_id'],\n                                'value' => $fieldText['string'],\n                                'encrypted' => (int) $fieldText['encrypted'],\n                                'parent_id' => (int) $row['parent_id'],\n                                'type' => $row['field_type'],\n                                'masked' => (int) $row['field_masked'],\n                            )\n                        );\n                    }\n                }\n            }\n\n            // Now get the selected template (if exists)\n            if (isset($SETTINGS['item_creation_templates']) && (int) $SETTINGS['item_creation_templates'] === 1) {\n                $rows_tmp = DB::queryfirstrow(\n                    'SELECT category_id\n                    FROM ' . prefixTable('templates') . '\n                    WHERE item_id = %i',\n                    $inputData['id']\n                );\n                if (DB::count() > 0) {\n                    $template_id = $rows_tmp['category_id'];\n                }\n            }\n            //}\n            $arrData['fields'] = $fieldsTmp;\n            $arrData['categories'] = $arrCatList;\n            $arrData['template_id'] = (int) $template_id;\n            $arrData['to_be_deleted'] = '';\n\n            // Manage user restriction\n            if (null !== $post_restricted) {\n                $arrData['restricted'] = $post_restricted;\n            } else {\n                $arrData['restricted'] = '';\n            }\n            // Decrement the number before being deleted\n            if (isset($SETTINGS['enable_delete_after_consultation']) && (int) $SETTINGS['enable_delete_after_consultation'] === 1) {\n                // Is the Item to be deleted?\n                $dataDelete = DB::queryfirstrow(\n                    'SELECT * \n                    FROM ' . prefixTable('automatic_del') . '\n                    WHERE item_id = %i',\n                    $inputData['id']\n                );\n                if (DB::count() > 0) {\n                    $arrData['to_be_deleted'] = $dataDelete['del_value'];\n                    $arrData['to_be_deleted_type'] = (int) $dataDelete['del_type'];\n                }\n\n                // Now delete if required\n                if ($dataDelete !== null && ((int) $dataDelete['del_enabled'] === 1\n                    || intval($arrData['id_user']) !== intval($_SESSION['user_id'])))\n                {\n                    if ((int) $dataDelete['del_type'] === 1 && $dataDelete['del_value'] >= 1) {\n                        // decrease counter\n                        DB::update(\n                            prefixTable('automatic_del'),\n                            array(\n                                'del_value' => $dataDelete['del_value'] - 1,\n                            ),\n                            'item_id = %i',\n                            $inputData['id']\n                        );\n                        // store value\n                        $arrData['to_be_deleted'] = $dataDelete['del_value'] - 1;\n                    } elseif (\n                        (int) $dataDelete['del_type'] === 1\n                        && $dataDelete['del_value'] <= 1\n                        || (int) $dataDelete['del_type'] === 2\n                        && $dataDelete['del_value'] < time()\n                    ) {\n                        $arrData['show_details'] = 0;\n                        // delete item\n                        DB::delete(prefixTable('automatic_del'), 'item_id = %i', $inputData['id']);\n                        // make inactive object\n                        DB::update(\n                            prefixTable('items'),\n                            array(\n                                'inactif' => 1,\n                                'deleted_at' => time(),\n                            ),\n                            'id = %i',\n                            $inputData['id']\n                        );\n\n                        // log\n                        logItems(\n                            $SETTINGS,\n                            (int) $inputData['id'],\n                            $dataItem['label'],\n                            (int) $_SESSION['user_id'],\n                            'at_delete',\n                            $_SESSION['login'],\n                            'at_automatically_deleted'\n                        );\n\n                        // Update cache table\n                        updateCacheTable(\n                            'delete_value',\n                            $SETTINGS,\n                            (int) $inputData['id']\n                        );\n\n                        $arrData['show_detail_option'] = 1;\n                        $arrData['to_be_deleted'] = 0;\n                    } elseif ($dataDelete['del_type'] === '2') {\n                        $arrData['to_be_deleted'] = date($SETTINGS['date_format'], (int) $dataDelete['del_value']);\n                    }\n                } else {\n                    $arrData['to_be_deleted'] = '';\n                }\n            } else {\n                $arrData['to_be_deleted'] = langHdl('no');\n            }\n            // ---\n            // ---\n        } else {\n            $arrData['show_details'] = 0;\n            // get readable list of restriction\n            $listOfRestricted = '';\n            if (empty($dataItem['restricted_to']) === false) {\n                foreach (explode(';', $dataItem['restricted_to']) as $userRest) {\n                    if (empty($userRest) === false) {\n                        $dataTmp = DB::queryfirstrow('SELECT login FROM ' . prefixTable('users') . ' WHERE id= ' . $userRest);\n                        if (empty($listOfRestricted)) {\n                            $listOfRestricted = $dataTmp['login'];\n                        } else {\n                            $listOfRestricted .= ';' . $dataTmp['login'];\n                        }\n                    }\n                }\n            }\n            $arrData['restricted_to'] = $listOfRestricted;\n            $arrData['notification_list'] = '';\n            $arrData['notification_status'] = '';\n        }\n\n        // Set a timestamp\n        $arrData['timestamp'] = time();\n\n        // Set temporary session variable to allow step2\n        $_SESSION['user']['show_step2'] = true;\n\n        // Error\n        $arrData['error'] = '';\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $arrData, \n            'encode'\n        );\n        break;\n\n        /*\n        * CASE\n        * Display History of the selected Item\n    */\n    case 'showDetailsStep2':\n        // Is this query expected (must be run after a step1 and not standalone)\n        if ($_SESSION['user']['show_step2'] !== true) {\n            // Check KEY and rights\n            if ($inputData['key'] !== $_SESSION['key']) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('key_is_not_correct'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n            if ($_SESSION['user_read_only'] === true) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    ),\n                    'encode'\n                );\n                break;\n            }\n        }\n        $returnArray = array();\n\n        // Load item data\n        $dataItem = DB::queryFirstRow(\n            'SELECT i.*, n.title AS folder_title\n            FROM ' . prefixTable('items') . ' AS i\n            INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (i.id_tree = n.id)\n            WHERE i.id = %i',\n            $inputData['id']\n        );\n\n        // check that actual user can access this item\n        $restrictionActive = true;\n        $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        if (\n            in_array($_SESSION['user_id'], $restrictedTo)\n            || (((int) $_SESSION['user_manager'] === 1 || (int) $_SESSION['user_can_manage_all_users'] === 1)\n                && (int) $SETTINGS['manager_edit'] === 1)\n        ) {\n            $restrictionActive = false;\n        }\n        if (empty($dataItem['restricted_to'])) {\n            $restrictionActive = false;\n        }\n\n        // Check if user has a role that is accepted\n        $rows_tmp = DB::query(\n            'SELECT role_id\n            FROM ' . prefixTable('restriction_to_roles') . '\n            WHERE item_id=%i',\n            $inputData['id']\n        );\n        foreach ($rows_tmp as $rec_tmp) {\n            if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                $restrictionActive = false;\n            }\n        }\n\n        // check user is admin\n        if (\n            (int) $_SESSION['is_admin'] === 1\n            && (int) $dataItem['perso'] === 0\n        ) {\n            $returnArray['show_details'] = 0;\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $returnArray,\n                'encode'\n            );\n        // Check if actual USER can see this ITEM\n        } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) === true || (int) $_SESSION['is_admin'] === 1)\n                && ((int) $dataItem['perso'] === 0 || ((int) $dataItem['perso'] === 1 && in_array($dataItem['id_tree'], $_SESSION['personal_folders']) === true))\n                && $restrictionActive === false) === true\n            || (isset($SETTINGS['anyone_can_modify']) === true && (int) $SETTINGS['anyone_can_modify'] === 1\n                && (int) (int) $dataItem['anyone_can_modify'] === 1\n                && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || (int) $_SESSION['is_admin'] === 1)\n                && $restrictionActive === false) === true\n            || (null !== $inputData['folderId']\n                && isset($_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                && in_array($inputData['id'], $_SESSION['list_restricted_folders_for_items'][$inputData['folderId']]) === true\n                && (int) $post_restricted === 1\n                && $user_in_restricted_list_of_item === true) === true\n            || (isset($SETTINGS['restricted_to_roles']) === true && (int) $SETTINGS['restricted_to_roles'] === 1\n                && $restrictionActive === false) === true\n        ) {\n            // generate 2d key\n            $_SESSION['key_tmp'] = bin2hex(GenerateCryptKey(16, false, true, true, false, true, $SETTINGS));\n\n            // Prepare files listing\n            $attachments = array();\n            \n            // launch query\n            $rows = DB::query(\n                'SELECT id, name, file, extension, size\n                FROM ' . prefixTable('files') . '\n                WHERE id_item = %i AND confirmed = 1',\n                $inputData['id']\n            );\n            foreach ($rows as $record) {\n                array_push(\n                    $attachments,\n                    array(\n                        'icon' => fileFormatImage(strtolower($record['extension'])),\n                        'filename' => basename($record['name'], '.' . $record['extension']),\n                        'extension' => $record['extension'],\n                        'size' => formatSizeUnits((int) $record['size']),\n                        'is_image' => in_array(strtolower($record['extension']), TP_IMAGE_FILE_EXT) === true ? 1 : 0,\n                        'id' => $record['id'],\n                        'key' => $_SESSION['key_tmp'],\n                    )\n                );\n            }\n            $returnArray['attachments'] = $attachments;\n\n            // disable add bookmark if alread bookmarked\n            $returnArray['favourite'] = in_array($inputData['id'], $_SESSION['favourites']) === true ? 1 : 0;\n\n            // Add this item to the latests list\n            if (isset($_SESSION['latest_items']) && isset($SETTINGS['max_latest_items']) && !in_array($dataItem['id'], $_SESSION['latest_items'])) {\n                if (count($_SESSION['latest_items']) >= $SETTINGS['max_latest_items']) {\n                    array_pop($_SESSION['latest_items']); //delete last items\n                }\n                array_unshift($_SESSION['latest_items'], $dataItem['id']);\n                // update DB\n                DB::update(\n                    prefixTable('users'),\n                    array(\n                        'latest_items' => implode(';', $_SESSION['latest_items']),\n                    ),\n                    'id=' . $_SESSION['user_id']\n                );\n            }\n\n            // get list of roles\n            $listOptionsForUsers = array();\n            $listOptionsForRoles = array();\n            $rows = DB::query(\n                'SELECT r.role_id AS role_id, t.title AS title\n                FROM ' . prefixTable('roles_values') . ' AS r\n                INNER JOIN ' . prefixTable('roles_title') . ' AS t ON (r.role_id = t.id)\n                WHERE r.folder_id = %i',\n                $dataItem['id_tree']\n            );\n            foreach ($rows as $record) {\n                array_push(\n                    $listOptionsForRoles,\n                    array(\n                        'id' => (int) $record['role_id'],\n                        'title' => $record['title'],\n                    )\n                );\n                $rows2 = DB::query(\n                    'SELECT id, login, fonction_id, email, name, lastname\n                    FROM ' . prefixTable('users') . '\n                    WHERE fonction_id LIKE %s',\n                    '%' . $record['role_id'] . '%'\n                );\n                foreach ($rows2 as $record2) {\n                    foreach (explode(';', $record2['fonction_id']) as $role) {\n                        if (\n                            array_search($record2['id'], array_column($listOptionsForUsers, 'id')) === false\n                            && $role === $record['role_id']\n                        ) {\n                            array_push(\n                                $listOptionsForUsers,\n                                array(\n                                    'id' => (int) $record2['id'],\n                                    'login' => $record2['login'],\n                                    'name' => $record2['name'] . ' ' . $record2['lastname'],\n                                    'email' => $record2['email'],\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n\n            $returnArray['users_list'] = $listOptionsForUsers;\n            $returnArray['roles_list'] = $listOptionsForRoles;\n\n            // send notification if enabled\n            if (isset($SETTINGS['enable_email_notification_on_item_shown']) === true && (int) $SETTINGS['enable_email_notification_on_item_shown'] === 1) {\n                // Get path\n                $arbo = $tree->getPath($dataItem['id_tree'], true);\n                $path = '';\n                foreach ($arbo as $elem) {\n                    if (empty($path) === true) {\n                        $path = htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES) . ' ';\n                    } else {\n                        $path .= '&#8594; ' . htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n                    }\n                }\n                // Build text to show user\n                if (empty($path) === true) {\n                    $path = addslashes($dataItem['label']);\n                } else {\n                    $path = addslashes($dataItem['label']) . ' (' . $path . ')';\n                }\n\n                // Add Admins to notification list if expected\n                $reveivers = [];\n                $rows = DB::query(\n                    'SELECT email\n                    FROM ' . prefixTable('users').'\n                    WHERE admin = %i',\n                    1\n                );\n                foreach ($rows as $user) {\n                    array_push($reveivers, $user['email']);\n                }\n\n                // prepare sending email\n                prepareSendingEmail(\n                    langHdl('email_on_open_notification_subject'),\n                    str_replace(\n                        array('#tp_user#', '#tp_item#', '#tp_link#'),\n                        array(\n                            addslashes($_SESSION['login']),\n                            $path,\n                            $SETTINGS['cpassman_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $dataItem['id'],\n                        ),\n                        langHdl('email_on_open_notification_mail')\n                    ),\n                    implode(\",\", $reveivers),\n                    \"\",\n                    $SETTINGS\n                );\n            }\n\n            // has this item a change proposal\n            DB::query('SELECT * FROM ' . prefixTable('items_change') . ' WHERE item_id = %i', $inputData['id']);\n            $returnArray['has_change_proposal'] = DB::count();\n\n            // Setting\n            $returnArray['setting_restricted_to_roles'] = isset($SETTINGS['restricted_to_roles']) === true\n                && (int) $SETTINGS['restricted_to_roles'] === 1 ? 1 : 0;\n\n            $_SESSION['user']['show_step2'] = false;\n            \n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $returnArray,\n                'encode'\n            );\n        } else {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $returnArray,\n                'encode'\n            );\n        }\n        break;\n\n        /*\n        * CASE\n        * Delete an item\n    */\n    case 'delete_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Prepare POST variables\n        $inputData['folderId'] = (int) filter_var($dataReceived['folder_id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_access_level = (int) filter_var($dataReceived['access_level'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Check that user can access this item\n        $granted = accessToItemIsGranted($inputData['itemId'], $SETTINGS);\n        if ($granted !== true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => $granted,\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Load item data\n        $data = DB::queryFirstRow(\n            'SELECT id_tree\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $inputData['itemId']\n        );\n\n        // delete item consists in disabling it\n        DB::update(\n            prefixTable('items'),\n            array(\n                'inactif' => '1',\n                'deleted_at' => time(),\n            ),\n            'id = %i',\n            $inputData['itemId']\n        );\n\n        // log\n        logItems(\n            $SETTINGS,\n            (int) $inputData['itemId'],\n            $inputData['label'],\n            $_SESSION['user_id'],\n            'at_delete',\n            $_SESSION['login']\n        );\n        // Update CACHE table\n        updateCacheTable('delete_value', $SETTINGS, (int) $inputData['itemId']);\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * Update a Group\n    */\n    case 'update_folder':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n$SETTINGS['cpassman_dir'],$inputData['data'], 'decode');\n\n        // Prepare variables\n        $title = filter_var(htmlspecialchars_decode($dataReceived['title'], ENT_QUOTES), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['folderId'] = filter_var(htmlspecialchars_decode($dataReceived['folder']), FILTER_SANITIZE_NUMBER_INT);\n\n        // Check if user is allowed to access this folder\n        if (!in_array($inputData['folderId'], $_SESSION['groupes_visibles'])) {\n            echo '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            break;\n        }\n\n        // Check if title doesn't contains html codes\n        if (preg_match_all('|<[^>]+>(.*)</[^>]+>|U', $title, $out)) {\n            echo '[ { \"error\" : \"' . langHdl('error_html_codes') . '\" } ]';\n            break;\n        }\n        // check that title is not numeric\n        if (is_numeric($title) === true) {\n            echo '[{\"error\" : \"ERR_TITLE_ONLY_WITH_NUMBERS\"}]';\n            break;\n        }\n\n        // Check if duplicate folders name are allowed\n        if (isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] === '0') {\n            $data = DB::queryFirstRow('SELECT id, title FROM ' . prefixTable('nested_tree') . ' WHERE title = %s', $title);\n            if (empty($data['id']) === false && $dataReceived['folder'] !== $data['id']) {\n                echo '[ { \"error\" : \"' . langHdl('error_group_exist') . '\" } ]';\n                break;\n            }\n        }\n\n        // query on folder\n        $data = DB::queryfirstrow(\n            'SELECT parent_id, personal_folder\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $inputData['folderId']\n        );\n\n        // check if complexity level is good\n        // if manager or admin don't care\n        if ($_SESSION['is_admin'] !== 1 && $_SESSION['user_manager'] !== 1 && $data['personal_folder'] === '0') {\n            $data = DB::queryfirstrow(\n                'SELECT valeur\n                FROM ' . prefixTable('misc') . '\n                WHERE intitule = %i AND type = %s',\n                $data['parent_id'],\n                'complex'\n            );\n            if (intval($dataReceived['complexity']) < intval($data['valeur'])) {\n                echo '[ { \"error\" : \"' . langHdl('error_folder_complexity_lower_than_top_folder') . ' [<b>' . TP_PW_COMPLEXITY[$data['valeur']][1] . '</b>]\"} ]';\n                break;\n            }\n        }\n\n        // update Folders table\n        $tmp = DB::queryFirstRow(\n            'SELECT title, parent_id, personal_folder FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n            $dataReceived['folder']\n        );\n        if ($tmp['parent_id'] !== 0 || $tmp['title'] !== $_SESSION['user_id'] || $tmp['personal_folder'] !== 1) {\n            DB::update(\n                prefixTable('nested_tree'),\n                array(\n                    'title' => $title,\n                ),\n                'id=%s',\n                $inputData['folderId']\n            );\n            // update complixity value\n            DB::update(\n                prefixTable('misc'),\n                array(\n                    'valeur' => $dataReceived['complexity'],\n                ),\n                'intitule = %s AND type = %s',\n                $inputData['folderId'],\n                'complex'\n            );\n            // rebuild fuild tree folder\n            $tree->rebuild();\n        }\n        // send data\n        echo '[{\"error\" : \"\"}]';\n        break;\n\n        /*\n    * CASE\n    * Move a Group including sub-folders\n    */\n    case 'move_folder':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n$SETTINGS['cpassman_dir'],$inputData['data'], 'decode');\n        $post_source_folder_id = filter_var(htmlspecialchars_decode($dataReceived['source_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n        $post_target_folder_id = filter_var(htmlspecialchars_decode($dataReceived['target_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n\n        // Check that user can access this folder\n        if ((in_array($post_source_folder_id, $_SESSION['groupes_visibles']) === false ||\n                in_array($post_target_folder_id, $_SESSION['groupes_visibles']) === false) && ($post_target_folder_id === '0' &&\n                isset($SETTINGS['can_create_root_folder']) === true && (int) $SETTINGS['can_create_root_folder'] === 1)\n        ) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        $tmp_source = DB::queryFirstRow(\n            'SELECT title, parent_id, personal_folder\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $post_source_folder_id\n        );\n\n        $tmp_target = DB::queryFirstRow(\n            'SELECT title, parent_id, personal_folder\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $post_target_folder_id\n        );\n\n        // check if target is not a child of source\n        if ($tree->isChildOf($post_target_folder_id, $post_source_folder_id) === true) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        // check if source or target folder is PF. If Yes, then cancel operation\n        if ((int) $tmp_source['personal_folder'] === 1 || (int) $tmp_target['personal_folder'] === 1) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        // check if source or target folder is PF. If Yes, then cancel operation\n        if ($tmp_source['title'] === $_SESSION['user_id'] || $tmp_target['title'] === $_SESSION['user_id']) {\n            $returnValues = '[{\"error\" : \"' . langHdl('error_not_allowed_to') . '\"}]';\n            echo $returnValues;\n            break;\n        }\n\n        // moving SOURCE folder\n        DB::update(\n            prefixTable('nested_tree'),\n            array(\n                'parent_id' => $post_target_folder_id,\n            ),\n            'id=%s',\n            $post_source_folder_id\n        );\n        $tree->rebuild();\n\n        // send data\n        echo '[{\"error\" : \"\"}]';\n        break;\n\n        /*\n    * CASE\n    * Store hierarchic position of Group\n    */\n    case 'save_position':\n        DB::update(\n            prefixTable('nested_tree'),\n            array(\n                'parent_id' => $inputData['destination'],\n            ),\n            'id = %i',\n            $inputData['source']\n        );\n        $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n        $tree->rebuild();\n        break;\n\n        /*\n    * CASE\n    * List items of a group\n    */\n    case 'do_items_list_in_folder':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        if (count($_SESSION['user_roles']) === 0) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        if (is_array($dataReceived) === true && array_key_exists('id', $dataReceived) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_unknown'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Prepare POST variables\n        $inputData['id'] = filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_restricted = filter_var($dataReceived['restricted'], FILTER_SANITIZE_NUMBER_INT);\n        $post_start = filter_var($dataReceived['start'], FILTER_SANITIZE_NUMBER_INT);\n        $post_nb_items_to_display_once = filter_var($dataReceived['nb_items_to_display_once'], FILTER_SANITIZE_NUMBER_INT);\n\n        $arr_arbo = [];\n        $folderIsPf = false;\n        $showError = 0;\n        $itemsIDList = $rights = $returnedData = $uniqueLoadData = $html_json = array();\n        // Build query limits\n        if (empty($post_start) === true) {\n            $start = 0;\n        } else {\n            $start = $post_start;\n        }\n\n        // to do only on 1st iteration\n        if ((int) $start === 0) {\n            // Prepare tree\n            $arbo = $tree->getPath($inputData['id'], true);\n            foreach ($arbo as $elem) {\n                if ($elem->title === $_SESSION['user_id'] && (int) $elem->nlevel === 1) {\n                    $elem->title = $_SESSION['login'];\n                    $folderIsPf = true;\n                }\n                // Store path elements\n                array_push(\n                    $arr_arbo,\n                    array(\n                        'id' => $elem->id,\n                        'title' => htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES),\n                        'visible' => in_array($elem->id, $_SESSION['groupes_visibles']) ? 1 : 0,\n                    )\n                );\n            }\n            $uniqueLoadData['path'] = $arr_arbo;\n\n            // store last folder accessed in cookie\n            $arr_cookie_options = array (\n                'expires' => time() + TP_ONE_DAY_SECONDS * 5,\n                'path' => '/', \n                'secure' => true,\n                'httponly' => true,\n                'samesite' => 'Lax' // None || Lax  || Strict\n            );\n            setcookie(\n                'jstree_select',\n                $inputData['id'],\n                $arr_cookie_options\n            );\n\n            // CHeck if roles have 'allow_pw_change' set to true\n            $forceItemEditPrivilege = false;\n            foreach ($_SESSION['user_roles'] as $role) {\n                $roleQ = DB::queryfirstrow(\n                    'SELECT allow_pw_change\n                    FROM ' . prefixTable('roles_title') . '\n                    WHERE id = %i',\n                    $role\n                );\n                if ((int) $roleQ['allow_pw_change'] === 1) {\n                    $forceItemEditPrivilege = true;\n                    break;\n                }\n            }\n\n            // is this folder a personal one\n            $folder_is_personal = in_array($inputData['id'], $_SESSION['personal_folders']);\n            $uniqueLoadData['folder_is_personal'] = $folder_is_personal;\n\n            $folder_is_in_personal = in_array($inputData['id'], array_merge($_SESSION['personal_visible_groups'], $_SESSION['personal_folders']));\n            $uniqueLoadData['folder_is_in_personal'] = $folder_is_in_personal;\n\n\n            // check role access on this folder (get the most restrictive) (2.1.23)\n            if ((int) $folder_is_personal === 0) {\n                $accessLevel = 20;\n                $arrTmp = [];\n                \n                foreach ($_SESSION['user_roles'] as $role) {\n                    $access = DB::queryFirstRow(\n                        'SELECT type FROM ' . prefixTable('roles_values') . ' WHERE role_id = %i AND folder_id = %i',\n                        $role,\n                        $inputData['id']\n                    );\n                    if (DB::count()>0) {\n                        if ($access['type'] === 'R') {\n                            array_push($arrTmp, 10);\n                        } elseif ($access['type'] === 'W') {\n                            array_push($arrTmp, 30);\n                        } elseif (\n                            $access['type'] === 'ND'\n                            || ($forceItemEditPrivilege === true && $access['type'] === 'NDNE')\n                        ) {\n                            array_push($arrTmp, 20);\n                        } elseif ($access['type'] === 'NE') {\n                            array_push($arrTmp, 10);\n                        } elseif ($access['type'] === 'NDNE') {\n                            array_push($arrTmp, 15);\n                        } else {\n                            // Ensure to give access Right if allowed folder\n                            if (in_array($inputData['id'], $_SESSION['groupes_visibles']) === true) {\n                                array_push($arrTmp, 30);\n                            } else {\n                                array_push($arrTmp, 0);\n                            }\n                        }\n                    }\n                }\n                // 3.0.0.0 - changed  MIN to MAX\n                $accessLevel = count($arrTmp) > 0 ? max($arrTmp) : $accessLevel;\n            } else {\n                $accessLevel = 30;\n            }\n            $uniqueLoadData['accessLevel'] = $accessLevel;\n\n            /*\n            // check if this folder is a PF. If yes check if saltket is set\n            if ((!isset($_SESSION['user']['encrypted_psk']) || empty($_SESSION['user']['encrypted_psk'])) && $folderIsPf === true) {\n                $showError = 'is_pf_but_no_saltkey';\n            }\n            */\n            $uniqueLoadData['showError'] = $showError;\n\n            // check if items exist\n            $where = new WhereClause('and');\n            if (null !== $post_restricted && (int) $post_restricted === 1 && empty($_SESSION['list_folders_limited'][$inputData['id']]) === false) {\n                $counter = count($_SESSION['list_folders_limited'][$inputData['id']]);\n                $uniqueLoadData['counter'] = $counter;\n                // check if this folder is visible\n            } elseif (!in_array(\n                $inputData['id'],\n                array_merge(\n                    $_SESSION['groupes_visibles'],\n                    is_array($_SESSION['list_restricted_folders_for_items']) === true ? array_keys($_SESSION['list_restricted_folders_for_items']) : array(),\n                    is_array($_SESSION['list_folders_limited']) === true ? array_keys($_SESSION['list_folders_limited']) : array()\n                )\n            )) {\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    array(\n                        'error' => 'not_authorized',\n                        'arborescence' => $arr_arbo,\n                    ),\n                    'encode'\n                );\n                break;\n            } else {\n                DB::query(\n                    'SELECT *\n                    FROM ' . prefixTable('items') . '\n                    WHERE inactif = %i',\n                    0\n                );\n                $counter = DB::count();\n                $uniqueLoadData['counter'] = $counter;\n            }\n\n            // Get folder complexity\n            $folderComplexity = DB::queryFirstRow(\n                'SELECT valeur FROM ' . prefixTable('misc') . ' WHERE type = %s AND intitule = %i',\n                'complex',\n                $inputData['id']\n            );\n            $folderComplexity = $folderComplexity !== null ? (int) $folderComplexity['valeur'] : 0;\n            $uniqueLoadData['folderComplexity'] = $folderComplexity;\n\n            // Has this folder some categories to be displayed?\n            $categoriesStructure = array();\n            if (isset($SETTINGS['item_extra_fields']) && (int) $SETTINGS['item_extra_fields'] === 1) {\n                $folderRow = DB::query(\n                    'SELECT id_category\n                    FROM ' . prefixTable('categories_folders') . '\n                    WHERE id_folder = %i',\n                    $inputData['id']\n                );\n                foreach ($folderRow as $category) {\n                    array_push(\n                        $categoriesStructure,\n                        $category['id_category']\n                    );\n                }\n            }\n            $uniqueLoadData['categoriesStructure'] = $categoriesStructure;\n\n            /*$categoriesStructure = array();\n            if (isset($SETTINGS['item_extra_fields']) && (int) $SETTINGS['item_extra_fields'] === 1) {\n                $folderRow = DB::query(\n                    'SELECT f.id_category, c.title AS title\n                    FROM '.prefixTable('categories_folders').' AS f\n                    INNER JOIN '.prefixTable('categories').' AS c ON (c.id = f.id_category)\n                    WHERE f.id_folder = %i',\n                    $inputData['id']\n                );\n                foreach ($folderRow as $category) {\n                    $arrFields = array();\n                    // Get each category definition with fields\n                    $categoryRow = DB::query(\n                        \"SELECT *\n                        FROM \".prefixTable(\"categories\").\"\n                        WHERE parent_id=%i\n                        ORDER BY `order` ASC\",\n                        $category['id_category']\n                    );\n\n                    if (DB::count() > 0) {\n                        foreach ($categoryRow as $field) {\n                            // Is this Field visibile by user?\n                            if ($field['role_visibility'] === 'all'\n                                || count(\n                                    array_intersect(\n                                        explode(';', $_SESSION['fonction_id']),\n                                        explode(',', $field['role_visibility'])\n                                    )\n                                ) > 0\n                            ) {\n                                array_push(\n                                    $arrFields,\n                                    array(\n                                        $field['id'],\n                                        $field['title'],\n                                        $field['encrypted_data'],\n                                        $field['type'],\n                                        $field['masked'],\n                                        $field['is_mandatory']\n                                    )\n                                );\n                            }\n                        }\n                    }\n\n                    // store the categories\n                    array_push(\n                        $categoriesStructure,\n                        array(\n                            $category['id_category'],\n                            $category['title'],\n                            $arrFields\n                        )\n                    );\n                }\n            }\n            $uniqueLoadData['categoriesStructure'] = $categoriesStructure;\n            */\n\n            if (isset($_SESSION['list_folders_editable_by_role'])) {\n                $list_folders_editable_by_role = in_array($inputData['id'], $_SESSION['list_folders_editable_by_role']);\n            } else {\n                $list_folders_editable_by_role = '';\n            }\n            $uniqueLoadData['list_folders_editable_by_role'] = $list_folders_editable_by_role;\n        } else {\n            $uniqueLoadData = json_decode(\n                filter_var($dataReceived['uniqueLoadData'], FILTER_UNSAFE_RAW),\n                true\n            );\n\n            // initialize main variables\n            $showError = $uniqueLoadData['showError'];\n            $accessLevel = $uniqueLoadData['accessLevel'];\n            $counter = $uniqueLoadData['counter'];\n            $counter_full = $uniqueLoadData['counter_full'];\n            $categoriesStructure = $uniqueLoadData['categoriesStructure'];\n            $folderComplexity = $uniqueLoadData['folderComplexity'];\n            $folder_is_personal = $uniqueLoadData['folder_is_personal'];\n            $folder_is_in_personal = $uniqueLoadData['folder_is_in_personal'];\n            //$list_folders_editable_by_role = $uniqueLoadData['list_folders_editable_by_role'];\n        }\n        \n        // prepare query WHere conditions\n        $where = new WhereClause('and');\n        if (null !== $post_restricted && (int) $post_restricted === 1 && empty($_SESSION['list_folders_limited'][$inputData['id']]) === false) {\n            $where->add('i.id IN %ls', $_SESSION['list_folders_limited'][$inputData['id']]);\n        } else {\n            $where->add('i.id_tree=%i', $inputData['id']);\n        }\n\n        // build the HTML for this set of Items\n        if ($counter > 0 && empty($showError)) {\n            // init variables\n            $expired_item = false;\n            $limited_to_items = '';\n\n            // List all ITEMS\n            if ($folderIsPf === false) {\n                $where->add('i.inactif=%i', 0);\n                $where->add('l.date=%l', '(SELECT date FROM ' . prefixTable('log_items') . \" WHERE action IN ('at_creation', 'at_modification') AND id_item=i.id ORDER BY date DESC LIMIT 1)\");\n                if (empty($limited_to_items) === false) {\n                    $where->add('i.id IN %ls', explode(',', $limited_to_items));\n                }\n\n                $query_limit = ' LIMIT ' .\n                    $start . ',' .\n                    $post_nb_items_to_display_once;\n                //db::debugmode(true);\n                $rows = DB::query(\n                    'SELECT i.id AS id, i.item_key AS item_key, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                    MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                    MIN(i.anyone_can_modify) AS anyone_can_modify, l.date AS date, i.id_tree AS tree_id, i.fa_icon AS fa_icon,\n                    MIN(n.renewal_period) AS renewal_period,\n                    MIN(l.action) AS log_action,\n                    l.id_user AS log_user,\n                    i.url AS link\n                    FROM ' . prefixTable('items') . ' AS i\n                    INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (i.id_tree = n.id)\n                    INNER JOIN ' . prefixTable('log_items') . ' AS l ON (i.id = l.id_item)\n                    WHERE %l\n                    GROUP BY i.id, l.date, l.id_user, l.action\n                    ORDER BY i.label ASC, l.date DESC' . $query_limit,\n                    $where\n                );\n                //db::debugmode(false);\n            } else {\n                $post_nb_items_to_display_once = 'max';\n                $where->add('i.inactif=%i', 0);\n\n                $rows = DB::query(\n                    'SELECT i.id AS id, i.item_key AS item_key, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                    MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                    MIN(i.anyone_can_modify) AS anyone_can_modify,l.date AS date, i.id_tree AS tree_id, i.fa_icon AS fa_icon,\n                    MIN(n.renewal_period) AS renewal_period,\n                    MIN(l.action) AS log_action,\n                    l.id_user AS log_user,\n                    i.url AS link\n                    FROM ' . prefixTable('items') . ' AS i\n                    INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (i.id_tree = n.id)\n                    INNER JOIN ' . prefixTable('log_items') . ' AS l ON (i.id = l.id_item)\n                    WHERE %l\n                    GROUP BY i.id, l.date, l.id_user, l.action\n                    ORDER BY i.label ASC, l.date DESC',\n                    $where\n                );\n            }\n\n            $idManaged = '';\n\n            foreach ($rows as $record) {\n                // exclude all results except the first one returned by query\n                if (empty($idManaged) === true || $idManaged !== $record['id']) {\n                    // Fix a bug on Personal Item creation - field `perso` must be set to `1`\n                    if ((int) $record['perso'] !== 1 && (int) $folder_is_personal === 1) {\n                        DB::update(\n                            prefixTable('items'),\n                            array(\n                                'perso' => 1,\n                                'updated_at' => time(),\n                            ),\n                            'id=%i',\n                            $record['id']\n                        );\n                        $record['perso'] = 1;\n                    }\n\n                    // Does this item has restriction to groups of users?\n                    $item_is_restricted_to_role = false;\n                    DB::queryfirstrow(\n                        'SELECT role_id\n                        FROM ' . prefixTable('restriction_to_roles') . '\n                        WHERE item_id = %i',\n                        $record['id']\n                    );\n                    if (DB::count() > 0) {\n                        $item_is_restricted_to_role = true;\n                    }\n\n                    // Has this item a restriction to Groups of Users\n                    $user_is_included_in_role = false;\n                    DB::query(\n                        'SELECT role_id\n                        FROM ' . prefixTable('restriction_to_roles') . '\n                        WHERE item_id = %i AND role_id IN %ls',\n                        $record['id'],\n                        $_SESSION['user_roles']\n                    );\n                    if (DB::count() > 0) {\n                        $user_is_included_in_role = true;\n                    }\n\n                    // Is user in restricted list of users\n                    if (empty($record['restricted_to']) === false) {\n                        if (\n                            in_array($_SESSION['user_id'], explode(';', $record['restricted_to'])) === true\n                            || (((int) $_SESSION['user_manager'] === 1 || (int) $_SESSION['user_can_manage_all_users'] === 1)\n                                && (int) $SETTINGS['manager_edit'] === 1)\n                        ) {\n                            $user_is_in_restricted_list = true;\n                        } else {\n                            $user_is_in_restricted_list = false;\n                        }\n                    } else {\n                        $user_is_in_restricted_list = false;\n                    }\n\n                    // Get Expiration date\n                    $expired_item = 0;\n                    if (\n                        (int) $SETTINGS['activate_expiration'] === 1\n                        && $record['renewal_period'] > 0\n                        && ($record['date'] + ($record['renewal_period'] * TP_ONE_MONTH_SECONDS)) < time()\n                    ) {\n                        $expired_item = 1;\n                    }\n                    // Init\n                    $html_json[$record['id']]['expired'] = (int) $expired_item;\n                    $html_json[$record['id']]['item_id'] = (int) $record['id'];\n                    $html_json[$record['id']]['item_key'] = (string) $record['item_key'];\n                    $html_json[$record['id']]['tree_id'] = (int) $record['tree_id'];\n                    $html_json[$record['id']]['label'] = strip_tags($record['label']);\n                    if (isset($SETTINGS['show_description']) === true && (int) $SETTINGS['show_description'] === 1) {\n                        $html_json[$record['id']]['desc'] = substr(preg_replace('#<[^>]+>#', ' ', $record['description']), 0, 200);\n                    } else {\n                        $html_json[$record['id']]['desc'] = '';\n                    }\n                    $html_json[$record['id']]['login'] = $record['login'];\n                    $html_json[$record['id']]['anyone_can_modify'] = (int) $record['anyone_can_modify'];\n                    $html_json[$record['id']]['is_result_of_search'] = 0;\n                    $html_json[$record['id']]['is_favourited'] = in_array($record['id'], $_SESSION['favourites']) === true ? 1 : 0;\n                    $html_json[$record['id']]['link'] = $record['link'];\n                    $html_json[$record['id']]['fa_icon'] = $record['fa_icon'];\n\n                    // Possible values:\n                    // 0 -> no access to item\n                    // 10 -> appears in list but no view\n                    // 20 -> can view without edit (no copy) or move\n                    // 30 -> can view without edit (no copy) but can move\n                    // 40 -> can edit but not move\n                    // 50 -> can edit and move\n                    $itemIsPersonal = false;\n\n                    // Let's identify the rights belonging to this ITEM\n                    if (\n                        (int) $record['perso'] === 1\n                        && $record['log_action'] === 'at_creation'\n                        && $record['log_user'] === $_SESSION['user_id']\n                        && (int) $folder_is_in_personal === 1\n                        && (int) $folder_is_personal === 1\n                    ) {\n                        // Case 1 - Is this item personal and user its owner?\n                        // If yes then allow\n                        // If no then continue\n                        $itemIsPersonal = true;\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 1 -----\n                    } elseif (((isset($_SESSION['user_manager']) === true && (int) $_SESSION['user_manager'] === 1)\n                            || (isset($_SESSION['user_can_manage_all_users']) === true && (int) $_SESSION['user_can_manage_all_users'] === 1))\n                        && (isset($SETTINGS['manager_edit']) === true && (int) $SETTINGS['manager_edit'] === 1)\n                        && (int) $record['perso'] !== 1\n                        && $user_is_in_restricted_list === true\n                    ) {\n                        // Case 2 - Is user manager and option \"manager_edit\" set to true?\n                        // Allow all rights\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 2 -----\n                    } elseif (\n                        (int) $record['anyone_can_modify'] === 1\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 3 - Has this item the setting \"anyone can modify\" set to true?\n                        // Allow all rights\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 3 -----\n                    } elseif (\n                        $user_is_in_restricted_list === true\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 4 - Is this item limited to Users? Is current user in this list?\n                        // Allow all rights\n                        $right = 70;\n                        // ---\n                        // ----- END CASE 4 -----\n                    } elseif (\n                        $user_is_included_in_role === true\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 5 - Is this item limited to group of users? Is current user in one of those groups?\n                        // Allow all rights\n                        $right = 60;\n                        // ---\n                        // ----- END CASE 5 -----\n                    } elseif (\n                        (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] === 1\n                    ) {\n                        // Case 6 - Is user readonly?\n                        // Allow limited rights\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 6 -----\n                    } elseif (\n                        (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] === 1\n                    ) {\n                        // Case 7 - Is user readonly?\n                        // Allow limited rights\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 7 -----\n                    } elseif (\n                        (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] === 1\n                    ) {\n                        // Case 8 - Is user allowed to access?\n                        // Allow rights\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 8 -----\n                    } elseif (($user_is_included_in_role === false && $item_is_restricted_to_role === true)\n                        && (int) $record['perso'] !== 1\n                        && (int) $_SESSION['user_read_only'] !== 1\n                    ) {\n                        // Case 9 - Is this item limited to Users or Groups? Is current user in this list?\n                        // If no then Allow none\n                        $right = 10;\n                        // ---\n                        // ----- END CASE 9 -----\n                    } else {\n                        // Define the access based upon setting on folder\n                        // 0 -> no access to item\n                        // 10 -> appears in list but no view\n                        // 20 -> can view without edit (no copy) or move or delete\n                        // 30 -> can view without edit (no copy) or delete but can move\n                        // 40 -> can edit but not move and not delete\n                        // 50 -> can edit and delete but not move\n                        // 60 -> can edit and move but not delete\n                        // 70 -> can edit and move\n                        if ((int) $accessLevel === 0) {\n                            $right = 0;\n                        } elseif ((10 <= (int) $accessLevel) && ((int) $accessLevel < 20)) {\n                            $right = 20;\n                        } elseif ((20 <= (int) $accessLevel) && ((int) $accessLevel < 30)) {\n                            $right = 60;\n                        } elseif ((int) $accessLevel === 30) {\n                            $right = 70;\n                        } else {\n                            $right = 10;\n                        }\n                    }\n\n                    // Now finalize the data to send back\n                    $html_json[$record['id']]['rights'] = $right;\n                    $html_json[$record['id']]['perso'] = 'fa-tag mi-red';\n                    $html_json[$record['id']]['sk'] = $itemIsPersonal === true ? 1 : 0;\n                    $html_json[$record['id']]['display'] = $right > 0 ? 1 : 0;\n                    $html_json[$record['id']]['open_edit'] = in_array($right, array(40, 50, 60, 70)) === true ? 1 : 0;\n                    $html_json[$record['id']]['canMove'] = in_array($right, array(30, 60, 70)) === true ? 1 : 0;\n\n                    //*************** */\n\n                    // Build array with items\n                    array_push(\n                        $itemsIDList,\n                        array(\n                            'id' => (int) $record['id'],\n                            //'display' => $displayItem,\n                            'edit' => $html_json[$record['id']]['open_edit'],\n                        )\n                    );\n                }\n                $idManaged = $record['id'];\n            }\n\n            $rights = recupDroitCreationSansComplexite($inputData['id']);\n        }\n\n        // DELETE - 2.1.19 - AND (l.action = 'at_creation' OR (l.action = 'at_modification' AND l.raison LIKE 'at_pw :%'))\n        // count\n        if ((int) $start === 0) {\n            DB::query(\n                'SELECT i.id\n                FROM ' . prefixTable('items') . ' as i\n                INNER JOIN ' . prefixTable('nested_tree') . ' as n ON (i.id_tree = n.id)\n                INNER JOIN ' . prefixTable('log_items') . ' as l ON (i.id = l.id_item)\n                WHERE %l\n                ORDER BY i.label ASC, l.date DESC',\n                $where\n            );\n            $counter_full = DB::count();\n            $uniqueLoadData['counter_full'] = $counter_full;\n        }\n\n        // Check list to be continued status\n        if ($post_nb_items_to_display_once !== 'max' && ($post_nb_items_to_display_once + $start) < $counter_full) {\n            $listToBeContinued = 'yes';\n        } else {\n            $listToBeContinued = 'end';\n        }\n\n        // Prepare returned values\n        $returnValues = array(\n            'html_json' => $html_json,\n            //'folder_requests_psk' => $findPfGroup,\n            'arborescence' => $arr_arbo,\n            'array_items' => $itemsIDList,\n            'error' => $showError,\n            //'saltkey_is_required' => $folderIsPf === true ? 1 : 0,\n            'show_clipboard_small_icons' => isset($SETTINGS['copy_to_clipboard_small_icons']) && (int) $SETTINGS['copy_to_clipboard_small_icons'] === 1 ? 1 : 0,\n            'next_start' => intval($post_nb_items_to_display_once) + intval($start),\n            'list_to_be_continued' => $listToBeContinued,\n            'items_count' => $counter,\n            'counter_full' => $counter_full,\n            'folder_complexity' => (int) $folderComplexity,\n            'categoriesStructure' => $categoriesStructure,\n            'access_level' => $accessLevel,\n            'IsPersonalFolder' => $folderIsPf === true ? 1 : 0,\n            'uniqueLoadData' => json_encode($uniqueLoadData),\n        );\n        // Check if $rights is not null\n        if (count($rights) > 0) {\n            $returnValues = array_merge($returnValues, $rights);\n        }\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n\n        break;\n\n    case 'show_item_password':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Run query\n        $dataItem = DB::queryfirstrow(\n            'SELECT i.pw AS pw, s.share_key AS share_key\n            FROM ' . prefixTable('items') . ' AS i\n            INNER JOIN ' . prefixTable('sharekeys_items') . ' AS s ON (s.object_id = i.id)\n            WHERE user_id = %i AND i.item_key = %s',\n            $_SESSION['user_id'],\n            $inputData['itemKey']\n        );\n\n        // Uncrypt PW\n        if (DB::count() === 0) {\n            // No share key found\n            $pw = '';\n        } else {\n            $pw = doDataDecryption(\n                $dataItem['pw'],\n                decryptUserObjectKey(\n                    $dataItem['share_key'],\n                    $_SESSION['user']['private_key']\n                )\n            );\n        }\n\n        $returnValues = array(\n            'error' => false,\n            'password' => $pw,\n            'password_error' => '',\n        );\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * Get complexity level of a group\n    */\n    case 'get_complixity_level':\n        // get some info about ITEM\n        if (null !== $inputData['itemId'] && empty($inputData['itemId']) === false) {\n            $dataItem = DB::queryfirstrow(\n                'SELECT perso, anyone_can_modify\n                FROM ' . prefixTable('items') . '\n                WHERE id=%i',\n                $inputData['itemId']\n            );\n            \n            /*\n            // is user allowed to access this folder - readonly\n            if (null !== $inputData['folderId'] && empty($inputData['folderId']) === false) {\n                if (\n                    in_array($inputData['folderId'], $_SESSION['read_only_folders']) === true\n                    || in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n                ) {\n                    // check if this item can be modified by anyone\n                    if (isset($SETTINGS['anyone_can_modify']) && (int) $SETTINGS['anyone_can_modify'] === 1) {\n                        if ((int) $dataItem['anyone_can_modify'] !== 1) {\n                            // else return not authorized\n                            $returnValues = array(\n                                'error' => true,\n                                'message' => langHdl('error_not_allowed_to'),\n                            );\n                            echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],$returnValues, 'encode');\n                            break;\n                        }\n                    } else {\n                        // else return not authorized\n                        $returnValues = array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to'),\n                        );\n                        echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],$returnValues, 'encode');\n                        break;\n                    }\n                }\n            }\n            */\n\n            // Lock Item (if already locked), go back and warn\n            $dataTmp = DB::queryFirstRow('SELECT timestamp, user_id FROM ' . prefixTable('items_edition') . ' WHERE item_id = %i', $inputData['itemId']);\n\n            // If token is taken for this Item and delay is passed then delete it.\n            if (\n                isset($SETTINGS['delay_item_edition']) &&\n                $SETTINGS['delay_item_edition'] > 0 && empty($dataTmp['timestamp']) === false &&\n                round(abs(time() - $dataTmp['timestamp']) / 60, 2) > $SETTINGS['delay_item_edition']\n            ) {\n                DB::delete(prefixTable('items_edition'), 'item_id = %i', $inputData['itemId']);\n                //reload the previous data\n                $dataTmp = DB::queryFirstRow(\n                    'SELECT timestamp, user_id FROM ' . prefixTable('items_edition') . ' WHERE item_id = %i',\n                    $inputData['itemId']\n                );\n            }\n\n            // If edition by same user (and token not freed before for any reason, then update timestamp)\n            if (empty($dataTmp['timestamp']) === false && $dataTmp['user_id'] === $_SESSION['user_id']) {\n                DB::update(\n                    prefixTable('items_edition'),\n                    array(\n                        'timestamp' => time(),\n                    ),\n                    'user_id = %i AND item_id = %i',\n                    $_SESSION['user_id'],\n                    $inputData['itemId']\n                );\n                // If no token for this Item, then initialize one\n            } elseif (empty($dataTmp[0])) {\n                DB::insert(\n                    prefixTable('items_edition'),\n                    array(\n                        'timestamp' => time(),\n                        'item_id' => $inputData['itemId'],\n                        'user_id' => (int) $_SESSION['user_id'],\n                    )\n                );\n                // Edition not possible\n            } else {\n                $returnValues = array(\n                    'error' => true,\n                    'message' => langHdl('error_no_edition_possible_locked'),\n                );\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    $returnValues,\n                    'encode'\n                );\n                break;\n            }\n        }\n\n        // do query on this folder\n        $data_this_folder = DB::queryFirstRow(\n            'SELECT id, personal_folder, title\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %s',\n            $inputData['folderId']\n        );\n\n        // check if user can perform this action\n        if (\n            null !== $inputData['context']\n            && empty($inputData['context']) === false\n        ) {\n            if (\n                $inputData['context'] === 'create_folder'\n                || $inputData['context'] === 'edit_folder'\n                || $inputData['context'] === 'delete_folder'\n                || $inputData['context'] === 'copy_folder'\n            ) {\n                if (\n                    (int) $_SESSION['is_admin'] !== 1\n                    && ((int) $_SESSION['user_manager'] !== 1)\n                    && (isset($SETTINGS['enable_user_can_create_folders'])\n                        && (int) $SETTINGS['enable_user_can_create_folders'] !== 1)\n                    && ((int) $data_this_folder['personal_folder'] !== 1 && $data_this_folder['title'] !== $_SESSION['user_id'])   // take into consideration if this is a personal folder\n                ) {\n                    $returnValues = array(\n                        'error' => true,\n                        'message' => langHdl('error_not_allowed_to'),\n                    );\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        $returnValues,\n                        'encode'\n                    );\n                    break;\n                }\n            }\n        }\n\n        // Get required Complexity for this Folder\n        $visibilite = '';\n        $data = DB::queryFirstRow(\n            'SELECT m.valeur, n.personal_folder\n            FROM ' . prefixTable('misc') . ' AS m\n            INNER JOIN ' . prefixTable('nested_tree') . ' AS n ON (m.intitule = n.id)\n            WHERE type=%s AND intitule = %s',\n            'complex',\n            $inputData['folderId']\n        );\n\n        if (isset($data['valeur']) === true && (empty($data['valeur']) === false || $data['valeur'] === '0')) {\n            $complexity = TP_PW_COMPLEXITY[$data['valeur']][1];\n            $folder_is_personal = (int) $data['personal_folder'];\n\n            // Prepare Item actual visibility (what Users/Roles can see it)\n            $rows = DB::query(\n                'SELECT t.title\n                FROM ' . prefixTable('roles_values') . ' as v\n                INNER JOIN ' . prefixTable('roles_title') . ' as t ON (v.role_id = t.id)\n                WHERE v.folder_id = %i\n                GROUP BY title',\n                $inputData['folderId']\n            );\n            foreach ($rows as $record) {\n                if (empty($visibilite)) {\n                    $visibilite = $record['title'];\n                } else {\n                    $visibilite .= ' - ' . $record['title'];\n                }\n            }\n        } else {\n            $complexity = langHdl('not_defined');\n\n            // if not defined, then previous query failed and personal_folder is null\n            // do new query to know if current folder is pf\n            $data_pf = DB::queryFirstRow(\n                'SELECT personal_folder\n                FROM ' . prefixTable('nested_tree') . '\n                WHERE id = %s',\n                $inputData['folderId']\n            );\n            \n            $folder_is_personal = $data_pf !== null ? (int) $data_pf['personal_folder'] : 0;\n            \n            $visibilite = $_SESSION['name'] . ' ' . $_SESSION['lastname'] . ' (' . $_SESSION['login'] . ')';\n        }\n\n        recupDroitCreationSansComplexite($inputData['folderId']);\n\n        // get list of roles\n        $listOptionsForUsers = array();\n        $listOptionsForRoles = array();\n        $rows = DB::query(\n            'SELECT r.role_id AS role_id, t.title AS title\n            FROM ' . prefixTable('roles_values') . ' AS r\n            INNER JOIN ' . prefixTable('roles_title') . ' AS t ON (r.role_id = t.id)\n            WHERE r.folder_id = %i',\n            $inputData['folderId']\n        );\n        foreach ($rows as $record) {\n            array_push(\n                $listOptionsForRoles,\n                array(\n                    'id' => $record['role_id'],\n                    'title' => $record['title'],\n                )\n            );\n            $rows2 = DB::query(\n                'SELECT id, login, fonction_id, email, name, lastname\n                FROM ' . prefixTable('users') . '\n                WHERE admin = 0 AND fonction_id is not null'\n            );\n            foreach ($rows2 as $record2) {\n                foreach (explode(';', $record2['fonction_id']) as $role) {\n                    if (\n                        array_search($record2['id'], array_column($listOptionsForUsers, 'id')) === false\n                        && $role === $record['role_id']\n                    ) {\n                        array_push(\n                            $listOptionsForUsers,\n                            array(\n                                'id' => $record2['id'],\n                                'login' => $record2['login'],\n                                'name' => $record2['name'] . ' ' . $record2['lastname'],\n                                'email' => $record2['email'],\n                            )\n                        );\n                    }\n                }\n            }\n        }\n        \n        // Get access level for this folder\n        $accessLevel = 20;\n        if ($folder_is_personal === 0) {\n            $arrTmp = [];\n            foreach ($_SESSION['user_roles'] as $role) {\n                //db::debugmode(true);\n                $access = DB::queryFirstRow(\n                    'SELECT type\n                    FROM ' . prefixTable('roles_values') . '\n                    WHERE role_id = %i AND folder_id = %i',\n                    $role,\n                    $inputData['folderId']\n                );\n                //db::debugmode(false);\n                if (DB::count()>0) {\n                    if ($access['type'] === 'R') {\n                        array_push($arrTmp, 10);\n                    } elseif ($access['type'] === 'W') {\n                        array_push($arrTmp, 30);\n                    } elseif ($access['type'] === 'ND') {\n                        array_push($arrTmp, 20);\n                    } elseif ($access['type'] === 'NE') {\n                        array_push($arrTmp, 10);\n                    } elseif ($access['type'] === 'NDNE') {\n                        array_push($arrTmp, 15);\n                    } else {\n                        // Ensure to give access Right if allowed folder\n                        if (in_array($inputData['id'], $_SESSION['groupes_visibles']) === true) {\n                            array_push($arrTmp, 30);\n                        } else {\n                            array_push($arrTmp, 0);\n                        }\n                    }\n                }\n            }\n            // 3.0.0.0 - changed  MIN to MAX\n            $accessLevel = count($arrTmp) > 0 ? max($arrTmp) : $accessLevel;\n        } elseif ($folder_is_personal === 1) {\n            $accessLevel = 30;\n        }\n\n        $returnValues = array(\n            'folderId' => (int) $inputData['folderId'],\n            'error' => false,\n            'val' => $data !== null ? (int) $data['valeur'] : 0,\n            'visibility' => $visibilite,\n            'complexity' => $complexity,\n            'personal' => $folder_is_personal,\n            'usersList' => $listOptionsForUsers,\n            'rolesList' => $listOptionsForRoles,\n            'setting_restricted_to_roles' => isset($SETTINGS['restricted_to_roles']) === true\n                && (int) $SETTINGS['restricted_to_roles'] === 1 ? 1 : 0,\n            'itemAccessRight' => isset($accessLevel) === true ? $accessLevel : '',\n        );\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * DELETE attached file from an item\n    */\n    case 'delete_attached_file':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $fileId = filter_var($dataReceived['file_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Get some info before deleting\n        $data = DB::queryFirstRow(\n            'SELECT name, id_item, file\n            FROM ' . prefixTable('files') . '\n            WHERE id = %i',\n            $fileId\n        );\n\n        // Load item data\n        $data_item = DB::queryFirstRow(\n            'SELECT id_tree\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $data['id_item']\n        );\n\n        // Check that user can access this folder\n        if (in_array($data_item['id_tree'], $_SESSION['groupes_visibles']) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array('error' => 'ERR_FOLDER_NOT_ALLOWED'),\n                'encode'\n            );\n            break;\n        }\n\n        if (empty($data['id_item']) === false) {\n            // Delete from FILES table\n            DB::delete(\n                prefixTable('files'),\n                'id = %i',\n                $fileId\n            );\n\n            // Update the log\n            logItems(\n                $SETTINGS,\n                (int) $data['id_item'],\n                $data['name'],\n                $_SESSION['user_id'],\n                'at_modification',\n                $_SESSION['login'],\n                'at_del_file : ' . $data['name']\n            );\n\n            // DElete sharekeys\n            DB::delete(\n                prefixTable('sharekeys_files'),\n                'object_id = %i',\n                $fileId\n            );\n\n            // Delete file from server\n            fileDelete($SETTINGS['path_to_upload_folder'] . '/' . TP_FILE_PREFIX . base64_decode($data['file']), $SETTINGS);\n        }\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n    * FUNCTION\n    * Launch an action when clicking on a quick icon\n    * $action = 0 => Make not favorite\n    * $action = 1 => Make favorite\n    */\n    case 'action_on_quick_icon':\n        // Check KEY and rights\n        if (\n            $inputData['key'] !== $_SESSION['key']\n            || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])\n        ) {\n            // error\n            exit;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $inputData['action'] = (int) filter_var($dataReceived['action'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        if ((int) $inputData['action'] === 0) {\n            // Add new favourite\n            array_push($_SESSION['favourites'], $inputData['itemId']);\n            //print_r($_SESSION['favourites']);\n            DB::update(\n                prefixTable('users'),\n                array(\n                    'favourites' => implode(';', $_SESSION['favourites']),\n                ),\n                'id = %i',\n                $_SESSION['user_id']\n            );\n            // Update SESSION with this new favourite\n            $data = DB::queryfirstrow(\n                'SELECT label,id_tree\n                FROM ' . prefixTable('items') . '\n                WHERE id = %i',\n                $inputData['itemId']\n            );\n            $_SESSION['favourites_tab'][$inputData['itemId']] = array(\n                'label' => $data['label'],\n                'url' => 'index.php?page=items&amp;group=' . $data['id_tree'] . '&amp;id=' . $inputData['itemId'],\n            );\n        } elseif ((int) $inputData['action'] === 1) {\n            // delete from session\n            foreach ($_SESSION['favourites'] as $key => $value) {\n                if ($_SESSION['favourites'][$key] === $inputData['itemId']) {\n                    unset($_SESSION['favourites'][$key]);\n                    break;\n                }\n            }\n            // delete from DB\n            DB::update(\n                prefixTable('users'),\n                array(\n                    'favourites' => implode(';', $_SESSION['favourites']),\n                ),\n                'id = %i',\n                $_SESSION['user_id']\n            );\n            // refresh session fav list\n            if (isset($_SESSION['favourites_tab'])) {\n                foreach ($_SESSION['favourites_tab'] as $key => $value) {\n                    if ($key === $inputData['id']) {\n                        unset($_SESSION['favourites_tab'][$key]);\n                        break;\n                    }\n                }\n            }\n        }\n        break;\n\n        /*\n    * CASE\n    * Move an ITEM\n    */\n    case 'move_item':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true || isset($SETTINGS['pwd_maximum_length']) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $inputData['folderId'] = (int) filter_var($dataReceived['folder_id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // get data about item\n        $dataSource = DB::queryfirstrow(\n            'SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n            FROM ' . prefixTable('items') . ' as i\n            INNER JOIN ' . prefixTable('nested_tree') . ' as f ON (i.id_tree=f.id)\n            WHERE i.id=%i',\n            $inputData['itemId']\n        );\n\n        // get data about new folder\n        $dataDestination = DB::queryfirstrow(\n            'SELECT personal_folder, title\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE id = %i',\n            $inputData['folderId']\n        );\n\n        // Check that user can access this folder\n        if (\n            in_array($dataSource['id_tree'], $_SESSION['groupes_visibles']) === false\n            || in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n            //|| (int) $dataSource['personal_folder'] === (int) $dataDestination['personal_folder']\n        ) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // Manage possible cases\n        if ((int) $dataSource['personal_folder'] === 0 && (int) $dataDestination['personal_folder'] === 0) {\n            // Previous is non personal folder and new too\n            // Just update is needed. Item key is the same\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                    'updated_at' => time(),\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n            // ---\n            // ---\n        } elseif ((int) $dataSource['personal_folder'] === 0 && (int) $dataDestination['personal_folder'] === 1) {\n            // Source is public and destination is personal\n            // Decrypt and remove all sharekeys (items, fields, files)\n            // Encrypt only for the user\n\n            // Remove all item sharekeys items\n            DB::delete(\n                prefixTable('sharekeys_items'),\n                'object_id = %i AND user_id != %i',\n                $inputData['itemId'],\n                $_SESSION['user_id']\n            );\n\n            // Remove all item sharekeys fields\n            // Get fields for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('categories_items') . '\n                WHERE item_id = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $field) {\n                DB::delete(\n                    prefixTable('sharekeys_fields'),\n                    'object_id = %i AND user_id != %i',\n                    $field['id'],\n                    $_SESSION['user_id']\n                );\n            }\n\n            // Remove all item sharekeys files\n            // Get FILES for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('files') . '\n                WHERE id_item = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $attachment) {\n                DB::delete(\n                    prefixTable('sharekeys_files'),\n                    'object_id = %i AND user_id != %i',\n                    $attachment['id'],\n                    $_SESSION['user_id']\n                );\n            }\n\n            // update pw\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                    'perso' => 1,\n                    'updated_at' => time(),\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n            // ---\n            // ---\n        } elseif ((int) $dataSource['personal_folder'] === 1 && (int) $dataDestination['personal_folder'] === 1) {\n            // If previous is personal folder and new is personal folder too => no key exist on item\n            // just update is needed. Item key is the same\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                    'updated_at' => time(),\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n            // ---\n            // ---\n        } elseif ((int) $dataSource['personal_folder'] === 1 && (int) $dataDestination['personal_folder'] === 0) {\n            // If previous is personal folder and new is not personal folder => no key exist on item => add new\n            // Create keys for all users\n\n            // Get the ITEM object key for the user\n            $userKey = DB::queryFirstRow(\n                'SELECT share_key\n                FROM ' . prefixTable('sharekeys_items') . '\n                WHERE user_id = %i AND object_id = %i',\n                $_SESSION['user_id'],\n                $inputData['itemId']\n            );\n            if (DB::count() > 0) {\n                $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                // This is a public object\n                $users = DB::query(\n                    'SELECT id, public_key\n                    FROM ' . prefixTable('users') . '\n                    WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                    AND public_key != \"\"'\n                );\n                foreach ($users as $user) {\n                    // Insert in DB the new object key for this item by user\n                    DB::insert(\n                        prefixTable('sharekeys_items'),\n                        array(\n                            'object_id' => $inputData['itemId'],\n                            'user_id' => (int) $user['id'],\n                            'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                        )\n                    );\n                }\n            }\n\n            // Get the FIELDS object key for the user\n            // Get fields for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('categories_items') . '\n                WHERE item_id = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $field) {\n                $userKey = DB::queryFirstRow(\n                    'SELECT share_key\n                    FROM ' . prefixTable('sharekeys_fields') . '\n                    WHERE user_id = %i AND object_id = %i',\n                    $_SESSION['user_id'],\n                    $field['id']\n                );\n                if (DB::count() > 0) {\n                    $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                    // This is a public object\n                    $users = DB::query(\n                        'SELECT id, public_key\n                        FROM ' . prefixTable('users') . '\n                        WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                        AND public_key != \"\"'\n                    );\n                    foreach ($users as $user) {\n                        // Insert in DB the new object key for this item by user\n                        DB::insert(\n                            prefixTable('sharekeys_fields'),\n                            array(\n                                'object_id' => $field['id'],\n                                'user_id' => (int) $user['id'],\n                                'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                            )\n                        );\n                    }\n                }\n            }\n\n            // Get the FILE object key for the user\n            // Get FILES for this Item\n            $rows = DB::query(\n                'SELECT id\n                FROM ' . prefixTable('files') . '\n                WHERE id_item = %i',\n                $inputData['itemId']\n            );\n            foreach ($rows as $attachment) {\n                $userKey = DB::queryFirstRow(\n                    'SELECT share_key\n                    FROM ' . prefixTable('sharekeys_files') . '\n                    WHERE user_id = %i AND object_id = %i',\n                    $_SESSION['user_id'],\n                    $attachment['id']\n                );\n                if (DB::count() > 0) {\n                    $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                    // This is a public object\n                    $users = DB::query(\n                        'SELECT id, public_key\n                        FROM ' . prefixTable('users') . '\n                        WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                        AND public_key != \"\"'\n                    );\n                    foreach ($users as $user) {\n                        // Insert in DB the new object key for this item by user\n                        DB::insert(\n                            prefixTable('sharekeys_files'),\n                            array(\n                                'object_id' => $attachment['id'],\n                                'user_id' => (int) $user['id'],\n                                'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                            )\n                        );\n                    }\n                }\n            }\n\n            // update item\n            DB::update(\n                prefixTable('items'),\n                array(\n                    'id_tree' => $inputData['folderId'],\n                    'perso' => 0,\n                    'updated_at' => time(),\n                ),\n                'id=%i',\n                $inputData['itemId']\n            );\n        }\n\n        // Log item moved\n        logItems(\n            $SETTINGS,\n            (int) $inputData['itemId'],\n            $dataSource['label'],\n            $_SESSION['user_id'],\n            'at_modification',\n            $_SESSION['login'],\n            'at_moved : ' . $dataSource['title'] . ' -> ' . $dataDestination['title']\n        );\n\n        // Update cache table\n        updateCacheTable(\n            'update_value',\n            $SETTINGS,\n            (int) $inputData['itemId']\n        );\n\n        $returnValues = array(\n            'error' => '',\n            'message' => '',\n            'from_folder' => $dataSource['id_tree'],\n            'to_folder' => $inputData['folderId'],\n        );\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $returnValues,\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * MASSIVE Move an ITEM\n    */\n    case 'mass_move_items':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true || isset($SETTINGS['pwd_maximum_length']) === false) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $inputData['folderId'] = filter_var($dataReceived['folder_id'], FILTER_SANITIZE_NUMBER_INT);\n        $post_item_ids = filter_var($dataReceived['item_ids'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n        // loop on items to move\n        foreach (explode(';', $post_item_ids) as $item_id) {\n            if (empty($item_id) === false) {\n                // get data about item\n                $dataSource = DB::queryfirstrow(\n                    'SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                    FROM ' . prefixTable('items') . ' as i\n                    INNER JOIN ' . prefixTable('nested_tree') . ' as f ON (i.id_tree=f.id)\n                    WHERE i.id=%i',\n                    $item_id\n                );\n\n                // Check that user can access this folder\n                if (\n                    in_array($dataSource['id_tree'], $_SESSION['groupes_visibles']) === false\n                    || in_array($inputData['folderId'], $_SESSION['groupes_visibles']) === false\n                ) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to'),\n                        ),\n                        'encode'\n                    );\n                    exit;\n                }\n\n                // get data about new folder\n                $dataDestination = DB::queryfirstrow(\n                    'SELECT personal_folder, title FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n                    $inputData['folderId']\n                );\n\n                // previous is non personal folder and new too\n                if (\n                    (int) $dataSource['personal_folder'] === 0\n                    && (int) $dataDestination['personal_folder'] === 0\n                ) {\n                    // just update is needed. Item key is the same\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                            'updated_at' => time(),\n                        ),\n                        'id = %i',\n                        $item_id\n                    );\n                    // ---\n                    // ---\n                    // ---\n                } elseif (\n                    (int) $dataSource['personal_folder'] === 0\n                    && (int) $dataDestination['personal_folder'] === 1\n                ) {\n                    // Source is public and destination is personal\n                    // Decrypt and remove all sharekeys (items, fields, files)\n                    // Encrypt only for the user\n\n                    // Remove all item sharekeys items\n                    DB::delete(\n                        prefixTable('sharekeys_items'),\n                        'object_id = %i AND user_id != %i',\n                        $item_id,\n                        $_SESSION['user_id']\n                    );\n\n                    // Remove all item sharekeys fields\n                    // Get fields for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('categories_items') . '\n                        WHERE item_id = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $field) {\n                        DB::delete(\n                            prefixTable('sharekeys_fields'),\n                            'object_id = %i AND user_id != %i',\n                            $field['id'],\n                            $_SESSION['user_id']\n                        );\n                    }\n\n                    // Remove all item sharekeys files\n                    // Get FILES for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('files') . '\n                        WHERE id_item = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $attachment) {\n                        DB::delete(\n                            prefixTable('sharekeys_files'),\n                            'object_id = %i AND user_id != %i',\n                            $attachment['id'],\n                            $_SESSION['user_id']\n                        );\n                    }\n\n                    // update pw\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                            'perso' => 1,\n                            'updated_at' => time(),\n                        ),\n                        'id = %i',\n                        $item_id\n                    );\n                    // ---\n                    // ---\n                    // ---\n                } elseif (\n                    (int) $dataSource['personal_folder'] === 1\n                    && (int) $dataDestination['personal_folder'] === 1\n                ) {\n                    // If previous is personal folder and new is personal folder too => no key exist on item\n                    // just update is needed. Item key is the same\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                            'updated_at' => time(),\n                        ),\n                        'id = %i',\n                        $item_id\n                    );\n                    // ---\n                    // ---\n                    // ---\n                } elseif (\n                    (int) $dataSource['personal_folder'] === 1\n                    && (int) $dataDestination['personal_folder'] === 0\n                ) {\n                    // If previous is personal folder and new is not personal folder => no key exist on item => add new\n                    // Create keys for all users\n\n                    // Get the ITEM object key for the user\n                    $userKey = DB::queryFirstRow(\n                        'SELECT share_key\n                        FROM ' . prefixTable('sharekeys_items') . '\n                        WHERE user_id = %i AND object_id = %i',\n                        $_SESSION['user_id'],\n                        $item_id\n                    );\n                    if (DB::count() > 0) {\n                        $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                        // This is a public object\n                        $users = DB::query(\n                            'SELECT id, public_key\n                            FROM ' . prefixTable('users') . '\n                            WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                            AND public_key != \"\"'\n                        );\n                        foreach ($users as $user) {\n                            // Insert in DB the new object key for this item by user\n                            DB::insert(\n                                prefixTable('sharekeys_items'),\n                                array(\n                                    'object_id' => $item_id,\n                                    'user_id' => (int) $user['id'],\n                                    'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                                )\n                            );\n                        }\n                    }\n\n                    // Get the FIELDS object key for the user\n                    // Get fields for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('categories_items') . '\n                        WHERE item_id = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $field) {\n                        $userKey = DB::queryFirstRow(\n                            'SELECT share_key\n                            FROM ' . prefixTable('sharekeys_fields') . '\n                            WHERE user_id = %i AND object_id = %i',\n                            $_SESSION['user_id'],\n                            $field['id']\n                        );\n                        if (DB::count() > 0) {\n                            $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                            // This is a public object\n                            $users = DB::query(\n                                'SELECT id, public_key\n                                FROM ' . prefixTable('users') . '\n                                WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                                AND public_key != \"\"'\n                            );\n                            foreach ($users as $user) {\n                                // Insert in DB the new object key for this item by user\n                                DB::insert(\n                                    prefixTable('sharekeys_fields'),\n                                    array(\n                                        'object_id' => $field['id'],\n                                        'user_id' => (int) $user['id'],\n                                        'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                                    )\n                                );\n                            }\n                        }\n                    }\n\n                    // Get the FILE object key for the user\n                    // Get FILES for this Item\n                    $rows = DB::query(\n                        'SELECT id\n                        FROM ' . prefixTable('files') . '\n                        WHERE id_item = %i',\n                        $item_id\n                    );\n                    foreach ($rows as $attachment) {\n                        $userKey = DB::queryFirstRow(\n                            'SELECT share_key\n                            FROM ' . prefixTable('sharekeys_files') . '\n                            WHERE user_id = %i AND object_id = %i',\n                            $_SESSION['user_id'],\n                            $attachment['id']\n                        );\n                        if (DB::count() > 0) {\n                            $objectKey = decryptUserObjectKey($userKey['share_key'], $_SESSION['user']['private_key']);\n\n                            // This is a public object\n                            $users = DB::query(\n                                'SELECT id, public_key\n                                FROM ' . prefixTable('users') . '\n                                WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\",\"' . $_SESSION['user_id'] . '\")\n                                AND public_key != \"\"'\n                            );\n                            foreach ($users as $user) {\n                                // Insert in DB the new object key for this item by user\n                                DB::insert(\n                                    prefixTable('sharekeys_files'),\n                                    array(\n                                        'object_id' => $attachment['id'],\n                                        'user_id' => (int) $user['id'],\n                                        'share_key' => encryptUserObjectKey($objectKey, $user['public_key']),\n                                    )\n                                );\n                            }\n                        }\n                    }\n\n                    // update item\n                    DB::update(\n                        prefixTable('items'),\n                        array(\n                            'id_tree' => $inputData['folderId'],\n                            'perso' => 0,\n                            'updated_at' => time(),\n                        ),\n                        'id=%i',\n                        $item_id\n                    );\n                }\n                // Log item moved\n                logItems(\n                    $SETTINGS,\n                    (int) $item_id,\n                    $dataSource['label'],\n                    $_SESSION['user_id'],\n                    'at_modification',\n                    $_SESSION['login'],\n                    'at_moved : ' . $dataSource['title'] . ' -> ' . $dataDestination['title']\n                );\n            }\n        }\n\n        // reload cache table\n        require_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n        updateCacheTable('reload', $SETTINGS, null);\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n        * CASE\n        * MASSIVE Delete an item\n    */\n    case 'mass_delete_items':\n        // Check KEY and rights\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n$SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        $post_item_ids = filter_var($dataReceived['item_ids'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n\n        // perform a check in case of Read-Only user creating an item in his PF\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n$SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // loop on items to move\n        foreach (explode(';', $post_item_ids) as $item_id) {\n            if (empty($item_id) === false) {\n                // get info\n                $dataSource = DB::queryfirstrow(\n                    'SELECT label, id_tree\n                    FROM ' . prefixTable('items') . '\n                    WHERE id=%i',\n                    $item_id\n                );\n\n                // Check that user can access this folder\n                if (\n                    in_array($dataSource['id_tree'], $_SESSION['groupes_visibles']) === false\n                ) {\n                    echo (string) prepareExchangedData(\n                        $SETTINGS['cpassman_dir'],\n                        array(\n                            'error' => true,\n                            'message' => langHdl('error_not_allowed_to'),\n                        ),\n                        'encode'\n                    );\n                    break;\n                }\n\n                // delete item consists in disabling it\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'inactif' => '1',\n                        'deleted_at' => time(),\n                    ),\n                    'id = %i',\n                    $item_id\n                );\n\n                // log\n                logItems(\n                    $SETTINGS,\n                    (int) $item_id,\n                    $dataSource['label'],\n                    $_SESSION['user_id'],\n                    'at_delete',\n                    $_SESSION['login']\n                );\n\n                // Update CACHE table\n                updateCacheTable('delete_value', $SETTINGS, (int) $item_id);\n            }\n        }\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n        break;\n\n        break;\n\n        /*\n        * CASE\n        * Send email\n    */\n    case 'send_email':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        if ($_SESSION['user_read_only'] === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('error_not_allowed_to'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Prepare variables\n        $inputData['id'] = filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['receipt'] = filter_var($dataReceived['receipt'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['cat'] = filter_var($dataReceived['cat'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $post_content = isset($_POST['name']) === true ? explode(',', filter_input(INPUT_POST, 'content', FILTER_SANITIZE_FULL_SPECIAL_CHARS)) : '';\n\n        // get links url\n        if (empty($SETTINGS['email_server_url']) === true) {\n            $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n        }\n        if ($inputData['cat'] === 'request_access_to_author') {\n            // Variables\n            $dataAuthor = DB::queryfirstrow('SELECT email,login FROM ' . prefixTable('users') . ' WHERE id = ' . $post_content[1]);\n            $dataItem = DB::queryfirstrow('SELECT label, id_tree FROM ' . prefixTable('items') . ' WHERE id = ' . $post_content[0]);\n\n            // Get path\n            $path = geItemReadablePath(\n                (int) $dataItem['id_tree'],\n                $dataItem['label'],\n                $SETTINGS\n            );\n\n            // Prepare email\n            prepareSendingEmail(\n                langHdl('email_request_access_subject'),\n                str_replace(\n                    array('#tp_item_author#', '#tp_user#', '#tp_item#'),\n                    array(' ' . addslashes($dataAuthor['login']), addslashes($_SESSION['login']), $path),\n                    langHdl('email_request_access_mail')\n                ),\n                $dataAuthor['email'],\n                \"\",\n                $SETTINGS\n            );\n        } elseif ($inputData['cat'] === 'share_this_item') {\n            $dataItem = DB::queryfirstrow(\n                'SELECT label,id_tree\n                FROM ' . prefixTable('items') . '\n                WHERE id= %i',\n                $inputData['id']\n            );\n\n            // Get path\n            $path = geItemReadablePath(\n                (int) $dataItem['id_tree'],\n                $dataItem['label'],\n                $SETTINGS\n            );\n\n            // Prepare email\n            prepareSendingEmail(\n                langHdl('email_share_item_subject'),\n                str_replace(\n                    array(\n                        '#tp_link#',\n                        '#tp_user#',\n                        '#tp_item#',\n                    ),\n                    array(\n                        empty($SETTINGS['email_server_url']) === false ?\n                            $SETTINGS['email_server_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $inputData['id'] : $SETTINGS['cpassman_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $inputData['id'],\n                        addslashes($_SESSION['login']),\n                        addslashes($path),\n                    ),\n                    langHdl('email_share_item_mail')\n                ),\n                $inputData['receipt'],\n                \"\",\n                $SETTINGS\n            );\n        }\n\n        break;\n\n    /*\n    * CASE\n    * manage notification of an Item\n    */\n    /*\n    case 'notify_a_user':\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[{\"error\" : \"something_wrong\"}]';\n            break;\n        }\n        if ($inputData['notifyType'] === 'on_show') {\n            // Check if values already exist\n            $data = DB::queryfirstrow(\n                'SELECT notification FROM ' . prefixTable('items') . ' WHERE id = %i',\n                $inputData['itemId']\n            );\n            $notifiedUsers = explode(';', $data['notification']);\n            // User is not in actual notification list\n            if ($inputData['status'] === 'true' && !in_array($inputData['userId'], $notifiedUsers)) {\n                // User is not in actual notification list and wants to be notified\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'notification' => empty($data['notification']) ?\n                            $inputData['userId'] . ';'\n                            : $data['notification'] . $inputData['userId'] ,\n                    ),\n                    'id=%i',\n                    $inputData['itemId']\n                );\n                echo '[{\"error\" : \"\", \"new_status\":\"true\"}]';\n                break;\n            }\n            if ($inputData['status'] === 'false' && in_array($inputData['userId'], $notifiedUsers)) {\n                // TODO : delete user from array and store in DB\n                // User is in actual notification list and doesn't want to be notified\n                DB::update(\n                    prefixTable('items'),\n                    array(\n                        'notification' => empty($data['notification']) ?\n                        $inputData['userId']\n                            : $data['notification'] . ';' . $inputData['userId'],\n                    ),\n                    'id=%i',\n                    $inputData['itemId']\n                );\n            }\n        }\n        break;\n    */\n\n        /*\n    * CASE\n    * Item History Log - add new entry\n    */\n    case 'history_entry_add':\n        if ($inputData['key'] !== $_SESSION['key']) {\n            $data = array('error' => 'key_is_wrong');\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $data,\n                'encode'\n            );\n            break;\n        }\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        // Get all informations for this item\n        $dataItem = DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('items') . ' as i\n            INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n            WHERE i.id=%i AND l.action = %s',\n            $dataReceived['item_id'],\n            'at_creation'\n        );\n        // check that actual user can access this item\n        $restrictionActive = true;\n        $restrictedTo = is_null($dataItem['restricted_to']) === false ? array_filter(explode(';', $dataItem['restricted_to'])) : [];\n        if (in_array($_SESSION['user_id'], $restrictedTo)) {\n            $restrictionActive = false;\n        }\n        if (empty($dataItem['restricted_to'])) {\n            $restrictionActive = false;\n        }\n\n        if (((in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) && ((int) $dataItem['perso'] === 0 || ((int) $dataItem['perso'] === 1 && $dataItem['id_user'] === $_SESSION['user_id'])) && $restrictionActive === false)\n            || (isset($SETTINGS['anyone_can_modify']) && (int) $SETTINGS['anyone_can_modify'] === 1 && (int) $dataItem['anyone_can_modify'] === 1 && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || (int) $_SESSION['is_admin'] === 1) && $restrictionActive === false)\n            || (is_array($_SESSION['list_folders_limited'][$inputData['folderId']]) === true && in_array($inputData['id'], $_SESSION['list_folders_limited'][$inputData['folderId']]) === true)\n        ) {\n            // Query\n            logItems(\n                $SETTINGS,\n                (int) $dataReceived['item_id'],\n                $dataItem['label'],\n                $_SESSION['user_id'],\n                'at_manual',\n                $_SESSION['login'],\n                htmlspecialchars_decode($dataReceived['label'], ENT_QUOTES)\n            );\n            // Prepare new line\n            $data = DB::queryfirstrow(\n                'SELECT * FROM ' . prefixTable('log_items') . ' WHERE id_item = %i ORDER BY date DESC',\n                $dataReceived['item_id']\n            );\n            $historic = date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], $data['date']) . ' - ' . $_SESSION['login'] . ' - ' . langHdl($data['action']) . ' - ' . $data['raison'];\n            // send back\n            $data = array(\n                'error' => '',\n                'new_line' => '<br>' . addslashes($historic),\n            );\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $data,\n                'encode'\n            );\n        } else {\n            $data = array('error' => 'something_wrong');\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $data,\n                'encode'\n            );\n            break;\n        }\n        break;\n\n        /*\n    * CASE\n    * Free Item for Edition\n    */\n    case 'free_item_for_edition':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n        // Do\n        DB::delete(\n            prefixTable('items_edition'),\n            'item_id = %i',\n            $inputData['id']\n        );\n        break;\n\n        /*\n    * CASE\n    * Check if Item has been changed since loaded\n    */\n    /*\n    case 'is_item_changed':\n        $data = DB::queryFirstRow(\n            'SELECT date FROM ' . prefixTable('log_items') . ' WHERE action = %s AND id_item = %i ORDER BY date DESC',\n            'at_modification',\n            $inputData['itemId']\n        );\n        // Check if it's in a personal folder. If yes, then force complexity overhead.\n        if ((int) $data['date'] > (int) $inputData['timestamp']) {\n            echo '{ \"modified\" : \"1\" }';\n        } else {\n            echo '{ \"modified\" : \"0\" }';\n        }\n        break;\n        */\n\n        /*\n    * CASE\n    * Check if Item has been changed since loaded\n    */\n    case 'generate_OTV_url':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n\n        // delete all existing old otv codes\n        $rows = DB::query('SELECT id FROM ' . prefixTable('otv') . ' WHERE timestamp < ' . (time() - $SETTINGS['otv_expiration_period'] * 86400));\n        foreach ($rows as $record) {\n            DB::delete(prefixTable('otv'), 'id=%i', $record['id']);\n        }\n\n        // generate session\n        $otv_code = GenerateCryptKey(32, false, true, true, false, true, $SETTINGS);\n        $otv_key = GenerateCryptKey(32, false, true, true, false, true, $SETTINGS);\n\n        // Generate Defuse key\n        $otv_user_code_encrypted = defuse_generate_personal_key($otv_key);\n\n        // check if psk is correct.\n        $otv_key_encoded = defuse_validate_personal_key(\n            $otv_key,\n            $otv_user_code_encrypted\n        );\n\n        // Decrypt the pwd\n        // Should we log a password change?\n        $itemQ = DB::queryFirstRow(\n            'SELECT s.share_key, i.pw\n            FROM ' . prefixTable('items') . ' AS i\n            INNER JOIN ' . prefixTable('sharekeys_items') . ' AS s ON (i.id = s.object_id)\n            WHERE s.user_id = %i AND s.object_id = %i',\n            $_SESSION['user_id'],\n            $inputData['id']\n        );\n        if (DB::count() === 0 || empty($itemQ['pw']) === true) {\n            // No share key found\n            $pw = '';\n        } else {\n            $pw = base64_decode(doDataDecryption(\n                $itemQ['pw'],\n                decryptUserObjectKey(\n                    $itemQ['share_key'],\n                    $_SESSION['user']['private_key']\n                )\n            ));\n        }\n\n        // Encrypt it with DEFUSE using the generated code as key\n        // This is required as the OTV is used by someone without any Teampass account\n        $passwd = cryption(\n            $pw,\n            $otv_key_encoded,\n            'encrypt',\n            $SETTINGS\n        );\n\n        DB::insert(\n            prefixTable('otv'),\n            array(\n                'id' => null,\n                'item_id' => $inputData['id'],\n                'timestamp' => time(),\n                'originator' => intval($_SESSION['user_id']),\n                'code' => $otv_code,\n                'encrypted' => $passwd['string'],\n            )\n        );\n        $newID = DB::insertId();\n\n        // Prepare URL content\n        $otv_session = array(\n            'code' => $otv_code,\n            'key' => $otv_key_encoded,\n            'stamp' => time(),\n        );\n\n        if (isset($SETTINGS['otv_expiration_period']) === false) {\n            $SETTINGS['otv_expiration_period'] = 7;\n        }\n        $url = $SETTINGS['cpassman_url'] . '/index.php?otv=true&' . http_build_query($otv_session);\n        //$exp_date = date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], time() + (intval($SETTINGS['otv_expiration_period']) * 86400));\n\n        echo json_encode(\n            array(\n                'error' => '',\n                'url' => $url,\n                /*'text' => str_replace(\n                    array('#URL#', '#DAY#'),\n                    array('<span id=\\'otv_link\\'>'.$url.'</span>&nbsp;<span class=\\'fa-stack tip\" title=\\''.langHdl('copy').'\\' style=\\'cursor:pointer;\\' id=\\'button_copy_otv_link\\'><span class=\\'fa fa-square fa-stack-2x\\'></span><span class=\\'fa fa-clipboard fa-stack-1x fa-inverse\\'></span></span>', $exp_date),\n                    langHdl('one_time_view_item_url_box')\n                ),*/\n            )\n        );\n        break;\n\n        /*\n    * CASE\n    * Free Item for Edition\n    */\n    case 'image_preview_preparation':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        // get file info\n        $file_info = DB::queryfirstrow(\n            'SELECT f.id AS id, f.file AS file, f.name AS name, f.status AS status,\n            f.extension AS extension, f.type AS type,\n            s.share_key AS share_key\n            FROM ' . prefixTable('files') . ' AS f\n            INNER JOIN ' . prefixTable('sharekeys_files') . ' AS s ON (f.id = s.object_id)\n            WHERE s.user_id = %i AND s.object_id = %i',\n            $_SESSION['user_id'],\n            $inputData['id']\n        );\n\n        // Check if user has this sharekey\n        if (empty($file_info['share_key']) === true) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('no_sharekey_found'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        //$fileName = basename($file_info['name'], '.'.$file_info['extension']);\n\n        // prepare image info\n        $post_title = basename($file_info['name'], '.' . $file_info['extension']);\n        $post_title = isBase64($post_title) === true ?\n            base64_decode($post_title) : $post_title;\n        $image_code = $file_info['file'];\n        //$extension = $file_info['extension'];\n\n        // Get image content\n        $fileContent = decryptFile(\n            $image_code,\n            $SETTINGS['path_to_upload_folder'],\n            decryptUserObjectKey($file_info['share_key'], $_SESSION['user']['private_key'])\n        );\n\n        // Encrypt data to return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'filename' => $post_title . '.' . $file_info['extension'],\n                'file_type' => $file_info['type'],\n                'file_content' => $fileContent,\n            ),\n            'encode'\n        );\n        break;\n\n        /*\n    * CASE\n    * Free Item for Edition\n    */\n    /*\n    case 'delete_file':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n\n        // get file info\n        $result = DB::queryfirstrow(\n            'SELECT file FROM ' . prefixTable('files') . ' WHERE id=%i',\n            intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_FULL_SPECIAL_CHARS), 1))\n        );\n\n        fileDelete($SETTINGS['path_to_upload_folder'] . '/' . $result['file'] . $inputData['fileSuffix'], $SETTINGS);\n\n        break;\n        */\n\n        /*\n    * CASE\n    * Get list of users that have access to the folder\n    */\n    case 'check_for_title_duplicate':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n        $duplicate = 0;\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n        // Prepare variables\n        $label = htmlspecialchars_decode($dataReceived['label']);\n        $idFolder = $dataReceived['idFolder'];\n\n        // don't check if Personal Folder\n        $data = DB::queryFirstRow('SELECT title FROM ' . prefixTable('nested_tree') . ' WHERE id = %i', $idFolder);\n        if ($data['title'] === $_SESSION['user_id']) {\n            // send data\n            echo '[{\"duplicate\" : \"' . $duplicate . '\" , error\" : \"\"}]';\n        } else {\n            if ($inputData['option'] === 'same_folder') {\n                // case unique folder\n                DB::query(\n                    'SELECT label\n                    FROM ' . prefixTable('items') . '\n                    WHERE id_tree = %i AND label = %s',\n                    $idFolder,\n                    $label\n                );\n            } else {\n                // case complete database\n\n                //get list of personal folders\n                $arrayPf = array();\n                if (empty($row['id']) === false) {\n                    $rows = DB::query(\n                        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i',\n                        '1'\n                    );\n                    foreach ($rows as $record) {\n                        if (!in_array($record['id'], $arrayPf)) {\n                            array_push($arrayPf, $record['id']);\n                        }\n                    }\n                }\n\n                // build WHERE condition\n                $where = new WhereClause('and');\n                $where->add('id_tree = %i', $idFolder);\n                $where->add('label = %s', $label);\n                if (empty($arrayPf) === false) {\n                    $where->add('id_tree NOT IN (' . implode(',', $arrayPf) . ')');\n                }\n\n                DB::query(\n                    'SELECT label\n                    FROM ' . prefixTable('items') . '\n                    WHERE %l',\n                    $where\n                );\n            }\n\n            // count results\n            if (DB::count() > 0) {\n                $duplicate = 1;\n            }\n\n            // send data\n            echo '[{\"duplicate\" : \"' . $duplicate . '\" , \"error\" : \"\"}]';\n        }\n        break;\n\n        /*\n    * CASE\n    * Get list of users that have access to the folder\n    */\n    case 'refresh_visible_folders':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        $arr_data = [];\n        $arr_folders = [];\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // Will we show the root folder?\n        if (\n            isset($_SESSION['can_create_root_folder']) === true\n            && (int) $_SESSION['can_create_root_folder'] === 1\n        ) {\n            $arr_data['can_create_root_folder'] = 1;\n        } else {\n            $arr_data['can_create_root_folder'] = 0;\n        }\n\n        // do we have a cache to be used?\n        if (isset($dataReceived['force_refresh_cache']) === true && $dataReceived['force_refresh_cache'] === false) {\n            $goCachedFolders = loadFoldersListByCache('visible_folders', 'folders');\n            if ($goCachedFolders['state'] === true) {\n                $arr_data['folders'] = json_decode($goCachedFolders['data'], true);//print_r($arr_data);\n                // send data\n                echo (string) prepareExchangedData(\n                    $SETTINGS['cpassman_dir'],\n                    [\n                        'error' => 'false',\n                        'html_json' => $arr_data,\n                    ],\n                    'encode'\n                );\n                break;\n            }\n        }\n\n        // Build list of visible folders\n        if (\n            (int) $_SESSION['user_admin'] === 1\n        ) {\n            $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n        }\n\n        if (isset($_SESSION['list_folders_limited']) && count($_SESSION['list_folders_limited']) > 0) {\n            $listFoldersLimitedKeys = is_array($_SESSION['list_folders_limited']) === true ? array_keys($_SESSION['list_folders_limited']) : [];\n        } else {\n            $listFoldersLimitedKeys = array();\n        }\n        // list of items accessible but not in an allowed folder\n        if (\n            isset($_SESSION['list_restricted_folders_for_items'])\n            && count($_SESSION['list_restricted_folders_for_items']) > 0\n        ) {\n            $listRestrictedFoldersForItemsKeys = is_array($_SESSION['list_restricted_folders_for_items']) === true ? array_keys($_SESSION['list_restricted_folders_for_items']) : [];\n        } else {\n            $listRestrictedFoldersForItemsKeys = array();\n        }\n\n        //Build tree\n        require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tree/NestedTree/NestedTree.php';\n        $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n        $tree->rebuild();\n        $folders = $tree->getDescendants();\n        $inc = 0;\n\n        foreach ($folders as $folder) {\n            // Be sure that user can only see folders he/she is allowed to\n            if (\n                in_array($folder->id, $_SESSION['forbiden_pfs']) === false\n                || in_array($folder->id, $_SESSION['groupes_visibles']) === true\n                || in_array($folder->id, $listFoldersLimitedKeys) === true\n                || in_array($folder->id, $listRestrictedFoldersForItemsKeys) === true\n            ) {\n                // Init\n                $displayThisNode = false;\n\n                // Check if any allowed folder is part of the descendants of this node\n                $nodeDescendants = $tree->getDescendants($folder->id, true, false, true);\n                foreach ($nodeDescendants as $node) {\n                    // manage tree counters\n                    if (\n                        in_array($node, array_merge($_SESSION['groupes_visibles'], $_SESSION['list_restricted_folders_for_items'])) === true\n                        || (is_array($listFoldersLimitedKeys) === true && in_array($node, $listFoldersLimitedKeys) === true)\n                        || (is_array($listRestrictedFoldersForItemsKeys) === true && in_array($node, $listRestrictedFoldersForItemsKeys) === true)\n                    ) {\n                        $displayThisNode = true;\n                        //break;\n                    }\n                }\n\n                if ($displayThisNode === true) {\n                    // ALL FOLDERS\n                    // Is this folder disabled?\n                    $disabled = 0;\n                    if (\n                        in_array($folder->id, $_SESSION['groupes_visibles']) === false\n                        || in_array($folder->id, $_SESSION['read_only_folders']) === true\n                        //|| ((int) $_SESSION['user_read_only'] === 1 && in_array($folder->id, $_SESSION['personal_visible_groups']) === false)\n                    ) {\n                        $disabled = 1;\n                    }\n\n                    // Build path\n                    $arbo = $tree->getPath($folder->id, false);\n                    $arr_data['folders'][$inc]['path'] = '';\n                    foreach ($arbo as $elem) {\n                        if (empty($arr_data['folders'][$inc]['path']) === true) {\n                            $arr_data['folders'][$inc]['path'] = htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n                        } else {\n                            $arr_data['folders'][$inc]['path'] .= ' / ' . htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n                        }\n                    }\n\n                    // Build array\n                    $arr_data['folders'][$inc]['id'] = (int) $folder->id;\n                    $arr_data['folders'][$inc]['level'] = (int) $folder->nlevel;\n                    $arr_data['folders'][$inc]['title'] = ((int) $folder->title === (int) $_SESSION['user_id'] && (int) $folder->nlevel === 1) ? htmlspecialchars_decode($_SESSION['login']) : htmlspecialchars_decode($folder->title, ENT_QUOTES);\n                    $arr_data['folders'][$inc]['disabled'] = $disabled;\n                    $arr_data['folders'][$inc]['parent_id'] = (int) $folder->parent_id;\n                    $arr_data['folders'][$inc]['perso'] = (int) $folder->personal_folder;\n                    //array_push($arr_folders, (int) $folder->id);\n\n                    // Is this folder an active folders? (where user can do something)\n                    $is_visible_active = 0;\n                    if (\n                        isset($_SESSION['read_only_folders']) === true\n                        && in_array($folder->id, $_SESSION['read_only_folders']) === true\n                    ) {\n                        $is_visible_active = 1;\n                    }\n                    $arr_data['folders'][$inc]['is_visible_active'] = $is_visible_active;\n\n                    ++$inc;\n                }\n            }\n        }\n        /*\n        if (isset($arr_data['folders']) === true) {\n            // save to cache_tree\n            cacheTreeUserHandler(\n                (int) $_SESSION['user_id'],\n                json_encode($arr_data['folders']),\n                $SETTINGS,\n                'visible_folders',\n            );\n\n            // save to cache_tree\n            cacheTreeUserHandler(\n                (int) $_SESSION['user_id'],\n                json_encode($arr_folders),\n                $SETTINGS,\n                'folders',\n            );\n        }\n        */\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'error' => 'false',\n                'html_json' => $arr_data,\n            ],\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * Get list of users that have access to the folder\n    */\n    case 'refresh_folders_other_info':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => true,\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n\n        $ret = [];\n        $foldersArray = json_decode($inputData['data'], true);\n        if (is_array($foldersArray) === true && $inputData['data'] !== '[null]') {\n            $rows = DB::query(\n                'SELECT id, categories\n                FROM ' . prefixTable('nested_tree') . '\n                WHERE id IN (%l)',\n                implode(',', $foldersArray)\n            );\n            foreach ($rows as $record) {\n                if (empty($record['categories']) === false) {\n                    array_push(\n                        $ret,\n                        array($record['id'] => json_decode($record['categories'], true))\n                    );\n                }\n            }\n        }\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'error' => '',\n                'result' => $ret,\n            ],\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * Load item history\n    */\n    case 'load_item_history':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array('error' => 'ERR_KEY_NOT_CORRECT'),\n                'encode'\n            );\n            break;\n        }\n        \n        // get item info\n        $dataItem = DB::queryFirstRow(\n            'SELECT *\n            FROM ' . prefixTable('items') . '\n            WHERE id=%i',\n            $inputData['itemId']\n        );\n\n        // get item history\n        $history = [];\n        $rows = DB::query(\n            'SELECT l.date as date, l.action as action, l.raison as raison,\n            u.login as login, u.avatar_thumb as avatar_thumb, u.name as name, u.lastname as lastname\n            FROM ' . prefixTable('log_items') . ' as l\n            LEFT JOIN ' . prefixTable('users') . ' as u ON (l.id_user=u.id)\n            WHERE id_item=%i AND l.action NOT IN (%l)\n            ORDER BY date DESC',\n            $inputData['itemId'],\n            '\"at_shown\",\"at_password_copied\", \"at_shown\", \"at_password_shown\"'\n        );\n        foreach ($rows as $record) {\n            if (empty($record['raison']) === true) {\n                $reason[0] = '';\n            } else {\n                $reason = array_map('trim', explode(':', $record['raison']));\n            }\n            \n            // imported via API\n            if (empty($record['login']) === true) {\n                $record['login'] = langHdl('imported_via_api') . ' [' . $record['raison'] . ']';\n            }\n            \n            // Prepare avatar\n            if (isset($record['avatar_thumb']) && empty($record['avatar_thumb']) === false) {\n                if (file_exists($SETTINGS['cpassman_dir'] . '/includes/avatars/' . $record['avatar_thumb'])) {\n                    $avatar = $SETTINGS['cpassman_url'] . '/includes/avatars/' . $record['avatar_thumb'];\n                } else {\n                    $avatar = $SETTINGS['cpassman_url'] . '/includes/images/photo.jpg';\n                }\n            } else {\n                $avatar = $SETTINGS['cpassman_url'] . '/includes/images/photo.jpg';\n            }\n\n            // Prepare action\n            $action = '';\n            $detail = '';\n            if ($reason[0] === 'at_pw') {\n                $action = langHdl($reason[0]);\n            } elseif ($record['action'] === 'at_manual') {\n                $detail = $reason[0];\n                $action = langHdl($record['action']);\n            } elseif ($reason[0] === 'at_description') {\n                $action = langHdl('description_has_changed');\n            } elseif (empty($record['raison']) === false && $reason[0] !== 'at_creation') {\n                $action = langHdl($reason[0]);\n                if ($reason[0] === 'at_moved') {\n                    $tmp = explode(' -> ', $reason[1]);\n                    $detail = langHdl('from') . ' <span class=\"font-weight-light\">' . $tmp[0] . '</span> ' . langHdl('to') . ' <span class=\"font-weight-light\">' . $tmp[1] . ' </span>';\n                } elseif ($reason[0] === 'at_field') {\n                    $tmp = explode(' => ', $reason[1]);\n                    if (count($tmp) > 1) {\n                        $detail = '<b>' . trim($tmp[0]) . '</b> | ' . langHdl('previous_value') .\n                            ': <span class=\"font-weight-light\">' . trim($tmp[1]) . '</span>';\n                    } else {\n                        $detail = trim($reason[1]);\n                    }\n                } elseif (in_array($reason[0], array('at_restriction', 'at_email', 'at_login', 'at_label', 'at_url', 'at_tag')) === true) {\n                    $tmp = explode(' => ', $reason[1]);\n                    $detail = empty(trim($tmp[0])) === true ?\n                        langHdl('no_previous_value') : langHdl('previous_value') . ': <span class=\"font-weight-light\">' . $tmp[0] . ' </span>';\n                } elseif ($reason[0] === 'at_automatic_del') {\n                    $detail = langHdl($reason[1]);\n                } elseif ($reason[0] === 'at_anyoneconmodify') {\n                    $detail = langHdl($reason[1]);\n                } elseif ($reason[0] === 'at_add_file' || $reason[0] === 'at_del_file') {\n                    $tmp = explode(':', $reason[1]);\n                    $tmp = explode('.', $tmp[0]);\n                    $detail = isBase64($tmp[0]) === true ?\n                        base64_decode($tmp[0]) . '.' . $tmp[1] : $tmp[0];\n                } elseif ($reason[0] === 'at_import') {\n                    $detail = '';\n                } elseif (in_array($reason[0], array('csv', 'pdf')) === true) {\n                    $detail = $reason[0];\n                    $action = langHdl('exported_to_file');\n                } else {\n                    $detail = $reason[0];\n                }\n            } else {\n                $detail = langHdl($record['action']);\n                $action = '';\n            }\n\n            array_push(\n                $history,\n                array(\n                    'avatar' => $avatar,\n                    'login' => $record['login'],\n                    'name' => $record['name'] . ' ' . $record['lastname'],\n                    'date' => date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], (int) $record['date']),\n                    'action' => $action,\n                    'detail' => $detail,\n                )\n            );\n        }\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'error' => '',\n                'history' => $history,\n            ],\n            'encode'\n        );\n\n        break;\n\n    case 'suggest_item_change':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $data_received = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $label = htmlspecialchars_decode($data_received['label'], ENT_QUOTES);\n        $pwd = htmlspecialchars_decode($data_received['password']);\n        $login = htmlspecialchars_decode($data_received['login'], ENT_QUOTES);\n        $email = htmlspecialchars_decode($data_received['email']);\n        $url = htmlspecialchars_decode($data_received['url']);\n        $folder = htmlspecialchars_decode($data_received['folder_id']);\n        $comment = htmlspecialchars_decode($data_received['comment']);\n        $item_id = htmlspecialchars_decode($data_received['item_id']);\n\n        if (empty($pwd)) {\n            $cryptedStuff['encrypted'] = '';\n            $cryptedStuff['objectKey'] = '';\n        } else {\n            $cryptedStuff = doDataEncryption($pwd);\n        }\n\n        // query\n        DB::insert(\n            prefixTable('items_change'),\n            array(\n                'item_id' => $item_id,\n                'label' => $label,\n                'pw' => $encrypt['string'],\n                'login' => $login,\n                'email' => $email,\n                'url' => $url,\n                'description' => '',\n                'comment' => $comment,\n                'folder_id' => $folder,\n                'user_id' => (int) $_SESSION['user_id'],\n                'timestamp' => time(),\n            )\n        );\n        $newID = DB::insertId();\n\n        // Create sharekeys for users\n        storeUsersShareKey(\n            prefixTable('sharekeys_items'),\n            0,\n            (int) $folder,\n            (int) $newID,\n            $cryptedStuff['objectKey'],\n            $SETTINGS\n        );\n\n        // get some info to add to the notification email\n        $resp_user = DB::queryfirstrow(\n            'SELECT login FROM ' . prefixTable('users') . ' WHERE id = %i',\n            $_SESSION['user_id']\n        );\n        $resp_folder = DB::queryfirstrow(\n            'SELECT title FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n            $folder\n        );\n\n        // notify Managers\n        $rows = DB::query(\n            'SELECT email\n            FROM ' . prefixTable('users') . '\n            WHERE `gestionnaire` = %i AND `email` IS NOT NULL',\n            1\n        );\n        foreach ($rows as $record) {\n            sendEmail(\n                langHdl('suggestion_notify_subject'),\n                str_replace(array('#tp_label#', '#tp_user#', '#tp_folder#'), array(addslashes($label), addslashes($resp_user['login']), addslashes($resp_folder['title'])), langHdl('suggestion_notify_body')),\n                $record['email'],\n                $SETTINGS\n            );\n        }\n\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => '',\n            ),\n            'encode'\n        );\n        break;\n\n    case 'build_list_of_users':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo '[ { \"error\" : \"key_not_conform\" } ]';\n            break;\n        }\n\n        // Get list of users\n        $usersList = array();\n        $usersString = '';\n        $rows = DB::query('SELECT id,login,email FROM ' . prefixTable('users') . ' ORDER BY login ASC');\n        foreach ($rows as $record) {\n            $usersList[$record['login']] = array(\n                'id' => $record['id'],\n                'login' => $record['login'],\n                'email' => $record['email'],\n            );\n            $usersString .= $record['id'] . '#' . $record['login'] . ';';\n        }\n\n        $data = array(\n            'error' => '',\n            'list' => $usersString,\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n        break;\n\n    case 'send_request_access':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        //$post_email_body = filter_var($dataReceived['email'], FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n        $inputData['itemId'] = (int) filter_var($dataReceived['id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Send email\n        $dataItem = DB::queryfirstrow(\n            'SELECT label, id_tree\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $inputData['itemId']\n        );\n        /*\n        $dataItemLog = DB::queryfirstrow(\n            'SELECT id_user\n            FROM ' . prefixTable('log_items') . '\n            WHERE id_item = %i AND action = %s',\n            $inputData['itemId'],\n            'at_creation'\n        );\n        $dataAuthor = DB::queryfirstrow(\n            'SELECT email, login\n            FROM ' . prefixTable('users') . '\n            WHERE id = %i',\n            $dataItemLog['id_user']\n        );\n\n        // Get path\n        $path = geItemReadablePath(\n            $dataItem['id_tree'],\n            $dataItem['label'],\n            $SETTINGS\n        );\n        */\n\n        /*$ret = sendEmail(\n            langHdl('email_request_access_subject'),\n            str_replace(\n                array(\n                    '#tp_item_author#',\n                    '#tp_user#',\n                    '#tp_item#',\n                    '#tp_reason#',\n                ),\n                array(\n                    ' '.addslashes($dataAuthor['login']),\n                    addslashes($_SESSION['login']),\n                    $path,\n                    nl2br(addslashes($post_email_body)),\n                ),\n                langHdl('email_request_access_mail')\n            ),\n            $dataAuthor['email'],\n            $SETTINGS\n        );*/\n\n        // Do log\n        logItems(\n            $SETTINGS,\n            (int) $inputData['itemId'],\n            $dataItem['label'],\n            $_SESSION['user_id'],\n            'at_access',\n            $_SESSION['login']\n        );\n\n        // Return\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            array(\n                'error' => false,\n                'message' => '',\n            ),\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * save_notification_status\n    */\n    case 'save_notification_status':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $post_notification_status = (int) filter_var($dataReceived['notification_status'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        DB::query(\n            'SELECT *\n            FROM ' . prefixTable('notification') . '\n            WHERE item_id = %i AND user_id = %i',\n            $inputData['itemId'],\n            $_SESSION['user_id']\n        );\n        if (DB::count() > 0) {\n            // Notification is set for this user on this item\n            if ((int) $post_notification_status === 0) {\n                // Remove the notification\n                DB::delete(\n                    prefixTable('notification'),\n                    'item_id = %i AND user_id = %i',\n                    $inputData['itemId'],\n                    $_SESSION['user_id']\n                );\n            }\n        } else {\n            // Notification is not set on this item\n            if ((int) $post_notification_status === 1) {\n                // Add the notification\n                DB::insert(\n                    prefixTable('notification'),\n                    array(\n                        'item_id' => $inputData['itemId'],\n                        'user_id' => (int) $_SESSION['user_id'],\n                    )\n                );\n            }\n        }\n\n        $data = array(\n            'error' => false,\n            'message' => '',\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * delete_uploaded_files_but_not_saved\n    */\n    case 'delete_uploaded_files_but_not_saved':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Delete non confirmed files for this item\n        // And related logs\n        $rows = DB::query(\n            'SELECT id, file AS filename\n            FROM ' . prefixTable('files') . '\n            WHERE id_item = %i AND confirmed = %i',\n            $inputData['itemId'],\n            0\n        );\n        foreach ($rows as $file) {\n            // Delete file in DB\n            DB::delete(\n                prefixTable('files'),\n                'id = %i',\n                $file['id']\n            );\n\n            // Delete file on server\n            unlink($SETTINGS['path_to_upload_folder'] . '/' . TP_FILE_PREFIX . base64_decode($file['filename']));\n\n            // Delete related logs\n            $logFile = DB::query(\n                'SELECT increment_id, raison\n                FROM ' . prefixTable('log_items') . '\n                WHERE id_item = %i AND id_user = %i AND action = %s AND raison LIKE \"at_add_file :%\"',\n                $inputData['itemId'],\n                $_SESSION['user_id'],\n                'at_modification'\n            );\n            foreach ($logFile as $log) {\n                $tmp = explode(':', $log['raison']);\n                if (count($tmp) === 3 && (int) $tmp[2] === (int) $file['id']) {\n                    DB::delete(\n                        prefixTable('log_items'),\n                        'increment_id = %i',\n                        $log['increment_id']\n                    );\n                }\n            }\n        }\n\n        $data = array(\n            'error' => false,\n            'message' => '',\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n\n        /*\n    * CASE\n    * confirm_attachments\n    */\n    case 'confirm_attachments':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $inputData['itemId'] = (int) filter_var($dataReceived['item_id'], FILTER_SANITIZE_NUMBER_INT);\n\n        // Confirm attachments\n        $rows = DB::query(\n            'SELECT id, file AS filename\n            FROM ' . prefixTable('files') . '\n            WHERE id_item = %i AND confirmed = %i',\n            $inputData['itemId'],\n            0\n        );\n        foreach ($rows as $file) {\n            DB::update(\n                prefixTable('files'),\n                array(\n                    'confirmed' => 1,\n                ),\n                'id_item = %i',\n                $inputData['itemId']\n            );\n        }\n\n        $data = array(\n            'error' => false,\n            'message' => '',\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n\n    /*\n    * CASE\n    * check_current_access_rights\n    */\n    case 'check_current_access_rights':\n        // Check KEY\n        if ($inputData['key'] !== $_SESSION['key']) {\n            echo (string) prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                array(\n                    'error' => 'key_not_conform',\n                    'message' => langHdl('key_is_not_correct'),\n                ),\n                'encode'\n            );\n            break;\n        }\n        // decrypt and retrieve data in JSON format\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $inputData['data'],\n            'decode'\n        );\n\n        // prepare variables\n        $inputData['userId'] = (int) filter_var($dataReceived['userId'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['itemId'] = (int) filter_var($dataReceived['itemId'], FILTER_SANITIZE_NUMBER_INT);\n        $inputData['treeId'] = (int) filter_var($dataReceived['treeId'], FILTER_SANITIZE_NUMBER_INT);\n\n        $data = DB::queryFirstRow(\n            'SELECT visible_folders\n            FROM ' . prefixTable('cache_tree') . ' WHERE user_id = %i',\n            $inputData['userId']\n        );\n        // Check if tree ID is in visible folders.\n        if (null !== $data['visible_folders']) {\n            $arr = json_decode($data['visible_folders'], true);\n            $ids = is_null($arr) === true ? [] : array_column($arr, 'id');\n        }\n\n\n        $data = array(\n            'error' => false,\n            'access' => isset($inputData['treeId']) === true && in_array($inputData['treeId'], $ids) === true ? true : false,\n        );\n\n        // send data\n        echo (string) prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $data,\n            'encode'\n        );\n\n        break;\n}\n\n// Build the QUERY in case of GET\nif (isset($inputData['getType'])) {\n    switch ($inputData['getType']) {\n        /*\n        * CASE\n        * Autocomplet for TAGS\n        */\n        case 'autocomplete_tags':\n            // Get a list off all existing TAGS\n            $listOfTags = '';\n            $rows = DB::query('SELECT tag FROM ' . prefixTable('tags') . ' WHERE tag LIKE %ss GROUP BY tag', $inputData['getTerm']);\n            foreach ($rows as $record) {\n                if (empty($listOfTags)) {\n                    $listOfTags = '\"' . $record['tag'] . '\"';\n                } else {\n                    $listOfTags .= ', \"' . $record['tag'] . '\"';\n                }\n            }\n            echo '[' . $listOfTags . ']';\n            break;\n    }\n}\n\n/**\n * Identify if this group authorize creation of item without the complexit level reached\n *\n * @param int $groupe ID for group\n *\n * @return array list of roles\n*/\nfunction recupDroitCreationSansComplexite($groupe)\n{\n    $data = DB::queryFirstRow(\n        'SELECT bloquer_creation, bloquer_modification, personal_folder\n        FROM ' . prefixTable('nested_tree') . ' WHERE id = %i',\n        $groupe\n    );\n    // Check if it's in a personal folder. If yes, then force complexity overhead.\n    if ($data !== null && (int) $data['personal_folder'] === 1) {\n        return array(\n            'bloquer_modification_complexite' => 1,\n            'bloquer_creation_complexite' => 1,\n        );\n    }\n\n    return array(\n        'bloquer_modification_complexite' => $data !== null ? (int) $data['bloquer_modification'] : 0,\n        'bloquer_creation_complexite' => $data !== null ? (int) $data['bloquer_creation'] : 0,\n    );\n}\n\n/**\n * Permits to identify what icon to display depending on file extension.\n *\n * @param string $ext extension\n *\n * @return string\n */\nfunction fileFormatImage($ext)\n{\n    if (in_array($ext, TP_OFFICE_FILE_EXT)) {\n        $image = 'fas fa-file-word';\n    } elseif ($ext === 'pdf') {\n        $image = 'fas fa-file-pdf';\n    } elseif (in_array($ext, TP_IMAGE_FILE_EXT)) {\n        $image = 'fas fa-file-image';\n    } elseif ($ext === 'txt') {\n        $image = 'fas fa-file-alt';\n    } else {\n        $image = 'fas fa-file';\n    }\n\n    return $image;\n}\n\n/**\n * Returns a cleaned up password.\n *\n * @param string $pwd String for pwd\n *\n * @return string\n */\nfunction passwordReplacement($pwd)\n{\n    $pwPatterns = array('/ETCOMMERCIAL/', '/SIGNEPLUS/');\n    $pwRemplacements = array('&', '+');\n\n    return preg_replace($pwPatterns, $pwRemplacements, $pwd);\n}\n"], "filenames": ["includes/js/functions.js", "install/install.queries.php", "install/upgrade_operations.php", "install/upgrade_run_3.0.php", "install/upgrade_scripts_manager.php", "pages/items.js.php", "pages/items.php", "sources/items.queries.php"], "buggy_code_start_loc": [402, 12, 90, 85, 41, 704, 178, 452], "buggy_code_end_loc": [483, 433, 142, 425, 41, 2862, 459, 5386], "fixing_code_start_loc": [403, 12, 90, 86, 42, 705, 178, 453], "fixing_code_end_loc": [495, 437, 228, 477, 45, 2854, 467, 5386], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository nilsteampassnet/teampass prior to 3.0.10.", "other": {"cve": {"id": "CVE-2023-3531", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-06T20:15:09.593", "lastModified": "2023-07-11T15:57:55.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository nilsteampassnet/teampass prior to 3.0.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teampass:teampass:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.10", "matchCriteriaId": "6C3D28BC-A4B7-45E4-8B54-0F13DFB41437"}]}]}], "references": [{"url": "https://github.com/nilsteampassnet/teampass/commit/cb8ea5ccca61653895bb6881547e463baa50293d", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/c9f0b3ff-bbc4-4ea1-a59e-8594b48bb414", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/nilsteampassnet/teampass/commit/cb8ea5ccca61653895bb6881547e463baa50293d"}}