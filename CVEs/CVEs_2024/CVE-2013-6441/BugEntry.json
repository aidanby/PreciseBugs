{"buggy_code": ["#!/bin/bash\n\n#\n# lxc: linux Container library\n\n# Authors:\n# Daniel Lezcano <daniel.lezcano@free.fr>\n\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\ninstall_sshd()\n{\n    rootfs=$1\n\n    tree=\"\\\n$rootfs/var/run/sshd \\\n$rootfs/var/empty/sshd \\\n$rootfs/var/lib/empty/sshd \\\n$rootfs/etc/init.d \\\n$rootfs/etc/rc.d \\\n$rootfs/etc/ssh \\\n$rootfs/etc/sysconfig/network-scripts \\\n$rootfs/dev/shm \\\n$rootfs/run/shm \\\n$rootfs/proc \\\n$rootfs/sys \\\n$rootfs/bin \\\n$rootfs/sbin \\\n$rootfs/usr \\\n$rootfs/tmp \\\n$rootfs/home \\\n$rootfs/root \\\n$rootfs/lib \\\n$rootfs/lib64\"\n\n    mkdir -p $tree\n    if [ $? -ne 0 ]; then\n        return 1\n    fi\n\n    return 0\n}\n\nconfigure_sshd()\n{\n    rootfs=$1\n\n    cat <<EOF > $rootfs/etc/passwd\nroot:x:0:0:root:/root:/bin/bash\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\nEOF\n\n    cat <<EOF > $rootfs/etc/group\nroot:x:0:root\nsshd:x:74:\nEOF\n\nssh-keygen -t rsa -N \"\" -f $rootfs/etc/ssh/ssh_host_rsa_key\nssh-keygen -t dsa -N \"\" -f $rootfs/etc/ssh/ssh_host_dsa_key\n\n    # by default setup root password with no password\n    cat <<EOF > $rootfs/etc/ssh/sshd_config\nPort 22\nProtocol 2\nHostKey /etc/ssh/ssh_host_rsa_key\nHostKey /etc/ssh/ssh_host_dsa_key\nUsePrivilegeSeparation yes\nKeyRegenerationInterval 3600\nServerKeyBits 768\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 120\nPermitRootLogin yes\nStrictModes yes\nRSAAuthentication yes\nPubkeyAuthentication yes\nIgnoreRhosts yes\nRhostsRSAAuthentication no\nHostbasedAuthentication no\nPermitEmptyPasswords yes\nChallengeResponseAuthentication no\nEOF\n\n    if [ -n \"$auth_key\" -a -f \"$auth_key\" ]; then\n        u_path=\"/root/.ssh\"\n        root_u_path=\"$rootfs/$u_path\"\n        mkdir -p $root_u_path\n        cp $auth_key \"$root_u_path/authorized_keys\"\n        chown -R 0:0 \"$rootfs/$u_path\"\n        chmod 700 \"$rootfs/$u_path\"\n        echo \"Inserted SSH public key from $auth_key into $rootfs/$u_path\"\n    fi\n\n    return 0\n}\n\ncopy_configuration()\n{\n    path=$1\n    rootfs=$2\n    name=$3\n\n    grep -q \"^lxc.rootfs\" $path/config 2>/dev/null || echo \"lxc.rootfs = $rootfs\" >> $path/config\ncat <<EOF >> $path/config\nlxc.utsname = $name\nlxc.pts = 1024\nlxc.kmsg = 0\nlxc.cap.drop = sys_module mac_admin mac_override sys_time\n\n# When using LXC with apparmor, uncomment the next line to run unconfined:\n#lxc.aa_profile = unconfined\n\nlxc.mount.entry = /dev dev none ro,bind 0 0\nlxc.mount.entry = /lib lib none ro,bind 0 0\nlxc.mount.entry = /bin bin none ro,bind 0 0\nlxc.mount.entry = /usr usr none ro,bind 0 0\nlxc.mount.entry = /sbin sbin none ro,bind 0 0\nlxc.mount.entry = tmpfs var/run/sshd tmpfs mode=0644 0 0\nlxc.mount.entry = @LXCTEMPLATEDIR@/lxc-sshd sbin/init none bind 0 0\nlxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0\nlxc.mount.entry = sysfs sys sysfs ro 0 0\nlxc.mount.entry = /etc/init.d etc/init.d none ro,bind 0 0\nEOF\n\n    # Oracle Linux and Fedora need the following two bind mounted\n    if [ -d /etc/sysconfig/network-scripts ]; then\n        cat <<EOF >> $path/config\nlxc.mount.entry = /etc/sysconfig/network-scripts etc/sysconfig/network-scripts none ro,bind 0 0\nEOF\n    fi\n\n    if [ -d /etc/rc.d ]; then\n        cat <<EOF >> $path/config\nlxc.mount.entry = /etc/rc.d etc/rc.d none ro,bind 0 0\nEOF\n    fi\n\n    # if no .ipv4 section in config, then have the container run dhcp\n    grep -q \"^lxc.network.ipv4\" $path/config || touch $rootfs/run-dhcp\n\n    if [ \"$(uname -m)\" = \"x86_64\" ]; then\n        cat <<EOF >> $path/config\nlxc.mount.entry = /lib64 lib64 none ro,bind 0 0\nEOF\n    fi\n}\n\nusage()\n{\n    cat <<EOF\n$1 -h|--help -p|--path=<path> [--rootfs=<path>]\nEOF\n    return 0\n}\n\ncheck_for_cmd()\n{\n    cmd_path=`type $1`\n    if [ $? -ne 0 ]; then\n        echo \"The command '$1' $cmd_path is not accessible on the system\"\n        exit 1\n    fi\n    # we use cut instead of awk because awk is alternatives symlink on ubuntu\n    # and /etc/alternatives isn't bind mounted\n    cmd_path=`echo $cmd_path |cut -d ' ' -f 3`\n}\n\noptions=$(getopt -o hp:n:S: -l help,rootfs:,path:,name:,auth-key: -- \"$@\")\nif [ $? -ne 0 ]; then\n        usage $(basename $0)\n    exit 1\nfi\neval set -- \"$options\"\n\nwhile true\ndo\n    case \"$1\" in\n        -h|--help)      usage $0 && exit 0;;\n        -p|--path)      path=$2; shift 2;;\n        --rootfs)       rootfs=$2; shift 2;;\n        -n|--name)      name=$2; shift 2;;\n        -S|--auth-key)  auth_key=$2; shift 2;;\n        --)             shift 1; break ;;\n        *)              break ;;\n    esac\ndone\n\nif [ \"$(id -u)\" != \"0\" ]; then\n    echo \"This script should be run as 'root'\"\n    exit 1\nfi\n\nif [ $0 == \"/sbin/init\" ]; then\n\n    PATH=\"$PATH:/bin:/sbin:/usr/sbin\"\n    check_for_cmd @LXCINITDIR@/lxc/lxc-init\n    check_for_cmd sshd\n    sshd_path=$cmd_path\n\n    # run dhcp?\n    if [ -f /run-dhcp ]; then\n        check_for_cmd dhclient\n        check_for_cmd ifconfig\n        touch /etc/fstab\n        rm -f /dhclient.conf\n        cat > /dhclient.conf << EOF\nsend host-name \"<hostname>\";\nEOF\n        ifconfig eth0 up\n        dhclient eth0 -cf /dhclient.conf\n        echo \"Container IP address:\"\n        ifconfig eth0 |grep inet\n    fi\n\n    exec @LXCINITDIR@/lxc/lxc-init -- $sshd_path\n    exit 1\nfi\n\nif [ -z \"$path\" ]; then\n    echo \"'path' parameter is required\"\n    exit 1\nfi\n\n# detect rootfs\nconfig=\"$path/config\"\nif [ -z \"$rootfs\" ]; then\n    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then\n        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)\n    else\n        rootfs=$path/rootfs\n    fi\nfi\n\ninstall_sshd $rootfs\nif [ $? -ne 0 ]; then\n    echo \"failed to install sshd's rootfs\"\n    exit 1\nfi\n\nconfigure_sshd $rootfs\nif [ $? -ne 0 ]; then\n    echo \"failed to configure sshd template\"\n    exit 1\nfi\n\ncopy_configuration $path $rootfs $name\nif [ $? -ne 0 ]; then\n    echo \"failed to write configuration file\"\n    exit 1\nfi\n"], "fixing_code": ["#!/bin/bash\n\n#\n# lxc: linux Container library\n\n# Authors:\n# Daniel Lezcano <daniel.lezcano@free.fr>\n\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\ninstall_sshd()\n{\n    rootfs=$1\n\n    tree=\"\\\n$rootfs/var/run/sshd \\\n$rootfs/var/empty/sshd \\\n$rootfs/var/lib/empty/sshd \\\n$rootfs/etc/init.d \\\n$rootfs/etc/rc.d \\\n$rootfs/etc/ssh \\\n$rootfs/etc/sysconfig/network-scripts \\\n$rootfs/dev/shm \\\n$rootfs/run/shm \\\n$rootfs/proc \\\n$rootfs/sys \\\n$rootfs/bin \\\n$rootfs/sbin \\\n$rootfs/usr \\\n$rootfs/tmp \\\n$rootfs/home \\\n$rootfs/root \\\n$rootfs/lib \\\n$rootfs/lib64\"\n\n    mkdir -p $tree\n    if [ $? -ne 0 ]; then\n        return 1\n    fi\n\n    return 0\n}\n\nconfigure_sshd()\n{\n    rootfs=$1\n\n    cat <<EOF > $rootfs/etc/passwd\nroot:x:0:0:root:/root:/bin/bash\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\nEOF\n\n    cat <<EOF > $rootfs/etc/group\nroot:x:0:root\nsshd:x:74:\nEOF\n\nssh-keygen -t rsa -N \"\" -f $rootfs/etc/ssh/ssh_host_rsa_key\nssh-keygen -t dsa -N \"\" -f $rootfs/etc/ssh/ssh_host_dsa_key\n\n    # by default setup root password with no password\n    cat <<EOF > $rootfs/etc/ssh/sshd_config\nPort 22\nProtocol 2\nHostKey /etc/ssh/ssh_host_rsa_key\nHostKey /etc/ssh/ssh_host_dsa_key\nUsePrivilegeSeparation yes\nKeyRegenerationInterval 3600\nServerKeyBits 768\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 120\nPermitRootLogin yes\nStrictModes yes\nRSAAuthentication yes\nPubkeyAuthentication yes\nIgnoreRhosts yes\nRhostsRSAAuthentication no\nHostbasedAuthentication no\nPermitEmptyPasswords yes\nChallengeResponseAuthentication no\nEOF\n\n    if [ -n \"$auth_key\" -a -f \"$auth_key\" ]; then\n        u_path=\"/root/.ssh\"\n        root_u_path=\"$rootfs/$u_path\"\n        mkdir -p $root_u_path\n        cp $auth_key \"$root_u_path/authorized_keys\"\n        chown -R 0:0 \"$rootfs/$u_path\"\n        chmod 700 \"$rootfs/$u_path\"\n        echo \"Inserted SSH public key from $auth_key into $rootfs/$u_path\"\n    fi\n\n    return 0\n}\n\ncopy_configuration()\n{\n    path=$1\n    rootfs=$2\n    name=$3\n\n    grep -q \"^lxc.rootfs\" $path/config 2>/dev/null || echo \"lxc.rootfs = $rootfs\" >> $path/config\ncat <<EOF >> $path/config\nlxc.utsname = $name\nlxc.pts = 1024\nlxc.kmsg = 0\nlxc.cap.drop = sys_module mac_admin mac_override sys_time\n\n# When using LXC with apparmor, uncomment the next line to run unconfined:\n#lxc.aa_profile = unconfined\n\nlxc.mount.entry = /dev dev none ro,bind 0 0\nlxc.mount.entry = /lib lib none ro,bind 0 0\nlxc.mount.entry = /bin bin none ro,bind 0 0\nlxc.mount.entry = /usr usr none ro,bind 0 0\nlxc.mount.entry = /sbin sbin none ro,bind 0 0\nlxc.mount.entry = tmpfs var/run/sshd tmpfs mode=0644 0 0\nlxc.mount.entry = @LXCTEMPLATEDIR@/lxc-sshd sbin/init none ro,bind 0 0\nlxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0\nlxc.mount.entry = sysfs sys sysfs ro 0 0\nlxc.mount.entry = /etc/init.d etc/init.d none ro,bind 0 0\nEOF\n\n    # Oracle Linux and Fedora need the following two bind mounted\n    if [ -d /etc/sysconfig/network-scripts ]; then\n        cat <<EOF >> $path/config\nlxc.mount.entry = /etc/sysconfig/network-scripts etc/sysconfig/network-scripts none ro,bind 0 0\nEOF\n    fi\n\n    if [ -d /etc/rc.d ]; then\n        cat <<EOF >> $path/config\nlxc.mount.entry = /etc/rc.d etc/rc.d none ro,bind 0 0\nEOF\n    fi\n\n    # if no .ipv4 section in config, then have the container run dhcp\n    grep -q \"^lxc.network.ipv4\" $path/config || touch $rootfs/run-dhcp\n\n    if [ \"$(uname -m)\" = \"x86_64\" ]; then\n        cat <<EOF >> $path/config\nlxc.mount.entry = /lib64 lib64 none ro,bind 0 0\nEOF\n    fi\n}\n\nusage()\n{\n    cat <<EOF\n$1 -h|--help -p|--path=<path> [--rootfs=<path>]\nEOF\n    return 0\n}\n\ncheck_for_cmd()\n{\n    cmd_path=`type $1`\n    if [ $? -ne 0 ]; then\n        echo \"The command '$1' $cmd_path is not accessible on the system\"\n        exit 1\n    fi\n    # we use cut instead of awk because awk is alternatives symlink on ubuntu\n    # and /etc/alternatives isn't bind mounted\n    cmd_path=`echo $cmd_path |cut -d ' ' -f 3`\n}\n\noptions=$(getopt -o hp:n:S: -l help,rootfs:,path:,name:,auth-key: -- \"$@\")\nif [ $? -ne 0 ]; then\n        usage $(basename $0)\n    exit 1\nfi\neval set -- \"$options\"\n\nwhile true\ndo\n    case \"$1\" in\n        -h|--help)      usage $0 && exit 0;;\n        -p|--path)      path=$2; shift 2;;\n        --rootfs)       rootfs=$2; shift 2;;\n        -n|--name)      name=$2; shift 2;;\n        -S|--auth-key)  auth_key=$2; shift 2;;\n        --)             shift 1; break ;;\n        *)              break ;;\n    esac\ndone\n\nif [ \"$(id -u)\" != \"0\" ]; then\n    echo \"This script should be run as 'root'\"\n    exit 1\nfi\n\nif [ $0 == \"/sbin/init\" ]; then\n\n    PATH=\"$PATH:/bin:/sbin:/usr/sbin\"\n    check_for_cmd @LXCINITDIR@/lxc/lxc-init\n    check_for_cmd sshd\n    sshd_path=$cmd_path\n\n    # run dhcp?\n    if [ -f /run-dhcp ]; then\n        check_for_cmd dhclient\n        check_for_cmd ifconfig\n        touch /etc/fstab\n        rm -f /dhclient.conf\n        cat > /dhclient.conf << EOF\nsend host-name \"<hostname>\";\nEOF\n        ifconfig eth0 up\n        dhclient eth0 -cf /dhclient.conf\n        echo \"Container IP address:\"\n        ifconfig eth0 |grep inet\n    fi\n\n    exec @LXCINITDIR@/lxc/lxc-init -- $sshd_path\n    exit 1\nfi\n\nif [ -z \"$path\" ]; then\n    echo \"'path' parameter is required\"\n    exit 1\nfi\n\n# detect rootfs\nconfig=\"$path/config\"\nif [ -z \"$rootfs\" ]; then\n    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then\n        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)\n    else\n        rootfs=$path/rootfs\n    fi\nfi\n\ninstall_sshd $rootfs\nif [ $? -ne 0 ]; then\n    echo \"failed to install sshd's rootfs\"\n    exit 1\nfi\n\nconfigure_sshd $rootfs\nif [ $? -ne 0 ]; then\n    echo \"failed to configure sshd template\"\n    exit 1\nfi\n\ncopy_configuration $path $rootfs $name\nif [ $? -ne 0 ]; then\n    echo \"failed to write configuration file\"\n    exit 1\nfi\n"], "filenames": ["templates/lxc-sshd.in"], "buggy_code_start_loc": [131], "buggy_code_end_loc": [132], "fixing_code_start_loc": [131], "fixing_code_end_loc": [132], "type": "CWE-264", "message": "The lxc-sshd template (templates/lxc-sshd.in) in LXC before 1.0.0.beta2 uses read-write permissions when mounting /sbin/init, which allows local users to gain privileges by modifying the init file.", "other": {"cve": {"id": "CVE-2013-6441", "sourceIdentifier": "secalert@redhat.com", "published": "2014-02-14T15:55:05.237", "lastModified": "2014-02-18T15:43:05.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The lxc-sshd template (templates/lxc-sshd.in) in LXC before 1.0.0.beta2 uses read-write permissions when mounting /sbin/init, which allows local users to gain privileges by modifying the init file."}, {"lang": "es", "value": "La plantilla lxc-sshd (templates/lxc-sshd.in) en LXC anterior a 1.0.0.beta2 utiliza permisos de lectura-escritura cuando monta /sbin/init, lo que permite a usuarios locales ganar privilegios mediante la modificaci\u00f3n del archivo init."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.9.0", "matchCriteriaId": "ADAA3CD5-2DF7-4FA5-8DE8-5C376D34988D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "5DA7C45E-2A61-42D6-82D3-7F5ED2581770"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "B089CD7B-9352-44DB-ACB3-6C5323FDE196"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "131DBF9F-7E49-46C7-B424-F8DFC9A30EA3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "E595E900-DB88-48D8-B6CB-21113FE3CC69"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "605B4EE9-57FA-4179-B430-7498148AC9C8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "228613D9-EFEB-43E2-BDBC-8D36A2993ED9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "5C47C5D5-05B5-4503-A8A3-AB26C44566FC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "77360E54-2092-4CA8-901D-EA9D70303BF5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "EEC62987-7602-44F3-B623-A39BD02D9234"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "0D5F42E8-B943-4F63-B1F9-525E96B7D880"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "864B9E0E-1D85-4120-8B58-D4298F0AA9D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "291971FE-7096-43E7-882A-AD01D14B8C45"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.6.4:*:*:*:*:*:*:*", "matchCriteriaId": "0164D9DA-0327-4644-B455-A92311C6AE5F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.6.5:*:*:*:*:*:*:*", "matchCriteriaId": "7DDEF7D0-A1E9-414B-A689-240C5DE683D1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "29978BE7-7E5B-4FF5-B35E-F7F0FD9E15B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "23130573-5884-4DC3-9F12-336B9D6807B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.2:*:*:*:*:*:*:*", "matchCriteriaId": "7D4D3880-C419-4741-ACBB-AC087A3A4BAC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.3:*:*:*:*:*:*:*", "matchCriteriaId": "389CE800-E958-4240-BDD6-56AB4A7A3859"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.4:*:*:*:*:*:*:*", "matchCriteriaId": "A6090283-B39F-4D8C-9756-5248A344509B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "E860AF3D-019C-4533-AF38-8251C34F6EC5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "A7760469-C409-473F-BD0E-6D52460324F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.7.5:*:*:*:*:*:*:*", "matchCriteriaId": "887CC2E2-8736-4B12-991C-0C7576ED00CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxcontainers:lxc:0.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "B5840AA1-C17A-4FCE-9299-648D002247C0"}]}]}], "references": [{"url": "http://www.ubuntu.com/usn/USN-2104-1", "source": "secalert@redhat.com"}, {"url": "https://bugs.launchpad.net/ubuntu/%2Bsource/lxc/%2Bbug/1261045", "source": "secalert@redhat.com"}, {"url": "https://github.com/dotcloud/lxc/pull/1", "source": "secalert@redhat.com"}, {"url": "https://github.com/lxc/lxc/commit/f4d5cc8e1f39d132b61e110674528cac727ae0e2", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/lxc/lxc/commit/f4d5cc8e1f39d132b61e110674528cac727ae0e2"}}