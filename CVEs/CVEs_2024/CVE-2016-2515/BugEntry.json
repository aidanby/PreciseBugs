{"buggy_code": ["'use strict';\n\n// Load modules\n\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Cryptiles = require('cryptiles');\nconst Crypto = require('./crypto');\nconst Utils = require('./utils');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Hawk authentication\n\n/*\n   req:                 node's HTTP request object or an object as follows:\n\n                        const request = {\n                            method: 'GET',\n                            url: '/resource/4?a=1&b=2',\n                            host: 'example.com',\n                            port: 8080,\n                            authorization: 'Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", ext=\"some-app-ext-data\", mac=\"6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\"'\n                        };\n\n   credentialsFunc:     required function to lookup the set of Hawk credentials based on the provided credentials id.\n                        The credentials include the MAC key, MAC algorithm, and other attributes (such as username)\n                        needed by the application. This function is the equivalent of verifying the username and\n                        password in Basic authentication.\n\n                        const credentialsFunc = function (id, callback) {\n\n                            // Lookup credentials in database\n                            db.lookup(id, function (err, item) {\n\n                                if (err || !item) {\n                                    return callback(err);\n                                }\n\n                                const credentials = {\n                                    // Required\n                                    key: item.key,\n                                    algorithm: item.algorithm,\n                                    // Application specific\n                                    user: item.user\n                                };\n\n                                return callback(null, credentials);\n                            });\n                        };\n\n   options: {\n\n        hostHeaderName:        optional header field name, used to override the default 'Host' header when used\n                               behind a cache of a proxy. Apache2 changes the value of the 'Host' header while preserving\n                               the original (which is what the module must verify) in the 'x-forwarded-host' header field.\n                               Only used when passed a node Http.ServerRequest object.\n\n        nonceFunc:             optional nonce validation function. The function signature is function(key, nonce, ts, callback)\n                               where 'callback' must be called using the signature function(err).\n\n        timestampSkewSec:      optional number of seconds of permitted clock skew for incoming timestamps. Defaults to 60 seconds.\n                               Provides a +/- skew which means actual allowed window is double the number of seconds.\n\n        localtimeOffsetMsec:   optional local clock time offset express in a number of milliseconds (positive or negative).\n                               Defaults to 0.\n\n        payload:               optional payload for validation. The client calculates the hash value and includes it via the 'hash'\n                               header attribute. The server always ensures the value provided has been included in the request\n                               MAC. When this option is provided, it validates the hash value itself. Validation is done by calculating\n                               a hash value over the entire payload (assuming it has already be normalized to the same format and\n                               encoding used by the client to calculate the hash on request). If the payload is not available at the time\n                               of authentication, the authenticatePayload() method can be used by passing it the credentials and\n                               attributes.hash returned in the authenticate callback.\n\n        host:                  optional host name override. Only used when passed a node request object.\n        port:                  optional port override. Only used when passed a node request object.\n    }\n\n    callback: function (err, credentials, artifacts) { }\n */\n\nexports.authenticate = function (req, credentialsFunc, options, callback) {\n\n    callback = Hoek.nextTick(callback);\n\n    // Default options\n\n    options.nonceFunc = options.nonceFunc || internals.nonceFunc;\n    options.timestampSkewSec = options.timestampSkewSec || 60;                                                  // 60 seconds\n\n    // Application time\n\n    const now = Utils.now(options.localtimeOffsetMsec);                           // Measure now before any other processing\n\n    // Convert node Http request object to a request configuration object\n\n    const request = Utils.parseRequest(req, options);\n    if (request instanceof Error) {\n        return callback(Boom.badRequest(request.message));\n    }\n\n    // Parse HTTP Authorization header\n\n    const attributes = Utils.parseAuthorizationHeader(request.authorization);\n    if (attributes instanceof Error) {\n        return callback(attributes);\n    }\n\n    // Construct artifacts container\n\n    const artifacts = {\n        method: request.method,\n        host: request.host,\n        port: request.port,\n        resource: request.url,\n        ts: attributes.ts,\n        nonce: attributes.nonce,\n        hash: attributes.hash,\n        ext: attributes.ext,\n        app: attributes.app,\n        dlg: attributes.dlg,\n        mac: attributes.mac,\n        id: attributes.id\n    };\n\n    // Verify required header attributes\n\n    if (!attributes.id ||\n        !attributes.ts ||\n        !attributes.nonce ||\n        !attributes.mac) {\n\n        return callback(Boom.badRequest('Missing attributes'), null, artifacts);\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(attributes.id, (err, credentials) => {\n\n        if (err) {\n            return callback(err, credentials || null, artifacts);\n        }\n\n        if (!credentials) {\n            return callback(Utils.unauthorized('Unknown credentials'), null, artifacts);\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials, artifacts);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials, artifacts);\n        }\n\n        // Calculate MAC\n\n        const mac = Crypto.calculateMac('header', credentials, artifacts);\n        if (!Cryptiles.fixedTimeComparison(mac, attributes.mac)) {\n            return callback(Utils.unauthorized('Bad mac'), credentials, artifacts);\n        }\n\n        // Check payload hash\n\n        if (options.payload ||\n            options.payload === '') {\n\n            if (!attributes.hash) {\n                return callback(Utils.unauthorized('Missing required payload hash'), credentials, artifacts);\n            }\n\n            const hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, request.contentType);\n            if (!Cryptiles.fixedTimeComparison(hash, attributes.hash)) {\n                return callback(Utils.unauthorized('Bad payload hash'), credentials, artifacts);\n            }\n        }\n\n        // Check nonce\n\n        options.nonceFunc(credentials.key, attributes.nonce, attributes.ts, (err) => {\n\n            if (err) {\n                return callback(Utils.unauthorized('Invalid nonce'), credentials, artifacts);\n            }\n\n            // Check timestamp staleness\n\n            if (Math.abs((attributes.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {\n                const tsm = Crypto.timestampMessage(credentials, options.localtimeOffsetMsec);\n                return callback(Utils.unauthorized('Stale timestamp', tsm), credentials, artifacts);\n            }\n\n            // Successful authentication\n\n            return callback(null, credentials, artifacts);\n        });\n    });\n};\n\n\n// Authenticate payload hash - used when payload cannot be provided during authenticate()\n\n/*\n    payload:        raw request payload\n    credentials:    from authenticate callback\n    artifacts:      from authenticate callback\n    contentType:    req.headers['content-type']\n*/\n\nexports.authenticatePayload = function (payload, credentials, artifacts, contentType) {\n\n    const calculatedHash = Crypto.calculatePayloadHash(payload, credentials.algorithm, contentType);\n    return Cryptiles.fixedTimeComparison(calculatedHash, artifacts.hash);\n};\n\n\n// Authenticate payload hash - used when payload cannot be provided during authenticate()\n\n/*\n    calculatedHash: the payload hash calculated using Crypto.calculatePayloadHash()\n    artifacts:      from authenticate callback\n*/\n\nexports.authenticatePayloadHash = function (calculatedHash, artifacts) {\n\n    return Cryptiles.fixedTimeComparison(calculatedHash, artifacts.hash);\n};\n\n\n// Generate a Server-Authorization header for a given response\n\n/*\n    credentials: {},                                        // Object received from authenticate()\n    artifacts: {}                                           // Object received from authenticate(); 'mac', 'hash', and 'ext' - ignored\n    options: {\n        ext: 'application-specific',                        // Application specific data sent via the ext attribute\n        payload: '{\"some\":\"payload\"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)\n        contentType: 'application/json',                    // Payload content-type (ignored if hash provided)\n        hash: 'U4MKKSmiVxk37JCCrAVIjV='                     // Pre-calculated payload hash\n    }\n*/\n\nexports.header = function (credentials, artifacts, options) {\n\n    // Prepare inputs\n\n    options = options || {};\n\n    if (!artifacts ||\n        typeof artifacts !== 'object' ||\n        typeof options !== 'object') {\n\n        return '';\n    }\n\n    artifacts = Hoek.clone(artifacts);\n    delete artifacts.mac;\n    artifacts.hash = options.hash;\n    artifacts.ext = options.ext;\n\n    // Validate credentials\n\n    if (!credentials ||\n        !credentials.key ||\n        !credentials.algorithm) {\n\n        // Invalid credential object\n        return '';\n    }\n\n    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n        return '';\n    }\n\n    // Calculate payload hash\n\n    if (!artifacts.hash &&\n        (options.payload || options.payload === '')) {\n\n        artifacts.hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);\n    }\n\n    const mac = Crypto.calculateMac('response', credentials, artifacts);\n\n    // Construct header\n\n    let header = 'Hawk mac=\"' + mac + '\"' +\n                 (artifacts.hash ? ', hash=\"' + artifacts.hash + '\"' : '');\n\n    if (artifacts.ext !== null &&\n        artifacts.ext !== undefined &&\n        artifacts.ext !== '') {                       // Other falsey values allowed\n\n        header = header + ', ext=\"' + Hoek.escapeHeaderAttribute(artifacts.ext) + '\"';\n    }\n\n    return header;\n};\n\n\n/*\n * Arguments and options are the same as authenticate() with the exception that the only supported options are:\n * 'hostHeaderName', 'localtimeOffsetMsec', 'host', 'port'\n */\n\nexports.authenticateBewit = function (req, credentialsFunc, options, callback) {\n\n    callback = Hoek.nextTick(callback);\n\n    // Application time\n\n    const now = Utils.now(options.localtimeOffsetMsec);\n\n    // Convert node Http request object to a request configuration object\n\n    const request = Utils.parseRequest(req, options);\n    if (request instanceof Error) {\n        return callback(Boom.badRequest(request.message));\n    }\n\n    // Extract bewit\n\n    //                                 1     2             3           4\n    const resource = request.url.match(/^(\\/.*)([\\?&])bewit\\=([^&$]*)(?:&(.+))?$/);\n    if (!resource) {\n        return callback(Utils.unauthorized());\n    }\n\n    // Bewit not empty\n\n    if (!resource[3]) {\n        return callback(Utils.unauthorized('Empty bewit'));\n    }\n\n    // Verify method is GET\n\n    if (request.method !== 'GET' &&\n        request.method !== 'HEAD') {\n\n        return callback(Utils.unauthorized('Invalid method'));\n    }\n\n    // No other authentication\n\n    if (request.authorization) {\n        return callback(Boom.badRequest('Multiple authentications'));\n    }\n\n    // Parse bewit\n\n    const bewitString = Hoek.base64urlDecode(resource[3]);\n    if (bewitString instanceof Error) {\n        return callback(Boom.badRequest('Invalid bewit encoding'));\n    }\n\n    // Bewit format: id\\exp\\mac\\ext ('\\' is used because it is a reserved header attribute character)\n\n    const bewitParts = bewitString.split('\\\\');\n    if (bewitParts.length !== 4) {\n        return callback(Boom.badRequest('Invalid bewit structure'));\n    }\n\n    const bewit = {\n        id: bewitParts[0],\n        exp: parseInt(bewitParts[1], 10),\n        mac: bewitParts[2],\n        ext: bewitParts[3] || ''\n    };\n\n    if (!bewit.id ||\n        !bewit.exp ||\n        !bewit.mac) {\n\n        return callback(Boom.badRequest('Missing bewit attributes'));\n    }\n\n    // Construct URL without bewit\n\n    let url = resource[1];\n    if (resource[4]) {\n        url = url + resource[2] + resource[4];\n    }\n\n    // Check expiration\n\n    if (bewit.exp * 1000 <= now) {\n        return callback(Utils.unauthorized('Access expired'), null, bewit);\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(bewit.id, (err, credentials) => {\n\n        if (err) {\n            return callback(err, credentials || null, bewit.ext);\n        }\n\n        if (!credentials) {\n            return callback(Utils.unauthorized('Unknown credentials'), null, bewit);\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials, bewit);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials, bewit);\n        }\n\n        // Calculate MAC\n\n        const mac = Crypto.calculateMac('bewit', credentials, {\n            ts: bewit.exp,\n            nonce: '',\n            method: 'GET',\n            resource: url,\n            host: request.host,\n            port: request.port,\n            ext: bewit.ext\n        });\n\n        if (!Cryptiles.fixedTimeComparison(mac, bewit.mac)) {\n            return callback(Utils.unauthorized('Bad mac'), credentials, bewit);\n        }\n\n        // Successful authentication\n\n        return callback(null, credentials, bewit);\n    });\n};\n\n\n/*\n *  options are the same as authenticate() with the exception that the only supported options are:\n * 'nonceFunc', 'timestampSkewSec', 'localtimeOffsetMsec'\n */\n\nexports.authenticateMessage = function (host, port, message, authorization, credentialsFunc, options, callback) {\n\n    callback = Hoek.nextTick(callback);\n\n    // Default options\n\n    options.nonceFunc = options.nonceFunc || internals.nonceFunc;\n    options.timestampSkewSec = options.timestampSkewSec || 60;                                                  // 60 seconds\n\n    // Application time\n\n    const now = Utils.now(options.localtimeOffsetMsec);                       // Measure now before any other processing\n\n    // Validate authorization\n\n    if (!authorization.id ||\n        !authorization.ts ||\n        !authorization.nonce ||\n        !authorization.hash ||\n        !authorization.mac) {\n\n        return callback(Boom.badRequest('Invalid authorization'));\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(authorization.id, (err, credentials) => {\n\n        if (err) {\n            return callback(err, credentials || null);\n        }\n\n        if (!credentials) {\n            return callback(Utils.unauthorized('Unknown credentials'));\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials);\n        }\n\n        // Construct artifacts container\n\n        const artifacts = {\n            ts: authorization.ts,\n            nonce: authorization.nonce,\n            host: host,\n            port: port,\n            hash: authorization.hash\n        };\n\n        // Calculate MAC\n\n        const mac = Crypto.calculateMac('message', credentials, artifacts);\n        if (!Cryptiles.fixedTimeComparison(mac, authorization.mac)) {\n            return callback(Utils.unauthorized('Bad mac'), credentials);\n        }\n\n        // Check payload hash\n\n        const hash = Crypto.calculatePayloadHash(message, credentials.algorithm);\n        if (!Cryptiles.fixedTimeComparison(hash, authorization.hash)) {\n            return callback(Utils.unauthorized('Bad message hash'), credentials);\n        }\n\n        // Check nonce\n\n        options.nonceFunc(credentials.key, authorization.nonce, authorization.ts, (err) => {\n\n            if (err) {\n                return callback(Utils.unauthorized('Invalid nonce'), credentials);\n            }\n\n            // Check timestamp staleness\n\n            if (Math.abs((authorization.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {\n                return callback(Utils.unauthorized('Stale timestamp'), credentials);\n            }\n\n            // Successful authentication\n\n            return callback(null, credentials);\n        });\n    });\n};\n\n\ninternals.nonceFunc = function (key, nonce, ts, nonceCallback) {\n\n    return nonceCallback();         // No validation\n};\n", "'use strict';\n\n// Load modules\n\nconst Sntp = require('sntp');\nconst Boom = require('boom');\n\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.version = function () {\n\n    return require('../package.json').version;\n};\n\n\n// Extract host and port from request\n\n//                                            $1                            $2\ninternals.hostHeaderRegex = /^(?:(?:\\r\\n)?\\s)*((?:[^:]+)|(?:\\[[^\\]]+\\]))(?::(\\d+))?(?:(?:\\r\\n)?\\s)*$/;              // (IPv4, hostname)|(IPv6)\n\n\nexports.parseHost = function (req, hostHeaderName) {\n\n    hostHeaderName = (hostHeaderName ? hostHeaderName.toLowerCase() : 'host');\n    const hostHeader = req.headers[hostHeaderName];\n    if (!hostHeader) {\n        return null;\n    }\n\n    const hostParts = hostHeader.match(internals.hostHeaderRegex);\n    if (!hostParts) {\n        return null;\n    }\n\n    return {\n        name: hostParts[1],\n        port: (hostParts[2] ? hostParts[2] : (req.connection && req.connection.encrypted ? 443 : 80))\n    };\n};\n\n\n// Parse Content-Type header content\n\nexports.parseContentType = function (header) {\n\n    if (!header) {\n        return '';\n    }\n\n    return header.split(';')[0].trim().toLowerCase();\n};\n\n\n// Convert node's  to request configuration object\n\nexports.parseRequest = function (req, options) {\n\n    if (!req.headers) {\n        return req;\n    }\n\n    // Obtain host and port information\n\n    let host;\n    if (!options.host ||\n        !options.port) {\n\n        host = exports.parseHost(req, options.hostHeaderName);\n        if (!host) {\n            return new Error('Invalid Host header');\n        }\n    }\n\n    const request = {\n        method: req.method,\n        url: req.url,\n        host: options.host || host.name,\n        port: options.port || host.port,\n        authorization: req.headers.authorization,\n        contentType: req.headers['content-type'] || ''\n    };\n\n    return request;\n};\n\n\nexports.now = function (localtimeOffsetMsec) {\n\n    return Sntp.now() + (localtimeOffsetMsec || 0);\n};\n\n\nexports.nowSecs = function (localtimeOffsetMsec) {\n\n    return Math.floor(exports.now(localtimeOffsetMsec) / 1000);\n};\n\n\n// Parse Hawk HTTP Authorization header\n\nexports.parseAuthorizationHeader = function (header, keys) {\n\n    keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];\n\n    if (!header) {\n        return Boom.unauthorized(null, 'Hawk');\n    }\n\n    const headerParts = header.match(/^(\\w+)(?:\\s+(.*))?$/);       // Header: scheme[ something]\n    if (!headerParts) {\n        return Boom.badRequest('Invalid header syntax');\n    }\n\n    const scheme = headerParts[1];\n    if (scheme.toLowerCase() !== 'hawk') {\n        return Boom.unauthorized(null, 'Hawk');\n    }\n\n    const attributesString = headerParts[2];\n    if (!attributesString) {\n        return Boom.badRequest('Invalid header syntax');\n    }\n\n    const attributes = {};\n    let errorMessage = '';\n    const verify = attributesString.replace(/(\\w+)=\"([^\"\\\\]*)\"\\s*(?:,\\s*|$)/g, ($0, $1, $2) => {\n\n        // Check valid attribute names\n\n        if (keys.indexOf($1) === -1) {\n            errorMessage = 'Unknown attribute: ' + $1;\n            return;\n        }\n\n        // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n\n        if ($2.match(/^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/) === null) {\n            errorMessage = 'Bad attribute value: ' + $1;\n            return;\n        }\n\n        // Check for duplicates\n\n        if (attributes.hasOwnProperty($1)) {\n            errorMessage = 'Duplicate attribute: ' + $1;\n            return;\n        }\n\n        attributes[$1] = $2;\n        return '';\n    });\n\n    if (verify !== '') {\n        return Boom.badRequest(errorMessage || 'Bad header format');\n    }\n\n    return attributes;\n};\n\n\nexports.unauthorized = function (message, attributes) {\n\n    return Boom.unauthorized(message || null, 'Hawk', attributes);\n};\n\n", "{\n  \"name\": \"hawk\",\n  \"description\": \"HTTP Hawk Authentication Scheme\",\n  \"version\": \"4.1.0\",\n  \"author\": \"Eran Hammer <eran@hammer.io> (http://hueniverse.com)\",\n  \"repository\": \"git://github.com/hueniverse/hawk\",\n  \"main\": \"lib/index.js\",\n  \"browser\": \"dist/browser.js\",\n  \"keywords\": [\n    \"http\",\n    \"authentication\",\n    \"scheme\",\n    \"hawk\"\n  ],\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"dependencies\": {\n    \"hoek\": \"3.x.x\",\n    \"boom\": \"3.x.x\",\n    \"cryptiles\": \"3.x.x\",\n    \"sntp\": \"2.x.x\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.1.2\",\n    \"babel-preset-es2015\": \"^6.1.2\",\n    \"code\": \"2.x.x\",\n    \"lab\": \"8.x.x\"\n  },\n  \"babel\": {\n    \"presets\": [\"es2015\"]\n  },\n  \"scripts\": {\n    \"build-client\": \"mkdir -p dist; babel lib/browser.js --out-file dist/browser.js\",\n    \"prepublish\": \"npm run-script build-client\",\n    \"test\": \"lab -a code -t 100 -L\",\n    \"test-cov-html\": \"lab -a code -r html -o coverage.html\"\n  },\n  \"license\": \"BSD-3-Clause\"\n}\n", "'use strict';\n\n// Load modules\n\nconst Code = require('code');\nconst Hawk = require('../lib');\nconst Hoek = require('hoek');\nconst Lab = require('lab');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Test shortcuts\n\nconst lab = exports.lab = Lab.script();\nconst describe = lab.experiment;\nconst it = lab.test;\nconst expect = Code.expect;\n\n\ndescribe('Server', () => {\n\n    const credentialsFunc = function (id, callback) {\n\n        const credentials = {\n            id: id,\n            key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n            algorithm: (id === '1' ? 'sha1' : 'sha256'),\n            user: 'steve'\n        };\n\n        return callback(null, credentials);\n    };\n\n    describe('authenticate()', () => {\n\n        it('parses a valid authentication header (sha1)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (sha256)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/1?b=1&a=2',\n                host: 'example.com',\n                port: 8000,\n                authorization: 'Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", mac=\"m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=\", ext=\"some-app-data\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353832234000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (host override)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example1.com:8080',\n                    authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (host port override)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example1.com:80',\n                    authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', port: 8080, localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (POST with payload)', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123456\", ts=\"1357926341\", nonce=\"1AwuJD\", hash=\"qAiXIVv+yjDATneWxZP2YCTa9aHRgQdnH9b3Wc+o3dg=\", ext=\"some-app-data\", mac=\"UeYcj5UoTVaAWXNvJfLVia7kU3VabxCqrccXP8sUGC4=\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1357926341000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('errors on missing hash', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/1?b=1&a=2',\n                host: 'example.com',\n                port: 8000,\n                authorization: 'Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", mac=\"m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=\", ext=\"some-app-data\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { payload: 'body', localtimeOffsetMsec: 1353832234000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing required payload hash');\n                done();\n            });\n        });\n\n        it('errors on a stale timestamp', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123456\", ts=\"1362337299\", nonce=\"UzmxSs\", ext=\"some-app-data\", mac=\"wnNUxchvvryMH2RxckTdZ/gY3ijzvccx4keVvELC61w=\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, {}, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Stale timestamp');\n                const header = err.output.headers['WWW-Authenticate'];\n                const ts = header.match(/^Hawk ts\\=\\\"(\\d+)\\\"\\, tsm\\=\\\"([^\\\"]+)\\\"\\, error=\\\"Stale timestamp\\\"$/);\n                const now = Hawk.utils.now();\n                expect(parseInt(ts[1], 10) * 1000).to.be.within(now - 1000, now + 1000);\n\n                const res = {\n                    headers: {\n                        'www-authenticate': header\n                    }\n                };\n\n                expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal(true);\n                done();\n            });\n        });\n\n        it('errors on a replay', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw=\", ext=\"hello\"'\n            };\n\n            const memoryCache = {};\n            const options = {\n                localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(),\n                nonceFunc: function (key, nonce, ts, callback) {\n\n                    if (memoryCache[key + nonce]) {\n                        return callback(new Error());\n                    }\n\n                    memoryCache[key + nonce] = true;\n                    return callback();\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, options, (err, credentials1, artifacts1) => {\n\n                expect(err).to.not.exist();\n                expect(credentials1.user).to.equal('steve');\n\n                Hawk.server.authenticate(req, credentialsFunc, options, (err, credentials2, artifacts2) => {\n\n                    expect(err).to.exist();\n                    expect(err.output.payload.message).to.equal('Invalid nonce');\n                    done();\n                });\n            });\n        });\n\n        it('does not error on nonce collision if keys differ', (done) => {\n\n            const reqSteve = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw=\", ext=\"hello\"'\n            };\n\n            const reqBob = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"456\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"LXfmTnRzrLd9TD7yfH+4se46Bx6AHyhpM94hLCiNia4=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    '123': {\n                        id: id,\n                        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                        algorithm: (id === '1' ? 'sha1' : 'sha256'),\n                        user: 'steve'\n                    },\n                    '456': {\n                        id: id,\n                        key: 'xrunpaw3489ruxnpa98w4rxnwerxhqb98rpaxn39848',\n                        algorithm: (id === '1' ? 'sha1' : 'sha256'),\n                        user: 'bob'\n                    }\n                };\n\n                return callback(null, credentials[id]);\n            };\n\n            const memoryCache = {};\n            const options = {\n                localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(),\n                nonceFunc: function (key, nonce, ts, callback) {\n\n                    if (memoryCache[key + nonce]) {\n                        return callback(new Error());\n                    }\n\n                    memoryCache[key + nonce] = true;\n                    return callback();\n                }\n            };\n\n            Hawk.server.authenticate(reqSteve, credentialsFuncion, options, (err, credentials1, artifacts1) => {\n\n                expect(err).to.not.exist();\n                expect(credentials1.user).to.equal('steve');\n\n                Hawk.server.authenticate(reqBob, credentialsFuncion, options, (err, credentials2, artifacts2) => {\n\n                    expect(err).to.not.exist();\n                    expect(credentials2.user).to.equal('bob');\n                    done();\n                });\n            });\n        });\n\n        it('errors on an invalid authentication header: wrong scheme', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Basic asdasdasdasd'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.not.exist();\n                done();\n            });\n        });\n\n        it('errors on an invalid authentication header: no scheme', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: '!@#'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid header syntax');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization header', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, {}, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.isMissing).to.equal(true);\n                done();\n            });\n        });\n\n        it('errors on an missing host header', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid Host header');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (id)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (ts)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (nonce)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (mac)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an unknown authorization attribute', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", x=\"3\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Unknown attribute: x');\n                done();\n            });\n        });\n\n        it('errors on an bad authorization header format', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\\\\\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad header format');\n                done();\n            });\n        });\n\n        it('errors on an bad authorization attribute value', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"\\t\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad attribute value: id');\n                done();\n            });\n        });\n\n        it('errors on an empty authorization attribute value', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad attribute value: id');\n                done();\n            });\n        });\n\n        it('errors on duplicated authorization attribute key', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", id=\"456\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Duplicate attribute: id');\n                done();\n            });\n        });\n\n        it('errors on an invalid authorization header format', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid header syntax');\n                done();\n            });\n        });\n\n        it('errors on an bad host header (missing host)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: ':8080',\n                    authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid Host header');\n                done();\n            });\n        });\n\n        it('errors on an bad host header (pad port)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example.com:something',\n                    authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid Host header');\n                done();\n            });\n        });\n\n        it('errors on credentialsFunc error', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                return callback(new Error('Unknown user'));\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Unknown user');\n                done();\n            });\n        });\n\n        it('errors on credentialsFunc error (with credentials)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                return callback(new Error('Unknown user'), { some: 'value' });\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Unknown user');\n                expect(credentials.some).to.equal('value');\n                done();\n            });\n        });\n\n        it('errors on missing credentials', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                return callback(null, null);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Unknown credentials');\n                done();\n            });\n        });\n\n        it('errors on invalid credentials (id)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Invalid credentials');\n                expect(err.output.payload.message).to.equal('An internal server error occurred');\n                done();\n            });\n        });\n\n        it('errors on invalid credentials (key)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    id: '23434d3q4d5345d',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Invalid credentials');\n                expect(err.output.payload.message).to.equal('An internal server error occurred');\n                done();\n            });\n        });\n\n        it('errors on unknown credentials algorithm', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                    algorithm: 'hmac-sha-0',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Unknown algorithm');\n                expect(err.output.payload.message).to.equal('An internal server error occurred');\n                done();\n            });\n        });\n\n        it('errors on unknown bad mac', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcU4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                    algorithm: 'sha256',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad mac');\n                done();\n            });\n        });\n    });\n\n    describe('header()', () => {\n\n        it('generates header', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('Hawk mac=\\\"n14wVJK4cOxAytPUMc5bPezQzuJGl5n7MYXhFQgEKsE=\\\", hash=\\\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\\\", ext=\\\"response-specific\\\"');\n            done();\n        });\n\n        it('generates header (empty payload)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: '', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('Hawk mac=\\\"i8/kUBDx0QF+PpCtW860kkV/fa9dbwEoe/FpGUXowf0=\\\", hash=\\\"q/t+NNAkQZNlq/aAD6PlexImwQTxwgT2MahfTa9XRLA=\\\", ext=\\\"response-specific\\\"');\n            done();\n        });\n\n        it('generates header (pre calculated hash)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const options = { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' };\n            options.hash = Hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);\n            const header = Hawk.server.header(credentials, artifacts, options);\n            expect(header).to.equal('Hawk mac=\\\"n14wVJK4cOxAytPUMc5bPezQzuJGl5n7MYXhFQgEKsE=\\\", hash=\\\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\\\", ext=\\\"response-specific\\\"');\n            done();\n        });\n\n        it('generates header (null ext)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: null });\n            expect(header).to.equal('Hawk mac=\\\"6PrybJTJs20jsgBw5eilXpcytD8kUbaIKNYXL+6g0ns=\\\", hash=\\\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\\\"');\n            done();\n        });\n\n        it('errors on missing artifacts', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const header = Hawk.server.header(credentials, null, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on invalid artifacts', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const header = Hawk.server.header(credentials, 5, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on missing credentials', (done) => {\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(null, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on invalid credentials (key)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on invalid algorithm', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'x',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n    });\n\n    describe('authenticateMessage()', () => {\n\n        it('errors on invalid authorization (ts)', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                delete auth.ts;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('errors on invalid authorization (nonce)', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                delete auth.nonce;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('errors on invalid authorization (hash)', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                delete auth.hash;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('errors with credentials', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, (id, callback) => {\n\n                    callback(new Error('something'), { some: 'value' });\n                }, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('something');\n                    expect(credentials2.some).to.equal('value');\n                    done();\n                });\n            });\n        });\n\n        it('errors on nonce collision', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {\n                    nonceFunc: function (key, nonce, ts, nonceCallback) {\n\n                        nonceCallback(true);\n                    }\n                }, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid nonce');\n                    done();\n                });\n            });\n        });\n\n        it('should generate an authorization then successfully parse it', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.not.exist();\n                    expect(credentials2.user).to.equal('steve');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on mismatching host', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example1.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Bad mac');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on stale timestamp', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { localtimeOffsetMsec: 100000 }, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Stale timestamp');\n                    done();\n                });\n            });\n        });\n\n        it('overrides timestampSkewSec', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1, localtimeOffsetMsec: 100000 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { timestampSkewSec: 500 }, (err, credentials2) => {\n\n                    expect(err).to.not.exist();\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on invalid authorization', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n                delete auth.id;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on bad hash', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message1', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Bad message hash');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on nonce error', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {\n                    nonceFunc: function (key, nonce, ts, callback) {\n\n                        callback(new Error('kaboom'));\n                    }\n                }, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid nonce');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on credentials error', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback(new Error('kablooey'));\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('kablooey');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on missing credentials', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback();\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Unknown credentials');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on invalid credentials', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback(null, {});\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid credentials');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on invalid credentials algorithm', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback(null, { key: '123', algorithm: '456' });\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Unknown algorithm');\n                    done();\n                });\n            });\n        });\n\n        it('should fail on missing host', (done) => {\n\n            credentialsFunc('123456', (err, credentials) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message(null, 8080, 'some message', { credentials: credentials });\n                expect(auth).to.not.exist();\n                done();\n            });\n        });\n\n        it('should fail on missing credentials', (done) => {\n\n            const auth = Hawk.client.message('example.com', 8080, 'some message', {});\n            expect(auth).to.not.exist();\n            done();\n        });\n\n        it('should fail on invalid algorithm', (done) => {\n\n            credentialsFunc('123456', (err, credentials) => {\n\n                expect(err).to.not.exist();\n\n                const creds = Hoek.clone(credentials);\n                creds.algorithm = 'blah';\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: creds });\n                expect(auth).to.not.exist();\n                done();\n            });\n        });\n    });\n\n    describe('authenticatePayloadHash()', () => {\n\n        it('checks payload hash', (done) => {\n\n            expect(Hawk.server.authenticatePayloadHash('abcdefg', { hash: 'abcdefg' })).to.equal(true);\n            expect(Hawk.server.authenticatePayloadHash('1234567', { hash: 'abcdefg' })).to.equal(false);\n            done();\n        });\n    });\n});\n\n", "'use strict';\n\n// Load modules\n\nconst Code = require('code');\nconst Hawk = require('../lib');\nconst Lab = require('lab');\nconst Package = require('../package.json');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Test shortcuts\n\nconst lab = exports.lab = Lab.script();\nconst describe = lab.experiment;\nconst it = lab.test;\nconst expect = Code.expect;\n\n\ndescribe('Utils', () => {\n\n    describe('parseHost()', () => {\n\n        it('returns port 80 for non tls node request', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example.com',\n                    'content-type': 'text/plain;x=y'\n                }\n            };\n\n            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(80);\n            done();\n        });\n\n        it('returns port 443 for non tls node request', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example.com',\n                    'content-type': 'text/plain;x=y'\n                },\n                connection: {\n                    encrypted: true\n                }\n            };\n\n            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);\n            done();\n        });\n\n        it('returns port 443 for non tls node request (IPv6)', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: '[123:123:123]',\n                    'content-type': 'text/plain;x=y'\n                },\n                connection: {\n                    encrypted: true\n                }\n            };\n\n            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);\n            done();\n        });\n\n        it('parses IPv6 headers', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: '[123:123:123]:8000',\n                    'content-type': 'text/plain;x=y'\n                },\n                connection: {\n                    encrypted: true\n                }\n            };\n\n            const host = Hawk.utils.parseHost(req, 'Host');\n            expect(host.port).to.equal('8000');\n            expect(host.name).to.equal('[123:123:123]');\n            done();\n        });\n    });\n\n    describe('version()', () => {\n\n        it('returns the correct package version number', (done) => {\n\n            expect(Hawk.utils.version()).to.equal(Package.version);\n            done();\n        });\n    });\n\n    describe('unauthorized()', () => {\n\n        it('returns a hawk 401', (done) => {\n\n            expect(Hawk.utils.unauthorized('kaboom').output.headers['WWW-Authenticate']).to.equal('Hawk error=\"kaboom\"');\n            done();\n        });\n\n        it('supports attributes', (done) => {\n\n            expect(Hawk.utils.unauthorized('kaboom', { a: 'b' }).output.headers['WWW-Authenticate']).to.equal('Hawk a=\"b\", error=\"kaboom\"');\n            done();\n        });\n    });\n});\n"], "fixing_code": ["'use strict';\n\n// Load modules\n\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Cryptiles = require('cryptiles');\nconst Crypto = require('./crypto');\nconst Utils = require('./utils');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Hawk authentication\n\n/*\n   req:                 node's HTTP request object or an object as follows:\n\n                        const request = {\n                            method: 'GET',\n                            url: '/resource/4?a=1&b=2',\n                            host: 'example.com',\n                            port: 8080,\n                            authorization: 'Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", ext=\"some-app-ext-data\", mac=\"6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\"'\n                        };\n\n   credentialsFunc:     required function to lookup the set of Hawk credentials based on the provided credentials id.\n                        The credentials include the MAC key, MAC algorithm, and other attributes (such as username)\n                        needed by the application. This function is the equivalent of verifying the username and\n                        password in Basic authentication.\n\n                        const credentialsFunc = function (id, callback) {\n\n                            // Lookup credentials in database\n                            db.lookup(id, function (err, item) {\n\n                                if (err || !item) {\n                                    return callback(err);\n                                }\n\n                                const credentials = {\n                                    // Required\n                                    key: item.key,\n                                    algorithm: item.algorithm,\n                                    // Application specific\n                                    user: item.user\n                                };\n\n                                return callback(null, credentials);\n                            });\n                        };\n\n   options: {\n\n        hostHeaderName:        optional header field name, used to override the default 'Host' header when used\n                               behind a cache of a proxy. Apache2 changes the value of the 'Host' header while preserving\n                               the original (which is what the module must verify) in the 'x-forwarded-host' header field.\n                               Only used when passed a node Http.ServerRequest object.\n\n        nonceFunc:             optional nonce validation function. The function signature is function(key, nonce, ts, callback)\n                               where 'callback' must be called using the signature function(err).\n\n        timestampSkewSec:      optional number of seconds of permitted clock skew for incoming timestamps. Defaults to 60 seconds.\n                               Provides a +/- skew which means actual allowed window is double the number of seconds.\n\n        localtimeOffsetMsec:   optional local clock time offset express in a number of milliseconds (positive or negative).\n                               Defaults to 0.\n\n        payload:               optional payload for validation. The client calculates the hash value and includes it via the 'hash'\n                               header attribute. The server always ensures the value provided has been included in the request\n                               MAC. When this option is provided, it validates the hash value itself. Validation is done by calculating\n                               a hash value over the entire payload (assuming it has already be normalized to the same format and\n                               encoding used by the client to calculate the hash on request). If the payload is not available at the time\n                               of authentication, the authenticatePayload() method can be used by passing it the credentials and\n                               attributes.hash returned in the authenticate callback.\n\n        host:                  optional host name override. Only used when passed a node request object.\n        port:                  optional port override. Only used when passed a node request object.\n    }\n\n    callback: function (err, credentials, artifacts) { }\n */\n\nexports.authenticate = function (req, credentialsFunc, options, callback) {\n\n    callback = Hoek.nextTick(callback);\n\n    // Default options\n\n    options.nonceFunc = options.nonceFunc || internals.nonceFunc;\n    options.timestampSkewSec = options.timestampSkewSec || 60;                                                  // 60 seconds\n\n    // Application time\n\n    const now = Utils.now(options.localtimeOffsetMsec);                           // Measure now before any other processing\n\n    // Convert node Http request object to a request configuration object\n\n    const request = Utils.parseRequest(req, options);\n    if (request instanceof Error) {\n        return callback(Boom.badRequest(request.message));\n    }\n\n    // Parse HTTP Authorization header\n\n    const attributes = Utils.parseAuthorizationHeader(request.authorization);\n    if (attributes instanceof Error) {\n        return callback(attributes);\n    }\n\n    // Construct artifacts container\n\n    const artifacts = {\n        method: request.method,\n        host: request.host,\n        port: request.port,\n        resource: request.url,\n        ts: attributes.ts,\n        nonce: attributes.nonce,\n        hash: attributes.hash,\n        ext: attributes.ext,\n        app: attributes.app,\n        dlg: attributes.dlg,\n        mac: attributes.mac,\n        id: attributes.id\n    };\n\n    // Verify required header attributes\n\n    if (!attributes.id ||\n        !attributes.ts ||\n        !attributes.nonce ||\n        !attributes.mac) {\n\n        return callback(Boom.badRequest('Missing attributes'), null, artifacts);\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(attributes.id, (err, credentials) => {\n\n        if (err) {\n            return callback(err, credentials || null, artifacts);\n        }\n\n        if (!credentials) {\n            return callback(Utils.unauthorized('Unknown credentials'), null, artifacts);\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials, artifacts);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials, artifacts);\n        }\n\n        // Calculate MAC\n\n        const mac = Crypto.calculateMac('header', credentials, artifacts);\n        if (!Cryptiles.fixedTimeComparison(mac, attributes.mac)) {\n            return callback(Utils.unauthorized('Bad mac'), credentials, artifacts);\n        }\n\n        // Check payload hash\n\n        if (options.payload ||\n            options.payload === '') {\n\n            if (!attributes.hash) {\n                return callback(Utils.unauthorized('Missing required payload hash'), credentials, artifacts);\n            }\n\n            const hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, request.contentType);\n            if (!Cryptiles.fixedTimeComparison(hash, attributes.hash)) {\n                return callback(Utils.unauthorized('Bad payload hash'), credentials, artifacts);\n            }\n        }\n\n        // Check nonce\n\n        options.nonceFunc(credentials.key, attributes.nonce, attributes.ts, (err) => {\n\n            if (err) {\n                return callback(Utils.unauthorized('Invalid nonce'), credentials, artifacts);\n            }\n\n            // Check timestamp staleness\n\n            if (Math.abs((attributes.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {\n                const tsm = Crypto.timestampMessage(credentials, options.localtimeOffsetMsec);\n                return callback(Utils.unauthorized('Stale timestamp', tsm), credentials, artifacts);\n            }\n\n            // Successful authentication\n\n            return callback(null, credentials, artifacts);\n        });\n    });\n};\n\n\n// Authenticate payload hash - used when payload cannot be provided during authenticate()\n\n/*\n    payload:        raw request payload\n    credentials:    from authenticate callback\n    artifacts:      from authenticate callback\n    contentType:    req.headers['content-type']\n*/\n\nexports.authenticatePayload = function (payload, credentials, artifacts, contentType) {\n\n    const calculatedHash = Crypto.calculatePayloadHash(payload, credentials.algorithm, contentType);\n    return Cryptiles.fixedTimeComparison(calculatedHash, artifacts.hash);\n};\n\n\n// Authenticate payload hash - used when payload cannot be provided during authenticate()\n\n/*\n    calculatedHash: the payload hash calculated using Crypto.calculatePayloadHash()\n    artifacts:      from authenticate callback\n*/\n\nexports.authenticatePayloadHash = function (calculatedHash, artifacts) {\n\n    return Cryptiles.fixedTimeComparison(calculatedHash, artifacts.hash);\n};\n\n\n// Generate a Server-Authorization header for a given response\n\n/*\n    credentials: {},                                        // Object received from authenticate()\n    artifacts: {}                                           // Object received from authenticate(); 'mac', 'hash', and 'ext' - ignored\n    options: {\n        ext: 'application-specific',                        // Application specific data sent via the ext attribute\n        payload: '{\"some\":\"payload\"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)\n        contentType: 'application/json',                    // Payload content-type (ignored if hash provided)\n        hash: 'U4MKKSmiVxk37JCCrAVIjV='                     // Pre-calculated payload hash\n    }\n*/\n\nexports.header = function (credentials, artifacts, options) {\n\n    // Prepare inputs\n\n    options = options || {};\n\n    if (!artifacts ||\n        typeof artifacts !== 'object' ||\n        typeof options !== 'object') {\n\n        return '';\n    }\n\n    artifacts = Hoek.clone(artifacts);\n    delete artifacts.mac;\n    artifacts.hash = options.hash;\n    artifacts.ext = options.ext;\n\n    // Validate credentials\n\n    if (!credentials ||\n        !credentials.key ||\n        !credentials.algorithm) {\n\n        // Invalid credential object\n        return '';\n    }\n\n    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n        return '';\n    }\n\n    // Calculate payload hash\n\n    if (!artifacts.hash &&\n        (options.payload || options.payload === '')) {\n\n        artifacts.hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);\n    }\n\n    const mac = Crypto.calculateMac('response', credentials, artifacts);\n\n    // Construct header\n\n    let header = 'Hawk mac=\"' + mac + '\"' +\n                 (artifacts.hash ? ', hash=\"' + artifacts.hash + '\"' : '');\n\n    if (artifacts.ext !== null &&\n        artifacts.ext !== undefined &&\n        artifacts.ext !== '') {                       // Other falsey values allowed\n\n        header = header + ', ext=\"' + Hoek.escapeHeaderAttribute(artifacts.ext) + '\"';\n    }\n\n    return header;\n};\n\n\n/*\n * Arguments and options are the same as authenticate() with the exception that the only supported options are:\n * 'hostHeaderName', 'localtimeOffsetMsec', 'host', 'port'\n */\n\n\n//                       1     2             3           4\ninternals.bewitRegex = /^(\\/.*)([\\?&])bewit\\=([^&$]*)(?:&(.+))?$/;\n\n\nexports.authenticateBewit = function (req, credentialsFunc, options, callback) {\n\n    callback = Hoek.nextTick(callback);\n\n    // Application time\n\n    const now = Utils.now(options.localtimeOffsetMsec);\n\n    // Convert node Http request object to a request configuration object\n\n    const request = Utils.parseRequest(req, options);\n    if (request instanceof Error) {\n        return callback(Boom.badRequest(request.message));\n    }\n\n    // Extract bewit\n\n    if (request.url.length > Utils.limits.maxMatchLength) {\n        return callback(Boom.badRequest('Resource path exceeds max length'));\n    }\n\n    const resource = request.url.match(internals.bewitRegex);\n    if (!resource) {\n        return callback(Utils.unauthorized());\n    }\n\n    // Bewit not empty\n\n    if (!resource[3]) {\n        return callback(Utils.unauthorized('Empty bewit'));\n    }\n\n    // Verify method is GET\n\n    if (request.method !== 'GET' &&\n        request.method !== 'HEAD') {\n\n        return callback(Utils.unauthorized('Invalid method'));\n    }\n\n    // No other authentication\n\n    if (request.authorization) {\n        return callback(Boom.badRequest('Multiple authentications'));\n    }\n\n    // Parse bewit\n\n    const bewitString = Hoek.base64urlDecode(resource[3]);\n    if (bewitString instanceof Error) {\n        return callback(Boom.badRequest('Invalid bewit encoding'));\n    }\n\n    // Bewit format: id\\exp\\mac\\ext ('\\' is used because it is a reserved header attribute character)\n\n    const bewitParts = bewitString.split('\\\\');\n    if (bewitParts.length !== 4) {\n        return callback(Boom.badRequest('Invalid bewit structure'));\n    }\n\n    const bewit = {\n        id: bewitParts[0],\n        exp: parseInt(bewitParts[1], 10),\n        mac: bewitParts[2],\n        ext: bewitParts[3] || ''\n    };\n\n    if (!bewit.id ||\n        !bewit.exp ||\n        !bewit.mac) {\n\n        return callback(Boom.badRequest('Missing bewit attributes'));\n    }\n\n    // Construct URL without bewit\n\n    let url = resource[1];\n    if (resource[4]) {\n        url = url + resource[2] + resource[4];\n    }\n\n    // Check expiration\n\n    if (bewit.exp * 1000 <= now) {\n        return callback(Utils.unauthorized('Access expired'), null, bewit);\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(bewit.id, (err, credentials) => {\n\n        if (err) {\n            return callback(err, credentials || null, bewit.ext);\n        }\n\n        if (!credentials) {\n            return callback(Utils.unauthorized('Unknown credentials'), null, bewit);\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials, bewit);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials, bewit);\n        }\n\n        // Calculate MAC\n\n        const mac = Crypto.calculateMac('bewit', credentials, {\n            ts: bewit.exp,\n            nonce: '',\n            method: 'GET',\n            resource: url,\n            host: request.host,\n            port: request.port,\n            ext: bewit.ext\n        });\n\n        if (!Cryptiles.fixedTimeComparison(mac, bewit.mac)) {\n            return callback(Utils.unauthorized('Bad mac'), credentials, bewit);\n        }\n\n        // Successful authentication\n\n        return callback(null, credentials, bewit);\n    });\n};\n\n\n/*\n *  options are the same as authenticate() with the exception that the only supported options are:\n * 'nonceFunc', 'timestampSkewSec', 'localtimeOffsetMsec'\n */\n\nexports.authenticateMessage = function (host, port, message, authorization, credentialsFunc, options, callback) {\n\n    callback = Hoek.nextTick(callback);\n\n    // Default options\n\n    options.nonceFunc = options.nonceFunc || internals.nonceFunc;\n    options.timestampSkewSec = options.timestampSkewSec || 60;                                                  // 60 seconds\n\n    // Application time\n\n    const now = Utils.now(options.localtimeOffsetMsec);                       // Measure now before any other processing\n\n    // Validate authorization\n\n    if (!authorization.id ||\n        !authorization.ts ||\n        !authorization.nonce ||\n        !authorization.hash ||\n        !authorization.mac) {\n\n        return callback(Boom.badRequest('Invalid authorization'));\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(authorization.id, (err, credentials) => {\n\n        if (err) {\n            return callback(err, credentials || null);\n        }\n\n        if (!credentials) {\n            return callback(Utils.unauthorized('Unknown credentials'));\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials);\n        }\n\n        // Construct artifacts container\n\n        const artifacts = {\n            ts: authorization.ts,\n            nonce: authorization.nonce,\n            host: host,\n            port: port,\n            hash: authorization.hash\n        };\n\n        // Calculate MAC\n\n        const mac = Crypto.calculateMac('message', credentials, artifacts);\n        if (!Cryptiles.fixedTimeComparison(mac, authorization.mac)) {\n            return callback(Utils.unauthorized('Bad mac'), credentials);\n        }\n\n        // Check payload hash\n\n        const hash = Crypto.calculatePayloadHash(message, credentials.algorithm);\n        if (!Cryptiles.fixedTimeComparison(hash, authorization.hash)) {\n            return callback(Utils.unauthorized('Bad message hash'), credentials);\n        }\n\n        // Check nonce\n\n        options.nonceFunc(credentials.key, authorization.nonce, authorization.ts, (err) => {\n\n            if (err) {\n                return callback(Utils.unauthorized('Invalid nonce'), credentials);\n            }\n\n            // Check timestamp staleness\n\n            if (Math.abs((authorization.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {\n                return callback(Utils.unauthorized('Stale timestamp'), credentials);\n            }\n\n            // Successful authentication\n\n            return callback(null, credentials);\n        });\n    });\n};\n\n\ninternals.nonceFunc = function (key, nonce, ts, nonceCallback) {\n\n    return nonceCallback();         // No validation\n};\n", "'use strict';\n\n// Load modules\n\nconst Sntp = require('sntp');\nconst Boom = require('boom');\n\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.version = function () {\n\n    return require('../package.json').version;\n};\n\n\nexports.limits = {\n    maxMatchLength: 4096            // Limit the length of uris and headers to avoid a DoS attack on string matching\n};\n\n\n// Extract host and port from request\n\n//                                            $1                            $2\ninternals.hostHeaderRegex = /^(?:(?:\\r\\n)?\\s)*((?:[^:]+)|(?:\\[[^\\]]+\\]))(?::(\\d+))?(?:(?:\\r\\n)?\\s)*$/;              // (IPv4, hostname)|(IPv6)\n\n\nexports.parseHost = function (req, hostHeaderName) {\n\n    hostHeaderName = (hostHeaderName ? hostHeaderName.toLowerCase() : 'host');\n    const hostHeader = req.headers[hostHeaderName];\n    if (!hostHeader) {\n        return null;\n    }\n\n    if (hostHeader.length > exports.limits.maxMatchLength) {\n        return null;\n    }\n\n    const hostParts = hostHeader.match(internals.hostHeaderRegex);\n    if (!hostParts) {\n        return null;\n    }\n\n    return {\n        name: hostParts[1],\n        port: (hostParts[2] ? hostParts[2] : (req.connection && req.connection.encrypted ? 443 : 80))\n    };\n};\n\n\n// Parse Content-Type header content\n\nexports.parseContentType = function (header) {\n\n    if (!header) {\n        return '';\n    }\n\n    return header.split(';')[0].trim().toLowerCase();\n};\n\n\n// Convert node's  to request configuration object\n\nexports.parseRequest = function (req, options) {\n\n    if (!req.headers) {\n        return req;\n    }\n\n    // Obtain host and port information\n\n    let host;\n    if (!options.host ||\n        !options.port) {\n\n        host = exports.parseHost(req, options.hostHeaderName);\n        if (!host) {\n            return new Error('Invalid Host header');\n        }\n    }\n\n    const request = {\n        method: req.method,\n        url: req.url,\n        host: options.host || host.name,\n        port: options.port || host.port,\n        authorization: req.headers.authorization,\n        contentType: req.headers['content-type'] || ''\n    };\n\n    return request;\n};\n\n\nexports.now = function (localtimeOffsetMsec) {\n\n    return Sntp.now() + (localtimeOffsetMsec || 0);\n};\n\n\nexports.nowSecs = function (localtimeOffsetMsec) {\n\n    return Math.floor(exports.now(localtimeOffsetMsec) / 1000);\n};\n\n\ninternals.authHeaderRegex = /^(\\w+)(?:\\s+(.*))?$/;                                      // Header: scheme[ something]\ninternals.attributeRegex = /^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/;   // !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n\n\n// Parse Hawk HTTP Authorization header\n\nexports.parseAuthorizationHeader = function (header, keys) {\n\n    keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];\n\n    if (!header) {\n        return Boom.unauthorized(null, 'Hawk');\n    }\n\n    if (header.length > exports.limits.maxMatchLength) {\n        return Boom.badRequest('Header length too long');\n    }\n\n    const headerParts = header.match(internals.authHeaderRegex);\n    if (!headerParts) {\n        return Boom.badRequest('Invalid header syntax');\n    }\n\n    const scheme = headerParts[1];\n    if (scheme.toLowerCase() !== 'hawk') {\n        return Boom.unauthorized(null, 'Hawk');\n    }\n\n    const attributesString = headerParts[2];\n    if (!attributesString) {\n        return Boom.badRequest('Invalid header syntax');\n    }\n\n    const attributes = {};\n    let errorMessage = '';\n    const verify = attributesString.replace(/(\\w+)=\"([^\"\\\\]*)\"\\s*(?:,\\s*|$)/g, ($0, $1, $2) => {\n\n        // Check valid attribute names\n\n        if (keys.indexOf($1) === -1) {\n            errorMessage = 'Unknown attribute: ' + $1;\n            return;\n        }\n\n        // Allowed attribute value characters\n\n        if ($2.match(internals.attributeRegex) === null) {\n            errorMessage = 'Bad attribute value: ' + $1;\n            return;\n        }\n\n        // Check for duplicates\n\n        if (attributes.hasOwnProperty($1)) {\n            errorMessage = 'Duplicate attribute: ' + $1;\n            return;\n        }\n\n        attributes[$1] = $2;\n        return '';\n    });\n\n    if (verify !== '') {\n        return Boom.badRequest(errorMessage || 'Bad header format');\n    }\n\n    return attributes;\n};\n\n\nexports.unauthorized = function (message, attributes) {\n\n    return Boom.unauthorized(message || null, 'Hawk', attributes);\n};\n\n", "{\n  \"name\": \"hawk\",\n  \"description\": \"HTTP Hawk Authentication Scheme\",\n  \"version\": \"4.1.1\",\n  \"author\": \"Eran Hammer <eran@hammer.io> (http://hueniverse.com)\",\n  \"repository\": \"git://github.com/hueniverse/hawk\",\n  \"main\": \"lib/index.js\",\n  \"browser\": \"dist/browser.js\",\n  \"keywords\": [\n    \"http\",\n    \"authentication\",\n    \"scheme\",\n    \"hawk\"\n  ],\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"dependencies\": {\n    \"hoek\": \"3.x.x\",\n    \"boom\": \"3.x.x\",\n    \"cryptiles\": \"3.x.x\",\n    \"sntp\": \"2.x.x\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.1.2\",\n    \"babel-preset-es2015\": \"^6.1.2\",\n    \"code\": \"2.x.x\",\n    \"lab\": \"8.x.x\"\n  },\n  \"babel\": {\n    \"presets\": [\"es2015\"]\n  },\n  \"scripts\": {\n    \"build-client\": \"mkdir -p dist; babel lib/browser.js --out-file dist/browser.js\",\n    \"prepublish\": \"npm run-script build-client\",\n    \"test\": \"lab -a code -t 100 -L\",\n    \"test-cov-html\": \"lab -a code -r html -o coverage.html\"\n  },\n  \"license\": \"BSD-3-Clause\"\n}\n", "'use strict';\n\n// Load modules\n\nconst Code = require('code');\nconst Hawk = require('../lib');\nconst Hoek = require('hoek');\nconst Lab = require('lab');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Test shortcuts\n\nconst lab = exports.lab = Lab.script();\nconst describe = lab.experiment;\nconst it = lab.test;\nconst expect = Code.expect;\n\n\ndescribe('Server', () => {\n\n    const credentialsFunc = function (id, callback) {\n\n        const credentials = {\n            id: id,\n            key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n            algorithm: (id === '1' ? 'sha1' : 'sha256'),\n            user: 'steve'\n        };\n\n        return callback(null, credentials);\n    };\n\n    describe('authenticate()', () => {\n\n        it('parses a valid authentication header (sha1)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (sha256)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/1?b=1&a=2',\n                host: 'example.com',\n                port: 8000,\n                authorization: 'Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", mac=\"m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=\", ext=\"some-app-data\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353832234000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (host override)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example1.com:8080',\n                    authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (host port override)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example1.com:80',\n                    authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', port: 8080, localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('parses a valid authentication header (POST with payload)', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123456\", ts=\"1357926341\", nonce=\"1AwuJD\", hash=\"qAiXIVv+yjDATneWxZP2YCTa9aHRgQdnH9b3Wc+o3dg=\", ext=\"some-app-data\", mac=\"UeYcj5UoTVaAWXNvJfLVia7kU3VabxCqrccXP8sUGC4=\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1357926341000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.not.exist();\n                expect(credentials.user).to.equal('steve');\n                done();\n            });\n        });\n\n        it('errors on missing hash', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/1?b=1&a=2',\n                host: 'example.com',\n                port: 8000,\n                authorization: 'Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", mac=\"m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=\", ext=\"some-app-data\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { payload: 'body', localtimeOffsetMsec: 1353832234000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing required payload hash');\n                done();\n            });\n        });\n\n        it('errors on a stale timestamp', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123456\", ts=\"1362337299\", nonce=\"UzmxSs\", ext=\"some-app-data\", mac=\"wnNUxchvvryMH2RxckTdZ/gY3ijzvccx4keVvELC61w=\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, {}, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Stale timestamp');\n                const header = err.output.headers['WWW-Authenticate'];\n                const ts = header.match(/^Hawk ts\\=\\\"(\\d+)\\\"\\, tsm\\=\\\"([^\\\"]+)\\\"\\, error=\\\"Stale timestamp\\\"$/);\n                const now = Hawk.utils.now();\n                expect(parseInt(ts[1], 10) * 1000).to.be.within(now - 1000, now + 1000);\n\n                const res = {\n                    headers: {\n                        'www-authenticate': header\n                    }\n                };\n\n                expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal(true);\n                done();\n            });\n        });\n\n        it('errors on a replay', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw=\", ext=\"hello\"'\n            };\n\n            const memoryCache = {};\n            const options = {\n                localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(),\n                nonceFunc: function (key, nonce, ts, callback) {\n\n                    if (memoryCache[key + nonce]) {\n                        return callback(new Error());\n                    }\n\n                    memoryCache[key + nonce] = true;\n                    return callback();\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, options, (err, credentials1, artifacts1) => {\n\n                expect(err).to.not.exist();\n                expect(credentials1.user).to.equal('steve');\n\n                Hawk.server.authenticate(req, credentialsFunc, options, (err, credentials2, artifacts2) => {\n\n                    expect(err).to.exist();\n                    expect(err.output.payload.message).to.equal('Invalid nonce');\n                    done();\n                });\n            });\n        });\n\n        it('does not error on nonce collision if keys differ', (done) => {\n\n            const reqSteve = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw=\", ext=\"hello\"'\n            };\n\n            const reqBob = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"456\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"LXfmTnRzrLd9TD7yfH+4se46Bx6AHyhpM94hLCiNia4=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    '123': {\n                        id: id,\n                        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                        algorithm: (id === '1' ? 'sha1' : 'sha256'),\n                        user: 'steve'\n                    },\n                    '456': {\n                        id: id,\n                        key: 'xrunpaw3489ruxnpa98w4rxnwerxhqb98rpaxn39848',\n                        algorithm: (id === '1' ? 'sha1' : 'sha256'),\n                        user: 'bob'\n                    }\n                };\n\n                return callback(null, credentials[id]);\n            };\n\n            const memoryCache = {};\n            const options = {\n                localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(),\n                nonceFunc: function (key, nonce, ts, callback) {\n\n                    if (memoryCache[key + nonce]) {\n                        return callback(new Error());\n                    }\n\n                    memoryCache[key + nonce] = true;\n                    return callback();\n                }\n            };\n\n            Hawk.server.authenticate(reqSteve, credentialsFuncion, options, (err, credentials1, artifacts1) => {\n\n                expect(err).to.not.exist();\n                expect(credentials1.user).to.equal('steve');\n\n                Hawk.server.authenticate(reqBob, credentialsFuncion, options, (err, credentials2, artifacts2) => {\n\n                    expect(err).to.not.exist();\n                    expect(credentials2.user).to.equal('bob');\n                    done();\n                });\n            });\n        });\n\n        it('errors on an invalid authentication header: wrong scheme', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Basic asdasdasdasd'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.not.exist();\n                done();\n            });\n        });\n\n        it('errors on an invalid authentication header: no scheme', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: '!@#'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid header syntax');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization header', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, {}, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.isMissing).to.equal(true);\n                done();\n            });\n        });\n\n        it('errors on an missing host header', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid Host header');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (id)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (ts)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (nonce)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an missing authorization attribute (mac)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Missing attributes');\n                done();\n            });\n        });\n\n        it('errors on an unknown authorization attribute', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", x=\"3\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Unknown attribute: x');\n                done();\n            });\n        });\n\n        it('errors on an bad authorization header format', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\\\\\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad header format');\n                done();\n            });\n        });\n\n        it('errors on an bad authorization attribute value', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"\\t\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad attribute value: id');\n                done();\n            });\n        });\n\n        it('errors on an empty authorization attribute value', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad attribute value: id');\n                done();\n            });\n        });\n\n        it('errors on duplicated authorization attribute key', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", id=\"456\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Duplicate attribute: id');\n                done();\n            });\n        });\n\n        it('errors on an invalid authorization header format', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk'\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid header syntax');\n                done();\n            });\n        });\n\n        it('errors on an bad host header (missing host)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: ':8080',\n                    authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid Host header');\n                done();\n            });\n        });\n\n        it('errors on an bad host header (pad port)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example.com:something',\n                    authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n                }\n            };\n\n            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Invalid Host header');\n                done();\n            });\n        });\n\n        it('errors on credentialsFunc error', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                return callback(new Error('Unknown user'));\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Unknown user');\n                done();\n            });\n        });\n\n        it('errors on credentialsFunc error (with credentials)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                return callback(new Error('Unknown user'), { some: 'value' });\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Unknown user');\n                expect(credentials.some).to.equal('value');\n                done();\n            });\n        });\n\n        it('errors on missing credentials', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                return callback(null, null);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Unknown credentials');\n                done();\n            });\n        });\n\n        it('errors on invalid credentials (id)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Invalid credentials');\n                expect(err.output.payload.message).to.equal('An internal server error occurred');\n                done();\n            });\n        });\n\n        it('errors on invalid credentials (key)', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    id: '23434d3q4d5345d',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Invalid credentials');\n                expect(err.output.payload.message).to.equal('An internal server error occurred');\n                done();\n            });\n        });\n\n        it('errors on unknown credentials algorithm', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                    algorithm: 'hmac-sha-0',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.message).to.equal('Unknown algorithm');\n                expect(err.output.payload.message).to.equal('An internal server error occurred');\n                done();\n            });\n        });\n\n        it('errors on unknown bad mac', (done) => {\n\n            const req = {\n                method: 'GET',\n                url: '/resource/4?filter=a',\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcU4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\"'\n            };\n\n            const credentialsFuncion = function (id, callback) {\n\n                const credentials = {\n                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                    algorithm: 'sha256',\n                    user: 'steve'\n                };\n\n                return callback(null, credentials);\n            };\n\n            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, (err, credentials, artifacts) => {\n\n                expect(err).to.exist();\n                expect(err.output.payload.message).to.equal('Bad mac');\n                done();\n            });\n        });\n    });\n\n    describe('header()', () => {\n\n        it('generates header', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('Hawk mac=\\\"n14wVJK4cOxAytPUMc5bPezQzuJGl5n7MYXhFQgEKsE=\\\", hash=\\\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\\\", ext=\\\"response-specific\\\"');\n            done();\n        });\n\n        it('generates header (empty payload)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: '', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('Hawk mac=\\\"i8/kUBDx0QF+PpCtW860kkV/fa9dbwEoe/FpGUXowf0=\\\", hash=\\\"q/t+NNAkQZNlq/aAD6PlexImwQTxwgT2MahfTa9XRLA=\\\", ext=\\\"response-specific\\\"');\n            done();\n        });\n\n        it('generates header (pre calculated hash)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const options = { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' };\n            options.hash = Hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);\n            const header = Hawk.server.header(credentials, artifacts, options);\n            expect(header).to.equal('Hawk mac=\\\"n14wVJK4cOxAytPUMc5bPezQzuJGl5n7MYXhFQgEKsE=\\\", hash=\\\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\\\", ext=\\\"response-specific\\\"');\n            done();\n        });\n\n        it('generates header (null ext)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: null });\n            expect(header).to.equal('Hawk mac=\\\"6PrybJTJs20jsgBw5eilXpcytD8kUbaIKNYXL+6g0ns=\\\", hash=\\\"f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\\\"');\n            done();\n        });\n\n        it('errors on missing artifacts', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const header = Hawk.server.header(credentials, null, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on invalid artifacts', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const header = Hawk.server.header(credentials, 5, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on missing credentials', (done) => {\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(null, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on invalid credentials (key)', (done) => {\n\n            const credentials = {\n                id: '123456',\n                algorithm: 'sha256',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n\n        it('errors on invalid algorithm', (done) => {\n\n            const credentials = {\n                id: '123456',\n                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n                algorithm: 'x',\n                user: 'steve'\n            };\n\n            const artifacts = {\n                method: 'POST',\n                host: 'example.com',\n                port: '8080',\n                resource: '/resource/4?filter=a',\n                ts: '1398546787',\n                nonce: 'xUwusx',\n                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',\n                ext: 'some-app-data',\n                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',\n                id: '123456'\n            };\n\n            const header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });\n            expect(header).to.equal('');\n            done();\n        });\n    });\n\n    describe('authenticateBewit()', () => {\n\n        it('errors on uri too long', (done) => {\n\n            let long = '/';\n            for (let i = 0; i < 5000; ++i) {\n                long += 'x';\n            }\n\n            const req = {\n                method: 'GET',\n                url: long,\n                host: 'example.com',\n                port: 8080,\n                authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n            };\n\n            Hawk.server.authenticateBewit(req, credentialsFunc, {}, (err, credentials, bewit) => {\n\n                expect(err).to.exist();\n                expect(err.output.statusCode).to.equal(400);\n                expect(err.message).to.equal('Resource path exceeds max length');\n                done();\n            });\n        });\n    });\n\n    describe('authenticateMessage()', () => {\n\n        it('errors on invalid authorization (ts)', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                delete auth.ts;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('errors on invalid authorization (nonce)', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                delete auth.nonce;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('errors on invalid authorization (hash)', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                delete auth.hash;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('errors with credentials', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, (id, callback) => {\n\n                    callback(new Error('something'), { some: 'value' });\n                }, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('something');\n                    expect(credentials2.some).to.equal('value');\n                    done();\n                });\n            });\n        });\n\n        it('errors on nonce collision', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {\n                    nonceFunc: function (key, nonce, ts, nonceCallback) {\n\n                        nonceCallback(true);\n                    }\n                }, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid nonce');\n                    done();\n                });\n            });\n        });\n\n        it('should generate an authorization then successfully parse it', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.not.exist();\n                    expect(credentials2.user).to.equal('steve');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on mismatching host', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example1.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Bad mac');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on stale timestamp', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { localtimeOffsetMsec: 100000 }, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Stale timestamp');\n                    done();\n                });\n            });\n        });\n\n        it('overrides timestampSkewSec', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1, localtimeOffsetMsec: 100000 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { timestampSkewSec: 500 }, (err, credentials2) => {\n\n                    expect(err).to.not.exist();\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on invalid authorization', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n                delete auth.id;\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid authorization');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on bad hash', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message1', auth, credentialsFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Bad message hash');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on nonce error', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {\n                    nonceFunc: function (key, nonce, ts, callback) {\n\n                        callback(new Error('kaboom'));\n                    }\n                }, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid nonce');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on credentials error', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback(new Error('kablooey'));\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('kablooey');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on missing credentials', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback();\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Unknown credentials');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on invalid credentials', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback(null, {});\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Invalid credentials');\n                    done();\n                });\n            });\n        });\n\n        it('should fail authorization on invalid credentials algorithm', (done) => {\n\n            credentialsFunc('123456', (err, credentials1) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });\n                expect(auth).to.exist();\n\n                const errFunc = function (id, callback) {\n\n                    callback(null, { key: '123', algorithm: '456' });\n                };\n\n                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, (err, credentials2) => {\n\n                    expect(err).to.exist();\n                    expect(err.message).to.equal('Unknown algorithm');\n                    done();\n                });\n            });\n        });\n\n        it('should fail on missing host', (done) => {\n\n            credentialsFunc('123456', (err, credentials) => {\n\n                expect(err).to.not.exist();\n\n                const auth = Hawk.client.message(null, 8080, 'some message', { credentials: credentials });\n                expect(auth).to.not.exist();\n                done();\n            });\n        });\n\n        it('should fail on missing credentials', (done) => {\n\n            const auth = Hawk.client.message('example.com', 8080, 'some message', {});\n            expect(auth).to.not.exist();\n            done();\n        });\n\n        it('should fail on invalid algorithm', (done) => {\n\n            credentialsFunc('123456', (err, credentials) => {\n\n                expect(err).to.not.exist();\n\n                const creds = Hoek.clone(credentials);\n                creds.algorithm = 'blah';\n                const auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: creds });\n                expect(auth).to.not.exist();\n                done();\n            });\n        });\n    });\n\n    describe('authenticatePayloadHash()', () => {\n\n        it('checks payload hash', (done) => {\n\n            expect(Hawk.server.authenticatePayloadHash('abcdefg', { hash: 'abcdefg' })).to.equal(true);\n            expect(Hawk.server.authenticatePayloadHash('1234567', { hash: 'abcdefg' })).to.equal(false);\n            done();\n        });\n    });\n});\n\n", "'use strict';\n\n// Load modules\n\nconst Code = require('code');\nconst Hawk = require('../lib');\nconst Lab = require('lab');\nconst Package = require('../package.json');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Test shortcuts\n\nconst lab = exports.lab = Lab.script();\nconst describe = lab.experiment;\nconst it = lab.test;\nconst expect = Code.expect;\n\n\ndescribe('Utils', () => {\n\n    describe('parseHost()', () => {\n\n        it('returns port 80 for non tls node request', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example.com',\n                    'content-type': 'text/plain;x=y'\n                }\n            };\n\n            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(80);\n            done();\n        });\n\n        it('returns port 443 for non tls node request', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: 'example.com',\n                    'content-type': 'text/plain;x=y'\n                },\n                connection: {\n                    encrypted: true\n                }\n            };\n\n            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);\n            done();\n        });\n\n        it('returns port 443 for non tls node request (IPv6)', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: '[123:123:123]',\n                    'content-type': 'text/plain;x=y'\n                },\n                connection: {\n                    encrypted: true\n                }\n            };\n\n            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);\n            done();\n        });\n\n        it('parses IPv6 headers', (done) => {\n\n            const req = {\n                method: 'POST',\n                url: '/resource/4?filter=a',\n                headers: {\n                    host: '[123:123:123]:8000',\n                    'content-type': 'text/plain;x=y'\n                },\n                connection: {\n                    encrypted: true\n                }\n            };\n\n            const host = Hawk.utils.parseHost(req, 'Host');\n            expect(host.port).to.equal('8000');\n            expect(host.name).to.equal('[123:123:123]');\n            done();\n        });\n\n        it('errors on header too long', (done) => {\n\n            let long = '';\n            for (let i = 0; i < 5000; ++i) {\n                long += 'x';\n            }\n\n            expect(Hawk.utils.parseHost({ headers: { host: long } })).to.be.null();\n            done();\n        });\n    });\n\n    describe('parseAuthorizationHeader()', () => {\n\n        it('errors on header too long', (done) => {\n\n            let long = 'Scheme a=\"';\n            for (let i = 0; i < 5000; ++i) {\n                long += 'x';\n            }\n            long += '\"';\n\n            const err = Hawk.utils.parseAuthorizationHeader(long, ['a']);\n            expect(err).to.be.instanceof(Error);\n            expect(err.message).to.equal('Header length too long');\n            done();\n        });\n    });\n\n    describe('version()', () => {\n\n        it('returns the correct package version number', (done) => {\n\n            expect(Hawk.utils.version()).to.equal(Package.version);\n            done();\n        });\n    });\n\n    describe('unauthorized()', () => {\n\n        it('returns a hawk 401', (done) => {\n\n            expect(Hawk.utils.unauthorized('kaboom').output.headers['WWW-Authenticate']).to.equal('Hawk error=\"kaboom\"');\n            done();\n        });\n\n        it('supports attributes', (done) => {\n\n            expect(Hawk.utils.unauthorized('kaboom', { a: 'b' }).output.headers['WWW-Authenticate']).to.equal('Hawk a=\"b\", error=\"kaboom\"');\n            done();\n        });\n    });\n});\n"], "filenames": ["lib/server.js", "lib/utils.js", "package.json", "test/server.js", "test/utils.js"], "buggy_code_start_loc": [312, 19, 4, 973, 97], "buggy_code_end_loc": [332, 142, 5, 973, 97], "fixing_code_start_loc": [313, 20, 4, 974, 98], "fixing_code_end_loc": [340, 159, 5, 1001, 126], "type": "CWE-399", "message": "Hawk before 3.1.3 and 4.x before 4.1.1 allow remote attackers to cause a denial of service (CPU consumption or partial outage) via a long (1) header or (2) URI that is matched against an improper regular expression.", "other": {"cve": {"id": "CVE-2016-2515", "sourceIdentifier": "secalert@redhat.com", "published": "2016-04-13T16:59:13.473", "lastModified": "2016-04-20T15:25:42.977", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Hawk before 3.1.3 and 4.x before 4.1.1 allow remote attackers to cause a denial of service (CPU consumption or partial outage) via a long (1) header or (2) URI that is matched against an improper regular expression."}, {"lang": "es", "value": "Hawk en versiones anteriores a 3.1.3 y 4.x en versiones anteriores a 4.1.1 permite a atacantes remotos provocar una denegaci\u00f3n de servicio (consumo de CPU o interrupci\u00f3n parcial ) a trav\u00e9s de una (1) cabecera o (2) URI larga que coincide contra una expresi\u00f3n regular incorrecta."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 7.8}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-399"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hawk_project:hawk:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "EC0104C2-41FF-4883-9C80-4819F2A645DA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hawk_project:hawk:4.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "75046180-A750-47A9-AF24-B25A86CA4ABF"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/02/20/1", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2016/02/20/2", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1309721", "source": "secalert@redhat.com"}, {"url": "https://github.com/hueniverse/hawk/commit/0833f99ba64558525995a7e21d4093da1f3e15fa", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/hueniverse/hawk/issues/168", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://nodesecurity.io/advisories/77", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/hueniverse/hawk/commit/0833f99ba64558525995a7e21d4093da1f3e15fa"}}