{"buggy_code": ["## 0.1-beta\n\n\u521d\u59cb\u7248\u672c\n\n## 0.2-beta\n\nSecurity:\n- \u4fee\u590d\u6f5c\u5728RCE\u6f0f\u6d1e [GHSA-732j-763p-cvqg](https://github.com/4ra1n/super-xray/security/advisories/GHSA-732j-763p-cvqg)\n\nBug:\n- [important] \u590d\u5236\u548c\u5220\u9664\u6587\u4ef6\u5e94\u8be5\u9009\u62e9Java\u4ee3\u7801\u5b9e\u73b0 #3\n- [important] \u6700\u7ec8\u6267\u884c\u547d\u4ee4\u4e0d\u5e94\u8be5\u4f7f\u7528bash/cmd\u65b9\u5f0f #4\n- [important] \u4f7f\u7528PoC\u6a21\u5f0f\u540e\u518d\u4f7f\u7528Plugins\u4e0d\u4f1a\u751f\u6548\u7684\u95ee\u9898 #5\n- [important] Windows\u4e2dcmd\u7a97\u53e3\u4e71\u7801 #16\n\n## 0.3-beta\n\n\u8be5\u7248\u672c\u4e3a**\u91cd\u5927\u66f4\u65b0**\n\n\u4e4b\u524d\u5f3a\u5236\u505c\u6b62\u7684\u903b\u8f91\u5e76\u4e0d\u80fd\u771f\u6b63\u5730\u505c\u6b62\uff0c\u4f7f\u7528`kill/taskkill`\u547d\u4ee4\u624d\u53ef\u4ee5\u505a\u5230\uff0c\u8be5\u7248\u672c\u4ec5\u5728`Mac OS`\u6d4b\u8bd5\u901a\u8fc7\uff0c\u5728`Windows`\u4e2d\u4e0d\u786e\u5b9a\u3002\u5f00\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u5faa\u73af\u76d1\u542c\u662f\u5426\u5f3a\u5236\u505c\u6b62\uff0c\u5982\u679c\u6536\u5230\u6d88\u606f\u7acb\u5373\u7ed3\u675f\u3002\n\nSecurity:\n- \u4fee\u590d\u6f5c\u5728\u63d0\u6743\u6f0f\u6d1e [GHSA-2g28-xrw6-fq5f](https://github.com/4ra1n/super-xray/security/advisories/GHSA-2g28-xrw6-fq5f)\n\nBug:\n- [important] \u88ab\u52a8\u626b\u63cf\u540e\u65e0\u6cd5\u4e3b\u52a8\u626b\u63cf\u7684\u95ee\u9898 #23\n- [important] PoC\u53c2\u6570\u4e3a\u7a7a\u7684\u95ee\u9898 #21\n- [important] \u88ab\u52a8\u626b\u63cf\u662f\u5426\u5e94\u8be5\u589e\u52a0\u4e00\u4e2a\u505c\u6b62\u76d1\u542c\u7684\u529f\u80fd #20\n- [important] windows11\u4e2d\u9ad8\u7ea7\u914d\u7f6e\u7684xss\u8bbe\u7f6e\u65e0\u6cd5\u663e\u793a #19\n- [important] windows\u4fdd\u5b58\u914d\u7f6e\u7f16\u7801\u95ee\u9898 #18\n- [important] \u5b8c\u6210\u771f\u6b63\u7684\u505c\u6b62\u903b\u8f91 #26\uff08\u4ec5\u5728MacOS\u6d4b\u8bd5\u901a\u8fc7\uff09\n\nOthers:\n- \u6253\u5370\u547d\u4ee4\u5e94\u8be5\u7528\u4e00\u4e2a\u65b0\u7684Form\u66f4\u4f18\u96c5\u5730\u5c55\u793a #9\n\n## 0.4-beta\n\n\u8fd9\u4e2a\u7248\u672c\u4e3b\u8981\u662f\u63d0\u9ad8\u7a33\u5b9a\u6027\uff0c\u5bf9\u5df2\u6709`bug`\u8fdb\u884c\u4fee\u590d\uff0c\u5e76\u4e14\u52a0\u5165\u4e86\u4e24\u4e2a\u91cd\u8981\uff1a\n- \u76ae\u80a4\u9009\u62e9\u529f\u80fd\uff0c\u53ef\u4ee5\u9009\u62e9\u4e03\u6b3e\u4e3b\u9898\u76ae\u80a4\u4e4b\u4e00\uff08\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\uff09\n- \u4fdd\u5b58\u4e0a\u6b21xray\u8bbe\u7f6e\u7684\u529f\u80fd\uff0c\u4e0d\u7528\u6bcf\u6b21\u6253\u5f00\u90fd\u91cd\u65b0\u9009\u62e9\n\nBug:\n- [important] windows taskkill \u547d\u4ee4 bug #29\n- [important] \u5141\u8bb8\u754c\u9762\u6269\u5927\u7f29\u5c0f\u5e76\u91cd\u6784\u9ad8\u7ea7\u914d\u7f6e\u7684UI #28\n- [important] \u67e5\u770b\u914d\u7f6e\u6587\u4ef6\u53ea\u6539\u53d8Panel\u5927\u5c0f\u4f46Area\u4e0d\u53d8 #31\n- [important] windows \u63a7\u5236\u53f0\u4e71\u7801\u4fee\u590d\u4e0d\u5b8c\u5584 #27\n- [important] \u8bbe\u7f6e\u4ece\u4e0a\u6b21\u914d\u7f6e\u81ea\u52a8\u52a0\u8f7dxray #17\n- [important] \u53cd\u8fde\u5e73\u53f0\u652f\u6301token\u8ba4\u8bc1 #32\n\nOthers:\n- \u652f\u6301\u4f7f\u7528\u672c\u5730\u81ea\u5b9a\u4e49PoC\u7684\u529f\u80fd #6\n- [new feature] \u65b0\u589e\u4e00\u4e2a\u4e3b\u9898\u76ae\u80a4\u9009\u62e9\u7684\u529f\u80fd #11\n\n## 0.5-beta\n\n\u6bd4\u8f83\u5173\u952e\u7684\u95ee\u9898\u662f\uff1a \u8fd0\u884c\u4e2d\u65e0\u6cd5\u8bbf\u95ee\u5df2\u6709\u7684\u6f0f\u6d1e\u62a5\u544a\uff0c\u56e0\u4e3a\u91c7\u7528\u7684\u662f`start/open`\u547d\u4ee4\uff0c\u62a5\u544a\u88ab`xray`\u8fdb\u7a0b\u5360\u7528\u65e0\u6cd5\u6253\u5f00\uff0c\u4f46\u662f\u53ef\u4ee5\u8bfb\u3002\n\u6240\u4ee5\u89e3\u51b3\u65b9\u6848\u662f\u590d\u5236\u4e00\u4efd\u5b9e\u65f6\u7684\u7136\u540e\u6253\u5f00\u3002\u5176\u4ed6\u65b9\u9762\u662f\u4e00\u4e9b`UI`\u7684\u5c0f`bug`\u4ee5\u53ca\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u5177\u4f53\u7684\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5168\u6253\u5728\u547d\u4ee4\u884c\u3002\n\u8f93\u51fa\u7684\u65e5\u5fd7\u6587\u4ef6\u548c\u6240\u6709\u4ea7\u751f\u7684\u6f0f\u6d1e\u62a5\u544a\u90fd\u53ef\u4ee5\u5728\u5173\u95ed\u8f6f\u4ef6\u7684\u65f6\u5019\u81ea\u52a8\u5220\u9664\u3002\n\nBug:\n- [important] \u8fdb\u7a0b\u5360\u5bfc\u81f4\u65e0\u6cd5\u6253\u5f00\u88ab\u52a8\u626b\u63cf\u4e2d\u7684\u62a5\u544a #44\n- [important] \u6362\u76ae\u80a4\u540e\u4e00\u4e9b\u6309\u94ae\u7684\u80cc\u666f\u8272\u4e0d\u5e94\u8be5\u662f\u7070\u8272 #42\n- [important] \u88ab\u52a8\u626b\u63cf\u53ef\u80fd\u4f1a\u7531\u4e8e\u8f93\u51fa\u6587\u4ef6\u5b58\u5728\u65e0\u6cd5\u542f\u52a8 #33\n- \u6ca1\u6709\u8bbe\u7f6e\u8f93\u51fa\u7684\u60c5\u51b5\u4e0b\u6253\u5f00\u8f93\u51fa\u6587\u4ef6\u62a5\u9519 #38\n\nOthers:\n- [important] \u6dfb\u52a0\u4e00\u4e2a\u8df3\u8f6cxray\u4e0b\u8f7d\u5730\u5740\u7684\u6309\u94ae #45\n- [important] \u6dfb\u52a0start.bat\u548cstart.sh #41\n- [new feature] \u662f\u5426\u6709\u5fc5\u8981\u63d0\u4f9b\u4e00\u4e2a\u4e0b\u8f7d\u6309\u94ae #10 (\u91c7\u7528 #45 \u7684\u65b9\u6848\u89e3\u51b3)\n- \u5728Mac OS\u4e2d\u5982\u679c\u4fdd\u5b58\u4e86xray\u914d\u7f6e\u6bcf\u6b21\u6253\u5f00\u90fd\u4f1a\u5f39\u51fa\u63d0\u793a #36\n- \u76ae\u80a4RadioButton\u9ed8\u8ba4\u4e0d\u8be5\u662f\u7a7a\u800c\u5e94\u662f\u5f53\u524d\u76ae\u80a4 #37\n- \u5e94\u8be5\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u4e34\u65f6\u6587\u4ef6\u5e76\u5173\u95ed\u540e\u5220\u9664 #43\n- \u6dfb\u52a0\u4e00\u4e2a\u662f\u5426\u81ea\u52a8\u5220\u9664\u626b\u63cf\u62a5\u544a\u7684\u6309\u94ae #39\n- \u589e\u52a0\u4e00\u4e2a\u6e05\u5c4f\u7684\u6309\u94ae #8\n\n## 0.6-beta\n\n\u652f\u6301\u4e86\u82f1\u6587\u7248\u672c\uff0c\u4fee\u590d\u4e86\u5404\u79cdUI\u7684\u95ee\u9898\n\nBug:\n- [important] \u57281080P\u4e0b\u754c\u9762\u65e0\u6cd5\u5b8c\u5168\u663e\u793a #46\n- [important] \u5207\u6362\u8bed\u8a00\u548c\u76ae\u80a4\u65f6\u65e0\u6cd5\u6b63\u786e\u5bb9\u7eb3UI #51\n- [important] \u5173\u95ed\u5e94\u7528\u524d\u5e94\u8be5\u5148\u505c\u6b62\u6240\u6709xray\u8fdb\u7a0b #50\n- \u5207\u6362\u8bed\u8a00\u65f6\u65e0\u6cd5\u6b63\u5e38\u663e\u793aPoC\u6570\u91cf #52\n- \u89e3\u6790\u6240\u6709POC\u7684\u903b\u8f91\u6709\u95ee\u9898\u5bfc\u81f4\u6f0f\u6389\u90e8\u5206 #53\n\nOthers:\n- [important] \u6dfb\u52a0\u4e00\u6b3e\u73b0\u4ee3\u76ae\u80a4IDEA\u540c\u6b3e #54\n- [new feature] english version #40\n- #36\u95ee\u9898\u7684\u4fee\u590d\u4e0d\u5b8c\u5584 #47\n- \u6253\u5f00\u626b\u63cf\u7ed3\u679c\u7684Label\u4e0eButton\u7684UI\u4e0d\u5339\u914d #48\n- \u70b9\u51fb\u5e95\u90e8Label\u8df3\u8f6cGithub #49\n\n## 0.7\n\n\u8be5\u7248\u672c\u662f\u7b2c\u4e00\u4e2a\u6b63\u5f0f\u7248\uff0c\u652f\u6301\u4e86`JDK8`\u7684\u7248\u672c\uff0c\u5f53\u73af\u5883\u662f`JDK8`\u65f6\u4f7f\u7528`JNA`\u6280\u672f\u8bbf\u95ee`Native`\u65b9\u6cd5\uff0c\u901a\u8fc7`Windows API`\u5b9e\u73b0\u529f\u80fd\uff1b\n\u5f53\u73af\u5883\u662f`JDK9+`\u65f6\uff0c\u53cd\u5c04\u8c03\u7528\u65b9\u6cd5\u5373\u53ef\u3002\u4fee\u590d\u4e86\u4e00\u5904\u529f\u80fd`bug`\u5e76\u4f18\u5148\u52a0\u8f7d\u5f53\u524d\u76ee\u5f55\u7684`config.yaml`\u6587\u4ef6\uff0c\u4e0d\u4f1a\u5220\u9664\uff0c\u5b9e\u73b0\u4e86\u4fdd\u5b58\u8bbe\u7f6e\u529f\u80fd\u3002\n\n\u53e6\u5916\u63d0\u4f9b\u4e86\u4e24\u79cd`exe`\u7684\u4e0b\u8f7d\uff1a\n- \u5185\u7f6e`JRE`\u548c`xray`\u7684`exe`\u53ef\u4ee5\u4e00\u952e\u542f\u52a8\uff1a`super-xray-0.7-jre-exe.zip`\n- \u8c03\u7528\u7cfb\u7edf`JRE`\u7684`exe`\uff1a`super-xray-0.7-system-jre.exe`\n\n\u7b2c\u4e00\u79cd\u4e0d\u9700\u8981\u5b89\u88c5\u4efb\u4f55\u73af\u5883\uff0c\u89e3\u538b\u540e\u76f4\u63a5\u4f7f\u7528\uff1b\u7b2c\u4e8c\u79cd\u9700\u8981\u672c\u5730`JAVA_HOME`\u6216\u73af\u5883\u53d8\u91cf\u6709\u914d\u7f6e`Java`\n\nBug:\n- [important] \u5bfb\u627e\u4e00\u79cd\u80fd\u591f\u652f\u6301JDK8\u7684\u9b54\u6cd5 #61\n- [important] \u53cd\u8fde\u5e73\u53f0\u6ca1\u6709\u8bbe\u7f6eremote_server\u4e3atrue #57\n- \u4e0d\u80fd\u652f\u6301JDK8\u7684\u89e3\u51b3\u65b9\u6848\u5efa\u8bae #63 (\u540c #61)\n- \u4f7f\u7528IDEA\u76ae\u80a4\u65f6\u5e95\u90e8\u6062\u590d\u6309\u94ae\u65e0\u6cd5\u5c55\u793a\u5b8c\u5168 #55\n\nOthers:\n- [important] \u914d\u7f6e\u6587\u4ef6\u65e0\u6cd5\u4fdd\u5b58\u6bcf\u6b21\u90fd\u4f1a\u65b0\u5efa #58\n- \u4f18\u5316\u542f\u52a8\u811a\u672c #60 (\u6700\u7ec8\u6ca1\u6709\u4f18\u5316\u56e0\u4e3a\u652f\u6301\u4e86`JDK8`)\n", "package com.chaitin.xray.form;\n\nimport com.chaitin.xray.utils.StringUtil;\nimport com.intellij.uiDesigner.core.GridConstraints;\nimport com.intellij.uiDesigner.core.GridLayoutManager;\nimport org.yaml.snakeyaml.Yaml;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class LookupConfigForm {\n    public JPanel lookupConfigPanel;\n    private JTextArea configTextArea;\n    private JButton saveConfigButton;\n    private JButton refreshConfigButton;\n    private JScrollPane configTextPanel;\n    private JPanel configButtonPanel;\n\n    private void initLang() {\n        if (MainForm.LANG == MainForm.CHINESE) {\n            saveConfigButton.setText(\"\u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\");\n            refreshConfigButton.setText(\"\u5237\u65b0\u6700\u65b0\u914d\u7f6e\u6587\u4ef6\");\n        } else {\n            saveConfigButton.setText(\"Save Config\");\n            refreshConfigButton.setText(\"Refresh Config\");\n        }\n    }\n\n    public LookupConfigForm() {\n\n        initLang();\n\n        configTextArea.setText(MainForm.configStr);\n        configTextArea.setCaretPosition(0);\n\n        refreshConfigButton.addActionListener(e -> {\n            if (!StringUtil.notEmpty(MainForm.configPath)) {\n                JOptionPane.showMessageDialog(null, \"\u65e0\u6cd5\u5237\u65b0\");\n                return;\n            }\n            try {\n                byte[] data = Files.readAllBytes(Paths.get(MainForm.configPath));\n                configTextArea.setText(null);\n                configTextArea.setText(new String(data));\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            JOptionPane.showMessageDialog(null, \"\u5df2\u5237\u65b0\u914d\u7f6e\");\n        });\n\n        saveConfigButton.addActionListener(e -> {\n            if (!StringUtil.notEmpty(MainForm.configPath)) {\n                JOptionPane.showMessageDialog(null, \"\u65e0\u6cd5\u4fdd\u5b58\");\n                return;\n            }\n            try {\n                Yaml yaml = new Yaml();\n                String newConfig = configTextArea.getText();\n                MainForm.configObj = yaml.load(newConfig);\n\n                MainForm.configStr = newConfig;\n\n                MainForm.instance.reloadConfig(false, false);\n\n                Files.write(Paths.get(MainForm.configPath),\n                        newConfig.getBytes(StandardCharsets.UTF_8));\n                JOptionPane.showMessageDialog(null, \"\u5df2\u4fdd\u5b58\u914d\u7f6e\");\n            } catch (Exception ex) {\n                JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u914d\u7f6e\u6709\u8bef\");\n                ex.printStackTrace();\n            }\n        });\n    }\n\n    {\n// GUI initializer generated by IntelliJ IDEA GUI Designer\n// >>> IMPORTANT!! <<<\n// DO NOT EDIT OR ADD ANY CODE HERE!\n        $$$setupUI$$$();\n    }\n\n    /**\n     * Method generated by IntelliJ IDEA GUI Designer\n     * >>> IMPORTANT!! <<<\n     * DO NOT edit this method OR call it in your code!\n     *\n     * @noinspection ALL\n     */\n    private void $$$setupUI$$$() {\n        lookupConfigPanel = new JPanel();\n        lookupConfigPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        lookupConfigPanel.setBackground(new Color(-725535));\n        configTextPanel = new JScrollPane();\n        configTextPanel.setBackground(new Color(-725535));\n        lookupConfigPanel.add(configTextPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(600, 500), new Dimension(600, 500), null, 0, false));\n        configTextArea = new JTextArea();\n        configTextArea.setBackground(new Color(-725535));\n        configTextArea.setForeground(new Color(-12828863));\n        configTextPanel.setViewportView(configTextArea);\n        configButtonPanel = new JPanel();\n        configButtonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        configButtonPanel.setBackground(new Color(-725535));\n        lookupConfigPanel.add(configButtonPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        saveConfigButton = new JButton();\n        saveConfigButton.setText(\"\u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\");\n        configButtonPanel.add(saveConfigButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        refreshConfigButton = new JButton();\n        refreshConfigButton.setText(\"\u5237\u65b0\u6700\u65b0\u914d\u7f6e\u6587\u4ef6\");\n        configButtonPanel.add(refreshConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    }\n\n    /**\n     * @noinspection ALL\n     */\n    public JComponent $$$getRootComponent$$$() {\n        return lookupConfigPanel;\n    }\n\n}\n", "package com.chaitin.xray.form;\n\nimport com.chaitin.xray.Application;\nimport com.chaitin.xray.model.Const;\nimport com.chaitin.xray.model.DB;\nimport com.chaitin.xray.model.Poc;\nimport com.chaitin.xray.model.XrayCmd;\nimport com.chaitin.xray.utils.*;\nimport com.formdev.flatlaf.FlatLightLaf;\nimport com.intellij.uiDesigner.core.GridConstraints;\nimport com.intellij.uiDesigner.core.GridLayoutManager;\nimport com.intellij.uiDesigner.core.Spacer;\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\nimport org.yaml.snakeyaml.Yaml;\n\nimport javax.swing.*;\nimport javax.swing.border.TitledBorder;\nimport java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.*;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport java.util.List;\n\npublic class MainForm {\n    private static final Logger logger = LogManager.getLogger(MainForm.class);\n\n    public static MainForm instance;\n    private XrayCmd xrayCmd;\n    public static String configStr;\n    public static String configTemplate;\n    public static String configPath;\n    public static Map<String, Object> configObj;\n    private static ArrayList<JCheckBox> checkBoxList;\n    private static boolean pluginAll = false;\n    private static String outputFilePath;\n    private static final List<String> existOutputList = new ArrayList<>();\n    private static DB db;\n\n    private JButton choseDirButton;\n    private JPanel SuperXray;\n    private JPanel pathButtonPanel;\n    private JLabel xrayPathLabel;\n    private JTextField xrayPathTextField;\n    private JLabel noteLabel;\n    private JPanel configPanel;\n    private JPanel bottomPanel;\n    private JLabel authorLabel;\n    private JPanel leftConfigPanel;\n    private JPanel rightConfigPanel;\n    private JPanel catConfigPanel;\n    private JLabel catConfigLabel;\n    private JPanel loadXrayPanel;\n    private JCheckBox bruteForceCheckBox;\n    private JCheckBox baselineCheckBox;\n    private JCheckBox cmdInjectionCheckBox;\n    private JCheckBox crlfInjectionCheckBox;\n    private JCheckBox dirscanCheckBox;\n    private JCheckBox fastjsonCheckBox;\n    private JCheckBox jsonpCheckBox;\n    private JCheckBox pathTraversalCheckBox;\n    private JCheckBox phantasmCheckBox;\n    private JCheckBox redirectCheckBox;\n    private JCheckBox shiroCheckBox;\n    private JCheckBox sqldetCheckBox;\n    private JCheckBox ssrfCheckBox;\n    private JCheckBox strutsCheckBox;\n    private JCheckBox thinkphpCheckBox;\n    private JCheckBox uploadCheckBox;\n    private JCheckBox xxeCheckBox;\n    private JCheckBox xssCheckBox;\n    private JButton enableAllButton;\n    private JButton advanceButton;\n    private JButton reverseConfigButton;\n    private JButton pocButton;\n    private JButton activeScanButton;\n    private JButton mitmScanButton;\n    private JButton outputConfigButton;\n    private JButton proxyConfigButton;\n    private JPanel outputConfigPanel;\n    private JScrollPane outputPanel;\n    private JTextArea outputTextArea;\n    private JPanel scanOutConfigPanel;\n    private JRadioButton htmlRadioButton;\n    private JRadioButton cliRadioButton;\n    private JRadioButton jsonRadioButton;\n    private JButton urlFileButton;\n    private JTextField urlFileField;\n    private JTextField rawFileField;\n    private JButton rawFileButton;\n    private JTextField urlField;\n    private JButton urlButton;\n    private JButton lookupConfigButton;\n    private JButton lookupCmdButton;\n    private JButton confirmPluginButton;\n    private JPanel pocPanel;\n    private JButton allPoCButton;\n    private JTextField usePoCText;\n    private JPanel scanTargetPanel;\n    private JPanel proxyConfigPanel;\n    private JPanel reverseConfigPanel;\n    private JPanel startScanPanel;\n    private JPanel otherPanel;\n    private JPanel midConfigPanel;\n    private JLabel pocNumLabel;\n    private JTextField portText;\n    private JLabel portLabel;\n    private JPanel mitmPanel;\n    private JTextField proxyText;\n    private JLabel proxyLabel;\n    private JPanel proxyPanel;\n    private JTextField dnsText;\n    private JTextField httpReverseText;\n    private JPanel reverseUrlPanel;\n    private JLabel httpReverseLabel;\n    private JLabel dnsReverseLabel;\n    private JButton stopButton;\n    private JButton resetConfigButton;\n    private JButton openResultButton;\n    private JLabel stopLabel;\n    private JLabel openResultLabel;\n    private JLabel resetConfigLabel;\n    private JPanel resetPanel;\n    private JPanel openResultPanel;\n    private JPanel stopPanel;\n    private JPanel otherButton;\n    private JPanel utilPanel;\n    private JButton httpUtilButton;\n    private JButton encodeUtilButton;\n    private JButton listenUtilButton;\n    private JButton updatePocButton;\n    private JTextField localPoCText;\n    private JButton localPoCButton;\n    private JPanel skinPanel;\n    private JButton saveSkinButton;\n    private JRadioButton metalRadioButton;\n    private JRadioButton flatLafRadioButton;\n    private JRadioButton nimbusRadioButton;\n    private JRadioButton windowsRadioButton;\n    private JRadioButton winClassicRadioButton;\n    private JRadioButton gtkRadioButton;\n    private JRadioButton aquaRadioButton;\n    private JTextField tokenText;\n    private JLabel tokenLabel;\n    private JCheckBox autoDelCheckBox;\n    private JButton cleanAreaButton;\n    private JButton xrayUrlButton;\n    private JRadioButton chineseLangButton;\n    private JRadioButton englishLangButton;\n    private JButton langButton;\n\n    public void init() {\n        logger.info(\"init main form\");\n        checkBoxList = new ArrayList<>();\n        xrayCmd = new XrayCmd();\n\n        try {\n            Path dbPath = Paths.get(\"super-xray.db\");\n            if (Files.exists(dbPath)) {\n                byte[] data = Files.readAllBytes(dbPath);\n                db = DB.parseDB(data);\n            } else {\n                db = new DB();\n                db.setLastXrayPath(null);\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n\n        reloadConfig(true, false);\n\n        logger.info(\"init look up config button\");\n        lookupConfigButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u67e5\u770b\u914d\u7f6e\u6587\u4ef6\";\n            } else {\n                t = \"Lookup Config\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new LookupConfigForm().lookupConfigPanel);\n            frame.pack();\n            frame.setVisible(true);\n        });\n\n        logger.info(\"init look up cmd button\");\n        lookupCmdButton.addActionListener(e ->\n                JOptionPane.showMessageDialog(null, xrayCmd.buildCmd()));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void reloadConfig(boolean init, boolean reset) {\n        Path curConfig = Paths.get(\"config.yaml\");\n        if (init) {\n            if (reset) {\n                InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"config.yaml\");\n                configStr = IOUtil.readStringFromIs(is);\n            } else {\n                if (Files.exists(curConfig)) {\n                    try {\n                        configStr = new String(Files.readAllBytes(curConfig));\n                    } catch (Exception ex) {\n                        logger.error(ex);\n                    }\n                } else {\n                    InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"config.yaml\");\n                    configStr = IOUtil.readStringFromIs(is);\n                }\n            }\n        } else {\n            if (Files.exists(curConfig)) {\n                try {\n                    configStr = new String(Files.readAllBytes(curConfig));\n                } catch (Exception ex) {\n                    logger.error(ex);\n                }\n            }\n        }\n        configTemplate = configStr;\n\n        Yaml yaml = new Yaml();\n        configObj = yaml.load(configStr);\n\n        try {\n            if (StringUtil.notEmpty(configPath)) {\n                Files.write(Paths.get(configPath),\n                        configStr.getBytes(StandardCharsets.UTF_8));\n                Files.write(curConfig,\n                        configStr.getBytes(StandardCharsets.UTF_8));\n            }\n        } catch (Exception ex) {\n            logger.error(ex);\n        }\n\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"plugins\")) {\n                Map<String, Object> plugins = (Map<String, Object>) entry.getValue();\n                for (Map.Entry<String, Object> plugin : plugins.entrySet()) {\n                    if (plugin.getKey().equals(\"baseline\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        baselineCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"brute-force\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        bruteForceCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"cmd-injection\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        cmdInjectionCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"crlf-injection\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        crlfInjectionCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"dirscan\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        dirscanCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"fastjson\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        fastjsonCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"jsonp\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        jsonpCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"path-traversal\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        pathTraversalCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"phantasm\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        phantasmCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"redirect\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        redirectCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"shiro\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        shiroCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"sqldet\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        sqldetCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"ssrf\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        ssrfCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"struts\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        strutsCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"thinkphp\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        thinkphpCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"upload\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        uploadCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"xss\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        xssCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"xxe\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        xxeCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                }\n            }\n        }\n\n        String data = null;\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"http\")) {\n                Map<String, Object> httpModule = (Map<String, Object>) entry.getValue();\n                data = (String) httpModule.get(\"proxy\");\n            }\n        }\n        if (data != null) {\n            proxyText.setText(data);\n        }\n\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"reverse\")) {\n                Map<String, Object> reverse = (Map<String, Object>) entry.getValue();\n                Map<String, Object> client = (Map<String, Object>) reverse.get(\"client\");\n                String token = (String) reverse.get(\"token\");\n                String httpUrl = (String) client.get(\"http_base_url\");\n                String dnsServer = (String) client.get(\"dns_server_ip\");\n                if (StringUtil.notEmpty(httpUrl) || StringUtil.notEmpty(dnsServer)) {\n                    client.put(\"remote_server\", true);\n                }\n                tokenText.setText(token);\n                httpReverseText.setText(httpUrl);\n                dnsText.setText(dnsServer);\n            }\n        }\n    }\n\n    private volatile boolean stop = false;\n\n    private void execAndFresh(String[] finalCmd) {\n        outputTextArea.setText(null);\n        Thread thread = new Thread(() -> {\n            try {\n                Process process = ExecUtil.exec(finalCmd);\n                if (process == null) {\n                    return;\n                }\n                InputStream inputStream = process.getInputStream();\n                if (inputStream == null) {\n                    return;\n                }\n                BufferedReader isReader;\n                if (OSUtil.isWindows()) {\n                    InputStreamReader isr = new InputStreamReader(inputStream,\n                            StandardCharsets.UTF_8);\n                    isReader = new BufferedReader(isr);\n                } else {\n                    isReader = new BufferedReader(new InputStreamReader(inputStream));\n                }\n                String thisLine;\n                new Thread(() -> {\n                    while (true) {\n                        if (stop) {\n                            logger.info(String.format(\"stop pid: %d\", JNAUtil.getProcessID(process)));\n                            try {\n                                if (!OSUtil.isWindows()) {\n                                    new ProcessBuilder(\"kill\", \"-9\",\n                                            Long.toString(JNAUtil.getProcessID(process))).start();\n                                } else {\n                                    new ProcessBuilder(\"cmd.exe\", \"/c\",\n                                            String.format(\"taskkill /f /pid %d\", JNAUtil.getProcessID(process))).start();\n                                }\n                                return;\n                            } catch (IOException e) {\n                                throw new RuntimeException(e);\n                            }\n                        }\n                    }\n                }).start();\n                while ((!stop) && (thisLine = isReader.readLine()) != null) {\n                    outputTextArea.append(thisLine);\n                    outputTextArea.append(\"\\n\");\n                    outputTextArea.setCaretPosition(outputTextArea.getText().length());\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n        thread.start();\n    }\n\n    private void loadXray(String absPath) {\n        logger.info(String.format(\"user chose file: %s\", absPath));\n        String targetDir = Paths.get(absPath).toFile().getParent() + File.separator;\n        XrayUtil.rmAllConfig(targetDir);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> XrayUtil.rmAllConfig(targetDir)));\n\n        xrayPathTextField.setText(absPath);\n        if (!OSUtil.isWindows()) {\n            ExecUtil.chmod(absPath);\n        }\n\n        String[] cmd = new String[]{absPath};\n        Thread t = new Thread(() -> ExecUtil.execCmdNoRet(cmd));\n        t.start();\n        if (OSUtil.isMacOS() &&\n                (!StringUtil.notEmpty(db.getLastXrayPath()) ||\n                        db.getLastXrayPath().equals(\"null\"))) {\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, Const.MacNeedAgree);\n            } else {\n                JOptionPane.showMessageDialog(null, Const.MacNeedAgreeEn);\n            }\n        }\n\n        try {\n            Thread.sleep(1000);\n            t.interrupt();\n        } catch (Exception ex) {\n            logger.error(ex);\n        }\n        XrayUtil.cpAllConfig(targetDir);\n\n        try {\n            Path configPathPath = Paths.get(targetDir + Const.ConfigYaml);\n            configPath = configPathPath.toFile().getAbsolutePath();\n            Files.write(configPathPath,\n                    configStr.getBytes(StandardCharsets.UTF_8));\n        } catch (Exception ex) {\n            logger.error(ex);\n        }\n\n        xrayCmd.setXray(absPath);\n\n        stop = false;\n        execAndFresh(cmd);\n    }\n\n    public void initLoadXray() {\n        logger.info(\"init load xray module\");\n\n        if (StringUtil.notEmpty(db.getLastXrayPath()) &&\n                !db.getLastXrayPath().equals(\"null\")) {\n            loadXray(db.getLastXrayPath());\n        }\n\n        choseDirButton.addActionListener(e -> {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n\n                loadXray(absPath);\n\n                DB data = new DB();\n                data.setLastXrayPath(absPath);\n                try {\n                    Files.write(Paths.get(\"super-xray.db\"), data.getDB().getBytes());\n                } catch (Exception ex) {\n                    logger.error(ex);\n                }\n\n            } else {\n                if (LANG == CHINESE) {\n                    xrayPathTextField.setText(\"\u4f60\u53d6\u6d88\u4e86\u9009\u62e9\");\n                } else {\n                    xrayPathTextField.setText(\"Cancel\");\n                }\n            }\n        });\n    }\n\n    public void initPluginCheckBox() {\n        logger.info(\"init all plugins\");\n        pluginAll = true;\n        checkBoxList.add(bruteForceCheckBox);\n        checkBoxList.add(baselineCheckBox);\n        checkBoxList.add(cmdInjectionCheckBox);\n        checkBoxList.add(jsonpCheckBox);\n        checkBoxList.add(phantasmCheckBox);\n        checkBoxList.add(shiroCheckBox);\n        checkBoxList.add(ssrfCheckBox);\n        checkBoxList.add(thinkphpCheckBox);\n        checkBoxList.add(xssCheckBox);\n        checkBoxList.add(crlfInjectionCheckBox);\n        checkBoxList.add(dirscanCheckBox);\n        checkBoxList.add(fastjsonCheckBox);\n        checkBoxList.add(pathTraversalCheckBox);\n        checkBoxList.add(redirectCheckBox);\n        checkBoxList.add(sqldetCheckBox);\n        checkBoxList.add(strutsCheckBox);\n        checkBoxList.add(uploadCheckBox);\n        checkBoxList.add(xxeCheckBox);\n        enableAllButton.addActionListener(e -> {\n            if (!pluginAll) {\n                for (JCheckBox checkBox : checkBoxList) {\n                    checkBox.setSelected(true);\n                }\n                pluginAll = true;\n            } else {\n                for (JCheckBox checkBox : checkBoxList) {\n                    checkBox.setSelected(false);\n                }\n                pluginAll = false;\n            }\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void initPluginSave() {\n        confirmPluginButton.addActionListener(e -> {\n            for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n                if (entry.getKey().equals(\"plugins\")) {\n                    Map<String, Object> plugins = (Map<String, Object>) entry.getValue();\n                    for (Map.Entry<String, Object> plugin : plugins.entrySet()) {\n                        if (plugin.getKey().equals(\"baseline\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (baselineCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"brute-force\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (bruteForceCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"cmd-injection\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (cmdInjectionCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"crlf-injection\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (crlfInjectionCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"dirscan\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (dirscanCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"fastjson\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (fastjsonCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"jsonp\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (jsonpCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"path-traversal\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (pathTraversalCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"phantasm\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (phantasmCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"redirect\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (redirectCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"shiro\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (shiroCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"sqldet\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (sqldetCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"ssrf\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (ssrfCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"struts\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (strutsCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"thinkphp\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (thinkphpCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"upload\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (uploadCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"xss\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (xssCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"xxe\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (xxeCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                    }\n                }\n            }\n            refreshConfig();\n            xrayCmd.setPoc(null);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u5b8c\u6210\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void refreshConfig() {\n        Yaml yaml = new Yaml();\n        StringWriter writer = new StringWriter();\n        yaml.dump(configObj, writer);\n        configStr = writer.toString();\n        try {\n            Files.write(Paths.get(\"config.yaml\"),\n                    configStr.getBytes(StandardCharsets.UTF_8));\n            Files.write(Paths.get(configPath),\n                    configStr.getBytes(StandardCharsets.UTF_8));\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            logger.error(ex);\n        }\n    }\n\n    public void initAdvanceConfig() {\n        logger.info(\"init advance config button\");\n        advanceButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u9ad8\u7ea7\u914d\u7f6e\";\n            } else {\n                t = \"Advance Config\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new AdvanceConfigForm().advanceConfigPanel);\n            frame.setResizable(true);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    public void initOutputConfig() {\n        logger.info(\"init output config module\");\n        htmlRadioButton.setSelected(true);\n        jsonRadioButton.setSelected(false);\n        cliRadioButton.setSelected(false);\n        outputConfigButton.addActionListener(e -> {\n            refreshOutput();\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u8f93\u51fa\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void refreshOutput() {\n        String uuid = UUID.randomUUID().toString();\n        if (htmlRadioButton.isSelected()) {\n            outputFilePath = Paths.get(String.format(\"./xray-%s.html\", uuid)).toFile().getAbsolutePath();\n            existOutputList.add(outputFilePath);\n            xrayCmd.setOutputPrefix(\"--html-output\");\n            xrayCmd.setOutput(outputFilePath);\n        }\n        if (jsonRadioButton.isSelected()) {\n            outputFilePath = Paths.get(String.format(\"./xray-%s.txt\", uuid)).toFile().getAbsolutePath();\n            existOutputList.add(outputFilePath);\n            xrayCmd.setOutputPrefix(\"--json-output\");\n            xrayCmd.setOutput(outputFilePath);\n        }\n        if (cliRadioButton.isSelected()) {\n            xrayCmd.setOutput(null);\n        }\n    }\n\n    public void initTargetUrlConfig() {\n        urlButton.addActionListener(e -> {\n            urlFileField.setText(null);\n            rawFileField.setText(null);\n            String url = urlField.getText();\n            logger.info(String.format(\"target url: %s\", url));\n            xrayCmd.setInputPrefix(\"--url\");\n            xrayCmd.setInput(url);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6eURL\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void initUrlFileConfig() {\n        logger.info(\"init url file module\");\n        urlFileButton.addActionListener(e -> {\n            urlField.setText(null);\n            rawFileField.setText(null);\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n                urlFileField.setText(absPath);\n                xrayCmd.setInputPrefix(\"--url-file\");\n                xrayCmd.setInput(String.format(\"%s\", absPath));\n            } else {\n                if (LANG == CHINESE) {\n                    rawFileField.setText(\"\u4f60\u53d6\u6d88\u4e86\u9009\u62e9\");\n                } else {\n                    rawFileField.setText(\"Cancel\");\n                }\n            }\n        });\n    }\n\n    public void initRawScanConfig() {\n        logger.info(\"init raw scan module\");\n        rawFileButton.addActionListener(e -> {\n            urlField.setText(null);\n            urlFileField.setText(null);\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n                rawFileField.setText(absPath);\n                xrayCmd.setInputPrefix(\"--raw-request\");\n                xrayCmd.setInput(String.format(\"%s\", absPath));\n            } else {\n                if (LANG == CHINESE) {\n                    rawFileField.setText(\"\u4f60\u53d6\u6d88\u4e86\u9009\u62e9\");\n                } else {\n                    rawFileField.setText(\"Cancel\");\n                }\n            }\n        });\n    }\n\n    public void initActiveScan() {\n        logger.info(\"init active scan module\");\n        activeScanButton.addActionListener(e -> {\n            try {\n                refreshOutput();\n                xrayCmd.setModule(\"webscan\");\n                xrayCmd.setConfig(String.format(\"%s\", configPath));\n                xrayCmd.setOthers(null);\n                String[] finalCmd = xrayCmd.buildCmd();\n                outputTextArea.setText(null);\n                stop = false;\n                execAndFresh(finalCmd);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n    }\n\n    public void initAllPoC() {\n        InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"poc.list\");\n        String allPocStr = IOUtil.readStringFromIs(is);\n        assert allPocStr != null;\n        String[] temp = allPocStr.split(\"\\n\");\n        Poc.addPoc(temp);\n        if (LANG == CHINESE) {\n            pocNumLabel.setText(String.format(\"\u5f53\u524d\u5171\u6709: %s \u4e2aPoC\", Poc.getPocList().size()));\n        } else {\n            pocNumLabel.setText(String.format(\"PoC Num: %s\", Poc.getPocList().size()));\n        }\n        allPoCButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u67e5\u770b\u6240\u6709PoC\";\n            } else {\n                t = \"All PoC\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new AllPoCForm().searchPoC);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void onlyUsePhantasm(String poc) {\n        xrayCmd.setPoc(String.format(\"%s\", poc));\n\n        for (JCheckBox box : checkBoxList) {\n            box.setSelected(false);\n        }\n        phantasmCheckBox.setSelected(true);\n\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"plugins\")) {\n                Map<String, Object> plugins = (Map<String, Object>) entry.getValue();\n                for (Map.Entry<String, Object> plugin : plugins.entrySet()) {\n                    Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                    if (plugin.getKey().equals(\"phantasm\")) {\n                        items.put(\"enabled\", true);\n                    } else {\n                        items.put(\"enabled\", false);\n                    }\n                }\n            }\n        }\n\n        refreshConfig();\n    }\n\n    public void initTargetPoC() {\n        localPoCButton.addActionListener(e -> {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n                String[] temp = absPath.split(\"\\\\.\");\n                String suffix = temp[temp.length - 1].toLowerCase().trim();\n                if (!suffix.equals(\"yml\") && !suffix.equals(\"yaml\")) {\n                    if (LANG == CHINESE) {\n                        JOptionPane.showMessageDialog(null, \"\u4f60\u9009\u62e9\u7684\u4e0d\u662f\u5408\u6cd5YAML\u6587\u4ef6\");\n                    } else {\n                        JOptionPane.showMessageDialog(null, \"Error File Type\");\n                    }\n                    return;\n                }\n                localPoCText.setText(absPath);\n                onlyUsePhantasm(absPath);\n                if (LANG == CHINESE) {\n                    JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6ePoC\u6210\u529f\");\n                } else {\n                    JOptionPane.showMessageDialog(null, \"Success\");\n                }\n            }\n        });\n\n        updatePocButton.addActionListener(e -> {\n            String[] cmd = new String[]{xrayCmd.getXray(), \"ws\", \"--list\"};\n            InputStream is = Objects.requireNonNull(ExecUtil.exec(cmd)).getInputStream();\n            stop = false;\n            execAndFresh(cmd);\n            List<String> poc = new ArrayList<>();\n            String data = IOUtil.readStringFromIs(is);\n            assert data != null;\n            String[] temp = data.split(\"\\n\");\n            for (String s : temp) {\n                s = s.trim();\n                if (s.endsWith(\"\\r\")) {\n                    s = s.substring(0, s.length() - 1);\n                }\n                if (s.contains(\":\")) {\n                    continue;\n                }\n                if (s.contains(\"test\") && !s.contains(\"testrail\")) {\n                    continue;\n                }\n                if (!s.contains(\"poc\")) {\n                    continue;\n                }\n                s = s.substring(2);\n                poc.add(s.trim());\n            }\n            Poc.clear();\n            Poc.addAll(poc);\n            if (LANG == CHINESE) {\n                pocNumLabel.setText(String.format(\"\u5f53\u524d\u5171\u6709: %s \u4e2aPoC\", Poc.getPocList().size()));\n            } else {\n                pocNumLabel.setText(String.format(\"PoC Num: %s\", Poc.getPocList().size()));\n            }\n        });\n\n        pocButton.addActionListener(e -> {\n            String poc = usePoCText.getText();\n            logger.info(poc);\n            if (!Poc.getPocList().contains(poc.trim())) {\n                if (LANG == CHINESE) {\n                    JOptionPane.showMessageDialog(null, \"PoC\u4e0d\u5b58\u5728\");\n                } else {\n                    JOptionPane.showMessageDialog(null, \"PoC Not Exist\");\n                }\n                return;\n            }\n            onlyUsePhantasm(poc);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6ePoC\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    private static boolean mitmRunning = false;\n\n    public void initMitmScan() {\n        mitmScanButton.addActionListener(e -> {\n            if (!mitmRunning) {\n                String port = portText.getText();\n                xrayCmd.setModule(\"webscan\");\n                xrayCmd.setConfig(String.format(\"%s\", configPath));\n                xrayCmd.setInput(null);\n\n                if (StringUtil.notEmpty(xrayCmd.getOutput())) {\n                    refreshOutput();\n                }\n\n                xrayCmd.setOthersPrefix(\"--listen\");\n                xrayCmd.setOthers(\"127.0.0.1:\" + port);\n                String[] cmd = xrayCmd.buildCmd();\n                stop = false;\n                execAndFresh(cmd);\n                if (LANG == CHINESE) {\n                    mitmScanButton.setText(\"\u5173\u95ed\u88ab\u52a8\u76d1\u542c\");\n                } else {\n                    mitmScanButton.setText(\"Shutdown\");\n                }\n                portText.setEnabled(false);\n                mitmRunning = true;\n            } else {\n                stop = true;\n                portText.setEnabled(true);\n                if (LANG == CHINESE) {\n                    mitmScanButton.setText(\"\u5f00\u542f\u88ab\u52a8\u626b\u63cf\");\n                } else {\n                    mitmScanButton.setText(\"Start MITM\");\n                }\n                mitmRunning = false;\n                outputTextArea.setText(null);\n            }\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void initHttpProxy() {\n        String data = null;\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"http\")) {\n                Map<String, Object> httpModule = (Map<String, Object>) entry.getValue();\n                data = (String) httpModule.get(\"proxy\");\n            }\n        }\n        if (data != null) {\n            proxyText.setText(data);\n        }\n        proxyConfigButton.addActionListener(e -> {\n            String httpProxy = proxyText.getText();\n            for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n                if (entry.getKey().equals(\"http\")) {\n                    Map<String, Object> httpModule = (Map<String, Object>) entry.getValue();\n                    httpModule.put(\"proxy\", httpProxy);\n                }\n            }\n            refreshConfig();\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u4ee3\u7406\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void initReverse() {\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"reverse\")) {\n                Map<String, Object> reverse = (Map<String, Object>) entry.getValue();\n                Map<String, Object> client = (Map<String, Object>) reverse.get(\"client\");\n                String token = (String) reverse.get(\"token\");\n                String httpUrl = (String) client.get(\"http_base_url\");\n                String dnsServer = (String) client.get(\"dns_server_ip\");\n                if (StringUtil.notEmpty(httpUrl) || StringUtil.notEmpty(dnsServer)) {\n                    client.put(\"remote_server\", true);\n                }\n                tokenText.setText(token);\n                httpReverseText.setText(httpUrl);\n                dnsText.setText(dnsServer);\n            }\n        }\n\n        reverseConfigButton.addActionListener(e -> {\n            String http = httpReverseText.getText();\n            String dns = dnsText.getText();\n            String token = tokenText.getText();\n            for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n                if (entry.getKey().equals(\"reverse\")) {\n                    Map<String, Object> reverse = (Map<String, Object>) entry.getValue();\n                    Map<String, Object> client = (Map<String, Object>) reverse.get(\"client\");\n                    reverse.put(\"token\", token);\n                    client.put(\"remote_server\", true);\n                    client.put(\"http_base_url\", http);\n                    client.put(\"dns_server_ip\", dns);\n                }\n            }\n            refreshConfig();\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u53cd\u8fde\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void initForcedStop() {\n        stopButton.addActionListener(e -> {\n            stop = true;\n            outputTextArea.setText(null);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u5df2\u5f3a\u5236\u505c\u6b62\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Stop Success\");\n            }\n        });\n    }\n\n    public void initOpenOutput() {\n        autoDelCheckBox.setSelected(false);\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            if (autoDelCheckBox.isSelected()) {\n                for (String s : existOutputList) {\n                    try {\n                        Files.delete(Paths.get(s));\n                    } catch (Exception ignored) {\n                    }\n                }\n            }\n        }));\n\n        openResultButton.addActionListener(e -> {\n            if (outputFilePath == null) {\n                return;\n            }\n            if (StringUtil.notEmpty(outputFilePath.trim())) {\n                if (Files.exists(Paths.get(outputFilePath))) {\n                    String tempOutput = outputFilePath.replace(\".html\",\n                            \"copy.html\");\n                    try {\n                        // copy\n                        Files.write(Paths.get(tempOutput),\n                                Files.readAllBytes(Paths.get(outputFilePath)));\n                    } catch (Exception ignored) {\n                    }\n                    existOutputList.add(tempOutput);\n                    new Thread(() -> ExecUtil.execOpen(tempOutput)).start();\n                } else {\n                    logger.info(\"output file not exist\");\n                }\n            } else {\n                logger.warn(\"output file is none\");\n            }\n        });\n    }\n\n    public void initReset() {\n        resetConfigButton.addActionListener(e -> {\n            reloadConfig(true, true);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u5df2\u6062\u590d\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    private void initHttpUtil() {\n        httpUtilButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"Http\u5de5\u5177\";\n            } else {\n                t = \"Repeater\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new HttpUtilForm().httpUtilPanel);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    public void initListenUtil() {\n        listenUtilButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u76d1\u542c\u7aef\u53e3\u5de5\u5177\";\n            } else {\n                t = \"Listener\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new ListenUtilForm().listenUtilPanel);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    public void initEncodeUtil() {\n        encodeUtilButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u7f16\u7801\u5de5\u5177\";\n            } else {\n                t = \"Decoder\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new EncodeUtilForm().encodeUtilPanel);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    private void initSkin() {\n        switch (Application.globalSkin) {\n            case Const.nimbus:\n                nimbusRadioButton.setSelected(true);\n                break;\n            case Const.aqua:\n                aquaRadioButton.setSelected(true);\n                break;\n            case Const.gtk:\n                gtkRadioButton.setSelected(true);\n                break;\n            case Const.metal:\n                metalRadioButton.setSelected(true);\n                break;\n            case Const.flatLaf:\n                flatLafRadioButton.setSelected(true);\n                break;\n            case Const.windows:\n                windowsRadioButton.setSelected(true);\n                break;\n            case Const.winClassic:\n                winClassicRadioButton.setSelected(true);\n                break;\n            default:\n                logger.error(\"error skin\");\n        }\n\n        saveSkinButton.addActionListener(e -> {\n            try {\n                if (nimbusRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.nimbus);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.nimbus);\n                    db.setSkin(Const.nimbus);\n                } else if (metalRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.metal);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.metal);\n                    db.setSkin(Const.metal);\n                } else if (windowsRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.windows);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.windows);\n                    db.setSkin(Const.windows);\n                } else if (winClassicRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.winClassic);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.winClassic);\n                    db.setSkin(Const.winClassic);\n                } else if (flatLafRadioButton.isSelected()) {\n                    try {\n                        FlatLightLaf.setup();\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    FlatLightLaf.setup();\n                    db.setSkin(Const.flatLaf);\n                } else if (gtkRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.gtk);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.gtk);\n                    db.setSkin(Const.gtk);\n                } else if (aquaRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.aqua);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.aqua);\n                    db.setSkin(Const.aqua);\n                }\n                SwingUtilities.updateComponentTreeUI(SuperXray);\n                SuperXray.revalidate();\n                db.saveDB();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n    }\n\n    private void initOther() {\n        cleanAreaButton.addActionListener(e -> outputTextArea.setText(null));\n        xrayUrlButton.addActionListener(e -> {\n            try {\n                Desktop desktop = Desktop.getDesktop();\n                URI oURL = new URI(\"https://download.xray.cool/xray\");\n                desktop.browse(oURL);\n            } catch (Exception ex) {\n                logger.error(ex);\n            }\n        });\n        authorLabel.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                try {\n                    Desktop desktop = Desktop.getDesktop();\n                    URI oURL = new URI(\"https://github.com/4ra1n\");\n                    desktop.browse(oURL);\n                } catch (Exception ex) {\n                    logger.error(ex);\n                }\n            }\n        });\n    }\n\n    public static final int CHINESE = 0;\n    public static final int ENGLISH = 1;\n    public static int LANG;\n\n    public void initLang() {\n        chineseLangButton.setSelected(true);\n        LANG = CHINESE;\n        englishLangButton.setSelected(false);\n        langButton.addActionListener(e -> {\n            if (chineseLangButton.isSelected()) {\n                LANG = CHINESE;\n            } else if (englishLangButton.isSelected()) {\n                LANG = ENGLISH;\n            }\n            refreshLang();\n            if (LANG == CHINESE) {\n                pocNumLabel.setText(String.format(\"\u5f53\u524d\u5171\u6709: %s \u4e2aPoC\", Poc.getPocList().size()));\n            } else {\n                pocNumLabel.setText(String.format(\"PoC Num: %s\", Poc.getPocList().size()));\n            }\n        });\n    }\n\n    public void refreshLang() {\n        if (LANG == ENGLISH) {\n            xrayPathLabel.setText(\"You selected xray:\");\n            noteLabel.setText(\"<html> Note: Using control+c/v to copy/paste in Mac OS </html>\");\n            langButton.setText(\"Confirm Language\");\n            skinPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Skin Select\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            saveSkinButton.setText(\"Confirm Skin\");\n            leftConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Plugins Config\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            catConfigLabel.setText(\"<html> Using Plugins <br> \" +\n                    \"<b>Please press confirm button after check</b> \" +\n                    \"<p>(Some only supported by the advanced version)</p> </html>\");\n            bruteForceCheckBox.setText(\"bruteforce\");\n            baselineCheckBox.setText(\"baseline\");\n            phantasmCheckBox.setText(\"phantasm\");\n            sqldetCheckBox.setText(\"sqldet\");\n            enableAllButton.setText(\"All select / Cancel\");\n            advanceButton.setText(\"Advance Config\");\n            pocPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"PoC Module\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            pocNumLabel.setText(\"Total PoC Num:\");\n            updatePocButton.setText(\"Update PoC DB\");\n            allPoCButton.setText(\"Lookup All PoC\");\n            pocButton.setText(\"Use PoC\");\n            localPoCButton.setText(\"Chose Local PoC\");\n            scanTargetPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \" Target Config\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            rawFileButton.setText(\"Use Request File\");\n            urlButton.setText(\"Target Url\");\n            urlFileButton.setText(\"Target Url List\");\n            outputConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Output Module\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            outputConfigButton.setText(\"Save Output Config\");\n            utilPanel.setBorder(BorderFactory.createTitledBorder(null, \"Tools\",\n                    TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            httpUtilButton.setText(\"Repeater\");\n            listenUtilButton.setText(\"Listener\");\n            encodeUtilButton.setText(\"Decoder\");\n            proxyConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Proxy Config\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            proxyLabel.setText(\"Input HTTP Proxy\");\n            proxyConfigButton.setText(\"Confirm\");\n            reverseConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Reverse\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            tokenLabel.setText(\"Token\");\n            httpReverseLabel.setText(\"Input HTTP URL(IP)\");\n            dnsReverseLabel.setText(\"DNS IP(IP)\");\n            reverseConfigButton.setText(\"Confirm\");\n            startScanPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Start\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            activeScanButton.setText(\"Start Active Scan\");\n            portLabel.setText(\"Listen Port\");\n            mitmScanButton.setText(\"Open MITM Scan\");\n            otherPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Others\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            lookupCmdButton.setText(\"Lookup Current Command\");\n            lookupConfigButton.setText(\"Lookup Current Config\");\n            xrayUrlButton.setText(\"Xray Download\");\n            cleanAreaButton.setText(\"Clear Console\");\n            outputPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Console\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            stopLabel.setText(\"  Force Stop\");\n            resetConfigLabel.setText(\"Reset Default Config\");\n            openResultLabel.setText(\" Open Scan Result\");\n            stopButton.setText(\"Stop\");\n            resetConfigButton.setText(\"Reset\");\n            autoDelCheckBox.setText(\"Delete All Reports When Exit\");\n            openResultButton.setText(\"Open\");\n            choseDirButton.setText(\"Chose File\");\n            confirmPluginButton.setText(\"Confirm\");\n        } else if (LANG == CHINESE) {\n            xrayPathLabel.setText(\"\u4f60\u9009\u62e9\u7684xray\u6587\u4ef6\u662f\uff1a\");\n            noteLabel.setText(\"<html> \u6ce8\u610f\uff1a\u5728 Mac OS \u4e2d\u8bf7\u7528 control+c/v \u590d\u5236/\u7c98\u8d34 </html>\");\n            langButton.setText(\"\u786e\u8ba4\u8bed\u8a00\");\n            skinPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u76ae\u80a4\u9009\u62e9\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            saveSkinButton.setText(\"\u786e\u8ba4\u76ae\u80a4\");\n            leftConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u626b\u63cf\u63d2\u4ef6\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            catConfigLabel.setText(\"<html> \u4f7f\u7528\u7684\u63d2\u4ef6\uff1a <br> \" +\n                    \"<b>\u8bf7\u914d\u7f6e\u5b8c\u6210\u540e\u70b9\u51fb->\u786e\u8ba4\u63d2\u4ef6</b> <p>(\u90e8\u5206\u63d2\u4ef6\u4ec5\u9ad8\u7ea7\u7248\u652f\u6301)</p> </html>\");\n            bruteForceCheckBox.setText(\"bruteforce\uff08\u66b4\u529b\u7834\u89e3\uff09\");\n            baselineCheckBox.setText(\"baseline\uff08\u57fa\u7ebf\u68c0\u67e5\uff09\");\n            phantasmCheckBox.setText(\"phantasm\uff08PoC\u5408\u96c6\uff09\");\n            sqldetCheckBox.setText(\"sqldet\uff08sql\u6ce8\u5165\uff09\");\n            enableAllButton.setText(\"\u5168\u9009 / \u53d6\u6d88\u5168\u9009\");\n            advanceButton.setText(\"\u9ad8\u7ea7\u914d\u7f6e\");\n            pocPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"PoC\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            pocNumLabel.setText(\"\u5f53\u524dxray\u7684PoC\u6570\u91cf\uff1a\");\n            updatePocButton.setText(\"\u540c\u6b65PoC\u6570\u636e\u5e93\");\n            allPoCButton.setText(\"\u67e5\u770b\u6240\u6709PoC\");\n            pocButton.setText(\"\u6307\u5b9aPoC\");\n            localPoCButton.setText(\"\u9009\u62e9\u672c\u5730PoC\");\n            scanTargetPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \" \u626b\u63cf\u76ee\u6807\u8bbe\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            rawFileButton.setText(\"\u6307\u5b9arequest\u6587\u4ef6\");\n            urlButton.setText(\"\u6307\u5b9aurl\");\n            urlFileButton.setText(\"\u6307\u5b9aurl\u5217\u8868\u6587\u4ef6\");\n            outputConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u8f93\u51fa\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            outputConfigButton.setText(\"\u70b9\u51fb\u786e\u8ba4\u8f93\u51fa\u914d\u7f6e\");\n            utilPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u5c0f\u5de5\u5177\",\n                    TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            httpUtilButton.setText(\"http \u8bf7\u6c42\u6d4b\u8bd5\");\n            listenUtilButton.setText(\"\u76d1\u542c\u7aef\u53e3\");\n            encodeUtilButton.setText(\"\u7f16\u7801\u5de5\u5177\");\n            proxyConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u4ee3\u7406\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            proxyLabel.setText(\"\u8f93\u5165HTTP\u4ee3\u7406URL\");\n            proxyConfigButton.setText(\"\u786e\u8ba4\");\n            reverseConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u53cd\u8fde\u5e73\u53f0\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            tokenLabel.setText(\"Token\");\n            httpReverseLabel.setText(\"\u8bf7\u8f93\u5165HTTP URL\uff08IP\u5f62\u5f0f\uff09\");\n            dnsReverseLabel.setText(\"DNS IP\uff08IP\u5f62\u5f0f\uff09\");\n            reverseConfigButton.setText(\"\u786e\u8ba4\u914d\u7f6e\");\n            startScanPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u542f\u52a8\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            activeScanButton.setText(\"\u5f00\u542f\u4e3b\u52a8\u626b\u63cf\");\n            portLabel.setText(\"\u88ab\u52a8\u76d1\u542c\u7aef\u53e3:\");\n            mitmScanButton.setText(\"\u5f00\u542f\u88ab\u52a8\u626b\u63cf\");\n            otherPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u5176\u4ed6\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            lookupCmdButton.setText(\"\u67e5\u770b\u5f53\u524d\u547d\u4ee4\");\n            lookupConfigButton.setText(\"\u67e5\u770b\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\");\n            xrayUrlButton.setText(\"xray\u4e0b\u8f7d\u7f51\u7ad9\");\n            cleanAreaButton.setText(\"\u6e05\u7a7a\u547d\u4ee4\u884c\u8f93\u51fa\");\n            outputPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u547d\u4ee4\u884c\u8f93\u51fa\u7ed3\u679c\uff1a\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            stopLabel.setText(\"  \u5982\u679c\u610f\u5916\u5730\u8fd0\u884c\u4e86\u5371\u9669\u7684\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\uff1a\");\n            resetConfigLabel.setText(\"\u6062\u590d\u9ed8\u8ba4\u914d\u7f6e\uff1a\");\n            openResultLabel.setText(\" \u6253\u5f00\u626b\u63cf\u7ed3\u679c\uff1a\uff08\u5982\u679c\u5b58\u5728\uff09\");\n            stopButton.setText(\"\u5f3a\u5236\u505c\u6b62\");\n            resetConfigButton.setText(\"\u786e\u8ba4\");\n            autoDelCheckBox.setText(\"\u5173\u95ed\u540e\u81ea\u52a8\u5220\u9664\u62a5\u544a\");\n            openResultButton.setText(\"\u70b9\u51fb\u6253\u5f00\u626b\u63cf\u7ed3\u679c\");\n            choseDirButton.setText(\"\u70b9\u51fb\u6309\u94ae\u9009\u62e9\");\n            confirmPluginButton.setText(\"\u786e\u8ba4\u63d2\u4ef6\");\n        }\n    }\n\n    private void initExit() {\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            instance.stop = true;\n            try {\n                Thread.sleep(3000);\n            } catch (Exception ignored) {\n            }\n        }));\n    }\n\n    public MainForm() {\n        init();\n        initLang();\n        initSkin();\n        initLoadXray();\n        initPluginCheckBox();\n        initPluginSave();\n        initAdvanceConfig();\n        initOutputConfig();\n        initRawScanConfig();\n        initUrlFileConfig();\n        initTargetUrlConfig();\n        initAllPoC();\n        initHttpProxy();\n        initTargetPoC();\n        initActiveScan();\n        initMitmScan();\n        initReverse();\n        initForcedStop();\n        initOpenOutput();\n        initReset();\n        initHttpUtil();\n        initListenUtil();\n        initEncodeUtil();\n        initOther();\n        initExit();\n    }\n\n    public static void startMainForm() {\n        JFrame frame = new JFrame(Const.ApplicationName);\n        instance = new MainForm();\n        frame.setContentPane(instance.SuperXray);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.pack();\n        frame.setVisible(true);\n\n        frame.setSize(1280, 960);\n\n    }\n\n    {\n// GUI initializer generated by IntelliJ IDEA GUI Designer\n// >>> IMPORTANT!! <<<\n// DO NOT EDIT OR ADD ANY CODE HERE!\n        $$$setupUI$$$();\n    }\n\n    /**\n     * Method generated by IntelliJ IDEA GUI Designer\n     * >>> IMPORTANT!! <<<\n     * DO NOT edit this method OR call it in your code!\n     *\n     * @noinspection ALL\n     */\n    private void $$$setupUI$$$() {\n        SuperXray = new JPanel();\n        SuperXray.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));\n        SuperXray.setBackground(new Color(-725535));\n        loadXrayPanel = new JPanel();\n        loadXrayPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n        loadXrayPanel.setBackground(new Color(-725535));\n        SuperXray.add(loadXrayPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        loadXrayPanel.setBorder(BorderFactory.createTitledBorder(null, \"Super Xray\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        pathButtonPanel = new JPanel();\n        pathButtonPanel.setLayout(new GridLayoutManager(2, 6, new Insets(0, 0, 0, 0), -1, -1));\n        pathButtonPanel.setBackground(new Color(-725535));\n        loadXrayPanel.add(pathButtonPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        choseDirButton = new JButton();\n        choseDirButton.setText(\"\u70b9\u51fb\u6309\u94ae\u9009\u62e9\");\n        pathButtonPanel.add(choseDirButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        noteLabel = new JLabel();\n        noteLabel.setText(\"<html>\\n\u6ce8\u610f\uff1a\u5728 Mac OS \u4e2d\u8bf7\u7528 control+c/v \u590d\u5236/\u7c98\u8d34\\n</html>\");\n        pathButtonPanel.add(noteLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, -1), null, null, 0, false));\n        skinPanel = new JPanel();\n        skinPanel.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));\n        skinPanel.setBackground(new Color(-725535));\n        pathButtonPanel.add(skinPanel, new GridConstraints(0, 5, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        skinPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u76ae\u80a4\u9009\u62e9\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        metalRadioButton = new JRadioButton();\n        metalRadioButton.setBackground(new Color(-725535));\n        metalRadioButton.setText(\"Metal\");\n        skinPanel.add(metalRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        flatLafRadioButton = new JRadioButton();\n        flatLafRadioButton.setBackground(new Color(-725535));\n        flatLafRadioButton.setText(\"FlatLaf\");\n        skinPanel.add(flatLafRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        nimbusRadioButton = new JRadioButton();\n        nimbusRadioButton.setBackground(new Color(-725535));\n        nimbusRadioButton.setText(\"Nimbus\");\n        skinPanel.add(nimbusRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        windowsRadioButton = new JRadioButton();\n        windowsRadioButton.setBackground(new Color(-725535));\n        windowsRadioButton.setText(\"Win\");\n        skinPanel.add(windowsRadioButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        winClassicRadioButton = new JRadioButton();\n        winClassicRadioButton.setBackground(new Color(-725535));\n        winClassicRadioButton.setText(\"Win Classic\");\n        skinPanel.add(winClassicRadioButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        gtkRadioButton = new JRadioButton();\n        gtkRadioButton.setBackground(new Color(-725535));\n        gtkRadioButton.setText(\"Gtk\");\n        skinPanel.add(gtkRadioButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        saveSkinButton = new JButton();\n        saveSkinButton.setText(\"\u786e\u8ba4\u76ae\u80a4\");\n        skinPanel.add(saveSkinButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        aquaRadioButton = new JRadioButton();\n        aquaRadioButton.setBackground(new Color(-725535));\n        aquaRadioButton.setText(\"Aqua\");\n        skinPanel.add(aquaRadioButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xrayPathLabel = new JLabel();\n        xrayPathLabel.setText(\"\u4f60\u9009\u62e9\u7684xray\u6587\u4ef6\u662f\uff1a\");\n        pathButtonPanel.add(xrayPathLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xrayPathTextField = new JTextField();\n        xrayPathTextField.setEditable(false);\n        xrayPathTextField.setEnabled(false);\n        pathButtonPanel.add(xrayPathTextField, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, -1), null, 0, false));\n        englishLangButton = new JRadioButton();\n        englishLangButton.setBackground(new Color(-725535));\n        englishLangButton.setText(\"English\");\n        pathButtonPanel.add(englishLangButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        chineseLangButton = new JRadioButton();\n        chineseLangButton.setBackground(new Color(-725535));\n        chineseLangButton.setText(\"\u7b80\u4f53\u4e2d\u6587\");\n        pathButtonPanel.add(chineseLangButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        langButton = new JButton();\n        langButton.setText(\"\u786e\u8ba4\u8bed\u8a00\");\n        pathButtonPanel.add(langButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        configPanel = new JPanel();\n        configPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));\n        configPanel.setBackground(new Color(-725535));\n        SuperXray.add(configPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        leftConfigPanel = new JPanel();\n        leftConfigPanel.setLayout(new GridLayoutManager(11, 4, new Insets(0, 0, 0, 0), -1, -1));\n        leftConfigPanel.setBackground(new Color(-725535));\n        leftConfigPanel.setEnabled(true);\n        leftConfigPanel.setForeground(new Color(-4540485));\n        leftConfigPanel.setToolTipText(\"\");\n        configPanel.add(leftConfigPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        leftConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u626b\u63cf\u63d2\u4ef6\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        catConfigPanel = new JPanel();\n        catConfigPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        catConfigPanel.setBackground(new Color(-725535));\n        leftConfigPanel.add(catConfigPanel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));\n        catConfigLabel = new JLabel();\n        catConfigLabel.setText(\"<html>\\n\u4f7f\u7528\u7684\u63d2\u4ef6\uff1a\\n<br>\\n<b>\u8bf7\u914d\u7f6e\u5b8c\u6210\u540e\u70b9\u51fb->\u786e\u8ba4\u63d2\u4ef6</b>\\n<p>(\u90e8\u5206\u63d2\u4ef6\u4ec5\u9ad8\u7ea7\u7248\u652f\u6301)</p>\\n</html>\");\n        catConfigPanel.add(catConfigLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        confirmPluginButton = new JButton();\n        confirmPluginButton.setText(\"\u786e\u8ba4\u63d2\u4ef6\");\n        catConfigPanel.add(confirmPluginButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        bruteForceCheckBox = new JCheckBox();\n        bruteForceCheckBox.setBackground(new Color(-725535));\n        bruteForceCheckBox.setText(\"bruteforce\uff08\u66b4\u529b\u7834\u89e3\uff09\");\n        leftConfigPanel.add(bruteForceCheckBox, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        baselineCheckBox = new JCheckBox();\n        baselineCheckBox.setBackground(new Color(-725535));\n        baselineCheckBox.setText(\"baseline\uff08\u57fa\u7ebf\u68c0\u67e5\uff09\");\n        leftConfigPanel.add(baselineCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        cmdInjectionCheckBox = new JCheckBox();\n        cmdInjectionCheckBox.setBackground(new Color(-725535));\n        cmdInjectionCheckBox.setText(\"cmd-injection\");\n        leftConfigPanel.add(cmdInjectionCheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        crlfInjectionCheckBox = new JCheckBox();\n        crlfInjectionCheckBox.setBackground(new Color(-725535));\n        crlfInjectionCheckBox.setText(\"crlf-injection\");\n        leftConfigPanel.add(crlfInjectionCheckBox, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        dirscanCheckBox = new JCheckBox();\n        dirscanCheckBox.setBackground(new Color(-725535));\n        dirscanCheckBox.setText(\"dirscan\");\n        leftConfigPanel.add(dirscanCheckBox, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        fastjsonCheckBox = new JCheckBox();\n        fastjsonCheckBox.setBackground(new Color(-725535));\n        fastjsonCheckBox.setText(\"fastjson\");\n        leftConfigPanel.add(fastjsonCheckBox, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        jsonpCheckBox = new JCheckBox();\n        jsonpCheckBox.setBackground(new Color(-725535));\n        jsonpCheckBox.setText(\"jsonp\");\n        leftConfigPanel.add(jsonpCheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        pathTraversalCheckBox = new JCheckBox();\n        pathTraversalCheckBox.setBackground(new Color(-725535));\n        pathTraversalCheckBox.setText(\"path-traversal\");\n        leftConfigPanel.add(pathTraversalCheckBox, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        phantasmCheckBox = new JCheckBox();\n        phantasmCheckBox.setBackground(new Color(-725535));\n        phantasmCheckBox.setText(\"phantasm\uff08PoC\u5408\u96c6\uff09\");\n        leftConfigPanel.add(phantasmCheckBox, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        redirectCheckBox = new JCheckBox();\n        redirectCheckBox.setBackground(new Color(-725535));\n        redirectCheckBox.setEnabled(true);\n        redirectCheckBox.setText(\"redirect\");\n        leftConfigPanel.add(redirectCheckBox, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        shiroCheckBox = new JCheckBox();\n        shiroCheckBox.setBackground(new Color(-725535));\n        shiroCheckBox.setText(\"shiro\");\n        leftConfigPanel.add(shiroCheckBox, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        sqldetCheckBox = new JCheckBox();\n        sqldetCheckBox.setBackground(new Color(-725535));\n        sqldetCheckBox.setText(\"sqldet\uff08sql\u6ce8\u5165\uff09\");\n        leftConfigPanel.add(sqldetCheckBox, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        ssrfCheckBox = new JCheckBox();\n        ssrfCheckBox.setBackground(new Color(-725535));\n        ssrfCheckBox.setText(\"ssrf\");\n        leftConfigPanel.add(ssrfCheckBox, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        strutsCheckBox = new JCheckBox();\n        strutsCheckBox.setBackground(new Color(-725535));\n        strutsCheckBox.setText(\"struts\");\n        leftConfigPanel.add(strutsCheckBox, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        thinkphpCheckBox = new JCheckBox();\n        thinkphpCheckBox.setBackground(new Color(-725535));\n        thinkphpCheckBox.setText(\"thinkphp\");\n        leftConfigPanel.add(thinkphpCheckBox, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        uploadCheckBox = new JCheckBox();\n        uploadCheckBox.setBackground(new Color(-725535));\n        uploadCheckBox.setText(\"upload\");\n        leftConfigPanel.add(uploadCheckBox, new GridConstraints(8, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xxeCheckBox = new JCheckBox();\n        xxeCheckBox.setBackground(new Color(-725535));\n        xxeCheckBox.setText(\"xxe\");\n        leftConfigPanel.add(xxeCheckBox, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xssCheckBox = new JCheckBox();\n        xssCheckBox.setBackground(new Color(-725535));\n        xssCheckBox.setText(\"xss\");\n        leftConfigPanel.add(xssCheckBox, new GridConstraints(9, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        enableAllButton = new JButton();\n        enableAllButton.setText(\"\u5168\u9009 / \u53d6\u6d88\u5168\u9009\");\n        leftConfigPanel.add(enableAllButton, new GridConstraints(10, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        advanceButton = new JButton();\n        advanceButton.setText(\"\u9ad8\u7ea7\u914d\u7f6e\");\n        leftConfigPanel.add(advanceButton, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        rightConfigPanel = new JPanel();\n        rightConfigPanel.setLayout(new GridLayoutManager(8, 1, new Insets(0, 0, 0, 0), -1, -1));\n        rightConfigPanel.setBackground(new Color(-725535));\n        rightConfigPanel.setEnabled(true);\n        configPanel.add(rightConfigPanel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        proxyConfigPanel = new JPanel();\n        proxyConfigPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n        proxyConfigPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(proxyConfigPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        proxyConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u4ee3\u7406\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        proxyPanel = new JPanel();\n        proxyPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        proxyPanel.setBackground(new Color(-725535));\n        proxyConfigPanel.add(proxyPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        proxyConfigButton = new JButton();\n        proxyConfigButton.setText(\"\u786e\u8ba4\");\n        proxyPanel.add(proxyConfigButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        proxyLabel = new JLabel();\n        proxyLabel.setText(\"\u8f93\u5165HTTP\u4ee3\u7406URL\");\n        proxyPanel.add(proxyLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        proxyText = new JTextField();\n        proxyPanel.add(proxyText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        reverseConfigPanel = new JPanel();\n        reverseConfigPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        reverseConfigPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(reverseConfigPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        reverseConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u53cd\u8fde\u5e73\u53f0\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        reverseUrlPanel = new JPanel();\n        reverseUrlPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));\n        reverseUrlPanel.setBackground(new Color(-725535));\n        reverseConfigPanel.add(reverseUrlPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        httpReverseLabel = new JLabel();\n        httpReverseLabel.setText(\"\u8bf7\u8f93\u5165HTTP URL\uff08IP\u5f62\u5f0f\uff09\");\n        reverseUrlPanel.add(httpReverseLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        httpReverseText = new JTextField();\n        reverseUrlPanel.add(httpReverseText, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        dnsReverseLabel = new JLabel();\n        dnsReverseLabel.setText(\"DNS IP\uff08IP\u5f62\u5f0f\uff09\");\n        reverseUrlPanel.add(dnsReverseLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        dnsText = new JTextField();\n        reverseUrlPanel.add(dnsText, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        tokenLabel = new JLabel();\n        tokenLabel.setText(\"Token\");\n        reverseUrlPanel.add(tokenLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        tokenText = new JTextField();\n        reverseUrlPanel.add(tokenText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        reverseConfigButton = new JButton();\n        reverseConfigButton.setText(\"\u786e\u8ba4\u914d\u7f6e\");\n        reverseConfigPanel.add(reverseConfigButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        startScanPanel = new JPanel();\n        startScanPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        startScanPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(startScanPanel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        startScanPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u542f\u52a8\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        activeScanButton = new JButton();\n        activeScanButton.setText(\"\u5f00\u542f\u4e3b\u52a8\u626b\u63cf\");\n        startScanPanel.add(activeScanButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        mitmPanel = new JPanel();\n        mitmPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        mitmPanel.setBackground(new Color(-725535));\n        startScanPanel.add(mitmPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        mitmScanButton = new JButton();\n        mitmScanButton.setText(\"\u5f00\u542f\u88ab\u52a8\u626b\u63cf\");\n        mitmPanel.add(mitmScanButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        portText = new JTextField();\n        portText.setText(\"\");\n        mitmPanel.add(portText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        portLabel = new JLabel();\n        portLabel.setText(\"\u88ab\u52a8\u76d1\u542c\u7aef\u53e3:\");\n        mitmPanel.add(portLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        otherPanel = new JPanel();\n        otherPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));\n        otherPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(otherPanel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        otherPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u5176\u4ed6\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        lookupCmdButton = new JButton();\n        lookupCmdButton.setText(\"\u67e5\u770b\u5f53\u524d\u547d\u4ee4\");\n        otherPanel.add(lookupCmdButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        lookupConfigButton = new JButton();\n        lookupConfigButton.setText(\"\u67e5\u770b\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\");\n        otherPanel.add(lookupConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        cleanAreaButton = new JButton();\n        cleanAreaButton.setText(\"\u6e05\u7a7a\u547d\u4ee4\u884c\u8f93\u51fa\");\n        otherPanel.add(cleanAreaButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xrayUrlButton = new JButton();\n        xrayUrlButton.setText(\"xray\u4e0b\u8f7d\u7f51\u7ad9\");\n        otherPanel.add(xrayUrlButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        midConfigPanel = new JPanel();\n        midConfigPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));\n        midConfigPanel.setBackground(new Color(-725535));\n        configPanel.add(midConfigPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        pocPanel = new JPanel();\n        pocPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));\n        pocPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(pocPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));\n        pocPanel.setBorder(BorderFactory.createTitledBorder(null, \"PoC\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        pocButton = new JButton();\n        pocButton.setText(\"\u6307\u5b9aPoC\");\n        pocPanel.add(pocButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        allPoCButton = new JButton();\n        allPoCButton.setText(\"\u67e5\u770b\u6240\u6709PoC\");\n        pocPanel.add(allPoCButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        usePoCText = new JTextField();\n        pocPanel.add(usePoCText, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        pocNumLabel = new JLabel();\n        pocNumLabel.setText(\"\u5f53\u524dxray\u7684PoC\u6570\u91cf\uff1a\");\n        pocPanel.add(pocNumLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        updatePocButton = new JButton();\n        updatePocButton.setText(\"\u540c\u6b65PoC\u6570\u636e\u5e93\");\n        pocPanel.add(updatePocButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        localPoCText = new JTextField();\n        localPoCText.setEditable(false);\n        localPoCText.setEnabled(false);\n        pocPanel.add(localPoCText, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        localPoCButton = new JButton();\n        localPoCButton.setText(\"\u9009\u62e9\u672c\u5730PoC\");\n        pocPanel.add(localPoCButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        scanTargetPanel = new JPanel();\n        scanTargetPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));\n        scanTargetPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(scanTargetPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        scanTargetPanel.setBorder(BorderFactory.createTitledBorder(null, \" \u626b\u63cf\u76ee\u6807\u8bbe\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        rawFileField = new JTextField();\n        rawFileField.setEditable(false);\n        rawFileField.setEnabled(false);\n        scanTargetPanel.add(rawFileField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        rawFileButton = new JButton();\n        rawFileButton.setText(\"\u6307\u5b9arequest\u6587\u4ef6\");\n        scanTargetPanel.add(rawFileButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        urlField = new JTextField();\n        urlField.setEditable(true);\n        scanTargetPanel.add(urlField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        urlButton = new JButton();\n        urlButton.setText(\"\u6307\u5b9aurl\");\n        scanTargetPanel.add(urlButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        urlFileField = new JTextField();\n        urlFileField.setEditable(false);\n        urlFileField.setEnabled(false);\n        scanTargetPanel.add(urlFileField, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        urlFileButton = new JButton();\n        urlFileButton.setText(\"\u6307\u5b9aurl\u5217\u8868\u6587\u4ef6\");\n        scanTargetPanel.add(urlFileButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        outputConfigPanel = new JPanel();\n        outputConfigPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));\n        outputConfigPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(outputConfigPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        outputConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u8f93\u51fa\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        outputConfigButton = new JButton();\n        outputConfigButton.setText(\"\u70b9\u51fb\u786e\u8ba4\u8f93\u51fa\u914d\u7f6e\");\n        outputConfigPanel.add(outputConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        scanOutConfigPanel = new JPanel();\n        scanOutConfigPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        scanOutConfigPanel.setBackground(new Color(-725535));\n        outputConfigPanel.add(scanOutConfigPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        htmlRadioButton = new JRadioButton();\n        htmlRadioButton.setBackground(new Color(-725535));\n        htmlRadioButton.setText(\"html\");\n        scanOutConfigPanel.add(htmlRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        cliRadioButton = new JRadioButton();\n        cliRadioButton.setBackground(new Color(-725535));\n        cliRadioButton.setText(\"cli\");\n        scanOutConfigPanel.add(cliRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        jsonRadioButton = new JRadioButton();\n        jsonRadioButton.setBackground(new Color(-725535));\n        jsonRadioButton.setText(\"json\");\n        scanOutConfigPanel.add(jsonRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        utilPanel = new JPanel();\n        utilPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        utilPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(utilPanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        utilPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u5c0f\u5de5\u5177\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        httpUtilButton = new JButton();\n        httpUtilButton.setText(\"http \u8bf7\u6c42\u6d4b\u8bd5\");\n        utilPanel.add(httpUtilButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        encodeUtilButton = new JButton();\n        encodeUtilButton.setText(\"\u7f16\u7801\u5de5\u5177\");\n        utilPanel.add(encodeUtilButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        listenUtilButton = new JButton();\n        listenUtilButton.setText(\"\u76d1\u542c\u7aef\u53e3\");\n        utilPanel.add(listenUtilButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        bottomPanel = new JPanel();\n        bottomPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        bottomPanel.setBackground(new Color(-725535));\n        SuperXray.add(bottomPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        authorLabel = new JLabel();\n        authorLabel.setHorizontalAlignment(0);\n        authorLabel.setHorizontalTextPosition(0);\n        authorLabel.setText(\"<html> <p>Author: 4ra1n (https://github.com/4ra1n) from Chaitin Tech</p> </html>\");\n        bottomPanel.add(authorLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        final Spacer spacer1 = new Spacer();\n        bottomPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), null, null, 0, false));\n        outputPanel = new JScrollPane();\n        outputPanel.setBackground(new Color(-725535));\n        outputPanel.setForeground(new Color(-725535));\n        SuperXray.add(outputPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 200), null, null, 0, false));\n        outputPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u547d\u4ee4\u884c\u8f93\u51fa\u7ed3\u679c\uff1a\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        outputTextArea = new JTextArea();\n        outputTextArea.setBackground(new Color(-12828863));\n        outputTextArea.setEditable(false);\n        outputTextArea.setForeground(new Color(-16711895));\n        outputTextArea.setLineWrap(true);\n        outputPanel.setViewportView(outputTextArea);\n        otherButton = new JPanel();\n        otherButton.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));\n        otherButton.setBackground(new Color(-725535));\n        SuperXray.add(otherButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        resetPanel = new JPanel();\n        resetPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        resetPanel.setBackground(new Color(-725535));\n        otherButton.add(resetPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        resetConfigLabel = new JLabel();\n        resetConfigLabel.setText(\"\u6062\u590d\u9ed8\u8ba4\u914d\u7f6e\uff1a\");\n        resetPanel.add(resetConfigLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        resetConfigButton = new JButton();\n        resetConfigButton.setText(\"\u786e\u8ba4\");\n        resetPanel.add(resetConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(100, -1), 0, false));\n        openResultPanel = new JPanel();\n        openResultPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        openResultPanel.setBackground(new Color(-725535));\n        otherButton.add(openResultPanel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));\n        openResultLabel = new JLabel();\n        openResultLabel.setText(\" \u6253\u5f00\u626b\u63cf\u7ed3\u679c\uff1a\uff08\u5982\u679c\u5b58\u5728\uff09\");\n        openResultPanel.add(openResultLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        openResultButton = new JButton();\n        openResultButton.setText(\"\u70b9\u51fb\u6253\u5f00\u626b\u63cf\u7ed3\u679c\");\n        openResultPanel.add(openResultButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        autoDelCheckBox = new JCheckBox();\n        autoDelCheckBox.setBackground(new Color(-725535));\n        autoDelCheckBox.setText(\"\u5173\u95ed\u540e\u81ea\u52a8\u5220\u9664\u62a5\u544a\");\n        openResultPanel.add(autoDelCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        stopPanel = new JPanel();\n        stopPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        stopPanel.setBackground(new Color(-725535));\n        otherButton.add(stopPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        stopLabel = new JLabel();\n        stopLabel.setText(\"  \u5982\u679c\u610f\u5916\u5730\u8fd0\u884c\u4e86\u5371\u9669\u7684\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\uff1a\");\n        stopPanel.add(stopLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        stopButton = new JButton();\n        stopButton.setText(\"\u5f3a\u5236\u505c\u6b62\");\n        stopPanel.add(stopButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        ButtonGroup buttonGroup;\n        buttonGroup = new ButtonGroup();\n        buttonGroup.add(htmlRadioButton);\n        buttonGroup.add(cliRadioButton);\n        buttonGroup.add(jsonRadioButton);\n        buttonGroup = new ButtonGroup();\n        buttonGroup.add(metalRadioButton);\n        buttonGroup.add(flatLafRadioButton);\n        buttonGroup.add(nimbusRadioButton);\n        buttonGroup.add(windowsRadioButton);\n        buttonGroup.add(winClassicRadioButton);\n        buttonGroup.add(gtkRadioButton);\n        buttonGroup.add(aquaRadioButton);\n        buttonGroup = new ButtonGroup();\n        buttonGroup.add(chineseLangButton);\n        buttonGroup.add(englishLangButton);\n    }\n\n    /**\n     * @noinspection ALL\n     */\n    public JComponent $$$getRootComponent$$$() {\n        return SuperXray;\n    }\n\n}\n", "package com.chaitin.xray.test;\n\n\nimport com.chaitin.xray.utils.JNAUtil;\n\npublic class Main {\n    public static void main(String[] args)throws Exception {\n        Process p = Runtime.getRuntime().exec(\"ls\");\n        System.out.println(JNAUtil.getProcessID(p));\n    }\n}\n"], "fixing_code": ["## 0.1-beta\n\n\u521d\u59cb\u7248\u672c\n\n## 0.2-beta\n\nSecurity:\n- \u4fee\u590d\u6f5c\u5728RCE\u6f0f\u6d1e [GHSA-732j-763p-cvqg](https://github.com/4ra1n/super-xray/security/advisories/GHSA-732j-763p-cvqg)\n\nBug:\n- [important] \u590d\u5236\u548c\u5220\u9664\u6587\u4ef6\u5e94\u8be5\u9009\u62e9Java\u4ee3\u7801\u5b9e\u73b0 #3\n- [important] \u6700\u7ec8\u6267\u884c\u547d\u4ee4\u4e0d\u5e94\u8be5\u4f7f\u7528bash/cmd\u65b9\u5f0f #4\n- [important] \u4f7f\u7528PoC\u6a21\u5f0f\u540e\u518d\u4f7f\u7528Plugins\u4e0d\u4f1a\u751f\u6548\u7684\u95ee\u9898 #5\n- [important] Windows\u4e2dcmd\u7a97\u53e3\u4e71\u7801 #16\n\n## 0.3-beta\n\n\u8be5\u7248\u672c\u4e3a**\u91cd\u5927\u66f4\u65b0**\n\n\u4e4b\u524d\u5f3a\u5236\u505c\u6b62\u7684\u903b\u8f91\u5e76\u4e0d\u80fd\u771f\u6b63\u5730\u505c\u6b62\uff0c\u4f7f\u7528`kill/taskkill`\u547d\u4ee4\u624d\u53ef\u4ee5\u505a\u5230\uff0c\u8be5\u7248\u672c\u4ec5\u5728`Mac OS`\u6d4b\u8bd5\u901a\u8fc7\uff0c\u5728`Windows`\u4e2d\u4e0d\u786e\u5b9a\u3002\u5f00\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u5faa\u73af\u76d1\u542c\u662f\u5426\u5f3a\u5236\u505c\u6b62\uff0c\u5982\u679c\u6536\u5230\u6d88\u606f\u7acb\u5373\u7ed3\u675f\u3002\n\nSecurity:\n- \u4fee\u590d\u6f5c\u5728\u63d0\u6743\u6f0f\u6d1e [GHSA-2g28-xrw6-fq5f](https://github.com/4ra1n/super-xray/security/advisories/GHSA-2g28-xrw6-fq5f)\n\nBug:\n- [important] \u88ab\u52a8\u626b\u63cf\u540e\u65e0\u6cd5\u4e3b\u52a8\u626b\u63cf\u7684\u95ee\u9898 #23\n- [important] PoC\u53c2\u6570\u4e3a\u7a7a\u7684\u95ee\u9898 #21\n- [important] \u88ab\u52a8\u626b\u63cf\u662f\u5426\u5e94\u8be5\u589e\u52a0\u4e00\u4e2a\u505c\u6b62\u76d1\u542c\u7684\u529f\u80fd #20\n- [important] windows11\u4e2d\u9ad8\u7ea7\u914d\u7f6e\u7684xss\u8bbe\u7f6e\u65e0\u6cd5\u663e\u793a #19\n- [important] windows\u4fdd\u5b58\u914d\u7f6e\u7f16\u7801\u95ee\u9898 #18\n- [important] \u5b8c\u6210\u771f\u6b63\u7684\u505c\u6b62\u903b\u8f91 #26\uff08\u4ec5\u5728MacOS\u6d4b\u8bd5\u901a\u8fc7\uff09\n\nOthers:\n- \u6253\u5370\u547d\u4ee4\u5e94\u8be5\u7528\u4e00\u4e2a\u65b0\u7684Form\u66f4\u4f18\u96c5\u5730\u5c55\u793a #9\n\n## 0.4-beta\n\n\u8fd9\u4e2a\u7248\u672c\u4e3b\u8981\u662f\u63d0\u9ad8\u7a33\u5b9a\u6027\uff0c\u5bf9\u5df2\u6709`bug`\u8fdb\u884c\u4fee\u590d\uff0c\u5e76\u4e14\u52a0\u5165\u4e86\u4e24\u4e2a\u91cd\u8981\uff1a\n- \u76ae\u80a4\u9009\u62e9\u529f\u80fd\uff0c\u53ef\u4ee5\u9009\u62e9\u4e03\u6b3e\u4e3b\u9898\u76ae\u80a4\u4e4b\u4e00\uff08\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\uff09\n- \u4fdd\u5b58\u4e0a\u6b21xray\u8bbe\u7f6e\u7684\u529f\u80fd\uff0c\u4e0d\u7528\u6bcf\u6b21\u6253\u5f00\u90fd\u91cd\u65b0\u9009\u62e9\n\nBug:\n- [important] windows taskkill \u547d\u4ee4 bug #29\n- [important] \u5141\u8bb8\u754c\u9762\u6269\u5927\u7f29\u5c0f\u5e76\u91cd\u6784\u9ad8\u7ea7\u914d\u7f6e\u7684UI #28\n- [important] \u67e5\u770b\u914d\u7f6e\u6587\u4ef6\u53ea\u6539\u53d8Panel\u5927\u5c0f\u4f46Area\u4e0d\u53d8 #31\n- [important] windows \u63a7\u5236\u53f0\u4e71\u7801\u4fee\u590d\u4e0d\u5b8c\u5584 #27\n- [important] \u8bbe\u7f6e\u4ece\u4e0a\u6b21\u914d\u7f6e\u81ea\u52a8\u52a0\u8f7dxray #17\n- [important] \u53cd\u8fde\u5e73\u53f0\u652f\u6301token\u8ba4\u8bc1 #32\n\nOthers:\n- \u652f\u6301\u4f7f\u7528\u672c\u5730\u81ea\u5b9a\u4e49PoC\u7684\u529f\u80fd #6\n- [new feature] \u65b0\u589e\u4e00\u4e2a\u4e3b\u9898\u76ae\u80a4\u9009\u62e9\u7684\u529f\u80fd #11\n\n## 0.5-beta\n\n\u6bd4\u8f83\u5173\u952e\u7684\u95ee\u9898\u662f\uff1a \u8fd0\u884c\u4e2d\u65e0\u6cd5\u8bbf\u95ee\u5df2\u6709\u7684\u6f0f\u6d1e\u62a5\u544a\uff0c\u56e0\u4e3a\u91c7\u7528\u7684\u662f`start/open`\u547d\u4ee4\uff0c\u62a5\u544a\u88ab`xray`\u8fdb\u7a0b\u5360\u7528\u65e0\u6cd5\u6253\u5f00\uff0c\u4f46\u662f\u53ef\u4ee5\u8bfb\u3002\n\u6240\u4ee5\u89e3\u51b3\u65b9\u6848\u662f\u590d\u5236\u4e00\u4efd\u5b9e\u65f6\u7684\u7136\u540e\u6253\u5f00\u3002\u5176\u4ed6\u65b9\u9762\u662f\u4e00\u4e9b`UI`\u7684\u5c0f`bug`\u4ee5\u53ca\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u5177\u4f53\u7684\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5168\u6253\u5728\u547d\u4ee4\u884c\u3002\n\u8f93\u51fa\u7684\u65e5\u5fd7\u6587\u4ef6\u548c\u6240\u6709\u4ea7\u751f\u7684\u6f0f\u6d1e\u62a5\u544a\u90fd\u53ef\u4ee5\u5728\u5173\u95ed\u8f6f\u4ef6\u7684\u65f6\u5019\u81ea\u52a8\u5220\u9664\u3002\n\nBug:\n- [important] \u8fdb\u7a0b\u5360\u5bfc\u81f4\u65e0\u6cd5\u6253\u5f00\u88ab\u52a8\u626b\u63cf\u4e2d\u7684\u62a5\u544a #44\n- [important] \u6362\u76ae\u80a4\u540e\u4e00\u4e9b\u6309\u94ae\u7684\u80cc\u666f\u8272\u4e0d\u5e94\u8be5\u662f\u7070\u8272 #42\n- [important] \u88ab\u52a8\u626b\u63cf\u53ef\u80fd\u4f1a\u7531\u4e8e\u8f93\u51fa\u6587\u4ef6\u5b58\u5728\u65e0\u6cd5\u542f\u52a8 #33\n- \u6ca1\u6709\u8bbe\u7f6e\u8f93\u51fa\u7684\u60c5\u51b5\u4e0b\u6253\u5f00\u8f93\u51fa\u6587\u4ef6\u62a5\u9519 #38\n\nOthers:\n- [important] \u6dfb\u52a0\u4e00\u4e2a\u8df3\u8f6cxray\u4e0b\u8f7d\u5730\u5740\u7684\u6309\u94ae #45\n- [important] \u6dfb\u52a0start.bat\u548cstart.sh #41\n- [new feature] \u662f\u5426\u6709\u5fc5\u8981\u63d0\u4f9b\u4e00\u4e2a\u4e0b\u8f7d\u6309\u94ae #10 (\u91c7\u7528 #45 \u7684\u65b9\u6848\u89e3\u51b3)\n- \u5728Mac OS\u4e2d\u5982\u679c\u4fdd\u5b58\u4e86xray\u914d\u7f6e\u6bcf\u6b21\u6253\u5f00\u90fd\u4f1a\u5f39\u51fa\u63d0\u793a #36\n- \u76ae\u80a4RadioButton\u9ed8\u8ba4\u4e0d\u8be5\u662f\u7a7a\u800c\u5e94\u662f\u5f53\u524d\u76ae\u80a4 #37\n- \u5e94\u8be5\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u4e34\u65f6\u6587\u4ef6\u5e76\u5173\u95ed\u540e\u5220\u9664 #43\n- \u6dfb\u52a0\u4e00\u4e2a\u662f\u5426\u81ea\u52a8\u5220\u9664\u626b\u63cf\u62a5\u544a\u7684\u6309\u94ae #39\n- \u589e\u52a0\u4e00\u4e2a\u6e05\u5c4f\u7684\u6309\u94ae #8\n\n## 0.6-beta\n\n\u652f\u6301\u4e86\u82f1\u6587\u7248\u672c\uff0c\u4fee\u590d\u4e86\u5404\u79cdUI\u7684\u95ee\u9898\n\nBug:\n- [important] \u57281080P\u4e0b\u754c\u9762\u65e0\u6cd5\u5b8c\u5168\u663e\u793a #46\n- [important] \u5207\u6362\u8bed\u8a00\u548c\u76ae\u80a4\u65f6\u65e0\u6cd5\u6b63\u786e\u5bb9\u7eb3UI #51\n- [important] \u5173\u95ed\u5e94\u7528\u524d\u5e94\u8be5\u5148\u505c\u6b62\u6240\u6709xray\u8fdb\u7a0b #50\n- \u5207\u6362\u8bed\u8a00\u65f6\u65e0\u6cd5\u6b63\u5e38\u663e\u793aPoC\u6570\u91cf #52\n- \u89e3\u6790\u6240\u6709POC\u7684\u903b\u8f91\u6709\u95ee\u9898\u5bfc\u81f4\u6f0f\u6389\u90e8\u5206 #53\n\nOthers:\n- [important] \u6dfb\u52a0\u4e00\u6b3e\u73b0\u4ee3\u76ae\u80a4IDEA\u540c\u6b3e #54\n- [new feature] english version #40\n- #36\u95ee\u9898\u7684\u4fee\u590d\u4e0d\u5b8c\u5584 #47\n- \u6253\u5f00\u626b\u63cf\u7ed3\u679c\u7684Label\u4e0eButton\u7684UI\u4e0d\u5339\u914d #48\n- \u70b9\u51fb\u5e95\u90e8Label\u8df3\u8f6cGithub #49\n\n## 0.7\n\n\u8be5\u7248\u672c\u662f\u7b2c\u4e00\u4e2a\u6b63\u5f0f\u7248\uff0c\u652f\u6301\u4e86`JDK8`\u7684\u7248\u672c\uff0c\u5f53\u73af\u5883\u662f`JDK8`\u65f6\u4f7f\u7528`JNA`\u6280\u672f\u8bbf\u95ee`Native`\u65b9\u6cd5\uff0c\u901a\u8fc7`Windows API`\u5b9e\u73b0\u529f\u80fd\uff1b\n\u5f53\u73af\u5883\u662f`JDK9+`\u65f6\uff0c\u53cd\u5c04\u8c03\u7528\u65b9\u6cd5\u5373\u53ef\u3002\u4fee\u590d\u4e86\u4e00\u5904\u529f\u80fd`bug`\u5e76\u4f18\u5148\u52a0\u8f7d\u5f53\u524d\u76ee\u5f55\u7684`config.yaml`\u6587\u4ef6\uff0c\u4e0d\u4f1a\u5220\u9664\uff0c\u5b9e\u73b0\u4e86\u4fdd\u5b58\u8bbe\u7f6e\u529f\u80fd\u3002\n\n\u53e6\u5916\u63d0\u4f9b\u4e86\u4e24\u79cd`exe`\u7684\u4e0b\u8f7d\uff1a\n- \u5185\u7f6e`JRE`\u7684`exe`\u53ef\u4ee5\u4e00\u952e\u542f\u52a8\uff1a`super-xray-0.7-jre-exe.zip`\n- \u8c03\u7528\u7cfb\u7edf`JRE`\u7684`exe`\uff1a`super-xray-0.7-system-jre.exe`\n\n\u7b2c\u4e00\u79cd\u4e0d\u9700\u8981\u5b89\u88c5\u4efb\u4f55\u73af\u5883\uff0c\u89e3\u538b\u540e\u76f4\u63a5\u4f7f\u7528\uff1b\u7b2c\u4e8c\u79cd\u9700\u8981\u672c\u5730`JAVA_HOME`\u6216\u73af\u5883\u53d8\u91cf\u6709\u914d\u7f6e`Java`\n\nBug:\n- [important] \u5bfb\u627e\u4e00\u79cd\u80fd\u591f\u652f\u6301JDK8\u7684\u9b54\u6cd5 #61\n- [important] \u53cd\u8fde\u5e73\u53f0\u6ca1\u6709\u8bbe\u7f6eremote_server\u4e3atrue #57\n- \u4e0d\u80fd\u652f\u6301JDK8\u7684\u89e3\u51b3\u65b9\u6848\u5efa\u8bae #63 (\u540c #61)\n- \u4f7f\u7528IDEA\u76ae\u80a4\u65f6\u5e95\u90e8\u6062\u590d\u6309\u94ae\u65e0\u6cd5\u5c55\u793a\u5b8c\u5168 #55\n\nOthers:\n- [important] \u914d\u7f6e\u6587\u4ef6\u65e0\u6cd5\u4fdd\u5b58\u6bcf\u6b21\u90fd\u4f1a\u65b0\u5efa #58\n- \u4f18\u5316\u542f\u52a8\u811a\u672c #60 (\u6700\u7ec8\u6ca1\u6709\u4f18\u5316\u56e0\u4e3a\u652f\u6301\u4e86`JDK8`)\n", "package com.chaitin.xray.form;\n\nimport com.chaitin.xray.utils.StringUtil;\nimport com.intellij.uiDesigner.core.GridConstraints;\nimport com.intellij.uiDesigner.core.GridLayoutManager;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class LookupConfigForm {\n    public JPanel lookupConfigPanel;\n    private JTextArea configTextArea;\n    private JButton saveConfigButton;\n    private JButton refreshConfigButton;\n    private JScrollPane configTextPanel;\n    private JPanel configButtonPanel;\n\n    private void initLang() {\n        if (MainForm.LANG == MainForm.CHINESE) {\n            saveConfigButton.setText(\"\u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\");\n            refreshConfigButton.setText(\"\u5237\u65b0\u6700\u65b0\u914d\u7f6e\u6587\u4ef6\");\n        } else {\n            saveConfigButton.setText(\"Save Config\");\n            refreshConfigButton.setText(\"Refresh Config\");\n        }\n    }\n\n    public LookupConfigForm() {\n\n        initLang();\n\n        configTextArea.setText(MainForm.configStr);\n        configTextArea.setCaretPosition(0);\n\n        refreshConfigButton.addActionListener(e -> {\n            if (!StringUtil.notEmpty(MainForm.configPath)) {\n                JOptionPane.showMessageDialog(null, \"\u65e0\u6cd5\u5237\u65b0\");\n                return;\n            }\n            try {\n                byte[] data = Files.readAllBytes(Paths.get(MainForm.configPath));\n                configTextArea.setText(null);\n                configTextArea.setText(new String(data));\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            JOptionPane.showMessageDialog(null, \"\u5df2\u5237\u65b0\u914d\u7f6e\");\n        });\n\n        saveConfigButton.addActionListener(e -> {\n            if (!StringUtil.notEmpty(MainForm.configPath)) {\n                JOptionPane.showMessageDialog(null, \"\u65e0\u6cd5\u4fdd\u5b58\");\n                return;\n            }\n            try {\n                Yaml yaml = new Yaml(new SafeConstructor(new LoaderOptions()));\n                String newConfig = configTextArea.getText();\n                MainForm.configObj = yaml.load(newConfig);\n\n                MainForm.configStr = newConfig;\n\n                MainForm.instance.reloadConfig(false, false);\n\n                Files.write(Paths.get(MainForm.configPath),\n                        newConfig.getBytes(StandardCharsets.UTF_8));\n                JOptionPane.showMessageDialog(null, \"\u5df2\u4fdd\u5b58\u914d\u7f6e\");\n            } catch (Exception ex) {\n                JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u914d\u7f6e\u6709\u8bef\");\n                ex.printStackTrace();\n            }\n        });\n    }\n\n    {\n// GUI initializer generated by IntelliJ IDEA GUI Designer\n// >>> IMPORTANT!! <<<\n// DO NOT EDIT OR ADD ANY CODE HERE!\n        $$$setupUI$$$();\n    }\n\n    /**\n     * Method generated by IntelliJ IDEA GUI Designer\n     * >>> IMPORTANT!! <<<\n     * DO NOT edit this method OR call it in your code!\n     *\n     * @noinspection ALL\n     */\n    private void $$$setupUI$$$() {\n        lookupConfigPanel = new JPanel();\n        lookupConfigPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        lookupConfigPanel.setBackground(new Color(-725535));\n        configTextPanel = new JScrollPane();\n        configTextPanel.setBackground(new Color(-725535));\n        lookupConfigPanel.add(configTextPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(600, 500), new Dimension(600, 500), null, 0, false));\n        configTextArea = new JTextArea();\n        configTextArea.setBackground(new Color(-725535));\n        configTextArea.setForeground(new Color(-12828863));\n        configTextPanel.setViewportView(configTextArea);\n        configButtonPanel = new JPanel();\n        configButtonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        configButtonPanel.setBackground(new Color(-725535));\n        lookupConfigPanel.add(configButtonPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        saveConfigButton = new JButton();\n        saveConfigButton.setText(\"\u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\");\n        configButtonPanel.add(saveConfigButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        refreshConfigButton = new JButton();\n        refreshConfigButton.setText(\"\u5237\u65b0\u6700\u65b0\u914d\u7f6e\u6587\u4ef6\");\n        configButtonPanel.add(refreshConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    }\n\n    /**\n     * @noinspection ALL\n     */\n    public JComponent $$$getRootComponent$$$() {\n        return lookupConfigPanel;\n    }\n\n}\n", "package com.chaitin.xray.form;\n\nimport com.chaitin.xray.Application;\nimport com.chaitin.xray.model.Const;\nimport com.chaitin.xray.model.DB;\nimport com.chaitin.xray.model.Poc;\nimport com.chaitin.xray.model.XrayCmd;\nimport com.chaitin.xray.utils.*;\nimport com.formdev.flatlaf.FlatLightLaf;\nimport com.intellij.uiDesigner.core.GridConstraints;\nimport com.intellij.uiDesigner.core.GridLayoutManager;\nimport com.intellij.uiDesigner.core.Spacer;\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\n\nimport javax.swing.*;\nimport javax.swing.border.TitledBorder;\nimport java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.*;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport java.util.List;\n\npublic class MainForm {\n    private static final Logger logger = LogManager.getLogger(MainForm.class);\n\n    public static MainForm instance;\n    private XrayCmd xrayCmd;\n    public static String configStr;\n    public static String configTemplate;\n    public static String configPath;\n    public static Map<String, Object> configObj;\n    private static ArrayList<JCheckBox> checkBoxList;\n    private static boolean pluginAll = false;\n    private static String outputFilePath;\n    private static final List<String> existOutputList = new ArrayList<>();\n    private static DB db;\n\n    private JButton choseDirButton;\n    private JPanel SuperXray;\n    private JPanel pathButtonPanel;\n    private JLabel xrayPathLabel;\n    private JTextField xrayPathTextField;\n    private JLabel noteLabel;\n    private JPanel configPanel;\n    private JPanel bottomPanel;\n    private JLabel authorLabel;\n    private JPanel leftConfigPanel;\n    private JPanel rightConfigPanel;\n    private JPanel catConfigPanel;\n    private JLabel catConfigLabel;\n    private JPanel loadXrayPanel;\n    private JCheckBox bruteForceCheckBox;\n    private JCheckBox baselineCheckBox;\n    private JCheckBox cmdInjectionCheckBox;\n    private JCheckBox crlfInjectionCheckBox;\n    private JCheckBox dirscanCheckBox;\n    private JCheckBox fastjsonCheckBox;\n    private JCheckBox jsonpCheckBox;\n    private JCheckBox pathTraversalCheckBox;\n    private JCheckBox phantasmCheckBox;\n    private JCheckBox redirectCheckBox;\n    private JCheckBox shiroCheckBox;\n    private JCheckBox sqldetCheckBox;\n    private JCheckBox ssrfCheckBox;\n    private JCheckBox strutsCheckBox;\n    private JCheckBox thinkphpCheckBox;\n    private JCheckBox uploadCheckBox;\n    private JCheckBox xxeCheckBox;\n    private JCheckBox xssCheckBox;\n    private JButton enableAllButton;\n    private JButton advanceButton;\n    private JButton reverseConfigButton;\n    private JButton pocButton;\n    private JButton activeScanButton;\n    private JButton mitmScanButton;\n    private JButton outputConfigButton;\n    private JButton proxyConfigButton;\n    private JPanel outputConfigPanel;\n    private JScrollPane outputPanel;\n    private JTextArea outputTextArea;\n    private JPanel scanOutConfigPanel;\n    private JRadioButton htmlRadioButton;\n    private JRadioButton cliRadioButton;\n    private JRadioButton jsonRadioButton;\n    private JButton urlFileButton;\n    private JTextField urlFileField;\n    private JTextField rawFileField;\n    private JButton rawFileButton;\n    private JTextField urlField;\n    private JButton urlButton;\n    private JButton lookupConfigButton;\n    private JButton lookupCmdButton;\n    private JButton confirmPluginButton;\n    private JPanel pocPanel;\n    private JButton allPoCButton;\n    private JTextField usePoCText;\n    private JPanel scanTargetPanel;\n    private JPanel proxyConfigPanel;\n    private JPanel reverseConfigPanel;\n    private JPanel startScanPanel;\n    private JPanel otherPanel;\n    private JPanel midConfigPanel;\n    private JLabel pocNumLabel;\n    private JTextField portText;\n    private JLabel portLabel;\n    private JPanel mitmPanel;\n    private JTextField proxyText;\n    private JLabel proxyLabel;\n    private JPanel proxyPanel;\n    private JTextField dnsText;\n    private JTextField httpReverseText;\n    private JPanel reverseUrlPanel;\n    private JLabel httpReverseLabel;\n    private JLabel dnsReverseLabel;\n    private JButton stopButton;\n    private JButton resetConfigButton;\n    private JButton openResultButton;\n    private JLabel stopLabel;\n    private JLabel openResultLabel;\n    private JLabel resetConfigLabel;\n    private JPanel resetPanel;\n    private JPanel openResultPanel;\n    private JPanel stopPanel;\n    private JPanel otherButton;\n    private JPanel utilPanel;\n    private JButton httpUtilButton;\n    private JButton encodeUtilButton;\n    private JButton listenUtilButton;\n    private JButton updatePocButton;\n    private JTextField localPoCText;\n    private JButton localPoCButton;\n    private JPanel skinPanel;\n    private JButton saveSkinButton;\n    private JRadioButton metalRadioButton;\n    private JRadioButton flatLafRadioButton;\n    private JRadioButton nimbusRadioButton;\n    private JRadioButton windowsRadioButton;\n    private JRadioButton winClassicRadioButton;\n    private JRadioButton gtkRadioButton;\n    private JRadioButton aquaRadioButton;\n    private JTextField tokenText;\n    private JLabel tokenLabel;\n    private JCheckBox autoDelCheckBox;\n    private JButton cleanAreaButton;\n    private JButton xrayUrlButton;\n    private JRadioButton chineseLangButton;\n    private JRadioButton englishLangButton;\n    private JButton langButton;\n\n    public void init() {\n        logger.info(\"init main form\");\n        checkBoxList = new ArrayList<>();\n        xrayCmd = new XrayCmd();\n\n        try {\n            Path dbPath = Paths.get(\"super-xray.db\");\n            if (Files.exists(dbPath)) {\n                byte[] data = Files.readAllBytes(dbPath);\n                db = DB.parseDB(data);\n            } else {\n                db = new DB();\n                db.setLastXrayPath(null);\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n\n        reloadConfig(true, false);\n\n        logger.info(\"init look up config button\");\n        lookupConfigButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u67e5\u770b\u914d\u7f6e\u6587\u4ef6\";\n            } else {\n                t = \"Lookup Config\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new LookupConfigForm().lookupConfigPanel);\n            frame.pack();\n            frame.setVisible(true);\n        });\n\n        logger.info(\"init look up cmd button\");\n        lookupCmdButton.addActionListener(e ->\n                JOptionPane.showMessageDialog(null, xrayCmd.buildCmd()));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void reloadConfig(boolean init, boolean reset) {\n        Path curConfig = Paths.get(\"config.yaml\");\n        if (init) {\n            if (reset) {\n                InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"config.yaml\");\n                configStr = IOUtil.readStringFromIs(is);\n            } else {\n                if (Files.exists(curConfig)) {\n                    try {\n                        configStr = new String(Files.readAllBytes(curConfig));\n                    } catch (Exception ex) {\n                        logger.error(ex);\n                    }\n                } else {\n                    InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"config.yaml\");\n                    configStr = IOUtil.readStringFromIs(is);\n                }\n            }\n        } else {\n            if (Files.exists(curConfig)) {\n                try {\n                    configStr = new String(Files.readAllBytes(curConfig));\n                } catch (Exception ex) {\n                    logger.error(ex);\n                }\n            }\n        }\n        configTemplate = configStr;\n\n        Yaml yaml = new Yaml(new SafeConstructor(new LoaderOptions()));\n        configObj = yaml.load(configStr);\n\n        try {\n            if (StringUtil.notEmpty(configPath)) {\n                Files.write(Paths.get(configPath),\n                        configStr.getBytes(StandardCharsets.UTF_8));\n                Files.write(curConfig,\n                        configStr.getBytes(StandardCharsets.UTF_8));\n            }\n        } catch (Exception ex) {\n            logger.error(ex);\n        }\n\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"plugins\")) {\n                Map<String, Object> plugins = (Map<String, Object>) entry.getValue();\n                for (Map.Entry<String, Object> plugin : plugins.entrySet()) {\n                    if (plugin.getKey().equals(\"baseline\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        baselineCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"brute-force\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        bruteForceCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"cmd-injection\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        cmdInjectionCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"crlf-injection\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        crlfInjectionCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"dirscan\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        dirscanCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"fastjson\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        fastjsonCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"jsonp\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        jsonpCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"path-traversal\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        pathTraversalCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"phantasm\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        phantasmCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"redirect\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        redirectCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"shiro\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        shiroCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"sqldet\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        sqldetCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"ssrf\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        ssrfCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"struts\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        strutsCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"thinkphp\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        thinkphpCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"upload\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        uploadCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"xss\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        xssCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                    if (plugin.getKey().equals(\"xxe\")) {\n                        Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                        xxeCheckBox.setSelected((boolean) (items.get(\"enabled\")));\n                    }\n                }\n            }\n        }\n\n        String data = null;\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"http\")) {\n                Map<String, Object> httpModule = (Map<String, Object>) entry.getValue();\n                data = (String) httpModule.get(\"proxy\");\n            }\n        }\n        if (data != null) {\n            proxyText.setText(data);\n        }\n\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"reverse\")) {\n                Map<String, Object> reverse = (Map<String, Object>) entry.getValue();\n                Map<String, Object> client = (Map<String, Object>) reverse.get(\"client\");\n                String token = (String) reverse.get(\"token\");\n                String httpUrl = (String) client.get(\"http_base_url\");\n                String dnsServer = (String) client.get(\"dns_server_ip\");\n                if (StringUtil.notEmpty(httpUrl) || StringUtil.notEmpty(dnsServer)) {\n                    client.put(\"remote_server\", true);\n                }\n                tokenText.setText(token);\n                httpReverseText.setText(httpUrl);\n                dnsText.setText(dnsServer);\n            }\n        }\n    }\n\n    private volatile boolean stop = false;\n\n    private void execAndFresh(String[] finalCmd) {\n        outputTextArea.setText(null);\n        Thread thread = new Thread(() -> {\n            try {\n                Process process = ExecUtil.exec(finalCmd);\n                if (process == null) {\n                    return;\n                }\n                InputStream inputStream = process.getInputStream();\n                if (inputStream == null) {\n                    return;\n                }\n                BufferedReader isReader;\n                if (OSUtil.isWindows()) {\n                    InputStreamReader isr = new InputStreamReader(inputStream,\n                            StandardCharsets.UTF_8);\n                    isReader = new BufferedReader(isr);\n                } else {\n                    isReader = new BufferedReader(new InputStreamReader(inputStream));\n                }\n                String thisLine;\n                new Thread(() -> {\n                    while (true) {\n                        if (stop) {\n                            logger.info(String.format(\"stop pid: %d\", JNAUtil.getProcessID(process)));\n                            try {\n                                if (!OSUtil.isWindows()) {\n                                    new ProcessBuilder(\"kill\", \"-9\",\n                                            Long.toString(JNAUtil.getProcessID(process))).start();\n                                } else {\n                                    new ProcessBuilder(\"cmd.exe\", \"/c\",\n                                            String.format(\"taskkill /f /pid %d\", JNAUtil.getProcessID(process))).start();\n                                }\n                                return;\n                            } catch (IOException e) {\n                                throw new RuntimeException(e);\n                            }\n                        }\n                    }\n                }).start();\n                while ((!stop) && (thisLine = isReader.readLine()) != null) {\n                    outputTextArea.append(thisLine);\n                    outputTextArea.append(\"\\n\");\n                    outputTextArea.setCaretPosition(outputTextArea.getText().length());\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n        thread.start();\n    }\n\n    private void loadXray(String absPath) {\n        logger.info(String.format(\"user chose file: %s\", absPath));\n        String targetDir = Paths.get(absPath).toFile().getParent() + File.separator;\n        XrayUtil.rmAllConfig(targetDir);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> XrayUtil.rmAllConfig(targetDir)));\n\n        xrayPathTextField.setText(absPath);\n        if (!OSUtil.isWindows()) {\n            ExecUtil.chmod(absPath);\n        }\n\n        String[] cmd = new String[]{absPath};\n        Thread t = new Thread(() -> ExecUtil.execCmdNoRet(cmd));\n        t.start();\n        if (OSUtil.isMacOS() &&\n                (!StringUtil.notEmpty(db.getLastXrayPath()) ||\n                        db.getLastXrayPath().equals(\"null\"))) {\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, Const.MacNeedAgree);\n            } else {\n                JOptionPane.showMessageDialog(null, Const.MacNeedAgreeEn);\n            }\n        }\n\n        try {\n            Thread.sleep(1000);\n            t.interrupt();\n        } catch (Exception ex) {\n            logger.error(ex);\n        }\n        XrayUtil.cpAllConfig(targetDir);\n\n        try {\n            Path configPathPath = Paths.get(targetDir + Const.ConfigYaml);\n            configPath = configPathPath.toFile().getAbsolutePath();\n            Files.write(configPathPath,\n                    configStr.getBytes(StandardCharsets.UTF_8));\n        } catch (Exception ex) {\n            logger.error(ex);\n        }\n\n        xrayCmd.setXray(absPath);\n\n        stop = false;\n        execAndFresh(cmd);\n    }\n\n    public void initLoadXray() {\n        logger.info(\"init load xray module\");\n\n        if (StringUtil.notEmpty(db.getLastXrayPath()) &&\n                !db.getLastXrayPath().equals(\"null\")) {\n            loadXray(db.getLastXrayPath());\n        }\n\n        choseDirButton.addActionListener(e -> {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n\n                loadXray(absPath);\n\n                DB data = new DB();\n                data.setLastXrayPath(absPath);\n                try {\n                    Files.write(Paths.get(\"super-xray.db\"), data.getDB().getBytes());\n                } catch (Exception ex) {\n                    logger.error(ex);\n                }\n\n            } else {\n                if (LANG == CHINESE) {\n                    xrayPathTextField.setText(\"\u4f60\u53d6\u6d88\u4e86\u9009\u62e9\");\n                } else {\n                    xrayPathTextField.setText(\"Cancel\");\n                }\n            }\n        });\n    }\n\n    public void initPluginCheckBox() {\n        logger.info(\"init all plugins\");\n        pluginAll = true;\n        checkBoxList.add(bruteForceCheckBox);\n        checkBoxList.add(baselineCheckBox);\n        checkBoxList.add(cmdInjectionCheckBox);\n        checkBoxList.add(jsonpCheckBox);\n        checkBoxList.add(phantasmCheckBox);\n        checkBoxList.add(shiroCheckBox);\n        checkBoxList.add(ssrfCheckBox);\n        checkBoxList.add(thinkphpCheckBox);\n        checkBoxList.add(xssCheckBox);\n        checkBoxList.add(crlfInjectionCheckBox);\n        checkBoxList.add(dirscanCheckBox);\n        checkBoxList.add(fastjsonCheckBox);\n        checkBoxList.add(pathTraversalCheckBox);\n        checkBoxList.add(redirectCheckBox);\n        checkBoxList.add(sqldetCheckBox);\n        checkBoxList.add(strutsCheckBox);\n        checkBoxList.add(uploadCheckBox);\n        checkBoxList.add(xxeCheckBox);\n        enableAllButton.addActionListener(e -> {\n            if (!pluginAll) {\n                for (JCheckBox checkBox : checkBoxList) {\n                    checkBox.setSelected(true);\n                }\n                pluginAll = true;\n            } else {\n                for (JCheckBox checkBox : checkBoxList) {\n                    checkBox.setSelected(false);\n                }\n                pluginAll = false;\n            }\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void initPluginSave() {\n        confirmPluginButton.addActionListener(e -> {\n            for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n                if (entry.getKey().equals(\"plugins\")) {\n                    Map<String, Object> plugins = (Map<String, Object>) entry.getValue();\n                    for (Map.Entry<String, Object> plugin : plugins.entrySet()) {\n                        if (plugin.getKey().equals(\"baseline\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (baselineCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"brute-force\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (bruteForceCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"cmd-injection\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (cmdInjectionCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"crlf-injection\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (crlfInjectionCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"dirscan\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (dirscanCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"fastjson\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (fastjsonCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"jsonp\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (jsonpCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"path-traversal\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (pathTraversalCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"phantasm\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (phantasmCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"redirect\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (redirectCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"shiro\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (shiroCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"sqldet\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (sqldetCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"ssrf\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (ssrfCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"struts\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (strutsCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"thinkphp\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (thinkphpCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"upload\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (uploadCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"xss\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (xssCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                        if (plugin.getKey().equals(\"xxe\")) {\n                            Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                            if (xxeCheckBox.isSelected()) {\n                                items.put(\"enabled\", true);\n                            } else {\n                                items.put(\"enabled\", false);\n                            }\n                        }\n                    }\n                }\n            }\n            refreshConfig();\n            xrayCmd.setPoc(null);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u5b8c\u6210\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void refreshConfig() {\n        Yaml yaml = new Yaml(new SafeConstructor(new LoaderOptions()));\n        StringWriter writer = new StringWriter();\n        yaml.dump(configObj, writer);\n        configStr = writer.toString();\n        try {\n            Files.write(Paths.get(\"config.yaml\"),\n                    configStr.getBytes(StandardCharsets.UTF_8));\n            Files.write(Paths.get(configPath),\n                    configStr.getBytes(StandardCharsets.UTF_8));\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            logger.error(ex);\n        }\n    }\n\n    public void initAdvanceConfig() {\n        logger.info(\"init advance config button\");\n        advanceButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u9ad8\u7ea7\u914d\u7f6e\";\n            } else {\n                t = \"Advance Config\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new AdvanceConfigForm().advanceConfigPanel);\n            frame.setResizable(true);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    public void initOutputConfig() {\n        logger.info(\"init output config module\");\n        htmlRadioButton.setSelected(true);\n        jsonRadioButton.setSelected(false);\n        cliRadioButton.setSelected(false);\n        outputConfigButton.addActionListener(e -> {\n            refreshOutput();\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u8f93\u51fa\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void refreshOutput() {\n        String uuid = UUID.randomUUID().toString();\n        if (htmlRadioButton.isSelected()) {\n            outputFilePath = Paths.get(String.format(\"./xray-%s.html\", uuid)).toFile().getAbsolutePath();\n            existOutputList.add(outputFilePath);\n            xrayCmd.setOutputPrefix(\"--html-output\");\n            xrayCmd.setOutput(outputFilePath);\n        }\n        if (jsonRadioButton.isSelected()) {\n            outputFilePath = Paths.get(String.format(\"./xray-%s.txt\", uuid)).toFile().getAbsolutePath();\n            existOutputList.add(outputFilePath);\n            xrayCmd.setOutputPrefix(\"--json-output\");\n            xrayCmd.setOutput(outputFilePath);\n        }\n        if (cliRadioButton.isSelected()) {\n            xrayCmd.setOutput(null);\n        }\n    }\n\n    public void initTargetUrlConfig() {\n        urlButton.addActionListener(e -> {\n            urlFileField.setText(null);\n            rawFileField.setText(null);\n            String url = urlField.getText();\n            logger.info(String.format(\"target url: %s\", url));\n            xrayCmd.setInputPrefix(\"--url\");\n            xrayCmd.setInput(url);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6eURL\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void initUrlFileConfig() {\n        logger.info(\"init url file module\");\n        urlFileButton.addActionListener(e -> {\n            urlField.setText(null);\n            rawFileField.setText(null);\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n                urlFileField.setText(absPath);\n                xrayCmd.setInputPrefix(\"--url-file\");\n                xrayCmd.setInput(String.format(\"%s\", absPath));\n            } else {\n                if (LANG == CHINESE) {\n                    rawFileField.setText(\"\u4f60\u53d6\u6d88\u4e86\u9009\u62e9\");\n                } else {\n                    rawFileField.setText(\"Cancel\");\n                }\n            }\n        });\n    }\n\n    public void initRawScanConfig() {\n        logger.info(\"init raw scan module\");\n        rawFileButton.addActionListener(e -> {\n            urlField.setText(null);\n            urlFileField.setText(null);\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n                rawFileField.setText(absPath);\n                xrayCmd.setInputPrefix(\"--raw-request\");\n                xrayCmd.setInput(String.format(\"%s\", absPath));\n            } else {\n                if (LANG == CHINESE) {\n                    rawFileField.setText(\"\u4f60\u53d6\u6d88\u4e86\u9009\u62e9\");\n                } else {\n                    rawFileField.setText(\"Cancel\");\n                }\n            }\n        });\n    }\n\n    public void initActiveScan() {\n        logger.info(\"init active scan module\");\n        activeScanButton.addActionListener(e -> {\n            try {\n                refreshOutput();\n                xrayCmd.setModule(\"webscan\");\n                xrayCmd.setConfig(String.format(\"%s\", configPath));\n                xrayCmd.setOthers(null);\n                String[] finalCmd = xrayCmd.buildCmd();\n                outputTextArea.setText(null);\n                stop = false;\n                execAndFresh(finalCmd);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n    }\n\n    public void initAllPoC() {\n        InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"poc.list\");\n        String allPocStr = IOUtil.readStringFromIs(is);\n        assert allPocStr != null;\n        String[] temp = allPocStr.split(\"\\n\");\n        Poc.addPoc(temp);\n        if (LANG == CHINESE) {\n            pocNumLabel.setText(String.format(\"\u5f53\u524d\u5171\u6709: %s \u4e2aPoC\", Poc.getPocList().size()));\n        } else {\n            pocNumLabel.setText(String.format(\"PoC Num: %s\", Poc.getPocList().size()));\n        }\n        allPoCButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u67e5\u770b\u6240\u6709PoC\";\n            } else {\n                t = \"All PoC\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new AllPoCForm().searchPoC);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void onlyUsePhantasm(String poc) {\n        xrayCmd.setPoc(String.format(\"%s\", poc));\n\n        for (JCheckBox box : checkBoxList) {\n            box.setSelected(false);\n        }\n        phantasmCheckBox.setSelected(true);\n\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"plugins\")) {\n                Map<String, Object> plugins = (Map<String, Object>) entry.getValue();\n                for (Map.Entry<String, Object> plugin : plugins.entrySet()) {\n                    Map<String, Object> items = (Map<String, Object>) plugin.getValue();\n                    if (plugin.getKey().equals(\"phantasm\")) {\n                        items.put(\"enabled\", true);\n                    } else {\n                        items.put(\"enabled\", false);\n                    }\n                }\n            }\n        }\n\n        refreshConfig();\n    }\n\n    public void initTargetPoC() {\n        localPoCButton.addActionListener(e -> {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int option = fileChooser.showOpenDialog(new JFrame());\n            if (option == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                String absPath = file.getAbsolutePath();\n                String[] temp = absPath.split(\"\\\\.\");\n                String suffix = temp[temp.length - 1].toLowerCase().trim();\n                if (!suffix.equals(\"yml\") && !suffix.equals(\"yaml\")) {\n                    if (LANG == CHINESE) {\n                        JOptionPane.showMessageDialog(null, \"\u4f60\u9009\u62e9\u7684\u4e0d\u662f\u5408\u6cd5YAML\u6587\u4ef6\");\n                    } else {\n                        JOptionPane.showMessageDialog(null, \"Error File Type\");\n                    }\n                    return;\n                }\n                localPoCText.setText(absPath);\n                onlyUsePhantasm(absPath);\n                if (LANG == CHINESE) {\n                    JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6ePoC\u6210\u529f\");\n                } else {\n                    JOptionPane.showMessageDialog(null, \"Success\");\n                }\n            }\n        });\n\n        updatePocButton.addActionListener(e -> {\n            String[] cmd = new String[]{xrayCmd.getXray(), \"ws\", \"--list\"};\n            InputStream is = Objects.requireNonNull(ExecUtil.exec(cmd)).getInputStream();\n            stop = false;\n            execAndFresh(cmd);\n            List<String> poc = new ArrayList<>();\n            String data = IOUtil.readStringFromIs(is);\n            assert data != null;\n            String[] temp = data.split(\"\\n\");\n            for (String s : temp) {\n                s = s.trim();\n                if (s.endsWith(\"\\r\")) {\n                    s = s.substring(0, s.length() - 1);\n                }\n                if (s.contains(\":\")) {\n                    continue;\n                }\n                if (s.contains(\"test\") && !s.contains(\"testrail\")) {\n                    continue;\n                }\n                if (!s.contains(\"poc\")) {\n                    continue;\n                }\n                s = s.substring(2);\n                poc.add(s.trim());\n            }\n            Poc.clear();\n            Poc.addAll(poc);\n            if (LANG == CHINESE) {\n                pocNumLabel.setText(String.format(\"\u5f53\u524d\u5171\u6709: %s \u4e2aPoC\", Poc.getPocList().size()));\n            } else {\n                pocNumLabel.setText(String.format(\"PoC Num: %s\", Poc.getPocList().size()));\n            }\n        });\n\n        pocButton.addActionListener(e -> {\n            String poc = usePoCText.getText();\n            logger.info(poc);\n            if (!Poc.getPocList().contains(poc.trim())) {\n                if (LANG == CHINESE) {\n                    JOptionPane.showMessageDialog(null, \"PoC\u4e0d\u5b58\u5728\");\n                } else {\n                    JOptionPane.showMessageDialog(null, \"PoC Not Exist\");\n                }\n                return;\n            }\n            onlyUsePhantasm(poc);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6ePoC\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    private static boolean mitmRunning = false;\n\n    public void initMitmScan() {\n        mitmScanButton.addActionListener(e -> {\n            if (!mitmRunning) {\n                String port = portText.getText();\n                xrayCmd.setModule(\"webscan\");\n                xrayCmd.setConfig(String.format(\"%s\", configPath));\n                xrayCmd.setInput(null);\n\n                if (StringUtil.notEmpty(xrayCmd.getOutput())) {\n                    refreshOutput();\n                }\n\n                xrayCmd.setOthersPrefix(\"--listen\");\n                xrayCmd.setOthers(\"127.0.0.1:\" + port);\n                String[] cmd = xrayCmd.buildCmd();\n                stop = false;\n                execAndFresh(cmd);\n                if (LANG == CHINESE) {\n                    mitmScanButton.setText(\"\u5173\u95ed\u88ab\u52a8\u76d1\u542c\");\n                } else {\n                    mitmScanButton.setText(\"Shutdown\");\n                }\n                portText.setEnabled(false);\n                mitmRunning = true;\n            } else {\n                stop = true;\n                portText.setEnabled(true);\n                if (LANG == CHINESE) {\n                    mitmScanButton.setText(\"\u5f00\u542f\u88ab\u52a8\u626b\u63cf\");\n                } else {\n                    mitmScanButton.setText(\"Start MITM\");\n                }\n                mitmRunning = false;\n                outputTextArea.setText(null);\n            }\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void initHttpProxy() {\n        String data = null;\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"http\")) {\n                Map<String, Object> httpModule = (Map<String, Object>) entry.getValue();\n                data = (String) httpModule.get(\"proxy\");\n            }\n        }\n        if (data != null) {\n            proxyText.setText(data);\n        }\n        proxyConfigButton.addActionListener(e -> {\n            String httpProxy = proxyText.getText();\n            for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n                if (entry.getKey().equals(\"http\")) {\n                    Map<String, Object> httpModule = (Map<String, Object>) entry.getValue();\n                    httpModule.put(\"proxy\", httpProxy);\n                }\n            }\n            refreshConfig();\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u4ee3\u7406\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void initReverse() {\n        for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n            if (entry.getKey().equals(\"reverse\")) {\n                Map<String, Object> reverse = (Map<String, Object>) entry.getValue();\n                Map<String, Object> client = (Map<String, Object>) reverse.get(\"client\");\n                String token = (String) reverse.get(\"token\");\n                String httpUrl = (String) client.get(\"http_base_url\");\n                String dnsServer = (String) client.get(\"dns_server_ip\");\n                if (StringUtil.notEmpty(httpUrl) || StringUtil.notEmpty(dnsServer)) {\n                    client.put(\"remote_server\", true);\n                }\n                tokenText.setText(token);\n                httpReverseText.setText(httpUrl);\n                dnsText.setText(dnsServer);\n            }\n        }\n\n        reverseConfigButton.addActionListener(e -> {\n            String http = httpReverseText.getText();\n            String dns = dnsText.getText();\n            String token = tokenText.getText();\n            for (Map.Entry<String, Object> entry : configObj.entrySet()) {\n                if (entry.getKey().equals(\"reverse\")) {\n                    Map<String, Object> reverse = (Map<String, Object>) entry.getValue();\n                    Map<String, Object> client = (Map<String, Object>) reverse.get(\"client\");\n                    reverse.put(\"token\", token);\n                    client.put(\"remote_server\", true);\n                    client.put(\"http_base_url\", http);\n                    client.put(\"dns_server_ip\", dns);\n                }\n            }\n            refreshConfig();\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u8bbe\u7f6e\u53cd\u8fde\u6210\u529f\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    public void initForcedStop() {\n        stopButton.addActionListener(e -> {\n            stop = true;\n            outputTextArea.setText(null);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u5df2\u5f3a\u5236\u505c\u6b62\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Stop Success\");\n            }\n        });\n    }\n\n    public void initOpenOutput() {\n        autoDelCheckBox.setSelected(false);\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            if (autoDelCheckBox.isSelected()) {\n                for (String s : existOutputList) {\n                    try {\n                        Files.delete(Paths.get(s));\n                    } catch (Exception ignored) {\n                    }\n                }\n            }\n        }));\n\n        openResultButton.addActionListener(e -> {\n            if (outputFilePath == null) {\n                return;\n            }\n            if (StringUtil.notEmpty(outputFilePath.trim())) {\n                if (Files.exists(Paths.get(outputFilePath))) {\n                    String tempOutput = outputFilePath.replace(\".html\",\n                            \"copy.html\");\n                    try {\n                        // copy\n                        Files.write(Paths.get(tempOutput),\n                                Files.readAllBytes(Paths.get(outputFilePath)));\n                    } catch (Exception ignored) {\n                    }\n                    existOutputList.add(tempOutput);\n                    new Thread(() -> ExecUtil.execOpen(tempOutput)).start();\n                } else {\n                    logger.info(\"output file not exist\");\n                }\n            } else {\n                logger.warn(\"output file is none\");\n            }\n        });\n    }\n\n    public void initReset() {\n        resetConfigButton.addActionListener(e -> {\n            reloadConfig(true, true);\n            if (LANG == CHINESE) {\n                JOptionPane.showMessageDialog(null, \"\u5df2\u6062\u590d\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"Success\");\n            }\n        });\n    }\n\n    private void initHttpUtil() {\n        httpUtilButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"Http\u5de5\u5177\";\n            } else {\n                t = \"Repeater\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new HttpUtilForm().httpUtilPanel);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    public void initListenUtil() {\n        listenUtilButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u76d1\u542c\u7aef\u53e3\u5de5\u5177\";\n            } else {\n                t = \"Listener\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new ListenUtilForm().listenUtilPanel);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    public void initEncodeUtil() {\n        encodeUtilButton.addActionListener(e -> {\n            String t;\n            if (LANG == CHINESE) {\n                t = \"\u7f16\u7801\u5de5\u5177\";\n            } else {\n                t = \"Decoder\";\n            }\n            JFrame frame = new JFrame(t);\n            frame.setContentPane(new EncodeUtilForm().encodeUtilPanel);\n            frame.setResizable(false);\n            frame.pack();\n            frame.setVisible(true);\n        });\n    }\n\n    private void initSkin() {\n        switch (Application.globalSkin) {\n            case Const.nimbus:\n                nimbusRadioButton.setSelected(true);\n                break;\n            case Const.aqua:\n                aquaRadioButton.setSelected(true);\n                break;\n            case Const.gtk:\n                gtkRadioButton.setSelected(true);\n                break;\n            case Const.metal:\n                metalRadioButton.setSelected(true);\n                break;\n            case Const.flatLaf:\n                flatLafRadioButton.setSelected(true);\n                break;\n            case Const.windows:\n                windowsRadioButton.setSelected(true);\n                break;\n            case Const.winClassic:\n                winClassicRadioButton.setSelected(true);\n                break;\n            default:\n                logger.error(\"error skin\");\n        }\n\n        saveSkinButton.addActionListener(e -> {\n            try {\n                if (nimbusRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.nimbus);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.nimbus);\n                    db.setSkin(Const.nimbus);\n                } else if (metalRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.metal);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.metal);\n                    db.setSkin(Const.metal);\n                } else if (windowsRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.windows);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.windows);\n                    db.setSkin(Const.windows);\n                } else if (winClassicRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.winClassic);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.winClassic);\n                    db.setSkin(Const.winClassic);\n                } else if (flatLafRadioButton.isSelected()) {\n                    try {\n                        FlatLightLaf.setup();\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    FlatLightLaf.setup();\n                    db.setSkin(Const.flatLaf);\n                } else if (gtkRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.gtk);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.gtk);\n                    db.setSkin(Const.gtk);\n                } else if (aquaRadioButton.isSelected()) {\n                    try {\n                        Class.forName(Const.aqua);\n                    } catch (Exception ignored) {\n                        if (LANG == CHINESE) {\n                            JOptionPane.showMessageDialog(null, \"\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u80fd\u8bbe\u7f6e\u8be5\u76ae\u80a4\");\n                        } else {\n                            JOptionPane.showMessageDialog(null,\n                                    \"Your OS not support this skin\");\n                        }\n                        return;\n                    }\n                    UIManager.setLookAndFeel(Const.aqua);\n                    db.setSkin(Const.aqua);\n                }\n                SwingUtilities.updateComponentTreeUI(SuperXray);\n                SuperXray.revalidate();\n                db.saveDB();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n    }\n\n    private void initOther() {\n        cleanAreaButton.addActionListener(e -> outputTextArea.setText(null));\n        xrayUrlButton.addActionListener(e -> {\n            try {\n                Desktop desktop = Desktop.getDesktop();\n                URI oURL = new URI(\"https://download.xray.cool/xray\");\n                desktop.browse(oURL);\n            } catch (Exception ex) {\n                logger.error(ex);\n            }\n        });\n        authorLabel.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                try {\n                    Desktop desktop = Desktop.getDesktop();\n                    URI oURL = new URI(\"https://github.com/4ra1n\");\n                    desktop.browse(oURL);\n                } catch (Exception ex) {\n                    logger.error(ex);\n                }\n            }\n        });\n    }\n\n    public static final int CHINESE = 0;\n    public static final int ENGLISH = 1;\n    public static int LANG;\n\n    public void initLang() {\n        chineseLangButton.setSelected(true);\n        LANG = CHINESE;\n        englishLangButton.setSelected(false);\n        langButton.addActionListener(e -> {\n            if (chineseLangButton.isSelected()) {\n                LANG = CHINESE;\n            } else if (englishLangButton.isSelected()) {\n                LANG = ENGLISH;\n            }\n            refreshLang();\n            if (LANG == CHINESE) {\n                pocNumLabel.setText(String.format(\"\u5f53\u524d\u5171\u6709: %s \u4e2aPoC\", Poc.getPocList().size()));\n            } else {\n                pocNumLabel.setText(String.format(\"PoC Num: %s\", Poc.getPocList().size()));\n            }\n        });\n    }\n\n    public void refreshLang() {\n        if (LANG == ENGLISH) {\n            xrayPathLabel.setText(\"You selected xray:\");\n            noteLabel.setText(\"<html> Note: Using control+c/v to copy/paste in Mac OS </html>\");\n            langButton.setText(\"Confirm Language\");\n            skinPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Skin Select\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            saveSkinButton.setText(\"Confirm Skin\");\n            leftConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Plugins Config\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            catConfigLabel.setText(\"<html> Using Plugins <br> \" +\n                    \"<b>Please press confirm button after check</b> \" +\n                    \"<p>(Some only supported by the advanced version)</p> </html>\");\n            bruteForceCheckBox.setText(\"bruteforce\");\n            baselineCheckBox.setText(\"baseline\");\n            phantasmCheckBox.setText(\"phantasm\");\n            sqldetCheckBox.setText(\"sqldet\");\n            enableAllButton.setText(\"All select / Cancel\");\n            advanceButton.setText(\"Advance Config\");\n            pocPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"PoC Module\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            pocNumLabel.setText(\"Total PoC Num:\");\n            updatePocButton.setText(\"Update PoC DB\");\n            allPoCButton.setText(\"Lookup All PoC\");\n            pocButton.setText(\"Use PoC\");\n            localPoCButton.setText(\"Chose Local PoC\");\n            scanTargetPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \" Target Config\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            rawFileButton.setText(\"Use Request File\");\n            urlButton.setText(\"Target Url\");\n            urlFileButton.setText(\"Target Url List\");\n            outputConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Output Module\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            outputConfigButton.setText(\"Save Output Config\");\n            utilPanel.setBorder(BorderFactory.createTitledBorder(null, \"Tools\",\n                    TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            httpUtilButton.setText(\"Repeater\");\n            listenUtilButton.setText(\"Listener\");\n            encodeUtilButton.setText(\"Decoder\");\n            proxyConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Proxy Config\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            proxyLabel.setText(\"Input HTTP Proxy\");\n            proxyConfigButton.setText(\"Confirm\");\n            reverseConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Reverse\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            tokenLabel.setText(\"Token\");\n            httpReverseLabel.setText(\"Input HTTP URL(IP)\");\n            dnsReverseLabel.setText(\"DNS IP(IP)\");\n            reverseConfigButton.setText(\"Confirm\");\n            startScanPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Start\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            activeScanButton.setText(\"Start Active Scan\");\n            portLabel.setText(\"Listen Port\");\n            mitmScanButton.setText(\"Open MITM Scan\");\n            otherPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Others\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            lookupCmdButton.setText(\"Lookup Current Command\");\n            lookupConfigButton.setText(\"Lookup Current Config\");\n            xrayUrlButton.setText(\"Xray Download\");\n            cleanAreaButton.setText(\"Clear Console\");\n            outputPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"Console\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            stopLabel.setText(\"  Force Stop\");\n            resetConfigLabel.setText(\"Reset Default Config\");\n            openResultLabel.setText(\" Open Scan Result\");\n            stopButton.setText(\"Stop\");\n            resetConfigButton.setText(\"Reset\");\n            autoDelCheckBox.setText(\"Delete All Reports When Exit\");\n            openResultButton.setText(\"Open\");\n            choseDirButton.setText(\"Chose File\");\n            confirmPluginButton.setText(\"Confirm\");\n        } else if (LANG == CHINESE) {\n            xrayPathLabel.setText(\"\u4f60\u9009\u62e9\u7684xray\u6587\u4ef6\u662f\uff1a\");\n            noteLabel.setText(\"<html> \u6ce8\u610f\uff1a\u5728 Mac OS \u4e2d\u8bf7\u7528 control+c/v \u590d\u5236/\u7c98\u8d34 </html>\");\n            langButton.setText(\"\u786e\u8ba4\u8bed\u8a00\");\n            skinPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u76ae\u80a4\u9009\u62e9\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            saveSkinButton.setText(\"\u786e\u8ba4\u76ae\u80a4\");\n            leftConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u626b\u63cf\u63d2\u4ef6\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            catConfigLabel.setText(\"<html> \u4f7f\u7528\u7684\u63d2\u4ef6\uff1a <br> \" +\n                    \"<b>\u8bf7\u914d\u7f6e\u5b8c\u6210\u540e\u70b9\u51fb->\u786e\u8ba4\u63d2\u4ef6</b> <p>(\u90e8\u5206\u63d2\u4ef6\u4ec5\u9ad8\u7ea7\u7248\u652f\u6301)</p> </html>\");\n            bruteForceCheckBox.setText(\"bruteforce\uff08\u66b4\u529b\u7834\u89e3\uff09\");\n            baselineCheckBox.setText(\"baseline\uff08\u57fa\u7ebf\u68c0\u67e5\uff09\");\n            phantasmCheckBox.setText(\"phantasm\uff08PoC\u5408\u96c6\uff09\");\n            sqldetCheckBox.setText(\"sqldet\uff08sql\u6ce8\u5165\uff09\");\n            enableAllButton.setText(\"\u5168\u9009 / \u53d6\u6d88\u5168\u9009\");\n            advanceButton.setText(\"\u9ad8\u7ea7\u914d\u7f6e\");\n            pocPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"PoC\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            pocNumLabel.setText(\"\u5f53\u524dxray\u7684PoC\u6570\u91cf\uff1a\");\n            updatePocButton.setText(\"\u540c\u6b65PoC\u6570\u636e\u5e93\");\n            allPoCButton.setText(\"\u67e5\u770b\u6240\u6709PoC\");\n            pocButton.setText(\"\u6307\u5b9aPoC\");\n            localPoCButton.setText(\"\u9009\u62e9\u672c\u5730PoC\");\n            scanTargetPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \" \u626b\u63cf\u76ee\u6807\u8bbe\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            rawFileButton.setText(\"\u6307\u5b9arequest\u6587\u4ef6\");\n            urlButton.setText(\"\u6307\u5b9aurl\");\n            urlFileButton.setText(\"\u6307\u5b9aurl\u5217\u8868\u6587\u4ef6\");\n            outputConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u8f93\u51fa\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            outputConfigButton.setText(\"\u70b9\u51fb\u786e\u8ba4\u8f93\u51fa\u914d\u7f6e\");\n            utilPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u5c0f\u5de5\u5177\",\n                    TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            httpUtilButton.setText(\"http \u8bf7\u6c42\u6d4b\u8bd5\");\n            listenUtilButton.setText(\"\u76d1\u542c\u7aef\u53e3\");\n            encodeUtilButton.setText(\"\u7f16\u7801\u5de5\u5177\");\n            proxyConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u4ee3\u7406\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            proxyLabel.setText(\"\u8f93\u5165HTTP\u4ee3\u7406URL\");\n            proxyConfigButton.setText(\"\u786e\u8ba4\");\n            reverseConfigPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u53cd\u8fde\u5e73\u53f0\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            tokenLabel.setText(\"Token\");\n            httpReverseLabel.setText(\"\u8bf7\u8f93\u5165HTTP URL\uff08IP\u5f62\u5f0f\uff09\");\n            dnsReverseLabel.setText(\"DNS IP\uff08IP\u5f62\u5f0f\uff09\");\n            reverseConfigButton.setText(\"\u786e\u8ba4\u914d\u7f6e\");\n            startScanPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u542f\u52a8\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            activeScanButton.setText(\"\u5f00\u542f\u4e3b\u52a8\u626b\u63cf\");\n            portLabel.setText(\"\u88ab\u52a8\u76d1\u542c\u7aef\u53e3:\");\n            mitmScanButton.setText(\"\u5f00\u542f\u88ab\u52a8\u626b\u63cf\");\n            otherPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u5176\u4ed6\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            lookupCmdButton.setText(\"\u67e5\u770b\u5f53\u524d\u547d\u4ee4\");\n            lookupConfigButton.setText(\"\u67e5\u770b\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\");\n            xrayUrlButton.setText(\"xray\u4e0b\u8f7d\u7f51\u7ad9\");\n            cleanAreaButton.setText(\"\u6e05\u7a7a\u547d\u4ee4\u884c\u8f93\u51fa\");\n            outputPanel.setBorder(BorderFactory.createTitledBorder(null,\n                    \"\u547d\u4ee4\u884c\u8f93\u51fa\u7ed3\u679c\uff1a\", TitledBorder.DEFAULT_JUSTIFICATION,\n                    TitledBorder.DEFAULT_POSITION, null, null));\n            stopLabel.setText(\"  \u5982\u679c\u610f\u5916\u5730\u8fd0\u884c\u4e86\u5371\u9669\u7684\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\uff1a\");\n            resetConfigLabel.setText(\"\u6062\u590d\u9ed8\u8ba4\u914d\u7f6e\uff1a\");\n            openResultLabel.setText(\" \u6253\u5f00\u626b\u63cf\u7ed3\u679c\uff1a\uff08\u5982\u679c\u5b58\u5728\uff09\");\n            stopButton.setText(\"\u5f3a\u5236\u505c\u6b62\");\n            resetConfigButton.setText(\"\u786e\u8ba4\");\n            autoDelCheckBox.setText(\"\u5173\u95ed\u540e\u81ea\u52a8\u5220\u9664\u62a5\u544a\");\n            openResultButton.setText(\"\u70b9\u51fb\u6253\u5f00\u626b\u63cf\u7ed3\u679c\");\n            choseDirButton.setText(\"\u70b9\u51fb\u6309\u94ae\u9009\u62e9\");\n            confirmPluginButton.setText(\"\u786e\u8ba4\u63d2\u4ef6\");\n        }\n    }\n\n    private void initExit() {\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            instance.stop = true;\n            try {\n                Thread.sleep(3000);\n            } catch (Exception ignored) {\n            }\n        }));\n    }\n\n    public MainForm() {\n        init();\n        initLang();\n        initSkin();\n        initLoadXray();\n        initPluginCheckBox();\n        initPluginSave();\n        initAdvanceConfig();\n        initOutputConfig();\n        initRawScanConfig();\n        initUrlFileConfig();\n        initTargetUrlConfig();\n        initAllPoC();\n        initHttpProxy();\n        initTargetPoC();\n        initActiveScan();\n        initMitmScan();\n        initReverse();\n        initForcedStop();\n        initOpenOutput();\n        initReset();\n        initHttpUtil();\n        initListenUtil();\n        initEncodeUtil();\n        initOther();\n        initExit();\n    }\n\n    public static void startMainForm() {\n        JFrame frame = new JFrame(Const.ApplicationName);\n        instance = new MainForm();\n        frame.setContentPane(instance.SuperXray);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.pack();\n        frame.setVisible(true);\n\n        frame.setSize(1280, 960);\n\n    }\n\n    {\n// GUI initializer generated by IntelliJ IDEA GUI Designer\n// >>> IMPORTANT!! <<<\n// DO NOT EDIT OR ADD ANY CODE HERE!\n        $$$setupUI$$$();\n    }\n\n    /**\n     * Method generated by IntelliJ IDEA GUI Designer\n     * >>> IMPORTANT!! <<<\n     * DO NOT edit this method OR call it in your code!\n     *\n     * @noinspection ALL\n     */\n    private void $$$setupUI$$$() {\n        SuperXray = new JPanel();\n        SuperXray.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));\n        SuperXray.setBackground(new Color(-725535));\n        loadXrayPanel = new JPanel();\n        loadXrayPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n        loadXrayPanel.setBackground(new Color(-725535));\n        SuperXray.add(loadXrayPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        loadXrayPanel.setBorder(BorderFactory.createTitledBorder(null, \"Super Xray\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        pathButtonPanel = new JPanel();\n        pathButtonPanel.setLayout(new GridLayoutManager(2, 6, new Insets(0, 0, 0, 0), -1, -1));\n        pathButtonPanel.setBackground(new Color(-725535));\n        loadXrayPanel.add(pathButtonPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        choseDirButton = new JButton();\n        choseDirButton.setText(\"\u70b9\u51fb\u6309\u94ae\u9009\u62e9\");\n        pathButtonPanel.add(choseDirButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        noteLabel = new JLabel();\n        noteLabel.setText(\"<html>\\n\u6ce8\u610f\uff1a\u5728 Mac OS \u4e2d\u8bf7\u7528 control+c/v \u590d\u5236/\u7c98\u8d34\\n</html>\");\n        pathButtonPanel.add(noteLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, -1), null, null, 0, false));\n        skinPanel = new JPanel();\n        skinPanel.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));\n        skinPanel.setBackground(new Color(-725535));\n        pathButtonPanel.add(skinPanel, new GridConstraints(0, 5, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        skinPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u76ae\u80a4\u9009\u62e9\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        metalRadioButton = new JRadioButton();\n        metalRadioButton.setBackground(new Color(-725535));\n        metalRadioButton.setText(\"Metal\");\n        skinPanel.add(metalRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        flatLafRadioButton = new JRadioButton();\n        flatLafRadioButton.setBackground(new Color(-725535));\n        flatLafRadioButton.setText(\"FlatLaf\");\n        skinPanel.add(flatLafRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        nimbusRadioButton = new JRadioButton();\n        nimbusRadioButton.setBackground(new Color(-725535));\n        nimbusRadioButton.setText(\"Nimbus\");\n        skinPanel.add(nimbusRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        windowsRadioButton = new JRadioButton();\n        windowsRadioButton.setBackground(new Color(-725535));\n        windowsRadioButton.setText(\"Win\");\n        skinPanel.add(windowsRadioButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        winClassicRadioButton = new JRadioButton();\n        winClassicRadioButton.setBackground(new Color(-725535));\n        winClassicRadioButton.setText(\"Win Classic\");\n        skinPanel.add(winClassicRadioButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        gtkRadioButton = new JRadioButton();\n        gtkRadioButton.setBackground(new Color(-725535));\n        gtkRadioButton.setText(\"Gtk\");\n        skinPanel.add(gtkRadioButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        saveSkinButton = new JButton();\n        saveSkinButton.setText(\"\u786e\u8ba4\u76ae\u80a4\");\n        skinPanel.add(saveSkinButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        aquaRadioButton = new JRadioButton();\n        aquaRadioButton.setBackground(new Color(-725535));\n        aquaRadioButton.setText(\"Aqua\");\n        skinPanel.add(aquaRadioButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xrayPathLabel = new JLabel();\n        xrayPathLabel.setText(\"\u4f60\u9009\u62e9\u7684xray\u6587\u4ef6\u662f\uff1a\");\n        pathButtonPanel.add(xrayPathLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xrayPathTextField = new JTextField();\n        xrayPathTextField.setEditable(false);\n        xrayPathTextField.setEnabled(false);\n        pathButtonPanel.add(xrayPathTextField, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, -1), null, 0, false));\n        englishLangButton = new JRadioButton();\n        englishLangButton.setBackground(new Color(-725535));\n        englishLangButton.setText(\"English\");\n        pathButtonPanel.add(englishLangButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        chineseLangButton = new JRadioButton();\n        chineseLangButton.setBackground(new Color(-725535));\n        chineseLangButton.setText(\"\u7b80\u4f53\u4e2d\u6587\");\n        pathButtonPanel.add(chineseLangButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        langButton = new JButton();\n        langButton.setText(\"\u786e\u8ba4\u8bed\u8a00\");\n        pathButtonPanel.add(langButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        configPanel = new JPanel();\n        configPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));\n        configPanel.setBackground(new Color(-725535));\n        SuperXray.add(configPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        leftConfigPanel = new JPanel();\n        leftConfigPanel.setLayout(new GridLayoutManager(11, 4, new Insets(0, 0, 0, 0), -1, -1));\n        leftConfigPanel.setBackground(new Color(-725535));\n        leftConfigPanel.setEnabled(true);\n        leftConfigPanel.setForeground(new Color(-4540485));\n        leftConfigPanel.setToolTipText(\"\");\n        configPanel.add(leftConfigPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        leftConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u626b\u63cf\u63d2\u4ef6\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        catConfigPanel = new JPanel();\n        catConfigPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        catConfigPanel.setBackground(new Color(-725535));\n        leftConfigPanel.add(catConfigPanel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));\n        catConfigLabel = new JLabel();\n        catConfigLabel.setText(\"<html>\\n\u4f7f\u7528\u7684\u63d2\u4ef6\uff1a\\n<br>\\n<b>\u8bf7\u914d\u7f6e\u5b8c\u6210\u540e\u70b9\u51fb->\u786e\u8ba4\u63d2\u4ef6</b>\\n<p>(\u90e8\u5206\u63d2\u4ef6\u4ec5\u9ad8\u7ea7\u7248\u652f\u6301)</p>\\n</html>\");\n        catConfigPanel.add(catConfigLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        confirmPluginButton = new JButton();\n        confirmPluginButton.setText(\"\u786e\u8ba4\u63d2\u4ef6\");\n        catConfigPanel.add(confirmPluginButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        bruteForceCheckBox = new JCheckBox();\n        bruteForceCheckBox.setBackground(new Color(-725535));\n        bruteForceCheckBox.setText(\"bruteforce\uff08\u66b4\u529b\u7834\u89e3\uff09\");\n        leftConfigPanel.add(bruteForceCheckBox, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        baselineCheckBox = new JCheckBox();\n        baselineCheckBox.setBackground(new Color(-725535));\n        baselineCheckBox.setText(\"baseline\uff08\u57fa\u7ebf\u68c0\u67e5\uff09\");\n        leftConfigPanel.add(baselineCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        cmdInjectionCheckBox = new JCheckBox();\n        cmdInjectionCheckBox.setBackground(new Color(-725535));\n        cmdInjectionCheckBox.setText(\"cmd-injection\");\n        leftConfigPanel.add(cmdInjectionCheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        crlfInjectionCheckBox = new JCheckBox();\n        crlfInjectionCheckBox.setBackground(new Color(-725535));\n        crlfInjectionCheckBox.setText(\"crlf-injection\");\n        leftConfigPanel.add(crlfInjectionCheckBox, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        dirscanCheckBox = new JCheckBox();\n        dirscanCheckBox.setBackground(new Color(-725535));\n        dirscanCheckBox.setText(\"dirscan\");\n        leftConfigPanel.add(dirscanCheckBox, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        fastjsonCheckBox = new JCheckBox();\n        fastjsonCheckBox.setBackground(new Color(-725535));\n        fastjsonCheckBox.setText(\"fastjson\");\n        leftConfigPanel.add(fastjsonCheckBox, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        jsonpCheckBox = new JCheckBox();\n        jsonpCheckBox.setBackground(new Color(-725535));\n        jsonpCheckBox.setText(\"jsonp\");\n        leftConfigPanel.add(jsonpCheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        pathTraversalCheckBox = new JCheckBox();\n        pathTraversalCheckBox.setBackground(new Color(-725535));\n        pathTraversalCheckBox.setText(\"path-traversal\");\n        leftConfigPanel.add(pathTraversalCheckBox, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        phantasmCheckBox = new JCheckBox();\n        phantasmCheckBox.setBackground(new Color(-725535));\n        phantasmCheckBox.setText(\"phantasm\uff08PoC\u5408\u96c6\uff09\");\n        leftConfigPanel.add(phantasmCheckBox, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        redirectCheckBox = new JCheckBox();\n        redirectCheckBox.setBackground(new Color(-725535));\n        redirectCheckBox.setEnabled(true);\n        redirectCheckBox.setText(\"redirect\");\n        leftConfigPanel.add(redirectCheckBox, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        shiroCheckBox = new JCheckBox();\n        shiroCheckBox.setBackground(new Color(-725535));\n        shiroCheckBox.setText(\"shiro\");\n        leftConfigPanel.add(shiroCheckBox, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        sqldetCheckBox = new JCheckBox();\n        sqldetCheckBox.setBackground(new Color(-725535));\n        sqldetCheckBox.setText(\"sqldet\uff08sql\u6ce8\u5165\uff09\");\n        leftConfigPanel.add(sqldetCheckBox, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        ssrfCheckBox = new JCheckBox();\n        ssrfCheckBox.setBackground(new Color(-725535));\n        ssrfCheckBox.setText(\"ssrf\");\n        leftConfigPanel.add(ssrfCheckBox, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        strutsCheckBox = new JCheckBox();\n        strutsCheckBox.setBackground(new Color(-725535));\n        strutsCheckBox.setText(\"struts\");\n        leftConfigPanel.add(strutsCheckBox, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        thinkphpCheckBox = new JCheckBox();\n        thinkphpCheckBox.setBackground(new Color(-725535));\n        thinkphpCheckBox.setText(\"thinkphp\");\n        leftConfigPanel.add(thinkphpCheckBox, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        uploadCheckBox = new JCheckBox();\n        uploadCheckBox.setBackground(new Color(-725535));\n        uploadCheckBox.setText(\"upload\");\n        leftConfigPanel.add(uploadCheckBox, new GridConstraints(8, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xxeCheckBox = new JCheckBox();\n        xxeCheckBox.setBackground(new Color(-725535));\n        xxeCheckBox.setText(\"xxe\");\n        leftConfigPanel.add(xxeCheckBox, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xssCheckBox = new JCheckBox();\n        xssCheckBox.setBackground(new Color(-725535));\n        xssCheckBox.setText(\"xss\");\n        leftConfigPanel.add(xssCheckBox, new GridConstraints(9, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        enableAllButton = new JButton();\n        enableAllButton.setText(\"\u5168\u9009 / \u53d6\u6d88\u5168\u9009\");\n        leftConfigPanel.add(enableAllButton, new GridConstraints(10, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        advanceButton = new JButton();\n        advanceButton.setText(\"\u9ad8\u7ea7\u914d\u7f6e\");\n        leftConfigPanel.add(advanceButton, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        rightConfigPanel = new JPanel();\n        rightConfigPanel.setLayout(new GridLayoutManager(8, 1, new Insets(0, 0, 0, 0), -1, -1));\n        rightConfigPanel.setBackground(new Color(-725535));\n        rightConfigPanel.setEnabled(true);\n        configPanel.add(rightConfigPanel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        proxyConfigPanel = new JPanel();\n        proxyConfigPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n        proxyConfigPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(proxyConfigPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        proxyConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u4ee3\u7406\u914d\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        proxyPanel = new JPanel();\n        proxyPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        proxyPanel.setBackground(new Color(-725535));\n        proxyConfigPanel.add(proxyPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        proxyConfigButton = new JButton();\n        proxyConfigButton.setText(\"\u786e\u8ba4\");\n        proxyPanel.add(proxyConfigButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        proxyLabel = new JLabel();\n        proxyLabel.setText(\"\u8f93\u5165HTTP\u4ee3\u7406URL\");\n        proxyPanel.add(proxyLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        proxyText = new JTextField();\n        proxyPanel.add(proxyText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        reverseConfigPanel = new JPanel();\n        reverseConfigPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        reverseConfigPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(reverseConfigPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        reverseConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u53cd\u8fde\u5e73\u53f0\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        reverseUrlPanel = new JPanel();\n        reverseUrlPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));\n        reverseUrlPanel.setBackground(new Color(-725535));\n        reverseConfigPanel.add(reverseUrlPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        httpReverseLabel = new JLabel();\n        httpReverseLabel.setText(\"\u8bf7\u8f93\u5165HTTP URL\uff08IP\u5f62\u5f0f\uff09\");\n        reverseUrlPanel.add(httpReverseLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        httpReverseText = new JTextField();\n        reverseUrlPanel.add(httpReverseText, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        dnsReverseLabel = new JLabel();\n        dnsReverseLabel.setText(\"DNS IP\uff08IP\u5f62\u5f0f\uff09\");\n        reverseUrlPanel.add(dnsReverseLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        dnsText = new JTextField();\n        reverseUrlPanel.add(dnsText, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        tokenLabel = new JLabel();\n        tokenLabel.setText(\"Token\");\n        reverseUrlPanel.add(tokenLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        tokenText = new JTextField();\n        reverseUrlPanel.add(tokenText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        reverseConfigButton = new JButton();\n        reverseConfigButton.setText(\"\u786e\u8ba4\u914d\u7f6e\");\n        reverseConfigPanel.add(reverseConfigButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        startScanPanel = new JPanel();\n        startScanPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        startScanPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(startScanPanel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        startScanPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u542f\u52a8\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        activeScanButton = new JButton();\n        activeScanButton.setText(\"\u5f00\u542f\u4e3b\u52a8\u626b\u63cf\");\n        startScanPanel.add(activeScanButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        mitmPanel = new JPanel();\n        mitmPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        mitmPanel.setBackground(new Color(-725535));\n        startScanPanel.add(mitmPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        mitmScanButton = new JButton();\n        mitmScanButton.setText(\"\u5f00\u542f\u88ab\u52a8\u626b\u63cf\");\n        mitmPanel.add(mitmScanButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        portText = new JTextField();\n        portText.setText(\"\");\n        mitmPanel.add(portText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        portLabel = new JLabel();\n        portLabel.setText(\"\u88ab\u52a8\u76d1\u542c\u7aef\u53e3:\");\n        mitmPanel.add(portLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        otherPanel = new JPanel();\n        otherPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));\n        otherPanel.setBackground(new Color(-725535));\n        rightConfigPanel.add(otherPanel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        otherPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u5176\u4ed6\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        lookupCmdButton = new JButton();\n        lookupCmdButton.setText(\"\u67e5\u770b\u5f53\u524d\u547d\u4ee4\");\n        otherPanel.add(lookupCmdButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        lookupConfigButton = new JButton();\n        lookupConfigButton.setText(\"\u67e5\u770b\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\");\n        otherPanel.add(lookupConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        cleanAreaButton = new JButton();\n        cleanAreaButton.setText(\"\u6e05\u7a7a\u547d\u4ee4\u884c\u8f93\u51fa\");\n        otherPanel.add(cleanAreaButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        xrayUrlButton = new JButton();\n        xrayUrlButton.setText(\"xray\u4e0b\u8f7d\u7f51\u7ad9\");\n        otherPanel.add(xrayUrlButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        midConfigPanel = new JPanel();\n        midConfigPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));\n        midConfigPanel.setBackground(new Color(-725535));\n        configPanel.add(midConfigPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        pocPanel = new JPanel();\n        pocPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));\n        pocPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(pocPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));\n        pocPanel.setBorder(BorderFactory.createTitledBorder(null, \"PoC\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        pocButton = new JButton();\n        pocButton.setText(\"\u6307\u5b9aPoC\");\n        pocPanel.add(pocButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        allPoCButton = new JButton();\n        allPoCButton.setText(\"\u67e5\u770b\u6240\u6709PoC\");\n        pocPanel.add(allPoCButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        usePoCText = new JTextField();\n        pocPanel.add(usePoCText, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        pocNumLabel = new JLabel();\n        pocNumLabel.setText(\"\u5f53\u524dxray\u7684PoC\u6570\u91cf\uff1a\");\n        pocPanel.add(pocNumLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        updatePocButton = new JButton();\n        updatePocButton.setText(\"\u540c\u6b65PoC\u6570\u636e\u5e93\");\n        pocPanel.add(updatePocButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        localPoCText = new JTextField();\n        localPoCText.setEditable(false);\n        localPoCText.setEnabled(false);\n        pocPanel.add(localPoCText, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        localPoCButton = new JButton();\n        localPoCButton.setText(\"\u9009\u62e9\u672c\u5730PoC\");\n        pocPanel.add(localPoCButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        scanTargetPanel = new JPanel();\n        scanTargetPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));\n        scanTargetPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(scanTargetPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        scanTargetPanel.setBorder(BorderFactory.createTitledBorder(null, \" \u626b\u63cf\u76ee\u6807\u8bbe\u7f6e\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        rawFileField = new JTextField();\n        rawFileField.setEditable(false);\n        rawFileField.setEnabled(false);\n        scanTargetPanel.add(rawFileField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        rawFileButton = new JButton();\n        rawFileButton.setText(\"\u6307\u5b9arequest\u6587\u4ef6\");\n        scanTargetPanel.add(rawFileButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        urlField = new JTextField();\n        urlField.setEditable(true);\n        scanTargetPanel.add(urlField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        urlButton = new JButton();\n        urlButton.setText(\"\u6307\u5b9aurl\");\n        scanTargetPanel.add(urlButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        urlFileField = new JTextField();\n        urlFileField.setEditable(false);\n        urlFileField.setEnabled(false);\n        scanTargetPanel.add(urlFileField, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n        urlFileButton = new JButton();\n        urlFileButton.setText(\"\u6307\u5b9aurl\u5217\u8868\u6587\u4ef6\");\n        scanTargetPanel.add(urlFileButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        outputConfigPanel = new JPanel();\n        outputConfigPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));\n        outputConfigPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(outputConfigPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        outputConfigPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u8f93\u51fa\u6a21\u5757\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        outputConfigButton = new JButton();\n        outputConfigButton.setText(\"\u70b9\u51fb\u786e\u8ba4\u8f93\u51fa\u914d\u7f6e\");\n        outputConfigPanel.add(outputConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        scanOutConfigPanel = new JPanel();\n        scanOutConfigPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        scanOutConfigPanel.setBackground(new Color(-725535));\n        outputConfigPanel.add(scanOutConfigPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        htmlRadioButton = new JRadioButton();\n        htmlRadioButton.setBackground(new Color(-725535));\n        htmlRadioButton.setText(\"html\");\n        scanOutConfigPanel.add(htmlRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        cliRadioButton = new JRadioButton();\n        cliRadioButton.setBackground(new Color(-725535));\n        cliRadioButton.setText(\"cli\");\n        scanOutConfigPanel.add(cliRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        jsonRadioButton = new JRadioButton();\n        jsonRadioButton.setBackground(new Color(-725535));\n        jsonRadioButton.setText(\"json\");\n        scanOutConfigPanel.add(jsonRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        utilPanel = new JPanel();\n        utilPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        utilPanel.setBackground(new Color(-725535));\n        midConfigPanel.add(utilPanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        utilPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u5c0f\u5de5\u5177\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        httpUtilButton = new JButton();\n        httpUtilButton.setText(\"http \u8bf7\u6c42\u6d4b\u8bd5\");\n        utilPanel.add(httpUtilButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        encodeUtilButton = new JButton();\n        encodeUtilButton.setText(\"\u7f16\u7801\u5de5\u5177\");\n        utilPanel.add(encodeUtilButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        listenUtilButton = new JButton();\n        listenUtilButton.setText(\"\u76d1\u542c\u7aef\u53e3\");\n        utilPanel.add(listenUtilButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        bottomPanel = new JPanel();\n        bottomPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n        bottomPanel.setBackground(new Color(-725535));\n        SuperXray.add(bottomPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        authorLabel = new JLabel();\n        authorLabel.setHorizontalAlignment(0);\n        authorLabel.setHorizontalTextPosition(0);\n        authorLabel.setText(\"<html> <p>Author: 4ra1n (https://github.com/4ra1n) from Chaitin Tech</p> </html>\");\n        bottomPanel.add(authorLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        final Spacer spacer1 = new Spacer();\n        bottomPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), null, null, 0, false));\n        outputPanel = new JScrollPane();\n        outputPanel.setBackground(new Color(-725535));\n        outputPanel.setForeground(new Color(-725535));\n        SuperXray.add(outputPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 200), null, null, 0, false));\n        outputPanel.setBorder(BorderFactory.createTitledBorder(null, \"\u547d\u4ee4\u884c\u8f93\u51fa\u7ed3\u679c\uff1a\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n        outputTextArea = new JTextArea();\n        outputTextArea.setBackground(new Color(-12828863));\n        outputTextArea.setEditable(false);\n        outputTextArea.setForeground(new Color(-16711895));\n        outputTextArea.setLineWrap(true);\n        outputPanel.setViewportView(outputTextArea);\n        otherButton = new JPanel();\n        otherButton.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));\n        otherButton.setBackground(new Color(-725535));\n        SuperXray.add(otherButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        resetPanel = new JPanel();\n        resetPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        resetPanel.setBackground(new Color(-725535));\n        otherButton.add(resetPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        resetConfigLabel = new JLabel();\n        resetConfigLabel.setText(\"\u6062\u590d\u9ed8\u8ba4\u914d\u7f6e\uff1a\");\n        resetPanel.add(resetConfigLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        resetConfigButton = new JButton();\n        resetConfigButton.setText(\"\u786e\u8ba4\");\n        resetPanel.add(resetConfigButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(100, -1), 0, false));\n        openResultPanel = new JPanel();\n        openResultPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n        openResultPanel.setBackground(new Color(-725535));\n        otherButton.add(openResultPanel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));\n        openResultLabel = new JLabel();\n        openResultLabel.setText(\" \u6253\u5f00\u626b\u63cf\u7ed3\u679c\uff1a\uff08\u5982\u679c\u5b58\u5728\uff09\");\n        openResultPanel.add(openResultLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        openResultButton = new JButton();\n        openResultButton.setText(\"\u70b9\u51fb\u6253\u5f00\u626b\u63cf\u7ed3\u679c\");\n        openResultPanel.add(openResultButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        autoDelCheckBox = new JCheckBox();\n        autoDelCheckBox.setBackground(new Color(-725535));\n        autoDelCheckBox.setText(\"\u5173\u95ed\u540e\u81ea\u52a8\u5220\u9664\u62a5\u544a\");\n        openResultPanel.add(autoDelCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        stopPanel = new JPanel();\n        stopPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n        stopPanel.setBackground(new Color(-725535));\n        otherButton.add(stopPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n        stopLabel = new JLabel();\n        stopLabel.setText(\"  \u5982\u679c\u610f\u5916\u5730\u8fd0\u884c\u4e86\u5371\u9669\u7684\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\uff1a\");\n        stopPanel.add(stopLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        stopButton = new JButton();\n        stopButton.setText(\"\u5f3a\u5236\u505c\u6b62\");\n        stopPanel.add(stopButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        ButtonGroup buttonGroup;\n        buttonGroup = new ButtonGroup();\n        buttonGroup.add(htmlRadioButton);\n        buttonGroup.add(cliRadioButton);\n        buttonGroup.add(jsonRadioButton);\n        buttonGroup = new ButtonGroup();\n        buttonGroup.add(metalRadioButton);\n        buttonGroup.add(flatLafRadioButton);\n        buttonGroup.add(nimbusRadioButton);\n        buttonGroup.add(windowsRadioButton);\n        buttonGroup.add(winClassicRadioButton);\n        buttonGroup.add(gtkRadioButton);\n        buttonGroup.add(aquaRadioButton);\n        buttonGroup = new ButtonGroup();\n        buttonGroup.add(chineseLangButton);\n        buttonGroup.add(englishLangButton);\n    }\n\n    /**\n     * @noinspection ALL\n     */\n    public JComponent $$$getRootComponent$$$() {\n        return SuperXray;\n    }\n\n}\n", "package com.chaitin.xray.test;\n\n\nimport com.chaitin.xray.utils.JNAUtil;\n\npublic class Main {\n    public static void main(String[] args)throws Exception {\n        String context = \"!!javax.script.ScriptEngineManager [\\n\" +\n                \"  !!java.net.URLClassLoader [[\\n\" +\n                \"    !!java.net.URL [\\\"file:./yaml.jar\\\"]\\n\" +\n                \"  ]]\\n\" +\n                \"]\";\n        System.out.println(context);\n    }\n}\n"], "filenames": ["CHANGELOG.MD", "src/main/java/com/chaitin/xray/form/LookupConfigForm.java", "src/main/java/com/chaitin/xray/form/MainForm.java", "src/main/java/com/chaitin/xray/test/Main.java"], "buggy_code_start_loc": [100, 5, 14, 8], "buggy_code_end_loc": [101, 61, 688, 10], "fixing_code_start_loc": [100, 6, 15, 8], "fixing_code_end_loc": [101, 63, 690, 14], "type": "CWE-502", "message": "super-xray is a web vulnerability scanning tool. Versions prior to 0.7 assumed trusted input for the program config which is stored in a yaml file. An attacker with local access to the file could exploit this and compromise the program. This issue has been addressed in commit `4d0d5966` and will be included in future releases. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-41958", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-25T18:15:11.177", "lastModified": "2022-11-30T20:16:37.313", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "super-xray is a web vulnerability scanning tool. Versions prior to 0.7 assumed trusted input for the program config which is stored in a yaml file. An attacker with local access to the file could exploit this and compromise the program. This issue has been addressed in commit `4d0d5966` and will be included in future releases. Users are advised to upgrade. There are no known workarounds for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:super_xray_project:super_xray:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.7", "matchCriteriaId": "4E8FD7ED-AA5A-4364-86E7-56CED3E16BBB"}]}]}], "references": [{"url": "https://github.com/4ra1n/super-xray/commit/4d0d59663596db03f39d7edd2be251d48b52dcfc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/4ra1n/super-xray/security/advisories/GHSA-39pv-4vmj-c4fr", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/4ra1n/super-xray/commit/4d0d59663596db03f39d7edd2be251d48b52dcfc"}}