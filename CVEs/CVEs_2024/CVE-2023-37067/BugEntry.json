{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\n/**\n * Class UserGroup.\n *\n * This class provides methods for the UserGroup management.\n * Include/require it in your code to use its features.\n */\nclass UserGroup extends Model\n{\n    public const SOCIAL_CLASS = 1;\n    public const NORMAL_CLASS = 0;\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'group_type',\n        'picture',\n        'url',\n        'allow_members_leave_group',\n        'visibility',\n        'updated_at',\n        'created_at',\n    ];\n\n    public $useMultipleUrl = false;\n    public $groupType = 0;\n    public $showGroupTypeSetting = false;\n    public $usergroup_rel_user_table;\n    public $usergroup_rel_course_table;\n    public $usergroup;\n    public $usergroup_rel_session_table;\n    public $session_table;\n    public $access_url_rel_usergroup;\n    public $session_rel_course_table;\n    public $access_url_rel_user;\n    public $table_course;\n    public $table_user;\n\n    /**\n     * Set ups DB tables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->table = Database::get_main_table(TABLE_USERGROUP);\n        $this->usergroup_rel_user_table = Database::get_main_table(TABLE_USERGROUP_REL_USER);\n        $this->usergroup_rel_course_table = Database::get_main_table(TABLE_USERGROUP_REL_COURSE);\n        $this->usergroup_rel_session_table = Database::get_main_table(TABLE_USERGROUP_REL_SESSION);\n        $this->session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $this->usergroup_table = Database::get_main_table(TABLE_USERGROUP);\n        $this->access_url_rel_usergroup = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USERGROUP);\n        $this->session_rel_course_table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $this->access_url_rel_user = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $this->table_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $this->table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $this->useMultipleUrl = api_get_configuration_value('multiple_access_urls');\n        if ($this->allowTeachers()) {\n            $this->columns[] = 'author_id';\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public function getUseMultipleUrl()\n    {\n        return $this->useMultipleUrl;\n    }\n\n    /**\n     * @return int\n     */\n    public function getTotalCount()\n    {\n        $options = [];\n        $from = $this->table;\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options = [\n                'where' => [\n                    'access_url_id = ?' => [\n                        $urlId,\n                    ],\n                ],\n            ];\n            $from = \" $this->table u\n                      INNER JOIN $this->access_url_rel_usergroup a\n                      ON (u.id = a.usergroup_id) \";\n        }\n        $row = Database::select('count(*) as count', $from, $options, 'first');\n\n        return $row['count'];\n    }\n\n    /**\n     * @param int  $id       user group id\n     * @param bool $getCount\n     *\n     * @return array|int\n     */\n    public function getUserGroupUsers($id, $getCount = false, $start = 0, $limit = 0)\n    {\n        $id = (int) $id;\n        $start = (int) $start;\n        $limit = (int) $limit;\n\n        $select = ' u.* ';\n        if ($getCount) {\n            $select = 'COUNT(u.id) count ';\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT $select\n                    FROM $this->usergroup_rel_user_table u\n                    INNER JOIN $this->access_url_rel_user a\n                    ON (u.user_id = a.user_id)\n                    WHERE u.usergroup_id = $id AND access_url_id = $urlId \";\n        } else {\n            $sql = \"SELECT $select\n                    FROM $this->usergroup_rel_user_table u\n                    WHERE u.usergroup_id = $id\";\n        }\n        $limitCondition = '';\n        if (!empty($start) && !empty($limit)) {\n            $limitCondition = \" LIMIT $start, $limit\";\n        }\n\n        $sql .= $limitCondition;\n\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n\n            return 0;\n        } else {\n            $list = [];\n            $showCalendar = 'true' === api_get_plugin_setting('learning_calendar', 'enabled');\n            $calendarPlugin = null;\n            if ($showCalendar) {\n                $calendarPlugin = LearningCalendarPlugin::create();\n            }\n            $url = api_get_path(WEB_PLUGIN_PATH).'learning_calendar/calendar.php?';\n            while ($data = Database::fetch_array($result)) {\n                $userId = $data['user_id'];\n                $userInfo = api_get_user_info($userId);\n                $data['name'] = $userInfo['complete_name_with_username'];\n\n                if ($showCalendar) {\n                    $calendar = $calendarPlugin->getUserCalendar($userId);\n                    $data['calendar_id'] = 0;\n                    $data['calendar'] = '';\n                    if (!empty($calendar)) {\n                        $calendarInfo = $calendarPlugin->getCalendar($calendar['calendar_id']);\n                        if ($calendarInfo) {\n                            $data['calendar_id'] = $calendar['calendar_id'];\n                            $data['calendar'] = Display::url(\n                                $calendarInfo['title'],\n                                $url.'&id='.$calendar['calendar_id']\n                            );\n                        }\n                    }\n\n                    $courseAndSessionList = Tracking::showUserProgress(\n                        $userId,\n                        0,\n                        '',\n                        true,\n                        true,\n                        true\n                    );\n\n                    $stats = $calendarPlugin->getUserStats($userId, $courseAndSessionList);\n                    $evaluations = $calendarPlugin->getGradebookEvaluationListToString($userId, $courseAndSessionList);\n                    $data['gradebook_items'] = $evaluations;\n                    $totalTime = 0;\n                    foreach ($courseAndSessionList as $sessionId => $course) {\n                        foreach ($course as $courseId) {\n                            $totalTime += Tracking::get_time_spent_on_the_course($userId, $courseId, $sessionId);\n                        }\n                    }\n\n                    $data['time_spent'] = api_time_to_hms($totalTime);\n                    $data['lp_day_completed'] = $stats['completed'];\n                    $data['days_diff'] = $stats['completed'] - $stats['user_event_count'];\n                }\n                $data['id'] = $data['user_id'];\n                $list[] = $data;\n            }\n\n            return $list;\n        }\n    }\n\n    /**\n     * @param string $extraWhereCondition\n     *\n     * @return int\n     */\n    public function get_count($extraWhereCondition = '')\n    {\n        $authorCondition = '';\n\n        if ($this->allowTeachers()) {\n            if (!api_is_platform_admin()) {\n                $userId = api_get_user_id();\n                $authorCondition = \" AND author_id = $userId\";\n            }\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT count(u.id) as count\n                    FROM $this->table u\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON (u.id = a.usergroup_id)\n                    WHERE access_url_id = $urlId $authorCondition\n                    AND $extraWhereCondition\n            \";\n\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n        } else {\n            $sql = \"SELECT count(a.id) as count\n                    FROM {$this->table} a\n                    WHERE 1 = 1\n                    $authorCondition\n                    AND $extraWhereCondition\n            \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param int $course_id\n     * @param int $type\n     *\n     * @return mixed\n     */\n    public function getUserGroupByCourseWithDataCount($course_id, $type = -1)\n    {\n        if ($this->getUseMultipleUrl()) {\n            $course_id = (int) $course_id;\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT count(c.usergroup_id) as count\n                    FROM {$this->usergroup_rel_course_table} c\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (c.usergroup_id = a.usergroup_id)\n                    WHERE access_url_id = $urlId AND course_id = $course_id\n            \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n\n            return 0;\n        } else {\n            $typeCondition = '';\n            if ($type != -1) {\n                $type = (int) $type;\n                $typeCondition = \" AND group_type = $type \";\n            }\n            $sql = \"SELECT count(c.usergroup_id) as count\n                    FROM {$this->usergroup_rel_course_table} c\n                    INNER JOIN {$this->table} a\n                    ON (c.usergroup_id = a.id)\n                    WHERE\n                        course_id = $course_id\n                        $typeCondition\n            \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n\n            return 0;\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return int\n     */\n    public function getIdByName($name)\n    {\n        $row = Database::select(\n            'id',\n            $this->table,\n            ['where' => ['name = ?' => $name]],\n            'first'\n        );\n\n        if ($row) {\n            return (int) $row['id'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function returnGrid()\n    {\n        // action links\n        $html = '<div class=\"actions\">';\n        if (api_is_platform_admin()) {\n            $html .= '<a href=\"../admin/index.php\">'.\n                Display::return_icon(\n                    'back.png',\n                    get_lang('BackTo').' '.get_lang('PlatformAdmin'),\n                    '',\n                    ICON_SIZE_MEDIUM\n                ).\n                '</a>';\n        }\n\n        $html .= '<a href=\"'.api_get_self().'?action=add\">'.\n            Display::return_icon('new_class.png', get_lang('AddClasses'), '', ICON_SIZE_MEDIUM).\n            '</a>';\n        $html .= Display::url(\n            Display::return_icon('import_csv.png', get_lang('Import'), [], ICON_SIZE_MEDIUM),\n            'usergroup_import.php'\n        );\n        $html .= Display::url(\n            Display::return_icon('export_csv.png', get_lang('Export'), [], ICON_SIZE_MEDIUM),\n            'usergroup_export.php'\n        );\n        $html .= '</div>';\n        $html .= Display::grid_html('usergroups');\n\n        return $html;\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function displayToolBarUserGroupUsers()\n    {\n        // action links\n        echo '<div class=\"actions\">';\n        $courseInfo = api_get_course_info();\n        if (empty($courseInfo)) {\n            echo '<a href=\"../admin/usergroups.php\">'.\n                Display::return_icon('back.png', get_lang('BackTo').' '.get_lang('PlatformAdmin'), '', '32').\n                '</a>';\n        } else {\n            echo Display::url(\n                Display::return_icon('back.png', get_lang('BackTo').' '.get_lang('PlatformAdmin'), '', '32'),\n                api_get_path(WEB_CODE_PATH).'user/class.php?'.api_get_cidreq()\n            );\n        }\n\n        echo '</div>';\n        echo Display::grid_html('usergroups');\n    }\n\n    /**\n     * Get HTML grid.\n     */\n    public function display_teacher_view()\n    {\n        echo Display::grid_html('usergroups');\n    }\n\n    /**\n     * Gets a list of course ids by user group.\n     *\n     * @param int  $id             user group id\n     * @param bool $loadCourseData\n     *\n     * @return array\n     */\n    public function get_courses_by_usergroup($id, $loadCourseData = false)\n    {\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->usergroup_rel_course_table.\" c\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (a.usergroup_id = c.usergroup_id) \";\n            $whereConditionSql = 'a.usergroup_id = ? AND access_url_id = ? ';\n            $whereConditionValues = [$id, $urlId];\n        } else {\n            $whereConditionSql = 'usergroup_id = ?';\n            $whereConditionValues = [$id];\n            $from = $this->usergroup_rel_course_table.' c ';\n        }\n\n        if ($loadCourseData) {\n            $from .= \" INNER JOIN {$this->table_course} as course ON c.course_id = course.id\";\n        }\n\n        $where = ['where' => [$whereConditionSql => $whereConditionValues]];\n\n        $select = 'course_id';\n        if ($loadCourseData) {\n            $select = 'course.*';\n        }\n\n        $results = Database::select(\n            $select,\n            $from,\n            $where\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                if ($loadCourseData) {\n                    $array[$row['id']] = $row;\n                } else {\n                    $array[] = $row['course_id'];\n                }\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets all users that are part of a group or class.\n     *\n     * @param array $options\n     * @param int   $type    0 = classes / 1 = social groups\n     *\n     * @return array\n     */\n    public function getUserGroupInCourse($options = [], $type = -1, $getCount = false)\n    {\n        $select = 'DISTINCT u.*';\n        if ($getCount) {\n            $select = 'count(u.id) as count';\n        }\n\n        $sessionCheck = false;\n        if (isset($options['session_id']) && !empty($options['session_id'])) {\n            $sessionCheck = true;\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_course_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->table_course} c\n                        ON (usergroup.course_id = c.id)\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                   \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_session_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->session_table} s\n                        ON (usergroup.session_id = s.id)\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                   \";\n            }\n        } else {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_course_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->table_course} c\n                        ON (usergroup.course_id = c.id)\n                       \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_session_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->session_table} s\n                        ON (usergroup.session_id = s.id)\n                       \";\n            }\n        }\n\n        if (-1 != $type) {\n            $type = (int) $type;\n            $options['where']['AND group_type = ? '] = $type;\n        }\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options['where']['AND access_url_id = ? '] = $urlId;\n        }\n\n        $conditions = Database::parse_conditions($options);\n        $sql .= $conditions;\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return (int) $row['count'];\n            }\n\n            return 0;\n        }\n\n        $data = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $data[] = $row;\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param array $options\n     * @param int   $type\n     * @param bool  $getCount\n     *\n     * @return array|bool\n     */\n    public function getUserGroupNotInCourse($options = [], $type = -1, $getCount = false)\n    {\n        $courseId = 0;\n        if (isset($options['course_id'])) {\n            $courseId = (int) $options['course_id'];\n            unset($options['course_id']);\n        }\n\n        if (empty($courseId)) {\n            return false;\n        }\n\n        $select = 'DISTINCT u.*';\n        if ($getCount) {\n            $select = 'count(u.id) as count';\n        }\n\n        $sessionCheck = false;\n        $sessionId = 0;\n        if (isset($options['session_id']) && !empty($options['session_id'])) {\n            $sessionCheck = true;\n            $sessionId = (int) $options['session_id'];\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                        LEFT OUTER JOIN {$this->usergroup_rel_course_table} urc\n                        ON (u.id = urc.usergroup_id AND course_id = $courseId)\n                \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                        LEFT OUTER JOIN {$this->usergroup_rel_session_table} urs\n                        ON (u.id = urs.usergroup_id AND session_id = $sessionId)\n                \";\n            }\n        } else {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        LEFT OUTER JOIN {$this->usergroup_rel_course_table} urc\n                        ON (u.id = urc.usergroup_id AND course_id = $courseId)\n                \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        LEFT OUTER JOIN {$this->usergroup_rel_session_table} urc\n                        ON (u.id = urc.usergroup_id AND session_id = $sessionId)\n                \";\n            }\n        }\n\n        if (-1 != $type) {\n            $type = (int) $type;\n            $options['where']['AND group_type = ? '] = $type;\n        }\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options['where']['AND access_url_id = ? '] = $urlId;\n        }\n\n        /*if ($this->allowTeachers()) {\n            if (!api_is_platform_admin()) {\n                $userId = api_get_user_id();\n                $options['where']['AND author_id = ? '] = $userId;\n            }\n        }*/\n\n        $conditions = Database::parse_conditions($options);\n        $sql .= $conditions;\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $array = Database::fetch_array($result, 'ASSOC');\n\n                return $array['count'];\n            }\n\n            return 0;\n        }\n\n        $data = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $data[] = $row;\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param int $course_id\n     *\n     * @deprecated  ?\n     *\n     * @return array\n     */\n    public function get_usergroup_by_course($course_id)\n    {\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options = [\n                'where' => [\n                    'c.course_id = ? AND access_url_id = ?' => [\n                        $course_id,\n                        $urlId,\n                    ],\n                ],\n            ];\n            $from = \" $this->usergroup_rel_course_table as c\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON c.usergroup_id = a.usergroup_id \";\n        } else {\n            $options = ['where' => ['c.course_id = ?' => $course_id]];\n            $from = $this->usergroup_rel_course_table.\" c\";\n        }\n\n        $results = Database::select('c.usergroup_id', $from, $options);\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['usergroup_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param int $usergroup_id\n     * @param int $course_id\n     *\n     * @return bool\n     */\n    public function usergroup_was_added_in_course(\n        $usergroup_id,\n        $course_id,\n        $Session = 0\n    ) {\n        $Session = (int) $Session;\n\n        $results = Database::select(\n            'usergroup_id',\n            $this->usergroup_rel_course_table,\n            ['where' => ['course_id = ? AND usergroup_id = ?' => [$course_id, $usergroup_id]]]\n        );\n\n        $resultSession = Database::select(\n            'usergroup_id',\n            $this->usergroup_rel_session_table,\n            ['where' => ['session_id = ? AND usergroup_id = ?' => [$Session, $usergroup_id]]]\n        );\n\n        if (empty($results) && $Session == 0) {\n            return false;\n        }\n        if ((empty($resultSession)) && $Session != 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Gets a list of session ids by user group.\n     *\n     * @param int $id group id\n     *\n     * @return array\n     */\n    public function get_sessions_by_usergroup($id)\n    {\n        $results = Database::select(\n            'session_id',\n            $this->usergroup_rel_session_table,\n            ['where' => ['usergroup_id = ?' => $id]]\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['session_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets a list of user ids by user group.\n     *\n     * @param int   $id    user group id\n     * @param array $roles\n     *\n     * @return array with a list of user ids\n     */\n    public function get_users_by_usergroup($id = null, $roles = [])\n    {\n        $relationCondition = '';\n        if (!empty($roles)) {\n            $relationConditionArray = [];\n            foreach ($roles as $relation) {\n                $relation = (int) $relation;\n                if (empty($relation)) {\n                    $relationConditionArray[] = \" (relation_type = 0 OR relation_type IS NULL OR relation_type = '') \";\n                } else {\n                    $relationConditionArray[] = \" relation_type = $relation \";\n                }\n            }\n            $relationCondition = ' AND ( ';\n            $relationCondition .= implode('OR', $relationConditionArray);\n            $relationCondition .= ' ) ';\n        }\n\n        if (empty($id)) {\n            $conditions = [];\n        } else {\n            $conditions = ['where' => [\"usergroup_id = ? $relationCondition \" => $id]];\n        }\n\n        $results = Database::select(\n            'user_id',\n            $this->usergroup_rel_user_table,\n            $conditions\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['user_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets a list of user ids by user group.\n     *\n     * @param int $id       user group id\n     * @param int $relation\n     *\n     * @return array with a list of user ids\n     */\n    public function getUsersByUsergroupAndRelation($id, $relation = 0)\n    {\n        $relation = (int) $relation;\n        if (empty($relation)) {\n            $conditions = ['where' => ['usergroup_id = ? AND (relation_type = 0 OR relation_type IS NULL OR relation_type = \"\") ' => [$id]]];\n        } else {\n            $conditions = ['where' => ['usergroup_id = ? AND relation_type = ?' => [$id, $relation]]];\n        }\n\n        $results = Database::select(\n            'user_id',\n            $this->usergroup_rel_user_table,\n            $conditions\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['user_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Get the group list for a user.\n     *\n     * @param int $userId       The user ID\n     * @param int $filterByType Optional. The type of group\n     *\n     * @return array\n     */\n    public function getUserGroupListByUser($userId, $filterByType = null)\n    {\n        $userId = (int) $userId;\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->usergroup_rel_user_table.\" u\n                INNER JOIN {$this->access_url_rel_usergroup} a\n                ON (a.usergroup_id AND u.usergroup_id)\n                INNER JOIN {$this->table} g\n                ON (u.usergroup_id = g.id)\n                \";\n            $where = ['where' => ['user_id = ? AND access_url_id = ? ' => [$userId, $urlId]]];\n        } else {\n            $from = $this->usergroup_rel_user_table.\" u\n                INNER JOIN {$this->table} g\n                ON (u.usergroup_id = g.id)\n                \";\n            $where = ['where' => ['user_id = ?' => $userId]];\n        }\n\n        if (null !== $filterByType) {\n            $where['where'][' AND g.group_type = ?'] = (int) $filterByType;\n        }\n\n        $results = Database::select(\n            'g.*',\n            $from,\n            $where\n        );\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the usergroup id list by user id.\n     *\n     * @param int $userId user id\n     *\n     * @return array\n     */\n    public function get_usergroup_by_user($userId)\n    {\n        $userId = (int) $userId;\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->usergroup_rel_user_table.\" u\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (a.usergroup_id = u.usergroup_id) \";\n            $where = ['where' => ['user_id = ? AND access_url_id = ? ' => [$userId, $urlId]]];\n        } else {\n            $from = $this->usergroup_rel_user_table.' u ';\n            $where = ['where' => ['user_id = ?' => $userId]];\n        }\n\n        $results = Database::select(\n            'u.usergroup_id',\n            $from,\n            $where\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['usergroup_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Subscribes sessions to a group  (also adding the members of the group in the session and course).\n     *\n     * @param int   $usergroup_id          usergroup id\n     * @param array $list                  list of session ids\n     * @param bool  $deleteCurrentSessions Optional. Empty the session list for the usergroup (class)\n     */\n    public function subscribe_sessions_to_usergroup($usergroup_id, $list, $deleteCurrentSessions = true)\n    {\n        $current_list = $this->get_sessions_by_usergroup($usergroup_id);\n        $user_list = $this->get_users_by_usergroup($usergroup_id);\n\n        $delete_items = $new_items = [];\n        if (!empty($list)) {\n            foreach ($list as $session_id) {\n                if (!in_array($session_id, $current_list)) {\n                    $new_items[] = $session_id;\n                }\n            }\n        }\n        if ($deleteCurrentSessions) {\n            if (!empty($current_list)) {\n                foreach ($current_list as $session_id) {\n                    if (!in_array($session_id, $list)) {\n                        $delete_items[] = $session_id;\n                    }\n                }\n            }\n\n            // Deleting items\n            if (!empty($delete_items)) {\n                $sessions = '';\n                foreach ($delete_items as $session_id) {\n                    if (!api_get_configuration_value('usergroup_do_not_unsubscribe_users_from_session_on_session_unsubscribe')) {\n                        if (!empty($user_list)) {\n                            foreach ($user_list as $user_id) {\n                                SessionManager::unsubscribe_user_from_session($session_id, $user_id);\n                            }\n                        }\n                    }\n                    Database::delete(\n                        $this->usergroup_rel_session_table,\n                        ['usergroup_id = ? AND session_id = ?' => [$usergroup_id, $session_id]]\n                    );\n                    $sessions .= $session_id.',';\n                }\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_SESSION_UNSUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$usergroup_id.' - sids: '.substr($sessions, 0, -1),\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n\n        $sessions = '';\n        // Adding new relationships.\n        if (!empty($new_items)) {\n            foreach ($new_items as $session_id) {\n                $params = ['session_id' => $session_id, 'usergroup_id' => $usergroup_id];\n                Database::insert($this->usergroup_rel_session_table, $params);\n\n                if (!empty($user_list)) {\n                    SessionManager::subscribeUsersToSession(\n                        $session_id,\n                        $user_list,\n                        null,\n                        false\n                    );\n                    $sessions .= $session_id.',';\n                }\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_SESSION_SUBSCRIBED,\n                LOG_GROUP_PORTAL_ID,\n                'gid: '.$usergroup_id.' - sids: '.substr($sessions, 0, -1),\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n    }\n\n    /**\n     * Subscribes courses to a group (also adding the members of the group in the course).\n     *\n     * @param int   $usergroup_id  usergroup id\n     * @param array $list          list of course ids (integers)\n     * @param bool  $delete_groups\n     */\n    public function subscribe_courses_to_usergroup($usergroup_id, $list, $delete_groups = true)\n    {\n        $current_list = $this->get_courses_by_usergroup($usergroup_id);\n        $user_list = $this->get_users_by_usergroup($usergroup_id);\n\n        $delete_items = $new_items = [];\n        if (!empty($list)) {\n            foreach ($list as $id) {\n                if (!in_array($id, $current_list)) {\n                    $new_items[] = $id;\n                }\n            }\n        }\n\n        if (!empty($current_list)) {\n            foreach ($current_list as $id) {\n                if (!in_array($id, $list)) {\n                    $delete_items[] = $id;\n                }\n            }\n        }\n\n        if ($delete_groups) {\n            $this->unsubscribe_courses_from_usergroup($usergroup_id, $delete_items);\n        }\n\n        // Adding new relationships\n        if (!empty($new_items)) {\n            $courses = '';\n            foreach ($new_items as $course_id) {\n                $course_info = api_get_course_info_by_id($course_id);\n                if ($course_info) {\n                    if (!empty($user_list)) {\n                        $messageError = [];\n                        $messageOk = [];\n                        foreach ($user_list as $user_id) {\n                            $subscribed = CourseManager::subscribeUser(\n                                $user_id,\n                                $course_info['code'],\n                                STUDENT,\n                                0,\n                                0,\n                                true,\n                                false\n                            );\n                            $userInfo = api_get_user_info($user_id);\n                            if (!$subscribed) {\n                                $messageError[] = sprintf(\n                                    get_lang('UserXNotSubscribedToCourseX'),\n                                    $userInfo['complete_name_with_username'],\n                                    $course_info['title']\n                                );\n                            } else {\n                                $messageOk[] = sprintf(\n                                    get_lang('UserXAddedToCourseX'),\n                                    $userInfo['complete_name_with_username'],\n                                    $course_info['title']\n                                );\n                            }\n                        }\n                        if (!empty($messageError)) {\n                            $strMessagesError = implode('<br>', $messageError);\n                            Display::addFlash(\n                                Display::return_message(\n                                    $strMessagesError,\n                                    'error',\n                                    false\n                                )\n                            );\n                        }\n                        if (!empty($messageOk)) {\n                            $strMessagesOk = implode('<br>', $messageOk);\n                            Display::addFlash(\n                                Display::return_message(\n                                    $strMessagesOk,\n                                    'normal',\n                                    false\n                                )\n                            );\n                        }\n                    }\n                    $params = [\n                        'course_id' => $course_id,\n                        'usergroup_id' => $usergroup_id,\n                    ];\n                    Database::insert(\n                        $this->usergroup_rel_course_table,\n                        $params\n                    );\n                }\n                $courses .= $course_id.',';\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_COURSE_SUBSCRIBED,\n                LOG_GROUP_PORTAL_ID,\n                'gid: '.$usergroup_id.' - cids: '.substr($courses, 0, -1),\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n    }\n\n    /**\n     * @param int   $usergroup_id\n     * @param array $delete_items\n     */\n    public function unsubscribe_courses_from_usergroup($usergroup_id, $delete_items)\n    {\n        // Deleting items.\n        if (!empty($delete_items)) {\n            $user_list = $this->get_users_by_usergroup($usergroup_id);\n            $courses = '';\n            foreach ($delete_items as $course_id) {\n                $course_info = api_get_course_info_by_id($course_id);\n                if ($course_info) {\n                    if (!api_get_configuration_value('usergroup_do_not_unsubscribe_users_from_course_on_course_unsubscribe')) {\n                        if (!empty($user_list)) {\n                            foreach ($user_list as $user_id) {\n                                CourseManager::unsubscribe_user(\n                                    $user_id,\n                                    $course_info['code']\n                                );\n                            }\n                        }\n                    }\n                    Database::delete(\n                        $this->usergroup_rel_course_table,\n                        [\n                            'usergroup_id = ? AND course_id = ?' => [\n                                $usergroup_id,\n                                $course_id,\n                            ],\n                        ]\n                    );\n                    $courses .= $course_id.',';\n                }\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_COURSE_UNSUBSCRIBED,\n                LOG_GROUP_PORTAL_ID,\n                'gid: '.$usergroup_id.' - cids: '.substr($courses, 0, -1),\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n    }\n\n    /**\n     * Subscribe users to a group.\n     *\n     * @param int   $usergroup_id                     usergroup id\n     * @param array $list                             list of user ids\n     * @param bool  $delete_users_not_present_in_list\n     * @param int   $relationType\n     */\n    public function subscribe_users_to_usergroup(\n        $usergroup_id,\n        $list,\n        $delete_users_not_present_in_list = true,\n        $relationType = 0\n    ) {\n        $current_list = $this->get_users_by_usergroup($usergroup_id);\n        $course_list = $this->get_courses_by_usergroup($usergroup_id);\n        $session_list = $this->get_sessions_by_usergroup($usergroup_id);\n        $session_list = array_filter($session_list);\n        $relationType = (int) $relationType;\n\n        $delete_items = [];\n        $new_items = [];\n        if (!empty($list)) {\n            foreach ($list as $user_id) {\n                if (!in_array($user_id, $current_list)) {\n                    $new_items[] = $user_id;\n                }\n            }\n        }\n\n        if (!empty($current_list)) {\n            foreach ($current_list as $user_id) {\n                if (!in_array($user_id, $list)) {\n                    $delete_items[] = $user_id;\n                }\n            }\n        }\n\n        // Deleting items\n        if (!empty($delete_items) && $delete_users_not_present_in_list) {\n            foreach ($delete_items as $user_id) {\n                if (!api_get_configuration_value('usergroup_do_not_unsubscribe_users_from_course_nor_session_on_user_unsubscribe')) {\n                    // Removing courses\n                    if (!empty($course_list)) {\n                        foreach ($course_list as $course_id) {\n                            $course_info = api_get_course_info_by_id($course_id);\n                            CourseManager::unsubscribe_user($user_id, $course_info['code']);\n                        }\n                    }\n                    // Removing sessions\n                    if (!empty($session_list)) {\n                        foreach ($session_list as $session_id) {\n                            SessionManager::unsubscribe_user_from_session($session_id, $user_id);\n                        }\n                    }\n                }\n\n                if (empty($relationType)) {\n                    Database::delete(\n                        $this->usergroup_rel_user_table,\n                        [\n                            'usergroup_id = ? AND user_id = ? AND (relation_type = \"0\" OR relation_type IS NULL OR relation_type = \"\")' => [\n                                $usergroup_id,\n                                $user_id,\n                            ],\n                        ]\n                    );\n                } else {\n                    Database::delete(\n                        $this->usergroup_rel_user_table,\n                        [\n                            'usergroup_id = ? AND user_id = ? AND relation_type = ?' => [\n                                $usergroup_id,\n                                $user_id,\n                                $relationType,\n                            ],\n                        ]\n                    );\n                }\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_UNSUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$usergroup_id.' - uid: '.$user_id,\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n\n        // Adding new relationships\n        if (!empty($new_items)) {\n            // Adding sessions\n            if (!empty($session_list)) {\n                foreach ($session_list as $session_id) {\n                    SessionManager::subscribeUsersToSession($session_id, $new_items, null, false);\n                }\n            }\n\n            foreach ($new_items as $user_id) {\n                // Adding courses\n                if (!empty($course_list)) {\n                    $messageError = [];\n                    $messageOk = [];\n                    foreach ($course_list as $course_id) {\n                        $course_info = api_get_course_info_by_id($course_id);\n                        $subscribed = CourseManager::subscribeUser(\n                            $user_id,\n                            $course_info['code'],\n                            STUDENT,\n                            0,\n                            0,\n                            true,\n                            false\n                        );\n                        $userInfo = api_get_user_info($user_id);\n                        if (!$subscribed) {\n                            $messageError[] = sprintf(\n                                get_lang('UserXNotSubscribedToCourseX'),\n                                $userInfo['complete_name_with_username'],\n                                $course_info['title']\n                            );\n                        } else {\n                            $messageOk[] = sprintf(\n                                get_lang('UserXAddedToCourseX'),\n                                $userInfo['complete_name_with_username'],\n                                $course_info['title']\n                            );\n                        }\n                    }\n                    if (!empty($messageError)) {\n                        $strMessagesError = implode('<br>', $messageError);\n                        Display::addFlash(\n                            Display::return_message(\n                                $strMessagesError,\n                                'error',\n                                false\n                            )\n                        );\n                    }\n                    if (!empty($messageOk)) {\n                        $strMessagesOk = implode('<br>', $messageOk);\n                        Display::addFlash(\n                            Display::return_message(\n                                $strMessagesOk,\n                                'normal',\n                                false\n                            )\n                        );\n                    }\n                }\n                $params = [\n                    'user_id' => $user_id,\n                    'usergroup_id' => $usergroup_id,\n                    'relation_type' => $relationType,\n                ];\n                Database::insert($this->usergroup_rel_user_table, $params);\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_SUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$usergroup_id.' - uid: '.$user_id,\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return bool\n     */\n    public function usergroup_exists($name)\n    {\n        $name = Database::escape_string($name);\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT * FROM $this->table u\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (a.usergroup_id = u.id)\n                    WHERE name = '\".$name.\"' AND access_url_id = $urlId\";\n        } else {\n            $sql = \"SELECT * FROM $this->table WHERE name = '\".$name.\"'\";\n        }\n\n        $res = Database::query($sql);\n\n        return 0 != Database::num_rows($res);\n    }\n\n    /**\n     * @return bool\n     */\n    public function allowTeachers()\n    {\n        return true === api_get_configuration_value('allow_teachers_to_classes');\n    }\n\n    /**\n     * @param int    $sidx\n     * @param int    $sord\n     * @param int    $start\n     * @param int    $limit\n     * @param string $extraWhereCondition\n     *\n     * @return array\n     */\n    public function getUsergroupsPagination($sidx, $sord, $start, $limit, $extraWhereCondition = '')\n    {\n        $sord = in_array(strtolower($sord), ['asc', 'desc']) ? $sord : 'desc';\n\n        $start = (int) $start;\n        $limit = (int) $limit;\n\n        $sqlFrom = \"{$this->table} u \";\n        $sqlWhere = '1 = 1 ';\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sqlFrom .= \" INNER JOIN {$this->access_url_rel_usergroup} a ON (u.id = a.usergroup_id) \";\n            $sqlWhere .= \" AND a.access_url_id = $urlId \";\n        }\n\n        if ($this->allowTeachers()) {\n            if (!api_is_platform_admin()) {\n                $userId = api_get_user_id();\n                $sqlWhere .= \" AND author_id = $userId \";\n            }\n        }\n\n        if ($extraWhereCondition) {\n            $sqlWhere .= \" AND $extraWhereCondition \";\n        }\n\n        $result = Database::store_result(\n            Database::query(\"SELECT u.* FROM $sqlFrom WHERE $sqlWhere ORDER BY name $sord LIMIT $start, $limit\")\n        );\n\n        $new_result = [];\n        if (!empty($result)) {\n            foreach ($result as $group) {\n                $group['sessions'] = count($this->get_sessions_by_usergroup($group['id']));\n                $group['courses'] = count($this->get_courses_by_usergroup($group['id']));\n                $roles = [];\n                switch ($group['group_type']) {\n                    case 0:\n                        $group['group_type'] = Display::label(get_lang('Class'), 'info');\n                        $roles = [0];\n                        break;\n                    case 1:\n                        $group['group_type'] = Display::label(get_lang('Social'), 'success');\n                        $roles = [\n                            GROUP_USER_PERMISSION_ADMIN,\n                            GROUP_USER_PERMISSION_READER,\n                            GROUP_USER_PERMISSION_MODERATOR,\n                            GROUP_USER_PERMISSION_HRM,\n                        ];\n                        break;\n                }\n                $group['users'] = Display::url(\n                    count($this->get_users_by_usergroup($group['id'], $roles)),\n                    api_get_path(WEB_CODE_PATH).'admin/usergroup_users.php?id='.$group['id']\n                );\n                $new_result[] = $group;\n            }\n            $result = $new_result;\n        }\n        $columns = ['name', 'users', 'courses', 'sessions', 'group_type'];\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        // Multidimensional sort\n        $result = msort($result, $sidx, $sord);\n\n        return $result;\n    }\n\n    /**\n     * @param array $options\n     *\n     * @return array\n     */\n    public function getDataToExport($options = [])\n    {\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->table.\" u\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (u.id = a.usergroup_id)\";\n            $options = ['where' => ['access_url_id = ? ' => $urlId]];\n            if ($this->allowTeachers()) {\n                $options['where'] = [' author_id = ? ' => api_get_user_id()];\n            }\n            $classes = Database::select('u.id, name, description', $from, $options);\n        } else {\n            if ($this->allowTeachers()) {\n                $options['where'] = [' author_id = ? ' => api_get_user_id()];\n            }\n            $classes = Database::select('id, name, description', $this->table, $options);\n        }\n\n        $result = [];\n        if (!empty($classes)) {\n            foreach ($classes as $data) {\n                $users = $this->getUserListByUserGroup($data['id']);\n                $userToString = null;\n                if (!empty($users)) {\n                    $userNameList = [];\n                    foreach ($users as $userData) {\n                        $userNameList[] = $userData['username'];\n                    }\n                    $userToString = implode(',', $userNameList);\n                }\n\n                $courses = $this->get_courses_by_usergroup($data['id'], true);\n                $coursesToString = '';\n                if (!empty($courses)) {\n                    $coursesToString = implode(', ', array_column($courses, 'code'));\n                }\n\n                $sessions = $this->get_sessions_by_usergroup($data['id']);\n                $sessionsToString = '';\n                if (!empty($sessions)) {\n                    $sessionList = [];\n                    foreach ($sessions as $sessionId) {\n                        $sessionList[] = api_get_session_info($sessionId)['name'];\n                    }\n                    $sessionsToString = implode(', ', $sessionList);\n                }\n\n                $data['users'] = $userToString;\n                $data['courses'] = $coursesToString;\n                $data['sessions'] = $sessionsToString;\n                $result[] = $data;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param string $firstLetter\n     * @param int    $limit\n     *\n     * @return array\n     */\n    public function filterByFirstLetter($firstLetter, $limit = 0)\n    {\n        $firstLetter = Database::escape_string($firstLetter);\n        $limit = (int) $limit;\n\n        $sql = ' SELECT g.id, name ';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql .= \" FROM $this->table g\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON (g.id = a.usergroup_id) \";\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql = \" FROM $this->table g \";\n        }\n        $sql .= \"\n\t\t        WHERE\n\t\t            name LIKE '\".$firstLetter.\"%' OR\n\t\t            name LIKE '\".api_strtolower($firstLetter).\"%'\n\t\t            $urlCondition\n\t\t        ORDER BY name DESC \";\n\n        if (!empty($limit)) {\n            $sql .= \" LIMIT $limit \";\n        }\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * Select user group not in list.\n     *\n     * @param array $list\n     *\n     * @return array\n     */\n    public function getUserGroupNotInList($list)\n    {\n        if (empty($list)) {\n            return [];\n        }\n\n        $list = array_map('intval', $list);\n        $listToString = implode(\"','\", $list);\n        $sql = \"SELECT * FROM $this->table g WHERE g.id NOT IN ('$listToString')\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param $params\n     * @param bool $show_query\n     *\n     * @return bool|int\n     */\n    public function save($params, $show_query = false)\n    {\n        $params['updated_at'] = $params['created_at'] = api_get_utc_datetime();\n        $params['group_type'] = !empty($params['group_type']) ? self::SOCIAL_CLASS : self::NORMAL_CLASS;\n        $params['allow_members_leave_group'] = isset($params['allow_members_leave_group']) ? 1 : 0;\n\n        $groupExists = $this->usergroup_exists(trim($params['name']));\n        if (false == $groupExists) {\n            if ($this->allowTeachers()) {\n                $params['author_id'] = api_get_user_id();\n            }\n            $id = parent::save($params, $show_query);\n            if ($id) {\n                if ($this->getUseMultipleUrl()) {\n                    $this->subscribeToUrl($id, api_get_current_access_url_id());\n                }\n\n                if (self::SOCIAL_CLASS == $params['group_type']) {\n                    $this->add_user_to_group(\n                        api_get_user_id(),\n                        $id,\n                        GROUP_USER_PERMISSION_ADMIN\n                    );\n                }\n                $picture = isset($_FILES['picture']) ? $_FILES['picture'] : null;\n                $picture = $this->manageFileUpload($id, $picture);\n                if ($picture) {\n                    $params = [\n                        'id' => $id,\n                        'picture' => $picture,\n                        'group_type' => $params['group_type'],\n                    ];\n                    $this->update($params);\n                }\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_CREATED,\n                LOG_GROUP_PORTAL_ID,\n                'id: '.$id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n\n            return $id;\n        }\n\n        return false;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($values, $showQuery = false)\n    {\n        $values['updated_on'] = api_get_utc_datetime();\n        $values['group_type'] = !empty($values['group_type']) ? self::SOCIAL_CLASS : self::NORMAL_CLASS;\n        $values['allow_members_leave_group'] = isset($values['allow_members_leave_group']) ? 1 : 0;\n\n        if (isset($values['id'])) {\n            $picture = isset($_FILES['picture']) ? $_FILES['picture'] : null;\n            if (!empty($picture)) {\n                $picture = $this->manageFileUpload($values['id'], $picture);\n                if ($picture) {\n                    $values['picture'] = $picture;\n                }\n            }\n\n            if (isset($values['delete_picture'])) {\n                $values['picture'] = null;\n            }\n        }\n\n        parent::update($values, $showQuery);\n\n        if (isset($values['delete_picture'])) {\n            $this->delete_group_picture($values['id']);\n        }\n        // Add event to system log\n        Event::addEvent(\n            LOG_GROUP_PORTAL_UPDATED,\n            LOG_GROUP_PORTAL_ID,\n            'id: '.$values['id'],\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * @param int    $groupId\n     * @param string $picture\n     *\n     * @return bool|string\n     */\n    public function manageFileUpload($groupId, $picture)\n    {\n        if (!empty($picture['name'])) {\n            return $this->update_group_picture(\n                $groupId,\n                $picture['name'],\n                $picture['tmp_name']\n            );\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $groupId\n     *\n     * @return string\n     */\n    public function delete_group_picture($groupId)\n    {\n        return $this->update_group_picture($groupId);\n    }\n\n    /**\n     * Creates new group pictures in various sizes of a user, or deletes user pfotos.\n     * Note: This method relies on configuration setting from main/inc/conf/profile.conf.php.\n     *\n     * @param    int    The group id\n     * @param string $file The common file name for the newly created photos.\n     *                     It will be checked and modified for compatibility with the file system.\n     *                     If full name is provided, path component is ignored.\n     *                     If an empty name is provided, then old user photos are deleted only,\n     *\n     * @see UserManager::delete_user_picture() as the prefered way for deletion.\n     *\n     * @param string $source_file the full system name of the image from which user photos will be created\n     *\n     * @return mixed Returns the resulting common file name of created images which usually should be stored in database.\n     *               When an image is removed the function returns an empty string.\n     *               In case of internal error or negative validation it returns FALSE.\n     */\n    public function update_group_picture($group_id, $file = null, $source_file = null)\n    {\n        $group_id = (int) $group_id;\n\n        if (empty($group_id)) {\n            return false;\n        }\n        $delete = empty($file);\n        if (empty($source_file)) {\n            $source_file = $file;\n        }\n\n        // User-reserved directory where photos have to be placed.\n        $path_info = $this->get_group_picture_path_by_id($group_id, 'system', true);\n\n        $path = $path_info['dir'];\n\n        // If this directory does not exist - we create it.\n        if (!is_dir($path)) {\n            $res = @mkdir($path, api_get_permissions_for_new_directories(), true);\n            if ($res === false) {\n                // There was an issue creating the directory $path, probably\n                // permissions-related\n                return false;\n            }\n        }\n\n        // The old photos (if any).\n        $old_file = $path_info['file'];\n\n        // Let us delete them.\n        if (!empty($old_file)) {\n            if (KEEP_THE_OLD_IMAGE_AFTER_CHANGE) {\n                $prefix = 'saved_'.date('Y_m_d_H_i_s').'_'.uniqid('').'_';\n                @rename($path.'small_'.$old_file, $path.$prefix.'small_'.$old_file);\n                @rename($path.'medium_'.$old_file, $path.$prefix.'medium_'.$old_file);\n                @rename($path.'big_'.$old_file, $path.$prefix.'big_'.$old_file);\n                @rename($path.$old_file, $path.$prefix.$old_file);\n            } else {\n                @unlink($path.'small_'.$old_file);\n                @unlink($path.'medium_'.$old_file);\n                @unlink($path.'big_'.$old_file);\n                @unlink($path.$old_file);\n            }\n        }\n\n        // Exit if only deletion has been requested. Return an empty picture name.\n        if ($delete) {\n            return '';\n        }\n\n        // Validation 2.\n        $allowed_types = ['jpg', 'jpeg', 'png', 'gif'];\n        $file = str_replace('\\\\', '/', $file);\n        $filename = (($pos = strrpos($file, '/')) !== false) ? substr($file, $pos + 1) : $file;\n        $extension = strtolower(substr(strrchr($filename, '.'), 1));\n        if (!in_array($extension, $allowed_types)) {\n            return false;\n        }\n\n        // This is the common name for the new photos.\n        if (KEEP_THE_NAME_WHEN_CHANGE_IMAGE && !empty($old_file)) {\n            $old_extension = strtolower(substr(strrchr($old_file, '.'), 1));\n            $filename = in_array($old_extension, $allowed_types) ? substr($old_file, 0, -strlen($old_extension)) : $old_file;\n            $filename = (substr($filename, -1) == '.') ? $filename.$extension : $filename.'.'.$extension;\n        } else {\n            $filename = api_replace_dangerous_char($filename);\n            if (PREFIX_IMAGE_FILENAME_WITH_UID) {\n                $filename = uniqid('').'_'.$filename;\n            }\n            // We always prefix user photos with user ids, so on setting\n            // api_get_setting('split_users_upload_directory') === 'true'\n            // the correspondent directories to be found successfully.\n            $filename = $group_id.'_'.$filename;\n        }\n\n        // Storing the new photos in 4 versions with various sizes.\n\n        /*$image->resize(\n        // get original size and set width (widen) or height (heighten).\n        // width or height will be set maintaining aspect ratio.\n            $image->getSize()->widen( 700 )\n        );*/\n\n        // Usign the Imagine service\n        $imagine = new Imagine\\Gd\\Imagine();\n        $image = $imagine->open($source_file);\n\n        $options = [\n            'quality' => 90,\n        ];\n\n        //$image->resize(new Imagine\\Image\\Box(200, 200))->save($path.'big_'.$filename);\n        $image->resize($image->getSize()->widen(200))->save($path.'big_'.$filename, $options);\n\n        $image = $imagine->open($source_file);\n        $image->resize(new Imagine\\Image\\Box(85, 85))->save($path.'medium_'.$filename, $options);\n\n        $image = $imagine->open($source_file);\n        $image->resize(new Imagine\\Image\\Box(22, 22))->save($path.'small_'.$filename);\n\n        /*\n        $small  = self::resize_picture($source_file, 22);\n        $medium = self::resize_picture($source_file, 85);\n        $normal = self::resize_picture($source_file, 200);\n\n        $big = new Image($source_file); // This is the original picture.\n        $ok = $small && $small->send_image($path.'small_'.$filename)\n            && $medium && $medium->send_image($path.'medium_'.$filename)\n            && $normal && $normal->send_image($path.'big_'.$filename)\n            && $big && $big->send_image($path.$filename);\n        return $ok ? $filename : false;*/\n        return $filename;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getGroupType()\n    {\n        return $this->groupType;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool|void\n     */\n    public function delete($id)\n    {\n        $id = (int) $id;\n        if ($this->getUseMultipleUrl()) {\n            $this->unsubscribeToUrl($id, api_get_current_access_url_id());\n        }\n\n        $sql = \"DELETE FROM $this->usergroup_rel_user_table\n                WHERE usergroup_id = $id\";\n        Database::query($sql);\n\n        $sql = \"DELETE FROM $this->usergroup_rel_course_table\n                WHERE usergroup_id = $id\";\n        Database::query($sql);\n\n        $sql = \"DELETE FROM $this->usergroup_rel_session_table\n                WHERE usergroup_id = $id\";\n        Database::query($sql);\n\n        parent::delete($id);\n        // Add event to system log\n        Event::addEvent(\n            LOG_GROUP_PORTAL_DELETED,\n            LOG_GROUP_PORTAL_ID,\n            'id: '.$id,\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n    }\n\n    /**\n     * @param int $id\n     * @param int $urlId\n     */\n    public function subscribeToUrl($id, $urlId)\n    {\n        Database::insert(\n            $this->access_url_rel_usergroup,\n            [\n                'access_url_id' => $urlId,\n                'usergroup_id' => $id,\n            ]\n        );\n    }\n\n    /**\n     * @param int $id\n     * @param int $urlId\n     */\n    public function unsubscribeToUrl($id, $urlId)\n    {\n        Database::delete(\n            $this->access_url_rel_usergroup,\n            [\n                'access_url_id = ? AND usergroup_id = ? ' => [$urlId, $id],\n            ]\n        );\n    }\n\n    /**\n     * @param $needle\n     *\n     * @return xajaxResponse\n     */\n    public static function searchUserGroupAjax($needle)\n    {\n        $response = new xajaxResponse();\n        $return = '';\n\n        if (!empty($needle)) {\n            // xajax send utf8 datas... datas in db can be non-utf8 datas\n            $charset = api_get_system_encoding();\n            $needle = api_convert_encoding($needle, $charset, 'utf-8');\n            $needle = Database::escape_string($needle);\n\n            $sql = 'SELECT id, name\n                    FROM '.Database::get_main_table(TABLE_USERGROUP).' u\n                    WHERE name LIKE \"'.$needle.'%\"\n                    ORDER BY name\n                    LIMIT 11';\n            $result = Database::query($sql);\n            $i = 0;\n            while ($data = Database::fetch_array($result)) {\n                $i++;\n                if ($i <= 10) {\n                    $return .= '<a\n                    href=\"javascript: void(0);\"\n                    onclick=\"javascript: add_user_to_url(\\''.addslashes($data['id']).'\\',\\''.addslashes($data['name']).' \\')\">'.$data['name'].' </a><br />';\n                } else {\n                    $return .= '...<br />';\n                }\n            }\n        }\n        $response->addAssign('ajax_list_courses', 'innerHTML', api_utf8_encode($return));\n\n        return $response;\n    }\n\n    /**\n     * Get user list by usergroup.\n     *\n     * @param int    $id\n     * @param string $orderBy\n     *\n     * @return array\n     */\n    public function getUserListByUserGroup($id, $orderBy = '')\n    {\n        $id = (int) $id;\n        $sql = \"SELECT u.* FROM $this->table_user u\n                INNER JOIN $this->usergroup_rel_user_table c\n                ON c.user_id = u.id\n                WHERE c.usergroup_id = $id\"\n                ;\n\n        if (!empty($orderBy)) {\n            $orderBy = Database::escape_string($orderBy);\n            $sql .= \" ORDER BY $orderBy \";\n        }\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param FormValidator $form\n     * @param string        $type\n     * @param array         $data\n     */\n    public function setForm($form, $type = 'add', $data = [])\n    {\n        $header = '';\n        switch ($type) {\n            case 'add':\n                $header = get_lang('Add');\n                break;\n            case 'edit':\n                $header = get_lang('Edit');\n                break;\n        }\n\n        $form->addHeader($header);\n\n        // Name\n        $form->addElement('text', 'name', get_lang('Name'), ['maxlength' => 255]);\n        $form->applyFilter('name', 'trim');\n\n        $form->addRule('name', get_lang('ThisFieldIsRequired'), 'required');\n        $form->addRule('name', '', 'maxlength', 255);\n\n        // Description\n        $form->addTextarea('description', get_lang('Description'), ['cols' => 58]);\n        $form->applyFilter('description', 'trim');\n\n        if ($this->showGroupTypeSetting) {\n            $form->addElement(\n                'checkbox',\n                'group_type',\n                null,\n                get_lang('SocialGroup')\n            );\n        }\n\n        // url\n        $form->addElement('text', 'url', get_lang('Url'));\n        $form->applyFilter('url', 'trim');\n\n        // Picture\n        $allowed_picture_types = $this->getAllowedPictureExtensions();\n\n        $form->addElement('file', 'picture', get_lang('AddPicture'));\n        $form->addRule(\n            'picture',\n            get_lang('OnlyImagesAllowed').' ('.implode(',', $allowed_picture_types).')',\n            'filetype',\n            $allowed_picture_types\n        );\n\n        if (isset($data['picture']) && strlen($data['picture']) > 0) {\n            $picture = $this->get_picture_group($data['id'], $data['picture'], 80);\n            $img = '<img src=\"'.$picture['file'].'\" />';\n            $form->addElement('label', null, $img);\n            $form->addElement('checkbox', 'delete_picture', '', get_lang('DelImage'));\n        }\n\n        $form->addElement('select', 'visibility', get_lang('GroupPermissions'), $this->getGroupStatusList());\n        $form->setRequiredNote('<span class=\"form_required\">*</span> <small>'.get_lang('ThisFieldIsRequired').'</small>');\n        $form->addElement('checkbox', 'allow_members_leave_group', '', get_lang('AllowMemberLeaveGroup'));\n\n        // Setting the form elements\n        if ($type === 'add') {\n            $form->addButtonCreate($header);\n        } else {\n            $form->addButtonUpdate($header);\n        }\n    }\n\n    /**\n     * Gets the current group image.\n     *\n     * @param string $id group id\n     * @param string picture group name\n     * @param string height\n     * @param string $size_picture picture size it can be small_,  medium_  or  big_\n     * @param string style css\n     *\n     * @return array with the file and the style of an image i.e $array['file'] $array['style']\n     */\n    public function get_picture_group(\n        $id,\n        $picture_file,\n        $height,\n        $size_picture = GROUP_IMAGE_SIZE_MEDIUM,\n        $style = ''\n    ) {\n        $picture = [];\n        if ($picture_file === 'unknown.jpg') {\n            $picture['file'] = Display::returnIconPath($picture_file);\n\n            return $picture;\n        }\n\n        switch ($size_picture) {\n            case GROUP_IMAGE_SIZE_ORIGINAL:\n                $size_picture = '';\n                break;\n            case GROUP_IMAGE_SIZE_BIG:\n                $size_picture = 'big_';\n                break;\n            case GROUP_IMAGE_SIZE_MEDIUM:\n                $size_picture = 'medium_';\n                break;\n            case GROUP_IMAGE_SIZE_SMALL:\n                $size_picture = 'small_';\n                break;\n            default:\n                $size_picture = 'medium_';\n        }\n\n        $image_array_sys = $this->get_group_picture_path_by_id($id, 'system', false, true);\n        $image_array = $this->get_group_picture_path_by_id($id, 'web', false, true);\n        $file = $image_array_sys['dir'].$size_picture.$picture_file;\n        if (file_exists($file)) {\n            $picture['file'] = $image_array['dir'].$size_picture.$picture_file;\n            if ($height > 0) {\n                $dimension = api_getimagesize($picture['file']);\n                $margin = ($height - $dimension['width']) / 2;\n                //@ todo the padding-top should not be here\n            }\n        } else {\n            $file = $image_array_sys['dir'].$picture_file;\n            if (file_exists($file) && !is_dir($file)) {\n                $picture['file'] = $image_array['dir'].$picture_file;\n            } else {\n                $picture['file'] = Display::returnIconPath('group_na.png', 64);\n            }\n        }\n\n        return $picture;\n    }\n\n    /**\n     * Gets the group picture URL or path from group ID (returns an array).\n     * The return format is a complete path, enabling recovery of the directory\n     * with dirname() or the file with basename(). This also works for the\n     * functions dealing with the user's productions, as they are located in\n     * the same directory.\n     *\n     * @param    int    User ID\n     * @param    string    Type of path to return (can be 'none', 'system', 'rel', 'web')\n     * @param    bool    Whether we want to have the directory name returned 'as if'\n     * there was a file or not (in the case we want to know which directory to create -\n     * otherwise no file means no split subdir)\n     * @param    bool    If we want that the function returns the /main/img/unknown.jpg image set it at true\n     *\n     * @return array Array of 2 elements: 'dir' and 'file' which contain the dir\n     *               and file as the name implies if image does not exist it will return the unknown\n     *               image if anonymous parameter is true if not it returns an empty er's\n     */\n    public function get_group_picture_path_by_id($id, $type = 'none', $preview = false, $anonymous = false)\n    {\n        switch ($type) {\n            case 'system': // Base: absolute system path.\n                $base = api_get_path(SYS_UPLOAD_PATH);\n                break;\n            case 'rel': // Base: semi-absolute web path (no server base).\n                $base = api_get_path(REL_CODE_PATH);\n                break;\n            case 'web': // Base: absolute web path.\n                $base = api_get_path(WEB_UPLOAD_PATH);\n                break;\n            case 'none':\n            default: // Base: empty, the result path below will be relative.\n                $base = '';\n        }\n        $id = (int) $id;\n\n        if (empty($id) || empty($type)) {\n            return $anonymous ? ['dir' => $base.'img/', 'file' => 'unknown.jpg'] : ['dir' => '', 'file' => ''];\n        }\n\n        $group_table = Database::get_main_table(TABLE_USERGROUP);\n        $sql = \"SELECT picture FROM $group_table WHERE id = \".$id;\n        $res = Database::query($sql);\n\n        if (!Database::num_rows($res)) {\n            return $anonymous ? ['dir' => $base.'img/', 'file' => 'unknown.jpg'] : ['dir' => '', 'file' => ''];\n        }\n        $user = Database::fetch_array($res);\n        $picture_filename = trim($user['picture']);\n\n        if (api_get_setting('split_users_upload_directory') === 'true') {\n            if (!empty($picture_filename)) {\n                $dir = $base.'groups/'.substr($picture_filename, 0, 1).'/'.$id.'/';\n            } elseif ($preview) {\n                $dir = $base.'groups/'.substr((string) $id, 0, 1).'/'.$id.'/';\n            } else {\n                $dir = $base.'groups/'.$id.'/';\n            }\n        } else {\n            $dir = $base.'groups/'.$id.'/';\n        }\n\n        return ['dir' => $dir, 'file' => $picture_filename];\n    }\n\n    /**\n     * @return array\n     */\n    public function getAllowedPictureExtensions()\n    {\n        return ['jpg', 'jpeg', 'png', 'gif'];\n    }\n\n    /**\n     * @return array\n     */\n    public function getGroupStatusList()\n    {\n        $status = [\n            GROUP_PERMISSION_OPEN => get_lang('Open'),\n            GROUP_PERMISSION_CLOSED => get_lang('Closed'),\n        ];\n\n        return $status;\n    }\n\n    /**\n     * @param int $type\n     */\n    public function setGroupType($type)\n    {\n        $this->groupType = (int) $type;\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function is_group_admin($group_id, $user_id = 0)\n    {\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n        $user_role = $this->get_user_group_role($user_id, $group_id);\n        if (in_array($user_role, [GROUP_USER_PERMISSION_ADMIN])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function isGroupModerator($group_id, $user_id = 0)\n    {\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n        $user_role = $this->get_user_group_role($user_id, $group_id);\n        if (in_array($user_role, [GROUP_USER_PERMISSION_ADMIN, GROUP_USER_PERMISSION_MODERATOR])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function is_group_member($group_id, $user_id = 0)\n    {\n        if (api_is_platform_admin()) {\n            return true;\n        }\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n        $roles = [\n            GROUP_USER_PERMISSION_ADMIN,\n            GROUP_USER_PERMISSION_MODERATOR,\n            GROUP_USER_PERMISSION_READER,\n            GROUP_USER_PERMISSION_HRM,\n        ];\n        $user_role = $this->get_user_group_role($user_id, $group_id);\n        if (in_array($user_role, $roles)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Gets the relationship between a group and a User.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $user_id\n     * @param int $group_id\n     *\n     * @return int 0 if there are not relationship otherwise returns the user group\n     * */\n    public function get_user_group_role($user_id, $group_id)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $return_value = 0;\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n\n        if (!empty($user_id) && !empty($group_id)) {\n            $sql = \"SELECT relation_type\n                    FROM $table_group_rel_user\n                    WHERE\n                        usergroup_id = $group_id AND\n                        user_id = $user_id \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result) > 0) {\n                $row = Database::fetch_array($result, 'ASSOC');\n                $return_value = $row['relation_type'];\n            }\n        }\n\n        return $return_value;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $groupId\n     *\n     * @return string\n     */\n    public function getUserRoleToString($userId, $groupId)\n    {\n        $role = $this->get_user_group_role($userId, $groupId);\n        $roleToString = '';\n\n        switch ($role) {\n            case GROUP_USER_PERMISSION_ADMIN:\n                $roleToString = get_lang('Admin');\n                break;\n            case GROUP_USER_PERMISSION_READER:\n                $roleToString = get_lang('Reader');\n                break;\n            case GROUP_USER_PERMISSION_PENDING_INVITATION:\n                $roleToString = get_lang('PendingInvitation');\n                break;\n            case GROUP_USER_PERMISSION_MODERATOR:\n                $roleToString = get_lang('Moderator');\n                break;\n            case GROUP_USER_PERMISSION_HRM:\n                $roleToString = get_lang('Drh');\n                break;\n        }\n\n        return $roleToString;\n    }\n\n    /**\n     * Add a group of users into a group of URLs.\n     *\n     * @author Julio Montoya\n     *\n     * @param array $user_list\n     * @param array $group_list\n     * @param int   $relation_type\n     *\n     * @return array\n     */\n    public function add_users_to_groups($user_list, $group_list, $relation_type = GROUP_USER_PERMISSION_READER)\n    {\n        $table_url_rel_group = $this->usergroup_rel_user_table;\n        $result_array = [];\n        $relation_type = (int) $relation_type;\n\n        if (is_array($user_list) && is_array($group_list)) {\n            foreach ($group_list as $group_id) {\n                $usersList = '';\n                foreach ($user_list as $user_id) {\n                    $user_id = (int) $user_id;\n                    $group_id = (int) $group_id;\n\n                    $role = $this->get_user_group_role($user_id, $group_id);\n                    if ($role == 0) {\n                        $sql = \"INSERT INTO $table_url_rel_group\n\t\t               \t\t\tSET\n\t\t               \t\t\t    user_id = $user_id ,\n\t\t               \t\t\t    usergroup_id = $group_id ,\n\t\t               \t\t\t    relation_type = $relation_type \";\n\n                        $result = Database::query($sql);\n                        if ($result) {\n                            $result_array[$group_id][$user_id] = 1;\n                        } else {\n                            $result_array[$group_id][$user_id] = 0;\n                        }\n                    }\n                    $usersList .= $user_id.',';\n                }\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_SUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$group_id.' - uids: '.substr($usersList, 0, -1),\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n\n        return $result_array;\n    }\n\n    /**\n     * Deletes an url and session relationship.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $userId\n     * @param int $groupId\n     *\n     * @return bool true if success\n     * */\n    public function delete_user_rel_group($userId, $groupId)\n    {\n        $userId = (int) $userId;\n        $groupId = (int) $groupId;\n        if (empty($userId) || empty($groupId)) {\n            return false;\n        }\n\n        $table = $this->usergroup_rel_user_table;\n        $sql = \"DELETE FROM $table\n                WHERE\n                    user_id = $userId AND\n                    usergroup_id = $groupId\";\n\n        $result = Database::query($sql);\n        // Add event to system log\n        Event::addEvent(\n            LOG_GROUP_PORTAL_USER_UNSUBSCRIBED,\n            LOG_GROUP_PORTAL_ID,\n            'gid: '.$groupId.' - uid: '.$userId,\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n\n        return $result;\n    }\n\n    /**\n     * Add a user into a group.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $user_id\n     * @param int $group_id\n     * @param int $relation_type\n     *\n     * @return bool true if success\n     */\n    public function add_user_to_group($user_id, $group_id, $relation_type = GROUP_USER_PERMISSION_READER)\n    {\n        $table_url_rel_group = $this->usergroup_rel_user_table;\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n        $relation_type = (int) $relation_type;\n        if (!empty($user_id) && !empty($group_id)) {\n            $role = $this->get_user_group_role($user_id, $group_id);\n\n            if ($role == 0) {\n                $sql = \"INSERT INTO $table_url_rel_group\n           \t\t\t\tSET\n           \t\t\t\t    user_id = \".$user_id.\",\n           \t\t\t\t    usergroup_id = \".$group_id.\",\n           \t\t\t\t    relation_type = \".$relation_type;\n                Database::query($sql);\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_SUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$group_id.' - uid: '.$user_id,\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            } elseif ($role == GROUP_USER_PERMISSION_PENDING_INVITATION) {\n                //if somebody already invited me I can be added\n                self::update_user_role($user_id, $group_id, GROUP_USER_PERMISSION_READER);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates the group_rel_user table  with a given user and group ids.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $user_id\n     * @param int $group_id\n     * @param int $relation_type\n     */\n    public function update_user_role($user_id, $group_id, $relation_type = GROUP_USER_PERMISSION_READER)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $group_id = (int) $group_id;\n        $user_id = (int) $user_id;\n        $relation_type = (int) $relation_type;\n\n        $sql = \"UPDATE $table_group_rel_user\n   \t\t\t\tSET relation_type = $relation_type\n                WHERE user_id = $user_id AND usergroup_id = $group_id\";\n        Database::query($sql);\n    }\n\n    /**\n     * Gets the inner join from users and group table.\n     *\n     * @return array Database::store_result of the result\n     *\n     * @author Julio Montoya\n     * */\n    public function get_groups_by_user($user_id, $relationType = GROUP_USER_PERMISSION_READER, $with_image = false)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n        $user_id = (int) $user_id;\n\n        if ($relationType == 0) {\n            $relationCondition = '';\n        } else {\n            if (is_array($relationType)) {\n                $relationType = array_map('intval', $relationType);\n                $relationType = implode(\"','\", $relationType);\n                $relationCondition = \" AND ( gu.relation_type IN ('$relationType')) \";\n            } else {\n                $relationType = (int) $relationType;\n                $relationCondition = \" AND gu.relation_type = $relationType \";\n            }\n        }\n\n        $sql = 'SELECT\n                    g.picture,\n                    g.name,\n                    g.description,\n                    g.id ,\n                    gu.relation_type';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN \".$this->access_url_rel_usergroup.\" a\n                    ON (g.id = a.usergroup_id)\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n            $urlId = api_get_current_access_url_id();\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n        }\n\n        $sql .= \" WHERE\n\t\t\t\t    g.group_type = \".self::SOCIAL_CLASS.\" AND\n                    gu.user_id = $user_id\n                    $relationCondition\n                    $urlCondition\n                ORDER BY created_at DESC \";\n        $result = Database::query($sql);\n        $array = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                if ($with_image) {\n                    $picture = $this->get_picture_group($row['id'], $row['picture'], 80);\n                    $img = '<img src=\"'.$picture['file'].'\" />';\n                    $row['picture'] = $img;\n                }\n                $array[$row['id']] = $row;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the inner join of users and group table.\n     *\n     * @param int  quantity of records\n     * @param bool show groups with image or not\n     *\n     * @return array with group content\n     *\n     * @author Julio Montoya\n     * */\n    public function get_groups_by_popularity($num = 6, $with_image = true)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n        if (empty($num)) {\n            $num = 6;\n        } else {\n            $num = (int) $num;\n        }\n        // only show admins and readers\n        $whereCondition = \" WHERE\n                              g.group_type = \".self::SOCIAL_CLASS.\" AND\n                              gu.relation_type IN\n                              ('\".GROUP_USER_PERMISSION_ADMIN.\"' , '\".GROUP_USER_PERMISSION_READER.\"', '\".GROUP_USER_PERMISSION_HRM.\"') \";\n\n        $sql = 'SELECT DISTINCT count(user_id) as count, g.picture, g.name, g.description, g.id ';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN \".$this->access_url_rel_usergroup.\" a\n                    ON (g.id = a.usergroup_id)\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n            $urlId = api_get_current_access_url_id();\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n        }\n\n        $sql .= \"\n\t\t\t\t$whereCondition\n\t\t\t\t$urlCondition\n\t\t\t\tGROUP BY g.id\n\t\t\t\tORDER BY count DESC\n\t\t\t\tLIMIT $num\";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            if ($with_image) {\n                $picture = $this->get_picture_group($row['id'], $row['picture'], 80);\n                $img = '<img src=\"'.$picture['file'].'\" />';\n                $row['picture'] = $img;\n            }\n            if (empty($row['id'])) {\n                continue;\n            }\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the last groups created.\n     *\n     * @param int  $num       quantity of records\n     * @param bool $withImage show groups with image or not\n     *\n     * @return array with group content\n     *\n     * @author Julio Montoya\n     * */\n    public function get_groups_by_age($num = 6, $withImage = true)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n\n        if (empty($num)) {\n            $num = 6;\n        } else {\n            $num = (int) $num;\n        }\n\n        $where = \" WHERE\n                        g.group_type = \".self::SOCIAL_CLASS.\" AND\n                        gu.relation_type IN\n                        ('\".GROUP_USER_PERMISSION_ADMIN.\"' ,\n                        '\".GROUP_USER_PERMISSION_READER.\"',\n                        '\".GROUP_USER_PERMISSION_MODERATOR.\"',\n                        '\".GROUP_USER_PERMISSION_HRM.\"')\n                    \";\n        $sql = 'SELECT DISTINCT\n                  count(user_id) as count,\n                  g.picture,\n                  g.name,\n                  g.description,\n                  g.id ';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN \".$this->access_url_rel_usergroup.\" a\n                    ON (g.id = a.usergroup_id)\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n            $urlId = api_get_current_access_url_id();\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n        }\n        $sql .= \"\n                $where\n                $urlCondition\n                GROUP BY g.id\n                ORDER BY created_at DESC\n                LIMIT $num \";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            if ($withImage) {\n                $picture = $this->get_picture_group($row['id'], $row['picture'], 80);\n                $img = '<img src=\"'.$picture['file'].'\" />';\n                $row['picture'] = $img;\n            }\n            if (empty($row['id'])) {\n                continue;\n            }\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the group's members.\n     *\n     * @param int group id\n     * @param bool show image or not of the group\n     * @param array list of relation type use constants\n     * @param int from value\n     * @param int limit\n     * @param array image configuration, i.e array('height'=>'20px', 'size'=> '20px')\n     *\n     * @return array list of users in a group\n     */\n    public function get_users_by_group(\n        $group_id,\n        $withImage = false,\n        $relation_type = [],\n        $from = null,\n        $limit = null\n    ) {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $group_id = (int) $group_id;\n\n        if (empty($group_id)) {\n            return [];\n        }\n\n        $limit_text = '';\n        if (isset($from) && isset($limit)) {\n            $from = (int) $from;\n            $limit = (int) $limit;\n            $limit_text = \"LIMIT $from, $limit\";\n        }\n\n        if (count($relation_type) == 0) {\n            $where_relation_condition = '';\n        } else {\n            $new_relation_type = [];\n            foreach ($relation_type as $rel) {\n                $rel = (int) $rel;\n                $new_relation_type[] = \"'$rel'\";\n            }\n            $relation_type = implode(',', $new_relation_type);\n            if (!empty($relation_type)) {\n                $where_relation_condition = \"AND gu.relation_type IN ($relation_type) \";\n            }\n        }\n\n        $sql = \"SELECT\n                    picture_uri as image,\n                    u.id,\n                    CONCAT (u.firstname,' ', u.lastname) as fullname,\n                    relation_type\n    \t\t    FROM $tbl_user u\n    \t\t    INNER JOIN $table_group_rel_user gu\n    \t\t\tON (gu.user_id = u.id)\n    \t\t\tWHERE\n    \t\t\t    gu.usergroup_id= $group_id\n    \t\t\t    $where_relation_condition\n    \t\t\tORDER BY relation_type, firstname\n    \t\t\t$limit_text\";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            if ($withImage) {\n                $userInfo = api_get_user_info($row['id']);\n                $userPicture = UserManager::getUserPicture($row['id']);\n                $row['image'] = '<img src=\"'.$userPicture.'\"  />';\n                $row['user_info'] = $userInfo;\n            }\n\n            $row['user_id'] = $row['id'];\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets all the members of a group no matter the relationship for\n     * more specifications use get_users_by_group.\n     *\n     * @param int group id\n     *\n     * @return array\n     */\n    public function get_all_users_by_group($group_id)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $group_id = (int) $group_id;\n\n        if (empty($group_id)) {\n            return [];\n        }\n\n        $sql = \"SELECT u.id, u.firstname, u.lastname, relation_type\n                FROM $tbl_user u\n\t\t\t    INNER JOIN $table_group_rel_user gu\n\t\t\t    ON (gu.user_id = u.id)\n\t\t\t    WHERE gu.usergroup_id= $group_id\n\t\t\t    ORDER BY relation_type, firstname\";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Shows the left column of the group page.\n     *\n     * @param int    $group_id\n     * @param int    $user_id\n     * @param string $show\n     *\n     * @return string\n     */\n    public function show_group_column_information($group_id, $user_id, $show = '')\n    {\n        $html = '';\n        $group_info = $this->get($group_id);\n\n        //my relation with the group is set here\n        $my_group_role = $this->get_user_group_role($user_id, $group_id);\n\n        // Loading group permission\n        $links = '';\n        switch ($my_group_role) {\n            case GROUP_USER_PERMISSION_READER:\n                // I'm just a reader\n                $relation_group_title = get_lang('IAmAReader');\n                $links .= '<li class=\"'.($show == 'invite_friends' ? 'active' : '').'\"><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                if (self::canLeave($group_info)) {\n                    $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                        Display::return_icon('group_leave.png', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                }\n                break;\n            case GROUP_USER_PERMISSION_ADMIN:\n                $relation_group_title = get_lang('IAmAnAdmin');\n                $links .= '<li class=\"'.($show == 'group_edit' ? 'active' : '').'\"><a href=\"group_edit.php?id='.$group_id.'\">'.\n                            Display::return_icon('group_edit.png', get_lang('EditGroup')).get_lang('EditGroup').'</a></li>';\n                $links .= '<li class=\"'.($show == 'member_list' ? 'active' : '').'\"><a href=\"group_waiting_list.php?id='.$group_id.'\">'.\n                            Display::return_icon('waiting_list.png', get_lang('WaitingList')).get_lang('WaitingList').'</a></li>';\n                $links .= '<li class=\"'.($show == 'invite_friends' ? 'active' : '').'\"><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                if (self::canLeave($group_info)) {\n                    $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                        Display::return_icon('group_leave.png', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                }\n                break;\n            case GROUP_USER_PERMISSION_PENDING_INVITATION:\n//\t\t\t\t$links .=  '<li><a href=\"groups.php?id='.$group_id.'&action=join&u='.api_get_user_id().'\">'.Display::return_icon('addd.gif', get_lang('YouHaveBeenInvitedJoinNow'), array('hspace'=>'6')).'<span class=\"social-menu-text4\" >'.get_lang('YouHaveBeenInvitedJoinNow').'</span></a></li>';\n                break;\n            case GROUP_USER_PERMISSION_PENDING_INVITATION_SENT_BY_USER:\n                $relation_group_title = get_lang('WaitingForAdminResponse');\n                break;\n            case GROUP_USER_PERMISSION_MODERATOR:\n                $relation_group_title = get_lang('IAmAModerator');\n                //$links .=  '<li><a href=\"'.api_get_path(WEB_CODE_PATH).'social/message_for_group_form.inc.php?view_panel=1&height=400&width=610&&user_friend='.api_get_user_id().'&group_id='.$group_id.'&action=add_message_group\" class=\"thickbox\" title=\"'.get_lang('ComposeMessage').'\">'.Display::return_icon('compose_message.png', get_lang('NewTopic'), array('hspace'=>'6')).'<span class=\"social-menu-text4\" >'.get_lang('NewTopic').'</span></a></li>';\n                //$links .=  '<li><a href=\"groups.php?id='.$group_id.'\">'.\t\t\t\tDisplay::return_icon('message_list.png', get_lang('MessageList'), array('hspace'=>'6')).'<span class=\"'.($show=='messages_list'?'social-menu-text-active':'social-menu-text4').'\" >'.get_lang('MessageList').'</span></a></li>';\n                //$links .=  '<li><a href=\"group_members.php?id='.$group_id.'\">'.\t\tDisplay::return_icon('member_list.png', get_lang('MemberList'), array('hspace'=>'6')).'<span class=\"'.($show=='member_list'?'social-menu-text-active':'social-menu-text4').'\" >'.get_lang('MemberList').'</span></a></li>';\n                if ($group_info['visibility'] == GROUP_PERMISSION_CLOSED) {\n                    $links .= '<li><a href=\"group_waiting_list.php?id='.$group_id.'\">'.\n                                Display::return_icon('waiting_list.png', get_lang('WaitingList')).get_lang('WaitingList').'</a></li>';\n                }\n                $links .= '<li><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                if (self::canLeave($group_info)) {\n                    $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                        Display::return_icon('group_leave.png', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                }\n                break;\n            case GROUP_USER_PERMISSION_HRM:\n                $relation_group_title = get_lang('IAmAHRM');\n                $links .= '<li><a href=\"'.api_get_path(WEB_CODE_PATH).'social/message_for_group_form.inc.php?view_panel=1&height=400&width=610&&user_friend='.api_get_user_id().'&group_id='.$group_id.'&action=add_message_group\" class=\"ajax\" title=\"'.get_lang('ComposeMessage').'\" data-size=\"lg\" data-title=\"'.get_lang('ComposeMessage').'\">'.\n                            Display::return_icon('new-message.png', get_lang('NewTopic')).get_lang('NewTopic').'</a></li>';\n                $links .= '<li><a href=\"group_view.php?id='.$group_id.'\">'.\n                            Display::return_icon('message_list.png', get_lang('MessageList')).get_lang('MessageList').'</a></li>';\n                $links .= '<li><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                $links .= '<li><a href=\"group_members.php?id='.$group_id.'\">'.\n                            Display::return_icon('member_list.png', get_lang('MemberList')).get_lang('MemberList').'</a></li>';\n                $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                            Display::return_icon('delete_data.gif', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                break;\n            default:\n                //$links .=  '<li><a href=\"groups.php?id='.$group_id.'&action=join&u='.api_get_user_id().'\">'.Display::return_icon('addd.gif', get_lang('JoinGroup'), array('hspace'=>'6')).'<span class=\"social-menu-text4\" >'.get_lang('JoinGroup').'</a></span></li>';\n                break;\n        }\n        if (!empty($links)) {\n            $list = '<ul class=\"nav nav-pills\">';\n            $list .= $links;\n            $list .= '</ul>';\n            $html .= Display::panelCollapse(\n                get_lang('SocialGroups'),\n                $list,\n                'sm-groups',\n                [],\n                'groups-acordeon',\n                'groups-collapse'\n            );\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $topic_id\n     */\n    public function delete_topic($group_id, $topic_id)\n    {\n        $table_message = Database::get_main_table(TABLE_MESSAGE);\n        $topic_id = (int) $topic_id;\n        $group_id = (int) $group_id;\n\n        $sql = \"UPDATE $table_message SET\n                    msg_status = 3\n                WHERE\n                    group_id = $group_id AND\n                    (id = '$topic_id' OR parent_id = $topic_id)\n                \";\n        Database::query($sql);\n    }\n\n    /**\n     * @param string $user_id\n     * @param string $relation_type\n     * @param bool   $with_image\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function get_groups_by_user_count(\n        $user_id = '',\n        $relation_type = GROUP_USER_PERMISSION_READER,\n        $with_image = false\n    ) {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n        $user_id = intval($user_id);\n\n        if ($relation_type == 0) {\n            $where_relation_condition = '';\n        } else {\n            $relation_type = intval($relation_type);\n            $where_relation_condition = \"AND gu.relation_type = $relation_type \";\n        }\n\n        $sql = \"SELECT count(g.id) as count\n\t\t\t\tFROM $tbl_group g\n\t\t\t\tINNER JOIN $table_group_rel_user gu\n\t\t\t\tON gu.usergroup_id = g.id\n\t\t\t\tWHERE gu.user_id = $user_id $where_relation_condition \";\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            return $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param string $tag\n     * @param int    $from\n     * @param int    $number_of_items\n     *\n     * @return array\n     */\n    public function get_all_group_tags($tag = '', $from = 0, $number_of_items = 10, $getCount = false)\n    {\n        $group_table = $this->table;\n        $tag = Database::escape_string($tag);\n        $from = (int) $from;\n        $number_of_items = (int) $number_of_items;\n        $return = [];\n\n        $keyword = $tag;\n        $sql = 'SELECT  g.id, g.name, g.description, g.url, g.picture ';\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql .= \" FROM $this->table g\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON (g.id = a.usergroup_id)\";\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $group_table g\";\n        }\n        if (isset($keyword)) {\n            $sql .= \" WHERE (\n                        g.name LIKE '%\".$keyword.\"%' OR\n                        g.description LIKE '%\".$keyword.\"%' OR\n                        g.url LIKE '%\".$keyword.\"%'\n                     ) $urlCondition\n                     \";\n        } else {\n            $sql .= \" WHERE 1 = 1 $urlCondition \";\n        }\n\n        $direction = 'ASC';\n        if (!in_array($direction, ['ASC', 'DESC'])) {\n            $direction = 'ASC';\n        }\n\n        $from = (int) $from;\n        $number_of_items = (int) $number_of_items;\n        $sql .= \" LIMIT $from, $number_of_items\";\n\n        $res = Database::query($sql);\n        if (Database::num_rows($res) > 0) {\n            while ($row = Database::fetch_array($res, 'ASSOC')) {\n                if (!in_array($row['id'], $return)) {\n                    $return[$row['id']] = $row;\n                }\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     * @param int $group_id\n     *\n     * @return array\n     */\n    public static function get_parent_groups($group_id)\n    {\n        $t_rel_group = Database::get_main_table(TABLE_USERGROUP_REL_USERGROUP);\n        $group_id = (int) $group_id;\n\n        $max_level = 10;\n        $select_part = 'SELECT ';\n        $cond_part = '';\n        for ($i = 1; $i <= $max_level; $i++) {\n            $rg_number = $i - 1;\n            if ($i == $max_level) {\n                $select_part .= \"rg$rg_number.group_id as id_$rg_number \";\n            } else {\n                $select_part .= \"rg$rg_number.group_id as id_$rg_number, \";\n            }\n            if ($i == 1) {\n                $cond_part .= \"FROM $t_rel_group rg0\n                               LEFT JOIN $t_rel_group rg$i\n                               ON rg$rg_number.group_id = rg$i.subgroup_id \";\n            } else {\n                $cond_part .= \" LEFT JOIN $t_rel_group rg$i\n                                ON rg$rg_number.group_id = rg$i.subgroup_id \";\n            }\n        }\n        $sql = $select_part.' '.$cond_part.\"WHERE rg0.subgroup_id='$group_id'\";\n        $res = Database::query($sql);\n        $temp_arr = Database::fetch_array($res, 'NUM');\n        $toReturn = [];\n        if (is_array($temp_arr)) {\n            foreach ($temp_arr as $elt) {\n                if (isset($elt)) {\n                    $toReturn[] = $elt;\n                }\n            }\n        }\n\n        return $toReturn;\n    }\n\n    /**\n     * Get the group member list by a user and his group role.\n     *\n     * @param int  $userId                The user ID\n     * @param int  $relationType          Optional. The relation type. GROUP_USER_PERMISSION_ADMIN by default\n     * @param bool $includeSubgroupsUsers Optional. Whether include the users from subgroups\n     *\n     * @return array\n     */\n    public function getGroupUsersByUser(\n        $userId,\n        $relationType = GROUP_USER_PERMISSION_ADMIN,\n        $includeSubgroupsUsers = true\n    ) {\n        $userId = (int) $userId;\n        $groups = $this->get_groups_by_user($userId, $relationType);\n        $groupsId = array_keys($groups);\n        $subgroupsId = [];\n        $userIdList = [];\n\n        if ($includeSubgroupsUsers) {\n            foreach ($groupsId as $groupId) {\n                $subgroupsId = array_merge($subgroupsId, self::getGroupsByDepthLevel($groupId));\n            }\n\n            $groupsId = array_merge($groupsId, $subgroupsId);\n        }\n\n        $groupsId = array_unique($groupsId);\n\n        if (empty($groupsId)) {\n            return [];\n        }\n\n        foreach ($groupsId as $groupId) {\n            $groupUsers = $this->get_users_by_group($groupId);\n\n            if (empty($groupUsers)) {\n                continue;\n            }\n\n            foreach ($groupUsers as $member) {\n                if ($member['user_id'] == $userId) {\n                    continue;\n                }\n\n                $userIdList[] = (int) $member['user_id'];\n            }\n        }\n\n        return array_unique($userIdList);\n    }\n\n    /**\n     * Get the subgroups ID from a group.\n     * The default $levels value is 10 considering it as a extensive level of depth.\n     *\n     * @param int $groupId The parent group ID\n     * @param int $levels  The depth levels\n     *\n     * @return array The list of ID\n     */\n    public static function getGroupsByDepthLevel($groupId, $levels = 10)\n    {\n        $groups = [];\n        $groupId = (int) $groupId;\n\n        $groupTable = Database::get_main_table(TABLE_USERGROUP);\n        $groupRelGroupTable = Database::get_main_table(TABLE_USERGROUP_REL_USERGROUP);\n\n        $select = 'SELECT ';\n        $from = \"FROM $groupTable g1 \";\n\n        for ($i = 1; $i <= $levels; $i++) {\n            $tableIndexNumber = $i;\n            $tableIndexJoinNumber = $i - 1;\n            $select .= \"g$i.id as id_$i \";\n            $select .= $i != $levels ? ', ' : null;\n\n            if ($i == 1) {\n                $from .= \" INNER JOIN $groupRelGroupTable gg0\n                           ON g1.id = gg0.subgroup_id and gg0.group_id = $groupId \";\n            } else {\n                $from .= \"LEFT JOIN $groupRelGroupTable gg$tableIndexJoinNumber \";\n                $from .= \" ON g$tableIndexJoinNumber.id = gg$tableIndexJoinNumber.group_id \";\n                $from .= \"LEFT JOIN $groupTable g$tableIndexNumber \";\n                $from .= \" ON gg$tableIndexJoinNumber.subgroup_id = g$tableIndexNumber.id \";\n            }\n        }\n\n        $result = Database::query(\"$select $from\");\n\n        while ($item = Database::fetch_assoc($result)) {\n            foreach ($item as $myGroupId) {\n                if (!empty($myGroupId)) {\n                    $groups[] = $myGroupId;\n                }\n            }\n        }\n\n        return array_map('intval', $groups);\n    }\n\n    /**\n     * Set a parent group.\n     *\n     * @param int $group_id\n     * @param int $parent_group_id if 0, we delete the parent_group association\n     * @param int $relation_type\n     *\n     * @return \\Doctrine\\DBAL\\Statement\n     */\n    public function setParentGroup($group_id, $parent_group_id, $relation_type = 1)\n    {\n        $table = Database::get_main_table(TABLE_USERGROUP_REL_USERGROUP);\n        $group_id = (int) $group_id;\n        $parent_group_id = (int) $parent_group_id;\n        if ($parent_group_id == 0) {\n            $sql = \"DELETE FROM $table WHERE subgroup_id = $group_id\";\n        } else {\n            $sql = \"SELECT group_id FROM $table WHERE subgroup_id = $group_id\";\n            $res = Database::query($sql);\n            if (Database::num_rows($res) == 0) {\n                $sql = \"INSERT INTO $table SET\n                        group_id = $parent_group_id,\n                        subgroup_id = $group_id,\n                        relation_type = $relation_type\";\n            } else {\n                $sql = \"UPDATE $table SET\n                        group_id = $parent_group_id,\n                        relation_type = $relation_type\n                        WHERE subgroup_id = $group_id\";\n            }\n        }\n        $res = Database::query($sql);\n\n        return $res;\n    }\n\n    /**\n     * Filter the groups/classes info to get a name list only.\n     *\n     * @param int $userId       The user ID\n     * @param int $filterByType Optional. The type of group\n     *\n     * @return array\n     */\n    public function getNameListByUser($userId, $filterByType = null)\n    {\n        $userClasses = $this->getUserGroupListByUser($userId, $filterByType);\n\n        return array_column($userClasses, 'name');\n    }\n\n    /**\n     * Get the HTML necessary for display the groups/classes name list.\n     *\n     * @param int $userId       The user ID\n     * @param int $filterByType Optional. The type of group\n     *\n     * @return string\n     */\n    public function getLabelsFromNameList($userId, $filterByType = null)\n    {\n        $groupsNameListParsed = $this->getNameListByUser($userId, $filterByType);\n\n        if (empty($groupsNameListParsed)) {\n            return '';\n        }\n\n        $nameList = '<ul class=\"list-unstyled\">';\n        foreach ($groupsNameListParsed as $name) {\n            $nameList .= '<li>'.Display::span($name, ['class' => 'label label-info']).'</li>';\n        }\n\n        $nameList .= '</ul>';\n\n        return $nameList;\n    }\n\n    /**\n     * @param array $groupInfo\n     *\n     * @return bool\n     */\n    public static function canLeave($groupInfo)\n    {\n        return $groupInfo['allow_members_leave_group'] == 1 ? true : false;\n    }\n\n    /**\n     * Check permissions and blocks the page.\n     *\n     * @param array $userGroupInfo\n     * @param bool  $checkAuthor\n     * @param bool  $checkCourseIsAllow\n     */\n    public function protectScript($userGroupInfo = [], $checkAuthor = true, $checkCourseIsAllow = false)\n    {\n        api_block_anonymous_users();\n\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        if ($checkCourseIsAllow) {\n            if (api_is_allowed_to_edit()) {\n                return true;\n            }\n        }\n\n        if ($this->allowTeachers() && api_is_teacher()) {\n            if ($checkAuthor && !empty($userGroupInfo)) {\n                if (isset($userGroupInfo['author_id']) && $userGroupInfo['author_id'] != api_get_user_id()) {\n                    api_not_allowed(true);\n                }\n            }\n\n            return true;\n        } else {\n            api_protect_admin_script(true);\n            api_protect_limit_for_session_admin();\n        }\n    }\n\n    public function getGroupsByLp($lpId, $courseId, $sessionId)\n    {\n        $lpId = (int) $lpId;\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n        $sessionCondition = api_get_session_condition($sessionId, true);\n        $table = Database::get_course_table(TABLE_LP_REL_USERGROUP);\n        $sql = \"SELECT usergroup_id FROM $table\n                WHERE\n                    c_id = $courseId AND\n                    lp_id = $lpId\n                    $sessionCondition\n                    \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    public function getGroupsByLpCategory($categoryId, $courseId, $sessionId)\n    {\n        $categoryId = (int) $categoryId;\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n        $sessionCondition = api_get_session_condition($sessionId, true);\n\n        $table = Database::get_course_table(TABLE_LP_CATEGORY_REL_USERGROUP);\n        $sql = \"SELECT usergroup_id FROM $table\n                WHERE\n                    c_id = $courseId AND\n                    lp_category_id = $categoryId\n                    $sessionCondition\n                \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\n/**\n * Class UserGroup.\n *\n * This class provides methods for the UserGroup management.\n * Include/require it in your code to use its features.\n */\nclass UserGroup extends Model\n{\n    public const SOCIAL_CLASS = 1;\n    public const NORMAL_CLASS = 0;\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'group_type',\n        'picture',\n        'url',\n        'allow_members_leave_group',\n        'visibility',\n        'updated_at',\n        'created_at',\n    ];\n\n    public $useMultipleUrl = false;\n    public $groupType = 0;\n    public $showGroupTypeSetting = false;\n    public $usergroup_rel_user_table;\n    public $usergroup_rel_course_table;\n    public $usergroup;\n    public $usergroup_rel_session_table;\n    public $session_table;\n    public $access_url_rel_usergroup;\n    public $session_rel_course_table;\n    public $access_url_rel_user;\n    public $table_course;\n    public $table_user;\n\n    /**\n     * Set ups DB tables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->table = Database::get_main_table(TABLE_USERGROUP);\n        $this->usergroup_rel_user_table = Database::get_main_table(TABLE_USERGROUP_REL_USER);\n        $this->usergroup_rel_course_table = Database::get_main_table(TABLE_USERGROUP_REL_COURSE);\n        $this->usergroup_rel_session_table = Database::get_main_table(TABLE_USERGROUP_REL_SESSION);\n        $this->session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $this->usergroup_table = Database::get_main_table(TABLE_USERGROUP);\n        $this->access_url_rel_usergroup = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USERGROUP);\n        $this->session_rel_course_table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $this->access_url_rel_user = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $this->table_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $this->table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $this->useMultipleUrl = api_get_configuration_value('multiple_access_urls');\n        if ($this->allowTeachers()) {\n            $this->columns[] = 'author_id';\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public function getUseMultipleUrl()\n    {\n        return $this->useMultipleUrl;\n    }\n\n    /**\n     * @return int\n     */\n    public function getTotalCount()\n    {\n        $options = [];\n        $from = $this->table;\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options = [\n                'where' => [\n                    'access_url_id = ?' => [\n                        $urlId,\n                    ],\n                ],\n            ];\n            $from = \" $this->table u\n                      INNER JOIN $this->access_url_rel_usergroup a\n                      ON (u.id = a.usergroup_id) \";\n        }\n        $row = Database::select('count(*) as count', $from, $options, 'first');\n\n        return $row['count'];\n    }\n\n    /**\n     * @param int  $id       user group id\n     * @param bool $getCount\n     *\n     * @return array|int\n     */\n    public function getUserGroupUsers($id, $getCount = false, $start = 0, $limit = 0)\n    {\n        $id = (int) $id;\n        $start = (int) $start;\n        $limit = (int) $limit;\n\n        $select = ' u.* ';\n        if ($getCount) {\n            $select = 'COUNT(u.id) count ';\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT $select\n                    FROM $this->usergroup_rel_user_table u\n                    INNER JOIN $this->access_url_rel_user a\n                    ON (u.user_id = a.user_id)\n                    WHERE u.usergroup_id = $id AND access_url_id = $urlId \";\n        } else {\n            $sql = \"SELECT $select\n                    FROM $this->usergroup_rel_user_table u\n                    WHERE u.usergroup_id = $id\";\n        }\n        $limitCondition = '';\n        if (!empty($start) && !empty($limit)) {\n            $limitCondition = \" LIMIT $start, $limit\";\n        }\n\n        $sql .= $limitCondition;\n\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n\n            return 0;\n        } else {\n            $list = [];\n            $showCalendar = 'true' === api_get_plugin_setting('learning_calendar', 'enabled');\n            $calendarPlugin = null;\n            if ($showCalendar) {\n                $calendarPlugin = LearningCalendarPlugin::create();\n            }\n            $url = api_get_path(WEB_PLUGIN_PATH).'learning_calendar/calendar.php?';\n            while ($data = Database::fetch_array($result)) {\n                $userId = $data['user_id'];\n                $userInfo = api_get_user_info($userId);\n                $data['name'] = $userInfo['complete_name_with_username'];\n\n                if ($showCalendar) {\n                    $calendar = $calendarPlugin->getUserCalendar($userId);\n                    $data['calendar_id'] = 0;\n                    $data['calendar'] = '';\n                    if (!empty($calendar)) {\n                        $calendarInfo = $calendarPlugin->getCalendar($calendar['calendar_id']);\n                        if ($calendarInfo) {\n                            $data['calendar_id'] = $calendar['calendar_id'];\n                            $data['calendar'] = Display::url(\n                                $calendarInfo['title'],\n                                $url.'&id='.$calendar['calendar_id']\n                            );\n                        }\n                    }\n\n                    $courseAndSessionList = Tracking::showUserProgress(\n                        $userId,\n                        0,\n                        '',\n                        true,\n                        true,\n                        true\n                    );\n\n                    $stats = $calendarPlugin->getUserStats($userId, $courseAndSessionList);\n                    $evaluations = $calendarPlugin->getGradebookEvaluationListToString($userId, $courseAndSessionList);\n                    $data['gradebook_items'] = $evaluations;\n                    $totalTime = 0;\n                    foreach ($courseAndSessionList as $sessionId => $course) {\n                        foreach ($course as $courseId) {\n                            $totalTime += Tracking::get_time_spent_on_the_course($userId, $courseId, $sessionId);\n                        }\n                    }\n\n                    $data['time_spent'] = api_time_to_hms($totalTime);\n                    $data['lp_day_completed'] = $stats['completed'];\n                    $data['days_diff'] = $stats['completed'] - $stats['user_event_count'];\n                }\n                $data['id'] = $data['user_id'];\n                $list[] = $data;\n            }\n\n            return $list;\n        }\n    }\n\n    /**\n     * @param string $extraWhereCondition\n     *\n     * @return int\n     */\n    public function get_count($extraWhereCondition = '')\n    {\n        $authorCondition = '';\n\n        if ($this->allowTeachers()) {\n            if (!api_is_platform_admin()) {\n                $userId = api_get_user_id();\n                $authorCondition = \" AND author_id = $userId\";\n            }\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT count(u.id) as count\n                    FROM $this->table u\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON (u.id = a.usergroup_id)\n                    WHERE access_url_id = $urlId $authorCondition\n                    AND $extraWhereCondition\n            \";\n\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n        } else {\n            $sql = \"SELECT count(a.id) as count\n                    FROM {$this->table} a\n                    WHERE 1 = 1\n                    $authorCondition\n                    AND $extraWhereCondition\n            \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param int $course_id\n     * @param int $type\n     *\n     * @return mixed\n     */\n    public function getUserGroupByCourseWithDataCount($course_id, $type = -1)\n    {\n        if ($this->getUseMultipleUrl()) {\n            $course_id = (int) $course_id;\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT count(c.usergroup_id) as count\n                    FROM {$this->usergroup_rel_course_table} c\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (c.usergroup_id = a.usergroup_id)\n                    WHERE access_url_id = $urlId AND course_id = $course_id\n            \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n\n            return 0;\n        } else {\n            $typeCondition = '';\n            if ($type != -1) {\n                $type = (int) $type;\n                $typeCondition = \" AND group_type = $type \";\n            }\n            $sql = \"SELECT count(c.usergroup_id) as count\n                    FROM {$this->usergroup_rel_course_table} c\n                    INNER JOIN {$this->table} a\n                    ON (c.usergroup_id = a.id)\n                    WHERE\n                        course_id = $course_id\n                        $typeCondition\n            \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return $row['count'];\n            }\n\n            return 0;\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return int\n     */\n    public function getIdByName($name)\n    {\n        $row = Database::select(\n            'id',\n            $this->table,\n            ['where' => ['name = ?' => $name]],\n            'first'\n        );\n\n        if ($row) {\n            return (int) $row['id'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function returnGrid()\n    {\n        // action links\n        $html = '<div class=\"actions\">';\n        if (api_is_platform_admin()) {\n            $html .= '<a href=\"../admin/index.php\">'.\n                Display::return_icon(\n                    'back.png',\n                    get_lang('BackTo').' '.get_lang('PlatformAdmin'),\n                    '',\n                    ICON_SIZE_MEDIUM\n                ).\n                '</a>';\n        }\n\n        $html .= '<a href=\"'.api_get_self().'?action=add\">'.\n            Display::return_icon('new_class.png', get_lang('AddClasses'), '', ICON_SIZE_MEDIUM).\n            '</a>';\n        $html .= Display::url(\n            Display::return_icon('import_csv.png', get_lang('Import'), [], ICON_SIZE_MEDIUM),\n            'usergroup_import.php'\n        );\n        $html .= Display::url(\n            Display::return_icon('export_csv.png', get_lang('Export'), [], ICON_SIZE_MEDIUM),\n            'usergroup_export.php'\n        );\n        $html .= '</div>';\n        $html .= Display::grid_html('usergroups');\n\n        return $html;\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function displayToolBarUserGroupUsers()\n    {\n        // action links\n        echo '<div class=\"actions\">';\n        $courseInfo = api_get_course_info();\n        if (empty($courseInfo)) {\n            echo '<a href=\"../admin/usergroups.php\">'.\n                Display::return_icon('back.png', get_lang('BackTo').' '.get_lang('PlatformAdmin'), '', '32').\n                '</a>';\n        } else {\n            echo Display::url(\n                Display::return_icon('back.png', get_lang('BackTo').' '.get_lang('PlatformAdmin'), '', '32'),\n                api_get_path(WEB_CODE_PATH).'user/class.php?'.api_get_cidreq()\n            );\n        }\n\n        echo '</div>';\n        echo Display::grid_html('usergroups');\n    }\n\n    /**\n     * Get HTML grid.\n     */\n    public function display_teacher_view()\n    {\n        echo Display::grid_html('usergroups');\n    }\n\n    /**\n     * Gets a list of course ids by user group.\n     *\n     * @param int  $id             user group id\n     * @param bool $loadCourseData\n     *\n     * @return array\n     */\n    public function get_courses_by_usergroup($id, $loadCourseData = false)\n    {\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->usergroup_rel_course_table.\" c\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (a.usergroup_id = c.usergroup_id) \";\n            $whereConditionSql = 'a.usergroup_id = ? AND access_url_id = ? ';\n            $whereConditionValues = [$id, $urlId];\n        } else {\n            $whereConditionSql = 'usergroup_id = ?';\n            $whereConditionValues = [$id];\n            $from = $this->usergroup_rel_course_table.' c ';\n        }\n\n        if ($loadCourseData) {\n            $from .= \" INNER JOIN {$this->table_course} as course ON c.course_id = course.id\";\n        }\n\n        $where = ['where' => [$whereConditionSql => $whereConditionValues]];\n\n        $select = 'course_id';\n        if ($loadCourseData) {\n            $select = 'course.*';\n        }\n\n        $results = Database::select(\n            $select,\n            $from,\n            $where\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                if ($loadCourseData) {\n                    $array[$row['id']] = $row;\n                } else {\n                    $array[] = $row['course_id'];\n                }\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets all users that are part of a group or class.\n     *\n     * @param array $options\n     * @param int   $type    0 = classes / 1 = social groups\n     *\n     * @return array\n     */\n    public function getUserGroupInCourse($options = [], $type = -1, $getCount = false)\n    {\n        $select = 'DISTINCT u.*';\n        if ($getCount) {\n            $select = 'count(u.id) as count';\n        }\n\n        $sessionCheck = false;\n        if (isset($options['session_id']) && !empty($options['session_id'])) {\n            $sessionCheck = true;\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_course_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->table_course} c\n                        ON (usergroup.course_id = c.id)\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                   \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_session_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->session_table} s\n                        ON (usergroup.session_id = s.id)\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                   \";\n            }\n        } else {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_course_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->table_course} c\n                        ON (usergroup.course_id = c.id)\n                       \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->usergroup_rel_session_table} usergroup\n                        INNER JOIN {$this->table} u\n                        ON (u.id = usergroup.usergroup_id)\n                        INNER JOIN {$this->session_table} s\n                        ON (usergroup.session_id = s.id)\n                       \";\n            }\n        }\n\n        if (-1 != $type) {\n            $type = (int) $type;\n            $options['where']['AND group_type = ? '] = $type;\n        }\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options['where']['AND access_url_id = ? '] = $urlId;\n        }\n\n        $conditions = Database::parse_conditions($options);\n        $sql .= $conditions;\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            if (Database::num_rows($result)) {\n                $row = Database::fetch_array($result);\n\n                return (int) $row['count'];\n            }\n\n            return 0;\n        }\n\n        $data = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $data[] = $row;\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param array $options\n     * @param int   $type\n     * @param bool  $getCount\n     *\n     * @return array|bool\n     */\n    public function getUserGroupNotInCourse($options = [], $type = -1, $getCount = false)\n    {\n        $courseId = 0;\n        if (isset($options['course_id'])) {\n            $courseId = (int) $options['course_id'];\n            unset($options['course_id']);\n        }\n\n        if (empty($courseId)) {\n            return false;\n        }\n\n        $select = 'DISTINCT u.*';\n        if ($getCount) {\n            $select = 'count(u.id) as count';\n        }\n\n        $sessionCheck = false;\n        $sessionId = 0;\n        if (isset($options['session_id']) && !empty($options['session_id'])) {\n            $sessionCheck = true;\n            $sessionId = (int) $options['session_id'];\n        }\n\n        if ($this->getUseMultipleUrl()) {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                        LEFT OUTER JOIN {$this->usergroup_rel_course_table} urc\n                        ON (u.id = urc.usergroup_id AND course_id = $courseId)\n                \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        INNER JOIN {$this->access_url_rel_usergroup} a\n                        ON (a.usergroup_id = u.id)\n                        LEFT OUTER JOIN {$this->usergroup_rel_session_table} urs\n                        ON (u.id = urs.usergroup_id AND session_id = $sessionId)\n                \";\n            }\n        } else {\n            if (false === $sessionCheck) {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        LEFT OUTER JOIN {$this->usergroup_rel_course_table} urc\n                        ON (u.id = urc.usergroup_id AND course_id = $courseId)\n                \";\n            } else {\n                $sql = \"SELECT $select\n                        FROM {$this->table} u\n                        LEFT OUTER JOIN {$this->usergroup_rel_session_table} urc\n                        ON (u.id = urc.usergroup_id AND session_id = $sessionId)\n                \";\n            }\n        }\n\n        if (-1 != $type) {\n            $type = (int) $type;\n            $options['where']['AND group_type = ? '] = $type;\n        }\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options['where']['AND access_url_id = ? '] = $urlId;\n        }\n\n        /*if ($this->allowTeachers()) {\n            if (!api_is_platform_admin()) {\n                $userId = api_get_user_id();\n                $options['where']['AND author_id = ? '] = $userId;\n            }\n        }*/\n\n        $conditions = Database::parse_conditions($options);\n        $sql .= $conditions;\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                $array = Database::fetch_array($result, 'ASSOC');\n\n                return $array['count'];\n            }\n\n            return 0;\n        }\n\n        $data = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $data[] = $row;\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param int $course_id\n     *\n     * @deprecated  ?\n     *\n     * @return array\n     */\n    public function get_usergroup_by_course($course_id)\n    {\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $options = [\n                'where' => [\n                    'c.course_id = ? AND access_url_id = ?' => [\n                        $course_id,\n                        $urlId,\n                    ],\n                ],\n            ];\n            $from = \" $this->usergroup_rel_course_table as c\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON c.usergroup_id = a.usergroup_id \";\n        } else {\n            $options = ['where' => ['c.course_id = ?' => $course_id]];\n            $from = $this->usergroup_rel_course_table.\" c\";\n        }\n\n        $results = Database::select('c.usergroup_id', $from, $options);\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['usergroup_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param int $usergroup_id\n     * @param int $course_id\n     *\n     * @return bool\n     */\n    public function usergroup_was_added_in_course(\n        $usergroup_id,\n        $course_id,\n        $Session = 0\n    ) {\n        $Session = (int) $Session;\n\n        $results = Database::select(\n            'usergroup_id',\n            $this->usergroup_rel_course_table,\n            ['where' => ['course_id = ? AND usergroup_id = ?' => [$course_id, $usergroup_id]]]\n        );\n\n        $resultSession = Database::select(\n            'usergroup_id',\n            $this->usergroup_rel_session_table,\n            ['where' => ['session_id = ? AND usergroup_id = ?' => [$Session, $usergroup_id]]]\n        );\n\n        if (empty($results) && $Session == 0) {\n            return false;\n        }\n        if ((empty($resultSession)) && $Session != 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Gets a list of session ids by user group.\n     *\n     * @param int $id group id\n     *\n     * @return array\n     */\n    public function get_sessions_by_usergroup($id)\n    {\n        $results = Database::select(\n            'session_id',\n            $this->usergroup_rel_session_table,\n            ['where' => ['usergroup_id = ?' => $id]]\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['session_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets a list of user ids by user group.\n     *\n     * @param int   $id    user group id\n     * @param array $roles\n     *\n     * @return array with a list of user ids\n     */\n    public function get_users_by_usergroup($id = null, $roles = [])\n    {\n        $relationCondition = '';\n        if (!empty($roles)) {\n            $relationConditionArray = [];\n            foreach ($roles as $relation) {\n                $relation = (int) $relation;\n                if (empty($relation)) {\n                    $relationConditionArray[] = \" (relation_type = 0 OR relation_type IS NULL OR relation_type = '') \";\n                } else {\n                    $relationConditionArray[] = \" relation_type = $relation \";\n                }\n            }\n            $relationCondition = ' AND ( ';\n            $relationCondition .= implode('OR', $relationConditionArray);\n            $relationCondition .= ' ) ';\n        }\n\n        if (empty($id)) {\n            $conditions = [];\n        } else {\n            $conditions = ['where' => [\"usergroup_id = ? $relationCondition \" => $id]];\n        }\n\n        $results = Database::select(\n            'user_id',\n            $this->usergroup_rel_user_table,\n            $conditions\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['user_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets a list of user ids by user group.\n     *\n     * @param int $id       user group id\n     * @param int $relation\n     *\n     * @return array with a list of user ids\n     */\n    public function getUsersByUsergroupAndRelation($id, $relation = 0)\n    {\n        $relation = (int) $relation;\n        if (empty($relation)) {\n            $conditions = ['where' => ['usergroup_id = ? AND (relation_type = 0 OR relation_type IS NULL OR relation_type = \"\") ' => [$id]]];\n        } else {\n            $conditions = ['where' => ['usergroup_id = ? AND relation_type = ?' => [$id, $relation]]];\n        }\n\n        $results = Database::select(\n            'user_id',\n            $this->usergroup_rel_user_table,\n            $conditions\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['user_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Get the group list for a user.\n     *\n     * @param int $userId       The user ID\n     * @param int $filterByType Optional. The type of group\n     *\n     * @return array\n     */\n    public function getUserGroupListByUser($userId, $filterByType = null)\n    {\n        $userId = (int) $userId;\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->usergroup_rel_user_table.\" u\n                INNER JOIN {$this->access_url_rel_usergroup} a\n                ON (a.usergroup_id AND u.usergroup_id)\n                INNER JOIN {$this->table} g\n                ON (u.usergroup_id = g.id)\n                \";\n            $where = ['where' => ['user_id = ? AND access_url_id = ? ' => [$userId, $urlId]]];\n        } else {\n            $from = $this->usergroup_rel_user_table.\" u\n                INNER JOIN {$this->table} g\n                ON (u.usergroup_id = g.id)\n                \";\n            $where = ['where' => ['user_id = ?' => $userId]];\n        }\n\n        if (null !== $filterByType) {\n            $where['where'][' AND g.group_type = ?'] = (int) $filterByType;\n        }\n\n        $results = Database::select(\n            'g.*',\n            $from,\n            $where\n        );\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the usergroup id list by user id.\n     *\n     * @param int $userId user id\n     *\n     * @return array\n     */\n    public function get_usergroup_by_user($userId)\n    {\n        $userId = (int) $userId;\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->usergroup_rel_user_table.\" u\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (a.usergroup_id = u.usergroup_id) \";\n            $where = ['where' => ['user_id = ? AND access_url_id = ? ' => [$userId, $urlId]]];\n        } else {\n            $from = $this->usergroup_rel_user_table.' u ';\n            $where = ['where' => ['user_id = ?' => $userId]];\n        }\n\n        $results = Database::select(\n            'u.usergroup_id',\n            $from,\n            $where\n        );\n\n        $array = [];\n        if (!empty($results)) {\n            foreach ($results as $row) {\n                $array[] = $row['usergroup_id'];\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Subscribes sessions to a group  (also adding the members of the group in the session and course).\n     *\n     * @param int   $usergroup_id          usergroup id\n     * @param array $list                  list of session ids\n     * @param bool  $deleteCurrentSessions Optional. Empty the session list for the usergroup (class)\n     */\n    public function subscribe_sessions_to_usergroup($usergroup_id, $list, $deleteCurrentSessions = true)\n    {\n        $current_list = $this->get_sessions_by_usergroup($usergroup_id);\n        $user_list = $this->get_users_by_usergroup($usergroup_id);\n\n        $delete_items = $new_items = [];\n        if (!empty($list)) {\n            foreach ($list as $session_id) {\n                if (!in_array($session_id, $current_list)) {\n                    $new_items[] = $session_id;\n                }\n            }\n        }\n        if ($deleteCurrentSessions) {\n            if (!empty($current_list)) {\n                foreach ($current_list as $session_id) {\n                    if (!in_array($session_id, $list)) {\n                        $delete_items[] = $session_id;\n                    }\n                }\n            }\n\n            // Deleting items\n            if (!empty($delete_items)) {\n                $sessions = '';\n                foreach ($delete_items as $session_id) {\n                    if (!api_get_configuration_value('usergroup_do_not_unsubscribe_users_from_session_on_session_unsubscribe')) {\n                        if (!empty($user_list)) {\n                            foreach ($user_list as $user_id) {\n                                SessionManager::unsubscribe_user_from_session($session_id, $user_id);\n                            }\n                        }\n                    }\n                    Database::delete(\n                        $this->usergroup_rel_session_table,\n                        ['usergroup_id = ? AND session_id = ?' => [$usergroup_id, $session_id]]\n                    );\n                    $sessions .= $session_id.',';\n                }\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_SESSION_UNSUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$usergroup_id.' - sids: '.substr($sessions, 0, -1),\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n\n        $sessions = '';\n        // Adding new relationships.\n        if (!empty($new_items)) {\n            foreach ($new_items as $session_id) {\n                $params = ['session_id' => $session_id, 'usergroup_id' => $usergroup_id];\n                Database::insert($this->usergroup_rel_session_table, $params);\n\n                if (!empty($user_list)) {\n                    SessionManager::subscribeUsersToSession(\n                        $session_id,\n                        $user_list,\n                        null,\n                        false\n                    );\n                    $sessions .= $session_id.',';\n                }\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_SESSION_SUBSCRIBED,\n                LOG_GROUP_PORTAL_ID,\n                'gid: '.$usergroup_id.' - sids: '.substr($sessions, 0, -1),\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n    }\n\n    /**\n     * Subscribes courses to a group (also adding the members of the group in the course).\n     *\n     * @param int   $usergroup_id  usergroup id\n     * @param array $list          list of course ids (integers)\n     * @param bool  $delete_groups\n     */\n    public function subscribe_courses_to_usergroup($usergroup_id, $list, $delete_groups = true)\n    {\n        $current_list = $this->get_courses_by_usergroup($usergroup_id);\n        $user_list = $this->get_users_by_usergroup($usergroup_id);\n\n        $delete_items = $new_items = [];\n        if (!empty($list)) {\n            foreach ($list as $id) {\n                if (!in_array($id, $current_list)) {\n                    $new_items[] = $id;\n                }\n            }\n        }\n\n        if (!empty($current_list)) {\n            foreach ($current_list as $id) {\n                if (!in_array($id, $list)) {\n                    $delete_items[] = $id;\n                }\n            }\n        }\n\n        if ($delete_groups) {\n            $this->unsubscribe_courses_from_usergroup($usergroup_id, $delete_items);\n        }\n\n        // Adding new relationships\n        if (!empty($new_items)) {\n            $courses = '';\n            foreach ($new_items as $course_id) {\n                $course_info = api_get_course_info_by_id($course_id);\n                if ($course_info) {\n                    if (!empty($user_list)) {\n                        $messageError = [];\n                        $messageOk = [];\n                        foreach ($user_list as $user_id) {\n                            $subscribed = CourseManager::subscribeUser(\n                                $user_id,\n                                $course_info['code'],\n                                STUDENT,\n                                0,\n                                0,\n                                true,\n                                false\n                            );\n                            $userInfo = api_get_user_info($user_id);\n                            if (!$subscribed) {\n                                $messageError[] = sprintf(\n                                    get_lang('UserXNotSubscribedToCourseX'),\n                                    $userInfo['complete_name_with_username'],\n                                    $course_info['title']\n                                );\n                            } else {\n                                $messageOk[] = sprintf(\n                                    get_lang('UserXAddedToCourseX'),\n                                    $userInfo['complete_name_with_username'],\n                                    $course_info['title']\n                                );\n                            }\n                        }\n                        if (!empty($messageError)) {\n                            $strMessagesError = implode('<br>', $messageError);\n                            Display::addFlash(\n                                Display::return_message(\n                                    $strMessagesError,\n                                    'error',\n                                    false\n                                )\n                            );\n                        }\n                        if (!empty($messageOk)) {\n                            $strMessagesOk = implode('<br>', $messageOk);\n                            Display::addFlash(\n                                Display::return_message(\n                                    $strMessagesOk,\n                                    'normal',\n                                    false\n                                )\n                            );\n                        }\n                    }\n                    $params = [\n                        'course_id' => $course_id,\n                        'usergroup_id' => $usergroup_id,\n                    ];\n                    Database::insert(\n                        $this->usergroup_rel_course_table,\n                        $params\n                    );\n                }\n                $courses .= $course_id.',';\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_COURSE_SUBSCRIBED,\n                LOG_GROUP_PORTAL_ID,\n                'gid: '.$usergroup_id.' - cids: '.substr($courses, 0, -1),\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n    }\n\n    /**\n     * @param int   $usergroup_id\n     * @param array $delete_items\n     */\n    public function unsubscribe_courses_from_usergroup($usergroup_id, $delete_items)\n    {\n        // Deleting items.\n        if (!empty($delete_items)) {\n            $user_list = $this->get_users_by_usergroup($usergroup_id);\n            $courses = '';\n            foreach ($delete_items as $course_id) {\n                $course_info = api_get_course_info_by_id($course_id);\n                if ($course_info) {\n                    if (!api_get_configuration_value('usergroup_do_not_unsubscribe_users_from_course_on_course_unsubscribe')) {\n                        if (!empty($user_list)) {\n                            foreach ($user_list as $user_id) {\n                                CourseManager::unsubscribe_user(\n                                    $user_id,\n                                    $course_info['code']\n                                );\n                            }\n                        }\n                    }\n                    Database::delete(\n                        $this->usergroup_rel_course_table,\n                        [\n                            'usergroup_id = ? AND course_id = ?' => [\n                                $usergroup_id,\n                                $course_id,\n                            ],\n                        ]\n                    );\n                    $courses .= $course_id.',';\n                }\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_COURSE_UNSUBSCRIBED,\n                LOG_GROUP_PORTAL_ID,\n                'gid: '.$usergroup_id.' - cids: '.substr($courses, 0, -1),\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n    }\n\n    /**\n     * Subscribe users to a group.\n     *\n     * @param int   $usergroup_id                     usergroup id\n     * @param array $list                             list of user ids\n     * @param bool  $delete_users_not_present_in_list\n     * @param int   $relationType\n     */\n    public function subscribe_users_to_usergroup(\n        $usergroup_id,\n        $list,\n        $delete_users_not_present_in_list = true,\n        $relationType = 0\n    ) {\n        $current_list = $this->get_users_by_usergroup($usergroup_id);\n        $course_list = $this->get_courses_by_usergroup($usergroup_id);\n        $session_list = $this->get_sessions_by_usergroup($usergroup_id);\n        $session_list = array_filter($session_list);\n        $relationType = (int) $relationType;\n\n        $delete_items = [];\n        $new_items = [];\n        if (!empty($list)) {\n            foreach ($list as $user_id) {\n                if (!in_array($user_id, $current_list)) {\n                    $new_items[] = $user_id;\n                }\n            }\n        }\n\n        if (!empty($current_list)) {\n            foreach ($current_list as $user_id) {\n                if (!in_array($user_id, $list)) {\n                    $delete_items[] = $user_id;\n                }\n            }\n        }\n\n        // Deleting items\n        if (!empty($delete_items) && $delete_users_not_present_in_list) {\n            foreach ($delete_items as $user_id) {\n                if (!api_get_configuration_value('usergroup_do_not_unsubscribe_users_from_course_nor_session_on_user_unsubscribe')) {\n                    // Removing courses\n                    if (!empty($course_list)) {\n                        foreach ($course_list as $course_id) {\n                            $course_info = api_get_course_info_by_id($course_id);\n                            CourseManager::unsubscribe_user($user_id, $course_info['code']);\n                        }\n                    }\n                    // Removing sessions\n                    if (!empty($session_list)) {\n                        foreach ($session_list as $session_id) {\n                            SessionManager::unsubscribe_user_from_session($session_id, $user_id);\n                        }\n                    }\n                }\n\n                if (empty($relationType)) {\n                    Database::delete(\n                        $this->usergroup_rel_user_table,\n                        [\n                            'usergroup_id = ? AND user_id = ? AND (relation_type = \"0\" OR relation_type IS NULL OR relation_type = \"\")' => [\n                                $usergroup_id,\n                                $user_id,\n                            ],\n                        ]\n                    );\n                } else {\n                    Database::delete(\n                        $this->usergroup_rel_user_table,\n                        [\n                            'usergroup_id = ? AND user_id = ? AND relation_type = ?' => [\n                                $usergroup_id,\n                                $user_id,\n                                $relationType,\n                            ],\n                        ]\n                    );\n                }\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_UNSUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$usergroup_id.' - uid: '.$user_id,\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n\n        // Adding new relationships\n        if (!empty($new_items)) {\n            // Adding sessions\n            if (!empty($session_list)) {\n                foreach ($session_list as $session_id) {\n                    SessionManager::subscribeUsersToSession($session_id, $new_items, null, false);\n                }\n            }\n\n            foreach ($new_items as $user_id) {\n                // Adding courses\n                if (!empty($course_list)) {\n                    $messageError = [];\n                    $messageOk = [];\n                    foreach ($course_list as $course_id) {\n                        $course_info = api_get_course_info_by_id($course_id);\n                        $subscribed = CourseManager::subscribeUser(\n                            $user_id,\n                            $course_info['code'],\n                            STUDENT,\n                            0,\n                            0,\n                            true,\n                            false\n                        );\n                        $userInfo = api_get_user_info($user_id);\n                        if (!$subscribed) {\n                            $messageError[] = sprintf(\n                                get_lang('UserXNotSubscribedToCourseX'),\n                                $userInfo['complete_name_with_username'],\n                                $course_info['title']\n                            );\n                        } else {\n                            $messageOk[] = sprintf(\n                                get_lang('UserXAddedToCourseX'),\n                                $userInfo['complete_name_with_username'],\n                                $course_info['title']\n                            );\n                        }\n                    }\n                    if (!empty($messageError)) {\n                        $strMessagesError = implode('<br>', $messageError);\n                        Display::addFlash(\n                            Display::return_message(\n                                $strMessagesError,\n                                'error',\n                                false\n                            )\n                        );\n                    }\n                    if (!empty($messageOk)) {\n                        $strMessagesOk = implode('<br>', $messageOk);\n                        Display::addFlash(\n                            Display::return_message(\n                                $strMessagesOk,\n                                'normal',\n                                false\n                            )\n                        );\n                    }\n                }\n                $params = [\n                    'user_id' => $user_id,\n                    'usergroup_id' => $usergroup_id,\n                    'relation_type' => $relationType,\n                ];\n                Database::insert($this->usergroup_rel_user_table, $params);\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_SUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$usergroup_id.' - uid: '.$user_id,\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return bool\n     */\n    public function usergroup_exists($name)\n    {\n        $name = Database::escape_string($name);\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql = \"SELECT * FROM $this->table u\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (a.usergroup_id = u.id)\n                    WHERE name = '\".$name.\"' AND access_url_id = $urlId\";\n        } else {\n            $sql = \"SELECT * FROM $this->table WHERE name = '\".$name.\"'\";\n        }\n\n        $res = Database::query($sql);\n\n        return 0 != Database::num_rows($res);\n    }\n\n    /**\n     * @return bool\n     */\n    public function allowTeachers()\n    {\n        return true === api_get_configuration_value('allow_teachers_to_classes');\n    }\n\n    /**\n     * @param int    $sidx\n     * @param int    $sord\n     * @param int    $start\n     * @param int    $limit\n     * @param string $extraWhereCondition\n     *\n     * @return array\n     */\n    public function getUsergroupsPagination($sidx, $sord, $start, $limit, $extraWhereCondition = '')\n    {\n        $sord = in_array(strtolower($sord), ['asc', 'desc']) ? $sord : 'desc';\n\n        $start = (int) $start;\n        $limit = (int) $limit;\n\n        $sqlFrom = \"{$this->table} u \";\n        $sqlWhere = '1 = 1 ';\n\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sqlFrom .= \" INNER JOIN {$this->access_url_rel_usergroup} a ON (u.id = a.usergroup_id) \";\n            $sqlWhere .= \" AND a.access_url_id = $urlId \";\n        }\n\n        if ($this->allowTeachers()) {\n            if (!api_is_platform_admin()) {\n                $userId = api_get_user_id();\n                $sqlWhere .= \" AND author_id = $userId \";\n            }\n        }\n\n        if ($extraWhereCondition) {\n            $sqlWhere .= \" AND $extraWhereCondition \";\n        }\n\n        $result = Database::store_result(\n            Database::query(\"SELECT u.* FROM $sqlFrom WHERE $sqlWhere ORDER BY name $sord LIMIT $start, $limit\")\n        );\n\n        $new_result = [];\n        if (!empty($result)) {\n            foreach ($result as $group) {\n                $group['sessions'] = count($this->get_sessions_by_usergroup($group['id']));\n                $group['courses'] = count($this->get_courses_by_usergroup($group['id']));\n                $roles = [];\n                switch ($group['group_type']) {\n                    case 0:\n                        $group['group_type'] = Display::label(get_lang('Class'), 'info');\n                        $roles = [0];\n                        break;\n                    case 1:\n                        $group['group_type'] = Display::label(get_lang('Social'), 'success');\n                        $roles = [\n                            GROUP_USER_PERMISSION_ADMIN,\n                            GROUP_USER_PERMISSION_READER,\n                            GROUP_USER_PERMISSION_MODERATOR,\n                            GROUP_USER_PERMISSION_HRM,\n                        ];\n                        break;\n                }\n                $group['users'] = Display::url(\n                    count($this->get_users_by_usergroup($group['id'], $roles)),\n                    api_get_path(WEB_CODE_PATH).'admin/usergroup_users.php?id='.$group['id']\n                );\n                $new_result[] = $group;\n            }\n            $result = $new_result;\n        }\n        $columns = ['name', 'users', 'courses', 'sessions', 'group_type'];\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        // Multidimensional sort\n        $result = msort($result, $sidx, $sord);\n\n        return $result;\n    }\n\n    /**\n     * @param array $options\n     *\n     * @return array\n     */\n    public function getDataToExport($options = [])\n    {\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $from = $this->table.\" u\n                    INNER JOIN {$this->access_url_rel_usergroup} a\n                    ON (u.id = a.usergroup_id)\";\n            $options = ['where' => ['access_url_id = ? ' => $urlId]];\n            if ($this->allowTeachers()) {\n                $options['where'] = [' author_id = ? ' => api_get_user_id()];\n            }\n            $classes = Database::select('u.id, name, description', $from, $options);\n        } else {\n            if ($this->allowTeachers()) {\n                $options['where'] = [' author_id = ? ' => api_get_user_id()];\n            }\n            $classes = Database::select('id, name, description', $this->table, $options);\n        }\n\n        $result = [];\n        if (!empty($classes)) {\n            foreach ($classes as $data) {\n                $users = $this->getUserListByUserGroup($data['id']);\n                $userToString = null;\n                if (!empty($users)) {\n                    $userNameList = [];\n                    foreach ($users as $userData) {\n                        $userNameList[] = $userData['username'];\n                    }\n                    $userToString = implode(',', $userNameList);\n                }\n\n                $courses = $this->get_courses_by_usergroup($data['id'], true);\n                $coursesToString = '';\n                if (!empty($courses)) {\n                    $coursesToString = implode(', ', array_column($courses, 'code'));\n                }\n\n                $sessions = $this->get_sessions_by_usergroup($data['id']);\n                $sessionsToString = '';\n                if (!empty($sessions)) {\n                    $sessionList = [];\n                    foreach ($sessions as $sessionId) {\n                        $sessionList[] = api_get_session_info($sessionId)['name'];\n                    }\n                    $sessionsToString = implode(', ', $sessionList);\n                }\n\n                $data['users'] = $userToString;\n                $data['courses'] = $coursesToString;\n                $data['sessions'] = $sessionsToString;\n                $result[] = $data;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param string $firstLetter\n     * @param int    $limit\n     *\n     * @return array\n     */\n    public function filterByFirstLetter($firstLetter, $limit = 0)\n    {\n        $firstLetter = Database::escape_string($firstLetter);\n        $limit = (int) $limit;\n\n        $sql = ' SELECT g.id, name ';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql .= \" FROM $this->table g\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON (g.id = a.usergroup_id) \";\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql = \" FROM $this->table g \";\n        }\n        $sql .= \"\n\t\t        WHERE\n\t\t            name LIKE '\".$firstLetter.\"%' OR\n\t\t            name LIKE '\".api_strtolower($firstLetter).\"%'\n\t\t            $urlCondition\n\t\t        ORDER BY name DESC \";\n\n        if (!empty($limit)) {\n            $sql .= \" LIMIT $limit \";\n        }\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * Select user group not in list.\n     *\n     * @param array $list\n     *\n     * @return array\n     */\n    public function getUserGroupNotInList($list)\n    {\n        if (empty($list)) {\n            return [];\n        }\n\n        $list = array_map('intval', $list);\n        $listToString = implode(\"','\", $list);\n        $sql = \"SELECT * FROM $this->table g WHERE g.id NOT IN ('$listToString')\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param $params\n     * @param bool $show_query\n     *\n     * @return bool|int\n     */\n    public function save($params, $show_query = false)\n    {\n        $params['updated_at'] = $params['created_at'] = api_get_utc_datetime();\n        $params['group_type'] = !empty($params['group_type']) ? self::SOCIAL_CLASS : self::NORMAL_CLASS;\n        $params['allow_members_leave_group'] = isset($params['allow_members_leave_group']) ? 1 : 0;\n\n        $groupExists = $this->usergroup_exists(trim($params['name']));\n        if (false == $groupExists) {\n            if ($this->allowTeachers()) {\n                $params['author_id'] = api_get_user_id();\n            }\n            $id = parent::save($params, $show_query);\n            if ($id) {\n                if ($this->getUseMultipleUrl()) {\n                    $this->subscribeToUrl($id, api_get_current_access_url_id());\n                }\n\n                if (self::SOCIAL_CLASS == $params['group_type']) {\n                    $this->add_user_to_group(\n                        api_get_user_id(),\n                        $id,\n                        GROUP_USER_PERMISSION_ADMIN\n                    );\n                }\n                $picture = isset($_FILES['picture']) ? $_FILES['picture'] : null;\n                $picture = $this->manageFileUpload($id, $picture);\n                if ($picture) {\n                    $params = [\n                        'id' => $id,\n                        'picture' => $picture,\n                        'group_type' => $params['group_type'],\n                    ];\n                    $this->update($params);\n                }\n            }\n            // Add event to system log\n            Event::addEvent(\n                LOG_GROUP_PORTAL_CREATED,\n                LOG_GROUP_PORTAL_ID,\n                'id: '.$id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n\n            return $id;\n        }\n\n        return false;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($values, $showQuery = false)\n    {\n        $values['updated_on'] = api_get_utc_datetime();\n        $values['group_type'] = !empty($values['group_type']) ? self::SOCIAL_CLASS : self::NORMAL_CLASS;\n        $values['allow_members_leave_group'] = isset($values['allow_members_leave_group']) ? 1 : 0;\n\n        if (isset($values['id'])) {\n            $picture = isset($_FILES['picture']) ? $_FILES['picture'] : null;\n            if (!empty($picture)) {\n                $picture = $this->manageFileUpload($values['id'], $picture);\n                if ($picture) {\n                    $values['picture'] = $picture;\n                }\n            }\n\n            if (isset($values['delete_picture'])) {\n                $values['picture'] = null;\n            }\n        }\n\n        parent::update($values, $showQuery);\n\n        if (isset($values['delete_picture'])) {\n            $this->delete_group_picture($values['id']);\n        }\n        // Add event to system log\n        Event::addEvent(\n            LOG_GROUP_PORTAL_UPDATED,\n            LOG_GROUP_PORTAL_ID,\n            'id: '.$values['id'],\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * @param int    $groupId\n     * @param string $picture\n     *\n     * @return bool|string\n     */\n    public function manageFileUpload($groupId, $picture)\n    {\n        if (!empty($picture['name'])) {\n            return $this->update_group_picture(\n                $groupId,\n                $picture['name'],\n                $picture['tmp_name']\n            );\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $groupId\n     *\n     * @return string\n     */\n    public function delete_group_picture($groupId)\n    {\n        return $this->update_group_picture($groupId);\n    }\n\n    /**\n     * Creates new group pictures in various sizes of a user, or deletes user pfotos.\n     * Note: This method relies on configuration setting from main/inc/conf/profile.conf.php.\n     *\n     * @param    int    The group id\n     * @param string $file The common file name for the newly created photos.\n     *                     It will be checked and modified for compatibility with the file system.\n     *                     If full name is provided, path component is ignored.\n     *                     If an empty name is provided, then old user photos are deleted only,\n     *\n     * @see UserManager::delete_user_picture() as the prefered way for deletion.\n     *\n     * @param string $source_file the full system name of the image from which user photos will be created\n     *\n     * @return mixed Returns the resulting common file name of created images which usually should be stored in database.\n     *               When an image is removed the function returns an empty string.\n     *               In case of internal error or negative validation it returns FALSE.\n     */\n    public function update_group_picture($group_id, $file = null, $source_file = null)\n    {\n        $group_id = (int) $group_id;\n\n        if (empty($group_id)) {\n            return false;\n        }\n        $delete = empty($file);\n        if (empty($source_file)) {\n            $source_file = $file;\n        }\n\n        // User-reserved directory where photos have to be placed.\n        $path_info = $this->get_group_picture_path_by_id($group_id, 'system', true);\n\n        $path = $path_info['dir'];\n\n        // If this directory does not exist - we create it.\n        if (!is_dir($path)) {\n            $res = @mkdir($path, api_get_permissions_for_new_directories(), true);\n            if ($res === false) {\n                // There was an issue creating the directory $path, probably\n                // permissions-related\n                return false;\n            }\n        }\n\n        // The old photos (if any).\n        $old_file = $path_info['file'];\n\n        // Let us delete them.\n        if (!empty($old_file)) {\n            if (KEEP_THE_OLD_IMAGE_AFTER_CHANGE) {\n                $prefix = 'saved_'.date('Y_m_d_H_i_s').'_'.uniqid('').'_';\n                @rename($path.'small_'.$old_file, $path.$prefix.'small_'.$old_file);\n                @rename($path.'medium_'.$old_file, $path.$prefix.'medium_'.$old_file);\n                @rename($path.'big_'.$old_file, $path.$prefix.'big_'.$old_file);\n                @rename($path.$old_file, $path.$prefix.$old_file);\n            } else {\n                @unlink($path.'small_'.$old_file);\n                @unlink($path.'medium_'.$old_file);\n                @unlink($path.'big_'.$old_file);\n                @unlink($path.$old_file);\n            }\n        }\n\n        // Exit if only deletion has been requested. Return an empty picture name.\n        if ($delete) {\n            return '';\n        }\n\n        // Validation 2.\n        $allowed_types = ['jpg', 'jpeg', 'png', 'gif'];\n        $file = str_replace('\\\\', '/', $file);\n        $filename = (($pos = strrpos($file, '/')) !== false) ? substr($file, $pos + 1) : $file;\n        $extension = strtolower(substr(strrchr($filename, '.'), 1));\n        if (!in_array($extension, $allowed_types)) {\n            return false;\n        }\n\n        // This is the common name for the new photos.\n        if (KEEP_THE_NAME_WHEN_CHANGE_IMAGE && !empty($old_file)) {\n            $old_extension = strtolower(substr(strrchr($old_file, '.'), 1));\n            $filename = in_array($old_extension, $allowed_types) ? substr($old_file, 0, -strlen($old_extension)) : $old_file;\n            $filename = (substr($filename, -1) == '.') ? $filename.$extension : $filename.'.'.$extension;\n        } else {\n            $filename = api_replace_dangerous_char($filename);\n            if (PREFIX_IMAGE_FILENAME_WITH_UID) {\n                $filename = uniqid('').'_'.$filename;\n            }\n            // We always prefix user photos with user ids, so on setting\n            // api_get_setting('split_users_upload_directory') === 'true'\n            // the correspondent directories to be found successfully.\n            $filename = $group_id.'_'.$filename;\n        }\n\n        // Storing the new photos in 4 versions with various sizes.\n\n        /*$image->resize(\n        // get original size and set width (widen) or height (heighten).\n        // width or height will be set maintaining aspect ratio.\n            $image->getSize()->widen( 700 )\n        );*/\n\n        // Usign the Imagine service\n        $imagine = new Imagine\\Gd\\Imagine();\n        $image = $imagine->open($source_file);\n\n        $options = [\n            'quality' => 90,\n        ];\n\n        //$image->resize(new Imagine\\Image\\Box(200, 200))->save($path.'big_'.$filename);\n        $image->resize($image->getSize()->widen(200))->save($path.'big_'.$filename, $options);\n\n        $image = $imagine->open($source_file);\n        $image->resize(new Imagine\\Image\\Box(85, 85))->save($path.'medium_'.$filename, $options);\n\n        $image = $imagine->open($source_file);\n        $image->resize(new Imagine\\Image\\Box(22, 22))->save($path.'small_'.$filename);\n\n        /*\n        $small  = self::resize_picture($source_file, 22);\n        $medium = self::resize_picture($source_file, 85);\n        $normal = self::resize_picture($source_file, 200);\n\n        $big = new Image($source_file); // This is the original picture.\n        $ok = $small && $small->send_image($path.'small_'.$filename)\n            && $medium && $medium->send_image($path.'medium_'.$filename)\n            && $normal && $normal->send_image($path.'big_'.$filename)\n            && $big && $big->send_image($path.$filename);\n        return $ok ? $filename : false;*/\n        return $filename;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getGroupType()\n    {\n        return $this->groupType;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool|void\n     */\n    public function delete($id)\n    {\n        $id = (int) $id;\n        if ($this->getUseMultipleUrl()) {\n            $this->unsubscribeToUrl($id, api_get_current_access_url_id());\n        }\n\n        $sql = \"DELETE FROM $this->usergroup_rel_user_table\n                WHERE usergroup_id = $id\";\n        Database::query($sql);\n\n        $sql = \"DELETE FROM $this->usergroup_rel_course_table\n                WHERE usergroup_id = $id\";\n        Database::query($sql);\n\n        $sql = \"DELETE FROM $this->usergroup_rel_session_table\n                WHERE usergroup_id = $id\";\n        Database::query($sql);\n\n        parent::delete($id);\n        // Add event to system log\n        Event::addEvent(\n            LOG_GROUP_PORTAL_DELETED,\n            LOG_GROUP_PORTAL_ID,\n            'id: '.$id,\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n    }\n\n    /**\n     * @param int $id\n     * @param int $urlId\n     */\n    public function subscribeToUrl($id, $urlId)\n    {\n        Database::insert(\n            $this->access_url_rel_usergroup,\n            [\n                'access_url_id' => $urlId,\n                'usergroup_id' => $id,\n            ]\n        );\n    }\n\n    /**\n     * @param int $id\n     * @param int $urlId\n     */\n    public function unsubscribeToUrl($id, $urlId)\n    {\n        Database::delete(\n            $this->access_url_rel_usergroup,\n            [\n                'access_url_id = ? AND usergroup_id = ? ' => [$urlId, $id],\n            ]\n        );\n    }\n\n    /**\n     * @param $needle\n     *\n     * @return xajaxResponse\n     */\n    public static function searchUserGroupAjax($needle)\n    {\n        $response = new xajaxResponse();\n        $return = '';\n\n        if (!empty($needle)) {\n            // xajax send utf8 datas... datas in db can be non-utf8 datas\n            $charset = api_get_system_encoding();\n            $needle = api_convert_encoding($needle, $charset, 'utf-8');\n            $needle = Database::escape_string($needle);\n\n            $sql = 'SELECT id, name\n                    FROM '.Database::get_main_table(TABLE_USERGROUP).' u\n                    WHERE name LIKE \"'.$needle.'%\"\n                    ORDER BY name\n                    LIMIT 11';\n            $result = Database::query($sql);\n            $i = 0;\n            while ($data = Database::fetch_array($result)) {\n                $i++;\n                if ($i <= 10) {\n                    $return .= '<a\n                    href=\"javascript: void(0);\"\n                    onclick=\"javascript: add_user_to_url(\\''.addslashes($data['id']).'\\',\\''.addslashes($data['name']).' \\')\">'.$data['name'].' </a><br />';\n                } else {\n                    $return .= '...<br />';\n                }\n            }\n        }\n        $response->addAssign('ajax_list_courses', 'innerHTML', api_utf8_encode($return));\n\n        return $response;\n    }\n\n    /**\n     * Get user list by usergroup.\n     *\n     * @param int    $id\n     * @param string $orderBy\n     *\n     * @return array\n     */\n    public function getUserListByUserGroup($id, $orderBy = '')\n    {\n        $id = (int) $id;\n        $sql = \"SELECT u.* FROM $this->table_user u\n                INNER JOIN $this->usergroup_rel_user_table c\n                ON c.user_id = u.id\n                WHERE c.usergroup_id = $id\"\n                ;\n\n        if (!empty($orderBy)) {\n            $orderBy = Database::escape_string($orderBy);\n            $sql .= \" ORDER BY $orderBy \";\n        }\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param FormValidator $form\n     * @param string        $type\n     * @param array         $data\n     */\n    public function setForm($form, $type = 'add', $data = [])\n    {\n        $header = '';\n        switch ($type) {\n            case 'add':\n                $header = get_lang('Add');\n                break;\n            case 'edit':\n                $header = get_lang('Edit');\n                break;\n        }\n\n        $form->addHeader($header);\n\n        // Name\n        $form->addText('name', get_lang('Name'), true, ['maxlength' => 255]);\n        $form->addRule('name', '', 'maxlength', 255);\n\n        // Description\n        $form->addTextarea('description', get_lang('Description'), ['cols' => 58]);\n        $form->applyFilter('description', 'trim');\n\n        if ($this->showGroupTypeSetting) {\n            $form->addElement(\n                'checkbox',\n                'group_type',\n                null,\n                get_lang('SocialGroup')\n            );\n        }\n\n        // url\n        $form->addText('url', get_lang('Url'), false);\n\n        // Picture\n        $allowed_picture_types = $this->getAllowedPictureExtensions();\n\n        $form->addFile('picture', get_lang('AddPicture'));\n        $form->addRule(\n            'picture',\n            get_lang('OnlyImagesAllowed').' ('.implode(',', $allowed_picture_types).')',\n            'filetype',\n            $allowed_picture_types\n        );\n\n        if (isset($data['picture']) && strlen($data['picture']) > 0) {\n            $picture = $this->get_picture_group($data['id'], $data['picture'], 80);\n            $img = '<img src=\"'.$picture['file'].'\" />';\n            $form->addLabel(null, $img);\n            $form->addElement('checkbox', 'delete_picture', '', get_lang('DelImage'));\n        }\n\n        $form->addElement('select', 'visibility', get_lang('GroupPermissions'), $this->getGroupStatusList());\n        $form->setRequiredNote('<span class=\"form_required\">*</span> <small>'.get_lang('ThisFieldIsRequired').'</small>');\n        $form->addElement('checkbox', 'allow_members_leave_group', '', get_lang('AllowMemberLeaveGroup'));\n\n        // Setting the form elements\n        if ($type === 'add') {\n            $form->addButtonCreate($header);\n        } else {\n            $form->addButtonUpdate($header);\n        }\n    }\n\n    /**\n     * Gets the current group image.\n     *\n     * @param string $id group id\n     * @param string picture group name\n     * @param string height\n     * @param string $size_picture picture size it can be small_,  medium_  or  big_\n     * @param string style css\n     *\n     * @return array with the file and the style of an image i.e $array['file'] $array['style']\n     */\n    public function get_picture_group(\n        $id,\n        $picture_file,\n        $height,\n        $size_picture = GROUP_IMAGE_SIZE_MEDIUM,\n        $style = ''\n    ) {\n        $picture = [];\n        if ($picture_file === 'unknown.jpg') {\n            $picture['file'] = Display::returnIconPath($picture_file);\n\n            return $picture;\n        }\n\n        switch ($size_picture) {\n            case GROUP_IMAGE_SIZE_ORIGINAL:\n                $size_picture = '';\n                break;\n            case GROUP_IMAGE_SIZE_BIG:\n                $size_picture = 'big_';\n                break;\n            case GROUP_IMAGE_SIZE_MEDIUM:\n                $size_picture = 'medium_';\n                break;\n            case GROUP_IMAGE_SIZE_SMALL:\n                $size_picture = 'small_';\n                break;\n            default:\n                $size_picture = 'medium_';\n        }\n\n        $image_array_sys = $this->get_group_picture_path_by_id($id, 'system', false, true);\n        $image_array = $this->get_group_picture_path_by_id($id, 'web', false, true);\n        $file = $image_array_sys['dir'].$size_picture.$picture_file;\n        if (file_exists($file)) {\n            $picture['file'] = $image_array['dir'].$size_picture.$picture_file;\n            if ($height > 0) {\n                $dimension = api_getimagesize($picture['file']);\n                $margin = ($height - $dimension['width']) / 2;\n                //@ todo the padding-top should not be here\n            }\n        } else {\n            $file = $image_array_sys['dir'].$picture_file;\n            if (file_exists($file) && !is_dir($file)) {\n                $picture['file'] = $image_array['dir'].$picture_file;\n            } else {\n                $picture['file'] = Display::returnIconPath('group_na.png', 64);\n            }\n        }\n\n        return $picture;\n    }\n\n    /**\n     * Gets the group picture URL or path from group ID (returns an array).\n     * The return format is a complete path, enabling recovery of the directory\n     * with dirname() or the file with basename(). This also works for the\n     * functions dealing with the user's productions, as they are located in\n     * the same directory.\n     *\n     * @param    int    User ID\n     * @param    string    Type of path to return (can be 'none', 'system', 'rel', 'web')\n     * @param    bool    Whether we want to have the directory name returned 'as if'\n     * there was a file or not (in the case we want to know which directory to create -\n     * otherwise no file means no split subdir)\n     * @param    bool    If we want that the function returns the /main/img/unknown.jpg image set it at true\n     *\n     * @return array Array of 2 elements: 'dir' and 'file' which contain the dir\n     *               and file as the name implies if image does not exist it will return the unknown\n     *               image if anonymous parameter is true if not it returns an empty er's\n     */\n    public function get_group_picture_path_by_id($id, $type = 'none', $preview = false, $anonymous = false)\n    {\n        switch ($type) {\n            case 'system': // Base: absolute system path.\n                $base = api_get_path(SYS_UPLOAD_PATH);\n                break;\n            case 'rel': // Base: semi-absolute web path (no server base).\n                $base = api_get_path(REL_CODE_PATH);\n                break;\n            case 'web': // Base: absolute web path.\n                $base = api_get_path(WEB_UPLOAD_PATH);\n                break;\n            case 'none':\n            default: // Base: empty, the result path below will be relative.\n                $base = '';\n        }\n        $id = (int) $id;\n\n        if (empty($id) || empty($type)) {\n            return $anonymous ? ['dir' => $base.'img/', 'file' => 'unknown.jpg'] : ['dir' => '', 'file' => ''];\n        }\n\n        $group_table = Database::get_main_table(TABLE_USERGROUP);\n        $sql = \"SELECT picture FROM $group_table WHERE id = \".$id;\n        $res = Database::query($sql);\n\n        if (!Database::num_rows($res)) {\n            return $anonymous ? ['dir' => $base.'img/', 'file' => 'unknown.jpg'] : ['dir' => '', 'file' => ''];\n        }\n        $user = Database::fetch_array($res);\n        $picture_filename = trim($user['picture']);\n\n        if (api_get_setting('split_users_upload_directory') === 'true') {\n            if (!empty($picture_filename)) {\n                $dir = $base.'groups/'.substr($picture_filename, 0, 1).'/'.$id.'/';\n            } elseif ($preview) {\n                $dir = $base.'groups/'.substr((string) $id, 0, 1).'/'.$id.'/';\n            } else {\n                $dir = $base.'groups/'.$id.'/';\n            }\n        } else {\n            $dir = $base.'groups/'.$id.'/';\n        }\n\n        return ['dir' => $dir, 'file' => $picture_filename];\n    }\n\n    /**\n     * @return array\n     */\n    public function getAllowedPictureExtensions()\n    {\n        return ['jpg', 'jpeg', 'png', 'gif'];\n    }\n\n    /**\n     * @return array\n     */\n    public function getGroupStatusList()\n    {\n        $status = [\n            GROUP_PERMISSION_OPEN => get_lang('Open'),\n            GROUP_PERMISSION_CLOSED => get_lang('Closed'),\n        ];\n\n        return $status;\n    }\n\n    /**\n     * @param int $type\n     */\n    public function setGroupType($type)\n    {\n        $this->groupType = (int) $type;\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function is_group_admin($group_id, $user_id = 0)\n    {\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n        $user_role = $this->get_user_group_role($user_id, $group_id);\n        if (in_array($user_role, [GROUP_USER_PERMISSION_ADMIN])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function isGroupModerator($group_id, $user_id = 0)\n    {\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n        $user_role = $this->get_user_group_role($user_id, $group_id);\n        if (in_array($user_role, [GROUP_USER_PERMISSION_ADMIN, GROUP_USER_PERMISSION_MODERATOR])) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function is_group_member($group_id, $user_id = 0)\n    {\n        if (api_is_platform_admin()) {\n            return true;\n        }\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n        $roles = [\n            GROUP_USER_PERMISSION_ADMIN,\n            GROUP_USER_PERMISSION_MODERATOR,\n            GROUP_USER_PERMISSION_READER,\n            GROUP_USER_PERMISSION_HRM,\n        ];\n        $user_role = $this->get_user_group_role($user_id, $group_id);\n        if (in_array($user_role, $roles)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Gets the relationship between a group and a User.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $user_id\n     * @param int $group_id\n     *\n     * @return int 0 if there are not relationship otherwise returns the user group\n     * */\n    public function get_user_group_role($user_id, $group_id)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $return_value = 0;\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n\n        if (!empty($user_id) && !empty($group_id)) {\n            $sql = \"SELECT relation_type\n                    FROM $table_group_rel_user\n                    WHERE\n                        usergroup_id = $group_id AND\n                        user_id = $user_id \";\n            $result = Database::query($sql);\n            if (Database::num_rows($result) > 0) {\n                $row = Database::fetch_array($result, 'ASSOC');\n                $return_value = $row['relation_type'];\n            }\n        }\n\n        return $return_value;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $groupId\n     *\n     * @return string\n     */\n    public function getUserRoleToString($userId, $groupId)\n    {\n        $role = $this->get_user_group_role($userId, $groupId);\n        $roleToString = '';\n\n        switch ($role) {\n            case GROUP_USER_PERMISSION_ADMIN:\n                $roleToString = get_lang('Admin');\n                break;\n            case GROUP_USER_PERMISSION_READER:\n                $roleToString = get_lang('Reader');\n                break;\n            case GROUP_USER_PERMISSION_PENDING_INVITATION:\n                $roleToString = get_lang('PendingInvitation');\n                break;\n            case GROUP_USER_PERMISSION_MODERATOR:\n                $roleToString = get_lang('Moderator');\n                break;\n            case GROUP_USER_PERMISSION_HRM:\n                $roleToString = get_lang('Drh');\n                break;\n        }\n\n        return $roleToString;\n    }\n\n    /**\n     * Add a group of users into a group of URLs.\n     *\n     * @author Julio Montoya\n     *\n     * @param array $user_list\n     * @param array $group_list\n     * @param int   $relation_type\n     *\n     * @return array\n     */\n    public function add_users_to_groups($user_list, $group_list, $relation_type = GROUP_USER_PERMISSION_READER)\n    {\n        $table_url_rel_group = $this->usergroup_rel_user_table;\n        $result_array = [];\n        $relation_type = (int) $relation_type;\n\n        if (is_array($user_list) && is_array($group_list)) {\n            foreach ($group_list as $group_id) {\n                $usersList = '';\n                foreach ($user_list as $user_id) {\n                    $user_id = (int) $user_id;\n                    $group_id = (int) $group_id;\n\n                    $role = $this->get_user_group_role($user_id, $group_id);\n                    if ($role == 0) {\n                        $sql = \"INSERT INTO $table_url_rel_group\n\t\t               \t\t\tSET\n\t\t               \t\t\t    user_id = $user_id ,\n\t\t               \t\t\t    usergroup_id = $group_id ,\n\t\t               \t\t\t    relation_type = $relation_type \";\n\n                        $result = Database::query($sql);\n                        if ($result) {\n                            $result_array[$group_id][$user_id] = 1;\n                        } else {\n                            $result_array[$group_id][$user_id] = 0;\n                        }\n                    }\n                    $usersList .= $user_id.',';\n                }\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_SUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$group_id.' - uids: '.substr($usersList, 0, -1),\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            }\n        }\n\n        return $result_array;\n    }\n\n    /**\n     * Deletes an url and session relationship.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $userId\n     * @param int $groupId\n     *\n     * @return bool true if success\n     * */\n    public function delete_user_rel_group($userId, $groupId)\n    {\n        $userId = (int) $userId;\n        $groupId = (int) $groupId;\n        if (empty($userId) || empty($groupId)) {\n            return false;\n        }\n\n        $table = $this->usergroup_rel_user_table;\n        $sql = \"DELETE FROM $table\n                WHERE\n                    user_id = $userId AND\n                    usergroup_id = $groupId\";\n\n        $result = Database::query($sql);\n        // Add event to system log\n        Event::addEvent(\n            LOG_GROUP_PORTAL_USER_UNSUBSCRIBED,\n            LOG_GROUP_PORTAL_ID,\n            'gid: '.$groupId.' - uid: '.$userId,\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n\n        return $result;\n    }\n\n    /**\n     * Add a user into a group.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $user_id\n     * @param int $group_id\n     * @param int $relation_type\n     *\n     * @return bool true if success\n     */\n    public function add_user_to_group($user_id, $group_id, $relation_type = GROUP_USER_PERMISSION_READER)\n    {\n        $table_url_rel_group = $this->usergroup_rel_user_table;\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n        $relation_type = (int) $relation_type;\n        if (!empty($user_id) && !empty($group_id)) {\n            $role = $this->get_user_group_role($user_id, $group_id);\n\n            if ($role == 0) {\n                $sql = \"INSERT INTO $table_url_rel_group\n           \t\t\t\tSET\n           \t\t\t\t    user_id = \".$user_id.\",\n           \t\t\t\t    usergroup_id = \".$group_id.\",\n           \t\t\t\t    relation_type = \".$relation_type;\n                Database::query($sql);\n                // Add event to system log\n                Event::addEvent(\n                    LOG_GROUP_PORTAL_USER_SUBSCRIBED,\n                    LOG_GROUP_PORTAL_ID,\n                    'gid: '.$group_id.' - uid: '.$user_id,\n                    api_get_utc_datetime(),\n                    api_get_user_id()\n                );\n            } elseif ($role == GROUP_USER_PERMISSION_PENDING_INVITATION) {\n                //if somebody already invited me I can be added\n                self::update_user_role($user_id, $group_id, GROUP_USER_PERMISSION_READER);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates the group_rel_user table  with a given user and group ids.\n     *\n     * @author Julio Montoya\n     *\n     * @param int $user_id\n     * @param int $group_id\n     * @param int $relation_type\n     */\n    public function update_user_role($user_id, $group_id, $relation_type = GROUP_USER_PERMISSION_READER)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $group_id = (int) $group_id;\n        $user_id = (int) $user_id;\n        $relation_type = (int) $relation_type;\n\n        $sql = \"UPDATE $table_group_rel_user\n   \t\t\t\tSET relation_type = $relation_type\n                WHERE user_id = $user_id AND usergroup_id = $group_id\";\n        Database::query($sql);\n    }\n\n    /**\n     * Gets the inner join from users and group table.\n     *\n     * @return array Database::store_result of the result\n     *\n     * @author Julio Montoya\n     * */\n    public function get_groups_by_user($user_id, $relationType = GROUP_USER_PERMISSION_READER, $with_image = false)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n        $user_id = (int) $user_id;\n\n        if ($relationType == 0) {\n            $relationCondition = '';\n        } else {\n            if (is_array($relationType)) {\n                $relationType = array_map('intval', $relationType);\n                $relationType = implode(\"','\", $relationType);\n                $relationCondition = \" AND ( gu.relation_type IN ('$relationType')) \";\n            } else {\n                $relationType = (int) $relationType;\n                $relationCondition = \" AND gu.relation_type = $relationType \";\n            }\n        }\n\n        $sql = 'SELECT\n                    g.picture,\n                    g.name,\n                    g.description,\n                    g.id ,\n                    gu.relation_type';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN \".$this->access_url_rel_usergroup.\" a\n                    ON (g.id = a.usergroup_id)\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n            $urlId = api_get_current_access_url_id();\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n        }\n\n        $sql .= \" WHERE\n\t\t\t\t    g.group_type = \".self::SOCIAL_CLASS.\" AND\n                    gu.user_id = $user_id\n                    $relationCondition\n                    $urlCondition\n                ORDER BY created_at DESC \";\n        $result = Database::query($sql);\n        $array = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                if ($with_image) {\n                    $picture = $this->get_picture_group($row['id'], $row['picture'], 80);\n                    $img = '<img src=\"'.$picture['file'].'\" />';\n                    $row['picture'] = $img;\n                }\n                $array[$row['id']] = $row;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the inner join of users and group table.\n     *\n     * @param int  quantity of records\n     * @param bool show groups with image or not\n     *\n     * @return array with group content\n     *\n     * @author Julio Montoya\n     * */\n    public function get_groups_by_popularity($num = 6, $with_image = true)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n        if (empty($num)) {\n            $num = 6;\n        } else {\n            $num = (int) $num;\n        }\n        // only show admins and readers\n        $whereCondition = \" WHERE\n                              g.group_type = \".self::SOCIAL_CLASS.\" AND\n                              gu.relation_type IN\n                              ('\".GROUP_USER_PERMISSION_ADMIN.\"' , '\".GROUP_USER_PERMISSION_READER.\"', '\".GROUP_USER_PERMISSION_HRM.\"') \";\n\n        $sql = 'SELECT DISTINCT count(user_id) as count, g.picture, g.name, g.description, g.id ';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN \".$this->access_url_rel_usergroup.\" a\n                    ON (g.id = a.usergroup_id)\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n            $urlId = api_get_current_access_url_id();\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n        }\n\n        $sql .= \"\n\t\t\t\t$whereCondition\n\t\t\t\t$urlCondition\n\t\t\t\tGROUP BY g.id\n\t\t\t\tORDER BY count DESC\n\t\t\t\tLIMIT $num\";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            if ($with_image) {\n                $picture = $this->get_picture_group($row['id'], $row['picture'], 80);\n                $img = '<img src=\"'.$picture['file'].'\" />';\n                $row['picture'] = $img;\n            }\n            if (empty($row['id'])) {\n                continue;\n            }\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the last groups created.\n     *\n     * @param int  $num       quantity of records\n     * @param bool $withImage show groups with image or not\n     *\n     * @return array with group content\n     *\n     * @author Julio Montoya\n     * */\n    public function get_groups_by_age($num = 6, $withImage = true)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n\n        if (empty($num)) {\n            $num = 6;\n        } else {\n            $num = (int) $num;\n        }\n\n        $where = \" WHERE\n                        g.group_type = \".self::SOCIAL_CLASS.\" AND\n                        gu.relation_type IN\n                        ('\".GROUP_USER_PERMISSION_ADMIN.\"' ,\n                        '\".GROUP_USER_PERMISSION_READER.\"',\n                        '\".GROUP_USER_PERMISSION_MODERATOR.\"',\n                        '\".GROUP_USER_PERMISSION_HRM.\"')\n                    \";\n        $sql = 'SELECT DISTINCT\n                  count(user_id) as count,\n                  g.picture,\n                  g.name,\n                  g.description,\n                  g.id ';\n\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN \".$this->access_url_rel_usergroup.\" a\n                    ON (g.id = a.usergroup_id)\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n            $urlId = api_get_current_access_url_id();\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $tbl_group g\n                    INNER JOIN $table_group_rel_user gu\n                    ON gu.usergroup_id = g.id\";\n        }\n        $sql .= \"\n                $where\n                $urlCondition\n                GROUP BY g.id\n                ORDER BY created_at DESC\n                LIMIT $num \";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            if ($withImage) {\n                $picture = $this->get_picture_group($row['id'], $row['picture'], 80);\n                $img = '<img src=\"'.$picture['file'].'\" />';\n                $row['picture'] = $img;\n            }\n            if (empty($row['id'])) {\n                continue;\n            }\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets the group's members.\n     *\n     * @param int group id\n     * @param bool show image or not of the group\n     * @param array list of relation type use constants\n     * @param int from value\n     * @param int limit\n     * @param array image configuration, i.e array('height'=>'20px', 'size'=> '20px')\n     *\n     * @return array list of users in a group\n     */\n    public function get_users_by_group(\n        $group_id,\n        $withImage = false,\n        $relation_type = [],\n        $from = null,\n        $limit = null\n    ) {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $group_id = (int) $group_id;\n\n        if (empty($group_id)) {\n            return [];\n        }\n\n        $limit_text = '';\n        if (isset($from) && isset($limit)) {\n            $from = (int) $from;\n            $limit = (int) $limit;\n            $limit_text = \"LIMIT $from, $limit\";\n        }\n\n        if (count($relation_type) == 0) {\n            $where_relation_condition = '';\n        } else {\n            $new_relation_type = [];\n            foreach ($relation_type as $rel) {\n                $rel = (int) $rel;\n                $new_relation_type[] = \"'$rel'\";\n            }\n            $relation_type = implode(',', $new_relation_type);\n            if (!empty($relation_type)) {\n                $where_relation_condition = \"AND gu.relation_type IN ($relation_type) \";\n            }\n        }\n\n        $sql = \"SELECT\n                    picture_uri as image,\n                    u.id,\n                    CONCAT (u.firstname,' ', u.lastname) as fullname,\n                    relation_type\n    \t\t    FROM $tbl_user u\n    \t\t    INNER JOIN $table_group_rel_user gu\n    \t\t\tON (gu.user_id = u.id)\n    \t\t\tWHERE\n    \t\t\t    gu.usergroup_id= $group_id\n    \t\t\t    $where_relation_condition\n    \t\t\tORDER BY relation_type, firstname\n    \t\t\t$limit_text\";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            if ($withImage) {\n                $userInfo = api_get_user_info($row['id']);\n                $userPicture = UserManager::getUserPicture($row['id']);\n                $row['image'] = '<img src=\"'.$userPicture.'\"  />';\n                $row['user_info'] = $userInfo;\n            }\n\n            $row['user_id'] = $row['id'];\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Gets all the members of a group no matter the relationship for\n     * more specifications use get_users_by_group.\n     *\n     * @param int group id\n     *\n     * @return array\n     */\n    public function get_all_users_by_group($group_id)\n    {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $group_id = (int) $group_id;\n\n        if (empty($group_id)) {\n            return [];\n        }\n\n        $sql = \"SELECT u.id, u.firstname, u.lastname, relation_type\n                FROM $tbl_user u\n\t\t\t    INNER JOIN $table_group_rel_user gu\n\t\t\t    ON (gu.user_id = u.id)\n\t\t\t    WHERE gu.usergroup_id= $group_id\n\t\t\t    ORDER BY relation_type, firstname\";\n\n        $result = Database::query($sql);\n        $array = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $array[$row['id']] = $row;\n        }\n\n        return $array;\n    }\n\n    /**\n     * Shows the left column of the group page.\n     *\n     * @param int    $group_id\n     * @param int    $user_id\n     * @param string $show\n     *\n     * @return string\n     */\n    public function show_group_column_information($group_id, $user_id, $show = '')\n    {\n        $html = '';\n        $group_info = $this->get($group_id);\n\n        //my relation with the group is set here\n        $my_group_role = $this->get_user_group_role($user_id, $group_id);\n\n        // Loading group permission\n        $links = '';\n        switch ($my_group_role) {\n            case GROUP_USER_PERMISSION_READER:\n                // I'm just a reader\n                $relation_group_title = get_lang('IAmAReader');\n                $links .= '<li class=\"'.($show == 'invite_friends' ? 'active' : '').'\"><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                if (self::canLeave($group_info)) {\n                    $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                        Display::return_icon('group_leave.png', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                }\n                break;\n            case GROUP_USER_PERMISSION_ADMIN:\n                $relation_group_title = get_lang('IAmAnAdmin');\n                $links .= '<li class=\"'.($show == 'group_edit' ? 'active' : '').'\"><a href=\"group_edit.php?id='.$group_id.'\">'.\n                            Display::return_icon('group_edit.png', get_lang('EditGroup')).get_lang('EditGroup').'</a></li>';\n                $links .= '<li class=\"'.($show == 'member_list' ? 'active' : '').'\"><a href=\"group_waiting_list.php?id='.$group_id.'\">'.\n                            Display::return_icon('waiting_list.png', get_lang('WaitingList')).get_lang('WaitingList').'</a></li>';\n                $links .= '<li class=\"'.($show == 'invite_friends' ? 'active' : '').'\"><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                if (self::canLeave($group_info)) {\n                    $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                        Display::return_icon('group_leave.png', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                }\n                break;\n            case GROUP_USER_PERMISSION_PENDING_INVITATION:\n//\t\t\t\t$links .=  '<li><a href=\"groups.php?id='.$group_id.'&action=join&u='.api_get_user_id().'\">'.Display::return_icon('addd.gif', get_lang('YouHaveBeenInvitedJoinNow'), array('hspace'=>'6')).'<span class=\"social-menu-text4\" >'.get_lang('YouHaveBeenInvitedJoinNow').'</span></a></li>';\n                break;\n            case GROUP_USER_PERMISSION_PENDING_INVITATION_SENT_BY_USER:\n                $relation_group_title = get_lang('WaitingForAdminResponse');\n                break;\n            case GROUP_USER_PERMISSION_MODERATOR:\n                $relation_group_title = get_lang('IAmAModerator');\n                //$links .=  '<li><a href=\"'.api_get_path(WEB_CODE_PATH).'social/message_for_group_form.inc.php?view_panel=1&height=400&width=610&&user_friend='.api_get_user_id().'&group_id='.$group_id.'&action=add_message_group\" class=\"thickbox\" title=\"'.get_lang('ComposeMessage').'\">'.Display::return_icon('compose_message.png', get_lang('NewTopic'), array('hspace'=>'6')).'<span class=\"social-menu-text4\" >'.get_lang('NewTopic').'</span></a></li>';\n                //$links .=  '<li><a href=\"groups.php?id='.$group_id.'\">'.\t\t\t\tDisplay::return_icon('message_list.png', get_lang('MessageList'), array('hspace'=>'6')).'<span class=\"'.($show=='messages_list'?'social-menu-text-active':'social-menu-text4').'\" >'.get_lang('MessageList').'</span></a></li>';\n                //$links .=  '<li><a href=\"group_members.php?id='.$group_id.'\">'.\t\tDisplay::return_icon('member_list.png', get_lang('MemberList'), array('hspace'=>'6')).'<span class=\"'.($show=='member_list'?'social-menu-text-active':'social-menu-text4').'\" >'.get_lang('MemberList').'</span></a></li>';\n                if ($group_info['visibility'] == GROUP_PERMISSION_CLOSED) {\n                    $links .= '<li><a href=\"group_waiting_list.php?id='.$group_id.'\">'.\n                                Display::return_icon('waiting_list.png', get_lang('WaitingList')).get_lang('WaitingList').'</a></li>';\n                }\n                $links .= '<li><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                if (self::canLeave($group_info)) {\n                    $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                        Display::return_icon('group_leave.png', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                }\n                break;\n            case GROUP_USER_PERMISSION_HRM:\n                $relation_group_title = get_lang('IAmAHRM');\n                $links .= '<li><a href=\"'.api_get_path(WEB_CODE_PATH).'social/message_for_group_form.inc.php?view_panel=1&height=400&width=610&&user_friend='.api_get_user_id().'&group_id='.$group_id.'&action=add_message_group\" class=\"ajax\" title=\"'.get_lang('ComposeMessage').'\" data-size=\"lg\" data-title=\"'.get_lang('ComposeMessage').'\">'.\n                            Display::return_icon('new-message.png', get_lang('NewTopic')).get_lang('NewTopic').'</a></li>';\n                $links .= '<li><a href=\"group_view.php?id='.$group_id.'\">'.\n                            Display::return_icon('message_list.png', get_lang('MessageList')).get_lang('MessageList').'</a></li>';\n                $links .= '<li><a href=\"group_invitation.php?id='.$group_id.'\">'.\n                            Display::return_icon('invitation_friend.png', get_lang('InviteFriends')).get_lang('InviteFriends').'</a></li>';\n                $links .= '<li><a href=\"group_members.php?id='.$group_id.'\">'.\n                            Display::return_icon('member_list.png', get_lang('MemberList')).get_lang('MemberList').'</a></li>';\n                $links .= '<li><a href=\"group_view.php?id='.$group_id.'&action=leave&u='.api_get_user_id().'\">'.\n                            Display::return_icon('delete_data.gif', get_lang('LeaveGroup')).get_lang('LeaveGroup').'</a></li>';\n                break;\n            default:\n                //$links .=  '<li><a href=\"groups.php?id='.$group_id.'&action=join&u='.api_get_user_id().'\">'.Display::return_icon('addd.gif', get_lang('JoinGroup'), array('hspace'=>'6')).'<span class=\"social-menu-text4\" >'.get_lang('JoinGroup').'</a></span></li>';\n                break;\n        }\n        if (!empty($links)) {\n            $list = '<ul class=\"nav nav-pills\">';\n            $list .= $links;\n            $list .= '</ul>';\n            $html .= Display::panelCollapse(\n                get_lang('SocialGroups'),\n                $list,\n                'sm-groups',\n                [],\n                'groups-acordeon',\n                'groups-collapse'\n            );\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param int $group_id\n     * @param int $topic_id\n     */\n    public function delete_topic($group_id, $topic_id)\n    {\n        $table_message = Database::get_main_table(TABLE_MESSAGE);\n        $topic_id = (int) $topic_id;\n        $group_id = (int) $group_id;\n\n        $sql = \"UPDATE $table_message SET\n                    msg_status = 3\n                WHERE\n                    group_id = $group_id AND\n                    (id = '$topic_id' OR parent_id = $topic_id)\n                \";\n        Database::query($sql);\n    }\n\n    /**\n     * @param string $user_id\n     * @param string $relation_type\n     * @param bool   $with_image\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function get_groups_by_user_count(\n        $user_id = '',\n        $relation_type = GROUP_USER_PERMISSION_READER,\n        $with_image = false\n    ) {\n        $table_group_rel_user = $this->usergroup_rel_user_table;\n        $tbl_group = $this->table;\n        $user_id = intval($user_id);\n\n        if ($relation_type == 0) {\n            $where_relation_condition = '';\n        } else {\n            $relation_type = intval($relation_type);\n            $where_relation_condition = \"AND gu.relation_type = $relation_type \";\n        }\n\n        $sql = \"SELECT count(g.id) as count\n\t\t\t\tFROM $tbl_group g\n\t\t\t\tINNER JOIN $table_group_rel_user gu\n\t\t\t\tON gu.usergroup_id = g.id\n\t\t\t\tWHERE gu.user_id = $user_id $where_relation_condition \";\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            return $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param string $tag\n     * @param int    $from\n     * @param int    $number_of_items\n     *\n     * @return array\n     */\n    public function get_all_group_tags($tag = '', $from = 0, $number_of_items = 10, $getCount = false)\n    {\n        $group_table = $this->table;\n        $tag = Database::escape_string($tag);\n        $from = (int) $from;\n        $number_of_items = (int) $number_of_items;\n        $return = [];\n\n        $keyword = $tag;\n        $sql = 'SELECT  g.id, g.name, g.description, g.url, g.picture ';\n        $urlCondition = '';\n        if ($this->getUseMultipleUrl()) {\n            $urlId = api_get_current_access_url_id();\n            $sql .= \" FROM $this->table g\n                    INNER JOIN $this->access_url_rel_usergroup a\n                    ON (g.id = a.usergroup_id)\";\n            $urlCondition = \" AND access_url_id = $urlId \";\n        } else {\n            $sql .= \" FROM $group_table g\";\n        }\n        if (isset($keyword)) {\n            $sql .= \" WHERE (\n                        g.name LIKE '%\".$keyword.\"%' OR\n                        g.description LIKE '%\".$keyword.\"%' OR\n                        g.url LIKE '%\".$keyword.\"%'\n                     ) $urlCondition\n                     \";\n        } else {\n            $sql .= \" WHERE 1 = 1 $urlCondition \";\n        }\n\n        $direction = 'ASC';\n        if (!in_array($direction, ['ASC', 'DESC'])) {\n            $direction = 'ASC';\n        }\n\n        $from = (int) $from;\n        $number_of_items = (int) $number_of_items;\n        $sql .= \" LIMIT $from, $number_of_items\";\n\n        $res = Database::query($sql);\n        if (Database::num_rows($res) > 0) {\n            while ($row = Database::fetch_array($res, 'ASSOC')) {\n                if (!in_array($row['id'], $return)) {\n                    $return[$row['id']] = $row;\n                }\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     * @param int $group_id\n     *\n     * @return array\n     */\n    public static function get_parent_groups($group_id)\n    {\n        $t_rel_group = Database::get_main_table(TABLE_USERGROUP_REL_USERGROUP);\n        $group_id = (int) $group_id;\n\n        $max_level = 10;\n        $select_part = 'SELECT ';\n        $cond_part = '';\n        for ($i = 1; $i <= $max_level; $i++) {\n            $rg_number = $i - 1;\n            if ($i == $max_level) {\n                $select_part .= \"rg$rg_number.group_id as id_$rg_number \";\n            } else {\n                $select_part .= \"rg$rg_number.group_id as id_$rg_number, \";\n            }\n            if ($i == 1) {\n                $cond_part .= \"FROM $t_rel_group rg0\n                               LEFT JOIN $t_rel_group rg$i\n                               ON rg$rg_number.group_id = rg$i.subgroup_id \";\n            } else {\n                $cond_part .= \" LEFT JOIN $t_rel_group rg$i\n                                ON rg$rg_number.group_id = rg$i.subgroup_id \";\n            }\n        }\n        $sql = $select_part.' '.$cond_part.\"WHERE rg0.subgroup_id='$group_id'\";\n        $res = Database::query($sql);\n        $temp_arr = Database::fetch_array($res, 'NUM');\n        $toReturn = [];\n        if (is_array($temp_arr)) {\n            foreach ($temp_arr as $elt) {\n                if (isset($elt)) {\n                    $toReturn[] = $elt;\n                }\n            }\n        }\n\n        return $toReturn;\n    }\n\n    /**\n     * Get the group member list by a user and his group role.\n     *\n     * @param int  $userId                The user ID\n     * @param int  $relationType          Optional. The relation type. GROUP_USER_PERMISSION_ADMIN by default\n     * @param bool $includeSubgroupsUsers Optional. Whether include the users from subgroups\n     *\n     * @return array\n     */\n    public function getGroupUsersByUser(\n        $userId,\n        $relationType = GROUP_USER_PERMISSION_ADMIN,\n        $includeSubgroupsUsers = true\n    ) {\n        $userId = (int) $userId;\n        $groups = $this->get_groups_by_user($userId, $relationType);\n        $groupsId = array_keys($groups);\n        $subgroupsId = [];\n        $userIdList = [];\n\n        if ($includeSubgroupsUsers) {\n            foreach ($groupsId as $groupId) {\n                $subgroupsId = array_merge($subgroupsId, self::getGroupsByDepthLevel($groupId));\n            }\n\n            $groupsId = array_merge($groupsId, $subgroupsId);\n        }\n\n        $groupsId = array_unique($groupsId);\n\n        if (empty($groupsId)) {\n            return [];\n        }\n\n        foreach ($groupsId as $groupId) {\n            $groupUsers = $this->get_users_by_group($groupId);\n\n            if (empty($groupUsers)) {\n                continue;\n            }\n\n            foreach ($groupUsers as $member) {\n                if ($member['user_id'] == $userId) {\n                    continue;\n                }\n\n                $userIdList[] = (int) $member['user_id'];\n            }\n        }\n\n        return array_unique($userIdList);\n    }\n\n    /**\n     * Get the subgroups ID from a group.\n     * The default $levels value is 10 considering it as a extensive level of depth.\n     *\n     * @param int $groupId The parent group ID\n     * @param int $levels  The depth levels\n     *\n     * @return array The list of ID\n     */\n    public static function getGroupsByDepthLevel($groupId, $levels = 10)\n    {\n        $groups = [];\n        $groupId = (int) $groupId;\n\n        $groupTable = Database::get_main_table(TABLE_USERGROUP);\n        $groupRelGroupTable = Database::get_main_table(TABLE_USERGROUP_REL_USERGROUP);\n\n        $select = 'SELECT ';\n        $from = \"FROM $groupTable g1 \";\n\n        for ($i = 1; $i <= $levels; $i++) {\n            $tableIndexNumber = $i;\n            $tableIndexJoinNumber = $i - 1;\n            $select .= \"g$i.id as id_$i \";\n            $select .= $i != $levels ? ', ' : null;\n\n            if ($i == 1) {\n                $from .= \" INNER JOIN $groupRelGroupTable gg0\n                           ON g1.id = gg0.subgroup_id and gg0.group_id = $groupId \";\n            } else {\n                $from .= \"LEFT JOIN $groupRelGroupTable gg$tableIndexJoinNumber \";\n                $from .= \" ON g$tableIndexJoinNumber.id = gg$tableIndexJoinNumber.group_id \";\n                $from .= \"LEFT JOIN $groupTable g$tableIndexNumber \";\n                $from .= \" ON gg$tableIndexJoinNumber.subgroup_id = g$tableIndexNumber.id \";\n            }\n        }\n\n        $result = Database::query(\"$select $from\");\n\n        while ($item = Database::fetch_assoc($result)) {\n            foreach ($item as $myGroupId) {\n                if (!empty($myGroupId)) {\n                    $groups[] = $myGroupId;\n                }\n            }\n        }\n\n        return array_map('intval', $groups);\n    }\n\n    /**\n     * Set a parent group.\n     *\n     * @param int $group_id\n     * @param int $parent_group_id if 0, we delete the parent_group association\n     * @param int $relation_type\n     *\n     * @return \\Doctrine\\DBAL\\Statement\n     */\n    public function setParentGroup($group_id, $parent_group_id, $relation_type = 1)\n    {\n        $table = Database::get_main_table(TABLE_USERGROUP_REL_USERGROUP);\n        $group_id = (int) $group_id;\n        $parent_group_id = (int) $parent_group_id;\n        if ($parent_group_id == 0) {\n            $sql = \"DELETE FROM $table WHERE subgroup_id = $group_id\";\n        } else {\n            $sql = \"SELECT group_id FROM $table WHERE subgroup_id = $group_id\";\n            $res = Database::query($sql);\n            if (Database::num_rows($res) == 0) {\n                $sql = \"INSERT INTO $table SET\n                        group_id = $parent_group_id,\n                        subgroup_id = $group_id,\n                        relation_type = $relation_type\";\n            } else {\n                $sql = \"UPDATE $table SET\n                        group_id = $parent_group_id,\n                        relation_type = $relation_type\n                        WHERE subgroup_id = $group_id\";\n            }\n        }\n        $res = Database::query($sql);\n\n        return $res;\n    }\n\n    /**\n     * Filter the groups/classes info to get a name list only.\n     *\n     * @param int $userId       The user ID\n     * @param int $filterByType Optional. The type of group\n     *\n     * @return array\n     */\n    public function getNameListByUser($userId, $filterByType = null)\n    {\n        $userClasses = $this->getUserGroupListByUser($userId, $filterByType);\n\n        return array_column($userClasses, 'name');\n    }\n\n    /**\n     * Get the HTML necessary for display the groups/classes name list.\n     *\n     * @param int $userId       The user ID\n     * @param int $filterByType Optional. The type of group\n     *\n     * @return string\n     */\n    public function getLabelsFromNameList($userId, $filterByType = null)\n    {\n        $groupsNameListParsed = $this->getNameListByUser($userId, $filterByType);\n\n        if (empty($groupsNameListParsed)) {\n            return '';\n        }\n\n        $nameList = '<ul class=\"list-unstyled\">';\n        foreach ($groupsNameListParsed as $name) {\n            $nameList .= '<li>'.Display::span($name, ['class' => 'label label-info']).'</li>';\n        }\n\n        $nameList .= '</ul>';\n\n        return $nameList;\n    }\n\n    /**\n     * @param array $groupInfo\n     *\n     * @return bool\n     */\n    public static function canLeave($groupInfo)\n    {\n        return $groupInfo['allow_members_leave_group'] == 1 ? true : false;\n    }\n\n    /**\n     * Check permissions and blocks the page.\n     *\n     * @param array $userGroupInfo\n     * @param bool  $checkAuthor\n     * @param bool  $checkCourseIsAllow\n     */\n    public function protectScript($userGroupInfo = [], $checkAuthor = true, $checkCourseIsAllow = false)\n    {\n        api_block_anonymous_users();\n\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        if ($checkCourseIsAllow) {\n            if (api_is_allowed_to_edit()) {\n                return true;\n            }\n        }\n\n        if ($this->allowTeachers() && api_is_teacher()) {\n            if ($checkAuthor && !empty($userGroupInfo)) {\n                if (isset($userGroupInfo['author_id']) && $userGroupInfo['author_id'] != api_get_user_id()) {\n                    api_not_allowed(true);\n                }\n            }\n\n            return true;\n        } else {\n            api_protect_admin_script(true);\n            api_protect_limit_for_session_admin();\n        }\n    }\n\n    public function getGroupsByLp($lpId, $courseId, $sessionId)\n    {\n        $lpId = (int) $lpId;\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n        $sessionCondition = api_get_session_condition($sessionId, true);\n        $table = Database::get_course_table(TABLE_LP_REL_USERGROUP);\n        $sql = \"SELECT usergroup_id FROM $table\n                WHERE\n                    c_id = $courseId AND\n                    lp_id = $lpId\n                    $sessionCondition\n                    \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    public function getGroupsByLpCategory($categoryId, $courseId, $sessionId)\n    {\n        $categoryId = (int) $categoryId;\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n        $sessionCondition = api_get_session_condition($sessionId, true);\n\n        $table = Database::get_course_table(TABLE_LP_CATEGORY_REL_USERGROUP);\n        $sql = \"SELECT usergroup_id FROM $table\n                WHERE\n                    c_id = $courseId AND\n                    lp_category_id = $categoryId\n                    $sessionCondition\n                \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n}\n"], "filenames": ["main/inc/lib/usergroup.lib.php"], "buggy_code_start_loc": [1969], "buggy_code_end_loc": [2007], "fixing_code_start_loc": [1969], "fixing_code_end_loc": [2003], "type": "CWE-79", "message": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the classes/usergroups management section.", "other": {"cve": {"id": "CVE-2023-37067", "sourceIdentifier": "cve@mitre.org", "published": "2023-07-07T17:15:10.223", "lastModified": "2023-07-13T17:25:58.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the classes/usergroups management section."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.20", "matchCriteriaId": "7C09DB8C-2B3F-4EE5-B478-546C468B1E04"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/c75ff227bcf00e9f88e9477b78eaeed9e0668905", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-120-2023-06-07-Low-impact-Low-risk-XSS-through-admin-account-classesusergroups-management", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/c75ff227bcf00e9f88e9477b78eaeed9e0668905"}}