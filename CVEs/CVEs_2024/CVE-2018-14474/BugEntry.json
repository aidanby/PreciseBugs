{"buggy_code": ["// Copyright (c) 2017 Sagar Gubbi. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage views\n\nimport (\n\t\"fmt\"\n\t\"github.com/s-gv/orangeforum/models\"\n\t\"github.com/s-gv/orangeforum/models/db\"\n\t\"github.com/s-gv/orangeforum/templates\"\n\t\"github.com/s-gv/orangeforum/utils\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar LoginHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tredirectURL, err := url.QueryUnescape(r.FormValue(\"next\"))\n\tif redirectURL == \"\" || err != nil {\n\t\tredirectURL = \"/\"\n\t}\n\tif sess.IsUserValid() {\n\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t\treturn\n\t}\n\n\tif r.Method == \"POST\" {\n\t\tuserName := r.PostFormValue(\"username\")\n\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\tif len(userName) > 200 || len(passwd) > 200 {\n\t\t\tfmt.Fprint(w, \"username / password too long.\")\n\t\t\treturn\n\t\t}\n\t\tif err = sess.Authenticate(userName, passwd); err == nil {\n\t\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t\t\treturn\n\t\t} else {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/login?next=\"+redirectURL, http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t}\n\ttemplates.Render(w, \"login.html\", map[string]interface{}{\n\t\t\"Common\":   readCommonData(r, sess),\n\t\t\"next\":     template.URL(url.QueryEscape(redirectURL)),\n\t\t\"LoginMsg\": models.Config(models.LoginMsg),\n\t})\n})\n\nfunc LogoutHandler(w http.ResponseWriter, r *http.Request) {\n\tdefer ErrServerHandler(w, r)\n\tClearSession(w, r)\n\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n}\n\nvar SignupHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tredirectURL, err := url.QueryUnescape(r.FormValue(\"next\"))\n\tif redirectURL == \"\" || err != nil {\n\t\tredirectURL = \"/\"\n\t}\n\tif sess.IsUserValid() && !sess.IsUserSuperAdmin() {\n\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t\treturn\n\t}\n\n\tisSignupDisabled := models.Config(models.SignupDisabled) != \"0\"\n\n\tif r.Method == \"POST\" {\n\t\tuserName := strings.TrimSpace(r.PostFormValue(\"username\"))\n\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\tpasswdConfirm := r.PostFormValue(\"confirm\")\n\t\temail := strings.TrimSpace(r.PostFormValue(\"email\"))\n\t\tif len(userName) < 2 || len(userName) > 32 {\n\t\t\tsess.SetFlashMsg(\"Username should have 2-32 characters.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif censored := censor(userName); censored != userName {\n\t\t\tsess.SetFlashMsg(\"Fix username: \" + censored)\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\thasSpecial := false\n\t\tfor _, ch := range userName {\n\t\t\tif (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z') && ch != '_' && (ch < '0' || ch > '9') {\n\t\t\t\thasSpecial = true\n\t\t\t}\n\t\t}\n\t\tif hasSpecial {\n\t\t\tsess.SetFlashMsg(\"Username can contain only alphabets, numbers, and underscore.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif models.ProbeUser(userName) {\n\t\t\tsess.SetFlashMsg(\"Username already registered.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif err := validatePasswd(passwd, passwdConfirm); err != nil {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif len(email) > 64 {\n\t\t\tsess.SetFlashMsg(\"Email should have fewer than 64 characters.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif isSignupDisabled && !sess.IsUserSuperAdmin() {\n\t\t\tErrForbiddenHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tmodels.CreateUser(userName, passwd, email)\n\t\tif sess.IsUserSuperAdmin() {\n\t\t\tsess.SetFlashMsg(\"User \" + userName + \" created\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tsess.Authenticate(userName, passwd)\n\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t}\n\ttemplates.Render(w, \"signup.html\", map[string]interface{}{\n\t\t\"Common\":     readCommonData(r, sess),\n\t\t\"next\":       template.URL(url.QueryEscape(redirectURL)),\n\t\t\"IsDisabled\": isSignupDisabled && !sess.IsUserSuperAdmin(),\n\t\t\"SignupMsg\":  models.Config(models.SignupMsg),\n\t})\n})\n\nvar ChangePasswdHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tuserName := r.FormValue(\"u\")\n\tcommonData := readCommonData(r, sess)\n\tif !sess.IsUserValid() {\n\t\tErrForbiddenHandler(w, r)\n\t\treturn\n\t}\n\tif userName != commonData.UserName && !commonData.IsSuperAdmin {\n\t\tErrForbiddenHandler(w, r)\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tif !commonData.IsSuperAdmin {\n\t\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\t\tif sess.Authenticate(userName, passwd) != nil {\n\t\t\t\tsess.SetFlashMsg(\"Current password incorrect.\")\n\t\t\t\thttp.Redirect(w, r, \"/changepass?u=\"+userName, http.StatusSeeOther)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tnewPasswd := r.PostFormValue(\"newpass\")\n\t\tnewPasswdConfirm := r.PostFormValue(\"confirm\")\n\t\tif err := validatePasswd(newPasswd, newPasswdConfirm); err != nil {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/changepass?u=\"+userName, http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif err := models.UpdateUserPasswd(userName, newPasswd); err != nil {\n\t\t\tlog.Panicf(\"[ERROR] Error changing password: %s\\n\", err)\n\t\t}\n\t\tif commonData.IsSuperAdmin {\n\t\t\tvar userID string\n\t\t\tdb.QueryRow(`SELECT id FROM users WHERE username=?;`, userName).Scan(&userID)\n\t\t\tdb.Exec(`DELETE FROM sessions WHERE userid=?;`, userID)\n\t\t}\n\t\tsess.SetFlashMsg(\"Password change successful.\")\n\t\thttp.Redirect(w, r, \"/changepass?u=\"+userName, http.StatusSeeOther)\n\t\treturn\n\t}\n\ttemplates.Render(w, \"changepass.html\", map[string]interface{}{\n\t\t\"Common\":   commonData,\n\t\t\"UserName\": userName,\n\t})\n})\n\nvar ForgotPasswdHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tif r.Method == \"POST\" {\n\t\tuserName := r.PostFormValue(\"username\")\n\t\tif userName == \"\" || len(userName) > 200 || !models.ProbeUser(userName) {\n\t\t\tsess.SetFlashMsg(\"Username doesn't exist.\")\n\t\t\thttp.Redirect(w, r, \"/forgotpass\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\temail := models.ReadUserEmail(userName)\n\t\tif !strings.ContainsRune(email, '@') {\n\t\t\tsess.SetFlashMsg(\"E-mail address not set. Contact site admin to reset the password.\")\n\t\t\thttp.Redirect(w, r, \"/forgotpass\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tforumName := models.Config(models.ForumName)\n\n\t\tresetToken := randSeq(40)\n\t\tdb.Exec(`UPDATE users SET reset_token=?, reset_token_date=? WHERE username=?;`, resetToken, int64(time.Now().Unix()), userName)\n\n\t\tresetLink := \"https://\" + r.Host + \"/resetpass?r=\" + resetToken\n\t\tsub := forumName + \" Password Recovery\"\n\t\tmsg := \"Someone (hopefully you) requested we reset your password at \" + forumName + \".\\r\\n\" +\n\t\t\t\"If you want to change it, visit \" + resetLink + \"\\r\\n\\r\\nIf not, just ignore this message.\"\n\t\tutils.SendMail(email, sub, msg)\n\t\tsess.SetFlashMsg(\"Password reset link sent to your e-mail.\")\n\t\thttp.Redirect(w, r, \"/login\", http.StatusSeeOther)\n\t\treturn\n\n\t}\n\ttemplates.Render(w, \"forgotpass.html\", map[string]interface{}{\n\t\t\"Common\": readCommonData(r, sess),\n\t})\n})\n\nvar ResetPasswdHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tresetToken := r.FormValue(\"r\")\n\tuserName, err := models.ReadUserNameByToken(resetToken)\n\tif err != nil {\n\t\tErrForbiddenHandler(w, r)\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\tpasswdConfirm := r.PostFormValue(\"confirm\")\n\t\tif err := validatePasswd(passwd, passwdConfirm); err != nil {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/resetpass?r=\"+resetToken, http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tmodels.UpdateUserPasswd(userName, passwd)\n\t\tsess.SetFlashMsg(\"Password change successful.\")\n\t\thttp.Redirect(w, r, \"/login\", http.StatusSeeOther)\n\t\treturn\n\t}\n\ttemplates.Render(w, \"resetpass.html\", map[string]interface{}{\n\t\t\"ResetToken\": resetToken,\n\t\t\"Common\":     readCommonData(r, sess),\n\t})\n})\n"], "fixing_code": ["// Copyright (c) 2017 Sagar Gubbi. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage views\n\nimport (\n\t\"fmt\"\n\t\"github.com/s-gv/orangeforum/models\"\n\t\"github.com/s-gv/orangeforum/models/db\"\n\t\"github.com/s-gv/orangeforum/templates\"\n\t\"github.com/s-gv/orangeforum/utils\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar LoginHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tredirectURL, err := url.QueryUnescape(r.FormValue(\"next\"))\n\tif err != nil || redirectURL == \"\" || redirectURL[0] != '/' {\n\t\tredirectURL = \"/\"\n\t}\n\tif sess.IsUserValid() {\n\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t\treturn\n\t}\n\n\tif r.Method == \"POST\" {\n\t\tuserName := r.PostFormValue(\"username\")\n\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\tif len(userName) > 200 || len(passwd) > 200 {\n\t\t\tfmt.Fprint(w, \"username / password too long.\")\n\t\t\treturn\n\t\t}\n\t\tif err = sess.Authenticate(userName, passwd); err == nil {\n\t\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t\t\treturn\n\t\t} else {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/login?next=\"+redirectURL, http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t}\n\ttemplates.Render(w, \"login.html\", map[string]interface{}{\n\t\t\"Common\":   readCommonData(r, sess),\n\t\t\"next\":     template.URL(url.QueryEscape(redirectURL)),\n\t\t\"LoginMsg\": models.Config(models.LoginMsg),\n\t})\n})\n\nfunc LogoutHandler(w http.ResponseWriter, r *http.Request) {\n\tdefer ErrServerHandler(w, r)\n\tClearSession(w, r)\n\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n}\n\nvar SignupHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tredirectURL, err := url.QueryUnescape(r.FormValue(\"next\"))\n\tif err != nil || redirectURL == \"\" || redirectURL[0] != '/' {\n\t\tredirectURL = \"/\"\n\t}\n\tif sess.IsUserValid() && !sess.IsUserSuperAdmin() {\n\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t\treturn\n\t}\n\n\tisSignupDisabled := models.Config(models.SignupDisabled) != \"0\"\n\n\tif r.Method == \"POST\" {\n\t\tuserName := strings.TrimSpace(r.PostFormValue(\"username\"))\n\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\tpasswdConfirm := r.PostFormValue(\"confirm\")\n\t\temail := strings.TrimSpace(r.PostFormValue(\"email\"))\n\t\tif len(userName) < 2 || len(userName) > 32 {\n\t\t\tsess.SetFlashMsg(\"Username should have 2-32 characters.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif censored := censor(userName); censored != userName {\n\t\t\tsess.SetFlashMsg(\"Fix username: \" + censored)\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\thasSpecial := false\n\t\tfor _, ch := range userName {\n\t\t\tif (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z') && ch != '_' && (ch < '0' || ch > '9') {\n\t\t\t\thasSpecial = true\n\t\t\t}\n\t\t}\n\t\tif hasSpecial {\n\t\t\tsess.SetFlashMsg(\"Username can contain only alphabets, numbers, and underscore.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif models.ProbeUser(userName) {\n\t\t\tsess.SetFlashMsg(\"Username already registered.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif err := validatePasswd(passwd, passwdConfirm); err != nil {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif len(email) > 64 {\n\t\t\tsess.SetFlashMsg(\"Email should have fewer than 64 characters.\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif isSignupDisabled && !sess.IsUserSuperAdmin() {\n\t\t\tErrForbiddenHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tmodels.CreateUser(userName, passwd, email)\n\t\tif sess.IsUserSuperAdmin() {\n\t\t\tsess.SetFlashMsg(\"User \" + userName + \" created\")\n\t\t\thttp.Redirect(w, r, \"/signup\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tsess.Authenticate(userName, passwd)\n\t\thttp.Redirect(w, r, redirectURL, http.StatusSeeOther)\n\t}\n\ttemplates.Render(w, \"signup.html\", map[string]interface{}{\n\t\t\"Common\":     readCommonData(r, sess),\n\t\t\"next\":       template.URL(url.QueryEscape(redirectURL)),\n\t\t\"IsDisabled\": isSignupDisabled && !sess.IsUserSuperAdmin(),\n\t\t\"SignupMsg\":  models.Config(models.SignupMsg),\n\t})\n})\n\nvar ChangePasswdHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tuserName := r.FormValue(\"u\")\n\tcommonData := readCommonData(r, sess)\n\tif !sess.IsUserValid() {\n\t\tErrForbiddenHandler(w, r)\n\t\treturn\n\t}\n\tif userName != commonData.UserName && !commonData.IsSuperAdmin {\n\t\tErrForbiddenHandler(w, r)\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tif !commonData.IsSuperAdmin {\n\t\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\t\tif sess.Authenticate(userName, passwd) != nil {\n\t\t\t\tsess.SetFlashMsg(\"Current password incorrect.\")\n\t\t\t\thttp.Redirect(w, r, \"/changepass?u=\"+userName, http.StatusSeeOther)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tnewPasswd := r.PostFormValue(\"newpass\")\n\t\tnewPasswdConfirm := r.PostFormValue(\"confirm\")\n\t\tif err := validatePasswd(newPasswd, newPasswdConfirm); err != nil {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/changepass?u=\"+userName, http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tif err := models.UpdateUserPasswd(userName, newPasswd); err != nil {\n\t\t\tlog.Panicf(\"[ERROR] Error changing password: %s\\n\", err)\n\t\t}\n\t\tif commonData.IsSuperAdmin {\n\t\t\tvar userID string\n\t\t\tdb.QueryRow(`SELECT id FROM users WHERE username=?;`, userName).Scan(&userID)\n\t\t\tdb.Exec(`DELETE FROM sessions WHERE userid=?;`, userID)\n\t\t}\n\t\tsess.SetFlashMsg(\"Password change successful.\")\n\t\thttp.Redirect(w, r, \"/changepass?u=\"+userName, http.StatusSeeOther)\n\t\treturn\n\t}\n\ttemplates.Render(w, \"changepass.html\", map[string]interface{}{\n\t\t\"Common\":   commonData,\n\t\t\"UserName\": userName,\n\t})\n})\n\nvar ForgotPasswdHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tif r.Method == \"POST\" {\n\t\tuserName := r.PostFormValue(\"username\")\n\t\tif userName == \"\" || len(userName) > 200 || !models.ProbeUser(userName) {\n\t\t\tsess.SetFlashMsg(\"Username doesn't exist.\")\n\t\t\thttp.Redirect(w, r, \"/forgotpass\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\temail := models.ReadUserEmail(userName)\n\t\tif !strings.ContainsRune(email, '@') {\n\t\t\tsess.SetFlashMsg(\"E-mail address not set. Contact site admin to reset the password.\")\n\t\t\thttp.Redirect(w, r, \"/forgotpass\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tforumName := models.Config(models.ForumName)\n\n\t\tresetToken := randSeq(40)\n\t\tdb.Exec(`UPDATE users SET reset_token=?, reset_token_date=? WHERE username=?;`, resetToken, int64(time.Now().Unix()), userName)\n\n\t\tresetLink := \"https://\" + r.Host + \"/resetpass?r=\" + resetToken\n\t\tsub := forumName + \" Password Recovery\"\n\t\tmsg := \"Someone (hopefully you) requested we reset your password at \" + forumName + \".\\r\\n\" +\n\t\t\t\"If you want to change it, visit \" + resetLink + \"\\r\\n\\r\\nIf not, just ignore this message.\"\n\t\tutils.SendMail(email, sub, msg)\n\t\tsess.SetFlashMsg(\"Password reset link sent to your e-mail.\")\n\t\thttp.Redirect(w, r, \"/login\", http.StatusSeeOther)\n\t\treturn\n\n\t}\n\ttemplates.Render(w, \"forgotpass.html\", map[string]interface{}{\n\t\t\"Common\": readCommonData(r, sess),\n\t})\n})\n\nvar ResetPasswdHandler = UA(func(w http.ResponseWriter, r *http.Request, sess Session) {\n\tresetToken := r.FormValue(\"r\")\n\tuserName, err := models.ReadUserNameByToken(resetToken)\n\tif err != nil {\n\t\tErrForbiddenHandler(w, r)\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tpasswd := r.PostFormValue(\"passwd\")\n\t\tpasswdConfirm := r.PostFormValue(\"confirm\")\n\t\tif err := validatePasswd(passwd, passwdConfirm); err != nil {\n\t\t\tsess.SetFlashMsg(err.Error())\n\t\t\thttp.Redirect(w, r, \"/resetpass?r=\"+resetToken, http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\t\tmodels.UpdateUserPasswd(userName, passwd)\n\t\tsess.SetFlashMsg(\"Password change successful.\")\n\t\thttp.Redirect(w, r, \"/login\", http.StatusSeeOther)\n\t\treturn\n\t}\n\ttemplates.Render(w, \"resetpass.html\", map[string]interface{}{\n\t\t\"ResetToken\": resetToken,\n\t\t\"Common\":     readCommonData(r, sess),\n\t})\n})\n"], "filenames": ["views/auth.go"], "buggy_code_start_loc": [23], "buggy_code_end_loc": [63], "fixing_code_start_loc": [23], "fixing_code_end_loc": [63], "type": "CWE-601", "message": "views/auth.go in Orange Forum 1.4.0 allows Open Redirection via the next parameter to /login or /signup.", "other": {"cve": {"id": "CVE-2018-14474", "sourceIdentifier": "cve@mitre.org", "published": "2018-07-20T18:29:00.277", "lastModified": "2018-10-29T16:48:51.910", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "views/auth.go in Orange Forum 1.4.0 allows Open Redirection via the next parameter to /login or /signup."}, {"lang": "es", "value": "views/auth.go en Orange Forum 1.4.0 permite la redirecci\u00f3n abierta mediante el par\u00e1metro next en /login o /signup."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:goodoldweb:orange_forum:1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "11A1CEBA-90DC-4CAA-8581-50AEC8878192"}]}]}], "references": [{"url": "https://github.com/s-gv/orangeforum/commit/1f6313cb3a1e755880fc1354f3e1efc4dd2dd4aa", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/s-gv/orangeforum/commit/1f6313cb3a1e755880fc1354f3e1efc4dd2dd4aa"}}