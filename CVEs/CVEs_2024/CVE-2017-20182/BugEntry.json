{"buggy_code": ["// Don't wait for the whole page to be loaded.\n// (include script at the bottom of the page.)\n\nvar Pagination = new function() {\n\n    this.init = function(processHash, document_containers, setHash) {\n\t\t// For each pagination node\n        var containers = new Array();\n\n        // Create new containers Array after each initialisation\n        // (init can be called several times, when the pagination is\n        // nested in a tabbed container.)\n\n        for (var i in document_containers)\n            $(document_containers[i]).find('.paginate-container').each(function() {\n                var container = $(this);\n                // Only execute once for each container.\n                // (remember that init() may be called multiple times,\n                // also after content was dynamically changed, because\n                // paginators could be added on the fly.)\n                if (! container.hasClass('paginate-container-initialized'))\n                {\n                    container.addClass('paginate-container-initialized');\n                    containers.push(container);\n                    set_up(container);\n                }\n            });\n\n\t\t// Make setHash = true the default\n        if (setHash == undefined)\n            setHash = true;\n\n        function scroll(hash) {\n            var target = $('[id=' + hash + ']');\n            if (target.length) {\n                  var offset = target.offset().top;\n                  $('html,body').animate({scrollTop: offset}, 350);\n            }\n        }\n\n        function set_up(container) {\n            // Find prev/next links\n            var prev = container.find('.pagination .prev');\n            var next = container.find('.pagination .next');\n\n            var prev_url = null, next_url = null;\n\n            if (prev.length)\n                prev_url = prev.attr('href');\n            if (next.length)\n                next_url = next.attr('href');\n\n            function ajax(url, handler) {\n                // URL should start with a slash, but cannot start with two slashes.\n                // (Otherwise we have an XSS vulnerability.)\n                if (url[0] != '/' || url[1] == '/')\n                    url = (''+location).replace( /[#\\?].*/, '') + url;\n\n                // Append 'xhr' to make sure all content is loaded.\n                if (url.indexOf('&xhr') < 0 && url.indexOf('?xhr') < 0)\n                    if (url.indexOf('?') < 0)\n                        url += '?xhr';\n                    else\n                        url += '&xhr';\n\n                $.ajax({\n                        type: 'GET',\n                        url: url,\n                        datatype: \"html\",\n                        cache: true,\n                        success: handler,\n                        error: function(xhr, ajaxOptions, thrownError) {\n                            handler($('<div/>').append(\n                                    $('<strong>').append(''+xhr.status + ' ' + thrownError)).html());\n                        }\n                });\n            }\n\n            function showLoader() {\n                var loader = $('.paginate-loading').eq(0);\n\n                for (var i in containers)\n                {\n                    // Keep containers height\n                    var height = containers[i].height();\n                    if (height < 50) height = 50;\n                    containers[i].css('height', height + 'px');\n\n                    // Show loader\n                    containers[i].empty();\n                    containers[i].append(loader.html());\n                }\n            }\n\n            // Replace page AJAX handler\n            function replacePage(url, receivedHtml) {\n\t\t\t\t// Set location hash\n\t\t\t\tif (setHash)\n\t\t\t\t\tlocation.hash = 'page:' + url;\n\n\n                for (var i in containers) {\n\t\t\t\t\t// Empty the paginate nodes\n                    containers[i].empty();\n                    containers[i].css('height', '');\n\n                    // Fill the paginate containers with the new content\n                    receivedHtml = $.trim(receivedHtml);\n                    $(receivedHtml).find('.paginate-container').eq(i).each(function() {\n                        containers[i].append($(this).html());\n                        set_up(containers[i]);\n                    });\n                }\n\n                // Trigger event (Only add trigger to $(document) )\n                $(document).trigger('paginatorPageReplaced', [ containers ]);\n\n                // When the URL contains a hash, scroll to that element\n                if (location.hash.substr(1).indexOf('#') > 0) {\n                    var hash = (''+location.hash).replace( /.*#/, '');\n                    scroll(hash);\n                }\n                // Otherwise, make sure that the top of the clicked paginator is visible\n                else {\n                    var paginatorTop = container.offset().top;\n\n                    if (paginatorTop < $(window).scrollTop() || paginatorTop > $(window).scrollTop() + $(window).height()) {\n                        $('html,body').animate({scrollTop: paginatorTop}, 350);\n                    }\n                }\n            }\n\n            // Process hash (link with # opened from bookmark)\n            if (processHash && location.hash.match( /^#page/)) {\n                var url = location.hash.replace( /^#page:/, '');\n                container.empty();\n                ajax(url, function(html) { replacePage(url,html); });\n            }\n            processHash = false; // Never process twice. (set_up is called recursively)\n\n            // Preload previous page\n            var previousPageHtml = null;\n            var nextPageHtml = null;\n            var clickedPrevious = false;\n            var clickedNext = false;\n\n            var preload = $('.pagination_preload').size() > 0;\n\n            if (preload) {\n\t\t\t\tif (prev_url)\n                    ajax(prev_url, function(html) {\n                        previousPageHtml = html;\n                        if (clickedPrevious) replacePage(prev_url, html);\n                    });\n                if (next_url)\n                    ajax(next_url, function(html) {\n                        nextPageHtml = html;\n                        if (clickedNext) replacePage(next_url, html);\n                    });\n\n                // Handle clicks on the prev/next buttons.\n                prev.click(function() {\n                    showLoader();\n                    if (previousPageHtml)\n                        replacePage(prev_url, previousPageHtml);\n                    else\n                        clickedPrevious = true;\n                    return false;\n                });\n\n                next.click(function() {\n                    showLoader();\n                    if (nextPageHtml)\n                        replacePage(next_url, nextPageHtml);\n                    else\n                        clickedNext = true;\n                    return false;\n                });\n            }\n\n            // The digg-paginator also contains direct links to other pages\n            // then only the prev and next page.\n            container.find('.pagination a, .pagination-helper a, a.pagination-helper').each(function() {\n\n                $(this).click(function (){\n                \tvar url = $(this).attr('href');\n                    showLoader();\n\n                    if (url[0] == '#') {\n                        var hash = url.replace( /#/, '');\n                        scroll(hash);\n                    }\n                    else\n                        ajax(url, function(html) {\n\t\t\t\t\t\t\treplacePage(url, html);\n                        });\n                    return false;\n                });\n            });\n\n            // Pagination forms are forms for which the result is displayed in the paginator\n            // They always have method=\"get\" and action=\"?\"\n            container.find('form.pagination-form').each(function() {\n                var form = $(this);\n                if (form.attr('method') == 'get' && form.attr('action').match(/.*?/)) {\n                    // Submit handler\n                    form.submit(function() {\n                        // Build submit query string\n                        var url = form.attr('action') + form.serialize();\n\n                        // AJAX request\n                        ajax(url, function(html) {\n                            replacePage(url, html);\n                        });\n                        return false;\n                    });\n                }\n            });\n        }\n    };\n};\n\n\n(function() {\n    Pagination.init(true, [ $(document) ]);\n\n    // When a XHR block has been loaded, call init() again,\n    // because it may contain a paginator.\n        // The location may have been filled with the tab url, so\n        // don't process it. (xhr can be nested inside tabs, so even in that case.\n    $(document).bind('xhrLoaded', function(e, containers) { Pagination.init(false, containers); });\n    $(document).bind('tabLoaded', function(e, containers) { Pagination.init(false, containers); });\n}) ();\n"], "fixing_code": ["// Don't wait for the whole page to be loaded.\n// (include script at the bottom of the page.)\n\nvar Pagination = new function() {\n\n    this.init = function(processHash, document_containers, setHash) {\n\t\t// For each pagination node\n        var containers = new Array();\n\n        // Create new containers Array after each initialisation\n        // (init can be called several times, when the pagination is\n        // nested in a tabbed container.)\n\n        for (var i in document_containers)\n            $(document_containers[i]).find('.paginate-container').each(function() {\n                var container = $(this);\n                // Only execute once for each container.\n                // (remember that init() may be called multiple times,\n                // also after content was dynamically changed, because\n                // paginators could be added on the fly.)\n                if (! container.hasClass('paginate-container-initialized'))\n                {\n                    container.addClass('paginate-container-initialized');\n                    containers.push(container);\n                    set_up(container);\n                }\n            });\n\n\t\t// Make setHash = true the default\n        if (setHash == undefined)\n            setHash = true;\n\n        function scroll(hash) {\n            var target = $('[id=' + hash + ']');\n            if (target.length) {\n                  var offset = target.offset().top;\n                  $('html,body').animate({scrollTop: offset}, 350);\n            }\n        }\n\n        function set_up(container) {\n            // Find prev/next links\n            var prev = container.find('.pagination .prev');\n            var next = container.find('.pagination .next');\n\n            var prev_url = null, next_url = null;\n\n            if (prev.length)\n                prev_url = prev.attr('href');\n            if (next.length)\n                next_url = next.attr('href');\n\n            function ajax(url, handler) {\n                // URL should start with a slash, but cannot start with two slashes.\n\t\t// we cannot start with \"/\\\". Modern browsers handle backslashes as normal slashes.\n                // (Otherwise we have an XSS vulnerability.)\n                if (url[0] != '/' || url[1] == '/' || url.startsWith(\"/\\\\\")\n                    url = (''+location).replace( /[#\\?].*/, '') + url;\n\n                // Append 'xhr' to make sure all content is loaded.\n                if (url.indexOf('&xhr') < 0 && url.indexOf('?xhr') < 0)\n                    if (url.indexOf('?') < 0)\n                        url += '?xhr';\n                    else\n                        url += '&xhr';\n\n                $.ajax({\n                        type: 'GET',\n                        url: url,\n                        datatype: \"html\",\n                        cache: true,\n                        success: handler,\n                        error: function(xhr, ajaxOptions, thrownError) {\n                            handler($('<div/>').append(\n                                    $('<strong>').append(''+xhr.status + ' ' + thrownError)).html());\n                        }\n                });\n            }\n\n            function showLoader() {\n                var loader = $('.paginate-loading').eq(0);\n\n                for (var i in containers)\n                {\n                    // Keep containers height\n                    var height = containers[i].height();\n                    if (height < 50) height = 50;\n                    containers[i].css('height', height + 'px');\n\n                    // Show loader\n                    containers[i].empty();\n                    containers[i].append(loader.html());\n                }\n            }\n\n            // Replace page AJAX handler\n            function replacePage(url, receivedHtml) {\n\t\t\t\t// Set location hash\n\t\t\t\tif (setHash)\n\t\t\t\t\tlocation.hash = 'page:' + url;\n\n\n                for (var i in containers) {\n\t\t\t\t\t// Empty the paginate nodes\n                    containers[i].empty();\n                    containers[i].css('height', '');\n\n                    // Fill the paginate containers with the new content\n                    receivedHtml = $.trim(receivedHtml);\n                    $(receivedHtml).find('.paginate-container').eq(i).each(function() {\n                        containers[i].append($(this).html());\n                        set_up(containers[i]);\n                    });\n                }\n\n                // Trigger event (Only add trigger to $(document) )\n                $(document).trigger('paginatorPageReplaced', [ containers ]);\n\n                // When the URL contains a hash, scroll to that element\n                if (location.hash.substr(1).indexOf('#') > 0) {\n                    var hash = (''+location.hash).replace( /.*#/, '');\n                    scroll(hash);\n                }\n                // Otherwise, make sure that the top of the clicked paginator is visible\n                else {\n                    var paginatorTop = container.offset().top;\n\n                    if (paginatorTop < $(window).scrollTop() || paginatorTop > $(window).scrollTop() + $(window).height()) {\n                        $('html,body').animate({scrollTop: paginatorTop}, 350);\n                    }\n                }\n            }\n\n            // Process hash (link with # opened from bookmark)\n            if (processHash && location.hash.match( /^#page/)) {\n                var url = location.hash.replace( /^#page:/, '');\n                container.empty();\n                ajax(url, function(html) { replacePage(url,html); });\n            }\n            processHash = false; // Never process twice. (set_up is called recursively)\n\n            // Preload previous page\n            var previousPageHtml = null;\n            var nextPageHtml = null;\n            var clickedPrevious = false;\n            var clickedNext = false;\n\n            var preload = $('.pagination_preload').size() > 0;\n\n            if (preload) {\n\t\t\t\tif (prev_url)\n                    ajax(prev_url, function(html) {\n                        previousPageHtml = html;\n                        if (clickedPrevious) replacePage(prev_url, html);\n                    });\n                if (next_url)\n                    ajax(next_url, function(html) {\n                        nextPageHtml = html;\n                        if (clickedNext) replacePage(next_url, html);\n                    });\n\n                // Handle clicks on the prev/next buttons.\n                prev.click(function() {\n                    showLoader();\n                    if (previousPageHtml)\n                        replacePage(prev_url, previousPageHtml);\n                    else\n                        clickedPrevious = true;\n                    return false;\n                });\n\n                next.click(function() {\n                    showLoader();\n                    if (nextPageHtml)\n                        replacePage(next_url, nextPageHtml);\n                    else\n                        clickedNext = true;\n                    return false;\n                });\n            }\n\n            // The digg-paginator also contains direct links to other pages\n            // then only the prev and next page.\n            container.find('.pagination a, .pagination-helper a, a.pagination-helper').each(function() {\n\n                $(this).click(function (){\n                \tvar url = $(this).attr('href');\n                    showLoader();\n\n                    if (url[0] == '#') {\n                        var hash = url.replace( /#/, '');\n                        scroll(hash);\n                    }\n                    else\n                        ajax(url, function(html) {\n\t\t\t\t\t\t\treplacePage(url, html);\n                        });\n                    return false;\n                });\n            });\n\n            // Pagination forms are forms for which the result is displayed in the paginator\n            // They always have method=\"get\" and action=\"?\"\n            container.find('form.pagination-form').each(function() {\n                var form = $(this);\n                if (form.attr('method') == 'get' && form.attr('action').match(/.*?/)) {\n                    // Submit handler\n                    form.submit(function() {\n                        // Build submit query string\n                        var url = form.attr('action') + form.serialize();\n\n                        // AJAX request\n                        ajax(url, function(html) {\n                            replacePage(url, html);\n                        });\n                        return false;\n                    });\n                }\n            });\n        }\n    };\n};\n\n\n(function() {\n    Pagination.init(true, [ $(document) ]);\n\n    // When a XHR block has been loaded, call init() again,\n    // because it may contain a paginator.\n        // The location may have been filled with the tab url, so\n        // don't process it. (xhr can be nested inside tabs, so even in that case.\n    $(document).bind('xhrLoaded', function(e, containers) { Pagination.init(false, containers); });\n    $(document).bind('tabLoaded', function(e, containers) { Pagination.init(false, containers); });\n}) ();\n"], "filenames": ["django_ajax/static/ajax-utilities/js/pagination.js"], "buggy_code_start_loc": [54], "buggy_code_end_loc": [57], "fixing_code_start_loc": [55], "fixing_code_end_loc": [58], "type": "CWE-79", "message": "A vulnerability was found in Mobile Vikings Django AJAX Utilities up to 1.2.1 and classified as problematic. This issue affects the function Pagination of the file django_ajax/static/ajax-utilities/js/pagination.js of the component Backslash Handler. The manipulation of the argument url leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 329eb1dd1580ca1f9d4f95bc69939833226515c9. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-222611.", "other": {"cve": {"id": "CVE-2017-20182", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-10T02:15:58.250", "lastModified": "2023-03-15T16:28:10.807", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Mobile Vikings Django AJAX Utilities up to 1.2.1 and classified as problematic. This issue affects the function Pagination of the file django_ajax/static/ajax-utilities/js/pagination.js of the component Backslash Handler. The manipulation of the argument url leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 329eb1dd1580ca1f9d4f95bc69939833226515c9. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-222611."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mobilevikings:django_ajax_utilities:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.1", "matchCriteriaId": "A8AA02EA-9287-4486-A26C-FB20EA9ABFAC"}]}]}], "references": [{"url": "https://github.com/mvpoland/django-ajax-utilities/commit/329eb1dd1580ca1f9d4f95bc69939833226515c9", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.222611", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.222611", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/mvpoland/django-ajax-utilities/commit/329eb1dd1580ca1f9d4f95bc69939833226515c9"}}