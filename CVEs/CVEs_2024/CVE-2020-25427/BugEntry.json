{"buggy_code": ["/*\n *\t\t\tGPAC - Multimedia Framework C SDK\n *\n *\t\t\tAuthors: Jean Le Feuvre\n *\t\t\tCopyright (c) Telecom ParisTech 2000-2012\n *\t\t\t\t\tAll rights reserved\n *\n *  This file is part of GPAC / ISO Media File Format sub-project\n *\n *  GPAC is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU Lesser General Public License as published by\n *  the Free Software Foundation; either version 2, or (at your option)\n *  any later version.\n *\n *  GPAC is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; see the file COPYING.  If not, write to\n *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n *\n */\n\n#include <gpac/internal/isomedia_dev.h>\n\n#ifndef GPAC_DISABLE_ISOM\n\n//only used in dump mode\nstatic Bool skip_box_dump_del = GF_FALSE;\nBool use_dump_mode = GF_FALSE;\n\n//Add this funct to handle incomplete files...\n//bytesExpected is 0 most of the time. If the file is incomplete, bytesExpected\n//is the number of bytes missing to parse the box...\nGF_Err gf_isom_parse_root_box(GF_Box **outBox, GF_BitStream *bs, u64 *bytesExpected, Bool progressive_mode)\n{\n\tGF_Err ret;\n\tu64 start;\n\tstart = gf_bs_get_position(bs);\n\tret = gf_isom_box_parse_ex(outBox, bs, 0, GF_TRUE);\n\tif (ret == GF_ISOM_INCOMPLETE_FILE) {\n\t\tif (!*outBox) {\n\t\t\t// We could not even read the box size, we at least need 8 bytes\n\t\t\t*bytesExpected = 8;\n\t\t\tGF_LOG(progressive_mode ? GF_LOG_DEBUG : GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Incomplete box - start \"LLU\"\\n\", start));\n\t\t}\n\t\telse {\n\t\t\tu32 type = (*outBox)->type;\n\t\t\tif (type==GF_ISOM_BOX_TYPE_UNKNOWN)\n\t\t\t\ttype = ((GF_UnknownBox *) (*outBox))->original_4cc;\n\n\t\t\t*bytesExpected = (*outBox)->size;\n\t\t\tGF_LOG(progressive_mode ? GF_LOG_DEBUG : GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Incomplete box %s - start \"LLU\" size \"LLU\"\\n\", gf_4cc_to_str(type), start, (*outBox)->size));\n\t\t\tgf_isom_box_del(*outBox);\n\t\t\t*outBox = NULL;\n\t\t}\n\t\tgf_bs_seek(bs, start);\n\t}\n\treturn ret;\n}\n\nu32 gf_isom_solve_uuid_box(char *UUID)\n{\n\tu32 i;\n\tchar strUUID[33], strChar[3];\n\tstrUUID[0] = 0;\n\tstrUUID[32] = 0;\n\tfor (i=0; i<16; i++) {\n\t\tsnprintf(strChar, 3, \"%02X\", (unsigned char) UUID[i]);\n\t\tstrcat(strUUID, strChar);\n\t}\n\tif (!strnicmp(strUUID, \"8974dbce7be74c5184f97148f9882554\", 32))\n\t\treturn GF_ISOM_BOX_UUID_TENC;\n\tif (!strnicmp(strUUID, \"A5D40B30E81411DDBA2F0800200C9A66\", 32))\n\t\treturn GF_ISOM_BOX_UUID_MSSM;\n\tif (!strnicmp(strUUID, \"D4807EF2CA3946958E5426CB9E46A79F\", 32))\n\t\treturn GF_ISOM_BOX_UUID_TFRF;\n\tif (!strnicmp(strUUID, \"6D1D9B0542D544E680E2141DAFF757B2\", 32))\n\t\treturn GF_ISOM_BOX_UUID_TFXD;\n\tif (!strnicmp(strUUID, \"A2394F525A9B4F14A2446C427C648DF4\", 32))\n\t\treturn GF_ISOM_BOX_UUID_PSEC;\n\tif (!strnicmp(strUUID, \"D08A4F1810F34A82B6C832D8ABA183D3\", 32))\n\t\treturn GF_ISOM_BOX_UUID_PSSH;\n\n\treturn 0;\n}\n\nstatic GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs);\n\nGF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box)\n{\n\tu32 type, uuid_type, hdr_size;\n\tu64 size, start, payload_start, end;\n\tchar uuid[16];\n\tGF_Err e;\n\tGF_Box *newBox;\n\tBool skip_logs = gf_bs_get_cookie(bs) ? GF_TRUE : GF_FALSE;\n\tBool is_special = GF_TRUE;\n\n\tif ((bs == NULL) || (outBox == NULL) ) return GF_BAD_PARAM;\n\t*outBox = NULL;\n\tif (gf_bs_available(bs) < 8) {\n\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t}\n\n\tstart = gf_bs_get_position(bs);\n\n\tuuid_type = 0;\n\tsize = (u64) gf_bs_read_u32(bs);\n\thdr_size = 4;\n\t/*fix for some boxes found in some old hinted files*/\n\tif ((size >= 2) && (size <= 4)) {\n\t\tsize = 4;\n\t\ttype = GF_ISOM_BOX_TYPE_VOID;\n\t} else {\n\t\ttype = gf_bs_read_u32(bs);\n\t\thdr_size += 4;\n\t\t/*no size means till end of file - EXCEPT FOR some old QuickTime boxes...*/\n\t\tif (type == GF_ISOM_BOX_TYPE_TOTL)\n\t\t\tsize = 12;\n\t\tif (!size) {\n\t\t\tif (is_root_box) {\n\t\t\t\tif (!skip_logs) {\n\t\t\t\t\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Warning Read Box type %s (0x%08X) size 0 reading till the end of file\\n\", gf_4cc_to_str(type), type));\n\t\t\t\t}\n\t\t\t\tsize = gf_bs_available(bs) + 8;\n\t\t\t} else {\n\t\t\t\tif (!skip_logs) {\n\t\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box type %s (0x%08X) at position \"LLU\" has size 0 but is not at root/file level, skipping\\n\", gf_4cc_to_str(type), type, start));\n\t\t\t\t}\n\t\t\t\treturn GF_OK;\n//\t\t\t\treturn GF_ISOM_INVALID_FILE;\n\t\t\t}\n\t\t}\n\t}\n\t/*handle uuid*/\n\tmemset(uuid, 0, 16);\n\tif (type == GF_ISOM_BOX_TYPE_UUID ) {\n\t\tif (gf_bs_available(bs) < 16) {\n\t\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t\t}\n\t\tgf_bs_read_data(bs, uuid, 16);\n\t\thdr_size += 16;\n\t\tuuid_type = gf_isom_solve_uuid_box(uuid);\n\t}\n\n\t//handle large box\n\tif (size == 1) {\n\t\tif (gf_bs_available(bs) < 8) {\n\t\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t\t}\n\t\tsize = gf_bs_read_u64(bs);\n\t\thdr_size += 8;\n\t}\n\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Read Box type %s size \"LLD\" start \"LLD\"\\n\", gf_4cc_to_str(type), LLD_CAST size, LLD_CAST start));\n\n\tif ( size < hdr_size ) {\n\t\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Box size \"LLD\" less than box header size %d\\n\", LLD_CAST size, hdr_size));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\n\t//some special boxes (references and track groups) are handled by a single generic box with an associated ref/group type\n\tif (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TREF)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_TrackReferenceTypeBox*)newBox)->reference_type = type;\n\t} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_IREF)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFI);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_ItemReferenceTypeBox*)newBox)->reference_type = type;\n\t} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TRGR)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGT);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_TrackGroupTypeBox*)newBox)->group_type = type;\n\t} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_GRPL)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_GRPT);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_EntityToGroupTypeBox*)newBox)->grouping_type = type;\n\t} else {\n\t\t//OK, create the box based on the type\n\t\tis_special = GF_FALSE;\n\t\tnewBox = gf_isom_box_new_ex(uuid_type ? uuid_type : type, parent_type, skip_logs, is_root_box);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t}\n\n\t//OK, init and read this box\n\tif (type==GF_ISOM_BOX_TYPE_UUID && !is_special) {\n\t\tmemcpy(((GF_UUIDBox *)newBox)->uuid, uuid, 16);\n\t\t((GF_UUIDBox *)newBox)->internal_4cc = uuid_type;\n\t}\n\n\tif (!newBox->type) newBox->type = type;\n\tpayload_start = gf_bs_get_position(bs);\n\nretry_unknown_box:\n\n\tend = gf_bs_available(bs);\n\tif (size - hdr_size > end ) {\n\t\tnewBox->size = size - hdr_size - end;\n\t\t*outBox = newBox;\n\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t}\n\n\tnewBox->size = size - hdr_size;\n\n\tif (newBox->size) {\n\t\te = gf_isom_full_box_read(newBox, bs);\n\t\tif (!e) e = gf_isom_box_read(newBox, bs);\n\t\tnewBox->size = size;\n\t\tend = gf_bs_get_position(bs);\n\t} else {\n\t\tnewBox->size = size;\n\t\t//empty box\n\t\te = GF_OK;\n\t\tend = gf_bs_get_position(bs);\n\t}\n\n\tif (e && (e != GF_ISOM_INCOMPLETE_FILE)) {\n\t\tgf_isom_box_del(newBox);\n\t\t*outBox = NULL;\n\n\t\tif (parent_type==GF_ISOM_BOX_TYPE_STSD) {\n\t\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);\n\t\t\t((GF_UnknownBox *)newBox)->original_4cc = type;\n\t\t\tnewBox->size = size;\n\t\t\tgf_bs_seek(bs, payload_start);\n\t\t\tgoto retry_unknown_box;\n\t\t}\n\t\tif (!skip_logs) {\n\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box \\\"%s\\\" (start \"LLU\") failed (%s) - skipping\\n\", gf_4cc_to_str(type), start, gf_error_to_string(e)));\n\t\t}\n\t\t//we don't try to reparse known boxes that have been failing (too dangerous)\n\t\treturn e;\n\t}\n\n\tif (end-start > size) {\n\t\tif (!skip_logs) {\n\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" size \"LLU\" (start \"LLU\") invalid (read \"LLU\")\\n\", gf_4cc_to_str(type), LLU_CAST size, start, LLU_CAST (end-start) ));\n\t\t}\n\t\t/*let's still try to load the file since no error was notified*/\n\t\tgf_bs_seek(bs, start+size);\n\t} else if (end-start < size) {\n\t\tu32 to_skip = (u32) (size-(end-start));\n\t\tif (!skip_logs) {\n\t\t\tif ((to_skip!=4) || gf_bs_peek_bits(bs, 32, 0)) {\n\t\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" (start \"LLU\") has %u extra bytes\\n\", gf_4cc_to_str(type), start, to_skip));\n\t\t\t}\n\t\t}\n\t\tgf_bs_skip_bytes(bs, to_skip);\n\t}\n\t*outBox = newBox;\n\n\treturn e;\n}\n\nGF_EXPORT\nGF_Err gf_isom_box_parse(GF_Box **outBox, GF_BitStream *bs)\n{\n\treturn gf_isom_box_parse_ex(outBox, bs, 0, GF_FALSE);\n}\n\nvoid gf_isom_box_array_del(GF_List *other_boxes)\n{\n\tu32 count, i;\n\tGF_Box *a;\n\tif (!other_boxes) return;\n\tcount = gf_list_count(other_boxes);\n\tfor (i = 0; i < count; i++) {\n\t\ta = (GF_Box *)gf_list_get(other_boxes, i);\n\t\tif (a) gf_isom_box_del(a);\n\t}\n\tgf_list_del(other_boxes);\n}\n\n\nGF_Err gf_isom_box_array_read(GF_Box *parent, GF_BitStream *bs, GF_Err (*add_box)(GF_Box *par, GF_Box *b))\n{\n\treturn gf_isom_box_array_read_ex(parent, bs, add_box, parent->type);\n}\n\n#ifndef GPAC_DISABLE_ISOM_WRITE\n\nGF_EXPORT\nGF_Err gf_isom_box_write_header(GF_Box *ptr, GF_BitStream *bs)\n{\n\tu64 start;\n\tif (! bs || !ptr) return GF_BAD_PARAM;\n\tif (!ptr->size) return GF_ISOM_INVALID_FILE;\n\n\tstart = gf_bs_get_position(bs);\n\tif (ptr->size > 0xFFFFFFFF) {\n\t\tgf_bs_write_u32(bs, 1);\n\t} else {\n\t\tgf_bs_write_u32(bs, (u32) ptr->size);\n\t}\n\tgf_bs_write_u32(bs, ptr->type);\n\tif (ptr->type == GF_ISOM_BOX_TYPE_UUID) {\n\t\tu32 i;\n\t\tchar uuid[16];\n\t\tchar strUUID[32];\n\n\t\tswitch (((GF_UUIDBox*)ptr)->internal_4cc) {\n\t\tcase GF_ISOM_BOX_UUID_TENC:\n\t\t\tmemcpy(strUUID, \"8974dbce7be74c5184f97148f9882554\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_PSEC:\n\t\t\tmemcpy(strUUID, \"A2394F525A9B4F14A2446C427C648DF4\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_MSSM:\n\t\t\tmemcpy(strUUID, \"A5D40B30E81411DDBA2F0800200C9A66\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_PSSH:\n\t\t\tmemcpy(strUUID, \"D08A4F1810F34A82B6C832D8ABA183D3\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_TFXD:\n\t\t\tmemcpy(strUUID, \"6D1D9B0542D544E680E2141DAFF757B2\", 32);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmemset(strUUID, 0, 32);\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (i = 0; i < 16; i++) {\n\t\t\tchar t[3];\n\t\t\tt[2] = 0;\n\t\t\tt[0] = strUUID[2*i];\n\t\t\tt[1] = strUUID[2*i+1];\n\t\t\tuuid[i] = (u8) strtol(t, NULL, 16);\n\t\t}\n\n\t\tgf_bs_write_data(bs, uuid, 16);\n\t}\n\tif (ptr->size > 0xFFFFFFFF)\n\t\tgf_bs_write_u64(bs, ptr->size);\n\n\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Written Box type %s size \"LLD\" start \"LLD\"\\n\", gf_4cc_to_str(ptr->type), LLD_CAST ptr->size, LLD_CAST start));\n\n\treturn GF_OK;\n}\n\nGF_Err gf_isom_full_box_write(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_Err e;\n\tGF_FullBox *ptr = (GF_FullBox *)s;\n\te = gf_isom_box_write_header(s, bs);\n\tif (e) return e;\n\tgf_bs_write_u8(bs, ptr->version);\n\tgf_bs_write_u24(bs, ptr->flags);\n\treturn GF_OK;\n}\n\n\nGF_Err gf_isom_box_array_write(GF_Box *parent, GF_List *list, GF_BitStream *bs)\n{\n\tu32 count, i;\n\tGF_Box *a;\n\tGF_Err e;\n\tif (!list) return GF_BAD_PARAM;\n\tcount = gf_list_count(list);\n\tfor (i = 0; i < count; i++) {\n\t\ta = (GF_Box *)gf_list_get(list, i);\n\t\tif (a) {\n\t\t\te = gf_isom_box_write(a, bs);\n\t\t\tif (e) {\n\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"ISOBMF: Error %s writing box %s\\n\", gf_error_to_string(e), gf_4cc_to_str(a->type) ));\n\t\t\t\treturn e;\n\t\t\t}\n\t\t}\n\t}\n\treturn GF_OK;\n}\n\n\nGF_Err gf_isom_box_array_size(GF_Box *parent, GF_List *list)\n{\n\tGF_Err e;\n\tu32 count, i;\n\tGF_Box *a;\n\tif (! list) return GF_BAD_PARAM;\n\n\tcount = gf_list_count(list);\n\tfor (i = 0; i < count; i++) {\n\t\ta = (GF_Box *)gf_list_get(list, i);\n\t\tif (a) {\n\t\t\te = gf_isom_box_size(a);\n\t\t\tif (e) {\n\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"ISOBMF: Error %s computing box %s size\\n\", gf_error_to_string(e), gf_4cc_to_str(a->type) ));\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tparent->size += a->size;\n\t\t}\n\t}\n\treturn GF_OK;\n}\n\n#endif /*GPAC_DISABLE_ISOM_WRITE*/\n\n\n\nGF_Box * unkn_New();\nvoid unkn_del(GF_Box *);\nGF_Err unkn_Read(GF_Box *s, GF_BitStream *bs);\nGF_Err unkn_Write(GF_Box *s, GF_BitStream *bs);\nGF_Err unkn_Size(GF_Box *s);\nGF_Err unkn_dump(GF_Box *a, FILE * trace);\n\n//definition of boxes new/del/read/write/size. For now still exported since some files other than box_funcs.c call them\n//this should be fixed by only using gf_isom_box_new\n\n#define ISOM_BOX_IMPL_DECL(a_name) \\\n\t\tGF_Box * a_name##_New(); \\\n\t\tvoid a_name##_del(GF_Box *); \\\n\t\tGF_Err a_name##_Read(GF_Box *s, GF_BitStream *bs); \\\n\t\tGF_Err a_name##_Write(GF_Box *s, GF_BitStream *bs); \\\n\t\tGF_Err a_name##_Size(GF_Box *s);\\\n\t\tGF_Err a_name##_dump(GF_Box *a, FILE * trace);\n\nISOM_BOX_IMPL_DECL(reftype)\nISOM_BOX_IMPL_DECL(ireftype)\nISOM_BOX_IMPL_DECL(free)\nISOM_BOX_IMPL_DECL(wide)\nISOM_BOX_IMPL_DECL(mdat)\nISOM_BOX_IMPL_DECL(moov)\nISOM_BOX_IMPL_DECL(mvhd)\nISOM_BOX_IMPL_DECL(mdhd)\nISOM_BOX_IMPL_DECL(vmhd)\nISOM_BOX_IMPL_DECL(smhd)\nISOM_BOX_IMPL_DECL(hmhd)\nISOM_BOX_IMPL_DECL(nmhd)\nISOM_BOX_IMPL_DECL(stbl)\nISOM_BOX_IMPL_DECL(dinf)\nISOM_BOX_IMPL_DECL(url)\nISOM_BOX_IMPL_DECL(urn)\nISOM_BOX_IMPL_DECL(cprt)\nISOM_BOX_IMPL_DECL(kind)\nISOM_BOX_IMPL_DECL(chpl)\nISOM_BOX_IMPL_DECL(hdlr)\nISOM_BOX_IMPL_DECL(iods)\nISOM_BOX_IMPL_DECL(trak)\nISOM_BOX_IMPL_DECL(mp4s)\nISOM_BOX_IMPL_DECL(audio_sample_entry)\nISOM_BOX_IMPL_DECL(gen_sample_entry)\nISOM_BOX_IMPL_DECL(edts)\nISOM_BOX_IMPL_DECL(udta)\nISOM_BOX_IMPL_DECL(dref)\nISOM_BOX_IMPL_DECL(stsd)\nISOM_BOX_IMPL_DECL(stts)\nISOM_BOX_IMPL_DECL(ctts)\nISOM_BOX_IMPL_DECL(stsh)\nISOM_BOX_IMPL_DECL(elst)\nISOM_BOX_IMPL_DECL(stsc)\nISOM_BOX_IMPL_DECL(stsz)\nISOM_BOX_IMPL_DECL(stco)\nISOM_BOX_IMPL_DECL(stss)\nISOM_BOX_IMPL_DECL(stdp)\nISOM_BOX_IMPL_DECL(sdtp)\nISOM_BOX_IMPL_DECL(co64)\nISOM_BOX_IMPL_DECL(esds)\nISOM_BOX_IMPL_DECL(minf)\nISOM_BOX_IMPL_DECL(tkhd)\nISOM_BOX_IMPL_DECL(tref)\nISOM_BOX_IMPL_DECL(mdia)\nISOM_BOX_IMPL_DECL(mfra)\nISOM_BOX_IMPL_DECL(tfra)\nISOM_BOX_IMPL_DECL(mfro)\nISOM_BOX_IMPL_DECL(uuid)\nISOM_BOX_IMPL_DECL(void)\nISOM_BOX_IMPL_DECL(gnrm)\nISOM_BOX_IMPL_DECL(gnrv)\nISOM_BOX_IMPL_DECL(gnra)\nISOM_BOX_IMPL_DECL(pdin)\nISOM_BOX_IMPL_DECL(def_cont_box)\n\n\n#ifndef GPAC_DISABLE_ISOM_HINTING\n\nISOM_BOX_IMPL_DECL(hinf)\nISOM_BOX_IMPL_DECL(trpy)\nISOM_BOX_IMPL_DECL(totl)\nISOM_BOX_IMPL_DECL(nump)\nISOM_BOX_IMPL_DECL(npck)\nISOM_BOX_IMPL_DECL(tpyl)\nISOM_BOX_IMPL_DECL(tpay)\nISOM_BOX_IMPL_DECL(maxr)\nISOM_BOX_IMPL_DECL(dmed)\nISOM_BOX_IMPL_DECL(dimm)\nISOM_BOX_IMPL_DECL(drep)\nISOM_BOX_IMPL_DECL(tmin)\nISOM_BOX_IMPL_DECL(tmax)\nISOM_BOX_IMPL_DECL(pmax)\nISOM_BOX_IMPL_DECL(dmax)\nISOM_BOX_IMPL_DECL(payt)\nISOM_BOX_IMPL_DECL(name)\nISOM_BOX_IMPL_DECL(rely)\nISOM_BOX_IMPL_DECL(snro)\nISOM_BOX_IMPL_DECL(tims)\nISOM_BOX_IMPL_DECL(tsro)\nISOM_BOX_IMPL_DECL(ghnt)\nISOM_BOX_IMPL_DECL(hnti)\nISOM_BOX_IMPL_DECL(sdp)\nISOM_BOX_IMPL_DECL(rtpo)\nISOM_BOX_IMPL_DECL(tssy)\nISOM_BOX_IMPL_DECL(rssr)\nISOM_BOX_IMPL_DECL(srpp)\nISOM_BOX_IMPL_DECL(rtp_hnti)\n\n#endif\n\nISOM_BOX_IMPL_DECL(ftyp)\nISOM_BOX_IMPL_DECL(padb)\nISOM_BOX_IMPL_DECL(gppc)\n\n\n#ifndef\tGPAC_DISABLE_ISOM_FRAGMENTS\nISOM_BOX_IMPL_DECL(mvex)\nISOM_BOX_IMPL_DECL(trex)\nISOM_BOX_IMPL_DECL(moof)\nISOM_BOX_IMPL_DECL(mfhd)\nISOM_BOX_IMPL_DECL(traf)\nISOM_BOX_IMPL_DECL(tfhd)\nISOM_BOX_IMPL_DECL(trun)\nISOM_BOX_IMPL_DECL(styp)\nISOM_BOX_IMPL_DECL(mehd)\n/*smooth streaming timing*/\nISOM_BOX_IMPL_DECL(tfxd)\n\n#endif\n\n/*avc ext*/\nISOM_BOX_IMPL_DECL(avcc)\nISOM_BOX_IMPL_DECL(video_sample_entry)\nISOM_BOX_IMPL_DECL(m4ds)\nISOM_BOX_IMPL_DECL(btrt)\nISOM_BOX_IMPL_DECL(mehd)\n\n/*3GPP streaming text*/\nISOM_BOX_IMPL_DECL(ftab)\nISOM_BOX_IMPL_DECL(tx3g)\nISOM_BOX_IMPL_DECL(text)\nISOM_BOX_IMPL_DECL(styl)\nISOM_BOX_IMPL_DECL(hlit)\nISOM_BOX_IMPL_DECL(hclr)\nISOM_BOX_IMPL_DECL(krok)\nISOM_BOX_IMPL_DECL(dlay)\nISOM_BOX_IMPL_DECL(href)\nISOM_BOX_IMPL_DECL(tbox)\nISOM_BOX_IMPL_DECL(blnk)\nISOM_BOX_IMPL_DECL(twrp)\n\n\n#ifndef GPAC_DISABLE_VTT\n\n/*WebVTT boxes*/\nISOM_BOX_IMPL_DECL(boxstring);\nISOM_BOX_IMPL_DECL(vtcu)\nISOM_BOX_IMPL_DECL(vtte)\nISOM_BOX_IMPL_DECL(wvtt)\n\n#endif //GPAC_DISABLE_VTT\n\n/* Items functions */\nISOM_BOX_IMPL_DECL(meta)\nISOM_BOX_IMPL_DECL(xml)\nISOM_BOX_IMPL_DECL(bxml)\nISOM_BOX_IMPL_DECL(iloc)\nISOM_BOX_IMPL_DECL(pitm)\nISOM_BOX_IMPL_DECL(ipro)\nISOM_BOX_IMPL_DECL(infe)\nISOM_BOX_IMPL_DECL(iinf)\nISOM_BOX_IMPL_DECL(iref)\nISOM_BOX_IMPL_DECL(sinf)\nISOM_BOX_IMPL_DECL(frma)\nISOM_BOX_IMPL_DECL(schm)\nISOM_BOX_IMPL_DECL(schi)\nISOM_BOX_IMPL_DECL(enca)\nISOM_BOX_IMPL_DECL(encs)\nISOM_BOX_IMPL_DECL(encv)\nISOM_BOX_IMPL_DECL(resv)\n\n\n/** ISMACryp functions **/\nISOM_BOX_IMPL_DECL(iKMS)\nISOM_BOX_IMPL_DECL(iSFM)\nISOM_BOX_IMPL_DECL(iSLT)\n\n#ifndef GPAC_DISABLE_ISOM_ADOBE\n/* Adobe extensions */\nISOM_BOX_IMPL_DECL(abst)\nISOM_BOX_IMPL_DECL(afra)\nISOM_BOX_IMPL_DECL(asrt)\nISOM_BOX_IMPL_DECL(afrt)\n#endif /*GPAC_DISABLE_ISOM_ADOBE*/\n\n/* Apple extensions */\nISOM_BOX_IMPL_DECL(ilst)\nISOM_BOX_IMPL_DECL(ilst_item)\nISOM_BOX_IMPL_DECL(databox)\nISOM_BOX_IMPL_DECL(gmin)\nISOM_BOX_IMPL_DECL(alis)\nISOM_BOX_IMPL_DECL(clef)\n\n/*OMA extensions*/\nISOM_BOX_IMPL_DECL(ohdr)\nISOM_BOX_IMPL_DECL(grpi)\nISOM_BOX_IMPL_DECL(mdri)\nISOM_BOX_IMPL_DECL(odtt)\nISOM_BOX_IMPL_DECL(odrb)\nISOM_BOX_IMPL_DECL(odkm)\n\n\nISOM_BOX_IMPL_DECL(pasp)\nISOM_BOX_IMPL_DECL(clap)\nISOM_BOX_IMPL_DECL(metx)\nISOM_BOX_IMPL_DECL(txtc)\nISOM_BOX_IMPL_DECL(tsel)\nISOM_BOX_IMPL_DECL(dimC)\nISOM_BOX_IMPL_DECL(dims)\nISOM_BOX_IMPL_DECL(diST)\nISOM_BOX_IMPL_DECL(ac3)\nISOM_BOX_IMPL_DECL(ec3)\nISOM_BOX_IMPL_DECL(dac3)\nISOM_BOX_IMPL_DECL(dec3)\nISOM_BOX_IMPL_DECL(lsrc)\nISOM_BOX_IMPL_DECL(lsr1)\n\nISOM_BOX_IMPL_DECL(subs)\n\nISOM_BOX_IMPL_DECL(tmcd)\nISOM_BOX_IMPL_DECL(tcmi)\nISOM_BOX_IMPL_DECL(fiel)\nISOM_BOX_IMPL_DECL(gama)\nISOM_BOX_IMPL_DECL(chrm)\nISOM_BOX_IMPL_DECL(chan)\n\n\n#ifndef GPAC_DISABLE_ISOM_FRAGMENTS\nISOM_BOX_IMPL_DECL(sidx)\nISOM_BOX_IMPL_DECL(ssix)\nISOM_BOX_IMPL_DECL(leva)\nISOM_BOX_IMPL_DECL(pcrb)\nISOM_BOX_IMPL_DECL(tfdt)\nISOM_BOX_IMPL_DECL(emsg)\n\n#endif\n\nISOM_BOX_IMPL_DECL(rvcc)\nISOM_BOX_IMPL_DECL(sbgp)\nISOM_BOX_IMPL_DECL(sgpd)\nISOM_BOX_IMPL_DECL(saiz)\nISOM_BOX_IMPL_DECL(saio)\n\nISOM_BOX_IMPL_DECL(pssh)\n\nISOM_BOX_IMPL_DECL(tenc)\nISOM_BOX_IMPL_DECL(piff_tenc)\nISOM_BOX_IMPL_DECL(piff_psec)\nISOM_BOX_IMPL_DECL(piff_pssh)\nISOM_BOX_IMPL_DECL(senc)\nISOM_BOX_IMPL_DECL(cslg)\nISOM_BOX_IMPL_DECL(ccst)\nISOM_BOX_IMPL_DECL(auxi)\nISOM_BOX_IMPL_DECL(hvcc)\nISOM_BOX_IMPL_DECL(av1c)\nISOM_BOX_IMPL_DECL(dOps)\nISOM_BOX_IMPL_DECL(prft)\n\n//VPx\nISOM_BOX_IMPL_DECL(vpcc)\nISOM_BOX_IMPL_DECL(SmDm)\nISOM_BOX_IMPL_DECL(CoLL)\n\nISOM_BOX_IMPL_DECL(trep)\n\n//FEC\nISOM_BOX_IMPL_DECL(fiin)\nISOM_BOX_IMPL_DECL(paen)\nISOM_BOX_IMPL_DECL(fpar)\nISOM_BOX_IMPL_DECL(fecr)\nISOM_BOX_IMPL_DECL(segr)\nISOM_BOX_IMPL_DECL(gitn)\nISOM_BOX_IMPL_DECL(fdsa)\nISOM_BOX_IMPL_DECL(fdpa)\nISOM_BOX_IMPL_DECL(extr)\n\n\n/*\n\tAdobe's protection boxes\n*/\nISOM_BOX_IMPL_DECL(adkm)\nISOM_BOX_IMPL_DECL(ahdr)\nISOM_BOX_IMPL_DECL(aprm)\nISOM_BOX_IMPL_DECL(aeib)\nISOM_BOX_IMPL_DECL(akey)\nISOM_BOX_IMPL_DECL(flxs)\nISOM_BOX_IMPL_DECL(adaf)\n\n/* Image File Format declarations */\nISOM_BOX_IMPL_DECL(ispe)\nISOM_BOX_IMPL_DECL(colr)\nISOM_BOX_IMPL_DECL(pixi)\nISOM_BOX_IMPL_DECL(rloc)\nISOM_BOX_IMPL_DECL(irot)\nISOM_BOX_IMPL_DECL(ipco)\nISOM_BOX_IMPL_DECL(iprp)\nISOM_BOX_IMPL_DECL(ipma)\nISOM_BOX_IMPL_DECL(trgr)\nISOM_BOX_IMPL_DECL(trgt)\n\n/* MIAF declarations */\nISOM_BOX_IMPL_DECL(clli)\nISOM_BOX_IMPL_DECL(mdcv)\n\nISOM_BOX_IMPL_DECL(grpl)\n\nISOM_BOX_IMPL_DECL(strk)\nISOM_BOX_IMPL_DECL(stri)\nISOM_BOX_IMPL_DECL(stsg)\nISOM_BOX_IMPL_DECL(elng)\nISOM_BOX_IMPL_DECL(stvi)\nISOM_BOX_IMPL_DECL(auxc)\nISOM_BOX_IMPL_DECL(oinf)\nISOM_BOX_IMPL_DECL(tols)\n\nISOM_BOX_IMPL_DECL(trik)\nISOM_BOX_IMPL_DECL(bloc)\nISOM_BOX_IMPL_DECL(ainf)\nISOM_BOX_IMPL_DECL(mhac)\n\nISOM_BOX_IMPL_DECL(grptype)\n\nISOM_BOX_IMPL_DECL(load)\n\n\n/* Dolby Vision */\nISOM_BOX_IMPL_DECL(dvcC)\nISOM_BOX_IMPL_DECL(dvhe)\n\n\n\n\n#define BOX_DEFINE(__type, b_rad, __par) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 0, 0, __par, \"p12\", GF_FALSE}\n\n#define BOX_DEFINE_S(__type, b_rad, __par, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 0, 0, __par, __spec, GF_FALSE }\n\n#define FBOX_DEFINE(__type, b_rad, __par, __max_v) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, 0, __par, \"p12\", GF_FALSE }\n\n#define FBOX_DEFINE_FLAGS(__type, b_rad, __par, __max_v, flags) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, flags, __par, \"p12\", GF_FALSE }\n\n#define FBOX_DEFINE_FLAGS_S(__type, b_rad, __par, __max_v, flags, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, flags, __par, __spec, GF_FALSE }\n\n#define FBOX_DEFINE_S(__type, b_rad, __par, __max_v, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, 0, __par, __spec, GF_FALSE }\n\n#define TREF_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 0, 0, __par, __spec, GF_FALSE }\n\n#define TRGT_DEFINE(__type, b_rad, __par, __4cc, max_version, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 1+max_version, 0, __par, __spec, GF_FALSE }\n\n#define SGPD_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 1, 0, __par, __spec, GF_FALSE }\n\nstatic struct box_registry_entry {\n\tu32 box_4cc;\n\tGF_Box * (*new_fn)();\n\tvoid (*del_fn)(GF_Box *a);\n\tGF_Err (*read_fn)(GF_Box *s, GF_BitStream *bs);\n\tGF_Err (*write_fn)(GF_Box *s, GF_BitStream *bs);\n\tGF_Err (*size_fn)(GF_Box *a);\n\tGF_Err (*dump_fn)(GF_Box *a, FILE *trace);\n\tu32 alt_4cc;//used for sample grouping type and track / item reference types\n\tu8 max_version_plus_one;\n\tu32 flags;\n\tconst char *parents_4cc;\n\tconst char *spec;\n\tBool disabled;\n} box_registry [] =\n{\n\t//DO NOT MOVE THE FIRST ENTRY\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_UNKNOWN, unkn, \"unknown\", \"unknown\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_UUID, uuid, \"unknown\", \"unknown\"),\n\n\t//all track reference types\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_META, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_HINT, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_FONT, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_HIND, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_VDEP, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_VPLX, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SUBT, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_THUMB, \"p12\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_OD, \"p14\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_DECODE, \"p14\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_OCR, \"p14\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_IPI, \"p14\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_BASE, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SCAL, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_TBAS, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SABT, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_OREF, \"p15\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_ADDA, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_ADRC, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_ILOC, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_AVCP, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SWTO, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SWFR, \"p15\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_CHAP, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_TMCD, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_CDEP, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SCPT, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SSRC, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_LYRA, \"apple\"),\n\n\t//all item reference types\n\tTREF_DEFINE( GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_ISOM_REF_TBAS, \"p12\"),\n\tTREF_DEFINE( GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_ISOM_REF_ILOC, \"p12\"),\n\tTREF_DEFINE( GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_ISOM_REF_FDEL, \"p12\"),\n\n\t//all sample group descriptions\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ROLL, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_PROL, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RAP, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SEIG, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_OINF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_LINF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TRIF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_NALM, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TELE, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RASH, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ALST, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SAP, \"p12\"),\n\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVLL, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVSS, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_DTRT, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_MVIF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCIF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCNM, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_STSA, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSAS, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SYNC, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSCL, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_LBLI, \"p15\"),\n\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_3GAG, \"3gpp\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVCB, \"3gpp\"),\n\n\t//internal boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRM, gnrm, \"stsd\", \"unknown\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRV, gnrv, \"stsd\", \"unknown\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRA, gnra, \"stsd\", \"unknown\"),\n\n\t//all track group types\n\tTRGT_DEFINE( GF_ISOM_BOX_TYPE_TRGT, trgt, \"trgr\", GF_ISOM_BOX_TYPE_MSRC, 0, \"p12\" ),\n\tTRGT_DEFINE( GF_ISOM_BOX_TYPE_TRGT, trgt, \"trgr\", GF_ISOM_BOX_TYPE_STER, 0, \"p12\" ),\n\tTRGT_DEFINE( GF_ISOM_BOX_TYPE_TRGT, trgt, \"trgr\", GF_ISOM_BOX_TYPE_CSTG, 0, \"p15\" ),\n\n\t//part12 boxes\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FREE, free, \"*\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SKIP, free, \"*\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MDAT, mdat, \"file\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_IDAT, mdat, \"meta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MOOV, moov, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MVHD, mvhd, \"moov\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MDHD, mdhd, \"mdia\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_VMHD, vmhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SMHD, smhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_HMHD, hmhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_NMHD, nmhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STHD, nmhd, \"minf\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STBL, stbl, \"minf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DINF, dinf, \"minf meta\"),\n\tFBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URL, url, \"dref\", 0, 1),\n\tFBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URN, urn, \"dref\", 0, 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CPRT, cprt, \"udta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_KIND, kind, \"udta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_HDLR, hdlr, \"mdia meta minf\", 0),\t//minf container is OK in QT ...\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRAK, trak, \"moov\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_EDTS, edts, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_UDTA, udta, \"moov trak moof traf\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_DREF, dref, \"dinf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSD, stsd, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STTS, stts, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CTTS, ctts, \"stbl\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CSLG, cslg, \"stbl trep\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSH, stsh, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ELST, elst, \"edts\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSC, stsc, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSZ, stsz, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STZ2, stsz, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STCO, stco, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSS, stss, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STDP, stdp, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SDTP, sdtp, \"stbl traf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CO64, co64, \"stbl\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MINF, minf, \"mdia\"),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TKHD, tkhd, \"trak\", 1, 0x000001 | 0x000002 | 0x000004 | 0x000008),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TREF, tref, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MDIA, mdia, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MFRA, mfra, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MFRO, mfro, \"mfra\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TFRA, tfra, \"mfra\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ELNG, elng, \"mdia\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PDIN, pdin, \"file\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SBGP, sbgp, \"stbl traf\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", 2),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIZ, saiz, \"stbl traf\", 0, 0),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIZ, saiz, \"stbl traf\", 0, 1),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 0),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 1),\n\tFBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_SUBS, subs, \"stbl traf\", 0, 7), //warning flags are not used as a bit mask but as an enum!!\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRGR, trgr, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FTYP, ftyp, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PADB, padb, \"stbl\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_BTRT, btrt, \"sample_entry\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PASP, pasp, \"video_sample_entry ipco\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_CLAP, clap, \"video_sample_entry ipco\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\", 0),\t//apple uses meta in moov->udta\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_XML, xml, \"meta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_BXML, bxml, \"meta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ILOC, iloc, \"meta\", 2),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PITM, pitm, \"meta\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_IPRO, ipro, \"meta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_INFE, infe, \"iinf\", 3),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_IINF, iinf, \"meta\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_IREF, iref, \"meta\", 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SINF, sinf, \"ipro sample_entry\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RINF, sinf, \"sample_entry\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FRMA, frma, \"sinf rinf\"),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SCHM, schm, \"sinf rinf\", 0, 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SCHI, schi, \"sinf rinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCA, audio_sample_entry, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCV, video_sample_entry, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RESV, video_sample_entry, \"stsd\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TSEL, tsel, \"udta\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STRK, strk, \"udta\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STRI, stri, \"strk\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STRD, def_cont_box, \"strk\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSG, stsg, \"strd\", 0),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCS, mp4s, \"stsd\"),\n\t//THIS HAS TO BE FIXED, not extensible\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCT, mp4s, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCM, mp4s, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCF, mp4s, \"stsd\"),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_METX, metx, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_METT, metx, \"stsd\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STVI, stvi, \"schi\", 0),\n\n\t//FEC\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FIIN, fiin, \"meta\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PAEN, paen, \"fiin\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FPAR, fpar, \"paen\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FECR, fecr, \"paen\", 1),\n\t//fire uses the same box syntax as fecr\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FIRE, fecr, \"paen\", 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SEGR, segr, \"fiin\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_GITN, gitn, \"fiin\", 0),\n\n#ifndef GPAC_DISABLE_ISOM_HINTING\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FDSA, fdsa, \"fdp_sample\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FDPA, fdpa, \"fdsa\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_EXTR, extr, \"fdsa\"),\n#endif\n\n\t//full boxes todo\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_ASSP, assp, 1),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_MERE, assp, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_SRAT, srat, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_CHNL, chnl, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_DMIX, dmix, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_TLOU, alou, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_ALOU, alou, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_URI, uri, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_URII, urii, 0),\n\n#ifndef GPAC_DISABLE_ISOM_HINTING\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SRTP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FDP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RRTP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTCP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_HNTI, hnti, \"udta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SDP, sdp, \"hnti\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_HINF, hinf, \"udta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRPY, trpy, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_NUMP, nump, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TPYL, tpyl, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TOTL, totl, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_NPCK, npck, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TPAY, tpay, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MAXR, maxr, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DMED, dmed, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DIMM, dimm, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DREP, drep, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TMIN, tmin, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TMAX, tmax, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PMAX, pmax, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DMAX, dmax, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PAYT, payt, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTP, rtp_hnti, \"hnti\"),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTPO, rtpo, \"rtp_packet\"),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RELY, rely, \"rtp srtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TIMS, tims, \"rtp srtp rrtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TSRO, tsro, \"rtp srtp rrtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SNRO, snro, \"rtp srtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_NAME, name, \"udta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TSSY, tssy, \"rrtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RSSR, rssr, \"rrtp\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SRPP, srpp, \"srtp\", 0),\n\n#endif\n\n#ifndef\tGPAC_DISABLE_ISOM_FRAGMENTS\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MVEX, mvex, \"moov\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MEHD, mehd, \"mvex\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TREX, trex, \"mvex\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_LEVA, leva, \"mvex\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TREP, trep, \"mvex\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MOOF, moof, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MFHD, mfhd, \"moof\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRAF, traf, \"moof\"),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TFHD, tfhd, \"traf\", 0, 0x000001|0x000002|0x000008|0x000010|0x000020|0x010000|0x020000),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TRUN, trun, \"traf\", 0, 0x000001|0x000004|0x000100|0x000200|0x000400|0x000800),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TFDT, tfdt, \"traf\", 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STYP, ftyp, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PRFT, prft, \"file\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SIDX, sidx, \"file\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SSIX, ssix, \"file\", 0),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PCRB, pcrb, \"file\", \"dash\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_EMSG, emsg, \"file\", 1, \"dash\"),\n#endif\n\n\n\t//part14 boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IODS, iods, \"moov\", 0, \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4S, mp4s, \"stsd\", \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4V, video_sample_entry, \"stsd\", \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4A, audio_sample_entry, \"stsd\", \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_M4DS, m4ds, \"stsd\", \"p14\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ESDS, esds, \"mp4a mp4s mp4v encv enca encs resv wave\", 0, \"p14\"),\n\n\t//part 15 boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVCC, avcc, \"avc1 avc2 avc3 avc4 encv resv ipco\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_SVCC, avcc, \"avc1 avc2 avc3 avc4 svc1 svc2 encv resv\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MVCC, avcc, \"avc1 avc2 avc3 avc4 mvc1 mvc2 encv resv\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVCC, hvcc, \"hvc1 hev1 hvc2 hev2 encv resv ipco dvhe\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHVC, hvcc, \"hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv ipco\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC2, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC3, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC4, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_SVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HEV1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVC2, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HEV2, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHV1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHE1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVT1, video_sample_entry, \"stsd\", \"p15\"),\n\n\t//mpegh 3D audio boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHA1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHA2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHM1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHM2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHAC, mhac, \"mha1 mha2 mhm1 mhm2 wave\", \"mpegh3Daudio\"),\n\n\t//AV1 in ISOBMFF boxes\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_AV01, video_sample_entry, \"stsd\", \"av1\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_AV1C, av1c, \"av01 encv resv ipco\", \"av1\"),\n\n\t// VP8-9 boxes\n\tFBOX_DEFINE_FLAGS_S( GF_ISOM_BOX_TYPE_VPCC, vpcc, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VP08, video_sample_entry, \"stsd\", \"vp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VP09, video_sample_entry, \"stsd\", \"vp\"),\n\tFBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_SMDM, SmDm, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),\n\tFBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_COLL, CoLL, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),\n\n\t//Opus in ISOBMFF boxes\n#ifndef GPAC_DISABLE_OGG\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_OPUS, audio_sample_entry, \"stsd\", \"Opus\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DOPS, dOps, \"Opus wave\", \"Opus\"),\n#endif\n\n\t//part20 boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LSR1, lsr1, \"stsd\", \"p20\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LSRC, lsrc, \"lsr1\", \"p20\"),\n\n\t//part30 boxes\n#ifndef GPAC_DISABLE_TTXT\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STXT, metx, \"stsd\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TXTC, txtc, \"stxt mett sbtt\", 0),\n#ifndef GPAC_DISABLE_VTT\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_WVTT, wvtt, \"stsd\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTCC_CUE, vtcu, \"vtt_sample\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTE, vtte, \"vtt_sample\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTC_CONFIG, boxstring, \"wvtt\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CTIM, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IDEN, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_STTG, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PAYL, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTA, boxstring, \"vttc\", \"p30\"),\n#endif\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STPP, metx, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SBTT, metx, \"stsd\"),\n#endif\n\n\t//Image File Format\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPRP, iprp, \"meta\", \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPCO, ipco, \"iprp\", \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISPE, ispe, \"ipco\", 0, \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_COLR, colr, \"video_sample_entry ipco encv resv\", \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PIXI, pixi, \"ipco\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_RLOC, rloc, \"ipco\", 0, \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IROT, irot, \"ipco\", \"iff\"),\n\tFBOX_DEFINE_FLAGS_S( GF_ISOM_BOX_TYPE_IPMA, ipma, \"iprp\", 1, 1, \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPL, grpl, \"meta\", \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CCST, ccst, \"sample_entry\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AUXI, auxi, \"sample_entry\", 0, \"iff\"),\n\tTRGT_DEFINE(GF_ISOM_BOX_TYPE_GRPT, grptype, \"grpl\", GF_ISOM_BOX_TYPE_ALTR, 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AUXC, auxc, \"ipco\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_OINF, oinf, \"ipco\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TOLS, tols, \"ipco\", 0, \"iff\"),\n\n\t//MIAF\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_CLLI, clli, \"mp4v jpeg avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"miaf\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_MDCV, mdcv, \"mp4v jpeg avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"miaf\"),\n\n\t//other MPEG boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_RVCC, rvcc, \"avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"rvc\"),\n\n\t//3GPP boxes\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_AMR, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_AMR_WB, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_QCELP, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_EVRC, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_SMV, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_H263, video_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DAMR, gppc, \"samr sawb\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DEVC, gppc, \"sevc enca\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DQCP, gppc, \"sqcp enca\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DSMV, gppc, \"ssmv enca\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_D263, gppc, \"s263 encv\", \"3gpp\"),\n\t//3gpp timed text\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TX3G, tx3g, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TEXT, text, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_FTAB, ftab, \"tx3g text\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_STYL, styl, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HLIT, hlit, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HCLR, hclr, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_KROK, krok, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DLAY, dlay, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HREF, href, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TBOX, tbox, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_BLNK, blnk, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TWRP, twrp, \"text_sample\", \"3gpp\"),\n\t//3GPP dims\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIMS, dims, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIMC, dimC, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIST, diST, \"stsd\", \"3gpp\"),\n\n\n\t//CENC boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PSSH, pssh, \"moov moof\", 0, \"cenc\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TENC, tenc, \"schi\", 1, \"cenc\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_SENC, senc, \"trak traf\", \"cenc\"),\n\n\t// ISMA 1.1 boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IKMS, iKMS, \"schi\", 0, \"isma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISFM, iSFM, \"schi\", 0, \"isma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISLT, iSLT, \"schi\", 0, \"isma\"),\n\n\t//OMA boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODKM, odkm, \"schi\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_OHDR, ohdr, \"odkm\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPI, grpi, \"ohdr\", 0, \"oma\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MDRI, mdri, \"file\", \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODTT, odtt, \"mdri\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODRB, odrb, \"mdri\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODAF, iSFM, \"schi\", 0, \"oma\"),\n\n\t//apple boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP3, audio_sample_entry, \"stsd\", \"apple\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CHPL, chpl, \"udta\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VOID, void, \"\", \"apple\"),\n\tBOX_DEFINE_S(GF_QT_BOX_TYPE_WIDE, wide, \"*\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ILST, ilst, \"meta\", \"apple\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DATA, databox, \"ilst *\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9NAM, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9CMT, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9DAY, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9ART, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9TRK, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9ALB, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9COM, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9WRT, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9TOO, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9CPY, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9DES, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9GEN, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9GRP, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9ENC, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_aART, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PGAP, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRE, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DISK, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TRKN, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TMPO, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CPIL, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_COVR, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_iTunesSpecificInfo, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_GMHD, def_cont_box, \"minf\", \"apple\"),\n\tBOX_DEFINE_S(GF_QT_BOX_TYPE_LOAD, load, \"trak\", \"apple\"),\n\tBOX_DEFINE_S(GF_QT_BOX_TYPE_TAPT, def_cont_box, \"trak\", \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_GMIN, gmin, \"gmhd\", 0, \"apple\"),\n\tFBOX_DEFINE_FLAGS_S( GF_QT_BOX_TYPE_ALIS, alis, \"dref\", 0, 1, \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_CLEF, clef, \"tapt\", 0, \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_PROF, clef, \"tapt\", 0, \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_ENOF, clef, \"tapt\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_WAVE, def_cont_box, \"audio_sample_entry\", \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_CHAN, chan, \"audio_sample_entry\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_FRMA, frma, \"wave\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_TERMINATOR, unkn, \"wave\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_ENDA, chrm, \"wave\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_TMCD, def_cont_box, \"gmhd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_NAME, unkn, \"tmcd\", \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_TCMI, tcmi, \"tmcd\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_FIEL, fiel, \"video_sample_entry\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_GAMA, gama, \"video_sample_entry\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_CHRM, chrm, \"video_sample_entry\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_TEXT, unkn, \"gmhd\", \"apple\"),\n\n\t//QT and prores sample entry types\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_TMCD, tmcd, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_C608, gen_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCH, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCO, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCS, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCN, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AP4X, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AP4H, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_RAW, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_TWOS, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_SOWT, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_FL32, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_FL64, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_IN24, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_IN32, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_ULAW, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_ALAW, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_IMA_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_DVCA, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_QDMC, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_QDMC2, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_QCELP, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_kMP3, audio_sample_entry, \"stsd\", \"apple\"),\n\n\t//dolby boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AC3, audio_sample_entry, \"stsd\", \"dolby\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_EC3, audio_sample_entry, \"stsd\", \"dolby\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DAC3, dac3, \"ac-3 wave\", \"dolby\"),\n\t{GF_ISOM_BOX_TYPE_DEC3, dec3_New, dac3_del, dac3_Read, dac3_Write, dac3_Size, dac3_dump, 0, 0, 0, \"ec-3 wave enca\", \"dolby\" },\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DVCC, dvcC, \"dvhe dvav dva1 dvh1 avc1 avc2 avc3 avc4 hev1 encv resv\", \"DolbyVision\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DVHE, video_sample_entry, \"stsd\", \"DolbyVision\"),\n\n\t//Adobe boxes\n#ifndef GPAC_DISABLE_ISOM_ADOBE\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ABST, abst, \"file\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRA, afra, \"file\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ASRT, asrt, \"abst\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRT, afrt, \"abst\", 0, \"adobe\"),\n#endif\n\t/*Adobe's protection boxes*/\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADKM, adkm, \"schi\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AHDR, ahdr, \"adkm\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADAF, adaf, \"adkm\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_APRM, aprm, \"ahdr\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AEIB, aeib, \"aprm\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AKEY, akey, \"aprm\", 0, \"adobe\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_FLXS, flxs, \"akey\", \"adobe\"),\n\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TRIK, trik, \"traf\", 0, \"dece\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_BLOC, bloc, \"file\", 0, \"dece\"),\n\tFBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_AINF, ainf, \"moov\", 0, 0x000001, \"dece\"),\n\n\n\t//internally handled UUID for smooth - the code points are only used during creation and assigned to UUIDBox->internal4CC\n\t//the box type is still \"uuid\", and the factory is used to read/write/size/dump the code\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_TENC, piff_tenc, \"schi\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSEC, piff_psec, \"trak traf\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSSH, piff_pssh, \"moov moof\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_TFXD, tfxd, \"traf\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_MSSM, uuid, \"file\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_TFRF, uuid, \"traf\", \"smooth\"),\n\n\t/* Image tracks */\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_JPEG, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_JP2K, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_PNG, video_sample_entry, \"stsd\", \"apple\")\n};\n\nBool gf_box_valid_in_parent(GF_Box *a, const char *parent_4cc)\n{\n\tif (!a || !a->registry || !a->registry->parents_4cc) return GF_FALSE;\n\tif (strstr(a->registry->parents_4cc, parent_4cc) != NULL) return GF_TRUE;\n\treturn GF_FALSE;\n}\n\nGF_EXPORT\nu32 gf_isom_get_num_supported_boxes()\n{\n\treturn sizeof(box_registry) / sizeof(struct box_registry_entry);\n}\n\nvoid gf_isom_registry_disable(u32 boxCode, Bool disable)\n{\n\tu32 i=0, count = gf_isom_get_num_supported_boxes();\n\tfor (i=1; i<count; i++) {\n\t\tif (box_registry[i].box_4cc==boxCode) {\n\t\t\tbox_registry[i].disabled = disable;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nstatic u32 get_box_reg_idx(u32 boxCode, u32 parent_type)\n{\n\tu32 i=0, count = gf_isom_get_num_supported_boxes();\n\tconst char *parent_name = parent_type ? gf_4cc_to_str(parent_type) : NULL;\n\n\tfor (i=1; i<count; i++) {\n\t\tif (box_registry[i].box_4cc==boxCode) {\n\t\t\tif (!parent_type) return i;\n\t\t\tif (strstr(box_registry[i].parents_4cc, parent_name) != NULL) return i;\n\n\t\t\tif (strstr(box_registry[i].parents_4cc, \"sample_entry\") != NULL) {\n\t\t\t\tu32 j = get_box_reg_idx(parent_type, 0);\n\t\t\t\tif (box_registry[j].parents_4cc && (strstr(box_registry[j].parents_4cc, \"stsd\") != NULL))\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nGF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_root_box)\n{\n\tGF_Box *a;\n\ts32 idx = get_box_reg_idx(boxType, parentType);\n\tif (idx==0) {\n#ifndef GPAC_DISABLE_LOGS\n\t\tif (!skip_logs && (boxType != GF_ISOM_BOX_TYPE_UNKNOWN)) {\n\t\t\tswitch (parentType) {\n\t\t\tcase GF_ISOM_BOX_TYPE_ILST:\n\t\t\tcase GF_ISOM_BOX_TYPE_META:\n\t\t\tcase GF_ISOM_BOX_TYPE_UDTA:\n\t\t\tcase GF_ISOM_BOX_TYPE_UNKNOWN:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (is_root_box) {\n\t\t\t\t\tGF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown top-level box type %s\\n\", gf_4cc_to_str(boxType)));\n\t\t\t\t} else if (parentType) {\n\t\t\t\t\tchar szName[10];\n\t\t\t\t\tstrcpy(szName, gf_4cc_to_str(parentType));\n\t\t\t\t\tGF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown box type %s in parent %s\\n\", gf_4cc_to_str(boxType), szName));\n\t\t\t\t} else {\n\t\t\t\t\tGF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown box type %s\\n\", gf_4cc_to_str(boxType)));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n#endif\n        if (boxType==GF_ISOM_BOX_TYPE_UUID) {\n            a = uuid_New();\n            if (a) a->registry = &box_registry[1];\n        } else {\n            a = unkn_New();\n            ((GF_UnknownBox *)a)->original_4cc = boxType;\n            if (a) a->registry = &box_registry[0];\n        }\n\t\treturn a;\n\t}\n\ta = box_registry[idx].new_fn();\n\n\tif (a) {\n\t\tif (a->type!=GF_ISOM_BOX_TYPE_UUID) {\n\t\t\tif (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) {\n\t\t\t\t((GF_UnknownBox *)a)->original_4cc = boxType;\n\t\t\t} else {\n\t\t\t\ta->type = boxType;\n\t\t\t}\n\t\t}\n\t\ta->registry = &box_registry[idx];\n\t}\n\treturn a;\n}\n\nGF_EXPORT\nGF_Box *gf_isom_box_new(u32 boxType)\n{\n\treturn gf_isom_box_new_ex(boxType, 0, 0, GF_FALSE);\n}\n\nvoid gf_isom_box_add_for_dump_mode(GF_Box *parent, GF_Box *a)\n{\n\tif (use_dump_mode && a && (!parent->other_boxes || (gf_list_find(parent->other_boxes, a)<0) ) )\n\t\tgf_isom_box_add_default(parent, a);\n}\n\nGF_Err gf_isom_box_array_read_ex(GF_Box *parent, GF_BitStream *bs, GF_Err (*add_box)(GF_Box *par, GF_Box *b), u32 parent_type)\n{\n\tGF_Err e;\n\tGF_Box *a = NULL;\n\tBool skip_logs = gf_bs_get_cookie(bs) ? GF_TRUE : GF_FALSE;\n\n\t//we may have terminators in some QT files (4 bytes set to 0 ...)\n\twhile (parent->size>=8) {\n\t\te = gf_isom_box_parse_ex(&a, bs, parent_type, GF_FALSE);\n\t\tif (e) {\n\t\t\tif (a) gf_isom_box_del(a);\n\t\t\treturn e;\n\t\t}\n\t\t//sub box parsing aborted with no error\n\t\tif (!a) return GF_OK;\n\n\t\tif (parent->size < a->size) {\n\t\t\tif (!skip_logs) {\n\t\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" is larger than container box\\n\", gf_4cc_to_str(a->type)));\n\t\t\t}\n\t\t\tparent->size = 0;\n\t\t} else {\n\t\t\tparent->size -= a->size;\n\t\t}\n\n\t\t//check container validity\n\t\tif (strlen(a->registry->parents_4cc)) {\n\t\t\tBool parent_OK = GF_FALSE;\n\t\t\tconst char *parent_code = gf_4cc_to_str(parent->type);\n\t\t\tif (parent->type == GF_ISOM_BOX_TYPE_UNKNOWN)\n\t\t\t\tparent_code = gf_4cc_to_str( ((GF_UnknownBox*)parent)->original_4cc );\n\t\t\tif (strstr(a->registry->parents_4cc, parent_code) != NULL) {\n\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t} else if (!strcmp(a->registry->parents_4cc, \"*\") || strstr(a->registry->parents_4cc, \"* \") || strstr(a->registry->parents_4cc, \" *\")) {\n\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t} else {\n\t\t\t\t//parent must be a sample entry\n\t\t\t\tif (strstr(a->registry->parents_4cc, \"sample_entry\") !=\tNULL) {\n\t\t\t\t\t//parent is in an stsd\n\t\t\t\t\tif (strstr(parent->registry->parents_4cc, \"stsd\") != NULL) {\n\t\t\t\t\t\tif (strstr(a->registry->parents_4cc, \"video_sample_entry\") !=\tNULL) {\n\t\t\t\t\t\t\tif (((GF_SampleEntryBox*)parent)->internal_type==GF_ISOM_SAMPLE_ENTRY_VIDEO) {\n\t\t\t\t\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//other types are sample formats, eg a 3GPP text sample, RTP hint sample or VTT cue. Not handled at this level\n\t\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) parent_OK = GF_TRUE;\n\t\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_UUID) parent_OK = GF_TRUE;\n\t\t\t}\n\t\t\tif (! parent_OK && !skip_logs) {\n\t\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" is invalid in container %s\\n\", gf_4cc_to_str(a->type), parent_code));\n\t\t\t}\n\t\t}\n\n\t\te = add_box(parent, a);\n\t\tif (e) {\n\t\t\tif (e == GF_ISOM_INVALID_MEDIA) return GF_OK;\n\t\t\tgf_isom_box_del(a);\n\t\t\treturn e;\n\t\t}\n\t\t//in dump mode store all boxes in other_boxes if not done, so that we can dump the original order\n\t\tgf_isom_box_add_for_dump_mode(parent, a);\n\t}\n\treturn GF_OK;\n}\n\nGF_EXPORT\nGF_Err gf_isom_box_add_default(GF_Box *a, GF_Box *subbox)\n{\n\tif (!a->other_boxes) {\n\t\ta->other_boxes = gf_list_new();\n\t\tif (!a->other_boxes) return GF_OUT_OF_MEM;\n\t}\n\treturn gf_list_add(a->other_boxes, subbox);\n}\n\nGF_EXPORT\nvoid gf_isom_box_del(GF_Box *a)\n{\n\tGF_List *other_boxes;\n\tif (!a) return;\n\tif (skip_box_dump_del) return;\n\n\tother_boxes\t= a->other_boxes;\n\ta->other_boxes = NULL;\n\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Delete invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t} else {\n\t\tif (use_dump_mode) {\n\t\t\tskip_box_dump_del = GF_TRUE;\n\t\t\ta->registry->del_fn(a);\n\t\t\tskip_box_dump_del = GF_FALSE;\n\t\t} else {\n\t\t\ta->registry->del_fn(a);\n\t\t}\n\t}\n\t//delet the other boxes after deleting the box for dumper case where all child boxes are stored in otherbox\n\tif (other_boxes) {\n\t\tgf_isom_box_array_del(other_boxes);\n\t}\n}\n\n\nGF_Err gf_isom_box_read(GF_Box *a, GF_BitStream *bs)\n{\n\tif (!a) return GF_BAD_PARAM;\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\treturn a->registry->read_fn(a, bs);\n}\n\n#ifndef GPAC_DISABLE_ISOM_WRITE\n\nGF_Err gf_isom_box_write_listing(GF_Box *a, GF_BitStream *bs)\n{\n\tif (!a) return GF_BAD_PARAM;\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Write invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\treturn a->registry->write_fn(a, bs);\n}\n\nGF_EXPORT\nGF_Err gf_isom_box_write(GF_Box *a, GF_BitStream *bs)\n{\n\tGF_Err e;\n\tu64 pos = gf_bs_get_position(bs);\n\tif (!a) return GF_BAD_PARAM;\n\tif (a->registry->disabled) return GF_OK;\n\te = gf_isom_box_write_listing(a, bs);\n\tif (e) return e;\n\tif (a->other_boxes) {\n\t\te = gf_isom_box_array_write(a, a->other_boxes, bs);\n\t}\n\tpos = gf_bs_get_position(bs) - pos;\n\tif (pos != a->size) {\n\t\tif ((a->type==GF_ISOM_BOX_TYPE_MDAT) || (a->type==GF_ISOM_BOX_TYPE_IDAT)) {\n\n\t\t} else {\n\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box %s wrote \"LLU\" bytes but size is \"LLU\"\\n\", gf_4cc_to_str(a->type), pos, a->size ));\n\t\t}\n\t}\n\treturn e;\n}\n\nstatic GF_Err gf_isom_box_size_listing(GF_Box *a)\n{\n\tif (!a) return GF_BAD_PARAM;\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Size invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\ta->size = 8;\n\n\tif (a->type == GF_ISOM_BOX_TYPE_UUID) {\n\t\ta->size += 16;\n\t}\n\t//the large size is handled during write, cause at this stage we don't know the size\n\tif (a->registry->max_version_plus_one) {\n\t\ta->size += 4;\n\t}\n\treturn a->registry->size_fn(a);\n}\n\n\nGF_EXPORT\nGF_Err gf_isom_box_size(GF_Box *a)\n{\n\tGF_Err e;\n\tif (!a) return GF_BAD_PARAM;\n\tif (a->registry->disabled) {\n\t\ta->size = 0;\n\t\treturn GF_OK;\n\t}\n\te = gf_isom_box_size_listing(a);\n\tif (e) return e;\n\tif (a->other_boxes) {\n\t\te = gf_isom_box_array_size(a, a->other_boxes);\n\t\tif (e) return e;\n\t}\n\treturn GF_OK;\n}\n\n#endif /*GPAC_DISABLE_ISOM_WRITE*/\n\nstatic GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs)\n{\n\tif (ptr->registry->max_version_plus_one) {\n\t\tGF_FullBox *self = (GF_FullBox *) ptr;\n\t\tif (ptr->size<4) return GF_ISOM_INVALID_FILE;\n\t\tself->version = gf_bs_read_u8(bs);\n\t\tself->flags = gf_bs_read_u24(bs);\n\t\tptr->size -= 4;\n\t}\n\treturn GF_OK;\n}\n\n\nGF_EXPORT\nGF_Err gf_isom_dump_supported_box(u32 idx, FILE * trace)\n{\n\tu32 i;\n\tu32 nb_versions=0;\n\tGF_Err e;\n\tGF_Box *a;\n\n\tif (box_registry[idx].max_version_plus_one) {\n\t\tnb_versions = box_registry[idx].max_version_plus_one - 1;\n\t}\n\tfor (i = 0; i <= nb_versions; i++) {\n\t\ta = gf_isom_box_new(box_registry[idx].box_4cc);\n\t\ta->registry = &box_registry[idx];\n\n\t\tif (box_registry[idx].alt_4cc) {\n\t\t\tif (a->type==GF_ISOM_BOX_TYPE_REFT)\n\t\t\t\t((GF_TrackReferenceTypeBox*)a)->reference_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_REFI)\n\t\t\t\t((GF_ItemReferenceTypeBox*)a)->reference_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_TRGT)\n\t\t\t\t((GF_TrackGroupTypeBox*)a)->group_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_SGPD)\n\t\t\t\t((GF_SampleGroupDescriptionBox*)a)->grouping_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_GRPT)\n\t\t\t\t((GF_EntityToGroupTypeBox*)a)->grouping_type = box_registry[idx].alt_4cc;\n\t\t}\n\t\tif (box_registry[idx].max_version_plus_one) {\n\t\t\t((GF_FullBox *)a)->version = i;\n\t\t}\n\t\tif (box_registry[idx].flags) {\n\t\t\tu32 flag_mask=1;\n\t\t\tu32 flags = box_registry[idx].flags;\n\t\t\t((GF_FullBox *)a)->flags = 0;\n\t\t\te = gf_isom_box_dump(a, trace);\n\n\t\t\t//we dump all flags individually and this for all version, in order to simplify the XSLT processing\n\t\t\twhile (!e) {\n\t\t\t\tu32 flag = flags & flag_mask;\n\t\t\t\tflag_mask <<= 1;\n\t\t\t\tif (flag) {\n\t\t\t\t\t((GF_FullBox *)a)->flags = flag;\n\t\t\t\t\te = gf_isom_box_dump(a, trace);\n\t\t\t\t}\n\t\t\t\tif (flag_mask > flags) break;\n\t\t\t\tif (flag_mask == 0x80000000) break;\n\t\t\t}\n\n\t\t} else {\n\t\t\te = gf_isom_box_dump(a, trace);\n\t\t}\n\n\t\tgf_isom_box_del(a);\n\t}\n\treturn e;\n}\n\nGF_EXPORT\nu32 gf_isom_get_supported_box_type(u32 idx)\n{\n\treturn box_registry[idx].box_4cc;\n}\n\n#ifndef GPAC_DISABLE_ISOM_DUMP\n\nGF_Err gf_isom_box_dump_start(GF_Box *a, const char *name, FILE * trace)\n{\n\tfprintf(trace, \"<%s \", name);\n\tif (a->size > 0xFFFFFFFF) {\n\t\tfprintf(trace, \"LargeSize=\\\"\"LLU\"\\\" \", LLU_CAST a->size);\n\t} else {\n\t\tfprintf(trace, \"Size=\\\"%u\\\" \", (u32) a->size);\n\t}\n\tif (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) {\n\t\tfprintf(trace, \"Type=\\\"%s\\\" \", gf_4cc_to_str(((GF_UnknownBox*)a)->original_4cc));\n\t} else {\n\t\tfprintf(trace, \"Type=\\\"%s\\\" \", gf_4cc_to_str(a->type));\n\t}\n\n\tif (a->type == GF_ISOM_BOX_TYPE_UUID) {\n\t\tu32 i;\n\t\tfprintf(trace, \"UUID=\\\"{\");\n\t\tfor (i=0; i<16; i++) {\n\t\t\tfprintf(trace, \"%02X\", (unsigned char) ((GF_UUIDBox*)a)->uuid[i]);\n\t\t\tif ((i<15) && (i%4)==3) fprintf(trace, \"-\");\n\t\t}\n\t\tfprintf(trace, \"}\\\" \");\n\t}\n\n\tif (a->registry->max_version_plus_one) {\n\t\tfprintf(trace, \"Version=\\\"%d\\\" Flags=\\\"%d\\\" \", ((GF_FullBox*)a)->version,((GF_FullBox*)a)->flags);\n\t}\n\n\tfprintf(trace, \"Specification=\\\"%s\\\" \", a->registry->spec);\n\tfprintf(trace, \"Container=\\\"%s\\\" \", a->registry->parents_4cc);\n\t//disable all box dumping until end of this box\n\tif (use_dump_mode) {\n\t\tskip_box_dump_del = GF_TRUE;\n\t}\n\treturn GF_OK;\n}\n\nGF_Err gf_isom_box_dump_ex(void *ptr, FILE * trace, u32 box_4cc)\n{\n\tGF_Box *a = (GF_Box *) ptr;\n\n\tif (skip_box_dump_del) return GF_OK;\n\n\tif (!a) {\n\t\tif (box_4cc) {\n\t\t\tfprintf(trace, \"<!--ERROR: NULL Box Found, expecting %s -->\\n\", gf_4cc_to_str(box_4cc) );\n\t\t} else {\n\t\t\tfprintf(trace, \"<!--ERROR: NULL Box Found-->\\n\");\n\t\t}\n\t\treturn GF_OK;\n\t}\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] trying to dump box %s not registered\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\ta->registry->dump_fn(a, trace);\n\treturn GF_OK;\n}\n\nvoid gf_isom_box_dump_done(const char *name, GF_Box *ptr, FILE *trace)\n{\n\t//enable box dumping and dump other_boxes which contains all source boxes in order\n\tskip_box_dump_del = GF_FALSE;\n\tif (ptr && ptr->other_boxes) {\n\t\tgf_isom_box_array_dump(ptr->other_boxes, trace);\n\t}\n\tif (name)\n\t\tfprintf(trace, \"</%s>\\n\", name);\n}\n\nBool gf_isom_box_is_file_level(GF_Box *s)\n{\n\tif (!s || !s->registry) return GF_FALSE;\n\tif (strstr(s->registry->parents_4cc, \"file\")!= NULL) return GF_TRUE;\n\tif (strstr(s->registry->parents_4cc, \"*\")!= NULL) return GF_TRUE;\n\treturn GF_FALSE;\n}\n#endif\n\n\n#endif /*GPAC_DISABLE_ISOM*/\n"], "fixing_code": ["/*\n *\t\t\tGPAC - Multimedia Framework C SDK\n *\n *\t\t\tAuthors: Jean Le Feuvre\n *\t\t\tCopyright (c) Telecom ParisTech 2000-2012\n *\t\t\t\t\tAll rights reserved\n *\n *  This file is part of GPAC / ISO Media File Format sub-project\n *\n *  GPAC is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU Lesser General Public License as published by\n *  the Free Software Foundation; either version 2, or (at your option)\n *  any later version.\n *\n *  GPAC is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; see the file COPYING.  If not, write to\n *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n *\n */\n\n#include <gpac/internal/isomedia_dev.h>\n\n#ifndef GPAC_DISABLE_ISOM\n\n//only used in dump mode\nstatic Bool skip_box_dump_del = GF_FALSE;\nBool use_dump_mode = GF_FALSE;\n\n//Add this funct to handle incomplete files...\n//bytesExpected is 0 most of the time. If the file is incomplete, bytesExpected\n//is the number of bytes missing to parse the box...\nGF_Err gf_isom_parse_root_box(GF_Box **outBox, GF_BitStream *bs, u64 *bytesExpected, Bool progressive_mode)\n{\n\tGF_Err ret;\n\tu64 start;\n\tstart = gf_bs_get_position(bs);\n\tret = gf_isom_box_parse_ex(outBox, bs, 0, GF_TRUE);\n\tif (ret == GF_ISOM_INCOMPLETE_FILE) {\n\t\tif (!*outBox) {\n\t\t\t// We could not even read the box size, we at least need 8 bytes\n\t\t\t*bytesExpected = 8;\n\t\t\tGF_LOG(progressive_mode ? GF_LOG_DEBUG : GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Incomplete box - start \"LLU\"\\n\", start));\n\t\t}\n\t\telse {\n\t\t\tu32 type = (*outBox)->type;\n\t\t\tif (type==GF_ISOM_BOX_TYPE_UNKNOWN)\n\t\t\t\ttype = ((GF_UnknownBox *) (*outBox))->original_4cc;\n\n\t\t\t*bytesExpected = (*outBox)->size;\n\t\t\tGF_LOG(progressive_mode ? GF_LOG_DEBUG : GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Incomplete box %s - start \"LLU\" size \"LLU\"\\n\", gf_4cc_to_str(type), start, (*outBox)->size));\n\t\t\tgf_isom_box_del(*outBox);\n\t\t\t*outBox = NULL;\n\t\t}\n\t\tgf_bs_seek(bs, start);\n\t}\n\treturn ret;\n}\n\nu32 gf_isom_solve_uuid_box(char *UUID)\n{\n\tu32 i;\n\tchar strUUID[33], strChar[3];\n\tstrUUID[0] = 0;\n\tstrUUID[32] = 0;\n\tfor (i=0; i<16; i++) {\n\t\tsnprintf(strChar, 3, \"%02X\", (unsigned char) UUID[i]);\n\t\tstrcat(strUUID, strChar);\n\t}\n\tif (!strnicmp(strUUID, \"8974dbce7be74c5184f97148f9882554\", 32))\n\t\treturn GF_ISOM_BOX_UUID_TENC;\n\tif (!strnicmp(strUUID, \"A5D40B30E81411DDBA2F0800200C9A66\", 32))\n\t\treturn GF_ISOM_BOX_UUID_MSSM;\n\tif (!strnicmp(strUUID, \"D4807EF2CA3946958E5426CB9E46A79F\", 32))\n\t\treturn GF_ISOM_BOX_UUID_TFRF;\n\tif (!strnicmp(strUUID, \"6D1D9B0542D544E680E2141DAFF757B2\", 32))\n\t\treturn GF_ISOM_BOX_UUID_TFXD;\n\tif (!strnicmp(strUUID, \"A2394F525A9B4F14A2446C427C648DF4\", 32))\n\t\treturn GF_ISOM_BOX_UUID_PSEC;\n\tif (!strnicmp(strUUID, \"D08A4F1810F34A82B6C832D8ABA183D3\", 32))\n\t\treturn GF_ISOM_BOX_UUID_PSSH;\n\n\treturn 0;\n}\n\nstatic GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs);\n\nGF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box)\n{\n\tu32 type, uuid_type, hdr_size;\n\tu64 size, start, payload_start, end;\n\tchar uuid[16];\n\tGF_Err e;\n\tGF_Box *newBox;\n\tBool skip_logs = gf_bs_get_cookie(bs) ? GF_TRUE : GF_FALSE;\n\tBool is_special = GF_TRUE;\n\n\tif ((bs == NULL) || (outBox == NULL) ) return GF_BAD_PARAM;\n\t*outBox = NULL;\n\tif (gf_bs_available(bs) < 8) {\n\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t}\n\n\tstart = gf_bs_get_position(bs);\n\n\tuuid_type = 0;\n\tsize = (u64) gf_bs_read_u32(bs);\n\thdr_size = 4;\n\t/*fix for some boxes found in some old hinted files*/\n\tif ((size >= 2) && (size <= 4)) {\n\t\tsize = 4;\n\t\ttype = GF_ISOM_BOX_TYPE_VOID;\n\t} else {\n\t\ttype = gf_bs_read_u32(bs);\n\t\thdr_size += 4;\n\t\t/*no size means till end of file - EXCEPT FOR some old QuickTime boxes...*/\n\t\tif (type == GF_ISOM_BOX_TYPE_TOTL)\n\t\t\tsize = 12;\n\t\tif (!size) {\n\t\t\tif (is_root_box) {\n\t\t\t\tif (!skip_logs) {\n\t\t\t\t\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Warning Read Box type %s (0x%08X) size 0 reading till the end of file\\n\", gf_4cc_to_str(type), type));\n\t\t\t\t}\n\t\t\t\tsize = gf_bs_available(bs) + 8;\n\t\t\t} else {\n\t\t\t\tif (!skip_logs) {\n\t\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box type %s (0x%08X) at position \"LLU\" has size 0 but is not at root/file level, skipping\\n\", gf_4cc_to_str(type), type, start));\n\t\t\t\t}\n\t\t\t\treturn GF_OK;\n//\t\t\t\treturn GF_ISOM_INVALID_FILE;\n\t\t\t}\n\t\t}\n\t}\n\t/*handle uuid*/\n\tmemset(uuid, 0, 16);\n\tif (type == GF_ISOM_BOX_TYPE_UUID ) {\n\t\tif (gf_bs_available(bs) < 16) {\n\t\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t\t}\n\t\tgf_bs_read_data(bs, uuid, 16);\n\t\thdr_size += 16;\n\t\tuuid_type = gf_isom_solve_uuid_box(uuid);\n\t}\n\n\t//handle large box\n\tif (size == 1) {\n\t\tif (gf_bs_available(bs) < 8) {\n\t\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t\t}\n\t\tsize = gf_bs_read_u64(bs);\n\t\thdr_size += 8;\n\t}\n\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Read Box type %s size \"LLD\" start \"LLD\"\\n\", gf_4cc_to_str(type), LLD_CAST size, LLD_CAST start));\n\n\tif ( size < hdr_size ) {\n\t\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Box size \"LLD\" less than box header size %d\\n\", LLD_CAST size, hdr_size));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\n\t//some special boxes (references and track groups) are handled by a single generic box with an associated ref/group type\n\tif (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TREF)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_TrackReferenceTypeBox*)newBox)->reference_type = type;\n\t} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_IREF)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFI);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_ItemReferenceTypeBox*)newBox)->reference_type = type;\n\t} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TRGR)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGT);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_TrackGroupTypeBox*)newBox)->group_type = type;\n\t} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_GRPL)) {\n\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_GRPT);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t\t((GF_EntityToGroupTypeBox*)newBox)->grouping_type = type;\n\t} else {\n\t\t//OK, create the box based on the type\n\t\tis_special = GF_FALSE;\n\t\tnewBox = gf_isom_box_new_ex(uuid_type ? uuid_type : type, parent_type, skip_logs, is_root_box);\n\t\tif (!newBox) return GF_OUT_OF_MEM;\n\t}\n\n\t//OK, init and read this box\n\tif (type==GF_ISOM_BOX_TYPE_UUID && !is_special) {\n\t\tmemcpy(((GF_UUIDBox *)newBox)->uuid, uuid, 16);\n\t\t((GF_UUIDBox *)newBox)->internal_4cc = uuid_type;\n\t}\n\n\tif (!newBox->type) newBox->type = type;\n\tpayload_start = gf_bs_get_position(bs);\n\nretry_unknown_box:\n\n\tend = gf_bs_available(bs);\n\tif (size - hdr_size > end ) {\n\t\tnewBox->size = size - hdr_size - end;\n\t\t*outBox = newBox;\n\t\treturn GF_ISOM_INCOMPLETE_FILE;\n\t}\n\n\tnewBox->size = size - hdr_size;\n\n\t//parse even if size is 0 - this makes sure that we perform box parsing (usually in box->read)\n\te = gf_isom_full_box_read(newBox, bs);\n\tif (!e) e = gf_isom_box_read(newBox, bs);\n\tnewBox->size = size;\n\tend = gf_bs_get_position(bs);\n\n\tif (e && (e != GF_ISOM_INCOMPLETE_FILE)) {\n\t\tgf_isom_box_del(newBox);\n\t\t*outBox = NULL;\n\n\t\tif (parent_type==GF_ISOM_BOX_TYPE_STSD) {\n\t\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);\n\t\t\t((GF_UnknownBox *)newBox)->original_4cc = type;\n\t\t\tnewBox->size = size;\n\t\t\tgf_bs_seek(bs, payload_start);\n\t\t\tgoto retry_unknown_box;\n\t\t}\n\t\tif (!skip_logs) {\n\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box \\\"%s\\\" (start \"LLU\") failed (%s) - skipping\\n\", gf_4cc_to_str(type), start, gf_error_to_string(e)));\n\t\t}\n\t\t//we don't try to reparse known boxes that have been failing (too dangerous)\n\t\treturn e;\n\t}\n\n\tif (end-start > size) {\n\t\tif (!skip_logs) {\n\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" size \"LLU\" (start \"LLU\") invalid (read \"LLU\")\\n\", gf_4cc_to_str(type), LLU_CAST size, start, LLU_CAST (end-start) ));\n\t\t}\n\t\t/*let's still try to load the file since no error was notified*/\n\t\tgf_bs_seek(bs, start+size);\n\t} else if (end-start < size) {\n\t\tu32 to_skip = (u32) (size-(end-start));\n\t\tif (!skip_logs) {\n\t\t\tif ((to_skip!=4) || gf_bs_peek_bits(bs, 32, 0)) {\n\t\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" (start \"LLU\") has %u extra bytes\\n\", gf_4cc_to_str(type), start, to_skip));\n\t\t\t}\n\t\t}\n\t\tgf_bs_skip_bytes(bs, to_skip);\n\t}\n\t*outBox = newBox;\n\n\treturn e;\n}\n\nGF_EXPORT\nGF_Err gf_isom_box_parse(GF_Box **outBox, GF_BitStream *bs)\n{\n\treturn gf_isom_box_parse_ex(outBox, bs, 0, GF_FALSE);\n}\n\nvoid gf_isom_box_array_del(GF_List *other_boxes)\n{\n\tu32 count, i;\n\tGF_Box *a;\n\tif (!other_boxes) return;\n\tcount = gf_list_count(other_boxes);\n\tfor (i = 0; i < count; i++) {\n\t\ta = (GF_Box *)gf_list_get(other_boxes, i);\n\t\tif (a) gf_isom_box_del(a);\n\t}\n\tgf_list_del(other_boxes);\n}\n\n\nGF_Err gf_isom_box_array_read(GF_Box *parent, GF_BitStream *bs, GF_Err (*add_box)(GF_Box *par, GF_Box *b))\n{\n\treturn gf_isom_box_array_read_ex(parent, bs, add_box, parent->type);\n}\n\n#ifndef GPAC_DISABLE_ISOM_WRITE\n\nGF_EXPORT\nGF_Err gf_isom_box_write_header(GF_Box *ptr, GF_BitStream *bs)\n{\n\tu64 start;\n\tif (! bs || !ptr) return GF_BAD_PARAM;\n\tif (!ptr->size) return GF_ISOM_INVALID_FILE;\n\n\tstart = gf_bs_get_position(bs);\n\tif (ptr->size > 0xFFFFFFFF) {\n\t\tgf_bs_write_u32(bs, 1);\n\t} else {\n\t\tgf_bs_write_u32(bs, (u32) ptr->size);\n\t}\n\tgf_bs_write_u32(bs, ptr->type);\n\tif (ptr->type == GF_ISOM_BOX_TYPE_UUID) {\n\t\tu32 i;\n\t\tchar uuid[16];\n\t\tchar strUUID[32];\n\n\t\tswitch (((GF_UUIDBox*)ptr)->internal_4cc) {\n\t\tcase GF_ISOM_BOX_UUID_TENC:\n\t\t\tmemcpy(strUUID, \"8974dbce7be74c5184f97148f9882554\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_PSEC:\n\t\t\tmemcpy(strUUID, \"A2394F525A9B4F14A2446C427C648DF4\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_MSSM:\n\t\t\tmemcpy(strUUID, \"A5D40B30E81411DDBA2F0800200C9A66\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_PSSH:\n\t\t\tmemcpy(strUUID, \"D08A4F1810F34A82B6C832D8ABA183D3\", 32);\n\t\t\tbreak;\n\t\tcase GF_ISOM_BOX_UUID_TFXD:\n\t\t\tmemcpy(strUUID, \"6D1D9B0542D544E680E2141DAFF757B2\", 32);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmemset(strUUID, 0, 32);\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (i = 0; i < 16; i++) {\n\t\t\tchar t[3];\n\t\t\tt[2] = 0;\n\t\t\tt[0] = strUUID[2*i];\n\t\t\tt[1] = strUUID[2*i+1];\n\t\t\tuuid[i] = (u8) strtol(t, NULL, 16);\n\t\t}\n\n\t\tgf_bs_write_data(bs, uuid, 16);\n\t}\n\tif (ptr->size > 0xFFFFFFFF)\n\t\tgf_bs_write_u64(bs, ptr->size);\n\n\tGF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Written Box type %s size \"LLD\" start \"LLD\"\\n\", gf_4cc_to_str(ptr->type), LLD_CAST ptr->size, LLD_CAST start));\n\n\treturn GF_OK;\n}\n\nGF_Err gf_isom_full_box_write(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_Err e;\n\tGF_FullBox *ptr = (GF_FullBox *)s;\n\te = gf_isom_box_write_header(s, bs);\n\tif (e) return e;\n\tgf_bs_write_u8(bs, ptr->version);\n\tgf_bs_write_u24(bs, ptr->flags);\n\treturn GF_OK;\n}\n\n\nGF_Err gf_isom_box_array_write(GF_Box *parent, GF_List *list, GF_BitStream *bs)\n{\n\tu32 count, i;\n\tGF_Box *a;\n\tGF_Err e;\n\tif (!list) return GF_BAD_PARAM;\n\tcount = gf_list_count(list);\n\tfor (i = 0; i < count; i++) {\n\t\ta = (GF_Box *)gf_list_get(list, i);\n\t\tif (a) {\n\t\t\te = gf_isom_box_write(a, bs);\n\t\t\tif (e) {\n\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"ISOBMF: Error %s writing box %s\\n\", gf_error_to_string(e), gf_4cc_to_str(a->type) ));\n\t\t\t\treturn e;\n\t\t\t}\n\t\t}\n\t}\n\treturn GF_OK;\n}\n\n\nGF_Err gf_isom_box_array_size(GF_Box *parent, GF_List *list)\n{\n\tGF_Err e;\n\tu32 count, i;\n\tGF_Box *a;\n\tif (! list) return GF_BAD_PARAM;\n\n\tcount = gf_list_count(list);\n\tfor (i = 0; i < count; i++) {\n\t\ta = (GF_Box *)gf_list_get(list, i);\n\t\tif (a) {\n\t\t\te = gf_isom_box_size(a);\n\t\t\tif (e) {\n\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"ISOBMF: Error %s computing box %s size\\n\", gf_error_to_string(e), gf_4cc_to_str(a->type) ));\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tparent->size += a->size;\n\t\t}\n\t}\n\treturn GF_OK;\n}\n\n#endif /*GPAC_DISABLE_ISOM_WRITE*/\n\n\n\nGF_Box * unkn_New();\nvoid unkn_del(GF_Box *);\nGF_Err unkn_Read(GF_Box *s, GF_BitStream *bs);\nGF_Err unkn_Write(GF_Box *s, GF_BitStream *bs);\nGF_Err unkn_Size(GF_Box *s);\nGF_Err unkn_dump(GF_Box *a, FILE * trace);\n\n//definition of boxes new/del/read/write/size. For now still exported since some files other than box_funcs.c call them\n//this should be fixed by only using gf_isom_box_new\n\n#define ISOM_BOX_IMPL_DECL(a_name) \\\n\t\tGF_Box * a_name##_New(); \\\n\t\tvoid a_name##_del(GF_Box *); \\\n\t\tGF_Err a_name##_Read(GF_Box *s, GF_BitStream *bs); \\\n\t\tGF_Err a_name##_Write(GF_Box *s, GF_BitStream *bs); \\\n\t\tGF_Err a_name##_Size(GF_Box *s);\\\n\t\tGF_Err a_name##_dump(GF_Box *a, FILE * trace);\n\nISOM_BOX_IMPL_DECL(reftype)\nISOM_BOX_IMPL_DECL(ireftype)\nISOM_BOX_IMPL_DECL(free)\nISOM_BOX_IMPL_DECL(wide)\nISOM_BOX_IMPL_DECL(mdat)\nISOM_BOX_IMPL_DECL(moov)\nISOM_BOX_IMPL_DECL(mvhd)\nISOM_BOX_IMPL_DECL(mdhd)\nISOM_BOX_IMPL_DECL(vmhd)\nISOM_BOX_IMPL_DECL(smhd)\nISOM_BOX_IMPL_DECL(hmhd)\nISOM_BOX_IMPL_DECL(nmhd)\nISOM_BOX_IMPL_DECL(stbl)\nISOM_BOX_IMPL_DECL(dinf)\nISOM_BOX_IMPL_DECL(url)\nISOM_BOX_IMPL_DECL(urn)\nISOM_BOX_IMPL_DECL(cprt)\nISOM_BOX_IMPL_DECL(kind)\nISOM_BOX_IMPL_DECL(chpl)\nISOM_BOX_IMPL_DECL(hdlr)\nISOM_BOX_IMPL_DECL(iods)\nISOM_BOX_IMPL_DECL(trak)\nISOM_BOX_IMPL_DECL(mp4s)\nISOM_BOX_IMPL_DECL(audio_sample_entry)\nISOM_BOX_IMPL_DECL(gen_sample_entry)\nISOM_BOX_IMPL_DECL(edts)\nISOM_BOX_IMPL_DECL(udta)\nISOM_BOX_IMPL_DECL(dref)\nISOM_BOX_IMPL_DECL(stsd)\nISOM_BOX_IMPL_DECL(stts)\nISOM_BOX_IMPL_DECL(ctts)\nISOM_BOX_IMPL_DECL(stsh)\nISOM_BOX_IMPL_DECL(elst)\nISOM_BOX_IMPL_DECL(stsc)\nISOM_BOX_IMPL_DECL(stsz)\nISOM_BOX_IMPL_DECL(stco)\nISOM_BOX_IMPL_DECL(stss)\nISOM_BOX_IMPL_DECL(stdp)\nISOM_BOX_IMPL_DECL(sdtp)\nISOM_BOX_IMPL_DECL(co64)\nISOM_BOX_IMPL_DECL(esds)\nISOM_BOX_IMPL_DECL(minf)\nISOM_BOX_IMPL_DECL(tkhd)\nISOM_BOX_IMPL_DECL(tref)\nISOM_BOX_IMPL_DECL(mdia)\nISOM_BOX_IMPL_DECL(mfra)\nISOM_BOX_IMPL_DECL(tfra)\nISOM_BOX_IMPL_DECL(mfro)\nISOM_BOX_IMPL_DECL(uuid)\nISOM_BOX_IMPL_DECL(void)\nISOM_BOX_IMPL_DECL(gnrm)\nISOM_BOX_IMPL_DECL(gnrv)\nISOM_BOX_IMPL_DECL(gnra)\nISOM_BOX_IMPL_DECL(pdin)\nISOM_BOX_IMPL_DECL(def_cont_box)\n\n\n#ifndef GPAC_DISABLE_ISOM_HINTING\n\nISOM_BOX_IMPL_DECL(hinf)\nISOM_BOX_IMPL_DECL(trpy)\nISOM_BOX_IMPL_DECL(totl)\nISOM_BOX_IMPL_DECL(nump)\nISOM_BOX_IMPL_DECL(npck)\nISOM_BOX_IMPL_DECL(tpyl)\nISOM_BOX_IMPL_DECL(tpay)\nISOM_BOX_IMPL_DECL(maxr)\nISOM_BOX_IMPL_DECL(dmed)\nISOM_BOX_IMPL_DECL(dimm)\nISOM_BOX_IMPL_DECL(drep)\nISOM_BOX_IMPL_DECL(tmin)\nISOM_BOX_IMPL_DECL(tmax)\nISOM_BOX_IMPL_DECL(pmax)\nISOM_BOX_IMPL_DECL(dmax)\nISOM_BOX_IMPL_DECL(payt)\nISOM_BOX_IMPL_DECL(name)\nISOM_BOX_IMPL_DECL(rely)\nISOM_BOX_IMPL_DECL(snro)\nISOM_BOX_IMPL_DECL(tims)\nISOM_BOX_IMPL_DECL(tsro)\nISOM_BOX_IMPL_DECL(ghnt)\nISOM_BOX_IMPL_DECL(hnti)\nISOM_BOX_IMPL_DECL(sdp)\nISOM_BOX_IMPL_DECL(rtpo)\nISOM_BOX_IMPL_DECL(tssy)\nISOM_BOX_IMPL_DECL(rssr)\nISOM_BOX_IMPL_DECL(srpp)\nISOM_BOX_IMPL_DECL(rtp_hnti)\n\n#endif\n\nISOM_BOX_IMPL_DECL(ftyp)\nISOM_BOX_IMPL_DECL(padb)\nISOM_BOX_IMPL_DECL(gppc)\n\n\n#ifndef\tGPAC_DISABLE_ISOM_FRAGMENTS\nISOM_BOX_IMPL_DECL(mvex)\nISOM_BOX_IMPL_DECL(trex)\nISOM_BOX_IMPL_DECL(moof)\nISOM_BOX_IMPL_DECL(mfhd)\nISOM_BOX_IMPL_DECL(traf)\nISOM_BOX_IMPL_DECL(tfhd)\nISOM_BOX_IMPL_DECL(trun)\nISOM_BOX_IMPL_DECL(styp)\nISOM_BOX_IMPL_DECL(mehd)\n/*smooth streaming timing*/\nISOM_BOX_IMPL_DECL(tfxd)\n\n#endif\n\n/*avc ext*/\nISOM_BOX_IMPL_DECL(avcc)\nISOM_BOX_IMPL_DECL(video_sample_entry)\nISOM_BOX_IMPL_DECL(m4ds)\nISOM_BOX_IMPL_DECL(btrt)\nISOM_BOX_IMPL_DECL(mehd)\n\n/*3GPP streaming text*/\nISOM_BOX_IMPL_DECL(ftab)\nISOM_BOX_IMPL_DECL(tx3g)\nISOM_BOX_IMPL_DECL(text)\nISOM_BOX_IMPL_DECL(styl)\nISOM_BOX_IMPL_DECL(hlit)\nISOM_BOX_IMPL_DECL(hclr)\nISOM_BOX_IMPL_DECL(krok)\nISOM_BOX_IMPL_DECL(dlay)\nISOM_BOX_IMPL_DECL(href)\nISOM_BOX_IMPL_DECL(tbox)\nISOM_BOX_IMPL_DECL(blnk)\nISOM_BOX_IMPL_DECL(twrp)\n\n\n#ifndef GPAC_DISABLE_VTT\n\n/*WebVTT boxes*/\nISOM_BOX_IMPL_DECL(boxstring);\nISOM_BOX_IMPL_DECL(vtcu)\nISOM_BOX_IMPL_DECL(vtte)\nISOM_BOX_IMPL_DECL(wvtt)\n\n#endif //GPAC_DISABLE_VTT\n\n/* Items functions */\nISOM_BOX_IMPL_DECL(meta)\nISOM_BOX_IMPL_DECL(xml)\nISOM_BOX_IMPL_DECL(bxml)\nISOM_BOX_IMPL_DECL(iloc)\nISOM_BOX_IMPL_DECL(pitm)\nISOM_BOX_IMPL_DECL(ipro)\nISOM_BOX_IMPL_DECL(infe)\nISOM_BOX_IMPL_DECL(iinf)\nISOM_BOX_IMPL_DECL(iref)\nISOM_BOX_IMPL_DECL(sinf)\nISOM_BOX_IMPL_DECL(frma)\nISOM_BOX_IMPL_DECL(schm)\nISOM_BOX_IMPL_DECL(schi)\nISOM_BOX_IMPL_DECL(enca)\nISOM_BOX_IMPL_DECL(encs)\nISOM_BOX_IMPL_DECL(encv)\nISOM_BOX_IMPL_DECL(resv)\n\n\n/** ISMACryp functions **/\nISOM_BOX_IMPL_DECL(iKMS)\nISOM_BOX_IMPL_DECL(iSFM)\nISOM_BOX_IMPL_DECL(iSLT)\n\n#ifndef GPAC_DISABLE_ISOM_ADOBE\n/* Adobe extensions */\nISOM_BOX_IMPL_DECL(abst)\nISOM_BOX_IMPL_DECL(afra)\nISOM_BOX_IMPL_DECL(asrt)\nISOM_BOX_IMPL_DECL(afrt)\n#endif /*GPAC_DISABLE_ISOM_ADOBE*/\n\n/* Apple extensions */\nISOM_BOX_IMPL_DECL(ilst)\nISOM_BOX_IMPL_DECL(ilst_item)\nISOM_BOX_IMPL_DECL(databox)\nISOM_BOX_IMPL_DECL(gmin)\nISOM_BOX_IMPL_DECL(alis)\nISOM_BOX_IMPL_DECL(clef)\n\n/*OMA extensions*/\nISOM_BOX_IMPL_DECL(ohdr)\nISOM_BOX_IMPL_DECL(grpi)\nISOM_BOX_IMPL_DECL(mdri)\nISOM_BOX_IMPL_DECL(odtt)\nISOM_BOX_IMPL_DECL(odrb)\nISOM_BOX_IMPL_DECL(odkm)\n\n\nISOM_BOX_IMPL_DECL(pasp)\nISOM_BOX_IMPL_DECL(clap)\nISOM_BOX_IMPL_DECL(metx)\nISOM_BOX_IMPL_DECL(txtc)\nISOM_BOX_IMPL_DECL(tsel)\nISOM_BOX_IMPL_DECL(dimC)\nISOM_BOX_IMPL_DECL(dims)\nISOM_BOX_IMPL_DECL(diST)\nISOM_BOX_IMPL_DECL(ac3)\nISOM_BOX_IMPL_DECL(ec3)\nISOM_BOX_IMPL_DECL(dac3)\nISOM_BOX_IMPL_DECL(dec3)\nISOM_BOX_IMPL_DECL(lsrc)\nISOM_BOX_IMPL_DECL(lsr1)\n\nISOM_BOX_IMPL_DECL(subs)\n\nISOM_BOX_IMPL_DECL(tmcd)\nISOM_BOX_IMPL_DECL(tcmi)\nISOM_BOX_IMPL_DECL(fiel)\nISOM_BOX_IMPL_DECL(gama)\nISOM_BOX_IMPL_DECL(chrm)\nISOM_BOX_IMPL_DECL(chan)\n\n\n#ifndef GPAC_DISABLE_ISOM_FRAGMENTS\nISOM_BOX_IMPL_DECL(sidx)\nISOM_BOX_IMPL_DECL(ssix)\nISOM_BOX_IMPL_DECL(leva)\nISOM_BOX_IMPL_DECL(pcrb)\nISOM_BOX_IMPL_DECL(tfdt)\nISOM_BOX_IMPL_DECL(emsg)\n\n#endif\n\nISOM_BOX_IMPL_DECL(rvcc)\nISOM_BOX_IMPL_DECL(sbgp)\nISOM_BOX_IMPL_DECL(sgpd)\nISOM_BOX_IMPL_DECL(saiz)\nISOM_BOX_IMPL_DECL(saio)\n\nISOM_BOX_IMPL_DECL(pssh)\n\nISOM_BOX_IMPL_DECL(tenc)\nISOM_BOX_IMPL_DECL(piff_tenc)\nISOM_BOX_IMPL_DECL(piff_psec)\nISOM_BOX_IMPL_DECL(piff_pssh)\nISOM_BOX_IMPL_DECL(senc)\nISOM_BOX_IMPL_DECL(cslg)\nISOM_BOX_IMPL_DECL(ccst)\nISOM_BOX_IMPL_DECL(auxi)\nISOM_BOX_IMPL_DECL(hvcc)\nISOM_BOX_IMPL_DECL(av1c)\nISOM_BOX_IMPL_DECL(dOps)\nISOM_BOX_IMPL_DECL(prft)\n\n//VPx\nISOM_BOX_IMPL_DECL(vpcc)\nISOM_BOX_IMPL_DECL(SmDm)\nISOM_BOX_IMPL_DECL(CoLL)\n\nISOM_BOX_IMPL_DECL(trep)\n\n//FEC\nISOM_BOX_IMPL_DECL(fiin)\nISOM_BOX_IMPL_DECL(paen)\nISOM_BOX_IMPL_DECL(fpar)\nISOM_BOX_IMPL_DECL(fecr)\nISOM_BOX_IMPL_DECL(segr)\nISOM_BOX_IMPL_DECL(gitn)\nISOM_BOX_IMPL_DECL(fdsa)\nISOM_BOX_IMPL_DECL(fdpa)\nISOM_BOX_IMPL_DECL(extr)\n\n\n/*\n\tAdobe's protection boxes\n*/\nISOM_BOX_IMPL_DECL(adkm)\nISOM_BOX_IMPL_DECL(ahdr)\nISOM_BOX_IMPL_DECL(aprm)\nISOM_BOX_IMPL_DECL(aeib)\nISOM_BOX_IMPL_DECL(akey)\nISOM_BOX_IMPL_DECL(flxs)\nISOM_BOX_IMPL_DECL(adaf)\n\n/* Image File Format declarations */\nISOM_BOX_IMPL_DECL(ispe)\nISOM_BOX_IMPL_DECL(colr)\nISOM_BOX_IMPL_DECL(pixi)\nISOM_BOX_IMPL_DECL(rloc)\nISOM_BOX_IMPL_DECL(irot)\nISOM_BOX_IMPL_DECL(ipco)\nISOM_BOX_IMPL_DECL(iprp)\nISOM_BOX_IMPL_DECL(ipma)\nISOM_BOX_IMPL_DECL(trgr)\nISOM_BOX_IMPL_DECL(trgt)\n\n/* MIAF declarations */\nISOM_BOX_IMPL_DECL(clli)\nISOM_BOX_IMPL_DECL(mdcv)\n\nISOM_BOX_IMPL_DECL(grpl)\n\nISOM_BOX_IMPL_DECL(strk)\nISOM_BOX_IMPL_DECL(stri)\nISOM_BOX_IMPL_DECL(stsg)\nISOM_BOX_IMPL_DECL(elng)\nISOM_BOX_IMPL_DECL(stvi)\nISOM_BOX_IMPL_DECL(auxc)\nISOM_BOX_IMPL_DECL(oinf)\nISOM_BOX_IMPL_DECL(tols)\n\nISOM_BOX_IMPL_DECL(trik)\nISOM_BOX_IMPL_DECL(bloc)\nISOM_BOX_IMPL_DECL(ainf)\nISOM_BOX_IMPL_DECL(mhac)\n\nISOM_BOX_IMPL_DECL(grptype)\n\nISOM_BOX_IMPL_DECL(load)\n\n\n/* Dolby Vision */\nISOM_BOX_IMPL_DECL(dvcC)\nISOM_BOX_IMPL_DECL(dvhe)\n\n\n\n\n#define BOX_DEFINE(__type, b_rad, __par) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 0, 0, __par, \"p12\", GF_FALSE}\n\n#define BOX_DEFINE_S(__type, b_rad, __par, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 0, 0, __par, __spec, GF_FALSE }\n\n#define FBOX_DEFINE(__type, b_rad, __par, __max_v) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, 0, __par, \"p12\", GF_FALSE }\n\n#define FBOX_DEFINE_FLAGS(__type, b_rad, __par, __max_v, flags) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, flags, __par, \"p12\", GF_FALSE }\n\n#define FBOX_DEFINE_FLAGS_S(__type, b_rad, __par, __max_v, flags, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, flags, __par, __spec, GF_FALSE }\n\n#define FBOX_DEFINE_S(__type, b_rad, __par, __max_v, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, 0, 1+__max_v, 0, __par, __spec, GF_FALSE }\n\n#define TREF_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 0, 0, __par, __spec, GF_FALSE }\n\n#define TRGT_DEFINE(__type, b_rad, __par, __4cc, max_version, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 1+max_version, 0, __par, __spec, GF_FALSE }\n\n#define SGPD_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_New, b_rad##_del, b_rad##_Read, b_rad##_Write, b_rad##_Size, b_rad##_dump, __4cc, 1, 0, __par, __spec, GF_FALSE }\n\nstatic struct box_registry_entry {\n\tu32 box_4cc;\n\tGF_Box * (*new_fn)();\n\tvoid (*del_fn)(GF_Box *a);\n\tGF_Err (*read_fn)(GF_Box *s, GF_BitStream *bs);\n\tGF_Err (*write_fn)(GF_Box *s, GF_BitStream *bs);\n\tGF_Err (*size_fn)(GF_Box *a);\n\tGF_Err (*dump_fn)(GF_Box *a, FILE *trace);\n\tu32 alt_4cc;//used for sample grouping type and track / item reference types\n\tu8 max_version_plus_one;\n\tu32 flags;\n\tconst char *parents_4cc;\n\tconst char *spec;\n\tBool disabled;\n} box_registry [] =\n{\n\t//DO NOT MOVE THE FIRST ENTRY\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_UNKNOWN, unkn, \"unknown\", \"unknown\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_UUID, uuid, \"unknown\", \"unknown\"),\n\n\t//all track reference types\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_META, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_HINT, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_FONT, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_HIND, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_VDEP, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_VPLX, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SUBT, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_THUMB, \"p12\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_OD, \"p14\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_DECODE, \"p14\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_OCR, \"p14\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_IPI, \"p14\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_BASE, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SCAL, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_TBAS, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SABT, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_OREF, \"p15\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_ADDA, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_ADRC, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_ILOC, \"p12\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_AVCP, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SWTO, \"p15\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SWFR, \"p15\"),\n\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_CHAP, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_TMCD, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_CDEP, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SCPT, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_SSRC, \"apple\"),\n\tTREF_DEFINE(GF_ISOM_BOX_TYPE_REFT, reftype, \"tref\", GF_ISOM_REF_LYRA, \"apple\"),\n\n\t//all item reference types\n\tTREF_DEFINE( GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_ISOM_REF_TBAS, \"p12\"),\n\tTREF_DEFINE( GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_ISOM_REF_ILOC, \"p12\"),\n\tTREF_DEFINE( GF_ISOM_BOX_TYPE_REFI, ireftype, \"iref\", GF_ISOM_REF_FDEL, \"p12\"),\n\n\t//all sample group descriptions\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ROLL, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_PROL, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RAP, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SEIG, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_OINF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_LINF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TRIF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_NALM, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TELE, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_RASH, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_ALST, \"p12\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SAP, \"p12\"),\n\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVLL, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVSS, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_DTRT, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_MVIF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCIF, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SCNM, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_STSA, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSAS, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_SYNC, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_TSCL, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_VIPR, \"p15\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_LBLI, \"p15\"),\n\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_3GAG, \"3gpp\"),\n\tSGPD_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", GF_ISOM_SAMPLE_GROUP_AVCB, \"3gpp\"),\n\n\t//internal boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRM, gnrm, \"stsd\", \"unknown\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRV, gnrv, \"stsd\", \"unknown\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRA, gnra, \"stsd\", \"unknown\"),\n\n\t//all track group types\n\tTRGT_DEFINE( GF_ISOM_BOX_TYPE_TRGT, trgt, \"trgr\", GF_ISOM_BOX_TYPE_MSRC, 0, \"p12\" ),\n\tTRGT_DEFINE( GF_ISOM_BOX_TYPE_TRGT, trgt, \"trgr\", GF_ISOM_BOX_TYPE_STER, 0, \"p12\" ),\n\tTRGT_DEFINE( GF_ISOM_BOX_TYPE_TRGT, trgt, \"trgr\", GF_ISOM_BOX_TYPE_CSTG, 0, \"p15\" ),\n\n\t//part12 boxes\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FREE, free, \"*\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SKIP, free, \"*\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MDAT, mdat, \"file\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_IDAT, mdat, \"meta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MOOV, moov, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MVHD, mvhd, \"moov\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MDHD, mdhd, \"mdia\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_VMHD, vmhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SMHD, smhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_HMHD, hmhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_NMHD, nmhd, \"minf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STHD, nmhd, \"minf\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STBL, stbl, \"minf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DINF, dinf, \"minf meta\"),\n\tFBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URL, url, \"dref\", 0, 1),\n\tFBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URN, urn, \"dref\", 0, 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CPRT, cprt, \"udta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_KIND, kind, \"udta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_HDLR, hdlr, \"mdia meta minf\", 0),\t//minf container is OK in QT ...\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRAK, trak, \"moov\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_EDTS, edts, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_UDTA, udta, \"moov trak moof traf\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_DREF, dref, \"dinf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSD, stsd, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STTS, stts, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CTTS, ctts, \"stbl\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CSLG, cslg, \"stbl trep\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSH, stsh, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ELST, elst, \"edts\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSC, stsc, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSZ, stsz, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STZ2, stsz, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STCO, stco, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSS, stss, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STDP, stdp, \"stbl\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SDTP, sdtp, \"stbl traf\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_CO64, co64, \"stbl\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MINF, minf, \"mdia\"),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TKHD, tkhd, \"trak\", 1, 0x000001 | 0x000002 | 0x000004 | 0x000008),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TREF, tref, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MDIA, mdia, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MFRA, mfra, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MFRO, mfro, \"mfra\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TFRA, tfra, \"mfra\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ELNG, elng, \"mdia\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PDIN, pdin, \"file\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SBGP, sbgp, \"stbl traf\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SGPD, sgpd, \"stbl traf\", 2),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIZ, saiz, \"stbl traf\", 0, 0),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIZ, saiz, \"stbl traf\", 0, 1),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 0),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 1),\n\tFBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_SUBS, subs, \"stbl traf\", 0, 7), //warning flags are not used as a bit mask but as an enum!!\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRGR, trgr, \"trak\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FTYP, ftyp, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PADB, padb, \"stbl\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_BTRT, btrt, \"sample_entry\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PASP, pasp, \"video_sample_entry ipco\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_CLAP, clap, \"video_sample_entry ipco\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\", 0),\t//apple uses meta in moov->udta\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_XML, xml, \"meta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_BXML, bxml, \"meta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ILOC, iloc, \"meta\", 2),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PITM, pitm, \"meta\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_IPRO, ipro, \"meta\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_INFE, infe, \"iinf\", 3),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_IINF, iinf, \"meta\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_IREF, iref, \"meta\", 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SINF, sinf, \"ipro sample_entry\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RINF, sinf, \"sample_entry\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FRMA, frma, \"sinf rinf\"),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SCHM, schm, \"sinf rinf\", 0, 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SCHI, schi, \"sinf rinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCA, audio_sample_entry, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCV, video_sample_entry, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RESV, video_sample_entry, \"stsd\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TSEL, tsel, \"udta\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STRK, strk, \"udta\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STRI, stri, \"strk\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STRD, def_cont_box, \"strk\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STSG, stsg, \"strd\", 0),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCS, mp4s, \"stsd\"),\n\t//THIS HAS TO BE FIXED, not extensible\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCT, mp4s, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCM, mp4s, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_ENCF, mp4s, \"stsd\"),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_METX, metx, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_METT, metx, \"stsd\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_STVI, stvi, \"schi\", 0),\n\n\t//FEC\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FIIN, fiin, \"meta\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PAEN, paen, \"fiin\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FPAR, fpar, \"paen\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FECR, fecr, \"paen\", 1),\n\t//fire uses the same box syntax as fecr\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_FIRE, fecr, \"paen\", 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SEGR, segr, \"fiin\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_GITN, gitn, \"fiin\", 0),\n\n#ifndef GPAC_DISABLE_ISOM_HINTING\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FDSA, fdsa, \"fdp_sample\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FDPA, fdpa, \"fdsa\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_EXTR, extr, \"fdsa\"),\n#endif\n\n\t//full boxes todo\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_ASSP, assp, 1),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_MERE, assp, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_SRAT, srat, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_CHNL, chnl, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_DMIX, dmix, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_TLOU, alou, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_ALOU, alou, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_URI, uri, 0),\n\t//FBOX_DEFINE( GF_ISOM_BOX_TYPE_URII, urii, 0),\n\n#ifndef GPAC_DISABLE_ISOM_HINTING\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SRTP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_FDP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RRTP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTCP_STSD, ghnt, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_HNTI, hnti, \"udta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SDP, sdp, \"hnti\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_HINF, hinf, \"udta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRPY, trpy, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_NUMP, nump, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TPYL, tpyl, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TOTL, totl, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_NPCK, npck, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TPAY, tpay, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MAXR, maxr, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DMED, dmed, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DIMM, dimm, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DREP, drep, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TMIN, tmin, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TMAX, tmax, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PMAX, pmax, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_DMAX, dmax, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_PAYT, payt, \"hinf\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTP, rtp_hnti, \"hnti\"),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RTPO, rtpo, \"rtp_packet\"),\n\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RELY, rely, \"rtp srtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TIMS, tims, \"rtp srtp rrtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TSRO, tsro, \"rtp srtp rrtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SNRO, snro, \"rtp srtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_NAME, name, \"udta\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TSSY, tssy, \"rrtp\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_RSSR, rssr, \"rrtp\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SRPP, srpp, \"srtp\", 0),\n\n#endif\n\n#ifndef\tGPAC_DISABLE_ISOM_FRAGMENTS\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MVEX, mvex, \"moov\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MEHD, mehd, \"mvex\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TREX, trex, \"mvex\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_LEVA, leva, \"mvex\", 0),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TREP, trep, \"mvex\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_MOOF, moof, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MFHD, mfhd, \"moof\", 0),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TRAF, traf, \"moof\"),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TFHD, tfhd, \"traf\", 0, 0x000001|0x000002|0x000008|0x000010|0x000020|0x010000|0x020000),\n\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TRUN, trun, \"traf\", 0, 0x000001|0x000004|0x000100|0x000200|0x000400|0x000800),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TFDT, tfdt, \"traf\", 1),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STYP, ftyp, \"file\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_PRFT, prft, \"file\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SIDX, sidx, \"file\", 1),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_SSIX, ssix, \"file\", 0),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PCRB, pcrb, \"file\", \"dash\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_EMSG, emsg, \"file\", 1, \"dash\"),\n#endif\n\n\n\t//part14 boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IODS, iods, \"moov\", 0, \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4S, mp4s, \"stsd\", \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4V, video_sample_entry, \"stsd\", \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4A, audio_sample_entry, \"stsd\", \"p14\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_M4DS, m4ds, \"stsd\", \"p14\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ESDS, esds, \"mp4a mp4s mp4v encv enca encs resv wave\", 0, \"p14\"),\n\n\t//part 15 boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVCC, avcc, \"avc1 avc2 avc3 avc4 encv resv ipco\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_SVCC, avcc, \"avc1 avc2 avc3 avc4 svc1 svc2 encv resv\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MVCC, avcc, \"avc1 avc2 avc3 avc4 mvc1 mvc2 encv resv\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVCC, hvcc, \"hvc1 hev1 hvc2 hev2 encv resv ipco dvhe\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHVC, hvcc, \"hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv ipco\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC2, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC3, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC4, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_SVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVC1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HEV1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVC2, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HEV2, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHV1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHE1, video_sample_entry, \"stsd\", \"p15\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVT1, video_sample_entry, \"stsd\", \"p15\"),\n\n\t//mpegh 3D audio boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHA1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHA2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHM1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHM2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHAC, mhac, \"mha1 mha2 mhm1 mhm2 wave\", \"mpegh3Daudio\"),\n\n\t//AV1 in ISOBMFF boxes\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_AV01, video_sample_entry, \"stsd\", \"av1\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_AV1C, av1c, \"av01 encv resv ipco\", \"av1\"),\n\n\t// VP8-9 boxes\n\tFBOX_DEFINE_FLAGS_S( GF_ISOM_BOX_TYPE_VPCC, vpcc, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VP08, video_sample_entry, \"stsd\", \"vp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VP09, video_sample_entry, \"stsd\", \"vp\"),\n\tFBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_SMDM, SmDm, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),\n\tFBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_COLL, CoLL, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),\n\n\t//Opus in ISOBMFF boxes\n#ifndef GPAC_DISABLE_OGG\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_OPUS, audio_sample_entry, \"stsd\", \"Opus\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DOPS, dOps, \"Opus wave\", \"Opus\"),\n#endif\n\n\t//part20 boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LSR1, lsr1, \"stsd\", \"p20\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_LSRC, lsrc, \"lsr1\", \"p20\"),\n\n\t//part30 boxes\n#ifndef GPAC_DISABLE_TTXT\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STXT, metx, \"stsd\"),\n\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TXTC, txtc, \"stxt mett sbtt\", 0),\n#ifndef GPAC_DISABLE_VTT\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_WVTT, wvtt, \"stsd\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTCC_CUE, vtcu, \"vtt_sample\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTE, vtte, \"vtt_sample\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTC_CONFIG, boxstring, \"wvtt\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CTIM, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IDEN, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_STTG, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PAYL, boxstring, \"vttc\", \"p30\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTA, boxstring, \"vttc\", \"p30\"),\n#endif\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_STPP, metx, \"stsd\"),\n\tBOX_DEFINE( GF_ISOM_BOX_TYPE_SBTT, metx, \"stsd\"),\n#endif\n\n\t//Image File Format\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPRP, iprp, \"meta\", \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPCO, ipco, \"iprp\", \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISPE, ispe, \"ipco\", 0, \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_COLR, colr, \"video_sample_entry ipco encv resv\", \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PIXI, pixi, \"ipco\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_RLOC, rloc, \"ipco\", 0, \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IROT, irot, \"ipco\", \"iff\"),\n\tFBOX_DEFINE_FLAGS_S( GF_ISOM_BOX_TYPE_IPMA, ipma, \"iprp\", 1, 1, \"iff\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPL, grpl, \"meta\", \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CCST, ccst, \"sample_entry\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AUXI, auxi, \"sample_entry\", 0, \"iff\"),\n\tTRGT_DEFINE(GF_ISOM_BOX_TYPE_GRPT, grptype, \"grpl\", GF_ISOM_BOX_TYPE_ALTR, 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AUXC, auxc, \"ipco\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_OINF, oinf, \"ipco\", 0, \"iff\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TOLS, tols, \"ipco\", 0, \"iff\"),\n\n\t//MIAF\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_CLLI, clli, \"mp4v jpeg avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"miaf\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_MDCV, mdcv, \"mp4v jpeg avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"miaf\"),\n\n\t//other MPEG boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_RVCC, rvcc, \"avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"rvc\"),\n\n\t//3GPP boxes\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_AMR, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_AMR_WB, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_QCELP, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_EVRC, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_SMV, audio_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_H263, video_sample_entry, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DAMR, gppc, \"samr sawb\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DEVC, gppc, \"sevc enca\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DQCP, gppc, \"sqcp enca\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DSMV, gppc, \"ssmv enca\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_D263, gppc, \"s263 encv\", \"3gpp\"),\n\t//3gpp timed text\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TX3G, tx3g, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TEXT, text, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_FTAB, ftab, \"tx3g text\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_STYL, styl, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HLIT, hlit, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HCLR, hclr, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_KROK, krok, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DLAY, dlay, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_HREF, href, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TBOX, tbox, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_BLNK, blnk, \"text_sample\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TWRP, twrp, \"text_sample\", \"3gpp\"),\n\t//3GPP dims\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIMS, dims, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIMC, dimC, \"stsd\", \"3gpp\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIST, diST, \"stsd\", \"3gpp\"),\n\n\n\t//CENC boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PSSH, pssh, \"moov moof\", 0, \"cenc\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TENC, tenc, \"schi\", 1, \"cenc\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_SENC, senc, \"trak traf\", \"cenc\"),\n\n\t// ISMA 1.1 boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IKMS, iKMS, \"schi\", 0, \"isma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISFM, iSFM, \"schi\", 0, \"isma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISLT, iSLT, \"schi\", 0, \"isma\"),\n\n\t//OMA boxes\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODKM, odkm, \"schi\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_OHDR, ohdr, \"odkm\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GRPI, grpi, \"ohdr\", 0, \"oma\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MDRI, mdri, \"file\", \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODTT, odtt, \"mdri\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODRB, odrb, \"mdri\", 0, \"oma\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODAF, iSFM, \"schi\", 0, \"oma\"),\n\n\t//apple boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP3, audio_sample_entry, \"stsd\", \"apple\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CHPL, chpl, \"udta\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VOID, void, \"\", \"apple\"),\n\tBOX_DEFINE_S(GF_QT_BOX_TYPE_WIDE, wide, \"*\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ILST, ilst, \"meta\", \"apple\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DATA, databox, \"ilst *\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9NAM, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9CMT, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9DAY, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9ART, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9TRK, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9ALB, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9COM, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9WRT, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9TOO, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9CPY, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9DES, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9GEN, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9GRP, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_0xA9ENC, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_aART, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PGAP, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_GNRE, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DISK, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TRKN, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TMPO, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CPIL, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_COVR, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_iTunesSpecificInfo, ilst_item, \"ilst data\", \"apple\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_GMHD, def_cont_box, \"minf\", \"apple\"),\n\tBOX_DEFINE_S(GF_QT_BOX_TYPE_LOAD, load, \"trak\", \"apple\"),\n\tBOX_DEFINE_S(GF_QT_BOX_TYPE_TAPT, def_cont_box, \"trak\", \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_GMIN, gmin, \"gmhd\", 0, \"apple\"),\n\tFBOX_DEFINE_FLAGS_S( GF_QT_BOX_TYPE_ALIS, alis, \"dref\", 0, 1, \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_CLEF, clef, \"tapt\", 0, \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_PROF, clef, \"tapt\", 0, \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_ENOF, clef, \"tapt\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_WAVE, def_cont_box, \"audio_sample_entry\", \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_CHAN, chan, \"audio_sample_entry\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_FRMA, frma, \"wave\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_TERMINATOR, unkn, \"wave\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_ENDA, chrm, \"wave\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_TMCD, def_cont_box, \"gmhd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_NAME, unkn, \"tmcd\", \"apple\"),\n\tFBOX_DEFINE_S( GF_QT_BOX_TYPE_TCMI, tcmi, \"tmcd\", 0, \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_FIEL, fiel, \"video_sample_entry\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_GAMA, gama, \"video_sample_entry\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_CHRM, chrm, \"video_sample_entry\", \"apple\"),\n\tBOX_DEFINE_S( GF_ISOM_SUBTYPE_TEXT, unkn, \"gmhd\", \"apple\"),\n\n\t//QT and prores sample entry types\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_TMCD, tmcd, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_C608, gen_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCH, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCO, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCS, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_APCN, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AP4X, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AP4H, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_RAW, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_TWOS, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_SOWT, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_FL32, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_FL64, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_IN24, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_IN32, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_ULAW, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_ALAW, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_IMA_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_DVCA, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_QDMC, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_QDMC2, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_QCELP, audio_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S( GF_QT_BOX_TYPE_AUDIO_kMP3, audio_sample_entry, \"stsd\", \"apple\"),\n\n\t//dolby boxes\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AC3, audio_sample_entry, \"stsd\", \"dolby\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_EC3, audio_sample_entry, \"stsd\", \"dolby\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_DAC3, dac3, \"ac-3 wave\", \"dolby\"),\n\t{GF_ISOM_BOX_TYPE_DEC3, dec3_New, dac3_del, dac3_Read, dac3_Write, dac3_Size, dac3_dump, 0, 0, 0, \"ec-3 wave enca\", \"dolby\" },\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DVCC, dvcC, \"dvhe dvav dva1 dvh1 avc1 avc2 avc3 avc4 hev1 encv resv\", \"DolbyVision\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DVHE, video_sample_entry, \"stsd\", \"DolbyVision\"),\n\n\t//Adobe boxes\n#ifndef GPAC_DISABLE_ISOM_ADOBE\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ABST, abst, \"file\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRA, afra, \"file\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ASRT, asrt, \"abst\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRT, afrt, \"abst\", 0, \"adobe\"),\n#endif\n\t/*Adobe's protection boxes*/\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADKM, adkm, \"schi\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AHDR, ahdr, \"adkm\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADAF, adaf, \"adkm\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_APRM, aprm, \"ahdr\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AEIB, aeib, \"aprm\", 0, \"adobe\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AKEY, akey, \"aprm\", 0, \"adobe\"),\n\tBOX_DEFINE_S( GF_ISOM_BOX_TYPE_FLXS, flxs, \"akey\", \"adobe\"),\n\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TRIK, trik, \"traf\", 0, \"dece\"),\n\tFBOX_DEFINE_S( GF_ISOM_BOX_TYPE_BLOC, bloc, \"file\", 0, \"dece\"),\n\tFBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_AINF, ainf, \"moov\", 0, 0x000001, \"dece\"),\n\n\n\t//internally handled UUID for smooth - the code points are only used during creation and assigned to UUIDBox->internal4CC\n\t//the box type is still \"uuid\", and the factory is used to read/write/size/dump the code\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_TENC, piff_tenc, \"schi\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSEC, piff_psec, \"trak traf\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSSH, piff_pssh, \"moov moof\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_TFXD, tfxd, \"traf\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_MSSM, uuid, \"file\", \"smooth\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_UUID_TFRF, uuid, \"traf\", \"smooth\"),\n\n\t/* Image tracks */\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_JPEG, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_JP2K, video_sample_entry, \"stsd\", \"apple\"),\n\tBOX_DEFINE_S(GF_ISOM_BOX_TYPE_PNG, video_sample_entry, \"stsd\", \"apple\")\n};\n\nBool gf_box_valid_in_parent(GF_Box *a, const char *parent_4cc)\n{\n\tif (!a || !a->registry || !a->registry->parents_4cc) return GF_FALSE;\n\tif (strstr(a->registry->parents_4cc, parent_4cc) != NULL) return GF_TRUE;\n\treturn GF_FALSE;\n}\n\nGF_EXPORT\nu32 gf_isom_get_num_supported_boxes()\n{\n\treturn sizeof(box_registry) / sizeof(struct box_registry_entry);\n}\n\nvoid gf_isom_registry_disable(u32 boxCode, Bool disable)\n{\n\tu32 i=0, count = gf_isom_get_num_supported_boxes();\n\tfor (i=1; i<count; i++) {\n\t\tif (box_registry[i].box_4cc==boxCode) {\n\t\t\tbox_registry[i].disabled = disable;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nstatic u32 get_box_reg_idx(u32 boxCode, u32 parent_type)\n{\n\tu32 i=0, count = gf_isom_get_num_supported_boxes();\n\tconst char *parent_name = parent_type ? gf_4cc_to_str(parent_type) : NULL;\n\n\tfor (i=1; i<count; i++) {\n\t\tif (box_registry[i].box_4cc==boxCode) {\n\t\t\tif (!parent_type) return i;\n\t\t\tif (strstr(box_registry[i].parents_4cc, parent_name) != NULL) return i;\n\n\t\t\tif (strstr(box_registry[i].parents_4cc, \"sample_entry\") != NULL) {\n\t\t\t\tu32 j = get_box_reg_idx(parent_type, 0);\n\t\t\t\tif (box_registry[j].parents_4cc && (strstr(box_registry[j].parents_4cc, \"stsd\") != NULL))\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nGF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_root_box)\n{\n\tGF_Box *a;\n\ts32 idx = get_box_reg_idx(boxType, parentType);\n\tif (idx==0) {\n#ifndef GPAC_DISABLE_LOGS\n\t\tif (!skip_logs && (boxType != GF_ISOM_BOX_TYPE_UNKNOWN)) {\n\t\t\tswitch (parentType) {\n\t\t\tcase GF_ISOM_BOX_TYPE_ILST:\n\t\t\tcase GF_ISOM_BOX_TYPE_META:\n\t\t\tcase GF_ISOM_BOX_TYPE_UDTA:\n\t\t\tcase GF_ISOM_BOX_TYPE_UNKNOWN:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (is_root_box) {\n\t\t\t\t\tGF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown top-level box type %s\\n\", gf_4cc_to_str(boxType)));\n\t\t\t\t} else if (parentType) {\n\t\t\t\t\tchar szName[10];\n\t\t\t\t\tstrcpy(szName, gf_4cc_to_str(parentType));\n\t\t\t\t\tGF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown box type %s in parent %s\\n\", gf_4cc_to_str(boxType), szName));\n\t\t\t\t} else {\n\t\t\t\t\tGF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] Unknown box type %s\\n\", gf_4cc_to_str(boxType)));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n#endif\n        if (boxType==GF_ISOM_BOX_TYPE_UUID) {\n            a = uuid_New();\n            if (a) a->registry = &box_registry[1];\n        } else {\n            a = unkn_New();\n            ((GF_UnknownBox *)a)->original_4cc = boxType;\n            if (a) a->registry = &box_registry[0];\n        }\n\t\treturn a;\n\t}\n\ta = box_registry[idx].new_fn();\n\n\tif (a) {\n\t\tif (a->type!=GF_ISOM_BOX_TYPE_UUID) {\n\t\t\tif (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) {\n\t\t\t\t((GF_UnknownBox *)a)->original_4cc = boxType;\n\t\t\t} else {\n\t\t\t\ta->type = boxType;\n\t\t\t}\n\t\t}\n\t\ta->registry = &box_registry[idx];\n\t}\n\treturn a;\n}\n\nGF_EXPORT\nGF_Box *gf_isom_box_new(u32 boxType)\n{\n\treturn gf_isom_box_new_ex(boxType, 0, 0, GF_FALSE);\n}\n\nvoid gf_isom_box_add_for_dump_mode(GF_Box *parent, GF_Box *a)\n{\n\tif (use_dump_mode && a && (!parent->other_boxes || (gf_list_find(parent->other_boxes, a)<0) ) )\n\t\tgf_isom_box_add_default(parent, a);\n}\n\nGF_Err gf_isom_box_array_read_ex(GF_Box *parent, GF_BitStream *bs, GF_Err (*add_box)(GF_Box *par, GF_Box *b), u32 parent_type)\n{\n\tGF_Err e;\n\tGF_Box *a = NULL;\n\tBool skip_logs = gf_bs_get_cookie(bs) ? GF_TRUE : GF_FALSE;\n\n\t//we may have terminators in some QT files (4 bytes set to 0 ...)\n\twhile (parent->size>=8) {\n\t\te = gf_isom_box_parse_ex(&a, bs, parent_type, GF_FALSE);\n\t\tif (e) {\n\t\t\tif (a) gf_isom_box_del(a);\n\t\t\treturn e;\n\t\t}\n\t\t//sub box parsing aborted with no error\n\t\tif (!a) return GF_OK;\n\n\t\tif (parent->size < a->size) {\n\t\t\tif (!skip_logs) {\n\t\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" is larger than container box\\n\", gf_4cc_to_str(a->type)));\n\t\t\t}\n\t\t\tparent->size = 0;\n\t\t} else {\n\t\t\tparent->size -= a->size;\n\t\t}\n\n\t\t//check container validity\n\t\tif (strlen(a->registry->parents_4cc)) {\n\t\t\tBool parent_OK = GF_FALSE;\n\t\t\tconst char *parent_code = gf_4cc_to_str(parent->type);\n\t\t\tif (parent->type == GF_ISOM_BOX_TYPE_UNKNOWN)\n\t\t\t\tparent_code = gf_4cc_to_str( ((GF_UnknownBox*)parent)->original_4cc );\n\t\t\tif (strstr(a->registry->parents_4cc, parent_code) != NULL) {\n\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t} else if (!strcmp(a->registry->parents_4cc, \"*\") || strstr(a->registry->parents_4cc, \"* \") || strstr(a->registry->parents_4cc, \" *\")) {\n\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t} else {\n\t\t\t\t//parent must be a sample entry\n\t\t\t\tif (strstr(a->registry->parents_4cc, \"sample_entry\") !=\tNULL) {\n\t\t\t\t\t//parent is in an stsd\n\t\t\t\t\tif (strstr(parent->registry->parents_4cc, \"stsd\") != NULL) {\n\t\t\t\t\t\tif (strstr(a->registry->parents_4cc, \"video_sample_entry\") !=\tNULL) {\n\t\t\t\t\t\t\tif (((GF_SampleEntryBox*)parent)->internal_type==GF_ISOM_SAMPLE_ENTRY_VIDEO) {\n\t\t\t\t\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparent_OK = GF_TRUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//other types are sample formats, eg a 3GPP text sample, RTP hint sample or VTT cue. Not handled at this level\n\t\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) parent_OK = GF_TRUE;\n\t\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_UUID) parent_OK = GF_TRUE;\n\t\t\t}\n\t\t\tif (! parent_OK && !skip_logs) {\n\t\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box \\\"%s\\\" is invalid in container %s\\n\", gf_4cc_to_str(a->type), parent_code));\n\t\t\t}\n\t\t}\n\n\t\te = add_box(parent, a);\n\t\tif (e) {\n\t\t\tif (e == GF_ISOM_INVALID_MEDIA) return GF_OK;\n\t\t\tgf_isom_box_del(a);\n\t\t\treturn e;\n\t\t}\n\t\t//in dump mode store all boxes in other_boxes if not done, so that we can dump the original order\n\t\tgf_isom_box_add_for_dump_mode(parent, a);\n\t}\n\treturn GF_OK;\n}\n\nGF_EXPORT\nGF_Err gf_isom_box_add_default(GF_Box *a, GF_Box *subbox)\n{\n\tif (!a->other_boxes) {\n\t\ta->other_boxes = gf_list_new();\n\t\tif (!a->other_boxes) return GF_OUT_OF_MEM;\n\t}\n\treturn gf_list_add(a->other_boxes, subbox);\n}\n\nGF_EXPORT\nvoid gf_isom_box_del(GF_Box *a)\n{\n\tGF_List *other_boxes;\n\tif (!a) return;\n\tif (skip_box_dump_del) return;\n\n\tother_boxes\t= a->other_boxes;\n\ta->other_boxes = NULL;\n\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Delete invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t} else {\n\t\tif (use_dump_mode) {\n\t\t\tskip_box_dump_del = GF_TRUE;\n\t\t\ta->registry->del_fn(a);\n\t\t\tskip_box_dump_del = GF_FALSE;\n\t\t} else {\n\t\t\ta->registry->del_fn(a);\n\t\t}\n\t}\n\t//delet the other boxes after deleting the box for dumper case where all child boxes are stored in otherbox\n\tif (other_boxes) {\n\t\tgf_isom_box_array_del(other_boxes);\n\t}\n}\n\n\nGF_Err gf_isom_box_read(GF_Box *a, GF_BitStream *bs)\n{\n\tif (!a) return GF_BAD_PARAM;\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\treturn a->registry->read_fn(a, bs);\n}\n\n#ifndef GPAC_DISABLE_ISOM_WRITE\n\nGF_Err gf_isom_box_write_listing(GF_Box *a, GF_BitStream *bs)\n{\n\tif (!a) return GF_BAD_PARAM;\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Write invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\treturn a->registry->write_fn(a, bs);\n}\n\nGF_EXPORT\nGF_Err gf_isom_box_write(GF_Box *a, GF_BitStream *bs)\n{\n\tGF_Err e;\n\tu64 pos = gf_bs_get_position(bs);\n\tif (!a) return GF_BAD_PARAM;\n\tif (a->registry->disabled) return GF_OK;\n\te = gf_isom_box_write_listing(a, bs);\n\tif (e) return e;\n\tif (a->other_boxes) {\n\t\te = gf_isom_box_array_write(a, a->other_boxes, bs);\n\t}\n\tpos = gf_bs_get_position(bs) - pos;\n\tif (pos != a->size) {\n\t\tif ((a->type==GF_ISOM_BOX_TYPE_MDAT) || (a->type==GF_ISOM_BOX_TYPE_IDAT)) {\n\n\t\t} else {\n\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Box %s wrote \"LLU\" bytes but size is \"LLU\"\\n\", gf_4cc_to_str(a->type), pos, a->size ));\n\t\t}\n\t}\n\treturn e;\n}\n\nstatic GF_Err gf_isom_box_size_listing(GF_Box *a)\n{\n\tif (!a) return GF_BAD_PARAM;\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Size invalid box type %s without registry\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\ta->size = 8;\n\n\tif (a->type == GF_ISOM_BOX_TYPE_UUID) {\n\t\ta->size += 16;\n\t}\n\t//the large size is handled during write, cause at this stage we don't know the size\n\tif (a->registry->max_version_plus_one) {\n\t\ta->size += 4;\n\t}\n\treturn a->registry->size_fn(a);\n}\n\n\nGF_EXPORT\nGF_Err gf_isom_box_size(GF_Box *a)\n{\n\tGF_Err e;\n\tif (!a) return GF_BAD_PARAM;\n\tif (a->registry->disabled) {\n\t\ta->size = 0;\n\t\treturn GF_OK;\n\t}\n\te = gf_isom_box_size_listing(a);\n\tif (e) return e;\n\tif (a->other_boxes) {\n\t\te = gf_isom_box_array_size(a, a->other_boxes);\n\t\tif (e) return e;\n\t}\n\treturn GF_OK;\n}\n\n#endif /*GPAC_DISABLE_ISOM_WRITE*/\n\nstatic GF_Err gf_isom_full_box_read(GF_Box *ptr, GF_BitStream *bs)\n{\n\tif (ptr->registry->max_version_plus_one) {\n\t\tGF_FullBox *self = (GF_FullBox *) ptr;\n\t\tif (ptr->size<4) return GF_ISOM_INVALID_FILE;\n\t\tself->version = gf_bs_read_u8(bs);\n\t\tself->flags = gf_bs_read_u24(bs);\n\t\tptr->size -= 4;\n\t}\n\treturn GF_OK;\n}\n\n\nGF_EXPORT\nGF_Err gf_isom_dump_supported_box(u32 idx, FILE * trace)\n{\n\tu32 i;\n\tu32 nb_versions=0;\n\tGF_Err e;\n\tGF_Box *a;\n\n\tif (box_registry[idx].max_version_plus_one) {\n\t\tnb_versions = box_registry[idx].max_version_plus_one - 1;\n\t}\n\tfor (i = 0; i <= nb_versions; i++) {\n\t\ta = gf_isom_box_new(box_registry[idx].box_4cc);\n\t\ta->registry = &box_registry[idx];\n\n\t\tif (box_registry[idx].alt_4cc) {\n\t\t\tif (a->type==GF_ISOM_BOX_TYPE_REFT)\n\t\t\t\t((GF_TrackReferenceTypeBox*)a)->reference_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_REFI)\n\t\t\t\t((GF_ItemReferenceTypeBox*)a)->reference_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_TRGT)\n\t\t\t\t((GF_TrackGroupTypeBox*)a)->group_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_SGPD)\n\t\t\t\t((GF_SampleGroupDescriptionBox*)a)->grouping_type = box_registry[idx].alt_4cc;\n\t\t\telse if (a->type==GF_ISOM_BOX_TYPE_GRPT)\n\t\t\t\t((GF_EntityToGroupTypeBox*)a)->grouping_type = box_registry[idx].alt_4cc;\n\t\t}\n\t\tif (box_registry[idx].max_version_plus_one) {\n\t\t\t((GF_FullBox *)a)->version = i;\n\t\t}\n\t\tif (box_registry[idx].flags) {\n\t\t\tu32 flag_mask=1;\n\t\t\tu32 flags = box_registry[idx].flags;\n\t\t\t((GF_FullBox *)a)->flags = 0;\n\t\t\te = gf_isom_box_dump(a, trace);\n\n\t\t\t//we dump all flags individually and this for all version, in order to simplify the XSLT processing\n\t\t\twhile (!e) {\n\t\t\t\tu32 flag = flags & flag_mask;\n\t\t\t\tflag_mask <<= 1;\n\t\t\t\tif (flag) {\n\t\t\t\t\t((GF_FullBox *)a)->flags = flag;\n\t\t\t\t\te = gf_isom_box_dump(a, trace);\n\t\t\t\t}\n\t\t\t\tif (flag_mask > flags) break;\n\t\t\t\tif (flag_mask == 0x80000000) break;\n\t\t\t}\n\n\t\t} else {\n\t\t\te = gf_isom_box_dump(a, trace);\n\t\t}\n\n\t\tgf_isom_box_del(a);\n\t}\n\treturn e;\n}\n\nGF_EXPORT\nu32 gf_isom_get_supported_box_type(u32 idx)\n{\n\treturn box_registry[idx].box_4cc;\n}\n\n#ifndef GPAC_DISABLE_ISOM_DUMP\n\nGF_Err gf_isom_box_dump_start(GF_Box *a, const char *name, FILE * trace)\n{\n\tfprintf(trace, \"<%s \", name);\n\tif (a->size > 0xFFFFFFFF) {\n\t\tfprintf(trace, \"LargeSize=\\\"\"LLU\"\\\" \", LLU_CAST a->size);\n\t} else {\n\t\tfprintf(trace, \"Size=\\\"%u\\\" \", (u32) a->size);\n\t}\n\tif (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) {\n\t\tfprintf(trace, \"Type=\\\"%s\\\" \", gf_4cc_to_str(((GF_UnknownBox*)a)->original_4cc));\n\t} else {\n\t\tfprintf(trace, \"Type=\\\"%s\\\" \", gf_4cc_to_str(a->type));\n\t}\n\n\tif (a->type == GF_ISOM_BOX_TYPE_UUID) {\n\t\tu32 i;\n\t\tfprintf(trace, \"UUID=\\\"{\");\n\t\tfor (i=0; i<16; i++) {\n\t\t\tfprintf(trace, \"%02X\", (unsigned char) ((GF_UUIDBox*)a)->uuid[i]);\n\t\t\tif ((i<15) && (i%4)==3) fprintf(trace, \"-\");\n\t\t}\n\t\tfprintf(trace, \"}\\\" \");\n\t}\n\n\tif (a->registry->max_version_plus_one) {\n\t\tfprintf(trace, \"Version=\\\"%d\\\" Flags=\\\"%d\\\" \", ((GF_FullBox*)a)->version,((GF_FullBox*)a)->flags);\n\t}\n\n\tfprintf(trace, \"Specification=\\\"%s\\\" \", a->registry->spec);\n\tfprintf(trace, \"Container=\\\"%s\\\" \", a->registry->parents_4cc);\n\t//disable all box dumping until end of this box\n\tif (use_dump_mode) {\n\t\tskip_box_dump_del = GF_TRUE;\n\t}\n\treturn GF_OK;\n}\n\nGF_Err gf_isom_box_dump_ex(void *ptr, FILE * trace, u32 box_4cc)\n{\n\tGF_Box *a = (GF_Box *) ptr;\n\n\tif (skip_box_dump_del) return GF_OK;\n\n\tif (!a) {\n\t\tif (box_4cc) {\n\t\t\tfprintf(trace, \"<!--ERROR: NULL Box Found, expecting %s -->\\n\", gf_4cc_to_str(box_4cc) );\n\t\t} else {\n\t\t\tfprintf(trace, \"<!--ERROR: NULL Box Found-->\\n\");\n\t\t}\n\t\treturn GF_OK;\n\t}\n\tif (!a->registry) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] trying to dump box %s not registered\\n\", gf_4cc_to_str(a->type) ));\n\t\treturn GF_ISOM_INVALID_FILE;\n\t}\n\ta->registry->dump_fn(a, trace);\n\treturn GF_OK;\n}\n\nvoid gf_isom_box_dump_done(const char *name, GF_Box *ptr, FILE *trace)\n{\n\t//enable box dumping and dump other_boxes which contains all source boxes in order\n\tskip_box_dump_del = GF_FALSE;\n\tif (ptr && ptr->other_boxes) {\n\t\tgf_isom_box_array_dump(ptr->other_boxes, trace);\n\t}\n\tif (name)\n\t\tfprintf(trace, \"</%s>\\n\", name);\n}\n\nBool gf_isom_box_is_file_level(GF_Box *s)\n{\n\tif (!s || !s->registry) return GF_FALSE;\n\tif (strstr(s->registry->parents_4cc, \"file\")!= NULL) return GF_TRUE;\n\tif (strstr(s->registry->parents_4cc, \"*\")!= NULL) return GF_TRUE;\n\treturn GF_FALSE;\n}\n#endif\n\n\n#endif /*GPAC_DISABLE_ISOM*/\n"], "filenames": ["src/isomedia/box_funcs.c"], "buggy_code_start_loc": [208], "buggy_code_end_loc": [219], "fixing_code_start_loc": [208], "fixing_code_end_loc": [213], "type": "CWE-476", "message": "A Null pointer dereference vulnerability exits in MP4Box - GPAC version 0.8.0-rev177-g51a8ef874-master via the gf_isom_get_track_id function, which causes a denial of service.", "other": {"cve": {"id": "CVE-2020-25427", "sourceIdentifier": "cve@mitre.org", "published": "2022-01-10T22:15:08.067", "lastModified": "2022-01-18T20:55:53.373", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Null pointer dereference vulnerability exits in MP4Box - GPAC version 0.8.0-rev177-g51a8ef874-master via the gf_isom_get_track_id function, which causes a denial of service."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de desreferencia de puntero Null en MP4Box - GPAC versi\u00f3n 0.8.0-rev177-g51a8ef874-master, por medio de la funci\u00f3n gf_isom_get_track_id, que causa una denegaci\u00f3n de servicio"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gpac:gpac:0.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "93EEFCFD-7417-40E6-84BF-4EA630F2A8A1"}]}]}], "references": [{"url": "https://github.com/gpac/gpac/commit/8e585e623b1d666b4ef736ed609264639cb27701", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gpac/gpac/issues/1406", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gpac/gpac/commit/8e585e623b1d666b4ef736ed609264639cb27701"}}