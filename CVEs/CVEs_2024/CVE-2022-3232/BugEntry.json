{"buggy_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## 2.4.4 (2002-09-15)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use `X-Real-IP` to identify client IP address to mitigate Brute-Force attack #213\n\n## 2.4.3 (2022-09-14)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF in profile's SSH Keys #212\n\n## 2.4.2 (2022-09-12)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3179) #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forwarded-For`, `X-Forwarded-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport grp\nimport logging\nimport os\nimport platform\nimport pwd\nimport subprocess\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport humanfriendly\nimport psutil\nfrom wtforms import validators, widgets\nfrom wtforms.fields import Field, PasswordField, SelectField, StringField\nfrom wtforms.fields.html5 import EmailField\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.core.config import Option\nfrom rdiffweb.core.librdiff import rdiff_backup_version\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\ndef get_pyinfo():\n    try:\n        import distro\n\n        yield _('OS Version'), '%s %s (%s %s)' % (\n            platform.system(),\n            platform.release(),\n            distro.name().capitalize(),\n            distro.version(),\n        )\n    except Exception:\n        yield _('OS Version'), '%s %s' % (platform.system(), platform.release())\n    if hasattr(os, 'path'):\n        yield _('OS Path'), os.environ['PATH']\n    if hasattr(sys, 'version'):\n        yield _('Python Version'), ''.join(sys.version)\n    if hasattr(sys, 'subversion'):\n        yield _('Python Subversion'), ', '.join(sys.subversion)\n    if hasattr(sys, 'prefix'):\n        yield _('Python Prefix'), sys.prefix\n    if hasattr(sys, 'executable'):\n        yield _('Python Executable'), sys.executable\n    if hasattr(sys, 'path'):\n        yield _('Python Path'), ', '.join(sys.path)\n\n\ndef get_osinfo():\n    def gr_name(gid):\n        try:\n            return grp.getgrgid(gid).gr_name\n        except Exception:\n            return\n\n    def pw_name(uid):\n        try:\n            return pwd.getpwuid(os.getuid()).pw_name\n        except Exception:\n            return\n\n    if hasattr(sys, 'getfilesystemencoding'):\n        yield _('File System Encoding'), sys.getfilesystemencoding()\n    if hasattr(os, 'getcwd'):\n        yield _('Current Working Directory'), os.getcwd()\n    if hasattr(os, 'getegid'):\n        yield _('Effective Group'), '%s (%s)' % (os.getegid(), gr_name(os.getegid()))\n    if hasattr(os, 'geteuid'):\n        yield _('Effective User'), '%s (%s)' % (os.geteuid(), pw_name(os.geteuid))\n    if hasattr(os, 'getgid'):\n        yield _('Group'), '%s (%s)' % (os.getgid(), gr_name(os.getgid()))\n    if hasattr(os, 'getuid'):\n        yield _('User'), '%s (%s)' % (os.getuid(), gr_name(os.getuid()))\n    if hasattr(os, 'getgroups'):\n        yield _('Group Membership'), ', '.join(['%s (%s)' % (gid, gr_name(gid)) for gid in os.getgroups()])\n    try:\n        if hasattr(os, 'getpid') and hasattr(os, 'getppid'):\n            yield _('Process ID'), ('%s (parent: %s)' % (os.getpid(), os.getppid()))\n    except Exception:\n        pass\n\n\ndef get_hwinfo():\n    if hasattr(os, 'getloadavg'):\n        yield _('Load Average'), ', '.join(map(str, map(lambda x: round(x, 2), os.getloadavg())))\n    yield _('CPU Count'), psutil.cpu_count()\n    meminfo = psutil.virtual_memory()\n    yield _('Memory usage'), '%s / %s' % (\n        humanfriendly.format_size(meminfo.used),\n        humanfriendly.format_size(meminfo.total),\n    )\n\n\ndef get_pkginfo():\n    yield _('Rdiff-Backup Version'), '.'.join([str(i) for i in rdiff_backup_version()])\n    import jinja2\n\n    yield _('Jinja2 Version'), getattr(jinja2, '__version__')\n    yield _('CherryPy Version'), getattr(cherrypy, '__version__')\n    import sqlalchemy\n\n    yield _('SQLAlchemy Version'), getattr(sqlalchemy, '__version__')\n    try:\n        import ldap\n\n        yield _('LDAP Version'), getattr(ldap, '__version__')\n        yield _('LDAP SASL Support (Cyrus-SASL)'), ldap.SASL_AVAIL  # @UndefinedVariable\n        yield _('LDAP TLS Support (OpenSSL)'), ldap.TLS_AVAIL  # @UndefinedVariable\n    except Exception:\n        pass\n\n\nclass SizeField(Field):\n    \"\"\"\n    A text field which stores a file size as GiB or GB format.\n    \"\"\"\n\n    widget = widgets.TextInput()\n\n    def __init__(self, label=None, validators=None, **kwargs):\n        super(SizeField, self).__init__(label, validators, **kwargs)\n\n    def _value(self):\n        if self.raw_data:\n            return ' '.join(self.raw_data)\n        else:\n            return self.data and humanfriendly.format_size(self.data, binary=True) or ''\n\n    def process_formdata(self, valuelist):\n        if valuelist:\n            value_str = ''.join(valuelist)\n            # parse_size doesn't handle locales.this mean we need to\n            # replace ',' by '.' to get parse and prefix number with 0\n            value_str = value_str.replace(',', '.').strip()\n            # a value must start with a number.\n            if value_str.startswith('.'):\n                value_str = '0' + value_str\n            try:\n                self.data = humanfriendly.parse_size(value_str)\n            except humanfriendly.InvalidSize:\n                self.data = None\n                raise ValueError(self.gettext('Not a valid file size value'))\n\n\nclass UserForm(CherryForm):\n    userid = StringField(_('UserID'))\n    username = StringField(_('Username'), validators=[validators.data_required()])\n    email = EmailField(_('Email'), validators=[validators.optional()])\n    password = PasswordField(_('Password'), validators=[validators.optional()])\n    user_root = StringField(\n        _('Root directory'), description=_(\"Absolute path defining the location of the repositories for this user.\")\n    )\n    role = SelectField(\n        _('User Role'),\n        coerce=int,\n        choices=[(ADMIN_ROLE, _(\"Admin\")), (MAINTAINER_ROLE, _(\"Maintainer\")), (USER_ROLE, _(\"User\"))],\n        default=USER_ROLE,\n        description=_(\n            \"Admin: may browse and delete everything. Maintainer: may browse and delete their own repo. User: may only browser their own repo.\"\n        ),\n    )\n    disk_quota = SizeField(\n        _('Disk space'),\n        validators=[validators.optional()],\n        description=_(\"Users disk spaces (in bytes). Set to 0 to remove quota (unlimited).\"),\n    )\n    disk_usage = SizeField(\n        _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n    )\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.password.validators += [\n            validators.length(\n                min=self.app.cfg.password_min_length,\n                max=self.app.cfg.password_max_length,\n                message=_('Password must have between %(min)d and %(max)d characters.'),\n            )\n        ]\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n    def validate_role(self, field):\n        # Don't allow the user to changes it's \"role\" state.\n        currentuser = cherrypy.request.currentuser\n        if self.username.data == currentuser.username and self.role.data != currentuser.role:\n            raise ValueError(_('Cannot edit your own role.'))\n\n    def populate_obj(self, userobj):\n        # Save password if defined\n        if self.password.data:\n            userobj.set_password(self.password.data, old_password=None)\n        userobj.role = self.role.data\n        userobj.email = self.email.data or ''\n        userobj.user_root = self.user_root.data\n        if not userobj.valid_user_root():\n            flash(_(\"User's root directory %s is not accessible!\") % userobj.user_root, level='error')\n            logger.warning(\"user's root directory %s is not accessible\" % userobj.user_root)\n        # Try to update disk quota if the human readable value changed.\n        # Report error using flash.\n        new_quota = self.disk_quota.data or 0\n        old_quota = humanfriendly.parse_size(humanfriendly.format_size(self.disk_quota.object_data or 0, binary=True))\n        if old_quota != new_quota:\n            userobj.disk_quota = new_quota\n            # Setting quota will silently fail. Check if quota was updated.\n            if userobj.disk_quota != new_quota:\n                flash(_(\"Setting user's quota is not supported\"), level='warning')\n\n\nclass EditUserForm(UserForm):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        # Make username field read-only\n        self.username.render_kw = {'readonly': True}\n        self.username.populate_obj = lambda *args, **kwargs: None\n\n\nclass DeleteUserForm(CherryForm):\n    username = StringField(_('Username'), validators=[validators.data_required()])\n\n\n@cherrypy.tools.is_admin()\nclass AdminPage(Controller):\n    \"\"\"Administration pages. Allow to manage users database.\"\"\"\n\n    logfile = Option('log_file')\n    logaccessfile = Option('log_access_file')\n\n    def _delete_user(self, action, form):\n        assert action == 'delete'\n        assert form\n        # Validate form.\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        if form.username.data == self.app.currentuser.username:\n            flash(_(\"You cannot remove your own account!\"), level='error')\n        else:\n            try:\n                user = self.app.store.get_user(form.username.data)\n                if user:\n                    user.delete()\n                    flash(_(\"User account removed.\"))\n                else:\n                    flash(_(\"User doesn't exists!\"), level='warning')\n            except ValueError as e:\n                flash(e, level='error')\n\n    def _get_log_files(self):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        return [fn for fn in [self.logfile, self.logaccessfile] if fn]\n\n    def _get_log_data(self, fn, num=2000):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        try:\n            return subprocess.check_output(['tail', '-n', str(num), fn], stderr=subprocess.STDOUT).decode('utf-8')\n        except Exception:\n            logging.exception('fail to get log file content')\n            return \"Error getting file content\"\n\n    @cherrypy.expose\n    def default(self):\n        params = {\"user_count\": self.app.store.count_users(), \"repo_count\": self.app.store.count_repos()}\n\n        return self._compile_template(\"admin.html\", **params)\n\n    @cherrypy.expose\n    def logs(self, filename=u\"\"):\n        # get list of log file available.\n        data = \"\"\n        logfiles = OrderedDict([(os.path.basename(fn), fn) for fn in self._get_log_files()])\n        if logfiles:\n            filename = filename or list(logfiles.keys())[0]\n            if filename not in logfiles:\n                raise cherrypy.HTTPError(404, 'invalid log file: ' + filename)\n            data = self._get_log_data(logfiles.get(filename))\n\n        params = {\n            \"filename\": filename,\n            \"logfiles\": logfiles.keys(),\n            \"data\": data,\n        }\n        return self._compile_template(\"admin_logs.html\", **params)\n\n    @cherrypy.expose\n    def users(self, username=None, criteria=u\"\", search=u\"\", action=u\"\", **kwargs):\n\n        # If we're just showing the initial page, just do that\n        if action == \"add\":\n            form = UserForm()\n            if form.validate_on_submit():\n                try:\n                    user = self.app.store.add_user(username)\n                    form.populate_obj(user)\n                    flash(_(\"User added successfully.\"))\n                except Exception as e:\n                    flash(str(e), level='error')\n            else:\n                flash(form.error_message, level='error')\n        elif action == \"edit\":\n            user = self.app.store.get_user(username)\n            if user:\n                form = EditUserForm(obj=user)\n                if form.validate_on_submit():\n                    try:\n                        form.populate_obj(user)\n                        flash(_(\"User information modified successfully.\"))\n                    except Exception as e:\n                        flash(str(e), level='error')\n                else:\n                    flash(form.error_message, level='error')\n            else:\n                flash(_(\"Cannot edit user `%s`: user doesn't exists\") % username, level='error')\n        elif action == 'delete':\n            self._delete_user(action, DeleteUserForm())\n\n        params = {\n            \"add_form\": UserForm(formdata=None),\n            \"edit_form\": EditUserForm(formdata=None),\n            \"criteria\": criteria,\n            \"search\": search,\n            \"users\": list(self.app.store.users(search=search, criteria=criteria)),\n        }\n\n        # Build users page\n        return self._compile_template(\"admin_users.html\", **params)\n\n    @cherrypy.expose\n    def repos(self, criteria=u\"\", search=u\"\"):\n        params = {\n            \"criteria\": criteria,\n            \"search\": search,\n            \"repos\": list(self.app.store.repos(search=search, criteria=criteria)),\n        }\n        return self._compile_template(\"admin_repos.html\", **params)\n\n    @cherrypy.expose\n    def sysinfo(self):\n\n        params = {\n            \"version\": self.app.version,\n            # Config\n            \"cfg\": {k: '********' if 'password' in k else v for k, v in vars(self.app.cfg).items()},\n            # System Info entries\n            \"pyinfo\": list(get_pyinfo()),\n            \"osinfo\": list(get_osinfo()),\n            \"hwinfo\": list(get_hwinfo()),\n            \"ldapinfo\": list(get_pkginfo()),\n        }\n\n        return self._compile_template(\"admin_sysinfo.html\", **params)\n", "# -*- coding: utf-8 -*-\r\n# rdiffweb, A web interface to rdiff-backup repositories\r\n# Copyright (C) 2012-2021 rdiffweb contributors\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU General Public License as published by\r\n# the Free Software Foundation, either version 3 of the License, or\r\n# (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n# GNU General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU General Public License\r\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n'''\r\nCreated on Apr. 5, 2021\r\n\r\n@author: Patrik Dufresne <patrik@ikus-soft.com>\r\n'''\r\n# Define the logger\r\n\r\nimport logging\r\n\r\nimport cherrypy\r\nfrom wtforms import validators\r\nfrom wtforms.fields.core import StringField\r\n\r\nfrom rdiffweb.controller import Controller\r\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\r\nfrom rdiffweb.controller.dispatch import poppath\r\nfrom rdiffweb.controller.filter_authorization import is_maintainer\r\nfrom rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError\r\nfrom rdiffweb.tools.i18n import ugettext as _\r\n\r\n_logger = logging.getLogger(__name__)\r\n\r\n\r\nclass DeleteRepoForm(CherryForm):\r\n    confirm = StringField(_('Confirmation'), validators=[validators.data_required()])\r\n    redirect = StringField(default='/')\r\n\r\n\r\n@poppath()\r\nclass DeletePage(Controller):\r\n    @cherrypy.expose\r\n    @cherrypy.tools.errors(\r\n        error_table={\r\n            DoesNotExistError: 404,\r\n            AccessDeniedError: 403,\r\n        }\r\n    )\r\n    def default(self, path=b\"\", **kwargs):\r\n        # Check permissions on path/repo\r\n        repo, path = self.app.store.get_repo_path(path)\r\n        # Check if path exists with fstats\r\n        path_obj = repo.fstat(path)\r\n        # Check user's permissions\r\n        is_maintainer()\r\n\r\n        # validate form\r\n        form = DeleteRepoForm()\r\n        if not form.validate():\r\n            raise cherrypy.HTTPError(400, form.error_message)\r\n\r\n        # Validate the name\r\n        if form.confirm.data != path_obj.display_name:\r\n            _logger.info(\"do not delete repo, bad confirmation %r != %r\", form.confirm.data, path_obj.display_name)\r\n            raise cherrypy.HTTPError(400, 'bad confirmation')\r\n\r\n        # Delete repository in background using a schedule task.\r\n        scheduled = cherrypy.engine.publish('schedule_task', repo.delete, path)\r\n        assert scheduled\r\n        raise cherrypy.HTTPRedirect(form.redirect.data)\r\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nDefault preference page to show general user information. It allows user\nto change password ans refresh it's repository view.\n\"\"\"\n\nimport logging\nimport re\n\nimport cherrypy\nfrom wtforms.fields.html5 import EmailField\nfrom wtforms.fields.simple import PasswordField\nfrom wtforms.validators import DataRequired, EqualTo, InputRequired, Length, Regexp\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\n_logger = logging.getLogger(__name__)\n\nPATTERN_EMAIL = re.compile(r'[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')\n\n\nclass UserProfileForm(CherryForm):\n    email = EmailField(_('Email'), validators=[DataRequired(), Regexp(PATTERN_EMAIL, message=_(\"Invalid email.\"))])\n\n\nclass UserPasswordForm(CherryForm):\n    current = PasswordField(_('Current password'), validators=[InputRequired(_(\"Current password is missing.\"))])\n    new = PasswordField(\n        _('New password'),\n        validators=[\n            InputRequired(_(\"New password is missing.\")),\n            EqualTo('confirm', message=_(\"The new password and its confirmation do not match.\")),\n        ],\n    )\n    confirm = PasswordField(\n        _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n    )\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.new.validators += [\n            Length(\n                min=self.app.cfg.password_min_length,\n                max=self.app.cfg.password_max_length,\n                message=_('Password must have between %(min)d and %(max)d characters.'),\n            )\n        ]\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n\nclass PrefsGeneralPanelProvider(Controller):\n    \"\"\"\n    Plugin to change user profile and password.\n    \"\"\"\n\n    panel_id = 'general'\n\n    panel_name = _('Profile')\n\n    def _handle_set_password(self, action, form):\n        \"\"\"\n        Called when changing user password.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_password'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update user password\n        try:\n            self.app.currentuser.set_password(form.new.data, old_password=form.current.data)\n            flash(_(\"Password updated successfully.\"), level='success')\n        except ValueError as e:\n            flash(str(e), level='warning')\n\n    def _handle_set_profile_info(self, action, form):\n        \"\"\"\n        Called when changing user profile.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_profile_info'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update the user's email\n        username = self.app.currentuser.username\n        _logger.info(\"updating user [%s] email [%s]\", username, form.email.data)\n        self.app.currentuser.email = form.email.data\n        # Report success\n        flash(_(\"Profile updated successfully.\"), level='success')\n\n    def render_prefs_panel(self, panelid, action=None, **kwargs):  # @UnusedVariable\n        # Process the parameters.\n        profile_form = UserProfileForm(email=self.app.currentuser.email)\n        password_form = UserPasswordForm()\n        if action == \"set_profile_info\":\n            self._handle_set_profile_info(action, profile_form)\n        elif action == \"set_password\":\n            self._handle_set_password(action, password_form)\n        elif action == \"update_repos\":\n            self.app.currentuser.refresh_repos(delete=True)\n            flash(_(\"Repositories successfully updated\"), level='success')\n        elif action is None:\n            pass\n        else:\n            _logger.warning(\"unknown action: %s\", action)\n            raise cherrypy.NotFound(\"Unknown action\")\n        params = {\n            'profile_form': profile_form,\n            'password_form': password_form,\n        }\n        return \"prefs_general.html\", params\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 30, 2015\n\n@author: Patrik Dufresne\n\"\"\"\n\nimport os\nfrom unittest.mock import ANY, MagicMock\n\nimport cherrypy\n\nimport rdiffweb.test\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\n\n\nclass AbstractAdminTest(rdiffweb.test.WebCase):\n    \"\"\"Class to regroup command method to test admin page.\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self._quota = {}\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('user_added', self.listener.user_added, priority=50)\n        cherrypy.engine.subscribe('user_attr_changed', self.listener.user_attr_changed, priority=50)\n        cherrypy.engine.subscribe('user_deleted', self.listener.user_deleted, priority=50)\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n        self.listener.get_disk_quota.side_effect = self._load_quota\n        cherrypy.engine.subscribe('get_disk_quota', self.listener.get_disk_quota, priority=40)\n        self.listener.get_disk_usage.return_value = 0\n        cherrypy.engine.subscribe('get_disk_usage', self.listener.get_disk_usage, priority=40)\n        self.listener.set_disk_quota.side_effect = self._store_quota\n        cherrypy.engine.subscribe('set_disk_quota', self.listener.set_disk_quota, priority=40)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('user_added', self.listener.user_added)\n        cherrypy.engine.unsubscribe('user_attr_changed', self.listener.user_attr_changed)\n        cherrypy.engine.unsubscribe('user_deleted', self.listener.user_deleted)\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        cherrypy.engine.unsubscribe('get_disk_quota', self.listener.get_disk_quota)\n        cherrypy.engine.unsubscribe('get_disk_usage', self.listener.get_disk_usage)\n        cherrypy.engine.unsubscribe('set_disk_quota', self.listener.set_disk_quota)\n        return super().tearDown()\n\n    def _store_quota(self, userobj, value):\n        self._quota[userobj.username] = value\n\n    def _load_quota(self, userobj):\n        return self._quota.get(userobj.username, 0)\n\n    def _add_user(self, username=None, email=None, password=None, user_root=None, role=None):\n        b = {}\n        b['action'] = 'add'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _edit_user(self, username=None, email=None, password=None, user_root=None, role=None, disk_quota=None):\n        b = {}\n        b['action'] = 'edit'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        if disk_quota is not None:\n            b['disk_quota'] = disk_quota\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _delete_user(self, username='test1'):\n        b = {'action': 'delete', 'username': username}\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n\nclass AdminUsersAsAdminTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    login = True\n\n    def test_add_user_with_role_admin(self):\n        # When trying to create a new user with role admin\n        self._add_user(\"admin_role\", \"admin_role@test.com\", \"password\", \"/home/\", ADMIN_ROLE)\n        # Then page return success\n        self.assertStatus(200)\n        # Then database is updated\n        userobj = self.app.store.get_user('admin_role')\n        self.assertEqual(ADMIN_ROLE, userobj.role)\n        # Then notification was raised\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_add_user_with_role_maintainer(self):\n        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"password\", \"/home/\", MAINTAINER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(MAINTAINER_ROLE, self.app.store.get_user('maintainer_role').role)\n\n    def test_add_user_with_role_user(self):\n        self._add_user(\"user_role\", \"user_role@test.com\", \"password\", \"/home/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(USER_ROLE, self.app.store.get_user('user_role').role)\n\n    def test_add_user_with_invalid_role(self):\n        # When trying to create a new user with an invalid role (admin instead of 0)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test1234\", \"/home/\", 'admin')\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Invalid Choice: could not coerce')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n        # When trying to create a new user with an invalid role (-1)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", -1)\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Not a valid choice')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n    def test_add_edit_delete(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", \"test2@test.com\", \"test1234\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"test2@test.com\")\n        self.listener.user_added.assert_called_once()\n        self.listener.user_password_changed.assert_called_once()\n        self.listener.user_password_changed.reset_mock()\n        #  Update user\n        self._edit_user(\"test2\", \"chaned@test.com\", \"new-password\", \"/tmp/\", ADMIN_ROLE)\n        self.listener.user_attr_changed.assert_called()\n        self.listener.user_password_changed.assert_called_once()\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"chaned@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        #  Check with filters\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"test2\")\n\n        self._delete_user(\"test2\")\n        self.listener.user_deleted.assert_called()\n        self.assertStatus(200)\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"test2\")\n\n    def test_add_edit_delete_user_with_encoding(self):\n        \"\"\"\n        Check creation of user with non-ascii char.\n        \"\"\"\n        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"password\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"\u00e9ric@test.com\")\n        # Update user\n        self._edit_user(\"\u00c9ric\", \"eric.l\u00e9tourno@test.com\", \"\u00e9cureuil\", \"/tmp/\", ADMIN_ROLE)\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"eric.l\u00e9tourno@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        # Check with filter\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"\u00c9ric\")\n\n        self._delete_user(\"\u00c9ric\")\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"\u00c9ric\")\n\n    def test_add_user_with_empty_username(self):\n        \"\"\"\n        Verify failure trying to create user without username.\n        \"\"\"\n        self._add_user(\"\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertInBody(\"username: This field is required.\")\n\n    def test_add_user_with_existing_username(self):\n        \"\"\"\n        Verify failure trying to add the same user.\n        \"\"\"\n        # Given a user named `test1`\n        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n        # When trying to create a new user with the same name\n        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n        # Then the user list is displayed with an error message.\n        self.assertStatus(200)\n        self.assertInBody(\"User test1 already exists.\")\n\n    def test_add_user_with_invalid_root_directory(self):\n        \"\"\"\n        Verify failure to add a user with invalid root directory.\n        \"\"\"\n        try:\n            self._delete_user(\"test5\")\n        except Exception:\n            pass\n        self._add_user(\"test5\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_add_without_email(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", None, \"password\", \"/tmp/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n    def test_add_without_user_root(self):\n        #  Add user to be listed\n        self._add_user(\"test6\", None, \"password\", None, USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n        user = self.app.store.get_user('test6')\n        self.assertEqual('', user.user_root)\n\n    def test_delete_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure to delete invalid username.\n        \"\"\"\n        self._delete_user(\"test3\")\n        self.assertInBody(\"User doesn&#39;t exists!\")\n\n    def test_delete_our_self(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        self._delete_user(self.USERNAME)\n        self.assertInBody(\"You cannot remove your own account!\")\n\n    def test_delete_user_admin(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        # Create another admin user\n        self._add_user('admin2', '', 'password', '', ADMIN_ROLE)\n        self.getPage(\"/logout/\")\n        self._login('admin2', 'password')\n\n        # Try deleting admin user\n        self._delete_user(self.USERNAME)\n        self.assertStatus(200)\n        self.assertInBody(\"can&#39;t delete admin user\")\n\n    def test_change_password_with_too_short(self):\n        self._edit_user(self.USERNAME, password='short')\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_password_with_too_long(self):\n        new_password = 'a' * 129\n        self._edit_user(self.USERNAME, password=new_password)\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_admin_password(self):\n        # Given rdiffweb is configured with admin-password option\n        self.app.cfg.admin_password = 'hardcoded'\n        try:\n            # When trying to update admin password\n            self._edit_user('admin', password='new-password')\n            # Then the form is refused with 200 OK with an error message.\n            self.assertStatus(200)\n            self.assertInBody(\"can&#39;t update admin-password defined in configuration file\")\n        finally:\n            self.app.cfg.admin_password = None\n\n    def test_edit_user_with_invalid_path(self):\n        \"\"\"\n        Verify failure trying to update user with invalid path.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self._edit_user(\"test1\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n        self.assertNotInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_list(self):\n        self.getPage(\"/admin/users/\")\n        self.assertInBody(\"Users\")\n        self.assertInBody(\"User management\")\n        self.assertInBody(\"Add user\")\n\n    def test_edit_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure trying to update invalid user.\n        \"\"\"\n        # Given an invalid username\n        username = 'invalid'\n        # When trying to edit the user\n        self._edit_user(username, \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        # Then the user list is displayed with an error message\n        self.assertStatus(200)\n        self.assertInBody(\"Cannot edit user `invalid`: user doesn&#39;t exists\")\n\n    def test_criteria(self):\n        \"\"\"\n        Check if admin criteria is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertNotInBody(\"test1\")\n\n    def test_search(self):\n        \"\"\"\n        Check if user search is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users?search=tes\")\n        self.assertInBody(\"test1\")\n        self.getPage(\"/admin/users?search=coucou\")\n        self.assertNotInBody(\"test1\")\n\n    def test_user_invalid_root(self):\n        # Delete all user's\n        for user in self.app.store.users():\n            if user.username != self.USERNAME:\n                user.delete()\n        # Change the user's root\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/invalid\"\n        self.getPage(\"/admin/users\")\n        self.assertInBody(\"Root directory not accessible!\")\n\n        # Query the page by default\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/tmp/\"\n        self.getPage(\"/admin/users\")\n        self.assertNotInBody(\"Root directory not accessible!\")\n\n    def test_get_quota(self):\n        # Mock a quota.\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 654321\n        # When querying the user list\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertStatus(200)\n        # Then get_disk_quota listenre is called\n        self.listener.get_disk_quota.assert_called()\n        # Then the quota value is displayed in human readable format\n        self.assertInBody(\"638.99 KiB\")\n        self.assertStatus(200)\n\n    def test_set_quota(self):\n        # When updating user quota.\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then listenr get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_gib(self):\n        # When updating user quota\n        self._edit_user(\"admin\", disk_quota='1GiB')\n        # Then listern get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1073741824)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_comma(self):\n        # When updating quota with comma value\n        self._edit_user(\"admin\", disk_quota='1,5 GiB')\n        # Then listner get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1610612736)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_leading_dot(self):\n        # When updating quota with leading dot\n        self._edit_user(\"admin\", disk_quota='.5 GiB')\n        # Then listener get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 536870912)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_empty(self):\n        # When quota is not defined\n        self._edit_user(\"admin\", disk_quota='')\n        # Then listener is not called.\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_same_value(self):\n        # Given an exiting quota\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 1234567890\n        # When setting the quota value to the same value\n        self._edit_user(\"admin\", disk_quota='1.15 GiB')\n        #  Then listener is not called\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_unsupported(self):\n        # Given setting quota is not supported\n        self.listener.set_disk_quota.side_effect = None\n        self.listener.set_disk_quota.return_value = None\n        # When updating the quota\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        self.assertInBody(\"Setting user&#39;s quota is not supported\")\n        self.assertStatus(200)\n\n\nclass AdminUsersAsUserTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        # Add test user\n        self.app.store.add_user('test', 'test123')\n        self._login('test', 'test123')\n\n    def test_add_user(self):\n        \"\"\"\n        Check if adding user is forbidden.\n        \"\"\"\n        self._add_user(\"test2\", \"test2@test.com\", \"test2\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_delete_user(self):\n        \"\"\"\n        Check if deleting user is forbidden.\n        \"\"\"\n        self._delete_user(\"test\")\n        self.assertStatus(403)\n\n    def test_edit_user(self):\n        \"\"\"\n        Check if editing user is forbidden.\n        \"\"\"\n        self._edit_user(\"test\", \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_users(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/users\")\n        self.assertStatus(403)\n\n    def test_repos(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(403)\n\n\nclass AdminWithNoLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_logs(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"No log files\")\n\n\nclass AdminWithLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': '/tmp/rdiffweb.log', 'logaccessfile': '/tmp/rdiffweb-access.log'}\n\n    def test_logs(self):\n        with open('/tmp/rdiffweb.log', 'w') as f:\n            f.write(\"content of log file\")\n        with open('/tmp/rdiffweb-access.log', 'w') as f:\n            f.write(\"content of log file\")\n        try:\n            self.getPage(\"/admin/logs/\")\n            self.assertStatus(200)\n            self.assertInBody(\"rdiffweb.log\")\n            self.assertInBody(\"content of log file\")\n            self.assertInBody(\"rdiffweb-access.log\")\n            self.assertNotInBody(\"Error getting file content\")\n        finally:\n            os.remove('/tmp/rdiffweb.log')\n            os.remove('/tmp/rdiffweb-access.log')\n\n\nclass AdminWithLogMissingTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': './rdiffweb.log', 'logaccessfile': './rdiffweb-access.log'}\n\n    def test_logs_with_no_file(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"rdiffweb.log\")\n        self.assertInBody(\"Error getting file content\")\n\n    def test_logs_with_invalid_file(self):\n        self.getPage(\"/admin/logs/invalid\")\n        self.assertStatus(404)\n\n\nclass AdminReposTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_repos(self):\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(200)\n\n    def test_repos_with_search(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?search=test\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that doesn't exists\n        self.getPage(\"/admin/repos?search=coucou\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n    def test_repos_with_criteria(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=ok\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=failed\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n\nclass AdminSysinfoTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_sysinfo(self):\n        self.getPage(\"/admin/sysinfo\")\n        self.assertStatus(200)\n        self.assertInBody(\"Operating System Info\")\n        self.assertInBody(\"Python Info\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Apr 10, 2016\n\n@author: Patrik Dufresne <patrik@ikus-soft.com>\n\"\"\"\n\nimport os\nfrom time import sleep\nfrom unittest.case import skipIf\n\nfrom parameterized import parameterized\n\nimport rdiffweb.test\nfrom rdiffweb.core.librdiff import rdiff_backup_version\nfrom rdiffweb.core.store import MAINTAINER_ROLE, USER_ROLE\n\nRDIFF_BACKUP_VERSION = rdiff_backup_version()\n\n\nclass DeleteRepoTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def _delete(self, user, repo, confirm, redirect=None):\n        body = {}\n        if confirm is not None:\n            body.update({'confirm': confirm})\n        if redirect is not None:\n            body['redirect'] = redirect\n        self.getPage(\"/delete/\" + user + \"/\" + repo + \"/\", method=\"POST\", body=body)\n\n    @skipIf(RDIFF_BACKUP_VERSION < (2, 0, 1), \"rdiff-backup-delete is available since 2.0.1\")\n    @parameterized.expand(\n        [\n            (\"with_dir\", 'admin', '/testcases/Revisions', 'Revisions', 303, 404),\n            (\"with_dir_wrong_confirmation\", 'admin', '/testcases/Revisions', 'invalid', 400, 200),\n            (\"with_file\", 'admin', '/testcases/Revisions/Data', 'Data', 303, 404),\n            (\"with_file_wrong_confirmation\", 'admin', '/testcases/Revisions/Data', 'invalid', 400, 200),\n            (\"with_invalid\", 'admin', '/testcases/invalid', 'invalid', 404, 404),\n            (\"with_broken_symlink\", 'admin', '/testcases/BrokenSymlink', 'BrokenSymlink', 303, 404),\n            (\"with_utf8\", 'admin', '/testcases/R%C3%A9pertoire%20Existant', 'R\u00e9pertoire Existant', 303, 404),\n            (\"with_rdiff_backup_data\", 'admin', '/testcases/rdiff-backup-data', 'rdiff-backup-data', 404, 404),\n            (\"with_quoted_path\", 'admin', '/testcases/Char%20%3B090%20to%20quote', 'Char Z to quote', 303, 404),\n        ]\n    )\n    def test_delete_path(self, unused, username, path, confirmation, expected_status, expected_history_status):\n        # When trying to delete a file or a folder with a confirmation\n        self._delete(username, path, confirmation)\n        # Then a status is returned\n        self.assertStatus(expected_status)\n        # Check filesystem\n        sleep(1)\n        self.getPage(\"/history/\" + username + \"/\" + path)\n        self.assertStatus(expected_history_status)\n\n    def test_delete_repo(self):\n        \"\"\"\n        Check to delete a repo.\n        \"\"\"\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Delete repo\n        self._delete(self.USERNAME, self.REPO, 'testcases')\n        self.assertStatus(303)\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_with_slash(self):\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Then delete it.\n        self._delete(self.USERNAME, self.REPO, 'testcases')\n        self.assertStatus(303)\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_wrong_confirm(self):\n        \"\"\"\n        Check failure to delete a repo with wrong confirmation.\n        \"\"\"\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Delete repo with wrong confirmation.\n        self._delete(self.USERNAME, self.REPO, 'wrong')\n        # TODO Make sure the repository is not delete\n        self.assertStatus(400)\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n\n    def test_delete_repo_without_confirm(self):\n        \"\"\"\n        Check failure to delete a repo with wrong confirmation.\n        \"\"\"\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Delete repo without confirmation.\n        self._delete(self.USERNAME, self.REPO, None)\n        # Make sure the repository is not delete\n        self.assertStatus(400)\n        self.assertInBody('confirm: This field is required')\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n\n    def test_delete_repo_as_admin(self):\n        # Create a another user with admin right\n        user_obj = self.app.store.add_user('anotheruser', 'password')\n        user_obj.user_root = self.testcases\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n\n        self._delete('anotheruser', 'testcases', 'testcases', redirect='/admin/repos/')\n        self.assertStatus(303)\n        location = self.assertHeader('Location')\n        self.assertTrue(location.endswith('/admin/repos/'))\n\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in user_obj.repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_as_maintainer(self):\n        self.assertTrue(os.path.isdir(self.testcases))\n\n        # Create a another user with maintainer right\n        user_obj = self.app.store.add_user('maintainer', 'password')\n        user_obj.user_root = self.testcases\n        user_obj.role = MAINTAINER_ROLE\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n\n        # Login as maintainer\n        self._login('maintainer', 'password')\n\n        # Try to delete own own repo\n        self._delete('maintainer', 'testcases', 'testcases', redirect='/admin/repos/')\n        self.assertStatus(303)\n        location = self.assertHeader('Location')\n        self.assertTrue(location.endswith('/admin/repos/'))\n\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in user_obj.repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_as_user(self):\n        # Create a another user with maintainer right\n        user_obj = self.app.store.add_user('user', 'password')\n        user_obj.user_root = self.testcases\n        user_obj.role = USER_ROLE\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n\n        # Login as maintainer\n        self._login('user', 'password')\n\n        # Try to delete own own repo\n        self._delete('user', 'testcases', 'testcases', redirect='/admin/repos/')\n        self.assertStatus(403)\n\n        # Check database don't change\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n        self.assertTrue(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_does_not_exists(self):\n        # Given an invalid repo\n        repo = 'invalid'\n        # When trying to delete this repo\n        self._delete(self.USERNAME, repo, repo)\n        # Then a 404 is return to the user\n        self.assertStatus(404)\n"], "fixing_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## 2.4.5 (2002-09-16)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF on repository deletion and user deletion [CVE-2022-3232](https://nvd.nist.gov/vuln/detail/CVE-2022-3232) #214 #215\n\n## 2.4.4 (2002-09-15)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use `X-Real-IP` to identify client IP address to mitigate Brute-Force attack #213\n\n## 2.4.3 (2022-09-14)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF in profile's SSH Keys [CVE-2022-3221](https://nvd.nist.gov/vuln/detail/CVE-2022-3221) #212\n\n## 2.4.2 (2022-09-12)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3179) #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forwarded-For`, `X-Forwarded-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport grp\nimport logging\nimport os\nimport platform\nimport pwd\nimport subprocess\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport humanfriendly\nimport psutil\nfrom wtforms import validators, widgets\nfrom wtforms.fields import Field, PasswordField, SelectField, StringField\nfrom wtforms.fields.html5 import EmailField\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.core.config import Option\nfrom rdiffweb.core.librdiff import rdiff_backup_version\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\ndef get_pyinfo():\n    try:\n        import distro\n\n        yield _('OS Version'), '%s %s (%s %s)' % (\n            platform.system(),\n            platform.release(),\n            distro.name().capitalize(),\n            distro.version(),\n        )\n    except Exception:\n        yield _('OS Version'), '%s %s' % (platform.system(), platform.release())\n    if hasattr(os, 'path'):\n        yield _('OS Path'), os.environ['PATH']\n    if hasattr(sys, 'version'):\n        yield _('Python Version'), ''.join(sys.version)\n    if hasattr(sys, 'subversion'):\n        yield _('Python Subversion'), ', '.join(sys.subversion)\n    if hasattr(sys, 'prefix'):\n        yield _('Python Prefix'), sys.prefix\n    if hasattr(sys, 'executable'):\n        yield _('Python Executable'), sys.executable\n    if hasattr(sys, 'path'):\n        yield _('Python Path'), ', '.join(sys.path)\n\n\ndef get_osinfo():\n    def gr_name(gid):\n        try:\n            return grp.getgrgid(gid).gr_name\n        except Exception:\n            return\n\n    def pw_name(uid):\n        try:\n            return pwd.getpwuid(os.getuid()).pw_name\n        except Exception:\n            return\n\n    if hasattr(sys, 'getfilesystemencoding'):\n        yield _('File System Encoding'), sys.getfilesystemencoding()\n    if hasattr(os, 'getcwd'):\n        yield _('Current Working Directory'), os.getcwd()\n    if hasattr(os, 'getegid'):\n        yield _('Effective Group'), '%s (%s)' % (os.getegid(), gr_name(os.getegid()))\n    if hasattr(os, 'geteuid'):\n        yield _('Effective User'), '%s (%s)' % (os.geteuid(), pw_name(os.geteuid))\n    if hasattr(os, 'getgid'):\n        yield _('Group'), '%s (%s)' % (os.getgid(), gr_name(os.getgid()))\n    if hasattr(os, 'getuid'):\n        yield _('User'), '%s (%s)' % (os.getuid(), gr_name(os.getuid()))\n    if hasattr(os, 'getgroups'):\n        yield _('Group Membership'), ', '.join(['%s (%s)' % (gid, gr_name(gid)) for gid in os.getgroups()])\n    try:\n        if hasattr(os, 'getpid') and hasattr(os, 'getppid'):\n            yield _('Process ID'), ('%s (parent: %s)' % (os.getpid(), os.getppid()))\n    except Exception:\n        pass\n\n\ndef get_hwinfo():\n    if hasattr(os, 'getloadavg'):\n        yield _('Load Average'), ', '.join(map(str, map(lambda x: round(x, 2), os.getloadavg())))\n    yield _('CPU Count'), psutil.cpu_count()\n    meminfo = psutil.virtual_memory()\n    yield _('Memory usage'), '%s / %s' % (\n        humanfriendly.format_size(meminfo.used),\n        humanfriendly.format_size(meminfo.total),\n    )\n\n\ndef get_pkginfo():\n    yield _('Rdiff-Backup Version'), '.'.join([str(i) for i in rdiff_backup_version()])\n    import jinja2\n\n    yield _('Jinja2 Version'), getattr(jinja2, '__version__')\n    yield _('CherryPy Version'), getattr(cherrypy, '__version__')\n    import sqlalchemy\n\n    yield _('SQLAlchemy Version'), getattr(sqlalchemy, '__version__')\n    try:\n        import ldap\n\n        yield _('LDAP Version'), getattr(ldap, '__version__')\n        yield _('LDAP SASL Support (Cyrus-SASL)'), ldap.SASL_AVAIL  # @UndefinedVariable\n        yield _('LDAP TLS Support (OpenSSL)'), ldap.TLS_AVAIL  # @UndefinedVariable\n    except Exception:\n        pass\n\n\nclass SizeField(Field):\n    \"\"\"\n    A text field which stores a file size as GiB or GB format.\n    \"\"\"\n\n    widget = widgets.TextInput()\n\n    def __init__(self, label=None, validators=None, **kwargs):\n        super(SizeField, self).__init__(label, validators, **kwargs)\n\n    def _value(self):\n        if self.raw_data:\n            return ' '.join(self.raw_data)\n        else:\n            return self.data and humanfriendly.format_size(self.data, binary=True) or ''\n\n    def process_formdata(self, valuelist):\n        if valuelist:\n            value_str = ''.join(valuelist)\n            # parse_size doesn't handle locales.this mean we need to\n            # replace ',' by '.' to get parse and prefix number with 0\n            value_str = value_str.replace(',', '.').strip()\n            # a value must start with a number.\n            if value_str.startswith('.'):\n                value_str = '0' + value_str\n            try:\n                self.data = humanfriendly.parse_size(value_str)\n            except humanfriendly.InvalidSize:\n                self.data = None\n                raise ValueError(self.gettext('Not a valid file size value'))\n\n\nclass UserForm(CherryForm):\n    userid = StringField(_('UserID'))\n    username = StringField(_('Username'), validators=[validators.data_required()])\n    email = EmailField(_('Email'), validators=[validators.optional()])\n    password = PasswordField(_('Password'), validators=[validators.optional()])\n    user_root = StringField(\n        _('Root directory'), description=_(\"Absolute path defining the location of the repositories for this user.\")\n    )\n    role = SelectField(\n        _('User Role'),\n        coerce=int,\n        choices=[(ADMIN_ROLE, _(\"Admin\")), (MAINTAINER_ROLE, _(\"Maintainer\")), (USER_ROLE, _(\"User\"))],\n        default=USER_ROLE,\n        description=_(\n            \"Admin: may browse and delete everything. Maintainer: may browse and delete their own repo. User: may only browser their own repo.\"\n        ),\n    )\n    disk_quota = SizeField(\n        _('Disk space'),\n        validators=[validators.optional()],\n        description=_(\"Users disk spaces (in bytes). Set to 0 to remove quota (unlimited).\"),\n    )\n    disk_usage = SizeField(\n        _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n    )\n\n    def validate_password(self, field):\n        validator = validators.length(\n            min=self.app.cfg.password_min_length,\n            max=self.app.cfg.password_max_length,\n            message=_('Password must have between %(min)d and %(max)d characters.'),\n        )\n        validator(self, field)\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n    def validate_role(self, field):\n        # Don't allow the user to changes it's \"role\" state.\n        currentuser = cherrypy.request.currentuser\n        if self.username.data == currentuser.username and self.role.data != currentuser.role:\n            raise ValueError(_('Cannot edit your own role.'))\n\n    def populate_obj(self, userobj):\n        # Save password if defined\n        if self.password.data:\n            userobj.set_password(self.password.data, old_password=None)\n        userobj.role = self.role.data\n        userobj.email = self.email.data or ''\n        userobj.user_root = self.user_root.data\n        if not userobj.valid_user_root():\n            flash(_(\"User's root directory %s is not accessible!\") % userobj.user_root, level='error')\n            logger.warning(\"user's root directory %s is not accessible\" % userobj.user_root)\n        # Try to update disk quota if the human readable value changed.\n        # Report error using flash.\n        new_quota = self.disk_quota.data or 0\n        old_quota = humanfriendly.parse_size(humanfriendly.format_size(self.disk_quota.object_data or 0, binary=True))\n        if old_quota != new_quota:\n            userobj.disk_quota = new_quota\n            # Setting quota will silently fail. Check if quota was updated.\n            if userobj.disk_quota != new_quota:\n                flash(_(\"Setting user's quota is not supported\"), level='warning')\n\n\nclass EditUserForm(UserForm):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        # Make username field read-only\n        self.username.render_kw = {'readonly': True}\n        self.username.populate_obj = lambda *args, **kwargs: None\n\n\nclass DeleteUserForm(CherryForm):\n    username = StringField(_('Username'), validators=[validators.data_required()])\n\n\n@cherrypy.tools.is_admin()\nclass AdminPage(Controller):\n    \"\"\"Administration pages. Allow to manage users database.\"\"\"\n\n    logfile = Option('log_file')\n    logaccessfile = Option('log_access_file')\n\n    def _delete_user(self, action, form):\n        assert action == 'delete'\n        assert form\n        # Validate form.\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        if form.username.data == self.app.currentuser.username:\n            flash(_(\"You cannot remove your own account!\"), level='error')\n        else:\n            try:\n                user = self.app.store.get_user(form.username.data)\n                if user:\n                    user.delete()\n                    flash(_(\"User account removed.\"))\n                else:\n                    flash(_(\"User doesn't exists!\"), level='warning')\n            except ValueError as e:\n                flash(e, level='error')\n\n    def _get_log_files(self):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        return [fn for fn in [self.logfile, self.logaccessfile] if fn]\n\n    def _get_log_data(self, fn, num=2000):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        try:\n            return subprocess.check_output(['tail', '-n', str(num), fn], stderr=subprocess.STDOUT).decode('utf-8')\n        except Exception:\n            logging.exception('fail to get log file content')\n            return \"Error getting file content\"\n\n    @cherrypy.expose\n    def default(self):\n        params = {\"user_count\": self.app.store.count_users(), \"repo_count\": self.app.store.count_repos()}\n\n        return self._compile_template(\"admin.html\", **params)\n\n    @cherrypy.expose\n    def logs(self, filename=u\"\"):\n        # get list of log file available.\n        data = \"\"\n        logfiles = OrderedDict([(os.path.basename(fn), fn) for fn in self._get_log_files()])\n        if logfiles:\n            filename = filename or list(logfiles.keys())[0]\n            if filename not in logfiles:\n                raise cherrypy.HTTPError(404, 'invalid log file: ' + filename)\n            data = self._get_log_data(logfiles.get(filename))\n\n        params = {\n            \"filename\": filename,\n            \"logfiles\": logfiles.keys(),\n            \"data\": data,\n        }\n        return self._compile_template(\"admin_logs.html\", **params)\n\n    @cherrypy.expose\n    def users(self, username=None, criteria=u\"\", search=u\"\", action=u\"\", **kwargs):\n\n        # If we're just showing the initial page, just do that\n        if action == \"add\":\n            form = UserForm()\n            if form.validate_on_submit():\n                try:\n                    user = self.app.store.add_user(username)\n                    form.populate_obj(user)\n                    flash(_(\"User added successfully.\"))\n                except Exception as e:\n                    flash(str(e), level='error')\n            else:\n                flash(form.error_message, level='error')\n        elif action == \"edit\":\n            user = self.app.store.get_user(username)\n            if user:\n                form = EditUserForm(obj=user)\n                if form.validate_on_submit():\n                    try:\n                        form.populate_obj(user)\n                        flash(_(\"User information modified successfully.\"))\n                    except Exception as e:\n                        flash(str(e), level='error')\n                else:\n                    flash(form.error_message, level='error')\n            else:\n                flash(_(\"Cannot edit user `%s`: user doesn't exists\") % username, level='error')\n        elif action == 'delete':\n            form = DeleteUserForm()\n            if form.validate_on_submit():\n                self._delete_user(action, form)\n\n        params = {\n            \"add_form\": UserForm(formdata=None),\n            \"edit_form\": EditUserForm(formdata=None),\n            \"criteria\": criteria,\n            \"search\": search,\n            \"users\": list(self.app.store.users(search=search, criteria=criteria)),\n        }\n\n        # Build users page\n        return self._compile_template(\"admin_users.html\", **params)\n\n    @cherrypy.expose\n    def repos(self, criteria=u\"\", search=u\"\"):\n        params = {\n            \"criteria\": criteria,\n            \"search\": search,\n            \"repos\": list(self.app.store.repos(search=search, criteria=criteria)),\n        }\n        return self._compile_template(\"admin_repos.html\", **params)\n\n    @cherrypy.expose\n    def sysinfo(self):\n\n        params = {\n            \"version\": self.app.version,\n            # Config\n            \"cfg\": {k: '********' if 'password' in k else v for k, v in vars(self.app.cfg).items()},\n            # System Info entries\n            \"pyinfo\": list(get_pyinfo()),\n            \"osinfo\": list(get_osinfo()),\n            \"hwinfo\": list(get_hwinfo()),\n            \"ldapinfo\": list(get_pkginfo()),\n        }\n\n        return self._compile_template(\"admin_sysinfo.html\", **params)\n", "# -*- coding: utf-8 -*-\r\n# rdiffweb, A web interface to rdiff-backup repositories\r\n# Copyright (C) 2012-2021 rdiffweb contributors\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU General Public License as published by\r\n# the Free Software Foundation, either version 3 of the License, or\r\n# (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n# GNU General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU General Public License\r\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n'''\r\nCreated on Apr. 5, 2021\r\n\r\n@author: Patrik Dufresne <patrik@ikus-soft.com>\r\n'''\r\n# Define the logger\r\n\r\nimport logging\r\nimport os\r\n\r\nimport cherrypy\r\nfrom wtforms.fields.core import StringField\r\nfrom wtforms.validators import DataRequired, ValidationError\r\n\r\nfrom rdiffweb.controller import Controller\r\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\r\nfrom rdiffweb.controller.dispatch import poppath\r\nfrom rdiffweb.controller.filter_authorization import is_maintainer\r\nfrom rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError\r\nfrom rdiffweb.core.rdw_templating import url_for\r\nfrom rdiffweb.tools.i18n import ugettext as _\r\n\r\n_logger = logging.getLogger(__name__)\r\n\r\n\r\nclass DeleteRepoForm(CherryForm):\r\n    confirm = StringField(_('Confirmation'), validators=[DataRequired()])\r\n\r\n    def validate_confirm(self, field):\r\n        if self.confirm.data != self.expected_confirm:\r\n            raise ValidationError(_('Invalid value, must be: %s') % self.expected_confirm)\r\n\r\n\r\n@poppath()\r\nclass DeletePage(Controller):\r\n    @cherrypy.expose\r\n    @cherrypy.tools.errors(\r\n        error_table={\r\n            DoesNotExistError: 404,\r\n            AccessDeniedError: 403,\r\n        }\r\n    )\r\n    def default(self, path=b\"\", **kwargs):\r\n        # Check permissions on path/repo\r\n        repo, path = self.app.store.get_repo_path(path)\r\n        # Check if path exists with fstats\r\n        path_obj = repo.fstat(path)\r\n        # Check user's permissions\r\n        is_maintainer()\r\n\r\n        # validate form\r\n        form = DeleteRepoForm()\r\n        form.expected_confirm = path_obj.display_name\r\n        if form.is_submitted():\r\n            if form.validate():\r\n                cherrypy.engine.publish('schedule_task', repo.delete, path)\r\n                # Redirect to parent folder or to root if repo get deleted\r\n                if path_obj.isroot:\r\n                    raise cherrypy.HTTPRedirect(url_for('/'))\r\n                else:\r\n                    parent_path = repo.fstat(os.path.dirname(path_obj.path))\r\n                    raise cherrypy.HTTPRedirect(url_for('browse', repo, parent_path))\r\n            else:\r\n                raise cherrypy.HTTPError(400, form.error_message)\r\n        else:\r\n            raise cherrypy.HTTPError(405)\r\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nDefault preference page to show general user information. It allows user\nto change password ans refresh it's repository view.\n\"\"\"\n\nimport logging\nimport re\n\nimport cherrypy\nfrom wtforms.fields.html5 import EmailField\nfrom wtforms.fields.simple import PasswordField\nfrom wtforms.validators import DataRequired, EqualTo, InputRequired, Length, Regexp\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\n_logger = logging.getLogger(__name__)\n\nPATTERN_EMAIL = re.compile(r'[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')\n\n\nclass UserProfileForm(CherryForm):\n    email = EmailField(_('Email'), validators=[DataRequired(), Regexp(PATTERN_EMAIL, message=_(\"Invalid email.\"))])\n\n\nclass UserPasswordForm(CherryForm):\n    current = PasswordField(_('Current password'), validators=[InputRequired(_(\"Current password is missing.\"))])\n    new = PasswordField(\n        _('New password'),\n        validators=[\n            InputRequired(_(\"New password is missing.\")),\n            EqualTo('confirm', message=_(\"The new password and its confirmation do not match.\")),\n        ],\n    )\n    confirm = PasswordField(\n        _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n    )\n\n    def validate_new(self, field):\n        validator = Length(\n            min=self.app.cfg.password_min_length,\n            max=self.app.cfg.password_max_length,\n            message=_('Password must have between %(min)d and %(max)d characters.'),\n        )\n        validator(self, field)\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n\nclass PrefsGeneralPanelProvider(Controller):\n    \"\"\"\n    Plugin to change user profile and password.\n    \"\"\"\n\n    panel_id = 'general'\n\n    panel_name = _('Profile')\n\n    def _handle_set_password(self, action, form):\n        \"\"\"\n        Called when changing user password.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_password'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update user password\n        try:\n            self.app.currentuser.set_password(form.new.data, old_password=form.current.data)\n            flash(_(\"Password updated successfully.\"), level='success')\n        except ValueError as e:\n            flash(str(e), level='warning')\n\n    def _handle_set_profile_info(self, action, form):\n        \"\"\"\n        Called when changing user profile.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_profile_info'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update the user's email\n        username = self.app.currentuser.username\n        _logger.info(\"updating user [%s] email [%s]\", username, form.email.data)\n        self.app.currentuser.email = form.email.data\n        # Report success\n        flash(_(\"Profile updated successfully.\"), level='success')\n\n    def render_prefs_panel(self, panelid, action=None, **kwargs):  # @UnusedVariable\n        # Process the parameters.\n        profile_form = UserProfileForm(email=self.app.currentuser.email)\n        password_form = UserPasswordForm()\n        if action == \"set_profile_info\":\n            self._handle_set_profile_info(action, profile_form)\n        elif action == \"set_password\":\n            self._handle_set_password(action, password_form)\n        elif action == \"update_repos\":\n            self.app.currentuser.refresh_repos(delete=True)\n            flash(_(\"Repositories successfully updated\"), level='success')\n        elif action is None:\n            pass\n        else:\n            _logger.warning(\"unknown action: %s\", action)\n            raise cherrypy.NotFound(\"Unknown action\")\n        params = {\n            'profile_form': profile_form,\n            'password_form': password_form,\n        }\n        return \"prefs_general.html\", params\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 30, 2015\n\n@author: Patrik Dufresne\n\"\"\"\n\nimport os\nfrom unittest.mock import ANY, MagicMock\n\nimport cherrypy\n\nimport rdiffweb.test\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\n\n\nclass AbstractAdminTest(rdiffweb.test.WebCase):\n    \"\"\"Class to regroup command method to test admin page.\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self._quota = {}\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('user_added', self.listener.user_added, priority=50)\n        cherrypy.engine.subscribe('user_attr_changed', self.listener.user_attr_changed, priority=50)\n        cherrypy.engine.subscribe('user_deleted', self.listener.user_deleted, priority=50)\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n        self.listener.get_disk_quota.side_effect = self._load_quota\n        cherrypy.engine.subscribe('get_disk_quota', self.listener.get_disk_quota, priority=40)\n        self.listener.get_disk_usage.return_value = 0\n        cherrypy.engine.subscribe('get_disk_usage', self.listener.get_disk_usage, priority=40)\n        self.listener.set_disk_quota.side_effect = self._store_quota\n        cherrypy.engine.subscribe('set_disk_quota', self.listener.set_disk_quota, priority=40)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('user_added', self.listener.user_added)\n        cherrypy.engine.unsubscribe('user_attr_changed', self.listener.user_attr_changed)\n        cherrypy.engine.unsubscribe('user_deleted', self.listener.user_deleted)\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        cherrypy.engine.unsubscribe('get_disk_quota', self.listener.get_disk_quota)\n        cherrypy.engine.unsubscribe('get_disk_usage', self.listener.get_disk_usage)\n        cherrypy.engine.unsubscribe('set_disk_quota', self.listener.set_disk_quota)\n        return super().tearDown()\n\n    def _store_quota(self, userobj, value):\n        self._quota[userobj.username] = value\n\n    def _load_quota(self, userobj):\n        return self._quota.get(userobj.username, 0)\n\n    def _add_user(self, username=None, email=None, password=None, user_root=None, role=None):\n        b = {}\n        b['action'] = 'add'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _edit_user(self, username=None, email=None, password=None, user_root=None, role=None, disk_quota=None):\n        b = {}\n        b['action'] = 'edit'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        if disk_quota is not None:\n            b['disk_quota'] = disk_quota\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _delete_user(self, username='test1'):\n        b = {'action': 'delete', 'username': username}\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n\nclass AdminUsersAsAdminTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    login = True\n\n    def test_add_user_with_role_admin(self):\n        # When trying to create a new user with role admin\n        self._add_user(\"admin_role\", \"admin_role@test.com\", \"password\", \"/home/\", ADMIN_ROLE)\n        # Then page return success\n        self.assertStatus(200)\n        # Then database is updated\n        userobj = self.app.store.get_user('admin_role')\n        self.assertEqual(ADMIN_ROLE, userobj.role)\n        # Then notification was raised\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_add_user_with_role_maintainer(self):\n        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"password\", \"/home/\", MAINTAINER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(MAINTAINER_ROLE, self.app.store.get_user('maintainer_role').role)\n\n    def test_add_user_with_role_user(self):\n        self._add_user(\"user_role\", \"user_role@test.com\", \"password\", \"/home/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(USER_ROLE, self.app.store.get_user('user_role').role)\n\n    def test_add_user_with_invalid_role(self):\n        # When trying to create a new user with an invalid role (admin instead of 0)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test1234\", \"/home/\", 'admin')\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Invalid Choice: could not coerce')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n        # When trying to create a new user with an invalid role (-1)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", -1)\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Not a valid choice')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n    def test_add_edit_delete(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", \"test2@test.com\", \"test1234\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"test2@test.com\")\n        self.listener.user_added.assert_called_once()\n        self.listener.user_password_changed.assert_called_once()\n        self.listener.user_password_changed.reset_mock()\n        #  Update user\n        self._edit_user(\"test2\", \"chaned@test.com\", \"new-password\", \"/tmp/\", ADMIN_ROLE)\n        self.listener.user_attr_changed.assert_called()\n        self.listener.user_password_changed.assert_called_once()\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"chaned@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        #  Check with filters\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"test2\")\n\n        self._delete_user(\"test2\")\n        self.listener.user_deleted.assert_called()\n        self.assertStatus(200)\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"test2\")\n\n    def test_add_edit_delete_user_with_encoding(self):\n        \"\"\"\n        Check creation of user with non-ascii char.\n        \"\"\"\n        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"password\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"\u00e9ric@test.com\")\n        # Update user\n        self._edit_user(\"\u00c9ric\", \"eric.l\u00e9tourno@test.com\", \"\u00e9cureuil\", \"/tmp/\", ADMIN_ROLE)\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"eric.l\u00e9tourno@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        # Check with filter\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"\u00c9ric\")\n\n        self._delete_user(\"\u00c9ric\")\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"\u00c9ric\")\n\n    def test_add_user_with_empty_username(self):\n        \"\"\"\n        Verify failure trying to create user without username.\n        \"\"\"\n        self._add_user(\"\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertInBody(\"username: This field is required.\")\n\n    def test_add_user_with_existing_username(self):\n        \"\"\"\n        Verify failure trying to add the same user.\n        \"\"\"\n        # Given a user named `test1`\n        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n        # When trying to create a new user with the same name\n        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n        # Then the user list is displayed with an error message.\n        self.assertStatus(200)\n        self.assertInBody(\"User test1 already exists.\")\n\n    def test_add_user_with_invalid_root_directory(self):\n        \"\"\"\n        Verify failure to add a user with invalid root directory.\n        \"\"\"\n        try:\n            self._delete_user(\"test5\")\n        except Exception:\n            pass\n        self._add_user(\"test5\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_add_without_email(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", None, \"password\", \"/tmp/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n    def test_add_without_user_root(self):\n        #  Add user to be listed\n        self._add_user(\"test6\", None, \"password\", None, USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n        user = self.app.store.get_user('test6')\n        self.assertEqual('', user.user_root)\n\n    def test_delete_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure to delete invalid username.\n        \"\"\"\n        self._delete_user(\"test3\")\n        self.assertInBody(\"User doesn&#39;t exists!\")\n\n    def test_delete_our_self(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        self._delete_user(self.USERNAME)\n        self.assertInBody(\"You cannot remove your own account!\")\n\n    def test_delete_user_admin(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        # Create another admin user\n        self._add_user('admin2', '', 'password', '', ADMIN_ROLE)\n        self.getPage(\"/logout/\")\n        self._login('admin2', 'password')\n\n        # Try deleting admin user\n        self._delete_user(self.USERNAME)\n        self.assertStatus(200)\n        self.assertInBody(\"can&#39;t delete admin user\")\n\n    def test_delete_user_method_get(self):\n        # Given a user\n        self.app.store.add_user('newuser')\n        # When trying to delete this user using method GET\n        self.getPage(\"/admin/users/?action=delete&username=newuser\", method='GET')\n        # Then page return without error\n        self.assertStatus(200)\n        # Then user is not deleted\n        self.assertIsNotNone(self.app.store.get_user('newuser'))\n\n    def test_change_password_with_too_short(self):\n        self._edit_user(self.USERNAME, password='short')\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_password_with_too_long(self):\n        new_password = 'a' * 129\n        self._edit_user(self.USERNAME, password=new_password)\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_admin_password(self):\n        # Given rdiffweb is configured with admin-password option\n        self.app.cfg.admin_password = 'hardcoded'\n        try:\n            # When trying to update admin password\n            self._edit_user('admin', password='new-password')\n            # Then the form is refused with 200 OK with an error message.\n            self.assertStatus(200)\n            self.assertInBody(\"can&#39;t update admin-password defined in configuration file\")\n        finally:\n            self.app.cfg.admin_password = None\n\n    def test_edit_user_with_invalid_path(self):\n        \"\"\"\n        Verify failure trying to update user with invalid path.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self._edit_user(\"test1\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n        self.assertNotInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_list(self):\n        self.getPage(\"/admin/users/\")\n        self.assertInBody(\"Users\")\n        self.assertInBody(\"User management\")\n        self.assertInBody(\"Add user\")\n\n    def test_edit_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure trying to update invalid user.\n        \"\"\"\n        # Given an invalid username\n        username = 'invalid'\n        # When trying to edit the user\n        self._edit_user(username, \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        # Then the user list is displayed with an error message\n        self.assertStatus(200)\n        self.assertInBody(\"Cannot edit user `invalid`: user doesn&#39;t exists\")\n\n    def test_criteria(self):\n        \"\"\"\n        Check if admin criteria is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertNotInBody(\"test1\")\n\n    def test_search(self):\n        \"\"\"\n        Check if user search is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users?search=tes\")\n        self.assertInBody(\"test1\")\n        self.getPage(\"/admin/users?search=coucou\")\n        self.assertNotInBody(\"test1\")\n\n    def test_user_invalid_root(self):\n        # Delete all user's\n        for user in self.app.store.users():\n            if user.username != self.USERNAME:\n                user.delete()\n        # Change the user's root\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/invalid\"\n        self.getPage(\"/admin/users\")\n        self.assertInBody(\"Root directory not accessible!\")\n\n        # Query the page by default\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/tmp/\"\n        self.getPage(\"/admin/users\")\n        self.assertNotInBody(\"Root directory not accessible!\")\n\n    def test_get_quota(self):\n        # Mock a quota.\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 654321\n        # When querying the user list\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertStatus(200)\n        # Then get_disk_quota listenre is called\n        self.listener.get_disk_quota.assert_called()\n        # Then the quota value is displayed in human readable format\n        self.assertInBody(\"638.99 KiB\")\n        self.assertStatus(200)\n\n    def test_set_quota(self):\n        # When updating user quota.\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then listenr get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_gib(self):\n        # When updating user quota\n        self._edit_user(\"admin\", disk_quota='1GiB')\n        # Then listern get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1073741824)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_comma(self):\n        # When updating quota with comma value\n        self._edit_user(\"admin\", disk_quota='1,5 GiB')\n        # Then listner get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1610612736)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_leading_dot(self):\n        # When updating quota with leading dot\n        self._edit_user(\"admin\", disk_quota='.5 GiB')\n        # Then listener get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 536870912)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_empty(self):\n        # When quota is not defined\n        self._edit_user(\"admin\", disk_quota='')\n        # Then listener is not called.\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_same_value(self):\n        # Given an exiting quota\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 1234567890\n        # When setting the quota value to the same value\n        self._edit_user(\"admin\", disk_quota='1.15 GiB')\n        #  Then listener is not called\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_unsupported(self):\n        # Given setting quota is not supported\n        self.listener.set_disk_quota.side_effect = None\n        self.listener.set_disk_quota.return_value = None\n        # When updating the quota\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        self.assertInBody(\"Setting user&#39;s quota is not supported\")\n        self.assertStatus(200)\n\n\nclass AdminUsersAsUserTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        # Add test user\n        self.app.store.add_user('test', 'test123')\n        self._login('test', 'test123')\n\n    def test_add_user(self):\n        \"\"\"\n        Check if adding user is forbidden.\n        \"\"\"\n        self._add_user(\"test2\", \"test2@test.com\", \"test2\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_delete_user(self):\n        \"\"\"\n        Check if deleting user is forbidden.\n        \"\"\"\n        self._delete_user(\"test\")\n        self.assertStatus(403)\n\n    def test_edit_user(self):\n        \"\"\"\n        Check if editing user is forbidden.\n        \"\"\"\n        self._edit_user(\"test\", \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_users(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/users\")\n        self.assertStatus(403)\n\n    def test_repos(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(403)\n\n\nclass AdminWithNoLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_logs(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"No log files\")\n\n\nclass AdminWithLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': '/tmp/rdiffweb.log', 'logaccessfile': '/tmp/rdiffweb-access.log'}\n\n    def test_logs(self):\n        with open('/tmp/rdiffweb.log', 'w') as f:\n            f.write(\"content of log file\")\n        with open('/tmp/rdiffweb-access.log', 'w') as f:\n            f.write(\"content of log file\")\n        try:\n            self.getPage(\"/admin/logs/\")\n            self.assertStatus(200)\n            self.assertInBody(\"rdiffweb.log\")\n            self.assertInBody(\"content of log file\")\n            self.assertInBody(\"rdiffweb-access.log\")\n            self.assertNotInBody(\"Error getting file content\")\n        finally:\n            os.remove('/tmp/rdiffweb.log')\n            os.remove('/tmp/rdiffweb-access.log')\n\n\nclass AdminWithLogMissingTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': './rdiffweb.log', 'logaccessfile': './rdiffweb-access.log'}\n\n    def test_logs_with_no_file(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"rdiffweb.log\")\n        self.assertInBody(\"Error getting file content\")\n\n    def test_logs_with_invalid_file(self):\n        self.getPage(\"/admin/logs/invalid\")\n        self.assertStatus(404)\n\n\nclass AdminReposTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_repos(self):\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(200)\n\n    def test_repos_with_search(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?search=test\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that doesn't exists\n        self.getPage(\"/admin/repos?search=coucou\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n    def test_repos_with_criteria(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=ok\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=failed\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n\nclass AdminSysinfoTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_sysinfo(self):\n        self.getPage(\"/admin/sysinfo\")\n        self.assertStatus(200)\n        self.assertInBody(\"Operating System Info\")\n        self.assertInBody(\"Python Info\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Apr 10, 2016\n\n@author: Patrik Dufresne <patrik@ikus-soft.com>\n\"\"\"\n\nimport os\nfrom time import sleep\nfrom unittest.case import skipIf\n\nfrom parameterized import parameterized\n\nimport rdiffweb.test\nfrom rdiffweb.core.librdiff import rdiff_backup_version\nfrom rdiffweb.core.store import MAINTAINER_ROLE, USER_ROLE\n\nRDIFF_BACKUP_VERSION = rdiff_backup_version()\n\n\nclass DeleteRepoTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def _delete(self, user, repo, confirm):\n        body = {}\n        if confirm is not None:\n            body.update({'confirm': confirm})\n        self.getPage(\"/delete/\" + user + \"/\" + repo + \"/\", method=\"POST\", body=body)\n\n    @skipIf(RDIFF_BACKUP_VERSION < (2, 0, 1), \"rdiff-backup-delete is available since 2.0.1\")\n    @parameterized.expand(\n        [\n            (\"with_dir\", 'admin', '/testcases/Revisions', 'Revisions', 303, 404, '/browse/admin/testcases'),\n            (\"with_dir_wrong_confirmation\", 'admin', '/testcases/Revisions', 'invalid', 400, 200),\n            (\"with_file\", 'admin', '/testcases/Revisions/Data', 'Data', 303, 404, '/browse/admin/testcases/Revisions'),\n            (\"with_file_wrong_confirmation\", 'admin', '/testcases/Revisions/Data', 'invalid', 400, 200),\n            (\"with_invalid\", 'admin', '/testcases/invalid', 'invalid', 404, 404),\n            (\n                \"with_broken_symlink\",\n                'admin',\n                '/testcases/BrokenSymlink',\n                'BrokenSymlink',\n                303,\n                404,\n                '/browse/admin/testcases',\n            ),\n            (\n                \"with_utf8\",\n                'admin',\n                '/testcases/R%C3%A9pertoire%20Existant',\n                'R\u00e9pertoire Existant',\n                303,\n                404,\n                '/browse/admin/testcases',\n            ),\n            (\"with_rdiff_backup_data\", 'admin', '/testcases/rdiff-backup-data', 'rdiff-backup-data', 404, 404),\n            (\n                \"with_quoted_path\",\n                'admin',\n                '/testcases/Char%20%3B090%20to%20quote',\n                'Char Z to quote',\n                303,\n                404,\n                '/browse/admin/testcases',\n            ),\n        ]\n    )\n    def test_delete_path(\n        self, unused, username, path, confirmation, expected_status, expected_history_status, expected_redirect=None\n    ):\n        # When trying to delete a file or a folder with a confirmation\n        self._delete(username, path, confirmation)\n        # Then a status is returned\n        self.assertStatus(expected_status)\n        if expected_redirect:\n            self.assertHeaderItemValue('Location', self.baseurl + expected_redirect)\n        # Check filesystem\n        sleep(1)\n        self.getPage(\"/history/\" + username + \"/\" + path)\n        self.assertStatus(expected_history_status)\n\n    def test_delete_repo(self):\n        \"\"\"\n        Check to delete a repo.\n        \"\"\"\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Delete repo\n        self._delete(self.USERNAME, self.REPO, 'testcases')\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_with_slash(self):\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Then delete it.\n        self._delete(self.USERNAME, self.REPO, 'testcases')\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_wrong_confirm(self):\n        \"\"\"\n        Check failure to delete a repo with wrong confirmation.\n        \"\"\"\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Delete repo with wrong confirmation.\n        self._delete(self.USERNAME, self.REPO, 'wrong')\n        # TODO Make sure the repository is not delete\n        self.assertStatus(400)\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n\n    def test_delete_repo_without_confirm(self):\n        \"\"\"\n        Check failure to delete a repo with wrong confirmation.\n        \"\"\"\n        # Check initial list of repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # Delete repo without confirmation.\n        self._delete(self.USERNAME, self.REPO, None)\n        # Make sure the repository is not delete\n        self.assertStatus(400)\n        self.assertInBody('confirm: This field is required')\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n\n    def test_delete_repo_as_admin(self):\n        # Create a another user with admin right\n        user_obj = self.app.store.add_user('anotheruser', 'password')\n        user_obj.user_root = self.testcases\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n\n        self._delete('anotheruser', 'testcases', 'testcases')\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in user_obj.repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_as_maintainer(self):\n        self.assertTrue(os.path.isdir(self.testcases))\n\n        # Create a another user with maintainer right\n        user_obj = self.app.store.add_user('maintainer', 'password')\n        user_obj.user_root = self.testcases\n        user_obj.role = MAINTAINER_ROLE\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n\n        # Login as maintainer\n        self._login('maintainer', 'password')\n\n        # Try to delete your own repo\n        self._delete('maintainer', 'testcases', 'testcases')\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n\n        # Check filesystem\n        sleep(1)\n        self.assertEqual(['broker-repo'], [r.name for r in user_obj.repo_objs])\n        self.assertFalse(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_as_user(self):\n        # Create a another user with maintainer right\n        user_obj = self.app.store.add_user('user', 'password')\n        user_obj.user_root = self.testcases\n        user_obj.role = USER_ROLE\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n\n        # Login as maintainer\n        self._login('user', 'password')\n\n        # Try to delete own own repo\n        self._delete('user', 'testcases', 'testcases')\n        self.assertStatus(403)\n\n        # Check database don't change\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n        self.assertTrue(os.path.isdir(os.path.join(self.testcases, 'testcases')))\n\n    def test_delete_repo_does_not_exists(self):\n        # Given an invalid repo\n        repo = 'invalid'\n        # When trying to delete this repo\n        self._delete(self.USERNAME, repo, repo)\n        # Then a 404 is return to the user\n        self.assertStatus(404)\n\n    def test_delete_method_get(self):\n        # Given a user with repo\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n        # When trying to deleted repo with GET method\n        self.getPage(\"/delete/\" + self.USERNAME + \"/\" + self.REPO + \"/?confirm=\" + self.REPO, method=\"GET\")\n        # Then An error is returned\n        self.assertStatus(405)\n        # Then repo still exists\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n"], "filenames": ["README.md", "rdiffweb/controller/page_admin.py", "rdiffweb/controller/page_delete.py", "rdiffweb/controller/pref_general.py", "rdiffweb/controller/tests/test_page_admin.py", "rdiffweb/controller/tests/test_page_delete.py"], "buggy_code_start_loc": [109, 193, 24, 57, 269, 40], "buggy_code_end_loc": [121, 344, 76, 66, 269, 185], "fixing_code_start_loc": [110, 193, 25, 57, 270, 40], "fixing_code_end_loc": [127, 344, 83, 64, 280, 222], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository ikus060/rdiffweb prior to 2.4.5.", "other": {"cve": {"id": "CVE-2022-3232", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-17T20:15:09.283", "lastModified": "2022-09-21T06:22:19.493", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository ikus060/rdiffweb prior to 2.4.5."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-Site Request Forgery (CSRF) en el repositorio de GitHub ikus060/rdiffweb versiones anteriores a 2.4.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.5", "matchCriteriaId": "174DE8FC-9A65-4698-94B6-632A1D83ADE8"}]}]}], "references": [{"url": "https://github.com/ikus060/rdiffweb/commit/422791ea45713aaaa865bdca74addb9fffd93a71", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/15c8fd98-7f50-4d46-b013-42710af1f99c", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ikus060/rdiffweb/commit/422791ea45713aaaa865bdca74addb9fffd93a71"}}