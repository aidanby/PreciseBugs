{"buggy_code": ["<?php\n\n/**\n * The API Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\StopWords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n//\n// Create Request & Response\n//\n$response = new JsonResponse();\n$request = Request::createFromGlobals();\n\n$faqConfig = Configuration::getConfigurationInstance();\n\n$postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n$apiLanguage = Filter::filterVar($postData['lang'], FILTER_SANITIZE_SPECIAL_CHARS);\n$currentToken = Filter::filterVar($postData['csrf'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n$action = Filter::filterVar($request->get('action'), FILTER_SANITIZE_SPECIAL_CHARS);\n\nif ($faqConfig->get('security.enableGoogleReCaptchaV2')) {\n    $code = Filter::filterVar($postData['g-recaptcha-response'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n} else {\n    $code = Filter::filterVar($postData['captcha'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n}\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($apiLanguage)) {\n    $languageCode = trim((string) $apiLanguage);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Set translation class\n//\ntry {\n    Translation::create()\n        ->setLanguagesDir(PMF_LANGUAGE_DIR)\n        ->setDefaultLanguage('en')\n        ->setCurrentLanguage($languageCode);\n} catch (Exception $e) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => $e->getMessage()]);\n}\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getCurrentUser($faqConfig);\n\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n$network = new Network($faqConfig);\n$stopWords = new StopWords($faqConfig);\n$faqHelper = new FaqHelper($faqConfig);\n\nif ($network->isBanned($request->server->get('REMOTE_ADDR'))) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => Translation::get('err_bannedIP')]);\n}\n\n//\n// Check captcha\n//\n$captcha = Captcha::getInstance($faqConfig);\n$captcha->setUserIsLoggedIn($user->isLoggedIn());\n\n$fatalError = false;\n\nif (\n    'add-voting' !== $action && 'submit-user-data' !== $action && 'change-password' !== $action &&\n    'submit-request-removal' !== $action && !$captcha->checkCaptchaCode($code ?? '')\n) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => Translation::get('msgCaptcha')]);\n    $fatalError = true;\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    !$user->isLoggedIn() && $faqConfig->get('security.enableLoginOnly') && 'submit-request-removal' !== $action &&\n    'change-password' !== $action && 'save-registration' !== $action\n) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => Translation::get('ad_msg_noauth')]);\n    $fatalError = true;\n}\n\nif ($fatalError) {\n    $response->send();\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'add-comment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_NotAuth')]);\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n\n        $type = Filter::filterVar($postData['type'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $faqId = Filter::filterVar($postData['id'] ?? null, FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterVar($postData['newsId'] ?? null, FILTER_VALIDATE_INT);\n        $username = Filter::filterVar($postData['user'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $mailer = Filter::filterVar($postData['mail'], FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterVar($postData['comment_text'], FILTER_SANITIZE_SPECIAL_CHARS);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq':\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged-in users\n        if (!$user->isLoggedIn()) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('err_SaveComment')]);\n                $faqConfig->getLogger()->error('Name and mail already used by registered user.');\n                break;\n            }\n        }\n\n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&\n            !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $exception) {\n                $faqConfig->getLogger()->error('Tracking of save new comment', ['exception' => $exception->getMessage()]);\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br(strip_tags((string) $comment)))\n                ->setDate($request->server->get('REQUEST_TIME'));\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap((string) $comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgCommentThanks')]);\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception) {\n                    // @todo handle the exception\n                }\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('err_SaveComment')]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => 'Please add your name, your e-mail address and a comment!']);\n        }\n        break;\n\n    case 'add-faq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_NotAuth')]);\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $question = Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $question = trim(strip_tags((string) $question));\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterVar($postData['answer'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim(html_entity_decode((string) $answer));\n        } else {\n            $answer = Filter::filterVar($postData['answer'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = strip_tags((string) $answer);\n            $answer = trim(nl2br($answer));\n        }\n        $contentLink = Filter::filterVar($postData['contentlink'], FILTER_VALIDATE_URL);\n        $keywords = Filter::filterVar($postData['keywords'], FILTER_SANITIZE_SPECIAL_CHARS);\n        if (isset($postData['rubrik[]'])) {\n            if (is_string($postData['rubrik[]'])) {\n                $postData['rubrik[]'] = [ $postData['rubrik[]'] ];\n            }\n            $categories = Filter::filterArray(\n                $postData['rubrik[]']\n            );\n        }\n\n        // Check on translation\n        if (isset($postData['faqid']) && isset($postData['lang']) && isset($postData['translated_answer'])) {\n            $faqId = Filter::filterVar($postData['faqid'], FILTER_VALIDATE_INT);\n            $faqLanguage = Filter::filterVar($postData['lang'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim((string) Filter::filterVar($postData['translated_answer'], FILTER_SANITIZE_SPECIAL_CHARS));\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!isset($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (isset($faqLanguage) && !is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"https://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    Translation::get('msgInfo'),\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $faqEntity = new FaqEntity();\n            $faqEntity\n                ->setLanguage(($isTranslation === true ? $newLanguage : $languageCode))\n                ->setQuestion($question)\n                ->setActive(($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO))\n                ->setSticky(false)\n                ->setAnswer($answer)\n                ->setKeywords($keywords)\n                ->setAuthor($author)\n                ->setEmail($email)\n                ->setComment(true)\n                ->setNotes('');\n\n            if (!$isNew && isset($faqId)) {\n                $faqEntity->setId($faqId);\n                $categories = $category->getCategoryIdsFromFaq($faqId);\n            }\n\n            $recordId = $faq->create($faqEntity);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($faqEntity->getLanguage())\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception | TransportExceptionInterface $e) {\n                $faqConfig->getLogger()->info('Notification could not be sent: ', [ $e->getMessage() ]);\n            }\n\n            if ($faqConfig->get('records.defaultActivation')) {\n                $link = [\n                    'link' => $faqHelper->createFaqUrl($faqEntity, $categories[0]),\n                    'info' => Translation::get('msgRedirect')\n                ];\n            } else {\n                $link = [];\n            }\n\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData([\n                'success' =>\n                    ($isNew ? Translation::get('msgNewContentThanks') : Translation::get('msgNewTranslationThanks')),\n                ... $link\n            ]);\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_SaveEntries')]);\n        }\n\n        break;\n\n    //\n    // Ask question\n    //\n    case 'ask-question':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$faqConfig->get('main.enableAskQuestions') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n            $response->setData(['error' => Translation::get('err_NotAuth')]);\n            break;\n        }\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n        $categories = $cat->getAllCategories();\n\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $ucategory = Filter::filterVar($postData['category'], FILTER_VALIDATE_INT);\n        $question = Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $question = trim(strip_tags((string) $question));\n        $save = Filter::filterVar($postData['save'] ?? 0, FILTER_VALIDATE_INT);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (!empty($author) && !empty($email) && !empty($question) && $stopWords->checkBannedWord($question)) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlentities($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $plr = new Plurals();\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        try {\n                            $searchResult[] = $faqSearch->search($word, false);\n                        } catch (Exception $e) {\n                            // @todo handle exception\n                        }\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $smartAnswer = sprintf(\n                        '<h5>%s</h5>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $smartAnswer .= '<ul>';\n\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $smartAnswer .= sprintf(\n                                '<li>%s<br><small class=\"pmf-search-preview\">%s...</small></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception) {\n                            // handle exception\n                        }\n                    }\n                    $smartAnswer .= '</ul>';\n\n                    $response->setData(['result' => $smartAnswer]);\n                } else {\n                    $questionObject->addQuestion($questionData);\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception | TransportExceptionInterface $exception) {\n                        $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                        $response->setData(['error' => $exception->getMessage()]);\n                    }\n                    $response->setStatusCode(Response::HTTP_OK);\n                    $response->setData(['success' => Translation::get('msgAskThx4Mail')]);\n                }\n            } else {\n                $questionObject->addQuestion($questionData);\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception | TransportExceptionInterface $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgAskThx4Mail')]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_SaveQuestion')]);\n        }\n\n        break;\n\n    case 'save-registration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $fullName = trim((string) Filter::filterVar($postData['realname'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $userName = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $isVisible = Filter::filterVar($postData['is_visible'], FILTER_SANITIZE_SPECIAL_CHARS) ?? false;\n\n        if (!$registration->isDomainAllowed($email)) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => 'The domain is not whitelisted.']);\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            try {\n                $response->setData($registration->createUser($userName, $fullName, $email, $isVisible));\n            } catch (Exception | TransportExceptionInterface $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n\n    case 'add-voting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n\n        $faqId = Filter::filterVar($postData['id'] ?? null, FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterVar($postData['value'], FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($request->server->get('REMOTE_ADDR'), FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($faqId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $faqId);\n            } catch (Exception) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $faqId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($faqId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData([\n                'success' => Translation::get('msgVoteThanks'),\n                'rating' => $rating->getVotingResult($faqId),\n            ]);\n        } elseif (!$rating->check($faqId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $faqId);\n            } catch (Exception $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_VoteTooMuch')]);\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $faqId);\n            } catch (Exception $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_noVote')]);\n        }\n\n        break;\n\n    //\n    // Send mails from contact form\n    //\n    case 'submit-contact':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n        $question = trim((string) Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS));\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (!empty($author) && !empty($email) && !empty($question) && $stopWords->checkBannedWord($question)) {\n            $question = sprintf(\n                \"%s: %s\\n%s: %s\\n\\n %s\",\n                Translation::get('msgNewContentName'),\n                $author,\n                Translation::get('msgNewContentMail'),\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            try {\n                $mailer->setReplyTo($email, $author);\n                $mailer->addTo($faqConfig->getAdminEmail());\n                $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n                $mailer->message = $question;\n                $mailer->send();\n                unset($mailer);\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgMailContact')]);\n            } catch (Exception | TransportExceptionInterface $e) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $e->getMessage()]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n        $link = trim((string) Filter::filterVar($postData['link'], FILTER_VALIDATE_URL));\n        $attached = trim((string) Filter::filterVar($postData['message'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $mailto = Filter::filterArray($postData['mailto[]']);\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n\n            foreach ($mailto as $recipient) {\n                $recipient = trim(strip_tags((string) $recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    try {\n                        $mailer->setReplyTo($email, $author);\n                        $mailer->addTo($recipient);\n                    } catch (Exception $exception) {\n                        $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                        $response->setData(['error' => $exception->getMessage()]);\n                    }\n                    $mailer->subject = Translation::get('msgS2FMailSubject') . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        Translation::get('msgS2FText2'),\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData(['success' => Translation::get('msgS2FThx')]);\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'submit-user-data':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $csrfToken = Filter::filterVar($postData[Token::PMF_SESSION_NAME], FILTER_SANITIZE_SPECIAL_CHARS);\n\n        if (!Token::getInstance()->verifyToken('ucp', $csrfToken)) {\n            $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n            $response->setData(['error' => Translation::get('ad_msg_noauth')]);\n            break;\n        }\n\n        $userId = Filter::filterVar($postData['userid'], FILTER_VALIDATE_INT);\n        $userName = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterVar($postData['is_visible'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $password = trim((string) Filter::filterVar($postData['faqpassword'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $confirm = trim((string) Filter::filterVar($postData['faqpassword_confirm'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $twoFactorEnabled = Filter::filterVar($postData['twofactor_enabled'] ?? 'off', FILTER_SANITIZE_SPECIAL_CHARS);\n        $deleteSecret = Filter::filterVar($postData['newsecret'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        $isAzureAdUser = $user->getUserAuthSource() === 'azure';\n\n        if ($deleteSecret === 'on') {\n            $secret = '';\n        } else {\n            $secret = $user->getUserData('secret');\n        }\n\n        if ($userId !== $user->getUserId()) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => 'User ID mismatch!']);\n            break;\n        }\n\n        if (!$isAzureAdUser) {\n            if ($password !== $confirm) {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('ad_user_error_passwordsDontMatch')]);\n                break;\n            }\n\n            if (strlen($password) <= 7 || strlen($confirm) <= 7) {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n                break;\n            } else {\n                $userData = [\n                    'display_name' => $userName,\n                    'email' => $email,\n                    'is_visible' => $isVisible === 'on' ? 1 : 0,\n                    'twofactor_enabled' => $twoFactorEnabled === 'on' ? 1 : 0,\n                    'secret' => $secret\n                ];\n\n                $success = $user->setUserData($userData);\n\n                foreach ($user->getAuthContainer() as $auth) {\n                    if ($auth->setReadOnly()) {\n                        continue;\n                    }\n                    if (!$auth->update($user->getLogin(), $password)) {\n                        $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                        $response->setData(['error' => $auth->error()]);\n                        $success = false;\n                    } else {\n                        $success = true;\n                    }\n                }\n            }\n        } else {\n            $userData = [\n                'is_visible' => $isVisible === 'on' ? 1 : 0,\n                'twofactor_enabled' => $twoFactorEnabled === 'on' ? 1 : 0,\n                'secret' => $secret\n            ];\n\n            $success = $user->setUserData($userData);\n        }\n\n        if ($success) {\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData(['success' => Translation::get('ad_entry_savedsuc')]);\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('ad_entry_savedfail')]);\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'change-password':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n        $username = trim((string) Filter::filterVar($postData['username'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n\n        if (!empty($username) && !empty($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                try {\n                    $newPassword = $user->createPassword();\n                } catch (Exception $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                try {\n                    $user->changePassword($newPassword);\n                } catch (Exception $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                $text = Translation::get('lostpwd_text_1') . \"\\nUsername: \" . $username . \"\\nNew Password: \" .\n                    $newPassword . \"\\n\\n\" . Translation::get('lostpwd_text_2');\n\n                $mailer = new Mail($faqConfig);\n                try {\n                    $mailer->addTo($email);\n                } catch (Exception $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                try {\n                    $result = $mailer->send();\n                } catch (Exception | TransportExceptionInterface $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                unset($mailer);\n                // Trust that the email has been sent\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('lostpwd_mail_okay')]);\n            } else {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('lostpwd_err_1')]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_CONFLICT);\n            $response->setData(['error' => Translation::get('lostpwd_err_2')]);\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'submit-request-removal':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $csrfToken = Filter::filterVar($postData[Token::PMF_SESSION_NAME], FILTER_SANITIZE_SPECIAL_CHARS);\n        if (!Token::getInstance()->verifyToken('request-removal', $csrfToken)) {\n            $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n            $response->setData(['error' => Translation::get('ad_msg_noauth')]);\n            break;\n        }\n\n        $userId = Filter::filterVar($postData['userId'], FILTER_VALIDATE_INT);\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $loginName = trim((string) Filter::filterVar($postData['loginname'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $question = trim((string) Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS));\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // Validate User ID, Username and email\n        $user = new User($faqConfig);\n        if (\n            !$user->getUserById($userId) ||\n            $userId !== $user->getUserId() ||\n            $loginName !== $user->getLogin() ||\n            $email !== $user->getUserData('email')\n        ) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('ad_user_error_loginInvalid')]);\n            break;\n        }\n\n        if (!empty($author) && !empty($email) && !empty($question) && $stopWords->checkBannedWord($question)) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                Translation::get('ad_user_loginname'),\n                $loginName,\n                Translation::get('msgNewContentName'),\n                $author,\n                Translation::get('msgNewContentMail'),\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            try {\n                $mailer->setReplyTo($email, $author);\n                $mailer->addTo($faqConfig->getAdminEmail());\n                $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n                $mailer->message = $question;\n                $result = $mailer->send();\n                unset($mailer);\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgMailContact')]);\n            } catch (Exception | TransportExceptionInterface $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n}\n\n$response->send();\n", "<section class=\"col-12\">\n  <div class=\"row mb-2\">\n    <div class=\"col\">\n      <div class=\"spinner-border text-primary d-none\" id=\"loader\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <div id=\"faqs\"></div>\n    </div>\n  </div>\n\n  <form id=\"formValues\" action=\"#\" method=\"post\" accept-charset=\"utf-8\" class=\"needs-validation\" novalidate>\n    <input type=\"hidden\" name=\"{{ msgS2FReferrer }}\" value=\"{{ send2friendLink }}\" />\n    <input type=\"hidden\" name=\"lang\" id=\"lang\" value=\"{{ lang }}\" />\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"name\">{{ msgS2FName }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" value=\"{{ defaultContentName }}\" required />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"email\">{{ msgS2FEMail }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" value=\"{{ defaultContentMail }}\" required />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">{{ msgS2FFriends }}</div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">1{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto1\" required />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">2{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto2\" />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">3{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto3\" />\n      </div>\n    </div>\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">4{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto4\" />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">5{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto5\" />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <strong>{{ msgS2FText }}</strong><br />\n      <em>{{ send2friend_text }}</em>\n    </div>\n    <div class=\"row mb-2\">\n      <strong>{{ msgS2FText2 }}</strong><br />\n      <em>{{ send2friendLink }}</em>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"message\">{{ msgS2FMessage }}</label>\n      <div class=\"col-sm-9\">\n        <textarea name=\"message\" id=\"message\" class=\"form-control\" cols=\"37\" rows=\"5\"></textarea>\n      </div>\n    </div>\n\n    {{ captchaFieldset }}\n\n    <div class=\"form-actions text-end\">\n      <button class=\"btn btn-primary btn-lg\" type=\"submit\" id=\"pmf-submit-values\" data-pmf-form=\"sendtofriends\">\n        {{ msgS2FButton }}\n      </button>\n    </div>\n  </form>\n</section>\n", "<?php\n\n/**\n * The send2friend page.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2002-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2002-09-16\n */\n\nuse phpMyFAQ\\Captcha\\Captcha;\nuse phpMyFAQ\\Captcha\\Helper\\CaptchaHelper;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User\\CurrentUser;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$captcha = Captcha::getInstance($faqConfig);\n$captcha->setSessionId($sids);\n\n$captchaHelper = CaptchaHelper::getInstance($faqConfig);\n\nif (!$faqConfig->get('main.enableSendToFriend')) {\n    $response = new Response();\n    $response->setStatusCode(Response::HTTP_FORBIDDEN);\n    $response->isRedirect($faqConfig->getDefaultUrl());\n    $response->send();\n    exit();\n}\n\nif ($showCaptcha !== '') {\n    $captcha->drawCaptchaImage();\n    exit;\n}\n\ntry {\n    $faqSession->userTracking('send2friend', 0);\n} catch (Exception) {\n    // @todo handle the exception\n}\n\n$request = Request::createFromGlobals();\n$faqCategory = Filter::filterVar($request->query->get('cat'), FILTER_VALIDATE_INT);\n$faqId = Filter::filterVar($request->query->get('id'), FILTER_VALIDATE_INT);\n$faqLanguage = Filter::filterVar($request->query->get('artlang'), FILTER_SANITIZE_SPECIAL_CHARS);\n\n$send2friendLink = sprintf(\n    '%sindex.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n    $faqConfig->getDefaultUrl(),\n    $faqCategory,\n    $faqId,\n    urlencode((string) $faqLanguage)\n);\n\n\n$template->parse(\n    'mainPageContent',\n    [\n        'lang' => Strings::htmlentities($faqLanguage),\n        'msgSend2Friend' => Translation::get('msgSend2Friend'),\n        'msgS2FReferrer' => 'link',\n        'msgS2FName' => Translation::get('msgS2FName'),\n        'msgS2FEMail' => Translation::get('msgS2FEMail'),\n        'defaultContentMail' => ($user->getUserId() > 0) ? $user->getUserData('email') : '',\n        'defaultContentName' =>\n            ($user->getUserId() > 0) ? Strings::htmlentities($user->getUserData('display_name')) : '',\n        'msgS2FFriends' => Translation::get('msgS2FFriends'),\n        'msgS2FEMails' => Translation::get('msgS2FEMails'),\n        'msgS2FText' => Translation::get('msgS2FText'),\n        'send2friend_text' => Strings::htmlentities($faqConfig->get('main.send2friendText')),\n        'msgS2FText2' => Translation::get('msgS2FText2'),\n        'send2friendLink' => $send2friendLink,\n        'msgS2FMessage' => Translation::get('msgS2FMessage'),\n        'captchaFieldset' => $captchaHelper->renderCaptcha(\n            $captcha,\n            'send2friend',\n            Translation::get('msgCaptcha'),\n            $user->isLoggedIn()\n        ),\n        'msgS2FButton' => Translation::get('msgS2FButton'),\n    ]\n);\n\n$template->parseBlock(\n    'index',\n    'breadcrumb',\n    [\n        'breadcrumbHeadline' => Translation::get('msgSend2Friend')\n    ]\n);\n"], "fixing_code": ["<?php\n\n/**\n * The API Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\StopWords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n//\n// Create Request & Response\n//\n$response = new JsonResponse();\n$request = Request::createFromGlobals();\n\n$faqConfig = Configuration::getConfigurationInstance();\n\n$postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n$apiLanguage = Filter::filterVar($postData['lang'], FILTER_SANITIZE_SPECIAL_CHARS);\n$currentToken = Filter::filterVar($postData['csrf'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n$action = Filter::filterVar($request->get('action'), FILTER_SANITIZE_SPECIAL_CHARS);\n\nif ($faqConfig->get('security.enableGoogleReCaptchaV2')) {\n    $code = Filter::filterVar($postData['g-recaptcha-response'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n} else {\n    $code = Filter::filterVar($postData['captcha'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n}\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($apiLanguage)) {\n    $languageCode = trim((string) $apiLanguage);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Set translation class\n//\ntry {\n    Translation::create()\n        ->setLanguagesDir(PMF_LANGUAGE_DIR)\n        ->setDefaultLanguage('en')\n        ->setCurrentLanguage($languageCode);\n} catch (Exception $e) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => $e->getMessage()]);\n}\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getCurrentUser($faqConfig);\n\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n$network = new Network($faqConfig);\n$stopWords = new StopWords($faqConfig);\n$faqHelper = new FaqHelper($faqConfig);\n\nif ($network->isBanned($request->server->get('REMOTE_ADDR'))) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => Translation::get('err_bannedIP')]);\n}\n\n//\n// Check captcha\n//\n$captcha = Captcha::getInstance($faqConfig);\n$captcha->setUserIsLoggedIn($user->isLoggedIn());\n\n$fatalError = false;\n\nif (\n    'add-voting' !== $action && 'submit-user-data' !== $action && 'change-password' !== $action &&\n    'submit-request-removal' !== $action && !$captcha->checkCaptchaCode($code ?? '')\n) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => Translation::get('msgCaptcha')]);\n    $fatalError = true;\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    !$user->isLoggedIn() && $faqConfig->get('security.enableLoginOnly') && 'submit-request-removal' !== $action &&\n    'change-password' !== $action && 'save-registration' !== $action\n) {\n    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n    $response->setData(['error' => Translation::get('ad_msg_noauth')]);\n    $fatalError = true;\n}\n\nif ($fatalError) {\n    $response->send();\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'add-comment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_NotAuth')]);\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n\n        $type = Filter::filterVar($postData['type'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $faqId = Filter::filterVar($postData['id'] ?? null, FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterVar($postData['newsId'] ?? null, FILTER_VALIDATE_INT);\n        $username = Filter::filterVar($postData['user'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $mailer = Filter::filterVar($postData['mail'], FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterVar($postData['comment_text'], FILTER_SANITIZE_SPECIAL_CHARS);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq':\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged-in users\n        if (!$user->isLoggedIn()) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('err_SaveComment')]);\n                $faqConfig->getLogger()->error('Name and mail already used by registered user.');\n                break;\n            }\n        }\n\n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&\n            !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $exception) {\n                $faqConfig->getLogger()->error('Tracking of save new comment', ['exception' => $exception->getMessage()]);\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br(strip_tags((string) $comment)))\n                ->setDate($request->server->get('REQUEST_TIME'));\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap((string) $comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgCommentThanks')]);\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception) {\n                    // @todo handle the exception\n                }\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('err_SaveComment')]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => 'Please add your name, your e-mail address and a comment!']);\n        }\n        break;\n\n    case 'add-faq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_NotAuth')]);\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $question = Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $question = trim(strip_tags((string) $question));\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterVar($postData['answer'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim(html_entity_decode((string) $answer));\n        } else {\n            $answer = Filter::filterVar($postData['answer'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = strip_tags((string) $answer);\n            $answer = trim(nl2br($answer));\n        }\n        $contentLink = Filter::filterVar($postData['contentlink'], FILTER_VALIDATE_URL);\n        $keywords = Filter::filterVar($postData['keywords'], FILTER_SANITIZE_SPECIAL_CHARS);\n        if (isset($postData['rubrik[]'])) {\n            if (is_string($postData['rubrik[]'])) {\n                $postData['rubrik[]'] = [ $postData['rubrik[]'] ];\n            }\n            $categories = Filter::filterArray(\n                $postData['rubrik[]']\n            );\n        }\n\n        // Check on translation\n        if (isset($postData['faqid']) && isset($postData['lang']) && isset($postData['translated_answer'])) {\n            $faqId = Filter::filterVar($postData['faqid'], FILTER_VALIDATE_INT);\n            $faqLanguage = Filter::filterVar($postData['lang'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim((string) Filter::filterVar($postData['translated_answer'], FILTER_SANITIZE_SPECIAL_CHARS));\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!isset($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (isset($faqLanguage) && !is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"https://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    Translation::get('msgInfo'),\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $faqEntity = new FaqEntity();\n            $faqEntity\n                ->setLanguage(($isTranslation === true ? $newLanguage : $languageCode))\n                ->setQuestion($question)\n                ->setActive(($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO))\n                ->setSticky(false)\n                ->setAnswer($answer)\n                ->setKeywords($keywords)\n                ->setAuthor($author)\n                ->setEmail($email)\n                ->setComment(true)\n                ->setNotes('');\n\n            if (!$isNew && isset($faqId)) {\n                $faqEntity->setId($faqId);\n                $categories = $category->getCategoryIdsFromFaq($faqId);\n            }\n\n            $recordId = $faq->create($faqEntity);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($faqEntity->getLanguage())\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception | TransportExceptionInterface $e) {\n                $faqConfig->getLogger()->info('Notification could not be sent: ', [ $e->getMessage() ]);\n            }\n\n            if ($faqConfig->get('records.defaultActivation')) {\n                $link = [\n                    'link' => $faqHelper->createFaqUrl($faqEntity, $categories[0]),\n                    'info' => Translation::get('msgRedirect')\n                ];\n            } else {\n                $link = [];\n            }\n\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData([\n                'success' =>\n                    ($isNew ? Translation::get('msgNewContentThanks') : Translation::get('msgNewTranslationThanks')),\n                ... $link\n            ]);\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_SaveEntries')]);\n        }\n\n        break;\n\n    //\n    // Ask question\n    //\n    case 'ask-question':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$faqConfig->get('main.enableAskQuestions') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n            $response->setData(['error' => Translation::get('err_NotAuth')]);\n            break;\n        }\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n        $categories = $cat->getAllCategories();\n\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $ucategory = Filter::filterVar($postData['category'], FILTER_VALIDATE_INT);\n        $question = Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $question = trim(strip_tags((string) $question));\n        $save = Filter::filterVar($postData['save'] ?? 0, FILTER_VALIDATE_INT);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (!empty($author) && !empty($email) && !empty($question) && $stopWords->checkBannedWord($question)) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlentities($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $plr = new Plurals();\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        try {\n                            $searchResult[] = $faqSearch->search($word, false);\n                        } catch (Exception $e) {\n                            // @todo handle exception\n                        }\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $smartAnswer = sprintf(\n                        '<h5>%s</h5>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $smartAnswer .= '<ul>';\n\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $smartAnswer .= sprintf(\n                                '<li>%s<br><small class=\"pmf-search-preview\">%s...</small></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception) {\n                            // handle exception\n                        }\n                    }\n                    $smartAnswer .= '</ul>';\n\n                    $response->setData(['result' => $smartAnswer]);\n                } else {\n                    $questionObject->addQuestion($questionData);\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception | TransportExceptionInterface $exception) {\n                        $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                        $response->setData(['error' => $exception->getMessage()]);\n                    }\n                    $response->setStatusCode(Response::HTTP_OK);\n                    $response->setData(['success' => Translation::get('msgAskThx4Mail')]);\n                }\n            } else {\n                $questionObject->addQuestion($questionData);\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception | TransportExceptionInterface $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgAskThx4Mail')]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_SaveQuestion')]);\n        }\n\n        break;\n\n    case 'save-registration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $fullName = trim((string) Filter::filterVar($postData['realname'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $userName = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $isVisible = Filter::filterVar($postData['is_visible'], FILTER_SANITIZE_SPECIAL_CHARS) ?? false;\n\n        if (!$registration->isDomainAllowed($email)) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => 'The domain is not whitelisted.']);\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            try {\n                $response->setData($registration->createUser($userName, $fullName, $email, $isVisible));\n            } catch (Exception | TransportExceptionInterface $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n\n    case 'add-voting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n\n        $faqId = Filter::filterVar($postData['id'] ?? null, FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterVar($postData['value'], FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($request->server->get('REMOTE_ADDR'), FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($faqId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $faqId);\n            } catch (Exception) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $faqId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($faqId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData([\n                'success' => Translation::get('msgVoteThanks'),\n                'rating' => $rating->getVotingResult($faqId),\n            ]);\n        } elseif (!$rating->check($faqId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $faqId);\n            } catch (Exception $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_VoteTooMuch')]);\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $faqId);\n            } catch (Exception $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_noVote')]);\n        }\n\n        break;\n\n    //\n    // Send mails from contact form\n    //\n    case 'submit-contact':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n        $question = trim((string) Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS));\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (!empty($author) && !empty($email) && !empty($question) && $stopWords->checkBannedWord($question)) {\n            $question = sprintf(\n                \"%s: %s\\n%s: %s\\n\\n %s\",\n                Translation::get('msgNewContentName'),\n                $author,\n                Translation::get('msgNewContentMail'),\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            try {\n                $mailer->setReplyTo($email, $author);\n                $mailer->addTo($faqConfig->getAdminEmail());\n                $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n                $mailer->message = $question;\n                $mailer->send();\n                unset($mailer);\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgMailContact')]);\n            } catch (Exception | TransportExceptionInterface $e) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $e->getMessage()]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n        $attached = trim((string) Filter::filterVar($postData['message'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $mailto = Filter::filterArray($postData['mailto[]']);\n\n        $faqLanguage = trim((string) Filter::filterVar($postData['lang'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $faqId = trim((string) Filter::filterVar($postData['faqId'], FILTER_VALIDATE_INT));\n        $categoryId = trim((string) Filter::filterVar($postData['categoryId'], FILTER_VALIDATE_INT));\n\n        if (is_array($mailto) && count($mailto) > 5) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n            break;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            $send2friendLink = sprintf(\n                '%sindex.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                $faqConfig->getDefaultUrl(),\n                $categoryId,\n                $faqId,\n                urlencode($faqLanguage)\n            );\n\n            foreach ($mailto as $recipient) {\n                $recipient = trim(strip_tags((string) $recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    try {\n                        $mailer->setReplyTo($email, $author);\n                        $mailer->addTo($recipient);\n                    } catch (Exception $exception) {\n                        $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                        $response->setData(['error' => $exception->getMessage()]);\n                    }\n                    $mailer->subject = Translation::get('msgS2FMailSubject') . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        Translation::get('msgS2FText2'),\n                        $send2friendLink,\n                        strip_tags($attached)\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData(['success' => Translation::get('msgS2FThx')]);\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'submit-user-data':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $csrfToken = Filter::filterVar($postData[Token::PMF_SESSION_NAME], FILTER_SANITIZE_SPECIAL_CHARS);\n\n        if (!Token::getInstance()->verifyToken('ucp', $csrfToken)) {\n            $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n            $response->setData(['error' => Translation::get('ad_msg_noauth')]);\n            break;\n        }\n\n        $userId = Filter::filterVar($postData['userid'], FILTER_VALIDATE_INT);\n        $userName = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterVar($postData['is_visible'], FILTER_SANITIZE_SPECIAL_CHARS);\n        $password = trim((string) Filter::filterVar($postData['faqpassword'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $confirm = trim((string) Filter::filterVar($postData['faqpassword_confirm'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $twoFactorEnabled = Filter::filterVar($postData['twofactor_enabled'] ?? 'off', FILTER_SANITIZE_SPECIAL_CHARS);\n        $deleteSecret = Filter::filterVar($postData['newsecret'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        $isAzureAdUser = $user->getUserAuthSource() === 'azure';\n\n        if ($deleteSecret === 'on') {\n            $secret = '';\n        } else {\n            $secret = $user->getUserData('secret');\n        }\n\n        if ($userId !== $user->getUserId()) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => 'User ID mismatch!']);\n            break;\n        }\n\n        if (!$isAzureAdUser) {\n            if ($password !== $confirm) {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('ad_user_error_passwordsDontMatch')]);\n                break;\n            }\n\n            if (strlen($password) <= 7 || strlen($confirm) <= 7) {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n                break;\n            } else {\n                $userData = [\n                    'display_name' => $userName,\n                    'email' => $email,\n                    'is_visible' => $isVisible === 'on' ? 1 : 0,\n                    'twofactor_enabled' => $twoFactorEnabled === 'on' ? 1 : 0,\n                    'secret' => $secret\n                ];\n\n                $success = $user->setUserData($userData);\n\n                foreach ($user->getAuthContainer() as $auth) {\n                    if ($auth->setReadOnly()) {\n                        continue;\n                    }\n                    if (!$auth->update($user->getLogin(), $password)) {\n                        $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                        $response->setData(['error' => $auth->error()]);\n                        $success = false;\n                    } else {\n                        $success = true;\n                    }\n                }\n            }\n        } else {\n            $userData = [\n                'is_visible' => $isVisible === 'on' ? 1 : 0,\n                'twofactor_enabled' => $twoFactorEnabled === 'on' ? 1 : 0,\n                'secret' => $secret\n            ];\n\n            $success = $user->setUserData($userData);\n        }\n\n        if ($success) {\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData(['success' => Translation::get('ad_entry_savedsuc')]);\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('ad_entry_savedfail')]);\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'change-password':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n        $username = trim((string) Filter::filterVar($postData['username'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n\n        if (!empty($username) && !empty($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                try {\n                    $newPassword = $user->createPassword();\n                } catch (Exception $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                try {\n                    $user->changePassword($newPassword);\n                } catch (Exception $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                $text = Translation::get('lostpwd_text_1') . \"\\nUsername: \" . $username . \"\\nNew Password: \" .\n                    $newPassword . \"\\n\\n\" . Translation::get('lostpwd_text_2');\n\n                $mailer = new Mail($faqConfig);\n                try {\n                    $mailer->addTo($email);\n                } catch (Exception $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                try {\n                    $result = $mailer->send();\n                } catch (Exception | TransportExceptionInterface $exception) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $exception->getMessage()]);\n                }\n                unset($mailer);\n                // Trust that the email has been sent\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('lostpwd_mail_okay')]);\n            } else {\n                $response->setStatusCode(Response::HTTP_CONFLICT);\n                $response->setData(['error' => Translation::get('lostpwd_err_1')]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_CONFLICT);\n            $response->setData(['error' => Translation::get('lostpwd_err_2')]);\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'submit-request-removal':\n        $postData = json_decode(file_get_contents('php://input'), true, 512, JSON_THROW_ON_ERROR);\n\n        $csrfToken = Filter::filterVar($postData[Token::PMF_SESSION_NAME], FILTER_SANITIZE_SPECIAL_CHARS);\n        if (!Token::getInstance()->verifyToken('request-removal', $csrfToken)) {\n            $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n            $response->setData(['error' => Translation::get('ad_msg_noauth')]);\n            break;\n        }\n\n        $userId = Filter::filterVar($postData['userId'], FILTER_VALIDATE_INT);\n        $author = trim((string) Filter::filterVar($postData['name'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $loginName = trim((string) Filter::filterVar($postData['loginname'], FILTER_SANITIZE_SPECIAL_CHARS));\n        $email = trim((string) Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL));\n        $question = trim((string) Filter::filterVar($postData['question'], FILTER_SANITIZE_SPECIAL_CHARS));\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // Validate User ID, Username and email\n        $user = new User($faqConfig);\n        if (\n            !$user->getUserById($userId) ||\n            $userId !== $user->getUserId() ||\n            $loginName !== $user->getLogin() ||\n            $email !== $user->getUserData('email')\n        ) {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('ad_user_error_loginInvalid')]);\n            break;\n        }\n\n        if (!empty($author) && !empty($email) && !empty($question) && $stopWords->checkBannedWord($question)) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                Translation::get('ad_user_loginname'),\n                $loginName,\n                Translation::get('msgNewContentName'),\n                $author,\n                Translation::get('msgNewContentMail'),\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            try {\n                $mailer->setReplyTo($email, $author);\n                $mailer->addTo($faqConfig->getAdminEmail());\n                $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n                $mailer->message = $question;\n                $result = $mailer->send();\n                unset($mailer);\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('msgMailContact')]);\n            } catch (Exception | TransportExceptionInterface $exception) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $exception->getMessage()]);\n            }\n        } else {\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData(['error' => Translation::get('err_sendMail')]);\n        }\n        break;\n}\n\n$response->send();\n", "<section class=\"col-12\">\n  <div class=\"row mb-2\">\n    <div class=\"col\">\n      <div class=\"spinner-border text-primary d-none\" id=\"loader\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <div id=\"faqs\"></div>\n    </div>\n  </div>\n\n  <form id=\"formValues\" action=\"#\" method=\"post\" accept-charset=\"utf-8\" class=\"needs-validation\" novalidate>\n    <input type=\"hidden\" name=\"{{ msgS2FReferrer }}\" value=\"{{ send2friendLink }}\">\n    <input type=\"hidden\" name=\"lang\" id=\"lang\" value=\"{{ lang }}\">\n    <input type=\"hidden\" name=\"faqId\" id=\"faqId\" value=\"{{ faqId }}\">\n    <input type=\"hidden\" name=\"categoryId\" id=\"categoryId\" value=\"{{ categoryId }}\">\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"name\">{{ msgS2FName }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" value=\"{{ defaultContentName }}\" required />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"email\">{{ msgS2FEMail }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" value=\"{{ defaultContentMail }}\" required />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">{{ msgS2FFriends }}</div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">1{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto1\" required />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">2{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto2\" />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">3{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto3\" />\n      </div>\n    </div>\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">4{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto4\" />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"mailto[]\">5{{ msgS2FEMails }}</label>\n      <div class=\"col-sm-9\">\n        <input type=\"email\" class=\"form-control\" name=\"mailto[]\" id=\"mailto5\" />\n      </div>\n    </div>\n\n    <div class=\"row mb-2\">\n      <strong>{{ msgS2FText }}</strong><br />\n      <em>{{ send2friend_text }}</em>\n    </div>\n    <div class=\"row mb-2\">\n      <strong>{{ msgS2FText2 }}</strong><br />\n      <em>{{ send2friendLink }}</em>\n    </div>\n\n    <div class=\"row mb-2\">\n      <label class=\"col-sm-3 form-control-label\" for=\"message\">{{ msgS2FMessage }}</label>\n      <div class=\"col-sm-9\">\n        <textarea name=\"message\" id=\"message\" class=\"form-control\" cols=\"37\" rows=\"5\"></textarea>\n      </div>\n    </div>\n\n    {{ captchaFieldset }}\n\n    <div class=\"form-actions text-end\">\n      <button class=\"btn btn-primary btn-lg\" type=\"submit\" id=\"pmf-submit-values\" data-pmf-form=\"sendtofriends\">\n        {{ msgS2FButton }}\n      </button>\n    </div>\n  </form>\n</section>\n", "<?php\n\n/**\n * The send2friend page.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2002-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2002-09-16\n */\n\nuse phpMyFAQ\\Captcha\\Captcha;\nuse phpMyFAQ\\Captcha\\Helper\\CaptchaHelper;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User\\CurrentUser;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$captcha = Captcha::getInstance($faqConfig);\n$captcha->setSessionId($sids);\n\n$captchaHelper = CaptchaHelper::getInstance($faqConfig);\n\nif (!$faqConfig->get('main.enableSendToFriend')) {\n    $response = new Response();\n    $response->setStatusCode(Response::HTTP_FORBIDDEN);\n    $response->isRedirect($faqConfig->getDefaultUrl());\n    $response->send();\n    exit();\n}\n\nif ($showCaptcha !== '') {\n    $captcha->drawCaptchaImage();\n    exit;\n}\n\ntry {\n    $faqSession->userTracking('send2friend', 0);\n} catch (Exception) {\n    // @todo handle the exception\n}\n\n$request = Request::createFromGlobals();\n$faqCategory = Filter::filterVar($request->query->get('cat'), FILTER_VALIDATE_INT);\n$faqId = Filter::filterVar($request->query->get('id'), FILTER_VALIDATE_INT);\n$faqLanguage = Filter::filterVar($request->query->get('artlang'), FILTER_SANITIZE_SPECIAL_CHARS);\n\n$send2friendLink = sprintf(\n    '%sindex.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n    $faqConfig->getDefaultUrl(),\n    $faqCategory,\n    $faqId,\n    urlencode((string) $faqLanguage)\n);\n\n\n$template->parse(\n    'mainPageContent',\n    [\n        'lang' => Strings::htmlentities($faqLanguage),\n        'faqId' => $faqId,\n        'categoryId' => $faqCategory,\n        'msgSend2Friend' => Translation::get('msgSend2Friend'),\n        'msgS2FReferrer' => 'link',\n        'msgS2FName' => Translation::get('msgS2FName'),\n        'msgS2FEMail' => Translation::get('msgS2FEMail'),\n        'defaultContentMail' => ($user->getUserId() > 0) ? $user->getUserData('email') : '',\n        'defaultContentName' =>\n            ($user->getUserId() > 0) ? Strings::htmlentities($user->getUserData('display_name')) : '',\n        'msgS2FFriends' => Translation::get('msgS2FFriends'),\n        'msgS2FEMails' => Translation::get('msgS2FEMails'),\n        'msgS2FText' => Translation::get('msgS2FText'),\n        'send2friend_text' => Strings::htmlentities($faqConfig->get('main.send2friendText')),\n        'msgS2FText2' => Translation::get('msgS2FText2'),\n        'send2friendLink' => $send2friendLink,\n        'msgS2FMessage' => Translation::get('msgS2FMessage'),\n        'captchaFieldset' => $captchaHelper->renderCaptcha(\n            $captcha,\n            'send2friend',\n            Translation::get('msgCaptcha'),\n            $user->isLoggedIn()\n        ),\n        'msgS2FButton' => Translation::get('msgS2FButton'),\n    ]\n);\n\n$template->parseBlock(\n    'index',\n    'breadcrumb',\n    [\n        'breadcrumbHeadline' => Translation::get('msgSend2Friend')\n    ]\n);\n"], "filenames": ["phpmyfaq/api.service.php", "phpmyfaq/assets/themes/default/templates/send2friend.html", "phpmyfaq/send2friend.php"], "buggy_code_start_loc": [774, 12, 73], "buggy_code_end_loc": [801, 14, 73], "fixing_code_start_loc": [773, 12, 74], "fixing_code_end_loc": [817, 16, 76], "type": "CWE-863", "message": "phpMyFAQ is an Open Source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. The 'sharing FAQ' functionality allows any unauthenticated actor to misuse the phpMyFAQ application to send arbitrary emails to a large range of targets. The phpMyFAQ application has a functionality where anyone can share a FAQ item to others. The front-end of this functionality allows any phpMyFAQ articles to be shared with 5 email addresses. Any unauthenticated actor can perform this action. There is a CAPTCHA in place, however the amount of people you email with a single request is not limited to 5 by the backend. An attacker can thus solve a single CAPTCHA and send thousands of emails at once. An attacker can utilize the target application's email server to send phishing messages. This can get the server on a blacklist, causing all emails to end up in spam. It can also lead to reputation damages. This issue has been patched in version 3.2.5.", "other": {"cve": {"id": "CVE-2024-22208", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-05T21:15:11.830", "lastModified": "2024-02-12T21:40:50.080", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "phpMyFAQ is an Open Source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. The 'sharing FAQ' functionality allows any unauthenticated actor to misuse the phpMyFAQ application to send arbitrary emails to a large range of targets. The phpMyFAQ application has a functionality where anyone can share a FAQ item to others. The front-end of this functionality allows any phpMyFAQ articles to be shared with 5 email addresses. Any unauthenticated actor can perform this action. There is a CAPTCHA in place, however the amount of people you email with a single request is not limited to 5 by the backend. An attacker can thus solve a single CAPTCHA and send thousands of emails at once. An attacker can utilize the target application's email server to send phishing messages. This can get the server on a blacklist, causing all emails to end up in spam. It can also lead to reputation damages. This issue has been patched in version 3.2.5."}, {"lang": "es", "value": "phpMyFAQ es una aplicaci\u00f3n web de preguntas frecuentes de c\u00f3digo abierto para PHP 8.1+ y MySQL, PostgreSQL y otras bases de datos. La funcionalidad 'compartir preguntas frecuentes' permite a cualquier actor no autenticado hacer un mal uso de la aplicaci\u00f3n phpMyFAQ para enviar correos electr\u00f3nicos arbitrarios a una amplia gama de objetivos. La aplicaci\u00f3n phpMyFAQ tiene una funcionalidad donde cualquiera puede compartir un elemento de preguntas frecuentes con otros. La interfaz de esta funcionalidad permite compartir cualquier art\u00edculo de phpMyFAQ con 5 direcciones de correo electr\u00f3nico. Cualquier actor no autenticado puede realizar esta acci\u00f3n. Existe un CAPTCHA, sin embargo, la cantidad de personas a las que env\u00eda correos electr\u00f3nicos con una sola solicitud no est\u00e1 limitada a 5 por el backend. De este modo, un atacante puede resolver un \u00fanico CAPTCHA y enviar miles de correos electr\u00f3nicos a la vez. Un atacante puede utilizar el servidor de correo electr\u00f3nico de la aplicaci\u00f3n objetivo para enviar mensajes de phishing. Esto puede hacer que el servidor est\u00e9 en una lista negra, lo que hace que todos los correos electr\u00f3nicos terminen en spam. Tambi\u00e9n puede provocar da\u00f1os a la reputaci\u00f3n. Este problema se solucion\u00f3 en la versi\u00f3n 3.2.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.2.5", "matchCriteriaId": "0203E85A-673E-4D3F-BAAF-AE6CABA807FD"}]}]}], "references": [{"url": "https://github.com/thorsten/phpMyFAQ/commit/a34d94ab7b1be9256a9ef898f18ea6bfb63f6f1e", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-9hhf-xmcw-r3xg", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpMyFAQ/commit/a34d94ab7b1be9256a9ef898f18ea6bfb63f6f1e"}}