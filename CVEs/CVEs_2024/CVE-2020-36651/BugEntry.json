{"buggy_code": ["var http = require('http');\nvar fs = require('fs');\nvar header = require('./tool/httpHeader').contentType;\nvar route = require('./router').response;\nvar conf = require('./config');\n\nfunction responseTemp(response, head, file) {\n  response.writeHead(200, head);\n  response.write(file);\n  response.end();\n};\n\nfunction error(response, text) {\n  response.writeHead(500, {'Content-Type': 'text/html;charset:utf-8'});\n  response.write('<h2>Server Error</h2><p>Error in api or template config about this domain</p><p>' + (text || 'Can\\'t find domain config!') + '</p>');\n  response.end();\n}\n\nfunction start(config) {\n  var host = conf.constant.host;\n  if(config) conf.serv = config;\n  function onRequest(request, response) {\n    var frontUrl = '';\n    if(request.url === '/favicon.ico') return;\n    for(var key in conf.serv) {\n      if(request.headers.host.indexOf(key) !== -1) {\n        host = conf.serv[key];\n      }\n    }\n    \n    var nowTemp = host.frondend + (request.url.replace('/', '') || host.baseTemp);\n    var httpHead = header(nowTemp);\n    conf.app = conf.getApp(host.backend);\n    if(!host) {\n      error(response);\n      return;\n    }\n\n    // \u76f4\u63a5\u5b9a\u5411\u5230\u6a21\u677f\n    var defaultTemp = function() {\n      fs.readFile(host.frondend + host.baseTemp, function(err, file) {\n        if(err) {\n          error(response, err);\n          return;\n        }\n        responseTemp(response, httpHead, file);\n      });\n    };\n\n    var send = function(res) {\n      if(res) {\n        if(res === 'error') {\n          error(response, 'Route config error!');\n          return;\n        }\n\n        if(res.html) {\n          // html\u683c\u5f0f\n          response.writeHead(res.status, {'Content-Type': 'text/html;charset:utf-8'});\n          response.write(res.html);\n          response.end();\n          return;\n        } else if(res.status === 302) {\n          // \u91cd\u5b9a\u5411\n          response.writeHead(res.status, {\n            'Content-Type': 'text/html;charset:utf-8',\n            'Location': res.url\n          });\n          response.end();\n          return;\n        } else if(res.data) {\n          // json\u683c\u5f0f\n          response.writeHead(res.status, {'Content-Type': 'application/json'});\n          response.write(JSON.stringify(res));\n          response.end();\n          return;\n        } else {\n          error(response, 'Data type error!');\n        }\n      } else {\n        fs.exists(nowTemp, function(exists) {\n          if(!exists) {\n            defaultTemp();\n          } else {\n            fs.readFile(nowTemp, function(err, file) {\n              if (err) {\n                defaultTemp();\n              } else {\n                responseTemp(response, httpHead, file);\n              }\n            });\n          }\n        });\n      }\n    };\n\n    route(conf.app.url, request, send);\n  }\n\n  http.createServer(onRequest).listen(conf.constant.port);\n  console.log('server running at ' + conf.constant.port);\n}\n\nexports.start = start;\n"], "fixing_code": ["var http = require('http');\nvar fs = require('fs');\nvar header = require('./tool/httpHeader').contentType;\nvar route = require('./router').response;\nvar conf = require('./config');\n\nfunction responseTemp(response, head, file) {\n  response.writeHead(200, head);\n  response.write(file);\n  response.end();\n};\n\nfunction error(response, text) {\n  response.writeHead(500, {'Content-Type': 'text/html;charset:utf-8'});\n  response.write('<h2>Server Error</h2><p>Error in api or template config about this domain</p><p>' + (text || 'Can\\'t find domain config!') + '</p>');\n  response.end();\n}\n\nfunction start(config) {\n  var host = conf.constant.host;\n  if(config) conf.serv = config;\n  function onRequest(request, response) {\n    var frontUrl = '';\n    if(request.url === '/favicon.ico') return;\n    for(var key in conf.serv) {\n      if(request.headers.host.indexOf(key) !== -1) {\n        host = conf.serv[key];\n      }\n    }\n\n    var nowTemp = (host.frondend + (request.url.replace('/', '') || host.baseTemp)).replace(/\\.\\./g, '');\n    var httpHead = header(nowTemp);\n    conf.app = conf.getApp(host.backend);\n    if(!host) {\n      error(response);\n      return;\n    }\n\n    // \u76f4\u63a5\u5b9a\u5411\u5230\u6a21\u677f\n    var defaultTemp = function() {\n      fs.readFile(host.frondend + host.baseTemp, function(err, file) {\n        if(err) {\n          error(response, err);\n          return;\n        }\n        responseTemp(response, httpHead, file);\n      });\n    };\n\n    var send = function(res) {\n      if(res) {\n        if(res === 'error') {\n          error(response, 'Route config error!');\n          return;\n        }\n\n        if(res.html) {\n          // html\u683c\u5f0f\n          response.writeHead(res.status, {'Content-Type': 'text/html;charset:utf-8'});\n          response.write(res.html);\n          response.end();\n          return;\n        } else if(res.status === 302) {\n          // \u91cd\u5b9a\u5411\n          response.writeHead(res.status, {\n            'Content-Type': 'text/html;charset:utf-8',\n            'Location': res.url\n          });\n          response.end();\n          return;\n        } else if(res.data) {\n          // json\u683c\u5f0f\n          response.writeHead(res.status, {'Content-Type': 'application/json'});\n          response.write(JSON.stringify(res));\n          response.end();\n          return;\n        } else {\n          error(response, 'Data type error!');\n        }\n      } else {\n        fs.exists(nowTemp, function(exists) {\n          if(!exists) {\n            defaultTemp();\n          } else {\n            fs.readFile(nowTemp, function(err, file) {\n              if (err) {\n                defaultTemp();\n              } else {\n                responseTemp(response, httpHead, file);\n              }\n            });\n          }\n        });\n      }\n    };\n\n    route(conf.app.url, request, send);\n  }\n\n  http.createServer(onRequest).listen(conf.constant.port);\n  console.log('server running at ' + conf.constant.port);\n}\n\nexports.start = start;\n"], "filenames": ["nodeserver.js"], "buggy_code_start_loc": [30], "buggy_code_end_loc": [32], "fixing_code_start_loc": [30], "fixing_code_end_loc": [32], "type": "CWE-22", "message": "A vulnerability has been found in youngerheart nodeserver and classified as critical. Affected by this vulnerability is an unknown functionality of the file nodeserver.js. The manipulation leads to path traversal. The name of the patch is c4c0f0138ab5afbac58e03915d446680421bde28. It is recommended to apply a patch to fix this issue. The identifier VDB-218461 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36651", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-18T01:15:11.800", "lastModified": "2023-01-25T17:51:15.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in youngerheart nodeserver and classified as critical. Affected by this vulnerability is an unknown functionality of the file nodeserver.js. The manipulation leads to path traversal. The name of the patch is c4c0f0138ab5afbac58e03915d446680421bde28. It is recommended to apply a patch to fix this issue. The identifier VDB-218461 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nodeserver_project:nodeserver:*:*:*:*:*:*:*:*", "versionEndExcluding": "2020-08-21", "matchCriteriaId": "277E5517-CCAE-44A2-A8CD-218FEA00AC90"}]}]}], "references": [{"url": "https://github.com/youngerheart/nodeserver/commit/c4c0f0138ab5afbac58e03915d446680421bde28", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/youngerheart/nodeserver/pull/6", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218461", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218461", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/youngerheart/nodeserver/commit/c4c0f0138ab5afbac58e03915d446680421bde28"}}