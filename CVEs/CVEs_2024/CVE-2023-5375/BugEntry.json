{"buggy_code": ["<?php\n\nnamespace Mosparo\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Mosparo\\Entity\\ProjectMember;\nuse Mosparo\\Entity\\Submission;\nuse Mosparo\\Entity\\User;\nuse Mosparo\\Form\\DesignSettingsFormType;\nuse Mosparo\\Form\\ProjectFormType;\nuse Mosparo\\Helper\\CleanupHelper;\nuse Mosparo\\Helper\\DesignHelper;\nuse Mosparo\\Helper\\ProjectHelper;\nuse Mosparo\\Util\\TokenGenerator;\nuse Omines\\DataTablesBundle\\Adapter\\Doctrine\\ORMAdapter;\nuse Omines\\DataTablesBundle\\Column\\TextColumn;\nuse Omines\\DataTablesBundle\\Column\\TwigColumn;\nuse Omines\\DataTablesBundle\\DataTableFactory;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Mosparo\\Entity\\Project;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @Route(\"/project\")\n */\nclass ProjectController extends AbstractController\n{\n    protected EntityManagerInterface $entityManager;\n\n    protected ProjectHelper $projectHelper;\n\n    protected DesignHelper $designHelper;\n\n    protected CleanupHelper $cleanupHelper;\n\n    protected TranslatorInterface $translator;\n\n    public function __construct(EntityManagerInterface $entityManager,  ProjectHelper $projectHelper, DesignHelper $designHelper, CleanupHelper $cleanupHelper, TranslatorInterface $translator)\n    {\n        $this->entityManager = $entityManager;\n        $this->projectHelper = $projectHelper;\n        $this->designHelper = $designHelper;\n        $this->cleanupHelper = $cleanupHelper;\n        $this->translator = $translator;\n    }\n\n    /**\n     * @Route(\"/\", name=\"project_list\")\n     * @Route(\"/filter/{filter}\", name=\"project_list_filtered\")\n     */\n    public function list(DataTableFactory $dataTableFactory, Request $request, $filter = ''): Response\n    {\n        // Load the view from the user configuration\n        $user = $this->getUser();\n        $view = 'boxes';\n        if ($user instanceof User) {\n            $userView = $user->getConfigValue('projectListView');\n\n            if ($userView !== null) {\n                $view = $userView;\n            }\n        }\n\n        // Determine the search query\n        $searchQuery = '';\n        if ($request->query->has('q') && trim($request->query->get('q'))) {\n            $searchQuery = $request->query->get('q');\n        }\n\n        $filters = $this->entityManager->getFilters();\n        $filterEnabled = false;\n        if ($filters->isEnabled('project_related_filter')) {\n            $filters->disable('project_related_filter');\n            $filterEnabled = true;\n        }\n\n        // Determine to which projects the user has access. If it's an admin, it has access to all projects\n        $allowedProjectIds = [];\n        if (!$this->isGranted('ROLE_ADMIN')) {\n            foreach ($this->getUser()->getProjectMemberships() as $membership) {\n                $allowedProjectIds[] = $membership->getProject()->getId();\n            }\n        }\n\n        // Table view\n        $table = null;\n        if ($view === 'table') {\n            $table = $dataTableFactory->create(['autoWidth' => true])\n                ->add('name', TextColumn::class, ['label' => 'project.list.name'])\n                ->add('status', TwigColumn::class, [\n                    'label' => 'project.list.status',\n                    'template' => 'project/list/_status.html.twig'\n                ])\n                ->add('actions', TwigColumn::class, [\n                    'label' => 'project.list.actions',\n                    'className' => 'buttons',\n                    'template' => 'project/list/_actions.html.twig'\n                ])\n                ->createAdapter(ORMAdapter::class, [\n                    'entity' => Project::class,\n                    'query' => function (QueryBuilder $builder) use ($filter, $searchQuery, $allowedProjectIds) {\n                        $builder\n                            ->select('e')\n                            ->from(Project::class, 'e');\n\n                        if ($filter === 'active') {\n                            $builder\n                                ->andWhere('e.status = 1');\n                        } else if ($filter === 'inactive') {\n                            $builder\n                                ->andWhere('e.status = 0');\n                        }\n\n                        if ($searchQuery) {\n                            $builder\n                                ->andWhere('e.name LIKE :searchQuery')\n                                ->setParameter('searchQuery', '%' . $searchQuery . '%');\n                        }\n\n                        // Limit the possible projects to the ones the user has access to\n                        if ($allowedProjectIds) {\n                            $builder\n                                ->andWhere('e.id IN (:projects)')\n                                ->setParameter('projects', $allowedProjectIds);\n                        }\n                    },\n                ])\n                ->handleRequest($request);\n\n            if ($table->isCallback()) {\n                return $table->getResponse();\n            }\n        }\n\n        // Box view\n        $numberOfSubmissionsByProject = null;\n        if ($view === 'boxes') {\n            $builder = $this->entityManager->createQueryBuilder()\n                ->select('IDENTITY(s.project) AS project_id', 'COUNT(s) AS count')\n                ->from(Submission::class, 's')\n                ->where('s.spam = 1')\n                ->orWhere('s.valid IS NOT NULL')\n                ->groupBy('s.project');\n\n            // Limit the possible projects to the ones the user has access to\n            if ($allowedProjectIds) {\n                $builder\n                    ->andWhere('s.project IN (:projects)')\n                    ->setParameter('projects', $allowedProjectIds);\n            }\n\n            $numberOfSubmissions = $builder->getQuery();\n\n            $numberOfSubmissionsByProject = [];\n            foreach ($numberOfSubmissions->getResult() as $row) {\n                $numberOfSubmissionsByProject[$row['project_id']] = $row['count'];\n            }\n        }\n\n        if ($filterEnabled) {\n            $filters->enable('project_related_filter');\n        }\n\n        return $this->render('project/list.html.twig', [\n            'numberOfSubmissionsByProject' => $numberOfSubmissionsByProject,\n            'view' => $view,\n            'datatable' => $table,\n            'filter' => $filter,\n            'searchQuery' => $searchQuery,\n        ]);\n    }\n\n    /**\n     * @Route(\"/switch-view/{view}\", name=\"project_list_switch_view\")\n     */\n    public function switchView($view): Response\n    {\n        $user = $this->getUser();\n\n        $possibleViews = ['table', 'boxes'];\n        if ($user instanceof User && in_array($view, $possibleViews)) {\n            $user->setConfigValue('projectListView', $view);\n            $this->entityManager->flush();\n        }\n\n        return $this->redirectToRoute('project_list');\n    }\n\n    /**\n     * @Route(\"/create\", name=\"project_create\")\n     */\n    public function create(Request $request): Response\n    {\n        $project = new Project();\n\n        $form = $this->createForm(ProjectFormType::class, $project);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $tokenGenerator = new TokenGenerator();\n            $project->setPublicKey($tokenGenerator->generateToken());\n            $project->setPrivateKey($tokenGenerator->generateToken());\n\n            $projectMember = new ProjectMember();\n            $projectMember->setProject($project);\n            $projectMember->setUser($this->getUser());\n            $projectMember->setRole(ProjectMember::ROLE_OWNER);\n\n            // Initial save\n            $this->entityManager->persist($project);\n            $this->entityManager->persist($projectMember);\n            $this->entityManager->flush();\n\n            // Set the active project\n            $this->projectHelper->setActiveProject($project);\n\n            // Prepare the css cache and save again\n            $this->designHelper->generateCssCache($project);\n            $this->entityManager->flush();\n\n            return $this->redirectToRoute('project_create_wizard_design', ['project' => $project->getId()]);\n        }\n\n        return $this->render('project/create.html.twig', [\n            'form' => $form->createView(),\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-wizard/{project}/design\", name=\"project_create_wizard_design\")\n     */\n    public function createWizardDesign(Request $request, Project $project): Response\n    {\n        if ($this->projectHelper->getActiveProject() !== $project) {\n            $result = $this->setActiveProject($request, $project);\n\n            if (!$result) {\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        $project->setConfigValue('designMode', 'simple');\n        $config = $project->getConfigValues();\n\n        $form = $this->createForm(DesignSettingsFormType::class, $config, ['mode' => 'simple']);\n\n        $form->handleRequest($request);\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n            foreach ($data as $key => $value) {\n                if ($value === null) {\n                    $value = '';\n                }\n\n                $project->setConfigValue($key, $value);\n            }\n\n            // Prepare the css cache\n            $this->designHelper->generateCssCache($project);\n\n            $this->entityManager->flush();\n\n            return $this->redirectToRoute('project_create_wizard_security', ['project' => $project->getId()]);\n        }\n\n        return $this->render('project/create-wizard/design.html.twig', [\n            'form' => $form->createView(),\n            'project' => $project,\n            'sizeVariables' => $this->designHelper->getBoxSizeVariables(),\n            'maxRadiusForLogo' => $this->designHelper->getMaxRadiusForLogo(),\n            'mode' => 'simple',\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-wizard/{project}/security\", name=\"project_create_wizard_security\")\n     */\n    public function createWizardSecurity(Request $request, Project $project): Response\n    {\n        if ($this->projectHelper->getActiveProject() !== $project) {\n            $result = $this->setActiveProject($request, $project);\n\n            if (!$result) {\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        $config = $project->getConfigValues();\n        $form = $this->createFormBuilder($config, ['translation_domain' => 'mosparo'])\n            // Minimum time\n            ->add('minimumTimeActive', CheckboxType::class, ['label' => 'settings.security.form.minimumTimeActive', 'required' => false])\n\n            // Honeypot\n            ->add('honeypotFieldActive', CheckboxType::class, ['label' => 'settings.security.form.honeypotFieldActive', 'required' => false])\n\n            // delay\n            ->add('delayActive', CheckboxType::class, ['label' => 'settings.security.form.delayActive', 'required' => false])\n\n            // lockout\n            ->add('lockoutActive', CheckboxType::class, ['label' => 'settings.security.form.lockoutActive', 'required' => false])\n\n            ->getForm();\n\n        $form->handleRequest($request);\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n            foreach ($data as $key => $value) {\n                $project->setConfigValue($key, $value);\n            }\n\n            $this->entityManager->flush();\n\n            return $this->redirectToRoute('project_create_wizard_connection', ['project' => $project->getId()]);\n        }\n\n        return $this->render('project/create-wizard/security.html.twig', [\n            'form' => $form->createView(),\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-wizard/{project}/connection\", name=\"project_create_wizard_connection\")\n     */\n    public function createWizardConnection(Request $request, Project $project): Response\n    {\n        if ($this->projectHelper->getActiveProject() !== $project) {\n            $result = $this->setActiveProject($request, $project);\n\n            if (!$result) {\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        return $this->render('project/create-wizard/connection.html.twig', [\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/delete/{project}\", name=\"project_delete\")\n     */\n    public function delete(Request $request, Project $project): Response\n    {\n        if ($request->request->has('delete-token')) {\n            $submittedToken = $request->request->get('delete-token');\n\n            if ($this->isCsrfTokenValid('delete-project', $submittedToken)) {\n                // Remove the cached resources\n                $this->designHelper->clearCssCache($project);\n\n                // Delete all to the project associated objects\n                $this->cleanupHelper->cleanupProjectEntities($project);\n\n                $this->entityManager->remove($project);\n                $this->entityManager->flush();\n\n                $session = $request->getSession();\n                $session->getFlashBag()->add(\n                    'success',\n                    $this->translator->trans(\n                        'project.delete.message.successfullyDeleted',\n                        ['%projectName%' => $project->getName()],\n                        'mosparo'\n                    )\n                );\n\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        return $this->render('project/delete.html.twig', [\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/switch/{project}\", name=\"project_switch\")\n     */\n    public function switch(Request $request, Project $project): Response\n    {\n        $result = $this->setActiveProject($request, $project);\n\n        // Only admin users or user which are added as project member have access to the project\n        if (!$result) {\n            return $this->redirectToRoute('project_list');\n        }\n\n        // Redirect back to the originally requested path\n        $targetPath = $request->query->get('targetPath', false);\n        if ($targetPath) {\n            return $this->redirect($targetPath);\n        }\n\n        return $this->redirectToRoute('dashboard');\n    }\n\n    protected function setActiveProject(Request $request, Project $project): bool\n    {\n        if (!$this->isGranted('ROLE_ADMIN') && !$project->isProjectMember($this->getUser())) {\n            return false;\n        }\n\n        $request->getSession()->set('activeProjectId', $project->getId());\n\n        return true;\n    }\n}"], "fixing_code": ["<?php\n\nnamespace Mosparo\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Mosparo\\Entity\\ProjectMember;\nuse Mosparo\\Entity\\Submission;\nuse Mosparo\\Entity\\User;\nuse Mosparo\\Form\\DesignSettingsFormType;\nuse Mosparo\\Form\\ProjectFormType;\nuse Mosparo\\Helper\\CleanupHelper;\nuse Mosparo\\Helper\\DesignHelper;\nuse Mosparo\\Helper\\ProjectHelper;\nuse Mosparo\\Util\\TokenGenerator;\nuse Omines\\DataTablesBundle\\Adapter\\Doctrine\\ORMAdapter;\nuse Omines\\DataTablesBundle\\Column\\TextColumn;\nuse Omines\\DataTablesBundle\\Column\\TwigColumn;\nuse Omines\\DataTablesBundle\\DataTableFactory;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Mosparo\\Entity\\Project;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @Route(\"/project\")\n */\nclass ProjectController extends AbstractController\n{\n    protected EntityManagerInterface $entityManager;\n\n    protected ProjectHelper $projectHelper;\n\n    protected DesignHelper $designHelper;\n\n    protected CleanupHelper $cleanupHelper;\n\n    protected TranslatorInterface $translator;\n\n    public function __construct(EntityManagerInterface $entityManager,  ProjectHelper $projectHelper, DesignHelper $designHelper, CleanupHelper $cleanupHelper, TranslatorInterface $translator)\n    {\n        $this->entityManager = $entityManager;\n        $this->projectHelper = $projectHelper;\n        $this->designHelper = $designHelper;\n        $this->cleanupHelper = $cleanupHelper;\n        $this->translator = $translator;\n    }\n\n    /**\n     * @Route(\"/\", name=\"project_list\")\n     * @Route(\"/filter/{filter}\", name=\"project_list_filtered\")\n     */\n    public function list(DataTableFactory $dataTableFactory, Request $request, $filter = ''): Response\n    {\n        // Load the view from the user configuration\n        $user = $this->getUser();\n        $view = 'boxes';\n        if ($user instanceof User) {\n            $userView = $user->getConfigValue('projectListView');\n\n            if ($userView !== null) {\n                $view = $userView;\n            }\n        }\n\n        // Determine the search query\n        $searchQuery = '';\n        if ($request->query->has('q') && trim($request->query->get('q'))) {\n            $searchQuery = $request->query->get('q');\n        }\n\n        $filters = $this->entityManager->getFilters();\n        $filterEnabled = false;\n        if ($filters->isEnabled('project_related_filter')) {\n            $filters->disable('project_related_filter');\n            $filterEnabled = true;\n        }\n\n        // Determine to which projects the user has access. If it's an admin, it has access to all projects\n        $allowedProjectIds = [];\n        if (!$this->isGranted('ROLE_ADMIN')) {\n            foreach ($this->getUser()->getProjectMemberships() as $membership) {\n                $allowedProjectIds[] = $membership->getProject()->getId();\n            }\n        }\n\n        // Table view\n        $table = null;\n        if ($view === 'table') {\n            $table = $dataTableFactory->create(['autoWidth' => true])\n                ->add('name', TextColumn::class, ['label' => 'project.list.name'])\n                ->add('status', TwigColumn::class, [\n                    'label' => 'project.list.status',\n                    'template' => 'project/list/_status.html.twig'\n                ])\n                ->add('actions', TwigColumn::class, [\n                    'label' => 'project.list.actions',\n                    'className' => 'buttons',\n                    'template' => 'project/list/_actions.html.twig'\n                ])\n                ->createAdapter(ORMAdapter::class, [\n                    'entity' => Project::class,\n                    'query' => function (QueryBuilder $builder) use ($filter, $searchQuery, $allowedProjectIds) {\n                        $builder\n                            ->select('e')\n                            ->from(Project::class, 'e');\n\n                        if ($filter === 'active') {\n                            $builder\n                                ->andWhere('e.status = 1');\n                        } else if ($filter === 'inactive') {\n                            $builder\n                                ->andWhere('e.status = 0');\n                        }\n\n                        if ($searchQuery) {\n                            $builder\n                                ->andWhere('e.name LIKE :searchQuery')\n                                ->setParameter('searchQuery', '%' . $searchQuery . '%');\n                        }\n\n                        // Limit the possible projects to the ones the user has access to\n                        if ($allowedProjectIds) {\n                            $builder\n                                ->andWhere('e.id IN (:projects)')\n                                ->setParameter('projects', $allowedProjectIds);\n                        }\n                    },\n                ])\n                ->handleRequest($request);\n\n            if ($table->isCallback()) {\n                return $table->getResponse();\n            }\n        }\n\n        // Box view\n        $numberOfSubmissionsByProject = null;\n        if ($view === 'boxes') {\n            $builder = $this->entityManager->createQueryBuilder()\n                ->select('IDENTITY(s.project) AS project_id', 'COUNT(s) AS count')\n                ->from(Submission::class, 's')\n                ->where('s.spam = 1')\n                ->orWhere('s.valid IS NOT NULL')\n                ->groupBy('s.project');\n\n            // Limit the possible projects to the ones the user has access to\n            if ($allowedProjectIds) {\n                $builder\n                    ->andWhere('s.project IN (:projects)')\n                    ->setParameter('projects', $allowedProjectIds);\n            }\n\n            $numberOfSubmissions = $builder->getQuery();\n\n            $numberOfSubmissionsByProject = [];\n            foreach ($numberOfSubmissions->getResult() as $row) {\n                $numberOfSubmissionsByProject[$row['project_id']] = $row['count'];\n            }\n        }\n\n        if ($filterEnabled) {\n            $filters->enable('project_related_filter');\n        }\n\n        return $this->render('project/list.html.twig', [\n            'numberOfSubmissionsByProject' => $numberOfSubmissionsByProject,\n            'view' => $view,\n            'datatable' => $table,\n            'filter' => $filter,\n            'searchQuery' => $searchQuery,\n        ]);\n    }\n\n    /**\n     * @Route(\"/switch-view/{view}\", name=\"project_list_switch_view\")\n     */\n    public function switchView($view): Response\n    {\n        $user = $this->getUser();\n\n        $possibleViews = ['table', 'boxes'];\n        if ($user instanceof User && in_array($view, $possibleViews)) {\n            $user->setConfigValue('projectListView', $view);\n            $this->entityManager->flush();\n        }\n\n        return $this->redirectToRoute('project_list');\n    }\n\n    /**\n     * @Route(\"/create\", name=\"project_create\")\n     */\n    public function create(Request $request): Response\n    {\n        $project = new Project();\n\n        $form = $this->createForm(ProjectFormType::class, $project);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $tokenGenerator = new TokenGenerator();\n            $project->setPublicKey($tokenGenerator->generateToken());\n            $project->setPrivateKey($tokenGenerator->generateToken());\n\n            $projectMember = new ProjectMember();\n            $projectMember->setProject($project);\n            $projectMember->setUser($this->getUser());\n            $projectMember->setRole(ProjectMember::ROLE_OWNER);\n\n            // Initial save\n            $this->entityManager->persist($project);\n            $this->entityManager->persist($projectMember);\n            $this->entityManager->flush();\n\n            // Set the active project\n            $this->projectHelper->setActiveProject($project);\n\n            // Prepare the css cache and save again\n            $this->designHelper->generateCssCache($project);\n            $this->entityManager->flush();\n\n            return $this->redirectToRoute('project_create_wizard_design', ['project' => $project->getId()]);\n        }\n\n        return $this->render('project/create.html.twig', [\n            'form' => $form->createView(),\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-wizard/{project}/design\", name=\"project_create_wizard_design\")\n     */\n    public function createWizardDesign(Request $request, Project $project): Response\n    {\n        if ($this->projectHelper->getActiveProject() !== $project) {\n            $result = $this->setActiveProject($request, $project);\n\n            if (!$result) {\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        $project->setConfigValue('designMode', 'simple');\n        $config = $project->getConfigValues();\n\n        $form = $this->createForm(DesignSettingsFormType::class, $config, ['mode' => 'simple']);\n\n        $form->handleRequest($request);\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n            foreach ($data as $key => $value) {\n                if ($value === null) {\n                    $value = '';\n                }\n\n                $project->setConfigValue($key, $value);\n            }\n\n            // Prepare the css cache\n            $this->designHelper->generateCssCache($project);\n\n            $this->entityManager->flush();\n\n            return $this->redirectToRoute('project_create_wizard_security', ['project' => $project->getId()]);\n        }\n\n        return $this->render('project/create-wizard/design.html.twig', [\n            'form' => $form->createView(),\n            'project' => $project,\n            'sizeVariables' => $this->designHelper->getBoxSizeVariables(),\n            'maxRadiusForLogo' => $this->designHelper->getMaxRadiusForLogo(),\n            'mode' => 'simple',\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-wizard/{project}/security\", name=\"project_create_wizard_security\")\n     */\n    public function createWizardSecurity(Request $request, Project $project): Response\n    {\n        if ($this->projectHelper->getActiveProject() !== $project) {\n            $result = $this->setActiveProject($request, $project);\n\n            if (!$result) {\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        $config = $project->getConfigValues();\n        $form = $this->createFormBuilder($config, ['translation_domain' => 'mosparo'])\n            // Minimum time\n            ->add('minimumTimeActive', CheckboxType::class, ['label' => 'settings.security.form.minimumTimeActive', 'required' => false])\n\n            // Honeypot\n            ->add('honeypotFieldActive', CheckboxType::class, ['label' => 'settings.security.form.honeypotFieldActive', 'required' => false])\n\n            // delay\n            ->add('delayActive', CheckboxType::class, ['label' => 'settings.security.form.delayActive', 'required' => false])\n\n            // lockout\n            ->add('lockoutActive', CheckboxType::class, ['label' => 'settings.security.form.lockoutActive', 'required' => false])\n\n            ->getForm();\n\n        $form->handleRequest($request);\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n            foreach ($data as $key => $value) {\n                $project->setConfigValue($key, $value);\n            }\n\n            $this->entityManager->flush();\n\n            return $this->redirectToRoute('project_create_wizard_connection', ['project' => $project->getId()]);\n        }\n\n        return $this->render('project/create-wizard/security.html.twig', [\n            'form' => $form->createView(),\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-wizard/{project}/connection\", name=\"project_create_wizard_connection\")\n     */\n    public function createWizardConnection(Request $request, Project $project): Response\n    {\n        if ($this->projectHelper->getActiveProject() !== $project) {\n            $result = $this->setActiveProject($request, $project);\n\n            if (!$result) {\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        return $this->render('project/create-wizard/connection.html.twig', [\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/delete/{project}\", name=\"project_delete\")\n     */\n    public function delete(Request $request, Project $project): Response\n    {\n        if ($request->request->has('delete-token')) {\n            $submittedToken = $request->request->get('delete-token');\n\n            if ($this->isCsrfTokenValid('delete-project', $submittedToken)) {\n                // Remove the cached resources\n                $this->designHelper->clearCssCache($project);\n\n                // Delete all to the project associated objects\n                $this->cleanupHelper->cleanupProjectEntities($project);\n\n                $this->entityManager->remove($project);\n                $this->entityManager->flush();\n\n                $session = $request->getSession();\n                $session->getFlashBag()->add(\n                    'success',\n                    $this->translator->trans(\n                        'project.delete.message.successfullyDeleted',\n                        ['%projectName%' => $project->getName()],\n                        'mosparo'\n                    )\n                );\n\n                return $this->redirectToRoute('project_list');\n            }\n        }\n\n        return $this->render('project/delete.html.twig', [\n            'project' => $project,\n        ]);\n    }\n\n    /**\n     * @Route(\"/switch/{project}\", name=\"project_switch\")\n     */\n    public function switch(Request $request, Project $project): Response\n    {\n        $result = $this->setActiveProject($request, $project);\n\n        // Only admin users or user which are added as project member have access to the project\n        if (!$result) {\n            return $this->redirectToRoute('project_list');\n        }\n\n        // Redirect back to the originally requested path\n        $targetPath = $request->query->get('targetPath', false);\n        if ($targetPath && $this->isLocalUrl($request, $targetPath)) {\n            return $this->redirect($targetPath);\n        }\n\n        return $this->redirectToRoute('dashboard');\n    }\n\n    protected function setActiveProject(Request $request, Project $project): bool\n    {\n        if (!$this->isGranted('ROLE_ADMIN') && !$project->isProjectMember($this->getUser())) {\n            return false;\n        }\n\n        $request->getSession()->set('activeProjectId', $project->getId());\n\n        return true;\n    }\n\n    protected function isLocalUrl(Request $request, $url): bool\n    {\n        // If the first character is a slash, the URL is relative (only the path) and is local\n        if (str_starts_with($url, '/')) {\n            return true;\n        }\n\n        // If the URL is absolute but starts with the host of mosparo, we can redirect it.\n        // Add the slash to prevent a redirect when a similar top-level domain is used.\n        // For example, mosparo.com should not allow a redirect to mosparo.com.au\n        if (str_starts_with($url, $request->getSchemeAndHttpHost() . '/')) {\n            return true;\n        }\n\n        // The URL does not match the two checks because it's an external URL; no redirect in that case.\n        return false;\n    }\n}"], "filenames": ["src/Controller/ProjectController.php"], "buggy_code_start_loc": [397], "buggy_code_end_loc": [413], "fixing_code_start_loc": [397], "fixing_code_end_loc": [432], "type": "CWE-601", "message": "Open Redirect in GitHub repository mosparo/mosparo prior to 1.0.2.", "other": {"cve": {"id": "CVE-2023-5375", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-04T09:15:31.980", "lastModified": "2023-10-05T18:26:45.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Open Redirect in GitHub repository mosparo/mosparo prior to 1.0.2."}, {"lang": "es", "value": "Abrir redireccionamiento en el repositorio de GitHub mosparo/mosparo antes de 1.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mosparo:mosparo:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.2", "matchCriteriaId": "DDD7A17B-8772-4955-9D6B-3CAB8CF4D41F"}]}]}], "references": [{"url": "https://github.com/mosparo/mosparo/commit/9d5da367b78b8c883bfef5f332ffea26292f99e8", "source": "security@huntr.dev", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://huntr.dev/bounties/3fa2abde-cb58-45a3-a115-1727ece9acb9", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mosparo/mosparo/commit/9d5da367b78b8c883bfef5f332ffea26292f99e8"}}