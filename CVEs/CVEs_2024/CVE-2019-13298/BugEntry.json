{"buggy_code": ["/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%              EEEEE  N   N  H   H   AAA   N   N   CCCC  EEEEE                %\n%              E      NN  N  H   H  A   A  NN  N  C      E                    %\n%              EEE    N N N  HHHHH  AAAAA  N N N  C      EEE                  %\n%              E      N  NN  H   H  A   A  N  NN  C      E                    %\n%              EEEEE  N   N  H   H  A   A  N   N   CCCC  EEEEE                %\n%                                                                             %\n%                                                                             %\n%                    MagickCore Image Enhancement Methods                     %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                                 July 1992                                   %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2019 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    https://imagemagick.org/script/license.php                               %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/accelerate-private.h\"\n#include \"MagickCore/artifact.h\"\n#include \"MagickCore/attribute.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/cache-private.h\"\n#include \"MagickCore/cache-view.h\"\n#include \"MagickCore/channel.h\"\n#include \"MagickCore/color.h\"\n#include \"MagickCore/color-private.h\"\n#include \"MagickCore/colorspace.h\"\n#include \"MagickCore/colorspace-private.h\"\n#include \"MagickCore/composite-private.h\"\n#include \"MagickCore/enhance.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/fx.h\"\n#include \"MagickCore/gem.h\"\n#include \"MagickCore/gem-private.h\"\n#include \"MagickCore/geometry.h\"\n#include \"MagickCore/histogram.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/monitor-private.h\"\n#include \"MagickCore/option.h\"\n#include \"MagickCore/pixel.h\"\n#include \"MagickCore/pixel-accessor.h\"\n#include \"MagickCore/quantum.h\"\n#include \"MagickCore/quantum-private.h\"\n#include \"MagickCore/resample.h\"\n#include \"MagickCore/resample-private.h\"\n#include \"MagickCore/resource_.h\"\n#include \"MagickCore/statistic.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/string-private.h\"\n#include \"MagickCore/thread-private.h\"\n#include \"MagickCore/threshold.h\"\n#include \"MagickCore/token.h\"\n#include \"MagickCore/xml-tree.h\"\n#include \"MagickCore/xml-tree-private.h\"\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     A u t o G a m m a I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AutoGammaImage() extract the 'mean' from the image and adjust the image\n%  to try make set its gamma appropriatally.\n%\n%  The format of the AutoGammaImage method is:\n%\n%      MagickBooleanType AutoGammaImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: The image to auto-level\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType AutoGammaImage(Image *image,\n  ExceptionInfo *exception)\n{\n  double\n    gamma,\n    log_mean,\n    mean,\n    sans;\n\n  MagickStatusType\n    status;\n\n  register ssize_t\n    i;\n\n  log_mean=log(0.5);\n  if (image->channel_mask == DefaultChannels)\n    {\n      /*\n        Apply gamma correction equally across all given channels.\n      */\n      (void) GetImageMean(image,&mean,&sans,exception);\n      gamma=log(mean*QuantumScale)/log_mean;\n      return(LevelImage(image,0.0,(double) QuantumRange,gamma,exception));\n    }\n  /*\n    Auto-gamma each channel separately.\n  */\n  status=MagickTrue;\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    ChannelType\n      channel_mask;\n\n    PixelChannel channel = GetPixelChannelChannel(image,i);\n    PixelTrait traits = GetPixelChannelTraits(image,channel);\n    if ((traits & UpdatePixelTrait) == 0)\n      continue;\n    channel_mask=SetImageChannelMask(image,(ChannelType) (1UL << i));\n    status=GetImageMean(image,&mean,&sans,exception);\n    gamma=log(mean*QuantumScale)/log_mean;\n    status&=LevelImage(image,0.0,(double) QuantumRange,gamma,exception);\n    (void) SetImageChannelMask(image,channel_mask);\n    if (status == MagickFalse)\n      break;\n  }\n  return(status != 0 ? MagickTrue : MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     A u t o L e v e l I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AutoLevelImage() adjusts the levels of a particular image channel by\n%  scaling the minimum and maximum values to the full quantum range.\n%\n%  The format of the LevelImage method is:\n%\n%      MagickBooleanType AutoLevelImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: The image to auto-level\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType AutoLevelImage(Image *image,\n  ExceptionInfo *exception)\n{\n  return(MinMaxStretchImage(image,0.0,0.0,1.0,exception));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     B r i g h t n e s s C o n t r a s t I m a g e                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  BrightnessContrastImage() changes the brightness and/or contrast of an\n%  image.  It converts the brightness and contrast parameters into slope and\n%  intercept and calls a polynomical function to apply to the image.\n%\n%  The format of the BrightnessContrastImage method is:\n%\n%      MagickBooleanType BrightnessContrastImage(Image *image,\n%        const double brightness,const double contrast,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o brightness: the brightness percent (-100 .. 100).\n%\n%    o contrast: the contrast percent (-100 .. 100).\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType BrightnessContrastImage(Image *image,\n  const double brightness,const double contrast,ExceptionInfo *exception)\n{\n#define BrightnessContastImageTag  \"BrightnessContast/Image\"\n\n  double\n    alpha,\n    coefficients[2],\n    intercept,\n    slope;\n\n  MagickBooleanType\n    status;\n\n  /*\n    Compute slope and intercept.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  alpha=contrast;\n  slope=tan((double) (MagickPI*(alpha/100.0+1.0)/4.0));\n  if (slope < 0.0)\n    slope=0.0;\n  intercept=brightness/100.0+((100-brightness)/200.0)*(1.0-slope);\n  coefficients[0]=slope;\n  coefficients[1]=intercept;\n  status=FunctionImage(image,PolynomialFunction,2,coefficients,exception);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C L A H E I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  CLAHEImage() is a variant of adaptive histogram equalization in which the\n%  contrast amplification is limited, so as to reduce this problem of noise\n%  amplification.\n%\n%  Adapted from implementation by Karel Zuiderveld, karel@cv.ruu.nl in\n%  \"Graphics Gems IV\", Academic Press, 1994.\n%\n%  The format of the CLAHEImage method is:\n%\n%      MagickBooleanType CLAHEImage(Image *image,const size_t width,\n%        const size_t height,const size_t number_bins,const double clip_limit,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o width: the width of the tile divisions to use in horizontal direction.\n%\n%    o height: the height of the tile divisions to use in vertical direction.\n%\n%    o number_bins: number of bins for histogram (\"dynamic range\").\n%\n%    o clip_limit: contrast limit for localised changes in contrast. A limit\n%      less than 1 results in standard non-contrast limited AHE.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\ntypedef struct _RangeInfo\n{\n  unsigned short\n    min,\n    max;\n} RangeInfo;\n\nstatic void ClipCLAHEHistogram(const double clip_limit,const size_t number_bins,\n  size_t *histogram)\n{\n#define NumberCLAHEGrays  (65536)\n\n  register ssize_t\n    i;\n\n  size_t\n    cumulative_excess,\n    previous_excess,\n    step;\n\n  ssize_t\n    excess;\n\n  /*\n    Compute total number of excess pixels.\n  */\n  cumulative_excess=0;\n  for (i=0; i < (ssize_t) number_bins; i++)\n  {\n    excess=(ssize_t) histogram[i]-(ssize_t) clip_limit;\n    if (excess > 0)\n      cumulative_excess+=excess;\n  }\n  /*\n    Clip histogram and redistribute excess pixels across all bins.\n  */\n  step=cumulative_excess/number_bins;\n  excess=(ssize_t) (clip_limit-step);\n  for (i=0; i < (ssize_t) number_bins; i++)\n  {\n    if ((double) histogram[i] > clip_limit)\n      histogram[i]=(size_t) clip_limit;\n    else\n      if ((ssize_t) histogram[i] > excess)\n        {\n          cumulative_excess-=histogram[i]-excess;\n          histogram[i]=(size_t) clip_limit;\n        }\n      else\n        {\n          cumulative_excess-=step;\n          histogram[i]+=step;\n        }\n  }\n  /*\n    Redistribute remaining excess.\n  */\n  do\n  {\n    register size_t\n      *p;\n\n    size_t\n      *q;\n\n    previous_excess=cumulative_excess;\n    p=histogram;\n    q=histogram+number_bins;\n    while ((cumulative_excess != 0) && (p < q))\n    {\n      step=number_bins/cumulative_excess;\n      if (step < 1)\n        step=1;\n      for (p=histogram; (p < q) && (cumulative_excess != 0); p+=step)\n        if ((double) *p < clip_limit)\n          {\n            (*p)++;\n            cumulative_excess--;\n          }\n      p++;\n    }\n  } while ((cumulative_excess != 0) && (cumulative_excess < previous_excess));\n}\n\nstatic void GenerateCLAHEHistogram(const RectangleInfo *clahe_info,\n  const RectangleInfo *tile_info,const size_t number_bins,\n  const unsigned short *lut,const unsigned short *pixels,size_t *histogram)\n{\n  register const unsigned short\n    *p;\n\n  register ssize_t\n    i;\n\n  /*\n    Classify the pixels into a gray histogram.\n  */\n  for (i=0; i < (ssize_t) number_bins; i++)\n    histogram[i]=0L;\n  p=pixels;\n  for (i=0; i < (ssize_t) tile_info->height; i++)\n  {\n    const unsigned short\n      *q;\n\n    q=p+tile_info->width;\n    while (p < q)\n      histogram[lut[*p++]]++;\n    q+=clahe_info->width;\n    p=q-tile_info->width;\n  }\n}\n\nstatic void InterpolateCLAHE(const RectangleInfo *clahe_info,const size_t *Q12,\n  const size_t *Q22,const size_t *Q11,const size_t *Q21,\n  const RectangleInfo *tile,const unsigned short *lut,unsigned short *pixels)\n{\n  ssize_t\n    y;\n\n  unsigned short\n    intensity;\n\n  /*\n    Bilinear interpolate four tiles to eliminate boundary artifacts.\n  */\n  for (y=(ssize_t) tile->height; y > 0; y--)\n  {\n    register ssize_t\n      x;\n\n    for (x=(ssize_t) tile->width; x > 0; x--)\n    {\n      intensity=lut[*pixels];\n      *pixels++=(unsigned short ) (PerceptibleReciprocal((double) tile->width*\n        tile->height)*(y*(x*Q12[intensity]+(tile->width-x)*Q22[intensity])+\n        (tile->height-y)*(x*Q11[intensity]+(tile->width-x)*Q21[intensity])));\n    }\n    pixels+=(clahe_info->width-tile->width);\n  }\n}\n\nstatic void GenerateCLAHELut(const RangeInfo *range_info,\n  const size_t number_bins,unsigned short *lut)\n{\n  ssize_t\n    i;\n\n  unsigned short\n    delta;\n\n  /*\n    Scale input image [intensity min,max] to [0,number_bins-1].\n  */\n  delta=(unsigned short) ((range_info->max-range_info->min)/number_bins+1);\n  for (i=(ssize_t) range_info->min; i <= (ssize_t) range_info->max; i++)\n    lut[i]=(unsigned short) ((i-range_info->min)/delta);\n}\n\nstatic void MapCLAHEHistogram(const RangeInfo *range_info,\n  const size_t number_bins,const size_t number_pixels,size_t *histogram)\n{\n  double\n    scale,\n    sum;\n\n  register ssize_t\n    i;\n\n  /*\n    Rescale histogram to range [min-intensity .. max-intensity].\n  */\n  scale=(double) (range_info->max-range_info->min)/number_pixels;\n  sum=0.0;\n  for (i=0; i < (ssize_t) number_bins; i++)\n  {\n    sum+=histogram[i];\n    histogram[i]=(size_t) (range_info->min+scale*sum);\n    if (histogram[i] > range_info->max)\n      histogram[i]=range_info->max;\n  }\n}\n\nstatic MagickBooleanType CLAHE(const RectangleInfo *clahe_info,\n  const RectangleInfo *tile_info,const RangeInfo *range_info,\n  const size_t number_bins,const double clip_limit,unsigned short *pixels)\n{\n  MemoryInfo\n    *tile_cache;\n\n  register unsigned short\n    *p;\n\n  size_t\n    limit,\n    *tiles;\n\n  ssize_t\n    y;\n\n  unsigned short\n    lut[NumberCLAHEGrays];\n\n  /*\n    Constrast limited adapted histogram equalization.\n  */\n  if (clip_limit == 1.0)\n    return(MagickTrue);\n  tile_cache=AcquireVirtualMemory((size_t) clahe_info->x*clahe_info->y,\n    number_bins*sizeof(*tiles));\n  if (tile_cache == (MemoryInfo *) NULL)\n    return(MagickFalse);\n  tiles=(size_t *) GetVirtualMemoryBlob(tile_cache);\n  limit=(size_t) (clip_limit*(tile_info->width*tile_info->height)/number_bins);\n  if (limit < 1UL)\n    limit=1UL;\n  /*\n    Generate greylevel mappings for each tile.\n  */\n  GenerateCLAHELut(range_info,number_bins,lut);\n  p=pixels;\n  for (y=0; y < (ssize_t) clahe_info->y; y++)\n  {\n    register ssize_t\n      x;\n\n    for (x=0; x < (ssize_t) clahe_info->x; x++)\n    {\n      size_t\n        *histogram;\n\n      histogram=tiles+(number_bins*(y*clahe_info->x+x));\n      GenerateCLAHEHistogram(clahe_info,tile_info,number_bins,lut,p,histogram);\n      ClipCLAHEHistogram((double) limit,number_bins,histogram);\n      MapCLAHEHistogram(range_info,number_bins,tile_info->width*\n        tile_info->height,histogram);\n      p+=tile_info->width;\n    }\n    p+=clahe_info->width*(tile_info->height-1);\n  }\n  /*\n    Interpolate greylevel mappings to get CLAHE image.\n  */\n  p=pixels;\n  for (y=0; y <= (ssize_t) clahe_info->y; y++)\n  {\n    OffsetInfo\n      offset;\n\n    RectangleInfo\n      tile;\n\n    register ssize_t\n      x;\n\n    tile.height=tile_info->height;\n    tile.y=y-1;\n    offset.y=tile.y+1;\n    if (y == 0)\n      {\n        /*\n          Top row.\n        */\n        tile.height=tile_info->height >> 1;\n        tile.y=0;\n        offset.y=0;\n      }\n    else\n      if (y == (ssize_t) clahe_info->y)\n        {\n          /*\n            Bottom row.\n          */\n          tile.height=(tile_info->height+1) >> 1;\n          tile.y=clahe_info->y-1;\n          offset.y=tile.y;\n        }\n    for (x=0; x <= (ssize_t) clahe_info->x; x++)\n    {\n      tile.width=tile_info->width;\n      tile.x=x-1;\n      offset.x=tile.x+1;\n      if (x == 0)\n        {\n          /*\n            Left column.\n          */\n          tile.width=tile_info->width >> 1;\n          tile.x=0;\n          offset.x=0;\n        }\n      else\n        if (x == (ssize_t) clahe_info->x)\n          {\n            /*\n              Right column.\n            */\n            tile.width=(tile_info->width+1) >> 1;\n            tile.x=clahe_info->x-1;\n            offset.x=tile.x;\n          }\n      InterpolateCLAHE(clahe_info,\n        tiles+(number_bins*(tile.y*clahe_info->x+tile.x)),     /* Q12 */\n        tiles+(number_bins*(tile.y*clahe_info->x+offset.x)),   /* Q22 */\n        tiles+(number_bins*(offset.y*clahe_info->x+tile.x)),   /* Q11 */\n        tiles+(number_bins*(offset.y*clahe_info->x+offset.x)), /* Q21 */\n        &tile,lut,p);\n      p+=tile.width;\n    }\n    p+=clahe_info->width*(tile.height-1);\n  }\n  tile_cache=RelinquishVirtualMemory(tile_cache);\n  return(MagickTrue);\n}\n\nMagickExport MagickBooleanType CLAHEImage(Image *image,const size_t width,\n  const size_t height,const size_t number_bins,const double clip_limit,\n  ExceptionInfo *exception)\n{\n#define CLAHEImageTag  \"CLAHE/Image\"\n\n  CacheView\n    *image_view;\n\n  ColorspaceType\n    colorspace;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  MemoryInfo\n    *pixel_cache;\n\n  RangeInfo\n    range_info;\n\n  RectangleInfo\n    clahe_info,\n    tile_info;\n\n  size_t\n    n;\n\n  ssize_t\n    y;\n\n  unsigned short\n    *pixels;\n\n  /*\n    Configure CLAHE parameters.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  range_info.min=0;\n  range_info.max=NumberCLAHEGrays-1;\n  tile_info.width=width;\n  if (tile_info.width == 0)\n    tile_info.width=image->columns >> 3;\n  tile_info.height=height;\n  if (tile_info.height == 0)\n    tile_info.height=image->rows >> 3;\n  tile_info.x=0;\n  if ((image->columns % tile_info.width) != 0)\n    tile_info.x=(ssize_t) tile_info.width-(image->columns % tile_info.width);\n  tile_info.y=0;\n  if ((image->rows % tile_info.height) != 0)\n    tile_info.y=(ssize_t) tile_info.height-(image->rows % tile_info.height);\n  clahe_info.width=image->columns+tile_info.x;\n  clahe_info.height=image->rows+tile_info.y;\n  clahe_info.x=(ssize_t) clahe_info.width/tile_info.width;\n  clahe_info.y=(ssize_t) clahe_info.height/tile_info.height;\n  pixel_cache=AcquireVirtualMemory(clahe_info.width,clahe_info.height*\n    sizeof(*pixels));\n  if (pixel_cache == (MemoryInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  pixels=(unsigned short *) GetVirtualMemoryBlob(pixel_cache);\n  colorspace=image->colorspace;\n  if (TransformImageColorspace(image,LabColorspace,exception) == MagickFalse)\n    {\n      pixel_cache=RelinquishVirtualMemory(pixel_cache);\n      return(MagickFalse);\n    }\n  /*\n    Initialize CLAHE pixels.\n  */\n  image_view=AcquireVirtualCacheView(image,exception);\n  progress=0;\n  status=MagickTrue;\n  n=0;\n  for (y=0; y < (ssize_t) clahe_info.height; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,-(tile_info.x >> 1),y-\n      (tile_info.y >> 1),clahe_info.width,1,exception);\n    if (p == (const Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) clahe_info.width; x++)\n    {\n      pixels[n++]=ScaleQuantumToShort(p[0]);\n      p+=GetPixelChannels(image);\n    }\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,CLAHEImageTag,progress,2*\n          GetPixelChannels(image));\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  status=CLAHE(&clahe_info,&tile_info,&range_info,number_bins == 0 ?\n    (size_t) 128 : MagickMin(number_bins,256),clip_limit,pixels);\n  if (status == MagickFalse)\n    (void) ThrowMagickException(exception,GetMagickModule(),\n      ResourceLimitError,\"MemoryAllocationFailed\",\"`%s'\",image->filename);\n  /*\n    Push CLAHE pixels to CLAHE image.\n  */\n  image_view=AcquireAuthenticCacheView(image,exception);\n  n=clahe_info.width*(tile_info.y >> 1);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    n+=tile_info.x >> 1;\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      q[0]=ScaleShortToQuantum(pixels[n++]);\n      q+=GetPixelChannels(image);\n    }\n    n+=(clahe_info.width-image->columns-(tile_info.x >> 1));\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,CLAHEImageTag,progress,2*\n          GetPixelChannels(image));\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  pixel_cache=RelinquishVirtualMemory(pixel_cache);\n  if (TransformImageColorspace(image,colorspace,exception) == MagickFalse)\n    status=MagickFalse;\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C l u t I m a g e                                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ClutImage() replaces each color value in the given image, by using it as an\n%  index to lookup a replacement color value in a Color Look UP Table in the\n%  form of an image.  The values are extracted along a diagonal of the CLUT\n%  image so either a horizontal or vertial gradient image can be used.\n%\n%  Typically this is used to either re-color a gray-scale image according to a\n%  color gradient in the CLUT image, or to perform a freeform histogram\n%  (level) adjustment according to the (typically gray-scale) gradient in the\n%  CLUT image.\n%\n%  When the 'channel' mask includes the matte/alpha transparency channel but\n%  one image has no such channel it is assumed that that image is a simple\n%  gray-scale image that will effect the alpha channel values, either for\n%  gray-scale coloring (with transparent or semi-transparent colors), or\n%  a histogram adjustment of existing alpha channel values.   If both images\n%  have matte channels, direct and normal indexing is applied, which is rarely\n%  used.\n%\n%  The format of the ClutImage method is:\n%\n%      MagickBooleanType ClutImage(Image *image,Image *clut_image,\n%        const PixelInterpolateMethod method,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image, which is replaced by indexed CLUT values\n%\n%    o clut_image: the color lookup table image for replacement color values.\n%\n%    o method: the pixel interpolation method.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ClutImage(Image *image,const Image *clut_image,\n  const PixelInterpolateMethod method,ExceptionInfo *exception)\n{\n#define ClutImageTag  \"Clut/Image\"\n\n  CacheView\n    *clut_view,\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  PixelInfo\n    *clut_map;\n\n  register ssize_t\n    i;\n\n  ssize_t adjust,\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(clut_image != (Image *) NULL);\n  assert(clut_image->signature == MagickCoreSignature);\n  if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)\n    return(MagickFalse);\n  if ((IsGrayColorspace(image->colorspace) != MagickFalse) &&\n      (IsGrayColorspace(clut_image->colorspace) == MagickFalse))\n    (void) SetImageColorspace(image,sRGBColorspace,exception);\n  clut_map=(PixelInfo *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*clut_map));\n  if (clut_map == (PixelInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  /*\n    Clut image.\n  */\n  status=MagickTrue;\n  progress=0;\n  adjust=(ssize_t) (clut_image->interpolate == IntegerInterpolatePixel ? 0 : 1);\n  clut_view=AcquireVirtualCacheView(clut_image,exception);\n  for (i=0; i <= (ssize_t) MaxMap; i++)\n  {\n    GetPixelInfo(clut_image,clut_map+i);\n    status=InterpolatePixelInfo(clut_image,clut_view,method,\n      (double) i*(clut_image->columns-adjust)/MaxMap,(double) i*\n      (clut_image->rows-adjust)/MaxMap,clut_map+i,exception);\n    if (status == MagickFalse)\n      break;\n  }\n  clut_view=DestroyCacheView(clut_view);\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    PixelInfo\n      pixel;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    GetPixelInfo(image,&pixel);\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      PixelTrait\n        traits;\n\n      GetPixelInfoPixel(image,q,&pixel);\n      traits=GetPixelChannelTraits(image,RedPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.red=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.red))].red;\n      traits=GetPixelChannelTraits(image,GreenPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.green=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.green))].green;\n      traits=GetPixelChannelTraits(image,BluePixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.blue=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.blue))].blue;\n      traits=GetPixelChannelTraits(image,BlackPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.black=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.black))].black;\n      traits=GetPixelChannelTraits(image,AlphaPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.alpha=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.alpha))].alpha;\n      SetPixelViaPixelInfo(image,&pixel,q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ClutImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  clut_map=(PixelInfo *) RelinquishMagickMemory(clut_map);\n  if ((clut_image->alpha_trait != UndefinedPixelTrait) &&\n      ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0))\n    (void) SetImageAlphaChannel(image,ActivateAlphaChannel,exception);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C o l o r D e c i s i o n L i s t I m a g e                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ColorDecisionListImage() accepts a lightweight Color Correction Collection\n%  (CCC) file which solely contains one or more color corrections and applies\n%  the correction to the image.  Here is a sample CCC file:\n%\n%    <ColorCorrectionCollection xmlns=\"urn:ASC:CDL:v1.2\">\n%          <ColorCorrection id=\"cc03345\">\n%                <SOPNode>\n%                     <Slope> 0.9 1.2 0.5 </Slope>\n%                     <Offset> 0.4 -0.5 0.6 </Offset>\n%                     <Power> 1.0 0.8 1.5 </Power>\n%                </SOPNode>\n%                <SATNode>\n%                     <Saturation> 0.85 </Saturation>\n%                </SATNode>\n%          </ColorCorrection>\n%    </ColorCorrectionCollection>\n%\n%  which includes the slop, offset, and power for each of the RGB channels\n%  as well as the saturation.\n%\n%  The format of the ColorDecisionListImage method is:\n%\n%      MagickBooleanType ColorDecisionListImage(Image *image,\n%        const char *color_correction_collection,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o color_correction_collection: the color correction collection in XML.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ColorDecisionListImage(Image *image,\n  const char *color_correction_collection,ExceptionInfo *exception)\n{\n#define ColorDecisionListCorrectImageTag  \"ColorDecisionList/Image\"\n\n  typedef struct _Correction\n  {\n    double\n      slope,\n      offset,\n      power;\n  } Correction;\n\n  typedef struct _ColorCorrection\n  {\n    Correction\n      red,\n      green,\n      blue;\n\n    double\n      saturation;\n  } ColorCorrection;\n\n  CacheView\n    *image_view;\n\n  char\n    token[MagickPathExtent];\n\n  ColorCorrection\n    color_correction;\n\n  const char\n    *content,\n    *p;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  PixelInfo\n    *cdl_map;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  XMLTreeInfo\n    *cc,\n    *ccc,\n    *sat,\n    *sop;\n\n  /*\n    Allocate and initialize cdl maps.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (color_correction_collection == (const char *) NULL)\n    return(MagickFalse);\n  ccc=NewXMLTree((const char *) color_correction_collection,exception);\n  if (ccc == (XMLTreeInfo *) NULL)\n    return(MagickFalse);\n  cc=GetXMLTreeChild(ccc,\"ColorCorrection\");\n  if (cc == (XMLTreeInfo *) NULL)\n    {\n      ccc=DestroyXMLTree(ccc);\n      return(MagickFalse);\n    }\n  color_correction.red.slope=1.0;\n  color_correction.red.offset=0.0;\n  color_correction.red.power=1.0;\n  color_correction.green.slope=1.0;\n  color_correction.green.offset=0.0;\n  color_correction.green.power=1.0;\n  color_correction.blue.slope=1.0;\n  color_correction.blue.offset=0.0;\n  color_correction.blue.power=1.0;\n  color_correction.saturation=0.0;\n  sop=GetXMLTreeChild(cc,\"SOPNode\");\n  if (sop != (XMLTreeInfo *) NULL)\n    {\n      XMLTreeInfo\n        *offset,\n        *power,\n        *slope;\n\n      slope=GetXMLTreeChild(sop,\"Slope\");\n      if (slope != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(slope);\n          p=(const char *) content;\n          for (i=0; (*p != '\\0') && (i < 3); i++)\n          {\n            GetNextToken(p,&p,MagickPathExtent,token);\n            if (*token == ',')\n              GetNextToken(p,&p,MagickPathExtent,token);\n            switch (i)\n            {\n              case 0:\n              {\n                color_correction.red.slope=StringToDouble(token,(char **) NULL);\n                break;\n              }\n              case 1:\n              {\n                color_correction.green.slope=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 2:\n              {\n                color_correction.blue.slope=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n            }\n          }\n        }\n      offset=GetXMLTreeChild(sop,\"Offset\");\n      if (offset != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(offset);\n          p=(const char *) content;\n          for (i=0; (*p != '\\0') && (i < 3); i++)\n          {\n            GetNextToken(p,&p,MagickPathExtent,token);\n            if (*token == ',')\n              GetNextToken(p,&p,MagickPathExtent,token);\n            switch (i)\n            {\n              case 0:\n              {\n                color_correction.red.offset=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 1:\n              {\n                color_correction.green.offset=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 2:\n              {\n                color_correction.blue.offset=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n            }\n          }\n        }\n      power=GetXMLTreeChild(sop,\"Power\");\n      if (power != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(power);\n          p=(const char *) content;\n          for (i=0; (*p != '\\0') && (i < 3); i++)\n          {\n            GetNextToken(p,&p,MagickPathExtent,token);\n            if (*token == ',')\n              GetNextToken(p,&p,MagickPathExtent,token);\n            switch (i)\n            {\n              case 0:\n              {\n                color_correction.red.power=StringToDouble(token,(char **) NULL);\n                break;\n              }\n              case 1:\n              {\n                color_correction.green.power=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 2:\n              {\n                color_correction.blue.power=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n            }\n          }\n        }\n    }\n  sat=GetXMLTreeChild(cc,\"SATNode\");\n  if (sat != (XMLTreeInfo *) NULL)\n    {\n      XMLTreeInfo\n        *saturation;\n\n      saturation=GetXMLTreeChild(sat,\"Saturation\");\n      if (saturation != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(saturation);\n          p=(const char *) content;\n          GetNextToken(p,&p,MagickPathExtent,token);\n          color_correction.saturation=StringToDouble(token,(char **) NULL);\n        }\n    }\n  ccc=DestroyXMLTree(ccc);\n  if (image->debug != MagickFalse)\n    {\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  Color Correction Collection:\");\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.red.slope: %g\",color_correction.red.slope);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.red.offset: %g\",color_correction.red.offset);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.red.power: %g\",color_correction.red.power);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.green.slope: %g\",color_correction.green.slope);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.green.offset: %g\",color_correction.green.offset);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.green.power: %g\",color_correction.green.power);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.blue.slope: %g\",color_correction.blue.slope);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.blue.offset: %g\",color_correction.blue.offset);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.blue.power: %g\",color_correction.blue.power);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.saturation: %g\",color_correction.saturation);\n    }\n  cdl_map=(PixelInfo *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*cdl_map));\n  if (cdl_map == (PixelInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  for (i=0; i <= (ssize_t) MaxMap; i++)\n  {\n    cdl_map[i].red=(double) ScaleMapToQuantum((double)\n      (MaxMap*(pow(color_correction.red.slope*i/MaxMap+\n      color_correction.red.offset,color_correction.red.power))));\n    cdl_map[i].green=(double) ScaleMapToQuantum((double)\n      (MaxMap*(pow(color_correction.green.slope*i/MaxMap+\n      color_correction.green.offset,color_correction.green.power))));\n    cdl_map[i].blue=(double) ScaleMapToQuantum((double)\n      (MaxMap*(pow(color_correction.blue.slope*i/MaxMap+\n      color_correction.blue.offset,color_correction.blue.power))));\n  }\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Apply transfer function to colormap.\n      */\n      double\n        luma;\n\n      luma=0.21267f*image->colormap[i].red+0.71526*image->colormap[i].green+\n        0.07217f*image->colormap[i].blue;\n      image->colormap[i].red=luma+color_correction.saturation*cdl_map[\n        ScaleQuantumToMap(ClampToQuantum(image->colormap[i].red))].red-luma;\n      image->colormap[i].green=luma+color_correction.saturation*cdl_map[\n        ScaleQuantumToMap(ClampToQuantum(image->colormap[i].green))].green-luma;\n      image->colormap[i].blue=luma+color_correction.saturation*cdl_map[\n        ScaleQuantumToMap(ClampToQuantum(image->colormap[i].blue))].blue-luma;\n    }\n  /*\n    Apply transfer function to image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    double\n      luma;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      luma=0.21267f*GetPixelRed(image,q)+0.71526*GetPixelGreen(image,q)+\n        0.07217f*GetPixelBlue(image,q);\n      SetPixelRed(image,ClampToQuantum(luma+color_correction.saturation*\n        (cdl_map[ScaleQuantumToMap(GetPixelRed(image,q))].red-luma)),q);\n      SetPixelGreen(image,ClampToQuantum(luma+color_correction.saturation*\n        (cdl_map[ScaleQuantumToMap(GetPixelGreen(image,q))].green-luma)),q);\n      SetPixelBlue(image,ClampToQuantum(luma+color_correction.saturation*\n        (cdl_map[ScaleQuantumToMap(GetPixelBlue(image,q))].blue-luma)),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ColorDecisionListCorrectImageTag,\n          progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  cdl_map=(PixelInfo *) RelinquishMagickMemory(cdl_map);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C o n t r a s t I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ContrastImage() enhances the intensity differences between the lighter and\n%  darker elements of the image.  Set sharpen to a MagickTrue to increase the\n%  image contrast otherwise the contrast is reduced.\n%\n%  The format of the ContrastImage method is:\n%\n%      MagickBooleanType ContrastImage(Image *image,\n%        const MagickBooleanType sharpen,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o sharpen: Increase or decrease image contrast.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic void Contrast(const int sign,double *red,double *green,double *blue)\n{\n  double\n    brightness,\n    hue,\n    saturation;\n\n  /*\n    Enhance contrast: dark color become darker, light color become lighter.\n  */\n  assert(red != (double *) NULL);\n  assert(green != (double *) NULL);\n  assert(blue != (double *) NULL);\n  hue=0.0;\n  saturation=0.0;\n  brightness=0.0;\n  ConvertRGBToHSB(*red,*green,*blue,&hue,&saturation,&brightness);\n  brightness+=0.5*sign*(0.5*(sin((double) (MagickPI*(brightness-0.5)))+1.0)-\n    brightness);\n  if (brightness > 1.0)\n    brightness=1.0;\n  else\n    if (brightness < 0.0)\n      brightness=0.0;\n  ConvertHSBToRGB(hue,saturation,brightness,red,green,blue);\n}\n\nMagickExport MagickBooleanType ContrastImage(Image *image,\n  const MagickBooleanType sharpen,ExceptionInfo *exception)\n{\n#define ContrastImageTag  \"Contrast/Image\"\n\n  CacheView\n    *image_view;\n\n  int\n    sign;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateContrastImage(image,sharpen,exception) != MagickFalse)\n    return(MagickTrue);\n#endif\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  sign=sharpen != MagickFalse ? 1 : -1;\n  if (image->storage_class == PseudoClass)\n    {\n      /*\n        Contrast enhance colormap.\n      */\n      for (i=0; i < (ssize_t) image->colors; i++)\n      {\n        double\n          blue,\n          green,\n          red;\n\n        red=(double) image->colormap[i].red;\n        green=(double) image->colormap[i].green;\n        blue=(double) image->colormap[i].blue;\n        Contrast(sign,&red,&green,&blue);\n        image->colormap[i].red=(MagickRealType) red;\n        image->colormap[i].green=(MagickRealType) green;\n        image->colormap[i].blue=(MagickRealType) blue;\n      }\n    }\n  /*\n    Contrast enhance image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    double\n      blue,\n      green,\n      red;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      red=(double) GetPixelRed(image,q);\n      green=(double) GetPixelGreen(image,q);\n      blue=(double) GetPixelBlue(image,q);\n      Contrast(sign,&red,&green,&blue);\n      SetPixelRed(image,ClampToQuantum(red),q);\n      SetPixelGreen(image,ClampToQuantum(green),q);\n      SetPixelBlue(image,ClampToQuantum(blue),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ContrastImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C o n t r a s t S t r e t c h I m a g e                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ContrastStretchImage() is a simple image enhancement technique that attempts\n%  to improve the contrast in an image by 'stretching' the range of intensity\n%  values it contains to span a desired range of values. It differs from the\n%  more sophisticated histogram equalization in that it can only apply a\n%  linear scaling function to the image pixel values.  As a result the\n%  'enhancement' is less harsh.\n%\n%  The format of the ContrastStretchImage method is:\n%\n%      MagickBooleanType ContrastStretchImage(Image *image,\n%        const char *levels,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: the black point.\n%\n%    o white_point: the white point.\n%\n%    o levels: Specify the levels where the black and white points have the\n%      range of 0 to number-of-pixels (e.g. 1%, 10x90%, etc.).\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ContrastStretchImage(Image *image,\n  const double black_point,const double white_point,ExceptionInfo *exception)\n{\n#define MaxRange(color)  ((double) ScaleQuantumToMap((Quantum) (color)))\n#define ContrastStretchImageTag  \"ContrastStretch/Image\"\n\n  CacheView\n    *image_view;\n\n  double\n    *black,\n    *histogram,\n    *stretch_map,\n    *white;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate histogram and stretch map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (SetImageGray(image,exception) != MagickFalse)\n    (void) SetImageColorspace(image,GRAYColorspace,exception);\n  black=(double *) AcquireQuantumMemory(MaxPixelChannels,sizeof(*black));\n  white=(double *) AcquireQuantumMemory(MaxPixelChannels,sizeof(*white));\n  histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*histogram));\n  stretch_map=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*stretch_map));\n  if ((black == (double *) NULL) || (white == (double *) NULL) ||\n      (histogram == (double *) NULL) || (stretch_map == (double *) NULL))\n    {\n      if (stretch_map != (double *) NULL)\n        stretch_map=(double *) RelinquishMagickMemory(stretch_map);\n      if (histogram != (double *) NULL)\n        histogram=(double *) RelinquishMagickMemory(histogram);\n      if (white != (double *) NULL)\n        white=(double *) RelinquishMagickMemory(white);\n      if (black != (double *) NULL)\n        black=(double *) RelinquishMagickMemory(black);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        image->filename);\n    }\n  /*\n    Form histogram.\n  */\n  status=MagickTrue;\n  (void) memset(histogram,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*histogram));\n  image_view=AcquireVirtualCacheView(image,exception);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);\n    if (p == (const Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        pixel;\n\n      pixel=GetPixelIntensity(image,p);\n      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n      {\n        if (image->channel_mask != DefaultChannels)\n          pixel=(double) p[i];\n        histogram[GetPixelChannels(image)*ScaleQuantumToMap(\n          ClampToQuantum(pixel))+i]++;\n      }\n      p+=GetPixelChannels(image);\n    }\n  }\n  image_view=DestroyCacheView(image_view);\n  /*\n    Find the histogram boundaries by locating the black/white levels.\n  */\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    double\n      intensity;\n\n    register ssize_t\n      j;\n\n    black[i]=0.0;\n    white[i]=MaxRange(QuantumRange);\n    intensity=0.0;\n    for (j=0; j <= (ssize_t) MaxMap; j++)\n    {\n      intensity+=histogram[GetPixelChannels(image)*j+i];\n      if (intensity > black_point)\n        break;\n    }\n    black[i]=(double) j;\n    intensity=0.0;\n    for (j=(ssize_t) MaxMap; j != 0; j--)\n    {\n      intensity+=histogram[GetPixelChannels(image)*j+i];\n      if (intensity > ((double) image->columns*image->rows-white_point))\n        break;\n    }\n    white[i]=(double) j;\n  }\n  histogram=(double *) RelinquishMagickMemory(histogram);\n  /*\n    Stretch the histogram to create the stretched image mapping.\n  */\n  (void) memset(stretch_map,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*stretch_map));\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    register ssize_t\n      j;\n\n    for (j=0; j <= (ssize_t) MaxMap; j++)\n    {\n      double\n        gamma;\n\n      gamma=PerceptibleReciprocal(white[i]-black[i]);\n      if (j < (ssize_t) black[i])\n        stretch_map[GetPixelChannels(image)*j+i]=0.0;\n      else\n        if (j > (ssize_t) white[i])\n          stretch_map[GetPixelChannels(image)*j+i]=(double) QuantumRange;\n        else\n          if (black[i] != white[i])\n            stretch_map[GetPixelChannels(image)*j+i]=(double) ScaleMapToQuantum(\n              (double) (MaxMap*gamma*(j-black[i])));\n    }\n  }\n  if (image->storage_class == PseudoClass)\n    {\n      register ssize_t\n        j;\n\n      /*\n        Stretch-contrast colormap.\n      */\n      for (j=0; j < (ssize_t) image->colors; j++)\n      {\n        if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,RedPixelChannel);\n            image->colormap[j].red=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].red))+i];\n          }\n        if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,GreenPixelChannel);\n            image->colormap[j].green=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].green))+i];\n          }\n        if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,BluePixelChannel);\n            image->colormap[j].blue=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].blue))+i];\n          }\n        if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,AlphaPixelChannel);\n            image->colormap[j].alpha=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].alpha))+i];\n          }\n      }\n    }\n  /*\n    Stretch-contrast image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        if (black[j] == white[j])\n          continue;\n        q[j]=ClampToQuantum(stretch_map[GetPixelChannels(image)*\n          ScaleQuantumToMap(q[j])+j]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ContrastStretchImageTag,progress,\n          image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  stretch_map=(double *) RelinquishMagickMemory(stretch_map);\n  white=(double *) RelinquishMagickMemory(white);\n  black=(double *) RelinquishMagickMemory(black);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     E n h a n c e I m a g e                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EnhanceImage() applies a digital filter that improves the quality of a\n%  noisy image.\n%\n%  The format of the EnhanceImage method is:\n%\n%      Image *EnhanceImage(const Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport Image *EnhanceImage(const Image *image,ExceptionInfo *exception)\n{\n#define EnhanceImageTag  \"Enhance/Image\"\n#define EnhancePixel(weight) \\\n  mean=QuantumScale*((double) GetPixelRed(image,r)+pixel.red)/2.0; \\\n  distance=QuantumScale*((double) GetPixelRed(image,r)-pixel.red); \\\n  distance_squared=(4.0+mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelGreen(image,r)+pixel.green)/2.0; \\\n  distance=QuantumScale*((double) GetPixelGreen(image,r)-pixel.green); \\\n  distance_squared+=(7.0-mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelBlue(image,r)+pixel.blue)/2.0; \\\n  distance=QuantumScale*((double) GetPixelBlue(image,r)-pixel.blue); \\\n  distance_squared+=(5.0-mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelBlack(image,r)+pixel.black)/2.0; \\\n  distance=QuantumScale*((double) GetPixelBlack(image,r)-pixel.black); \\\n  distance_squared+=(5.0-mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelAlpha(image,r)+pixel.alpha)/2.0; \\\n  distance=QuantumScale*((double) GetPixelAlpha(image,r)-pixel.alpha); \\\n  distance_squared+=(5.0-mean)*distance*distance; \\\n  if (distance_squared < 0.069) \\\n    { \\\n      aggregate.red+=(weight)*GetPixelRed(image,r); \\\n      aggregate.green+=(weight)*GetPixelGreen(image,r); \\\n      aggregate.blue+=(weight)*GetPixelBlue(image,r); \\\n      aggregate.black+=(weight)*GetPixelBlack(image,r); \\\n      aggregate.alpha+=(weight)*GetPixelAlpha(image,r); \\\n      total_weight+=(weight); \\\n    } \\\n  r+=GetPixelChannels(image);\n\n  CacheView\n    *enhance_view,\n    *image_view;\n\n  Image\n    *enhance_image;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  ssize_t\n    y;\n\n  /*\n    Initialize enhanced image attributes.\n  */\n  assert(image != (const Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  enhance_image=CloneImage(image,0,0,MagickTrue,\n    exception);\n  if (enhance_image == (Image *) NULL)\n    return((Image *) NULL);\n  if (SetImageStorageClass(enhance_image,DirectClass,exception) == MagickFalse)\n    {\n      enhance_image=DestroyImage(enhance_image);\n      return((Image *) NULL);\n    }\n  /*\n    Enhance image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireVirtualCacheView(image,exception);\n  enhance_view=AcquireAuthenticCacheView(enhance_image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,enhance_image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    PixelInfo\n      pixel;\n\n    register const Quantum\n      *magick_restrict p;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    ssize_t\n      center;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,-2,y-2,image->columns+4,5,exception);\n    q=QueueCacheViewAuthenticPixels(enhance_view,0,y,enhance_image->columns,1,\n      exception);\n    if ((p == (const Quantum *) NULL) || (q == (Quantum *) NULL))\n      {\n        status=MagickFalse;\n        continue;\n      }\n    center=(ssize_t) GetPixelChannels(image)*(2*(image->columns+4)+2);\n    GetPixelInfo(image,&pixel);\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        distance,\n        distance_squared,\n        mean,\n        total_weight;\n\n      PixelInfo\n        aggregate;\n\n      register const Quantum\n        *magick_restrict r;\n\n      GetPixelInfo(image,&aggregate);\n      total_weight=0.0;\n      GetPixelInfoPixel(image,p+center,&pixel);\n      r=p;\n      EnhancePixel(5.0); EnhancePixel(8.0); EnhancePixel(10.0);\n        EnhancePixel(8.0); EnhancePixel(5.0);\n      r=p+GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(8.0); EnhancePixel(20.0); EnhancePixel(40.0);\n        EnhancePixel(20.0); EnhancePixel(8.0);\n      r=p+2*GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(10.0); EnhancePixel(40.0); EnhancePixel(80.0);\n        EnhancePixel(40.0); EnhancePixel(10.0);\n      r=p+3*GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(8.0); EnhancePixel(20.0); EnhancePixel(40.0);\n        EnhancePixel(20.0); EnhancePixel(8.0);\n      r=p+4*GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(5.0); EnhancePixel(8.0); EnhancePixel(10.0);\n        EnhancePixel(8.0); EnhancePixel(5.0);\n      if (total_weight > MagickEpsilon)\n        {\n          pixel.red=((aggregate.red+total_weight/2.0)/total_weight);\n          pixel.green=((aggregate.green+total_weight/2.0)/total_weight);\n          pixel.blue=((aggregate.blue+total_weight/2.0)/total_weight);\n          pixel.black=((aggregate.black+total_weight/2.0)/total_weight);\n          pixel.alpha=((aggregate.alpha+total_weight/2.0)/total_weight);\n        }\n      SetPixelViaPixelInfo(image,&pixel,q);\n      p+=GetPixelChannels(image);\n      q+=GetPixelChannels(enhance_image);\n    }\n    if (SyncCacheViewAuthenticPixels(enhance_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,EnhanceImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  enhance_view=DestroyCacheView(enhance_view);\n  image_view=DestroyCacheView(image_view);\n  if (status == MagickFalse)\n    enhance_image=DestroyImage(enhance_image);\n  return(enhance_image);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     E q u a l i z e I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EqualizeImage() applies a histogram equalization to the image.\n%\n%  The format of the EqualizeImage method is:\n%\n%      MagickBooleanType EqualizeImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType EqualizeImage(Image *image,\n  ExceptionInfo *exception)\n{\n#define EqualizeImageTag  \"Equalize/Image\"\n\n  CacheView\n    *image_view;\n\n  double\n    black[CompositePixelChannel+1],\n    *equalize_map,\n    *histogram,\n    *map,\n    white[CompositePixelChannel+1];\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize histogram arrays.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateEqualizeImage(image,exception) != MagickFalse)\n    return(MagickTrue);\n#endif\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  equalize_map=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*equalize_map));\n  histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*histogram));\n  map=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*sizeof(*map));\n  if ((equalize_map == (double *) NULL) || (histogram == (double *) NULL) ||\n      (map == (double *) NULL))\n    {\n      if (map != (double *) NULL)\n        map=(double *) RelinquishMagickMemory(map);\n      if (histogram != (double *) NULL)\n        histogram=(double *) RelinquishMagickMemory(histogram);\n      if (equalize_map != (double *) NULL)\n        equalize_map=(double *) RelinquishMagickMemory(equalize_map);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        image->filename);\n    }\n  /*\n    Form histogram.\n  */\n  status=MagickTrue;\n  (void) memset(histogram,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*histogram));\n  image_view=AcquireVirtualCacheView(image,exception);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);\n    if (p == (const Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n      {\n        double\n          intensity;\n\n        intensity=(double) p[i];\n        if ((image->channel_mask & SyncChannels) != 0)\n          intensity=GetPixelIntensity(image,p);\n        histogram[GetPixelChannels(image)*ScaleQuantumToMap(\n          ClampToQuantum(intensity))+i]++;\n      }\n      p+=GetPixelChannels(image);\n    }\n  }\n  image_view=DestroyCacheView(image_view);\n  /*\n    Integrate the histogram to get the equalization map.\n  */\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    double\n      intensity;\n\n    register ssize_t\n      j;\n\n    intensity=0.0;\n    for (j=0; j <= (ssize_t) MaxMap; j++)\n    {\n      intensity+=histogram[GetPixelChannels(image)*j+i];\n      map[GetPixelChannels(image)*j+i]=intensity;\n    }\n  }\n  (void) memset(equalize_map,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*equalize_map));\n  (void) memset(black,0,sizeof(*black));\n  (void) memset(white,0,sizeof(*white));\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    register ssize_t\n      j;\n\n    black[i]=map[i];\n    white[i]=map[GetPixelChannels(image)*MaxMap+i];\n    if (black[i] != white[i])\n      for (j=0; j <= (ssize_t) MaxMap; j++)\n        equalize_map[GetPixelChannels(image)*j+i]=(double)\n          ScaleMapToQuantum((double) ((MaxMap*(map[\n          GetPixelChannels(image)*j+i]-black[i]))/(white[i]-black[i])));\n  }\n  histogram=(double *) RelinquishMagickMemory(histogram);\n  map=(double *) RelinquishMagickMemory(map);\n  if (image->storage_class == PseudoClass)\n    {\n      register ssize_t\n        j;\n\n      /*\n        Equalize colormap.\n      */\n      for (j=0; j < (ssize_t) image->colors; j++)\n      {\n        if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              RedPixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].red=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].red))+\n                channel];\n          }\n        if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              GreenPixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].green=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].green))+\n                channel];\n          }\n        if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              BluePixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].blue=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].blue))+\n                channel];\n          }\n        if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              AlphaPixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].alpha=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].alpha))+\n                channel];\n          }\n      }\n    }\n  /*\n    Equalize image.\n  */\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if (((traits & UpdatePixelTrait) == 0) || (black[j] == white[j]))\n          continue;\n        q[j]=ClampToQuantum(equalize_map[GetPixelChannels(image)*\n          ScaleQuantumToMap(q[j])+j]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,EqualizeImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  equalize_map=(double *) RelinquishMagickMemory(equalize_map);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     G a m m a I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GammaImage() gamma-corrects a particular image channel.  The same\n%  image viewed on different devices will have perceptual differences in the\n%  way the image's intensities are represented on the screen.  Specify\n%  individual gamma levels for the red, green, and blue channels, or adjust\n%  all three with the gamma parameter.  Values typically range from 0.8 to 2.3.\n%\n%  You can also reduce the influence of a particular channel with a gamma\n%  value of 0.\n%\n%  The format of the GammaImage method is:\n%\n%      MagickBooleanType GammaImage(Image *image,const double gamma,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o level: the image gamma as a string (e.g. 1.6,1.2,1.0).\n%\n%    o gamma: the image gamma.\n%\n*/\n\nstatic inline double gamma_pow(const double value,const double gamma)\n{\n  return(value < 0.0 ? value : pow(value,gamma));\n}\n\nMagickExport MagickBooleanType GammaImage(Image *image,const double gamma,\n  ExceptionInfo *exception)\n{\n#define GammaImageTag  \"Gamma/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  Quantum\n    *gamma_map;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize gamma maps.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (gamma == 1.0)\n    return(MagickTrue);\n  gamma_map=(Quantum *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*gamma_map));\n  if (gamma_map == (Quantum *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  (void) memset(gamma_map,0,(MaxMap+1)*sizeof(*gamma_map));\n  if (gamma != 0.0)\n    for (i=0; i <= (ssize_t) MaxMap; i++)\n      gamma_map[i]=ScaleMapToQuantum((double) (MaxMap*pow((double) i/\n        MaxMap,1.0/gamma)));\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Gamma-correct colormap.\n      */\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].red))];\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].green))];\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].blue))];\n      if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].alpha=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].alpha))];\n    }\n  /*\n    Gamma-correct image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=gamma_map[ScaleQuantumToMap(ClampToQuantum((MagickRealType)\n          q[j]))];\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,GammaImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  gamma_map=(Quantum *) RelinquishMagickMemory(gamma_map);\n  if (image->gamma != 0.0)\n    image->gamma*=gamma;\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     G r a y s c a l e I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GrayscaleImage() converts the image to grayscale.\n%\n%  The format of the GrayscaleImage method is:\n%\n%      MagickBooleanType GrayscaleImage(Image *image,\n%        const PixelIntensityMethod method ,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o method: the pixel intensity method.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType GrayscaleImage(Image *image,\n  const PixelIntensityMethod method,ExceptionInfo *exception)\n{\n#define GrayscaleImageTag  \"Grayscale/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    {\n      if (SyncImage(image,exception) == MagickFalse)\n        return(MagickFalse);\n      if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)\n        return(MagickFalse);\n    }\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateGrayscaleImage(image,method,exception) != MagickFalse)\n    {\n      image->intensity=method;\n      image->type=GrayscaleType;\n      if ((method == Rec601LuminancePixelIntensityMethod) ||\n          (method == Rec709LuminancePixelIntensityMethod))\n        return(SetImageColorspace(image,LinearGRAYColorspace,exception));\n      return(SetImageColorspace(image,GRAYColorspace,exception));\n    }\n#endif\n  /*\n    Grayscale image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      MagickRealType\n        blue,\n        green,\n        red,\n        intensity;\n\n      red=(MagickRealType) GetPixelRed(image,q);\n      green=(MagickRealType) GetPixelGreen(image,q);\n      blue=(MagickRealType) GetPixelBlue(image,q);\n      intensity=0.0;\n      switch (method)\n      {\n        case AveragePixelIntensityMethod:\n        {\n          intensity=(red+green+blue)/3.0;\n          break;\n        }\n        case BrightnessPixelIntensityMethod:\n        {\n          intensity=MagickMax(MagickMax(red,green),blue);\n          break;\n        }\n        case LightnessPixelIntensityMethod:\n        {\n          intensity=(MagickMin(MagickMin(red,green),blue)+\n            MagickMax(MagickMax(red,green),blue))/2.0;\n          break;\n        }\n        case MSPixelIntensityMethod:\n        {\n          intensity=(MagickRealType) (((double) red*red+green*green+\n            blue*blue)/3.0);\n          break;\n        }\n        case Rec601LumaPixelIntensityMethod:\n        {\n          if (image->colorspace == RGBColorspace)\n            {\n              red=EncodePixelGamma(red);\n              green=EncodePixelGamma(green);\n              blue=EncodePixelGamma(blue);\n            }\n          intensity=0.298839*red+0.586811*green+0.114350*blue;\n          break;\n        }\n        case Rec601LuminancePixelIntensityMethod:\n        {\n          if (image->colorspace == sRGBColorspace)\n            {\n              red=DecodePixelGamma(red);\n              green=DecodePixelGamma(green);\n              blue=DecodePixelGamma(blue);\n            }\n          intensity=0.298839*red+0.586811*green+0.114350*blue;\n          break;\n        }\n        case Rec709LumaPixelIntensityMethod:\n        default:\n        {\n          if (image->colorspace == RGBColorspace)\n            {\n              red=EncodePixelGamma(red);\n              green=EncodePixelGamma(green);\n              blue=EncodePixelGamma(blue);\n            }\n          intensity=0.212656*red+0.715158*green+0.072186*blue;\n          break;\n        }\n        case Rec709LuminancePixelIntensityMethod:\n        {\n          if (image->colorspace == sRGBColorspace)\n            {\n              red=DecodePixelGamma(red);\n              green=DecodePixelGamma(green);\n              blue=DecodePixelGamma(blue);\n            }\n          intensity=0.212656*red+0.715158*green+0.072186*blue;\n          break;\n        }\n        case RMSPixelIntensityMethod:\n        {\n          intensity=(MagickRealType) (sqrt((double) red*red+green*green+\n            blue*blue)/sqrt(3.0));\n          break;\n        }\n      }\n      SetPixelGray(image,ClampToQuantum(intensity),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,GrayscaleImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  image->intensity=method;\n  image->type=GrayscaleType;\n  if ((method == Rec601LuminancePixelIntensityMethod) ||\n      (method == Rec709LuminancePixelIntensityMethod))\n    return(SetImageColorspace(image,LinearGRAYColorspace,exception));\n  return(SetImageColorspace(image,GRAYColorspace,exception));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     H a l d C l u t I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  HaldClutImage() applies a Hald color lookup table to the image.  A Hald\n%  color lookup table is a 3-dimensional color cube mapped to 2 dimensions.\n%  Create it with the HALD coder.  You can apply any color transformation to\n%  the Hald image and then use this method to apply the transform to the\n%  image.\n%\n%  The format of the HaldClutImage method is:\n%\n%      MagickBooleanType HaldClutImage(Image *image,Image *hald_image,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image, which is replaced by indexed CLUT values\n%\n%    o hald_image: the color lookup table image for replacement color values.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType HaldClutImage(Image *image,\n  const Image *hald_image,ExceptionInfo *exception)\n{\n#define HaldClutImageTag  \"Clut/Image\"\n\n  typedef struct _HaldInfo\n  {\n    double\n      x,\n      y,\n      z;\n  } HaldInfo;\n\n  CacheView\n    *hald_view,\n    *image_view;\n\n  double\n    width;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  PixelInfo\n    zero;\n\n  size_t\n    cube_size,\n    length,\n    level;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(hald_image != (Image *) NULL);\n  assert(hald_image->signature == MagickCoreSignature);\n  if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)\n    return(MagickFalse);\n  if (image->alpha_trait == UndefinedPixelTrait)\n    (void) SetImageAlphaChannel(image,OpaqueAlphaChannel,exception);\n  /*\n    Hald clut image.\n  */\n  status=MagickTrue;\n  progress=0;\n  length=(size_t) MagickMin((MagickRealType) hald_image->columns,\n    (MagickRealType) hald_image->rows);\n  for (level=2; (level*level*level) < length; level++) ;\n  level*=level;\n  cube_size=level*level;\n  width=(double) hald_image->columns;\n  GetPixelInfo(hald_image,&zero);\n  hald_view=AcquireVirtualCacheView(hald_image,exception);\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        offset;\n\n      HaldInfo\n        point;\n\n      PixelInfo\n        pixel,\n        pixel1,\n        pixel2,\n        pixel3,\n        pixel4;\n\n      point.x=QuantumScale*(level-1.0)*GetPixelRed(image,q);\n      point.y=QuantumScale*(level-1.0)*GetPixelGreen(image,q);\n      point.z=QuantumScale*(level-1.0)*GetPixelBlue(image,q);\n      offset=point.x+level*floor(point.y)+cube_size*floor(point.z);\n      point.x-=floor(point.x);\n      point.y-=floor(point.y);\n      point.z-=floor(point.z);\n      pixel1=zero;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset,width),floor(offset/width),&pixel1,exception);\n      if (status == MagickFalse)\n        break;\n      pixel2=zero;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset+level,width),floor((offset+level)/width),&pixel2,exception);\n      if (status == MagickFalse)\n        break;\n      pixel3=zero;\n      CompositePixelInfoAreaBlend(&pixel1,pixel1.alpha,&pixel2,pixel2.alpha,\n        point.y,&pixel3);\n      offset+=cube_size;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset,width),floor(offset/width),&pixel1,exception);\n      if (status == MagickFalse)\n        break;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset+level,width),floor((offset+level)/width),&pixel2,exception);\n      if (status == MagickFalse)\n        break;\n      pixel4=zero;\n      CompositePixelInfoAreaBlend(&pixel1,pixel1.alpha,&pixel2,pixel2.alpha,\n        point.y,&pixel4);\n      pixel=zero;\n      CompositePixelInfoAreaBlend(&pixel3,pixel3.alpha,&pixel4,pixel4.alpha,\n        point.z,&pixel);\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        SetPixelRed(image,ClampToQuantum(pixel.red),q);\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        SetPixelGreen(image,ClampToQuantum(pixel.green),q);\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        SetPixelBlue(image,ClampToQuantum(pixel.blue),q);\n      if (((GetPixelBlackTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->colorspace == CMYKColorspace))\n        SetPixelBlack(image,ClampToQuantum(pixel.black),q);\n      if (((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->alpha_trait != UndefinedPixelTrait))\n        SetPixelAlpha(image,ClampToQuantum(pixel.alpha),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,HaldClutImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  hald_view=DestroyCacheView(hald_view);\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L e v e l I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LevelImage() adjusts the levels of a particular image channel by\n%  scaling the colors falling between specified white and black points to\n%  the full available quantum range.\n%\n%  The parameters provided represent the black, and white points.  The black\n%  point specifies the darkest color in the image. Colors darker than the\n%  black point are set to zero.  White point specifies the lightest color in\n%  the image.  Colors brighter than the white point are set to the maximum\n%  quantum value.\n%\n%  If a '!' flag is given, map black and white colors to the given levels\n%  rather than mapping those levels to black and white.  See\n%  LevelizeImage() below.\n%\n%  Gamma specifies a gamma correction to apply to the image.\n%\n%  The format of the LevelImage method is:\n%\n%      MagickBooleanType LevelImage(Image *image,const double black_point,\n%        const double white_point,const double gamma,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: The level to map zero (black) to.\n%\n%    o white_point: The level to map QuantumRange (white) to.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic inline double LevelPixel(const double black_point,\n  const double white_point,const double gamma,const double pixel)\n{\n  double\n    level_pixel,\n    scale;\n\n  scale=PerceptibleReciprocal(white_point-black_point);\n  level_pixel=QuantumRange*gamma_pow(scale*((double) pixel-black_point),\n    1.0/gamma);\n  return(level_pixel);\n}\n\nMagickExport MagickBooleanType LevelImage(Image *image,const double black_point,\n  const double white_point,const double gamma,ExceptionInfo *exception)\n{\n#define LevelImageTag  \"Level/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize levels map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Level colormap.\n      */\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].red));\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].green));\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].blue));\n      if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].alpha=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].alpha));\n    }\n  /*\n    Level image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=ClampToQuantum(LevelPixel(black_point,white_point,gamma,\n          (double) q[j]));\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,LevelImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  (void) ClampImage(image,exception);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L e v e l i z e I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LevelizeImage() applies the reversed LevelImage() operation to just\n%  the specific channels specified.  It compresses the full range of color\n%  values, so that they lie between the given black and white points. Gamma is\n%  applied before the values are mapped.\n%\n%  LevelizeImage() can be called with by using a +level command line\n%  API option, or using a '!' on a -level or LevelImage() geometry string.\n%\n%  It can be used to de-contrast a greyscale image to the exact levels\n%  specified.  Or by using specific levels for each channel of an image you\n%  can convert a gray-scale image to any linear color gradient, according to\n%  those levels.\n%\n%  The format of the LevelizeImage method is:\n%\n%      MagickBooleanType LevelizeImage(Image *image,const double black_point,\n%        const double white_point,const double gamma,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: The level to map zero (black) to.\n%\n%    o white_point: The level to map QuantumRange (white) to.\n%\n%    o gamma: adjust gamma by this factor before mapping values.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType LevelizeImage(Image *image,\n  const double black_point,const double white_point,const double gamma,\n  ExceptionInfo *exception)\n{\n#define LevelizeImageTag  \"Levelize/Image\"\n#define LevelizeValue(x) ClampToQuantum(((MagickRealType) gamma_pow((double) \\\n  (QuantumScale*(x)),gamma))*(white_point-black_point)+black_point)\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize levels map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Level colormap.\n      */\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=(double) LevelizeValue(image->colormap[i].red);\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=(double) LevelizeValue(\n          image->colormap[i].green);\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=(double) LevelizeValue(image->colormap[i].blue);\n      if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].alpha=(double) LevelizeValue(\n          image->colormap[i].alpha);\n    }\n  /*\n    Level image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=LevelizeValue(q[j]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,LevelizeImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L e v e l I m a g e C o l o r s                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LevelImageColors() maps the given color to \"black\" and \"white\" values,\n%  linearly spreading out the colors, and level values on a channel by channel\n%  bases, as per LevelImage().  The given colors allows you to specify\n%  different level ranges for each of the color channels separately.\n%\n%  If the boolean 'invert' is set true the image values will modifyed in the\n%  reverse direction. That is any existing \"black\" and \"white\" colors in the\n%  image will become the color values given, with all other values compressed\n%  appropriatally.  This effectivally maps a greyscale gradient into the given\n%  color gradient.\n%\n%  The format of the LevelImageColors method is:\n%\n%    MagickBooleanType LevelImageColors(Image *image,\n%      const PixelInfo *black_color,const PixelInfo *white_color,\n%      const MagickBooleanType invert,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_color: The color to map black to/from\n%\n%    o white_point: The color to map white to/from\n%\n%    o invert: if true map the colors (levelize), rather than from (level)\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType LevelImageColors(Image *image,\n  const PixelInfo *black_color,const PixelInfo *white_color,\n  const MagickBooleanType invert,ExceptionInfo *exception)\n{\n  ChannelType\n    channel_mask;\n\n  MagickStatusType\n    status;\n\n  /*\n    Allocate and initialize levels map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if ((IsGrayColorspace(image->colorspace) != MagickFalse) &&\n      ((IsGrayColorspace(black_color->colorspace) == MagickFalse) ||\n       (IsGrayColorspace(white_color->colorspace) == MagickFalse)))\n    (void) SetImageColorspace(image,sRGBColorspace,exception);\n  status=MagickTrue;\n  if (invert == MagickFalse)\n    {\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,RedChannel);\n          status&=LevelImage(image,black_color->red,white_color->red,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,GreenChannel);\n          status&=LevelImage(image,black_color->green,white_color->green,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,BlueChannel);\n          status&=LevelImage(image,black_color->blue,white_color->blue,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelBlackTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->colorspace == CMYKColorspace))\n        {\n          channel_mask=SetImageChannelMask(image,BlackChannel);\n          status&=LevelImage(image,black_color->black,white_color->black,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->alpha_trait != UndefinedPixelTrait))\n        {\n          channel_mask=SetImageChannelMask(image,AlphaChannel);\n          status&=LevelImage(image,black_color->alpha,white_color->alpha,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n    }\n  else\n    {\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,RedChannel);\n          status&=LevelizeImage(image,black_color->red,white_color->red,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,GreenChannel);\n          status&=LevelizeImage(image,black_color->green,white_color->green,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,BlueChannel);\n          status&=LevelizeImage(image,black_color->blue,white_color->blue,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelBlackTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->colorspace == CMYKColorspace))\n        {\n          channel_mask=SetImageChannelMask(image,BlackChannel);\n          status&=LevelizeImage(image,black_color->black,white_color->black,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->alpha_trait != UndefinedPixelTrait))\n        {\n          channel_mask=SetImageChannelMask(image,AlphaChannel);\n          status&=LevelizeImage(image,black_color->alpha,white_color->alpha,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n    }\n  return(status != 0 ? MagickTrue : MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L i n e a r S t r e t c h I m a g e                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LinearStretchImage() discards any pixels below the black point and above\n%  the white point and levels the remaining pixels.\n%\n%  The format of the LinearStretchImage method is:\n%\n%      MagickBooleanType LinearStretchImage(Image *image,\n%        const double black_point,const double white_point,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: the black point.\n%\n%    o white_point: the white point.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType LinearStretchImage(Image *image,\n  const double black_point,const double white_point,ExceptionInfo *exception)\n{\n#define LinearStretchImageTag  \"LinearStretch/Image\"\n\n  CacheView\n    *image_view;\n\n  double\n    *histogram,\n    intensity;\n\n  MagickBooleanType\n    status;\n\n  ssize_t\n    black,\n    white,\n    y;\n\n  /*\n    Allocate histogram and linear map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*histogram));\n  if (histogram == (double *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  /*\n    Form histogram.\n  */\n  (void) memset(histogram,0,(MaxMap+1)*sizeof(*histogram));\n  image_view=AcquireVirtualCacheView(image,exception);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);\n    if (p == (const Quantum *) NULL)\n      break;\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      intensity=GetPixelIntensity(image,p);\n      histogram[ScaleQuantumToMap(ClampToQuantum(intensity))]++;\n      p+=GetPixelChannels(image);\n    }\n  }\n  image_view=DestroyCacheView(image_view);\n  /*\n    Find the histogram boundaries by locating the black and white point levels.\n  */\n  intensity=0.0;\n  for (black=0; black < (ssize_t) MaxMap; black++)\n  {\n    intensity+=histogram[black];\n    if (intensity >= black_point)\n      break;\n  }\n  intensity=0.0;\n  for (white=(ssize_t) MaxMap; white != 0; white--)\n  {\n    intensity+=histogram[white];\n    if (intensity >= white_point)\n      break;\n  }\n  histogram=(double *) RelinquishMagickMemory(histogram);\n  status=LevelImage(image,(double) ScaleMapToQuantum((MagickRealType) black),\n    (double) ScaleMapToQuantum((MagickRealType) white),1.0,exception);\n  return(status);\n}\n\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     M o d u l a t e I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ModulateImage() lets you control the brightness, saturation, and hue\n%  of an image.  Modulate represents the brightness, saturation, and hue\n%  as one parameter (e.g. 90,150,100).  If the image colorspace is HSL, the\n%  modulation is lightness, saturation, and hue.  For HWB, use blackness,\n%  whiteness, and hue. And for HCL, use chrome, luma, and hue.\n%\n%  The format of the ModulateImage method is:\n%\n%      MagickBooleanType ModulateImage(Image *image,const char *modulate,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o modulate: Define the percent change in brightness, saturation, and hue.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic inline void ModulateHCL(const double percent_hue,\n  const double percent_chroma,const double percent_luma,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToHCL(*red,*green,*blue,&hue,&chroma,&luma);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  chroma*=0.01*percent_chroma;\n  luma*=0.01*percent_luma;\n  ConvertHCLToRGB(hue,chroma,luma,red,green,blue);\n}\n\nstatic inline void ModulateHCLp(const double percent_hue,\n  const double percent_chroma,const double percent_luma,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToHCLp(*red,*green,*blue,&hue,&chroma,&luma);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  chroma*=0.01*percent_chroma;\n  luma*=0.01*percent_luma;\n  ConvertHCLpToRGB(hue,chroma,luma,red,green,blue);\n}\n\nstatic inline void ModulateHSB(const double percent_hue,\n  const double percent_saturation,const double percent_brightness,double *red,\n  double *green,double *blue)\n{\n  double\n    brightness,\n    hue,\n    saturation;\n\n  /*\n    Increase or decrease color brightness, saturation, or hue.\n  */\n  ConvertRGBToHSB(*red,*green,*blue,&hue,&saturation,&brightness);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  brightness*=0.01*percent_brightness;\n  ConvertHSBToRGB(hue,saturation,brightness,red,green,blue);\n}\n\nstatic inline void ModulateHSI(const double percent_hue,\n  const double percent_saturation,const double percent_intensity,double *red,\n  double *green,double *blue)\n{\n  double\n    intensity,\n    hue,\n    saturation;\n\n  /*\n    Increase or decrease color intensity, saturation, or hue.\n  */\n  ConvertRGBToHSI(*red,*green,*blue,&hue,&saturation,&intensity);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  intensity*=0.01*percent_intensity;\n  ConvertHSIToRGB(hue,saturation,intensity,red,green,blue);\n}\n\nstatic inline void ModulateHSL(const double percent_hue,\n  const double percent_saturation,const double percent_lightness,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    lightness,\n    saturation;\n\n  /*\n    Increase or decrease color lightness, saturation, or hue.\n  */\n  ConvertRGBToHSL(*red,*green,*blue,&hue,&saturation,&lightness);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  lightness*=0.01*percent_lightness;\n  ConvertHSLToRGB(hue,saturation,lightness,red,green,blue);\n}\n\nstatic inline void ModulateHSV(const double percent_hue,\n  const double percent_saturation,const double percent_value,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    saturation,\n    value;\n\n  /*\n    Increase or decrease color value, saturation, or hue.\n  */\n  ConvertRGBToHSV(*red,*green,*blue,&hue,&saturation,&value);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  value*=0.01*percent_value;\n  ConvertHSVToRGB(hue,saturation,value,red,green,blue);\n}\n\nstatic inline void ModulateHWB(const double percent_hue,\n  const double percent_whiteness,const double percent_blackness,double *red,\n  double *green,double *blue)\n{\n  double\n    blackness,\n    hue,\n    whiteness;\n\n  /*\n    Increase or decrease color blackness, whiteness, or hue.\n  */\n  ConvertRGBToHWB(*red,*green,*blue,&hue,&whiteness,&blackness);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  blackness*=0.01*percent_blackness;\n  whiteness*=0.01*percent_whiteness;\n  ConvertHWBToRGB(hue,whiteness,blackness,red,green,blue);\n}\n\nstatic inline void ModulateLCHab(const double percent_luma,\n  const double percent_chroma,const double percent_hue,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToLCHab(*red,*green,*blue,&luma,&chroma,&hue);\n  luma*=0.01*percent_luma;\n  chroma*=0.01*percent_chroma;\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  ConvertLCHabToRGB(luma,chroma,hue,red,green,blue);\n}\n\nstatic inline void ModulateLCHuv(const double percent_luma,\n  const double percent_chroma,const double percent_hue,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToLCHuv(*red,*green,*blue,&luma,&chroma,&hue);\n  luma*=0.01*percent_luma;\n  chroma*=0.01*percent_chroma;\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  ConvertLCHuvToRGB(luma,chroma,hue,red,green,blue);\n}\n\nMagickExport MagickBooleanType ModulateImage(Image *image,const char *modulate,\n  ExceptionInfo *exception)\n{\n#define ModulateImageTag  \"Modulate/Image\"\n\n  CacheView\n    *image_view;\n\n  ColorspaceType\n    colorspace;\n\n  const char\n    *artifact;\n\n  double\n    percent_brightness,\n    percent_hue,\n    percent_saturation;\n\n  GeometryInfo\n    geometry_info;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  MagickStatusType\n    flags;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Initialize modulate table.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (modulate == (char *) NULL)\n    return(MagickFalse);\n  if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)\n    (void) SetImageColorspace(image,sRGBColorspace,exception);\n  flags=ParseGeometry(modulate,&geometry_info);\n  percent_brightness=geometry_info.rho;\n  percent_saturation=geometry_info.sigma;\n  if ((flags & SigmaValue) == 0)\n    percent_saturation=100.0;\n  percent_hue=geometry_info.xi;\n  if ((flags & XiValue) == 0)\n    percent_hue=100.0;\n  colorspace=UndefinedColorspace;\n  artifact=GetImageArtifact(image,\"modulate:colorspace\");\n  if (artifact != (const char *) NULL)\n    colorspace=(ColorspaceType) ParseCommandOption(MagickColorspaceOptions,\n      MagickFalse,artifact);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      double\n        blue,\n        green,\n        red;\n\n      /*\n        Modulate image colormap.\n      */\n      red=(double) image->colormap[i].red;\n      green=(double) image->colormap[i].green;\n      blue=(double) image->colormap[i].blue;\n      switch (colorspace)\n      {\n        case HCLColorspace:\n        {\n          ModulateHCL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HCLpColorspace:\n        {\n          ModulateHCLp(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSBColorspace:\n        {\n          ModulateHSB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSIColorspace:\n        {\n          ModulateHSI(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSLColorspace:\n        default:\n        {\n          ModulateHSL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSVColorspace:\n        {\n          ModulateHSV(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HWBColorspace:\n        {\n          ModulateHWB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHColorspace:\n        case LCHabColorspace:\n        {\n          ModulateLCHab(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHuvColorspace:\n        {\n          ModulateLCHuv(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n      }\n      image->colormap[i].red=red;\n      image->colormap[i].green=green;\n      image->colormap[i].blue=blue;\n    }\n  /*\n    Modulate image.\n  */\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateModulateImage(image,percent_brightness,percent_hue,\n        percent_saturation,colorspace,exception) != MagickFalse)\n    return(MagickTrue);\n#endif\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        blue,\n        green,\n        red;\n\n      red=(double) GetPixelRed(image,q);\n      green=(double) GetPixelGreen(image,q);\n      blue=(double) GetPixelBlue(image,q);\n      switch (colorspace)\n      {\n        case HCLColorspace:\n        {\n          ModulateHCL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HCLpColorspace:\n        {\n          ModulateHCLp(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSBColorspace:\n        {\n          ModulateHSB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSLColorspace:\n        default:\n        {\n          ModulateHSL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSVColorspace:\n        {\n          ModulateHSV(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HWBColorspace:\n        {\n          ModulateHWB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHabColorspace:\n        {\n          ModulateLCHab(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHColorspace:\n        case LCHuvColorspace:\n        {\n          ModulateLCHuv(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n      }\n      SetPixelRed(image,ClampToQuantum(red),q);\n      SetPixelGreen(image,ClampToQuantum(green),q);\n      SetPixelBlue(image,ClampToQuantum(blue),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ModulateImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     N e g a t e I m a g e                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NegateImage() negates the colors in the reference image.  The grayscale\n%  option means that only grayscale values within the image are negated.\n%\n%  The format of the NegateImage method is:\n%\n%      MagickBooleanType NegateImage(Image *image,\n%        const MagickBooleanType grayscale,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o grayscale: If MagickTrue, only negate grayscale pixels within the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType NegateImage(Image *image,\n  const MagickBooleanType grayscale,ExceptionInfo *exception)\n{\n#define NegateImageTag  \"Negate/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Negate colormap.\n      */\n      if( grayscale != MagickFalse )\n        if ((image->colormap[i].red != image->colormap[i].green) ||\n            (image->colormap[i].green != image->colormap[i].blue))\n          continue;\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=QuantumRange-image->colormap[i].red;\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=QuantumRange-image->colormap[i].green;\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=QuantumRange-image->colormap[i].blue;\n    }\n  /*\n    Negate image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n  if( grayscale != MagickFalse )\n    {\n      for (y=0; y < (ssize_t) image->rows; y++)\n      {\n        MagickBooleanType\n          sync;\n\n        register Quantum\n          *magick_restrict q;\n\n        register ssize_t\n          x;\n\n        if (status == MagickFalse)\n          continue;\n        q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,\n          exception);\n        if (q == (Quantum *) NULL)\n          {\n            status=MagickFalse;\n            continue;\n          }\n        for (x=0; x < (ssize_t) image->columns; x++)\n        {\n          register ssize_t\n            j;\n\n          if (IsPixelGray(image,q) != MagickFalse)\n            {\n              q+=GetPixelChannels(image);\n              continue;\n            }\n          for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,j);\n            PixelTrait traits = GetPixelChannelTraits(image,channel);\n            if ((traits & UpdatePixelTrait) == 0)\n              continue;\n            q[j]=QuantumRange-q[j];\n          }\n          q+=GetPixelChannels(image);\n        }\n        sync=SyncCacheViewAuthenticPixels(image_view,exception);\n        if (sync == MagickFalse)\n          status=MagickFalse;\n        if (image->progress_monitor != (MagickProgressMonitor) NULL)\n          {\n            MagickBooleanType\n              proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n            #pragma omp atomic\n#endif\n            progress++;\n            proceed=SetImageProgress(image,NegateImageTag,progress,image->rows);\n            if (proceed == MagickFalse)\n              status=MagickFalse;\n          }\n      }\n      image_view=DestroyCacheView(image_view);\n      return(MagickTrue);\n    }\n  /*\n    Negate image.\n  */\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=QuantumRange-q[j];\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,NegateImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     N o r m a l i z e I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  The NormalizeImage() method enhances the contrast of a color image by\n%  mapping the darkest 2 percent of all pixel to black and the brightest\n%  1 percent to white.\n%\n%  The format of the NormalizeImage method is:\n%\n%      MagickBooleanType NormalizeImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType NormalizeImage(Image *image,\n  ExceptionInfo *exception)\n{\n  double\n    black_point,\n    white_point;\n\n  black_point=(double) image->columns*image->rows*0.0015;\n  white_point=(double) image->columns*image->rows*0.9995;\n  return(ContrastStretchImage(image,black_point,white_point,exception));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     S i g m o i d a l C o n t r a s t I m a g e                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  SigmoidalContrastImage() adjusts the contrast of an image with a non-linear\n%  sigmoidal contrast algorithm.  Increase the contrast of the image using a\n%  sigmoidal transfer function without saturating highlights or shadows.\n%  Contrast indicates how much to increase the contrast (0 is none; 3 is\n%  typical; 20 is pushing it); mid-point indicates where midtones fall in the\n%  resultant image (0 is white; 50% is middle-gray; 100% is black).  Set\n%  sharpen to MagickTrue to increase the image contrast otherwise the contrast\n%  is reduced.\n%\n%  The format of the SigmoidalContrastImage method is:\n%\n%      MagickBooleanType SigmoidalContrastImage(Image *image,\n%        const MagickBooleanType sharpen,const char *levels,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o sharpen: Increase or decrease image contrast.\n%\n%    o contrast: strength of the contrast, the larger the number the more\n%      'threshold-like' it becomes.\n%\n%    o midpoint: midpoint of the function as a color value 0 to QuantumRange.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\n/*\n  ImageMagick 6 has a version of this function which uses LUTs.\n*/\n\n/*\n  Sigmoidal function Sigmoidal with inflexion point moved to b and \"slope\n  constant\" set to a.\n\n  The first version, based on the hyperbolic tangent tanh, when combined with\n  the scaling step, is an exact arithmetic clone of the the sigmoid function\n  based on the logistic curve. The equivalence is based on the identity\n\n    1/(1+exp(-t)) = (1+tanh(t/2))/2\n\n  (http://de.wikipedia.org/wiki/Sigmoidfunktion) and the fact that the\n  scaled sigmoidal derivation is invariant under affine transformations of\n  the ordinate.\n\n  The tanh version is almost certainly more accurate and cheaper.  The 0.5\n  factor in the argument is to clone the legacy ImageMagick behavior. The\n  reason for making the define depend on atanh even though it only uses tanh\n  has to do with the construction of the inverse of the scaled sigmoidal.\n*/\n#if defined(MAGICKCORE_HAVE_ATANH)\n#define Sigmoidal(a,b,x) ( tanh((0.5*(a))*((x)-(b))) )\n#else\n#define Sigmoidal(a,b,x) ( 1.0/(1.0+exp((a)*((b)-(x)))) )\n#endif\n/*\n  Scaled sigmoidal function:\n\n    ( Sigmoidal(a,b,x) - Sigmoidal(a,b,0) ) /\n    ( Sigmoidal(a,b,1) - Sigmoidal(a,b,0) )\n\n  See http://osdir.com/ml/video.image-magick.devel/2005-04/msg00006.html and\n  http://www.cs.dartmouth.edu/farid/downloads/tutorials/fip.pdf.  The limit\n  of ScaledSigmoidal as a->0 is the identity, but a=0 gives a division by\n  zero. This is fixed below by exiting immediately when contrast is small,\n  leaving the image (or colormap) unmodified. This appears to be safe because\n  the series expansion of the logistic sigmoidal function around x=b is\n\n  1/2-a*(b-x)/4+...\n\n  so that the key denominator s(1)-s(0) is about a/4 (a/2 with tanh).\n*/\n#define ScaledSigmoidal(a,b,x) (                    \\\n  (Sigmoidal((a),(b),(x))-Sigmoidal((a),(b),0.0)) / \\\n  (Sigmoidal((a),(b),1.0)-Sigmoidal((a),(b),0.0)) )\n/*\n  Inverse of ScaledSigmoidal, used for +sigmoidal-contrast.  Because b\n  may be 0 or 1, the argument of the hyperbolic tangent (resp. logistic\n  sigmoidal) may be outside of the interval (-1,1) (resp. (0,1)), even\n  when creating a LUT from in gamut values, hence the branching.  In\n  addition, HDRI may have out of gamut values.\n  InverseScaledSigmoidal is not a two-sided inverse of ScaledSigmoidal:\n  It is only a right inverse. This is unavoidable.\n*/\nstatic inline double InverseScaledSigmoidal(const double a,const double b,\n  const double x)\n{\n  const double sig0=Sigmoidal(a,b,0.0);\n  const double sig1=Sigmoidal(a,b,1.0);\n  const double argument=(sig1-sig0)*x+sig0;\n  const double clamped=\n    (\n#if defined(MAGICKCORE_HAVE_ATANH)\n      argument < -1+MagickEpsilon\n      ?\n      -1+MagickEpsilon\n      :\n      ( argument > 1-MagickEpsilon ? 1-MagickEpsilon : argument )\n    );\n  return(b+(2.0/a)*atanh(clamped));\n#else\n      argument < MagickEpsilon\n      ?\n      MagickEpsilon\n      :\n      ( argument > 1-MagickEpsilon ? 1-MagickEpsilon : argument )\n    );\n  return(b-log(1.0/clamped-1.0)/a);\n#endif\n}\n\nMagickExport MagickBooleanType SigmoidalContrastImage(Image *image,\n  const MagickBooleanType sharpen,const double contrast,const double midpoint,\n  ExceptionInfo *exception)\n{\n#define SigmoidalContrastImageTag  \"SigmoidalContrast/Image\"\n#define ScaledSig(x) ( ClampToQuantum(QuantumRange* \\\n  ScaledSigmoidal(contrast,QuantumScale*midpoint,QuantumScale*(x))) )\n#define InverseScaledSig(x) ( ClampToQuantum(QuantumRange* \\\n  InverseScaledSigmoidal(contrast,QuantumScale*midpoint,QuantumScale*(x))) )\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  ssize_t\n    y;\n\n  /*\n    Convenience macros.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  /*\n    Side effect: may clamp values unless contrast<MagickEpsilon, in which\n    case nothing is done.\n  */\n  if (contrast < MagickEpsilon)\n    return(MagickTrue);\n  /*\n    Sigmoidal-contrast enhance colormap.\n  */\n  if (image->storage_class == PseudoClass)\n    {\n      register ssize_t\n        i;\n\n      if( sharpen != MagickFalse )\n        for (i=0; i < (ssize_t) image->colors; i++)\n        {\n          if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].red=(MagickRealType) ScaledSig(\n              image->colormap[i].red);\n          if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].green=(MagickRealType) ScaledSig(\n              image->colormap[i].green);\n          if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].blue=(MagickRealType) ScaledSig(\n              image->colormap[i].blue);\n          if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].alpha=(MagickRealType) ScaledSig(\n              image->colormap[i].alpha);\n        }\n      else\n        for (i=0; i < (ssize_t) image->colors; i++)\n        {\n          if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].red=(MagickRealType) InverseScaledSig(\n              image->colormap[i].red);\n          if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].green=(MagickRealType) InverseScaledSig(\n              image->colormap[i].green);\n          if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].blue=(MagickRealType) InverseScaledSig(\n              image->colormap[i].blue);\n          if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].alpha=(MagickRealType) InverseScaledSig(\n              image->colormap[i].alpha);\n        }\n    }\n  /*\n    Sigmoidal-contrast enhance image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        i;\n\n      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,i);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        if( sharpen != MagickFalse )\n          q[i]=ScaledSig(q[i]);\n        else\n          q[i]=InverseScaledSig(q[i]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,SigmoidalContrastImageTag,progress,\n          image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n", "/*\n  Copyright 1999-2019 ImageMagick Studio LLC, a non-profit organization\n  dedicated to making software imaging solutions freely available.\n\n  You may not use this file except in compliance with the License.  You may\n  obtain a copy of the License at\n\n    https://imagemagick.org/script/license.php\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n  MagickCore pixel accessor methods.\n*/\n#ifndef MAGICKCORE_PIXEL_ACCESSOR_H\n#define MAGICKCORE_PIXEL_ACCESSOR_H\n\n#include <assert.h>\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/cache-view.h\"\n#include \"MagickCore/color.h\"\n#include \"MagickCore/colorspace.h\"\n#include \"MagickCore/gem.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/memory_.h\"\n\n#if defined(__cplusplus) || defined(c_plusplus)\nextern \"C\" {\n#endif\n\n#undef index\n\nstatic inline Quantum ClampPixel(const MagickRealType pixel)\n{\n  if (pixel < 0.0f)\n    return((Quantum) 0);\n  if (pixel >= (MagickRealType) QuantumRange)\n    return((Quantum) QuantumRange);\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  return((Quantum) (pixel+0.5f));\n#else\n  return((Quantum) pixel);\n#endif\n}\n\nstatic inline Quantum GetPixela(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[aPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelAlpha(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits == UndefinedPixelTrait)\n    return(OpaqueAlpha);\n  return(pixel[image->channel_map[AlphaPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelAlphaTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[AlphaPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelb(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[bPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelBlack(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[BlackPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) 0);\n  return(pixel[image->channel_map[BlackPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelBlackTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[BlackPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelBlue(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[BluePixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelBlueTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[BluePixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelCb(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[CbPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelCbTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[CbPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelChannel(const Image *magick_restrict image,\n  const PixelChannel channel,const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[image->channel_map[channel].offset].traits == UndefinedPixelTrait)\n    return((Quantum) 0);\n  return(pixel[image->channel_map[channel].offset]);\n}\n\nstatic inline PixelChannel GetPixelChannelChannel(\n  const Image *magick_restrict image,const ssize_t offset)\n{\n  return(image->channel_map[offset].channel);\n}\n\nstatic inline ssize_t GetPixelChannelOffset(const Image *magick_restrict image,\n  const PixelChannel channel)\n{\n  return(image->channel_map[channel].offset);\n}\n\nstatic inline PixelTrait GetPixelChannelTraits(\n  const Image *magick_restrict image,const PixelChannel channel)\n{\n  return(image->channel_map[channel].traits);\n}\n\nstatic inline size_t GetPixelChannels(const Image *magick_restrict image)\n{\n  return(image->number_channels);\n}\n\nstatic inline Quantum GetPixelCompositeMask(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[CompositeMaskPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) QuantumRange);\n  return(pixel[image->channel_map[CompositeMaskPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelCr(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[CrPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelCrTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[CrPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelCyan(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[CyanPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelCyanTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[CyanPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelGray(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[GrayPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelGrayTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[GrayPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelGreen(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[GreenPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelGreenTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[GreenPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelIndex(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[IndexPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) 0);\n  return(pixel[image->channel_map[IndexPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelIndexTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[IndexPixelChannel].traits);\n}\n\nstatic inline MagickRealType GetPixelInfoChannel(\n  const PixelInfo *magick_restrict pixel_info,const PixelChannel channel)\n{\n  switch (channel)\n  {\n    case RedPixelChannel: return(pixel_info->red);\n    case GreenPixelChannel: return(pixel_info->green);\n    case BluePixelChannel: return(pixel_info->blue);\n    case BlackPixelChannel: return(pixel_info->black);\n    case AlphaPixelChannel: return(pixel_info->alpha);\n    case IndexPixelChannel: return(pixel_info->index);\n    default: return((MagickRealType) 0.0);\n  }\n}\n\nstatic inline double PerceptibleReciprocal(const double x)\n{\n  double\n    sign;\n\n  /*\n    Return 1/x where x is perceptible (not unlimited or infinitesimal).\n  */\n  sign=x < 0.0 ? -1.0 : 1.0;\n  if ((sign*x) >= MagickEpsilon)\n    return(1.0/x);\n  return(sign/MagickEpsilon);\n}\n\nstatic inline MagickRealType GetPixelInfoLuma(\n  const PixelInfo *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  if (pixel->colorspace == sRGBColorspace)\n    {\n      intensity=(MagickRealType) (0.212656f*pixel->red+0.715158f*pixel->green+\n        0.072186f*pixel->blue);\n      return(intensity);\n    }\n  intensity=(MagickRealType) (0.212656f*EncodePixelGamma(pixel->red)+\n    0.715158f*EncodePixelGamma(pixel->green)+\n    0.072186f*EncodePixelGamma(pixel->blue));\n  return(intensity);\n}\n\nstatic inline MagickRealType GetPixelInfoLuminance(\n  const PixelInfo *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  if (pixel->colorspace != sRGBColorspace)\n    {\n      intensity=(MagickRealType) (0.212656f*pixel->red+0.715158f*pixel->green+\n        0.072186f*pixel->blue);\n      return(intensity);\n    }\n  intensity=(MagickRealType) (0.212656f*DecodePixelGamma(pixel->red)+\n    0.715158f*DecodePixelGamma(pixel->green)+\n    0.072186f*DecodePixelGamma(pixel->blue));\n  return(intensity);\n}\n\nstatic inline Quantum GetPixelL(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[LPixelChannel].offset]);\n}\n\nstatic inline ssize_t GetPixelLabel(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return((ssize_t) pixel[image->channel_map[LabelPixelChannel].offset]);\n}\n\nstatic inline MagickRealType GetPixelLuma(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  intensity=(MagickRealType) (\n    0.212656f*pixel[image->channel_map[RedPixelChannel].offset]+\n    0.715158f*pixel[image->channel_map[GreenPixelChannel].offset]+\n    0.072186f*pixel[image->channel_map[BluePixelChannel].offset]);\n  return(intensity);\n}\n\nstatic inline MagickRealType GetPixelLuminance(\n  const Image *magick_restrict image,const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  if (image->colorspace != sRGBColorspace)\n    {\n      intensity=(MagickRealType) (\n        0.212656f*pixel[image->channel_map[RedPixelChannel].offset]+\n        0.715158f*pixel[image->channel_map[GreenPixelChannel].offset]+\n        0.072186f*pixel[image->channel_map[BluePixelChannel].offset]);\n      return(intensity);\n    }\n  intensity=(MagickRealType) (0.212656f*DecodePixelGamma((MagickRealType)\n    pixel[image->channel_map[RedPixelChannel].offset])+0.715158f*\n    DecodePixelGamma((MagickRealType)\n    pixel[image->channel_map[GreenPixelChannel].offset])+0.072186f*\n    DecodePixelGamma((MagickRealType)\n    pixel[image->channel_map[BluePixelChannel].offset]));\n  return(intensity);\n}\n\nstatic inline Quantum GetPixelMagenta(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[MagentaPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelMagentaTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[MagentaPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelReadMask(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[ReadMaskPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) QuantumRange);\n  return(pixel[image->channel_map[ReadMaskPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelWriteMask(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[WriteMaskPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) QuantumRange);\n  return(pixel[image->channel_map[WriteMaskPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelReadMaskTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[ReadMaskPixelChannel].traits);\n}\n\nstatic inline size_t GetPixelMetaChannels(const Image *magick_restrict image)\n{\n  return(image->number_meta_channels);\n}\n\nstatic inline size_t GetPixelMetacontentExtent(\n  const Image *magick_restrict image)\n{\n  return(image->metacontent_extent);\n}\n\nstatic inline Quantum GetPixelOpacity(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits != BlendPixelTrait)\n    return(QuantumRange-OpaqueAlpha);\n  return(QuantumRange-pixel[image->channel_map[AlphaPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelRed(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[RedPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelRedTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[RedPixelChannel].traits);\n}\n\nstatic inline void GetPixelInfoPixel(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel,PixelInfo *magick_restrict pixel_info)\n{\n  (void) ResetMagickMemory(pixel_info,0,sizeof(*pixel_info));\n  pixel_info->storage_class=DirectClass;\n  pixel_info->colorspace=sRGBColorspace;\n  pixel_info->depth=MAGICKCORE_QUANTUM_DEPTH;\n  pixel_info->alpha_trait=UndefinedPixelTrait;\n  pixel_info->alpha=(MagickRealType) OpaqueAlpha;\n  if (image != (Image *) NULL)\n    {\n      pixel_info->storage_class=image->storage_class;\n      pixel_info->colorspace=image->colorspace;\n      pixel_info->fuzz=image->fuzz;\n      pixel_info->depth=image->depth;\n      pixel_info->alpha_trait=image->alpha_trait;\n      if (pixel != (Quantum *) NULL)\n        {\n          pixel_info->red=(MagickRealType)\n            pixel[image->channel_map[RedPixelChannel].offset];\n          pixel_info->green=(MagickRealType)\n            pixel[image->channel_map[GreenPixelChannel].offset];\n          pixel_info->blue=(MagickRealType)\n            pixel[image->channel_map[BluePixelChannel].offset];\n          if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n            pixel_info->black=(MagickRealType)\n              pixel[image->channel_map[BlackPixelChannel].offset];\n          if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n            {\n              pixel_info->alpha=(MagickRealType)\n                pixel[image->channel_map[AlphaPixelChannel].offset];\n              pixel_info->alpha_trait=BlendPixelTrait;\n            }\n          if (image->channel_map[IndexPixelChannel].traits != UndefinedPixelTrait)\n            pixel_info->index=(MagickRealType)\n          pixel[image->channel_map[IndexPixelChannel].offset];\n        }\n    }\n}\n\nstatic inline PixelTrait GetPixelTraits(const Image *magick_restrict image,\n  const PixelChannel channel)\n{\n  return(image->channel_map[channel].traits);\n}\n\nstatic inline Quantum GetPixelY(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[YPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelYTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[YPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelYellow(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[YellowPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelYellowTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[YellowPixelChannel].traits);\n}\n\nstatic inline MagickRealType AbsolutePixelValue(const MagickRealType x)\n{\n  return(x < 0.0f ? -x : x);\n}\n\nstatic inline MagickBooleanType IsPixelAtDepth(const Quantum pixel,\n  const QuantumAny range)\n{\n  Quantum\n    quantum;\n\n  if (range == 0)\n    return(MagickTrue);\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  quantum=(Quantum) (((MagickRealType) QuantumRange*((QuantumAny)\n    (((MagickRealType) range*pixel)/QuantumRange+0.5)))/range+0.5);\n#else\n  quantum=(Quantum) (((MagickRealType) QuantumRange*((QuantumAny)\n    (((MagickRealType) range*pixel)/QuantumRange+0.5)))/range);\n#endif\n  return(pixel == quantum ? MagickTrue : MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelEquivalent(\n  const Image *magick_restrict image,const Quantum *magick_restrict p,\n  const PixelInfo *magick_restrict q)\n{\n  MagickRealType\n    alpha,\n    beta,\n    color;\n\n  color=(MagickRealType) p[image->channel_map[AlphaPixelChannel].offset];\n  alpha=image->alpha_trait == UndefinedPixelTrait ? (MagickRealType)\n    OpaqueAlpha : color;\n  beta=q->alpha_trait == UndefinedPixelTrait ? (MagickRealType) OpaqueAlpha :\n    q->alpha;\n  if (AbsolutePixelValue(alpha-beta) >= MagickEpsilon)\n    return(MagickFalse);\n  if ((AbsolutePixelValue(alpha-TransparentAlpha) < MagickEpsilon) ||\n      (AbsolutePixelValue(beta-TransparentAlpha) < MagickEpsilon))\n    return(MagickTrue);  /* no color component if pixel is transparent */\n  color=(MagickRealType) p[image->channel_map[RedPixelChannel].offset];\n  if (AbsolutePixelValue(color-q->red) >= MagickEpsilon)\n    return(MagickFalse);\n  color=(MagickRealType) p[image->channel_map[GreenPixelChannel].offset];\n  if (AbsolutePixelValue(color-q->green) >= MagickEpsilon)\n    return(MagickFalse);\n  color=(MagickRealType) p[image->channel_map[BluePixelChannel].offset];\n  if (AbsolutePixelValue(color-q->blue) >= MagickEpsilon)\n    return(MagickFalse);\n  if (image->colorspace == CMYKColorspace)\n    {\n      color=(MagickRealType) p[image->channel_map[BlackPixelChannel].offset];\n      if (AbsolutePixelValue(color-q->black) >= MagickEpsilon)\n        return(MagickFalse);\n    }\n  return(MagickTrue);\n}\n\nstatic inline MagickBooleanType IsPixelGray(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    green_blue,\n    red_green;\n\n  red_green=(MagickRealType) pixel[image->channel_map[RedPixelChannel].offset]-\n    pixel[image->channel_map[GreenPixelChannel].offset];\n  green_blue=(MagickRealType)\n    pixel[image->channel_map[GreenPixelChannel].offset]-\n    pixel[image->channel_map[BluePixelChannel].offset];\n  if ((AbsolutePixelValue(red_green) < MagickEpsilon) &&\n      (AbsolutePixelValue(green_blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelInfoEquivalent(\n  const PixelInfo *magick_restrict p,const PixelInfo *magick_restrict q)\n{\n  MagickRealType\n    alpha,\n    beta;\n\n  alpha=p->alpha_trait == UndefinedPixelTrait ? (MagickRealType) OpaqueAlpha :\n    p->alpha;\n  beta=q->alpha_trait == UndefinedPixelTrait ? (MagickRealType) OpaqueAlpha :\n    q->alpha;\n  if (AbsolutePixelValue(alpha-beta) >= MagickEpsilon)\n    return(MagickFalse);\n  if ((AbsolutePixelValue(alpha-TransparentAlpha) < MagickEpsilon) ||\n      (AbsolutePixelValue(beta-TransparentAlpha) < MagickEpsilon))\n    return(MagickTrue);  /* no color component if pixel is transparent */\n  if (AbsolutePixelValue(p->red-q->red) >= MagickEpsilon)\n    return(MagickFalse);\n  if (AbsolutePixelValue(p->green-q->green) >= MagickEpsilon)\n    return(MagickFalse);\n  if (AbsolutePixelValue(p->blue-q->blue) >= MagickEpsilon)\n    return(MagickFalse);\n  if (p->colorspace == CMYKColorspace)\n    {\n      if (AbsolutePixelValue(p->black-q->black) >= MagickEpsilon)\n        return(MagickFalse);\n    }\n  return(MagickTrue);\n}\n\nstatic inline MagickBooleanType IsPixelMonochrome(\n  const Image *magick_restrict image,const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    green_blue,\n    red,\n    red_green;\n\n  red=(MagickRealType) pixel[image->channel_map[RedPixelChannel].offset];\n  if ((AbsolutePixelValue(red) >= MagickEpsilon) &&\n      (AbsolutePixelValue(red-QuantumRange) >= MagickEpsilon))\n    return(MagickFalse);\n  red_green=(MagickRealType) pixel[image->channel_map[RedPixelChannel].offset]-\n    pixel[image->channel_map[GreenPixelChannel].offset];\n  green_blue=(MagickRealType)\n    pixel[image->channel_map[GreenPixelChannel].offset]-\n    pixel[image->channel_map[BluePixelChannel].offset];\n  if ((AbsolutePixelValue(red_green) < MagickEpsilon) &&\n      (AbsolutePixelValue(green_blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelInfoGray(\n  const PixelInfo *magick_restrict pixel)\n{\n  if ((AbsolutePixelValue(pixel->red-pixel->green) < MagickEpsilon) &&\n      (AbsolutePixelValue(pixel->green-pixel->blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelInfoMonochrome(\n  const PixelInfo *magick_restrict pixel_info)\n{\n  MagickRealType\n    green_blue,\n    red_green;\n\n  if ((AbsolutePixelValue(pixel_info->red) >= MagickEpsilon) ||\n      (AbsolutePixelValue(pixel_info->red-QuantumRange) >= MagickEpsilon))\n    return(MagickFalse);\n  red_green=pixel_info->red-pixel_info->green;\n  green_blue=pixel_info->green-pixel_info->blue;\n  if ((AbsolutePixelValue(red_green) < MagickEpsilon) &&\n      (AbsolutePixelValue(green_blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline void SetPixela(const Image *magick_restrict image,\n  const Quantum a,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[aPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[aPixelChannel].offset]=a;\n}\n\nstatic inline void SetPixelAlpha(const Image *magick_restrict image,\n  const Quantum alpha,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=alpha;\n}\n\nstatic inline void SetPixelAlphaTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[AlphaPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelb(const Image *magick_restrict image,\n  const Quantum b,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[bPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[bPixelChannel].offset]=b;\n}\n\nstatic inline void SetPixelBackgoundColor(const Image *magick_restrict image,\n  Quantum *magick_restrict pixel)\n{\n  ssize_t\n    i;\n\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n    pixel[i]=(Quantum) 0;\n  pixel[image->channel_map[RedPixelChannel].offset]=\n    ClampToQuantum(image->background_color.red);\n  pixel[image->channel_map[GreenPixelChannel].offset]=\n    ClampToQuantum(image->background_color.green);\n  pixel[image->channel_map[BluePixelChannel].offset]=\n    ClampToQuantum(image->background_color.blue);\n  if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[BlackPixelChannel].offset]=\n      ClampToQuantum(image->background_color.black);\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=\n      image->background_color.alpha_trait == UndefinedPixelTrait ? OpaqueAlpha :\n      ClampToQuantum(image->background_color.alpha);\n}\n\nstatic inline void SetPixelBlack(const Image *magick_restrict image,\n  const Quantum black,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[BlackPixelChannel].offset]=black;\n}\n\nstatic inline void SetPixelBlackTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[BlackPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelBlue(const Image *magick_restrict image,\n  const Quantum blue,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[BluePixelChannel].offset]=blue;\n}\n\nstatic inline void SetPixelBlueTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[BluePixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelCb(const Image *magick_restrict image,\n  const Quantum cb,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[CbPixelChannel].offset]=cb;\n}\n\nstatic inline void SetPixelCbTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[CbPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelChannel(const Image *magick_restrict image,\n  const PixelChannel channel,const Quantum quantum,\n  Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[channel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[channel].offset]=quantum;\n}\n\nstatic inline void SetPixelChannelAttributes(\n  const Image *magick_restrict image,const PixelChannel channel,\n  const PixelTrait traits,const ssize_t offset)\n{\n  assert((ssize_t) channel < MaxPixelChannels);\n  assert(offset < MaxPixelChannels);\n  image->channel_map[offset].channel=channel;\n  image->channel_map[channel].offset=offset;\n  image->channel_map[channel].traits=traits;\n}\n\nstatic inline void SetPixelChannelChannel(const Image *magick_restrict image,\n  const PixelChannel channel,const ssize_t offset)\n{\n  image->channel_map[offset].channel=channel;\n  image->channel_map[channel].offset=offset;\n}\n\nstatic inline void SetPixelChannels(Image *image,const size_t number_channels)\n{\n  image->number_channels=number_channels;\n}\n\nstatic inline void SetPixelChannelTraits(Image *image,\n  const PixelChannel channel,const PixelTrait traits)\n{\n  image->channel_map[channel].traits=traits;\n}\n\nstatic inline void SetPixelCompositeMask(const Image *magick_restrict image,\n  const Quantum mask,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[CompositeMaskPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[CompositeMaskPixelChannel].offset]=mask;\n}\n\nstatic inline void SetPixelCr(const Image *magick_restrict image,\n  const Quantum cr,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[CrPixelChannel].offset]=cr;\n}\n\nstatic inline void SetPixelCrTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[CrPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelCyan(const Image *magick_restrict image,\n  const Quantum cyan,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[CyanPixelChannel].offset]=cyan;\n}\n\nstatic inline void SetPixelGray(const Image *magick_restrict image,\n  const Quantum gray,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[GrayPixelChannel].offset]=gray;\n}\n\nstatic inline void SetPixelGrayTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[GrayPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelGreen(const Image *magick_restrict image,\n  const Quantum green,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[GreenPixelChannel].offset]=green;\n}\n\nstatic inline void SetPixelGreenTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[GreenPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelIndex(const Image *magick_restrict image,\n  const Quantum index,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[IndexPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[IndexPixelChannel].offset]=index;\n}\n\nstatic inline void SetPixelIndexTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[IndexPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelViaPixelInfo(const Image *magick_restrict image,\n  const PixelInfo *magick_restrict pixel_info,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[RedPixelChannel].offset]=\n    ClampToQuantum(pixel_info->red);\n  pixel[image->channel_map[GreenPixelChannel].offset]=\n    ClampToQuantum(pixel_info->green);\n  pixel[image->channel_map[BluePixelChannel].offset]=\n    ClampToQuantum(pixel_info->blue);\n  if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[BlackPixelChannel].offset]=\n      ClampToQuantum(pixel_info->black);\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=\n      pixel_info->alpha_trait == UndefinedPixelTrait ? OpaqueAlpha :\n      ClampToQuantum(pixel_info->alpha);\n}\n\nstatic inline void SetPixelL(const Image *magick_restrict image,const Quantum L,\n  Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[LPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[LPixelChannel].offset]=L;\n}\n\nstatic inline void SetPixelMagenta(const Image *magick_restrict image,\n  const Quantum magenta,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[MagentaPixelChannel].offset]=magenta;\n}\n\nstatic inline void SetPixelMagentaTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[MagentaPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelReadMask(const Image *magick_restrict image,\n  const Quantum mask,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[ReadMaskPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[ReadMaskPixelChannel].offset]=mask;\n}\n\nstatic inline void SetPixelWriteMask(const Image *magick_restrict image,\n  const Quantum mask,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[WriteMaskPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[WriteMaskPixelChannel].offset]=mask;\n}\n\nstatic inline void SetPixelMetacontentExtent(Image *image,const size_t extent)\n{\n  image->metacontent_extent=extent;\n}\n\nstatic inline void SetPixelOpacity(const Image *magick_restrict image,\n  const Quantum alpha,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=QuantumRange-alpha;\n}\n\nstatic inline void SetPixelRed(const Image *magick_restrict image,\n  const Quantum red,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[RedPixelChannel].offset]=red;\n}\n\nstatic inline void SetPixelRedTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[RedPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelYellow(const Image *magick_restrict image,\n  const Quantum yellow,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[YellowPixelChannel].offset]=yellow;\n}\n\nstatic inline void SetPixelYellowTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[YellowPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelY(const Image *magick_restrict image,\n  const Quantum y,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[YPixelChannel].offset]=y;\n}\n\nstatic inline void SetPixelYTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[YPixelChannel].traits=traits;\n}\n\n#if defined(__cplusplus) || defined(c_plusplus)\n}\n#endif\n\n#endif\n"], "fixing_code": ["/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%              EEEEE  N   N  H   H   AAA   N   N   CCCC  EEEEE                %\n%              E      NN  N  H   H  A   A  NN  N  C      E                    %\n%              EEE    N N N  HHHHH  AAAAA  N N N  C      EEE                  %\n%              E      N  NN  H   H  A   A  N  NN  C      E                    %\n%              EEEEE  N   N  H   H  A   A  N   N   CCCC  EEEEE                %\n%                                                                             %\n%                                                                             %\n%                    MagickCore Image Enhancement Methods                     %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                                 July 1992                                   %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2019 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    https://imagemagick.org/script/license.php                               %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/accelerate-private.h\"\n#include \"MagickCore/artifact.h\"\n#include \"MagickCore/attribute.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/cache-private.h\"\n#include \"MagickCore/cache-view.h\"\n#include \"MagickCore/channel.h\"\n#include \"MagickCore/color.h\"\n#include \"MagickCore/color-private.h\"\n#include \"MagickCore/colorspace.h\"\n#include \"MagickCore/colorspace-private.h\"\n#include \"MagickCore/composite-private.h\"\n#include \"MagickCore/enhance.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/fx.h\"\n#include \"MagickCore/gem.h\"\n#include \"MagickCore/gem-private.h\"\n#include \"MagickCore/geometry.h\"\n#include \"MagickCore/histogram.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/monitor-private.h\"\n#include \"MagickCore/option.h\"\n#include \"MagickCore/pixel.h\"\n#include \"MagickCore/pixel-accessor.h\"\n#include \"MagickCore/quantum.h\"\n#include \"MagickCore/quantum-private.h\"\n#include \"MagickCore/resample.h\"\n#include \"MagickCore/resample-private.h\"\n#include \"MagickCore/resource_.h\"\n#include \"MagickCore/statistic.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/string-private.h\"\n#include \"MagickCore/thread-private.h\"\n#include \"MagickCore/threshold.h\"\n#include \"MagickCore/token.h\"\n#include \"MagickCore/xml-tree.h\"\n#include \"MagickCore/xml-tree-private.h\"\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     A u t o G a m m a I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AutoGammaImage() extract the 'mean' from the image and adjust the image\n%  to try make set its gamma appropriatally.\n%\n%  The format of the AutoGammaImage method is:\n%\n%      MagickBooleanType AutoGammaImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: The image to auto-level\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType AutoGammaImage(Image *image,\n  ExceptionInfo *exception)\n{\n  double\n    gamma,\n    log_mean,\n    mean,\n    sans;\n\n  MagickStatusType\n    status;\n\n  register ssize_t\n    i;\n\n  log_mean=log(0.5);\n  if (image->channel_mask == DefaultChannels)\n    {\n      /*\n        Apply gamma correction equally across all given channels.\n      */\n      (void) GetImageMean(image,&mean,&sans,exception);\n      gamma=log(mean*QuantumScale)/log_mean;\n      return(LevelImage(image,0.0,(double) QuantumRange,gamma,exception));\n    }\n  /*\n    Auto-gamma each channel separately.\n  */\n  status=MagickTrue;\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    ChannelType\n      channel_mask;\n\n    PixelChannel channel = GetPixelChannelChannel(image,i);\n    PixelTrait traits = GetPixelChannelTraits(image,channel);\n    if ((traits & UpdatePixelTrait) == 0)\n      continue;\n    channel_mask=SetImageChannelMask(image,(ChannelType) (1UL << i));\n    status=GetImageMean(image,&mean,&sans,exception);\n    gamma=log(mean*QuantumScale)/log_mean;\n    status&=LevelImage(image,0.0,(double) QuantumRange,gamma,exception);\n    (void) SetImageChannelMask(image,channel_mask);\n    if (status == MagickFalse)\n      break;\n  }\n  return(status != 0 ? MagickTrue : MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     A u t o L e v e l I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  AutoLevelImage() adjusts the levels of a particular image channel by\n%  scaling the minimum and maximum values to the full quantum range.\n%\n%  The format of the LevelImage method is:\n%\n%      MagickBooleanType AutoLevelImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: The image to auto-level\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType AutoLevelImage(Image *image,\n  ExceptionInfo *exception)\n{\n  return(MinMaxStretchImage(image,0.0,0.0,1.0,exception));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     B r i g h t n e s s C o n t r a s t I m a g e                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  BrightnessContrastImage() changes the brightness and/or contrast of an\n%  image.  It converts the brightness and contrast parameters into slope and\n%  intercept and calls a polynomical function to apply to the image.\n%\n%  The format of the BrightnessContrastImage method is:\n%\n%      MagickBooleanType BrightnessContrastImage(Image *image,\n%        const double brightness,const double contrast,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o brightness: the brightness percent (-100 .. 100).\n%\n%    o contrast: the contrast percent (-100 .. 100).\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType BrightnessContrastImage(Image *image,\n  const double brightness,const double contrast,ExceptionInfo *exception)\n{\n#define BrightnessContastImageTag  \"BrightnessContast/Image\"\n\n  double\n    alpha,\n    coefficients[2],\n    intercept,\n    slope;\n\n  MagickBooleanType\n    status;\n\n  /*\n    Compute slope and intercept.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  alpha=contrast;\n  slope=tan((double) (MagickPI*(alpha/100.0+1.0)/4.0));\n  if (slope < 0.0)\n    slope=0.0;\n  intercept=brightness/100.0+((100-brightness)/200.0)*(1.0-slope);\n  coefficients[0]=slope;\n  coefficients[1]=intercept;\n  status=FunctionImage(image,PolynomialFunction,2,coefficients,exception);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C L A H E I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  CLAHEImage() is a variant of adaptive histogram equalization in which the\n%  contrast amplification is limited, so as to reduce this problem of noise\n%  amplification.\n%\n%  Adapted from implementation by Karel Zuiderveld, karel@cv.ruu.nl in\n%  \"Graphics Gems IV\", Academic Press, 1994.\n%\n%  The format of the CLAHEImage method is:\n%\n%      MagickBooleanType CLAHEImage(Image *image,const size_t width,\n%        const size_t height,const size_t number_bins,const double clip_limit,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o width: the width of the tile divisions to use in horizontal direction.\n%\n%    o height: the height of the tile divisions to use in vertical direction.\n%\n%    o number_bins: number of bins for histogram (\"dynamic range\").\n%\n%    o clip_limit: contrast limit for localised changes in contrast. A limit\n%      less than 1 results in standard non-contrast limited AHE.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\ntypedef struct _RangeInfo\n{\n  unsigned short\n    min,\n    max;\n} RangeInfo;\n\nstatic void ClipCLAHEHistogram(const double clip_limit,const size_t number_bins,\n  size_t *histogram)\n{\n#define NumberCLAHEGrays  (65536)\n\n  register ssize_t\n    i;\n\n  size_t\n    cumulative_excess,\n    previous_excess,\n    step;\n\n  ssize_t\n    excess;\n\n  /*\n    Compute total number of excess pixels.\n  */\n  cumulative_excess=0;\n  for (i=0; i < (ssize_t) number_bins; i++)\n  {\n    excess=(ssize_t) histogram[i]-(ssize_t) clip_limit;\n    if (excess > 0)\n      cumulative_excess+=excess;\n  }\n  /*\n    Clip histogram and redistribute excess pixels across all bins.\n  */\n  step=cumulative_excess/number_bins;\n  excess=(ssize_t) (clip_limit-step);\n  for (i=0; i < (ssize_t) number_bins; i++)\n  {\n    if ((double) histogram[i] > clip_limit)\n      histogram[i]=(size_t) clip_limit;\n    else\n      if ((ssize_t) histogram[i] > excess)\n        {\n          cumulative_excess-=histogram[i]-excess;\n          histogram[i]=(size_t) clip_limit;\n        }\n      else\n        {\n          cumulative_excess-=step;\n          histogram[i]+=step;\n        }\n  }\n  /*\n    Redistribute remaining excess.\n  */\n  do\n  {\n    register size_t\n      *p;\n\n    size_t\n      *q;\n\n    previous_excess=cumulative_excess;\n    p=histogram;\n    q=histogram+number_bins;\n    while ((cumulative_excess != 0) && (p < q))\n    {\n      step=number_bins/cumulative_excess;\n      if (step < 1)\n        step=1;\n      for (p=histogram; (p < q) && (cumulative_excess != 0); p+=step)\n        if ((double) *p < clip_limit)\n          {\n            (*p)++;\n            cumulative_excess--;\n          }\n      p++;\n    }\n  } while ((cumulative_excess != 0) && (cumulative_excess < previous_excess));\n}\n\nstatic void GenerateCLAHEHistogram(const RectangleInfo *clahe_info,\n  const RectangleInfo *tile_info,const size_t number_bins,\n  const unsigned short *lut,const unsigned short *pixels,size_t *histogram)\n{\n  register const unsigned short\n    *p;\n\n  register ssize_t\n    i;\n\n  /*\n    Classify the pixels into a gray histogram.\n  */\n  for (i=0; i < (ssize_t) number_bins; i++)\n    histogram[i]=0L;\n  p=pixels;\n  for (i=0; i < (ssize_t) tile_info->height; i++)\n  {\n    const unsigned short\n      *q;\n\n    q=p+tile_info->width;\n    while (p < q)\n      histogram[lut[*p++]]++;\n    q+=clahe_info->width;\n    p=q-tile_info->width;\n  }\n}\n\nstatic void InterpolateCLAHE(const RectangleInfo *clahe_info,const size_t *Q12,\n  const size_t *Q22,const size_t *Q11,const size_t *Q21,\n  const RectangleInfo *tile,const unsigned short *lut,unsigned short *pixels)\n{\n  ssize_t\n    y;\n\n  unsigned short\n    intensity;\n\n  /*\n    Bilinear interpolate four tiles to eliminate boundary artifacts.\n  */\n  for (y=(ssize_t) tile->height; y > 0; y--)\n  {\n    register ssize_t\n      x;\n\n    for (x=(ssize_t) tile->width; x > 0; x--)\n    {\n      intensity=lut[*pixels];\n      *pixels++=(unsigned short ) (PerceptibleReciprocal((double) tile->width*\n        tile->height)*(y*(x*Q12[intensity]+(tile->width-x)*Q22[intensity])+\n        (tile->height-y)*(x*Q11[intensity]+(tile->width-x)*Q21[intensity])));\n    }\n    pixels+=(clahe_info->width-tile->width);\n  }\n}\n\nstatic void GenerateCLAHELut(const RangeInfo *range_info,\n  const size_t number_bins,unsigned short *lut)\n{\n  ssize_t\n    i;\n\n  unsigned short\n    delta;\n\n  /*\n    Scale input image [intensity min,max] to [0,number_bins-1].\n  */\n  delta=(unsigned short) ((range_info->max-range_info->min)/number_bins+1);\n  for (i=(ssize_t) range_info->min; i <= (ssize_t) range_info->max; i++)\n    lut[i]=(unsigned short) ((i-range_info->min)/delta);\n}\n\nstatic void MapCLAHEHistogram(const RangeInfo *range_info,\n  const size_t number_bins,const size_t number_pixels,size_t *histogram)\n{\n  double\n    scale,\n    sum;\n\n  register ssize_t\n    i;\n\n  /*\n    Rescale histogram to range [min-intensity .. max-intensity].\n  */\n  scale=(double) (range_info->max-range_info->min)/number_pixels;\n  sum=0.0;\n  for (i=0; i < (ssize_t) number_bins; i++)\n  {\n    sum+=histogram[i];\n    histogram[i]=(size_t) (range_info->min+scale*sum);\n    if (histogram[i] > range_info->max)\n      histogram[i]=range_info->max;\n  }\n}\n\nstatic MagickBooleanType CLAHE(const RectangleInfo *clahe_info,\n  const RectangleInfo *tile_info,const RangeInfo *range_info,\n  const size_t number_bins,const double clip_limit,unsigned short *pixels)\n{\n  MemoryInfo\n    *tile_cache;\n\n  register unsigned short\n    *p;\n\n  size_t\n    limit,\n    *tiles;\n\n  ssize_t\n    y;\n\n  unsigned short\n    lut[NumberCLAHEGrays];\n\n  /*\n    Constrast limited adapted histogram equalization.\n  */\n  if (clip_limit == 1.0)\n    return(MagickTrue);\n  tile_cache=AcquireVirtualMemory((size_t) clahe_info->x*clahe_info->y,\n    number_bins*sizeof(*tiles));\n  if (tile_cache == (MemoryInfo *) NULL)\n    return(MagickFalse);\n  tiles=(size_t *) GetVirtualMemoryBlob(tile_cache);\n  limit=(size_t) (clip_limit*(tile_info->width*tile_info->height)/number_bins);\n  if (limit < 1UL)\n    limit=1UL;\n  /*\n    Generate greylevel mappings for each tile.\n  */\n  GenerateCLAHELut(range_info,number_bins,lut);\n  p=pixels;\n  for (y=0; y < (ssize_t) clahe_info->y; y++)\n  {\n    register ssize_t\n      x;\n\n    for (x=0; x < (ssize_t) clahe_info->x; x++)\n    {\n      size_t\n        *histogram;\n\n      histogram=tiles+(number_bins*(y*clahe_info->x+x));\n      GenerateCLAHEHistogram(clahe_info,tile_info,number_bins,lut,p,histogram);\n      ClipCLAHEHistogram((double) limit,number_bins,histogram);\n      MapCLAHEHistogram(range_info,number_bins,tile_info->width*\n        tile_info->height,histogram);\n      p+=tile_info->width;\n    }\n    p+=clahe_info->width*(tile_info->height-1);\n  }\n  /*\n    Interpolate greylevel mappings to get CLAHE image.\n  */\n  p=pixels;\n  for (y=0; y <= (ssize_t) clahe_info->y; y++)\n  {\n    OffsetInfo\n      offset;\n\n    RectangleInfo\n      tile;\n\n    register ssize_t\n      x;\n\n    tile.height=tile_info->height;\n    tile.y=y-1;\n    offset.y=tile.y+1;\n    if (y == 0)\n      {\n        /*\n          Top row.\n        */\n        tile.height=tile_info->height >> 1;\n        tile.y=0;\n        offset.y=0;\n      }\n    else\n      if (y == (ssize_t) clahe_info->y)\n        {\n          /*\n            Bottom row.\n          */\n          tile.height=(tile_info->height+1) >> 1;\n          tile.y=clahe_info->y-1;\n          offset.y=tile.y;\n        }\n    for (x=0; x <= (ssize_t) clahe_info->x; x++)\n    {\n      tile.width=tile_info->width;\n      tile.x=x-1;\n      offset.x=tile.x+1;\n      if (x == 0)\n        {\n          /*\n            Left column.\n          */\n          tile.width=tile_info->width >> 1;\n          tile.x=0;\n          offset.x=0;\n        }\n      else\n        if (x == (ssize_t) clahe_info->x)\n          {\n            /*\n              Right column.\n            */\n            tile.width=(tile_info->width+1) >> 1;\n            tile.x=clahe_info->x-1;\n            offset.x=tile.x;\n          }\n      InterpolateCLAHE(clahe_info,\n        tiles+(number_bins*(tile.y*clahe_info->x+tile.x)),     /* Q12 */\n        tiles+(number_bins*(tile.y*clahe_info->x+offset.x)),   /* Q22 */\n        tiles+(number_bins*(offset.y*clahe_info->x+tile.x)),   /* Q11 */\n        tiles+(number_bins*(offset.y*clahe_info->x+offset.x)), /* Q21 */\n        &tile,lut,p);\n      p+=tile.width;\n    }\n    p+=clahe_info->width*(tile.height-1);\n  }\n  tile_cache=RelinquishVirtualMemory(tile_cache);\n  return(MagickTrue);\n}\n\nMagickExport MagickBooleanType CLAHEImage(Image *image,const size_t width,\n  const size_t height,const size_t number_bins,const double clip_limit,\n  ExceptionInfo *exception)\n{\n#define CLAHEImageTag  \"CLAHE/Image\"\n\n  CacheView\n    *image_view;\n\n  ColorspaceType\n    colorspace;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  MemoryInfo\n    *pixel_cache;\n\n  RangeInfo\n    range_info;\n\n  RectangleInfo\n    clahe_info,\n    tile_info;\n\n  size_t\n    n;\n\n  ssize_t\n    y;\n\n  unsigned short\n    *pixels;\n\n  /*\n    Configure CLAHE parameters.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  range_info.min=0;\n  range_info.max=NumberCLAHEGrays-1;\n  tile_info.width=width;\n  if (tile_info.width == 0)\n    tile_info.width=image->columns >> 3;\n  tile_info.height=height;\n  if (tile_info.height == 0)\n    tile_info.height=image->rows >> 3;\n  tile_info.x=0;\n  if ((image->columns % tile_info.width) != 0)\n    tile_info.x=(ssize_t) tile_info.width-(image->columns % tile_info.width);\n  tile_info.y=0;\n  if ((image->rows % tile_info.height) != 0)\n    tile_info.y=(ssize_t) tile_info.height-(image->rows % tile_info.height);\n  clahe_info.width=image->columns+tile_info.x;\n  clahe_info.height=image->rows+tile_info.y;\n  clahe_info.x=(ssize_t) clahe_info.width/tile_info.width;\n  clahe_info.y=(ssize_t) clahe_info.height/tile_info.height;\n  pixel_cache=AcquireVirtualMemory(clahe_info.width,clahe_info.height*\n    sizeof(*pixels));\n  if (pixel_cache == (MemoryInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  pixels=(unsigned short *) GetVirtualMemoryBlob(pixel_cache);\n  colorspace=image->colorspace;\n  if (TransformImageColorspace(image,LabColorspace,exception) == MagickFalse)\n    {\n      pixel_cache=RelinquishVirtualMemory(pixel_cache);\n      return(MagickFalse);\n    }\n  /*\n    Initialize CLAHE pixels.\n  */\n  image_view=AcquireVirtualCacheView(image,exception);\n  progress=0;\n  status=MagickTrue;\n  n=0;\n  for (y=0; y < (ssize_t) clahe_info.height; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,-(tile_info.x >> 1),y-\n      (tile_info.y >> 1),clahe_info.width,1,exception);\n    if (p == (const Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) clahe_info.width; x++)\n    {\n      pixels[n++]=ScaleQuantumToShort(p[0]);\n      p+=GetPixelChannels(image);\n    }\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,CLAHEImageTag,progress,2*\n          GetPixelChannels(image));\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  status=CLAHE(&clahe_info,&tile_info,&range_info,number_bins == 0 ?\n    (size_t) 128 : MagickMin(number_bins,256),clip_limit,pixels);\n  if (status == MagickFalse)\n    (void) ThrowMagickException(exception,GetMagickModule(),\n      ResourceLimitError,\"MemoryAllocationFailed\",\"`%s'\",image->filename);\n  /*\n    Push CLAHE pixels to CLAHE image.\n  */\n  image_view=AcquireAuthenticCacheView(image,exception);\n  n=clahe_info.width*(tile_info.y >> 1);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    n+=tile_info.x >> 1;\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      q[0]=ScaleShortToQuantum(pixels[n++]);\n      q+=GetPixelChannels(image);\n    }\n    n+=(clahe_info.width-image->columns-(tile_info.x >> 1));\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,CLAHEImageTag,progress,2*\n          GetPixelChannels(image));\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  pixel_cache=RelinquishVirtualMemory(pixel_cache);\n  if (TransformImageColorspace(image,colorspace,exception) == MagickFalse)\n    status=MagickFalse;\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C l u t I m a g e                                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ClutImage() replaces each color value in the given image, by using it as an\n%  index to lookup a replacement color value in a Color Look UP Table in the\n%  form of an image.  The values are extracted along a diagonal of the CLUT\n%  image so either a horizontal or vertial gradient image can be used.\n%\n%  Typically this is used to either re-color a gray-scale image according to a\n%  color gradient in the CLUT image, or to perform a freeform histogram\n%  (level) adjustment according to the (typically gray-scale) gradient in the\n%  CLUT image.\n%\n%  When the 'channel' mask includes the matte/alpha transparency channel but\n%  one image has no such channel it is assumed that that image is a simple\n%  gray-scale image that will effect the alpha channel values, either for\n%  gray-scale coloring (with transparent or semi-transparent colors), or\n%  a histogram adjustment of existing alpha channel values.   If both images\n%  have matte channels, direct and normal indexing is applied, which is rarely\n%  used.\n%\n%  The format of the ClutImage method is:\n%\n%      MagickBooleanType ClutImage(Image *image,Image *clut_image,\n%        const PixelInterpolateMethod method,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image, which is replaced by indexed CLUT values\n%\n%    o clut_image: the color lookup table image for replacement color values.\n%\n%    o method: the pixel interpolation method.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ClutImage(Image *image,const Image *clut_image,\n  const PixelInterpolateMethod method,ExceptionInfo *exception)\n{\n#define ClutImageTag  \"Clut/Image\"\n\n  CacheView\n    *clut_view,\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  PixelInfo\n    *clut_map;\n\n  register ssize_t\n    i;\n\n  ssize_t adjust,\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(clut_image != (Image *) NULL);\n  assert(clut_image->signature == MagickCoreSignature);\n  if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)\n    return(MagickFalse);\n  if ((IsGrayColorspace(image->colorspace) != MagickFalse) &&\n      (IsGrayColorspace(clut_image->colorspace) == MagickFalse))\n    (void) SetImageColorspace(image,sRGBColorspace,exception);\n  clut_map=(PixelInfo *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*clut_map));\n  if (clut_map == (PixelInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  /*\n    Clut image.\n  */\n  status=MagickTrue;\n  progress=0;\n  adjust=(ssize_t) (clut_image->interpolate == IntegerInterpolatePixel ? 0 : 1);\n  clut_view=AcquireVirtualCacheView(clut_image,exception);\n  for (i=0; i <= (ssize_t) MaxMap; i++)\n  {\n    GetPixelInfo(clut_image,clut_map+i);\n    status=InterpolatePixelInfo(clut_image,clut_view,method,\n      (double) i*(clut_image->columns-adjust)/MaxMap,(double) i*\n      (clut_image->rows-adjust)/MaxMap,clut_map+i,exception);\n    if (status == MagickFalse)\n      break;\n  }\n  clut_view=DestroyCacheView(clut_view);\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    PixelInfo\n      pixel;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    GetPixelInfo(image,&pixel);\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      PixelTrait\n        traits;\n\n      GetPixelInfoPixel(image,q,&pixel);\n      traits=GetPixelChannelTraits(image,RedPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.red=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.red))].red;\n      traits=GetPixelChannelTraits(image,GreenPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.green=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.green))].green;\n      traits=GetPixelChannelTraits(image,BluePixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.blue=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.blue))].blue;\n      traits=GetPixelChannelTraits(image,BlackPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.black=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.black))].black;\n      traits=GetPixelChannelTraits(image,AlphaPixelChannel);\n      if ((traits & UpdatePixelTrait) != 0)\n        pixel.alpha=clut_map[ScaleQuantumToMap(ClampToQuantum(\n          pixel.alpha))].alpha;\n      SetPixelViaPixelInfo(image,&pixel,q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ClutImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  clut_map=(PixelInfo *) RelinquishMagickMemory(clut_map);\n  if ((clut_image->alpha_trait != UndefinedPixelTrait) &&\n      ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0))\n    (void) SetImageAlphaChannel(image,ActivateAlphaChannel,exception);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C o l o r D e c i s i o n L i s t I m a g e                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ColorDecisionListImage() accepts a lightweight Color Correction Collection\n%  (CCC) file which solely contains one or more color corrections and applies\n%  the correction to the image.  Here is a sample CCC file:\n%\n%    <ColorCorrectionCollection xmlns=\"urn:ASC:CDL:v1.2\">\n%          <ColorCorrection id=\"cc03345\">\n%                <SOPNode>\n%                     <Slope> 0.9 1.2 0.5 </Slope>\n%                     <Offset> 0.4 -0.5 0.6 </Offset>\n%                     <Power> 1.0 0.8 1.5 </Power>\n%                </SOPNode>\n%                <SATNode>\n%                     <Saturation> 0.85 </Saturation>\n%                </SATNode>\n%          </ColorCorrection>\n%    </ColorCorrectionCollection>\n%\n%  which includes the slop, offset, and power for each of the RGB channels\n%  as well as the saturation.\n%\n%  The format of the ColorDecisionListImage method is:\n%\n%      MagickBooleanType ColorDecisionListImage(Image *image,\n%        const char *color_correction_collection,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o color_correction_collection: the color correction collection in XML.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ColorDecisionListImage(Image *image,\n  const char *color_correction_collection,ExceptionInfo *exception)\n{\n#define ColorDecisionListCorrectImageTag  \"ColorDecisionList/Image\"\n\n  typedef struct _Correction\n  {\n    double\n      slope,\n      offset,\n      power;\n  } Correction;\n\n  typedef struct _ColorCorrection\n  {\n    Correction\n      red,\n      green,\n      blue;\n\n    double\n      saturation;\n  } ColorCorrection;\n\n  CacheView\n    *image_view;\n\n  char\n    token[MagickPathExtent];\n\n  ColorCorrection\n    color_correction;\n\n  const char\n    *content,\n    *p;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  PixelInfo\n    *cdl_map;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  XMLTreeInfo\n    *cc,\n    *ccc,\n    *sat,\n    *sop;\n\n  /*\n    Allocate and initialize cdl maps.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (color_correction_collection == (const char *) NULL)\n    return(MagickFalse);\n  ccc=NewXMLTree((const char *) color_correction_collection,exception);\n  if (ccc == (XMLTreeInfo *) NULL)\n    return(MagickFalse);\n  cc=GetXMLTreeChild(ccc,\"ColorCorrection\");\n  if (cc == (XMLTreeInfo *) NULL)\n    {\n      ccc=DestroyXMLTree(ccc);\n      return(MagickFalse);\n    }\n  color_correction.red.slope=1.0;\n  color_correction.red.offset=0.0;\n  color_correction.red.power=1.0;\n  color_correction.green.slope=1.0;\n  color_correction.green.offset=0.0;\n  color_correction.green.power=1.0;\n  color_correction.blue.slope=1.0;\n  color_correction.blue.offset=0.0;\n  color_correction.blue.power=1.0;\n  color_correction.saturation=0.0;\n  sop=GetXMLTreeChild(cc,\"SOPNode\");\n  if (sop != (XMLTreeInfo *) NULL)\n    {\n      XMLTreeInfo\n        *offset,\n        *power,\n        *slope;\n\n      slope=GetXMLTreeChild(sop,\"Slope\");\n      if (slope != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(slope);\n          p=(const char *) content;\n          for (i=0; (*p != '\\0') && (i < 3); i++)\n          {\n            GetNextToken(p,&p,MagickPathExtent,token);\n            if (*token == ',')\n              GetNextToken(p,&p,MagickPathExtent,token);\n            switch (i)\n            {\n              case 0:\n              {\n                color_correction.red.slope=StringToDouble(token,(char **) NULL);\n                break;\n              }\n              case 1:\n              {\n                color_correction.green.slope=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 2:\n              {\n                color_correction.blue.slope=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n            }\n          }\n        }\n      offset=GetXMLTreeChild(sop,\"Offset\");\n      if (offset != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(offset);\n          p=(const char *) content;\n          for (i=0; (*p != '\\0') && (i < 3); i++)\n          {\n            GetNextToken(p,&p,MagickPathExtent,token);\n            if (*token == ',')\n              GetNextToken(p,&p,MagickPathExtent,token);\n            switch (i)\n            {\n              case 0:\n              {\n                color_correction.red.offset=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 1:\n              {\n                color_correction.green.offset=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 2:\n              {\n                color_correction.blue.offset=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n            }\n          }\n        }\n      power=GetXMLTreeChild(sop,\"Power\");\n      if (power != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(power);\n          p=(const char *) content;\n          for (i=0; (*p != '\\0') && (i < 3); i++)\n          {\n            GetNextToken(p,&p,MagickPathExtent,token);\n            if (*token == ',')\n              GetNextToken(p,&p,MagickPathExtent,token);\n            switch (i)\n            {\n              case 0:\n              {\n                color_correction.red.power=StringToDouble(token,(char **) NULL);\n                break;\n              }\n              case 1:\n              {\n                color_correction.green.power=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n              case 2:\n              {\n                color_correction.blue.power=StringToDouble(token,\n                  (char **) NULL);\n                break;\n              }\n            }\n          }\n        }\n    }\n  sat=GetXMLTreeChild(cc,\"SATNode\");\n  if (sat != (XMLTreeInfo *) NULL)\n    {\n      XMLTreeInfo\n        *saturation;\n\n      saturation=GetXMLTreeChild(sat,\"Saturation\");\n      if (saturation != (XMLTreeInfo *) NULL)\n        {\n          content=GetXMLTreeContent(saturation);\n          p=(const char *) content;\n          GetNextToken(p,&p,MagickPathExtent,token);\n          color_correction.saturation=StringToDouble(token,(char **) NULL);\n        }\n    }\n  ccc=DestroyXMLTree(ccc);\n  if (image->debug != MagickFalse)\n    {\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  Color Correction Collection:\");\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.red.slope: %g\",color_correction.red.slope);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.red.offset: %g\",color_correction.red.offset);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.red.power: %g\",color_correction.red.power);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.green.slope: %g\",color_correction.green.slope);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.green.offset: %g\",color_correction.green.offset);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.green.power: %g\",color_correction.green.power);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.blue.slope: %g\",color_correction.blue.slope);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.blue.offset: %g\",color_correction.blue.offset);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.blue.power: %g\",color_correction.blue.power);\n      (void) LogMagickEvent(TransformEvent,GetMagickModule(),\n        \"  color_correction.saturation: %g\",color_correction.saturation);\n    }\n  cdl_map=(PixelInfo *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*cdl_map));\n  if (cdl_map == (PixelInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  for (i=0; i <= (ssize_t) MaxMap; i++)\n  {\n    cdl_map[i].red=(double) ScaleMapToQuantum((double)\n      (MaxMap*(pow(color_correction.red.slope*i/MaxMap+\n      color_correction.red.offset,color_correction.red.power))));\n    cdl_map[i].green=(double) ScaleMapToQuantum((double)\n      (MaxMap*(pow(color_correction.green.slope*i/MaxMap+\n      color_correction.green.offset,color_correction.green.power))));\n    cdl_map[i].blue=(double) ScaleMapToQuantum((double)\n      (MaxMap*(pow(color_correction.blue.slope*i/MaxMap+\n      color_correction.blue.offset,color_correction.blue.power))));\n  }\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Apply transfer function to colormap.\n      */\n      double\n        luma;\n\n      luma=0.21267f*image->colormap[i].red+0.71526*image->colormap[i].green+\n        0.07217f*image->colormap[i].blue;\n      image->colormap[i].red=luma+color_correction.saturation*cdl_map[\n        ScaleQuantumToMap(ClampToQuantum(image->colormap[i].red))].red-luma;\n      image->colormap[i].green=luma+color_correction.saturation*cdl_map[\n        ScaleQuantumToMap(ClampToQuantum(image->colormap[i].green))].green-luma;\n      image->colormap[i].blue=luma+color_correction.saturation*cdl_map[\n        ScaleQuantumToMap(ClampToQuantum(image->colormap[i].blue))].blue-luma;\n    }\n  /*\n    Apply transfer function to image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    double\n      luma;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      luma=0.21267f*GetPixelRed(image,q)+0.71526*GetPixelGreen(image,q)+\n        0.07217f*GetPixelBlue(image,q);\n      SetPixelRed(image,ClampToQuantum(luma+color_correction.saturation*\n        (cdl_map[ScaleQuantumToMap(GetPixelRed(image,q))].red-luma)),q);\n      SetPixelGreen(image,ClampToQuantum(luma+color_correction.saturation*\n        (cdl_map[ScaleQuantumToMap(GetPixelGreen(image,q))].green-luma)),q);\n      SetPixelBlue(image,ClampToQuantum(luma+color_correction.saturation*\n        (cdl_map[ScaleQuantumToMap(GetPixelBlue(image,q))].blue-luma)),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ColorDecisionListCorrectImageTag,\n          progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  cdl_map=(PixelInfo *) RelinquishMagickMemory(cdl_map);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C o n t r a s t I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ContrastImage() enhances the intensity differences between the lighter and\n%  darker elements of the image.  Set sharpen to a MagickTrue to increase the\n%  image contrast otherwise the contrast is reduced.\n%\n%  The format of the ContrastImage method is:\n%\n%      MagickBooleanType ContrastImage(Image *image,\n%        const MagickBooleanType sharpen,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o sharpen: Increase or decrease image contrast.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic void Contrast(const int sign,double *red,double *green,double *blue)\n{\n  double\n    brightness,\n    hue,\n    saturation;\n\n  /*\n    Enhance contrast: dark color become darker, light color become lighter.\n  */\n  assert(red != (double *) NULL);\n  assert(green != (double *) NULL);\n  assert(blue != (double *) NULL);\n  hue=0.0;\n  saturation=0.0;\n  brightness=0.0;\n  ConvertRGBToHSB(*red,*green,*blue,&hue,&saturation,&brightness);\n  brightness+=0.5*sign*(0.5*(sin((double) (MagickPI*(brightness-0.5)))+1.0)-\n    brightness);\n  if (brightness > 1.0)\n    brightness=1.0;\n  else\n    if (brightness < 0.0)\n      brightness=0.0;\n  ConvertHSBToRGB(hue,saturation,brightness,red,green,blue);\n}\n\nMagickExport MagickBooleanType ContrastImage(Image *image,\n  const MagickBooleanType sharpen,ExceptionInfo *exception)\n{\n#define ContrastImageTag  \"Contrast/Image\"\n\n  CacheView\n    *image_view;\n\n  int\n    sign;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateContrastImage(image,sharpen,exception) != MagickFalse)\n    return(MagickTrue);\n#endif\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  sign=sharpen != MagickFalse ? 1 : -1;\n  if (image->storage_class == PseudoClass)\n    {\n      /*\n        Contrast enhance colormap.\n      */\n      for (i=0; i < (ssize_t) image->colors; i++)\n      {\n        double\n          blue,\n          green,\n          red;\n\n        red=(double) image->colormap[i].red;\n        green=(double) image->colormap[i].green;\n        blue=(double) image->colormap[i].blue;\n        Contrast(sign,&red,&green,&blue);\n        image->colormap[i].red=(MagickRealType) red;\n        image->colormap[i].green=(MagickRealType) green;\n        image->colormap[i].blue=(MagickRealType) blue;\n      }\n    }\n  /*\n    Contrast enhance image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    double\n      blue,\n      green,\n      red;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      red=(double) GetPixelRed(image,q);\n      green=(double) GetPixelGreen(image,q);\n      blue=(double) GetPixelBlue(image,q);\n      Contrast(sign,&red,&green,&blue);\n      SetPixelRed(image,ClampToQuantum(red),q);\n      SetPixelGreen(image,ClampToQuantum(green),q);\n      SetPixelBlue(image,ClampToQuantum(blue),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ContrastImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     C o n t r a s t S t r e t c h I m a g e                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ContrastStretchImage() is a simple image enhancement technique that attempts\n%  to improve the contrast in an image by 'stretching' the range of intensity\n%  values it contains to span a desired range of values. It differs from the\n%  more sophisticated histogram equalization in that it can only apply a\n%  linear scaling function to the image pixel values.  As a result the\n%  'enhancement' is less harsh.\n%\n%  The format of the ContrastStretchImage method is:\n%\n%      MagickBooleanType ContrastStretchImage(Image *image,\n%        const char *levels,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: the black point.\n%\n%    o white_point: the white point.\n%\n%    o levels: Specify the levels where the black and white points have the\n%      range of 0 to number-of-pixels (e.g. 1%, 10x90%, etc.).\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType ContrastStretchImage(Image *image,\n  const double black_point,const double white_point,ExceptionInfo *exception)\n{\n#define MaxRange(color)  ((double) ScaleQuantumToMap((Quantum) (color)))\n#define ContrastStretchImageTag  \"ContrastStretch/Image\"\n\n  CacheView\n    *image_view;\n\n  double\n    *black,\n    *histogram,\n    *stretch_map,\n    *white;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate histogram and stretch map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (SetImageGray(image,exception) != MagickFalse)\n    (void) SetImageColorspace(image,GRAYColorspace,exception);\n  black=(double *) AcquireQuantumMemory(MaxPixelChannels,sizeof(*black));\n  white=(double *) AcquireQuantumMemory(MaxPixelChannels,sizeof(*white));\n  histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*histogram));\n  stretch_map=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*stretch_map));\n  if ((black == (double *) NULL) || (white == (double *) NULL) ||\n      (histogram == (double *) NULL) || (stretch_map == (double *) NULL))\n    {\n      if (stretch_map != (double *) NULL)\n        stretch_map=(double *) RelinquishMagickMemory(stretch_map);\n      if (histogram != (double *) NULL)\n        histogram=(double *) RelinquishMagickMemory(histogram);\n      if (white != (double *) NULL)\n        white=(double *) RelinquishMagickMemory(white);\n      if (black != (double *) NULL)\n        black=(double *) RelinquishMagickMemory(black);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        image->filename);\n    }\n  /*\n    Form histogram.\n  */\n  status=MagickTrue;\n  (void) memset(histogram,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*histogram));\n  image_view=AcquireVirtualCacheView(image,exception);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);\n    if (p == (const Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        pixel;\n\n      pixel=GetPixelIntensity(image,p);\n      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n      {\n        if (image->channel_mask != DefaultChannels)\n          pixel=(double) p[i];\n        histogram[GetPixelChannels(image)*ScaleQuantumToMap(\n          ClampToQuantum(pixel))+i]++;\n      }\n      p+=GetPixelChannels(image);\n    }\n  }\n  image_view=DestroyCacheView(image_view);\n  /*\n    Find the histogram boundaries by locating the black/white levels.\n  */\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    double\n      intensity;\n\n    register ssize_t\n      j;\n\n    black[i]=0.0;\n    white[i]=MaxRange(QuantumRange);\n    intensity=0.0;\n    for (j=0; j <= (ssize_t) MaxMap; j++)\n    {\n      intensity+=histogram[GetPixelChannels(image)*j+i];\n      if (intensity > black_point)\n        break;\n    }\n    black[i]=(double) j;\n    intensity=0.0;\n    for (j=(ssize_t) MaxMap; j != 0; j--)\n    {\n      intensity+=histogram[GetPixelChannels(image)*j+i];\n      if (intensity > ((double) image->columns*image->rows-white_point))\n        break;\n    }\n    white[i]=(double) j;\n  }\n  histogram=(double *) RelinquishMagickMemory(histogram);\n  /*\n    Stretch the histogram to create the stretched image mapping.\n  */\n  (void) memset(stretch_map,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*stretch_map));\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    register ssize_t\n      j;\n\n    for (j=0; j <= (ssize_t) MaxMap; j++)\n    {\n      double\n        gamma;\n\n      gamma=PerceptibleReciprocal(white[i]-black[i]);\n      if (j < (ssize_t) black[i])\n        stretch_map[GetPixelChannels(image)*j+i]=0.0;\n      else\n        if (j > (ssize_t) white[i])\n          stretch_map[GetPixelChannels(image)*j+i]=(double) QuantumRange;\n        else\n          if (black[i] != white[i])\n            stretch_map[GetPixelChannels(image)*j+i]=(double) ScaleMapToQuantum(\n              (double) (MaxMap*gamma*(j-black[i])));\n    }\n  }\n  if (image->storage_class == PseudoClass)\n    {\n      register ssize_t\n        j;\n\n      /*\n        Stretch-contrast colormap.\n      */\n      for (j=0; j < (ssize_t) image->colors; j++)\n      {\n        if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,RedPixelChannel);\n            image->colormap[j].red=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].red))+i];\n          }\n        if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,GreenPixelChannel);\n            image->colormap[j].green=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].green))+i];\n          }\n        if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,BluePixelChannel);\n            image->colormap[j].blue=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].blue))+i];\n          }\n        if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n          {\n            i=GetPixelChannelOffset(image,AlphaPixelChannel);\n            image->colormap[j].alpha=stretch_map[GetPixelChannels(image)*\n              ScaleQuantumToMap(ClampToQuantum(image->colormap[j].alpha))+i];\n          }\n      }\n    }\n  /*\n    Stretch-contrast image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        if (black[j] == white[j])\n          continue;\n        q[j]=ClampToQuantum(stretch_map[GetPixelChannels(image)*\n          ScaleQuantumToMap(q[j])+j]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ContrastStretchImageTag,progress,\n          image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  stretch_map=(double *) RelinquishMagickMemory(stretch_map);\n  white=(double *) RelinquishMagickMemory(white);\n  black=(double *) RelinquishMagickMemory(black);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     E n h a n c e I m a g e                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EnhanceImage() applies a digital filter that improves the quality of a\n%  noisy image.\n%\n%  The format of the EnhanceImage method is:\n%\n%      Image *EnhanceImage(const Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport Image *EnhanceImage(const Image *image,ExceptionInfo *exception)\n{\n#define EnhanceImageTag  \"Enhance/Image\"\n#define EnhancePixel(weight) \\\n  mean=QuantumScale*((double) GetPixelRed(image,r)+pixel.red)/2.0; \\\n  distance=QuantumScale*((double) GetPixelRed(image,r)-pixel.red); \\\n  distance_squared=(4.0+mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelGreen(image,r)+pixel.green)/2.0; \\\n  distance=QuantumScale*((double) GetPixelGreen(image,r)-pixel.green); \\\n  distance_squared+=(7.0-mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelBlue(image,r)+pixel.blue)/2.0; \\\n  distance=QuantumScale*((double) GetPixelBlue(image,r)-pixel.blue); \\\n  distance_squared+=(5.0-mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelBlack(image,r)+pixel.black)/2.0; \\\n  distance=QuantumScale*((double) GetPixelBlack(image,r)-pixel.black); \\\n  distance_squared+=(5.0-mean)*distance*distance; \\\n  mean=QuantumScale*((double) GetPixelAlpha(image,r)+pixel.alpha)/2.0; \\\n  distance=QuantumScale*((double) GetPixelAlpha(image,r)-pixel.alpha); \\\n  distance_squared+=(5.0-mean)*distance*distance; \\\n  if (distance_squared < 0.069) \\\n    { \\\n      aggregate.red+=(weight)*GetPixelRed(image,r); \\\n      aggregate.green+=(weight)*GetPixelGreen(image,r); \\\n      aggregate.blue+=(weight)*GetPixelBlue(image,r); \\\n      aggregate.black+=(weight)*GetPixelBlack(image,r); \\\n      aggregate.alpha+=(weight)*GetPixelAlpha(image,r); \\\n      total_weight+=(weight); \\\n    } \\\n  r+=GetPixelChannels(image);\n\n  CacheView\n    *enhance_view,\n    *image_view;\n\n  Image\n    *enhance_image;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  ssize_t\n    y;\n\n  /*\n    Initialize enhanced image attributes.\n  */\n  assert(image != (const Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  enhance_image=CloneImage(image,0,0,MagickTrue,\n    exception);\n  if (enhance_image == (Image *) NULL)\n    return((Image *) NULL);\n  if (SetImageStorageClass(enhance_image,DirectClass,exception) == MagickFalse)\n    {\n      enhance_image=DestroyImage(enhance_image);\n      return((Image *) NULL);\n    }\n  /*\n    Enhance image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireVirtualCacheView(image,exception);\n  enhance_view=AcquireAuthenticCacheView(enhance_image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,enhance_image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    PixelInfo\n      pixel;\n\n    register const Quantum\n      *magick_restrict p;\n\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    ssize_t\n      center;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,-2,y-2,image->columns+4,5,exception);\n    q=QueueCacheViewAuthenticPixels(enhance_view,0,y,enhance_image->columns,1,\n      exception);\n    if ((p == (const Quantum *) NULL) || (q == (Quantum *) NULL))\n      {\n        status=MagickFalse;\n        continue;\n      }\n    center=(ssize_t) GetPixelChannels(image)*(2*(image->columns+4)+2);\n    GetPixelInfo(image,&pixel);\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        distance,\n        distance_squared,\n        mean,\n        total_weight;\n\n      PixelInfo\n        aggregate;\n\n      register const Quantum\n        *magick_restrict r;\n\n      GetPixelInfo(image,&aggregate);\n      total_weight=0.0;\n      GetPixelInfoPixel(image,p+center,&pixel);\n      r=p;\n      EnhancePixel(5.0); EnhancePixel(8.0); EnhancePixel(10.0);\n        EnhancePixel(8.0); EnhancePixel(5.0);\n      r=p+GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(8.0); EnhancePixel(20.0); EnhancePixel(40.0);\n        EnhancePixel(20.0); EnhancePixel(8.0);\n      r=p+2*GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(10.0); EnhancePixel(40.0); EnhancePixel(80.0);\n        EnhancePixel(40.0); EnhancePixel(10.0);\n      r=p+3*GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(8.0); EnhancePixel(20.0); EnhancePixel(40.0);\n        EnhancePixel(20.0); EnhancePixel(8.0);\n      r=p+4*GetPixelChannels(image)*(image->columns+4);\n      EnhancePixel(5.0); EnhancePixel(8.0); EnhancePixel(10.0);\n        EnhancePixel(8.0); EnhancePixel(5.0);\n      if (total_weight > MagickEpsilon)\n        {\n          pixel.red=((aggregate.red+total_weight/2.0)/total_weight);\n          pixel.green=((aggregate.green+total_weight/2.0)/total_weight);\n          pixel.blue=((aggregate.blue+total_weight/2.0)/total_weight);\n          pixel.black=((aggregate.black+total_weight/2.0)/total_weight);\n          pixel.alpha=((aggregate.alpha+total_weight/2.0)/total_weight);\n        }\n      SetPixelViaPixelInfo(enhance_image,&pixel,q);\n      p+=GetPixelChannels(image);\n      q+=GetPixelChannels(enhance_image);\n    }\n    if (SyncCacheViewAuthenticPixels(enhance_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,EnhanceImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  enhance_view=DestroyCacheView(enhance_view);\n  image_view=DestroyCacheView(image_view);\n  if (status == MagickFalse)\n    enhance_image=DestroyImage(enhance_image);\n  return(enhance_image);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     E q u a l i z e I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EqualizeImage() applies a histogram equalization to the image.\n%\n%  The format of the EqualizeImage method is:\n%\n%      MagickBooleanType EqualizeImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType EqualizeImage(Image *image,\n  ExceptionInfo *exception)\n{\n#define EqualizeImageTag  \"Equalize/Image\"\n\n  CacheView\n    *image_view;\n\n  double\n    black[CompositePixelChannel+1],\n    *equalize_map,\n    *histogram,\n    *map,\n    white[CompositePixelChannel+1];\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize histogram arrays.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateEqualizeImage(image,exception) != MagickFalse)\n    return(MagickTrue);\n#endif\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  equalize_map=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*equalize_map));\n  histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*\n    sizeof(*histogram));\n  map=(double *) AcquireQuantumMemory(MaxMap+1UL,MaxPixelChannels*sizeof(*map));\n  if ((equalize_map == (double *) NULL) || (histogram == (double *) NULL) ||\n      (map == (double *) NULL))\n    {\n      if (map != (double *) NULL)\n        map=(double *) RelinquishMagickMemory(map);\n      if (histogram != (double *) NULL)\n        histogram=(double *) RelinquishMagickMemory(histogram);\n      if (equalize_map != (double *) NULL)\n        equalize_map=(double *) RelinquishMagickMemory(equalize_map);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        image->filename);\n    }\n  /*\n    Form histogram.\n  */\n  status=MagickTrue;\n  (void) memset(histogram,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*histogram));\n  image_view=AcquireVirtualCacheView(image,exception);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);\n    if (p == (const Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n      {\n        double\n          intensity;\n\n        intensity=(double) p[i];\n        if ((image->channel_mask & SyncChannels) != 0)\n          intensity=GetPixelIntensity(image,p);\n        histogram[GetPixelChannels(image)*ScaleQuantumToMap(\n          ClampToQuantum(intensity))+i]++;\n      }\n      p+=GetPixelChannels(image);\n    }\n  }\n  image_view=DestroyCacheView(image_view);\n  /*\n    Integrate the histogram to get the equalization map.\n  */\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    double\n      intensity;\n\n    register ssize_t\n      j;\n\n    intensity=0.0;\n    for (j=0; j <= (ssize_t) MaxMap; j++)\n    {\n      intensity+=histogram[GetPixelChannels(image)*j+i];\n      map[GetPixelChannels(image)*j+i]=intensity;\n    }\n  }\n  (void) memset(equalize_map,0,(MaxMap+1)*GetPixelChannels(image)*\n    sizeof(*equalize_map));\n  (void) memset(black,0,sizeof(*black));\n  (void) memset(white,0,sizeof(*white));\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n  {\n    register ssize_t\n      j;\n\n    black[i]=map[i];\n    white[i]=map[GetPixelChannels(image)*MaxMap+i];\n    if (black[i] != white[i])\n      for (j=0; j <= (ssize_t) MaxMap; j++)\n        equalize_map[GetPixelChannels(image)*j+i]=(double)\n          ScaleMapToQuantum((double) ((MaxMap*(map[\n          GetPixelChannels(image)*j+i]-black[i]))/(white[i]-black[i])));\n  }\n  histogram=(double *) RelinquishMagickMemory(histogram);\n  map=(double *) RelinquishMagickMemory(map);\n  if (image->storage_class == PseudoClass)\n    {\n      register ssize_t\n        j;\n\n      /*\n        Equalize colormap.\n      */\n      for (j=0; j < (ssize_t) image->colors; j++)\n      {\n        if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              RedPixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].red=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].red))+\n                channel];\n          }\n        if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              GreenPixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].green=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].green))+\n                channel];\n          }\n        if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              BluePixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].blue=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].blue))+\n                channel];\n          }\n        if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,\n              AlphaPixelChannel);\n            if (black[channel] != white[channel])\n              image->colormap[j].alpha=equalize_map[GetPixelChannels(image)*\n                ScaleQuantumToMap(ClampToQuantum(image->colormap[j].alpha))+\n                channel];\n          }\n      }\n    }\n  /*\n    Equalize image.\n  */\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if (((traits & UpdatePixelTrait) == 0) || (black[j] == white[j]))\n          continue;\n        q[j]=ClampToQuantum(equalize_map[GetPixelChannels(image)*\n          ScaleQuantumToMap(q[j])+j]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,EqualizeImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  equalize_map=(double *) RelinquishMagickMemory(equalize_map);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     G a m m a I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GammaImage() gamma-corrects a particular image channel.  The same\n%  image viewed on different devices will have perceptual differences in the\n%  way the image's intensities are represented on the screen.  Specify\n%  individual gamma levels for the red, green, and blue channels, or adjust\n%  all three with the gamma parameter.  Values typically range from 0.8 to 2.3.\n%\n%  You can also reduce the influence of a particular channel with a gamma\n%  value of 0.\n%\n%  The format of the GammaImage method is:\n%\n%      MagickBooleanType GammaImage(Image *image,const double gamma,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o level: the image gamma as a string (e.g. 1.6,1.2,1.0).\n%\n%    o gamma: the image gamma.\n%\n*/\n\nstatic inline double gamma_pow(const double value,const double gamma)\n{\n  return(value < 0.0 ? value : pow(value,gamma));\n}\n\nMagickExport MagickBooleanType GammaImage(Image *image,const double gamma,\n  ExceptionInfo *exception)\n{\n#define GammaImageTag  \"Gamma/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  Quantum\n    *gamma_map;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize gamma maps.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (gamma == 1.0)\n    return(MagickTrue);\n  gamma_map=(Quantum *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*gamma_map));\n  if (gamma_map == (Quantum *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  (void) memset(gamma_map,0,(MaxMap+1)*sizeof(*gamma_map));\n  if (gamma != 0.0)\n    for (i=0; i <= (ssize_t) MaxMap; i++)\n      gamma_map[i]=ScaleMapToQuantum((double) (MaxMap*pow((double) i/\n        MaxMap,1.0/gamma)));\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Gamma-correct colormap.\n      */\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].red))];\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].green))];\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].blue))];\n      if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].alpha=(double) gamma_map[ScaleQuantumToMap(\n          ClampToQuantum(image->colormap[i].alpha))];\n    }\n  /*\n    Gamma-correct image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=gamma_map[ScaleQuantumToMap(ClampToQuantum((MagickRealType)\n          q[j]))];\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,GammaImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  gamma_map=(Quantum *) RelinquishMagickMemory(gamma_map);\n  if (image->gamma != 0.0)\n    image->gamma*=gamma;\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     G r a y s c a l e I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  GrayscaleImage() converts the image to grayscale.\n%\n%  The format of the GrayscaleImage method is:\n%\n%      MagickBooleanType GrayscaleImage(Image *image,\n%        const PixelIntensityMethod method ,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o method: the pixel intensity method.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType GrayscaleImage(Image *image,\n  const PixelIntensityMethod method,ExceptionInfo *exception)\n{\n#define GrayscaleImageTag  \"Grayscale/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    {\n      if (SyncImage(image,exception) == MagickFalse)\n        return(MagickFalse);\n      if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)\n        return(MagickFalse);\n    }\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateGrayscaleImage(image,method,exception) != MagickFalse)\n    {\n      image->intensity=method;\n      image->type=GrayscaleType;\n      if ((method == Rec601LuminancePixelIntensityMethod) ||\n          (method == Rec709LuminancePixelIntensityMethod))\n        return(SetImageColorspace(image,LinearGRAYColorspace,exception));\n      return(SetImageColorspace(image,GRAYColorspace,exception));\n    }\n#endif\n  /*\n    Grayscale image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      MagickRealType\n        blue,\n        green,\n        red,\n        intensity;\n\n      red=(MagickRealType) GetPixelRed(image,q);\n      green=(MagickRealType) GetPixelGreen(image,q);\n      blue=(MagickRealType) GetPixelBlue(image,q);\n      intensity=0.0;\n      switch (method)\n      {\n        case AveragePixelIntensityMethod:\n        {\n          intensity=(red+green+blue)/3.0;\n          break;\n        }\n        case BrightnessPixelIntensityMethod:\n        {\n          intensity=MagickMax(MagickMax(red,green),blue);\n          break;\n        }\n        case LightnessPixelIntensityMethod:\n        {\n          intensity=(MagickMin(MagickMin(red,green),blue)+\n            MagickMax(MagickMax(red,green),blue))/2.0;\n          break;\n        }\n        case MSPixelIntensityMethod:\n        {\n          intensity=(MagickRealType) (((double) red*red+green*green+\n            blue*blue)/3.0);\n          break;\n        }\n        case Rec601LumaPixelIntensityMethod:\n        {\n          if (image->colorspace == RGBColorspace)\n            {\n              red=EncodePixelGamma(red);\n              green=EncodePixelGamma(green);\n              blue=EncodePixelGamma(blue);\n            }\n          intensity=0.298839*red+0.586811*green+0.114350*blue;\n          break;\n        }\n        case Rec601LuminancePixelIntensityMethod:\n        {\n          if (image->colorspace == sRGBColorspace)\n            {\n              red=DecodePixelGamma(red);\n              green=DecodePixelGamma(green);\n              blue=DecodePixelGamma(blue);\n            }\n          intensity=0.298839*red+0.586811*green+0.114350*blue;\n          break;\n        }\n        case Rec709LumaPixelIntensityMethod:\n        default:\n        {\n          if (image->colorspace == RGBColorspace)\n            {\n              red=EncodePixelGamma(red);\n              green=EncodePixelGamma(green);\n              blue=EncodePixelGamma(blue);\n            }\n          intensity=0.212656*red+0.715158*green+0.072186*blue;\n          break;\n        }\n        case Rec709LuminancePixelIntensityMethod:\n        {\n          if (image->colorspace == sRGBColorspace)\n            {\n              red=DecodePixelGamma(red);\n              green=DecodePixelGamma(green);\n              blue=DecodePixelGamma(blue);\n            }\n          intensity=0.212656*red+0.715158*green+0.072186*blue;\n          break;\n        }\n        case RMSPixelIntensityMethod:\n        {\n          intensity=(MagickRealType) (sqrt((double) red*red+green*green+\n            blue*blue)/sqrt(3.0));\n          break;\n        }\n      }\n      SetPixelGray(image,ClampToQuantum(intensity),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,GrayscaleImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  image->intensity=method;\n  image->type=GrayscaleType;\n  if ((method == Rec601LuminancePixelIntensityMethod) ||\n      (method == Rec709LuminancePixelIntensityMethod))\n    return(SetImageColorspace(image,LinearGRAYColorspace,exception));\n  return(SetImageColorspace(image,GRAYColorspace,exception));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     H a l d C l u t I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  HaldClutImage() applies a Hald color lookup table to the image.  A Hald\n%  color lookup table is a 3-dimensional color cube mapped to 2 dimensions.\n%  Create it with the HALD coder.  You can apply any color transformation to\n%  the Hald image and then use this method to apply the transform to the\n%  image.\n%\n%  The format of the HaldClutImage method is:\n%\n%      MagickBooleanType HaldClutImage(Image *image,Image *hald_image,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image, which is replaced by indexed CLUT values\n%\n%    o hald_image: the color lookup table image for replacement color values.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType HaldClutImage(Image *image,\n  const Image *hald_image,ExceptionInfo *exception)\n{\n#define HaldClutImageTag  \"Clut/Image\"\n\n  typedef struct _HaldInfo\n  {\n    double\n      x,\n      y,\n      z;\n  } HaldInfo;\n\n  CacheView\n    *hald_view,\n    *image_view;\n\n  double\n    width;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  PixelInfo\n    zero;\n\n  size_t\n    cube_size,\n    length,\n    level;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(hald_image != (Image *) NULL);\n  assert(hald_image->signature == MagickCoreSignature);\n  if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)\n    return(MagickFalse);\n  if (image->alpha_trait == UndefinedPixelTrait)\n    (void) SetImageAlphaChannel(image,OpaqueAlphaChannel,exception);\n  /*\n    Hald clut image.\n  */\n  status=MagickTrue;\n  progress=0;\n  length=(size_t) MagickMin((MagickRealType) hald_image->columns,\n    (MagickRealType) hald_image->rows);\n  for (level=2; (level*level*level) < length; level++) ;\n  level*=level;\n  cube_size=level*level;\n  width=(double) hald_image->columns;\n  GetPixelInfo(hald_image,&zero);\n  hald_view=AcquireVirtualCacheView(hald_image,exception);\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        offset;\n\n      HaldInfo\n        point;\n\n      PixelInfo\n        pixel,\n        pixel1,\n        pixel2,\n        pixel3,\n        pixel4;\n\n      point.x=QuantumScale*(level-1.0)*GetPixelRed(image,q);\n      point.y=QuantumScale*(level-1.0)*GetPixelGreen(image,q);\n      point.z=QuantumScale*(level-1.0)*GetPixelBlue(image,q);\n      offset=point.x+level*floor(point.y)+cube_size*floor(point.z);\n      point.x-=floor(point.x);\n      point.y-=floor(point.y);\n      point.z-=floor(point.z);\n      pixel1=zero;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset,width),floor(offset/width),&pixel1,exception);\n      if (status == MagickFalse)\n        break;\n      pixel2=zero;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset+level,width),floor((offset+level)/width),&pixel2,exception);\n      if (status == MagickFalse)\n        break;\n      pixel3=zero;\n      CompositePixelInfoAreaBlend(&pixel1,pixel1.alpha,&pixel2,pixel2.alpha,\n        point.y,&pixel3);\n      offset+=cube_size;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset,width),floor(offset/width),&pixel1,exception);\n      if (status == MagickFalse)\n        break;\n      status=InterpolatePixelInfo(hald_image,hald_view,hald_image->interpolate,\n        fmod(offset+level,width),floor((offset+level)/width),&pixel2,exception);\n      if (status == MagickFalse)\n        break;\n      pixel4=zero;\n      CompositePixelInfoAreaBlend(&pixel1,pixel1.alpha,&pixel2,pixel2.alpha,\n        point.y,&pixel4);\n      pixel=zero;\n      CompositePixelInfoAreaBlend(&pixel3,pixel3.alpha,&pixel4,pixel4.alpha,\n        point.z,&pixel);\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        SetPixelRed(image,ClampToQuantum(pixel.red),q);\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        SetPixelGreen(image,ClampToQuantum(pixel.green),q);\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        SetPixelBlue(image,ClampToQuantum(pixel.blue),q);\n      if (((GetPixelBlackTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->colorspace == CMYKColorspace))\n        SetPixelBlack(image,ClampToQuantum(pixel.black),q);\n      if (((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->alpha_trait != UndefinedPixelTrait))\n        SetPixelAlpha(image,ClampToQuantum(pixel.alpha),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,HaldClutImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  hald_view=DestroyCacheView(hald_view);\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L e v e l I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LevelImage() adjusts the levels of a particular image channel by\n%  scaling the colors falling between specified white and black points to\n%  the full available quantum range.\n%\n%  The parameters provided represent the black, and white points.  The black\n%  point specifies the darkest color in the image. Colors darker than the\n%  black point are set to zero.  White point specifies the lightest color in\n%  the image.  Colors brighter than the white point are set to the maximum\n%  quantum value.\n%\n%  If a '!' flag is given, map black and white colors to the given levels\n%  rather than mapping those levels to black and white.  See\n%  LevelizeImage() below.\n%\n%  Gamma specifies a gamma correction to apply to the image.\n%\n%  The format of the LevelImage method is:\n%\n%      MagickBooleanType LevelImage(Image *image,const double black_point,\n%        const double white_point,const double gamma,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: The level to map zero (black) to.\n%\n%    o white_point: The level to map QuantumRange (white) to.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic inline double LevelPixel(const double black_point,\n  const double white_point,const double gamma,const double pixel)\n{\n  double\n    level_pixel,\n    scale;\n\n  scale=PerceptibleReciprocal(white_point-black_point);\n  level_pixel=QuantumRange*gamma_pow(scale*((double) pixel-black_point),\n    1.0/gamma);\n  return(level_pixel);\n}\n\nMagickExport MagickBooleanType LevelImage(Image *image,const double black_point,\n  const double white_point,const double gamma,ExceptionInfo *exception)\n{\n#define LevelImageTag  \"Level/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize levels map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Level colormap.\n      */\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].red));\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].green));\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].blue));\n      if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].alpha=(double) ClampToQuantum(LevelPixel(black_point,\n          white_point,gamma,image->colormap[i].alpha));\n    }\n  /*\n    Level image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=ClampToQuantum(LevelPixel(black_point,white_point,gamma,\n          (double) q[j]));\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,LevelImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  (void) ClampImage(image,exception);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L e v e l i z e I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LevelizeImage() applies the reversed LevelImage() operation to just\n%  the specific channels specified.  It compresses the full range of color\n%  values, so that they lie between the given black and white points. Gamma is\n%  applied before the values are mapped.\n%\n%  LevelizeImage() can be called with by using a +level command line\n%  API option, or using a '!' on a -level or LevelImage() geometry string.\n%\n%  It can be used to de-contrast a greyscale image to the exact levels\n%  specified.  Or by using specific levels for each channel of an image you\n%  can convert a gray-scale image to any linear color gradient, according to\n%  those levels.\n%\n%  The format of the LevelizeImage method is:\n%\n%      MagickBooleanType LevelizeImage(Image *image,const double black_point,\n%        const double white_point,const double gamma,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: The level to map zero (black) to.\n%\n%    o white_point: The level to map QuantumRange (white) to.\n%\n%    o gamma: adjust gamma by this factor before mapping values.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType LevelizeImage(Image *image,\n  const double black_point,const double white_point,const double gamma,\n  ExceptionInfo *exception)\n{\n#define LevelizeImageTag  \"Levelize/Image\"\n#define LevelizeValue(x) ClampToQuantum(((MagickRealType) gamma_pow((double) \\\n  (QuantumScale*(x)),gamma))*(white_point-black_point)+black_point)\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Allocate and initialize levels map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Level colormap.\n      */\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=(double) LevelizeValue(image->colormap[i].red);\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=(double) LevelizeValue(\n          image->colormap[i].green);\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=(double) LevelizeValue(image->colormap[i].blue);\n      if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].alpha=(double) LevelizeValue(\n          image->colormap[i].alpha);\n    }\n  /*\n    Level image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=LevelizeValue(q[j]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,LevelizeImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L e v e l I m a g e C o l o r s                                         %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LevelImageColors() maps the given color to \"black\" and \"white\" values,\n%  linearly spreading out the colors, and level values on a channel by channel\n%  bases, as per LevelImage().  The given colors allows you to specify\n%  different level ranges for each of the color channels separately.\n%\n%  If the boolean 'invert' is set true the image values will modifyed in the\n%  reverse direction. That is any existing \"black\" and \"white\" colors in the\n%  image will become the color values given, with all other values compressed\n%  appropriatally.  This effectivally maps a greyscale gradient into the given\n%  color gradient.\n%\n%  The format of the LevelImageColors method is:\n%\n%    MagickBooleanType LevelImageColors(Image *image,\n%      const PixelInfo *black_color,const PixelInfo *white_color,\n%      const MagickBooleanType invert,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_color: The color to map black to/from\n%\n%    o white_point: The color to map white to/from\n%\n%    o invert: if true map the colors (levelize), rather than from (level)\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType LevelImageColors(Image *image,\n  const PixelInfo *black_color,const PixelInfo *white_color,\n  const MagickBooleanType invert,ExceptionInfo *exception)\n{\n  ChannelType\n    channel_mask;\n\n  MagickStatusType\n    status;\n\n  /*\n    Allocate and initialize levels map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if ((IsGrayColorspace(image->colorspace) != MagickFalse) &&\n      ((IsGrayColorspace(black_color->colorspace) == MagickFalse) ||\n       (IsGrayColorspace(white_color->colorspace) == MagickFalse)))\n    (void) SetImageColorspace(image,sRGBColorspace,exception);\n  status=MagickTrue;\n  if (invert == MagickFalse)\n    {\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,RedChannel);\n          status&=LevelImage(image,black_color->red,white_color->red,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,GreenChannel);\n          status&=LevelImage(image,black_color->green,white_color->green,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,BlueChannel);\n          status&=LevelImage(image,black_color->blue,white_color->blue,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelBlackTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->colorspace == CMYKColorspace))\n        {\n          channel_mask=SetImageChannelMask(image,BlackChannel);\n          status&=LevelImage(image,black_color->black,white_color->black,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->alpha_trait != UndefinedPixelTrait))\n        {\n          channel_mask=SetImageChannelMask(image,AlphaChannel);\n          status&=LevelImage(image,black_color->alpha,white_color->alpha,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n    }\n  else\n    {\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,RedChannel);\n          status&=LevelizeImage(image,black_color->red,white_color->red,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,GreenChannel);\n          status&=LevelizeImage(image,black_color->green,white_color->green,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        {\n          channel_mask=SetImageChannelMask(image,BlueChannel);\n          status&=LevelizeImage(image,black_color->blue,white_color->blue,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelBlackTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->colorspace == CMYKColorspace))\n        {\n          channel_mask=SetImageChannelMask(image,BlackChannel);\n          status&=LevelizeImage(image,black_color->black,white_color->black,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n      if (((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0) &&\n          (image->alpha_trait != UndefinedPixelTrait))\n        {\n          channel_mask=SetImageChannelMask(image,AlphaChannel);\n          status&=LevelizeImage(image,black_color->alpha,white_color->alpha,1.0,\n            exception);\n          (void) SetImageChannelMask(image,channel_mask);\n        }\n    }\n  return(status != 0 ? MagickTrue : MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     L i n e a r S t r e t c h I m a g e                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  LinearStretchImage() discards any pixels below the black point and above\n%  the white point and levels the remaining pixels.\n%\n%  The format of the LinearStretchImage method is:\n%\n%      MagickBooleanType LinearStretchImage(Image *image,\n%        const double black_point,const double white_point,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o black_point: the black point.\n%\n%    o white_point: the white point.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType LinearStretchImage(Image *image,\n  const double black_point,const double white_point,ExceptionInfo *exception)\n{\n#define LinearStretchImageTag  \"LinearStretch/Image\"\n\n  CacheView\n    *image_view;\n\n  double\n    *histogram,\n    intensity;\n\n  MagickBooleanType\n    status;\n\n  ssize_t\n    black,\n    white,\n    y;\n\n  /*\n    Allocate histogram and linear map.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,sizeof(*histogram));\n  if (histogram == (double *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);\n  /*\n    Form histogram.\n  */\n  (void) memset(histogram,0,(MaxMap+1)*sizeof(*histogram));\n  image_view=AcquireVirtualCacheView(image,exception);\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register const Quantum\n      *magick_restrict p;\n\n    register ssize_t\n      x;\n\n    p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);\n    if (p == (const Quantum *) NULL)\n      break;\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      intensity=GetPixelIntensity(image,p);\n      histogram[ScaleQuantumToMap(ClampToQuantum(intensity))]++;\n      p+=GetPixelChannels(image);\n    }\n  }\n  image_view=DestroyCacheView(image_view);\n  /*\n    Find the histogram boundaries by locating the black and white point levels.\n  */\n  intensity=0.0;\n  for (black=0; black < (ssize_t) MaxMap; black++)\n  {\n    intensity+=histogram[black];\n    if (intensity >= black_point)\n      break;\n  }\n  intensity=0.0;\n  for (white=(ssize_t) MaxMap; white != 0; white--)\n  {\n    intensity+=histogram[white];\n    if (intensity >= white_point)\n      break;\n  }\n  histogram=(double *) RelinquishMagickMemory(histogram);\n  status=LevelImage(image,(double) ScaleMapToQuantum((MagickRealType) black),\n    (double) ScaleMapToQuantum((MagickRealType) white),1.0,exception);\n  return(status);\n}\n\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     M o d u l a t e I m a g e                                               %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ModulateImage() lets you control the brightness, saturation, and hue\n%  of an image.  Modulate represents the brightness, saturation, and hue\n%  as one parameter (e.g. 90,150,100).  If the image colorspace is HSL, the\n%  modulation is lightness, saturation, and hue.  For HWB, use blackness,\n%  whiteness, and hue. And for HCL, use chrome, luma, and hue.\n%\n%  The format of the ModulateImage method is:\n%\n%      MagickBooleanType ModulateImage(Image *image,const char *modulate,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o modulate: Define the percent change in brightness, saturation, and hue.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic inline void ModulateHCL(const double percent_hue,\n  const double percent_chroma,const double percent_luma,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToHCL(*red,*green,*blue,&hue,&chroma,&luma);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  chroma*=0.01*percent_chroma;\n  luma*=0.01*percent_luma;\n  ConvertHCLToRGB(hue,chroma,luma,red,green,blue);\n}\n\nstatic inline void ModulateHCLp(const double percent_hue,\n  const double percent_chroma,const double percent_luma,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToHCLp(*red,*green,*blue,&hue,&chroma,&luma);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  chroma*=0.01*percent_chroma;\n  luma*=0.01*percent_luma;\n  ConvertHCLpToRGB(hue,chroma,luma,red,green,blue);\n}\n\nstatic inline void ModulateHSB(const double percent_hue,\n  const double percent_saturation,const double percent_brightness,double *red,\n  double *green,double *blue)\n{\n  double\n    brightness,\n    hue,\n    saturation;\n\n  /*\n    Increase or decrease color brightness, saturation, or hue.\n  */\n  ConvertRGBToHSB(*red,*green,*blue,&hue,&saturation,&brightness);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  brightness*=0.01*percent_brightness;\n  ConvertHSBToRGB(hue,saturation,brightness,red,green,blue);\n}\n\nstatic inline void ModulateHSI(const double percent_hue,\n  const double percent_saturation,const double percent_intensity,double *red,\n  double *green,double *blue)\n{\n  double\n    intensity,\n    hue,\n    saturation;\n\n  /*\n    Increase or decrease color intensity, saturation, or hue.\n  */\n  ConvertRGBToHSI(*red,*green,*blue,&hue,&saturation,&intensity);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  intensity*=0.01*percent_intensity;\n  ConvertHSIToRGB(hue,saturation,intensity,red,green,blue);\n}\n\nstatic inline void ModulateHSL(const double percent_hue,\n  const double percent_saturation,const double percent_lightness,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    lightness,\n    saturation;\n\n  /*\n    Increase or decrease color lightness, saturation, or hue.\n  */\n  ConvertRGBToHSL(*red,*green,*blue,&hue,&saturation,&lightness);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  lightness*=0.01*percent_lightness;\n  ConvertHSLToRGB(hue,saturation,lightness,red,green,blue);\n}\n\nstatic inline void ModulateHSV(const double percent_hue,\n  const double percent_saturation,const double percent_value,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    saturation,\n    value;\n\n  /*\n    Increase or decrease color value, saturation, or hue.\n  */\n  ConvertRGBToHSV(*red,*green,*blue,&hue,&saturation,&value);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  saturation*=0.01*percent_saturation;\n  value*=0.01*percent_value;\n  ConvertHSVToRGB(hue,saturation,value,red,green,blue);\n}\n\nstatic inline void ModulateHWB(const double percent_hue,\n  const double percent_whiteness,const double percent_blackness,double *red,\n  double *green,double *blue)\n{\n  double\n    blackness,\n    hue,\n    whiteness;\n\n  /*\n    Increase or decrease color blackness, whiteness, or hue.\n  */\n  ConvertRGBToHWB(*red,*green,*blue,&hue,&whiteness,&blackness);\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  blackness*=0.01*percent_blackness;\n  whiteness*=0.01*percent_whiteness;\n  ConvertHWBToRGB(hue,whiteness,blackness,red,green,blue);\n}\n\nstatic inline void ModulateLCHab(const double percent_luma,\n  const double percent_chroma,const double percent_hue,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToLCHab(*red,*green,*blue,&luma,&chroma,&hue);\n  luma*=0.01*percent_luma;\n  chroma*=0.01*percent_chroma;\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  ConvertLCHabToRGB(luma,chroma,hue,red,green,blue);\n}\n\nstatic inline void ModulateLCHuv(const double percent_luma,\n  const double percent_chroma,const double percent_hue,double *red,\n  double *green,double *blue)\n{\n  double\n    hue,\n    luma,\n    chroma;\n\n  /*\n    Increase or decrease color luma, chroma, or hue.\n  */\n  ConvertRGBToLCHuv(*red,*green,*blue,&luma,&chroma,&hue);\n  luma*=0.01*percent_luma;\n  chroma*=0.01*percent_chroma;\n  hue+=fmod((percent_hue-100.0),200.0)/200.0;\n  ConvertLCHuvToRGB(luma,chroma,hue,red,green,blue);\n}\n\nMagickExport MagickBooleanType ModulateImage(Image *image,const char *modulate,\n  ExceptionInfo *exception)\n{\n#define ModulateImageTag  \"Modulate/Image\"\n\n  CacheView\n    *image_view;\n\n  ColorspaceType\n    colorspace;\n\n  const char\n    *artifact;\n\n  double\n    percent_brightness,\n    percent_hue,\n    percent_saturation;\n\n  GeometryInfo\n    geometry_info;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  MagickStatusType\n    flags;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  /*\n    Initialize modulate table.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (modulate == (char *) NULL)\n    return(MagickFalse);\n  if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)\n    (void) SetImageColorspace(image,sRGBColorspace,exception);\n  flags=ParseGeometry(modulate,&geometry_info);\n  percent_brightness=geometry_info.rho;\n  percent_saturation=geometry_info.sigma;\n  if ((flags & SigmaValue) == 0)\n    percent_saturation=100.0;\n  percent_hue=geometry_info.xi;\n  if ((flags & XiValue) == 0)\n    percent_hue=100.0;\n  colorspace=UndefinedColorspace;\n  artifact=GetImageArtifact(image,\"modulate:colorspace\");\n  if (artifact != (const char *) NULL)\n    colorspace=(ColorspaceType) ParseCommandOption(MagickColorspaceOptions,\n      MagickFalse,artifact);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      double\n        blue,\n        green,\n        red;\n\n      /*\n        Modulate image colormap.\n      */\n      red=(double) image->colormap[i].red;\n      green=(double) image->colormap[i].green;\n      blue=(double) image->colormap[i].blue;\n      switch (colorspace)\n      {\n        case HCLColorspace:\n        {\n          ModulateHCL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HCLpColorspace:\n        {\n          ModulateHCLp(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSBColorspace:\n        {\n          ModulateHSB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSIColorspace:\n        {\n          ModulateHSI(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSLColorspace:\n        default:\n        {\n          ModulateHSL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSVColorspace:\n        {\n          ModulateHSV(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HWBColorspace:\n        {\n          ModulateHWB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHColorspace:\n        case LCHabColorspace:\n        {\n          ModulateLCHab(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHuvColorspace:\n        {\n          ModulateLCHuv(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n      }\n      image->colormap[i].red=red;\n      image->colormap[i].green=green;\n      image->colormap[i].blue=blue;\n    }\n  /*\n    Modulate image.\n  */\n#if defined(MAGICKCORE_OPENCL_SUPPORT)\n  if (AccelerateModulateImage(image,percent_brightness,percent_hue,\n        percent_saturation,colorspace,exception) != MagickFalse)\n    return(MagickTrue);\n#endif\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      double\n        blue,\n        green,\n        red;\n\n      red=(double) GetPixelRed(image,q);\n      green=(double) GetPixelGreen(image,q);\n      blue=(double) GetPixelBlue(image,q);\n      switch (colorspace)\n      {\n        case HCLColorspace:\n        {\n          ModulateHCL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HCLpColorspace:\n        {\n          ModulateHCLp(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSBColorspace:\n        {\n          ModulateHSB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSLColorspace:\n        default:\n        {\n          ModulateHSL(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HSVColorspace:\n        {\n          ModulateHSV(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case HWBColorspace:\n        {\n          ModulateHWB(percent_hue,percent_saturation,percent_brightness,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHabColorspace:\n        {\n          ModulateLCHab(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n        case LCHColorspace:\n        case LCHuvColorspace:\n        {\n          ModulateLCHuv(percent_brightness,percent_saturation,percent_hue,\n            &red,&green,&blue);\n          break;\n        }\n      }\n      SetPixelRed(image,ClampToQuantum(red),q);\n      SetPixelGreen(image,ClampToQuantum(green),q);\n      SetPixelBlue(image,ClampToQuantum(blue),q);\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,ModulateImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     N e g a t e I m a g e                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  NegateImage() negates the colors in the reference image.  The grayscale\n%  option means that only grayscale values within the image are negated.\n%\n%  The format of the NegateImage method is:\n%\n%      MagickBooleanType NegateImage(Image *image,\n%        const MagickBooleanType grayscale,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o grayscale: If MagickTrue, only negate grayscale pixels within the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType NegateImage(Image *image,\n  const MagickBooleanType grayscale,ExceptionInfo *exception)\n{\n#define NegateImageTag  \"Negate/Image\"\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  register ssize_t\n    i;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  if (image->storage_class == PseudoClass)\n    for (i=0; i < (ssize_t) image->colors; i++)\n    {\n      /*\n        Negate colormap.\n      */\n      if( grayscale != MagickFalse )\n        if ((image->colormap[i].red != image->colormap[i].green) ||\n            (image->colormap[i].green != image->colormap[i].blue))\n          continue;\n      if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].red=QuantumRange-image->colormap[i].red;\n      if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].green=QuantumRange-image->colormap[i].green;\n      if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n        image->colormap[i].blue=QuantumRange-image->colormap[i].blue;\n    }\n  /*\n    Negate image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n  if( grayscale != MagickFalse )\n    {\n      for (y=0; y < (ssize_t) image->rows; y++)\n      {\n        MagickBooleanType\n          sync;\n\n        register Quantum\n          *magick_restrict q;\n\n        register ssize_t\n          x;\n\n        if (status == MagickFalse)\n          continue;\n        q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,\n          exception);\n        if (q == (Quantum *) NULL)\n          {\n            status=MagickFalse;\n            continue;\n          }\n        for (x=0; x < (ssize_t) image->columns; x++)\n        {\n          register ssize_t\n            j;\n\n          if (IsPixelGray(image,q) != MagickFalse)\n            {\n              q+=GetPixelChannels(image);\n              continue;\n            }\n          for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n          {\n            PixelChannel channel = GetPixelChannelChannel(image,j);\n            PixelTrait traits = GetPixelChannelTraits(image,channel);\n            if ((traits & UpdatePixelTrait) == 0)\n              continue;\n            q[j]=QuantumRange-q[j];\n          }\n          q+=GetPixelChannels(image);\n        }\n        sync=SyncCacheViewAuthenticPixels(image_view,exception);\n        if (sync == MagickFalse)\n          status=MagickFalse;\n        if (image->progress_monitor != (MagickProgressMonitor) NULL)\n          {\n            MagickBooleanType\n              proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n            #pragma omp atomic\n#endif\n            progress++;\n            proceed=SetImageProgress(image,NegateImageTag,progress,image->rows);\n            if (proceed == MagickFalse)\n              status=MagickFalse;\n          }\n      }\n      image_view=DestroyCacheView(image_view);\n      return(MagickTrue);\n    }\n  /*\n    Negate image.\n  */\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        j;\n\n      for (j=0; j < (ssize_t) GetPixelChannels(image); j++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,j);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        q[j]=QuantumRange-q[j];\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,NegateImageTag,progress,image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     N o r m a l i z e I m a g e                                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  The NormalizeImage() method enhances the contrast of a color image by\n%  mapping the darkest 2 percent of all pixel to black and the brightest\n%  1 percent to white.\n%\n%  The format of the NormalizeImage method is:\n%\n%      MagickBooleanType NormalizeImage(Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nMagickExport MagickBooleanType NormalizeImage(Image *image,\n  ExceptionInfo *exception)\n{\n  double\n    black_point,\n    white_point;\n\n  black_point=(double) image->columns*image->rows*0.0015;\n  white_point=(double) image->columns*image->rows*0.9995;\n  return(ContrastStretchImage(image,black_point,white_point,exception));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%     S i g m o i d a l C o n t r a s t I m a g e                             %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  SigmoidalContrastImage() adjusts the contrast of an image with a non-linear\n%  sigmoidal contrast algorithm.  Increase the contrast of the image using a\n%  sigmoidal transfer function without saturating highlights or shadows.\n%  Contrast indicates how much to increase the contrast (0 is none; 3 is\n%  typical; 20 is pushing it); mid-point indicates where midtones fall in the\n%  resultant image (0 is white; 50% is middle-gray; 100% is black).  Set\n%  sharpen to MagickTrue to increase the image contrast otherwise the contrast\n%  is reduced.\n%\n%  The format of the SigmoidalContrastImage method is:\n%\n%      MagickBooleanType SigmoidalContrastImage(Image *image,\n%        const MagickBooleanType sharpen,const char *levels,\n%        ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image: the image.\n%\n%    o sharpen: Increase or decrease image contrast.\n%\n%    o contrast: strength of the contrast, the larger the number the more\n%      'threshold-like' it becomes.\n%\n%    o midpoint: midpoint of the function as a color value 0 to QuantumRange.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\n/*\n  ImageMagick 6 has a version of this function which uses LUTs.\n*/\n\n/*\n  Sigmoidal function Sigmoidal with inflexion point moved to b and \"slope\n  constant\" set to a.\n\n  The first version, based on the hyperbolic tangent tanh, when combined with\n  the scaling step, is an exact arithmetic clone of the the sigmoid function\n  based on the logistic curve. The equivalence is based on the identity\n\n    1/(1+exp(-t)) = (1+tanh(t/2))/2\n\n  (http://de.wikipedia.org/wiki/Sigmoidfunktion) and the fact that the\n  scaled sigmoidal derivation is invariant under affine transformations of\n  the ordinate.\n\n  The tanh version is almost certainly more accurate and cheaper.  The 0.5\n  factor in the argument is to clone the legacy ImageMagick behavior. The\n  reason for making the define depend on atanh even though it only uses tanh\n  has to do with the construction of the inverse of the scaled sigmoidal.\n*/\n#if defined(MAGICKCORE_HAVE_ATANH)\n#define Sigmoidal(a,b,x) ( tanh((0.5*(a))*((x)-(b))) )\n#else\n#define Sigmoidal(a,b,x) ( 1.0/(1.0+exp((a)*((b)-(x)))) )\n#endif\n/*\n  Scaled sigmoidal function:\n\n    ( Sigmoidal(a,b,x) - Sigmoidal(a,b,0) ) /\n    ( Sigmoidal(a,b,1) - Sigmoidal(a,b,0) )\n\n  See http://osdir.com/ml/video.image-magick.devel/2005-04/msg00006.html and\n  http://www.cs.dartmouth.edu/farid/downloads/tutorials/fip.pdf.  The limit\n  of ScaledSigmoidal as a->0 is the identity, but a=0 gives a division by\n  zero. This is fixed below by exiting immediately when contrast is small,\n  leaving the image (or colormap) unmodified. This appears to be safe because\n  the series expansion of the logistic sigmoidal function around x=b is\n\n  1/2-a*(b-x)/4+...\n\n  so that the key denominator s(1)-s(0) is about a/4 (a/2 with tanh).\n*/\n#define ScaledSigmoidal(a,b,x) (                    \\\n  (Sigmoidal((a),(b),(x))-Sigmoidal((a),(b),0.0)) / \\\n  (Sigmoidal((a),(b),1.0)-Sigmoidal((a),(b),0.0)) )\n/*\n  Inverse of ScaledSigmoidal, used for +sigmoidal-contrast.  Because b\n  may be 0 or 1, the argument of the hyperbolic tangent (resp. logistic\n  sigmoidal) may be outside of the interval (-1,1) (resp. (0,1)), even\n  when creating a LUT from in gamut values, hence the branching.  In\n  addition, HDRI may have out of gamut values.\n  InverseScaledSigmoidal is not a two-sided inverse of ScaledSigmoidal:\n  It is only a right inverse. This is unavoidable.\n*/\nstatic inline double InverseScaledSigmoidal(const double a,const double b,\n  const double x)\n{\n  const double sig0=Sigmoidal(a,b,0.0);\n  const double sig1=Sigmoidal(a,b,1.0);\n  const double argument=(sig1-sig0)*x+sig0;\n  const double clamped=\n    (\n#if defined(MAGICKCORE_HAVE_ATANH)\n      argument < -1+MagickEpsilon\n      ?\n      -1+MagickEpsilon\n      :\n      ( argument > 1-MagickEpsilon ? 1-MagickEpsilon : argument )\n    );\n  return(b+(2.0/a)*atanh(clamped));\n#else\n      argument < MagickEpsilon\n      ?\n      MagickEpsilon\n      :\n      ( argument > 1-MagickEpsilon ? 1-MagickEpsilon : argument )\n    );\n  return(b-log(1.0/clamped-1.0)/a);\n#endif\n}\n\nMagickExport MagickBooleanType SigmoidalContrastImage(Image *image,\n  const MagickBooleanType sharpen,const double contrast,const double midpoint,\n  ExceptionInfo *exception)\n{\n#define SigmoidalContrastImageTag  \"SigmoidalContrast/Image\"\n#define ScaledSig(x) ( ClampToQuantum(QuantumRange* \\\n  ScaledSigmoidal(contrast,QuantumScale*midpoint,QuantumScale*(x))) )\n#define InverseScaledSig(x) ( ClampToQuantum(QuantumRange* \\\n  InverseScaledSigmoidal(contrast,QuantumScale*midpoint,QuantumScale*(x))) )\n\n  CacheView\n    *image_view;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    progress;\n\n  ssize_t\n    y;\n\n  /*\n    Convenience macros.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  /*\n    Side effect: may clamp values unless contrast<MagickEpsilon, in which\n    case nothing is done.\n  */\n  if (contrast < MagickEpsilon)\n    return(MagickTrue);\n  /*\n    Sigmoidal-contrast enhance colormap.\n  */\n  if (image->storage_class == PseudoClass)\n    {\n      register ssize_t\n        i;\n\n      if( sharpen != MagickFalse )\n        for (i=0; i < (ssize_t) image->colors; i++)\n        {\n          if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].red=(MagickRealType) ScaledSig(\n              image->colormap[i].red);\n          if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].green=(MagickRealType) ScaledSig(\n              image->colormap[i].green);\n          if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].blue=(MagickRealType) ScaledSig(\n              image->colormap[i].blue);\n          if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].alpha=(MagickRealType) ScaledSig(\n              image->colormap[i].alpha);\n        }\n      else\n        for (i=0; i < (ssize_t) image->colors; i++)\n        {\n          if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].red=(MagickRealType) InverseScaledSig(\n              image->colormap[i].red);\n          if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].green=(MagickRealType) InverseScaledSig(\n              image->colormap[i].green);\n          if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].blue=(MagickRealType) InverseScaledSig(\n              image->colormap[i].blue);\n          if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)\n            image->colormap[i].alpha=(MagickRealType) InverseScaledSig(\n              image->colormap[i].alpha);\n        }\n    }\n  /*\n    Sigmoidal-contrast enhance image.\n  */\n  status=MagickTrue;\n  progress=0;\n  image_view=AcquireAuthenticCacheView(image,exception);\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n  #pragma omp parallel for schedule(static) shared(progress,status) \\\n    magick_number_threads(image,image,image->rows,1)\n#endif\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    register Quantum\n      *magick_restrict q;\n\n    register ssize_t\n      x;\n\n    if (status == MagickFalse)\n      continue;\n    q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);\n    if (q == (Quantum *) NULL)\n      {\n        status=MagickFalse;\n        continue;\n      }\n    for (x=0; x < (ssize_t) image->columns; x++)\n    {\n      register ssize_t\n        i;\n\n      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n      {\n        PixelChannel channel = GetPixelChannelChannel(image,i);\n        PixelTrait traits = GetPixelChannelTraits(image,channel);\n        if ((traits & UpdatePixelTrait) == 0)\n          continue;\n        if( sharpen != MagickFalse )\n          q[i]=ScaledSig(q[i]);\n        else\n          q[i]=InverseScaledSig(q[i]);\n      }\n      q+=GetPixelChannels(image);\n    }\n    if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)\n      status=MagickFalse;\n    if (image->progress_monitor != (MagickProgressMonitor) NULL)\n      {\n        MagickBooleanType\n          proceed;\n\n#if defined(MAGICKCORE_OPENMP_SUPPORT)\n        #pragma omp atomic\n#endif\n        progress++;\n        proceed=SetImageProgress(image,SigmoidalContrastImageTag,progress,\n          image->rows);\n        if (proceed == MagickFalse)\n          status=MagickFalse;\n      }\n  }\n  image_view=DestroyCacheView(image_view);\n  return(status);\n}\n", "/*\n  Copyright 1999-2019 ImageMagick Studio LLC, a non-profit organization\n  dedicated to making software imaging solutions freely available.\n\n  You may not use this file except in compliance with the License.  You may\n  obtain a copy of the License at\n\n    https://imagemagick.org/script/license.php\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n  MagickCore pixel accessor methods.\n*/\n#ifndef MAGICKCORE_PIXEL_ACCESSOR_H\n#define MAGICKCORE_PIXEL_ACCESSOR_H\n\n#include <assert.h>\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/cache-view.h\"\n#include \"MagickCore/color.h\"\n#include \"MagickCore/colorspace.h\"\n#include \"MagickCore/gem.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/memory_.h\"\n\n#if defined(__cplusplus) || defined(c_plusplus)\nextern \"C\" {\n#endif\n\n#undef index\n\nstatic inline Quantum ClampPixel(const MagickRealType pixel)\n{\n  if (pixel < 0.0f)\n    return((Quantum) 0);\n  if (pixel >= (MagickRealType) QuantumRange)\n    return((Quantum) QuantumRange);\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  return((Quantum) (pixel+0.5f));\n#else\n  return((Quantum) pixel);\n#endif\n}\n\nstatic inline Quantum GetPixela(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[aPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelAlpha(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits == UndefinedPixelTrait)\n    return(OpaqueAlpha);\n  return(pixel[image->channel_map[AlphaPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelAlphaTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[AlphaPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelb(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[bPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelBlack(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[BlackPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) 0);\n  return(pixel[image->channel_map[BlackPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelBlackTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[BlackPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelBlue(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[BluePixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelBlueTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[BluePixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelCb(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[CbPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelCbTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[CbPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelChannel(const Image *magick_restrict image,\n  const PixelChannel channel,const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[channel].traits == UndefinedPixelTrait)\n    return((Quantum) 0);\n  return(pixel[image->channel_map[channel].offset]);\n}\n\nstatic inline PixelChannel GetPixelChannelChannel(\n  const Image *magick_restrict image,const ssize_t offset)\n{\n  return(image->channel_map[offset].channel);\n}\n\nstatic inline ssize_t GetPixelChannelOffset(const Image *magick_restrict image,\n  const PixelChannel channel)\n{\n  return(image->channel_map[channel].offset);\n}\n\nstatic inline PixelTrait GetPixelChannelTraits(\n  const Image *magick_restrict image,const PixelChannel channel)\n{\n  return(image->channel_map[channel].traits);\n}\n\nstatic inline size_t GetPixelChannels(const Image *magick_restrict image)\n{\n  return(image->number_channels);\n}\n\nstatic inline Quantum GetPixelCompositeMask(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[CompositeMaskPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) QuantumRange);\n  return(pixel[image->channel_map[CompositeMaskPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelCr(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[CrPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelCrTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[CrPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelCyan(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[CyanPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelCyanTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[CyanPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelGray(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[GrayPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelGrayTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[GrayPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelGreen(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[GreenPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelGreenTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[GreenPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelIndex(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[IndexPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) 0);\n  return(pixel[image->channel_map[IndexPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelIndexTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[IndexPixelChannel].traits);\n}\n\nstatic inline MagickRealType GetPixelInfoChannel(\n  const PixelInfo *magick_restrict pixel_info,const PixelChannel channel)\n{\n  switch (channel)\n  {\n    case RedPixelChannel: return(pixel_info->red);\n    case GreenPixelChannel: return(pixel_info->green);\n    case BluePixelChannel: return(pixel_info->blue);\n    case BlackPixelChannel: return(pixel_info->black);\n    case AlphaPixelChannel: return(pixel_info->alpha);\n    case IndexPixelChannel: return(pixel_info->index);\n    default: return((MagickRealType) 0.0);\n  }\n}\n\nstatic inline double PerceptibleReciprocal(const double x)\n{\n  double\n    sign;\n\n  /*\n    Return 1/x where x is perceptible (not unlimited or infinitesimal).\n  */\n  sign=x < 0.0 ? -1.0 : 1.0;\n  if ((sign*x) >= MagickEpsilon)\n    return(1.0/x);\n  return(sign/MagickEpsilon);\n}\n\nstatic inline MagickRealType GetPixelInfoLuma(\n  const PixelInfo *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  if (pixel->colorspace == sRGBColorspace)\n    {\n      intensity=(MagickRealType) (0.212656f*pixel->red+0.715158f*pixel->green+\n        0.072186f*pixel->blue);\n      return(intensity);\n    }\n  intensity=(MagickRealType) (0.212656f*EncodePixelGamma(pixel->red)+\n    0.715158f*EncodePixelGamma(pixel->green)+\n    0.072186f*EncodePixelGamma(pixel->blue));\n  return(intensity);\n}\n\nstatic inline MagickRealType GetPixelInfoLuminance(\n  const PixelInfo *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  if (pixel->colorspace != sRGBColorspace)\n    {\n      intensity=(MagickRealType) (0.212656f*pixel->red+0.715158f*pixel->green+\n        0.072186f*pixel->blue);\n      return(intensity);\n    }\n  intensity=(MagickRealType) (0.212656f*DecodePixelGamma(pixel->red)+\n    0.715158f*DecodePixelGamma(pixel->green)+\n    0.072186f*DecodePixelGamma(pixel->blue));\n  return(intensity);\n}\n\nstatic inline Quantum GetPixelL(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[LPixelChannel].offset]);\n}\n\nstatic inline ssize_t GetPixelLabel(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return((ssize_t) pixel[image->channel_map[LabelPixelChannel].offset]);\n}\n\nstatic inline MagickRealType GetPixelLuma(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  intensity=(MagickRealType) (\n    0.212656f*pixel[image->channel_map[RedPixelChannel].offset]+\n    0.715158f*pixel[image->channel_map[GreenPixelChannel].offset]+\n    0.072186f*pixel[image->channel_map[BluePixelChannel].offset]);\n  return(intensity);\n}\n\nstatic inline MagickRealType GetPixelLuminance(\n  const Image *magick_restrict image,const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    intensity;\n\n  if (image->colorspace != sRGBColorspace)\n    {\n      intensity=(MagickRealType) (\n        0.212656f*pixel[image->channel_map[RedPixelChannel].offset]+\n        0.715158f*pixel[image->channel_map[GreenPixelChannel].offset]+\n        0.072186f*pixel[image->channel_map[BluePixelChannel].offset]);\n      return(intensity);\n    }\n  intensity=(MagickRealType) (0.212656f*DecodePixelGamma((MagickRealType)\n    pixel[image->channel_map[RedPixelChannel].offset])+0.715158f*\n    DecodePixelGamma((MagickRealType)\n    pixel[image->channel_map[GreenPixelChannel].offset])+0.072186f*\n    DecodePixelGamma((MagickRealType)\n    pixel[image->channel_map[BluePixelChannel].offset]));\n  return(intensity);\n}\n\nstatic inline Quantum GetPixelMagenta(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[MagentaPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelMagentaTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[MagentaPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelReadMask(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[ReadMaskPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) QuantumRange);\n  return(pixel[image->channel_map[ReadMaskPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelWriteMask(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[WriteMaskPixelChannel].traits == UndefinedPixelTrait)\n    return((Quantum) QuantumRange);\n  return(pixel[image->channel_map[WriteMaskPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelReadMaskTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[ReadMaskPixelChannel].traits);\n}\n\nstatic inline size_t GetPixelMetaChannels(const Image *magick_restrict image)\n{\n  return(image->number_meta_channels);\n}\n\nstatic inline size_t GetPixelMetacontentExtent(\n  const Image *magick_restrict image)\n{\n  return(image->metacontent_extent);\n}\n\nstatic inline Quantum GetPixelOpacity(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits != BlendPixelTrait)\n    return(QuantumRange-OpaqueAlpha);\n  return(QuantumRange-pixel[image->channel_map[AlphaPixelChannel].offset]);\n}\n\nstatic inline Quantum GetPixelRed(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[RedPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelRedTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[RedPixelChannel].traits);\n}\n\nstatic inline void GetPixelInfoPixel(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel,PixelInfo *magick_restrict pixel_info)\n{\n  (void) ResetMagickMemory(pixel_info,0,sizeof(*pixel_info));\n  pixel_info->storage_class=DirectClass;\n  pixel_info->colorspace=sRGBColorspace;\n  pixel_info->depth=MAGICKCORE_QUANTUM_DEPTH;\n  pixel_info->alpha_trait=UndefinedPixelTrait;\n  pixel_info->alpha=(MagickRealType) OpaqueAlpha;\n  if (image != (Image *) NULL)\n    {\n      pixel_info->storage_class=image->storage_class;\n      pixel_info->colorspace=image->colorspace;\n      pixel_info->fuzz=image->fuzz;\n      pixel_info->depth=image->depth;\n      pixel_info->alpha_trait=image->alpha_trait;\n      if (pixel != (Quantum *) NULL)\n        {\n          pixel_info->red=(MagickRealType)\n            pixel[image->channel_map[RedPixelChannel].offset];\n          pixel_info->green=(MagickRealType)\n            pixel[image->channel_map[GreenPixelChannel].offset];\n          pixel_info->blue=(MagickRealType)\n            pixel[image->channel_map[BluePixelChannel].offset];\n          if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n            pixel_info->black=(MagickRealType)\n              pixel[image->channel_map[BlackPixelChannel].offset];\n          if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n            {\n              pixel_info->alpha=(MagickRealType)\n                pixel[image->channel_map[AlphaPixelChannel].offset];\n              pixel_info->alpha_trait=BlendPixelTrait;\n            }\n          if (image->channel_map[IndexPixelChannel].traits != UndefinedPixelTrait)\n            pixel_info->index=(MagickRealType)\n          pixel[image->channel_map[IndexPixelChannel].offset];\n        }\n    }\n}\n\nstatic inline PixelTrait GetPixelTraits(const Image *magick_restrict image,\n  const PixelChannel channel)\n{\n  return(image->channel_map[channel].traits);\n}\n\nstatic inline Quantum GetPixelY(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[YPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelYTraits(const Image *magick_restrict image)\n{\n  return(image->channel_map[YPixelChannel].traits);\n}\n\nstatic inline Quantum GetPixelYellow(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  return(pixel[image->channel_map[YellowPixelChannel].offset]);\n}\n\nstatic inline PixelTrait GetPixelYellowTraits(\n  const Image *magick_restrict image)\n{\n  return(image->channel_map[YellowPixelChannel].traits);\n}\n\nstatic inline MagickRealType AbsolutePixelValue(const MagickRealType x)\n{\n  return(x < 0.0f ? -x : x);\n}\n\nstatic inline MagickBooleanType IsPixelAtDepth(const Quantum pixel,\n  const QuantumAny range)\n{\n  Quantum\n    quantum;\n\n  if (range == 0)\n    return(MagickTrue);\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  quantum=(Quantum) (((MagickRealType) QuantumRange*((QuantumAny)\n    (((MagickRealType) range*pixel)/QuantumRange+0.5)))/range+0.5);\n#else\n  quantum=(Quantum) (((MagickRealType) QuantumRange*((QuantumAny)\n    (((MagickRealType) range*pixel)/QuantumRange+0.5)))/range);\n#endif\n  return(pixel == quantum ? MagickTrue : MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelEquivalent(\n  const Image *magick_restrict image,const Quantum *magick_restrict p,\n  const PixelInfo *magick_restrict q)\n{\n  MagickRealType\n    alpha,\n    beta,\n    color;\n\n  color=(MagickRealType) p[image->channel_map[AlphaPixelChannel].offset];\n  alpha=image->alpha_trait == UndefinedPixelTrait ? (MagickRealType)\n    OpaqueAlpha : color;\n  beta=q->alpha_trait == UndefinedPixelTrait ? (MagickRealType) OpaqueAlpha :\n    q->alpha;\n  if (AbsolutePixelValue(alpha-beta) >= MagickEpsilon)\n    return(MagickFalse);\n  if ((AbsolutePixelValue(alpha-TransparentAlpha) < MagickEpsilon) ||\n      (AbsolutePixelValue(beta-TransparentAlpha) < MagickEpsilon))\n    return(MagickTrue);  /* no color component if pixel is transparent */\n  color=(MagickRealType) p[image->channel_map[RedPixelChannel].offset];\n  if (AbsolutePixelValue(color-q->red) >= MagickEpsilon)\n    return(MagickFalse);\n  color=(MagickRealType) p[image->channel_map[GreenPixelChannel].offset];\n  if (AbsolutePixelValue(color-q->green) >= MagickEpsilon)\n    return(MagickFalse);\n  color=(MagickRealType) p[image->channel_map[BluePixelChannel].offset];\n  if (AbsolutePixelValue(color-q->blue) >= MagickEpsilon)\n    return(MagickFalse);\n  if (image->colorspace == CMYKColorspace)\n    {\n      color=(MagickRealType) p[image->channel_map[BlackPixelChannel].offset];\n      if (AbsolutePixelValue(color-q->black) >= MagickEpsilon)\n        return(MagickFalse);\n    }\n  return(MagickTrue);\n}\n\nstatic inline MagickBooleanType IsPixelGray(const Image *magick_restrict image,\n  const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    green_blue,\n    red_green;\n\n  red_green=(MagickRealType) pixel[image->channel_map[RedPixelChannel].offset]-\n    pixel[image->channel_map[GreenPixelChannel].offset];\n  green_blue=(MagickRealType)\n    pixel[image->channel_map[GreenPixelChannel].offset]-\n    pixel[image->channel_map[BluePixelChannel].offset];\n  if ((AbsolutePixelValue(red_green) < MagickEpsilon) &&\n      (AbsolutePixelValue(green_blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelInfoEquivalent(\n  const PixelInfo *magick_restrict p,const PixelInfo *magick_restrict q)\n{\n  MagickRealType\n    alpha,\n    beta;\n\n  alpha=p->alpha_trait == UndefinedPixelTrait ? (MagickRealType) OpaqueAlpha :\n    p->alpha;\n  beta=q->alpha_trait == UndefinedPixelTrait ? (MagickRealType) OpaqueAlpha :\n    q->alpha;\n  if (AbsolutePixelValue(alpha-beta) >= MagickEpsilon)\n    return(MagickFalse);\n  if ((AbsolutePixelValue(alpha-TransparentAlpha) < MagickEpsilon) ||\n      (AbsolutePixelValue(beta-TransparentAlpha) < MagickEpsilon))\n    return(MagickTrue);  /* no color component if pixel is transparent */\n  if (AbsolutePixelValue(p->red-q->red) >= MagickEpsilon)\n    return(MagickFalse);\n  if (AbsolutePixelValue(p->green-q->green) >= MagickEpsilon)\n    return(MagickFalse);\n  if (AbsolutePixelValue(p->blue-q->blue) >= MagickEpsilon)\n    return(MagickFalse);\n  if (p->colorspace == CMYKColorspace)\n    {\n      if (AbsolutePixelValue(p->black-q->black) >= MagickEpsilon)\n        return(MagickFalse);\n    }\n  return(MagickTrue);\n}\n\nstatic inline MagickBooleanType IsPixelMonochrome(\n  const Image *magick_restrict image,const Quantum *magick_restrict pixel)\n{\n  MagickRealType\n    green_blue,\n    red,\n    red_green;\n\n  red=(MagickRealType) pixel[image->channel_map[RedPixelChannel].offset];\n  if ((AbsolutePixelValue(red) >= MagickEpsilon) &&\n      (AbsolutePixelValue(red-QuantumRange) >= MagickEpsilon))\n    return(MagickFalse);\n  red_green=(MagickRealType) pixel[image->channel_map[RedPixelChannel].offset]-\n    pixel[image->channel_map[GreenPixelChannel].offset];\n  green_blue=(MagickRealType)\n    pixel[image->channel_map[GreenPixelChannel].offset]-\n    pixel[image->channel_map[BluePixelChannel].offset];\n  if ((AbsolutePixelValue(red_green) < MagickEpsilon) &&\n      (AbsolutePixelValue(green_blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelInfoGray(\n  const PixelInfo *magick_restrict pixel)\n{\n  if ((AbsolutePixelValue(pixel->red-pixel->green) < MagickEpsilon) &&\n      (AbsolutePixelValue(pixel->green-pixel->blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline MagickBooleanType IsPixelInfoMonochrome(\n  const PixelInfo *magick_restrict pixel_info)\n{\n  MagickRealType\n    green_blue,\n    red_green;\n\n  if ((AbsolutePixelValue(pixel_info->red) >= MagickEpsilon) ||\n      (AbsolutePixelValue(pixel_info->red-QuantumRange) >= MagickEpsilon))\n    return(MagickFalse);\n  red_green=pixel_info->red-pixel_info->green;\n  green_blue=pixel_info->green-pixel_info->blue;\n  if ((AbsolutePixelValue(red_green) < MagickEpsilon) &&\n      (AbsolutePixelValue(green_blue) < MagickEpsilon))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\nstatic inline void SetPixela(const Image *magick_restrict image,\n  const Quantum a,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[aPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[aPixelChannel].offset]=a;\n}\n\nstatic inline void SetPixelAlpha(const Image *magick_restrict image,\n  const Quantum alpha,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=alpha;\n}\n\nstatic inline void SetPixelAlphaTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[AlphaPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelb(const Image *magick_restrict image,\n  const Quantum b,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[bPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[bPixelChannel].offset]=b;\n}\n\nstatic inline void SetPixelBackgoundColor(const Image *magick_restrict image,\n  Quantum *magick_restrict pixel)\n{\n  ssize_t\n    i;\n\n  for (i=0; i < (ssize_t) GetPixelChannels(image); i++)\n    pixel[i]=(Quantum) 0;\n  pixel[image->channel_map[RedPixelChannel].offset]=\n    ClampToQuantum(image->background_color.red);\n  pixel[image->channel_map[GreenPixelChannel].offset]=\n    ClampToQuantum(image->background_color.green);\n  pixel[image->channel_map[BluePixelChannel].offset]=\n    ClampToQuantum(image->background_color.blue);\n  if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[BlackPixelChannel].offset]=\n      ClampToQuantum(image->background_color.black);\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=\n      image->background_color.alpha_trait == UndefinedPixelTrait ? OpaqueAlpha :\n      ClampToQuantum(image->background_color.alpha);\n}\n\nstatic inline void SetPixelBlack(const Image *magick_restrict image,\n  const Quantum black,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[BlackPixelChannel].offset]=black;\n}\n\nstatic inline void SetPixelBlackTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[BlackPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelBlue(const Image *magick_restrict image,\n  const Quantum blue,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[BluePixelChannel].offset]=blue;\n}\n\nstatic inline void SetPixelBlueTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[BluePixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelCb(const Image *magick_restrict image,\n  const Quantum cb,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[CbPixelChannel].offset]=cb;\n}\n\nstatic inline void SetPixelCbTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[CbPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelChannel(const Image *magick_restrict image,\n  const PixelChannel channel,const Quantum quantum,\n  Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[channel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[channel].offset]=quantum;\n}\n\nstatic inline void SetPixelChannelAttributes(\n  const Image *magick_restrict image,const PixelChannel channel,\n  const PixelTrait traits,const ssize_t offset)\n{\n  assert((ssize_t) channel < MaxPixelChannels);\n  assert(offset < MaxPixelChannels);\n  image->channel_map[offset].channel=channel;\n  image->channel_map[channel].offset=offset;\n  image->channel_map[channel].traits=traits;\n}\n\nstatic inline void SetPixelChannelChannel(const Image *magick_restrict image,\n  const PixelChannel channel,const ssize_t offset)\n{\n  image->channel_map[offset].channel=channel;\n  image->channel_map[channel].offset=offset;\n}\n\nstatic inline void SetPixelChannels(Image *image,const size_t number_channels)\n{\n  image->number_channels=number_channels;\n}\n\nstatic inline void SetPixelChannelTraits(Image *image,\n  const PixelChannel channel,const PixelTrait traits)\n{\n  image->channel_map[channel].traits=traits;\n}\n\nstatic inline void SetPixelCompositeMask(const Image *magick_restrict image,\n  const Quantum mask,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[CompositeMaskPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[CompositeMaskPixelChannel].offset]=mask;\n}\n\nstatic inline void SetPixelCr(const Image *magick_restrict image,\n  const Quantum cr,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[CrPixelChannel].offset]=cr;\n}\n\nstatic inline void SetPixelCrTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[CrPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelCyan(const Image *magick_restrict image,\n  const Quantum cyan,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[CyanPixelChannel].offset]=cyan;\n}\n\nstatic inline void SetPixelGray(const Image *magick_restrict image,\n  const Quantum gray,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[GrayPixelChannel].offset]=gray;\n}\n\nstatic inline void SetPixelGrayTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[GrayPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelGreen(const Image *magick_restrict image,\n  const Quantum green,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[GreenPixelChannel].offset]=green;\n}\n\nstatic inline void SetPixelGreenTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[GreenPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelIndex(const Image *magick_restrict image,\n  const Quantum index,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[IndexPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[IndexPixelChannel].offset]=index;\n}\n\nstatic inline void SetPixelIndexTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[IndexPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelViaPixelInfo(const Image *magick_restrict image,\n  const PixelInfo *magick_restrict pixel_info,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[RedPixelChannel].offset]=\n    ClampToQuantum(pixel_info->red);\n  pixel[image->channel_map[GreenPixelChannel].offset]=\n    ClampToQuantum(pixel_info->green);\n  pixel[image->channel_map[BluePixelChannel].offset]=\n    ClampToQuantum(pixel_info->blue);\n  if (image->channel_map[BlackPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[BlackPixelChannel].offset]=\n      ClampToQuantum(pixel_info->black);\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=\n      pixel_info->alpha_trait == UndefinedPixelTrait ? OpaqueAlpha :\n      ClampToQuantum(pixel_info->alpha);\n}\n\nstatic inline void SetPixelL(const Image *magick_restrict image,const Quantum L,\n  Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[LPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[LPixelChannel].offset]=L;\n}\n\nstatic inline void SetPixelMagenta(const Image *magick_restrict image,\n  const Quantum magenta,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[MagentaPixelChannel].offset]=magenta;\n}\n\nstatic inline void SetPixelMagentaTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[MagentaPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelReadMask(const Image *magick_restrict image,\n  const Quantum mask,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[ReadMaskPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[ReadMaskPixelChannel].offset]=mask;\n}\n\nstatic inline void SetPixelWriteMask(const Image *magick_restrict image,\n  const Quantum mask,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[WriteMaskPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[WriteMaskPixelChannel].offset]=mask;\n}\n\nstatic inline void SetPixelMetacontentExtent(Image *image,const size_t extent)\n{\n  image->metacontent_extent=extent;\n}\n\nstatic inline void SetPixelOpacity(const Image *magick_restrict image,\n  const Quantum alpha,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[AlphaPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[AlphaPixelChannel].offset]=QuantumRange-alpha;\n}\n\nstatic inline void SetPixelRed(const Image *magick_restrict image,\n  const Quantum red,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[RedPixelChannel].offset]=red;\n}\n\nstatic inline void SetPixelRedTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[RedPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelYellow(const Image *magick_restrict image,\n  const Quantum yellow,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[YellowPixelChannel].offset]=yellow;\n}\n\nstatic inline void SetPixelYellowTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[YellowPixelChannel].traits=traits;\n}\n\nstatic inline void SetPixelY(const Image *magick_restrict image,\n  const Quantum y,Quantum *magick_restrict pixel)\n{\n  pixel[image->channel_map[YPixelChannel].offset]=y;\n}\n\nstatic inline void SetPixelYTraits(Image *image,const PixelTrait traits)\n{\n  image->channel_map[YPixelChannel].traits=traits;\n}\n\n#if defined(__cplusplus) || defined(c_plusplus)\n}\n#endif\n\n#endif\n"], "filenames": ["MagickCore/enhance.c", "MagickCore/pixel-accessor.h"], "buggy_code_start_loc": [1986, 114], "buggy_code_end_loc": [1987, 115], "fixing_code_start_loc": [1986, 114], "fixing_code_end_loc": [1987, 115], "type": "CWE-787", "message": "ImageMagick 7.0.8-50 Q16 has a heap-based buffer overflow at MagickCore/pixel-accessor.h in SetPixelViaPixelInfo because of a MagickCore/enhance.c error.", "other": {"cve": {"id": "CVE-2019-13298", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-05T01:15:10.110", "lastModified": "2023-03-02T15:57:42.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ImageMagick 7.0.8-50 Q16 has a heap-based buffer overflow at MagickCore/pixel-accessor.h in SetPixelViaPixelInfo because of a MagickCore/enhance.c error."}, {"lang": "es", "value": "ImageMagick versi\u00f3n 7.0.8-50 Q16, presenta un desbordamiento de b\u00fafer en la regi\u00f3n heap de la memoria en el archivo MagickCore/pixel-accessor.h en la funci\u00f3n SetPixelViaPixelInfo debido a un error del archivo MagickCore/enh.c."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:imagemagick:imagemagick:7.0.8-50:q16:*:*:*:*:*:*", "matchCriteriaId": "25CCEA99-8329-46C6-9625-4FE15F24CF69"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "F1E78106-58E6-4D59-990F-75DA575BFAD9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00069.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/ImageMagick/ImageMagick/commit/d4fc44b58a14f76b1ac997517d742ee12c9dc5d3", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/ImageMagick/ImageMagick/issues/1611", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ImageMagick/ImageMagick/commit/d4fc44b58a14f76b1ac997517d742ee12c9dc5d3"}}