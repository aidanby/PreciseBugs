{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Cache\\Core\\CoreCacheHandler;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Event\\Model\\TargetGroupEvent;\nuse Pimcore\\Event\\TargetGroupEvents;\nuse Pimcore\\Model\\Tool\\Targeting;\nuse Pimcore\\Model\\Tool\\Targeting\\TargetGroup;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/targeting\")\n *\n * @internal\n */\nclass TargetingController extends AdminController implements KernelControllerEventInterface\n{\n    // RULES\n\n    /**\n     * @Route(\"/rule/list\", name=\"pimcore_admin_targeting_rulelist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleListAction(Request $request)\n    {\n        $targets = [];\n\n        $list = new Targeting\\Rule\\Listing();\n        $list->setOrderKey('prio');\n        $list->setOrder('ASC');\n\n        foreach ($list->load() as $target) {\n            $targets[] = [\n                'id' => $target->getId(),\n                'text' => $target->getName(),\n                'active' => $target->getActive(),\n                'qtip' => 'ID: ' . $target->getId(),\n            ];\n        }\n\n        return $this->adminJson($targets);\n    }\n\n    /**\n     * @Route(\"/rule/add\", name=\"pimcore_admin_targeting_ruleadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleAddAction(Request $request)\n    {\n        $target = new Targeting\\Rule();\n        $target->setName($request->get('name'));\n        $target->save();\n\n        return $this->adminJson(['success' => true, 'id' => $target->getId()]);\n    }\n\n    /**\n     * @Route(\"/rule/delete\", name=\"pimcore_admin_targeting_ruledelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleDeleteAction(Request $request)\n    {\n        $success = false;\n\n        $target = Targeting\\Rule::getById($request->get('id'));\n        if ($target) {\n            $target->delete();\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/rule/get\", name=\"pimcore_admin_targeting_ruleget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleGetAction(Request $request)\n    {\n        $target = Targeting\\Rule::getById($request->get('id'));\n        $target = $target->getObjectVars();\n\n        return $this->adminJson($target);\n    }\n\n    /**\n     * @Route(\"/rule/save\", name=\"pimcore_admin_targeting_rulesave\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleSaveAction(Request $request)\n    {\n        $data = $this->decodeJson($request->get('data'));\n\n        /** @var Targeting\\Rule|Targeting\\Rule\\Dao $target */\n        $target = Targeting\\Rule::getById($request->get('id'));\n        $target->setValues($data['settings']);\n        $target->setConditions($data['conditions']);\n        $target->setActions($data['actions']);\n        $target->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/rule/order\", name=\"pimcore_admin_targeting_ruleorder\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleOrderAction(Request $request)\n    {\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        $rules = $this->decodeJson($request->get('rules'));\n\n        /** @var Targeting\\Rule[] $changedRules */\n        $changedRules = [];\n        foreach ($rules as $id => $prio) {\n            $rule = Targeting\\Rule::getById((int)$id);\n            $prio = (int)$prio;\n\n            if ($rule) {\n                if ($rule->getPrio() !== $prio) {\n                    $rule->setPrio((int)$prio);\n                    $changedRules[] = $rule;\n                }\n            } else {\n                $return['message'] = sprintf('Rule %d was not found', (int)$id);\n\n                return $this->adminJson($return, 400);\n            }\n        }\n\n        // save only changed rules\n        foreach ($changedRules as $changedRule) {\n            $changedRule->save();\n        }\n\n        $return['success'] = true;\n\n        return $this->adminJson($return);\n    }\n\n    // TARGET GROUPS\n\n    /**\n     * @Route(\"/target-group/list\", name=\"pimcore_admin_targeting_targetgrouplist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupListAction(Request $request)\n    {\n        $targetGroups = [];\n\n        /** @var TargetGroup\\Listing|TargetGroup\\Listing\\Dao $list */\n        $list = new TargetGroup\\Listing();\n\n        if ($request->get('add-default')) {\n            $targetGroups[] = [\n                'id' => 0,\n                'text' => 'default',\n                'active' => true,\n                'qtip' => 0,\n            ];\n        }\n\n        foreach ($list->load() as $targetGroup) {\n            $targetGroups[] = [\n                'id' => $targetGroup->getId(),\n                'text' => $targetGroup->getName(),\n                'active' => $targetGroup->getActive(),\n                'qtip' => $targetGroup->getId(),\n            ];\n        }\n\n        return $this->adminJson($targetGroups);\n    }\n\n    /**\n     * @Route(\"/target-group/add\", name=\"pimcore_admin_targeting_targetgroupadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     * @param CoreCacheHandler $cache\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupAddAction(Request $request, CoreCacheHandler $cache, EventDispatcherInterface $eventDispatcher)\n    {\n        /** @var TargetGroup|TargetGroup\\Dao $targetGroup */\n        $targetGroup = new TargetGroup();\n        $targetGroup->setName($request->get('name'));\n        $targetGroup->save();\n\n        $event = new TargetGroupEvent($targetGroup);\n        $eventDispatcher->dispatch($event, TargetGroupEvents::POST_ADD);\n\n        $cache->clearTag('target_groups');\n\n        return $this->adminJson(['success' => true, 'id' => $targetGroup->getId()]);\n    }\n\n    /**\n     * @Route(\"/target-group/delete\", name=\"pimcore_admin_targeting_targetgroupdelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     * @param CoreCacheHandler $cache\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupDeleteAction(Request $request, CoreCacheHandler $cache, EventDispatcherInterface $eventDispatcher)\n    {\n        $success = false;\n\n        $targetGroup = TargetGroup::getById($request->get('id'));\n        if ($targetGroup) {\n            $event = new TargetGroupEvent($targetGroup);\n            $targetGroup->delete();\n            $success = true;\n\n            $eventDispatcher->dispatch($event, TargetGroupEvents::POST_DELETE);\n        }\n\n        $cache->clearTag('target_groups');\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/target-group/get\", name=\"pimcore_admin_targeting_targetgroupget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupGetAction(Request $request)\n    {\n        /** @var TargetGroup|TargetGroup\\Dao $targetGroup */\n        $targetGroup = TargetGroup::getById($request->get('id'));\n        $targetGroup = $targetGroup->getObjectVars();\n\n        return $this->adminJson($targetGroup);\n    }\n\n    /**\n     * @Route(\"/target-group/save\", name=\"pimcore_admin_targeting_targetgroupsave\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     * @param CoreCacheHandler $cache\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupSaveAction(Request $request, CoreCacheHandler $cache, EventDispatcherInterface $eventDispatcher)\n    {\n        $data = $this->decodeJson($request->get('data'));\n\n        /** @var TargetGroup|TargetGroup\\Dao $targetGroup */\n        $targetGroup = TargetGroup::getById($request->get('id'));\n        $targetGroup->setValues($data['settings']);\n        $targetGroup->save();\n\n        $event = new TargetGroupEvent($targetGroup);\n        $eventDispatcher->dispatch($event, TargetGroupEvents::POST_UPDATE);\n\n        $cache->clearTag('target_groups');\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $this->checkActionPermission($event, 'targeting', ['targetGroupListAction']);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Cache\\Core\\CoreCacheHandler;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Event\\Model\\TargetGroupEvent;\nuse Pimcore\\Event\\TargetGroupEvents;\nuse Pimcore\\Model\\Tool\\Targeting;\nuse Pimcore\\Model\\Tool\\Targeting\\TargetGroup;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/targeting\")\n *\n * @internal\n */\nclass TargetingController extends AdminController implements KernelControllerEventInterface\n{\n    // RULES\n\n    private function correctName(string $name): string\n    {\n        return preg_replace('/[#\\?\\*\\:\\\\\\\\<\\>\\|\"%&@=;\\+]/', '-', $name);\n    }\n\n    /**\n     * @Route(\"/rule/list\", name=\"pimcore_admin_targeting_rulelist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleListAction(Request $request)\n    {\n        $targets = [];\n\n        $list = new Targeting\\Rule\\Listing();\n        $list->setOrderKey('prio');\n        $list->setOrder('ASC');\n\n        foreach ($list->load() as $target) {\n            $targets[] = [\n                'id' => $target->getId(),\n                'text' => htmlspecialchars($target->getName()),\n                'active' => $target->getActive(),\n                'qtip' => 'ID: ' . $target->getId(),\n            ];\n        }\n\n        return $this->adminJson($targets);\n    }\n\n    /**\n     * @Route(\"/rule/add\", name=\"pimcore_admin_targeting_ruleadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleAddAction(Request $request)\n    {\n        $target = new Targeting\\Rule();\n        $target->setName($this->correctName($request->get('name')));\n        $target->save();\n\n        return $this->adminJson(['success' => true, 'id' => $target->getId()]);\n    }\n\n    /**\n     * @Route(\"/rule/delete\", name=\"pimcore_admin_targeting_ruledelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleDeleteAction(Request $request)\n    {\n        $success = false;\n\n        $target = Targeting\\Rule::getById($request->get('id'));\n        if ($target) {\n            $target->delete();\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/rule/get\", name=\"pimcore_admin_targeting_ruleget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleGetAction(Request $request)\n    {\n        $target = Targeting\\Rule::getById($request->get('id'));\n        $target = $target->getObjectVars();\n\n        return $this->adminJson($target);\n    }\n\n    /**\n     * @Route(\"/rule/save\", name=\"pimcore_admin_targeting_rulesave\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleSaveAction(Request $request)\n    {\n        $data = $this->decodeJson($request->get('data'));\n\n        /** @var Targeting\\Rule|Targeting\\Rule\\Dao $target */\n        $target = Targeting\\Rule::getById($request->get('id'));\n        $target->setValues($data['settings']);\n        $target->setName($this->correctName($target->getName()));\n        $target->setConditions($data['conditions']);\n        $target->setActions($data['actions']);\n        $target->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/rule/order\", name=\"pimcore_admin_targeting_ruleorder\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function ruleOrderAction(Request $request)\n    {\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        $rules = $this->decodeJson($request->get('rules'));\n\n        /** @var Targeting\\Rule[] $changedRules */\n        $changedRules = [];\n        foreach ($rules as $id => $prio) {\n            $rule = Targeting\\Rule::getById((int)$id);\n            $prio = (int)$prio;\n\n            if ($rule) {\n                if ($rule->getPrio() !== $prio) {\n                    $rule->setPrio((int)$prio);\n                    $changedRules[] = $rule;\n                }\n            } else {\n                $return['message'] = sprintf('Rule %d was not found', (int)$id);\n\n                return $this->adminJson($return, 400);\n            }\n        }\n\n        // save only changed rules\n        foreach ($changedRules as $changedRule) {\n            $changedRule->save();\n        }\n\n        $return['success'] = true;\n\n        return $this->adminJson($return);\n    }\n\n    // TARGET GROUPS\n\n    /**\n     * @Route(\"/target-group/list\", name=\"pimcore_admin_targeting_targetgrouplist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupListAction(Request $request)\n    {\n        $targetGroups = [];\n\n        /** @var TargetGroup\\Listing|TargetGroup\\Listing\\Dao $list */\n        $list = new TargetGroup\\Listing();\n\n        if ($request->get('add-default')) {\n            $targetGroups[] = [\n                'id' => 0,\n                'text' => 'default',\n                'active' => true,\n                'qtip' => 0,\n            ];\n        }\n\n        foreach ($list->load() as $targetGroup) {\n            $targetGroups[] = [\n                'id' => $targetGroup->getId(),\n                'text' => htmlspecialchars($targetGroup->getName()),\n                'active' => $targetGroup->getActive(),\n                'qtip' => $targetGroup->getId(),\n            ];\n        }\n\n        return $this->adminJson($targetGroups);\n    }\n\n    /**\n     * @Route(\"/target-group/add\", name=\"pimcore_admin_targeting_targetgroupadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     * @param CoreCacheHandler $cache\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupAddAction(Request $request, CoreCacheHandler $cache, EventDispatcherInterface $eventDispatcher)\n    {\n        /** @var TargetGroup|TargetGroup\\Dao $targetGroup */\n        $targetGroup = new TargetGroup();\n        $targetGroup->setName($this->correctName($request->get('name')));\n        $targetGroup->save();\n\n        $event = new TargetGroupEvent($targetGroup);\n        $eventDispatcher->dispatch($event, TargetGroupEvents::POST_ADD);\n\n        $cache->clearTag('target_groups');\n\n        return $this->adminJson(['success' => true, 'id' => $targetGroup->getId()]);\n    }\n\n    /**\n     * @Route(\"/target-group/delete\", name=\"pimcore_admin_targeting_targetgroupdelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     * @param CoreCacheHandler $cache\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupDeleteAction(Request $request, CoreCacheHandler $cache, EventDispatcherInterface $eventDispatcher)\n    {\n        $success = false;\n\n        $targetGroup = TargetGroup::getById($request->get('id'));\n        if ($targetGroup) {\n            $event = new TargetGroupEvent($targetGroup);\n            $targetGroup->delete();\n            $success = true;\n\n            $eventDispatcher->dispatch($event, TargetGroupEvents::POST_DELETE);\n        }\n\n        $cache->clearTag('target_groups');\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/target-group/get\", name=\"pimcore_admin_targeting_targetgroupget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupGetAction(Request $request)\n    {\n        /** @var TargetGroup|TargetGroup\\Dao $targetGroup */\n        $targetGroup = TargetGroup::getById($request->get('id'));\n        $targetGroup = $targetGroup->getObjectVars();\n\n        return $this->adminJson($targetGroup);\n    }\n\n    /**\n     * @Route(\"/target-group/save\", name=\"pimcore_admin_targeting_targetgroupsave\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     * @param CoreCacheHandler $cache\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function targetGroupSaveAction(Request $request, CoreCacheHandler $cache, EventDispatcherInterface $eventDispatcher)\n    {\n        $data = $this->decodeJson($request->get('data'));\n\n        /** @var TargetGroup|TargetGroup\\Dao $targetGroup */\n        $targetGroup = TargetGroup::getById($request->get('id'));\n        $targetGroup->setValues($data['settings']);\n        $targetGroup->setName($this->correctName($targetGroup->getName()));\n        $targetGroup->save();\n\n        $event = new TargetGroupEvent($targetGroup);\n        $eventDispatcher->dispatch($event, TargetGroupEvents::POST_UPDATE);\n\n        $cache->clearTag('target_groups');\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $this->checkActionPermission($event, 'targeting', ['targetGroupListAction']);\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/TargetingController.php"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [302], "fixing_code_start_loc": [40], "fixing_code_end_loc": [310], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.2.7.", "other": {"cve": {"id": "CVE-2022-0260", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-18T15:15:08.297", "lastModified": "2022-01-24T18:06:13.050", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.2.7."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.2.7"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.7", "matchCriteriaId": "E3B95F1E-AC67-4B0F-9732-CD60CCD98B49"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/3125d5f0c04cfb5835857ca9416f0bb143130a2f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/89e4ab60-21ec-4396-92ad-5b78d4c2897e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/3125d5f0c04cfb5835857ca9416f0bb143130a2f"}}