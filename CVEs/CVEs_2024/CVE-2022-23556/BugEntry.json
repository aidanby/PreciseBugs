{"buggy_code": ["<?php\n\nnamespace Config;\n\nuse CodeIgniter\\Config\\BaseConfig;\nuse CodeIgniter\\Session\\Handlers\\FileHandler;\n\nclass App extends BaseConfig\n{\n    /**\n     * --------------------------------------------------------------------------\n     * Base Site URL\n     * --------------------------------------------------------------------------\n     *\n     * URL to your CodeIgniter root. Typically this will be your base URL,\n     * WITH a trailing slash:\n     *\n     *    http://example.com/\n     *\n     * If this is not set then CodeIgniter will try guess the protocol, domain\n     * and path to your installation. However, you should always configure this\n     * explicitly and never rely on auto-guessing, especially in production\n     * environments.\n     *\n     * @var string\n     */\n    public $baseURL = 'http://localhost:8080/';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Index File\n     * --------------------------------------------------------------------------\n     *\n     * Typically this will be your index.php file, unless you've renamed it to\n     * something else. If you are using mod_rewrite to remove the page set this\n     * variable so that it is blank.\n     *\n     * @var string\n     */\n    public $indexPage = 'index.php';\n\n    /**\n     * --------------------------------------------------------------------------\n     * URI PROTOCOL\n     * --------------------------------------------------------------------------\n     *\n     * This item determines which server global should be used to retrieve the\n     * URI string.  The default setting of 'REQUEST_URI' works for most servers.\n     * If your links do not seem to work, try one of the other delicious flavors:\n     *\n     * 'REQUEST_URI'    Uses $_SERVER['REQUEST_URI']\n     * 'QUERY_STRING'   Uses $_SERVER['QUERY_STRING']\n     * 'PATH_INFO'      Uses $_SERVER['PATH_INFO']\n     *\n     * WARNING: If you set this to 'PATH_INFO', URIs will always be URL-decoded!\n     *\n     * @var string\n     */\n    public $uriProtocol = 'REQUEST_URI';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Default Locale\n     * --------------------------------------------------------------------------\n     *\n     * The Locale roughly represents the language and location that your visitor\n     * is viewing the site from. It affects the language strings and other\n     * strings (like currency markers, numbers, etc), that your program\n     * should run under for this request.\n     *\n     * @var string\n     */\n    public $defaultLocale = 'en';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Negotiate Locale\n     * --------------------------------------------------------------------------\n     *\n     * If true, the current Request object will automatically determine the\n     * language to use based on the value of the Accept-Language header.\n     *\n     * If false, no automatic detection will be performed.\n     *\n     * @var bool\n     */\n    public $negotiateLocale = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Supported Locales\n     * --------------------------------------------------------------------------\n     *\n     * If $negotiateLocale is true, this array lists the locales supported\n     * by the application in descending order of priority. If no match is\n     * found, the first locale will be used.\n     *\n     * @var string[]\n     */\n    public $supportedLocales = ['en'];\n\n    /**\n     * --------------------------------------------------------------------------\n     * Application Timezone\n     * --------------------------------------------------------------------------\n     *\n     * The default timezone that will be used in your application to display\n     * dates with the date helper, and can be retrieved through app_timezone()\n     *\n     * @var string\n     */\n    public $appTimezone = 'America/Chicago';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Default Character Set\n     * --------------------------------------------------------------------------\n     *\n     * This determines which character set is used by default in various methods\n     * that require a character set to be provided.\n     *\n     * @see http://php.net/htmlspecialchars for a list of supported charsets.\n     *\n     * @var string\n     */\n    public $charset = 'UTF-8';\n\n    /**\n     * --------------------------------------------------------------------------\n     * URI PROTOCOL\n     * --------------------------------------------------------------------------\n     *\n     * If true, this will force every request made to this application to be\n     * made via a secure connection (HTTPS). If the incoming request is not\n     * secure, the user will be redirected to a secure version of the page\n     * and the HTTP Strict Transport Security header will be set.\n     *\n     * @var bool\n     */\n    public $forceGlobalSecureRequests = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Driver\n     * --------------------------------------------------------------------------\n     *\n     * The session storage driver to use:\n     * - `CodeIgniter\\Session\\Handlers\\FileHandler`\n     * - `CodeIgniter\\Session\\Handlers\\DatabaseHandler`\n     * - `CodeIgniter\\Session\\Handlers\\MemcachedHandler`\n     * - `CodeIgniter\\Session\\Handlers\\RedisHandler`\n     *\n     * @var string\n     */\n    public $sessionDriver = FileHandler::class;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Cookie Name\n     * --------------------------------------------------------------------------\n     *\n     * The session cookie name, must contain only [0-9a-z_-] characters\n     *\n     * @var string\n     */\n    public $sessionCookieName = 'ci_session';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Expiration\n     * --------------------------------------------------------------------------\n     *\n     * The number of SECONDS you want the session to last.\n     * Setting to 0 (zero) means expire when the browser is closed.\n     *\n     * @var int\n     */\n    public $sessionExpiration = 7200;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Save Path\n     * --------------------------------------------------------------------------\n     *\n     * The location to save sessions to and is driver dependent.\n     *\n     * For the 'files' driver, it's a path to a writable directory.\n     * WARNING: Only absolute paths are supported!\n     *\n     * For the 'database' driver, it's a table name.\n     * Please read up the manual for the format with other session drivers.\n     *\n     * IMPORTANT: You are REQUIRED to set a valid save path!\n     *\n     * @var string\n     */\n    public $sessionSavePath = WRITEPATH . 'session';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Match IP\n     * --------------------------------------------------------------------------\n     *\n     * Whether to match the user's IP address when reading the session data.\n     *\n     * WARNING: If you're using the database driver, don't forget to update\n     *          your session table's PRIMARY KEY when changing this setting.\n     *\n     * @var bool\n     */\n    public $sessionMatchIP = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Time to Update\n     * --------------------------------------------------------------------------\n     *\n     * How many seconds between CI regenerating the session ID.\n     *\n     * @var int\n     */\n    public $sessionTimeToUpdate = 300;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Regenerate Destroy\n     * --------------------------------------------------------------------------\n     *\n     * Whether to destroy session data associated with the old session ID\n     * when auto-regenerating the session ID. When set to FALSE, the data\n     * will be later deleted by the garbage collector.\n     *\n     * @var bool\n     */\n    public $sessionRegenerateDestroy = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Prefix\n     * --------------------------------------------------------------------------\n     *\n     * Set a cookie name prefix if you need to avoid collisions.\n     *\n     * @var string\n     *\n     * @deprecated use Config\\Cookie::$prefix property instead.\n     */\n    public $cookiePrefix = '';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Domain\n     * --------------------------------------------------------------------------\n     *\n     * Set to `.your-domain.com` for site-wide cookies.\n     *\n     * @var string\n     *\n     * @deprecated use Config\\Cookie::$domain property instead.\n     */\n    public $cookieDomain = '';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Path\n     * --------------------------------------------------------------------------\n     *\n     * Typically will be a forward slash.\n     *\n     * @var string\n     *\n     * @deprecated use Config\\Cookie::$path property instead.\n     */\n    public $cookiePath = '/';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Secure\n     * --------------------------------------------------------------------------\n     *\n     * Cookie will only be set if a secure HTTPS connection exists.\n     *\n     * @var bool\n     *\n     * @deprecated use Config\\Cookie::$secure property instead.\n     */\n    public $cookieSecure = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie HttpOnly\n     * --------------------------------------------------------------------------\n     *\n     * Cookie will only be accessible via HTTP(S) (no JavaScript).\n     *\n     * @var bool\n     *\n     * @deprecated use Config\\Cookie::$httponly property instead.\n     */\n    public $cookieHTTPOnly = true;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie SameSite\n     * --------------------------------------------------------------------------\n     *\n     * Configure cookie SameSite setting. Allowed values are:\n     * - None\n     * - Lax\n     * - Strict\n     * - ''\n     *\n     * Alternatively, you can use the constant names:\n     * - `Cookie::SAMESITE_NONE`\n     * - `Cookie::SAMESITE_LAX`\n     * - `Cookie::SAMESITE_STRICT`\n     *\n     * Defaults to `Lax` for compatibility with modern browsers. Setting `''`\n     * (empty string) means default SameSite attribute set by browsers (`Lax`)\n     * will be set on cookies. If set to `None`, `$cookieSecure` must also be set.\n     *\n     * @var string|null\n     *\n     * @deprecated use Config\\Cookie::$samesite property instead.\n     */\n    public $cookieSameSite = 'Lax';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Reverse Proxy IPs\n     * --------------------------------------------------------------------------\n     *\n     * If your server is behind a reverse proxy, you must whitelist the proxy\n     * IP addresses from which CodeIgniter should trust headers such as\n     * HTTP_X_FORWARDED_FOR and HTTP_CLIENT_IP in order to properly identify\n     * the visitor's IP address.\n     *\n     * You can use both an array or a comma-separated list of proxy addresses,\n     * as well as specifying whole subnets. Here are a few examples:\n     *\n     * Comma-separated: '10.0.1.200,192.168.5.0/24'\n     * Array: ['10.0.1.200', '192.168.5.0/24']\n     *\n     * @var string|string[]\n     */\n    public $proxyIPs = '';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Token Name\n     * --------------------------------------------------------------------------\n     *\n     * The token name.\n     *\n     * @deprecated Use `Config\\Security` $tokenName property instead of using this property.\n     *\n     * @var string\n     */\n    public $CSRFTokenName = 'csrf_test_name';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Header Name\n     * --------------------------------------------------------------------------\n     *\n     * The header name.\n     *\n     * @deprecated Use `Config\\Security` $headerName property instead of using this property.\n     *\n     * @var string\n     */\n    public $CSRFHeaderName = 'X-CSRF-TOKEN';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Cookie Name\n     * --------------------------------------------------------------------------\n     *\n     * The cookie name.\n     *\n     * @deprecated Use `Config\\Security` $cookieName property instead of using this property.\n     *\n     * @var string\n     */\n    public $CSRFCookieName = 'csrf_cookie_name';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Expire\n     * --------------------------------------------------------------------------\n     *\n     * The number in seconds the token should expire.\n     *\n     * @deprecated Use `Config\\Security` $expire property instead of using this property.\n     *\n     * @var int\n     */\n    public $CSRFExpire = 7200;\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Regenerate\n     * --------------------------------------------------------------------------\n     *\n     * Regenerate token on every submission?\n     *\n     * @deprecated Use `Config\\Security` $regenerate property instead of using this property.\n     *\n     * @var bool\n     */\n    public $CSRFRegenerate = true;\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Redirect\n     * --------------------------------------------------------------------------\n     *\n     * Redirect to previous page with error on failure?\n     *\n     * @deprecated Use `Config\\Security` $redirect property instead of using this property.\n     *\n     * @var bool\n     */\n    public $CSRFRedirect = true;\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF SameSite\n     * --------------------------------------------------------------------------\n     *\n     * Setting for CSRF SameSite cookie token. Allowed values are:\n     * - None\n     * - Lax\n     * - Strict\n     * - ''\n     *\n     * Defaults to `Lax` as recommended in this link:\n     *\n     * @see https://portswigger.net/web-security/csrf/samesite-cookies\n     *\n     * @deprecated `Config\\Cookie` $samesite property is used.\n     *\n     * @var string\n     */\n    public $CSRFSameSite = 'Lax';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Content Security Policy\n     * --------------------------------------------------------------------------\n     *\n     * Enables the Response's Content Secure Policy to restrict the sources that\n     * can be used for images, scripts, CSS files, audio, video, etc. If enabled,\n     * the Response object will populate default values for the policy from the\n     * `ContentSecurityPolicy.php` file. Controllers can always add to those\n     * restrictions at run time.\n     *\n     * For a better understanding of CSP, see these documents:\n     *\n     * @see http://www.html5rocks.com/en/tutorials/security/content-security-policy/\n     * @see http://www.w3.org/TR/CSP/\n     *\n     * @var bool\n     */\n    public $CSPEnabled = false;\n}\n", "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function spl_autoload_register expects \\\\(callable\\\\(string\\\\)\\\\: void\\\\)\\\\|null, array\\\\{\\\\$this\\\\(CodeIgniter\\\\\\\\Autoloader\\\\\\\\Autoloader\\\\), 'loadClass'\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Autoloader/Autoloader.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function spl_autoload_register expects \\\\(callable\\\\(string\\\\)\\\\: void\\\\)\\\\|null, array\\\\{\\\\$this\\\\(CodeIgniter\\\\\\\\Autoloader\\\\\\\\Autoloader\\\\), 'loadClassmap'\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Autoloader/Autoloader.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$backupHandler \\\\(string\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$handler \\\\(string\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$validHandlers \\\\(array\\\\<string, string\\\\>\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Comparison operation \\\"\\\\>\\\" between int and \\\\(array\\\\|float\\\\|int\\\\) results in an error\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/FileHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^If condition is always true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/FileHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$storePath \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/FileHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Unreachable statement \\\\- code above always terminates\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/MemcachedHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$data might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/MemcachedHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$redis \\\\(array\\\\<string, int\\\\|string\\\\|null\\\\>\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/PredisHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Cache\\\\\\\\Handlers\\\\\\\\RedisHandler\\\\:\\\\:\\\\$redis \\\\(Redis\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/RedisHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:getPost\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:setLocale\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$appTimezone \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$defaultLocale \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BaseBuilder\\\\:\\\\:\\\\$db \\\\(CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/BaseBuilder.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Database\\\\\\\\QueryInterface\\\\:\\\\:getOriginalQuery\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/BaseConnection.php\n\n\t\t-\n\t\t\tmessage: \"#^Negated boolean expression is always false\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Database/BaseResult.php\n\n\t\t-\n\t\t\tmessage: \"#^Unreachable statement \\\\- code above always terminates\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/BaseResult.php\n\n\t\t-\n\t\t\tmessage: \"#^While loop condition is always true\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/BaseResult.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\ConnectionInterface\\\\:\\\\:\\\\$DBDriver\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/Database.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\ConnectionInterface\\\\:\\\\:\\\\$connID\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/Database.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\Migration\\\\:\\\\:\\\\$DBGroup \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Migration.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Migrations\\\\:\\\\:\\\\$enabled \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MigrationRunner.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Migrations\\\\:\\\\:\\\\$table \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MigrationRunner.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$errno on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$error on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$insert_id on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method autocommit\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method begin_transaction\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method close\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method commit\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method more_results\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method next_result\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method query\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method real_escape_string\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method rollback\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method select_db\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method store_result\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$strictOn \\\\(bool\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\MySQLi\\\\\\\\Connection\\\\:\\\\:\\\\$mysqli \\\\(mysqli\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$mysqli\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method bind_param\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method execute\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method get_result\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$field_count on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$num_rows on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method data_seek\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_assoc\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_field\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_fields\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_object\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method field_seek\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Strict comparison using \\\\=\\\\=\\\\= between array<string, int|string|null> and false will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Postgre/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Postgre/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$schema\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLSRV/Builder.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$schema\\\\.$#\"\n\t\t\tcount: 13\n\t\t\tpath: system/Database/SQLSRV/Forge.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLSRV/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method changes\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method close\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method escapeString\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method exec\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 4\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorCode\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorMsg\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastInsertRowID\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method query\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method bindValue\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method execute\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorCode\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorMsg\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method prepare\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method columnName\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method columnType\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetchArray\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method numColumns\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method reset\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Database\\\\:\\\\:\\\\$filesPath \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Seeder.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Exceptions\\\\:\\\\:\\\\$sensitiveDataInTrace \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Exceptions.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Toolbar\\\\:\\\\:\\\\$collectVarData \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\View\\\\\\\\RendererInterface\\\\:\\\\:getPerformanceData\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar/Collectors/Events.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Log\\\\\\\\Logger\\\\:\\\\:\\\\$logCache \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar/Collectors/Logs.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\View\\\\\\\\RendererInterface\\\\:\\\\:getData\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar/Collectors/Views.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\View\\\\\\\\RendererInterface\\\\:\\\\:getPerformanceData\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Debug/Toolbar/Collectors/Views.php\n\n\t\t-\n\t\t\tmessage: \"#^Static property CodeIgniter\\\\\\\\Email\\\\\\\\Email\\\\:\\\\:\\\\$func_overload \\\\(bool\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Email/Email.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Encryption\\\\:\\\\:\\\\$digest \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Encryption/Encryption.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Files\\\\\\\\File\\\\:\\\\:\\\\$size \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Files/File.php\n\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Filters\\\\:\\\\:\\\\$filters \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Filters\\\\:\\\\:\\\\$globals \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Filters\\\\:\\\\:\\\\$methods \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Files/UploadedFile.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Files\\\\\\\\UploadedFile\\\\:\\\\:\\\\$error \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/HTTP/Files/UploadedFile.php\n\n\t\t-\n\t\t\tmessage: \"#^Return type \\\\(bool\\\\) of method CodeIgniter\\\\\\\\HTTP\\\\\\\\Files\\\\\\\\UploadedFile\\\\:\\\\:move\\\\(\\\\) should be compatible with return type \\\\(CodeIgniter\\\\\\\\Files\\\\\\\\File\\\\) of method CodeIgniter\\\\\\\\Files\\\\\\\\File\\\\:\\\\:move\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Files/UploadedFile.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\IncomingRequest\\\\:\\\\:\\\\$locale \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/IncomingRequest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Message\\\\:\\\\:\\\\$protocolVersion \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Message.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$_GET on left side of \\\\?\\\\? always exists and is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/RedirectResponse.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$_POST on left side of \\\\?\\\\? always exists and is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/RedirectResponse.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:\\\\$proxyIPs \\\\(array\\\\|string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Request.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:\\\\$uri \\\\(CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Request.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\:\\\\:\\\\$fragment \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/URI.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\:\\\\:\\\\$host \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/URI.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\:\\\\:\\\\$path \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/URI.php\n\n\t\t-\n\t\t\tmessage: \"#^Right side of && is always true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Helpers/filesystem_helper.php\n\n\t\t-\n\t\t\tmessage: \"#^Binary operation \\\"\\\\+\\\" between 0 and string results in an error\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Helpers/number_helper.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$count might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Helpers/url_helper.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$image \\\\(CodeIgniter\\\\\\\\Images\\\\\\\\Image\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/BaseHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Comparison operation \\\"\\\\>\\\\=\\\" between \\\\(array\\\\|float\\\\|int\\\\) and 0 results in an error\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc type string\\\\|null of property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\ImageMagickHandler\\\\:\\\\:\\\\$resource is not covariant with PHPDoc type resource\\\\|null of overridden property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$height \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 4\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$width \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 4\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$gravity might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$xAxis might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$yAxis might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Logger\\\\:\\\\:\\\\$dateFormat \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Log/Logger.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getDefaultNamespace\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getFilterForRoute\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getFiltersForRoute\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getRoutesOptions\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:isFiltered\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:setHTTPVerb\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getRegisteredControllers\\\\(.*\\\\)\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getRoutes\\\\(\\\\) invoked with 1 parameter, 0 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$CSRF[a-zA-Z]+ \\\\([a-zA-Z]+\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 6\n\t\t\tpath: system/Security/Security.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Security\\\\:\\\\:\\\\$[a-zA-Z]+ \\\\([a-zA-Z]+\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 8\n\t\t\tpath: system/Security/Security.php\n\n\t\t-\n\t\t\tmessage: \"#^Strict comparison using \\\\=\\\\=\\\\= between string and true will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Handlers/RedisHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Session\\\\\\\\Session\\\\:\\\\:\\\\$sessionExpiration \\\\(int\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$cookieDomain \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$cookiePath \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$cookieSecure \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionCookieName \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionExpiration \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionMatchIP \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionRegenerateDestroy \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionTimeToUpdate \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$domain \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$path \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$raw \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$samesite \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$secure \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Negated boolean expression is always false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/CIUnitTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property object\\\\:\\\\:\\\\$createdField\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Fabricator.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property object\\\\:\\\\:\\\\$deletedField\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Fabricator.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property object\\\\:\\\\:\\\\$updatedField\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Fabricator.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Test\\\\\\\\CIUnitTestCase\\\\:\\\\:\\\\$bodyFormat \\\\(string\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/FeatureTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Test\\\\\\\\CIUnitTestCase\\\\:\\\\:\\\\$clean \\\\(bool\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/FeatureTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Test\\\\\\\\CIUnitTestCase\\\\:\\\\:\\\\$session \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/FeatureTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$insert_id on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Mock/MockConnection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Throttle\\\\\\\\Throttler\\\\:\\\\:\\\\$testTime \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Throttle/Throttler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Validation\\\\\\\\Validation\\\\:\\\\:\\\\$errors \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Validation/Validation.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$error on left side of \\\\?\\\\? always exists and is always null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Validation/Validation.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\View\\\\\\\\Cell\\\\:\\\\:\\\\$cache \\\\(CodeIgniter\\\\\\\\Cache\\\\\\\\CacheInterface\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/View/Cell.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\View\\\\:\\\\:\\\\$plugins \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/View/Parser.php\n\n\t\t-\n\t\t\tmessage: \"#^Result of \\\\|\\\\| is always false\\\\.$#\"\n\t\t\tpaths:\n\t\t\t\t- system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Binary operation \\\"/\\\" between string and 8 results in an error\\\\.$#\"\n\t\t\tpath: system/Encryption/Handlers/OpenSSLHandler.php\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Validation\\FormatRules;\n\n/**\n * Representation of an HTTP request.\n */\nclass Request extends Message implements MessageInterface, RequestInterface\n{\n    use RequestTrait;\n\n    /**\n     * Proxy IPs\n     *\n     * @var array|string\n     *\n     * @deprecated Check the App config directly\n     */\n    protected $proxyIPs;\n\n    /**\n     * Request method.\n     *\n     * @var string\n     */\n    protected $method;\n\n    /**\n     * A URI instance.\n     *\n     * @var URI\n     */\n    protected $uri;\n\n    /**\n     * Constructor.\n     *\n     * @param object $config\n     *\n     * @deprecated The $config is no longer needed and will be removed in a future version\n     */\n    public function __construct($config = null)\n    {\n        /**\n         * @deprecated $this->proxyIps property will be removed in the future\n         */\n        $this->proxyIPs = $config->proxyIPs;\n\n        if (empty($this->method)) {\n            $this->method = $this->getServer('REQUEST_METHOD') ?? 'GET';\n        }\n\n        if (empty($this->uri)) {\n            $this->uri = new URI();\n        }\n    }\n\n    /**\n     * Validate an IP address\n     *\n     * @param string $ip    IP Address\n     * @param string $which IP protocol: 'ipv4' or 'ipv6'\n     *\n     * @deprecated Use Validation instead\n     *\n     * @codeCoverageIgnore\n     */\n    public function isValidIP(?string $ip = null, ?string $which = null): bool\n    {\n        return (new FormatRules())->valid_ip($ip, $which);\n    }\n\n    /**\n     * Get the request method.\n     *\n     * @param bool $upper Whether to return in upper or lower case.\n     *\n     * @deprecated The $upper functionality will be removed and this will revert to its PSR-7 equivalent\n     *\n     * @codeCoverageIgnore\n     */\n    public function getMethod(bool $upper = false): string\n    {\n        return ($upper) ? strtoupper($this->method) : strtolower($this->method);\n    }\n\n    /**\n     * Sets the request method. Used when spoofing the request.\n     *\n     * @return $this\n     *\n     * @deprecated Use withMethod() instead for immutability\n     *\n     * @codeCoverageIgnore\n     */\n    public function setMethod(string $method)\n    {\n        $this->method = $method;\n\n        return $this;\n    }\n\n    /**\n     * Returns an instance with the specified method.\n     *\n     * @param string $method\n     *\n     * @return static\n     */\n    public function withMethod($method)\n    {\n        $request = clone $this;\n\n        $request->method = $method;\n\n        return $request;\n    }\n\n    /**\n     * Retrieves the URI instance.\n     *\n     * @return URI\n     */\n    public function getUri()\n    {\n        return $this->uri;\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Validation\\FormatRules;\n\n/**\n * Request Trait\n *\n * Additional methods to make a PSR-7 Request class\n * compliant with the framework's own RequestInterface.\n *\n * @see https://github.com/php-fig/http-message/blob/master/src/RequestInterface.php\n */\ntrait RequestTrait\n{\n    /**\n     * IP address of the current user.\n     *\n     * @var string\n     *\n     * @deprecated Will become private in a future release\n     */\n    protected $ipAddress = '';\n\n    /**\n     * Stores values we've retrieved from\n     * PHP globals.\n     *\n     * @var array\n     */\n    protected $globals = [];\n\n    /**\n     * Gets the user's IP address.\n     *\n     * @return string IP address\n     */\n    public function getIPAddress(): string\n    {\n        if ($this->ipAddress) {\n            return $this->ipAddress;\n        }\n\n        $ipValidator = [\n            new FormatRules(),\n            'valid_ip',\n        ];\n\n        /**\n         * @deprecated $this->proxyIPs property will be removed in the future\n         */\n        $proxyIPs = $this->proxyIPs ?? config('App')->proxyIPs;\n        if (! empty($proxyIPs) && ! is_array($proxyIPs)) {\n            $proxyIPs = explode(',', str_replace(' ', '', $proxyIPs));\n        }\n\n        $this->ipAddress = $this->getServer('REMOTE_ADDR');\n\n        if ($proxyIPs) {\n            foreach (['x-forwarded-for', 'client-ip', 'x-client-ip', 'x-cluster-client-ip'] as $header) {\n                $spoof     = null;\n                $headerObj = $this->header($header);\n\n                if ($headerObj !== null) {\n                    $spoof = $headerObj->getValue();\n\n                    // Some proxies typically list the whole chain of IP\n                    // addresses through which the client has reached us.\n                    // e.g. client_ip, proxy_ip1, proxy_ip2, etc.\n                    sscanf($spoof, '%[^,]', $spoof);\n\n                    if (! $ipValidator($spoof)) {\n                        $spoof = null;\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n            if ($spoof) {\n                foreach ($proxyIPs as $proxyIP) {\n                    // Check if we have an IP address or a subnet\n                    if (strpos($proxyIP, '/') === false) {\n                        // An IP address (and not a subnet) is specified.\n                        // We can compare right away.\n                        if ($proxyIP === $this->ipAddress) {\n                            $this->ipAddress = $spoof;\n                            break;\n                        }\n\n                        continue;\n                    }\n\n                    // We have a subnet ... now the heavy lifting begins\n                    if (! isset($separator)) {\n                        $separator = $ipValidator($this->ipAddress, 'ipv6') ? ':' : '.';\n                    }\n\n                    // If the proxy entry doesn't match the IP protocol - skip it\n                    if (strpos($proxyIP, $separator) === false) {\n                        continue;\n                    }\n\n                    // Convert the REMOTE_ADDR IP address to binary, if needed\n                    if (! isset($ip, $sprintf)) {\n                        if ($separator === ':') {\n                            // Make sure we're have the \"full\" IPv6 format\n                            $ip = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($this->ipAddress, ':')), $this->ipAddress));\n\n                            for ($j = 0; $j < 8; $j++) {\n                                $ip[$j] = intval($ip[$j], 16);\n                            }\n\n                            $sprintf = '%016b%016b%016b%016b%016b%016b%016b%016b';\n                        } else {\n                            $ip      = explode('.', $this->ipAddress);\n                            $sprintf = '%08b%08b%08b%08b';\n                        }\n\n                        $ip = vsprintf($sprintf, $ip);\n                    }\n\n                    // Split the netmask length off the network address\n                    sscanf($proxyIP, '%[^/]/%d', $netaddr, $masklen);\n\n                    // Again, an IPv6 address is most likely in a compressed form\n                    if ($separator === ':') {\n                        $netaddr = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($netaddr, ':')), $netaddr));\n\n                        for ($i = 0; $i < 8; $i++) {\n                            $netaddr[$i] = intval($netaddr[$i], 16);\n                        }\n                    } else {\n                        $netaddr = explode('.', $netaddr);\n                    }\n\n                    // Convert to binary and finally compare\n                    if (strncmp($ip, vsprintf($sprintf, $netaddr), $masklen) === 0) {\n                        $this->ipAddress = $spoof;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (! $ipValidator($this->ipAddress)) {\n            return $this->ipAddress = '0.0.0.0';\n        }\n\n        return empty($this->ipAddress) ? '' : $this->ipAddress;\n    }\n\n    /**\n     * Fetch an item from the $_SERVER array.\n     *\n     * @param array|string|null $index  Index for item to be fetched from $_SERVER\n     * @param int|null          $filter A filter name to be applied\n     * @param null              $flags\n     *\n     * @return mixed\n     */\n    public function getServer($index = null, $filter = null, $flags = null)\n    {\n        return $this->fetchGlobal('server', $index, $filter, $flags);\n    }\n\n    /**\n     * Fetch an item from the $_ENV array.\n     *\n     * @param null $index  Index for item to be fetched from $_ENV\n     * @param null $filter A filter name to be applied\n     * @param null $flags\n     *\n     * @return mixed\n     */\n    public function getEnv($index = null, $filter = null, $flags = null)\n    {\n        return $this->fetchGlobal('env', $index, $filter, $flags);\n    }\n\n    /**\n     * Allows manually setting the value of PHP global, like $_GET, $_POST, etc.\n     *\n     * @param mixed $value\n     *\n     * @return $this\n     */\n    public function setGlobal(string $method, $value)\n    {\n        $this->globals[$method] = $value;\n\n        return $this;\n    }\n\n    /**\n     * Fetches one or more items from a global, like cookies, get, post, etc.\n     * Can optionally filter the input when you retrieve it by passing in\n     * a filter.\n     *\n     * If $type is an array, it must conform to the input allowed by the\n     * filter_input_array method.\n     *\n     * http://php.net/manual/en/filter.filters.sanitize.php\n     *\n     * @param string            $method Input filter constant\n     * @param array|string|null $index\n     * @param int|null          $filter Filter constant\n     * @param array|int|null    $flags  Options\n     *\n     * @return array|bool|string|null\n     */\n    public function fetchGlobal(string $method, $index = null, ?int $filter = null, $flags = null)\n    {\n        $method = strtolower($method);\n\n        if (! isset($this->globals[$method])) {\n            $this->populateGlobals($method);\n        }\n\n        // Null filters cause null values to return.\n        $filter ??= FILTER_DEFAULT;\n        $flags = is_array($flags) ? $flags : (is_numeric($flags) ? (int) $flags : 0);\n\n        // Return all values when $index is null\n        if ($index === null) {\n            $values = [];\n\n            foreach ($this->globals[$method] as $key => $value) {\n                $values[$key] = is_array($value)\n                    ? $this->fetchGlobal($method, $key, $filter, $flags)\n                    : filter_var($value, $filter, $flags);\n            }\n\n            return $values;\n        }\n\n        // allow fetching multiple keys at once\n        if (is_array($index)) {\n            $output = [];\n\n            foreach ($index as $key) {\n                $output[$key] = $this->fetchGlobal($method, $key, $filter, $flags);\n            }\n\n            return $output;\n        }\n\n        // Does the index contain array notation?\n        if (($count = preg_match_all('/(?:^[^\\[]+)|\\[[^]]*\\]/', $index, $matches)) > 1) {\n            $value = $this->globals[$method];\n\n            for ($i = 0; $i < $count; $i++) {\n                $key = trim($matches[0][$i], '[]');\n\n                if ($key === '') { // Empty notation will return the value as array\n                    break;\n                }\n\n                if (isset($value[$key])) {\n                    $value = $value[$key];\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        if (! isset($value)) {\n            $value = $this->globals[$method][$index] ?? null;\n        }\n\n        if (is_array($value)\n            && (\n                $filter !== FILTER_DEFAULT\n                || (\n                    (is_numeric($flags) && $flags !== 0)\n                    || is_array($flags) && $flags !== []\n                )\n            )\n        ) {\n            // Iterate over array and append filter and flags\n            array_walk_recursive($value, static function (&$val) use ($filter, $flags) {\n                $val = filter_var($val, $filter, $flags);\n            });\n\n            return $value;\n        }\n\n        // Cannot filter these types of data automatically...\n        if (is_array($value) || is_object($value) || $value === null) {\n            return $value;\n        }\n\n        return filter_var($value, $filter, $flags);\n    }\n\n    /**\n     * Saves a copy of the current state of one of several PHP globals\n     * so we can retrieve them later.\n     */\n    protected function populateGlobals(string $method)\n    {\n        if (! isset($this->globals[$method])) {\n            $this->globals[$method] = [];\n        }\n\n        // Don't populate ENV as it might contain\n        // sensitive data that we don't want to get logged.\n        switch ($method) {\n            case 'get':\n                $this->globals['get'] = $_GET;\n                break;\n\n            case 'post':\n                $this->globals['post'] = $_POST;\n                break;\n\n            case 'request':\n                $this->globals['request'] = $_REQUEST;\n                break;\n\n            case 'cookie':\n                $this->globals['cookie'] = $_COOKIE;\n                break;\n\n            case 'server':\n                $this->globals['server'] = $_SERVER;\n                break;\n        }\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Test\\Mock;\n\nuse Config\\App;\n\nclass MockAppConfig extends App\n{\n    public $baseURL          = 'http://example.com/';\n    public $uriProtocol      = 'REQUEST_URI';\n    public $cookiePrefix     = '';\n    public $cookieDomain     = '';\n    public $cookiePath       = '/';\n    public $cookieSecure     = false;\n    public $cookieHTTPOnly   = false;\n    public $cookieSameSite   = 'Lax';\n    public $proxyIPs         = '';\n    public $CSRFTokenName    = 'csrf_test_name';\n    public $CSRFHeaderName   = 'X-CSRF-TOKEN';\n    public $CSRFCookieName   = 'csrf_cookie_name';\n    public $CSRFExpire       = 7200;\n    public $CSRFRegenerate   = true;\n    public $CSRFExcludeURIs  = ['http://example.com'];\n    public $CSRFRedirect     = false;\n    public $CSRFSameSite     = 'Lax';\n    public $CSPEnabled       = false;\n    public $defaultLocale    = 'en';\n    public $negotiateLocale  = false;\n    public $supportedLocales = [\n        'en',\n        'es',\n    ];\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Test\\Mock;\n\nuse Config\\App;\n\nclass MockCLIConfig extends App\n{\n    public $baseURL          = 'http://example.com/';\n    public $uriProtocol      = 'REQUEST_URI';\n    public $cookiePrefix     = '';\n    public $cookieDomain     = '';\n    public $cookiePath       = '/';\n    public $cookieSecure     = false;\n    public $cookieHTTPOnly   = false;\n    public $cookieSameSite   = 'Lax';\n    public $proxyIPs         = '';\n    public $CSRFTokenName    = 'csrf_test_name';\n    public $CSRFCookieName   = 'csrf_cookie_name';\n    public $CSRFExpire       = 7200;\n    public $CSRFRegenerate   = true;\n    public $CSRFExcludeURIs  = ['http://example.com'];\n    public $CSRFSameSite     = 'Lax';\n    public $CSPEnabled       = false;\n    public $defaultLocale    = 'en';\n    public $negotiateLocale  = false;\n    public $supportedLocales = [\n        'en',\n        'es',\n    ];\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\Files\\UploadedFile;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse Config\\App;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n *\n * @group SeparateProcess\n */\nfinal class IncomingRequestTest extends CIUnitTestCase\n{\n    private Request $request;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_POST = $_GET = $_SERVER = $_REQUEST = $_ENV = $_COOKIE = $_SESSION = [];\n    }\n\n    public function testCanGrabRequestVars()\n    {\n        $_REQUEST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getVar('TEST'));\n        $this->assertNull($this->request->getVar('TESTY'));\n    }\n\n    public function testCanGrabGetVars()\n    {\n        $_GET['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getGet('TEST'));\n        $this->assertNull($this->request->getGet('TESTY'));\n    }\n\n    public function testCanGrabPostVars()\n    {\n        $_POST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getPost('TEST'));\n        $this->assertNull($this->request->getPost('TESTY'));\n    }\n\n    public function testCanGrabPostBeforeGet()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n\n        $this->assertSame('5', $this->request->getPostGet('TEST'));\n        $this->assertSame('3', $this->request->getGetPost('TEST'));\n    }\n\n    public function testNoOldInput()\n    {\n        $this->assertNull($this->request->getOldInput('name'));\n    }\n\n    public function testCanGetOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['one' => 'two'],\n            'post' => ['name' => 'foo'],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('name'));\n        $this->assertSame('two', $this->request->getOldInput('one'));\n    }\n\n    public function testCanGetOldInputDotted()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('banana.name'));\n        $this->assertSame('two', $this->request->getOldInput('apple.name'));\n    }\n\n    public function testMissingOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertNull($this->request->getOldInput('pineapple.name'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     */\n    public function testCanGetOldInputArrayWithSESSION()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame(['name' => 'two'], $this->request->getOldInput('apple'));\n        $this->assertSame(['name' => 'foo'], $this->request->getOldInput('banana'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     *\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function testCanGetOldInputArrayWithSessionService()\n    {\n        $locations = [\n            'AB' => 'Alberta',\n            'BC' => 'British Columbia',\n            'SK' => 'Saskatchewan',\n        ];\n        $session = service('session');\n        $session->set(['_ci_old_input' => ['post' => ['location' => $locations]]]);\n\n        $this->assertSame($locations, $this->request->getOldInput('location'));\n    }\n\n    public function testCanGrabServerVars()\n    {\n        $server                   = $this->getPrivateProperty($this->request, 'globals');\n        $server['server']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getServer('TEST'));\n        $this->assertNull($this->request->getServer('TESTY'));\n    }\n\n    public function testCanGrabEnvVars()\n    {\n        $server                = $this->getPrivateProperty($this->request, 'globals');\n        $server['env']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getEnv('TEST'));\n        $this->assertNull($this->request->getEnv('TESTY'));\n    }\n\n    public function testCanGrabCookieVars()\n    {\n        $_COOKIE['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getCookie('TEST'));\n        $this->assertNull($this->request->getCookie('TESTY'));\n    }\n\n    public function testStoresDefaultLocale()\n    {\n        $config = new App();\n\n        $this->assertSame($config->defaultLocale, $this->request->getDefaultLocale());\n        $this->assertSame($config->defaultLocale, $this->request->getLocale());\n    }\n\n    public function testSetLocaleSaves()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('en');\n        $this->assertSame('en', $request->getLocale());\n    }\n\n    public function testSetBadLocale()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('xx');\n        $this->assertSame('es', $request->getLocale());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2774\n     */\n    public function testNegotiatesLocale()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr-FR; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    public function testNegotiatesLocaleOnlyBroad()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    // The negotiation tests below are not intended to exercise the HTTP\\Negotiate class -\n    // that is up to the NegotiateTest. These are only to make sure that the requests\n    // flow through to the negotiator\n\n    public function testNegotiatesNot()\n    {\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->expectException(HTTPException::class);\n        $this->request->negotiate('something bogus', ['iso-8859-5', 'unicode-1-1']);\n    }\n\n    public function testNegotiatesCharset()\n    {\n        // $_SERVER['HTTP_ACCEPT_CHARSET'] = 'iso-8859-5, unicode-1-1;q=0.8';\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->assertSame(strtolower($this->request->config->charset), $this->request->negotiate('charset', ['iso-8859', 'unicode-1-2']));\n    }\n\n    public function testNegotiatesMedia()\n    {\n        $this->request->setHeader('Accept', 'text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c');\n        $this->assertSame('text/html', $this->request->negotiate('media', ['text/html', 'text/x-c', 'text/x-dvi', 'text/plain']));\n    }\n\n    public function testNegotiatesEncoding()\n    {\n        $this->request->setHeader('Accept-Encoding', 'gzip;q=1.0, identity; q=0.4, compress;q=0.5');\n        $this->assertSame('gzip', $this->request->negotiate('encoding', ['gzip', 'compress']));\n    }\n\n    public function testNegotiatesLanguage()\n    {\n        $this->request->setHeader('Accept-Language', 'da, en-gb;q=0.8, en;q=0.7');\n        $this->assertSame('en', $this->request->negotiate('language', ['en', 'da']));\n    }\n\n    public function testCanGrabGetRawJSON()\n    {\n        $json = '{\"code\":1, \"message\":\"ok\"}';\n\n        $expected = ['code' => 1, 'message' => 'ok'];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame($expected, $request->getJSON(true));\n    }\n\n    public function testCanGetAVariableFromJson()\n    {\n        $jsonObj = [\n            'foo' => 'bar',\n            'baz' => ['fizz' => 'buzz'],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame('bar', $request->getJsonVar('foo'));\n        $this->assertNull($request->getJsonVar('notExists'));\n\n        $jsonVar = $request->getJsonVar('baz');\n        $this->assertIsObject($jsonVar);\n        $this->assertSame('buzz', $jsonVar->fizz);\n        $this->assertSame('buzz', $request->getJsonVar('baz.fizz'));\n    }\n\n    public function testGetJsonVarAsArray()\n    {\n        $jsonObj = [\n            'baz' => [\n                'fizz' => 'buzz',\n                'foo'  => 'bar',\n            ],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $jsonVar = $request->getJsonVar('baz', true);\n        $this->assertIsArray($jsonVar);\n        $this->assertSame('buzz', $jsonVar['fizz']);\n        $this->assertSame('bar', $jsonVar['foo']);\n    }\n\n    public function testGetJsonVarCanFilter()\n    {\n        $json = json_encode(['foo' => 'bar']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertFalse($request->getJsonVar('foo', false, FILTER_VALIDATE_INT));\n    }\n\n    public function testGetVarWorksWithJson()\n    {\n        $json = json_encode(['foo' => 'bar', 'fizz' => 'buzz']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n        $this->assertNull($request->getVar('notExists'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsObject($all);\n        $this->assertSame('bar', $all->foo);\n        $this->assertSame('buzz', $all->fizz);\n    }\n\n    public function testGetVarWorksWithJsonAndGetParams()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        // GET method\n        $_REQUEST['foo']  = 'bar';\n        $_REQUEST['fizz'] = 'buzz';\n\n        $request = new IncomingRequest($config, new URI('http://example.com/path?foo=bar&fizz=buzz'), 'php://input', new UserAgent());\n        $request = $request->withMethod('GET');\n\n        // JSON type\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsArray($all);\n        $this->assertSame('bar', $all['foo']);\n        $this->assertSame('buzz', $all['fizz']);\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/5391\n     */\n    public function testGetJsonVarReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJsonVar('myKey'));\n    }\n\n    public function testgetJSONReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJSON());\n    }\n\n    public function testCanGrabGetRawInput()\n    {\n        $rawstring = 'username=admin001&role=administrator&usepass=0';\n\n        $expected = [\n            'username' => 'admin001',\n            'role'     => 'administrator',\n            'usepass'  => '0',\n        ];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $rawstring, new UserAgent());\n\n        $this->assertSame($expected, $request->getRawInput());\n    }\n\n    public function testIsCLI()\n    {\n        $this->assertFalse($this->request->isCLI());\n    }\n\n    public function testIsAJAX()\n    {\n        $this->request->appendHeader('X-Requested-With', 'XMLHttpRequest');\n        $this->assertTrue($this->request->isAJAX());\n    }\n\n    public function testIsSecure()\n    {\n        $_SERVER['HTTPS'] = 'on';\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureFrontEnd()\n    {\n        $this->request->appendHeader('Front-End-Https', 'on');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureForwarded()\n    {\n        $this->request->appendHeader('X-Forwarded-Proto', 'https');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testUserAgent()\n    {\n        $_SERVER['HTTP_USER_AGENT'] = 'Mozilla';\n\n        $config  = new App();\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame('Mozilla', $request->getUserAgent()->__toString());\n    }\n\n    public function testFileCollectionFactory()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $files = $this->request->getFiles();\n        $this->assertCount(1, $files);\n\n        $file = array_shift($files);\n        $this->assertInstanceOf(UploadedFile::class, $file);\n\n        $this->assertSame('someFile.txt', $file->getName());\n        $this->assertSame(124, $file->getSize());\n    }\n\n    public function testGetFileMultiple()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name' => [\n                    'someFile.txt',\n                    'someFile2.txt',\n                ],\n                'type' => [\n                    'text/plain',\n                    'text/plain',\n                ],\n                'size' => [\n                    '124',\n                    '125',\n                ],\n                'tmp_name' => [\n                    '/tmp/myTempFile.txt',\n                    '/tmp/myTempFile2.txt',\n                ],\n                'error' => [\n                    0,\n                    0,\n                ],\n            ],\n        ];\n\n        $gotit = $this->request->getFileMultiple('userfile');\n        $this->assertSame(124, $gotit[0]->getSize());\n        $this->assertSame(125, $gotit[1]->getSize());\n    }\n\n    public function testGetFile()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $gotit = $this->request->getFile('userfile');\n        $this->assertSame(124, $gotit->getSize());\n    }\n\n    public function testSpoofing()\n    {\n        $this->request->setMethod('WINK');\n        $this->assertSame('wink', $this->request->getMethod());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2839\n     */\n    public function testGetPostEmpty()\n    {\n        $_POST['TEST'] = '5';\n        $_GET['TEST']  = '3';\n        $this->assertSame($_POST, $this->request->getPostGet());\n        $this->assertSame($_GET, $this->request->getGetPost());\n    }\n\n    public function testPostGetSecondStream()\n    {\n        $_GET['get'] = '3';\n        $this->assertSame($_GET, $this->request->getPostGet());\n    }\n\n    public function testGetPostSecondStream()\n    {\n        $_POST['post'] = '5';\n        $this->assertSame($_POST, $this->request->getGetPost());\n    }\n\n    public function testGetPostSecondStreams()\n    {\n        $_GET['get']   = '3';\n        $_POST['post'] = '5';\n        $this->assertSame(array_merge($_GET, $_POST), $this->request->getPostGet());\n        $this->assertSame(array_merge($_POST, $_GET), $this->request->getGetPost());\n    }\n\n    public function testWithFalseBody()\n    {\n        // Use `false` here to simulate file_get_contents returning a false value\n        $request = new IncomingRequest(new App(), new URI(), false, new UserAgent());\n\n        $this->assertNotFalse($request->getBody());\n        $this->assertNull($request->getBody());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/3020\n     */\n    public function testGetPostIndexNotExists()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n        $this->assertNull($this->request->getPostGet('gc'));\n        $this->assertNull($this->request->getGetPost('gc'));\n    }\n\n    public function providePathChecks()\n    {\n        return [\n            'not /index.php' => [\n                '/test.php',\n                '/',\n            ],\n            '/index.php' => [\n                '/index.php',\n                '/',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider providePathChecks\n     *\n     * @param mixed $path\n     * @param mixed $detectPath\n     */\n    public function testExtensionPHP($path, $detectPath)\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $_SERVER['REQUEST_URI'] = $path;\n        $_SERVER['SCRIPT_NAME'] = $path;\n        $request                = new IncomingRequest($config, new URI($path), null, new UserAgent());\n        $this->assertSame($detectPath, $request->detectPath());\n    }\n\n    public function testGetPath()\n    {\n        $_SERVER['REQUEST_URI'] = '/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRelative()\n    {\n        $_SERVER['REQUEST_URI'] = '/sub/folder/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/sub/folder/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathStoresDetectedValue()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRediscovered()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n        $request->detectPath();\n\n        $this->assertSame('candy/snickers', $request->getPath());\n    }\n\n    public function testSetPath()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n        $this->assertSame('', $request->getPath());\n\n        $request->setPath('foobar');\n        $this->assertSame('foobar', $request->getPath());\n    }\n\n    public function testSetPathUpdatesURI()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $request->setPath('apples');\n\n        $this->assertSame('apples', $request->getUri()->getPath());\n    }\n\n    public function testGetIPAddressNormal()\n    {\n        $expected               = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR'] = $expected;\n\n        $this->request = new Request(new App());\n        $this->request->populateHeaders();\n\n        $this->assertSame($expected, $this->request->getIPAddress());\n        // call a second time to exercise the initial conditional block in getIPAddress()\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxy()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n        $config                          = new App();\n        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyInvalid()\n    {\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n        $expected                        = '10.0.1.200';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $config                          = new App();\n        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyNotWhitelisted()\n    {\n        $expected                        = '10.10.1.200';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n        $config                          = new App();\n        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxySubnet()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n        $config                          = new App();\n        $config->proxyIPs                = ['192.168.5.0/24'];\n\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyOutofSubnet()\n    {\n        $expected                        = '192.168.5.21';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $config                          = new App();\n        $config->proxyIPs                = ['192.168.5.0/28'];\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n        $this->request                   = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    // @TODO getIPAddress should have more testing, to 100% code coverage\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse Config\\App;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n *\n * @group Others\n */\nfinal class RequestTest extends CIUnitTestCase\n{\n    private Request $request;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->request = new Request(new App());\n\n        $_POST = [];\n        $_GET  = [];\n    }\n\n    public function testFetchGlobalsSingleValue()\n    {\n        $_POST['foo'] = 'bar';\n        $_GET['bar']  = 'baz';\n\n        $this->assertSame('bar', $this->request->fetchGlobal('post', 'foo'));\n        $this->assertSame('baz', $this->request->fetchGlobal('get', 'bar'));\n    }\n\n    public function testFetchGlobalsReturnsNullWhenNotFound()\n    {\n        $this->assertNull($this->request->fetchGlobal('post', 'foo'));\n    }\n\n    public function testFetchGlobalsFiltersValues()\n    {\n        $this->request->setGlobal('post', [\n            'foo' => 'bar<script>',\n            'bar' => 'baz',\n        ]);\n\n        $this->assertSame('bar%3Cscript%3E', $this->request->fetchGlobal('post', 'foo', FILTER_SANITIZE_ENCODED));\n        $this->assertSame('baz', $this->request->fetchGlobal('post', 'bar'));\n    }\n\n    public function testFetchGlobalsWithFilterFlag()\n    {\n        $this->request->setGlobal('post', [\n            'foo' => '`bar<script>',\n            'bar' => 'baz',\n        ]);\n\n        $this->assertSame('bar%3Cscript%3E', $this->request->fetchGlobal('post', 'foo', FILTER_SANITIZE_ENCODED, FILTER_FLAG_STRIP_BACKTICK));\n        $this->assertSame('baz', $this->request->fetchGlobal('post', 'bar'));\n    }\n\n    public function testFetchGlobalReturnsAllWhenEmpty()\n    {\n        $post = [\n            'foo' => 'bar',\n            'bar' => 'baz',\n            'xxx' => 'yyy',\n            'yyy' => 'zzz',\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($post, $this->request->fetchGlobal('post'));\n    }\n\n    public function testFetchGlobalFiltersAllValues()\n    {\n        $post = [\n            'foo' => 'bar<script>',\n            'bar' => 'baz<script>',\n            'xxx' => 'yyy<script>',\n            'yyy' => 'zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n            'xxx' => 'yyy%3Cscript%3E',\n            'yyy' => 'zzz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', null, FILTER_SANITIZE_ENCODED));\n    }\n\n    public function testFetchGlobalFilterWithFlagAllValues()\n    {\n        $post = [\n            'foo' => '`bar<script>',\n            'bar' => '`baz<script>',\n            'xxx' => '`yyy<script>',\n            'yyy' => '`zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n            'xxx' => 'yyy%3Cscript%3E',\n            'yyy' => 'zzz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', null, FILTER_SANITIZE_ENCODED, FILTER_FLAG_STRIP_BACKTICK));\n    }\n\n    public function testFetchGlobalReturnsSelectedKeys()\n    {\n        $post = [\n            'foo' => 'bar',\n            'bar' => 'baz',\n            'xxx' => 'yyy',\n            'yyy' => 'zzz',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar',\n            'bar' => 'baz',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['foo', 'bar']));\n    }\n\n    public function testFetchGlobalFiltersSelectedValues()\n    {\n        $post = [\n            'foo' => 'bar<script>',\n            'bar' => 'baz<script>',\n            'xxx' => 'yyy<script>',\n            'yyy' => 'zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['foo', 'bar'], FILTER_SANITIZE_ENCODED));\n    }\n\n    public function testFetchGlobalFilterWithFlagSelectedValues()\n    {\n        $post = [\n            'foo' => '`bar<script>',\n            'bar' => '`baz<script>',\n            'xxx' => '`yyy<script>',\n            'yyy' => '`zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['foo', 'bar'], FILTER_SANITIZE_ENCODED, FILTER_FLAG_STRIP_BACKTICK));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/353\n     */\n    public function testFetchGlobalReturnsArrayValues()\n    {\n        $post = [\n            'ANNOUNCEMENTS' => [\n                1 => ['DETAIL' => 'asdf'],\n                2 => ['DETAIL' => 'sdfg'],\n            ],\n            'submit' => 'SAVE',\n        ];\n        $this->request->setGlobal('post', $post);\n        $result = $this->request->fetchGlobal('post');\n\n        $this->assertSame($post, $result);\n        $this->assertIsArray($result['ANNOUNCEMENTS']);\n        $this->assertCount(2, $result['ANNOUNCEMENTS']);\n    }\n\n    public function testFetchGlobalWithArrayTop()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame(['address' => ['zipcode' => 90210]], $this->request->fetchGlobal('post', 'clients'));\n    }\n\n    public function testFetchGlobalWithArrayChildNumeric()\n    {\n        $post = [\n            'clients' => [\n                [\n                    'address' => [\n                        'zipcode' => 90210,\n                    ],\n                ],\n                [\n                    'address' => [\n                        'zipcode' => 60610,\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame(['zipcode' => 60610], $this->request->fetchGlobal('post', 'clients[1][address]'));\n    }\n\n    public function testFetchGlobalWithArrayChildElement()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame(['zipcode' => 90210], $this->request->fetchGlobal('post', 'clients[address]'));\n        $this->assertNull($this->request->fetchGlobal('post', 'clients[zipcode]'));\n    }\n\n    public function testFetchGlobalWithKeylessArrayChildElement()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n                'stuff' => [['a']],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame([['a']], $this->request->fetchGlobal('post', 'clients[stuff]'));\n    }\n\n    public function testFetchGlobalWithArrayLastElement()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame('90210', $this->request->fetchGlobal('post', 'clients[address][zipcode]'));\n    }\n\n    public function testFetchGlobalWithEmptyNotation()\n    {\n        $expected = [\n            [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n            [\n                'address' => [\n                    'zipcode' => 60610,\n                ],\n            ],\n        ];\n        $post = [\n            'clients' => $expected,\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', 'clients[]'));\n    }\n\n    public function testFetchGlobalFiltersWithNull()\n    {\n        $expected = [\n            'foo'     => false,\n            'number'  => 5,\n            'address' => [\n                'street'  => false,\n                'zipcode' => 91210,\n            ],\n            'people' => [\n                [\n                    'name' => false,\n                    'age'  => 26,\n                    'pets' => [\n                        'cats' => [\n                            'name' => false,\n                            'age'  => 3,\n                        ],\n                    ],\n                ],\n                [\n                    'name' => false,\n                    'age'  => 23,\n                    'pets' => [\n                        'fishes' => [\n                            'name' => false,\n                            'age'  => 1,\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', null, FILTER_VALIDATE_INT));\n    }\n\n    public function testFetchGlobalFiltersWithValue()\n    {\n        $expected = [\n            [\n                'name' => false,\n                'age'  => 26,\n                'pets' => [\n                    'cats' => [\n                        'name' => false,\n                        'age'  => 3,\n                    ],\n                ],\n            ],\n            [\n                'name' => false,\n                'age'  => 23,\n                'pets' => [\n                    'fishes' => [\n                        'name' => false,\n                        'age'  => 1,\n                    ],\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', 'people', FILTER_VALIDATE_INT));\n    }\n\n    public function testFetchGlobalFiltersWithValues()\n    {\n        $expected = [\n            'address' => [\n                'street'  => false,\n                'zipcode' => 91210,\n            ],\n            'people' => [\n                [\n                    'name' => false,\n                    'age'  => 26,\n                    'pets' => [\n                        'cats' => [\n                            'name' => false,\n                            'age'  => 3,\n                        ],\n                    ],\n                ],\n                [\n                    'name' => false,\n                    'age'  => 23,\n                    'pets' => [\n                        'fishes' => [\n                            'name' => false,\n                            'age'  => 1,\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['address', 'people'], FILTER_VALIDATE_INT));\n    }\n\n    public function testFetchGlobalFiltersWithArrayChildElement()\n    {\n        $expected = [\n            'name' => false,\n            'age'  => 26,\n            'pets' => [\n                'cats' => [\n                    'name' => false,\n                    'age'  => 3,\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', 'people[0]', FILTER_VALIDATE_INT));\n    }\n\n    public function ipAddressChecks()\n    {\n        return [\n            'empty' => [\n                false,\n                '',\n            ],\n            'zero' => [\n                false,\n                0,\n            ],\n            'large_ipv4' => [\n                false,\n                '256.256.256.999',\n                'ipv4',\n            ],\n            'good_ipv4' => [\n                true,\n                '100.100.100.0',\n                'ipv4',\n            ],\n            'good_default' => [\n                true,\n                '100.100.100.0',\n            ],\n            'zeroed_ipv4' => [\n                true,\n                '0.0.0.0',\n            ],\n            'large_ipv6' => [\n                false,\n                'h123:0000:0000:0000:0000:0000:0000:0000',\n                'ipv6',\n            ],\n            'good_ipv6' => [\n                true,\n                '2001:0db8:85a3:0000:0000:8a2e:0370:7334',\n            ],\n            'confused_ipv6' => [\n                false,\n                '255.255.255.255',\n                'ipv6',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider ipAddressChecks\n     *\n     * @param mixed      $expected\n     * @param mixed      $address\n     * @param mixed|null $type\n     */\n    public function testValidIPAddress($expected, $address, $type = null)\n    {\n        $this->assertSame($expected, $this->request->isValidIP($address, $type));\n    }\n\n    public function testGetIPAddressDefault()\n    {\n        $this->assertSame('0.0.0.0', $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressNormal()\n    {\n        $expected               = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR'] = $expected;\n        $this->request          = new Request(new App());\n        $this->assertSame($expected, $this->request->getIPAddress());\n        // call a second time to exercise the initial conditional block in getIPAddress()\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxy()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n        $config                          = new App();\n        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $this->request                   = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyInvalid()\n    {\n        $expected                        = '123.456.23.123';\n        $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n        $config                          = new App();\n        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $this->request                   = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame('10.0.1.200', $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyNotWhitelisted()\n    {\n        $expected                        = '123.456.23.123';\n        $_SERVER['REMOTE_ADDR']          = '10.10.1.200';\n        $config                          = new App();\n        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $this->request                   = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame('10.10.1.200', $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxySubnet()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n        $config                          = new App();\n        $config->proxyIPs                = ['192.168.5.0/24'];\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $this->request                   = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyOutofSubnet()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n        $config                          = new App();\n        $config->proxyIPs                = ['192.168.5.0/28'];\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $this->request                   = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame('192.168.5.21', $this->request->getIPAddress());\n    }\n\n    // FIXME getIPAddress should have more testing, to 100% code coverage\n\n    public function testMethodReturnsRightStuff()\n    {\n        // Defaults method to GET now.\n        $this->assertSame('get', $this->request->getMethod());\n        $this->assertSame('GET', $this->request->getMethod(true));\n    }\n}\n", "Version 4.2.11\n##############\n\nRelease Date: December 21, 2022\n\n**4.2.11 release of CodeIgniter4**\n\n.. contents::\n    :local:\n    :depth: 2\n\nBugs Fixed\n**********\n\n- Fixed a ``FileLocator::locateFile()`` bug where a similar namespace name could be replaced by another, causing a failure to find a file that exists.\n- Fixed a ``RedisHandler`` session class to use the correct config when used with a socket connection.\n\nSee the repo's `CHANGELOG.md <https://github.com/codeigniter4/CodeIgniter4/blob/develop/CHANGELOG.md>`_ for a complete list of bugs fixed.\n", "Request Class\n*************\n\nThe request class is an object-oriented representation of an HTTP request. This is meant to\nwork for both incoming, such as a request to the application from a browser, and outgoing requests,\nlike would be used to send a request from the application to a third-party application. This class\nprovides the common functionality they both need, but both cases have custom classes that extend\nfrom the Request class to add specific functionality.\n\nSee the documentation for the :doc:`IncomingRequest Class </incoming/incomingrequest>` and\n:doc:`CURLRequest Class </libraries/curlrequest>` for more usage details.\n\nClass Reference\n===============\n\n.. php:namespace:: CodeIgniter\\HTTP\n\n.. php:class:: Request\n\n    .. php:method:: getIPAddress()\n\n        :returns: The user's IP Address, if it can be detected, or null. If the IP address\n                    is not a valid IP address, then will return 0.0.0.0\n        :rtype:   string\n\n        Returns the IP address for the current user. If the IP address is not valid, the method\n        will return '0.0.0.0':\n\n        .. literalinclude:: request/001.php\n\n        .. important:: This method takes into account the ``App->proxyIPs`` setting and will\n            return the reported HTTP_X_FORWARDED_FOR, HTTP_CLIENT_IP, HTTP_X_CLIENT_IP, or\n            HTTP_X_CLUSTER_CLIENT_IP address for the allowed IP address.\n\n    .. php:method:: isValidIP($ip[, $which = ''])\n\n        .. important:: This method is deprecated. It will be removed in future releases.\n\n        :param    string $ip: IP address\n        :param    string $which: IP protocol ('ipv4' or 'ipv6')\n        :returns: true if the address is valid, false if not\n        :rtype:   bool\n\n        Takes an IP address as input and returns true or false (boolean) depending\n        on whether it is valid or not.\n\n        .. note:: The $request->getIPAddress() method above automatically validates the IP address.\n\n            .. literalinclude:: request/002.php\n\n        Accepts an optional second string parameter of 'ipv4' or 'ipv6' to specify\n        an IP format. The default checks for both formats.\n\n    .. php:method:: getMethod([$upper = false])\n\n        .. important:: Use of the ``$upper`` parameter is deprecated. It will be removed in future releases.\n\n        :param bool $upper: Whether to return the request method name in upper or lower case\n        :returns: HTTP request method\n        :rtype: string\n\n        Returns the ``$_SERVER['REQUEST_METHOD']``, with the option to set it\n        in uppercase or lowercase.\n\n        .. literalinclude:: request/003.php\n\n    .. php:method:: setMethod($method)\n\n        :param string $upper: Sets the request method. Used when spoofing the request.\n        :returns: HTTP request method\n        :rtype: Request\n\n    .. php:method:: getServer([$index = null[, $filter = null[, $flags = null]]])\n\n        :param    mixed     $index: Value name\n        :param    int       $filter: The type of filter to apply. A list of filters can be found `here <https://www.php.net/manual/en/filter.filters.php>`__.\n        :param    int|array $flags: Flags to apply. A list of flags can be found `here <https://www.php.net/manual/en/filter.filters.flags.php>`__.\n        :returns: $_SERVER item value if found, null if not\n        :rtype:   mixed\n\n        This method is identical to the ``post()``, ``get()`` and ``cookie()`` methods from the\n        :doc:`IncomingRequest Class </incoming/incomingrequest>`, only it fetches server data (``$_SERVER``):\n\n        .. literalinclude:: request/004.php\n\n        To return an array of multiple ``$_SERVER`` values, pass all the required keys\n        as an array.\n\n        .. literalinclude:: request/005.php\n\n    .. php:method:: getEnv([$index = null[, $filter = null[, $flags = null]]])\n\n        :param    mixed     $index: Value name\n        :param    int       $filter: The type of filter to apply. A list of filters can be found `here <https://www.php.net/manual/en/filter.filters.php>`__.\n        :param    int|array $flags: Flags to apply. A list of flags can be found `here <https://www.php.net/manual/en/filter.filters.flags.php>`__.\n        :returns: $_ENV item value if found, null if not\n        :rtype:   mixed\n\n        This method is identical to the ``post()``, ``get()`` and ``cookie()`` methods from the\n        :doc:`IncomingRequest Class </incoming/incomingrequest>`, only it fetches getEnv data (``$_ENV``):\n\n        .. literalinclude:: request/006.php\n\n        To return an array of multiple ``$_ENV`` values, pass all the required keys\n        as an array.\n\n        .. literalinclude:: request/007.php\n\n    .. php:method:: setGlobal($method, $value)\n\n        :param    string $method: Method name\n        :param    mixed  $value:  Data to be added\n        :returns: HTTP request method\n        :rtype:    Request\n\n        Allows manually setting the value of PHP global, like $_GET, $_POST, etc.\n\n    .. php:method:: fetchGlobal($method [, $index = null[, $filter = null[, $flags = null]]])\n\n        :param    string    $method: Input filter constant\n        :param    mixed     $index: Value name\n        :param    int       $filter: The type of filter to apply. A list of filters can be found `here <https://www.php.net/manual/en/filter.filters.php>`__.\n        :param    int|array $flags: Flags to apply. A list of flags can be found `here <https://www.php.net/manual/en/filter.filters.flags.php>`__.\n        :rtype:   mixed\n\n        Fetches one or more items from a global, like cookies, get, post, etc.\n        Can optionally filter the input when you retrieve it by passing in a filter.\n", "###############################\nUpgrading from 4.2.10 to 4.2.11\n###############################\n\nPlease refer to the upgrade instructions corresponding to your installation method.\n\n- :ref:`Composer Installation App Starter Upgrading <app-starter-upgrading>`\n- :ref:`Composer Installation Adding CodeIgniter4 to an Existing Project Upgrading <adding-codeigniter4-upgrading>`\n- :ref:`Manual Installation Upgrading <installing-manual-upgrading>`\n\n.. contents::\n    :local:\n    :depth: 2\n\nProject Files\n*************\n\nVersion ``4.2.11`` did not alter any executable code in project files.\n\nAll Changes\n===========\n\nThis is a list of all files in the **project space** that received changes;\nmany will be simple comments or formatting that have no effect on the runtime:\n\n* app/Config/App.php\n* app/Config/Autoload.php\n* app/Config/Logger.php\n* app/Config/Toolbar.php\n* app/Views/welcome_message.php\n* composer.json\n"], "fixing_code": ["<?php\n\nnamespace Config;\n\nuse CodeIgniter\\Config\\BaseConfig;\nuse CodeIgniter\\Session\\Handlers\\FileHandler;\n\nclass App extends BaseConfig\n{\n    /**\n     * --------------------------------------------------------------------------\n     * Base Site URL\n     * --------------------------------------------------------------------------\n     *\n     * URL to your CodeIgniter root. Typically this will be your base URL,\n     * WITH a trailing slash:\n     *\n     *    http://example.com/\n     *\n     * If this is not set then CodeIgniter will try guess the protocol, domain\n     * and path to your installation. However, you should always configure this\n     * explicitly and never rely on auto-guessing, especially in production\n     * environments.\n     *\n     * @var string\n     */\n    public $baseURL = 'http://localhost:8080/';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Index File\n     * --------------------------------------------------------------------------\n     *\n     * Typically this will be your index.php file, unless you've renamed it to\n     * something else. If you are using mod_rewrite to remove the page set this\n     * variable so that it is blank.\n     *\n     * @var string\n     */\n    public $indexPage = 'index.php';\n\n    /**\n     * --------------------------------------------------------------------------\n     * URI PROTOCOL\n     * --------------------------------------------------------------------------\n     *\n     * This item determines which server global should be used to retrieve the\n     * URI string.  The default setting of 'REQUEST_URI' works for most servers.\n     * If your links do not seem to work, try one of the other delicious flavors:\n     *\n     * 'REQUEST_URI'    Uses $_SERVER['REQUEST_URI']\n     * 'QUERY_STRING'   Uses $_SERVER['QUERY_STRING']\n     * 'PATH_INFO'      Uses $_SERVER['PATH_INFO']\n     *\n     * WARNING: If you set this to 'PATH_INFO', URIs will always be URL-decoded!\n     *\n     * @var string\n     */\n    public $uriProtocol = 'REQUEST_URI';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Default Locale\n     * --------------------------------------------------------------------------\n     *\n     * The Locale roughly represents the language and location that your visitor\n     * is viewing the site from. It affects the language strings and other\n     * strings (like currency markers, numbers, etc), that your program\n     * should run under for this request.\n     *\n     * @var string\n     */\n    public $defaultLocale = 'en';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Negotiate Locale\n     * --------------------------------------------------------------------------\n     *\n     * If true, the current Request object will automatically determine the\n     * language to use based on the value of the Accept-Language header.\n     *\n     * If false, no automatic detection will be performed.\n     *\n     * @var bool\n     */\n    public $negotiateLocale = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Supported Locales\n     * --------------------------------------------------------------------------\n     *\n     * If $negotiateLocale is true, this array lists the locales supported\n     * by the application in descending order of priority. If no match is\n     * found, the first locale will be used.\n     *\n     * @var string[]\n     */\n    public $supportedLocales = ['en'];\n\n    /**\n     * --------------------------------------------------------------------------\n     * Application Timezone\n     * --------------------------------------------------------------------------\n     *\n     * The default timezone that will be used in your application to display\n     * dates with the date helper, and can be retrieved through app_timezone()\n     *\n     * @var string\n     */\n    public $appTimezone = 'America/Chicago';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Default Character Set\n     * --------------------------------------------------------------------------\n     *\n     * This determines which character set is used by default in various methods\n     * that require a character set to be provided.\n     *\n     * @see http://php.net/htmlspecialchars for a list of supported charsets.\n     *\n     * @var string\n     */\n    public $charset = 'UTF-8';\n\n    /**\n     * --------------------------------------------------------------------------\n     * URI PROTOCOL\n     * --------------------------------------------------------------------------\n     *\n     * If true, this will force every request made to this application to be\n     * made via a secure connection (HTTPS). If the incoming request is not\n     * secure, the user will be redirected to a secure version of the page\n     * and the HTTP Strict Transport Security header will be set.\n     *\n     * @var bool\n     */\n    public $forceGlobalSecureRequests = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Driver\n     * --------------------------------------------------------------------------\n     *\n     * The session storage driver to use:\n     * - `CodeIgniter\\Session\\Handlers\\FileHandler`\n     * - `CodeIgniter\\Session\\Handlers\\DatabaseHandler`\n     * - `CodeIgniter\\Session\\Handlers\\MemcachedHandler`\n     * - `CodeIgniter\\Session\\Handlers\\RedisHandler`\n     *\n     * @var string\n     */\n    public $sessionDriver = FileHandler::class;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Cookie Name\n     * --------------------------------------------------------------------------\n     *\n     * The session cookie name, must contain only [0-9a-z_-] characters\n     *\n     * @var string\n     */\n    public $sessionCookieName = 'ci_session';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Expiration\n     * --------------------------------------------------------------------------\n     *\n     * The number of SECONDS you want the session to last.\n     * Setting to 0 (zero) means expire when the browser is closed.\n     *\n     * @var int\n     */\n    public $sessionExpiration = 7200;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Save Path\n     * --------------------------------------------------------------------------\n     *\n     * The location to save sessions to and is driver dependent.\n     *\n     * For the 'files' driver, it's a path to a writable directory.\n     * WARNING: Only absolute paths are supported!\n     *\n     * For the 'database' driver, it's a table name.\n     * Please read up the manual for the format with other session drivers.\n     *\n     * IMPORTANT: You are REQUIRED to set a valid save path!\n     *\n     * @var string\n     */\n    public $sessionSavePath = WRITEPATH . 'session';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Match IP\n     * --------------------------------------------------------------------------\n     *\n     * Whether to match the user's IP address when reading the session data.\n     *\n     * WARNING: If you're using the database driver, don't forget to update\n     *          your session table's PRIMARY KEY when changing this setting.\n     *\n     * @var bool\n     */\n    public $sessionMatchIP = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Time to Update\n     * --------------------------------------------------------------------------\n     *\n     * How many seconds between CI regenerating the session ID.\n     *\n     * @var int\n     */\n    public $sessionTimeToUpdate = 300;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Session Regenerate Destroy\n     * --------------------------------------------------------------------------\n     *\n     * Whether to destroy session data associated with the old session ID\n     * when auto-regenerating the session ID. When set to FALSE, the data\n     * will be later deleted by the garbage collector.\n     *\n     * @var bool\n     */\n    public $sessionRegenerateDestroy = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Prefix\n     * --------------------------------------------------------------------------\n     *\n     * Set a cookie name prefix if you need to avoid collisions.\n     *\n     * @var string\n     *\n     * @deprecated use Config\\Cookie::$prefix property instead.\n     */\n    public $cookiePrefix = '';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Domain\n     * --------------------------------------------------------------------------\n     *\n     * Set to `.your-domain.com` for site-wide cookies.\n     *\n     * @var string\n     *\n     * @deprecated use Config\\Cookie::$domain property instead.\n     */\n    public $cookieDomain = '';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Path\n     * --------------------------------------------------------------------------\n     *\n     * Typically will be a forward slash.\n     *\n     * @var string\n     *\n     * @deprecated use Config\\Cookie::$path property instead.\n     */\n    public $cookiePath = '/';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie Secure\n     * --------------------------------------------------------------------------\n     *\n     * Cookie will only be set if a secure HTTPS connection exists.\n     *\n     * @var bool\n     *\n     * @deprecated use Config\\Cookie::$secure property instead.\n     */\n    public $cookieSecure = false;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie HttpOnly\n     * --------------------------------------------------------------------------\n     *\n     * Cookie will only be accessible via HTTP(S) (no JavaScript).\n     *\n     * @var bool\n     *\n     * @deprecated use Config\\Cookie::$httponly property instead.\n     */\n    public $cookieHTTPOnly = true;\n\n    /**\n     * --------------------------------------------------------------------------\n     * Cookie SameSite\n     * --------------------------------------------------------------------------\n     *\n     * Configure cookie SameSite setting. Allowed values are:\n     * - None\n     * - Lax\n     * - Strict\n     * - ''\n     *\n     * Alternatively, you can use the constant names:\n     * - `Cookie::SAMESITE_NONE`\n     * - `Cookie::SAMESITE_LAX`\n     * - `Cookie::SAMESITE_STRICT`\n     *\n     * Defaults to `Lax` for compatibility with modern browsers. Setting `''`\n     * (empty string) means default SameSite attribute set by browsers (`Lax`)\n     * will be set on cookies. If set to `None`, `$cookieSecure` must also be set.\n     *\n     * @var string|null\n     *\n     * @deprecated use Config\\Cookie::$samesite property instead.\n     */\n    public $cookieSameSite = 'Lax';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Reverse Proxy IPs\n     * --------------------------------------------------------------------------\n     *\n     * If your server is behind a reverse proxy, you must whitelist the proxy\n     * IP addresses from which CodeIgniter should trust headers such as\n     * X-Forwarded-For or Client-IP in order to properly identify\n     * the visitor's IP address.\n     *\n     * You need to set a proxy IP address or IP address with subnets and\n     * the HTTP header for the client IP address.\n     *\n     * Here are some examples:\n     *     [\n     *         '10.0.1.200'     => 'X-Forwarded-For',\n     *         '192.168.5.0/24' => 'X-Real-IP',\n     *     ]\n     *\n     * @var array<string, string>\n     */\n    public $proxyIPs = [];\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Token Name\n     * --------------------------------------------------------------------------\n     *\n     * The token name.\n     *\n     * @deprecated Use `Config\\Security` $tokenName property instead of using this property.\n     *\n     * @var string\n     */\n    public $CSRFTokenName = 'csrf_test_name';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Header Name\n     * --------------------------------------------------------------------------\n     *\n     * The header name.\n     *\n     * @deprecated Use `Config\\Security` $headerName property instead of using this property.\n     *\n     * @var string\n     */\n    public $CSRFHeaderName = 'X-CSRF-TOKEN';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Cookie Name\n     * --------------------------------------------------------------------------\n     *\n     * The cookie name.\n     *\n     * @deprecated Use `Config\\Security` $cookieName property instead of using this property.\n     *\n     * @var string\n     */\n    public $CSRFCookieName = 'csrf_cookie_name';\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Expire\n     * --------------------------------------------------------------------------\n     *\n     * The number in seconds the token should expire.\n     *\n     * @deprecated Use `Config\\Security` $expire property instead of using this property.\n     *\n     * @var int\n     */\n    public $CSRFExpire = 7200;\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Regenerate\n     * --------------------------------------------------------------------------\n     *\n     * Regenerate token on every submission?\n     *\n     * @deprecated Use `Config\\Security` $regenerate property instead of using this property.\n     *\n     * @var bool\n     */\n    public $CSRFRegenerate = true;\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF Redirect\n     * --------------------------------------------------------------------------\n     *\n     * Redirect to previous page with error on failure?\n     *\n     * @deprecated Use `Config\\Security` $redirect property instead of using this property.\n     *\n     * @var bool\n     */\n    public $CSRFRedirect = true;\n\n    /**\n     * --------------------------------------------------------------------------\n     * CSRF SameSite\n     * --------------------------------------------------------------------------\n     *\n     * Setting for CSRF SameSite cookie token. Allowed values are:\n     * - None\n     * - Lax\n     * - Strict\n     * - ''\n     *\n     * Defaults to `Lax` as recommended in this link:\n     *\n     * @see https://portswigger.net/web-security/csrf/samesite-cookies\n     *\n     * @deprecated `Config\\Cookie` $samesite property is used.\n     *\n     * @var string\n     */\n    public $CSRFSameSite = 'Lax';\n\n    /**\n     * --------------------------------------------------------------------------\n     * Content Security Policy\n     * --------------------------------------------------------------------------\n     *\n     * Enables the Response's Content Secure Policy to restrict the sources that\n     * can be used for images, scripts, CSS files, audio, video, etc. If enabled,\n     * the Response object will populate default values for the policy from the\n     * `ContentSecurityPolicy.php` file. Controllers can always add to those\n     * restrictions at run time.\n     *\n     * For a better understanding of CSP, see these documents:\n     *\n     * @see http://www.html5rocks.com/en/tutorials/security/content-security-policy/\n     * @see http://www.w3.org/TR/CSP/\n     *\n     * @var bool\n     */\n    public $CSPEnabled = false;\n}\n", "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function spl_autoload_register expects \\\\(callable\\\\(string\\\\)\\\\: void\\\\)\\\\|null, array\\\\{\\\\$this\\\\(CodeIgniter\\\\\\\\Autoloader\\\\\\\\Autoloader\\\\), 'loadClass'\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Autoloader/Autoloader.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function spl_autoload_register expects \\\\(callable\\\\(string\\\\)\\\\: void\\\\)\\\\|null, array\\\\{\\\\$this\\\\(CodeIgniter\\\\\\\\Autoloader\\\\\\\\Autoloader\\\\), 'loadClassmap'\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Autoloader/Autoloader.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$backupHandler \\\\(string\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$handler \\\\(string\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$validHandlers \\\\(array\\\\<string, string\\\\>\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Comparison operation \\\"\\\\>\\\" between int and \\\\(array\\\\|float\\\\|int\\\\) results in an error\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/FileHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^If condition is always true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/FileHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$storePath \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/FileHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Unreachable statement \\\\- code above always terminates\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/MemcachedHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$data might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/MemcachedHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cache\\\\:\\\\:\\\\$redis \\\\(array\\\\<string, int\\\\|string\\\\|null\\\\>\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/PredisHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Cache\\\\\\\\Handlers\\\\\\\\RedisHandler\\\\:\\\\:\\\\$redis \\\\(Redis\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Cache/Handlers/RedisHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:getPost\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:setLocale\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$appTimezone \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$defaultLocale \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/CodeIgniter.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BaseBuilder\\\\:\\\\:\\\\$db \\\\(CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/BaseBuilder.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Database\\\\\\\\QueryInterface\\\\:\\\\:getOriginalQuery\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/BaseConnection.php\n\n\t\t-\n\t\t\tmessage: \"#^Negated boolean expression is always false\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Database/BaseResult.php\n\n\t\t-\n\t\t\tmessage: \"#^Unreachable statement \\\\- code above always terminates\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/BaseResult.php\n\n\t\t-\n\t\t\tmessage: \"#^While loop condition is always true\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/BaseResult.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\ConnectionInterface\\\\:\\\\:\\\\$DBDriver\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/Database.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\ConnectionInterface\\\\:\\\\:\\\\$connID\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/Database.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\Migration\\\\:\\\\:\\\\$DBGroup \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Migration.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Migrations\\\\:\\\\:\\\\$enabled \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MigrationRunner.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Migrations\\\\:\\\\:\\\\$table \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MigrationRunner.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$errno on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$error on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$insert_id on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method autocommit\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method begin_transaction\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method close\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method commit\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method more_results\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method next_result\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method query\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method real_escape_string\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method rollback\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method select_db\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method store_result\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$strictOn \\\\(bool\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\MySQLi\\\\\\\\Connection\\\\:\\\\:\\\\$mysqli \\\\(mysqli\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$mysqli\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method bind_param\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method execute\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method get_result\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$field_count on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$num_rows on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method data_seek\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_assoc\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_field\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_fields\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetch_object\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method field_seek\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/MySQLi/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Strict comparison using \\\\=\\\\=\\\\= between array<string, int|string|null> and false will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Postgre/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Postgre/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$schema\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLSRV/Builder.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property CodeIgniter\\\\\\\\Database\\\\\\\\BaseConnection\\\\:\\\\:\\\\$schema\\\\.$#\"\n\t\t\tcount: 13\n\t\t\tpath: system/Database/SQLSRV/Forge.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLSRV/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method changes\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method close\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method escapeString\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method exec\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 4\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorCode\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorMsg\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastInsertRowID\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method query\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Connection.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method bindValue\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method execute\\\\(\\\\) on object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorCode\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method lastErrorMsg\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method prepare\\\\(\\\\) on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Database\\\\\\\\BasePreparedQuery\\\\:\\\\:\\\\$statement \\\\(object\\\\|resource\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/PreparedQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method columnName\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method columnType\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method fetchArray\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method numColumns\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method reset\\\\(\\\\) on object\\\\|resource\\\\|false\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Database/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Database\\\\:\\\\:\\\\$filesPath \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Database/Seeder.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Exceptions\\\\:\\\\:\\\\$sensitiveDataInTrace \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Exceptions.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Toolbar\\\\:\\\\:\\\\$collectVarData \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\View\\\\\\\\RendererInterface\\\\:\\\\:getPerformanceData\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar/Collectors/Events.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Log\\\\\\\\Logger\\\\:\\\\:\\\\$logCache \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar/Collectors/Logs.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\View\\\\\\\\RendererInterface\\\\:\\\\:getData\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Debug/Toolbar/Collectors/Views.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\View\\\\\\\\RendererInterface\\\\:\\\\:getPerformanceData\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Debug/Toolbar/Collectors/Views.php\n\n\t\t-\n\t\t\tmessage: \"#^Static property CodeIgniter\\\\\\\\Email\\\\\\\\Email\\\\:\\\\:\\\\$func_overload \\\\(bool\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Email/Email.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Encryption\\\\:\\\\:\\\\$digest \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Encryption/Encryption.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Files\\\\\\\\File\\\\:\\\\:\\\\$size \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Files/File.php\n\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Filters\\\\:\\\\:\\\\$filters \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Filters\\\\:\\\\:\\\\$globals \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Filters\\\\:\\\\:\\\\$methods \\\\(array\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Filters/Filters.php\n\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Files/UploadedFile.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Files\\\\\\\\UploadedFile\\\\:\\\\:\\\\$error \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/HTTP/Files/UploadedFile.php\n\n\t\t-\n\t\t\tmessage: \"#^Return type \\\\(bool\\\\) of method CodeIgniter\\\\\\\\HTTP\\\\\\\\Files\\\\\\\\UploadedFile\\\\:\\\\:move\\\\(\\\\) should be compatible with return type \\\\(CodeIgniter\\\\\\\\Files\\\\\\\\File\\\\) of method CodeIgniter\\\\\\\\Files\\\\\\\\File\\\\:\\\\:move\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Files/UploadedFile.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\IncomingRequest\\\\:\\\\:\\\\$locale \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/IncomingRequest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Message\\\\:\\\\:\\\\$protocolVersion \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Message.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$_GET on left side of \\\\?\\\\? always exists and is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/RedirectResponse.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$_POST on left side of \\\\?\\\\? always exists and is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/RedirectResponse.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:\\\\$uri \\\\(CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/Request.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\:\\\\:\\\\$fragment \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/URI.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\:\\\\:\\\\$host \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/URI.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\:\\\\:\\\\$path \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/HTTP/URI.php\n\n\t\t-\n\t\t\tmessage: \"#^Right side of && is always true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Helpers/filesystem_helper.php\n\n\t\t-\n\t\t\tmessage: \"#^Binary operation \\\"\\\\+\\\" between 0 and string results in an error\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Helpers/number_helper.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$count might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Helpers/url_helper.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$image \\\\(CodeIgniter\\\\\\\\Images\\\\\\\\Image\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/BaseHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Comparison operation \\\"\\\\>\\\\=\\\" between \\\\(array\\\\|float\\\\|int\\\\) and 0 results in an error\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc type string\\\\|null of property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\ImageMagickHandler\\\\:\\\\:\\\\$resource is not covariant with PHPDoc type resource\\\\|null of overridden property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$height \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 4\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Images\\\\\\\\Handlers\\\\\\\\BaseHandler\\\\:\\\\:\\\\$width \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 4\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$gravity might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$xAxis might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$yAxis might not be defined\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Images/Handlers/ImageMagickHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Logger\\\\:\\\\:\\\\$dateFormat \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Log/Logger.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getDefaultNamespace\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getFilterForRoute\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getFiltersForRoute\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getRoutesOptions\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:isFiltered\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:setHTTPVerb\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getRegisteredControllers\\\\(.*\\\\)\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Method CodeIgniter\\\\\\\\Router\\\\\\\\RouteCollectionInterface\\\\:\\\\:getRoutes\\\\(\\\\) invoked with 1 parameter, 0 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Router/Router.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$CSRF[a-zA-Z]+ \\\\([a-zA-Z]+\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 6\n\t\t\tpath: system/Security/Security.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Security\\\\:\\\\:\\\\$[a-zA-Z]+ \\\\([a-zA-Z]+\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 8\n\t\t\tpath: system/Security/Security.php\n\n\t\t-\n\t\t\tmessage: \"#^Strict comparison using \\\\=\\\\=\\\\= between string and true will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Handlers/RedisHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Session\\\\\\\\Session\\\\:\\\\:\\\\$sessionExpiration \\\\(int\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$cookieDomain \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$cookiePath \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$cookieSecure \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionCookieName \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionExpiration \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionMatchIP \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionRegenerateDestroy \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\App\\\\:\\\\:\\\\$sessionTimeToUpdate \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$domain \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$path \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$raw \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$samesite \\\\(string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\Cookie\\\\:\\\\:\\\\$secure \\\\(bool\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Session/Session.php\n\n\t\t-\n\t\t\tmessage: \"#^Negated boolean expression is always false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/CIUnitTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property object\\\\:\\\\:\\\\$createdField\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Fabricator.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property object\\\\:\\\\:\\\\$deletedField\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Fabricator.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property object\\\\:\\\\:\\\\$updatedField\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Fabricator.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Test\\\\\\\\CIUnitTestCase\\\\:\\\\:\\\\$bodyFormat \\\\(string\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/FeatureTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Test\\\\\\\\CIUnitTestCase\\\\:\\\\:\\\\$clean \\\\(bool\\\\) in isset\\\\(\\\\) is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/FeatureTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Test\\\\\\\\CIUnitTestCase\\\\:\\\\:\\\\$session \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/FeatureTestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access property \\\\$insert_id on bool\\\\|object\\\\|resource\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Test/Mock/MockConnection.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Throttle\\\\\\\\Throttler\\\\:\\\\:\\\\$testTime \\\\(int\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Throttle/Throttler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\Validation\\\\\\\\Validation\\\\:\\\\:\\\\$errors \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Validation/Validation.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable \\\\$error on left side of \\\\?\\\\? always exists and is always null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/Validation/Validation.php\n\n\t\t-\n\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\View\\\\\\\\Cell\\\\:\\\\:\\\\$cache \\\\(CodeIgniter\\\\\\\\Cache\\\\\\\\CacheInterface\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: system/View/Cell.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Config\\\\\\\\View\\\\:\\\\:\\\\$plugins \\\\(array\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: system/View/Parser.php\n\n\t\t-\n\t\t\tmessage: \"#^Result of \\\\|\\\\| is always false\\\\.$#\"\n\t\t\tpaths:\n\t\t\t\t- system/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: \"#^Binary operation \\\"/\\\" between string and 8 results in an error\\\\.$#\"\n\t\t\tpath: system/Encryption/Handlers/OpenSSLHandler.php\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Validation\\FormatRules;\n\n/**\n * Representation of an HTTP request.\n */\nclass Request extends Message implements MessageInterface, RequestInterface\n{\n    use RequestTrait;\n\n    /**\n     * Proxy IPs\n     *\n     * @var array<string, string>\n     *\n     * @deprecated Check the App config directly\n     */\n    protected $proxyIPs;\n\n    /**\n     * Request method.\n     *\n     * @var string\n     */\n    protected $method;\n\n    /**\n     * A URI instance.\n     *\n     * @var URI\n     */\n    protected $uri;\n\n    /**\n     * Constructor.\n     *\n     * @param object $config\n     *\n     * @deprecated The $config is no longer needed and will be removed in a future version\n     */\n    public function __construct($config = null)\n    {\n        /**\n         * @deprecated $this->proxyIps property will be removed in the future\n         */\n        $this->proxyIPs = $config->proxyIPs;\n\n        if (empty($this->method)) {\n            $this->method = $this->getServer('REQUEST_METHOD') ?? 'GET';\n        }\n\n        if (empty($this->uri)) {\n            $this->uri = new URI();\n        }\n    }\n\n    /**\n     * Validate an IP address\n     *\n     * @param string $ip    IP Address\n     * @param string $which IP protocol: 'ipv4' or 'ipv6'\n     *\n     * @deprecated Use Validation instead\n     *\n     * @codeCoverageIgnore\n     */\n    public function isValidIP(?string $ip = null, ?string $which = null): bool\n    {\n        return (new FormatRules())->valid_ip($ip, $which);\n    }\n\n    /**\n     * Get the request method.\n     *\n     * @param bool $upper Whether to return in upper or lower case.\n     *\n     * @deprecated The $upper functionality will be removed and this will revert to its PSR-7 equivalent\n     *\n     * @codeCoverageIgnore\n     */\n    public function getMethod(bool $upper = false): string\n    {\n        return ($upper) ? strtoupper($this->method) : strtolower($this->method);\n    }\n\n    /**\n     * Sets the request method. Used when spoofing the request.\n     *\n     * @return $this\n     *\n     * @deprecated Use withMethod() instead for immutability\n     *\n     * @codeCoverageIgnore\n     */\n    public function setMethod(string $method)\n    {\n        $this->method = $method;\n\n        return $this;\n    }\n\n    /**\n     * Returns an instance with the specified method.\n     *\n     * @param string $method\n     *\n     * @return static\n     */\n    public function withMethod($method)\n    {\n        $request = clone $this;\n\n        $request->method = $method;\n\n        return $request;\n    }\n\n    /**\n     * Retrieves the URI instance.\n     *\n     * @return URI\n     */\n    public function getUri()\n    {\n        return $this->uri;\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Exceptions\\ConfigException;\nuse CodeIgniter\\Validation\\FormatRules;\n\n/**\n * Request Trait\n *\n * Additional methods to make a PSR-7 Request class\n * compliant with the framework's own RequestInterface.\n *\n * @see https://github.com/php-fig/http-message/blob/master/src/RequestInterface.php\n */\ntrait RequestTrait\n{\n    /**\n     * IP address of the current user.\n     *\n     * @var string\n     *\n     * @deprecated Will become private in a future release\n     */\n    protected $ipAddress = '';\n\n    /**\n     * Stores values we've retrieved from\n     * PHP globals.\n     *\n     * @var array\n     */\n    protected $globals = [];\n\n    /**\n     * Gets the user's IP address.\n     *\n     * @return string IP address if it can be detected, or empty string.\n     *                If the IP address is not a valid IP address,\n     *                then will return '0.0.0.0'.\n     */\n    public function getIPAddress(): string\n    {\n        if ($this->ipAddress) {\n            return $this->ipAddress;\n        }\n\n        $ipValidator = [\n            new FormatRules(),\n            'valid_ip',\n        ];\n\n        /**\n         * @deprecated $this->proxyIPs property will be removed in the future\n         */\n        // @phpstan-ignore-next-line\n        $proxyIPs = $this->proxyIPs ?? config('App')->proxyIPs;\n        if (! empty($proxyIPs)) {\n            // @phpstan-ignore-next-line\n            if (! is_array($proxyIPs) || is_int(array_key_first($proxyIPs))) {\n                throw new ConfigException(\n                    'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'\n                );\n            }\n        }\n\n        $this->ipAddress = $this->getServer('REMOTE_ADDR');\n\n        if ($proxyIPs) {\n            // @TODO Extract all this IP address logic to another class.\n            foreach ($proxyIPs as $proxyIP => $header) {\n                // Check if we have an IP address or a subnet\n                if (strpos($proxyIP, '/') === false) {\n                    // An IP address (and not a subnet) is specified.\n                    // We can compare right away.\n                    if ($proxyIP === $this->ipAddress) {\n                        $spoof = $this->getClientIP($header);\n\n                        if ($spoof !== null) {\n                            $this->ipAddress = $spoof;\n                            break;\n                        }\n                    }\n\n                    continue;\n                }\n\n                // We have a subnet ... now the heavy lifting begins\n                if (! isset($separator)) {\n                    $separator = $ipValidator($this->ipAddress, 'ipv6') ? ':' : '.';\n                }\n\n                // If the proxy entry doesn't match the IP protocol - skip it\n                if (strpos($proxyIP, $separator) === false) {\n                    continue;\n                }\n\n                // Convert the REMOTE_ADDR IP address to binary, if needed\n                if (! isset($ip, $sprintf)) {\n                    if ($separator === ':') {\n                        // Make sure we're having the \"full\" IPv6 format\n                        $ip = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($this->ipAddress, ':')), $this->ipAddress));\n\n                        for ($j = 0; $j < 8; $j++) {\n                            $ip[$j] = intval($ip[$j], 16);\n                        }\n\n                        $sprintf = '%016b%016b%016b%016b%016b%016b%016b%016b';\n                    } else {\n                        $ip      = explode('.', $this->ipAddress);\n                        $sprintf = '%08b%08b%08b%08b';\n                    }\n\n                    $ip = vsprintf($sprintf, $ip);\n                }\n\n                // Split the netmask length off the network address\n                sscanf($proxyIP, '%[^/]/%d', $netaddr, $masklen);\n\n                // Again, an IPv6 address is most likely in a compressed form\n                if ($separator === ':') {\n                    $netaddr = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($netaddr, ':')), $netaddr));\n\n                    for ($i = 0; $i < 8; $i++) {\n                        $netaddr[$i] = intval($netaddr[$i], 16);\n                    }\n                } else {\n                    $netaddr = explode('.', $netaddr);\n                }\n\n                // Convert to binary and finally compare\n                if (strncmp($ip, vsprintf($sprintf, $netaddr), $masklen) === 0) {\n                    $spoof = $this->getClientIP($header);\n\n                    if ($spoof !== null) {\n                        $this->ipAddress = $spoof;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (! $ipValidator($this->ipAddress)) {\n            return $this->ipAddress = '0.0.0.0';\n        }\n\n        return empty($this->ipAddress) ? '' : $this->ipAddress;\n    }\n\n    /**\n     * Gets the client IP address from the HTTP header.\n     */\n    private function getClientIP(string $header): ?string\n    {\n        $ipValidator = [\n            new FormatRules(),\n            'valid_ip',\n        ];\n        $spoof     = null;\n        $headerObj = $this->header($header);\n\n        if ($headerObj !== null) {\n            $spoof = $headerObj->getValue();\n\n            // Some proxies typically list the whole chain of IP\n            // addresses through which the client has reached us.\n            // e.g. client_ip, proxy_ip1, proxy_ip2, etc.\n            sscanf($spoof, '%[^,]', $spoof);\n\n            if (! $ipValidator($spoof)) {\n                $spoof = null;\n            }\n        }\n\n        return $spoof;\n    }\n\n    /**\n     * Fetch an item from the $_SERVER array.\n     *\n     * @param array|string|null $index  Index for item to be fetched from $_SERVER\n     * @param int|null          $filter A filter name to be applied\n     * @param null              $flags\n     *\n     * @return mixed\n     */\n    public function getServer($index = null, $filter = null, $flags = null)\n    {\n        return $this->fetchGlobal('server', $index, $filter, $flags);\n    }\n\n    /**\n     * Fetch an item from the $_ENV array.\n     *\n     * @param null $index  Index for item to be fetched from $_ENV\n     * @param null $filter A filter name to be applied\n     * @param null $flags\n     *\n     * @return mixed\n     */\n    public function getEnv($index = null, $filter = null, $flags = null)\n    {\n        return $this->fetchGlobal('env', $index, $filter, $flags);\n    }\n\n    /**\n     * Allows manually setting the value of PHP global, like $_GET, $_POST, etc.\n     *\n     * @param mixed $value\n     *\n     * @return $this\n     */\n    public function setGlobal(string $method, $value)\n    {\n        $this->globals[$method] = $value;\n\n        return $this;\n    }\n\n    /**\n     * Fetches one or more items from a global, like cookies, get, post, etc.\n     * Can optionally filter the input when you retrieve it by passing in\n     * a filter.\n     *\n     * If $type is an array, it must conform to the input allowed by the\n     * filter_input_array method.\n     *\n     * http://php.net/manual/en/filter.filters.sanitize.php\n     *\n     * @param string            $method Input filter constant\n     * @param array|string|null $index\n     * @param int|null          $filter Filter constant\n     * @param array|int|null    $flags  Options\n     *\n     * @return array|bool|string|null\n     */\n    public function fetchGlobal(string $method, $index = null, ?int $filter = null, $flags = null)\n    {\n        $method = strtolower($method);\n\n        if (! isset($this->globals[$method])) {\n            $this->populateGlobals($method);\n        }\n\n        // Null filters cause null values to return.\n        $filter ??= FILTER_DEFAULT;\n        $flags = is_array($flags) ? $flags : (is_numeric($flags) ? (int) $flags : 0);\n\n        // Return all values when $index is null\n        if ($index === null) {\n            $values = [];\n\n            foreach ($this->globals[$method] as $key => $value) {\n                $values[$key] = is_array($value)\n                    ? $this->fetchGlobal($method, $key, $filter, $flags)\n                    : filter_var($value, $filter, $flags);\n            }\n\n            return $values;\n        }\n\n        // allow fetching multiple keys at once\n        if (is_array($index)) {\n            $output = [];\n\n            foreach ($index as $key) {\n                $output[$key] = $this->fetchGlobal($method, $key, $filter, $flags);\n            }\n\n            return $output;\n        }\n\n        // Does the index contain array notation?\n        if (($count = preg_match_all('/(?:^[^\\[]+)|\\[[^]]*\\]/', $index, $matches)) > 1) {\n            $value = $this->globals[$method];\n\n            for ($i = 0; $i < $count; $i++) {\n                $key = trim($matches[0][$i], '[]');\n\n                if ($key === '') { // Empty notation will return the value as array\n                    break;\n                }\n\n                if (isset($value[$key])) {\n                    $value = $value[$key];\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        if (! isset($value)) {\n            $value = $this->globals[$method][$index] ?? null;\n        }\n\n        if (is_array($value)\n            && (\n                $filter !== FILTER_DEFAULT\n                || (\n                    (is_numeric($flags) && $flags !== 0)\n                    || is_array($flags) && $flags !== []\n                )\n            )\n        ) {\n            // Iterate over array and append filter and flags\n            array_walk_recursive($value, static function (&$val) use ($filter, $flags) {\n                $val = filter_var($val, $filter, $flags);\n            });\n\n            return $value;\n        }\n\n        // Cannot filter these types of data automatically...\n        if (is_array($value) || is_object($value) || $value === null) {\n            return $value;\n        }\n\n        return filter_var($value, $filter, $flags);\n    }\n\n    /**\n     * Saves a copy of the current state of one of several PHP globals\n     * so we can retrieve them later.\n     */\n    protected function populateGlobals(string $method)\n    {\n        if (! isset($this->globals[$method])) {\n            $this->globals[$method] = [];\n        }\n\n        // Don't populate ENV as it might contain\n        // sensitive data that we don't want to get logged.\n        switch ($method) {\n            case 'get':\n                $this->globals['get'] = $_GET;\n                break;\n\n            case 'post':\n                $this->globals['post'] = $_POST;\n                break;\n\n            case 'request':\n                $this->globals['request'] = $_REQUEST;\n                break;\n\n            case 'cookie':\n                $this->globals['cookie'] = $_COOKIE;\n                break;\n\n            case 'server':\n                $this->globals['server'] = $_SERVER;\n                break;\n        }\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Test\\Mock;\n\nuse Config\\App;\n\nclass MockAppConfig extends App\n{\n    public $baseURL          = 'http://example.com/';\n    public $uriProtocol      = 'REQUEST_URI';\n    public $cookiePrefix     = '';\n    public $cookieDomain     = '';\n    public $cookiePath       = '/';\n    public $cookieSecure     = false;\n    public $cookieHTTPOnly   = false;\n    public $cookieSameSite   = 'Lax';\n    public $proxyIPs         = [];\n    public $CSRFTokenName    = 'csrf_test_name';\n    public $CSRFHeaderName   = 'X-CSRF-TOKEN';\n    public $CSRFCookieName   = 'csrf_cookie_name';\n    public $CSRFExpire       = 7200;\n    public $CSRFRegenerate   = true;\n    public $CSRFExcludeURIs  = ['http://example.com'];\n    public $CSRFRedirect     = false;\n    public $CSRFSameSite     = 'Lax';\n    public $CSPEnabled       = false;\n    public $defaultLocale    = 'en';\n    public $negotiateLocale  = false;\n    public $supportedLocales = [\n        'en',\n        'es',\n    ];\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Test\\Mock;\n\nuse Config\\App;\n\nclass MockCLIConfig extends App\n{\n    public $baseURL          = 'http://example.com/';\n    public $uriProtocol      = 'REQUEST_URI';\n    public $cookiePrefix     = '';\n    public $cookieDomain     = '';\n    public $cookiePath       = '/';\n    public $cookieSecure     = false;\n    public $cookieHTTPOnly   = false;\n    public $cookieSameSite   = 'Lax';\n    public $proxyIPs         = [];\n    public $CSRFTokenName    = 'csrf_test_name';\n    public $CSRFCookieName   = 'csrf_cookie_name';\n    public $CSRFExpire       = 7200;\n    public $CSRFRegenerate   = true;\n    public $CSRFExcludeURIs  = ['http://example.com'];\n    public $CSRFSameSite     = 'Lax';\n    public $CSPEnabled       = false;\n    public $defaultLocale    = 'en';\n    public $negotiateLocale  = false;\n    public $supportedLocales = [\n        'en',\n        'es',\n    ];\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Exceptions\\ConfigException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\Files\\UploadedFile;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse Config\\App;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n *\n * @group SeparateProcess\n */\nfinal class IncomingRequestTest extends CIUnitTestCase\n{\n    private Request $request;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_POST = $_GET = $_SERVER = $_REQUEST = $_ENV = $_COOKIE = $_SESSION = [];\n    }\n\n    public function testCanGrabRequestVars()\n    {\n        $_REQUEST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getVar('TEST'));\n        $this->assertNull($this->request->getVar('TESTY'));\n    }\n\n    public function testCanGrabGetVars()\n    {\n        $_GET['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getGet('TEST'));\n        $this->assertNull($this->request->getGet('TESTY'));\n    }\n\n    public function testCanGrabPostVars()\n    {\n        $_POST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getPost('TEST'));\n        $this->assertNull($this->request->getPost('TESTY'));\n    }\n\n    public function testCanGrabPostBeforeGet()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n\n        $this->assertSame('5', $this->request->getPostGet('TEST'));\n        $this->assertSame('3', $this->request->getGetPost('TEST'));\n    }\n\n    public function testNoOldInput()\n    {\n        $this->assertNull($this->request->getOldInput('name'));\n    }\n\n    public function testCanGetOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['one' => 'two'],\n            'post' => ['name' => 'foo'],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('name'));\n        $this->assertSame('two', $this->request->getOldInput('one'));\n    }\n\n    public function testCanGetOldInputDotted()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('banana.name'));\n        $this->assertSame('two', $this->request->getOldInput('apple.name'));\n    }\n\n    public function testMissingOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertNull($this->request->getOldInput('pineapple.name'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     */\n    public function testCanGetOldInputArrayWithSESSION()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame(['name' => 'two'], $this->request->getOldInput('apple'));\n        $this->assertSame(['name' => 'foo'], $this->request->getOldInput('banana'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     *\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function testCanGetOldInputArrayWithSessionService()\n    {\n        $locations = [\n            'AB' => 'Alberta',\n            'BC' => 'British Columbia',\n            'SK' => 'Saskatchewan',\n        ];\n        $session = service('session');\n        $session->set(['_ci_old_input' => ['post' => ['location' => $locations]]]);\n\n        $this->assertSame($locations, $this->request->getOldInput('location'));\n    }\n\n    public function testCanGrabServerVars()\n    {\n        $server                   = $this->getPrivateProperty($this->request, 'globals');\n        $server['server']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getServer('TEST'));\n        $this->assertNull($this->request->getServer('TESTY'));\n    }\n\n    public function testCanGrabEnvVars()\n    {\n        $server                = $this->getPrivateProperty($this->request, 'globals');\n        $server['env']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getEnv('TEST'));\n        $this->assertNull($this->request->getEnv('TESTY'));\n    }\n\n    public function testCanGrabCookieVars()\n    {\n        $_COOKIE['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getCookie('TEST'));\n        $this->assertNull($this->request->getCookie('TESTY'));\n    }\n\n    public function testStoresDefaultLocale()\n    {\n        $config = new App();\n\n        $this->assertSame($config->defaultLocale, $this->request->getDefaultLocale());\n        $this->assertSame($config->defaultLocale, $this->request->getLocale());\n    }\n\n    public function testSetLocaleSaves()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('en');\n        $this->assertSame('en', $request->getLocale());\n    }\n\n    public function testSetBadLocale()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('xx');\n        $this->assertSame('es', $request->getLocale());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2774\n     */\n    public function testNegotiatesLocale()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr-FR; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    public function testNegotiatesLocaleOnlyBroad()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    // The negotiation tests below are not intended to exercise the HTTP\\Negotiate class -\n    // that is up to the NegotiateTest. These are only to make sure that the requests\n    // flow through to the negotiator\n\n    public function testNegotiatesNot()\n    {\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->expectException(HTTPException::class);\n        $this->request->negotiate('something bogus', ['iso-8859-5', 'unicode-1-1']);\n    }\n\n    public function testNegotiatesCharset()\n    {\n        // $_SERVER['HTTP_ACCEPT_CHARSET'] = 'iso-8859-5, unicode-1-1;q=0.8';\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->assertSame(strtolower($this->request->config->charset), $this->request->negotiate('charset', ['iso-8859', 'unicode-1-2']));\n    }\n\n    public function testNegotiatesMedia()\n    {\n        $this->request->setHeader('Accept', 'text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c');\n        $this->assertSame('text/html', $this->request->negotiate('media', ['text/html', 'text/x-c', 'text/x-dvi', 'text/plain']));\n    }\n\n    public function testNegotiatesEncoding()\n    {\n        $this->request->setHeader('Accept-Encoding', 'gzip;q=1.0, identity; q=0.4, compress;q=0.5');\n        $this->assertSame('gzip', $this->request->negotiate('encoding', ['gzip', 'compress']));\n    }\n\n    public function testNegotiatesLanguage()\n    {\n        $this->request->setHeader('Accept-Language', 'da, en-gb;q=0.8, en;q=0.7');\n        $this->assertSame('en', $this->request->negotiate('language', ['en', 'da']));\n    }\n\n    public function testCanGrabGetRawJSON()\n    {\n        $json = '{\"code\":1, \"message\":\"ok\"}';\n\n        $expected = ['code' => 1, 'message' => 'ok'];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame($expected, $request->getJSON(true));\n    }\n\n    public function testCanGetAVariableFromJson()\n    {\n        $jsonObj = [\n            'foo' => 'bar',\n            'baz' => ['fizz' => 'buzz'],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame('bar', $request->getJsonVar('foo'));\n        $this->assertNull($request->getJsonVar('notExists'));\n\n        $jsonVar = $request->getJsonVar('baz');\n        $this->assertIsObject($jsonVar);\n        $this->assertSame('buzz', $jsonVar->fizz);\n        $this->assertSame('buzz', $request->getJsonVar('baz.fizz'));\n    }\n\n    public function testGetJsonVarAsArray()\n    {\n        $jsonObj = [\n            'baz' => [\n                'fizz' => 'buzz',\n                'foo'  => 'bar',\n            ],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $jsonVar = $request->getJsonVar('baz', true);\n        $this->assertIsArray($jsonVar);\n        $this->assertSame('buzz', $jsonVar['fizz']);\n        $this->assertSame('bar', $jsonVar['foo']);\n    }\n\n    public function testGetJsonVarCanFilter()\n    {\n        $json = json_encode(['foo' => 'bar']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertFalse($request->getJsonVar('foo', false, FILTER_VALIDATE_INT));\n    }\n\n    public function testGetVarWorksWithJson()\n    {\n        $json = json_encode(['foo' => 'bar', 'fizz' => 'buzz']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n        $this->assertNull($request->getVar('notExists'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsObject($all);\n        $this->assertSame('bar', $all->foo);\n        $this->assertSame('buzz', $all->fizz);\n    }\n\n    public function testGetVarWorksWithJsonAndGetParams()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        // GET method\n        $_REQUEST['foo']  = 'bar';\n        $_REQUEST['fizz'] = 'buzz';\n\n        $request = new IncomingRequest($config, new URI('http://example.com/path?foo=bar&fizz=buzz'), 'php://input', new UserAgent());\n        $request = $request->withMethod('GET');\n\n        // JSON type\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsArray($all);\n        $this->assertSame('bar', $all['foo']);\n        $this->assertSame('buzz', $all['fizz']);\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/5391\n     */\n    public function testGetJsonVarReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJsonVar('myKey'));\n    }\n\n    public function testgetJSONReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJSON());\n    }\n\n    public function testCanGrabGetRawInput()\n    {\n        $rawstring = 'username=admin001&role=administrator&usepass=0';\n\n        $expected = [\n            'username' => 'admin001',\n            'role'     => 'administrator',\n            'usepass'  => '0',\n        ];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $rawstring, new UserAgent());\n\n        $this->assertSame($expected, $request->getRawInput());\n    }\n\n    public function testIsCLI()\n    {\n        $this->assertFalse($this->request->isCLI());\n    }\n\n    public function testIsAJAX()\n    {\n        $this->request->appendHeader('X-Requested-With', 'XMLHttpRequest');\n        $this->assertTrue($this->request->isAJAX());\n    }\n\n    public function testIsSecure()\n    {\n        $_SERVER['HTTPS'] = 'on';\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureFrontEnd()\n    {\n        $this->request->appendHeader('Front-End-Https', 'on');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureForwarded()\n    {\n        $this->request->appendHeader('X-Forwarded-Proto', 'https');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testUserAgent()\n    {\n        $_SERVER['HTTP_USER_AGENT'] = 'Mozilla';\n\n        $config  = new App();\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame('Mozilla', $request->getUserAgent()->__toString());\n    }\n\n    public function testFileCollectionFactory()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $files = $this->request->getFiles();\n        $this->assertCount(1, $files);\n\n        $file = array_shift($files);\n        $this->assertInstanceOf(UploadedFile::class, $file);\n\n        $this->assertSame('someFile.txt', $file->getName());\n        $this->assertSame(124, $file->getSize());\n    }\n\n    public function testGetFileMultiple()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name' => [\n                    'someFile.txt',\n                    'someFile2.txt',\n                ],\n                'type' => [\n                    'text/plain',\n                    'text/plain',\n                ],\n                'size' => [\n                    '124',\n                    '125',\n                ],\n                'tmp_name' => [\n                    '/tmp/myTempFile.txt',\n                    '/tmp/myTempFile2.txt',\n                ],\n                'error' => [\n                    0,\n                    0,\n                ],\n            ],\n        ];\n\n        $gotit = $this->request->getFileMultiple('userfile');\n        $this->assertSame(124, $gotit[0]->getSize());\n        $this->assertSame(125, $gotit[1]->getSize());\n    }\n\n    public function testGetFile()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $gotit = $this->request->getFile('userfile');\n        $this->assertSame(124, $gotit->getSize());\n    }\n\n    public function testSpoofing()\n    {\n        $this->request->setMethod('WINK');\n        $this->assertSame('wink', $this->request->getMethod());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2839\n     */\n    public function testGetPostEmpty()\n    {\n        $_POST['TEST'] = '5';\n        $_GET['TEST']  = '3';\n        $this->assertSame($_POST, $this->request->getPostGet());\n        $this->assertSame($_GET, $this->request->getGetPost());\n    }\n\n    public function testPostGetSecondStream()\n    {\n        $_GET['get'] = '3';\n        $this->assertSame($_GET, $this->request->getPostGet());\n    }\n\n    public function testGetPostSecondStream()\n    {\n        $_POST['post'] = '5';\n        $this->assertSame($_POST, $this->request->getGetPost());\n    }\n\n    public function testGetPostSecondStreams()\n    {\n        $_GET['get']   = '3';\n        $_POST['post'] = '5';\n        $this->assertSame(array_merge($_GET, $_POST), $this->request->getPostGet());\n        $this->assertSame(array_merge($_POST, $_GET), $this->request->getGetPost());\n    }\n\n    public function testWithFalseBody()\n    {\n        // Use `false` here to simulate file_get_contents returning a false value\n        $request = new IncomingRequest(new App(), new URI(), false, new UserAgent());\n\n        $this->assertNotFalse($request->getBody());\n        $this->assertNull($request->getBody());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/3020\n     */\n    public function testGetPostIndexNotExists()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n        $this->assertNull($this->request->getPostGet('gc'));\n        $this->assertNull($this->request->getGetPost('gc'));\n    }\n\n    public function providePathChecks()\n    {\n        return [\n            'not /index.php' => [\n                '/test.php',\n                '/',\n            ],\n            '/index.php' => [\n                '/index.php',\n                '/',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider providePathChecks\n     *\n     * @param mixed $path\n     * @param mixed $detectPath\n     */\n    public function testExtensionPHP($path, $detectPath)\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $_SERVER['REQUEST_URI'] = $path;\n        $_SERVER['SCRIPT_NAME'] = $path;\n        $request                = new IncomingRequest($config, new URI($path), null, new UserAgent());\n        $this->assertSame($detectPath, $request->detectPath());\n    }\n\n    public function testGetPath()\n    {\n        $_SERVER['REQUEST_URI'] = '/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRelative()\n    {\n        $_SERVER['REQUEST_URI'] = '/sub/folder/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/sub/folder/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathStoresDetectedValue()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRediscovered()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n        $request->detectPath();\n\n        $this->assertSame('candy/snickers', $request->getPath());\n    }\n\n    public function testSetPath()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n        $this->assertSame('', $request->getPath());\n\n        $request->setPath('foobar');\n        $this->assertSame('foobar', $request->getPath());\n    }\n\n    public function testSetPathUpdatesURI()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $request->setPath('apples');\n\n        $this->assertSame('apples', $request->getUri()->getPath());\n    }\n\n    public function testGetIPAddressNormal()\n    {\n        $expected               = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR'] = $expected;\n\n        $this->request = new Request(new App());\n        $this->request->populateHeaders();\n\n        $this->assertSame($expected, $this->request->getIPAddress());\n        // call a second time to exercise the initial conditional block in getIPAddress()\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxy()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyIPv6()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $_SERVER['REMOTE_ADDR']          = '2001:db8::2:1';\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '2001:db8::2:1' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyInvalidIPAddress()\n    {\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n        $expected                        = '10.0.1.200';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyInvalidIPAddressIPv6()\n    {\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '2001:xyz::1';\n        $expected                        = '2001:db8::2:1';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '2001:db8::2:1' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyNotWhitelisted()\n    {\n        $expected                        = '10.10.1.200';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyNotWhitelistedIPv6()\n    {\n        $expected                        = '2001:db8::2:2';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '2001:db8::2:1' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxySubnet()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n\n        $config           = new App();\n        $config->proxyIPs = ['192.168.5.0/24' => 'X-Forwarded-For'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxySubnetIPv6()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $_SERVER['REMOTE_ADDR']          = '2001:db8:1234:ffff:ffff:ffff:ffff:ffff';\n\n        $config           = new App();\n        $config->proxyIPs = ['2001:db8:1234::/48' => 'X-Forwarded-For'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyOutOfSubnet()\n    {\n        $expected                        = '192.168.5.21';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n\n        $config           = new App();\n        $config->proxyIPs = ['192.168.5.0/28' => 'X-Forwarded-For'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyOutOfSubnetIPv6()\n    {\n        $expected                        = '2001:db8:1235:ffff:ffff:ffff:ffff:ffff';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n\n        $config           = new App();\n        $config->proxyIPs = ['2001:db8:1234::/48' => 'X-Forwarded-For'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyBothIPv4AndIPv6()\n    {\n        $expected                        = '2001:db8:1235:ffff:ffff:ffff:ffff:ffff';\n        $_SERVER['REMOTE_ADDR']          = $expected;\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '192.168.5.0/28'     => 'X-Forwarded-For',\n            '2001:db8:1234::/48' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyInvalidConfigString()\n    {\n        $this->expectException(ConfigException::class);\n        $this->expectExceptionMessage(\n            'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'\n        );\n\n        $config           = new App();\n        $config->proxyIPs = '192.168.5.0/28';\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        $this->request->getIPAddress();\n    }\n\n    public function testGetIPAddressThruProxyInvalidConfigArray()\n    {\n        $this->expectException(ConfigException::class);\n        $this->expectExceptionMessage(\n            'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'\n        );\n\n        $config           = new App();\n        $config->proxyIPs = ['192.168.5.0/28'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        $this->request->getIPAddress();\n    }\n\n    // @TODO getIPAddress should have more testing, to 100% code coverage\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse Config\\App;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n *\n * @group Others\n */\nfinal class RequestTest extends CIUnitTestCase\n{\n    private Request $request;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->request = new Request(new App());\n\n        $_POST = [];\n        $_GET  = [];\n    }\n\n    public function testFetchGlobalsSingleValue()\n    {\n        $_POST['foo'] = 'bar';\n        $_GET['bar']  = 'baz';\n\n        $this->assertSame('bar', $this->request->fetchGlobal('post', 'foo'));\n        $this->assertSame('baz', $this->request->fetchGlobal('get', 'bar'));\n    }\n\n    public function testFetchGlobalsReturnsNullWhenNotFound()\n    {\n        $this->assertNull($this->request->fetchGlobal('post', 'foo'));\n    }\n\n    public function testFetchGlobalsFiltersValues()\n    {\n        $this->request->setGlobal('post', [\n            'foo' => 'bar<script>',\n            'bar' => 'baz',\n        ]);\n\n        $this->assertSame('bar%3Cscript%3E', $this->request->fetchGlobal('post', 'foo', FILTER_SANITIZE_ENCODED));\n        $this->assertSame('baz', $this->request->fetchGlobal('post', 'bar'));\n    }\n\n    public function testFetchGlobalsWithFilterFlag()\n    {\n        $this->request->setGlobal('post', [\n            'foo' => '`bar<script>',\n            'bar' => 'baz',\n        ]);\n\n        $this->assertSame('bar%3Cscript%3E', $this->request->fetchGlobal('post', 'foo', FILTER_SANITIZE_ENCODED, FILTER_FLAG_STRIP_BACKTICK));\n        $this->assertSame('baz', $this->request->fetchGlobal('post', 'bar'));\n    }\n\n    public function testFetchGlobalReturnsAllWhenEmpty()\n    {\n        $post = [\n            'foo' => 'bar',\n            'bar' => 'baz',\n            'xxx' => 'yyy',\n            'yyy' => 'zzz',\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($post, $this->request->fetchGlobal('post'));\n    }\n\n    public function testFetchGlobalFiltersAllValues()\n    {\n        $post = [\n            'foo' => 'bar<script>',\n            'bar' => 'baz<script>',\n            'xxx' => 'yyy<script>',\n            'yyy' => 'zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n            'xxx' => 'yyy%3Cscript%3E',\n            'yyy' => 'zzz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', null, FILTER_SANITIZE_ENCODED));\n    }\n\n    public function testFetchGlobalFilterWithFlagAllValues()\n    {\n        $post = [\n            'foo' => '`bar<script>',\n            'bar' => '`baz<script>',\n            'xxx' => '`yyy<script>',\n            'yyy' => '`zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n            'xxx' => 'yyy%3Cscript%3E',\n            'yyy' => 'zzz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', null, FILTER_SANITIZE_ENCODED, FILTER_FLAG_STRIP_BACKTICK));\n    }\n\n    public function testFetchGlobalReturnsSelectedKeys()\n    {\n        $post = [\n            'foo' => 'bar',\n            'bar' => 'baz',\n            'xxx' => 'yyy',\n            'yyy' => 'zzz',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar',\n            'bar' => 'baz',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['foo', 'bar']));\n    }\n\n    public function testFetchGlobalFiltersSelectedValues()\n    {\n        $post = [\n            'foo' => 'bar<script>',\n            'bar' => 'baz<script>',\n            'xxx' => 'yyy<script>',\n            'yyy' => 'zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['foo', 'bar'], FILTER_SANITIZE_ENCODED));\n    }\n\n    public function testFetchGlobalFilterWithFlagSelectedValues()\n    {\n        $post = [\n            'foo' => '`bar<script>',\n            'bar' => '`baz<script>',\n            'xxx' => '`yyy<script>',\n            'yyy' => '`zzz<script>',\n        ];\n        $this->request->setGlobal('post', $post);\n        $expected = [\n            'foo' => 'bar%3Cscript%3E',\n            'bar' => 'baz%3Cscript%3E',\n        ];\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['foo', 'bar'], FILTER_SANITIZE_ENCODED, FILTER_FLAG_STRIP_BACKTICK));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/353\n     */\n    public function testFetchGlobalReturnsArrayValues()\n    {\n        $post = [\n            'ANNOUNCEMENTS' => [\n                1 => ['DETAIL' => 'asdf'],\n                2 => ['DETAIL' => 'sdfg'],\n            ],\n            'submit' => 'SAVE',\n        ];\n        $this->request->setGlobal('post', $post);\n        $result = $this->request->fetchGlobal('post');\n\n        $this->assertSame($post, $result);\n        $this->assertIsArray($result['ANNOUNCEMENTS']);\n        $this->assertCount(2, $result['ANNOUNCEMENTS']);\n    }\n\n    public function testFetchGlobalWithArrayTop()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame(['address' => ['zipcode' => 90210]], $this->request->fetchGlobal('post', 'clients'));\n    }\n\n    public function testFetchGlobalWithArrayChildNumeric()\n    {\n        $post = [\n            'clients' => [\n                [\n                    'address' => [\n                        'zipcode' => 90210,\n                    ],\n                ],\n                [\n                    'address' => [\n                        'zipcode' => 60610,\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame(['zipcode' => 60610], $this->request->fetchGlobal('post', 'clients[1][address]'));\n    }\n\n    public function testFetchGlobalWithArrayChildElement()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame(['zipcode' => 90210], $this->request->fetchGlobal('post', 'clients[address]'));\n        $this->assertNull($this->request->fetchGlobal('post', 'clients[zipcode]'));\n    }\n\n    public function testFetchGlobalWithKeylessArrayChildElement()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n                'stuff' => [['a']],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame([['a']], $this->request->fetchGlobal('post', 'clients[stuff]'));\n    }\n\n    public function testFetchGlobalWithArrayLastElement()\n    {\n        $post = [\n            'clients' => [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame('90210', $this->request->fetchGlobal('post', 'clients[address][zipcode]'));\n    }\n\n    public function testFetchGlobalWithEmptyNotation()\n    {\n        $expected = [\n            [\n                'address' => [\n                    'zipcode' => 90210,\n                ],\n            ],\n            [\n                'address' => [\n                    'zipcode' => 60610,\n                ],\n            ],\n        ];\n        $post = [\n            'clients' => $expected,\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', 'clients[]'));\n    }\n\n    public function testFetchGlobalFiltersWithNull()\n    {\n        $expected = [\n            'foo'     => false,\n            'number'  => 5,\n            'address' => [\n                'street'  => false,\n                'zipcode' => 91210,\n            ],\n            'people' => [\n                [\n                    'name' => false,\n                    'age'  => 26,\n                    'pets' => [\n                        'cats' => [\n                            'name' => false,\n                            'age'  => 3,\n                        ],\n                    ],\n                ],\n                [\n                    'name' => false,\n                    'age'  => 23,\n                    'pets' => [\n                        'fishes' => [\n                            'name' => false,\n                            'age'  => 1,\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', null, FILTER_VALIDATE_INT));\n    }\n\n    public function testFetchGlobalFiltersWithValue()\n    {\n        $expected = [\n            [\n                'name' => false,\n                'age'  => 26,\n                'pets' => [\n                    'cats' => [\n                        'name' => false,\n                        'age'  => 3,\n                    ],\n                ],\n            ],\n            [\n                'name' => false,\n                'age'  => 23,\n                'pets' => [\n                    'fishes' => [\n                        'name' => false,\n                        'age'  => 1,\n                    ],\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', 'people', FILTER_VALIDATE_INT));\n    }\n\n    public function testFetchGlobalFiltersWithValues()\n    {\n        $expected = [\n            'address' => [\n                'street'  => false,\n                'zipcode' => 91210,\n            ],\n            'people' => [\n                [\n                    'name' => false,\n                    'age'  => 26,\n                    'pets' => [\n                        'cats' => [\n                            'name' => false,\n                            'age'  => 3,\n                        ],\n                    ],\n                ],\n                [\n                    'name' => false,\n                    'age'  => 23,\n                    'pets' => [\n                        'fishes' => [\n                            'name' => false,\n                            'age'  => 1,\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', ['address', 'people'], FILTER_VALIDATE_INT));\n    }\n\n    public function testFetchGlobalFiltersWithArrayChildElement()\n    {\n        $expected = [\n            'name' => false,\n            'age'  => 26,\n            'pets' => [\n                'cats' => [\n                    'name' => false,\n                    'age'  => 3,\n                ],\n            ],\n        ];\n        $post = [\n            'foo'     => 'bar',\n            'number'  => '5',\n            'address' => [\n                'street'  => 'Beverly Hills',\n                'zipcode' => '91210',\n            ],\n            'people' => [\n                [\n                    'name' => 'Brandon',\n                    'age'  => '26',\n                    'pets' => [\n                        'cats' => [\n                            'name' => 'Simon',\n                            'age'  => '3',\n                        ],\n                    ],\n                ],\n                [\n                    'name' => 'Brenda',\n                    'age'  => '23',\n                    'pets' => [\n                        'fishes' => [\n                            'name' => 'Nemo',\n                            'age'  => '1',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n        $this->request->setGlobal('post', $post);\n\n        $this->assertSame($expected, $this->request->fetchGlobal('post', 'people[0]', FILTER_VALIDATE_INT));\n    }\n\n    public function ipAddressChecks()\n    {\n        return [\n            'empty' => [\n                false,\n                '',\n            ],\n            'zero' => [\n                false,\n                0,\n            ],\n            'large_ipv4' => [\n                false,\n                '256.256.256.999',\n                'ipv4',\n            ],\n            'good_ipv4' => [\n                true,\n                '100.100.100.0',\n                'ipv4',\n            ],\n            'good_default' => [\n                true,\n                '100.100.100.0',\n            ],\n            'zeroed_ipv4' => [\n                true,\n                '0.0.0.0',\n            ],\n            'large_ipv6' => [\n                false,\n                'h123:0000:0000:0000:0000:0000:0000:0000',\n                'ipv6',\n            ],\n            'good_ipv6' => [\n                true,\n                '2001:0db8:85a3:0000:0000:8a2e:0370:7334',\n            ],\n            'confused_ipv6' => [\n                false,\n                '255.255.255.255',\n                'ipv6',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider ipAddressChecks\n     *\n     * @param mixed      $expected\n     * @param mixed      $address\n     * @param mixed|null $type\n     */\n    public function testValidIPAddress($expected, $address, $type = null)\n    {\n        $this->assertSame($expected, $this->request->isValidIP($address, $type));\n    }\n\n    public function testGetIPAddressDefault()\n    {\n        $this->assertSame('0.0.0.0', $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressNormal()\n    {\n        $expected               = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR'] = $expected;\n        $this->request          = new Request(new App());\n        $this->assertSame($expected, $this->request->getIPAddress());\n        // call a second time to exercise the initial conditional block in getIPAddress()\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxy()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyInvalid()\n    {\n        $expected                        = '123.456.23.123';\n        $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n        $config                          = new App();\n        $config->proxyIPs                = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n        ];\n\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame('10.0.1.200', $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyNotWhitelisted()\n    {\n        $expected                        = '123.456.23.123';\n        $_SERVER['REMOTE_ADDR']          = '10.10.1.200';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n\n        $config           = new App();\n        $config->proxyIPs = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n        ];\n        $this->request = new Request($config);\n        $this->request->populateHeaders();\n\n        // spoofed address invalid\n        $this->assertSame('10.10.1.200', $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxySubnet()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n\n        $config           = new App();\n        $config->proxyIPs = ['192.168.5.0/24' => 'X-Forwarded-For'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame($expected, $this->request->getIPAddress());\n    }\n\n    public function testGetIPAddressThruProxyOutofSubnet()\n    {\n        $expected                        = '123.123.123.123';\n        $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n\n        $config           = new App();\n        $config->proxyIPs = ['192.168.5.0/28' => 'X-Forwarded-For'];\n        $this->request    = new Request($config);\n        $this->request->populateHeaders();\n\n        // we should see the original forwarded address\n        $this->assertSame('192.168.5.21', $this->request->getIPAddress());\n    }\n\n    // FIXME getIPAddress should have more testing, to 100% code coverage\n\n    public function testMethodReturnsRightStuff()\n    {\n        // Defaults method to GET now.\n        $this->assertSame('get', $this->request->getMethod());\n        $this->assertSame('GET', $this->request->getMethod(true));\n    }\n}\n", "Version 4.2.11\n##############\n\nRelease Date: December 21, 2022\n\n**4.2.11 release of CodeIgniter4**\n\n.. contents::\n    :local:\n    :depth: 2\n\nSECURITY\n********\n\n- *Attackers may spoof IP address when using proxy* was fixed. See the `Security advisory GHSA-ghw3-5qvm-3mqc <https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-ghw3-5qvm-3mqc>`_ for more information.\n\nBREAKING\n********\n\n- The ``Config\\App::$proxyIPs`` value format has been changed. See :ref:`Upgrading Guide <upgrade-4211-proxyips>`.\n\nBugs Fixed\n**********\n\n- Fixed a ``FileLocator::locateFile()`` bug where a similar namespace name could be replaced by another, causing a failure to find a file that exists.\n- Fixed a ``RedisHandler`` session class to use the correct config when used with a socket connection.\n\nSee the repo's `CHANGELOG.md <https://github.com/codeigniter4/CodeIgniter4/blob/develop/CHANGELOG.md>`_ for a complete list of bugs fixed.\n", "Request Class\n*************\n\nThe request class is an object-oriented representation of an HTTP request. This is meant to\nwork for both incoming, such as a request to the application from a browser, and outgoing requests,\nlike would be used to send a request from the application to a third-party application. This class\nprovides the common functionality they both need, but both cases have custom classes that extend\nfrom the Request class to add specific functionality.\n\nSee the documentation for the :doc:`IncomingRequest Class </incoming/incomingrequest>` and\n:doc:`CURLRequest Class </libraries/curlrequest>` for more usage details.\n\nClass Reference\n===============\n\n.. php:namespace:: CodeIgniter\\HTTP\n\n.. php:class:: Request\n\n    .. php:method:: getIPAddress()\n\n        :returns: The user's IP Address, if it can be detected, or null. If the IP address\n                    is not a valid IP address, then will return 0.0.0.0\n        :rtype:   string\n\n        Returns the IP address for the current user. If the IP address is not valid, the method\n        will return '0.0.0.0':\n\n        .. literalinclude:: request/001.php\n\n        .. important:: This method takes into account the ``Config\\App::$proxyIPs`` setting and will\n            return the reported client IP address by the HTTP header for the allowed IP address.\n\n    .. php:method:: isValidIP($ip[, $which = ''])\n\n        .. important:: This method is deprecated. It will be removed in future releases.\n\n        :param    string $ip: IP address\n        :param    string $which: IP protocol ('ipv4' or 'ipv6')\n        :returns: true if the address is valid, false if not\n        :rtype:   bool\n\n        Takes an IP address as input and returns true or false (boolean) depending\n        on whether it is valid or not.\n\n        .. note:: The $request->getIPAddress() method above automatically validates the IP address.\n\n            .. literalinclude:: request/002.php\n\n        Accepts an optional second string parameter of 'ipv4' or 'ipv6' to specify\n        an IP format. The default checks for both formats.\n\n    .. php:method:: getMethod([$upper = false])\n\n        .. important:: Use of the ``$upper`` parameter is deprecated. It will be removed in future releases.\n\n        :param bool $upper: Whether to return the request method name in upper or lower case\n        :returns: HTTP request method\n        :rtype: string\n\n        Returns the ``$_SERVER['REQUEST_METHOD']``, with the option to set it\n        in uppercase or lowercase.\n\n        .. literalinclude:: request/003.php\n\n    .. php:method:: setMethod($method)\n\n        :param string $upper: Sets the request method. Used when spoofing the request.\n        :returns: HTTP request method\n        :rtype: Request\n\n    .. php:method:: getServer([$index = null[, $filter = null[, $flags = null]]])\n\n        :param    mixed     $index: Value name\n        :param    int       $filter: The type of filter to apply. A list of filters can be found `here <https://www.php.net/manual/en/filter.filters.php>`__.\n        :param    int|array $flags: Flags to apply. A list of flags can be found `here <https://www.php.net/manual/en/filter.filters.flags.php>`__.\n        :returns: $_SERVER item value if found, null if not\n        :rtype:   mixed\n\n        This method is identical to the ``post()``, ``get()`` and ``cookie()`` methods from the\n        :doc:`IncomingRequest Class </incoming/incomingrequest>`, only it fetches server data (``$_SERVER``):\n\n        .. literalinclude:: request/004.php\n\n        To return an array of multiple ``$_SERVER`` values, pass all the required keys\n        as an array.\n\n        .. literalinclude:: request/005.php\n\n    .. php:method:: getEnv([$index = null[, $filter = null[, $flags = null]]])\n\n        :param    mixed     $index: Value name\n        :param    int       $filter: The type of filter to apply. A list of filters can be found `here <https://www.php.net/manual/en/filter.filters.php>`__.\n        :param    int|array $flags: Flags to apply. A list of flags can be found `here <https://www.php.net/manual/en/filter.filters.flags.php>`__.\n        :returns: $_ENV item value if found, null if not\n        :rtype:   mixed\n\n        This method is identical to the ``post()``, ``get()`` and ``cookie()`` methods from the\n        :doc:`IncomingRequest Class </incoming/incomingrequest>`, only it fetches getEnv data (``$_ENV``):\n\n        .. literalinclude:: request/006.php\n\n        To return an array of multiple ``$_ENV`` values, pass all the required keys\n        as an array.\n\n        .. literalinclude:: request/007.php\n\n    .. php:method:: setGlobal($method, $value)\n\n        :param    string $method: Method name\n        :param    mixed  $value:  Data to be added\n        :returns: HTTP request method\n        :rtype:    Request\n\n        Allows manually setting the value of PHP global, like $_GET, $_POST, etc.\n\n    .. php:method:: fetchGlobal($method [, $index = null[, $filter = null[, $flags = null]]])\n\n        :param    string    $method: Input filter constant\n        :param    mixed     $index: Value name\n        :param    int       $filter: The type of filter to apply. A list of filters can be found `here <https://www.php.net/manual/en/filter.filters.php>`__.\n        :param    int|array $flags: Flags to apply. A list of flags can be found `here <https://www.php.net/manual/en/filter.filters.flags.php>`__.\n        :rtype:   mixed\n\n        Fetches one or more items from a global, like cookies, get, post, etc.\n        Can optionally filter the input when you retrieve it by passing in a filter.\n", "###############################\nUpgrading from 4.2.10 to 4.2.11\n###############################\n\nPlease refer to the upgrade instructions corresponding to your installation method.\n\n- :ref:`Composer Installation App Starter Upgrading <app-starter-upgrading>`\n- :ref:`Composer Installation Adding CodeIgniter4 to an Existing Project Upgrading <adding-codeigniter4-upgrading>`\n- :ref:`Manual Installation Upgrading <installing-manual-upgrading>`\n\n.. contents::\n    :local:\n    :depth: 2\n\nBreaking Changes\n****************\n\n.. _upgrade-4211-proxyips:\n\nConfig\\\\App::$proxyIPs\n======================\n\nThe config value format has been changed. Now you must set your proxy IP address and the HTTP header name for the client IP address pair as an array::\n\n    public $proxyIPs = [\n            '10.0.1.200'     => 'X-Forwarded-For',\n            '192.168.5.0/24' => 'X-Forwarded-For',\n    ];\n\n``ConfigException`` will be thrown for old format config value.\n\nProject Files\n*************\n\nVersion ``4.2.11`` did not alter any executable code in project files.\n\nAll Changes\n===========\n\nThis is a list of all files in the **project space** that received changes;\nmany will be simple comments or formatting that have no effect on the runtime:\n\n* app/Config/App.php\n* app/Config/Autoload.php\n* app/Config/Logger.php\n* app/Config/Toolbar.php\n* app/Views/welcome_message.php\n* composer.json\n"], "filenames": ["app/Config/App.php", "phpstan-baseline.neon.dist", "system/HTTP/Request.php", "system/HTTP/RequestTrait.php", "system/Test/Mock/MockAppConfig.php", "system/Test/Mock/MockCLIConfig.php", "tests/system/HTTP/IncomingRequestTest.php", "tests/system/HTTP/RequestTest.php", "user_guide_src/source/changelogs/v4.2.11.rst", "user_guide_src/source/incoming/request.rst", "user_guide_src/source/installation/upgrade_4211.rst"], "buggy_code_start_loc": [335, 504, 26, 13, 26, 26, 13, 612, 11, 31, 13], "buggy_code_end_loc": [347, 509, 27, 160, 27, 27, 783, 672, 11, 34, 13], "fixing_code_start_loc": [335, 503, 26, 14, 26, 26, 14, 611, 12, 31, 14], "fixing_code_end_loc": [350, 503, 27, 185, 27, 27, 924, 686, 22, 33, 31], "type": "CWE-345", "message": "CodeIgniter is a PHP full-stack web framework. This vulnerability may allow attackers to spoof their IP address when the server is behind a reverse proxy. This issue has been patched, please upgrade to version 4.2.11 or later, and configure `Config\\App::$proxyIPs`. As a workaround, do not use `$request->getIPAddress()`.", "other": {"cve": {"id": "CVE-2022-23556", "sourceIdentifier": "security-advisories@github.com", "published": "2022-12-22T19:15:09.090", "lastModified": "2022-12-29T16:24:04.780", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "CodeIgniter is a PHP full-stack web framework. This vulnerability may allow attackers to spoof their IP address when the server is behind a reverse proxy. This issue has been patched, please upgrade to version 4.2.11 or later, and configure `Config\\App::$proxyIPs`. As a workaround, do not use `$request->getIPAddress()`."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-345"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:codeigniter:codeigniter:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.2.11", "matchCriteriaId": "3E8EEE4F-3F8A-4CC9-9501-87DD6F0FF2B2"}]}]}], "references": [{"url": "https://github.com/codeigniter4/CodeIgniter4/commit/5ca8c99b2db09a2a08a013836628028ddc984659", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-ghw3-5qvm-3mqc", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/5ca8c99b2db09a2a08a013836628028ddc984659"}}