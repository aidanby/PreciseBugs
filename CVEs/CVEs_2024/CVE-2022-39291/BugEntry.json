{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n/**\n * Logs Controller\n *\n * @property Log $Log\n * @property PaginatorComponent $Paginator\n */\nclass LogsController extends AppController {\n\n/**\n * Components\n *\n * @var array\n */\n\tpublic $components = array('Paginator', 'RequestHandler');\n\tpublic $paginate = array(\n\t\t'limit' => 100,\n\t\t'order' => array( 'Log.TimeKey' => 'asc' ),\n\t\t'paramType' => 'querystring'\n\t);\n\n/**\n * index method\n *\n * @return void\n */\n\tpublic function index() {\n\t\t$this->Log->recursive = -1;\n\t\t$this->Paginator->settings = $this->paginate;\n\n\t\t$logs = $this->Paginator->paginate('Log');\n\t\t$this->set(compact('logs'));\n\t}\n\n/**\n * view method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function view($id = null) {\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t$this->set('log', $this->Log->find('first', $options));\n\t}\n\n/**\n * add method\n *\n * @return void\n */\n\tpublic function add() {\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->Log->create();\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t}\n\t}\n\n/**\n * edit method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function edit($id = null) {\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\tif ($this->request->is(array('post', 'put'))) {\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t} else {\n\t\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t\t$this->request->data = $this->Log->find('first', $options);\n\t\t}\n\t}\n\n/**\n * delete method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function delete($id = null) {\n\t\t$this->Log->id = $id;\n\t\tif (!$this->Log->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$this->request->allowMethod('post', 'delete');\n\t\tif ($this->Log->delete()) {\n\t\t\treturn $this->flash(__('The log has been deleted.'), array('action' => 'index'));\n\t\t} else {\n\t\t\treturn $this->flash(__('The log could not be deleted. Please, try again.'), array('action' => 'index'));\n\t\t}\n\t}}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n/**\n * Logs Controller\n *\n * @property Log $Log\n * @property PaginatorComponent $Paginator\n */\nclass LogsController extends AppController {\n\n/**\n * Components\n *\n * @var array\n */\n\tpublic $components = array('Paginator', 'RequestHandler');\n\tpublic $paginate = array(\n\t\t'limit' => 100,\n\t\t'order' => array( 'Log.TimeKey' => 'asc' ),\n\t\t'paramType' => 'querystring'\n\t);\n\n  public function beforeFilter() {\n    parent::beforeFilter();\n    global $user;\n    # We already tested for auth in appController, so we just need to test for specific permission\n    $canView = (!$user) || ($user['System'] != 'None');\n    if (!$canView) {\n      throw new UnauthorizedException(__('Insufficient Privileges'));\n      return;\n    }\n  }\n\n/**\n * index method\n *\n * @return void\n */\n\tpublic function index() {\n\t\t$this->Log->recursive = -1;\n\t\t$this->Paginator->settings = $this->paginate;\n\n\t\t$logs = $this->Paginator->paginate('Log');\n\t\t$this->set(compact('logs'));\n\t}\n\n/**\n * view method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function view($id = null) {\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t$this->set('log', $this->Log->find('first', $options));\n\t}\n\n/**\n * add method\n *\n * @return void\n */\n\tpublic function add() {\n    global $user;\n    $canAdd = (!$user) || (($user['System'] == 'Edit') || ZM_LOG_INJECT);\n    if (!$canAdd) {\n      throw new UnauthorizedException(__('Insufficient privileges'));\n      return;\n    }\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->Log->create();\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t}\n\t}\n\n/**\n * edit method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function edit($id = null) {\n    global $user;\n    $canEdit = (!$user) || ($user['System'] == 'Edit');\n    if (!$canEdit) {\n      throw new UnauthorizedException(__('Insufficient privileges'));\n      return;\n    }\n\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\tif ($this->request->is(array('post', 'put'))) {\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t} else {\n\t\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t\t$this->request->data = $this->Log->find('first', $options);\n\t\t}\n\t}\n\n/**\n * delete method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function delete($id = null) {\n    $canDelete = (!$user) || ($user['System'] == 'Edit');\n    if (!$canDelete) {\n      throw new UnauthorizedException(__('Insufficient privileges'));\n      return;\n    }\n\t\t$this->Log->id = $id;\n\t\tif (!$this->Log->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$this->request->allowMethod('post', 'delete');\n\t\tif ($this->Log->delete()) {\n\t\t\treturn $this->flash(__('The log has been deleted.'), array('action' => 'index'));\n\t\t} else {\n\t\t\treturn $this->flash(__('The log could not be deleted. Please, try again.'), array('action' => 'index'));\n\t\t}\n\t}}\n"], "filenames": ["web/api/app/Controller/LogsController.php"], "buggy_code_start_loc": [21], "buggy_code_end_loc": [93], "fixing_code_start_loc": [22], "fixing_code_end_loc": [123], "type": "CWE-20", "message": "ZoneMinder is a free, open source Closed-circuit television software application. Affected versions of zoneminder are subject to a vulnerability which allows users with \"View\" system permissions to inject new data into the logs stored by Zoneminder. This was observed through an HTTP POST request containing log information to the \"/zm/index.php\" endpoint. Submission is not rate controlled and could affect database performance and/or consume all storage resources. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-39291", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-07T21:15:11.770", "lastModified": "2023-03-27T18:15:11.797", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ZoneMinder is a free, open source Closed-circuit television software application. Affected versions of zoneminder are subject to a vulnerability which allows users with \"View\" system permissions to inject new data into the logs stored by Zoneminder. This was observed through an HTTP POST request containing log information to the \"/zm/index.php\" endpoint. Submission is not rate controlled and could affect database performance and/or consume all storage resources. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "ZoneMinder es una aplicaci\u00f3n de software de circuito cerrado de televisi\u00f3n gratuita y de c\u00f3digo abierto. Las versiones afectadas de zoneminder est\u00e1n sujetas a una vulnerabilidad que permite a usuarios con permisos de sistema \"Visualizar\", inyectar nuevos datos en los registros almacenados por Zoneminder. Esto ha sido observado mediante una petici\u00f3n HTTP POST que contiene informaci\u00f3n de registro al endpoint \"/zm/index.php\". El env\u00edo no est\u00e1 controlado y podr\u00eda afectar al rendimiento de la base de datos y/o consumir todos los recursos de almacenamiento. Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.36.27", "matchCriteriaId": "10716E28-69E6-4AD6-9D8E-3DB416BD68B1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.37.0", "versionEndExcluding": "1.37.24", "matchCriteriaId": "45B12B91-B262-4E82-964C-D2CB074D4FDF"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/171498/Zoneminder-Log-Injection-XSS-Cross-Site-Request-Forgery.html", "source": "security-advisories@github.com"}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/34ffd92bf123070cab6c83ad4cfe6297dd0ed0b4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/73d9f2482cdcb238506388798d3cf92546f9e40c", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/cb3fc5907da21a5111ae54128a5d0b49ae755e9b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/de2866f9574a2bf2690276fad53c91d607825408", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-cfcx-v52x-jh74", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ZoneMinder/zoneminder/commit/34ffd92bf123070cab6c83ad4cfe6297dd0ed0b4"}}