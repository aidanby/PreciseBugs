{"buggy_code": ["Changelog\n=========\n\nUnreleased\n~~~~~~~~~~~~~~~~~~~~\n\n\n1.3.0 - `2023-02-13`\n~~~~~~~~~~~~~~~~~~~~\nThis release contains many dependency updates, and numerous added or improved features over the last year.\n\nSome of the notable changes in this release are:\n- Removal of AWS S3 destinations and the respetive resources via the UI\n- No fine-grained authz for role global_cert_issuer\n- De-activate endpoint (Entrust Plugin)\n- Remove unsafe paginate method and replace with sort_and_page\n- Move to github workflows for tests\n- Detect duplicate certs\n- Metrics for certificate expiry\n- Sync source: handling idle/invalidated connection\n- Sync endpoint: capture error and continue\n- Domain-level fine-grained authz \n- Handle and report authz warmup exception\n- Ensure secondary certificates are not removed when rotating AWS endpoints\n- Improved metric around expired endpoints\n- Change pkg_resources call in plugin loading to use resolve rather than load\n- Log when an expiring deployed certificate is detected \n- NS1 DNS ACME Plugin\n- Add a new endpoint that allows updating a certificate owner\n- Support rotating endpoints with non-unique names via CLI\n- Restrict multiple accounts on a certificate, by plugin\n- Moving to dependabot's auto versioning strategy\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `Neil Schelly <https://github.com/neilschelly>`_\n- `Mitch Cail <https://github.com/mitchcail>`_\n- `Bob Shannon <https://github.com/bobmshannon>`_\n- `alwaysjolley <https://github.com/alwaysjolley>`_\n\n\n1.2.0 - `2022-01-31`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release fixes a vulnerability where creating an authority automatically granted the selected owner role to the\nauthority creator, which allowed users to grant themselves to arbitrary roles. The owner role is no longer auto-assigned\nwhen creating an authority.\n\nAdditionally, all authorities now receive a unique role upon creation. Previously, authorities using the same issuer\nplugin would always share a role (for example, Entrust authorities always used the role \"entrust\"). Now, authorities\nare associated with a unique role named in the format `issuerPlugin_authority_name_admin`. The creator will not be\nautomatically added to this role.\n\nOther notable changes:\n- The Endpoints UI page now displays endpoint source and allows filtering by source\n\n\n1.1.0 - `2022-01-10`\n~~~~~~~~~~~~~~~~~~~~\n\nIntroducing new Plugins AuthorizationPlugin(Plugin) and DomainAuthorizationPlugin(AuthorizationPlugin).\nOne can implement a DomainAuthorizationPlugin to check if caller is authorized to issue a certificate\nfor a given Common Name and Subject Alternative Name (SAN) of type DNSName (PR `#3889 <https://github.com/Netflix/lemur/pull/3889>`_)\n\nRelated to the above change (PR `#3889 <https://github.com/Netflix/lemur/pull/3889>`_), a new column `application_name`\nis added to the `api_keys` table. Null values are allowed making sure this change is backward compatible.\n\nOther notable changes:\n- A task name is fixed from `identity_expiring_deployed_certificates` -> `identify_expiring_deployed_certificates`. The\nold task name with typo is marked as deprecated and will be removed in future release flagging it as a breaking change.\n(Thanks to `Bob Shannon <https://github.com/bobmshannon>`_)\n- ID filter on certificates UI requires a numeric value.\n\n\n1.0.0 - `2022-01-06`\n~~~~~~~~~~~~~~~~~~~~\n\nThis is our first major release due to a dependency on Python 3.8.\nLemur is now using flake8>=4.0 and pyflakes>=2.4, requiring Python 3.8 or higher.\nOur GitHub Actions Builds are currently on Python 3.8 and Python 3.9.\n\n\n0.11.0 - `2022-01-05`\n~~~~~~~~~~~~~~~~~~~~~\n\nThis release includes multiple improvements on many fronts.\nThe next release will be a major release, requiring Python 3.8 or higher.\n\nSome of the notable changes in this release are:\n\n- CloudFront Plugin: a new endpoint with rotation support\n- Improved Endpoint expiration flow; the Sync job now expires old endpoints\n- AWS ELB tag supports to opt-out of auto-rotate for load balancers\n- Membership plugin\n- Moving Travis Build to Node 16\n- OAuth2 & Ping Config improvement\n- Improved Certificate status check\n- Improved ACME plugin:\n    - reuse existing domain validation resulting in faster issuance\n    - IP certificate issuance support, accompanied by UI support\n    - emit remaining domain validation\n- Azure destination: Switch to PCKS12 upload\n- Improved logs, such as:\n    - Warning logs for admin role assignment and authority creation\n    - Audit logs in JSON format for better search\n    - Improved SES logging\n\nSpecial thanks to all who contributed to this release, notably:\n- `Bob Shannon <https://github.com/bobmshannon>`_\n- `sirferl <https://github.com/sirferl>`_\n- `Sam Havron <https://github.com/havron>`_\n- `Guillaume Dumont <https://github.com/dumontg>`_\n- `Joe McRobot <https://github.com/JoeMcRobot>`_\n\n\n0.10.0 - `2021-06-28`\n~~~~~~~~~~~~~~~~~~~~~\n\nThis release introduces a breaking change (PR `#3646 <https://github.com/Netflix/lemur/pull/3646>`_) to the following API endpoint: \n\n- `POST /certificates/1/update/notify <https://lemur.readthedocs.io/en/latest/developer/index.html#lemur.certificates.views.Certificates.post>`_\n\nThe endpoint is now:\n\n- `POST /certificates/1/update/switches <https://lemur.readthedocs.io/en/latest/developer/index.html#lemur.certificates.views.Certificates.post>`_\n\nThe new endpoint honors the existing `notify` request parameter, and additionally accepts a new `rotation` parameter. \nAs a result of this change, the certificate table view now includes rotation switches and filtering by rotation status.\n\n\nOther notable changes in this release:\n\n- ACME:\n    - New celery task to prevent duplicate certificates from being autorotated\n    - ACME DNS-01 Challenges are supported in synchronous mode\n    - DNS provider check fails gracefully if not found\n- Authentication:\n    - SSO auth now returns a newly created user during initial login\n    - CSRF protection is added to OAuth2.0\n- Notifications:\n    - New reissue failed notification\n    - New reissue with no endpoints notification\n    - New revocation notification\n- Plugins:\n    - Plugin option values are validated server-side\n    - Some plugin option validations updated to compile successfully server-side\n- Database:\n  - Source and Destination deletions remove certificate associations with new confirmation dialog\n- Dependency updates and conflict resolutions\n- Expanded audit logs\n\nAnd several smaller bugfixes and improvements.\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `havron <https://github.com/havron>`_\n- `tho <https://github.com/tho>`_\n- `mizzy <https://github.com/mizzy>`_\n\n\n0.9.0 - `2021-03-17`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release fixes three critical vulnerabilities where an authenticated user could retrieve/access\nunauthorized information. (Issue `#3463 <https://github.com/Netflix/lemur/issues/3463>`_)\n\n\n0.8.1 - `2021-03-12`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release includes improvements on many fronts, such as:\n\n- Notifications:\n    - Enhanced SNS flow\n    - Expiration Summary\n    - CA expiration email\n- EC algorithm as the default\n- Improved revocation flow\n- Localized AWS STS option\n- Improved Lemur doc building\n- ACME:\n    - reduced failed attempts to 3x trials\n    - support for selecting the chain (Let's Encrypt X1 transition)\n    - revocation\n    - http01 documentation\n- Entrust:\n    - Support for cross-signed intermediate CA\n- Revised disclosure process\n- Dependency updates and conflict resolutions\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `peschmae  <https://github.com/peschmae>`_\n- `atugushev  <https://github.com/atugushev>`_\n- `sirferl   <https://github.com/sirferl>`_\n\n\n\n0.8.0 - `2020-11-13`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release comes after more than two years and contains many interesting new features and improvements.\nIn addition to multiple new plugins, such as ACME-http01, ADCS, PowerDNS, UltraDNS, Entrust, SNS, many of Lemur's existing\nflows have improved.\n\nIn the future, we plan to do frequent releases.\n\n\nSummary of notable changes:\n\n- AWS S3 plugin: added delete, get methods, and support for uploading/deleting acme tokens\n- ACME plugin:\n    - revamp of the plugin\n    - support for http01 domain validation, via S3 and SFTP as destination for the acme token\n    - support for CNAME delegated domain validation\n    - store-acme-account-details\n- PowerDNS plugin\n- UltraDNS plugin\n- ADCS plugin\n- SNS plugin\n- Entrust plugin\n- Rotation:\n    - respecting keyType and extensions\n    - region-by-region rotation option\n    - default to auto-rotate when cert attached to endpoint\n    - default to 1y validity during rotation for multi-year browser-trusted certs\n- Certificate: search_by_name, and important performance improvements\n- UI\n    - reducing the EC curve options to the relevant ones\n    - edit option for notifications, destinations and sources\n    - showing 13 month validity as default\n    - option to hide certs expired since 3month\n    - faster Permalink (no search involved)\n    - commonName Auto Added as DNS in the UI\n    - improved search and cert lookup\n- celery tasks instead of crone, for better logging and monitoring\n- countless bugfixes\n    - group-lookup-fix-referral\n    - url_context_path\n    - duplicate notification\n    - digicert-time-bug-fix\n    - improved-csr-support\n    - fix-cryptography-intermediate-ca\n    - enhanced logging\n    - vault-k8s-auth\n    - cfssl-key-fix\n    - cert-sync-endpoint-find-by-hash\n    - nlb-naming-bug\n    - fix_vault_api_v2_append\n    - aid_openid_roles_provider_integration\n    - rewrite-java-keystore-use-pyjks\n    - vault_kv2\n\n\nTo see the full list of changes, you can run\n\n    $ git log --merges --first-parent master         --pretty=format:\"%h %<(10,trunc)%aN %C(white)%<(15)%ar%Creset %C(red bold)%<(15)%D%Creset %s\" | grep -v \"depend\"\n\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `peschmae  <https://github.com/peschmae>`_\n- `sirferl   <https://github.com/sirferl>`_\n- `lukasmrtvy  <https://github.com/lukasmrtvy>`_\n- `intgr  <https://github.com/intgr>`_\n- `kush-bavishi  <https://github.com/kush-bavishi>`_\n- `alwaysjolley  <https://github.com/alwaysjolley>`_\n- `jplana <https://github.com/jplana>`_\n- `explody <https://github.com/explody>`_\n- `titouanc <https://github.com/titouanc>`_\n- `jramosf <https://github.com/jramosf>`_\n\n\nUpgrading\n---------\n\n.. note:: This release will need a migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n\n0.7 - `2018-05-07`\n~~~~~~~~~~~~~~~~~~\n\nThis release adds LetsEncrypt support with DNS providers Dyn, Route53, and Cloudflare, and expands on the pending certificate functionality.\nThe linux_dst plugin will also be deprecated and removed.\n\nThe pending_dns_authorizations and dns_providers tables were created. New columns\nwere added to the certificates and pending_certificates tables, (For the DNS provider ID), and authorities (For options).\nPlease run a database migration when upgrading.\n\nThe Let's Encrypt flow will run asynchronously. When a certificate is requested through the acme-issuer, a pending certificate\nwill be created. A cron needs to be defined to run `lemur pending_certs fetch_all_acme`. This command will iterate through all of the pending\ncertificates, request a DNS challenge token from Let's Encrypt, and set the appropriate _acme-challenge TXT entry. It will\nthen iterate through and resolve the challenges before requesting a certificate for each pending certificate. If a certificate\nis successfully obtained, the pending_certificate will be moved to the certificates table with the appropriate properties.\n\nSpecial thanks to all who helped with this release, notably:\n\n- The folks at Cloudflare\n- dmitryzykov\n- jchuong\n- seils\n- titouanc\n\n\nUpgrading\n---------\n\n.. note:: This release will need a migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n0.6 - `2018-01-02`\n~~~~~~~~~~~~~~~~~~\n\nHappy Holidays! This is a big release with lots of bug fixes and features. Below are the highlights and are not exhaustive.\n\n\nFeatures:\n\n* Per-certificate rotation policies, requires a database migration. The default rotation policy for all certificates is 30 days. Every certificate will gain a policy regardless of if auto-rotation is used.\n* Adds per-user API Keys, allows users to issue multiple long-lived API tokens with the same permission as the user creating them.\n* Adds the ability to revoke certificates from the Lemur UI/API, this is currently only supported for the digicert CIS and cfssl plugins.\n* Allow destinations to support an export function. Useful for file system destinations e.g. S3 to specify the export plugin you wish to run before being sent to the destination.\n* Adds support for uploading certificates to Cloudfront.\n* Re-worked certificate metadata pane for improved readability.\n* Adds support for LDAP user authentication\n\nBugs:\n\n* Closed `#767 <https://github.com/Netflix/lemur/issues/767>`_ - Fixed issue with login redirect loop.\n* Closed `#792 <https://github.com/Netflix/lemur/issues/792>`_ - Fixed an issue with a unique constraint was violated when replacing certificates.\n* Closed `#752 <https://github.com/Netflix/lemur/issues/752>`_ - Fixed an internal server error when validating notification units.\n* Closed `#684 <https://github.com/Netflix/lemur/issues/684>`_ - Fixed migration failure when null values encountered.\n* Closes `#661 <https://github.com/Netflix/lemur/issues/661>`_ - Fixed an issue where default values were missing during clone operations.\n\n\nSpecial thanks to all who helped with this release, notably:\n\n- intgr\n- SecurityInsanity\n- johanneslange\n- RickB17\n- pr8kerl\n- bunjiboys\n\nSee the full list of issues closed in `0.6 <https://github.com/Netflix/lemur/milestone/5>`_.\n\nUpgrading\n---------\n\n.. note:: This release will need a migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n\n0.5 - `2016-04-08`\n~~~~~~~~~~~~~~~~~~\n\nThis release is most notable for dropping support for python2.7. All Lemur versions >0.4 will now support python3.5 only.\n\nBig thanks to neilschelly for quite a lot of improvements to the `lemur-cryptography` plugin.\n\nOther Highlights:\n\n* Closed `#501 <https://github.com/Netflix/lemur/issues/501>`_ - Endpoint resource as now kept in sync via an expiration mechanism. Such that non-existant endpoints gracefully fall out of Lemur. Certificates are never removed from Lemur.\n* Closed `#551 <https://github.com/Netflix/lemur/pull/551>`_ - Added the ability to create a 4096 bit key during certificate creation. Closed `#528 <https://github.com/Netflix/lemur/pull/528>`_ to ensure that issuer plugins supported the new 4096 bit keys.\n* Closed `#566 <https://github.com/Netflix/lemur/issues/566>`_ - Fixed an issue changing the notification status for  certificates without private keys.\n* Closed `#594 <https://github.com/Netflix/lemur/issues/594>`_ - Added `replaced` field indicating if a certificate has been superseded.\n* Closed `#602 <https://github.com/Netflix/lemur/issues/602>`_ - AWS plugin added support for ALBs for endpoint tracking.\n\n\nSpecial thanks to all who helped with this release, notably:\n\n- RcRonco\n- harmw\n- jeremyguarini\n\nSee the full list of issues closed in `0.5 <https://github.com/Netflix/lemur/milestone/4>`_.\n\nUpgrading\n---------\n\n.. note:: This release will need a slight migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n0.4 - `2016-11-17`\n~~~~~~~~~~~~~~~~~~\n\nThere have been quite a few issues closed in this release. Some notables:\n\n* Closed `#284 <https://github.com/Netflix/lemur/issues/284>`_ - Created new models for `Endpoints` created associated AWS ELB endpoint tracking code. This was the major stated goal of this milestone and should serve as the basis for future enhancements of Lemur's certificate 'deployment' capabilities.\n* Closed `#334 <https://github.com/Netflix/lemur/issues/334>`_ - Lemur not has the ability to restrict certificate expiration dates to weekdays.\n\nSeveral fixes/tweaks to Lemurs python3 support (thanks chadhendrie!)\n\nThis will most likely be the last release to support python2.7 moving Lemur to target python3 exclusively. Please comment\non issue #340 if this negatively affects your usage of Lemur.\n\nSee the full list of issues closed in `0.4 <https://github.com/Netflix/lemur/milestone/3>`_.\n\nUpgrading\n---------\n\n.. note:: This release will need a slight migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n0.3.0 - `2016-06-06`\n~~~~~~~~~~~~~~~~~~~~\n\nThis is quite a large upgrade, it is highly advised you backup your database before attempting to upgrade as this release\nrequires the migration of database structure as well as data.\n\n\nUpgrading\n---------\n\nPlease follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\nSource Plugin Owners\n--------------------\n\nThe dictionary returned from a source plugin has changed keys from `public_certificate` to `body` and `intermediate_certificate` to chain.\n\n\nIssuer Plugin Owners\n--------------------\n\nThis release may break your plugins, the keys in `issuer_options` have been changed from `camelCase` to `under_score`.\nThis change was made to break an undue reliance on downstream options maintains a more pythonic naming convention. Renaming\nthese keys should be fairly trivial, additionally pull requests have been submitted to affected plugins to help ease the transition.\n\n.. note:: This change only affects issuer plugins and does not affect any other types of plugins.\n\n\n* Closed `#63 <https://github.com/Netflix/lemur/issues/63>`_ - Validates all endpoints with Marshmallow schemas, this allows for\n    stricter input validation and better error messages when validation fails.\n* Closed `#146 <https://github.com/Netflix/lemur/issues/146>`_ - Moved authority type to first pane of authority creation wizard.\n* Closed `#147 <https://github.com/Netflix/lemur/issues/147>`_ - Added and refactored the relationship between authorities and their\n    root certificates. Displays the certificates (and chains) next to the authority in question.\n* Closed `#199 <https://github.com/Netflix/lemur/issues/199>`_ - Ensures that the dates submitted to Lemur during authority and\n    certificate creation are actually dates.\n* Closed `#230 <https://github.com/Netflix/lemur/issues/230>`_ - Migrated authority dropdown to an ui-select based dropdown, this\n    should be easier to determine what authorities are available and when an authority has actually been selected.\n* Closed `#254 <https://github.com/Netflix/lemur/issues/254>`_ - Forces certificate names to be generally unique. If a certificate name\n    (generated or otherwise) is found to be a duplicate we increment by appending a counter.\n* Closed `#275 <https://github.com/Netflix/lemur/issues/275>`_ - Switched to using Fernet generated passphrases for exported items.\n    These are more sounds that pseudo random passphrases generated before and have the nice property of being in base64.\n* Closed `#278 <https://github.com/Netflix/lemur/issues/278>`_ - Added ability to specify a custom name to certificate creation, previously\n    this was only available in the certificate import wizard.\n* Closed `#281 <https://github.com/Netflix/lemur/issues/281>`_ - Fixed an issue where notifications could not be removed from a certificate\n    via the UI.\n* Closed `#289 <https://github.com/Netflix/lemur/issues/289>`_ - Fixed and issue where intermediates were not being properly exported.\n* Closed `#315 <https://github.com/Netflix/lemur/issues/315>`_ - Made how roles are associated with certificates and authorities much more\n    explicit, including adding the ability to add roles directly to certificates and authorities on creation.\n\n\n\n0.2.2 - 2016-02-05\n~~~~~~~~~~~~~~~~~~\n\n* Closed `#234 <https://github.com/Netflix/lemur/issues/234>`_ - Allows export plugins to define whether they need\n    private key material (default is True)\n* Closed `#231 <https://github.com/Netflix/lemur/issues/231>`_ - Authorities were not respecting 'owning' roles and their\n    users\n* Closed `#228 <https://github.com/Netflix/lemur/issues/228>`_ - Fixed documentation with correct filter values\n* Closed `#226 <https://github.com/Netflix/lemur/issues/226>`_ - Fixes issue were `import_certificate` was requiring\n    replacement certificates to be specified\n* Closed `#224 <https://github.com/Netflix/lemur/issues/224>`_ - Fixed an issue where NPM might not be globally available (thanks AlexClineBB!)\n* Closed `#221 <https://github.com/Netflix/lemur/issues/234>`_ - Fixes several reported issues where older migration scripts were\n    missing tables, this change removes pre 0.2 migration scripts\n* Closed `#218 <https://github.com/Netflix/lemur/issues/234>`_ - Fixed an issue where export passphrases would not validate\n\n\n0.2.1 - 2015-12-14\n~~~~~~~~~~~~~~~~~~\n\n* Fixed bug with search not refreshing values\n* Cleaned up documentation, including working supervisor example (thanks rpicard!)\n* Closed #165 - Fixed an issue with email templates\n* Closed #188 - Added ability to submit third party CSR\n* Closed #176 - Java-export should allow user to specify truststore/keystore\n* Closed #176 - Extended support for exporting certificate in P12 format\n\n\n0.2.0 - 2015-12-02\n~~~~~~~~~~~~~~~~~~\n\n* Closed #120 - Error messages not displaying long enough\n* Closed #121 - Certificate create form should not be valid until a Certificate Authority object is available\n* Closed #122 - Certificate API should allow for the specification of preceding certificates\n    You can now target a certificate(s) for replacement. When specified the replaced certificate will be marked as\n    'inactive'. This means that there will be no notifications for that certificate.\n* Closed #139 - SubCA autogenerated descriptions for their certs are incorrect\n* Closed #140 - Permalink does not change with filtering\n* Closed #144 - Should be able to search certificates by domains covered, included wildcards\n* Closed #165 - Cleaned up expiration notification template\n* Closed #160 - Cleaned up quickstart documentation (thanks forkd!)\n* Closed #144 - Now able to search by all domains in a given certificate, not just by common name\n\n\n0.1.5 - 2015-10-26\n~~~~~~~~~~~~~~~~~~\n\n* **SECURITY ISSUE**: Switched from use an AES static key to Fernet encryption.\n  Affects all versions prior to 0.1.5. If upgrading this will require a data migration.\n  see: `Upgrading Lemur <https://lemur.readthedocs.io/administration#UpgradingLemur>`_\n", "import os.path\nimport random\nimport string\nfrom celery.schedules import crontab\n\nimport base64\n\n_basedir = os.path.abspath(os.path.dirname(__file__))\n\n# See the Lemur docs (https://lemur.readthedocs.org) for more information on configuration\n\nLOG_LEVEL = str(os.environ.get('LOG_LEVEL', 'DEBUG'))\nLOG_FILE = str(os.environ.get('LOG_FILE', '/home/lemur/.lemur/lemur.log'))\nLOG_JSON = True\n\nCORS = os.environ.get(\"CORS\") == \"True\"\ndebug = os.environ.get(\"DEBUG\") == \"True\"\n\n\ndef get_random_secret(length):\n    secret_key = ''.join(random.choice(string.ascii_uppercase) for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(random.choice(\"~!@#$%^&*()_+\") for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(random.choice(string.ascii_lowercase) for x in range(round(length / 4)))\n    return secret_key + ''.join(random.choice(string.digits) for x in range(round(length / 4)))\n\n\n# This is the secret key used by Flask session management\nSECRET_KEY = repr(os.environ.get('SECRET_KEY', get_random_secret(32).encode('utf8')))\n\n# You should consider storing these separately from your config\nLEMUR_TOKEN_SECRET = repr(os.environ.get('LEMUR_TOKEN_SECRET',\n                                         base64.b64encode(get_random_secret(32).encode('utf8'))))\n# This must match the key for whichever DB the container is using - this could be a dump of dev or test, or a unique key\nLEMUR_ENCRYPTION_KEYS = repr(os.environ.get('LEMUR_ENCRYPTION_KEYS',\n                                            base64.b64encode(get_random_secret(32).encode('utf8')).decode('utf8')))\n\n# this is the secret used to generate oauth state tokens\nOAUTH_STATE_TOKEN_SECRET = repr(os.environ.get('OAUTH_STATE_TOKEN_SECRET', base64.b64encode(get_random_secret(32).encode('utf8'))))\n\nREDIS_HOST = 'redis'\nREDIS_PORT = 6379\nREDIS_DB = 0\nCELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}'\nCELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'\nCELERY_IMPORTS = ('lemur.common.celery')\nCELERYBEAT_SCHEDULE = {\n    # All tasks are disabled by default. Enable any tasks you wish to run.\n    # 'fetch_all_pending_acme_certs': {\n    #     'task': 'lemur.common.celery.fetch_all_pending_acme_certs',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(minute=\"*\"),\n    # },\n    # 'remove_old_acme_certs': {\n    #     'task': 'lemur.common.celery.remove_old_acme_certs',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=8, minute=0, day_of_week=5),\n    # },\n    # 'clean_all_sources': {\n    #     'task': 'lemur.common.celery.clean_all_sources',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=5, minute=0, day_of_week=5),\n    # },\n    # 'sync_all_sources': {\n    #     'task': 'lemur.common.celery.sync_all_sources',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=\"*/2\", minute=0),\n    # },\n    # 'report_celery_last_success_metrics': {\n    #     'task': 'lemur.common.celery.report_celery_last_success_metrics',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(minute=\"*\"),\n    # },\n    # 'certificate_reissue': {\n    #     'task': 'lemur.common.celery.certificate_reissue',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=9, minute=0),\n    # },\n    # 'certificate_rotate': {\n    #     'task': 'lemur.common.celery.certificate_rotate',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # },\n    # 'get_all_zones': {\n    #     'task': 'lemur.common.celery.get_all_zones',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(minute=\"*/30\"),\n    # },\n    # 'check_revoked': {\n    #     'task': 'lemur.common.celery.check_revoked',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # }\n    # 'enable_autorotate_for_certs_attached_to_destination': {\n    #     'task': 'lemur.common.celery.enable_autorotate_for_certs_attached_to_destination',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # }\n    # 'enable_autorotate_for_certs_attached_to_endpoint': {\n    #     'task': 'lemur.common.celery.enable_autorotate_for_certs_attached_to_endpoint',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # }\n    # 'notify_expirations': {\n    #     'task': 'lemur.common.celery.notify_expirations',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    #  },\n    # 'notify_authority_expirations': {\n    #     'task': 'lemur.common.celery.notify_authority_expirations',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # },\n    # 'send_security_expiration_summary': {\n    #     'task': 'lemur.common.celery.send_security_expiration_summary',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0, day_of_week='mon-fri'),\n    # }\n}\nCELERY_TIMEZONE = 'UTC'\n\nSQLALCHEMY_ENABLE_FLASK_REPLICATED = False\nSQLALCHEMY_DATABASE_URI = os.environ.get('SQLALCHEMY_DATABASE_URI', 'postgresql://lemur:lemur@localhost:5432/lemur')\n\nSQLALCHEMY_TRACK_MODIFICATIONS = False\nSQLALCHEMY_ECHO = True\n\nSQLALCHEMY_ENGINE_OPTIONS = {\n    'pool_recycle': 499,\n    'pool_timeout': 20,\n}\n\nLEMUR_EMAIL = 'lemur@example.com'\nLEMUR_SECURITY_TEAM_EMAIL = ['security@example.com']\nLEMUR_SECURITY_TEAM_EMAIL_INTERVALS = [15, 2]\nLEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS = [30, 15, 2]\nLEMUR_EMAIL_SENDER = 'smtp'\n\n# mail configuration\n# MAIL_SERVER = 'mail.example.com'\n\nPUBLIC_CA_MAX_VALIDITY_DAYS = 397\nDEFAULT_VALIDITY_DAYS = 365\n\nLEMUR_OWNER_EMAIL_IN_SUBJECT = False\n\nLEMUR_DEFAULT_COUNTRY = str(os.environ.get('LEMUR_DEFAULT_COUNTRY', 'US'))\nLEMUR_DEFAULT_STATE = str(os.environ.get('LEMUR_DEFAULT_STATE', 'California'))\nLEMUR_DEFAULT_LOCATION = str(os.environ.get('LEMUR_DEFAULT_LOCATION', 'Los Gatos'))\nLEMUR_DEFAULT_ORGANIZATION = str(os.environ.get('LEMUR_DEFAULT_ORGANIZATION', 'Example, Inc.'))\nLEMUR_DEFAULT_ORGANIZATIONAL_UNIT = str(os.environ.get('LEMUR_DEFAULT_ORGANIZATIONAL_UNIT', ''))\n\nLEMUR_DEFAULT_AUTHORITY = str(os.environ.get('LEMUR_DEFAULT_AUTHORITY', 'ExampleCa'))\n\nLEMUR_DEFAULT_ROLE = 'operator'\n\nACTIVE_PROVIDERS = []\nMETRIC_PROVIDERS = []\n\n# Authority Settings - These will change depending on which authorities you are\n# using\ncurrent_path = os.path.dirname(os.path.realpath(__file__))\n\n# DNS Settings\n\n# exclude logging missing SAN, since we can have certs from private CAs with only cn, prod parity\nLOG_SSL_SUBJ_ALT_NAME_ERRORS = False\n\nACME_DNS_PROVIDER_TYPES = {\"items\": [\n    {\n        'name': 'route53',\n        'requirements': [\n            {\n                'name': 'account_id',\n                'type': 'int',\n                'required': True,\n                'helpMessage': 'AWS Account number'\n            },\n        ]\n    },\n    {\n        'name': 'cloudflare',\n        'requirements': [\n            {\n                'name': 'email',\n                'type': 'str',\n                'required': True,\n                'helpMessage': 'Cloudflare Email'\n            },\n            {\n                'name': 'key',\n                'type': 'str',\n                'required': True,\n                'helpMessage': 'Cloudflare Key'\n            },\n        ]\n    },\n    {\n        'name': 'dyn',\n    },\n    {\n        'name': 'ultradns',\n    },\n]}\n\n# Authority plugins which support revocation\nSUPPORTED_REVOCATION_AUTHORITY_PLUGINS = ['acme-issuer']\n", "Configuration\n=============\n\n.. warning::\n    There are many secrets that Lemur uses that must be protected. All of these options are set via the Lemur configuration\n    file. It is highly advised that you do not store your secrets in this file! Lemur provides functions\n    that allow you to encrypt files at rest and decrypt them when it's time for deployment. See :ref:`Credential Management <CredentialManagement>`\n    for more information.\n\n.. note::\n    All configuration values are python strings unless otherwise noted.\n\n\nBasic Configuration\n-------------------\n\n.. data:: LOG_LEVEL\n    :noindex:\n\n    ::\n\n        LOG_LEVEL = \"DEBUG\"\n\n.. data:: LOG_FILE\n    :noindex:\n\n    ::\n\n        LOG_FILE = \"/logs/lemur/lemur-test.log\"\n\n.. data:: LOG_UPGRADE_FILE\n    :noindex:\n\n    ::\n\n        LOG_UPGRADE_FILE = \"/logs/lemur/db_upgrade.log\"\n\n.. data:: DEBUG\n    :noindex:\n\n    Sets the flask debug flag to true (if supported by the webserver)\n\n    ::\n\n        DEBUG = False\n\n    .. warning::\n        This should never be used in a production environment as it exposes Lemur to\n        remote code execution through the debug console.\n\n\n.. data:: CORS\n    :noindex:\n\n    Allows for cross domain requests, this is most commonly used for development but could\n    be use in production if you decided to host the webUI on a different domain than the server.\n\n    Use this cautiously, if you're not sure. Set it to `False`\n\n    ::\n\n        CORS = False\n\n\n.. data:: SQLALCHEMY_DATABASE_URI\n    :noindex:\n\n        If you have ever used sqlalchemy before this is the standard connection string used. Lemur uses a postgres database and the connection string would look something like:\n\n    ::\n\n        SQLALCHEMY_DATABASE_URI = 'postgresql://<user>:<password>@<hostname>:5432/lemur'\n\n\n.. data:: SQLALCHEMY_ENGINE_OPTIONS\n    :noindex:\n\n        This is an optional config that handles all engine_options to SQLAlchemy. \n        Please refer to the `flask-sqlalchemy website <https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/>`_ for \n        more details about the individual configs.\n\n        The default connection pool size is 5 for sqlalchemy managed connections.\n        Depending on the number of Lemur instances, please specify the per instance connection `pool_size`.\n        Below is an example to set connection `pool_size` to 10.\n\n        `max_overflow` allows to create connections in addition to specified number of connections in pool size.\n        By default, sqlalchemy allows 10 connections to create in addition to the pool size.\n        If `pool_size` and `max_overflow` are not specified then each Lemur instance may create maximum of 15 connections.\n\n        `pool_recycle` defines number of seconds after which a connection is automatically recycled.\n\n    ::\n\n        SQLALCHEMY_ENGINE_OPTIONS = {\n            'pool_size': 10,\n            'pool_recycle': 600,\n            'pool_timeout': 20,\n            'max_overflow': 10,\n        }\n\n\n    .. warning::\n        Specifying `pool_size` is an optional setting but important to review and set for optimal database connection usage and for overall database performance.\n        Note that `SQLALCHEMY_POOL_SIZE`, `SQLALCHEMY_MAX_OVERFLOW`, `SQLALCHEMY_POOL_TIMEOUT` are deprecated since sqlalchemy v2.4.\n\n    .. note::\n        Specifying `max_overflow` to 0 will enforce limit to not create connections above specified pool size.\n\n\n\n.. data:: LEMUR_ALLOW_WEEKEND_EXPIRATION\n    :noindex:\n\n        Specifies whether to allow certificates created by Lemur to expire on weekends. Default is True.\n\n.. data:: LEMUR_ALLOWED_DOMAINS\n    :noindex:\n\n        List of regular expressions for domain restrictions; if the list is not empty, normal users can only issue\n        certificates for domain names matching at least one pattern on this list. Administrators are exempt from this\n        restriction.\n\n        Cerificate common name is matched against these rules *if* it does not contain a space. SubjectAltName DNS names\n        are always matched against these rules.\n\n        Take care to write patterns in such way to not allow the `*` wildcard character inadvertently. To match a `.`\n        character, it must be escaped (as `\\.`).\n\n.. data:: LEMUR_OWNER_EMAIL_IN_SUBJECT\n    :noindex:\n\n        By default, Lemur will add the certificate owner's email address to certificate subject (for CAs that allow it).\n        Set this to `False` to disable this.\n\n.. data:: LEMUR_TOKEN_SECRET\n    :noindex:\n\n        The TOKEN_SECRET is the secret used to create JWT tokens that are given out to users. This should be securely generated and kept private.\n\n    ::\n\n        LEMUR_TOKEN_SECRET = 'supersecret'\n\n    An example of how you might generate a random string:\n\n        >>> import random\n        >>> secret_key = ''.join(random.choice(string.ascii_uppercase) for x in range(6))\n        >>> secret_key = secret_key + ''.join(random.choice(\"~!@#$%^&*()_+\") for x in range(6))\n        >>> secret_key = secret_key + ''.join(random.choice(string.ascii_lowercase) for x in range(6))\n        >>> secret_key = secret_key + ''.join(random.choice(string.digits) for x in range(6))\n\n\n.. data:: LEMUR_ENCRYPTION_KEYS\n    :noindex:\n\n        The LEMUR_ENCRYPTION_KEYS is used to encrypt data at rest within Lemur's database. Without a key Lemur will refuse\n        to start. Multiple keys can be provided to facilitate key rotation. The first key in the list is used for\n        encryption and all keys are tried for decryption until one works. Each key must be 32 URL safe base-64 encoded bytes.\n\n        Only fields of type ``Vault`` will be encrypted. At present, only the following fields are encrypted:\n\n        * ``certificates.private_key``\n        * ``pending_certificates.private_key``\n        * ``dns_providers.credentials``\n        * ``roles.password``\n\n        For implementation details, see ``Vault`` in ``utils.py``.\n\n        Running lemur create_config will securely generate a key for your configuration file.\n        If you would like to generate your own, we recommend the following method:\n\n            >>> import os\n            >>> import base64\n            >>> base64.urlsafe_b64encode(os.urandom(32))\n\n    ::\n\n        LEMUR_ENCRYPTION_KEYS = ['1YeftooSbxCiX2zo8m1lXtpvQjy27smZcUUaGmffhMY=', 'LAfQt6yrkLqOK5lwpvQcT4jf2zdeTQJV1uYeh9coT5s=']\n\n\n.. data:: PUBLIC_CA_MAX_VALIDITY_DAYS\n    :noindex:\n\n        Use this config to override the limit of 397 days of validity for certificates issued by CA/Browser compliant authorities.\n        The authorities with cab_compliant option set to true will use this config. The example below overrides the default validity\n        of 397 days and sets it to 365 days.\n\n    ::\n\n        PUBLIC_CA_MAX_VALIDITY_DAYS = 365\n\n\n.. data:: DEFAULT_VALIDITY_DAYS\n    :noindex:\n\n        Use this config to override the default validity of 365 days for certificates offered through Lemur UI. Any CA which\n        is not CA/Browser Forum compliant will be using this value as default validity to be displayed on UI. Please\n        note that this config is used for cert issuance only through Lemur UI. The example below overrides the default validity\n        of 365 days and sets it to 1095 days (3 years).\n\n    ::\n\n        DEFAULT_VALIDITY_DAYS = 1095\n\n\n.. data:: DEBUG_DUMP\n    :noindex:\n\n        Dump all imported or generated CSR and certificate details to stdout using OpenSSL. (default: `False`)\n\n.. data:: ALLOW_CERT_DELETION\n    :noindex:\n\n        When set to True, certificates can be marked as deleted via the API and deleted certificates will not be displayed\n        in the UI. When set to False (the default), the certificate delete API will always return \"405 method not allowed\"\n        and deleted certificates will always be visible in the UI. (default: `False`)\n\n.. data:: LEMUR_AWS_REGION\n    :noindex:\n\n        This is an optional config applicable for settings where Lemur is deployed in AWS.\n        When specified, this will override the default regional AWS endpoints that are used\n        for accessing STS and services such as IAM for example. You must set this if running\n        in an alternative AWS partition such as GovCloud, for example.\n\n.. data:: LEMUR_AWS_PARTITION\n   :noindex:\n\n       Specifies the AWS partition that Lemur should use. Valid values are 'aws', 'aws-us-gov', and 'aws-cn'. Defaults to 'aws'.\n       If Lemur is deployed in and managing endpoints AWS GovCloud, for example, you must set this to `aws-us-gov`.\n\n.. data:: SENTRY_DSN\n    :noindex:\n\n        To initialize the Sentry integration to capture errors and exceptions, the `SENTRY_DSN` is required to be set to\n        the respective URL. `LEMUR_ENV` is also a related variable to define the environment for sentry events, e.g.,\n        'test' or 'prod'.\n\n        Note that previously Lemur relied on Raven[flask] before migrating to `sentry_sdk`. In this case, you might be\n        using the legacy `SENTRY_CONFIG`, which Lemur attempts to respect, in case `SENTRY_DSN` is missing,\n        with environment set to empty.\n\n        Example for using Senty to capture exceptions:\n\n            >>>  from sentry_sdk import capture_exception\n            >>>  ..\n            >>>  capture_exception()\n            >>>  # supplying extra information\n            >>>  capture_exception(extra={\"certificate_name\": str(certificate.name)})\n\n\nCertificate Default Options\n---------------------------\n\nLemur allows you to fine tune your certificates to your organization. The following defaults are presented in the UI\nand are used when Lemur creates the CSR for your certificates.\n\n\n.. data:: LEMUR_DEFAULT_COUNTRY\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_COUNTRY = \"US\"\n\n\n.. data:: LEMUR_DEFAULT_STATE\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_STATE = \"California\"\n\n\n.. data:: LEMUR_DEFAULT_LOCATION\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_LOCATION = \"Los Gatos\"\n\n\n.. data:: LEMUR_DEFAULT_ORGANIZATION\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_ORGANIZATION = \"Netflix\"\n\n\n.. data:: LEMUR_DEFAULT_ORGANIZATIONAL_UNIT\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_ORGANIZATIONAL_UNIT = \"\"\n\n\n.. data:: LEMUR_DEFAULT_ISSUER_PLUGIN\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_ISSUER_PLUGIN = \"verisign-issuer\"\n\n\n.. data:: LEMUR_DEFAULT_AUTHORITY\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_AUTHORITY = \"verisign\"\n\n\n.. _NotificationOptions:\n\nNotification Options\n--------------------\n\nLemur supports a small variety of notification types through a set of notification plugins.\nBy default, Lemur configures a standard set of email notifications for all certificates.\n\n**Plugin-capable notifications**\n\nThese notifications can be configured to use all available notification plugins.\n\nSupported types:\n\n* Certificate expiration (Celery: `notify_expirations`, cron: `notify expirations`)\n\n**Email-only notifications**\n\nThese notifications can only be sent via email and cannot use other notification plugins.\n\nSupported types:\n\n* CA certificate expiration (Celery: `notify_authority_expirations`, cron: `notify authority_expirations`)\n* Pending ACME certificate failure\n* Certificate rotation\n* Certificate reissued with no endpoints\n* Certificate reissue failed\n* Certificate revocation\n* Security certificate expiration summary (Celery: `send_security_expiration_summary`, cron: `notify security_expiration_summary`)\n* Certificate expiration where certificates are still detected as deployed at any associated domain (Celery: `notify_expiring_deployed_certificates`, cron: `notify expiring_deployed_certificates`)\n\n**Default notifications**\n\nWhen a certificate is created, the following email notifications are created for it if they do not exist.\nIf these notifications already exist, they will be associated with the new certificate.\n\n* ``DEFAULT_<OWNER>_X_DAY``, where X is the set of values specified in ``LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS`` and defaults to 30, 15, and 2 if not specified. The owner's username will replace ``<OWNER>``.\n* ``DEFAULT_SECURITY_X_DAY``, where X is the set of values specified in ``LEMUR_SECURITY_TEAM_EMAIL_INTERVALS`` and defaults to ``LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS`` if not specified (which also defaults to 30, 15, and 2 if not specified).\n\nThese notifications can be disabled if desired. They can also be unassociated with a specific certificate.\n\n**Disabling notifications**\n\nNotifications can be disabled either for an individual certificate (which disables all notifications for that certificate)\nor for an individual notification object (which disables that notification for all associated certificates).\nAt present, disabling a notification object will only disable certificate expiration notifications, and not other types,\nsince other notification types don't use notification objects.\n\n**Certificate expiration**\n\nCertificate expiration notifications are sent when the scheduled task to send certificate expiration notifications runs\n(see :ref:`PeriodicTasks`). Specific patterns of certificate names may be excluded using ``--exclude`` (when using\ncron; you may specify this multiple times for multiple patterns) or via the config option ``EXCLUDE_CN_FROM_NOTIFICATION``\n(when using celery; this is a list configuration option, meaning you specify multiple values, such as\n``['exclude', 'also exclude']``). The specified exclude pattern will match if found anywhere in the certificate name.\n\nWhen the periodic task runs, Lemur checks for certificates meeting the following conditions:\n\n* Certificate has notifications enabled\n* Certificate is not expired\n* Certificate is not revoked\n* Certificate name does not match the `exclude` parameter\n* Certificate has at least one associated notification object\n* That notification is active\n* That notification's configured interval and unit match the certificate's remaining lifespan\n\nAll eligible certificates are then grouped by owner and applicable notification. For each notification and certificate group,\nLemur will send the expiration notification using whichever plugin was configured for that notification object.\nIn addition, Lemur will send an email to the certificate owner and security team (as specified by the\n``LEMUR_SECURITY_TEAM_EMAIL`` configuration parameter). The security team will be omitted if\n``LEMUR_DISABLE_SECURITY_TEAM_EXPIRATION_EMAILS`` is enabled.\n\n**CA certificate expiration**\n\nCertificate authority certificate expiration notifications are sent when the scheduled task to send authority certificate\nexpiration notifications runs (see :ref:`PeriodicTasks`). Notifications are sent via the intervals configured in the\nconfiguration parameter ``LEMUR_AUTHORITY_CERT_EXPIRATION_EMAIL_INTERVALS``, with a default of 365 and 180 days.\n\nWhen the periodic task runs, Lemur checks for certificates meeting the following conditions:\n\n* Certificate has notifications enabled\n* Certificate is not expired\n* Certificate is not revoked\n* Certificate is associated with a CA\n* Certificate's remaining lifespan matches one of the configured intervals\n\nAll eligible certificates are then grouped by owner and expiration interval. For each interval and certificate group,\nLemur will send the CA certificate expiration notification via email to the certificate owner and security team\n(as specified by the ``LEMUR_SECURITY_TEAM_EMAIL`` configuration parameter).\n\n**Pending ACME certificate failure**\n\nWhenever a pending ACME certificate fails to be issued, Lemur will send a notification via email to the certificate owner\nand security team (as specified by the ``LEMUR_SECURITY_TEAM_EMAIL`` configuration parameter). This email is not sent if\nthe pending certificate had notifications disabled.\n\nLemur will attempt 3x times to resolve a pending certificate.\nThis can at times result into 3 duplicate certificates, if all certificate attempts get resolved. There is a way to\ndeduplicate these certificates periodically using a celery task ``disable_rotation_of_duplicate_certificates``.\n\nThis needs 2 configurations\n\n.. data:: AUTHORITY_TO_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES\n    :noindex:\n\n        List names of the authorities for which `disable_rotation_of_duplicate_certificates` should run. The task will\n        consider certificates issued by authorities configured here.\n\n    ::\n\n        AUTHORITY_TO_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES = [\"LetsEncrypt\"]\n\n\n.. data:: DAYS_SINCE_ISSUANCE_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES\n    :noindex:\n\n        Use this config (optional) to configure the number of days. The task `disable_rotation_of_duplicate_certificates`\n        will then consider valid certificates issued only in last those many number of days for deduplication. If not configured,\n        the task considers all the valid certificates. Ideally set this config to a value which is same as the number of\n        days between the two runs of `disable_rotation_of_duplicate_certificates`\n\n    ::\n\n        DAYS_SINCE_ISSUANCE_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES = 7\n\n\n**Certificate re-issuance**\n\nWhen a cert is reissued (i.e. a new certificate is minted to replace it), *and* the re-issuance either fails or\nsucceeds but the certificate has no associated endpoints (meaning the subsequent rotation step will not occur),\nLemur will send a notification via email to the certificate owner. This notification is disabled by default;\nto enable it, you must set the option ``--notify`` (when using cron) or the configuration parameter\n``ENABLE_REISSUE_NOTIFICATION`` (when using celery).\n\n**Certificate rotation**\n\nWhenever a cert is rotated, Lemur will send a notification via email to the certificate owner. This notification is\ndisabled by default; to enable it, you must set the option ``--notify`` (when using cron) or the configuration parameter\n``ENABLE_ROTATION_NOTIFICATION`` (when using celery).\n\n**Certificate revocation**\n\nWhenever a cert is revoked, Lemur will send a notification via email to the certificate owner. This notification will\nonly be sent if the certificate's \"notify\" option is enabled.\n\n**Security certificate expiration summary**\n\nIf you enable the Celery or cron task to send this notification type, Lemur will send a summary of all\ncertificates with upcoming expiration date that occurs within the number of days specified by the\n``LEMUR_EXPIRATION_SUMMARY_EMAIL_THRESHOLD_DAYS`` configuration parameter (with a fallback of 14 days).\nNote that certificates will be included in this summary even if they do not have any associated notifications.\n\nThis notification type also supports the same ``--exclude`` and ``EXCLUDE_CN_FROM_NOTIFICATION`` options as expiration emails.\n\nNOTE: At present, this summary email essentially duplicates the certificate expiration notifications, since all\ncertificate expiration notifications are also sent to the security team. This issue will be fixed in the future.\n\n**Notification configuration**\n\nThe following configuration options are supported:\n\n.. data:: EXCLUDE_CN_FROM_NOTIFICATION\n    :noindex:\n\n    Specifies CNs to exclude from notifications. This includes both single notifications as well as the notification summary. The specified exclude pattern will match if found anywhere in the certificate name.\n\n    .. note::\n        This is only used for celery. The equivalent for cron is '-e' or '--exclude'.\n\n       ::\n\n          EXCLUDE_CN_FROM_NOTIFICATION = ['exclude', 'also exclude']\n\n\n.. data:: DISABLE_NOTIFICATION_PLUGINS\n    :noindex:\n\n    Specifies a set of notification plugins to disable. Notifications will not be sent using these plugins. Currently only applies to expiration notifications, since they are the only type that utilize plugins.\n    This option may be particularly useful in a test environment, where you might wish to enable the notification job without actually sending notifications of a certain type (or all types).\n\n    .. note::\n        This is only used for celery. The equivalent for cron is '-d' or '--disabled-notification-plugins'.\n\n       ::\n\n          DISABLE_NOTIFICATION_PLUGINS = ['email-notification']\n\n\n**Email notifications**\n\nTemplates for emails are located under `lemur/plugins/lemur_email/templates` and can be modified for your needs.\n\nThe following configuration options are supported:\n\n.. data:: LEMUR_EMAIL_SENDER\n    :noindex:\n\n    Specifies which service will be delivering notification emails. Valid values are `SMTP` or `SES`\n\n    .. note::\n        If using SMTP as your provider you will need to define additional configuration options as specified by Flask-Mail.\n        See: `Flask-Mail <https://pythonhosted.org/Flask-Mail>`_\n\n        If you are using SES the email specified by the `LEMUR_EMAIL` configuration will need to be verified by AWS before\n        you can send any mail. See: `Verifying Email Address in Amazon SES <http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html>`_\n\n\n.. data:: LEMUR_SES_SOURCE_ARN\n    :noindex:\n\n    Specifies an ARN to use as the SourceArn when sending emails via SES.\n\n    .. note::\n        This parameter is only required if you're using a sending authorization with SES.\n        See: `Using sending authorization with Amazon SES <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html>`_\n\n\n.. data:: LEMUR_SES_REGION\n    :noindex:\n\n    Specifies a region for sending emails via SES.\n\n    .. note::\n        This parameter defaults to us-east-1 and is only required if you wish to use a different region.\n\n\n.. data:: LEMUR_EMAIL\n    :noindex:\n\n        Lemur sender's email\n\n        ::\n\n            LEMUR_EMAIL = 'lemur@example.com'\n\n\n.. data:: LEMUR_SECURITY_TEAM_EMAIL\n    :noindex:\n\n        This is an email or list of emails that should be notified when a certificate is expiring. It is also the contact email address for any discovered certificate.\n\n        ::\n\n            LEMUR_SECURITY_TEAM_EMAIL = ['security@example.com']\n\n\n.. data:: LEMUR_DISABLE_SECURITY_TEAM_EXPIRATION_EMAILS\n    :noindex:\n\n        This specifies whether or not LEMUR_SECURITY_TEAM_EMAIL will be included on all expiration emails. IMPORTANT: You will also need to disable the DEFAULT_SECURITY_X_DAY notifications to truly disable sending expiration emails to the security team. This double configuration is required for backwards compatibility.\n\n        ::\n\n            LEMUR_DISABLE_SECURITY_TEAM_EXPIRATION_EMAILS = True\n\n.. data:: LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS\n    :noindex:\n\n        Lemur notification intervals. If unspecified, the value [30, 15, 2] is used.\n\n        ::\n\n            LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS = [30, 15, 2]\n\n.. data:: LEMUR_SECURITY_TEAM_EMAIL_INTERVALS\n    :noindex:\n\n       Alternate notification interval set for security team notifications. Use this if you would like the default security team notification interval for new certificates to differ from the global default as specified in LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS. If unspecified, the value of LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS is used. Security team default notifications for new certificates can effectively be disabled by setting this value to an empty array.\n\n       ::\n\n          LEMUR_SECURITY_TEAM_EMAIL_INTERVALS = [15, 2]\n\n.. data:: LEMUR_AUTHORITY_CERT_EXPIRATION_EMAIL_INTERVALS\n    :noindex:\n\n       Notification interval set for CA certificate expiration notifications. If unspecified, the value [365, 180] is used (roughly one year and 6 months).\n\n       ::\n\n          LEMUR_AUTHORITY_CERT_EXPIRATION_EMAIL_INTERVALS = [365, 180]\n\n.. data:: LEMUR_PORTS_FOR_DEPLOYED_CERTIFICATE_CHECK\n    :noindex:\n\n       Specifies the set of ports to use when checking if a certificate is still deployed at a given domain. This is utilized for the alert that is sent when an expiring certificate is detected to still be deployed.\n\n       ::\n\n          LEMUR_PORTS_FOR_DEPLOYED_CERTIFICATE_CHECK = [443]\n\n.. data:: LEMUR_DEPLOYED_CERTIFICATE_CHECK_COMMIT_MODE\n    :noindex:\n\n       Specifies whether or not to commit changes when running the deployed certificate check. If False, the DB will not be updated; network calls will still be made and logs/metrics will be emitted.\n\n       ::\n\n          LEMUR_DEPLOYED_CERTIFICATE_CHECK_COMMIT_MODE = True\n\n.. data:: LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_DOMAINS\n    :noindex:\n\n       Specifies a set of domains to exclude from the deployed certificate checks. Anything specified here is treated as a substring; in other words, if you set this to ['excluded.com'], then 'abc.excluded.com' and 'unexcluded.com' will both be excluded; 'ex-cluded.com' will not be excluded.\n\n       ::\n\n          LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_DOMAINS = ['excluded.com']\n\n.. data:: LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_OWNERS\n    :noindex:\n\n       Specifies a set of owners to exclude from the deployed certificate checks. Anything specified here is treated as an exact match, NOT as a substring.\n\n       ::\n\n          LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_OWNERS = ['excludedowner@example.com']\n\n\n.. data:: LEMUR_REISSUE_NOTIFICATION_EXCLUDED_DESTINATIONS\n    :noindex:\n\n       Specifies a set of destination labels to exclude from the reissued with endpoint notification checks. If a certificate is reissued without endpoints, but any of its destination labels are specified in this list, no \"reissued without endpoints\" notification will be sent.\n\n       ::\n\n          LEMUR_REISSUE_NOTIFICATION_EXCLUDED_DESTINATIONS = ['excluded-destination']\n\n\nCelery Options\n---------------\nTo make use of automated tasks within lemur (e.g. syncing source/destinations, or reissuing ACME certificates), you\nneed to configure celery. See :ref:`Periodic Tasks <PeriodicTasks>` for more in depth documentation.\n\n.. data:: CELERY_RESULT_BACKEND\n    :noindex:\n\n        The url to your redis backend (needs to be in the format `redis://<host>:<port>/<database>`)\n\n.. data:: CELERY_BROKER_URL\n    :noindex:\n\n        The url to your redis broker (needs to be in the format `redis://<host>:<port>/<database>`)\n\n.. data:: CELERY_IMPORTS\n    :noindex:\n\n        The module that celery needs to import, in our case thats `lemur.common.celery`\n\n.. data:: CELERY_TIMEZONE\n    :noindex:\n\n        The timezone for celery to work with\n\n\n.. data:: CELERYBEAT_SCHEDULE\n    :noindex:\n\n        This defines the schedule, with which the celery beat makes the worker run the specified tasks.\n\n.. data:: CELERY_ENDPOINTS_EXPIRE_TIME_IN_HOURS\n    :noindex:\n\n        This is an optional parameter that defines the expiration time for endpoints when the endpoint expiration celery task is running. Default value is set to 2h.\n\n\nSince the celery module, relies on the RedisHandler, the following options also need to be set.\n\n.. data:: REDIS_HOST\n    :noindex:\n\n        Hostname of your redis instance\n\n.. data:: REDIS_PORT\n    :noindex:\n\n        Port on which redis is running (default: 6379)\n\n.. data:: REDIS_DB\n    :noindex:\n\n        Which redis database to be used, by default redis offers databases 0-15 (default: 0)\n\nAuthentication Options\n----------------------\nLemur currently supports Basic Authentication, LDAP Authentication, Ping OAuth2, and Google out of the box. Additional flows can be added relatively easily.\n\nLDAP Options\n~~~~~~~~~~~~\n\nLemur supports the use of an LDAP server in conjunction with Basic Authentication. Lemur local users can still be defined and take precedence over LDAP users. If a local user does not exist, LDAP will be queried for authentication. Only simple ldap binding with or without TLS is supported.\n\nLDAP support requires the pyldap python library, which also depends on the following openldap packages.\n\n.. code-block:: bash\n\n      $ sudo apt-get update\n      $ sudo apt-get install libldap2-dev libsasl2-dev libldap2-dev libssl-dev\n\n\nTo configure the use of an LDAP server, a number of settings need to be configured in `lemur.conf.py`.\n\nHere is an example LDAP configuration stanza you can add to your config. Adjust to suit your environment of course.\n\n.. code-block:: python\n\n        LDAP_AUTH = True\n        LDAP_BIND_URI='ldaps://secure.evilcorp.net'\n        LDAP_BASE_DN='DC=users,DC=evilcorp,DC=net'\n        LDAP_EMAIL_DOMAIN='evilcorp.net'\n        LDAP_USE_TLS = True\n        LDAP_CACERT_FILE = '/opt/lemur/trusted.pem'\n        LDAP_REQUIRED_GROUP = 'certificate-management-access'\n        LDAP_GROUPS_TO_ROLES = {'certificate-management-admin': 'admin', 'certificate-management-read-only': 'read-only'}\n        LDAP_IS_ACTIVE_DIRECTORY = True\n\n\nThe lemur ldap module uses the `user principal name` (upn) of the authenticating user to bind. This is done once for each user at login time. The UPN is effectively the email address in AD/LDAP of the user. If the user doesn't provide the email address, it constructs one based on the username supplied (which should normally match the samAccountName) and the value provided by the config LDAP_EMAIL_DOMAIN.\nThe config LDAP_BASE_DN tells lemur where to search within the AD/LDAP tree for the given UPN (user). If the bind with those credentials is successful - there is a valid user in AD with correct password.\n\nEach of the LDAP options are described below.\n\n.. data:: LDAP_AUTH\n    :noindex:\n\n        This enables the use of LDAP\n\n        ::\n\n            LDAP_AUTH = True\n\n.. data:: LDAP_BIND_URI\n    :noindex:\n\n        Specifies the LDAP server connection string\n\n        ::\n\n            LDAP_BIND_URI = 'ldaps://hostname'\n\n.. data:: LDAP_BASE_DN\n    :noindex:\n\n        Specifies the LDAP distinguished name location to search for users\n\n        ::\n\n            LDAP_BASE_DN = 'DC=Users,DC=Evilcorp,DC=com'\n\n.. data:: LDAP_EMAIL_DOMAIN\n    :noindex:\n\n        The email domain used by users in your directory. This is used to build the userPrincipalName to search with.\n\n        ::\n\n            LDAP_EMAIL_DOMAIN = 'evilcorp.com'\n\nThe following LDAP options are not required, however TLS is always recommended.\n\n.. data:: LDAP_USE_TLS\n    :noindex:\n\n        Enables the use of TLS when connecting to the LDAP server. Ensure the LDAP_BIND_URI is using ldaps scheme.\n\n        ::\n\n            LDAP_USE_TLS = True\n\n.. data:: LDAP_CACERT_FILE\n    :noindex:\n\n        Specify a Certificate Authority file containing PEM encoded trusted issuer certificates. This can be used if your LDAP server is using certificates issued by a private CA.\n\n        ::\n\n            LDAP_CACERT_FILE = '/path/to/cacert/file'\n\n.. data:: LDAP_REQUIRED_GROUP\n    :noindex:\n\n        Lemur has pretty open permissions. You can define an LDAP group to specify who can access Lemur. Only members of this group will be able to login.\n\n        ::\n\n            LDAP_REQUIRED_GROUP = 'Lemur LDAP Group Name'\n\n.. data:: LDAP_GROUPS_TO_ROLES\n    :noindex:\n\n        You can also define a dictionary of ldap groups mapped to lemur roles. This allows you to use ldap groups to manage access to owner/creator roles in Lemur\n\n        ::\n\n            LDAP_GROUPS_TO_ROLES = {'lemur_admins': 'admin', 'Lemur Team DL Group': 'team@example.com'}\n\n\n.. data:: LDAP_IS_ACTIVE_DIRECTORY\n    :noindex:\n\n        When set to True, nested group memberships are supported, by searching for groups with the member:1.2.840.113556.1.4.1941 attribute set to the user DN.\n        When set to False, the list of groups will be determined by the 'memberof' attribute of the LDAP user logging in.\n\n        ::\n\n            LDAP_IS_ACTIVE_DIRECTORY = False\n\n\nAuthentication Providers\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are not using an authentication provider you do not need to configure any of these options.\n\nFor more information about how to use social logins, see: `Satellizer <https://github.com/sahat/satellizer>`_\n\n.. data:: ACTIVE_PROVIDERS\n    :noindex:\n\n        ::\n\n            ACTIVE_PROVIDERS = [\"ping\", \"google\", \"oauth2\"]\n\n.. data:: PING_SECRET\n    :noindex:\n\n        ::\n\n            PING_SECRET = 'somethingsecret'\n\n.. data:: PING_ACCESS_TOKEN_URL\n    :noindex:\n\n        ::\n\n            PING_ACCESS_TOKEN_URL = \"https://<yourpingserver>/as/token.oauth2\"\n\n\n.. data:: PING_USER_API_URL\n    :noindex:\n\n        ::\n\n            PING_USER_API_URL = \"https://<yourpingserver>/idp/userinfo.openid\"\n\n.. data:: PING_JWKS_URL\n    :noindex:\n\n        ::\n\n            PING_JWKS_URL = \"https://<yourpingserver>/pf/JWKS\"\n\n.. data:: PING_NAME\n    :noindex:\n\n        ::\n\n            PING_NAME = \"Example Oauth2 Provider\"\n\n.. data:: PING_CLIENT_ID\n    :noindex:\n\n        ::\n\n            PING_CLIENT_ID = \"client-id\"\n\n.. data:: PING_URL\n    :noindex:\n\n        ::\n\n            PING_URL = \"https://<yourlemurserver>\"\n\n.. data:: PING_REDIRECT_URI\n    :noindex:\n\n        ::\n\n            PING_REDIRECT_URI = \"https://<yourlemurserver>/api/1/auth/ping\"\n\n.. data:: PING_AUTH_ENDPOINT\n    :noindex:\n\n        ::\n\n            PING_AUTH_ENDPOINT = \"https://<yourpingserver>/oauth2/authorize\"\n\n.. data:: OAUTH2_SECRET\n    :noindex:\n\n        ::\n\n            OAUTH2_SECRET = 'somethingsecret'\n\n.. data:: OAUTH2_ACCESS_TOKEN_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_ACCESS_TOKEN_URL = \"https://<youroauthserver> /oauth2/v1/authorize\"\n\n\n.. data:: OAUTH2_USER_API_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_USER_API_URL = \"https://<youroauthserver>/oauth2/v1/userinfo\"\n\n.. data:: OAUTH2_JWKS_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_JWKS_URL = \"https://<youroauthserver>/oauth2/v1/keys\"\n\n.. data:: OAUTH2_NAME\n    :noindex:\n\n        ::\n\n            OAUTH2_NAME = \"Example Oauth2 Provider\"\n\n.. data:: OAUTH2_CLIENT_ID\n    :noindex:\n\n        ::\n\n            OAUTH2_CLIENT_ID = \"client-id\"\n\n.. data:: OAUTH2_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_URL = \"https://<yourlemurserver>\"\n\n.. data:: OAUTH2_REDIRECT_URI\n    :noindex:\n\n        ::\n\n            OAUTH2_REDIRECT_URI = \"https://<yourlemurserver>/api/1/auth/oauth2\"\n\n.. data:: OAUTH2_AUTH_ENDPOINT\n    :noindex:\n\n        ::\n\n            OAUTH2_AUTH_ENDPOINT = \"https://<youroauthserver>/oauth2/v1/authorize\"\n\n.. data:: OAUTH2_VERIFY_CERT\n    :noindex:\n\n        ::\n\n            OAUTH2_VERIFY_CERT = True\n\n.. data:: OAUTH_STATE_TOKEN_SECRET\n    :noindex:\n\n        The OAUTH_STATE_TOKEN_SECRET is used to sign state tokens to guard against CSRF attacks. Without a secret configured, Lemur will create\n        a fallback secret on a per-server basis that would last for the length of the server's lifetime (e.g., between redeploys). The secret must be `bytes-like <https://cryptography.io/en/latest/glossary/#term-bytes-like>`;\n        it will be used to instantiate the key parameter of `HMAC <https://cryptography.io/en/latest/hazmat/primitives/mac/hmac/#cryptography.hazmat.primitives.hmac.HMAC>`.\n\n        For implementation details, see ``generate_state_token()`` and ``verify_state_token()`` in ``lemur/auth/views.py``.\n\n        Running lemur create_config will securely generate a key for your configuration file.\n        If you would like to generate your own, we recommend the following method:\n\n            >>> import os\n            >>> import base64\n            >>> KEY_LENGTH = 32  # tweak as needed\n            >>> base64.b64encode(os.urandom(KEY_LENGTH))\n\n    ::\n\n        OAUTH_STATE_TOKEN_SECRET = lemur.common.utils.get_state_token_secret()\n\n.. data:: OAUTH_STATE_TOKEN_STALE_TOLERANCE_SECONDS\n    :noindex:\n\n        Defaults to 15 seconds if configuration is not discovered.\n\n        ::\n\n            OAUTH_STATE_TOKEN_STALE_TOLERANCE_SECONDS = 15\n\n.. data:: GOOGLE_CLIENT_ID\n    :noindex:\n\n        ::\n\n            GOOGLE_CLIENT_ID = \"client-id\"\n\n.. data:: GOOGLE_SECRET\n    :noindex:\n\n        ::\n\n            GOOGLE_SECRET = \"somethingsecret\"\n\n.. data:: TOKEN_AUTH_HEADER_CASE_SENSITIVE\n    :noindex:\n\n        This is an optional parameter to change the case sensitivity of the access token request authorization header.\n        This is required if the oauth provider has implemented the access token request authorization header in a case-sensitive way\n\n        ::\n\n            TOKEN_AUTH_HEADER_CASE_SENSITIVE = True\n\n.. data:: USER_MEMBERSHIP_PROVIDER\n    :noindex:\n\n        An optional plugin to provide membership details. Provide plugin slug here. Plugin is used post user validation\n        to update membership details in Lemur. Also, it is configured to provide APIs to validate user email, team email/DL.\n\n        ::\n\n            USER_MEMBERSHIP_PROVIDER = \"<yourmembershippluginslug>\"\n\nAuthorization Providers\n~~~~~~~~~~~~~~~~~~~~~~~\n\n\nIf you are not using a custom authorization provider you do not need to configure any of these options\n\n.. data:: USER_DOMAIN_AUTHORIZATION_PROVIDER\n    :noindex:\n\n        An optional plugin to perform domain level authorization during certificate issuance. Provide plugin slug here.\n        Plugin is used to check if caller is authorized to issue a certificate for a given Common Name and Subject Alternative\n        Name (SAN) of type DNSName. Plugin shall be an implementation of DomainAuthorizationPlugin.\n\n        ::\n\n            USER_DOMAIN_AUTHORIZATION_PROVIDER = \"<yourauthorizationpluginslug>\"\n\n.. data:: LEMUR_PRIVATE_AUTHORITY_PLUGIN_NAMES\n    :noindex:\n\n        Lemur can be used to issue certificates with private CA. One can write own issuer plugin to do so. Domain level authorization\n        is skipped for private CA i.e., the one implementing custom issuer plugin. Currently this config is not used elsewhere.\n\n        ::\n\n            LEMUR_PRIVATE_AUTHORITY_PLUGIN_NAMES = [\"issuerpluginslug1\", \"issuerpluginslug2\"]\n\nMetric Providers\n~~~~~~~~~~~~~~~~\n\nIf you are not using a metric provider you do not need to configure any of these options.\n\n.. data:: ACTIVE_PROVIDERS\n    :noindex:\n\n        A list of metric plugins slugs to be ativated.\n\n        ::\n\n            METRIC_PROVIDERS = ['atlas-metric']\n\n\nPlugin Specific Options\n-----------------------\n\nACME Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. data:: ACME_DNS_PROVIDER_TYPES\n    :noindex:\n\n        Dictionary of ACME DNS Providers and their requirements.\n\n.. data:: ACME_ENABLE_DELEGATED_CNAME\n    :noindex:\n\n        Enables delegated DNS domain validation using CNAMES.  When enabled, Lemur will attempt to follow CNAME records to authoritative DNS servers when creating DNS-01 challenges.\n\n\nThe following configration properties are optional for the ACME plugin to use. They allow reusing an existing ACME\naccount. See :ref:`Using a pre-existing ACME account <AcmeAccountReuse>` for more details.\n\n\n.. data:: ACME_PRIVATE_KEY\n    :noindex:\n\n            This is the private key, the account was registered with (in JWK format)\n\n.. data:: ACME_REGR\n    :noindex:\n\n            This is the registration for the ACME account, the most important part is the uri attribute (in JSON)\n\n.. data:: ACME_PREFERRED_ISSUER\n    :noindex:\n\n            This is an optional parameter to indicate the preferred chain to retrieve from ACME when finalizing the order.\n            This is applicable to Let's Encrypts recent `migration <https://letsencrypt.org/certificates/>`_ to their\n            own root, where they provide two distinct certificate chains (fullchain_pem vs. alternative_fullchains_pem);\n            the main chain will be the long chain that is rooted in the expiring DTS root, whereas the alternative chain\n            is rooted in X1 root CA.\n            Select \"X1\" to get the shorter chain (currently alternative), leave blank or \"DST Root CA X3\" for the longer chain.\n\n\nActive Directory Certificate Services Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n.. data:: ADCS_SERVER\n    :noindex:\n\n        FQDN of your ADCS Server\n\n\n.. data:: ADCS_AUTH_METHOD\n    :noindex:\n\n        The chosen authentication method. Either \u2018basic\u2019 (the default), \u2018ntlm\u2019 or \u2018cert\u2019 (SSL client certificate). The next 2 variables are interpreted differently for different methods.\n\n\n.. data:: ADCS_USER\n    :noindex:\n\n        The username (basic) or the path to the public cert (cert) of the user accessing PKI\n\n\n.. data:: ADCS_PWD\n    :noindex:\n\n        The passwd (basic) or the path to the private key (cert) of the user accessing PKI\n\n\n.. data:: ADCS_TEMPLATE\n    :noindex:\n\n        Template to be used for certificate issuing. Usually display name w/o spaces\n        \n.. data:: ADCS_TEMPLATE_<upper(authority.name)>\n    :noindex:\n\n        If there is a config variable ADCS_TEMPLATE_<upper(authority.name)> take the value as Cert template else default to ADCS_TEMPLATE to be compatible with former versions. Template to be used for certificate issuing. Usually display name w/o spaces\n\n.. data:: ADCS_START\n    :noindex:\n\n        Used in ADCS-Sourceplugin. Minimum id of the first certificate to be returned. ID is increased by one until ADCS_STOP. Missing cert-IDs are ignored\n\n.. data:: ADCS_STOP\n    :noindex:\n\n        Used for ADCS-Sourceplugin. Maximum id of the certificates returned. \n        \n\n.. data:: ADCS_ISSUING\n    :noindex:\n\n        Contains the issuing cert of the CA\n\n\n.. data:: ADCS_ROOT\n    :noindex:\n\n        Contains the root cert of the CA\n\nEntrust Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEnables the creation of Entrust certificates. You need to set the API access up with Entrust support. Check the information in the Entrust Portal as well. \nCertificates are created as \"SERVER_AND_CLIENT_AUTH\".\nCaution: Sometimes the entrust API does not respond in a timely manner. This error is handled and reported by the plugin. Should this happen you just have to hit the create button again after to create a valid certificate. \nThe following parameters have to be set in the configuration files.\n\n.. data:: ENTRUST_URL\n    :noindex:\n    \n       This is the url for the Entrust API. Refer to the API documentation.\n       \n.. data:: ENTRUST_API_CERT\n    :noindex:\n    \n       Path to the certificate file in PEM format. This certificate is created in the onboarding process. Refer to the API documentation.\n       \n.. data:: ENTRUST_API_KEY\n    :noindex:\n    \n       Path to the key file in RSA format. This certificate is created in the onboarding process. Refer to the API documentation. Caution: the request library cannot handle encrypted keys. The keyfile therefore has to contain the unencrypted key. Please put this in a secure location on the server.\n       \n.. data:: ENTRUST_API_USER\n    :noindex:\n    \n       String with the API user. This user is created in the onboarding process. Refer to the API documentation.   \n       \n.. data:: ENTRUST_API_PASS\n    :noindex:\n    \n       String with the password for the API user. This password is created in the onboarding process. Refer to the API documentation.\n\n.. data:: ENTRUST_NAME\n    :noindex:\n    \n        String with the name that should appear as certificate owner in the Entrust portal. Refer to the API documentation.\n\n.. data:: ENTRUST_EMAIL\n    :noindex:\n    \n        String with the email address that should appear as certificate contact email in the Entrust portal. Refer to the API documentation.       \n\n.. data:: ENTRUST_PHONE\n    :noindex:\n    \n        String with the phone number that should appear as certificate contact in the Entrust portal. Refer to the API documentation.        \n\n.. data:: ENTRUST_ISSUING\n    :noindex:\n    \n        Contains the issuing cert of the CA\n\n.. data:: ENTRUST_ROOT\n    :noindex:\n    \n        Contains the root cert of the CA\n\n.. data:: ENTRUST_PRODUCT_<upper(authority.name)>\n    :noindex:\n\n        If there is a config variable ENTRUST_PRODUCT_<upper(authority.name)> take the value as cert product name else default to \"STANDARD_SSL\". Refer to the API documentation for valid products names.\n\n\n.. data:: ENTRUST_CROSS_SIGNED_RSA_L1K\n    :noindex:\n\n        This is optional. Entrust provides support for cross-signed subCAS. One can set ENTRUST_CROSS_SIGNED_RSA_L1K to the respective cross-signed RSA-based subCA PEM and Lemur will replace the retrieved subCA with ENTRUST_CROSS_SIGNED_RSA_L1K.\n\n\n.. data:: ENTRUST_CROSS_SIGNED_ECC_L1F\n    :noindex:\n\n        This is optional. Entrust provides support for cross-signed subCAS. One can set ENTRUST_CROSS_SIGNED_ECC_L1F to the respective cross-signed EC-based subCA PEM and Lemur will replace the retrieved subCA with ENTRUST_CROSS_SIGNED_ECC_L1F.\n\n\n.. data:: ENTRUST_USE_DEFAULT_CLIENT_ID\n    :noindex:\n\n        If set to True, Entrust will use the primary client ID of 1, which applies to most use-case.\n        Otherwise, Entrust will first lookup the clientId before ordering the certificate.\n\n\nVerisign Issuer Plugin\n~~~~~~~~~~~~~~~~~~~~~~\n\nAuthorities will each have their own configuration options. There is currently just one plugin bundled with Lemur,\nVerisign/Symantec. Additional plugins may define additional options. Refer to the plugin's own documentation\nfor those plugins.\n\n.. data:: VERISIGN_URL\n    :noindex:\n\n        This is the url for the Verisign API\n\n\n.. data:: VERISIGN_PEM_PATH\n    :noindex:\n\n        This is the path to the mutual TLS certificate used for communicating with Verisign\n\n\n.. data:: VERISIGN_FIRST_NAME\n    :noindex:\n\n        This is the first name to be used when requesting the certificate\n\n\n.. data:: VERISIGN_LAST_NAME\n    :noindex:\n\n        This is the last name to be used when requesting the certificate\n\n.. data:: VERISIGN_EMAIL\n    :noindex:\n\n        This is the email to be used when requesting the certificate\n\n\n.. data:: VERISIGN_INTERMEDIATE\n    :noindex:\n\n        This is the intermediate to be used for your CA chain\n\n\n.. data:: VERISIGN_ROOT\n    :noindex:\n\n        This is the root to be used for your CA chain\n\n\nDigicert Issuer Plugin\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following configuration properties are required to use the Digicert issuer plugin.\n\n\n.. data:: DIGICERT_URL\n    :noindex:\n\n            This is the url for the Digicert API (e.g. https://www.digicert.com)\n\n\n.. data:: DIGICERT_ORDER_TYPE\n    :noindex:\n\n            This is the type of certificate to order. (e.g. ssl_plus, ssl_ev_plus see: https://www.digicert.com/services/v2/documentation/order/overview-submit)\n\n\n.. data:: DIGICERT_API_KEY\n    :noindex:\n\n            This is the Digicert API key\n\n\n.. data:: DIGICERT_ORG_ID\n    :noindex:\n\n            This is the Digicert organization ID tied to your API key\n\n\n.. data:: DIGICERT_ROOT\n    :noindex:\n\n            This is the root to be used for your CA chain\n\n\n.. data:: DIGICERT_DEFAULT_VALIDITY_DAYS\n    :noindex:\n\n            This is the default validity (in days), if no end date is specified. (Default: 397)\n\n\n.. data:: DIGICERT_MAX_VALIDITY_DAYS\n    :noindex:\n\n            This is the maximum validity (in days). (Default: value of DIGICERT_DEFAULT_VALIDITY_DAYS)\n\n\n.. data:: DIGICERT_PRIVATE\n    :noindex:\n\n            This is whether or not to issue a private certificate. (Default: False)\n\n\nCFSSL Issuer Plugin\n~~~~~~~~~~~~~~~~~~~\n\nThe following configuration properties are required to use the CFSSL issuer plugin.\n\n.. data:: CFSSL_URL\n    :noindex:\n\n        This is the URL for the CFSSL API\n\n.. data:: CFSSL_ROOT\n    :noindex:\n\n        This is the root to be used for your CA chain\n\n.. data:: CFSSL_INTERMEDIATE\n    :noindex:\n\n        This is the intermediate to be used for your CA chain\n\n.. data:: CFSSL_KEY\n    :noindex:\n\n        This is the hmac key to authenticate to the CFSSL service. (Optional)\n\n\nHashicorp Vault Source/Destination Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLemur can import and export certificate data to and from a Hashicorp Vault secrets store. Lemur can connect to a different Vault service per source/destination.\n\n.. note:: This plugin does not supersede or overlap the 3rd party Vault Issuer plugin.\n\n.. note:: Vault does not have any configuration properties however it does read from a file on disk for a vault access token. The Lemur service account needs read access to this file.\n\nVault Source\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe Vault Source Plugin will read from one Vault object location per source defined. There is expected to be one or more certificates defined in each object in Vault.\n\nVault Destination\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nA Vault destination can be one object in Vault or a directory where all certificates will be stored as their own object by CN.\n\nVault Destination supports a regex filter to prevent certificates with SAN that do not match the regex filter from being deployed. This is an optional feature per destination defined.\n\n\nAWS Source/Destination Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order for Lemur to manage its own account and other accounts we must ensure it has the correct AWS permissions.\n\n.. note:: AWS usage is completely optional. Lemur can upload, find and manage TLS certificates in AWS. But is not required to do so.\n\nSetting up IAM roles\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nLemur's AWS plugin uses boto heavily to talk to all the AWS resources it manages. By default it uses the on-instance credentials to make the necessary calls.\n\nIn order to limit the permissions, we will create two new IAM roles for Lemur. You can name them whatever you would like but for example sake we will be calling them LemurInstanceProfile and Lemur.\n\nLemur uses to STS to talk to different accounts. For managing one account this isn't necessary but we will still use it so that we can easily add new accounts.\n\nLemurInstanceProfile is the IAM role you will launch your instance with. It actually has almost no rights. In fact it should really only be able to use STS to assume role to the Lemur role.\n\nHere are example policies for the LemurInstanceProfile:\n\nSES-SendEmail\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n            \"ses:SendEmail\"\n          ],\n          \"Resource\": \"*\"\n        }\n      ]\n    }\n\n\nSTS-AssumeRole\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Action\":\n            \"sts:AssumeRole\",\n          \"Resource\": \"*\"\n        }\n      ]\n    }\n\n\n\nNext we will create the Lemur IAM role.\n\n.. note::\n\n    The default IAM role that Lemur assumes into is called `Lemur`, if you need to change this ensure you set `LEMUR_INSTANCE_PROFILE` to your role name in the configuration.\n\n\nHere is an example policy for Lemur:\n\nIAM-ServerCertificate\n\n.. code-block:: python\n\n    {\n        \"Statement\": [\n                    {\n                         \"Action\": [\n                              \"iam:ListServerCertificates\",\n                              \"iam:UpdateServerCertificate\",\n                              \"iam:GetServerCertificate\",\n                              \"iam:UploadServerCertificate\"\n                         ],\n                         \"Resource\": [\n                              \"*\"\n                         ],\n                         \"Effect\": \"Allow\",\n                         \"Sid\": \"Stmt1404836868000\"\n                    }\n               ]\n    }\n\n\n.. code-block:: python\n\n    {\n        \"Statement\": [\n                    {\n                         \"Action\": [\n                              \"cloudfront:GetDistribution\",\n                              \"cloudfront:GetDistributionConfig\",\n                              \"cloudfront:ListDistributions\",\n                              \"cloudfront:UpdateDistribution\",\n                              \"elasticloadbalancing:DescribeInstanceHealth\",\n                              \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n                              \"elasticloadbalancing:DescribeLoadBalancerPolicyTypes\",\n                              \"elasticloadbalancing:DescribeLoadBalancerPolicies\",\n                              \"elasticloadbalancing:DescribeLoadBalancers\",\n                              \"elasticloadbalancing:DeleteLoadBalancerListeners\",\n                              \"elasticloadbalancing:CreateLoadBalancerListeners\"\n                         ],\n                         \"Resource\": [\n                              \"*\"\n                         ],\n                         \"Effect\": \"Allow\",\n                         \"Sid\": \"Stmt1404841912000\"\n                    }\n               ]\n    }\n\n\nSetting up STS access\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nOnce we have setup our accounts we need to ensure that we create a trust relationship so that LemurInstanceProfile can assume the Lemur role.\n\nIn the AWS console select the Lemur IAM role and select the Trust Relationships tab and click Edit Trust Relationship\n\nBelow is an example policy:\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2008-10-17\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": [\n              \"arn:aws:iam::<awsaccountnumber>:role/LemurInstanceProfile\",\n            ]\n          },\n          \"Action\": \"sts:AssumeRole\"\n        }\n      ]\n    }\n\n\nAdding N+1 accounts\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nTo add another account we go to the new account and create a new Lemur IAM role with the same policy as above.\n\nThen we would go to the account that Lemur is running is and edit the trust relationship policy.\n\nAn example policy:\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2008-10-17\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": [\n              \"arn:aws:iam::<awsaccountnumber>:role/LemurInstanceProfile\",\n              \"arn:aws:iam::<awsaccountnumber1>:role/LemurInstanceProfile\",\n            ]\n          },\n          \"Action\": \"sts:AssumeRole\"\n        }\n      ]\n    }\n\nSetting up SES\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nLemur has built in support for sending it's certificate notifications via Amazon's simple email service (SES). To force\nLemur to use SES ensure you are the running as the IAM role defined above and that you have followed the steps outlined\nin Amazon's documentation `Setting up Amazon SES <http://docs.aws.amazon.com/ses/latest/DeveloperGuide/setting-up-ses.html>`_\n\nThe configuration::\n\n    LEMUR_EMAIL = 'lemur@example.com'\n\nWill be the sender of all notifications, so ensure that it is verified with AWS.\n\nSES if the default notification gateway and will be used unless SMTP settings are configured in the application configuration\nsettings.\n\nNS1 ACME Plugin\n~~~~~~~~~~~~~~~~~\n\nThe NS1 ACME plugin allows DNS1 validation using NS1 domain services.\n\n.. data:: NS1_KEY\n   :noindex:\n\n           The NS1 read/write API key for managing TXT records for domain validation\n\nPowerDNS ACME Plugin\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following configuration properties are required to use the PowerDNS ACME Plugin for domain validation.\n\n\n.. data:: ACME_POWERDNS_DOMAIN\n    :noindex:\n\n            This is the FQDN for the PowerDNS API (without path)\n\n\n.. data:: ACME_POWERDNS_SERVERID\n    :noindex:\n\n            This is the ServerID attribute of the PowerDNS API Server (i.e. \"localhost\")\n\n\n.. data:: ACME_POWERDNS_APIKEYNAME\n    :noindex:\n\n            This is the Key name to use for authentication (i.e. \"X-API-Key\")\n\n\n.. data:: ACME_POWERDNS_APIKEY\n    :noindex:\n\n            This is the API Key to use for authentication (i.e. \"Password\")\n\n\n.. data:: ACME_POWERDNS_RETRIES\n    :noindex:\n\n            This is the number of times DNS Verification should be attempted (i.e. 20)\n\n\n.. data:: ACME_POWERDNS_VERIFY\n    :noindex:\n\n            This configures how TLS certificates on the PowerDNS API target are validated.  The PowerDNS Plugin depends on the PyPi requests library, which supports the following options for the verify parameter:\n\n            True: Verifies the TLS certificate was issued by a known publicly-trusted CA. (Default)\n\n            False: Disables certificate validation (Not Recommended)\n\n            File/Dir path to CA Bundle: Verifies the TLS certificate was issued by a Certificate Authority in the provided CA bundle.\n\n.. _CommandLineInterface:\n\nCommand Line Interface\n======================\n\nLemur installs a command line script under the name ``lemur``. This will allow you to\nperform most required operations that are unachievable within the web UI.\n\nIf you're using a non-standard configuration location, you'll need to prefix every command with\n--config (excluding create_config, which is a special case). For example::\n\n    lemur --config=/etc/lemur.conf.py help\n\nFor a list of commands, you can also use ``lemur help``, or ``lemur [command] --help``\nfor help on a specific command.\n\n.. note:: The script is powered by a library called `Flask-Script <https://github.com/smurfix/flask-script>`_\n\nBuiltin Commands\n----------------\n\nAll commands default to `~/.lemur/lemur.conf.py` if a configuration is not specified.\n\n.. data:: create_config\n\n    Creates a default configuration file for Lemur.\n\n    Path defaults to ``~/.lemur/lemur.config.py``\n\n    ::\n\n        lemur create_config .\n\n    .. note::\n        This command is a special case and does not depend on the configuration file\n        being set.\n\n\n.. data:: init\n\n    Initializes the configuration file for Lemur.\n\n    ::\n\n        lemur -c /etc/lemur.conf.py init\n\n\n.. data:: start\n\n    Starts a Lemur service. You can also pass any flag that Gunicorn uses to specify the webserver configuration.\n\n    ::\n\n        lemur start -w 6 -b 127.0.0.1:8080\n\n\n.. data:: db upgrade\n\n    Performs any needed database migrations.\n\n    ::\n\n        lemur db upgrade\n\n\n.. data:: check_revoked\n\n    Traverses every certificate that Lemur is aware of and attempts to understand its validity.\n    It utilizes both OCSP and CRL. If Lemur is unable to come to a conclusion about a certificates\n    validity its status is marked 'unknown'.\n\n\n.. data:: sync\n\n    Sync attempts to discover certificates in the environment that were not created by Lemur. If you wish to only sync\n    a few sources you can pass a comma delimited list of sources to sync.\n\n    ::\n\n        lemur sync -s source1,source2\n\n\n    Additionally you can also list the available sources that Lemur can sync.\n\n    ::\n\n        lemur sync\n\n\n.. data:: notify\n\n    Will traverse all current notifications and see if any of them need to be triggered.\n\n    ::\n\n        lemur notify\n\n\n.. data:: acme\n\n    Handles all ACME related tasks, like ACME plugin testing.\n\n    ::\n\n        lemur acme\n\n\nSub-commands\n------------\n\nLemur includes several sub-commands for interacting with Lemur such as creating new users, creating new roles and even\nissuing certificates.\n\nThe best way to discover these commands is by using the built in help pages\n\n    ::\n\n        lemur --help\n\n\nand to get help on sub-commands\n\n    ::\n\n        lemur certificates --help\n\n\n\nUpgrading Lemur\n===============\n\nTo upgrade Lemur to the newest release you will need to ensure you have the latest code and have run any needed\ndatabase migrations.\n\nTo get the latest code from github run\n\n    ::\n\n        cd <lemur-source-directory>\n        git pull -t <version>\n        python setup.py develop\n\n\n.. note::\n    It's important to grab the latest release by specifying the release tag. This tags denote stable versions of Lemur.\n    If you want to try the bleeding edge version of Lemur you can by using the master branch.\n\n\nAfter you have the latest version of the Lemur code base you must run any needed database migrations. To run migrations\n\n    ::\n\n        cd <lemur-source-directory>/lemur\n        lemur db upgrade\n\n\nThis will ensure that any needed tables or columns are created or destroyed.\n\n.. note::\n    Internally, this uses `Alembic <http://alembic.zzzcomputing.com/en/latest/>`_ to manage database migrations.\n\n.. note::\n    By default Alembic looks for the `migrations` folder in the current working directory.The migrations folder is\n    located under `<LEMUR_HOME>/lemur/migrations` if you are running the lemur command from any location besides\n    `<LEMUR_HOME>/lemur` you will need to pass the `-d` flag to specify the absolute file path to the `migrations` folder.\n\nPlugins\n=======\n\nThere are several interfaces currently available to extend Lemur. These are a work in\nprogress and the API is not frozen.\n\nLemur includes several plugins by default. Including extensive support for AWS, VeriSign/Symantec.\n\nVerisign/Symantec\n-----------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Issuer\n:Description:\n    Basic support for the VICE 2.0 API\n\n\nCryptography\n------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Mikhail Khodorovskiy <mikhail.khodorovskiy@jivesoftware.com>\n:Type:\n    Issuer\n:Description:\n    Toy certificate authority that creates self-signed certificate authorities.\n    Allows for the creation of arbitrary authorities and end-entity certificates.\n    This is *not* recommended for production use.\n\n\nAcme\n----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>,\n    Mikhail Khodorovskiy <mikhail.khodorovskiy@jivesoftware.com>,\n    Chad Sine <csine@netflix.com>\n:Type:\n    Issuer\n:Description:\n    Adds support for the ACME protocol (including LetsEncrypt) with domain validation using several providers.\n\n\nAtlas\n-----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Metric\n:Description:\n    Adds basic support for the `Atlas <https://github.com/Netflix/atlas/wiki>`_ telemetry system.\n\n\nEmail\n-----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Notification\n:Description:\n    Adds support for basic email notifications via SES.\n\n\nSlack\n-----\n\n:Authors:\n    Harm Weites <harm@weites.com>\n:Type:\n    Notification\n:Description:\n    Adds support for slack notifications.\n\n\nAWS (Source)\n------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Source\n:Description:\n    Uses AWS IAM as a source of certificates to manage. Supports a multi-account deployment.\n\n\nAWS (Destination)\n-----------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Destination\n:Description:\n    Uses AWS IAM as a destination for Lemur generated certificates. Support a multi-account deployment.\n\n\nAWS (SNS Notification)\n----------------------\n\n:Authors:\n    Jasmine Schladen <jschladen@netflix.com>\n:Type:\n    Notification\n:Description:\n    Adds support for SNS notifications. SNS notifications (like other notification plugins) are currently only supported\n    for certificate expiration. Configuration requires a region, account number, and SNS topic name; these elements\n    are then combined to build the topic ARN. Lemur must have access to publish messages to the specified SNS topic.\n\n\nKubernetes\n----------\n\n:Authors:\n    Mikhail Khodorovskiy <mikhail.khodorovskiy@jivesoftware.com>\n:Type:\n    Destination\n:Description:\n    Allows Lemur to upload generated certificates to the Kubernetes certificate store.\n\n\nJava\n----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>\n:Type:\n    Export\n:Description:\n    Generates java compatible .jks keystores and truststores from Lemur managed certificates.\n\n\nOpenssl\n-------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>\n:Type:\n    Export\n:Description:\n    Leverages Openssl to support additional export formats (pkcs12)\n\n\nCFSSL\n-----\n\n:Authors:\n    Charles Hendrie <chad.hendrie@thomsonreuters.com>\n:Type:\n    Issuer\n:Description:\n    Basic support for generating certificates from the private certificate authority CFSSL\n\nVault\n-----\n\n:Authors:\n    Christopher Jolley <chris@alwaysjolley.com>\n:Type:\n    Source\n:Description:\n    Source plugin imports certificates from Hashicorp Vault secret store.\n\nVault\n-----\n\n:Authors:\n    Christopher Jolley <chris@alwaysjolley.com>\n:Type:\n    Destination\n:Description:\n    Destination plugin to deploy certificates to Hashicorp Vault secret store.\n\n\n3rd Party Plugins\n=================\n\nThe following plugins are available and maintained by members of the Lemur community:\n\nDigicert\n--------\n\n:Authors:\n    Chris Dorros\n:Type:\n    Issuer\n:Description:\n    Adds support for basic Digicert\n:Links:\n    https://github.com/opendns/lemur-digicert\n\n\nInfluxDB\n--------\n\n:Authors:\n    Titouan Christophe\n:Type:\n    Metric\n:Description:\n    Sends key metrics to InfluxDB\n:Links:\n    https://github.com/titouanc/lemur-influxdb\n\nHashicorp Vault\n---------------\n\n:Authors:\n    Ron Cohen\n:Type:\n    Issuer\n:Description:\n    Adds support for basic Vault PKI secret backend.\n:Links:\n    https://github.com/RcRonco/lemur_vault\n\n\nHave an extension that should be listed here? Submit a `pull request <https://github.com/netflix/lemur>`_ and we'll\nget it added.\n\nWant to create your own extension? See :doc:`../developer/plugins/index` to get started.\n\n\n.. _iam_target:\n\nIdentity and Access Management\n==============================\n\nLemur uses a Role Based Access Control (RBAC) mechanism to control which users have access to which resources. When a\nuser is first created in Lemur they can be assigned one or more roles. These roles are typically dynamically created\ndepending on an external identity provider (Google, LDAP, etc.), or are hardcoded within Lemur and associated with special\nmeaning.\n\nWithin Lemur there are three main permissions: AdminPermission, CreatorPermission, OwnerPermission. Sub-permissions such\nas ViewPrivateKeyPermission are compositions of these three main Permissions.\n\nLets take a look at how these permissions are used:\n\nEach `Authority` has a set of roles associated with it. If a user is also associated with the same roles\nthat the `Authority` is associated with, Lemur allows that user to user/view/update that `Authority`.\n\nThis RBAC is also used when determining which users can access which certificate private key. Lemur's current permission\nstructure is setup such that if the user is a `Creator` or `Owner` of a given certificate they are allow to view that\nprivate key. Owners can also be a role name, such that any user with the same role as owner will be allowed to view the\nprivate key information.\n\nThese permissions are applied to the user upon login and refreshed on every request.\n\n.. seealso::\n\n    `Flask-Principal <https://pythonhosted.org/Flask-Principal>`_\n\nTo allow integration with external access/membership management tools that may exist in your organization, lemur offers\nbelow plugins in addition to it's own RBAC implementation.\n\nMembership Plugin\n-----------------\n\n:Authors:\n    Sayali Charhate <scharhate@netflix.com>\n:Type:\n    User Membership\n:Description:\n    Adds support to learn and validate user membership details from an external service. User memberships are used to\n    create user roles dynamically as described in :ref:`iam_target`. Configure this plugin slug as `USER_MEMBERSHIP_PROVIDER`\n\nAuthorization Plugins\n---------------------\n\n:Authors:\n    Sayali Charhate <scharhate@netflix.com>\n:Type:\n    External Authorization\n:Description:\n    Adds support to implement custom authorization logic that is best suited for your enterprise. Lemur offers `AuthorizationPlugin`\n    and its extended version `DomainAuthorizationPlugin`. One can implement `DomainAuthorizationPlugin` and configure its\n    slug as `USER_DOMAIN_AUTHORIZATION_PROVIDER` to check if caller is authorized to issue a certificate for a given Common\n    Name and Subject Alternative Name (SAN) of type DNSName\n", "\"\"\"\n.. module: lemur.common.utils\n    :platform: Unix\n    :copyright: (c) 2018 by Netflix Inc., see AUTHORS for more\n    :license: Apache, see LICENSE for more details.\n\n.. moduleauthor:: Kevin Glisson <kglisson@netflix.com>\n\"\"\"\nimport base64\nimport json\nimport random\nimport re\nimport socket\nimport ssl\nimport string\n\nimport OpenSSL\nimport pem\nimport sqlalchemy\nfrom cryptography import x509\nfrom cryptography.exceptions import InvalidSignature, UnsupportedAlgorithm\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import rsa, ec, padding\nfrom cryptography.hazmat.primitives.serialization import load_pem_private_key, Encoding, pkcs7\nfrom flask_restful.reqparse import RequestParser\nfrom sqlalchemy import and_, func\n\nfrom certbot.crypto_util import CERT_PEM_REGEX\nfrom lemur.constants import CERTIFICATE_KEY_TYPES\nfrom lemur.exceptions import InvalidConfiguration\nfrom lemur.utils import Vault\nfrom sqlalchemy.dialects.postgresql import TEXT\n\npaginated_parser = RequestParser()\n\npaginated_parser.add_argument(\"count\", type=int, default=10, location=\"args\")\npaginated_parser.add_argument(\"page\", type=int, default=1, location=\"args\")\npaginated_parser.add_argument(\"sortDir\", type=str, dest=\"sort_dir\", location=\"args\")\npaginated_parser.add_argument(\"sortBy\", type=str, dest=\"sort_by\", location=\"args\")\npaginated_parser.add_argument(\"filter\", type=str, location=\"args\")\npaginated_parser.add_argument(\"owner\", type=str, location=\"args\")\n\n\ndef base64encode(string):\n    # Performs Base64 encoding of string to string using the base64.b64encode() function\n    # which encodes bytes to bytes.\n    return base64.b64encode(string.encode()).decode()\n\n\ndef base64decode(base64_input):\n    # Performs Base64 decoging of a b64 string to string using the base64.b64encode() function\n    # which encodes bytes to bytes.\n    return base64.b64decode(base64_input.encode()).decode()\n\n\ndef get_psuedo_random_string():\n    \"\"\"\n    Create a random and strongish challenge.\n    \"\"\"\n    challenge = \"\".join(random.choice(string.ascii_uppercase) for x in range(6))  # noqa\n    challenge += \"\".join(random.choice(\"~!@#$%^&*()_+\") for x in range(6))  # noqa\n    challenge += \"\".join(random.choice(string.ascii_lowercase) for x in range(6))\n    challenge += \"\".join(random.choice(string.digits) for x in range(6))  # noqa\n    return challenge\n\n\ndef get_random_secret(length):\n    \"\"\" Similar to get_pseudo_random_string, but accepts a length parameter. \"\"\"\n    secret_key = ''.join(random.choice(string.ascii_uppercase) for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(random.choice(\"~!@#$%^&*()_+\") for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(random.choice(string.ascii_lowercase) for x in range(round(length / 4)))\n    return secret_key + ''.join(random.choice(string.digits) for x in range(round(length / 4)))\n\n\ndef get_state_token_secret():\n    return base64.b64encode(get_random_secret(32).encode('utf8'))\n\n\ndef parse_certificate(body):\n    \"\"\"\n    Helper function that parses a PEM certificate.\n\n    :param body:\n    :return:\n    \"\"\"\n    assert isinstance(body, str)\n\n    return x509.load_pem_x509_certificate(body.encode(\"utf-8\"), default_backend())\n\n\ndef parse_private_key(private_key):\n    \"\"\"\n    Parses a PEM-format private key (RSA, DSA, ECDSA or any other supported algorithm).\n\n    Raises ValueError for an invalid string. Raises AssertionError when passed value is not str-type.\n\n    :param private_key: String containing PEM private key\n    \"\"\"\n    assert isinstance(private_key, str)\n\n    return load_pem_private_key(\n        private_key.encode(\"utf8\"), password=None, backend=default_backend()\n    )\n\n\ndef get_key_type_from_certificate(body):\n    \"\"\"\n\n    Helper function to determine key type by pasrding given PEM certificate\n\n    :param body: PEM string\n    :return: Key type string\n    \"\"\"\n    parsed_cert = parse_certificate(body)\n    if isinstance(parsed_cert.public_key(), rsa.RSAPublicKey):\n        return \"RSA{key_size}\".format(\n            key_size=parsed_cert.public_key().key_size\n        )\n    elif isinstance(parsed_cert.public_key(), ec.EllipticCurvePublicKey):\n        return get_key_type_from_ec_curve(parsed_cert.public_key().curve.name)\n\n\ndef split_pem(data):\n    \"\"\"\n    Split a string of several PEM payloads to a list of strings.\n\n    :param data: String\n    :return: List of strings\n    \"\"\"\n    return re.split(\"\\n(?=-----BEGIN )\", data)\n\n\ndef parse_cert_chain(pem_chain):\n    \"\"\"\n    Helper function to split and parse a series of PEM certificates.\n\n    :param pem_chain: string\n    :return: List of parsed certificates\n    \"\"\"\n    if pem_chain is None:\n        return []\n    return [parse_certificate(cert) for cert in split_pem(pem_chain) if cert]\n\n\ndef parse_csr(csr):\n    \"\"\"\n    Helper function that parses a CSR.\n\n    :param csr:\n    :return:\n    \"\"\"\n    assert isinstance(csr, str)\n\n    return x509.load_pem_x509_csr(csr.encode(\"utf-8\"), default_backend())\n\n\ndef get_authority_key(body):\n    \"\"\"Returns the authority key for a given certificate in hex format\"\"\"\n    parsed_cert = parse_certificate(body)\n    authority_key = parsed_cert.extensions.get_extension_for_class(\n        x509.AuthorityKeyIdentifier\n    ).value.key_identifier\n    return authority_key.hex()\n\n\ndef get_key_type_from_ec_curve(curve_name):\n    \"\"\"\n    Give an EC curve name, return the matching key_type.\n\n    :param: curve_name\n    :return: key_type\n    \"\"\"\n\n    _CURVE_TYPES = {\n        ec.SECP192R1().name: \"ECCPRIME192V1\",\n        ec.SECP256R1().name: \"ECCPRIME256V1\",\n        ec.SECP224R1().name: \"ECCSECP224R1\",\n        ec.SECP384R1().name: \"ECCSECP384R1\",\n        ec.SECP521R1().name: \"ECCSECP521R1\",\n        ec.SECP256K1().name: \"ECCSECP256K1\",\n        ec.SECT163K1().name: \"ECCSECT163K1\",\n        ec.SECT233K1().name: \"ECCSECT233K1\",\n        ec.SECT283K1().name: \"ECCSECT283K1\",\n        ec.SECT409K1().name: \"ECCSECT409K1\",\n        ec.SECT571K1().name: \"ECCSECT571K1\",\n        ec.SECT163R2().name: \"ECCSECT163R2\",\n        ec.SECT233R1().name: \"ECCSECT233R1\",\n        ec.SECT283R1().name: \"ECCSECT283R1\",\n        ec.SECT409R1().name: \"ECCSECT409R1\",\n        ec.SECT571R1().name: \"ECCSECT571R2\",\n    }\n\n    if curve_name in _CURVE_TYPES.keys():\n        return _CURVE_TYPES[curve_name]\n    else:\n        return None\n\n\ndef generate_private_key(key_type):\n    \"\"\"\n    Generates a new private key based on key_type.\n\n    Valid key types: RSA2048, RSA4096', 'ECCPRIME192V1', 'ECCPRIME256V1', 'ECCSECP192R1',\n        'ECCSECP224R1', 'ECCSECP256R1', 'ECCSECP384R1', 'ECCSECP521R1', 'ECCSECP256K1',\n        'ECCSECT163K1', 'ECCSECT233K1', 'ECCSECT283K1', 'ECCSECT409K1', 'ECCSECT571K1',\n        'ECCSECT163R2', 'ECCSECT233R1', 'ECCSECT283R1', 'ECCSECT409R1', 'ECCSECT571R2'\n\n    :param key_type:\n    :return:\n    \"\"\"\n\n    _CURVE_TYPES = {\n        \"ECCPRIME192V1\": ec.SECP192R1(),  # duplicate\n        \"ECCPRIME256V1\": ec.SECP256R1(),  # duplicate\n        \"ECCSECP192R1\": ec.SECP192R1(),  # duplicate\n        \"ECCSECP224R1\": ec.SECP224R1(),\n        \"ECCSECP256R1\": ec.SECP256R1(),  # duplicate\n        \"ECCSECP384R1\": ec.SECP384R1(),\n        \"ECCSECP521R1\": ec.SECP521R1(),\n        \"ECCSECP256K1\": ec.SECP256K1(),\n        \"ECCSECT163K1\": ec.SECT163K1(),\n        \"ECCSECT233K1\": ec.SECT233K1(),\n        \"ECCSECT283K1\": ec.SECT283K1(),\n        \"ECCSECT409K1\": ec.SECT409K1(),\n        \"ECCSECT571K1\": ec.SECT571K1(),\n        \"ECCSECT163R2\": ec.SECT163R2(),\n        \"ECCSECT233R1\": ec.SECT233R1(),\n        \"ECCSECT283R1\": ec.SECT283R1(),\n        \"ECCSECT409R1\": ec.SECT409R1(),\n        \"ECCSECT571R2\": ec.SECT571R1(),\n    }\n\n    if key_type not in CERTIFICATE_KEY_TYPES:\n        raise Exception(\n            \"Invalid key type: {key_type}. Supported key types: {choices}\".format(\n                key_type=key_type, choices=\",\".join(CERTIFICATE_KEY_TYPES)\n            )\n        )\n\n    if \"RSA\" in key_type:\n        key_size = int(key_type[3:])\n        return rsa.generate_private_key(\n            public_exponent=65537, key_size=key_size, backend=default_backend()\n        )\n    elif \"ECC\" in key_type:\n        return ec.generate_private_key(\n            _CURVE_TYPES[key_type], backend=default_backend()\n        )\n\n\ndef check_cert_signature(cert, issuer_public_key):\n    \"\"\"\n    Check a certificate's signature against an issuer public key.\n    Before EC validation, make sure we support the algorithm, otherwise raise UnsupportedAlgorithm\n    On success, returns None; on failure, raises UnsupportedAlgorithm or InvalidSignature.\n    \"\"\"\n    if isinstance(issuer_public_key, rsa.RSAPublicKey):\n        # RSA requires padding, just to make life difficult for us poor developers :(\n        if cert.signature_algorithm_oid == x509.SignatureAlgorithmOID.RSASSA_PSS:\n            # In 2005, IETF devised a more secure padding scheme to replace PKCS #1 v1.5. To make sure that\n            # nobody can easily support or use it, they mandated lots of complicated parameters, unlike any\n            # other X.509 signature scheme.\n            # https://tools.ietf.org/html/rfc4056\n            raise UnsupportedAlgorithm(\"RSASSA-PSS not supported\")\n        else:\n            padder = padding.PKCS1v15()\n        issuer_public_key.verify(\n            cert.signature,\n            cert.tbs_certificate_bytes,\n            padder,\n            cert.signature_hash_algorithm,\n        )\n    elif isinstance(issuer_public_key, ec.EllipticCurvePublicKey) and isinstance(\n        ec.ECDSA(cert.signature_hash_algorithm), ec.ECDSA\n    ):\n        issuer_public_key.verify(\n            cert.signature,\n            cert.tbs_certificate_bytes,\n            ec.ECDSA(cert.signature_hash_algorithm),\n        )\n    else:\n        raise UnsupportedAlgorithm(\n            \"Unsupported Algorithm '{var}'.\".format(\n                var=cert.signature_algorithm_oid._name\n            )\n        )\n\n\ndef is_selfsigned(cert):\n    \"\"\"\n    Returns True if the certificate is self-signed.\n    Returns False for failed verification or unsupported signing algorithm.\n    \"\"\"\n    try:\n        check_cert_signature(cert, cert.public_key())\n        # If verification was successful, it's self-signed.\n        return True\n    except InvalidSignature:\n        return False\n\n\ndef is_weekend(date):\n    \"\"\"\n    Determines if a given date is on a weekend.\n\n    :param date:\n    :return:\n    \"\"\"\n    if date.weekday() > 5:\n        return True\n\n\ndef validate_conf(app, required_vars):\n    \"\"\"\n    Ensures that the given fields are set in the applications conf.\n\n    :param app:\n    :param required_vars: list\n    \"\"\"\n    for var in required_vars:\n        if var not in app.config:\n            raise InvalidConfiguration(\n                \"Required variable '{var}' is not set in Lemur's conf.\".format(var=var)\n            )\n\n\ndef check_validation(validation):\n    \"\"\"\n    Checks that the given validation string compiles successfully.\n\n    :param validation:\n    :return str: The validation pattern, if compilation succeeds\n    \"\"\"\n\n    try:\n        compiled = re.compile(validation)\n    except re.error as e:\n        raise InvalidConfiguration(f\"Validation {validation} couldn't compile. Reason: {e}\")\n\n    return compiled.pattern\n\n\n# https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/WindowedRangeQuery\ndef column_windows(session, column, windowsize):\n    \"\"\"Return a series of WHERE clauses against\n    a given column that break it into windows.\n\n    Result is an iterable of tuples, consisting of\n    ((start, end), whereclause), where (start, end) are the ids.\n\n    Requires a database that supports window functions,\n    i.e. Postgresql, SQL Server, Oracle.\n\n    Enhance this yourself !  Add a \"where\" argument\n    so that windows of just a subset of rows can\n    be computed.\n\n    \"\"\"\n\n    def int_for_range(start_id, end_id):\n        if end_id:\n            return and_(column >= start_id, column < end_id)\n        else:\n            return column >= start_id\n\n    q = session.query(\n        column, func.row_number().over(order_by=column).label(\"rownum\")\n    ).from_self(column)\n\n    if windowsize > 1:\n        q = q.filter(sqlalchemy.text(\"rownum %% %d=1\" % windowsize))\n\n    intervals = [id for id, in q]\n\n    while intervals:\n        start = intervals.pop(0)\n        if intervals:\n            end = intervals[0]\n        else:\n            end = None\n        yield int_for_range(start, end)\n\n\ndef windowed_query(q, column, windowsize):\n    \"\"\"\"Break a Query into windows on a given column.\"\"\"\n\n    for whereclause in column_windows(q.session, column, windowsize):\n        for row in q.filter(whereclause).order_by(column):\n            yield row\n\n\ndef truthiness(s):\n    \"\"\"If input string resembles something truthy then return True, else False.\"\"\"\n\n    return s.lower() in (\"true\", \"yes\", \"on\", \"t\", \"1\")\n\n\ndef find_matching_certificates_by_hash(cert, matching_certs):\n    \"\"\"Given a Cryptography-formatted certificate cert, and Lemur-formatted certificates (matching_certs),\n    determine if any of the certificate hashes match and return the matches.\"\"\"\n    matching = []\n    for c in matching_certs:\n        if parse_certificate(c.body).fingerprint(hashes.SHA256()) == cert.fingerprint(\n            hashes.SHA256()\n        ):\n            matching.append(c)\n    return matching\n\n\ndef convert_pkcs7_bytes_to_pem(certs_pkcs7):\n    \"\"\"\n    Given a list of certificates in pkcs7 encoding (bytes), covert them into a list of PEM encoded files\n    :raises ValueError or ValidationError\n    :param certs_pkcs7:\n    :return: list of certs in PEM format\n    \"\"\"\n\n    certificates = pkcs7.load_pem_pkcs7_certificates(certs_pkcs7)\n    certificates_pem = []\n    for cert in certificates:\n        certificates_pem.append(pem.parse(cert.public_bytes(encoding=Encoding.PEM))[0])\n\n    return certificates_pem\n\n\ndef get_certificate_via_tls(host, port, timeout=10):\n    \"\"\"\n    Makes a TLS network connection to retrieve the current certificate for the specified host and port.\n\n    Note that if the host is valid but the port is not, we'll wait for the timeout for the connection to fail,\n    so this should remain low when doing bulk operations.\n\n    :param host: Host to get certificate for\n    :param port: Port to get certificate for\n    :param timeout: Timeout in seconds\n    \"\"\"\n    context = ssl.create_default_context()\n    context.check_hostname = False  # we don't care about validating the cert\n    context.verify_mode = ssl.CERT_NONE  # we don't care about validating the cert; it may be self-signed\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.settimeout(timeout)\n    conn.connect((host, port))\n    sock = context.wrap_socket(conn, server_hostname=host)\n    sock.settimeout(timeout)\n    try:\n        der_cert = sock.getpeercert(True)\n    finally:\n        sock.close()\n    return ssl.DER_cert_to_PEM_cert(der_cert)\n\n\ndef parse_serial(pem_certificate):\n    \"\"\"\n    Parses a serial number from a PEM-encoded certificate.\n    \"\"\"\n    x509_cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, pem_certificate)\n    x509_cert.get_notAfter()\n    parsed_certificate = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, pem_certificate)\n    return parsed_certificate.get_serial_number()\n\n\ndef data_encrypt(data):\n    \"\"\"\n    takes an input and returns a base64 encoded encryption\n    reusing the Vault DB encryption module\n    :param data: string\n    :return: base64 ciphertext\n    \"\"\"\n    if not isinstance(data, str):\n        data = str(data)\n    ciphertext = Vault().process_bind_param(data, TEXT())\n    return ciphertext.decode(\"utf8\")\n\n\ndef data_decrypt(ciphertext):\n    \"\"\"\n    takes a ciphertext and returns the respective string\n    reusing the Vault DB encryption module\n    :param ciphertext: base64 ciphertext\n    :return: plaintext string\n    \"\"\"\n    return Vault().process_result_value(ciphertext.encode(\"utf8\"), TEXT())\n\n\ndef is_json(json_input):\n    \"\"\"\n    Test if input is json\n    :param json_input:\n    :return: True or False\n    \"\"\"\n    try:\n        json.loads(json_input)\n    except ValueError:\n        return False\n    return True\n\n\ndef drop_last_cert_from_chain(full_chain: str) -> str:\n    \"\"\"\n    drops the last certificate from a certificate chai, if more than one CA/subCA in the chain\n    :param full_chain: string of a certificate chain\n    :return:  string of a new certificate chain, omitting the last certificate\n    \"\"\"\n    if full_chain == '' or full_chain.count(\"BEGIN CERTIFICATE\") <= 1:\n        return full_chain\n    full_chain_certs = CERT_PEM_REGEX.findall(full_chain.encode())\n    pem_certificate = OpenSSL.crypto.dump_certificate(\n        OpenSSL.crypto.FILETYPE_PEM,\n        OpenSSL.crypto.load_certificate(\n            OpenSSL.crypto.FILETYPE_PEM, ''.join(cert.decode() for cert in full_chain_certs[:-1])\n        ),\n    ).decode()\n    return pem_certificate\n", "# This is just Python which means you can inherit and tweak settings\n\nimport base64\nimport os\nimport random\nimport string\n\n_basedir = os.path.abspath(os.path.dirname(__file__))\n\n\n# generate random secrets for unittest\ndef get_random_secret(length):\n    secret_key = ''.join(random.choice(string.ascii_uppercase) for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(random.choice(\"~!@#$%^&*()_+\") for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(random.choice(string.ascii_lowercase) for x in range(round(length / 4)))\n    return secret_key + ''.join(random.choice(string.digits) for x in range(round(length / 4)))\n\n\nTHREADS_PER_PAGE = 8\n\n# General\n\n# These will need to be set to `True` if you are developing locally\nCORS = False\ndebug = False\n\nTESTING = True\n\n# this is the secret key used by flask session management (utf8 encoded)\nSECRET_KEY = get_random_secret(length=32).encode('utf8')\n\n\n# You should consider storing these separately from your config (should be URL-safe)\nLEMUR_TOKEN_SECRET = \"test\"\nLEMUR_ENCRYPTION_KEYS = base64.urlsafe_b64encode(get_random_secret(length=32).encode('utf8'))\n\n\n# this is the secret used to generate oauth state tokens\nOAUTH_STATE_TOKEN_SECRET = base64.b64encode(get_random_secret(32).encode('utf8'))\n\nOAUTH_STATE_TOKEN_STALE_TOLERANCE_SECONDS = 15\n\n# List of domain regular expressions that non-admin users can issue\nLEMUR_ALLOWED_DOMAINS = [\n    r\"^[a-zA-Z0-9-]+\\.example\\.com$\",\n    r\"^[a-zA-Z0-9-]+\\.example\\.org$\",\n    r\"^example\\d+\\.long\\.com$\",\n]\n\n# Mail Server\n\n# Lemur currently only supports SES for sending email, this address\n# needs to be verified\nLEMUR_EMAIL = \"lemur@example.com\"\nLEMUR_SECURITY_TEAM_EMAIL = [\"security@example.com\"]\n\nLEMUR_HOSTNAME = \"lemur.example.com\"\n\n# Logging\n\nLOG_LEVEL = \"DEBUG\"\nLOG_FILE = \"lemur.log\"\n\nLEMUR_DEFAULT_COUNTRY = \"US\"\nLEMUR_DEFAULT_STATE = \"California\"\nLEMUR_DEFAULT_LOCATION = \"Los Gatos\"\nLEMUR_DEFAULT_ORGANIZATION = \"Example, Inc.\"\nLEMUR_DEFAULT_ORGANIZATIONAL_UNIT = \"Example\"\n\nLEMUR_ALLOW_WEEKEND_EXPIRATION = False\n\n# needed for test_certificates\nLEMUR_PORTS_FOR_DEPLOYED_CERTIFICATE_CHECK = [443, 65521, 65522, 65523, 65524]\n\n# needed for test_messaging\nLEMUR_REISSUE_NOTIFICATION_EXCLUDED_DESTINATIONS = ['excluded-destination']\n\n# Database\n\n# modify this if you are not using a local database. Do not use any development or production DBs,\n# as Unit Tests drop the whole schema, recreate and again drop everything at the end\nSQLALCHEMY_DATABASE_URI = os.getenv(\n    \"SQLALCHEMY_DATABASE_URI\", \"postgresql://lemur:lemur@localhost:5432/lemur\"\n)\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n\n# AWS\nLEMUR_INSTANCE_PROFILE = \"Lemur\"\n\n# Issuers\n\n# These will be dependent on which 3rd party that Lemur is\n# configured to use.\n\n# CLOUDCA_URL = ''\n# CLOUDCA_PEM_PATH = ''\n# CLOUDCA_BUNDLE = ''\n\n# number of years to issue if not specified\n# CLOUDCA_DEFAULT_VALIDITY = 2\n\n\nDIGICERT_URL = \"mock://www.digicert.com\"\nDIGICERT_ORDER_TYPE = \"ssl_plus\"\nDIGICERT_API_KEY = \"api-key\"\nDIGICERT_ORG_ID = 111111\nDIGICERT_ROOT = \"ROOT\"\n\nDIGICERT_CIS_URL = \"mock://www.digicert.com\"\nDIGICERT_CIS_PROFILE_NAMES = {\"sha2-rsa-ecc-root\": \"ssl_plus\"}\nDIGICERT_CIS_API_KEY = \"api-key\"\nDIGICERT_CIS_ROOTS = {\"root\": \"ROOT\"}\n\nVERISIGN_URL = \"http://example.com\"\nVERISIGN_PEM_PATH = \"~/\"\nVERISIGN_FIRST_NAME = \"Jim\"\nVERISIGN_LAST_NAME = \"Bob\"\nVERSIGN_EMAIL = \"jim@example.com\"\n\nACME_AWS_ACCOUNT_NUMBER = \"11111111111\"\n\nACME_PRIVATE_KEY = \"\"\"\n-----BEGIN RSA PRIVATE KEY-----\nMIIJJwIBAAKCAgEA0+jySNCc1i73LwDZEuIdSkZgRYQ4ZQVIioVf38RUhDElxy51\n4gdWZwp8/TDpQ8cVXMj6QhdRpTVLluOz71hdvBAjxXTISRCRlItzizTgBD9CLXRh\nvPLIMPvAJH7JZxp9xW5oVYUcHBveQJ5tQvnP7RgPykejl7DPKm/SGKYealnoGPcP\nU9ipz2xXlVlx7ZKivLbaijh2kD/QE9pC//CnP31g3QFCsxOTLAWtICz5VbvaWuTT\nwhqFs5cT3kKYAW/ccPcty573AX/9Y/UZ4+B3wxXY3/6GYPMcINRuu/7Srs3twlNu\nudoTNdM9SztWMYUzz1SMYad9v9LLGTrv+5Tog4YsqMFxyKrBBBz8/bf1lKwyfAW+\nokvVe+1bUY8iSDuDx1O0iMyHe5w8lxsoTy91ujjr1cQDyJR70TKQpeBmfNtBVnW+\nD8E6Xw2yCuL9XTyBApldzQ/J1ObPd1Hv+yzhEx4VD9QOmQPn7doiapTDYfW51o1O\nMo+zuZgsclhePvzqN4/6VYXZnPE68uqx982u0W82tCorRUtzfFoO0plNRCjmV7cw\n0fp0ie3VczUOH9gj4emmdQd1tVA/Esuh3XnzZ2ANwohtPytn+I3MX0Q+5k7AcRlt\nAyI80x8CSiDStI6pj3BlPJgma9G8u7r3E2aqW6qXCexElTCaH2t8A7JWI80CAwEA\nAQKCAgBDXLyQGwiQKXPYFDvs/cXz03VNA9/tdQV/SzCT8FQxhXIN5B4DEPQNY08i\nKUctjX6j9RtgoQsKKmvx9kY/omaBntvQK/RzDXpJrx62tMM1dmpyCpn7N24d7BlD\nQK6DQO+UMCmobdzmrpEzF2mCLelD5C84zRca5FCmm888mKn4gsX+EaNksu4gCr+4\nsSs/KyriNHo6EALYjgB2Hx7HP1fbHd8JwhnS1TkmeFN1c/Z6o3GhDTancEjqMu9U\n6vRpGIcJvflnzguVBXumJ8boInXPpQVBBybucLmTUhQ1XKbafInFCUKcf881gAXv\nAVi/+yjiEm1hqZ2WucpoJc0du1NBz/MP+/MxHGQ/5eaEMIz5X2QcXzQ4xn5ym0sk\nHy0SmH3v/9by1GkK5eH/RTV/8bmtb8Qt0+auLQ6/ummFDjPw866Or4FdL3tx2gug\nfONjaZqypee+EmlLG1UmMejjCblmh0bymAHnFkf7tAJsLGd8I00PQiObEqaqd03o\nxiYUvrbDpCHah4gB7Uv3AgrHVTbcHsEWmXuNDooD0sSXCFMf3cA81M8vGfkypqi/\nixxZtxtdTU5oCFwI9zEjnQvdA1IZMUAmz8vLwn/fKgENek9PAV3voQr1c0ctZPvy\nS/k7HgJt+2Wj7Pqb4mwPgxeYVSBEM7ygOq6Gdisyhi8DP0A2fQKCAQEA6iIrSqQM\npVDqhQsk9Cc0b4kdsG/EM66M7ND5Q2GLiPPFrR59Hm7ViG6h2DhwqSnSRigiO+TN\njIuvD/O0kbmCUZSar19iKPiJipENN+AX3MBm1cS5Oxp6jgY+3jj4KgDQPYmL49fJ\nCojnmLKjrAPoUi4f/7s4O1rEAghXPrf5/9coaRPORiNi+bZK0bReJwf1GE/9CPqs\nFiZrQNz+/w/1MwFisG6+g0/58fp9j9r6l8JXETjpyO5F+8W8bg8M4V7aoYt5Ec2X\n+BG6Gq06Tvm2UssYa6iEVNSKF39ssBzKKALi4we/fcfwjq4bCTKMCjV0Tp3zY/FG\n1VyDtMGKrlPnOwKCAQEA57Nw+qdh2wbihz1uKffcoDoW6Q3Ws0mu8ml+UvBn48Ur\n41PKrvIb8lhVY7ZiF2/iRyodua9ztE4zvgGs7UqyHaSYHR+3mWeOAE2Hb/XiNVgu\nJVupTXLpx3y7d9FxvrU/27KUxhJgcbVpIGRiMn5dmY2S86EYKX1ObjZKmwvFc6+n\n1YWgtI2+VOKe5+0ttig6CqzL9qJLZfL6QeAy0yTp/Wz+G1c06XTL87QNeU7CXN00\nrB7I4n1Xn422rZnE64MOsARVChyE2fUC9syfimoryR9yIL2xor9QdjL2tK6ziyPq\nWgedY4bDjZLM5KbcHcRng0j5WCJV+pX9Hh1c4n5AlwKCAQAxjun68p56n5YEc0dv\nJp1CvpM6NW4iQmAyAEnCqXMPmgnNixaQyoUIS+KWEdxG8kM/9l7IrrWTej2j8sHV\n1p5vBjV3yYjNg04ZtnpFyXlDkLYzqWBL0l7+kPPdtdFRkrqBTAwAPjyfrjrXZ3id\ngHY8bub3CnnsllnG1F0jOW4BaVl0ZGzVC8h3cs6DdNo5CMYoT0YQEH88cQVixWR0\nOLx9/10UW1yYDuWpAoxxVriURt6HFrTlgwntMP2hji37xkggyZTm3827BIWP//rH\nnLOq8rJIl3LrQdG5B4/J904TCglcZNdzmE6i5Nd0Ku7ZelcUDPrnvLpxjxORvyXL\noJbhAoIBAD7QV9WsIQxG7oypa7828foCJYni9Yy/cg1H6jZD9HY8UuybH7yT6F2n\n8uZIYIloDJksYsifNyfvd3mQbLgb4vPEVnS2z4hoGYgdfJUuvLeng0MfeWOEvroV\nJ6GRB1wjOP+vh0O3YawR+UEN1c1Iksl5JxijWLCOxv97+nfUFiCJw19QjcPFFY9f\nrKLFmvniJ/IS7GydjQFDgPLw+/Zf8IuCy9TPrImJ32zfKDP11R1l3sy2v9EfF+0q\ndxbTNB6A9i9jzUYjeyS3lqkfyjS1Gc+5lbAonQq5APA6WsWbAxO6leL4Y4PC2ir8\nXE20qsHrKADgfLCXBmYb2XYbkb3ZalsCggEAfOuB9/eLMSmtney3vDdZNF8fvEad\nDF+8ss8yITNQQuC0nGdXioRuvSyejOxtjHplMT5GXsgLp1vAujDQmGTv/jK+EXsU\ncRe4df5/EbRiUOyx/ZBepttB1meTnsH6cGPN0JnmTMQHQvanL3jjtjrC13408ONK\n1yK2S4xJjKYFLT86SjKvV6g5k49ntLYk59nviqHl8bYzAVMoEjb62Z+hERwd/2hx\nomsEEjDt4qVqGvSyy+V/1EhqGPzm9ri3zapnorf69rscuXYYsMBZ8M6AtSio4ldB\nLjCRNS1lR6/mV8AqUNR9Kn2NLQyJ76yDoEVLulKZqGUsC9STN4oGJLUeFw==\n-----END RSA PRIVATE KEY-----\n\"\"\"\n\nACME_ROOT = \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIFjTCCA3WgAwIBAgIRANOxciY0IzLc9AUoUSrsnGowDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTYxMDA2MTU0MzU1\nWhcNMjExMDA2MTU0MzU1WjBKMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg\nRW5jcnlwdDEjMCEGA1UEAxMaTGV0J3MgRW5jcnlwdCBBdXRob3JpdHkgWDMwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCc0wzwWuUuR7dyXTeDs2hjMOrX\nNSYZJeG9vjXxcJIvt7hLQQWrqZ41CFjssSrEaIcLo+N15Obzp2JxunmBYB/XkZqf\n89B4Z3HIaQ6Vkc/+5pnpYDxIzH7KTXcSJJ1HG1rrueweNwAcnKx7pwXqzkrrvUHl\nNpi5y/1tPJZo3yMqQpAMhnRnyH+lmrhSYRQTP2XpgofL2/oOVvaGifOFP5eGr7Dc\nGu9rDZUWfcQroGWymQQ2dYBrrErzG5BJeC+ilk8qICUpBMZ0wNAxzY8xOJUWuqgz\nuEPxsR/DMH+ieTETPS02+OP88jNquTkxxa/EjQ0dZBYzqvqEKbbUC8DYfcOTAgMB\nAAGjggFnMIIBYzAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADBU\nBgNVHSAETTBLMAgGBmeBDAECATA/BgsrBgEEAYLfEwEBATAwMC4GCCsGAQUFBwIB\nFiJodHRwOi8vY3BzLnJvb3QteDEubGV0c2VuY3J5cHQub3JnMB0GA1UdDgQWBBSo\nSmpjBH3duubRObemRWXv86jsoTAzBgNVHR8ELDAqMCigJqAkhiJodHRwOi8vY3Js\nLnJvb3QteDEubGV0c2VuY3J5cHQub3JnMHIGCCsGAQUFBwEBBGYwZDAwBggrBgEF\nBQcwAYYkaHR0cDovL29jc3Aucm9vdC14MS5sZXRzZW5jcnlwdC5vcmcvMDAGCCsG\nAQUFBzAChiRodHRwOi8vY2VydC5yb290LXgxLmxldHNlbmNyeXB0Lm9yZy8wHwYD\nVR0jBBgwFoAUebRZ5nu25eQBc4AIiMgaWPbpm24wDQYJKoZIhvcNAQELBQADggIB\nABnPdSA0LTqmRf/Q1eaM2jLonG4bQdEnqOJQ8nCqxOeTRrToEKtwT++36gTSlBGx\nA/5dut82jJQ2jxN8RI8L9QFXrWi4xXnA2EqA10yjHiR6H9cj6MFiOnb5In1eWsRM\nUM2v3e9tNsCAgBukPHAg1lQh07rvFKm/Bz9BCjaxorALINUfZ9DD64j2igLIxle2\nDPxW8dI/F2loHMjXZjqG8RkqZUdoxtID5+90FgsGIfkMpqgRS05f4zPbCEHqCXl1\neO5HyELTgcVlLXXQDgAWnRzut1hFJeczY1tjQQno6f6s+nMydLN26WuU4s3UYvOu\nOsUxRlJu7TSRHqDC3lSE5XggVkzdaPkuKGQbGpny+01/47hfXXNB7HntWNZ6N2Vw\np7G6OfY+YQrZwIaQmhrIqJZuigsrbe3W+gdn5ykE9+Ky0VgVUsfxo52mwFYs1JKY\n2PGDuWx8M6DlS6qQkvHaRUo0FMd8TsSlbF0/v965qGFKhSDeQoMpYnwcmQilRh/0\nayLThlHLN81gSkJjVrPI0Y8xCVPB4twb1PFUd2fPM3sA1tJ83sZ5v8vgFv2yofKR\nPB0t6JzUA81mSqM3kxl5e+IZwhYAyO0OTg3/fs8HqGTNKd9BqoUwSRBzp06JMg5b\nrUCGwbCUDI0mxadJ3Bz4WxR6fyNpBK2yAinWEsikxqEt\n-----END CERTIFICATE-----\n\"\"\"\nACME_URL = \"https://acme-v01.api.letsencrypt.org\"\nACME_EMAIL = \"jim@example.com\"\nACME_TEL = \"4088675309\"\nACME_DIRECTORY_URL = \"https://acme-v01.api.letsencrypt.org\"\nACME_DISABLE_AUTORESOLVE = True\nACME_PREFERRED_ISSUER = \"R3\"\n\nLDAP_AUTH = True\nLDAP_BIND_URI = \"ldap://localhost\"\nLDAP_BASE_DN = \"dc=example,dc=com\"\nLDAP_EMAIL_DOMAIN = \"example.com\"\nLDAP_REQUIRED_GROUP = \"Lemur Access\"\nLDAP_DEFAULT_ROLE = \"role1\"\n\nALLOW_CERT_DELETION = True\n\nENTRUST_API_CERT = \"api-cert\"\nENTRUST_API_KEY = get_random_secret(32)\nENTRUST_API_USER = \"user\"\nENTRUST_API_PASS = get_random_secret(32)\nENTRUST_URL = \"https://api.entrust.net/enterprise/v2\"\nENTRUST_ROOT = \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC\nVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50\ncnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs\nIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz\ndCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy\nNTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu\ndHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt\ndGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0\naG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj\nYXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T\nRU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN\ncCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW\nwcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1\nU1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0\njaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP\nBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN\nBgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/\njTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ\nRkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v\n1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R\nnAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH\nVHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==\n-----END CERTIFICATE-----\n\"\"\"\nENTRUST_NAME = \"lemur\"\nENTRUST_EMAIL = \"lemur@example.com\"\nENTRUST_PHONE = \"123456\"\nENTRUST_ISSUING = \"\"\nENTRUST_PRODUCT_ENTRUST = \"ADVANTAGE_SSL\"\n\nAWS_ELB_IGNORE_TAG = \"lemur-test-ignore\"\n"], "fixing_code": ["Changelog\n=========\n\nUnreleased\n~~~~~~~~~~~~~~~~~~~~\n\n\n1.3.2 - `2023-02-24`\n~~~~~~~~~~~~~~~~~~~~\nThis release contains a fix for a security vulnerability.\n\n1.3.1 - `2023-02-15`\n~~~~~~~~~~~~~~~~~~~~\nThis release contains no changes.\n\n1.3.0 - `2023-02-13`\n~~~~~~~~~~~~~~~~~~~~\nThis release contains many dependency updates, and numerous added or improved features over the last year.\n\nSome of the notable changes in this release are:\n- Removal of AWS S3 destinations and the respetive resources via the UI\n- No fine-grained authz for role global_cert_issuer\n- De-activate endpoint (Entrust Plugin)\n- Remove unsafe paginate method and replace with sort_and_page\n- Move to github workflows for tests\n- Detect duplicate certs\n- Metrics for certificate expiry\n- Sync source: handling idle/invalidated connection\n- Sync endpoint: capture error and continue\n- Domain-level fine-grained authz \n- Handle and report authz warmup exception\n- Ensure secondary certificates are not removed when rotating AWS endpoints\n- Improved metric around expired endpoints\n- Change pkg_resources call in plugin loading to use resolve rather than load\n- Log when an expiring deployed certificate is detected \n- NS1 DNS ACME Plugin\n- Add a new endpoint that allows updating a certificate owner\n- Support rotating endpoints with non-unique names via CLI\n- Restrict multiple accounts on a certificate, by plugin\n- Moving to dependabot's auto versioning strategy\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `Neil Schelly <https://github.com/neilschelly>`_\n- `Mitch Cail <https://github.com/mitchcail>`_\n- `Bob Shannon <https://github.com/bobmshannon>`_\n- `alwaysjolley <https://github.com/alwaysjolley>`_\n\n\n1.2.0 - `2022-01-31`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release fixes a vulnerability where creating an authority automatically granted the selected owner role to the\nauthority creator, which allowed users to grant themselves to arbitrary roles. The owner role is no longer auto-assigned\nwhen creating an authority.\n\nAdditionally, all authorities now receive a unique role upon creation. Previously, authorities using the same issuer\nplugin would always share a role (for example, Entrust authorities always used the role \"entrust\"). Now, authorities\nare associated with a unique role named in the format `issuerPlugin_authority_name_admin`. The creator will not be\nautomatically added to this role.\n\nOther notable changes:\n- The Endpoints UI page now displays endpoint source and allows filtering by source\n\n\n1.1.0 - `2022-01-10`\n~~~~~~~~~~~~~~~~~~~~\n\nIntroducing new Plugins AuthorizationPlugin(Plugin) and DomainAuthorizationPlugin(AuthorizationPlugin).\nOne can implement a DomainAuthorizationPlugin to check if caller is authorized to issue a certificate\nfor a given Common Name and Subject Alternative Name (SAN) of type DNSName (PR `#3889 <https://github.com/Netflix/lemur/pull/3889>`_)\n\nRelated to the above change (PR `#3889 <https://github.com/Netflix/lemur/pull/3889>`_), a new column `application_name`\nis added to the `api_keys` table. Null values are allowed making sure this change is backward compatible.\n\nOther notable changes:\n- A task name is fixed from `identity_expiring_deployed_certificates` -> `identify_expiring_deployed_certificates`. The\nold task name with typo is marked as deprecated and will be removed in future release flagging it as a breaking change.\n(Thanks to `Bob Shannon <https://github.com/bobmshannon>`_)\n- ID filter on certificates UI requires a numeric value.\n\n\n1.0.0 - `2022-01-06`\n~~~~~~~~~~~~~~~~~~~~\n\nThis is our first major release due to a dependency on Python 3.8.\nLemur is now using flake8>=4.0 and pyflakes>=2.4, requiring Python 3.8 or higher.\nOur GitHub Actions Builds are currently on Python 3.8 and Python 3.9.\n\n\n0.11.0 - `2022-01-05`\n~~~~~~~~~~~~~~~~~~~~~\n\nThis release includes multiple improvements on many fronts.\nThe next release will be a major release, requiring Python 3.8 or higher.\n\nSome of the notable changes in this release are:\n\n- CloudFront Plugin: a new endpoint with rotation support\n- Improved Endpoint expiration flow; the Sync job now expires old endpoints\n- AWS ELB tag supports to opt-out of auto-rotate for load balancers\n- Membership plugin\n- Moving Travis Build to Node 16\n- OAuth2 & Ping Config improvement\n- Improved Certificate status check\n- Improved ACME plugin:\n    - reuse existing domain validation resulting in faster issuance\n    - IP certificate issuance support, accompanied by UI support\n    - emit remaining domain validation\n- Azure destination: Switch to PCKS12 upload\n- Improved logs, such as:\n    - Warning logs for admin role assignment and authority creation\n    - Audit logs in JSON format for better search\n    - Improved SES logging\n\nSpecial thanks to all who contributed to this release, notably:\n- `Bob Shannon <https://github.com/bobmshannon>`_\n- `sirferl <https://github.com/sirferl>`_\n- `Sam Havron <https://github.com/havron>`_\n- `Guillaume Dumont <https://github.com/dumontg>`_\n- `Joe McRobot <https://github.com/JoeMcRobot>`_\n\n\n0.10.0 - `2021-06-28`\n~~~~~~~~~~~~~~~~~~~~~\n\nThis release introduces a breaking change (PR `#3646 <https://github.com/Netflix/lemur/pull/3646>`_) to the following API endpoint: \n\n- `POST /certificates/1/update/notify <https://lemur.readthedocs.io/en/latest/developer/index.html#lemur.certificates.views.Certificates.post>`_\n\nThe endpoint is now:\n\n- `POST /certificates/1/update/switches <https://lemur.readthedocs.io/en/latest/developer/index.html#lemur.certificates.views.Certificates.post>`_\n\nThe new endpoint honors the existing `notify` request parameter, and additionally accepts a new `rotation` parameter. \nAs a result of this change, the certificate table view now includes rotation switches and filtering by rotation status.\n\n\nOther notable changes in this release:\n\n- ACME:\n    - New celery task to prevent duplicate certificates from being autorotated\n    - ACME DNS-01 Challenges are supported in synchronous mode\n    - DNS provider check fails gracefully if not found\n- Authentication:\n    - SSO auth now returns a newly created user during initial login\n    - CSRF protection is added to OAuth2.0\n- Notifications:\n    - New reissue failed notification\n    - New reissue with no endpoints notification\n    - New revocation notification\n- Plugins:\n    - Plugin option values are validated server-side\n    - Some plugin option validations updated to compile successfully server-side\n- Database:\n  - Source and Destination deletions remove certificate associations with new confirmation dialog\n- Dependency updates and conflict resolutions\n- Expanded audit logs\n\nAnd several smaller bugfixes and improvements.\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `havron <https://github.com/havron>`_\n- `tho <https://github.com/tho>`_\n- `mizzy <https://github.com/mizzy>`_\n\n\n0.9.0 - `2021-03-17`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release fixes three critical vulnerabilities where an authenticated user could retrieve/access\nunauthorized information. (Issue `#3463 <https://github.com/Netflix/lemur/issues/3463>`_)\n\n\n0.8.1 - `2021-03-12`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release includes improvements on many fronts, such as:\n\n- Notifications:\n    - Enhanced SNS flow\n    - Expiration Summary\n    - CA expiration email\n- EC algorithm as the default\n- Improved revocation flow\n- Localized AWS STS option\n- Improved Lemur doc building\n- ACME:\n    - reduced failed attempts to 3x trials\n    - support for selecting the chain (Let's Encrypt X1 transition)\n    - revocation\n    - http01 documentation\n- Entrust:\n    - Support for cross-signed intermediate CA\n- Revised disclosure process\n- Dependency updates and conflict resolutions\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `peschmae  <https://github.com/peschmae>`_\n- `atugushev  <https://github.com/atugushev>`_\n- `sirferl   <https://github.com/sirferl>`_\n\n\n\n0.8.0 - `2020-11-13`\n~~~~~~~~~~~~~~~~~~~~\n\nThis release comes after more than two years and contains many interesting new features and improvements.\nIn addition to multiple new plugins, such as ACME-http01, ADCS, PowerDNS, UltraDNS, Entrust, SNS, many of Lemur's existing\nflows have improved.\n\nIn the future, we plan to do frequent releases.\n\n\nSummary of notable changes:\n\n- AWS S3 plugin: added delete, get methods, and support for uploading/deleting acme tokens\n- ACME plugin:\n    - revamp of the plugin\n    - support for http01 domain validation, via S3 and SFTP as destination for the acme token\n    - support for CNAME delegated domain validation\n    - store-acme-account-details\n- PowerDNS plugin\n- UltraDNS plugin\n- ADCS plugin\n- SNS plugin\n- Entrust plugin\n- Rotation:\n    - respecting keyType and extensions\n    - region-by-region rotation option\n    - default to auto-rotate when cert attached to endpoint\n    - default to 1y validity during rotation for multi-year browser-trusted certs\n- Certificate: search_by_name, and important performance improvements\n- UI\n    - reducing the EC curve options to the relevant ones\n    - edit option for notifications, destinations and sources\n    - showing 13 month validity as default\n    - option to hide certs expired since 3month\n    - faster Permalink (no search involved)\n    - commonName Auto Added as DNS in the UI\n    - improved search and cert lookup\n- celery tasks instead of crone, for better logging and monitoring\n- countless bugfixes\n    - group-lookup-fix-referral\n    - url_context_path\n    - duplicate notification\n    - digicert-time-bug-fix\n    - improved-csr-support\n    - fix-cryptography-intermediate-ca\n    - enhanced logging\n    - vault-k8s-auth\n    - cfssl-key-fix\n    - cert-sync-endpoint-find-by-hash\n    - nlb-naming-bug\n    - fix_vault_api_v2_append\n    - aid_openid_roles_provider_integration\n    - rewrite-java-keystore-use-pyjks\n    - vault_kv2\n\n\nTo see the full list of changes, you can run\n\n    $ git log --merges --first-parent master         --pretty=format:\"%h %<(10,trunc)%aN %C(white)%<(15)%ar%Creset %C(red bold)%<(15)%D%Creset %s\" | grep -v \"depend\"\n\n\nSpecial thanks to all who contributed to this release, notably:\n\n- `peschmae  <https://github.com/peschmae>`_\n- `sirferl   <https://github.com/sirferl>`_\n- `lukasmrtvy  <https://github.com/lukasmrtvy>`_\n- `intgr  <https://github.com/intgr>`_\n- `kush-bavishi  <https://github.com/kush-bavishi>`_\n- `alwaysjolley  <https://github.com/alwaysjolley>`_\n- `jplana <https://github.com/jplana>`_\n- `explody <https://github.com/explody>`_\n- `titouanc <https://github.com/titouanc>`_\n- `jramosf <https://github.com/jramosf>`_\n\n\nUpgrading\n---------\n\n.. note:: This release will need a migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n\n0.7 - `2018-05-07`\n~~~~~~~~~~~~~~~~~~\n\nThis release adds LetsEncrypt support with DNS providers Dyn, Route53, and Cloudflare, and expands on the pending certificate functionality.\nThe linux_dst plugin will also be deprecated and removed.\n\nThe pending_dns_authorizations and dns_providers tables were created. New columns\nwere added to the certificates and pending_certificates tables, (For the DNS provider ID), and authorities (For options).\nPlease run a database migration when upgrading.\n\nThe Let's Encrypt flow will run asynchronously. When a certificate is requested through the acme-issuer, a pending certificate\nwill be created. A cron needs to be defined to run `lemur pending_certs fetch_all_acme`. This command will iterate through all of the pending\ncertificates, request a DNS challenge token from Let's Encrypt, and set the appropriate _acme-challenge TXT entry. It will\nthen iterate through and resolve the challenges before requesting a certificate for each pending certificate. If a certificate\nis successfully obtained, the pending_certificate will be moved to the certificates table with the appropriate properties.\n\nSpecial thanks to all who helped with this release, notably:\n\n- The folks at Cloudflare\n- dmitryzykov\n- jchuong\n- seils\n- titouanc\n\n\nUpgrading\n---------\n\n.. note:: This release will need a migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n0.6 - `2018-01-02`\n~~~~~~~~~~~~~~~~~~\n\nHappy Holidays! This is a big release with lots of bug fixes and features. Below are the highlights and are not exhaustive.\n\n\nFeatures:\n\n* Per-certificate rotation policies, requires a database migration. The default rotation policy for all certificates is 30 days. Every certificate will gain a policy regardless of if auto-rotation is used.\n* Adds per-user API Keys, allows users to issue multiple long-lived API tokens with the same permission as the user creating them.\n* Adds the ability to revoke certificates from the Lemur UI/API, this is currently only supported for the digicert CIS and cfssl plugins.\n* Allow destinations to support an export function. Useful for file system destinations e.g. S3 to specify the export plugin you wish to run before being sent to the destination.\n* Adds support for uploading certificates to Cloudfront.\n* Re-worked certificate metadata pane for improved readability.\n* Adds support for LDAP user authentication\n\nBugs:\n\n* Closed `#767 <https://github.com/Netflix/lemur/issues/767>`_ - Fixed issue with login redirect loop.\n* Closed `#792 <https://github.com/Netflix/lemur/issues/792>`_ - Fixed an issue with a unique constraint was violated when replacing certificates.\n* Closed `#752 <https://github.com/Netflix/lemur/issues/752>`_ - Fixed an internal server error when validating notification units.\n* Closed `#684 <https://github.com/Netflix/lemur/issues/684>`_ - Fixed migration failure when null values encountered.\n* Closes `#661 <https://github.com/Netflix/lemur/issues/661>`_ - Fixed an issue where default values were missing during clone operations.\n\n\nSpecial thanks to all who helped with this release, notably:\n\n- intgr\n- SecurityInsanity\n- johanneslange\n- RickB17\n- pr8kerl\n- bunjiboys\n\nSee the full list of issues closed in `0.6 <https://github.com/Netflix/lemur/milestone/5>`_.\n\nUpgrading\n---------\n\n.. note:: This release will need a migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n\n0.5 - `2016-04-08`\n~~~~~~~~~~~~~~~~~~\n\nThis release is most notable for dropping support for python2.7. All Lemur versions >0.4 will now support python3.5 only.\n\nBig thanks to neilschelly for quite a lot of improvements to the `lemur-cryptography` plugin.\n\nOther Highlights:\n\n* Closed `#501 <https://github.com/Netflix/lemur/issues/501>`_ - Endpoint resource as now kept in sync via an expiration mechanism. Such that non-existant endpoints gracefully fall out of Lemur. Certificates are never removed from Lemur.\n* Closed `#551 <https://github.com/Netflix/lemur/pull/551>`_ - Added the ability to create a 4096 bit key during certificate creation. Closed `#528 <https://github.com/Netflix/lemur/pull/528>`_ to ensure that issuer plugins supported the new 4096 bit keys.\n* Closed `#566 <https://github.com/Netflix/lemur/issues/566>`_ - Fixed an issue changing the notification status for  certificates without private keys.\n* Closed `#594 <https://github.com/Netflix/lemur/issues/594>`_ - Added `replaced` field indicating if a certificate has been superseded.\n* Closed `#602 <https://github.com/Netflix/lemur/issues/602>`_ - AWS plugin added support for ALBs for endpoint tracking.\n\n\nSpecial thanks to all who helped with this release, notably:\n\n- RcRonco\n- harmw\n- jeremyguarini\n\nSee the full list of issues closed in `0.5 <https://github.com/Netflix/lemur/milestone/4>`_.\n\nUpgrading\n---------\n\n.. note:: This release will need a slight migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n0.4 - `2016-11-17`\n~~~~~~~~~~~~~~~~~~\n\nThere have been quite a few issues closed in this release. Some notables:\n\n* Closed `#284 <https://github.com/Netflix/lemur/issues/284>`_ - Created new models for `Endpoints` created associated AWS ELB endpoint tracking code. This was the major stated goal of this milestone and should serve as the basis for future enhancements of Lemur's certificate 'deployment' capabilities.\n* Closed `#334 <https://github.com/Netflix/lemur/issues/334>`_ - Lemur not has the ability to restrict certificate expiration dates to weekdays.\n\nSeveral fixes/tweaks to Lemurs python3 support (thanks chadhendrie!)\n\nThis will most likely be the last release to support python2.7 moving Lemur to target python3 exclusively. Please comment\non issue #340 if this negatively affects your usage of Lemur.\n\nSee the full list of issues closed in `0.4 <https://github.com/Netflix/lemur/milestone/3>`_.\n\nUpgrading\n---------\n\n.. note:: This release will need a slight migration change. Please follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\n0.3.0 - `2016-06-06`\n~~~~~~~~~~~~~~~~~~~~\n\nThis is quite a large upgrade, it is highly advised you backup your database before attempting to upgrade as this release\nrequires the migration of database structure as well as data.\n\n\nUpgrading\n---------\n\nPlease follow the `documentation <https://lemur.readthedocs.io/en/latest/administration.html#upgrading-lemur>`_ to upgrade Lemur.\n\n\nSource Plugin Owners\n--------------------\n\nThe dictionary returned from a source plugin has changed keys from `public_certificate` to `body` and `intermediate_certificate` to chain.\n\n\nIssuer Plugin Owners\n--------------------\n\nThis release may break your plugins, the keys in `issuer_options` have been changed from `camelCase` to `under_score`.\nThis change was made to break an undue reliance on downstream options maintains a more pythonic naming convention. Renaming\nthese keys should be fairly trivial, additionally pull requests have been submitted to affected plugins to help ease the transition.\n\n.. note:: This change only affects issuer plugins and does not affect any other types of plugins.\n\n\n* Closed `#63 <https://github.com/Netflix/lemur/issues/63>`_ - Validates all endpoints with Marshmallow schemas, this allows for\n    stricter input validation and better error messages when validation fails.\n* Closed `#146 <https://github.com/Netflix/lemur/issues/146>`_ - Moved authority type to first pane of authority creation wizard.\n* Closed `#147 <https://github.com/Netflix/lemur/issues/147>`_ - Added and refactored the relationship between authorities and their\n    root certificates. Displays the certificates (and chains) next to the authority in question.\n* Closed `#199 <https://github.com/Netflix/lemur/issues/199>`_ - Ensures that the dates submitted to Lemur during authority and\n    certificate creation are actually dates.\n* Closed `#230 <https://github.com/Netflix/lemur/issues/230>`_ - Migrated authority dropdown to an ui-select based dropdown, this\n    should be easier to determine what authorities are available and when an authority has actually been selected.\n* Closed `#254 <https://github.com/Netflix/lemur/issues/254>`_ - Forces certificate names to be generally unique. If a certificate name\n    (generated or otherwise) is found to be a duplicate we increment by appending a counter.\n* Closed `#275 <https://github.com/Netflix/lemur/issues/275>`_ - Switched to using Fernet generated passphrases for exported items.\n    These are more sounds that pseudo random passphrases generated before and have the nice property of being in base64.\n* Closed `#278 <https://github.com/Netflix/lemur/issues/278>`_ - Added ability to specify a custom name to certificate creation, previously\n    this was only available in the certificate import wizard.\n* Closed `#281 <https://github.com/Netflix/lemur/issues/281>`_ - Fixed an issue where notifications could not be removed from a certificate\n    via the UI.\n* Closed `#289 <https://github.com/Netflix/lemur/issues/289>`_ - Fixed and issue where intermediates were not being properly exported.\n* Closed `#315 <https://github.com/Netflix/lemur/issues/315>`_ - Made how roles are associated with certificates and authorities much more\n    explicit, including adding the ability to add roles directly to certificates and authorities on creation.\n\n\n\n0.2.2 - 2016-02-05\n~~~~~~~~~~~~~~~~~~\n\n* Closed `#234 <https://github.com/Netflix/lemur/issues/234>`_ - Allows export plugins to define whether they need\n    private key material (default is True)\n* Closed `#231 <https://github.com/Netflix/lemur/issues/231>`_ - Authorities were not respecting 'owning' roles and their\n    users\n* Closed `#228 <https://github.com/Netflix/lemur/issues/228>`_ - Fixed documentation with correct filter values\n* Closed `#226 <https://github.com/Netflix/lemur/issues/226>`_ - Fixes issue were `import_certificate` was requiring\n    replacement certificates to be specified\n* Closed `#224 <https://github.com/Netflix/lemur/issues/224>`_ - Fixed an issue where NPM might not be globally available (thanks AlexClineBB!)\n* Closed `#221 <https://github.com/Netflix/lemur/issues/234>`_ - Fixes several reported issues where older migration scripts were\n    missing tables, this change removes pre 0.2 migration scripts\n* Closed `#218 <https://github.com/Netflix/lemur/issues/234>`_ - Fixed an issue where export passphrases would not validate\n\n\n0.2.1 - 2015-12-14\n~~~~~~~~~~~~~~~~~~\n\n* Fixed bug with search not refreshing values\n* Cleaned up documentation, including working supervisor example (thanks rpicard!)\n* Closed #165 - Fixed an issue with email templates\n* Closed #188 - Added ability to submit third party CSR\n* Closed #176 - Java-export should allow user to specify truststore/keystore\n* Closed #176 - Extended support for exporting certificate in P12 format\n\n\n0.2.0 - 2015-12-02\n~~~~~~~~~~~~~~~~~~\n\n* Closed #120 - Error messages not displaying long enough\n* Closed #121 - Certificate create form should not be valid until a Certificate Authority object is available\n* Closed #122 - Certificate API should allow for the specification of preceding certificates\n    You can now target a certificate(s) for replacement. When specified the replaced certificate will be marked as\n    'inactive'. This means that there will be no notifications for that certificate.\n* Closed #139 - SubCA autogenerated descriptions for their certs are incorrect\n* Closed #140 - Permalink does not change with filtering\n* Closed #144 - Should be able to search certificates by domains covered, included wildcards\n* Closed #165 - Cleaned up expiration notification template\n* Closed #160 - Cleaned up quickstart documentation (thanks forkd!)\n* Closed #144 - Now able to search by all domains in a given certificate, not just by common name\n\n\n0.1.5 - 2015-10-26\n~~~~~~~~~~~~~~~~~~\n\n* **SECURITY ISSUE**: Switched from use an AES static key to Fernet encryption.\n  Affects all versions prior to 0.1.5. If upgrading this will require a data migration.\n  see: `Upgrading Lemur <https://lemur.readthedocs.io/administration#UpgradingLemur>`_\n", "import os.path\nimport secrets\nimport string\nfrom celery.schedules import crontab\n\nimport base64\n\n_basedir = os.path.abspath(os.path.dirname(__file__))\n\n# See the Lemur docs (https://lemur.readthedocs.org) for more information on configuration\n\nLOG_LEVEL = str(os.environ.get('LOG_LEVEL', 'DEBUG'))\nLOG_FILE = str(os.environ.get('LOG_FILE', '/home/lemur/.lemur/lemur.log'))\nLOG_JSON = True\n\nCORS = os.environ.get(\"CORS\") == \"True\"\ndebug = os.environ.get(\"DEBUG\") == \"True\"\n\n\ndef get_random_secret(length):\n    secret_key = ''.join(secrets.choice(string.ascii_uppercase) for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(secrets.choice(\"~!@#$%^&*()_+\") for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(secrets.choice(string.ascii_lowercase) for x in range(round(length / 4)))\n    return secret_key + ''.join(secrets.choice(string.digits) for x in range(round(length / 4)))\n\n\n# This is the secret key used by Flask session management\nSECRET_KEY = repr(os.environ.get('SECRET_KEY', get_random_secret(32).encode('utf8')))\n\n# You should consider storing these separately from your config\nLEMUR_TOKEN_SECRET = repr(os.environ.get('LEMUR_TOKEN_SECRET',\n                                         base64.b64encode(get_random_secret(32).encode('utf8'))))\n# This must match the key for whichever DB the container is using - this could be a dump of dev or test, or a unique key\nLEMUR_ENCRYPTION_KEYS = repr(os.environ.get('LEMUR_ENCRYPTION_KEYS',\n                                            base64.b64encode(get_random_secret(32).encode('utf8')).decode('utf8')))\n\n# this is the secret used to generate oauth state tokens\nOAUTH_STATE_TOKEN_SECRET = repr(os.environ.get('OAUTH_STATE_TOKEN_SECRET', base64.b64encode(get_random_secret(32).encode('utf8'))))\n\nREDIS_HOST = 'redis'\nREDIS_PORT = 6379\nREDIS_DB = 0\nCELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}'\nCELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'\nCELERY_IMPORTS = ('lemur.common.celery')\nCELERYBEAT_SCHEDULE = {\n    # All tasks are disabled by default. Enable any tasks you wish to run.\n    # 'fetch_all_pending_acme_certs': {\n    #     'task': 'lemur.common.celery.fetch_all_pending_acme_certs',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(minute=\"*\"),\n    # },\n    # 'remove_old_acme_certs': {\n    #     'task': 'lemur.common.celery.remove_old_acme_certs',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=8, minute=0, day_of_week=5),\n    # },\n    # 'clean_all_sources': {\n    #     'task': 'lemur.common.celery.clean_all_sources',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=5, minute=0, day_of_week=5),\n    # },\n    # 'sync_all_sources': {\n    #     'task': 'lemur.common.celery.sync_all_sources',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=\"*/2\", minute=0),\n    # },\n    # 'report_celery_last_success_metrics': {\n    #     'task': 'lemur.common.celery.report_celery_last_success_metrics',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(minute=\"*\"),\n    # },\n    # 'certificate_reissue': {\n    #     'task': 'lemur.common.celery.certificate_reissue',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=9, minute=0),\n    # },\n    # 'certificate_rotate': {\n    #     'task': 'lemur.common.celery.certificate_rotate',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # },\n    # 'get_all_zones': {\n    #     'task': 'lemur.common.celery.get_all_zones',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(minute=\"*/30\"),\n    # },\n    # 'check_revoked': {\n    #     'task': 'lemur.common.celery.check_revoked',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # }\n    # 'enable_autorotate_for_certs_attached_to_destination': {\n    #     'task': 'lemur.common.celery.enable_autorotate_for_certs_attached_to_destination',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # }\n    # 'enable_autorotate_for_certs_attached_to_endpoint': {\n    #     'task': 'lemur.common.celery.enable_autorotate_for_certs_attached_to_endpoint',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # }\n    # 'notify_expirations': {\n    #     'task': 'lemur.common.celery.notify_expirations',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    #  },\n    # 'notify_authority_expirations': {\n    #     'task': 'lemur.common.celery.notify_authority_expirations',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0),\n    # },\n    # 'send_security_expiration_summary': {\n    #     'task': 'lemur.common.celery.send_security_expiration_summary',\n    #     'options': {\n    #         'expires': 180\n    #     },\n    #     'schedule': crontab(hour=10, minute=0, day_of_week='mon-fri'),\n    # }\n}\nCELERY_TIMEZONE = 'UTC'\n\nSQLALCHEMY_ENABLE_FLASK_REPLICATED = False\nSQLALCHEMY_DATABASE_URI = os.environ.get('SQLALCHEMY_DATABASE_URI', 'postgresql://lemur:lemur@localhost:5432/lemur')\n\nSQLALCHEMY_TRACK_MODIFICATIONS = False\nSQLALCHEMY_ECHO = True\n\nSQLALCHEMY_ENGINE_OPTIONS = {\n    'pool_recycle': 499,\n    'pool_timeout': 20,\n}\n\nLEMUR_EMAIL = 'lemur@example.com'\nLEMUR_SECURITY_TEAM_EMAIL = ['security@example.com']\nLEMUR_SECURITY_TEAM_EMAIL_INTERVALS = [15, 2]\nLEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS = [30, 15, 2]\nLEMUR_EMAIL_SENDER = 'smtp'\n\n# mail configuration\n# MAIL_SERVER = 'mail.example.com'\n\nPUBLIC_CA_MAX_VALIDITY_DAYS = 397\nDEFAULT_VALIDITY_DAYS = 365\n\nLEMUR_OWNER_EMAIL_IN_SUBJECT = False\n\nLEMUR_DEFAULT_COUNTRY = str(os.environ.get('LEMUR_DEFAULT_COUNTRY', 'US'))\nLEMUR_DEFAULT_STATE = str(os.environ.get('LEMUR_DEFAULT_STATE', 'California'))\nLEMUR_DEFAULT_LOCATION = str(os.environ.get('LEMUR_DEFAULT_LOCATION', 'Los Gatos'))\nLEMUR_DEFAULT_ORGANIZATION = str(os.environ.get('LEMUR_DEFAULT_ORGANIZATION', 'Example, Inc.'))\nLEMUR_DEFAULT_ORGANIZATIONAL_UNIT = str(os.environ.get('LEMUR_DEFAULT_ORGANIZATIONAL_UNIT', ''))\n\nLEMUR_DEFAULT_AUTHORITY = str(os.environ.get('LEMUR_DEFAULT_AUTHORITY', 'ExampleCa'))\n\nLEMUR_DEFAULT_ROLE = 'operator'\n\nACTIVE_PROVIDERS = []\nMETRIC_PROVIDERS = []\n\n# Authority Settings - These will change depending on which authorities you are\n# using\ncurrent_path = os.path.dirname(os.path.realpath(__file__))\n\n# DNS Settings\n\n# exclude logging missing SAN, since we can have certs from private CAs with only cn, prod parity\nLOG_SSL_SUBJ_ALT_NAME_ERRORS = False\n\nACME_DNS_PROVIDER_TYPES = {\"items\": [\n    {\n        'name': 'route53',\n        'requirements': [\n            {\n                'name': 'account_id',\n                'type': 'int',\n                'required': True,\n                'helpMessage': 'AWS Account number'\n            },\n        ]\n    },\n    {\n        'name': 'cloudflare',\n        'requirements': [\n            {\n                'name': 'email',\n                'type': 'str',\n                'required': True,\n                'helpMessage': 'Cloudflare Email'\n            },\n            {\n                'name': 'key',\n                'type': 'str',\n                'required': True,\n                'helpMessage': 'Cloudflare Key'\n            },\n        ]\n    },\n    {\n        'name': 'dyn',\n    },\n    {\n        'name': 'ultradns',\n    },\n]}\n\n# Authority plugins which support revocation\nSUPPORTED_REVOCATION_AUTHORITY_PLUGINS = ['acme-issuer']\n", "Configuration\n=============\n\n.. warning::\n    There are many secrets that Lemur uses that must be protected. All of these options are set via the Lemur configuration\n    file. It is highly advised that you do not store your secrets in this file! Lemur provides functions\n    that allow you to encrypt files at rest and decrypt them when it's time for deployment. See :ref:`Credential Management <CredentialManagement>`\n    for more information.\n\n.. note::\n    All configuration values are python strings unless otherwise noted.\n\n\nBasic Configuration\n-------------------\n\n.. data:: LOG_LEVEL\n    :noindex:\n\n    ::\n\n        LOG_LEVEL = \"DEBUG\"\n\n.. data:: LOG_FILE\n    :noindex:\n\n    ::\n\n        LOG_FILE = \"/logs/lemur/lemur-test.log\"\n\n.. data:: LOG_UPGRADE_FILE\n    :noindex:\n\n    ::\n\n        LOG_UPGRADE_FILE = \"/logs/lemur/db_upgrade.log\"\n\n.. data:: DEBUG\n    :noindex:\n\n    Sets the flask debug flag to true (if supported by the webserver)\n\n    ::\n\n        DEBUG = False\n\n    .. warning::\n        This should never be used in a production environment as it exposes Lemur to\n        remote code execution through the debug console.\n\n\n.. data:: CORS\n    :noindex:\n\n    Allows for cross domain requests, this is most commonly used for development but could\n    be use in production if you decided to host the webUI on a different domain than the server.\n\n    Use this cautiously, if you're not sure. Set it to `False`\n\n    ::\n\n        CORS = False\n\n\n.. data:: SQLALCHEMY_DATABASE_URI\n    :noindex:\n\n        If you have ever used sqlalchemy before this is the standard connection string used. Lemur uses a postgres database and the connection string would look something like:\n\n    ::\n\n        SQLALCHEMY_DATABASE_URI = 'postgresql://<user>:<password>@<hostname>:5432/lemur'\n\n\n.. data:: SQLALCHEMY_ENGINE_OPTIONS\n    :noindex:\n\n        This is an optional config that handles all engine_options to SQLAlchemy. \n        Please refer to the `flask-sqlalchemy website <https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/>`_ for \n        more details about the individual configs.\n\n        The default connection pool size is 5 for sqlalchemy managed connections.\n        Depending on the number of Lemur instances, please specify the per instance connection `pool_size`.\n        Below is an example to set connection `pool_size` to 10.\n\n        `max_overflow` allows to create connections in addition to specified number of connections in pool size.\n        By default, sqlalchemy allows 10 connections to create in addition to the pool size.\n        If `pool_size` and `max_overflow` are not specified then each Lemur instance may create maximum of 15 connections.\n\n        `pool_recycle` defines number of seconds after which a connection is automatically recycled.\n\n    ::\n\n        SQLALCHEMY_ENGINE_OPTIONS = {\n            'pool_size': 10,\n            'pool_recycle': 600,\n            'pool_timeout': 20,\n            'max_overflow': 10,\n        }\n\n\n    .. warning::\n        Specifying `pool_size` is an optional setting but important to review and set for optimal database connection usage and for overall database performance.\n        Note that `SQLALCHEMY_POOL_SIZE`, `SQLALCHEMY_MAX_OVERFLOW`, `SQLALCHEMY_POOL_TIMEOUT` are deprecated since sqlalchemy v2.4.\n\n    .. note::\n        Specifying `max_overflow` to 0 will enforce limit to not create connections above specified pool size.\n\n\n\n.. data:: LEMUR_ALLOW_WEEKEND_EXPIRATION\n    :noindex:\n\n        Specifies whether to allow certificates created by Lemur to expire on weekends. Default is True.\n\n.. data:: LEMUR_ALLOWED_DOMAINS\n    :noindex:\n\n        List of regular expressions for domain restrictions; if the list is not empty, normal users can only issue\n        certificates for domain names matching at least one pattern on this list. Administrators are exempt from this\n        restriction.\n\n        Cerificate common name is matched against these rules *if* it does not contain a space. SubjectAltName DNS names\n        are always matched against these rules.\n\n        Take care to write patterns in such way to not allow the `*` wildcard character inadvertently. To match a `.`\n        character, it must be escaped (as `\\.`).\n\n.. data:: LEMUR_OWNER_EMAIL_IN_SUBJECT\n    :noindex:\n\n        By default, Lemur will add the certificate owner's email address to certificate subject (for CAs that allow it).\n        Set this to `False` to disable this.\n\n.. data:: LEMUR_TOKEN_SECRET\n    :noindex:\n\n        The TOKEN_SECRET is the secret used to create JWT tokens that are given out to users. This should be securely generated and kept private.\n\n    ::\n\n        LEMUR_TOKEN_SECRET = 'supersecret'\n\n    An example of how you might generate a random string:\n\n        >>> import secrets\n        >>> secret_key = ''.join(secrets.choice(string.ascii_uppercase) for x in range(6))\n        >>> secret_key = secret_key + ''.join(secrets.choice(\"~!@#$%^&*()_+\") for x in range(6))\n        >>> secret_key = secret_key + ''.join(secrets.choice(string.ascii_lowercase) for x in range(6))\n        >>> secret_key = secret_key + ''.join(secrets.choice(string.digits) for x in range(6))\n\n\n.. data:: LEMUR_ENCRYPTION_KEYS\n    :noindex:\n\n        The LEMUR_ENCRYPTION_KEYS is used to encrypt data at rest within Lemur's database. Without a key Lemur will refuse\n        to start. Multiple keys can be provided to facilitate key rotation. The first key in the list is used for\n        encryption and all keys are tried for decryption until one works. Each key must be 32 URL safe base-64 encoded bytes.\n\n        Only fields of type ``Vault`` will be encrypted. At present, only the following fields are encrypted:\n\n        * ``certificates.private_key``\n        * ``pending_certificates.private_key``\n        * ``dns_providers.credentials``\n        * ``roles.password``\n\n        For implementation details, see ``Vault`` in ``utils.py``.\n\n        Running lemur create_config will securely generate a key for your configuration file.\n        If you would like to generate your own, we recommend the following method:\n\n            >>> import os\n            >>> import base64\n            >>> base64.urlsafe_b64encode(os.urandom(32))\n\n    ::\n\n        LEMUR_ENCRYPTION_KEYS = ['1YeftooSbxCiX2zo8m1lXtpvQjy27smZcUUaGmffhMY=', 'LAfQt6yrkLqOK5lwpvQcT4jf2zdeTQJV1uYeh9coT5s=']\n\n\n.. data:: PUBLIC_CA_MAX_VALIDITY_DAYS\n    :noindex:\n\n        Use this config to override the limit of 397 days of validity for certificates issued by CA/Browser compliant authorities.\n        The authorities with cab_compliant option set to true will use this config. The example below overrides the default validity\n        of 397 days and sets it to 365 days.\n\n    ::\n\n        PUBLIC_CA_MAX_VALIDITY_DAYS = 365\n\n\n.. data:: DEFAULT_VALIDITY_DAYS\n    :noindex:\n\n        Use this config to override the default validity of 365 days for certificates offered through Lemur UI. Any CA which\n        is not CA/Browser Forum compliant will be using this value as default validity to be displayed on UI. Please\n        note that this config is used for cert issuance only through Lemur UI. The example below overrides the default validity\n        of 365 days and sets it to 1095 days (3 years).\n\n    ::\n\n        DEFAULT_VALIDITY_DAYS = 1095\n\n\n.. data:: DEBUG_DUMP\n    :noindex:\n\n        Dump all imported or generated CSR and certificate details to stdout using OpenSSL. (default: `False`)\n\n.. data:: ALLOW_CERT_DELETION\n    :noindex:\n\n        When set to True, certificates can be marked as deleted via the API and deleted certificates will not be displayed\n        in the UI. When set to False (the default), the certificate delete API will always return \"405 method not allowed\"\n        and deleted certificates will always be visible in the UI. (default: `False`)\n\n.. data:: LEMUR_AWS_REGION\n    :noindex:\n\n        This is an optional config applicable for settings where Lemur is deployed in AWS.\n        When specified, this will override the default regional AWS endpoints that are used\n        for accessing STS and services such as IAM for example. You must set this if running\n        in an alternative AWS partition such as GovCloud, for example.\n\n.. data:: LEMUR_AWS_PARTITION\n   :noindex:\n\n       Specifies the AWS partition that Lemur should use. Valid values are 'aws', 'aws-us-gov', and 'aws-cn'. Defaults to 'aws'.\n       If Lemur is deployed in and managing endpoints AWS GovCloud, for example, you must set this to `aws-us-gov`.\n\n.. data:: SENTRY_DSN\n    :noindex:\n\n        To initialize the Sentry integration to capture errors and exceptions, the `SENTRY_DSN` is required to be set to\n        the respective URL. `LEMUR_ENV` is also a related variable to define the environment for sentry events, e.g.,\n        'test' or 'prod'.\n\n        Note that previously Lemur relied on Raven[flask] before migrating to `sentry_sdk`. In this case, you might be\n        using the legacy `SENTRY_CONFIG`, which Lemur attempts to respect, in case `SENTRY_DSN` is missing,\n        with environment set to empty.\n\n        Example for using Senty to capture exceptions:\n\n            >>>  from sentry_sdk import capture_exception\n            >>>  ..\n            >>>  capture_exception()\n            >>>  # supplying extra information\n            >>>  capture_exception(extra={\"certificate_name\": str(certificate.name)})\n\n\nCertificate Default Options\n---------------------------\n\nLemur allows you to fine tune your certificates to your organization. The following defaults are presented in the UI\nand are used when Lemur creates the CSR for your certificates.\n\n\n.. data:: LEMUR_DEFAULT_COUNTRY\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_COUNTRY = \"US\"\n\n\n.. data:: LEMUR_DEFAULT_STATE\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_STATE = \"California\"\n\n\n.. data:: LEMUR_DEFAULT_LOCATION\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_LOCATION = \"Los Gatos\"\n\n\n.. data:: LEMUR_DEFAULT_ORGANIZATION\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_ORGANIZATION = \"Netflix\"\n\n\n.. data:: LEMUR_DEFAULT_ORGANIZATIONAL_UNIT\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_ORGANIZATIONAL_UNIT = \"\"\n\n\n.. data:: LEMUR_DEFAULT_ISSUER_PLUGIN\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_ISSUER_PLUGIN = \"verisign-issuer\"\n\n\n.. data:: LEMUR_DEFAULT_AUTHORITY\n    :noindex:\n\n    ::\n\n        LEMUR_DEFAULT_AUTHORITY = \"verisign\"\n\n\n.. _NotificationOptions:\n\nNotification Options\n--------------------\n\nLemur supports a small variety of notification types through a set of notification plugins.\nBy default, Lemur configures a standard set of email notifications for all certificates.\n\n**Plugin-capable notifications**\n\nThese notifications can be configured to use all available notification plugins.\n\nSupported types:\n\n* Certificate expiration (Celery: `notify_expirations`, cron: `notify expirations`)\n\n**Email-only notifications**\n\nThese notifications can only be sent via email and cannot use other notification plugins.\n\nSupported types:\n\n* CA certificate expiration (Celery: `notify_authority_expirations`, cron: `notify authority_expirations`)\n* Pending ACME certificate failure\n* Certificate rotation\n* Certificate reissued with no endpoints\n* Certificate reissue failed\n* Certificate revocation\n* Security certificate expiration summary (Celery: `send_security_expiration_summary`, cron: `notify security_expiration_summary`)\n* Certificate expiration where certificates are still detected as deployed at any associated domain (Celery: `notify_expiring_deployed_certificates`, cron: `notify expiring_deployed_certificates`)\n\n**Default notifications**\n\nWhen a certificate is created, the following email notifications are created for it if they do not exist.\nIf these notifications already exist, they will be associated with the new certificate.\n\n* ``DEFAULT_<OWNER>_X_DAY``, where X is the set of values specified in ``LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS`` and defaults to 30, 15, and 2 if not specified. The owner's username will replace ``<OWNER>``.\n* ``DEFAULT_SECURITY_X_DAY``, where X is the set of values specified in ``LEMUR_SECURITY_TEAM_EMAIL_INTERVALS`` and defaults to ``LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS`` if not specified (which also defaults to 30, 15, and 2 if not specified).\n\nThese notifications can be disabled if desired. They can also be unassociated with a specific certificate.\n\n**Disabling notifications**\n\nNotifications can be disabled either for an individual certificate (which disables all notifications for that certificate)\nor for an individual notification object (which disables that notification for all associated certificates).\nAt present, disabling a notification object will only disable certificate expiration notifications, and not other types,\nsince other notification types don't use notification objects.\n\n**Certificate expiration**\n\nCertificate expiration notifications are sent when the scheduled task to send certificate expiration notifications runs\n(see :ref:`PeriodicTasks`). Specific patterns of certificate names may be excluded using ``--exclude`` (when using\ncron; you may specify this multiple times for multiple patterns) or via the config option ``EXCLUDE_CN_FROM_NOTIFICATION``\n(when using celery; this is a list configuration option, meaning you specify multiple values, such as\n``['exclude', 'also exclude']``). The specified exclude pattern will match if found anywhere in the certificate name.\n\nWhen the periodic task runs, Lemur checks for certificates meeting the following conditions:\n\n* Certificate has notifications enabled\n* Certificate is not expired\n* Certificate is not revoked\n* Certificate name does not match the `exclude` parameter\n* Certificate has at least one associated notification object\n* That notification is active\n* That notification's configured interval and unit match the certificate's remaining lifespan\n\nAll eligible certificates are then grouped by owner and applicable notification. For each notification and certificate group,\nLemur will send the expiration notification using whichever plugin was configured for that notification object.\nIn addition, Lemur will send an email to the certificate owner and security team (as specified by the\n``LEMUR_SECURITY_TEAM_EMAIL`` configuration parameter). The security team will be omitted if\n``LEMUR_DISABLE_SECURITY_TEAM_EXPIRATION_EMAILS`` is enabled.\n\n**CA certificate expiration**\n\nCertificate authority certificate expiration notifications are sent when the scheduled task to send authority certificate\nexpiration notifications runs (see :ref:`PeriodicTasks`). Notifications are sent via the intervals configured in the\nconfiguration parameter ``LEMUR_AUTHORITY_CERT_EXPIRATION_EMAIL_INTERVALS``, with a default of 365 and 180 days.\n\nWhen the periodic task runs, Lemur checks for certificates meeting the following conditions:\n\n* Certificate has notifications enabled\n* Certificate is not expired\n* Certificate is not revoked\n* Certificate is associated with a CA\n* Certificate's remaining lifespan matches one of the configured intervals\n\nAll eligible certificates are then grouped by owner and expiration interval. For each interval and certificate group,\nLemur will send the CA certificate expiration notification via email to the certificate owner and security team\n(as specified by the ``LEMUR_SECURITY_TEAM_EMAIL`` configuration parameter).\n\n**Pending ACME certificate failure**\n\nWhenever a pending ACME certificate fails to be issued, Lemur will send a notification via email to the certificate owner\nand security team (as specified by the ``LEMUR_SECURITY_TEAM_EMAIL`` configuration parameter). This email is not sent if\nthe pending certificate had notifications disabled.\n\nLemur will attempt 3x times to resolve a pending certificate.\nThis can at times result into 3 duplicate certificates, if all certificate attempts get resolved. There is a way to\ndeduplicate these certificates periodically using a celery task ``disable_rotation_of_duplicate_certificates``.\n\nThis needs 2 configurations\n\n.. data:: AUTHORITY_TO_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES\n    :noindex:\n\n        List names of the authorities for which `disable_rotation_of_duplicate_certificates` should run. The task will\n        consider certificates issued by authorities configured here.\n\n    ::\n\n        AUTHORITY_TO_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES = [\"LetsEncrypt\"]\n\n\n.. data:: DAYS_SINCE_ISSUANCE_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES\n    :noindex:\n\n        Use this config (optional) to configure the number of days. The task `disable_rotation_of_duplicate_certificates`\n        will then consider valid certificates issued only in last those many number of days for deduplication. If not configured,\n        the task considers all the valid certificates. Ideally set this config to a value which is same as the number of\n        days between the two runs of `disable_rotation_of_duplicate_certificates`\n\n    ::\n\n        DAYS_SINCE_ISSUANCE_DISABLE_ROTATE_OF_DUPLICATE_CERTIFICATES = 7\n\n\n**Certificate re-issuance**\n\nWhen a cert is reissued (i.e. a new certificate is minted to replace it), *and* the re-issuance either fails or\nsucceeds but the certificate has no associated endpoints (meaning the subsequent rotation step will not occur),\nLemur will send a notification via email to the certificate owner. This notification is disabled by default;\nto enable it, you must set the option ``--notify`` (when using cron) or the configuration parameter\n``ENABLE_REISSUE_NOTIFICATION`` (when using celery).\n\n**Certificate rotation**\n\nWhenever a cert is rotated, Lemur will send a notification via email to the certificate owner. This notification is\ndisabled by default; to enable it, you must set the option ``--notify`` (when using cron) or the configuration parameter\n``ENABLE_ROTATION_NOTIFICATION`` (when using celery).\n\n**Certificate revocation**\n\nWhenever a cert is revoked, Lemur will send a notification via email to the certificate owner. This notification will\nonly be sent if the certificate's \"notify\" option is enabled.\n\n**Security certificate expiration summary**\n\nIf you enable the Celery or cron task to send this notification type, Lemur will send a summary of all\ncertificates with upcoming expiration date that occurs within the number of days specified by the\n``LEMUR_EXPIRATION_SUMMARY_EMAIL_THRESHOLD_DAYS`` configuration parameter (with a fallback of 14 days).\nNote that certificates will be included in this summary even if they do not have any associated notifications.\n\nThis notification type also supports the same ``--exclude`` and ``EXCLUDE_CN_FROM_NOTIFICATION`` options as expiration emails.\n\nNOTE: At present, this summary email essentially duplicates the certificate expiration notifications, since all\ncertificate expiration notifications are also sent to the security team. This issue will be fixed in the future.\n\n**Notification configuration**\n\nThe following configuration options are supported:\n\n.. data:: EXCLUDE_CN_FROM_NOTIFICATION\n    :noindex:\n\n    Specifies CNs to exclude from notifications. This includes both single notifications as well as the notification summary. The specified exclude pattern will match if found anywhere in the certificate name.\n\n    .. note::\n        This is only used for celery. The equivalent for cron is '-e' or '--exclude'.\n\n       ::\n\n          EXCLUDE_CN_FROM_NOTIFICATION = ['exclude', 'also exclude']\n\n\n.. data:: DISABLE_NOTIFICATION_PLUGINS\n    :noindex:\n\n    Specifies a set of notification plugins to disable. Notifications will not be sent using these plugins. Currently only applies to expiration notifications, since they are the only type that utilize plugins.\n    This option may be particularly useful in a test environment, where you might wish to enable the notification job without actually sending notifications of a certain type (or all types).\n\n    .. note::\n        This is only used for celery. The equivalent for cron is '-d' or '--disabled-notification-plugins'.\n\n       ::\n\n          DISABLE_NOTIFICATION_PLUGINS = ['email-notification']\n\n\n**Email notifications**\n\nTemplates for emails are located under `lemur/plugins/lemur_email/templates` and can be modified for your needs.\n\nThe following configuration options are supported:\n\n.. data:: LEMUR_EMAIL_SENDER\n    :noindex:\n\n    Specifies which service will be delivering notification emails. Valid values are `SMTP` or `SES`\n\n    .. note::\n        If using SMTP as your provider you will need to define additional configuration options as specified by Flask-Mail.\n        See: `Flask-Mail <https://pythonhosted.org/Flask-Mail>`_\n\n        If you are using SES the email specified by the `LEMUR_EMAIL` configuration will need to be verified by AWS before\n        you can send any mail. See: `Verifying Email Address in Amazon SES <http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html>`_\n\n\n.. data:: LEMUR_SES_SOURCE_ARN\n    :noindex:\n\n    Specifies an ARN to use as the SourceArn when sending emails via SES.\n\n    .. note::\n        This parameter is only required if you're using a sending authorization with SES.\n        See: `Using sending authorization with Amazon SES <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html>`_\n\n\n.. data:: LEMUR_SES_REGION\n    :noindex:\n\n    Specifies a region for sending emails via SES.\n\n    .. note::\n        This parameter defaults to us-east-1 and is only required if you wish to use a different region.\n\n\n.. data:: LEMUR_EMAIL\n    :noindex:\n\n        Lemur sender's email\n\n        ::\n\n            LEMUR_EMAIL = 'lemur@example.com'\n\n\n.. data:: LEMUR_SECURITY_TEAM_EMAIL\n    :noindex:\n\n        This is an email or list of emails that should be notified when a certificate is expiring. It is also the contact email address for any discovered certificate.\n\n        ::\n\n            LEMUR_SECURITY_TEAM_EMAIL = ['security@example.com']\n\n\n.. data:: LEMUR_DISABLE_SECURITY_TEAM_EXPIRATION_EMAILS\n    :noindex:\n\n        This specifies whether or not LEMUR_SECURITY_TEAM_EMAIL will be included on all expiration emails. IMPORTANT: You will also need to disable the DEFAULT_SECURITY_X_DAY notifications to truly disable sending expiration emails to the security team. This double configuration is required for backwards compatibility.\n\n        ::\n\n            LEMUR_DISABLE_SECURITY_TEAM_EXPIRATION_EMAILS = True\n\n.. data:: LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS\n    :noindex:\n\n        Lemur notification intervals. If unspecified, the value [30, 15, 2] is used.\n\n        ::\n\n            LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS = [30, 15, 2]\n\n.. data:: LEMUR_SECURITY_TEAM_EMAIL_INTERVALS\n    :noindex:\n\n       Alternate notification interval set for security team notifications. Use this if you would like the default security team notification interval for new certificates to differ from the global default as specified in LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS. If unspecified, the value of LEMUR_DEFAULT_EXPIRATION_NOTIFICATION_INTERVALS is used. Security team default notifications for new certificates can effectively be disabled by setting this value to an empty array.\n\n       ::\n\n          LEMUR_SECURITY_TEAM_EMAIL_INTERVALS = [15, 2]\n\n.. data:: LEMUR_AUTHORITY_CERT_EXPIRATION_EMAIL_INTERVALS\n    :noindex:\n\n       Notification interval set for CA certificate expiration notifications. If unspecified, the value [365, 180] is used (roughly one year and 6 months).\n\n       ::\n\n          LEMUR_AUTHORITY_CERT_EXPIRATION_EMAIL_INTERVALS = [365, 180]\n\n.. data:: LEMUR_PORTS_FOR_DEPLOYED_CERTIFICATE_CHECK\n    :noindex:\n\n       Specifies the set of ports to use when checking if a certificate is still deployed at a given domain. This is utilized for the alert that is sent when an expiring certificate is detected to still be deployed.\n\n       ::\n\n          LEMUR_PORTS_FOR_DEPLOYED_CERTIFICATE_CHECK = [443]\n\n.. data:: LEMUR_DEPLOYED_CERTIFICATE_CHECK_COMMIT_MODE\n    :noindex:\n\n       Specifies whether or not to commit changes when running the deployed certificate check. If False, the DB will not be updated; network calls will still be made and logs/metrics will be emitted.\n\n       ::\n\n          LEMUR_DEPLOYED_CERTIFICATE_CHECK_COMMIT_MODE = True\n\n.. data:: LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_DOMAINS\n    :noindex:\n\n       Specifies a set of domains to exclude from the deployed certificate checks. Anything specified here is treated as a substring; in other words, if you set this to ['excluded.com'], then 'abc.excluded.com' and 'unexcluded.com' will both be excluded; 'ex-cluded.com' will not be excluded.\n\n       ::\n\n          LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_DOMAINS = ['excluded.com']\n\n.. data:: LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_OWNERS\n    :noindex:\n\n       Specifies a set of owners to exclude from the deployed certificate checks. Anything specified here is treated as an exact match, NOT as a substring.\n\n       ::\n\n          LEMUR_DEPLOYED_CERTIFICATE_CHECK_EXCLUDED_OWNERS = ['excludedowner@example.com']\n\n\n.. data:: LEMUR_REISSUE_NOTIFICATION_EXCLUDED_DESTINATIONS\n    :noindex:\n\n       Specifies a set of destination labels to exclude from the reissued with endpoint notification checks. If a certificate is reissued without endpoints, but any of its destination labels are specified in this list, no \"reissued without endpoints\" notification will be sent.\n\n       ::\n\n          LEMUR_REISSUE_NOTIFICATION_EXCLUDED_DESTINATIONS = ['excluded-destination']\n\n\nCelery Options\n---------------\nTo make use of automated tasks within lemur (e.g. syncing source/destinations, or reissuing ACME certificates), you\nneed to configure celery. See :ref:`Periodic Tasks <PeriodicTasks>` for more in depth documentation.\n\n.. data:: CELERY_RESULT_BACKEND\n    :noindex:\n\n        The url to your redis backend (needs to be in the format `redis://<host>:<port>/<database>`)\n\n.. data:: CELERY_BROKER_URL\n    :noindex:\n\n        The url to your redis broker (needs to be in the format `redis://<host>:<port>/<database>`)\n\n.. data:: CELERY_IMPORTS\n    :noindex:\n\n        The module that celery needs to import, in our case thats `lemur.common.celery`\n\n.. data:: CELERY_TIMEZONE\n    :noindex:\n\n        The timezone for celery to work with\n\n\n.. data:: CELERYBEAT_SCHEDULE\n    :noindex:\n\n        This defines the schedule, with which the celery beat makes the worker run the specified tasks.\n\n.. data:: CELERY_ENDPOINTS_EXPIRE_TIME_IN_HOURS\n    :noindex:\n\n        This is an optional parameter that defines the expiration time for endpoints when the endpoint expiration celery task is running. Default value is set to 2h.\n\n\nSince the celery module, relies on the RedisHandler, the following options also need to be set.\n\n.. data:: REDIS_HOST\n    :noindex:\n\n        Hostname of your redis instance\n\n.. data:: REDIS_PORT\n    :noindex:\n\n        Port on which redis is running (default: 6379)\n\n.. data:: REDIS_DB\n    :noindex:\n\n        Which redis database to be used, by default redis offers databases 0-15 (default: 0)\n\nAuthentication Options\n----------------------\nLemur currently supports Basic Authentication, LDAP Authentication, Ping OAuth2, and Google out of the box. Additional flows can be added relatively easily.\n\nLDAP Options\n~~~~~~~~~~~~\n\nLemur supports the use of an LDAP server in conjunction with Basic Authentication. Lemur local users can still be defined and take precedence over LDAP users. If a local user does not exist, LDAP will be queried for authentication. Only simple ldap binding with or without TLS is supported.\n\nLDAP support requires the pyldap python library, which also depends on the following openldap packages.\n\n.. code-block:: bash\n\n      $ sudo apt-get update\n      $ sudo apt-get install libldap2-dev libsasl2-dev libldap2-dev libssl-dev\n\n\nTo configure the use of an LDAP server, a number of settings need to be configured in `lemur.conf.py`.\n\nHere is an example LDAP configuration stanza you can add to your config. Adjust to suit your environment of course.\n\n.. code-block:: python\n\n        LDAP_AUTH = True\n        LDAP_BIND_URI='ldaps://secure.evilcorp.net'\n        LDAP_BASE_DN='DC=users,DC=evilcorp,DC=net'\n        LDAP_EMAIL_DOMAIN='evilcorp.net'\n        LDAP_USE_TLS = True\n        LDAP_CACERT_FILE = '/opt/lemur/trusted.pem'\n        LDAP_REQUIRED_GROUP = 'certificate-management-access'\n        LDAP_GROUPS_TO_ROLES = {'certificate-management-admin': 'admin', 'certificate-management-read-only': 'read-only'}\n        LDAP_IS_ACTIVE_DIRECTORY = True\n\n\nThe lemur ldap module uses the `user principal name` (upn) of the authenticating user to bind. This is done once for each user at login time. The UPN is effectively the email address in AD/LDAP of the user. If the user doesn't provide the email address, it constructs one based on the username supplied (which should normally match the samAccountName) and the value provided by the config LDAP_EMAIL_DOMAIN.\nThe config LDAP_BASE_DN tells lemur where to search within the AD/LDAP tree for the given UPN (user). If the bind with those credentials is successful - there is a valid user in AD with correct password.\n\nEach of the LDAP options are described below.\n\n.. data:: LDAP_AUTH\n    :noindex:\n\n        This enables the use of LDAP\n\n        ::\n\n            LDAP_AUTH = True\n\n.. data:: LDAP_BIND_URI\n    :noindex:\n\n        Specifies the LDAP server connection string\n\n        ::\n\n            LDAP_BIND_URI = 'ldaps://hostname'\n\n.. data:: LDAP_BASE_DN\n    :noindex:\n\n        Specifies the LDAP distinguished name location to search for users\n\n        ::\n\n            LDAP_BASE_DN = 'DC=Users,DC=Evilcorp,DC=com'\n\n.. data:: LDAP_EMAIL_DOMAIN\n    :noindex:\n\n        The email domain used by users in your directory. This is used to build the userPrincipalName to search with.\n\n        ::\n\n            LDAP_EMAIL_DOMAIN = 'evilcorp.com'\n\nThe following LDAP options are not required, however TLS is always recommended.\n\n.. data:: LDAP_USE_TLS\n    :noindex:\n\n        Enables the use of TLS when connecting to the LDAP server. Ensure the LDAP_BIND_URI is using ldaps scheme.\n\n        ::\n\n            LDAP_USE_TLS = True\n\n.. data:: LDAP_CACERT_FILE\n    :noindex:\n\n        Specify a Certificate Authority file containing PEM encoded trusted issuer certificates. This can be used if your LDAP server is using certificates issued by a private CA.\n\n        ::\n\n            LDAP_CACERT_FILE = '/path/to/cacert/file'\n\n.. data:: LDAP_REQUIRED_GROUP\n    :noindex:\n\n        Lemur has pretty open permissions. You can define an LDAP group to specify who can access Lemur. Only members of this group will be able to login.\n\n        ::\n\n            LDAP_REQUIRED_GROUP = 'Lemur LDAP Group Name'\n\n.. data:: LDAP_GROUPS_TO_ROLES\n    :noindex:\n\n        You can also define a dictionary of ldap groups mapped to lemur roles. This allows you to use ldap groups to manage access to owner/creator roles in Lemur\n\n        ::\n\n            LDAP_GROUPS_TO_ROLES = {'lemur_admins': 'admin', 'Lemur Team DL Group': 'team@example.com'}\n\n\n.. data:: LDAP_IS_ACTIVE_DIRECTORY\n    :noindex:\n\n        When set to True, nested group memberships are supported, by searching for groups with the member:1.2.840.113556.1.4.1941 attribute set to the user DN.\n        When set to False, the list of groups will be determined by the 'memberof' attribute of the LDAP user logging in.\n\n        ::\n\n            LDAP_IS_ACTIVE_DIRECTORY = False\n\n\nAuthentication Providers\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are not using an authentication provider you do not need to configure any of these options.\n\nFor more information about how to use social logins, see: `Satellizer <https://github.com/sahat/satellizer>`_\n\n.. data:: ACTIVE_PROVIDERS\n    :noindex:\n\n        ::\n\n            ACTIVE_PROVIDERS = [\"ping\", \"google\", \"oauth2\"]\n\n.. data:: PING_SECRET\n    :noindex:\n\n        ::\n\n            PING_SECRET = 'somethingsecret'\n\n.. data:: PING_ACCESS_TOKEN_URL\n    :noindex:\n\n        ::\n\n            PING_ACCESS_TOKEN_URL = \"https://<yourpingserver>/as/token.oauth2\"\n\n\n.. data:: PING_USER_API_URL\n    :noindex:\n\n        ::\n\n            PING_USER_API_URL = \"https://<yourpingserver>/idp/userinfo.openid\"\n\n.. data:: PING_JWKS_URL\n    :noindex:\n\n        ::\n\n            PING_JWKS_URL = \"https://<yourpingserver>/pf/JWKS\"\n\n.. data:: PING_NAME\n    :noindex:\n\n        ::\n\n            PING_NAME = \"Example Oauth2 Provider\"\n\n.. data:: PING_CLIENT_ID\n    :noindex:\n\n        ::\n\n            PING_CLIENT_ID = \"client-id\"\n\n.. data:: PING_URL\n    :noindex:\n\n        ::\n\n            PING_URL = \"https://<yourlemurserver>\"\n\n.. data:: PING_REDIRECT_URI\n    :noindex:\n\n        ::\n\n            PING_REDIRECT_URI = \"https://<yourlemurserver>/api/1/auth/ping\"\n\n.. data:: PING_AUTH_ENDPOINT\n    :noindex:\n\n        ::\n\n            PING_AUTH_ENDPOINT = \"https://<yourpingserver>/oauth2/authorize\"\n\n.. data:: OAUTH2_SECRET\n    :noindex:\n\n        ::\n\n            OAUTH2_SECRET = 'somethingsecret'\n\n.. data:: OAUTH2_ACCESS_TOKEN_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_ACCESS_TOKEN_URL = \"https://<youroauthserver> /oauth2/v1/authorize\"\n\n\n.. data:: OAUTH2_USER_API_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_USER_API_URL = \"https://<youroauthserver>/oauth2/v1/userinfo\"\n\n.. data:: OAUTH2_JWKS_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_JWKS_URL = \"https://<youroauthserver>/oauth2/v1/keys\"\n\n.. data:: OAUTH2_NAME\n    :noindex:\n\n        ::\n\n            OAUTH2_NAME = \"Example Oauth2 Provider\"\n\n.. data:: OAUTH2_CLIENT_ID\n    :noindex:\n\n        ::\n\n            OAUTH2_CLIENT_ID = \"client-id\"\n\n.. data:: OAUTH2_URL\n    :noindex:\n\n        ::\n\n            OAUTH2_URL = \"https://<yourlemurserver>\"\n\n.. data:: OAUTH2_REDIRECT_URI\n    :noindex:\n\n        ::\n\n            OAUTH2_REDIRECT_URI = \"https://<yourlemurserver>/api/1/auth/oauth2\"\n\n.. data:: OAUTH2_AUTH_ENDPOINT\n    :noindex:\n\n        ::\n\n            OAUTH2_AUTH_ENDPOINT = \"https://<youroauthserver>/oauth2/v1/authorize\"\n\n.. data:: OAUTH2_VERIFY_CERT\n    :noindex:\n\n        ::\n\n            OAUTH2_VERIFY_CERT = True\n\n.. data:: OAUTH_STATE_TOKEN_SECRET\n    :noindex:\n\n        The OAUTH_STATE_TOKEN_SECRET is used to sign state tokens to guard against CSRF attacks. Without a secret configured, Lemur will create\n        a fallback secret on a per-server basis that would last for the length of the server's lifetime (e.g., between redeploys). The secret must be `bytes-like <https://cryptography.io/en/latest/glossary/#term-bytes-like>`;\n        it will be used to instantiate the key parameter of `HMAC <https://cryptography.io/en/latest/hazmat/primitives/mac/hmac/#cryptography.hazmat.primitives.hmac.HMAC>`.\n\n        For implementation details, see ``generate_state_token()`` and ``verify_state_token()`` in ``lemur/auth/views.py``.\n\n        Running lemur create_config will securely generate a key for your configuration file.\n        If you would like to generate your own, we recommend the following method:\n\n            >>> import os\n            >>> import base64\n            >>> KEY_LENGTH = 32  # tweak as needed\n            >>> base64.b64encode(os.urandom(KEY_LENGTH))\n\n    ::\n\n        OAUTH_STATE_TOKEN_SECRET = lemur.common.utils.get_state_token_secret()\n\n.. data:: OAUTH_STATE_TOKEN_STALE_TOLERANCE_SECONDS\n    :noindex:\n\n        Defaults to 15 seconds if configuration is not discovered.\n\n        ::\n\n            OAUTH_STATE_TOKEN_STALE_TOLERANCE_SECONDS = 15\n\n.. data:: GOOGLE_CLIENT_ID\n    :noindex:\n\n        ::\n\n            GOOGLE_CLIENT_ID = \"client-id\"\n\n.. data:: GOOGLE_SECRET\n    :noindex:\n\n        ::\n\n            GOOGLE_SECRET = \"somethingsecret\"\n\n.. data:: TOKEN_AUTH_HEADER_CASE_SENSITIVE\n    :noindex:\n\n        This is an optional parameter to change the case sensitivity of the access token request authorization header.\n        This is required if the oauth provider has implemented the access token request authorization header in a case-sensitive way\n\n        ::\n\n            TOKEN_AUTH_HEADER_CASE_SENSITIVE = True\n\n.. data:: USER_MEMBERSHIP_PROVIDER\n    :noindex:\n\n        An optional plugin to provide membership details. Provide plugin slug here. Plugin is used post user validation\n        to update membership details in Lemur. Also, it is configured to provide APIs to validate user email, team email/DL.\n\n        ::\n\n            USER_MEMBERSHIP_PROVIDER = \"<yourmembershippluginslug>\"\n\nAuthorization Providers\n~~~~~~~~~~~~~~~~~~~~~~~\n\n\nIf you are not using a custom authorization provider you do not need to configure any of these options\n\n.. data:: USER_DOMAIN_AUTHORIZATION_PROVIDER\n    :noindex:\n\n        An optional plugin to perform domain level authorization during certificate issuance. Provide plugin slug here.\n        Plugin is used to check if caller is authorized to issue a certificate for a given Common Name and Subject Alternative\n        Name (SAN) of type DNSName. Plugin shall be an implementation of DomainAuthorizationPlugin.\n\n        ::\n\n            USER_DOMAIN_AUTHORIZATION_PROVIDER = \"<yourauthorizationpluginslug>\"\n\n.. data:: LEMUR_PRIVATE_AUTHORITY_PLUGIN_NAMES\n    :noindex:\n\n        Lemur can be used to issue certificates with private CA. One can write own issuer plugin to do so. Domain level authorization\n        is skipped for private CA i.e., the one implementing custom issuer plugin. Currently this config is not used elsewhere.\n\n        ::\n\n            LEMUR_PRIVATE_AUTHORITY_PLUGIN_NAMES = [\"issuerpluginslug1\", \"issuerpluginslug2\"]\n\nMetric Providers\n~~~~~~~~~~~~~~~~\n\nIf you are not using a metric provider you do not need to configure any of these options.\n\n.. data:: ACTIVE_PROVIDERS\n    :noindex:\n\n        A list of metric plugins slugs to be ativated.\n\n        ::\n\n            METRIC_PROVIDERS = ['atlas-metric']\n\n\nPlugin Specific Options\n-----------------------\n\nACME Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. data:: ACME_DNS_PROVIDER_TYPES\n    :noindex:\n\n        Dictionary of ACME DNS Providers and their requirements.\n\n.. data:: ACME_ENABLE_DELEGATED_CNAME\n    :noindex:\n\n        Enables delegated DNS domain validation using CNAMES.  When enabled, Lemur will attempt to follow CNAME records to authoritative DNS servers when creating DNS-01 challenges.\n\n\nThe following configration properties are optional for the ACME plugin to use. They allow reusing an existing ACME\naccount. See :ref:`Using a pre-existing ACME account <AcmeAccountReuse>` for more details.\n\n\n.. data:: ACME_PRIVATE_KEY\n    :noindex:\n\n            This is the private key, the account was registered with (in JWK format)\n\n.. data:: ACME_REGR\n    :noindex:\n\n            This is the registration for the ACME account, the most important part is the uri attribute (in JSON)\n\n.. data:: ACME_PREFERRED_ISSUER\n    :noindex:\n\n            This is an optional parameter to indicate the preferred chain to retrieve from ACME when finalizing the order.\n            This is applicable to Let's Encrypts recent `migration <https://letsencrypt.org/certificates/>`_ to their\n            own root, where they provide two distinct certificate chains (fullchain_pem vs. alternative_fullchains_pem);\n            the main chain will be the long chain that is rooted in the expiring DTS root, whereas the alternative chain\n            is rooted in X1 root CA.\n            Select \"X1\" to get the shorter chain (currently alternative), leave blank or \"DST Root CA X3\" for the longer chain.\n\n\nActive Directory Certificate Services Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n.. data:: ADCS_SERVER\n    :noindex:\n\n        FQDN of your ADCS Server\n\n\n.. data:: ADCS_AUTH_METHOD\n    :noindex:\n\n        The chosen authentication method. Either \u2018basic\u2019 (the default), \u2018ntlm\u2019 or \u2018cert\u2019 (SSL client certificate). The next 2 variables are interpreted differently for different methods.\n\n\n.. data:: ADCS_USER\n    :noindex:\n\n        The username (basic) or the path to the public cert (cert) of the user accessing PKI\n\n\n.. data:: ADCS_PWD\n    :noindex:\n\n        The passwd (basic) or the path to the private key (cert) of the user accessing PKI\n\n\n.. data:: ADCS_TEMPLATE\n    :noindex:\n\n        Template to be used for certificate issuing. Usually display name w/o spaces\n        \n.. data:: ADCS_TEMPLATE_<upper(authority.name)>\n    :noindex:\n\n        If there is a config variable ADCS_TEMPLATE_<upper(authority.name)> take the value as Cert template else default to ADCS_TEMPLATE to be compatible with former versions. Template to be used for certificate issuing. Usually display name w/o spaces\n\n.. data:: ADCS_START\n    :noindex:\n\n        Used in ADCS-Sourceplugin. Minimum id of the first certificate to be returned. ID is increased by one until ADCS_STOP. Missing cert-IDs are ignored\n\n.. data:: ADCS_STOP\n    :noindex:\n\n        Used for ADCS-Sourceplugin. Maximum id of the certificates returned. \n        \n\n.. data:: ADCS_ISSUING\n    :noindex:\n\n        Contains the issuing cert of the CA\n\n\n.. data:: ADCS_ROOT\n    :noindex:\n\n        Contains the root cert of the CA\n\nEntrust Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEnables the creation of Entrust certificates. You need to set the API access up with Entrust support. Check the information in the Entrust Portal as well. \nCertificates are created as \"SERVER_AND_CLIENT_AUTH\".\nCaution: Sometimes the entrust API does not respond in a timely manner. This error is handled and reported by the plugin. Should this happen you just have to hit the create button again after to create a valid certificate. \nThe following parameters have to be set in the configuration files.\n\n.. data:: ENTRUST_URL\n    :noindex:\n    \n       This is the url for the Entrust API. Refer to the API documentation.\n       \n.. data:: ENTRUST_API_CERT\n    :noindex:\n    \n       Path to the certificate file in PEM format. This certificate is created in the onboarding process. Refer to the API documentation.\n       \n.. data:: ENTRUST_API_KEY\n    :noindex:\n    \n       Path to the key file in RSA format. This certificate is created in the onboarding process. Refer to the API documentation. Caution: the request library cannot handle encrypted keys. The keyfile therefore has to contain the unencrypted key. Please put this in a secure location on the server.\n       \n.. data:: ENTRUST_API_USER\n    :noindex:\n    \n       String with the API user. This user is created in the onboarding process. Refer to the API documentation.   \n       \n.. data:: ENTRUST_API_PASS\n    :noindex:\n    \n       String with the password for the API user. This password is created in the onboarding process. Refer to the API documentation.\n\n.. data:: ENTRUST_NAME\n    :noindex:\n    \n        String with the name that should appear as certificate owner in the Entrust portal. Refer to the API documentation.\n\n.. data:: ENTRUST_EMAIL\n    :noindex:\n    \n        String with the email address that should appear as certificate contact email in the Entrust portal. Refer to the API documentation.       \n\n.. data:: ENTRUST_PHONE\n    :noindex:\n    \n        String with the phone number that should appear as certificate contact in the Entrust portal. Refer to the API documentation.        \n\n.. data:: ENTRUST_ISSUING\n    :noindex:\n    \n        Contains the issuing cert of the CA\n\n.. data:: ENTRUST_ROOT\n    :noindex:\n    \n        Contains the root cert of the CA\n\n.. data:: ENTRUST_PRODUCT_<upper(authority.name)>\n    :noindex:\n\n        If there is a config variable ENTRUST_PRODUCT_<upper(authority.name)> take the value as cert product name else default to \"STANDARD_SSL\". Refer to the API documentation for valid products names.\n\n\n.. data:: ENTRUST_CROSS_SIGNED_RSA_L1K\n    :noindex:\n\n        This is optional. Entrust provides support for cross-signed subCAS. One can set ENTRUST_CROSS_SIGNED_RSA_L1K to the respective cross-signed RSA-based subCA PEM and Lemur will replace the retrieved subCA with ENTRUST_CROSS_SIGNED_RSA_L1K.\n\n\n.. data:: ENTRUST_CROSS_SIGNED_ECC_L1F\n    :noindex:\n\n        This is optional. Entrust provides support for cross-signed subCAS. One can set ENTRUST_CROSS_SIGNED_ECC_L1F to the respective cross-signed EC-based subCA PEM and Lemur will replace the retrieved subCA with ENTRUST_CROSS_SIGNED_ECC_L1F.\n\n\n.. data:: ENTRUST_USE_DEFAULT_CLIENT_ID\n    :noindex:\n\n        If set to True, Entrust will use the primary client ID of 1, which applies to most use-case.\n        Otherwise, Entrust will first lookup the clientId before ordering the certificate.\n\n\nVerisign Issuer Plugin\n~~~~~~~~~~~~~~~~~~~~~~\n\nAuthorities will each have their own configuration options. There is currently just one plugin bundled with Lemur,\nVerisign/Symantec. Additional plugins may define additional options. Refer to the plugin's own documentation\nfor those plugins.\n\n.. data:: VERISIGN_URL\n    :noindex:\n\n        This is the url for the Verisign API\n\n\n.. data:: VERISIGN_PEM_PATH\n    :noindex:\n\n        This is the path to the mutual TLS certificate used for communicating with Verisign\n\n\n.. data:: VERISIGN_FIRST_NAME\n    :noindex:\n\n        This is the first name to be used when requesting the certificate\n\n\n.. data:: VERISIGN_LAST_NAME\n    :noindex:\n\n        This is the last name to be used when requesting the certificate\n\n.. data:: VERISIGN_EMAIL\n    :noindex:\n\n        This is the email to be used when requesting the certificate\n\n\n.. data:: VERISIGN_INTERMEDIATE\n    :noindex:\n\n        This is the intermediate to be used for your CA chain\n\n\n.. data:: VERISIGN_ROOT\n    :noindex:\n\n        This is the root to be used for your CA chain\n\n\nDigicert Issuer Plugin\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following configuration properties are required to use the Digicert issuer plugin.\n\n\n.. data:: DIGICERT_URL\n    :noindex:\n\n            This is the url for the Digicert API (e.g. https://www.digicert.com)\n\n\n.. data:: DIGICERT_ORDER_TYPE\n    :noindex:\n\n            This is the type of certificate to order. (e.g. ssl_plus, ssl_ev_plus see: https://www.digicert.com/services/v2/documentation/order/overview-submit)\n\n\n.. data:: DIGICERT_API_KEY\n    :noindex:\n\n            This is the Digicert API key\n\n\n.. data:: DIGICERT_ORG_ID\n    :noindex:\n\n            This is the Digicert organization ID tied to your API key\n\n\n.. data:: DIGICERT_ROOT\n    :noindex:\n\n            This is the root to be used for your CA chain\n\n\n.. data:: DIGICERT_DEFAULT_VALIDITY_DAYS\n    :noindex:\n\n            This is the default validity (in days), if no end date is specified. (Default: 397)\n\n\n.. data:: DIGICERT_MAX_VALIDITY_DAYS\n    :noindex:\n\n            This is the maximum validity (in days). (Default: value of DIGICERT_DEFAULT_VALIDITY_DAYS)\n\n\n.. data:: DIGICERT_PRIVATE\n    :noindex:\n\n            This is whether or not to issue a private certificate. (Default: False)\n\n\nCFSSL Issuer Plugin\n~~~~~~~~~~~~~~~~~~~\n\nThe following configuration properties are required to use the CFSSL issuer plugin.\n\n.. data:: CFSSL_URL\n    :noindex:\n\n        This is the URL for the CFSSL API\n\n.. data:: CFSSL_ROOT\n    :noindex:\n\n        This is the root to be used for your CA chain\n\n.. data:: CFSSL_INTERMEDIATE\n    :noindex:\n\n        This is the intermediate to be used for your CA chain\n\n.. data:: CFSSL_KEY\n    :noindex:\n\n        This is the hmac key to authenticate to the CFSSL service. (Optional)\n\n\nHashicorp Vault Source/Destination Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLemur can import and export certificate data to and from a Hashicorp Vault secrets store. Lemur can connect to a different Vault service per source/destination.\n\n.. note:: This plugin does not supersede or overlap the 3rd party Vault Issuer plugin.\n\n.. note:: Vault does not have any configuration properties however it does read from a file on disk for a vault access token. The Lemur service account needs read access to this file.\n\nVault Source\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe Vault Source Plugin will read from one Vault object location per source defined. There is expected to be one or more certificates defined in each object in Vault.\n\nVault Destination\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nA Vault destination can be one object in Vault or a directory where all certificates will be stored as their own object by CN.\n\nVault Destination supports a regex filter to prevent certificates with SAN that do not match the regex filter from being deployed. This is an optional feature per destination defined.\n\n\nAWS Source/Destination Plugin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order for Lemur to manage its own account and other accounts we must ensure it has the correct AWS permissions.\n\n.. note:: AWS usage is completely optional. Lemur can upload, find and manage TLS certificates in AWS. But is not required to do so.\n\nSetting up IAM roles\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nLemur's AWS plugin uses boto heavily to talk to all the AWS resources it manages. By default it uses the on-instance credentials to make the necessary calls.\n\nIn order to limit the permissions, we will create two new IAM roles for Lemur. You can name them whatever you would like but for example sake we will be calling them LemurInstanceProfile and Lemur.\n\nLemur uses to STS to talk to different accounts. For managing one account this isn't necessary but we will still use it so that we can easily add new accounts.\n\nLemurInstanceProfile is the IAM role you will launch your instance with. It actually has almost no rights. In fact it should really only be able to use STS to assume role to the Lemur role.\n\nHere are example policies for the LemurInstanceProfile:\n\nSES-SendEmail\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n            \"ses:SendEmail\"\n          ],\n          \"Resource\": \"*\"\n        }\n      ]\n    }\n\n\nSTS-AssumeRole\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Action\":\n            \"sts:AssumeRole\",\n          \"Resource\": \"*\"\n        }\n      ]\n    }\n\n\n\nNext we will create the Lemur IAM role.\n\n.. note::\n\n    The default IAM role that Lemur assumes into is called `Lemur`, if you need to change this ensure you set `LEMUR_INSTANCE_PROFILE` to your role name in the configuration.\n\n\nHere is an example policy for Lemur:\n\nIAM-ServerCertificate\n\n.. code-block:: python\n\n    {\n        \"Statement\": [\n                    {\n                         \"Action\": [\n                              \"iam:ListServerCertificates\",\n                              \"iam:UpdateServerCertificate\",\n                              \"iam:GetServerCertificate\",\n                              \"iam:UploadServerCertificate\"\n                         ],\n                         \"Resource\": [\n                              \"*\"\n                         ],\n                         \"Effect\": \"Allow\",\n                         \"Sid\": \"Stmt1404836868000\"\n                    }\n               ]\n    }\n\n\n.. code-block:: python\n\n    {\n        \"Statement\": [\n                    {\n                         \"Action\": [\n                              \"cloudfront:GetDistribution\",\n                              \"cloudfront:GetDistributionConfig\",\n                              \"cloudfront:ListDistributions\",\n                              \"cloudfront:UpdateDistribution\",\n                              \"elasticloadbalancing:DescribeInstanceHealth\",\n                              \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n                              \"elasticloadbalancing:DescribeLoadBalancerPolicyTypes\",\n                              \"elasticloadbalancing:DescribeLoadBalancerPolicies\",\n                              \"elasticloadbalancing:DescribeLoadBalancers\",\n                              \"elasticloadbalancing:DeleteLoadBalancerListeners\",\n                              \"elasticloadbalancing:CreateLoadBalancerListeners\"\n                         ],\n                         \"Resource\": [\n                              \"*\"\n                         ],\n                         \"Effect\": \"Allow\",\n                         \"Sid\": \"Stmt1404841912000\"\n                    }\n               ]\n    }\n\n\nSetting up STS access\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nOnce we have setup our accounts we need to ensure that we create a trust relationship so that LemurInstanceProfile can assume the Lemur role.\n\nIn the AWS console select the Lemur IAM role and select the Trust Relationships tab and click Edit Trust Relationship\n\nBelow is an example policy:\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2008-10-17\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": [\n              \"arn:aws:iam::<awsaccountnumber>:role/LemurInstanceProfile\",\n            ]\n          },\n          \"Action\": \"sts:AssumeRole\"\n        }\n      ]\n    }\n\n\nAdding N+1 accounts\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nTo add another account we go to the new account and create a new Lemur IAM role with the same policy as above.\n\nThen we would go to the account that Lemur is running is and edit the trust relationship policy.\n\nAn example policy:\n\n.. code-block:: python\n\n    {\n      \"Version\": \"2008-10-17\",\n      \"Statement\": [\n        {\n          \"Sid\": \"\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"AWS\": [\n              \"arn:aws:iam::<awsaccountnumber>:role/LemurInstanceProfile\",\n              \"arn:aws:iam::<awsaccountnumber1>:role/LemurInstanceProfile\",\n            ]\n          },\n          \"Action\": \"sts:AssumeRole\"\n        }\n      ]\n    }\n\nSetting up SES\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nLemur has built in support for sending it's certificate notifications via Amazon's simple email service (SES). To force\nLemur to use SES ensure you are the running as the IAM role defined above and that you have followed the steps outlined\nin Amazon's documentation `Setting up Amazon SES <http://docs.aws.amazon.com/ses/latest/DeveloperGuide/setting-up-ses.html>`_\n\nThe configuration::\n\n    LEMUR_EMAIL = 'lemur@example.com'\n\nWill be the sender of all notifications, so ensure that it is verified with AWS.\n\nSES if the default notification gateway and will be used unless SMTP settings are configured in the application configuration\nsettings.\n\nNS1 ACME Plugin\n~~~~~~~~~~~~~~~~~\n\nThe NS1 ACME plugin allows DNS1 validation using NS1 domain services.\n\n.. data:: NS1_KEY\n   :noindex:\n\n           The NS1 read/write API key for managing TXT records for domain validation\n\nPowerDNS ACME Plugin\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following configuration properties are required to use the PowerDNS ACME Plugin for domain validation.\n\n\n.. data:: ACME_POWERDNS_DOMAIN\n    :noindex:\n\n            This is the FQDN for the PowerDNS API (without path)\n\n\n.. data:: ACME_POWERDNS_SERVERID\n    :noindex:\n\n            This is the ServerID attribute of the PowerDNS API Server (i.e. \"localhost\")\n\n\n.. data:: ACME_POWERDNS_APIKEYNAME\n    :noindex:\n\n            This is the Key name to use for authentication (i.e. \"X-API-Key\")\n\n\n.. data:: ACME_POWERDNS_APIKEY\n    :noindex:\n\n            This is the API Key to use for authentication (i.e. \"Password\")\n\n\n.. data:: ACME_POWERDNS_RETRIES\n    :noindex:\n\n            This is the number of times DNS Verification should be attempted (i.e. 20)\n\n\n.. data:: ACME_POWERDNS_VERIFY\n    :noindex:\n\n            This configures how TLS certificates on the PowerDNS API target are validated.  The PowerDNS Plugin depends on the PyPi requests library, which supports the following options for the verify parameter:\n\n            True: Verifies the TLS certificate was issued by a known publicly-trusted CA. (Default)\n\n            False: Disables certificate validation (Not Recommended)\n\n            File/Dir path to CA Bundle: Verifies the TLS certificate was issued by a Certificate Authority in the provided CA bundle.\n\n.. _CommandLineInterface:\n\nCommand Line Interface\n======================\n\nLemur installs a command line script under the name ``lemur``. This will allow you to\nperform most required operations that are unachievable within the web UI.\n\nIf you're using a non-standard configuration location, you'll need to prefix every command with\n--config (excluding create_config, which is a special case). For example::\n\n    lemur --config=/etc/lemur.conf.py help\n\nFor a list of commands, you can also use ``lemur help``, or ``lemur [command] --help``\nfor help on a specific command.\n\n.. note:: The script is powered by a library called `Flask-Script <https://github.com/smurfix/flask-script>`_\n\nBuiltin Commands\n----------------\n\nAll commands default to `~/.lemur/lemur.conf.py` if a configuration is not specified.\n\n.. data:: create_config\n\n    Creates a default configuration file for Lemur.\n\n    Path defaults to ``~/.lemur/lemur.config.py``\n\n    ::\n\n        lemur create_config .\n\n    .. note::\n        This command is a special case and does not depend on the configuration file\n        being set.\n\n\n.. data:: init\n\n    Initializes the configuration file for Lemur.\n\n    ::\n\n        lemur -c /etc/lemur.conf.py init\n\n\n.. data:: start\n\n    Starts a Lemur service. You can also pass any flag that Gunicorn uses to specify the webserver configuration.\n\n    ::\n\n        lemur start -w 6 -b 127.0.0.1:8080\n\n\n.. data:: db upgrade\n\n    Performs any needed database migrations.\n\n    ::\n\n        lemur db upgrade\n\n\n.. data:: check_revoked\n\n    Traverses every certificate that Lemur is aware of and attempts to understand its validity.\n    It utilizes both OCSP and CRL. If Lemur is unable to come to a conclusion about a certificates\n    validity its status is marked 'unknown'.\n\n\n.. data:: sync\n\n    Sync attempts to discover certificates in the environment that were not created by Lemur. If you wish to only sync\n    a few sources you can pass a comma delimited list of sources to sync.\n\n    ::\n\n        lemur sync -s source1,source2\n\n\n    Additionally you can also list the available sources that Lemur can sync.\n\n    ::\n\n        lemur sync\n\n\n.. data:: notify\n\n    Will traverse all current notifications and see if any of them need to be triggered.\n\n    ::\n\n        lemur notify\n\n\n.. data:: acme\n\n    Handles all ACME related tasks, like ACME plugin testing.\n\n    ::\n\n        lemur acme\n\n\nSub-commands\n------------\n\nLemur includes several sub-commands for interacting with Lemur such as creating new users, creating new roles and even\nissuing certificates.\n\nThe best way to discover these commands is by using the built in help pages\n\n    ::\n\n        lemur --help\n\n\nand to get help on sub-commands\n\n    ::\n\n        lemur certificates --help\n\n\n\nUpgrading Lemur\n===============\n\nTo upgrade Lemur to the newest release you will need to ensure you have the latest code and have run any needed\ndatabase migrations.\n\nTo get the latest code from github run\n\n    ::\n\n        cd <lemur-source-directory>\n        git pull -t <version>\n        python setup.py develop\n\n\n.. note::\n    It's important to grab the latest release by specifying the release tag. This tags denote stable versions of Lemur.\n    If you want to try the bleeding edge version of Lemur you can by using the master branch.\n\n\nAfter you have the latest version of the Lemur code base you must run any needed database migrations. To run migrations\n\n    ::\n\n        cd <lemur-source-directory>/lemur\n        lemur db upgrade\n\n\nThis will ensure that any needed tables or columns are created or destroyed.\n\n.. note::\n    Internally, this uses `Alembic <http://alembic.zzzcomputing.com/en/latest/>`_ to manage database migrations.\n\n.. note::\n    By default Alembic looks for the `migrations` folder in the current working directory.The migrations folder is\n    located under `<LEMUR_HOME>/lemur/migrations` if you are running the lemur command from any location besides\n    `<LEMUR_HOME>/lemur` you will need to pass the `-d` flag to specify the absolute file path to the `migrations` folder.\n\nPlugins\n=======\n\nThere are several interfaces currently available to extend Lemur. These are a work in\nprogress and the API is not frozen.\n\nLemur includes several plugins by default. Including extensive support for AWS, VeriSign/Symantec.\n\nVerisign/Symantec\n-----------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Issuer\n:Description:\n    Basic support for the VICE 2.0 API\n\n\nCryptography\n------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Mikhail Khodorovskiy <mikhail.khodorovskiy@jivesoftware.com>\n:Type:\n    Issuer\n:Description:\n    Toy certificate authority that creates self-signed certificate authorities.\n    Allows for the creation of arbitrary authorities and end-entity certificates.\n    This is *not* recommended for production use.\n\n\nAcme\n----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>,\n    Mikhail Khodorovskiy <mikhail.khodorovskiy@jivesoftware.com>,\n    Chad Sine <csine@netflix.com>\n:Type:\n    Issuer\n:Description:\n    Adds support for the ACME protocol (including LetsEncrypt) with domain validation using several providers.\n\n\nAtlas\n-----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Metric\n:Description:\n    Adds basic support for the `Atlas <https://github.com/Netflix/atlas/wiki>`_ telemetry system.\n\n\nEmail\n-----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Notification\n:Description:\n    Adds support for basic email notifications via SES.\n\n\nSlack\n-----\n\n:Authors:\n    Harm Weites <harm@weites.com>\n:Type:\n    Notification\n:Description:\n    Adds support for slack notifications.\n\n\nAWS (Source)\n------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Source\n:Description:\n    Uses AWS IAM as a source of certificates to manage. Supports a multi-account deployment.\n\n\nAWS (Destination)\n-----------------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>,\n    Curtis Castrapel <ccastrapel@netflix.com>,\n    Hossein Shafagh <hshafagh@netflix.com>\n:Type:\n    Destination\n:Description:\n    Uses AWS IAM as a destination for Lemur generated certificates. Support a multi-account deployment.\n\n\nAWS (SNS Notification)\n----------------------\n\n:Authors:\n    Jasmine Schladen <jschladen@netflix.com>\n:Type:\n    Notification\n:Description:\n    Adds support for SNS notifications. SNS notifications (like other notification plugins) are currently only supported\n    for certificate expiration. Configuration requires a region, account number, and SNS topic name; these elements\n    are then combined to build the topic ARN. Lemur must have access to publish messages to the specified SNS topic.\n\n\nKubernetes\n----------\n\n:Authors:\n    Mikhail Khodorovskiy <mikhail.khodorovskiy@jivesoftware.com>\n:Type:\n    Destination\n:Description:\n    Allows Lemur to upload generated certificates to the Kubernetes certificate store.\n\n\nJava\n----\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>\n:Type:\n    Export\n:Description:\n    Generates java compatible .jks keystores and truststores from Lemur managed certificates.\n\n\nOpenssl\n-------\n\n:Authors:\n    Kevin Glisson <kglisson@netflix.com>\n:Type:\n    Export\n:Description:\n    Leverages Openssl to support additional export formats (pkcs12)\n\n\nCFSSL\n-----\n\n:Authors:\n    Charles Hendrie <chad.hendrie@thomsonreuters.com>\n:Type:\n    Issuer\n:Description:\n    Basic support for generating certificates from the private certificate authority CFSSL\n\nVault\n-----\n\n:Authors:\n    Christopher Jolley <chris@alwaysjolley.com>\n:Type:\n    Source\n:Description:\n    Source plugin imports certificates from Hashicorp Vault secret store.\n\nVault\n-----\n\n:Authors:\n    Christopher Jolley <chris@alwaysjolley.com>\n:Type:\n    Destination\n:Description:\n    Destination plugin to deploy certificates to Hashicorp Vault secret store.\n\n\n3rd Party Plugins\n=================\n\nThe following plugins are available and maintained by members of the Lemur community:\n\nDigicert\n--------\n\n:Authors:\n    Chris Dorros\n:Type:\n    Issuer\n:Description:\n    Adds support for basic Digicert\n:Links:\n    https://github.com/opendns/lemur-digicert\n\n\nInfluxDB\n--------\n\n:Authors:\n    Titouan Christophe\n:Type:\n    Metric\n:Description:\n    Sends key metrics to InfluxDB\n:Links:\n    https://github.com/titouanc/lemur-influxdb\n\nHashicorp Vault\n---------------\n\n:Authors:\n    Ron Cohen\n:Type:\n    Issuer\n:Description:\n    Adds support for basic Vault PKI secret backend.\n:Links:\n    https://github.com/RcRonco/lemur_vault\n\n\nHave an extension that should be listed here? Submit a `pull request <https://github.com/netflix/lemur>`_ and we'll\nget it added.\n\nWant to create your own extension? See :doc:`../developer/plugins/index` to get started.\n\n\n.. _iam_target:\n\nIdentity and Access Management\n==============================\n\nLemur uses a Role Based Access Control (RBAC) mechanism to control which users have access to which resources. When a\nuser is first created in Lemur they can be assigned one or more roles. These roles are typically dynamically created\ndepending on an external identity provider (Google, LDAP, etc.), or are hardcoded within Lemur and associated with special\nmeaning.\n\nWithin Lemur there are three main permissions: AdminPermission, CreatorPermission, OwnerPermission. Sub-permissions such\nas ViewPrivateKeyPermission are compositions of these three main Permissions.\n\nLets take a look at how these permissions are used:\n\nEach `Authority` has a set of roles associated with it. If a user is also associated with the same roles\nthat the `Authority` is associated with, Lemur allows that user to user/view/update that `Authority`.\n\nThis RBAC is also used when determining which users can access which certificate private key. Lemur's current permission\nstructure is setup such that if the user is a `Creator` or `Owner` of a given certificate they are allow to view that\nprivate key. Owners can also be a role name, such that any user with the same role as owner will be allowed to view the\nprivate key information.\n\nThese permissions are applied to the user upon login and refreshed on every request.\n\n.. seealso::\n\n    `Flask-Principal <https://pythonhosted.org/Flask-Principal>`_\n\nTo allow integration with external access/membership management tools that may exist in your organization, lemur offers\nbelow plugins in addition to it's own RBAC implementation.\n\nMembership Plugin\n-----------------\n\n:Authors:\n    Sayali Charhate <scharhate@netflix.com>\n:Type:\n    User Membership\n:Description:\n    Adds support to learn and validate user membership details from an external service. User memberships are used to\n    create user roles dynamically as described in :ref:`iam_target`. Configure this plugin slug as `USER_MEMBERSHIP_PROVIDER`\n\nAuthorization Plugins\n---------------------\n\n:Authors:\n    Sayali Charhate <scharhate@netflix.com>\n:Type:\n    External Authorization\n:Description:\n    Adds support to implement custom authorization logic that is best suited for your enterprise. Lemur offers `AuthorizationPlugin`\n    and its extended version `DomainAuthorizationPlugin`. One can implement `DomainAuthorizationPlugin` and configure its\n    slug as `USER_DOMAIN_AUTHORIZATION_PROVIDER` to check if caller is authorized to issue a certificate for a given Common\n    Name and Subject Alternative Name (SAN) of type DNSName\n", "\"\"\"\n.. module: lemur.common.utils\n    :platform: Unix\n    :copyright: (c) 2018 by Netflix Inc., see AUTHORS for more\n    :license: Apache, see LICENSE for more details.\n\n.. moduleauthor:: Kevin Glisson <kglisson@netflix.com>\n\"\"\"\nimport base64\nimport json\nimport re\nimport secrets\nimport socket\nimport ssl\nimport string\n\nimport OpenSSL\nimport pem\nimport sqlalchemy\nfrom cryptography import x509\nfrom cryptography.exceptions import InvalidSignature, UnsupportedAlgorithm\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import rsa, ec, padding\nfrom cryptography.hazmat.primitives.serialization import load_pem_private_key, Encoding, pkcs7\nfrom flask_restful.reqparse import RequestParser\nfrom sqlalchemy import and_, func\n\nfrom certbot.crypto_util import CERT_PEM_REGEX\nfrom lemur.constants import CERTIFICATE_KEY_TYPES\nfrom lemur.exceptions import InvalidConfiguration\nfrom lemur.utils import Vault\nfrom sqlalchemy.dialects.postgresql import TEXT\n\npaginated_parser = RequestParser()\n\npaginated_parser.add_argument(\"count\", type=int, default=10, location=\"args\")\npaginated_parser.add_argument(\"page\", type=int, default=1, location=\"args\")\npaginated_parser.add_argument(\"sortDir\", type=str, dest=\"sort_dir\", location=\"args\")\npaginated_parser.add_argument(\"sortBy\", type=str, dest=\"sort_by\", location=\"args\")\npaginated_parser.add_argument(\"filter\", type=str, location=\"args\")\npaginated_parser.add_argument(\"owner\", type=str, location=\"args\")\n\n\ndef base64encode(string):\n    # Performs Base64 encoding of string to string using the base64.b64encode() function\n    # which encodes bytes to bytes.\n    return base64.b64encode(string.encode()).decode()\n\n\ndef base64decode(base64_input):\n    # Performs Base64 decoging of a b64 string to string using the base64.b64encode() function\n    # which encodes bytes to bytes.\n    return base64.b64decode(base64_input.encode()).decode()\n\n\ndef get_psuedo_random_string():\n    \"\"\"\n    Create a random and strongish challenge.\n    \"\"\"\n    challenge = \"\".join(secrets.choice(string.ascii_uppercase) for x in range(6))  # noqa\n    challenge += \"\".join(secrets.choice(\"~!@#$%^&*()_+\") for x in range(6))  # noqa\n    challenge += \"\".join(secrets.choice(string.ascii_lowercase) for x in range(6))\n    challenge += \"\".join(secrets.choice(string.digits) for x in range(6))  # noqa\n    return challenge\n\n\ndef get_random_secret(length):\n    \"\"\" Similar to get_pseudo_random_string, but accepts a length parameter. \"\"\"\n    secret_key = ''.join(secrets.choice(string.ascii_uppercase) for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(secrets.choice(\"~!@#$%^&*()_+\") for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(secrets.choice(string.ascii_lowercase) for x in range(round(length / 4)))\n    return secret_key + ''.join(secrets.choice(string.digits) for x in range(round(length / 4)))\n\n\ndef get_state_token_secret():\n    return base64.b64encode(get_random_secret(32).encode('utf8'))\n\n\ndef parse_certificate(body):\n    \"\"\"\n    Helper function that parses a PEM certificate.\n\n    :param body:\n    :return:\n    \"\"\"\n    assert isinstance(body, str)\n\n    return x509.load_pem_x509_certificate(body.encode(\"utf-8\"), default_backend())\n\n\ndef parse_private_key(private_key):\n    \"\"\"\n    Parses a PEM-format private key (RSA, DSA, ECDSA or any other supported algorithm).\n\n    Raises ValueError for an invalid string. Raises AssertionError when passed value is not str-type.\n\n    :param private_key: String containing PEM private key\n    \"\"\"\n    assert isinstance(private_key, str)\n\n    return load_pem_private_key(\n        private_key.encode(\"utf8\"), password=None, backend=default_backend()\n    )\n\n\ndef get_key_type_from_certificate(body):\n    \"\"\"\n\n    Helper function to determine key type by pasrding given PEM certificate\n\n    :param body: PEM string\n    :return: Key type string\n    \"\"\"\n    parsed_cert = parse_certificate(body)\n    if isinstance(parsed_cert.public_key(), rsa.RSAPublicKey):\n        return \"RSA{key_size}\".format(\n            key_size=parsed_cert.public_key().key_size\n        )\n    elif isinstance(parsed_cert.public_key(), ec.EllipticCurvePublicKey):\n        return get_key_type_from_ec_curve(parsed_cert.public_key().curve.name)\n\n\ndef split_pem(data):\n    \"\"\"\n    Split a string of several PEM payloads to a list of strings.\n\n    :param data: String\n    :return: List of strings\n    \"\"\"\n    return re.split(\"\\n(?=-----BEGIN )\", data)\n\n\ndef parse_cert_chain(pem_chain):\n    \"\"\"\n    Helper function to split and parse a series of PEM certificates.\n\n    :param pem_chain: string\n    :return: List of parsed certificates\n    \"\"\"\n    if pem_chain is None:\n        return []\n    return [parse_certificate(cert) for cert in split_pem(pem_chain) if cert]\n\n\ndef parse_csr(csr):\n    \"\"\"\n    Helper function that parses a CSR.\n\n    :param csr:\n    :return:\n    \"\"\"\n    assert isinstance(csr, str)\n\n    return x509.load_pem_x509_csr(csr.encode(\"utf-8\"), default_backend())\n\n\ndef get_authority_key(body):\n    \"\"\"Returns the authority key for a given certificate in hex format\"\"\"\n    parsed_cert = parse_certificate(body)\n    authority_key = parsed_cert.extensions.get_extension_for_class(\n        x509.AuthorityKeyIdentifier\n    ).value.key_identifier\n    return authority_key.hex()\n\n\ndef get_key_type_from_ec_curve(curve_name):\n    \"\"\"\n    Give an EC curve name, return the matching key_type.\n\n    :param: curve_name\n    :return: key_type\n    \"\"\"\n\n    _CURVE_TYPES = {\n        ec.SECP192R1().name: \"ECCPRIME192V1\",\n        ec.SECP256R1().name: \"ECCPRIME256V1\",\n        ec.SECP224R1().name: \"ECCSECP224R1\",\n        ec.SECP384R1().name: \"ECCSECP384R1\",\n        ec.SECP521R1().name: \"ECCSECP521R1\",\n        ec.SECP256K1().name: \"ECCSECP256K1\",\n        ec.SECT163K1().name: \"ECCSECT163K1\",\n        ec.SECT233K1().name: \"ECCSECT233K1\",\n        ec.SECT283K1().name: \"ECCSECT283K1\",\n        ec.SECT409K1().name: \"ECCSECT409K1\",\n        ec.SECT571K1().name: \"ECCSECT571K1\",\n        ec.SECT163R2().name: \"ECCSECT163R2\",\n        ec.SECT233R1().name: \"ECCSECT233R1\",\n        ec.SECT283R1().name: \"ECCSECT283R1\",\n        ec.SECT409R1().name: \"ECCSECT409R1\",\n        ec.SECT571R1().name: \"ECCSECT571R2\",\n    }\n\n    if curve_name in _CURVE_TYPES.keys():\n        return _CURVE_TYPES[curve_name]\n    else:\n        return None\n\n\ndef generate_private_key(key_type):\n    \"\"\"\n    Generates a new private key based on key_type.\n\n    Valid key types: RSA2048, RSA4096', 'ECCPRIME192V1', 'ECCPRIME256V1', 'ECCSECP192R1',\n        'ECCSECP224R1', 'ECCSECP256R1', 'ECCSECP384R1', 'ECCSECP521R1', 'ECCSECP256K1',\n        'ECCSECT163K1', 'ECCSECT233K1', 'ECCSECT283K1', 'ECCSECT409K1', 'ECCSECT571K1',\n        'ECCSECT163R2', 'ECCSECT233R1', 'ECCSECT283R1', 'ECCSECT409R1', 'ECCSECT571R2'\n\n    :param key_type:\n    :return:\n    \"\"\"\n\n    _CURVE_TYPES = {\n        \"ECCPRIME192V1\": ec.SECP192R1(),  # duplicate\n        \"ECCPRIME256V1\": ec.SECP256R1(),  # duplicate\n        \"ECCSECP192R1\": ec.SECP192R1(),  # duplicate\n        \"ECCSECP224R1\": ec.SECP224R1(),\n        \"ECCSECP256R1\": ec.SECP256R1(),  # duplicate\n        \"ECCSECP384R1\": ec.SECP384R1(),\n        \"ECCSECP521R1\": ec.SECP521R1(),\n        \"ECCSECP256K1\": ec.SECP256K1(),\n        \"ECCSECT163K1\": ec.SECT163K1(),\n        \"ECCSECT233K1\": ec.SECT233K1(),\n        \"ECCSECT283K1\": ec.SECT283K1(),\n        \"ECCSECT409K1\": ec.SECT409K1(),\n        \"ECCSECT571K1\": ec.SECT571K1(),\n        \"ECCSECT163R2\": ec.SECT163R2(),\n        \"ECCSECT233R1\": ec.SECT233R1(),\n        \"ECCSECT283R1\": ec.SECT283R1(),\n        \"ECCSECT409R1\": ec.SECT409R1(),\n        \"ECCSECT571R2\": ec.SECT571R1(),\n    }\n\n    if key_type not in CERTIFICATE_KEY_TYPES:\n        raise Exception(\n            \"Invalid key type: {key_type}. Supported key types: {choices}\".format(\n                key_type=key_type, choices=\",\".join(CERTIFICATE_KEY_TYPES)\n            )\n        )\n\n    if \"RSA\" in key_type:\n        key_size = int(key_type[3:])\n        return rsa.generate_private_key(\n            public_exponent=65537, key_size=key_size, backend=default_backend()\n        )\n    elif \"ECC\" in key_type:\n        return ec.generate_private_key(\n            _CURVE_TYPES[key_type], backend=default_backend()\n        )\n\n\ndef check_cert_signature(cert, issuer_public_key):\n    \"\"\"\n    Check a certificate's signature against an issuer public key.\n    Before EC validation, make sure we support the algorithm, otherwise raise UnsupportedAlgorithm\n    On success, returns None; on failure, raises UnsupportedAlgorithm or InvalidSignature.\n    \"\"\"\n    if isinstance(issuer_public_key, rsa.RSAPublicKey):\n        # RSA requires padding, just to make life difficult for us poor developers :(\n        if cert.signature_algorithm_oid == x509.SignatureAlgorithmOID.RSASSA_PSS:\n            # In 2005, IETF devised a more secure padding scheme to replace PKCS #1 v1.5. To make sure that\n            # nobody can easily support or use it, they mandated lots of complicated parameters, unlike any\n            # other X.509 signature scheme.\n            # https://tools.ietf.org/html/rfc4056\n            raise UnsupportedAlgorithm(\"RSASSA-PSS not supported\")\n        else:\n            padder = padding.PKCS1v15()\n        issuer_public_key.verify(\n            cert.signature,\n            cert.tbs_certificate_bytes,\n            padder,\n            cert.signature_hash_algorithm,\n        )\n    elif isinstance(issuer_public_key, ec.EllipticCurvePublicKey) and isinstance(\n        ec.ECDSA(cert.signature_hash_algorithm), ec.ECDSA\n    ):\n        issuer_public_key.verify(\n            cert.signature,\n            cert.tbs_certificate_bytes,\n            ec.ECDSA(cert.signature_hash_algorithm),\n        )\n    else:\n        raise UnsupportedAlgorithm(\n            \"Unsupported Algorithm '{var}'.\".format(\n                var=cert.signature_algorithm_oid._name\n            )\n        )\n\n\ndef is_selfsigned(cert):\n    \"\"\"\n    Returns True if the certificate is self-signed.\n    Returns False for failed verification or unsupported signing algorithm.\n    \"\"\"\n    try:\n        check_cert_signature(cert, cert.public_key())\n        # If verification was successful, it's self-signed.\n        return True\n    except InvalidSignature:\n        return False\n\n\ndef is_weekend(date):\n    \"\"\"\n    Determines if a given date is on a weekend.\n\n    :param date:\n    :return:\n    \"\"\"\n    if date.weekday() > 5:\n        return True\n\n\ndef validate_conf(app, required_vars):\n    \"\"\"\n    Ensures that the given fields are set in the applications conf.\n\n    :param app:\n    :param required_vars: list\n    \"\"\"\n    for var in required_vars:\n        if var not in app.config:\n            raise InvalidConfiguration(\n                \"Required variable '{var}' is not set in Lemur's conf.\".format(var=var)\n            )\n\n\ndef check_validation(validation):\n    \"\"\"\n    Checks that the given validation string compiles successfully.\n\n    :param validation:\n    :return str: The validation pattern, if compilation succeeds\n    \"\"\"\n\n    try:\n        compiled = re.compile(validation)\n    except re.error as e:\n        raise InvalidConfiguration(f\"Validation {validation} couldn't compile. Reason: {e}\")\n\n    return compiled.pattern\n\n\n# https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/WindowedRangeQuery\ndef column_windows(session, column, windowsize):\n    \"\"\"Return a series of WHERE clauses against\n    a given column that break it into windows.\n\n    Result is an iterable of tuples, consisting of\n    ((start, end), whereclause), where (start, end) are the ids.\n\n    Requires a database that supports window functions,\n    i.e. Postgresql, SQL Server, Oracle.\n\n    Enhance this yourself !  Add a \"where\" argument\n    so that windows of just a subset of rows can\n    be computed.\n\n    \"\"\"\n\n    def int_for_range(start_id, end_id):\n        if end_id:\n            return and_(column >= start_id, column < end_id)\n        else:\n            return column >= start_id\n\n    q = session.query(\n        column, func.row_number().over(order_by=column).label(\"rownum\")\n    ).from_self(column)\n\n    if windowsize > 1:\n        q = q.filter(sqlalchemy.text(\"rownum %% %d=1\" % windowsize))\n\n    intervals = [id for id, in q]\n\n    while intervals:\n        start = intervals.pop(0)\n        if intervals:\n            end = intervals[0]\n        else:\n            end = None\n        yield int_for_range(start, end)\n\n\ndef windowed_query(q, column, windowsize):\n    \"\"\"\"Break a Query into windows on a given column.\"\"\"\n\n    for whereclause in column_windows(q.session, column, windowsize):\n        for row in q.filter(whereclause).order_by(column):\n            yield row\n\n\ndef truthiness(s):\n    \"\"\"If input string resembles something truthy then return True, else False.\"\"\"\n\n    return s.lower() in (\"true\", \"yes\", \"on\", \"t\", \"1\")\n\n\ndef find_matching_certificates_by_hash(cert, matching_certs):\n    \"\"\"Given a Cryptography-formatted certificate cert, and Lemur-formatted certificates (matching_certs),\n    determine if any of the certificate hashes match and return the matches.\"\"\"\n    matching = []\n    for c in matching_certs:\n        if parse_certificate(c.body).fingerprint(hashes.SHA256()) == cert.fingerprint(\n            hashes.SHA256()\n        ):\n            matching.append(c)\n    return matching\n\n\ndef convert_pkcs7_bytes_to_pem(certs_pkcs7):\n    \"\"\"\n    Given a list of certificates in pkcs7 encoding (bytes), covert them into a list of PEM encoded files\n    :raises ValueError or ValidationError\n    :param certs_pkcs7:\n    :return: list of certs in PEM format\n    \"\"\"\n\n    certificates = pkcs7.load_pem_pkcs7_certificates(certs_pkcs7)\n    certificates_pem = []\n    for cert in certificates:\n        certificates_pem.append(pem.parse(cert.public_bytes(encoding=Encoding.PEM))[0])\n\n    return certificates_pem\n\n\ndef get_certificate_via_tls(host, port, timeout=10):\n    \"\"\"\n    Makes a TLS network connection to retrieve the current certificate for the specified host and port.\n\n    Note that if the host is valid but the port is not, we'll wait for the timeout for the connection to fail,\n    so this should remain low when doing bulk operations.\n\n    :param host: Host to get certificate for\n    :param port: Port to get certificate for\n    :param timeout: Timeout in seconds\n    \"\"\"\n    context = ssl.create_default_context()\n    context.check_hostname = False  # we don't care about validating the cert\n    context.verify_mode = ssl.CERT_NONE  # we don't care about validating the cert; it may be self-signed\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.settimeout(timeout)\n    conn.connect((host, port))\n    sock = context.wrap_socket(conn, server_hostname=host)\n    sock.settimeout(timeout)\n    try:\n        der_cert = sock.getpeercert(True)\n    finally:\n        sock.close()\n    return ssl.DER_cert_to_PEM_cert(der_cert)\n\n\ndef parse_serial(pem_certificate):\n    \"\"\"\n    Parses a serial number from a PEM-encoded certificate.\n    \"\"\"\n    x509_cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, pem_certificate)\n    x509_cert.get_notAfter()\n    parsed_certificate = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, pem_certificate)\n    return parsed_certificate.get_serial_number()\n\n\ndef data_encrypt(data):\n    \"\"\"\n    takes an input and returns a base64 encoded encryption\n    reusing the Vault DB encryption module\n    :param data: string\n    :return: base64 ciphertext\n    \"\"\"\n    if not isinstance(data, str):\n        data = str(data)\n    ciphertext = Vault().process_bind_param(data, TEXT())\n    return ciphertext.decode(\"utf8\")\n\n\ndef data_decrypt(ciphertext):\n    \"\"\"\n    takes a ciphertext and returns the respective string\n    reusing the Vault DB encryption module\n    :param ciphertext: base64 ciphertext\n    :return: plaintext string\n    \"\"\"\n    return Vault().process_result_value(ciphertext.encode(\"utf8\"), TEXT())\n\n\ndef is_json(json_input):\n    \"\"\"\n    Test if input is json\n    :param json_input:\n    :return: True or False\n    \"\"\"\n    try:\n        json.loads(json_input)\n    except ValueError:\n        return False\n    return True\n\n\ndef drop_last_cert_from_chain(full_chain: str) -> str:\n    \"\"\"\n    drops the last certificate from a certificate chai, if more than one CA/subCA in the chain\n    :param full_chain: string of a certificate chain\n    :return:  string of a new certificate chain, omitting the last certificate\n    \"\"\"\n    if full_chain == '' or full_chain.count(\"BEGIN CERTIFICATE\") <= 1:\n        return full_chain\n    full_chain_certs = CERT_PEM_REGEX.findall(full_chain.encode())\n    pem_certificate = OpenSSL.crypto.dump_certificate(\n        OpenSSL.crypto.FILETYPE_PEM,\n        OpenSSL.crypto.load_certificate(\n            OpenSSL.crypto.FILETYPE_PEM, ''.join(cert.decode() for cert in full_chain_certs[:-1])\n        ),\n    ).decode()\n    return pem_certificate\n", "# This is just Python which means you can inherit and tweak settings\n\nimport base64\nimport os\nimport secrets\nimport string\n\n_basedir = os.path.abspath(os.path.dirname(__file__))\n\n\n# generate random secrets for unittest\ndef get_random_secret(length):\n    secret_key = ''.join(secrets.choice(string.ascii_uppercase) for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(secrets.choice(\"~!@#$%^&*()_+\") for x in range(round(length / 4)))\n    secret_key = secret_key + ''.join(secrets.choice(string.ascii_lowercase) for x in range(round(length / 4)))\n    return secret_key + ''.join(secrets.choice(string.digits) for x in range(round(length / 4)))\n\n\nTHREADS_PER_PAGE = 8\n\n# General\n\n# These will need to be set to `True` if you are developing locally\nCORS = False\ndebug = False\n\nTESTING = True\n\n# All the secrets below must be generated using CRYPTOGRAPHICALLY SECURE RANDOMNESS and kept private\n# (ideally they would not be stored directly in this config file).\n# See Lemur's documentation for more information on secret management.\n\n# this is the secret key used by flask session management (utf8 encoded)\nSECRET_KEY = get_random_secret(length=32).encode('utf8')\n\n\n# You should consider storing these separately from your config (should be URL-safe)\nLEMUR_TOKEN_SECRET = \"test\"\nLEMUR_ENCRYPTION_KEYS = base64.urlsafe_b64encode(get_random_secret(length=32).encode('utf8'))\n\n\n# this is the secret used to generate oauth state tokens\nOAUTH_STATE_TOKEN_SECRET = base64.b64encode(get_random_secret(32).encode('utf8'))\n\nOAUTH_STATE_TOKEN_STALE_TOLERANCE_SECONDS = 15\n\n# List of domain regular expressions that non-admin users can issue\nLEMUR_ALLOWED_DOMAINS = [\n    r\"^[a-zA-Z0-9-]+\\.example\\.com$\",\n    r\"^[a-zA-Z0-9-]+\\.example\\.org$\",\n    r\"^example\\d+\\.long\\.com$\",\n]\n\n# Mail Server\n\n# Lemur currently only supports SES for sending email, this address\n# needs to be verified\nLEMUR_EMAIL = \"lemur@example.com\"\nLEMUR_SECURITY_TEAM_EMAIL = [\"security@example.com\"]\n\nLEMUR_HOSTNAME = \"lemur.example.com\"\n\n# Logging\n\nLOG_LEVEL = \"DEBUG\"\nLOG_FILE = \"lemur.log\"\n\nLEMUR_DEFAULT_COUNTRY = \"US\"\nLEMUR_DEFAULT_STATE = \"California\"\nLEMUR_DEFAULT_LOCATION = \"Los Gatos\"\nLEMUR_DEFAULT_ORGANIZATION = \"Example, Inc.\"\nLEMUR_DEFAULT_ORGANIZATIONAL_UNIT = \"Example\"\n\nLEMUR_ALLOW_WEEKEND_EXPIRATION = False\n\n# needed for test_certificates\nLEMUR_PORTS_FOR_DEPLOYED_CERTIFICATE_CHECK = [443, 65521, 65522, 65523, 65524]\n\n# needed for test_messaging\nLEMUR_REISSUE_NOTIFICATION_EXCLUDED_DESTINATIONS = ['excluded-destination']\n\n# Database\n\n# modify this if you are not using a local database. Do not use any development or production DBs,\n# as Unit Tests drop the whole schema, recreate and again drop everything at the end\nSQLALCHEMY_DATABASE_URI = os.getenv(\n    \"SQLALCHEMY_DATABASE_URI\", \"postgresql://lemur:lemur@localhost:5432/lemur\"\n)\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n\n# AWS\nLEMUR_INSTANCE_PROFILE = \"Lemur\"\n\n# Issuers\n\n# These will be dependent on which 3rd party that Lemur is\n# configured to use.\n\n# CLOUDCA_URL = ''\n# CLOUDCA_PEM_PATH = ''\n# CLOUDCA_BUNDLE = ''\n\n# number of years to issue if not specified\n# CLOUDCA_DEFAULT_VALIDITY = 2\n\n\nDIGICERT_URL = \"mock://www.digicert.com\"\nDIGICERT_ORDER_TYPE = \"ssl_plus\"\nDIGICERT_API_KEY = \"api-key\"\nDIGICERT_ORG_ID = 111111\nDIGICERT_ROOT = \"ROOT\"\n\nDIGICERT_CIS_URL = \"mock://www.digicert.com\"\nDIGICERT_CIS_PROFILE_NAMES = {\"sha2-rsa-ecc-root\": \"ssl_plus\"}\nDIGICERT_CIS_API_KEY = \"api-key\"\nDIGICERT_CIS_ROOTS = {\"root\": \"ROOT\"}\n\nVERISIGN_URL = \"http://example.com\"\nVERISIGN_PEM_PATH = \"~/\"\nVERISIGN_FIRST_NAME = \"Jim\"\nVERISIGN_LAST_NAME = \"Bob\"\nVERSIGN_EMAIL = \"jim@example.com\"\n\nACME_AWS_ACCOUNT_NUMBER = \"11111111111\"\n\nACME_PRIVATE_KEY = \"\"\"\n-----BEGIN RSA PRIVATE KEY-----\nMIIJJwIBAAKCAgEA0+jySNCc1i73LwDZEuIdSkZgRYQ4ZQVIioVf38RUhDElxy51\n4gdWZwp8/TDpQ8cVXMj6QhdRpTVLluOz71hdvBAjxXTISRCRlItzizTgBD9CLXRh\nvPLIMPvAJH7JZxp9xW5oVYUcHBveQJ5tQvnP7RgPykejl7DPKm/SGKYealnoGPcP\nU9ipz2xXlVlx7ZKivLbaijh2kD/QE9pC//CnP31g3QFCsxOTLAWtICz5VbvaWuTT\nwhqFs5cT3kKYAW/ccPcty573AX/9Y/UZ4+B3wxXY3/6GYPMcINRuu/7Srs3twlNu\nudoTNdM9SztWMYUzz1SMYad9v9LLGTrv+5Tog4YsqMFxyKrBBBz8/bf1lKwyfAW+\nokvVe+1bUY8iSDuDx1O0iMyHe5w8lxsoTy91ujjr1cQDyJR70TKQpeBmfNtBVnW+\nD8E6Xw2yCuL9XTyBApldzQ/J1ObPd1Hv+yzhEx4VD9QOmQPn7doiapTDYfW51o1O\nMo+zuZgsclhePvzqN4/6VYXZnPE68uqx982u0W82tCorRUtzfFoO0plNRCjmV7cw\n0fp0ie3VczUOH9gj4emmdQd1tVA/Esuh3XnzZ2ANwohtPytn+I3MX0Q+5k7AcRlt\nAyI80x8CSiDStI6pj3BlPJgma9G8u7r3E2aqW6qXCexElTCaH2t8A7JWI80CAwEA\nAQKCAgBDXLyQGwiQKXPYFDvs/cXz03VNA9/tdQV/SzCT8FQxhXIN5B4DEPQNY08i\nKUctjX6j9RtgoQsKKmvx9kY/omaBntvQK/RzDXpJrx62tMM1dmpyCpn7N24d7BlD\nQK6DQO+UMCmobdzmrpEzF2mCLelD5C84zRca5FCmm888mKn4gsX+EaNksu4gCr+4\nsSs/KyriNHo6EALYjgB2Hx7HP1fbHd8JwhnS1TkmeFN1c/Z6o3GhDTancEjqMu9U\n6vRpGIcJvflnzguVBXumJ8boInXPpQVBBybucLmTUhQ1XKbafInFCUKcf881gAXv\nAVi/+yjiEm1hqZ2WucpoJc0du1NBz/MP+/MxHGQ/5eaEMIz5X2QcXzQ4xn5ym0sk\nHy0SmH3v/9by1GkK5eH/RTV/8bmtb8Qt0+auLQ6/ummFDjPw866Or4FdL3tx2gug\nfONjaZqypee+EmlLG1UmMejjCblmh0bymAHnFkf7tAJsLGd8I00PQiObEqaqd03o\nxiYUvrbDpCHah4gB7Uv3AgrHVTbcHsEWmXuNDooD0sSXCFMf3cA81M8vGfkypqi/\nixxZtxtdTU5oCFwI9zEjnQvdA1IZMUAmz8vLwn/fKgENek9PAV3voQr1c0ctZPvy\nS/k7HgJt+2Wj7Pqb4mwPgxeYVSBEM7ygOq6Gdisyhi8DP0A2fQKCAQEA6iIrSqQM\npVDqhQsk9Cc0b4kdsG/EM66M7ND5Q2GLiPPFrR59Hm7ViG6h2DhwqSnSRigiO+TN\njIuvD/O0kbmCUZSar19iKPiJipENN+AX3MBm1cS5Oxp6jgY+3jj4KgDQPYmL49fJ\nCojnmLKjrAPoUi4f/7s4O1rEAghXPrf5/9coaRPORiNi+bZK0bReJwf1GE/9CPqs\nFiZrQNz+/w/1MwFisG6+g0/58fp9j9r6l8JXETjpyO5F+8W8bg8M4V7aoYt5Ec2X\n+BG6Gq06Tvm2UssYa6iEVNSKF39ssBzKKALi4we/fcfwjq4bCTKMCjV0Tp3zY/FG\n1VyDtMGKrlPnOwKCAQEA57Nw+qdh2wbihz1uKffcoDoW6Q3Ws0mu8ml+UvBn48Ur\n41PKrvIb8lhVY7ZiF2/iRyodua9ztE4zvgGs7UqyHaSYHR+3mWeOAE2Hb/XiNVgu\nJVupTXLpx3y7d9FxvrU/27KUxhJgcbVpIGRiMn5dmY2S86EYKX1ObjZKmwvFc6+n\n1YWgtI2+VOKe5+0ttig6CqzL9qJLZfL6QeAy0yTp/Wz+G1c06XTL87QNeU7CXN00\nrB7I4n1Xn422rZnE64MOsARVChyE2fUC9syfimoryR9yIL2xor9QdjL2tK6ziyPq\nWgedY4bDjZLM5KbcHcRng0j5WCJV+pX9Hh1c4n5AlwKCAQAxjun68p56n5YEc0dv\nJp1CvpM6NW4iQmAyAEnCqXMPmgnNixaQyoUIS+KWEdxG8kM/9l7IrrWTej2j8sHV\n1p5vBjV3yYjNg04ZtnpFyXlDkLYzqWBL0l7+kPPdtdFRkrqBTAwAPjyfrjrXZ3id\ngHY8bub3CnnsllnG1F0jOW4BaVl0ZGzVC8h3cs6DdNo5CMYoT0YQEH88cQVixWR0\nOLx9/10UW1yYDuWpAoxxVriURt6HFrTlgwntMP2hji37xkggyZTm3827BIWP//rH\nnLOq8rJIl3LrQdG5B4/J904TCglcZNdzmE6i5Nd0Ku7ZelcUDPrnvLpxjxORvyXL\noJbhAoIBAD7QV9WsIQxG7oypa7828foCJYni9Yy/cg1H6jZD9HY8UuybH7yT6F2n\n8uZIYIloDJksYsifNyfvd3mQbLgb4vPEVnS2z4hoGYgdfJUuvLeng0MfeWOEvroV\nJ6GRB1wjOP+vh0O3YawR+UEN1c1Iksl5JxijWLCOxv97+nfUFiCJw19QjcPFFY9f\nrKLFmvniJ/IS7GydjQFDgPLw+/Zf8IuCy9TPrImJ32zfKDP11R1l3sy2v9EfF+0q\ndxbTNB6A9i9jzUYjeyS3lqkfyjS1Gc+5lbAonQq5APA6WsWbAxO6leL4Y4PC2ir8\nXE20qsHrKADgfLCXBmYb2XYbkb3ZalsCggEAfOuB9/eLMSmtney3vDdZNF8fvEad\nDF+8ss8yITNQQuC0nGdXioRuvSyejOxtjHplMT5GXsgLp1vAujDQmGTv/jK+EXsU\ncRe4df5/EbRiUOyx/ZBepttB1meTnsH6cGPN0JnmTMQHQvanL3jjtjrC13408ONK\n1yK2S4xJjKYFLT86SjKvV6g5k49ntLYk59nviqHl8bYzAVMoEjb62Z+hERwd/2hx\nomsEEjDt4qVqGvSyy+V/1EhqGPzm9ri3zapnorf69rscuXYYsMBZ8M6AtSio4ldB\nLjCRNS1lR6/mV8AqUNR9Kn2NLQyJ76yDoEVLulKZqGUsC9STN4oGJLUeFw==\n-----END RSA PRIVATE KEY-----\n\"\"\"\n\nACME_ROOT = \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIFjTCCA3WgAwIBAgIRANOxciY0IzLc9AUoUSrsnGowDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTYxMDA2MTU0MzU1\nWhcNMjExMDA2MTU0MzU1WjBKMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg\nRW5jcnlwdDEjMCEGA1UEAxMaTGV0J3MgRW5jcnlwdCBBdXRob3JpdHkgWDMwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCc0wzwWuUuR7dyXTeDs2hjMOrX\nNSYZJeG9vjXxcJIvt7hLQQWrqZ41CFjssSrEaIcLo+N15Obzp2JxunmBYB/XkZqf\n89B4Z3HIaQ6Vkc/+5pnpYDxIzH7KTXcSJJ1HG1rrueweNwAcnKx7pwXqzkrrvUHl\nNpi5y/1tPJZo3yMqQpAMhnRnyH+lmrhSYRQTP2XpgofL2/oOVvaGifOFP5eGr7Dc\nGu9rDZUWfcQroGWymQQ2dYBrrErzG5BJeC+ilk8qICUpBMZ0wNAxzY8xOJUWuqgz\nuEPxsR/DMH+ieTETPS02+OP88jNquTkxxa/EjQ0dZBYzqvqEKbbUC8DYfcOTAgMB\nAAGjggFnMIIBYzAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADBU\nBgNVHSAETTBLMAgGBmeBDAECATA/BgsrBgEEAYLfEwEBATAwMC4GCCsGAQUFBwIB\nFiJodHRwOi8vY3BzLnJvb3QteDEubGV0c2VuY3J5cHQub3JnMB0GA1UdDgQWBBSo\nSmpjBH3duubRObemRWXv86jsoTAzBgNVHR8ELDAqMCigJqAkhiJodHRwOi8vY3Js\nLnJvb3QteDEubGV0c2VuY3J5cHQub3JnMHIGCCsGAQUFBwEBBGYwZDAwBggrBgEF\nBQcwAYYkaHR0cDovL29jc3Aucm9vdC14MS5sZXRzZW5jcnlwdC5vcmcvMDAGCCsG\nAQUFBzAChiRodHRwOi8vY2VydC5yb290LXgxLmxldHNlbmNyeXB0Lm9yZy8wHwYD\nVR0jBBgwFoAUebRZ5nu25eQBc4AIiMgaWPbpm24wDQYJKoZIhvcNAQELBQADggIB\nABnPdSA0LTqmRf/Q1eaM2jLonG4bQdEnqOJQ8nCqxOeTRrToEKtwT++36gTSlBGx\nA/5dut82jJQ2jxN8RI8L9QFXrWi4xXnA2EqA10yjHiR6H9cj6MFiOnb5In1eWsRM\nUM2v3e9tNsCAgBukPHAg1lQh07rvFKm/Bz9BCjaxorALINUfZ9DD64j2igLIxle2\nDPxW8dI/F2loHMjXZjqG8RkqZUdoxtID5+90FgsGIfkMpqgRS05f4zPbCEHqCXl1\neO5HyELTgcVlLXXQDgAWnRzut1hFJeczY1tjQQno6f6s+nMydLN26WuU4s3UYvOu\nOsUxRlJu7TSRHqDC3lSE5XggVkzdaPkuKGQbGpny+01/47hfXXNB7HntWNZ6N2Vw\np7G6OfY+YQrZwIaQmhrIqJZuigsrbe3W+gdn5ykE9+Ky0VgVUsfxo52mwFYs1JKY\n2PGDuWx8M6DlS6qQkvHaRUo0FMd8TsSlbF0/v965qGFKhSDeQoMpYnwcmQilRh/0\nayLThlHLN81gSkJjVrPI0Y8xCVPB4twb1PFUd2fPM3sA1tJ83sZ5v8vgFv2yofKR\nPB0t6JzUA81mSqM3kxl5e+IZwhYAyO0OTg3/fs8HqGTNKd9BqoUwSRBzp06JMg5b\nrUCGwbCUDI0mxadJ3Bz4WxR6fyNpBK2yAinWEsikxqEt\n-----END CERTIFICATE-----\n\"\"\"\nACME_URL = \"https://acme-v01.api.letsencrypt.org\"\nACME_EMAIL = \"jim@example.com\"\nACME_TEL = \"4088675309\"\nACME_DIRECTORY_URL = \"https://acme-v01.api.letsencrypt.org\"\nACME_DISABLE_AUTORESOLVE = True\nACME_PREFERRED_ISSUER = \"R3\"\n\nLDAP_AUTH = True\nLDAP_BIND_URI = \"ldap://localhost\"\nLDAP_BASE_DN = \"dc=example,dc=com\"\nLDAP_EMAIL_DOMAIN = \"example.com\"\nLDAP_REQUIRED_GROUP = \"Lemur Access\"\nLDAP_DEFAULT_ROLE = \"role1\"\n\nALLOW_CERT_DELETION = True\n\nENTRUST_API_CERT = \"api-cert\"\nENTRUST_API_KEY = get_random_secret(32)\nENTRUST_API_USER = \"user\"\nENTRUST_API_PASS = get_random_secret(32)\nENTRUST_URL = \"https://api.entrust.net/enterprise/v2\"\nENTRUST_ROOT = \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC\nVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50\ncnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs\nIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz\ndCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy\nNTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu\ndHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt\ndGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0\naG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj\nYXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T\nRU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN\ncCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW\nwcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1\nU1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0\njaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP\nBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN\nBgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/\njTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ\nRkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v\n1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R\nnAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH\nVHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==\n-----END CERTIFICATE-----\n\"\"\"\nENTRUST_NAME = \"lemur\"\nENTRUST_EMAIL = \"lemur@example.com\"\nENTRUST_PHONE = \"123456\"\nENTRUST_ISSUING = \"\"\nENTRUST_PRODUCT_ENTRUST = \"ADVANTAGE_SSL\"\n\nAWS_ELB_IGNORE_TAG = \"lemur-test-ignore\"\n"], "filenames": ["CHANGELOG.rst", "docker/src/lemur.conf.py", "docs/administration.rst", "lemur/common/utils.py", "lemur/tests/conf.py"], "buggy_code_start_loc": [6, 2, 146, 11, 5], "buggy_code_end_loc": [6, 25, 151, 74, 27], "fixing_code_start_loc": [7, 2, 146, 10, 5], "fixing_code_end_loc": [15, 25, 151, 74, 32], "type": "CWE-330", "message": "\n\nNetflix Lemur before version 1.3.2 used insufficiently random values when generating default credentials. The insufficiently random values may allow an attacker to guess the credentials and gain access to resources managed by Lemur.\n\n\n", "other": {"cve": {"id": "CVE-2023-30797", "sourceIdentifier": "disclosure@vulncheck.com", "published": "2023-04-19T20:15:12.377", "lastModified": "2023-05-01T19:55:01.860", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "\n\nNetflix Lemur before version 1.3.2 used insufficiently random values when generating default credentials. The insufficiently random values may allow an attacker to guess the credentials and gain access to resources managed by Lemur.\n\n\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "disclosure@vulncheck.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-330"}]}, {"source": "disclosure@vulncheck.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-330"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netflix:lemur:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.2", "matchCriteriaId": "AA02A184-ED2B-4577-BAB1-1B536179C263"}]}]}], "references": [{"url": "https://github.com/Netflix/lemur/commit/666d853212174ee7f4e6f8b3b4b389ede1872238", "source": "disclosure@vulncheck.com", "tags": ["Patch"]}, {"url": "https://github.com/Netflix/lemur/security/advisories/GHSA-5fqv-mpj8-h7gm", "source": "disclosure@vulncheck.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/Netflix/security-bulletins/blob/master/advisories/nflx-2023-001.md", "source": "disclosure@vulncheck.com", "tags": ["Vendor Advisory"]}, {"url": "https://vulncheck.com/advisories/netflix-lemur-weak-rng", "source": "disclosure@vulncheck.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Netflix/lemur/commit/666d853212174ee7f4e6f8b3b4b389ede1872238"}}