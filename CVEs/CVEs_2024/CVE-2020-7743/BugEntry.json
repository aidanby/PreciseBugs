{"buggy_code": ["# History\n\n# 2020-10-07, version 7.5.0\n\n- Function `pickRandom` now allows randomly picking elements from matrices \n  with 2 or more dimensions instead of only from a vector, see #1974.\n  Thanks @KonradLinkowski.\n\n\n# 2020-10-07, version 7.4.0\n\n- Implemented support for passing a precision in functions `ceil`, `floor`, \n  and `fix`, similar to `round`, see #1967, #1901. Thanks @rnd-debug.\n- Implemented function `rotationMatrix`, see #1160, #1984. Thanks @rnd-debug.\n- Implement a clear error message when using `sqrtm` with a matrix having \n  more than two dimensions. Thanks @KonradLinkowski.\n- Update dependency `decimal.js` to `10.2.1`.\n\n\n# 2020-09-26, version 7.3.0\n\n- Implemented functions `usolveAll` and `lsolveAll`, see #1916. Thanks @m93a.\n- Implemented support for units in functions `std` and `variance`, see #1950. \n  Thanks @rnd-debug.\n- Implemented support for binary, octal, and hexadecimal notation in the \n  expression parser, and implemented functions `bin`, `oct`, and `hex` for \n  formatting. Thanks @clnhlzmn.\n- Fix #1964: inconsistent calculation of negative dividend modulo for \n  `BigNumber` and `Fraction`. Thanks @ovk.\n\n\n# 2020-08-24, version 7.2.0\n\n- Implemented new function `diff`, see #1634, #1920. Thanks @Veeloxfire. \n- Implemented support for norm 2 for matrices in function `norm`. \n  Thanks @rnd-debug. \n\n\n# 2020-07-13, version 7.1.0\n\n- Implement support for recursion (self-referencing) of typed-functions, \n  new in `typed-function@2.0.0`. This fixes #1885: functions which where \n  extended with a new data type did not always work. Thanks @nickewing.\n- Fix #1899: documentation on expression trees still using old namespace \n  `math.expression.node.*` instead of `math.*`.\n\n\n# 2020-06-24, version 7.0.2\n\n- Fix #1882: have `DenseMatrix.resize` and `SparseMatrix.resize` accept \n  `DenseMatrix` and `SparseMatrix` as inputs too, not only `Array`.\n- Fix functions `sum`, `prod`, `min`, and `max` not throwing a conversion error\n  when passing a single string, like `sum(\"abc\")`.\n\n\n# 2020-05-30, version 7.0.1\n\n- Fix #1844: clarify the documentation of function `eigs`. Thanks @Lazersmoke.\n- Fix #1855: Fix error in the documentation for `math.nthRoots(x)`.  \n- Fix #1856: make the library robust against Object prototype pollution.\n\n\n# 2020-05-07, version 7.0.0\n\nBreaking changes:\n\n- Improvements in calculation of the `dot` product of complex values. \n  The first argument is now conjugated. See #1761. Thanks @m93a.  \n- Dropped official support for Node.js v8 which has reached end of life.\n- Removed all deprecation warnings introduced in v6. \n  To upgrade smoothly from v5 to v7 or higher, upgrade to v6 first\n  and resolve all deprecation warnings.\n\n\n# 2020-05-04, version 6.6.5\n\n- Fix #1834: value `Infinity` cannot be serialized and deserialized. \n  This is solved now with a new `math.replacer` function used as \n  `JSON.stringify(value, math.replacer)`.\n- Fix #1842: value `Infinity` not turned into the latex symbol `\\\\infty`.\n\n\n# 2020-04-15, version 6.6.4\n\n- Fix published files containing Windows line endings (CRLF instead of LF).  \n\n\n# 2020-04-10, version 6.6.3\n\n- Fix #1813: bug in engineering notation for numbers of function `format`,\n  sometimes resulting in needless trailing zeros.\n- Fix #1808: methods `.toNumber()` and `.toNumeric()` not working on a \n  unitless unit.\n- Fix #1645: not being able to use named operators `mod`, `and`, `not`, `or`,\n  `xor`, `to`, `in` as object keys. Thanks @Veeloxfire.\n- Fix `eigs` not using `config.epsilon`.\n\n\n# 2020-03-29, version 6.6.2\n\n- Fix #1789: Function `eigs` not calculating with BigNumber precision \n  when input contains BigNumbers.\n- Run the build script during npm `prepare`, so you can use the library\n  directly when installing directly from git. See #1751. Thanks @cinderblock.\n\n\n# 2020-02-26, version 6.6.1\n\n- Fix #1725: simplify `a/(b/c)`. Thanks @dbramwell.\n- Fix examples in documentation of `row` and `column`.\n\n\n# 2020-02-01, version 6.6.0\n\n- Implemented function `eigs`, see #1705, #542 #1175. Thanks @arkajitmandal.\n- Fixed #1727: validate matrix size when creating a `DenseMatrix` using\n  `fromJSON`.\n- Fixed `DenseMatrix.map` copying the size and datatype from the original\n  matrix instead of checking the returned dimensions and type of the callback.\n- Add a caret to dependencies (like) `^1.2.3`) to allow downstream updates\n  without having to await a new release of mathjs.\n\n\n# 2020-01-08, version 6.5.0\n\n- Implemented `baseName` option for `createUnit`, see #1707.\n  Thanks @ericman314.\n\n\n# 2020-01-06, version 6.4.0\n\n- Extended function `dimension` with support for n-dimensional points.\n  Thanks @Veeloxfire.\n\n\n# 2019-12-31, version 6.3.0\n\n- Improved performance of `factorial` for `BigNumber` up to a factor two,\n  see #1687. Thanks @kmdrGroch.\n\n\n# 2019-11-20, version 6.2.5\n\n- Fixed `IndexNode` using a hardcoded, one-based implementation of `index`,\n  making it impossible to instantiate a zero-based version of the expression\n  parser. See #782.\n\n\n# 2019-11-20, version 6.2.4\n\n- Fixed #1669: function 'qr' threw an error if the pivot was zero,\n  thanks @kevinkelleher12 and @harrysarson.\n- Resolves #942: remove misleading assert in 'qr'. Thanks @harrysarson.\n- Work around a bug in complex.js where `sign(0)` returns complex NaN.\n  Thanks @harrysarson.\n\n\n# 2019-10-06, version 6.2.3\n\n- Fixed #1640: function `mean` not working for units. Thanks @clintonc.\n- Fixed #1639: function `min` listed twice in the \"See also\" section of the\n  embedded docs of function `std`.\n- Improved performance of `isPrime`, see #1641. Thanks @arguiot.\n\n\n# 2019-09-23, version 6.2.2\n\n- Fixed methods `map` and `clone` not copying the `dotNotation` property of\n  `IndexNode`. Thanks @rianmcguire.\n- Fixed a typo in the documentation of `toHTML`. Thanks @maytanthegeek.\n- Fixed #1615: error in the docs of `isNumeric`.\n- Fixed #1628: Cannot call methods on empty strings or numbers with value `0`.\n\n\n# 2019-08-31, version 6.2.1\n\n- Fixed #1606: function `format` not working for expressions.\n\n\n# 2019-08-28, version 6.2.0\n\n- Improved performance of `combinationsWithRep`. Thanks @waseemyusuf.\n- Add unit aliases `bit` and `byte`.\n- Fix docs referring to `bit` and `byte` instead of `bits` and `bytes`.\n- Updated dependency `typed-function@1.1.1`.\n\n\n# 2019-08-17, version 6.1.0\n\n- Implemented function `combinationsWithRep` (see #1329). Thanks @waseemyusuf.\n\n\n# 2019-08-05, version 6.0.4\n\n- Fixed #1554, #1565: ES Modules where not transpiled to ES5, giving issues on\n  old browsers. Thanks @mockdeep for helping to find a solution.\n\n\n# 2019-07-07, version 6.0.3\n\n- Add `unpkg` and `jsdelivr` fields in package.json pointing to UMD build.\n  Thanks @tmcw.\n- Fix #1550: nested user defined function not receiving variables of an\n  outer user defined function.\n\n\n# 2019-06-11, version 6.0.2\n\n- Fix not being able to set configuration after disabling function `import`\n  (regression since v6.0.0).\n\n\n# 2019-06-09, version 6.0.1\n\n- Fix function reference not published in npm library.\n- Fix function `evaluate` and `parse` missing in generated docs.\n\n\n# 2019-06-08, version 6.0.0\n\n!!! BE CAREFUL: BREAKING CHANGES !!!\n\n### Most notable changes\n\n1.  Full support for **ES modules**. Support for tree-shaking out of the box.\n\n    Load all functions:\n\n    ```js\n    import * as math from 'mathjs'\n    ```\n\n    Use a few functions:\n\n    ```js\n    import { add, multiply } from 'mathjs'\n    ```\n\n    Load all functions with custom configuration:\n\n    ```js\n    import { create, all } from 'mathjs'\n    const config = { number: 'BigNumber' }\n    const math = create(all, config)\n    ```\n\n    Load a few functions with custom configuration:\n\n    ```js\n    import { create, addDependencies, multiplyDependencies } from 'mathjs'\n    const config = { number: 'BigNumber' }\n    const { add, multiply } = create({\n      addDependencies,\n      multiplyDependencies\n    }, config)\n    ```\n\n2.  Support for **lightweight, number-only** implementations of all functions:\n\n    ```\n    import { add, multiply } from 'mathjs/number'\n    ```\n\n3.  New **dependency injection** solution used under the hood.\n\n\n### Breaking changes\n\n- Node 6 is no longer supported.\n\n- Functions `config` and `import` are not available anymore in the global\n  context:\n\n  ```js\n  // v5\n  import * as mathjs from 'mathjs'\n  mathjs.config(...) // error in v6.0.0\n  mathjs.import(...) // error in v6.0.0\n  ```\n\n  Instead, create your own mathjs instance and pass config and imports\n  there:\n\n  ```js\n  // v6\n  import { create, all } from 'mathjs'\n  const config = { number: 'BigNumber' }\n  const mathjs = create(all, config)\n  mathjs.import(...)\n  ```\n\n- Renamed function `typeof` to `typeOf`, `var` to `variance`,\n  and `eval` to `evaluate`. (the old function names are reserved keywords\n  which can not be used as a variable name).\n- Deprecated the `Matrix.storage` function. Use `math.matrix` instead to create\n  a matrix.\n- Deprecated function `math.expression.parse`, use `math.parse` instead.\n  Was used before for example to customize supported characters by replacing\n  `math.parse.isAlpha`.\n- Moved all classes like `math.type.Unit` and `math.expression.Parser` to\n  `math.Unit` and `math.Parser` respectively.\n- Fixed #1428: transform iterating over replaced nodes. New behavior\n  is that it stops iterating when a node is replaced.\n- Dropped support for renaming factory functions when importing them.\n- Dropped fake BigNumber support of function `erf`.\n- Removed all index.js files used to load specific functions instead of all, like:\n\n  ```\n  // v5\n  // ... set up empty instance of mathjs, then load a set of functions:\n  math.import(require('mathjs/lib/function/arithmetic'))\n  ```\n\n  Individual functions are now loaded simply like:\n\n  ```js\n  // v6\n  import { add, multiply } from 'mathjs'\n  ```\n\n  To set a specific configuration on the functions:\n\n  ```js\n  // v6\n  import { create, addDependencies, multiplyDependencies } from 'mathjs'\n  const config = { number: 'BigNumber' }\n  const math = create({ addDependencies, multiplyDependencies }, config)\n  ```\n\n  See example `advanced/custom_loading.js`.\n\n- Updated the values of all physical units to their latest official values.\n  See #1529. Thanks @ericman314.\n\n### Non breaking changes\n\n- Implemented units `t`, `tonne`, `bel`, `decibel`, `dB`, and prefixes\n  for `candela`. Thanks @mcvladthegoat.\n- Fixed `epsilon` setting being applied globally to Complex numbers.\n- Fix `math.simplify('add(2, 3)')` throwing an error.\n- Fix #1530: number formatting first applied `lowerExp` and `upperExp`\n  and after that rounded the value instead of the other way around.\n- Fix #1473: remove `'use strict'` in every file, not needed anymore.\n\n\n# 2019-05-18, version 5.10.3\n\n- Fixed dependency `del` being a dependency instead of devDependency.\n\n\n# 2019-05-18, version 5.10.2\n\n- Fix #1515, #1516, #1517: broken package due to a naming conflict in\n  the build folder of a util file `typeOf.js` and `typeof.js`.\n  Solved by properly cleaning all build folders before building.\n\n\n# 2019-05-17, version 5.10.1\n\n- Fix #1512: format using notation `engineering` can give wrong results\n  when the value has less significant digits than the number of digits in\n  the output.\n\n\n# 2019-05-08, version 5.10.0\n\n- Fix `lib/header.js` not having filled in date and version. Thanks @kevjin.\n- Upgraded dependency `decimal.js@10.2.0`, fixing an issue on node.js 12.\n\n\n# 2019-04-08, version 5.9.0\n\n- Implemented functions `row` and `column` (see #1413). Thanks @SzechuanSage.\n- Fixed #1459: `engineering` notation of function `format` not available\n  for `BigNumber`.\n- Fixed #1465: `node.toHTML()` not correct for unary operators like\n  `factorial`.\n\n\n# 2019-03-20, version 5.8.0\n\n- Implemented new function `apply`. Thanks @bnlcas.\n- Implemented passing an optional `dimension` argument to `std` and `var`.\n  Thanks @bnlcas.\n\n\n# 2019-03-10, version 5.7.0\n\n- Implemented support for `pow()` in `derivative`. Thanks @sam-19.\n- Gracefully handle round-off errors in fix, ceil, floor, and range\n  (Fixes #1429, see also #1434, #1432). Thanks @ericman314.\n\n\n# 2019-03-02, version 5.6.0\n\n- Upgrade decimal.js to v10.1.1 (#1421).\n- Fixed #1418: missing whitespace when stringifying an expression\n  containing \"not\".\n\n\n# 2019-02-20, version 5.5.0\n\n- Fixed #1401: methods `map` and `forEach` of `SparseMatrix` not working\n  correctly when indexes are unordered.\n- Fixed #1404: inconsistent rounding of negative numbers.\n- Upgrade tiny-emitter to v2.1.0 (#1397).\n\n\n# 2019-01-25, version 5.4.2\n\n- Fixed `math.format` not working for BigNumbers with a precision above\n  1025 digits (see #1385). Thanks @ericman314.\n- Fixed incorrect LaTeX output of `RelationalNode`. Thanks @rianmcguire.\n- Fixed a bug the methods `map`, `forEach`, `traverse`, and `transform`\n  of `FunctionNode`.\n\n\n# 2019-01-10, version 5.4.1\n\n- Fix #1378: negative bignumbers not formatted correctly.\n- Upgrade fraction.js to version 4.0.12 (#1369).\n\n\n# 2018-12-09, version 5.4.0\n\n- Extended sum.js to accept a dimension input to calculate the sum over a\n  specific axis. Thanks @bnlcas.\n- Fix #1328: objects can't be written multi-line. Thanks @GHolk.\n- Remove side effects caused by `Unit.format` and `Unit.toString`,\n  making changes to the unit on execution. Thanks @ericman314.\n\n\n# 2018-12-03, version 5.3.1\n\n- Fixed #1336: Unit.toSI() returning units with prefix like `mm` instead\n  of `m`. Thanks @ericman314.\n\n\n# 2018-11-29, version 5.3.0\n\n- Implemented function `hasNumericValue`. Thanks @Sathish-kumar-Subramani.\n- Fix #1326: non-ascii character in print.js.\n- Fix #1337: `math.format` not working correctly with `{ precision: 0 }`.\n  Thanks @dkenul.\n\n\n# 2018-10-30, version 5.2.3\n\n- Fixed #1293: non-unicode characters in `escape-latex` giving issues in some\n  specific cases. Thanks @dangmai.\n- Fixed incorrect LaTeX output of function `bitNot`, see #1299. Thanks @FSMaxB.\n- Fixed #1304: function `pow` not supporting inputs `pow(Unit, BigNumber)`.\n- Upgraded dependencies (`escape-latex@1.2.0`)\n\n\n# 2018-10-23, version 5.2.2\n\n- Fixed #1286: Fixed unit base recognition and formatting for\n  user-defined units. Thanks @ericman314.\n\n\n# 2018-10-18, version 5.2.1\n\n- Fixed unit `rod` being defined as `5.02921` instead of `5.0292`.\n  Thanks @ericman314.\n- Upgraded dependencies (`fraction.js@4.0.10`)\n- Upgraded devDependencies (`@babel/core@7.1.2`, `nyc@13.1.0`,\n  `webpack@4.21.0`).\n\n\n# 2018-10-05, version 5.2.0\n\n- Implemented support for chained conditionals like `10 < x <= 50`.\n  Thanks @ericman314.\n- Add an example showing a proof of concept of using `BigInt` in mathjs.\n- Fixed #1269: Bugfix for BigNumber divided by unit. Thanks @ericman314.\n- Fixed #1240: allow units having just a value and no unit.\n  Thanks @ericman314.\n\n\n## 2018-09-09, version 5.1.2\n\n- Fixed a typo in the docs of `parse`. Thanks @mathiasvr.\n- Fixed #1222: a typo in the docs of `subset`.\n- Fixed #1236: `quantileSeq` has inconsistent return.\n- Fixed #1237: norm sometimes returning a complex number instead of\n  number.\n- Upgraded dependencies (`fraction.js@4.0.9`)\n- Upgraded devDependencies (`babel@7`, `karma-webpack@3.0.4`,\n  `nyc@13.0.1`, `standard@12.0.0`, `uglify-js@3.4.9`, `webpack@4.17.2`)\n\n\n## 2018-08-21, version 5.1.1\n\n- Function `isNumeric` now recognizes more types.\n- Fixed #1214: functions `sqrt`, `max`, `min`, `var`, `std`, `mode`, `mad`,\n  `median`, and `partitionSelect` not neatly handling `NaN` inputs. In some\n  cases (`median`, `mad`, and `partitionSelect`) this resulted in an infinite\n  loop.\n- Upgraded dependencies (`escape-latex@1.1.1`)\n- Upgraded devDependencies (`webpack@4.17.0`)\n\n\n## 2018-08-12, version 5.1.0\n\n- Implemented support for strings enclosed in single quotes.\n  Thanks @jean-emmanuel.\n- Implemented function `getMatrixDataType`. Thanks @JasonShin.\n- Implemented new `options` argument in `simplify`. Thanks @paulobuchsbaum.\n- Bug fixes in `rationalize`, see #1173. Thanks @paulobuchsbaum.\n\n\n## 2018-07-22, version 5.0.4\n\n- Strongly improved the performance of functions `factorial` for numbers.\n  This improves performance of functions `gamma`, `permutation`, and\n  `combination` too. See #1170. Thanks @honeybar.\n- Strongly improved the performance of function `reshape`, thanks to a\n  friend of @honeybar.\n\n\n## 2018-07-14, version 5.0.3\n\n- Fixed many functions (for example `add` and `subtract`) not working\n  with matrices having a `datatype` defined.\n- Fixed #1147: bug in `format` with `engineering` notation in outputting\n  the correct number of significant figures. Thanks @ericman314.\n- Fixed #1162: transform functions not being cleaned up when overriding\n  it by importing a factory function with the same name.\n- Fixed broken links in the documentation. Thanks @stropitek.\n- Refactored the code of `parse` into a functional approach.\n  Thanks @harrysarson.\n- Changed `decimal.js` import to ES6. Thanks @weinshel.\n\n\n## 2018-07-07, version 5.0.2\n\n- Fixed #1136: rocket trajectory example broken (since v4.0.0).\n- Fixed #1137: `simplify` unnecessarily replacing implicit multiplication with\n  explicit multiplication.\n- Fixed #1146: `rationalize` throwing exceptions for some input with decimals.\n  Thanks @maruta.\n- Fixed #1088: function arguments not being passed to `rawArgs` functions.\n- Fixed advanced example `add_new_datatypes`.\n- Fixed mathjs core constants not working without complex numbers.\n  Thanks @ChristopherChudzicki.\n- Fixed a broken link in the documentation on units. Thanks @stropitek.\n- Upgraded dependencies (`typed-function@1.0.4`, `complex.js@2.0.11`).\n- Upgraded devDependencies (`babel-loader@7.1.5 `, `uglify-js@3.4.3`,\n  `expr-eval@1.2.2`, `webpack@4.15.1`).\n\n\n## 2018-07-01, version 5.0.1\n\n- Improved error messaging when converting units. Thanks @gap777.\n- Upgraded devDependencies (`kerma`, `uglify-js`, `webpack`).\n\n\n## 2018-06-16, version 5.0.0\n\n!!! BE CAREFUL: BREAKING CHANGES !!!\n\n- Implemented complex conjugate transpose `math.ctranspose`. See #1097.\n  Thanks @jackschmidt.\n- Changed the behavior of `A'` (transpose) in the expression parser to\n  calculate the complex conjugate transpose. See #1097. Thanks @jackschmidt.\n- Added support for `complex({abs: 1, arg: 1})`, and improved the docs on\n  complex numbers. Thanks @ssaket.\n- Renamed `eye` to `identity`, see #1054.\n- Math.js code can now contain ES6. The ES6 source code is moved from `lib`\n  to `src`, and `lib` now contains the compiled ES5 code.\n- Upgraded dependencies:\n  - `decimal.js` from `9.0.1` to `10.0.1`\n  - Upgraded dev dependencies\n- Changed code style to https://standardjs.com/, run linter on `npm test`.\n  See #1110.\n- Dropped support for bower. Use npm or an other package manages instead.\n- Dropped support for (non-primitive) instances of `Number`, `Boolean`, and\n  `String` from functions `clone` and `typeof`.\n- Dropped official support for IE9 (probably still works, but it's not tested).\n- Fixed #851: More consistent behavior of sqrt, nthRoot, and pow.\n  Thanks @dakotablair.\n- Fixed #1103: Calling `toTex` on node that contains `derivative` causing\n  an exception. Thanks @joelhoover.\n\n\n## 2018-06-02, version 4.4.2\n\n- Drastically improved the performance of `det`. Thanks @ericman314.\n- Fixed #1065, #1121: Fixed wrong documentation of function\n  `compareNatural` and clarified the behavior for strings.\n- Fixed #1122 a regression in function `inv` (since `v4.4.1`).\n  Thanks @ericman314.\n\n\n## 2018-05-29, version 4.4.1\n\n- Fixed #1109: a bug in `inv` when dealing with values close to zero.\n  Thanks @ericman314.\n\n\n## 2018-05-28, version 4.4.0\n\n- Implemented functions `equalText` and `compareText`. See #1085.\n\n\n## 2018-05-21, version 4.3.0\n\n- Implemented matrix exponential `math.expm`. Thanks @ericman314.\n- Fixed #1101: math.js bundle not working when loading in a WebWorker.\n- Upgraded dependencies\n  - `complex.js` from `v2.0.2` to `v2.0.10`.\n  - `fraction.js` from `v4.0.4` to `v4.0.8`.\n- Upgraded devDependencies (`mocha`, `uglify-js`, `webpack`).\n\n\n## 2018-05-05, version 4.2.2\n\n- Fixed calculating the Frobenius norm of complex matrices correctly,\n  see #1098. Thanks @jackschmidt.\n- Fixed #1076: cannot use mathjs in React VR by updating to\n  `escape-latex@1.0.3`.\n\n\n## 2018-05-02, version 4.2.1\n\n- Fixed `dist/math.js` being minified.\n\n\n## 2018-05-02, version 4.2.0\n\n- Implemented function `math.sqrtm`. Thanks @ferrolho.\n- Implemented functions `math.log2`, `math.log1p`, and `math.expm1`.\n  Thanks @BigFav and @harrysarson.\n- Fixed some unit tests broken on nodejs v10.\n- Upgraded development dependencies.\n- Dropped integration testing on nodejs v4.\n\n\n## 2018-04-18, version 4.1.2\n\n- Fixed #1082: implemented support for unit plurals `decades`, `centuries`,\n  and `millennia`.\n- Fixed #1083: units `decade` and `watt` having a wrong name when stringifying.\n  Thanks @ericman314.\n\n\n## 2018-04-11, version 4.1.1\n\n- Fixed #1063: derivative not working when resolving a variable with unary\n  minus like `math.derivative('-x', 'x')`.\n\n\n## 2018-04-08, version 4.1.0\n\n- Extended function `math.print` with support for arrays and matrices.\n  Thanks @jean-emmanuel.\n- Fixed #1077: Serialization/deserialization to JSON with reviver not being\n  supported by nodes.\n- Fixed #1016: Extended `math.typeof` with support for `ResultSet` and nodes\n  like `SymbolNode`.\n- Fixed #1072: Added support for long and short prefixes for the unit `bar`\n  (i.e. `millibar` and `mbar`).\n\n\n## 2018-03-17, version 4.0.1\n\n- Fixed #1062: mathjs not working on ES5 browsers like IE11 and Safari 9.3.\n- Fixed #1061: `math.unit` not accepting input like `1/s`.\n\n\n## 2018-02-25, version 4.0.0\n\n!!! BE CAREFUL: BREAKING CHANGES !!!\n\nBreaking changes (see also #682):\n\n- **New expression compiler**\n\n    The compiler of the expression parser is replaced with one that doesn't use\n    `eval` internally. See #1019. This means:\n\n    - a slightly improved performance on most browsers.\n    - less risk of security exploits.\n    - the code of the new compiler is easier to understand, maintain, and debug.\n\n    Breaking change here: When using custom nodes in the expression parser,\n    the syntax of `_compile` has changed. This is an undocumented feature though.\n\n- **Parsed expressions**\n\n    - The class `ConstantNode` is changed such that it just holds a value\n      instead of holding a stringified value and it's type.\n      `ConstantNode(valueStr, valueType`) is now `ConstantNode(value)`\n      Stringification uses `math.format`, which may result in differently\n      formatted numeric output.\n\n    - The constants `true`, `false`, `null`, `undefined`, `NaN`, `Infinity`,\n      and `uninitialized` are now parsed as ConstantNodes instead of\n      SymbolNodes in the expression parser. See #833.\n\n- **Implicit multiplication**\n\n    - Changed the behavior of implicit multiplication to have higher\n      precedence than explicit multiplication and division, except in\n      a number of specific cases. This gives a more natural behavior\n      for implicit multiplications. For example `24h / 6h` now returns `4`,\n      whilst `1/2 kg` evaluates to `0.5 kg`. Thanks @ericman314. See: #792.\n      Detailed documentation: https://github.com/josdejong/mathjs/blob/v4/docs/expressions/syntax.md#implicit-multiplication.\n\n    - Immediately invoking a function returned by a function like `partialAdd(2)(3)`\n      is no longer supported, instead these expressions are evaluated as\n      an implicit multiplication `partialAdd(2) * (3)`. See #1035.\n\n- **String formatting**\n\n    - In function `math.format`, the options `{exponential: {lower: number, upper: number}}`\n      (where `lower` and `upper` are values) are replaced with `{lowerExp: number, upperExp: number}`\n      (where `lowerExp` and `upperExp` are exponents). See #676. For example:\n      ```js\n      math.format(2000, {exponential: {lower: 1e-2, upper: 1e2}})\n      ```\n      is now:\n      ```js\n      math.format(2000, {lowerExp: -2, upperExp: 2})\n      ```\n\n    - In function `math.format`, the option `notation: 'fixed'` no longer rounds to\n      zero digits  when no precision is specified: it leaves the digits as is.\n      See #676.\n\n- **String comparison**\n\n    Changed the behavior of relational functions (`compare`, `equal`,\n    `equalScalar`, `larger`, `largerEq`, `smaller`, `smallerEq`, `unequal`)\n    to compare strings by their numeric value they contain instead of\n    alphabetically. This also impacts functions `deepEqual`, `sort`, `min`,\n    `max`, `median`, and `partitionSelect`. Use `compareNatural` if you\n    need to sort an array with text. See #680.\n\n- **Angle units**\n\n    Changed `rad`, `deg`, and `grad` to have short prefixes,\n    and introduced `radian`, `degree`, and `gradian` and their plurals\n    having long prefixes. See #749.\n\n- **Null**\n\n    - `null` is no longer implicitly casted to a number `0`, so input like\n      `math.add(2, null)` is no longer supported. See #830, #353.\n\n    - Dropped constant `uninitialized`, which was used to initialize\n      leave new entries undefined when resizing a matrix is removed.\n      Use `undefined` instead to indicate entries that are not explicitly\n      set. See #833.\n\n- **New typed-function library**\n\n    - The `typed-function` library used to check the input types\n      of functions is completely rewritten and doesn't use `eval` under\n      the hood anymore. This means a reduced security risk, and easier\n      to debug code. The API is the same, but error messages may differ\n      a bit. Performance is comparable but may differ in specific\n      use cases and browsers.\n\nNon breaking changes:\n\n- Thanks to the new expression compiler and `typed-function` implementation,\n  mathjs doesn't use JavaScript's `eval` anymore under the hood.\n  This allows using mathjs in environments with security restrictions.\n  See #401.\n- Implemented additional methods `isUnary()` and `isBinary()` on\n  `OperatorNode`. See #1025.\n- Improved error messages for statistical functions.\n- Upgraded devDependencies.\n- Fixed #1014: `derivative` silently dropping additional arguments\n  from operator nodes with more than two arguments.\n\n\n## 2018-02-07, version 3.20.2\n\n- Upgraded to `typed-function@0.10.7` (bug-fix release).\n- Fixed option `implicit` not being copied from an `OperatorNode`\n  when applying function `map`. Thanks @HarrySarson.\n- Fixed #995: spaces and underscores not property being escaped\n  in `toTex()`. Thanks @FSMaxB.\n\n\n## 2018-01-17, version 3.20.1\n\n- Fixed #1018: `simplifyCore` failing in some cases with parentheses.\n  Thanks @firepick1.\n\n\n## 2018-01-14, version 3.20.0\n\n- Implement support for 3 or more arguments for operators `+` and `*` in\n  `derivative`. Thanks @HarrySarson. See #1002.\n- Fixed `simplify` evalution of `simplify` of functions with more than two\n  arguments wrongly: `simplify('f(x, y, z)') evaluated to `f(f(x, y), z)`\n  instead of `f(x, y, z)`. Thanks @joelhoover.\n- Fixed `simplify` throwing an error in some cases when simplifying unknown\n  functions, for example `simplify('f(4)')`. Thanks @joelhoover.\n- Fixed #1013: `simplify` wrongly simplifing some expressions containing unary\n  minus, like `0 - -x`. Thanks @joelhoover.\n- Fixed an error in an example in the documentation of `xor`. Thanks @denisx.\n\n\n## 2018-01-06, version 3.19.0\n\n- Extended functions `distance` and `intersect` with support for BigNumbers.\n  Thanks @ovk.\n- Improvements in function `simplify`: added a rule that allows combining\n  of like terms in embedded quantities. Thanks @joelhoover.\n\n\n## 2017-12-28, version 3.18.1\n\n- Fixed #998: An issue with simplifying an expression containing a subtraction.\n  Thanks @firepick1.\n\n\n## 2017-12-16, version 3.18.0\n\n- Implemented function `rationalize`. Thanks @paulobuchsbaum.\n- Upgraded dependencies:\n  ```\n  decimal.js    7.2.3  \u2192  9.0.1 (no breaking changes affecting mathjs)\n  fraction.js   4.0.2  \u2192  4.0.4\n  tiny-emitter  2.0.0  \u2192  2.0.2\n  ```\n- Upgraded dev dependencies.\n- Fixed #975: a wrong example in the docs of lusolve.\n- Fixed #983: `pickRandom` returning an array instead of single value\n  when input was an array with just one value. Clarified docs.\n- Fixed #969: preven issues with yarn autoclean by renaming an\n  interally used folder \"docs\" to \"embeddedDocs\".\n\n\n## 2017-11-18, version 3.17.0\n\n- Improved `simplify` for nested exponentiations. Thanks @IvanVergiliev.\n- Fixed a security issue in `typed-function` allowing arbitrary code execution\n  in the JavaScript engine by creating a typed function with JavaScript code\n  in the name. Thanks Masato Kinugawa.\n- Fixed a security issue where forbidden properties like constructor could be\n  replaced by using unicode characters when creating an object. No known exploit,\n  but could possibly allow arbitrary code execution. Thanks Masato Kinugawa.\n\n\n## 2017-10-18, version 3.16.5\n\n- Fixed #954: Functions `add` and `multiply` not working when\n  passing three or more arrays or matrices.\n\n\n## 2017-10-01, version 3.16.4\n\n- Fixed #948, #949: function `simplify` returning wrong results or\n  running into an infinite recursive loop. Thanks @ericman314.\n- Fixed many small issues in the embedded docs.  Thanks @Schnark.\n\n\n## 2017-08-28, version 3.16.3\n\n- Fixed #934: Wrong simplification of unary minus. Thanks @firepick1.\n- Fixed #933: function `simplify` reordering operations. Thanks @firepick1.\n- Fixed #930: function `isNaN` returning wrong result for complex\n  numbers having just one of their parts (re/im) being `NaN`.\n- Fixed #929: `FibonacciHeap.isEmpty` returning wrong result.\n\n\n## 2017-08-20, version 3.16.2\n\n- Fixed #924: a regression in `simplify` not accepting the signature\n  `simplify(expr, rules, scope)` anymore. Thanks @firepick1.\n- Fixed missing parenthesis when stringifying expressions containing\n  implicit multiplications (see #922). Thanks @FSMaxB.\n\n\n## 2017-08-12, version 3.16.1\n\n- For security reasons, type checking is now done in a more strict\n  way using functions like `isComplex(x)` instead of duck type checking\n  like `x && x.isComplex === true`.\n- Fixed #915: No access to property \"name\".\n- Fixed #901: Simplify units when calling `unit.toNumeric()`.\n  Thanks @AlexanderBeyn.\n- Fixed `toString` of a parsed expression tree containing an\n  immediately invoked function assignment not being wrapped in\n  parenthesis (for example `(f(x) = x^2)(4)`).\n\n\n## 2017-08-06, version 3.16.0\n\n- Significant performance improvements in `math.simplify`.\n  Thanks @firepick1.\n- Improved API for `math.simplify`, optionally pass a scope with\n  variables which are resolved, see #907. Thanks @firepick1.\n- Fixed #912: math.js didn't work on IE10 anymore (regression\n  since 3.15.0).\n\n\n## 2017-07-29, version 3.15.0\n\n- Added support for the dollar character `$` in symbol names (see #895).\n- Allow objects with prototypes as scope again in the expression parser,\n  this was disabled for security reasons some time ago. See #888, #899.\n  Thanks @ThomasBrierley.\n- Fixed #846: Issues in the functions `map`, `forEach`, and `filter`\n  when used in the expression parser:\n  - Not being able to use a function assignment as inline expression\n    for the callback function.\n  - Not being able to pass an inline expression as callback for `map`\n    and `forEach`.\n  - Index and original array/matrix not passed in `map` and `filter`.\n\n\n## 2017-07-05, version 3.14.2\n\n- Upgraded to `fraction.js@4.0.2`\n- Fixed #891 using BigNumbers not working in browser environments.\n\n\n## 2017-06-30, version 3.14.1\n\n- Reverted to `fraction.js@4.0.0`, there is an issue with `4.0.1`\n  in the browser.\n\n\n## 2017-06-30, version 3.14.0\n\n- Implemented set methods `setCartesian`, `setDifference`,\n  `setDistinct`, `setIntersect`, `setIsSubset`, `setPowerset`,\n  `setSize`. Thanks @Nekomajin42.\n- Implemented method `toHTML` on nodes. Thanks @Nekomajin42.\n- Implemented `compareNatural` and `sort([...], 'natural')`.\n- Upgraded dependencies to the latest versions:\n  - `complex.js@2.0.4`\n  - `decimal.js@7.2.3`\n  - `fraction.js@4.0.1`\n  - `tiny-emitter@2.0.0`\n  - And all devDependencies.\n- Fixed #865: `splitUnit` can now deal with round-off errors.\n  Thanks @ericman314.\n- Fixed #876: incorrect definition for unit `erg`. Thanks @pjhampton.\n- More informative error message when using single quotes instead of\n  double quotes around a string. Thanks @HarrySarson.\n\n\n## 2017-05-27, version 3.13.3\n\n- Fixed a bug in function `intersection` of line and plane.\n  Thanks @viclai.\n- Fixed security vulnerabilities.\n\n\n## 2017-05-26, version 3.13.2\n\n- Disabled function `chain` inside the expression parser for security\n  reasons (it's not needed there anyway).\n- Fixed #856: function `subset` not returning non-primitive scalars\n  from Arrays correctly. (like `math.eval('arr[1]', {arr: [math.bignumber(2)]})`.\n- Fixed #861: physical constants not available in the expression parser.\n\n\n## 2017-05-12, version 3.13.1\n\n- Fixed creating units with an alias not working within the expression\n  parser.\n- Fixed security vulnerabilities. Thanks Sam.\n\n\n## 2017-05-12, version 3.13.0\n\n- Command line application can now evaluate inline expressions\n  like `mathjs 1+2`. Thanks @slavaGanzin.\n- Function `derivative` now supports `abs`. Thanks @tetslee.\n- Function `simplify` now supports BigNumbers. Thanks @tetslee.\n- Prevent against endless loops in `simplify`. Thanks @tetslee.\n- Fixed #813: function `simplify` converting small numbers to inexact\n  Fractions. Thanks @tetslee.\n- Fixed #838: Function `simplify` now supports constants like `e`.\n  Thanks @tetslee.\n\n\n## 2017-05-05, version 3.12.3\n\n- Fixed security vulnerabilities. Thanks Dan and Sam.\n\n\n## 2017-04-30, version 3.12.2\n\n- Added a rocket trajectory optimization example.\n\n\n## 2017-04-24, version 3.12.1\n\n- Fixed #804\n  - Improved handling of powers of `Infinity`. Thanks @HarrySarson.\n  - Fixed wrong formatting of complex NaN.\n- Fixed security vulnerabilities in the expression parser.\n  Thanks Sam and Dan.\n\n\n## 2017-04-17, version 3.12.0\n\n- Implemented QR decomposition, function `math.qr`. Thanks @HarrySarson.\n- Fixed #824: Calling `math.random()` freezes IE and node.js.\n\n\n## 2017-04-08, version 3.11.5\n\n- More security measures in the expression parser.\n  WARNING: the behavior of the expression parser is now more strict,\n  some undocumented features may not work any longer.\n  - Accessing and assigning properties is now only allowed on plain\n    objects, not on classes, arrays, and functions anymore.\n  - Accessing methods is restricted to a set of known, safe methods.\n\n\n## 2017-04-03, version 3.11.4\n\n- Fixed a security vulnerability in the expression parser. Thanks @xfix.\n\n\n## 2017-04-03, version 3.11.3\n\n- Fixed a security vulnerability in the expression parser. Thanks @xfix.\n\n\n## 2017-04-03, version 3.11.2\n\n- Fixed a security vulnerability in the expression parser. Thanks @xfix.\n\n\n## 2017-04-02, version 3.11.1\n\n- Fixed security vulnerabilities in the expression parser.\n  Thanks Joe Vennix and @xfix.\n\n\n## 2017-04-02, version 3.11.0\n\n- Implemented method Unit.toSI() to convert a unit to base SI units.\n  Thanks @ericman314.\n- Fixed #821, #822: security vulnerabilities in the expression parser.\n  Thanks @comex and @xfix.\n\n\n## 2017-03-31, version 3.10.3\n\n- More security fixes related to the ones fixed in `v3.10.2`.\n\n\n## 2017-03-31, version 3.10.2\n\n- Fixed a security vulnerability in the expression parser allowing\n  execution of arbitrary JavaScript. Thanks @CapacitorSet and @denvit.\n\n\n## 2017-03-26, version 3.10.1\n\n- Fixed `xgcd` for negative values. Thanks @litmit.\n- Fixed #807: function transform of existing functions not being removed when\n  overriding such a function.\n\n\n## 2017-03-05, version 3.10.0\n\n- Implemented function `reshape`. Thanks @patgrasso and @ericman314.\n- Implemented configuration option `seedRandom` for deterministic random\n  numbers. Thanks @morsecodist.\n- Small fixes in the docs. Thanks @HarrySarson.\n- Dropped support for component package manager (which became deprecated about\n  one and a half year ago).\n\n\n## 2017-02-22, version 3.9.3\n\n- Fixed #797: issue with production builds of React Native projects.\n- Fixed `math.round` not accepting inputs `NaN`, `Infinity`, `-Infinity`.\n- Upgraded all dependencies.\n\n\n## 2017-02-16, version 3.9.2\n\n- Fixed #795: Parse error in case of a multi-line expression with just comments.\n\n\n## 2017-02-06, version 3.9.1\n\n- Fixed #789: Math.js not supporting conversion of `string` to `BigNumber`,\n  `Fraction`, or `Complex` number.\n- Fixed #790: Expression parser did not pass function arguments of enclosing\n  functions via `scope` to functions having `rawArgs = true`.\n- Small fixes in the docs. Thanks @HarrySarson.\n\n\n## 2017-01-23, version 3.9.0\n\n- Implemented support for algebra: powerful new functions `simplify` and\n  `derivative`. Thanks @ericman314, @tetslee, and @BigFav.\n- Implemented Kronecker Product `kron`. Thanks @adamisntdead.\n- Reverted `FunctionNode` not accepting a string as function name anymore.\n- Fixed #765: `FunctionAssignmentNode.toString()` returning a string\n  incompatible with the function assignment syntax.\n\n\n## 2016-12-15, version 3.8.1\n\n- Implemented function `mad` (median absolute deviation). Thanks @ruhleder.\n- Fixed #762: expression parser failing to invoke a function returned\n  by a function.\n\n\n## 2016-11-18, version 3.8.0\n\n- Functions `add` and `multiply` now accept more than two arguments. See #739.\n- `OperatorNode` now supports more than two arguments. See #739. Thanks @FSMaxB.\n- Implemented a method `Node.cloneDeep` for the expression nodes. See #745.\n- Fixed a bug in `Node.clone()` not cloning implicit multiplication correctly.\n  Thanks @FSMaxB.\n- Fixed #737: Improved algorithm determining the best prefix for units.\n  It will now retain the original unit like `1 cm` when close enough,\n  instead of returning `10 mm`. Thanks @ericman314.\n- Fixed #732: Allow letter-like unicode characters like Ohm `\\u2126`.\n- Fixed #749: Units `rad`, `deg`, and `grad` can now have prefixes like `millirad`.\n- Some fixes in the docs and comments of examples. Thanks @HarrySarson.\n\n\n## 2016-11-05, version 3.7.0\n\n- Implemented method `Node.equals(other)` for all nodes of the expression parser.\n- Implemented BigNumber support in function `arg()`.\n- Command Line Interface loads faster.\n- Implicit conversions between Fractions and BigNumbers throw a neat error now\n  (See #710).\n\n\n## 2016-10-21, version 3.6.0\n\n- Implemented function `erf()`. THanks @patgrasso.\n- Extended function `cross()` to support n-d vectors. Thanks @patgrasso.\n- Extended function `pickRandom` with the option to pick multiple values from\n  an array and give the values weights: `pickRandom(possibles, number, weights)`.\n  Thanks @woylie.\n- Parser now exposes test functions like `isAlpha` which can be replaced in\n  order to adjust the allowed characters in variables names (See #715).\n- Fixed #727: Parser not throwing an error for invalid implicit multiplications\n  like `-2 2` and `2^3 4` (right after the second value of an operator).\n- Fixed #688: Describe allowed variable names in the docs.\n\n\n## 2016-09-21, version 3.5.3\n\n- Some more fixes regarding numbers ending with a decimal mark (like `2.`).\n\n\n## 2016-09-20, version 3.5.2\n\n- Fixed numbers ending with a decimal mark (like `2.`) not being supported by\n  the parser, solved the underlying ambiguity in the parser. See #707, #711.\n\n\n## 2016-09-12, version 3.5.1\n\n- Removed a left over console.log statement. Thanks @eknkc.\n\n\n## 2016-09-07, version 3.5.0\n\n- Comments of expressions are are now stored in the parsed nodes. See #690.\n- Fixed function `print` not accepting an Object with formatting options as\n  third parameter Thanks @ThomasBrierley.\n- Fixed #707: The expression parser no longer accepts numbers ending with a dot\n  like `2.`.\n\n\n## 2016-08-08, version 3.4.1\n\n- Fixed broken bundle files (`dist/math.js`, `dist/math.min.js`).\n- Fixed some layout issues in the function reference docs.\n\n\n## 2016-08-07, version 3.4.0\n\n- Implemented support for custom units using `createUnit`. Thanks @ericman314.\n- Implemented function `splitUnits`. Thanks @ericman314.\n- Implemented function `isPrime`. Thanks @MathBunny.\n\n\n## 2016-07-05, version 3.3.0\n\n- Implemented function `isNaN`.\n- Function `math.filter` now passes three arguments to the callback function:\n  value, index, and array.\n- Removed the check on the number of arguments from functions defined in the\n  expression parser (see #665).\n- Fixed #665: functions `map`, `forEach`, and `filter` now invoke callbacks\n  which are a typed-function with the correct number of arguments.\n\n\n## 2016-04-26, version 3.2.1\n\n- Fixed #651: unable to perform calculations on \"Unit-less\" units.\n- Fixed matrix.subset mutating the replacement matrix when unsqueezing it.\n\n\n## 2016-04-16, version 3.2.0\n\n- Implemented #644: method `Parser.getAll()` to retrieve all defined variables.\n- Upgraded dependencies (decimal.js@5.0.8, fraction.js@3.3.1,\n  typed-function@0.10.4).\n- Fixed #601: Issue with unnamed typed-functions by upgrading to\n  typed-function v0.10.4.\n- Fixed #636: More strict `toTex` templates, reckon with number of arguments.\n- Fixed #641: Bug in expression parser parsing implicit multiplication with\n  wrong precedence in specific cases.\n- Fixed #645: Added documentation about `engineering` notation of function\n  `math.format`.\n\n\n## 2016-04-03, version 3.1.4\n\n- Using ES6 Math functions like `Math.sinh`, `Math.cbrt`, `Math.sign`, etc when\n  available.\n- Fixed #631: unit aliases `weeks`, `months`, and `years` where missing.\n- Fixed #632: problem with escaped backslashes at the end of strings.\n- Fixed #635: `Node.toString` options where not passed to function arguments.\n- Fixed #629: expression parser throws an error when passing a number with\n  decimal exponent instead of parsing them as implicit multiplication.\n- Fixed #484, #555: inaccuracy of `math.sinh` for values between -1 and 1.\n- Fixed #625: Unit `in` (`inch`) not always working due to ambiguity with\n  the operator `a in b` (alias of `a to b`).\n\n\n## 2016-03-24, version 3.1.3\n\n- Fix broken bundle.\n\n\n## 2016-03-24, version 3.1.2\n\n- Fix broken npm release.\n\n\n## 2016-03-24, version 3.1.1\n\n- Fixed #621: a bug in parsing implicit multiplications like `(2)(3)+4`.\n- Fixed #623: `nthRoot` of zero with a negative root returned `0` instead of\n  `Infinity`.\n- Throw an error when functions `min`, `max`, `mean`, or `median` are invoked\n  with multiple matrices as arguments (see #598).\n\n\n## 2016-03-19, version 3.1.0\n\n- Hide multiplication operator by default when outputting `toTex` and `toString`\n  for implicit multiplications. Implemented and option to output the operator.\n- Implemented unit `kip` and alias `kips`. Thanks @hgupta9.\n- Added support for prefixes for units `mol` and `mole`. Thanks @stu-blair.\n- Restored support for implicit multiplications like `2(3+4)` and `(2+3)(4+5)`.\n- Some improvements in the docs.\n- Added automatic conversions from `boolean` and `null` to `Fraction`,\n  and conversions from `Fraction` to `Complex`.\n\n\n## 2016-03-04, version 3.0.0\n\n### breaking changes\n\n- More restricted support for implicit multiplication in the expression\n  parser: `(...)(...)` is now evaluated as a function invocation,\n  and `[...][...]` as a matrix subset.\n- Matrix multiplication no longer squeezes scalar outputs to a scalar value,\n  but leaves them as they are: a vector or matrix containing a single value.\n  See #529.\n- Assignments in the expression parser now return the assigned value rather\n  than the created or updated object (see #533). Example:\n\n  ```\n  A = eye(3)\n  A[1,1] = 2   # this assignment now returns 2 instead of A\n  ```\n\n- Expression parser now supports objects. This involves a refactoring and\n  extension in expression nodes:\n  - Implemented new node `ObjectNode`.\n  - Refactored `AssignmentNode`, `UpdateNode`, and `IndexNode` are refactored\n    into `AccessorNode`, `AssignmentNode`, and `IndexNode` having a different API.\n- Upgraded the used BigNumber library `decimal.js` to v5. Replaced the\n  trigonometric functions of math.js with those provided in decimal.js v5.\n  This can give slightly different behavior qua round-off errors.\n- Replaced the internal `Complex.js` class with the `complex.js` library\n  created by @infusion.\n- Entries in a matrix (typically numbers, BigNumbers, Units, etc) are now\n  considered immutable, they are no longer copied when performing operations on\n  the entries, improving performance.\n- Implemented nearly equal comparison for relational functions (`equal`,\n  `larger`, `smaller`, etc.) when using BigNumbers.\n- Changed the casing of the configuration options `matrix` (`Array` or `Matrix`)\n  and `number` (`number`, `BigNumber`, `Fraction`) such that they now match\n  the type returned by `math.typeof`. Wrong casing gives a console warning but\n  will still work.\n- Changed the default config value for `epsilon` from `1e-14` to `1e-12`,\n  see #561.\n\n### non-breaking changes\n\n- Extended function `pow` to return the real root for cubic roots of negative\n  numbers. See #525, #482, #567.\n- Implemented support for JSON objects in the expression parser and the\n  function `math.format`.\n- Function `math.fraction` now supports `BigNumber`, and function\n  `math.bignumber` now supports `Fraction`.\n- Expression parser now allows function and/or variable assignments inside\n  accessors and conditionals, like `A[x=2]` or `a > 2 ? b=\"ok\" : b=\"fail\"`.\n- Command line interface:\n  - Outputs the variable name of assignments.\n  - Fixed not rounding BigNumbers to 14 digits like numbers.\n  - Fixed non-working autocompletion of user defined variables.\n- Reorganized and extended docs, added docs on classes and more. Thanks @hgupta9.\n- Added new units `acre`, `hectare`, `torr`, `bar`, `mmHg`, `mmH2O`, `cmH2O`,\n  and added new aliases `acres`, `hectares`, `sqfeet`, `sqyard`, `sqmile`,\n  `sqmiles`, `mmhg`, `mmh2o`, `cmh2o`. Thanks @hgupta9.\n- Fixed a bug in the toString method of an IndexNode.\n- Fixed angle units `deg`, `rad`, `grad`, `cycle`, `arcsec`, and `arcmin` not\n  being defined as BigNumbers when configuring to use BigNumbers.\n\n\n## 2016-02-03, version 2.7.0\n\n- Added more unit aliases for time: `secs`, `mins`, `hr`, `hrs`. See #551.\n- Added support for doing operations with mixed `Fractions` and `BigNumbers`.\n- Fixed #540: `math.intersect()` returning null in some cases. Thanks @void42.\n- Fixed #546: Cannot import BigNumber, Fraction, Matrix, Array.\n  Thanks @brettjurgens.\n\n\n## 2016-01-08, version 2.6.0\n\n- Implemented (complex) units `VA` and `VAR`.\n- Implemented time units for weeks, months, years, decades, centuries, and\n  millennia. Thanks @owenversteeg.\n- Implemented new notation `engineering` in function `math.format`.\n  Thanks @johnmarinelli.\n- Fixed #523: In some circumstances, matrix subset returned a scalar instead\n  of the correct subset.\n- Fixed #536: A bug in an internal method used for sparse matrices.\n\n\n## 2015-12-05, version 2.5.0\n\n- Implemented support for numeric types `Fraction` and `BigNumber` in units.\n- Implemented new method `toNumeric` for units.\n- Implemented new units `arcsec`, `arcsecond`, `arcmin`, `arcminute`.\n  Thanks @devdevdata222.\n- Implemented new unit `Herts` (`Hz`). Thanks @SwamWithTurtles.\n- Fixed #485: Scoping issue with variables both used globally as well as in a\n  function definition.\n- Fixed: Function `number` didn't support `Fraction` as input.\n\n\n## 2015-11-14, version 2.4.2\n\n- Fixed #502: Issue with `format` in some JavaScript engines.\n- Fixed #503: Removed trailing commas and the use of keyword `import` as\n  property, as this gives issues with old JavaScript engines.\n\n\n## 2015-10-29, version 2.4.1\n\n- Fixed #480: `nthRoot` not working on Internet Explorer (up to IE 11).\n- Fixed #490: `nthRoot` returning an error for negative values like\n  `nthRoot(-2, 3)`.\n- Fixed #489: an issue with initializing a sparse matrix without data.\n  Thanks @Retsam.\n- Fixed: #493: function `combinations` did not throw an exception for\n  non-integer values of `k`.\n- Fixed: function `import` did not override typed functions when the option\n  override was set true.\n- Fixed: added functions `math.sparse` and `math.index` to the reference docs,\n  they where missing.\n- Fixed: removed memoization from `gamma` and `factorial` functions, this\n  could blow up memory.\n\n\n## 2015-10-09, version 2.4.0\n\n- Added support in the expression parser for mathematical alphanumeric symbols\n  in the expression parser: unicode range \\u{1D400} to \\u{1D7FF} excluding\n  invalid code points.\n- Extended function `distance` with more signatures. Thanks @kv-kunalvyas.\n- Fixed a bug in functions `sin` and `cos`, which gave wrong results for\n  BigNumber integer values around multiples of tau (i.e. `sin(bignumber(7))`).\n- Fixed value of unit `stone`. Thanks @Esvandiary for finding the error.\n\n\n## 2015-09-19, version 2.3.0\n\n- Implemented function `distance`. Thanks @devanp92.\n- Implemented support for Fractions in function `lcm`. Thanks @infusion.\n- Implemented function `cbrt` for numbers, complex numbers, BigNumbers, Units.\n- Implemented function `hypot`.\n- Upgraded to fraction.js v3.0.0.\n- Fixed #450: issue with non sorted index in sparse matrices.\n- Fixed #463, #322: inconsistent handling of implicit multiplication.\n- Fixed #444: factorial of infinity not returning infinity.\n\n\n## 2015-08-30, version 2.2.0\n\n- Units with powers (like `m^2` and `s^-1`) now output with the best prefix.\n- Implemented support for units to `abs`, `cube`, `sign`, `sqrt`, `square`.\n  Thanks @ericman314.\n- Implemented function `catalan` (Combinatorics). Thanks @devanp92.\n- Improved the `canDefineProperty` check to return false in case of IE8, which\n  has a broken implementation of `defineProperty`. Thanks @golmansax.\n- Fixed function `to` not working in case of a simplified unit.\n- Fixed #437: an issue with row swapping in `lup`, also affecting `lusolve`.\n\n\n## 2015-08-12, version 2.1.1\n\n- Fixed wrong values of the physical constants `speedOfLight`, `molarMassC12`,\n  and `magneticFluxQuantum`. Thanks @ericman314 for finding two of them.\n\n\n## 2015-08-11, version 2.1.0\n\n- Implemented derived units (like `110 km/h in m/s`). Thanks @ericman314.\n- Implemented support for electric units. Thanks @ericman314.\n- Implemented about 50 physical constants like `speedOfLight`, `gravity`, etc.\n- Implemented function `kldivergence` (Kullback-Leibler divergence).\n  Thanks @saromanov.\n- Implemented function `mode`. Thanks @kv-kunalvyas.\n- Added support for unicode characters in the expression parser: greek letters\n  and latin letters with accents. See #265.\n- Internal functions `Unit.parse` and `Complex.parse` now throw an Error\n  instead of returning null when passing invalid input.\n\n\n## 2015-07-29, version 2.0.1\n\n- Fixed operations with mixed fractions and numbers be converted to numbers\n  instead of fractions.\n\n\n## 2015-07-28, version 2.0.0\n\n- Large internal refactoring:\n  - performance improvements.\n  - allows to create custom bundles\n  - functions are composed using `typed-function` and are extensible\n- Implemented support for fractions, powered by the library `fraction.js`.\n- Implemented matrix LU decomposition with partial pivoting and a LU based\n  linear equations solver (functions `lup` and `lusolve`). Thanks @rjbaucells.\n- Implemented a new configuration option `predictable`, which can be set to\n  true in order to ensure predictable function output types.\n- Implemented function `intersect`. Thanks @kv-kunalvyas.\n- Implemented support for adding `toTex` properties to custom functions.\n  Thanks @FSMaxB.\n- Implemented support for complex values to `nthRoot`. Thanks @gangachris.\n- Implemented util functions `isInteger`, `isNegative`, `isNumeric`,\n  `isPositive`, and `isZero`.\n\n### breaking changes\n\n- String input is now converted to numbers by default for all functions.\n- Adding two strings will no longer concatenate them, but will convert the\n  strings to numbers and add them.\n- Function `index` does no longer accept an array `[start, end, step]`, but\n  instead accepts an array with arbitrary index values. It also accepts\n  a `Range` object as input.\n- Function `typeof` no longer returns lower case names, but now returns lower\n  case names for primitives (like `number`, `boolean`, `string`), and\n  upper-camel-case for non-primitives (like `Array`, `Complex`, `Function`).\n- Function `import` no longer supports a module name as argument. Instead,\n  modules can be loaded using require: `math.import(require('module-name'))`.\n- Function `import` has a new option `silent` to ignore errors, and throws\n  errors on duplicates by default.\n- Method `Node.compile()` no longer needs `math` to be passed as argument.\n- Reintroduced method `Node.eval([scope])`.\n- Function `sum` now returns zero when input is an empty array. Thanks @FSMAxB.\n- The size of Arrays is no longer validated. Matrices will validate this on\n  creation.\n\n\n## 2015-07-12, version 1.7.1\n\n- Fixed #397: Inaccuracies in nthRoot for very large values, and wrong results\n  for very small values. (backported from v2)\n- Fixed #405: Parser throws error when defining a function in a multiline\n  expression.\n\n\n## 2015-05-31, version 1.7.0\n\n- Implemented function `quantileSeq` and `partitionSelect`. Thanks @BigFav.\n- Implemented functions `stirlingS2`, `bellNumbers`, `composition`, and\n  `multinomial`. Thanks @devanp92.\n- Improved the performance of `median` (see #373). Thanks @BigFav.\n- Extended the command line interface with a `mode` option to output either\n  the expressions result, string representation, or tex representation.\n  Thanks @FSMaxB.\n- Fixed #309: Function median mutating the input matrix. Thanks @FSMaxB.\n- Fixed `Node.transform` not recursing over replaced parts of the\n  node tree (see #349).\n- Fixed #381: issue in docs of `randomInt`.\n\n\n## 2015-04-22, version 1.6.0\n\n- Improvements in `toTex`. Thanks @FSMaxB.\n- Fixed #328: `abs(0 + 0i)` evaluated to `NaN`.\n- Fixed not being able to override lazy loaded constants.\n\n\n## 2015-04-09, version 1.5.2\n\n- Fixed #313: parsed functions did not handle recursive calls correctly.\n- Fixed #251: binary prefix and SI prefix incorrectly used for byte. Now\n  following SI standards (`1 KiB == 1024 B`, `1 kB == 1000 B`).\n- Performance improvements in parsed functions.\n\n\n## 2015-04-08, version 1.5.1\n\n- Fixed #316: a bug in rounding values when formatting.\n- Fixed #317, #319: a bug in formatting negative values.\n\n\n## 2015-03-28, version 1.5.0\n\n- Added unit `stone` (6.35 kg).\n- Implemented support for sparse matrices. Thanks @rjbaucells.\n- Implemented BigNumber support for function `atan2`. Thanks @BigFav.\n- Implemented support for custom LaTeX representations. Thanks @FSMaxB.\n- Improvements and bug fixes in outputting parentheses in `Node.toString` and\n  `Node.toTex` functions. Thanks @FSMaxB.\n- Fixed #291: function `format` sometimes returning exponential notation when\n  it should return a fixed notation.\n\n\n## 2015-02-28, version 1.4.0\n\n- Implemented trigonometric functions:\n  `acosh`, `acoth`, `acsch`, `asech`, `asinh`, `atanh`, `acot`, `acsc`, `asec`.\n  Thanks @BigFav.\n- Added BigNumber support for functions: `cot`, `csc`, `sec`, `coth`,\n  `csch`, `sech`. Thanks @BigFav.\n- Implemented support for serialization and deserialization of math.js data\n  types.\n- Fixed the calculation of `norm()` and `abs()` for large complex numbers.\n  Thanks @rjbaucells.\n- Fixed #281: improved formatting complex numbers. Round the real or imaginary\n  part to zero when the difference is larger than the configured precision.\n\n\n## 2015-02-09, version 1.3.0\n\n- Implemented BigNumber implementations of most trigonometric functions: `sin`,\n  `cos`, `tan`, `asin`, `acos`, `atan`, `cosh`, `sinh`, `tanh`. Thanks @BigFav.\n- Implemented function `trace`. Thanks @pcorey.\n- Faster loading of BigNumber configuration with a high precision by lazy\n  loading constants like `pi` and `e`.\n- Fixed constants `NaN` and `Infinity` not being BigNumber objects when\n  BigNumbers are configured.\n- Fixed missing parentheses in the `toTex` representation of function\n  `permutations`.\n- Some minor fixes in the docs. Thanks @KenanY.\n\n\n## 2014-12-25, version 1.2.0\n\n- Support for bitwise operations `bitAnd`, `bitNot`, `bitOr`, `bitXor`,\n  `leftShift`, `rightArithShift`, and `rightLogShift`. Thanks @BigFav.\n- Support for boolean operations `and`, `not`, `or`, `xor`. Thanks @BigFav.\n- Support for `gamma` function. Thanks @BigFav.\n- Converting a unit without value will now result in a unit *with* value,\n  i.e. `inch in cm` will return `2.54 cm` instead of `cm`.\n- Improved accuracy of `sinh` and complex `cos` and `sin`. Thanks @pavpanchekha.\n- Renamed function `select` to `chain`. The old function `select` will remain\n  functional until math.js v2.0.\n- Upgraded to decimal.js v4.0.1 (BigNumber library).\n\n\n## 2014-11-22, version 1.1.1\n\n- Fixed Unit divided by Number returning zero.\n- Fixed BigNumber downgrading to Number for a negative base in `pow`.\n- Fixed some typos in error messaging (thanks @andy0130tw) and docs.\n\n\n## 2014-11-15, version 1.1.0\n\n- Implemented functions `dot` (dot product), `cross` (cross product), and\n  `nthRoot`.\n- Officially opened up the API of expression trees:\n  - Documented the API.\n  - Implemented recursive functions `clone`, `map`, `forEach`, `traverse`,\n    `transform`, and `filter` for expression trees.\n  - Parameter `index` in the callbacks of `map` and `forEach` are now cloned\n    for every callback.\n  - Some internal refactoring inside nodes to make the API consistent:\n    - Renamed `params` to `args` and vice versa to make things consistent.\n    - Renamed `Block.nodes` to `Block.blocks`.\n    - `FunctionNode` now has a `name: string` instead of a `symbol: SymbolNode`.\n    - Changed constructor of `RangeNode` to\n      `new RangeNode(start: Node, end: Node [, step: Node])`.\n    - Nodes for a `BlockNode` must now be passed via the constructor instead\n      of via a function `add`.\n- Fixed `2e` giving a syntax error instead of being parsed as `2 * e`.\n\n\n## 2014-09-12, version 1.0.1\n\n- Disabled array notation for ranges in a matrix index in the expression parser\n  (it is confusing and redundant there).\n- Fixed a regression in the build of function subset not being able to return\n  a scalar.\n- Fixed some missing docs and broken links in the docs.\n\n\n## 2014-09-04, version 1.0.0\n\n- Implemented a function `filter(x, test)`.\n- Removed `math.distribution` for now, needs some rethinking.\n- `math.number` can convert units to numbers (requires a second argument)\n- Fixed some precedence issues with the range and conversion operators.\n- Fixed an zero-based issue when getting a matrix subset using an index\n  containing a matrix.\n\n\n## 2014-08-21, version 0.27.0\n\n- Implemented functions `sort(x [, compare])` and `flatten(x)`.\n- Implemented support for `null` in all functions.\n- Implemented support for \"rawArgs\" functions in the expression parser. Raw\n  functions are invoked with unevaluated parameters (nodes).\n- Expressions in the expression parser can now be spread over multiple lines,\n  like '2 +\\n3'.\n- Changed default value of the option `wrap` of function `math.import` to false.\n- Changed the default value for new entries in a resized matrix when to zero.\n  To leave new entries uninitialized, use the new constant `math.uninitialized`\n  as default value.\n- Renamed transform property from `__transform__` to `transform`, and documented\n  the transform feature.\n- Fixed a bug in `math.import` not applying options when passing a module name.\n- A returned matrix subset is now only squeezed when the `index` consists of\n  scalar values, and no longer for ranges resolving into a single value.\n\n\n## 2014-08-03, version 0.26.0\n\n- A new instance of math.js can no longer be created like `math([options])`,\n  to prevent side effects from math being a function instead of an object.\n  Instead, use the function `math.create([options])` to create a new instance.\n- Implemented `BigNumber` support for all constants: `pi`, `tau`, `e`, `phi`,\n  `E`, `LN2`, `LN10`, `LOG2E`, `LOG10E`, `PI`, `SQRT1_2`, and `SQRT2`.\n- Implemented `BigNumber` support for functions `gcd`, `xgcd`, and `lcm`.\n- Fixed function `gxcd` returning an Array when math.js was configured\n  as `{matrix: 'matrix'}`.\n- Multi-line expressions now return a `ResultSet` instead of an `Array`.\n- Implemented transforms (used right now to transform one-based indices to\n  zero-based for expressions).\n- When used inside the expression parser, functions `concat`, `min`, `max`,\n  and `mean` expect an one-based dimension number.\n- Functions `map` and `forEach` invoke the callback with one-based indices\n  when used from within the expression parser.\n- When adding or removing dimensions when resizing a matrix, the dimensions\n  are added/removed from the inner side (right) instead of outer side (left).\n- Improved index out of range errors.\n- Fixed function `concat` not accepting a `BigNumber` for parameter `dim`.\n- Function `squeeze` now squeezes both inner and outer singleton dimensions.\n- Output of getting a matrix subset is not automatically squeezed anymore\n  except for scalar output.\n- Renamed `FunctionNode` to `FunctionAssignmentNode`, and renamed `ParamsNode`\n  to `FunctionNode` for more clarity.\n- Fixed broken auto completion in CLI.\n- Some minor fixes.\n\n\n## 2014-07-01, version 0.25.0\n\n- The library now immediately returns a default instance of mathjs, there is\n  no need to instantiate math.js in a separate step unless one ones to set\n  configuration options:\n\n        // instead of:\n        var mathjs = require('mathjs'),  // load math.js\n            math = mathjs();             // create an instance\n\n        // just do:\n        var math = require('mathjs');\n- Implemented support for implicit multiplication, like `math.eval('2a', {a:3})`\n  and `math.eval('(2+3)(1-3)')`. This changes behavior of matrix indexes as\n  well: an expression like `[...][...]` is not evaluated as taking a subset of\n  the first matrix, but as an implicit multiplication of two matrices.\n- Removed utility function `ifElse`. This function is redundant now the\n  expression parser has a conditional operator `a ? b : c`.\n- Fixed a bug with multiplying a number with a temperature,\n  like `math.eval('10 * celsius')`.\n- Fixed a bug with symbols having value `undefined` not being evaluated.\n\n\n## 2014-06-20, version 0.24.1\n\n- Something went wrong with publishing on npm.\n\n\n## 2014-06-20, version 0.24.0\n\n- Added constant `null`.\n- Functions `equal` and `unequal` support `null` and `undefined` now.\n- Function `typeof` now recognizes regular expressions as well.\n- Objects `Complex`, `Unit`, and `Help` now return their string representation\n  when calling `.valueOf()`.\n- Changed the default number of significant digits for BigNumbers from 20 to 64.\n- Changed the behavior of the conditional operator (a ? b : c) to lazy\n  evaluating.\n- Fixed imported, wrapped functions not accepting `null` and `undefined` as\n  function arguments.\n\n\n## 2014-06-10, version 0.23.0\n\n- Renamed some functions (everything now has a logical, camel case name):\n  - Renamed functions `edivide`, `emultiply`, and `epow` to `dotDivide`,\n    `dotMultiply`, and `dotPow` respectively.\n  - Renamed functions `smallereq` and `largereq` to `smallerEq` and `largerEq`.\n  - Renamed function `unary` to `unaryMinus` and added support for strings.\n- `end` is now a reserved keyword which cannot be used as function or symbol\n  name in the expression parser, and is not allowed in the scope against which\n  an expression is evaluated.\n- Implemented function `unaryPlus` and unary plus operator.\n- Implemented function `deepEqual` for matrix comparisons.\n- Added constant `phi`, the golden ratio (`phi = 1.618...`).\n- Added constant `version`, returning the version number of math.js as string.\n- Added unit `drop` (`gtt`).\n- Fixed not being able to load math.js using AMD/require.js.\n- Changed signature of `math.parse(expr, nodes)` to `math.parse(expr, options)`\n  where `options: {nodes: Object.<String, Node>}`\n- Removed matrix support from conditional function `ifElse`.\n- Removed automatic assignment of expression results to variable `ans`.\n  This functionality can be restored by pre- or postprocessing every evaluation,\n  something like:\n\n        function evalWithAns (expr, scope) {\n          var ans = math.eval(expr, scope);\n          if (scope) {\n            scope.ans = ans;\n          }\n          return ans;\n        }\n\n\n## 2014-05-22, version 0.22.0\n\n- Implemented support to export expressions to LaTeX. Thanks Niels Heisterkamp\n  (@nheisterkamp).\n- Output of matrix multiplication is now consistently squeezed.\n- Added reference documentation in the section /docs/reference.\n- Fixed a bug in multiplying units without value with a number (like `5 * cm`).\n- Fixed a bug in multiplying two matrices containing vectors (worked fine for\n  arrays).\n- Fixed random functions not accepting Matrix as input, and always returning\n  a Matrix as output.\n\n\n## 2014-05-13, version 0.21.1\n\n- Removed `crypto` library from the bundle.\n- Deprecated functions `Parser.parse` and `Parser.compile`. Use\n  `math.parse` and `math.compile` instead.\n- Fixed function `add` not adding strings and matrices element wise.\n- Fixed parser not being able to evaluate an exponent followed by a unary minus\n  like `2^-3`, and a transpose followed by an index like `[3]'[1]`.\n\n\n## 2014-04-24, version 0.21.0\n\n- Implemented trigonometric hyperbolic functions `cosh`, `coth`, `csch`,\n  `sech`, `sinh`, `tanh`. Thanks Rogelio J. Baucells (@rjbaucells).\n- Added property `type` to all expression nodes in an expression tree.\n- Fixed functions `log`, `log10`, `pow`, and `sqrt` not supporting complex\n  results from BigNumber input (like `sqrt(bignumber(-4))`).\n\n\n## 2014-04-16, version 0.20.0\n\n- Switched to module `decimal.js` for BigNumber support, instead of\n  `bignumber.js`.\n- Implemented support for polar coordinates to the `Complex` datatype.\n  Thanks Finn Pauls (@finnp).\n- Implemented BigNumber support for functions `exp`, `log`, and `log10`.\n- Implemented conditional operator `a ? b : c` in expression parser.\n- Improved floating point comparison: the functions now check whether values\n  are nearly equal, against a configured maximum relative difference `epsilon`.\n  Thanks Rogelio J. Baucells (@rjbaucells).\n- Implemented function `norm`. Thanks Rogelio J. Baucells (@rjbaucells).\n- Improved function `ifElse`, is now specified for special data types too.\n- Improved function `det`. Thanks Bryan Cuccioli (@bcuccioli).\n- Implemented `BigNumber` support for functions `det` and `diag`.\n- Added unit alias `lbs` (pound mass).\n- Changed configuration option `decimals` to `precision` (applies to BigNumbers\n  only).\n- Fixed support for element-wise comparisons between a string and a matrix.\n- Fixed: expression parser now trows IndexErrors with one-based indices instead\n  of zero-based.\n- Minor bug fixes.\n\n\n## 2014-03-30, version 0.19.0\n\n- Implemented functions `compare`, `sum`, `prod`, `var`, `std`, `median`.\n- Implemented function `ifElse` Thanks @mtraynham.\n- Minor bug fixes.\n\n\n## 2014-02-15, version 0.18.1\n\n- Added unit `feet`.\n- Implemented function `compile` (shortcut for parsing and then compiling).\n- Improved performance of function `pow` for matrices. Thanks @hamadu.\n- Fixed broken auto completion in the command line interface.\n- Fixed an error in function `combinations` for large numbers, and\n  improved performance of both functions `combinations` and `permutations`.\n\n\n## 2014-01-18, version 0.18.0\n\n- Changed matrix index notation of expression parser from round brackets to\n  square brackets, for example `A[1, 1:3]` instead of `A(1, 1:3)`.\n- Removed need to use the `function` keyword for function assignments in the\n  expression parser, you can define a function now like `f(x) = x^2`.\n- Implemented a compilation step in the expression parser: expressions are\n  compiled into JavaScript, giving much better performance (easily 10x as fast).\n- Renamed unit conversion function and operator `in` to `to`. Operator `in` is\n  still available in the expression parser as an alias for `to`. Added unit\n  `in`, an abbreviation for `inch`. Thanks Elijah Insua (@tmpvar).\n- Added plurals and aliases for units.\n- Implemented an argument `includeEnd` for function `range` (false by default).\n- Ranges in the expression parser now support big numbers.\n- Implemented functions `permutations` and `combinations`.\n  Thanks Daniel Levin (@daniel-levin).\n- Added lower case abbreviation `l` for unit litre.\n\n\n## 2013-12-19, version 0.17.1\n\n- Fixed a bug with negative temperatures.\n- Fixed a bug with prefixes of units squared meter `m2` and cubic meter `m3`.\n\n\n## 2013-12-12, version 0.17.0\n\n- Renamed and flattened configuration settings:\n  - `number.defaultType` is now `number`.\n  - `number.precision` is now `decimals`.\n  - `matrix.defaultType` is now `matrix`.\n- Function `multiply` now consistently outputs a complex number on complex input.\n- Fixed `mod` and `in` not working as function (only as operator).\n- Fixed support for old browsers (IE8 and older), compatible when using es5-shim.\n- Fixed support for Java's ScriptEngine.\n\n\n## 2013-11-28, version 0.16.0\n\n- Implemented BigNumber support for arbitrary precision calculations.\n  Added settings `number.defaultType` and `number.precision` to configure\n  big numbers.\n- Documentation is extended.\n- Removed utility functions `isScalar`, `toScalar`, `isVector`, `toVector`\n  from `Matrix` and `Range`. Use `math.squeeze` and `math.size` instead.\n- Implemented functions `get` and `set` on `Matrix`, for easier and faster\n  retrieval/replacement of elements in a matrix.\n- Implemented function `resize`, handling matrices, scalars, and strings.\n- Functions `ones` and `zeros` now return an empty matrix instead of a\n  number 1 or 0 when no arguments are provided.\n- Implemented functions `min` and `max` for `Range` and `Index`.\n- Resizing matrices now leaves new elements undefined by default instead of\n  filling them with zeros. Function `resize` now has an extra optional\n  parameter `defaultValue`.\n- Range operator `:` in expression parser has been given a higher precedence.\n- Functions don't allow arguments of unknown type anymore.\n- Options be set when constructing a math.js instance or using the new function\n  `config(options`. Options are no longer accessible via `math.options`.\n- Renamed `scientific` notation to `exponential` in function `format`.\n- Function `format` outputs exponential notation with positive exponents now\n  always with `+` sign, so outputs `2.1e+3` instead of `2.1e3`.\n- Fixed function `squeeze` not being able squeeze into a scalar.\n- Some fixes and performance improvements in the `resize` and `subset`\n  functions.\n- Function `size` now adheres to the option `matrix.defaultType` for scalar\n  input.\n- Minor bug fixes.\n\n\n## 2013-10-26, version 0.15.0\n\n- Math.js must be instantiated now, static calls are no longer supported. Usage:\n  - node.js: `var math = require('mathjs')();`\n  - browser: `var math = mathjs();`\n- Implemented support for multiplying vectors with matrices.\n- Improved number formatting:\n  - Function `format` now support various options: precision, different\n    notations (`fixed`, `scientific`, `auto`), and more.\n  - Numbers are no longer rounded to 5 digits by default when formatted.\n  - Implemented a function `format` for `Matrix`, `Complex`, `Unit`, `Range`,\n    and `Selector` to format using options.\n  - Function `format` does only stringify values now, and has a new parameter\n    `precision` to round to a specific number of digits.\n  - Removed option `math.options.precision`,\n    use `math.format(value [, precision])` instead.\n  - Fixed formatting numbers as scientific notation in some cases returning\n    a zero digit left from the decimal point. (like \"0.33333e8\" rather than\n    \"3.3333e7\"). Thanks @husayt.\n- Implemented a function `print` to interpolate values in a template string,\n  this functionality was moved from the function `format`.\n- Implemented statistics function `mean`. Thanks Guillermo Indalecio Fernandez\n  (@guillermobox).\n- Extended and changed `max` and `min` for multi dimensional matrices: they now\n  return the maximum and minimum of the flattened array. An optional second\n  argument `dim` allows to calculate the `max` or `min` for specified dimension.\n- Renamed option `math.options.matrix.default` to\n  `math.options.matrix.defaultType`.\n- Removed support for comparing complex numbers in functions `smaller`,\n  `smallereq`, `larger`, `largereq`. Complex numbers cannot be ordered.\n\n\n## 2013-10-08, version 0.14.0\n\n- Introduced an option `math.options.matrix.default` which can have values\n  `matrix` (default) or `array`. This option is used by the functions `eye`,\n  `ones`, `range`, and `zeros`, to determine the type of matrix output.\n- Getting a subset of a matrix will automatically squeeze the resulting subset,\n  setting a subset of a matrix will automatically unsqueeze the given subset.\n- Removed concatenation of nested arrays in the expression parser.\n  You can now input nested arrays like in JavaScript. Matrices can be\n  concatenated using the function `concat`.\n- The matrix syntax `[...]` in the expression parser now creates 1 dimensional\n  matrices by default. `math.eval('[1,2,3,4]')` returns a matrix with\n  size `[4]`, `math.eval('[1,2;3,4]')` returns a matrix with size `[2,2]`.\n- Documentation is restructured and extended.\n- Fixed non working operator `mod` (modulus operator).\n\n\n## 2013-09-03, version 0.13.0\n\n- Implemented support for booleans in all relevant functions.\n- Implemented functions `map` and `forEach`. Thanks Sebastien Piquemal (@sebpic).\n- All construction functions can be used to convert the type of variables,\n  also element-wise for all elements in an Array or Matrix.\n- Changed matrix indexes of the expression parser to one-based with the\n  upper-bound included, similar to most math applications. Note that on a\n  JavaScript level, math.js uses zero-based indexes with excluded upper-bound.\n- Removed support for scalars in the function `subset`, it now only supports\n  Array, Matrix, and String.\n- Removed the functions `get` and `set` from a selector, they are a duplicate\n  of the function `subset`.\n- Replaced functions `get` and `set` of `Matrix` with a single function\n  `subset`.\n- Some moving around with code and namespaces:\n  - Renamed namespace `math.expr` to `math.expression` (contains Scope, Parser,\n    node objects).\n  - Renamed namespace `math.docs` to `math.expression.docs`.\n  - Moved `math.expr.Selector` to `math.chaining.Selector`.\n- Fixed some edge cases in functions `lcm` and `xgcd`.\n\n\n## 2013-08-22, version 0.12.1\n\n- Fixed outdated version of README.md.\n- Fixed a broken unit test.\n\n\n## 2013-08-22, version 0.12.0\n\n- Implemented functions `random([min, max])`, `randomInt([min, max])`,\n  `pickRandom(array)`. Thanks Sebastien Piquemal (@sebpic).\n- Implemented function `distribution(name)`, generating a distribution object\n  with functions `random`, `randomInt`, `pickRandom` for different\n  distributions. Currently supporting `uniform` and `normal`.\n- Changed the behavior of `range` to exclude the upper bound, so `range(1, 4)`\n  now returns `[1, 2, 3]` instead of `[1, 2, 3, 4]`.\n- Changed the syntax of `range`, which is now `range(start, end [, step])`\n  instead of `range(start, [step, ] end)`.\n- Changed the behavior of `ones` and `zeros` to geometric dimensions, for\n  example `ones(3)` returns a vector with length 3, filled with ones, and\n  `ones(3,3)` returns a 2D array with size [3, 3].\n- Changed the return type of `ones` and `zeros`: they now return an Array when\n  arguments are Numbers or an Array, and returns a Matrix when the argument\n  is a Matrix.\n- Change matrix index notation in parser from round brackets to square brackets,\n  for example `A[0, 0:3]`.\n- Removed the feature introduced in v0.10.0 to automatically convert a complex\n  value with an imaginary part equal to zero to a number.\n- Fixed zeros being formatted as null. Thanks @TimKraft.\n\n\n## 2013-07-23, version 0.11.1\n\n- Fixed missing development dependency\n\n\n## 2013-07-23, version 0.11.0\n\n- Changed math.js from one-based to zero-based indexes.\n  - Getting and setting matrix subset is now zero-based.\n  - The dimension argument in function `concat` is now zero-based.\n- Improvements in the string output of function help.\n- Added constants `true` and `false`.\n- Added constructor function `boolean`.\n- Fixed function `select` not accepting `0` as input.\n  Thanks Elijah Manor (@elijahmanor).\n- Parser now supports multiple unary minus operators after each other.\n- Fixed not accepting empty matrices like `[[], []]`.\n- Some fixes in the end user documentation.\n\n\n## 2013-07-08, version 0.10.0\n\n- For complex calculations, all functions now automatically replace results\n  having an imaginary part of zero with a Number. (`2i * 2i` now returns a\n  Number `-4` instead of a Complex `-4 + 0i`).\n- Implemented support for injecting custom node handlers in the parser. Can be\n  used for example to implement a node handler for plotting a graph.\n- Implemented end user documentation and a new `help` function.\n- Functions `size` and `squeeze` now return a Matrix instead of an Array as\n  output on Matrix input.\n- Added a constant tau (2 * pi). Thanks Zak Zibrat (@palimpsests).\n- Renamed function `unaryminus` to `unary`.\n- Fixed a bug in determining node dependencies in function assignments.\n\n\n## 2013-06-14, version 0.9.1\n\n- Implemented element-wise functions and operators: `emultiply` (`x .* y`),\n  `edivide` (`x ./ y`), `epow` (`x .^ y`).\n- Added constants `Infinity` and `NaN`.\n- Removed support for Workspace to keep the library focused on its core task.\n- Fixed a bug in the Complex constructor, not accepting NaN values.\n- Fixed division by zero in case of pure complex values.\n- Fixed a bug in function multiply multiplying a pure complex value with\n  Infinity.\n\n\n## 2013-05-29, version 0.9.0\n\n- Implemented function `math.parse(expr [,scope])`. Optional parameter scope can\n  be a plain JavaScript Object containing variables.\n- Extended function `math.expr(expr [, scope])` with an additional parameter\n  `scope`, similar to `parse`. Example: `math.eval('x^a', {x:3, a:2});`.\n- Implemented function `subset`, to get or set a subset from a matrix, string,\n  or other data types.\n- Implemented construction functions number and string (mainly useful inside\n  the parser).\n- Improved function `det`. Thanks Bryan Cuccioli (@bcuccioli).\n- Moved the parse code from prototype math.expr.Parser to function math.parse,\n  simplified Parser a little bit.\n- Strongly simplified the code of Scope and Workspace.\n- Fixed function mod for negative numerators, and added error messages in case\n  of wrong input.\n\n\n## 2013-05-18, version 0.8.2\n\n- Extended the import function and some other minor improvements.\n- Fixed a bug in merging one dimensional vectors into a matrix.\n- Fixed a bug in function subtract, when subtracting a complex number from a\n  real number.\n\n\n## 2013-05-10, version 0.8.1\n\n- Fixed an npm warning when installing mathjs globally.\n\n\n## 2013-05-10, version 0.8.0\n\n- Implemented a command line interface. When math.js is installed globally via\n  npm, the application is available on your system as 'mathjs'.\n- Implemented `end` keyword for index operator, and added support for implicit\n  start and end (expressions like `a(2,:)` and `b(2:end,3:end-1)` are supported\n  now).\n- Function math.eval is more flexible now: it supports variables and multi-line\n  expressions.\n- Removed the read-only option from Parser and Scope.\n- Fixed non-working unequal operator != in the parser.\n- Fixed a bug in resizing matrices when replacing a subset.\n- Fixed a bug in updating a subset of a non-existing variable.\n- Minor bug fixes.\n\n\n## 2013-05-04, version 0.7.2\n\n- Fixed method unequal, which was checking for equality instead of inequality.\n  Thanks @FJS2.\n\n\n## 2013-04-27, version 0.7.1\n\n- Improvements in the parser:\n  - Added support for chained arguments.\n  - Added support for chained variable assignments.\n  - Added a function remove(name) to remove a variable from the parsers scope.\n  - Renamed nodes for more consistency and to resolve naming conflicts.\n  - Improved stringification of an expression tree.\n  - Some simplifications in the code.\n  - Minor bug fixes.\n- Fixed a bug in the parser, returning NaN instead of throwing an error for a\n  number with multiple decimal separators like `2.3.4`.\n- Fixed a bug in Workspace.insertAfter.\n- Fixed: math.js now works on IE 6-8 too.\n\n\n## 2013-04-20, version 0.7.0\n\n- Implemented method `math.eval`, which uses a readonly parser to evaluate\n  expressions.\n- Implemented method `xgcd` (extended eucledian algorithm). Thanks Bart Kiers\n  (@bkiers).\n- Improved math.format, which now rounds values to a maximum number of digits\n  instead of decimals (default is 5 digits, for example `math.format(math.pi)`\n  returns `3.1416`).\n- Added examples.\n- Changed methods square and cube to evaluate matrices element wise (consistent\n  with all other methods).\n- Changed second parameter of method import to an object with options.\n- Fixed method math.typeof on IE.\n- Minor bug fixes and improvements.\n\n\n## 2013-04-13, version 0.6.0\n\n- Implemented chained operations via method math.select(). For example\n  `math.select(3).add(4).subtract(2).done()` will return `5`.\n- Implemented methods gcd and lcm.\n- Implemented method `Unit.in(unit)`, which creates a clone of the unit with a\n  fixed representation. For example `math.unit('5.08 cm').in('inch')` will\n  return a unit which string representation always is in inch, thus `2 inch`.\n  `Unit.in(unit)` is the same as method `math.in(x, unit)`.\n- Implemented `Unit.toNumber(unit)`, which returns the value of the unit when\n  represented with given unit. For example\n  `math.unit('5.08 cm').toNumber('inch')` returns the number `2`, as the\n  representation of the unit in inches has 2 as value.\n- Improved: method `math.in(x, unit)` now supports a string as second parameter,\n  for example `math.in(math.unit('5.08 cm'), 'inch')`.\n- Split the end user documentation of the parser functions from the source\n  files.\n- Removed function help and the built-in documentation from the core library.\n- Fixed constant i being defined as -1i instead of 1i.\n- Minor bug fixes.\n\n\n## 2013-04-06, version 0.5.0\n\n- Implemented data types Matrix and Range.\n- Implemented matrix methods clone, concat, det, diag, eye, inv, ones, size,\n  squeeze, transpose, zeros.\n- Implemented range operator `:`, and transpose operator `'` in parser.\n- Changed: created construction methods for easy object creation for all data\n  types and for the parser. For example, a complex value is now created\n  with `math.complex(2, 3)` instead of `new math.Complex(2, 3)`, and a parser\n  is now created with `math.parser()` instead of `new math.parser.Parser()`.\n- Changed: moved all data types under the namespace math.type, and moved the\n  Parser, Workspace, etc. under the namespace math.expr.\n- Changed: changed operator precedence of the power operator:\n  - it is now right associative instead of left associative like most scripting\n    languages. So `2^3^4` is now calculated as `2^(3^4)`.\n  - it has now higher precedence than unary minus most languages, thus `-3^2` is\n    now calculated as `-(3^2)`.\n- Changed: renamed the parsers method 'put' into 'set'.\n- Fixed: method 'in' did not check for units to have the same base.\n\n\n## 2013-03-16, version 0.4.0\n\n- Implemented Array support for all methods.\n- Implemented Array support in the Parser.\n- Implemented method format.\n- Implemented parser for units, math.Unit.parse(str).\n- Improved parser for complex values math.Complex.parse(str);\n- Improved method help: it now evaluates the examples.\n- Fixed: a scoping issue with the Parser when defining functions.\n- Fixed: method 'typeof' was not working well with minified and mangled code.\n- Fixed: errors in determining the best prefix for a unit.\n\n\n## 2013-03-09, version 0.3.0\n\n- Implemented Workspace\n- Implemented methods cot, csc, sec.\n- Implemented Array support for methods with one parameter.\n\n\n## 2013-02-25, version 0.2.0\n\n- Parser, Scope, and expression tree with Nodes implemented.\n- Implemented method import which makes it easy to extend math.js.\n- Implemented methods arg, conj, cube, equal, factorial, im, largereq,\n  log(x, base), log10, mod, re, sign, smallereq, square, unequal.\n\n\n## 2013-02-18, version 0.1.0\n\n- Reached full compatibility with Javascripts built-in Math library.\n- More functions implemented.\n- Some bugfixes.\n\n\n## 2013-02-16, version 0.0.2\n\n- All constants of Math implemented, plus the imaginary unit i.\n- Data types Complex and Unit implemented.\n- First set of functions implemented.\n\n\n## 2013-02-15, version 0.0.1\n\n- First publish of the mathjs package. (package is still empty)\n", "import { isBigNumber } from './is'\n\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\nexport function clone (x) {\n  const type = typeof x\n\n  // immutable primitive types\n  if (type === 'number' || type === 'string' || type === 'boolean' ||\n      x === null || x === undefined) {\n    return x\n  }\n\n  // use clone function of the object when available\n  if (typeof x.clone === 'function') {\n    return x.clone()\n  }\n\n  // array\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value)\n    })\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf())\n  if (isBigNumber(x)) return x // bignumbers are immutable\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x) // TODO: clone a RegExp\n\n  // object\n  return mapObject(x, clone)\n}\n\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\nexport function mapObject (object, callback) {\n  const clone = {}\n\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key])\n    }\n  }\n\n  return clone\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexport function extend (a, b) {\n  for (const prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop]\n    }\n  }\n  return a\n}\n\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\nexport function deepExtend (a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend')\n  }\n\n  for (const prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {}\n        }\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop])\n        } else {\n          a[prop] = b[prop]\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend')\n      } else {\n        a[prop] = b[prop]\n      }\n    }\n  }\n  return a\n}\n\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\nexport function deepStrictEqual (a, b) {\n  let prop, i, len\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false\n    }\n\n    if (a.length !== b.length) {\n      return false\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false\n      }\n    }\n    return true\n  } else if (typeof a === 'function') {\n    return (a === b)\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false\n      }\n    }\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {\n        return false\n      }\n    }\n    return true\n  } else {\n    return (a === b)\n  }\n}\n\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\nexport function deepFlatten (nestedObject) {\n  const flattenedObject = {}\n\n  _deepFlatten(nestedObject, flattenedObject)\n\n  return flattenedObject\n}\n\n// helper function used by deepFlatten\nfunction _deepFlatten (nestedObject, flattenedObject) {\n  for (const prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      const value = nestedObject[prop]\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject)\n      } else {\n        flattenedObject[prop] = value\n      }\n    }\n  }\n}\n\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\nexport function canDefineProperty () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', { get: function () {} })\n      return true\n    }\n  } catch (e) {}\n\n  return false\n}\n\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\nexport function lazy (object, prop, valueResolver) {\n  let _uninitialized = true\n  let _value\n\n  Object.defineProperty(object, prop, {\n    get: function () {\n      if (_uninitialized) {\n        _value = valueResolver()\n        _uninitialized = false\n      }\n      return _value\n    },\n\n    set: function (value) {\n      _value = value\n      _uninitialized = false\n    },\n\n    configurable: true,\n    enumerable: true\n  })\n}\n\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\nexport function traverse (object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'))\n  }\n\n  let obj = object\n\n  if (path) {\n    for (let i = 0; i < path.length; i++) {\n      const key = path[i]\n      if (!(key in obj)) {\n        obj[key] = {}\n      }\n      obj = obj[key]\n    }\n  }\n\n  return obj\n}\n\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\nexport function hasOwnProperty (object, property) {\n  return object && Object.hasOwnProperty.call(object, property)\n}\n\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\nexport function isLegacyFactory (object) {\n  return object && typeof object.factory === 'function'\n}\n\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\nexport function get (object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'))\n    } else {\n      return object[path]\n    }\n  }\n\n  let child = object\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i]\n    child = child ? child[key] : undefined\n  }\n\n  return child\n}\n\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\nexport function set (object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value)\n    } else {\n      object[path] = value\n      return object\n    }\n  }\n\n  let child = object\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i]\n    if (child[key] === undefined) {\n      child[key] = {}\n    }\n    child = child[key]\n  }\n\n  if (path.length > 0) {\n    const lastKey = path[path.length - 1]\n    child[lastKey] = value\n  }\n\n  return object\n}\n\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\nexport function pick (object, properties, transform) {\n  const copy = {}\n\n  for (let i = 0; i < properties.length; i++) {\n    const key = properties[i]\n    const value = get(object, key)\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value)\n    }\n  }\n\n  return copy\n}\n\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\nexport function pickShallow (object, properties) {\n  const copy = {}\n\n  for (let i = 0; i < properties.length; i++) {\n    const key = properties[i]\n    const value = object[key]\n    if (value !== undefined) {\n      copy[key] = value\n    }\n  }\n\n  return copy\n}\n\nexport function values (object) {\n  return Object.keys(object).map(key => object[key])\n}\n\n// helper function to test whether a string contains a path like 'user.name'\nfunction isPath (str) {\n  return str.indexOf('.') !== -1\n}\n", "import assert from 'assert'\nimport math from '../../../src/bundleAny'\n\ndescribe('security', function () {\n  it('should not allow calling Function via constructor', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via constructor (2)', function () {\n    assert.throws(function () {\n      math.evaluate('f=sqrt.constructor(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: No access to method \"constructor\"/)\n  })\n\n  it('should not allow calling Function via call/apply', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor.call(null, \"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor.apply(null, [\"console.log(\\'hacked...\\')\"]); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling constructor of a class', function () {\n    assert.throws(function () {\n      math.evaluate('[].constructor()')\n    }, /Error: No access to method \"constructor\"/)\n  })\n\n  it('should not allow calling constructor', function () {\n    assert.throws(function () {\n      math.evaluate('constructor')\n    }, /Error: No access to property \"constructor\"/)\n\n    assert.throws(function () {\n      math.evaluate('toString')\n    }, /Cannot access method \"toString\" as a property/)\n  })\n\n  it('should not allow calling Function via constructor', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n\n    assert.throws(function () {\n      math.evaluate('f=[].map[\"constructor\"](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via a disguised constructor', function () {\n    assert.throws(function () {\n      math.evaluate('prop=\"constructor\"; f=[].map[prop](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n\n    assert.throws(function () {\n      math.evaluate('f=[].map[concat(\"constr\", \"uctor\")](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via bind', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor.bind()(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via map/forEach', function () {\n    // TODO: simplify this test case, let it output console.log('hacked...')\n    assert.throws(function () {\n      math.evaluate('[\"//\",\"a/*\\\\nreturn process.mainModule.require\"]._data.map(cos.constructor)[1]()(\"child_process\").execSync(\"ps >&2\")')\n    }, /Error: No access to property \"_data/)\n  })\n\n  it('should not allow calling Function via Object.assign', function () {\n    // TODO: simplify this test case, let it output console.log('hacked...')\n    assert.throws(function () {\n      math.evaluate('{}.constructor.assign(cos.constructor, {binding: cos.bind})\\n' +\n          '{}.constructor.assign(cos.constructor, {bind: null})\\n' +\n          'f=cos.constructor.binding()(\"console.log(\\'hacked...\\')\")\\n' +\n          'f()')\n    }, /Error: No access to property \"bind/)\n  })\n\n  it('should not allow disguising forbidden properties with unicode characters', function () {\n    const scope = {\n      a: {}\n    }\n\n    assert.throws(function () { math.evaluate('a.co\\u006Estructor', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a[\"co\\\\u006Estructor\"]', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a.constructor', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a.constructor = 2', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a[\"constructor\"] = 2', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a[\"co\\\\u006Estructor\"] = 2', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {\"constructor\": 2}', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {constructor: 2}', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {\"co\\\\u006Estructor\": 2}', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {co\\u006Estructor: 2}', scope) }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow calling Function via imported, overridden function', function () {\n    assert.throws(function () {\n      const math2 = math.create()\n      math2.evaluate('import({matrix:cos.constructor},{override:1});x=[\"console.log(\\'hacked...\\')\"];x()')\n    }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow calling Function via index retrieval', function () {\n    assert.throws(function () {\n      math.evaluate('a=[\"console.log(\\'hacked...\\')\"]._data;a.isRange=true;x={subset:cos.constructor}[a];x()')\n    }, /Error: No access to property \"_data/)\n  })\n\n  it('should not allow calling Function via getOwnPropertyDescriptor', function () {\n    assert.throws(function () {\n      math.evaluate('p = parser()\\n' +\n          'p.evaluate(\"\", [])\\n' +\n          'o = p.get(\"constructor\")\\n' +\n          'c = o.getOwnPropertyDescriptor(o.__proto__, \"constructor\")\\n' +\n          'f = c.value(\"console.log(\\'hacked...\\')\")\\n' +\n          'f()')\n    }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow calling Function via a symbol', function () {\n    assert.throws(function () {\n      math.evaluate('O = {}.constructor\\n' +\n          'd = O.getOwnPropertyDescriptor(O.__proto__, \"constructor\")\\n' +\n          'f = evaluate(\"value\", d)(\"console.log(\\'hacked...\\')\")\\n' +\n          'f()')\n    }, /Error: No access to property \"constructor/)\n  })\n\n  it('should not allow calling Function via a specially encoded constructor property name', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map[\"\\\\u0063onstructor\"](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow creating an Object with forbidden properties', function () {\n    assert.throws(function () {\n      math.evaluate('{hasOwnProperty: 2}')\n    }, /Error: No access to property \"hasOwnProperty/)\n\n    assert.throws(function () {\n      math.evaluate('{constructor: 2}')\n    }, /Error: No access to property \"constructor/)\n\n    assert.throws(function () {\n      math.evaluate('{toString: 2}')\n    }, /Error: No access to property \"toString/)\n  })\n\n  it('should not allow calling Object via a an object constructor', function () {\n    assert.throws(function () {\n      math.evaluate('{}.constructor.assign(expression.node.AssignmentNode.prototype, ' +\n                '{_compile: \"\".toString.bind(\"console.log(\\'hacked...\\')\")})\\n' +\n                'evaluate(\"a = 2\")')\n    }, /Error: No access to property \"constructor/)\n  })\n\n  it('should not allow calling Object via a __defineGetter__', function () {\n    assert.throws(function () {\n      math.evaluate('expression.node.AssignmentNode.prototype.__defineGetter__(\"_compile\", ' +\n          '{}.valueOf.bind(\"\".toString.bind(\"console.log(\\'hacked...\\')\"))); evaluate(\"a = 2\")')\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow calling evaluate via a custom compiled SymbolNode', function () {\n    assert.throws(function () {\n      math.evaluate(\"s={};s.__proto__=expression.node.SymbolNode[\\\"prototype\\\"];expression.node.SymbolNode.apply(s,[\\\"\\\\\\\");},\\\\\\\"exec\\\\\\\":function(a){return global.eval}};//\\\"]._data);s.compile().exec()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow calling evaluate via parse', function () {\n    assert.throws(function () {\n      math.evaluate('x=parse(\"cos\");x.name = \"\\\\\");},\\\\\"evaluate\\\\\": function(a) {return global.eval}};//a\"; x.compile().evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /No access to property \"name\"/)\n  })\n\n  it('should not allow calling evaluate via parse (2)', function () {\n    assert.throws(function () {\n      math.evaluate('p = parse(\"{}[\\\\\"console.log(\\'hacked...\\')\\\\\"]\"); p.index.dimensions[\"0\"].valueType = \"boolean\"; p.evaluate()')\n    }, /No access to property \"index\"/)\n  })\n\n  it('should not allow calling evaluate via function.syntax', function () {\n    assert.throws(function () {\n      math.evaluate('cos.syntax=\"global.eval\";s=unit(\"5 cm\");s.units=[]._data;s.value=cos;s._compile=s.toString;expression.node.Node.prototype.compile.call(s).evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /Error: No access to property \"syntax\"/)\n  })\n\n  it('should not allow calling evaluate via clone', function () {\n    assert.throws(function () {\n      math.evaluate('expression.node.ConstantNode.prototype.clone.call({\"value\":\"evaluate\"}).evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow replacing _compile', function () {\n    assert.throws(function () {\n      math.evaluate('c(x,y)=\"console.log(\\'hacked...\\')\";expression.node.Node.prototype.compile.apply({_compile:c}).evaluate()')\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow using restricted properties via subset (1)', function () {\n    assert.throws(function () {\n      math.evaluate('f()=false;' +\n          'g()={length:3};' +\n          'h()={\"0\":0,\"1\":0,\"2\":0};' +\n          'j(x)=[x(\"constructor\")];' +\n          'k(x)={map:j};' +\n          'i={isIndex:true,isScalar:f,size:g,min:h,max:h,dimension:k};' +\n          'f=subset(subset([[[0]]],i),index(1,1,1))(\"console.log(\\'hacked...\\')\");' +\n          'f()')\n    }, /TypeError: Unexpected type of argument in function subset \\(expected: Index, actual: Object, index: 1\\)/)\n  })\n\n  it('should not allow using restricted properties via subset (2)', function () {\n    assert.throws(function () {\n      math.evaluate(\"scope={}; setter = evaluate(\\\"f(obj, name, newValue, assign) = (obj[name] = newValue)\\\", scope); o = parse(\\\"1\\\"); setter(o, \\\"value\\\", \\\"evaluate\\\", subset); scope.obj.compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: No access to property \"value\"/)\n  })\n\n  it('should not allow using restricted properties via subset (3)', function () {\n    // this exploit does no longer work because parse(\"1\") returns a ConstantNode\n    // and subset doesn't accept that anymore (expects a plain Object)\n    assert.throws(function () {\n      math.evaluate('subset(parse(\"1\"), index(\"value\"), \"evaluate\").compile().evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /TypeError: Unexpected type of argument in function subset/)\n  })\n\n  it('should not allow inserting fake nodes with bad code via node.map or node.transform', function () {\n    assert.throws(function () {\n      math.evaluate(\"badValue = {\\\"isNode\\\": true, \\\"_compile\\\": evaluate(\\\"f(a, b) = \\\\\\\"evaluate\\\\\\\"\\\")}; x = evaluate(\\\"f(child, path, parent) = path ==\\\\\\\"value\\\\\\\" ? newChild : child\\\", {\\\"newChild\\\": badValue}); parse(\\\"x = 1\\\").map(x).compile().evaluate()(\\\"console.log('hacked')\\\")\")\n    }, /Error: Cannot convert \"object\" to a number/)\n\n    assert.throws(function () {\n      math.evaluate(\"badValue = {\\\"isNode\\\": true, \\\"type\\\": \\\"ConstantNode\\\", \\\"valueType\\\": \\\"string\\\", \\\"_compile\\\": evaluate(\\\"f(a, b) = \\\\\\\"evaluate\\\\\\\"\\\")}; x = evaluate(\\\"f(child, path, parent) = path ==\\\\\\\"value\\\\\\\" ? newChild : child\\\", {\\\"newChild\\\": badValue}); parse(\\\"x = 1\\\").map(x).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }) // The error message is vague but well...\n  })\n\n  it('should not allow replacing validateSafeMethod with a local variant', function () {\n    assert.throws(function () {\n      math.evaluate(\"evaluate(\\\"f(validateSafeMethod)=cos.constructor(\\\\\\\"return evaluate\\\\\\\")()\\\")(evaluate(\\\"f(x,y)=0\\\"))(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow abusing toString', function () {\n    assert.throws(function () {\n      math.evaluate(\"badToString = evaluate(\\\"f() = 1\\\"); badReplace = evaluate(\\\"f(a, b) = \\\\\\\"evaluate\\\\\\\"\\\"); badNumber = {toString:badToString, replace:badReplace}; badNode = {\\\"isNode\\\": true, \\\"type\\\": \\\"ConstantNode\\\", \\\"valueType\\\": \\\"number\\\", \\\"value\\\": badNumber}; x = evaluate(\\\"f(child, path, parent) = badNode\\\", {badNode:badNode}); parse(\\\"(1)\\\").map(x).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: No access to property \"toString\"/)\n  })\n\n  it('should not allow creating a bad FunctionAssignmentNode', function () {\n    assert.throws(function () {\n      math.evaluate(\"badNode={isNode:true,type:\\\"FunctionAssignmentNode\\\",expr:parse(\\\"1\\\"),types:{join:evaluate(\\\"f(a)=\\\\\\\"\\\\\\\"\\\")},params:{\\\"forEach\\\":evaluate(\\\"f(x)=1\\\"),\\\"join\\\":evaluate(\\\"f(x)=\\\\\\\"){return evaluate;}});return fn;})())}});return fn;})());}};//\\\\\\\"\\\")}};parse(\\\"f()=x\\\").map(evaluate(\\\"f(a,b,c)=badNode\\\",{\\\"badNode\\\":badNode})).compile().evaluate()()()(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow creating a bad OperatorNode (1)', function () {\n    assert.throws(function () {\n      math.evaluate(\"badNode={isNode:true,type:\\\"FunctionAssignmentNode\\\",expr:parse(\\\"1\\\"),types:{join:evaluate(\\\"f(a)=\\\\\\\"\\\\\\\"\\\")},params:{\\\"forEach\\\":evaluate(\\\"f(x)=1\\\"),\\\"join\\\":evaluate(\\\"f(x)=\\\\\\\"){return evaluate;}});return fn;})())}});return fn;})());}};//\\\\\\\"\\\")}};parse(\\\"f()=x\\\").map(evaluate(\\\"f(a,b,c)=badNode\\\",{\\\"badNode\\\":badNode})).compile().evaluate()()()(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow creating a bad OperatorNode (2)', function () {\n    assert.throws(function () {\n      math.evaluate(\"parse(\\\"(0)\\\").map(evaluate(\\\"f(a,b,c)=d\\\",{d:{isNode:true,type:\\\"OperatorNode\\\",fn:\\\"__lookupGetter__\\\",args:{map:evaluate(\\\"f(a)=b\\\",{b:{join:evaluate(\\\"f(a)=\\\\\\\"1)||evaluate;}};//\\\\\\\"\\\")}})}}})).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /TypeError: Node expected for parameter \"content\"/)\n  })\n\n  it('should not allow creating a bad ConstantNode', function () {\n    assert.throws(function () {\n      math.evaluate('f(x,y)=\"evaluate\";g()=3;fakeConstantNode={\"isNode\": true, \"type\": \"ConstantNode\", \"valueType\": \"number\", \"value\": {\"replace\": f, \"toString\": g}};injectFakeConstantNode(child,path,parent)=path==\"value\"?fakeConstantNode:child;parse(\"a=3\").map(injectFakeConstantNode).compile().evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /Error: No access to property \"toString\"/)\n  })\n\n  it('should not allow creating a bad ArrayNode', function () {\n    assert.throws(function () {\n      math.evaluate('g(x)=\"evaluate\";f(x)=({join: g});fakeArrayNode={isNode: true, type: \"ArrayNode\", items: {map: f}};injectFakeArrayNode(child,path,parent)=path==\"value\"?fakeArrayNode:child;parse(\"a=3\").map(injectFakeArrayNode).compile().evaluate()[1](\"console.log(\\'hacked...\\')\")')\n    }, /Error: Cannot convert \"object\" to a number/)\n  })\n\n  it('should not allow unescaping escaped double quotes', function () {\n    // exploits:\n    // 1) A bug in validateSafeMethod which allows to call any method in Object.prototype\n    // 2) A bug in stringify\n    assert.throws(function () {\n      math.evaluate(\"x=parse(\\\"\\\\\\\"a\\\\\\\"\\\");x.__defineGetter__(\\\"value\\\",evaluate(\\\"f()=\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"&&evaluate;}};\\\\/\\\\/\\\\\\\"\\\")); x.compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: No access to method \"__defineGetter__\"/)\n  })\n\n  it('should not allow using method chain', function () {\n    assert.throws(function () {\n      math.evaluate('f=chain(\"a(){return evaluate;};function b\").typed({\"\":f()=0}).done();' +\n          'g=f();' +\n          \"g(\\\"console.log('hacked...')\\\")\")\n    }, /(is not a function)|(Object expected)/)\n  })\n\n  it('should not allow using method chain (2)', function () {\n    assert.throws(function () {\n      math.evaluate(\"evilMath=chain().create().done();evilMath.import({\\\"_compile\\\":f(a,b,c)=\\\"evaluate\\\",\\\"isNode\\\":f()=true}); parse(\\\"(1)\\\").map(g(a,b,c)=evilMath.chain()).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /(Cannot read property 'apply' of undefined)|(undefined has no properties)|(undefined is not an object)|(Unable to get property 'apply' of undefined or null reference)/)\n  })\n\n  it('should not allow using method Chain', function () {\n    assert.throws(function () {\n      math.evaluate('x=parse(\"a\",{nodes:{a:Chain}});Chain.bind(x,{})();' +\n          'evilMath=x.create().done();' +\n          'evilMath.import({\"_compile\":f(a,b,c)=\"evaluate\",\"isNode\":f()=true}); ' +\n          \"parse(\\\"(1)\\\").map(g(a,b,c)=evilMath.chain()).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow passing a function name containg bad contents', function () {\n    // underlying issues where:\n    // the input '[][\"fn\"]()=0'\n    // - defines a function in the root scope, but this shouldn't be allowed syntax\n    // - there is a typed function created which unsecurely evaluates JS code with the function name in it\n    //   -> when the function name contains JS code it can be executed, example:\n    //\n    //         const fn = typed(\"(){}+console.log(`hacked...`);function a\", { \"\": function () { } })\n\n    assert.throws(function () {\n      math.evaluate('[][\"(){}+console.log(`hacked...`);function a\"]()=0')\n    }, /SyntaxError: Invalid left hand side of assignment operator =/)\n\n    assert.throws(function () {\n      math.evaluate('{}[\"(){}+console.log(`hacked...`);function a\"]()=0')\n    }, /SyntaxError: Invalid left hand side of assignment operator =/)\n  })\n\n  it('should allow calling functions on math', function () {\n    assert.strictEqual(math.evaluate('sqrt(4)'), 2)\n  })\n\n  it('should allow invoking methods on complex numbers', function () {\n    assert.deepStrictEqual(math.evaluate('complex(4, 0).sqrt(2)'), math.complex(2, 0))\n  })\n\n  it('should allow accessing properties on an object', function () {\n    assert.deepStrictEqual(math.evaluate('obj.a', { obj: { a: 42 } }), 42)\n  })\n\n  it('should not allow accessing inherited properties on an object', function () {\n    assert.throws(function () {\n      math.evaluate('obj.constructor', { obj: { a: 42 } })\n    }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow accessing __proto__', function () {\n    assert.throws(function () {\n      math.evaluate('{}.__proto__')\n    }, /Error: No access to property \"__proto__\"/)\n  })\n\n  it('should not allow getting properties from non plain objects', function () {\n    assert.throws(function () { math.evaluate('[]._data') }, /No access to property \"_data\"/)\n    assert.throws(function () { math.evaluate('unit(\"5cm\").valueOf') }, /Cannot access method \"valueOf\" as a property/)\n  })\n\n  it('should not have access to specific namespaces', function () {\n    Object.keys(math.expression.mathWithTransform).forEach(function (name) {\n      const value = math.expression.mathWithTransform[name]\n\n      // only plain functions allowed, no constructor functions\n      if (typeof value === 'function') {\n        assert.strictEqual(isPlainFunction(value), true,\n          'only plain functions expected, constructor functions not allowed (name: \"' + name + '\")')\n      } else {\n        // plain objects not allowed, only class instances like units and complex numbers\n        if (value && typeof value === 'object') {\n          if (isPlainObject(value)) {\n            throw new Error('plain objects are not allowed, only class instances (object name: ' + name + ')')\n          }\n        }\n      }\n    })\n\n    assert.throws(function () { math.evaluate('expression') }, /Undefined symbol/)\n    assert.throws(function () { math.evaluate('type') }, /Undefined symbol/)\n    assert.throws(function () { math.evaluate('error') }, /Undefined symbol/)\n    assert.throws(function () { math.evaluate('json') }, /Undefined symbol/)\n\n    assert.strictEqual(math.expression.mathWithTransform.Matrix, undefined)\n    assert.strictEqual(math.expression.mathWithTransform.Node, undefined)\n    assert.strictEqual(math.expression.mathWithTransform.chain, undefined)\n    assert.deepStrictEqual(math.evaluate('chain'), math.unit('chain'))\n  })\n})\n\nfunction isPlainObject (object) {\n  return typeof object === 'object' && object &&\n      object.constructor === Object &&\n      Object.getPrototypeOf(object) === Object.prototype\n}\n\nfunction isPlainFunction (fn) {\n  return typeof fn === 'function' && fn.prototype.constructor === fn\n}\n", "import assert from 'assert'\nimport {\n  canDefineProperty,\n  clone,\n  deepStrictEqual,\n  deepExtend,\n  extend,\n  get,\n  isLegacyFactory,\n  lazy,\n  pick,\n  set,\n  traverse,\n  deepFlatten, hasOwnProperty\n} from '../../../src/utils/object'\n\ndescribe('object', function () {\n  describe('clone', function () {\n    it('should clone undefined', function () {\n      assert.strictEqual(clone(undefined), undefined)\n    })\n\n    it('should clone null', function () {\n      assert.strictEqual(clone(null), null)\n    })\n\n    it('should clone booleans', function () {\n      assert.strictEqual(clone(true), true)\n      assert.strictEqual(clone(false), false)\n    })\n\n    it('should clone numbers', function () {\n      assert.strictEqual(clone(2.3), 2.3)\n    })\n\n    it('should clone strings', function () {\n      assert.strictEqual(clone('hello'), 'hello')\n    })\n\n    it('should (deep) clone objects', function () {\n      const obj = { a: { b: 'c', d: new Date(2014, 0, 1) } }\n      const c = clone(obj)\n\n      assert.deepStrictEqual(obj, c)\n\n      // check whether the clone remains unchanged when changing the original object\n      obj.a.b = 'cc'\n\n      assert.strictEqual(c.a.b, 'c')\n\n      obj.a.d.setMonth(2)\n      assert.strictEqual(c.a.d.valueOf(), new Date(2014, 0, 1).valueOf())\n    })\n\n    it('should clone dates', function () {\n      const d1 = new Date(2014, 1, 1)\n      const d2 = clone(d1)\n      assert.strictEqual(d1.valueOf(), d2.valueOf())\n      d1.setMonth(2)\n      assert.notStrictEqual(d1, d2)\n    })\n\n    it('should (deep) clone arrays', function () {\n      const d = new Date(2014, 0, 1)\n      const arr = [1, 2, d, { a: 3 }]\n      const c = clone(arr)\n\n      assert.deepStrictEqual(arr, c)\n      assert.notStrictEqual(arr, c)\n      assert.notStrictEqual(arr[2], c[2])\n      assert.notStrictEqual(arr[3], c[3])\n\n      // check whether the clone remains unchanged when changing the original object\n      arr[2] = null\n      arr[3].a = 1\n      d.setMonth(2)\n      assert.strictEqual(c[2].valueOf(), new Date(2014, 0, 1).valueOf())\n      assert.strictEqual(c[3].a, 3)\n    })\n\n    it('should throw an error in case of an unsupported type', function () {\n      assert.throws(function () { clone(/a regexp/) }, /Cannot clone/)\n    })\n  })\n\n  describe('extend', function () {\n    it('should extend an object with all properties of an other object', function () {\n      const e = {}\n      const o1 = { a: 2, b: 3 }\n      const o2 = { a: 4, b: null, c: undefined, d: 5, e: e }\n      const o3 = extend(o1, o2)\n\n      assert.strictEqual(o1, o3)\n      assert.strictEqual(o1.e, o3.e)\n      assert.deepStrictEqual(o3, { a: 4, b: null, c: undefined, d: 5, e: e })\n      assert.deepStrictEqual(o2, { a: 4, b: null, c: undefined, d: 5, e: e }) // should be unchanged\n    })\n\n    it('should ignore inherited properties when extending an object', function () {\n      Object.prototype.foo = 'bar' // eslint-disable-line no-extend-native\n      const o1 = { a: 2, b: 3 }\n      const o2 = extend({}, o1)\n\n      assert.strictEqual(o2.foo, 'bar')\n      assert.strictEqual(hasOwnProperty(o2, 'foo'), false)\n\n      delete Object.prototype.foo\n    })\n  })\n\n  describe('deepExtend', function () {\n    it('should deep extend an object with all properties of an other object', function () {\n      const e = { f: { g: 3 } }\n      const o1 = { a: 2, b: 3 }\n      const o2 = { a: 4, b: null, c: undefined, d: 5, e: e }\n      const o3 = deepExtend(o1, o2)\n\n      assert.strictEqual(o1, o3)\n      assert.notStrictEqual(o3.e, o2.e)\n      assert.deepStrictEqual(o3, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 3 } } })\n      assert.deepStrictEqual(o2, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 3 } } }) // should be unchanged\n\n      e.f.g = 4\n      assert.deepStrictEqual(o3, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 3 } } }) // should be unchanged\n      assert.deepStrictEqual(o2, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 4 } } }) // should be changed\n    })\n\n    it('should throw an error when deep extending an array (is not yet supported)', function () {\n      assert.throws(function () { deepExtend({}, []) }, /Arrays are not supported by deepExtend/)\n      assert.throws(function () { deepExtend({}, { a: [] }) }, /Arrays are not supported by deepExtend/)\n      assert.throws(function () { deepExtend({}, { a: { b: [] } }) }, /Arrays are not supported by deepExtend/)\n    })\n\n    it('should ignore inherited properties when deep extending an object', function () {\n      Object.prototype.foo = 'bar' // eslint-disable-line no-extend-native\n      const o1 = { a: 2, b: 3 }\n      const o2 = deepExtend({}, o1)\n\n      assert.strictEqual(o2.foo, 'bar')\n      assert.strictEqual(hasOwnProperty(o2, 'foo'), false)\n\n      delete Object.prototype.foo\n    })\n  })\n\n  describe('deepEqual', function () {\n    it('should deep compare two objects', function () {\n      assert.strictEqual(deepStrictEqual({}, {}), true)\n\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2, b: 3 }), true)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2, b: 4 }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2 }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2 }, { a: 2, b: 3 }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2, b: {} }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: {} }, { a: 2, b: {} }), true)\n\n      assert.strictEqual(deepStrictEqual({ a: 2, b: { c: 4 } }, { a: 2, b: { c: 4 } }), true)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: { c: 4 } }, { a: 2, b: { c: 5 } }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: { c: 4 } }, { a: 2, b: {} }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: {} }, { a: 2, b: { c: 4 } }), false)\n\n      assert.strictEqual(deepStrictEqual(undefined, undefined), true)\n      assert.strictEqual(deepStrictEqual({ a: undefined }, { }), false)\n      assert.strictEqual(deepStrictEqual({ }, { a: undefined }), false)\n      assert.strictEqual(deepStrictEqual({ a: undefined }, { a: undefined }), true)\n    })\n\n    it('should deep compare values and functions strictly', function () {\n      assert.strictEqual(deepStrictEqual({ a: 2 }, { a: '2' }), false)\n      assert.strictEqual(deepStrictEqual(2, '2'), false)\n\n      const fn1 = (a, b) => a + b\n      const fn2 = (a, b) => a + b\n      assert.strictEqual(deepStrictEqual({ add: fn1 }, { add: fn1 }), true)\n      assert.strictEqual(deepStrictEqual({ add: fn1 }, { add: fn2 }), false)\n      assert.strictEqual(deepStrictEqual({ b: { add: fn1 } }, { b: { add: fn1 } }), true)\n      assert.strictEqual(deepStrictEqual({ b: { add: fn1 } }, { b: { add: fn2 } }), false)\n    })\n\n    it('should deep compare two arrays', function () {\n      assert.strictEqual(deepStrictEqual([], []), true)\n      assert.strictEqual(deepStrictEqual([1, 2], [1, 2]), true)\n      assert.strictEqual(deepStrictEqual([1, 2], [1, 2, 3]), false)\n      assert.strictEqual(deepStrictEqual([1, 0, 3], [1, 2, 3]), false)\n\n      assert.strictEqual(deepStrictEqual([1, 2, [3, 4]], [1, 2, [3, 4]]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, [3]], [1, 2, [3, 4]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, [3, 4]], [1, 2, [3]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, null], [1, 2, [3]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, [3]], [1, 2, null]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, 3], [1, 2, [3]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, [3]], [1, 2, 3]), false)\n    })\n\n    it('should deep compare mixed objects an arrays', function () {\n      assert.strictEqual(deepStrictEqual({}, []), false)\n      assert.strictEqual(deepStrictEqual({ a: {} }, { a: [] }), false)\n\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] }), true)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, {}] }, { a: [1, 2, {}] }), true)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, { b: 4 }] }, { a: [1, 2, { b: 4 }] }), true)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, { b: 4 }] }, { a: [1, 2, { b: 5 }] }), false)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, { b: 4 }] }, { a: [1, 2, {}] }), false)\n\n      assert.strictEqual(deepStrictEqual([1, 2, {}], [1, 2, {}]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: 3 }], [1, 2, { a: 3 }]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: 3 }], [1, 2, { a: 4 }]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: 3 }], [1, 2, 3]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, 3], [1, 2, { a: 3 }]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: [3, 4] }], [1, 2, { a: [3, 4] }]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: [3, 4] }], [1, 2, { a: [3, 4, 5] }]), false)\n    })\n\n    it('should not ignore inherited properties during comparison', function () {\n      Object.prototype.foo = 'bar' // eslint-disable-line no-extend-native\n\n      assert.strictEqual(deepStrictEqual({}, {}), true)\n      assert.strictEqual(deepStrictEqual({ foo: 'bar' }, {}), true)\n\n      delete Object.prototype.foo\n    })\n  })\n\n  describe('canDefineProperty', function () {\n    it('should test whether defineProperty is available', function () {\n      assert.strictEqual(canDefineProperty(), true)\n    })\n  })\n\n  describe('lazy', function () {\n    it('should get a lazy property', function () {\n      const obj = {}\n      let count = 0\n      lazy(obj, 'x', function () {\n        count++\n        return 2\n      })\n\n      const x = obj.x\n      assert.strictEqual(x, 2)\n      assert.strictEqual(count, 1)\n\n      const x2 = obj.x\n      assert.strictEqual(x2, 2)\n      assert.strictEqual(count, 1)\n    })\n\n    it('should set a lazy property', function () {\n      const obj = {}\n      lazy(obj, 'x', function () {\n        return 2\n      })\n\n      obj.x = 3\n      const x = obj.x\n      assert.strictEqual(x, 3)\n    })\n  })\n\n  describe('traverse', function () {\n    it('should traverse an existing path into an object', function () {\n      const a = {}\n      const b = { a: a }\n      const c = { b: b }\n\n      assert.strictEqual(traverse(c), c)\n      assert.strictEqual(traverse(c, ''), c)\n      assert.strictEqual(traverse(c, 'b'), b)\n      assert.strictEqual(traverse(c, 'b.a'), a)\n      assert.strictEqual(traverse(c, ['b', 'a']), a)\n    })\n\n    it('should append missing piece of a path', function () {\n      const a = {}\n      const b = { a: a }\n      const c = { b: b }\n\n      assert.strictEqual(traverse(c), c)\n      assert.strictEqual(traverse(c, ''), c)\n      assert.strictEqual(traverse(c, 'b'), b)\n      assert.strictEqual(traverse(c, 'b.a'), a)\n      assert.strictEqual(traverse(c, 'b.d'), b.d)\n      assert.strictEqual(traverse(c, 'b.e.f'), b.e.f)\n    })\n  })\n\n  describe('isFactory', function () {\n    it('should test whether an object is a factory', function () {\n      assert.strictEqual(isLegacyFactory({}), false)\n      assert.strictEqual(isLegacyFactory({ foo: true }), false)\n      assert.strictEqual(isLegacyFactory({ name: 'foo' }), false)\n      assert.strictEqual(isLegacyFactory({ name: 'foo', factory: 'bar' }), false)\n      assert.strictEqual(isLegacyFactory({ name: 2, factory: function () {} }), true)\n      assert.strictEqual(isLegacyFactory({ factory: function () {} }), true)\n\n      assert.strictEqual(isLegacyFactory({ name: 'foo', factory: function () {} }), true)\n      assert.strictEqual(isLegacyFactory({ name: 'foo', factory: function () {}, foo: 'bar' }), true)\n    })\n  })\n\n  describe('get', function () {\n    it('should get nested properties from an object', () => {\n      const object = {\n        a: 2,\n        b: {\n          c: 3,\n          e: null\n        }\n      }\n\n      assert.strictEqual(get(object, ''), undefined)\n      assert.strictEqual(get(object, []), object)\n      assert.strictEqual(get(object, 'a'), 2)\n      assert.strictEqual(get(object, 'b.c'), 3)\n      assert.strictEqual(get(object, ['b', 'c']), 3)\n      assert.strictEqual(get(object, 'b.e'), null)\n      assert.strictEqual(get(object, 'a.foo'), undefined)\n    })\n  })\n\n  describe('set', function () {\n    it('should set a nested property in an object', () => {\n      assert.deepStrictEqual(set({}, [], 2), {})\n      assert.deepStrictEqual(set({}, 'a', 2), { a: 2 })\n      assert.deepStrictEqual(set({ a: 2 }, 'b.c', 3), { a: 2, b: { c: 3 } })\n      assert.deepStrictEqual(set({ a: 2 }, ['b', 'c'], 3), { a: 2, b: { c: 3 } })\n    })\n  })\n\n  describe('pick', function () {\n    it('should pick the selected properties', () => {\n      const object = { a: 1, b: 2, c: 3 }\n      assert.deepStrictEqual(pick(object, ['a', 'c', 'd']), { a: 1, c: 3 })\n    })\n\n    it('should pick nested properties', () => {\n      const object = {\n        a: 1,\n        b: {\n          c: 2,\n          d: 3\n        }\n      }\n\n      assert.deepStrictEqual(pick(object, ['a']), { a: 1 })\n      assert.deepStrictEqual(pick(object, ['a', 'b.c']), { a: 1, b: { c: 2 } })\n      assert.deepStrictEqual(pick(object, ['a', ['b', 'c']]), { a: 1, b: { c: 2 } })\n      assert.deepStrictEqual(pick(object, ['a', 'b.c', 'foo', 'b.foo']), { a: 1, b: { c: 2 } })\n    })\n\n    it('should pick and transform nested properties', () => {\n      const object = {\n        a: 1,\n        b: {\n          c: 2,\n          d: 3\n        }\n      }\n\n      function transform (value, key) {\n        return `[${key}:${value}]`\n      }\n\n      assert.deepStrictEqual(pick(object, ['a', 'b.c'], transform), {\n        a: '[a:1]',\n        b: {\n          c: '[b.c:2]'\n        }\n      })\n    })\n  })\n\n  describe('deepFlatten', function () {\n    it('should flatten nested object properties', () => {\n      assert.deepStrictEqual(deepFlatten({\n        obj: { a: 2, b: 3 },\n        c: 4,\n        foo: { bar: { d: 5 } }\n      }), { a: 2, b: 3, c: 4, d: 5 })\n    })\n\n    it('should merge duplicate values when flatting nested object properties', () => {\n      assert.deepStrictEqual(deepFlatten({\n        obj: { a: 2 },\n        foo: { bar: { a: 3 } }\n      }), { a: 3 })\n    })\n  })\n})\n"], "fixing_code": ["# History\n\n# not yet published, version 7.5.1\n\n- Fix object pollution vulnerability in `math.config`. Thanks Snyk.\n\n\n# 2020-10-07, version 7.5.0\n\n- Function `pickRandom` now allows randomly picking elements from matrices \n  with 2 or more dimensions instead of only from a vector, see #1974.\n  Thanks @KonradLinkowski.\n\n\n# 2020-10-07, version 7.4.0\n\n- Implemented support for passing a precision in functions `ceil`, `floor`, \n  and `fix`, similar to `round`, see #1967, #1901. Thanks @rnd-debug.\n- Implemented function `rotationMatrix`, see #1160, #1984. Thanks @rnd-debug.\n- Implement a clear error message when using `sqrtm` with a matrix having \n  more than two dimensions. Thanks @KonradLinkowski.\n- Update dependency `decimal.js` to `10.2.1`.\n\n\n# 2020-09-26, version 7.3.0\n\n- Implemented functions `usolveAll` and `lsolveAll`, see #1916. Thanks @m93a.\n- Implemented support for units in functions `std` and `variance`, see #1950. \n  Thanks @rnd-debug.\n- Implemented support for binary, octal, and hexadecimal notation in the \n  expression parser, and implemented functions `bin`, `oct`, and `hex` for \n  formatting. Thanks @clnhlzmn.\n- Fix #1964: inconsistent calculation of negative dividend modulo for \n  `BigNumber` and `Fraction`. Thanks @ovk.\n\n\n# 2020-08-24, version 7.2.0\n\n- Implemented new function `diff`, see #1634, #1920. Thanks @Veeloxfire. \n- Implemented support for norm 2 for matrices in function `norm`. \n  Thanks @rnd-debug. \n\n\n# 2020-07-13, version 7.1.0\n\n- Implement support for recursion (self-referencing) of typed-functions, \n  new in `typed-function@2.0.0`. This fixes #1885: functions which where \n  extended with a new data type did not always work. Thanks @nickewing.\n- Fix #1899: documentation on expression trees still using old namespace \n  `math.expression.node.*` instead of `math.*`.\n\n\n# 2020-06-24, version 7.0.2\n\n- Fix #1882: have `DenseMatrix.resize` and `SparseMatrix.resize` accept \n  `DenseMatrix` and `SparseMatrix` as inputs too, not only `Array`.\n- Fix functions `sum`, `prod`, `min`, and `max` not throwing a conversion error\n  when passing a single string, like `sum(\"abc\")`.\n\n\n# 2020-05-30, version 7.0.1\n\n- Fix #1844: clarify the documentation of function `eigs`. Thanks @Lazersmoke.\n- Fix #1855: Fix error in the documentation for `math.nthRoots(x)`.  \n- Fix #1856: make the library robust against Object prototype pollution.\n\n\n# 2020-05-07, version 7.0.0\n\nBreaking changes:\n\n- Improvements in calculation of the `dot` product of complex values. \n  The first argument is now conjugated. See #1761. Thanks @m93a.  \n- Dropped official support for Node.js v8 which has reached end of life.\n- Removed all deprecation warnings introduced in v6. \n  To upgrade smoothly from v5 to v7 or higher, upgrade to v6 first\n  and resolve all deprecation warnings.\n\n\n# 2020-05-04, version 6.6.5\n\n- Fix #1834: value `Infinity` cannot be serialized and deserialized. \n  This is solved now with a new `math.replacer` function used as \n  `JSON.stringify(value, math.replacer)`.\n- Fix #1842: value `Infinity` not turned into the latex symbol `\\\\infty`.\n\n\n# 2020-04-15, version 6.6.4\n\n- Fix published files containing Windows line endings (CRLF instead of LF).  \n\n\n# 2020-04-10, version 6.6.3\n\n- Fix #1813: bug in engineering notation for numbers of function `format`,\n  sometimes resulting in needless trailing zeros.\n- Fix #1808: methods `.toNumber()` and `.toNumeric()` not working on a \n  unitless unit.\n- Fix #1645: not being able to use named operators `mod`, `and`, `not`, `or`,\n  `xor`, `to`, `in` as object keys. Thanks @Veeloxfire.\n- Fix `eigs` not using `config.epsilon`.\n\n\n# 2020-03-29, version 6.6.2\n\n- Fix #1789: Function `eigs` not calculating with BigNumber precision \n  when input contains BigNumbers.\n- Run the build script during npm `prepare`, so you can use the library\n  directly when installing directly from git. See #1751. Thanks @cinderblock.\n\n\n# 2020-02-26, version 6.6.1\n\n- Fix #1725: simplify `a/(b/c)`. Thanks @dbramwell.\n- Fix examples in documentation of `row` and `column`.\n\n\n# 2020-02-01, version 6.6.0\n\n- Implemented function `eigs`, see #1705, #542 #1175. Thanks @arkajitmandal.\n- Fixed #1727: validate matrix size when creating a `DenseMatrix` using\n  `fromJSON`.\n- Fixed `DenseMatrix.map` copying the size and datatype from the original\n  matrix instead of checking the returned dimensions and type of the callback.\n- Add a caret to dependencies (like) `^1.2.3`) to allow downstream updates\n  without having to await a new release of mathjs.\n\n\n# 2020-01-08, version 6.5.0\n\n- Implemented `baseName` option for `createUnit`, see #1707.\n  Thanks @ericman314.\n\n\n# 2020-01-06, version 6.4.0\n\n- Extended function `dimension` with support for n-dimensional points.\n  Thanks @Veeloxfire.\n\n\n# 2019-12-31, version 6.3.0\n\n- Improved performance of `factorial` for `BigNumber` up to a factor two,\n  see #1687. Thanks @kmdrGroch.\n\n\n# 2019-11-20, version 6.2.5\n\n- Fixed `IndexNode` using a hardcoded, one-based implementation of `index`,\n  making it impossible to instantiate a zero-based version of the expression\n  parser. See #782.\n\n\n# 2019-11-20, version 6.2.4\n\n- Fixed #1669: function 'qr' threw an error if the pivot was zero,\n  thanks @kevinkelleher12 and @harrysarson.\n- Resolves #942: remove misleading assert in 'qr'. Thanks @harrysarson.\n- Work around a bug in complex.js where `sign(0)` returns complex NaN.\n  Thanks @harrysarson.\n\n\n# 2019-10-06, version 6.2.3\n\n- Fixed #1640: function `mean` not working for units. Thanks @clintonc.\n- Fixed #1639: function `min` listed twice in the \"See also\" section of the\n  embedded docs of function `std`.\n- Improved performance of `isPrime`, see #1641. Thanks @arguiot.\n\n\n# 2019-09-23, version 6.2.2\n\n- Fixed methods `map` and `clone` not copying the `dotNotation` property of\n  `IndexNode`. Thanks @rianmcguire.\n- Fixed a typo in the documentation of `toHTML`. Thanks @maytanthegeek.\n- Fixed #1615: error in the docs of `isNumeric`.\n- Fixed #1628: Cannot call methods on empty strings or numbers with value `0`.\n\n\n# 2019-08-31, version 6.2.1\n\n- Fixed #1606: function `format` not working for expressions.\n\n\n# 2019-08-28, version 6.2.0\n\n- Improved performance of `combinationsWithRep`. Thanks @waseemyusuf.\n- Add unit aliases `bit` and `byte`.\n- Fix docs referring to `bit` and `byte` instead of `bits` and `bytes`.\n- Updated dependency `typed-function@1.1.1`.\n\n\n# 2019-08-17, version 6.1.0\n\n- Implemented function `combinationsWithRep` (see #1329). Thanks @waseemyusuf.\n\n\n# 2019-08-05, version 6.0.4\n\n- Fixed #1554, #1565: ES Modules where not transpiled to ES5, giving issues on\n  old browsers. Thanks @mockdeep for helping to find a solution.\n\n\n# 2019-07-07, version 6.0.3\n\n- Add `unpkg` and `jsdelivr` fields in package.json pointing to UMD build.\n  Thanks @tmcw.\n- Fix #1550: nested user defined function not receiving variables of an\n  outer user defined function.\n\n\n# 2019-06-11, version 6.0.2\n\n- Fix not being able to set configuration after disabling function `import`\n  (regression since v6.0.0).\n\n\n# 2019-06-09, version 6.0.1\n\n- Fix function reference not published in npm library.\n- Fix function `evaluate` and `parse` missing in generated docs.\n\n\n# 2019-06-08, version 6.0.0\n\n!!! BE CAREFUL: BREAKING CHANGES !!!\n\n### Most notable changes\n\n1.  Full support for **ES modules**. Support for tree-shaking out of the box.\n\n    Load all functions:\n\n    ```js\n    import * as math from 'mathjs'\n    ```\n\n    Use a few functions:\n\n    ```js\n    import { add, multiply } from 'mathjs'\n    ```\n\n    Load all functions with custom configuration:\n\n    ```js\n    import { create, all } from 'mathjs'\n    const config = { number: 'BigNumber' }\n    const math = create(all, config)\n    ```\n\n    Load a few functions with custom configuration:\n\n    ```js\n    import { create, addDependencies, multiplyDependencies } from 'mathjs'\n    const config = { number: 'BigNumber' }\n    const { add, multiply } = create({\n      addDependencies,\n      multiplyDependencies\n    }, config)\n    ```\n\n2.  Support for **lightweight, number-only** implementations of all functions:\n\n    ```\n    import { add, multiply } from 'mathjs/number'\n    ```\n\n3.  New **dependency injection** solution used under the hood.\n\n\n### Breaking changes\n\n- Node 6 is no longer supported.\n\n- Functions `config` and `import` are not available anymore in the global\n  context:\n\n  ```js\n  // v5\n  import * as mathjs from 'mathjs'\n  mathjs.config(...) // error in v6.0.0\n  mathjs.import(...) // error in v6.0.0\n  ```\n\n  Instead, create your own mathjs instance and pass config and imports\n  there:\n\n  ```js\n  // v6\n  import { create, all } from 'mathjs'\n  const config = { number: 'BigNumber' }\n  const mathjs = create(all, config)\n  mathjs.import(...)\n  ```\n\n- Renamed function `typeof` to `typeOf`, `var` to `variance`,\n  and `eval` to `evaluate`. (the old function names are reserved keywords\n  which can not be used as a variable name).\n- Deprecated the `Matrix.storage` function. Use `math.matrix` instead to create\n  a matrix.\n- Deprecated function `math.expression.parse`, use `math.parse` instead.\n  Was used before for example to customize supported characters by replacing\n  `math.parse.isAlpha`.\n- Moved all classes like `math.type.Unit` and `math.expression.Parser` to\n  `math.Unit` and `math.Parser` respectively.\n- Fixed #1428: transform iterating over replaced nodes. New behavior\n  is that it stops iterating when a node is replaced.\n- Dropped support for renaming factory functions when importing them.\n- Dropped fake BigNumber support of function `erf`.\n- Removed all index.js files used to load specific functions instead of all, like:\n\n  ```\n  // v5\n  // ... set up empty instance of mathjs, then load a set of functions:\n  math.import(require('mathjs/lib/function/arithmetic'))\n  ```\n\n  Individual functions are now loaded simply like:\n\n  ```js\n  // v6\n  import { add, multiply } from 'mathjs'\n  ```\n\n  To set a specific configuration on the functions:\n\n  ```js\n  // v6\n  import { create, addDependencies, multiplyDependencies } from 'mathjs'\n  const config = { number: 'BigNumber' }\n  const math = create({ addDependencies, multiplyDependencies }, config)\n  ```\n\n  See example `advanced/custom_loading.js`.\n\n- Updated the values of all physical units to their latest official values.\n  See #1529. Thanks @ericman314.\n\n### Non breaking changes\n\n- Implemented units `t`, `tonne`, `bel`, `decibel`, `dB`, and prefixes\n  for `candela`. Thanks @mcvladthegoat.\n- Fixed `epsilon` setting being applied globally to Complex numbers.\n- Fix `math.simplify('add(2, 3)')` throwing an error.\n- Fix #1530: number formatting first applied `lowerExp` and `upperExp`\n  and after that rounded the value instead of the other way around.\n- Fix #1473: remove `'use strict'` in every file, not needed anymore.\n\n\n# 2019-05-18, version 5.10.3\n\n- Fixed dependency `del` being a dependency instead of devDependency.\n\n\n# 2019-05-18, version 5.10.2\n\n- Fix #1515, #1516, #1517: broken package due to a naming conflict in\n  the build folder of a util file `typeOf.js` and `typeof.js`.\n  Solved by properly cleaning all build folders before building.\n\n\n# 2019-05-17, version 5.10.1\n\n- Fix #1512: format using notation `engineering` can give wrong results\n  when the value has less significant digits than the number of digits in\n  the output.\n\n\n# 2019-05-08, version 5.10.0\n\n- Fix `lib/header.js` not having filled in date and version. Thanks @kevjin.\n- Upgraded dependency `decimal.js@10.2.0`, fixing an issue on node.js 12.\n\n\n# 2019-04-08, version 5.9.0\n\n- Implemented functions `row` and `column` (see #1413). Thanks @SzechuanSage.\n- Fixed #1459: `engineering` notation of function `format` not available\n  for `BigNumber`.\n- Fixed #1465: `node.toHTML()` not correct for unary operators like\n  `factorial`.\n\n\n# 2019-03-20, version 5.8.0\n\n- Implemented new function `apply`. Thanks @bnlcas.\n- Implemented passing an optional `dimension` argument to `std` and `var`.\n  Thanks @bnlcas.\n\n\n# 2019-03-10, version 5.7.0\n\n- Implemented support for `pow()` in `derivative`. Thanks @sam-19.\n- Gracefully handle round-off errors in fix, ceil, floor, and range\n  (Fixes #1429, see also #1434, #1432). Thanks @ericman314.\n\n\n# 2019-03-02, version 5.6.0\n\n- Upgrade decimal.js to v10.1.1 (#1421).\n- Fixed #1418: missing whitespace when stringifying an expression\n  containing \"not\".\n\n\n# 2019-02-20, version 5.5.0\n\n- Fixed #1401: methods `map` and `forEach` of `SparseMatrix` not working\n  correctly when indexes are unordered.\n- Fixed #1404: inconsistent rounding of negative numbers.\n- Upgrade tiny-emitter to v2.1.0 (#1397).\n\n\n# 2019-01-25, version 5.4.2\n\n- Fixed `math.format` not working for BigNumbers with a precision above\n  1025 digits (see #1385). Thanks @ericman314.\n- Fixed incorrect LaTeX output of `RelationalNode`. Thanks @rianmcguire.\n- Fixed a bug the methods `map`, `forEach`, `traverse`, and `transform`\n  of `FunctionNode`.\n\n\n# 2019-01-10, version 5.4.1\n\n- Fix #1378: negative bignumbers not formatted correctly.\n- Upgrade fraction.js to version 4.0.12 (#1369).\n\n\n# 2018-12-09, version 5.4.0\n\n- Extended sum.js to accept a dimension input to calculate the sum over a\n  specific axis. Thanks @bnlcas.\n- Fix #1328: objects can't be written multi-line. Thanks @GHolk.\n- Remove side effects caused by `Unit.format` and `Unit.toString`,\n  making changes to the unit on execution. Thanks @ericman314.\n\n\n# 2018-12-03, version 5.3.1\n\n- Fixed #1336: Unit.toSI() returning units with prefix like `mm` instead\n  of `m`. Thanks @ericman314.\n\n\n# 2018-11-29, version 5.3.0\n\n- Implemented function `hasNumericValue`. Thanks @Sathish-kumar-Subramani.\n- Fix #1326: non-ascii character in print.js.\n- Fix #1337: `math.format` not working correctly with `{ precision: 0 }`.\n  Thanks @dkenul.\n\n\n# 2018-10-30, version 5.2.3\n\n- Fixed #1293: non-unicode characters in `escape-latex` giving issues in some\n  specific cases. Thanks @dangmai.\n- Fixed incorrect LaTeX output of function `bitNot`, see #1299. Thanks @FSMaxB.\n- Fixed #1304: function `pow` not supporting inputs `pow(Unit, BigNumber)`.\n- Upgraded dependencies (`escape-latex@1.2.0`)\n\n\n# 2018-10-23, version 5.2.2\n\n- Fixed #1286: Fixed unit base recognition and formatting for\n  user-defined units. Thanks @ericman314.\n\n\n# 2018-10-18, version 5.2.1\n\n- Fixed unit `rod` being defined as `5.02921` instead of `5.0292`.\n  Thanks @ericman314.\n- Upgraded dependencies (`fraction.js@4.0.10`)\n- Upgraded devDependencies (`@babel/core@7.1.2`, `nyc@13.1.0`,\n  `webpack@4.21.0`).\n\n\n# 2018-10-05, version 5.2.0\n\n- Implemented support for chained conditionals like `10 < x <= 50`.\n  Thanks @ericman314.\n- Add an example showing a proof of concept of using `BigInt` in mathjs.\n- Fixed #1269: Bugfix for BigNumber divided by unit. Thanks @ericman314.\n- Fixed #1240: allow units having just a value and no unit.\n  Thanks @ericman314.\n\n\n## 2018-09-09, version 5.1.2\n\n- Fixed a typo in the docs of `parse`. Thanks @mathiasvr.\n- Fixed #1222: a typo in the docs of `subset`.\n- Fixed #1236: `quantileSeq` has inconsistent return.\n- Fixed #1237: norm sometimes returning a complex number instead of\n  number.\n- Upgraded dependencies (`fraction.js@4.0.9`)\n- Upgraded devDependencies (`babel@7`, `karma-webpack@3.0.4`,\n  `nyc@13.0.1`, `standard@12.0.0`, `uglify-js@3.4.9`, `webpack@4.17.2`)\n\n\n## 2018-08-21, version 5.1.1\n\n- Function `isNumeric` now recognizes more types.\n- Fixed #1214: functions `sqrt`, `max`, `min`, `var`, `std`, `mode`, `mad`,\n  `median`, and `partitionSelect` not neatly handling `NaN` inputs. In some\n  cases (`median`, `mad`, and `partitionSelect`) this resulted in an infinite\n  loop.\n- Upgraded dependencies (`escape-latex@1.1.1`)\n- Upgraded devDependencies (`webpack@4.17.0`)\n\n\n## 2018-08-12, version 5.1.0\n\n- Implemented support for strings enclosed in single quotes.\n  Thanks @jean-emmanuel.\n- Implemented function `getMatrixDataType`. Thanks @JasonShin.\n- Implemented new `options` argument in `simplify`. Thanks @paulobuchsbaum.\n- Bug fixes in `rationalize`, see #1173. Thanks @paulobuchsbaum.\n\n\n## 2018-07-22, version 5.0.4\n\n- Strongly improved the performance of functions `factorial` for numbers.\n  This improves performance of functions `gamma`, `permutation`, and\n  `combination` too. See #1170. Thanks @honeybar.\n- Strongly improved the performance of function `reshape`, thanks to a\n  friend of @honeybar.\n\n\n## 2018-07-14, version 5.0.3\n\n- Fixed many functions (for example `add` and `subtract`) not working\n  with matrices having a `datatype` defined.\n- Fixed #1147: bug in `format` with `engineering` notation in outputting\n  the correct number of significant figures. Thanks @ericman314.\n- Fixed #1162: transform functions not being cleaned up when overriding\n  it by importing a factory function with the same name.\n- Fixed broken links in the documentation. Thanks @stropitek.\n- Refactored the code of `parse` into a functional approach.\n  Thanks @harrysarson.\n- Changed `decimal.js` import to ES6. Thanks @weinshel.\n\n\n## 2018-07-07, version 5.0.2\n\n- Fixed #1136: rocket trajectory example broken (since v4.0.0).\n- Fixed #1137: `simplify` unnecessarily replacing implicit multiplication with\n  explicit multiplication.\n- Fixed #1146: `rationalize` throwing exceptions for some input with decimals.\n  Thanks @maruta.\n- Fixed #1088: function arguments not being passed to `rawArgs` functions.\n- Fixed advanced example `add_new_datatypes`.\n- Fixed mathjs core constants not working without complex numbers.\n  Thanks @ChristopherChudzicki.\n- Fixed a broken link in the documentation on units. Thanks @stropitek.\n- Upgraded dependencies (`typed-function@1.0.4`, `complex.js@2.0.11`).\n- Upgraded devDependencies (`babel-loader@7.1.5 `, `uglify-js@3.4.3`,\n  `expr-eval@1.2.2`, `webpack@4.15.1`).\n\n\n## 2018-07-01, version 5.0.1\n\n- Improved error messaging when converting units. Thanks @gap777.\n- Upgraded devDependencies (`kerma`, `uglify-js`, `webpack`).\n\n\n## 2018-06-16, version 5.0.0\n\n!!! BE CAREFUL: BREAKING CHANGES !!!\n\n- Implemented complex conjugate transpose `math.ctranspose`. See #1097.\n  Thanks @jackschmidt.\n- Changed the behavior of `A'` (transpose) in the expression parser to\n  calculate the complex conjugate transpose. See #1097. Thanks @jackschmidt.\n- Added support for `complex({abs: 1, arg: 1})`, and improved the docs on\n  complex numbers. Thanks @ssaket.\n- Renamed `eye` to `identity`, see #1054.\n- Math.js code can now contain ES6. The ES6 source code is moved from `lib`\n  to `src`, and `lib` now contains the compiled ES5 code.\n- Upgraded dependencies:\n  - `decimal.js` from `9.0.1` to `10.0.1`\n  - Upgraded dev dependencies\n- Changed code style to https://standardjs.com/, run linter on `npm test`.\n  See #1110.\n- Dropped support for bower. Use npm or an other package manages instead.\n- Dropped support for (non-primitive) instances of `Number`, `Boolean`, and\n  `String` from functions `clone` and `typeof`.\n- Dropped official support for IE9 (probably still works, but it's not tested).\n- Fixed #851: More consistent behavior of sqrt, nthRoot, and pow.\n  Thanks @dakotablair.\n- Fixed #1103: Calling `toTex` on node that contains `derivative` causing\n  an exception. Thanks @joelhoover.\n\n\n## 2018-06-02, version 4.4.2\n\n- Drastically improved the performance of `det`. Thanks @ericman314.\n- Fixed #1065, #1121: Fixed wrong documentation of function\n  `compareNatural` and clarified the behavior for strings.\n- Fixed #1122 a regression in function `inv` (since `v4.4.1`).\n  Thanks @ericman314.\n\n\n## 2018-05-29, version 4.4.1\n\n- Fixed #1109: a bug in `inv` when dealing with values close to zero.\n  Thanks @ericman314.\n\n\n## 2018-05-28, version 4.4.0\n\n- Implemented functions `equalText` and `compareText`. See #1085.\n\n\n## 2018-05-21, version 4.3.0\n\n- Implemented matrix exponential `math.expm`. Thanks @ericman314.\n- Fixed #1101: math.js bundle not working when loading in a WebWorker.\n- Upgraded dependencies\n  - `complex.js` from `v2.0.2` to `v2.0.10`.\n  - `fraction.js` from `v4.0.4` to `v4.0.8`.\n- Upgraded devDependencies (`mocha`, `uglify-js`, `webpack`).\n\n\n## 2018-05-05, version 4.2.2\n\n- Fixed calculating the Frobenius norm of complex matrices correctly,\n  see #1098. Thanks @jackschmidt.\n- Fixed #1076: cannot use mathjs in React VR by updating to\n  `escape-latex@1.0.3`.\n\n\n## 2018-05-02, version 4.2.1\n\n- Fixed `dist/math.js` being minified.\n\n\n## 2018-05-02, version 4.2.0\n\n- Implemented function `math.sqrtm`. Thanks @ferrolho.\n- Implemented functions `math.log2`, `math.log1p`, and `math.expm1`.\n  Thanks @BigFav and @harrysarson.\n- Fixed some unit tests broken on nodejs v10.\n- Upgraded development dependencies.\n- Dropped integration testing on nodejs v4.\n\n\n## 2018-04-18, version 4.1.2\n\n- Fixed #1082: implemented support for unit plurals `decades`, `centuries`,\n  and `millennia`.\n- Fixed #1083: units `decade` and `watt` having a wrong name when stringifying.\n  Thanks @ericman314.\n\n\n## 2018-04-11, version 4.1.1\n\n- Fixed #1063: derivative not working when resolving a variable with unary\n  minus like `math.derivative('-x', 'x')`.\n\n\n## 2018-04-08, version 4.1.0\n\n- Extended function `math.print` with support for arrays and matrices.\n  Thanks @jean-emmanuel.\n- Fixed #1077: Serialization/deserialization to JSON with reviver not being\n  supported by nodes.\n- Fixed #1016: Extended `math.typeof` with support for `ResultSet` and nodes\n  like `SymbolNode`.\n- Fixed #1072: Added support for long and short prefixes for the unit `bar`\n  (i.e. `millibar` and `mbar`).\n\n\n## 2018-03-17, version 4.0.1\n\n- Fixed #1062: mathjs not working on ES5 browsers like IE11 and Safari 9.3.\n- Fixed #1061: `math.unit` not accepting input like `1/s`.\n\n\n## 2018-02-25, version 4.0.0\n\n!!! BE CAREFUL: BREAKING CHANGES !!!\n\nBreaking changes (see also #682):\n\n- **New expression compiler**\n\n    The compiler of the expression parser is replaced with one that doesn't use\n    `eval` internally. See #1019. This means:\n\n    - a slightly improved performance on most browsers.\n    - less risk of security exploits.\n    - the code of the new compiler is easier to understand, maintain, and debug.\n\n    Breaking change here: When using custom nodes in the expression parser,\n    the syntax of `_compile` has changed. This is an undocumented feature though.\n\n- **Parsed expressions**\n\n    - The class `ConstantNode` is changed such that it just holds a value\n      instead of holding a stringified value and it's type.\n      `ConstantNode(valueStr, valueType`) is now `ConstantNode(value)`\n      Stringification uses `math.format`, which may result in differently\n      formatted numeric output.\n\n    - The constants `true`, `false`, `null`, `undefined`, `NaN`, `Infinity`,\n      and `uninitialized` are now parsed as ConstantNodes instead of\n      SymbolNodes in the expression parser. See #833.\n\n- **Implicit multiplication**\n\n    - Changed the behavior of implicit multiplication to have higher\n      precedence than explicit multiplication and division, except in\n      a number of specific cases. This gives a more natural behavior\n      for implicit multiplications. For example `24h / 6h` now returns `4`,\n      whilst `1/2 kg` evaluates to `0.5 kg`. Thanks @ericman314. See: #792.\n      Detailed documentation: https://github.com/josdejong/mathjs/blob/v4/docs/expressions/syntax.md#implicit-multiplication.\n\n    - Immediately invoking a function returned by a function like `partialAdd(2)(3)`\n      is no longer supported, instead these expressions are evaluated as\n      an implicit multiplication `partialAdd(2) * (3)`. See #1035.\n\n- **String formatting**\n\n    - In function `math.format`, the options `{exponential: {lower: number, upper: number}}`\n      (where `lower` and `upper` are values) are replaced with `{lowerExp: number, upperExp: number}`\n      (where `lowerExp` and `upperExp` are exponents). See #676. For example:\n      ```js\n      math.format(2000, {exponential: {lower: 1e-2, upper: 1e2}})\n      ```\n      is now:\n      ```js\n      math.format(2000, {lowerExp: -2, upperExp: 2})\n      ```\n\n    - In function `math.format`, the option `notation: 'fixed'` no longer rounds to\n      zero digits  when no precision is specified: it leaves the digits as is.\n      See #676.\n\n- **String comparison**\n\n    Changed the behavior of relational functions (`compare`, `equal`,\n    `equalScalar`, `larger`, `largerEq`, `smaller`, `smallerEq`, `unequal`)\n    to compare strings by their numeric value they contain instead of\n    alphabetically. This also impacts functions `deepEqual`, `sort`, `min`,\n    `max`, `median`, and `partitionSelect`. Use `compareNatural` if you\n    need to sort an array with text. See #680.\n\n- **Angle units**\n\n    Changed `rad`, `deg`, and `grad` to have short prefixes,\n    and introduced `radian`, `degree`, and `gradian` and their plurals\n    having long prefixes. See #749.\n\n- **Null**\n\n    - `null` is no longer implicitly casted to a number `0`, so input like\n      `math.add(2, null)` is no longer supported. See #830, #353.\n\n    - Dropped constant `uninitialized`, which was used to initialize\n      leave new entries undefined when resizing a matrix is removed.\n      Use `undefined` instead to indicate entries that are not explicitly\n      set. See #833.\n\n- **New typed-function library**\n\n    - The `typed-function` library used to check the input types\n      of functions is completely rewritten and doesn't use `eval` under\n      the hood anymore. This means a reduced security risk, and easier\n      to debug code. The API is the same, but error messages may differ\n      a bit. Performance is comparable but may differ in specific\n      use cases and browsers.\n\nNon breaking changes:\n\n- Thanks to the new expression compiler and `typed-function` implementation,\n  mathjs doesn't use JavaScript's `eval` anymore under the hood.\n  This allows using mathjs in environments with security restrictions.\n  See #401.\n- Implemented additional methods `isUnary()` and `isBinary()` on\n  `OperatorNode`. See #1025.\n- Improved error messages for statistical functions.\n- Upgraded devDependencies.\n- Fixed #1014: `derivative` silently dropping additional arguments\n  from operator nodes with more than two arguments.\n\n\n## 2018-02-07, version 3.20.2\n\n- Upgraded to `typed-function@0.10.7` (bug-fix release).\n- Fixed option `implicit` not being copied from an `OperatorNode`\n  when applying function `map`. Thanks @HarrySarson.\n- Fixed #995: spaces and underscores not property being escaped\n  in `toTex()`. Thanks @FSMaxB.\n\n\n## 2018-01-17, version 3.20.1\n\n- Fixed #1018: `simplifyCore` failing in some cases with parentheses.\n  Thanks @firepick1.\n\n\n## 2018-01-14, version 3.20.0\n\n- Implement support for 3 or more arguments for operators `+` and `*` in\n  `derivative`. Thanks @HarrySarson. See #1002.\n- Fixed `simplify` evalution of `simplify` of functions with more than two\n  arguments wrongly: `simplify('f(x, y, z)') evaluated to `f(f(x, y), z)`\n  instead of `f(x, y, z)`. Thanks @joelhoover.\n- Fixed `simplify` throwing an error in some cases when simplifying unknown\n  functions, for example `simplify('f(4)')`. Thanks @joelhoover.\n- Fixed #1013: `simplify` wrongly simplifing some expressions containing unary\n  minus, like `0 - -x`. Thanks @joelhoover.\n- Fixed an error in an example in the documentation of `xor`. Thanks @denisx.\n\n\n## 2018-01-06, version 3.19.0\n\n- Extended functions `distance` and `intersect` with support for BigNumbers.\n  Thanks @ovk.\n- Improvements in function `simplify`: added a rule that allows combining\n  of like terms in embedded quantities. Thanks @joelhoover.\n\n\n## 2017-12-28, version 3.18.1\n\n- Fixed #998: An issue with simplifying an expression containing a subtraction.\n  Thanks @firepick1.\n\n\n## 2017-12-16, version 3.18.0\n\n- Implemented function `rationalize`. Thanks @paulobuchsbaum.\n- Upgraded dependencies:\n  ```\n  decimal.js    7.2.3  \u2192  9.0.1 (no breaking changes affecting mathjs)\n  fraction.js   4.0.2  \u2192  4.0.4\n  tiny-emitter  2.0.0  \u2192  2.0.2\n  ```\n- Upgraded dev dependencies.\n- Fixed #975: a wrong example in the docs of lusolve.\n- Fixed #983: `pickRandom` returning an array instead of single value\n  when input was an array with just one value. Clarified docs.\n- Fixed #969: preven issues with yarn autoclean by renaming an\n  interally used folder \"docs\" to \"embeddedDocs\".\n\n\n## 2017-11-18, version 3.17.0\n\n- Improved `simplify` for nested exponentiations. Thanks @IvanVergiliev.\n- Fixed a security issue in `typed-function` allowing arbitrary code execution\n  in the JavaScript engine by creating a typed function with JavaScript code\n  in the name. Thanks Masato Kinugawa.\n- Fixed a security issue where forbidden properties like constructor could be\n  replaced by using unicode characters when creating an object. No known exploit,\n  but could possibly allow arbitrary code execution. Thanks Masato Kinugawa.\n\n\n## 2017-10-18, version 3.16.5\n\n- Fixed #954: Functions `add` and `multiply` not working when\n  passing three or more arrays or matrices.\n\n\n## 2017-10-01, version 3.16.4\n\n- Fixed #948, #949: function `simplify` returning wrong results or\n  running into an infinite recursive loop. Thanks @ericman314.\n- Fixed many small issues in the embedded docs.  Thanks @Schnark.\n\n\n## 2017-08-28, version 3.16.3\n\n- Fixed #934: Wrong simplification of unary minus. Thanks @firepick1.\n- Fixed #933: function `simplify` reordering operations. Thanks @firepick1.\n- Fixed #930: function `isNaN` returning wrong result for complex\n  numbers having just one of their parts (re/im) being `NaN`.\n- Fixed #929: `FibonacciHeap.isEmpty` returning wrong result.\n\n\n## 2017-08-20, version 3.16.2\n\n- Fixed #924: a regression in `simplify` not accepting the signature\n  `simplify(expr, rules, scope)` anymore. Thanks @firepick1.\n- Fixed missing parenthesis when stringifying expressions containing\n  implicit multiplications (see #922). Thanks @FSMaxB.\n\n\n## 2017-08-12, version 3.16.1\n\n- For security reasons, type checking is now done in a more strict\n  way using functions like `isComplex(x)` instead of duck type checking\n  like `x && x.isComplex === true`.\n- Fixed #915: No access to property \"name\".\n- Fixed #901: Simplify units when calling `unit.toNumeric()`.\n  Thanks @AlexanderBeyn.\n- Fixed `toString` of a parsed expression tree containing an\n  immediately invoked function assignment not being wrapped in\n  parenthesis (for example `(f(x) = x^2)(4)`).\n\n\n## 2017-08-06, version 3.16.0\n\n- Significant performance improvements in `math.simplify`.\n  Thanks @firepick1.\n- Improved API for `math.simplify`, optionally pass a scope with\n  variables which are resolved, see #907. Thanks @firepick1.\n- Fixed #912: math.js didn't work on IE10 anymore (regression\n  since 3.15.0).\n\n\n## 2017-07-29, version 3.15.0\n\n- Added support for the dollar character `$` in symbol names (see #895).\n- Allow objects with prototypes as scope again in the expression parser,\n  this was disabled for security reasons some time ago. See #888, #899.\n  Thanks @ThomasBrierley.\n- Fixed #846: Issues in the functions `map`, `forEach`, and `filter`\n  when used in the expression parser:\n  - Not being able to use a function assignment as inline expression\n    for the callback function.\n  - Not being able to pass an inline expression as callback for `map`\n    and `forEach`.\n  - Index and original array/matrix not passed in `map` and `filter`.\n\n\n## 2017-07-05, version 3.14.2\n\n- Upgraded to `fraction.js@4.0.2`\n- Fixed #891 using BigNumbers not working in browser environments.\n\n\n## 2017-06-30, version 3.14.1\n\n- Reverted to `fraction.js@4.0.0`, there is an issue with `4.0.1`\n  in the browser.\n\n\n## 2017-06-30, version 3.14.0\n\n- Implemented set methods `setCartesian`, `setDifference`,\n  `setDistinct`, `setIntersect`, `setIsSubset`, `setPowerset`,\n  `setSize`. Thanks @Nekomajin42.\n- Implemented method `toHTML` on nodes. Thanks @Nekomajin42.\n- Implemented `compareNatural` and `sort([...], 'natural')`.\n- Upgraded dependencies to the latest versions:\n  - `complex.js@2.0.4`\n  - `decimal.js@7.2.3`\n  - `fraction.js@4.0.1`\n  - `tiny-emitter@2.0.0`\n  - And all devDependencies.\n- Fixed #865: `splitUnit` can now deal with round-off errors.\n  Thanks @ericman314.\n- Fixed #876: incorrect definition for unit `erg`. Thanks @pjhampton.\n- More informative error message when using single quotes instead of\n  double quotes around a string. Thanks @HarrySarson.\n\n\n## 2017-05-27, version 3.13.3\n\n- Fixed a bug in function `intersection` of line and plane.\n  Thanks @viclai.\n- Fixed security vulnerabilities.\n\n\n## 2017-05-26, version 3.13.2\n\n- Disabled function `chain` inside the expression parser for security\n  reasons (it's not needed there anyway).\n- Fixed #856: function `subset` not returning non-primitive scalars\n  from Arrays correctly. (like `math.eval('arr[1]', {arr: [math.bignumber(2)]})`.\n- Fixed #861: physical constants not available in the expression parser.\n\n\n## 2017-05-12, version 3.13.1\n\n- Fixed creating units with an alias not working within the expression\n  parser.\n- Fixed security vulnerabilities. Thanks Sam.\n\n\n## 2017-05-12, version 3.13.0\n\n- Command line application can now evaluate inline expressions\n  like `mathjs 1+2`. Thanks @slavaGanzin.\n- Function `derivative` now supports `abs`. Thanks @tetslee.\n- Function `simplify` now supports BigNumbers. Thanks @tetslee.\n- Prevent against endless loops in `simplify`. Thanks @tetslee.\n- Fixed #813: function `simplify` converting small numbers to inexact\n  Fractions. Thanks @tetslee.\n- Fixed #838: Function `simplify` now supports constants like `e`.\n  Thanks @tetslee.\n\n\n## 2017-05-05, version 3.12.3\n\n- Fixed security vulnerabilities. Thanks Dan and Sam.\n\n\n## 2017-04-30, version 3.12.2\n\n- Added a rocket trajectory optimization example.\n\n\n## 2017-04-24, version 3.12.1\n\n- Fixed #804\n  - Improved handling of powers of `Infinity`. Thanks @HarrySarson.\n  - Fixed wrong formatting of complex NaN.\n- Fixed security vulnerabilities in the expression parser.\n  Thanks Sam and Dan.\n\n\n## 2017-04-17, version 3.12.0\n\n- Implemented QR decomposition, function `math.qr`. Thanks @HarrySarson.\n- Fixed #824: Calling `math.random()` freezes IE and node.js.\n\n\n## 2017-04-08, version 3.11.5\n\n- More security measures in the expression parser.\n  WARNING: the behavior of the expression parser is now more strict,\n  some undocumented features may not work any longer.\n  - Accessing and assigning properties is now only allowed on plain\n    objects, not on classes, arrays, and functions anymore.\n  - Accessing methods is restricted to a set of known, safe methods.\n\n\n## 2017-04-03, version 3.11.4\n\n- Fixed a security vulnerability in the expression parser. Thanks @xfix.\n\n\n## 2017-04-03, version 3.11.3\n\n- Fixed a security vulnerability in the expression parser. Thanks @xfix.\n\n\n## 2017-04-03, version 3.11.2\n\n- Fixed a security vulnerability in the expression parser. Thanks @xfix.\n\n\n## 2017-04-02, version 3.11.1\n\n- Fixed security vulnerabilities in the expression parser.\n  Thanks Joe Vennix and @xfix.\n\n\n## 2017-04-02, version 3.11.0\n\n- Implemented method Unit.toSI() to convert a unit to base SI units.\n  Thanks @ericman314.\n- Fixed #821, #822: security vulnerabilities in the expression parser.\n  Thanks @comex and @xfix.\n\n\n## 2017-03-31, version 3.10.3\n\n- More security fixes related to the ones fixed in `v3.10.2`.\n\n\n## 2017-03-31, version 3.10.2\n\n- Fixed a security vulnerability in the expression parser allowing\n  execution of arbitrary JavaScript. Thanks @CapacitorSet and @denvit.\n\n\n## 2017-03-26, version 3.10.1\n\n- Fixed `xgcd` for negative values. Thanks @litmit.\n- Fixed #807: function transform of existing functions not being removed when\n  overriding such a function.\n\n\n## 2017-03-05, version 3.10.0\n\n- Implemented function `reshape`. Thanks @patgrasso and @ericman314.\n- Implemented configuration option `seedRandom` for deterministic random\n  numbers. Thanks @morsecodist.\n- Small fixes in the docs. Thanks @HarrySarson.\n- Dropped support for component package manager (which became deprecated about\n  one and a half year ago).\n\n\n## 2017-02-22, version 3.9.3\n\n- Fixed #797: issue with production builds of React Native projects.\n- Fixed `math.round` not accepting inputs `NaN`, `Infinity`, `-Infinity`.\n- Upgraded all dependencies.\n\n\n## 2017-02-16, version 3.9.2\n\n- Fixed #795: Parse error in case of a multi-line expression with just comments.\n\n\n## 2017-02-06, version 3.9.1\n\n- Fixed #789: Math.js not supporting conversion of `string` to `BigNumber`,\n  `Fraction`, or `Complex` number.\n- Fixed #790: Expression parser did not pass function arguments of enclosing\n  functions via `scope` to functions having `rawArgs = true`.\n- Small fixes in the docs. Thanks @HarrySarson.\n\n\n## 2017-01-23, version 3.9.0\n\n- Implemented support for algebra: powerful new functions `simplify` and\n  `derivative`. Thanks @ericman314, @tetslee, and @BigFav.\n- Implemented Kronecker Product `kron`. Thanks @adamisntdead.\n- Reverted `FunctionNode` not accepting a string as function name anymore.\n- Fixed #765: `FunctionAssignmentNode.toString()` returning a string\n  incompatible with the function assignment syntax.\n\n\n## 2016-12-15, version 3.8.1\n\n- Implemented function `mad` (median absolute deviation). Thanks @ruhleder.\n- Fixed #762: expression parser failing to invoke a function returned\n  by a function.\n\n\n## 2016-11-18, version 3.8.0\n\n- Functions `add` and `multiply` now accept more than two arguments. See #739.\n- `OperatorNode` now supports more than two arguments. See #739. Thanks @FSMaxB.\n- Implemented a method `Node.cloneDeep` for the expression nodes. See #745.\n- Fixed a bug in `Node.clone()` not cloning implicit multiplication correctly.\n  Thanks @FSMaxB.\n- Fixed #737: Improved algorithm determining the best prefix for units.\n  It will now retain the original unit like `1 cm` when close enough,\n  instead of returning `10 mm`. Thanks @ericman314.\n- Fixed #732: Allow letter-like unicode characters like Ohm `\\u2126`.\n- Fixed #749: Units `rad`, `deg`, and `grad` can now have prefixes like `millirad`.\n- Some fixes in the docs and comments of examples. Thanks @HarrySarson.\n\n\n## 2016-11-05, version 3.7.0\n\n- Implemented method `Node.equals(other)` for all nodes of the expression parser.\n- Implemented BigNumber support in function `arg()`.\n- Command Line Interface loads faster.\n- Implicit conversions between Fractions and BigNumbers throw a neat error now\n  (See #710).\n\n\n## 2016-10-21, version 3.6.0\n\n- Implemented function `erf()`. THanks @patgrasso.\n- Extended function `cross()` to support n-d vectors. Thanks @patgrasso.\n- Extended function `pickRandom` with the option to pick multiple values from\n  an array and give the values weights: `pickRandom(possibles, number, weights)`.\n  Thanks @woylie.\n- Parser now exposes test functions like `isAlpha` which can be replaced in\n  order to adjust the allowed characters in variables names (See #715).\n- Fixed #727: Parser not throwing an error for invalid implicit multiplications\n  like `-2 2` and `2^3 4` (right after the second value of an operator).\n- Fixed #688: Describe allowed variable names in the docs.\n\n\n## 2016-09-21, version 3.5.3\n\n- Some more fixes regarding numbers ending with a decimal mark (like `2.`).\n\n\n## 2016-09-20, version 3.5.2\n\n- Fixed numbers ending with a decimal mark (like `2.`) not being supported by\n  the parser, solved the underlying ambiguity in the parser. See #707, #711.\n\n\n## 2016-09-12, version 3.5.1\n\n- Removed a left over console.log statement. Thanks @eknkc.\n\n\n## 2016-09-07, version 3.5.0\n\n- Comments of expressions are are now stored in the parsed nodes. See #690.\n- Fixed function `print` not accepting an Object with formatting options as\n  third parameter Thanks @ThomasBrierley.\n- Fixed #707: The expression parser no longer accepts numbers ending with a dot\n  like `2.`.\n\n\n## 2016-08-08, version 3.4.1\n\n- Fixed broken bundle files (`dist/math.js`, `dist/math.min.js`).\n- Fixed some layout issues in the function reference docs.\n\n\n## 2016-08-07, version 3.4.0\n\n- Implemented support for custom units using `createUnit`. Thanks @ericman314.\n- Implemented function `splitUnits`. Thanks @ericman314.\n- Implemented function `isPrime`. Thanks @MathBunny.\n\n\n## 2016-07-05, version 3.3.0\n\n- Implemented function `isNaN`.\n- Function `math.filter` now passes three arguments to the callback function:\n  value, index, and array.\n- Removed the check on the number of arguments from functions defined in the\n  expression parser (see #665).\n- Fixed #665: functions `map`, `forEach`, and `filter` now invoke callbacks\n  which are a typed-function with the correct number of arguments.\n\n\n## 2016-04-26, version 3.2.1\n\n- Fixed #651: unable to perform calculations on \"Unit-less\" units.\n- Fixed matrix.subset mutating the replacement matrix when unsqueezing it.\n\n\n## 2016-04-16, version 3.2.0\n\n- Implemented #644: method `Parser.getAll()` to retrieve all defined variables.\n- Upgraded dependencies (decimal.js@5.0.8, fraction.js@3.3.1,\n  typed-function@0.10.4).\n- Fixed #601: Issue with unnamed typed-functions by upgrading to\n  typed-function v0.10.4.\n- Fixed #636: More strict `toTex` templates, reckon with number of arguments.\n- Fixed #641: Bug in expression parser parsing implicit multiplication with\n  wrong precedence in specific cases.\n- Fixed #645: Added documentation about `engineering` notation of function\n  `math.format`.\n\n\n## 2016-04-03, version 3.1.4\n\n- Using ES6 Math functions like `Math.sinh`, `Math.cbrt`, `Math.sign`, etc when\n  available.\n- Fixed #631: unit aliases `weeks`, `months`, and `years` where missing.\n- Fixed #632: problem with escaped backslashes at the end of strings.\n- Fixed #635: `Node.toString` options where not passed to function arguments.\n- Fixed #629: expression parser throws an error when passing a number with\n  decimal exponent instead of parsing them as implicit multiplication.\n- Fixed #484, #555: inaccuracy of `math.sinh` for values between -1 and 1.\n- Fixed #625: Unit `in` (`inch`) not always working due to ambiguity with\n  the operator `a in b` (alias of `a to b`).\n\n\n## 2016-03-24, version 3.1.3\n\n- Fix broken bundle.\n\n\n## 2016-03-24, version 3.1.2\n\n- Fix broken npm release.\n\n\n## 2016-03-24, version 3.1.1\n\n- Fixed #621: a bug in parsing implicit multiplications like `(2)(3)+4`.\n- Fixed #623: `nthRoot` of zero with a negative root returned `0` instead of\n  `Infinity`.\n- Throw an error when functions `min`, `max`, `mean`, or `median` are invoked\n  with multiple matrices as arguments (see #598).\n\n\n## 2016-03-19, version 3.1.0\n\n- Hide multiplication operator by default when outputting `toTex` and `toString`\n  for implicit multiplications. Implemented and option to output the operator.\n- Implemented unit `kip` and alias `kips`. Thanks @hgupta9.\n- Added support for prefixes for units `mol` and `mole`. Thanks @stu-blair.\n- Restored support for implicit multiplications like `2(3+4)` and `(2+3)(4+5)`.\n- Some improvements in the docs.\n- Added automatic conversions from `boolean` and `null` to `Fraction`,\n  and conversions from `Fraction` to `Complex`.\n\n\n## 2016-03-04, version 3.0.0\n\n### breaking changes\n\n- More restricted support for implicit multiplication in the expression\n  parser: `(...)(...)` is now evaluated as a function invocation,\n  and `[...][...]` as a matrix subset.\n- Matrix multiplication no longer squeezes scalar outputs to a scalar value,\n  but leaves them as they are: a vector or matrix containing a single value.\n  See #529.\n- Assignments in the expression parser now return the assigned value rather\n  than the created or updated object (see #533). Example:\n\n  ```\n  A = eye(3)\n  A[1,1] = 2   # this assignment now returns 2 instead of A\n  ```\n\n- Expression parser now supports objects. This involves a refactoring and\n  extension in expression nodes:\n  - Implemented new node `ObjectNode`.\n  - Refactored `AssignmentNode`, `UpdateNode`, and `IndexNode` are refactored\n    into `AccessorNode`, `AssignmentNode`, and `IndexNode` having a different API.\n- Upgraded the used BigNumber library `decimal.js` to v5. Replaced the\n  trigonometric functions of math.js with those provided in decimal.js v5.\n  This can give slightly different behavior qua round-off errors.\n- Replaced the internal `Complex.js` class with the `complex.js` library\n  created by @infusion.\n- Entries in a matrix (typically numbers, BigNumbers, Units, etc) are now\n  considered immutable, they are no longer copied when performing operations on\n  the entries, improving performance.\n- Implemented nearly equal comparison for relational functions (`equal`,\n  `larger`, `smaller`, etc.) when using BigNumbers.\n- Changed the casing of the configuration options `matrix` (`Array` or `Matrix`)\n  and `number` (`number`, `BigNumber`, `Fraction`) such that they now match\n  the type returned by `math.typeof`. Wrong casing gives a console warning but\n  will still work.\n- Changed the default config value for `epsilon` from `1e-14` to `1e-12`,\n  see #561.\n\n### non-breaking changes\n\n- Extended function `pow` to return the real root for cubic roots of negative\n  numbers. See #525, #482, #567.\n- Implemented support for JSON objects in the expression parser and the\n  function `math.format`.\n- Function `math.fraction` now supports `BigNumber`, and function\n  `math.bignumber` now supports `Fraction`.\n- Expression parser now allows function and/or variable assignments inside\n  accessors and conditionals, like `A[x=2]` or `a > 2 ? b=\"ok\" : b=\"fail\"`.\n- Command line interface:\n  - Outputs the variable name of assignments.\n  - Fixed not rounding BigNumbers to 14 digits like numbers.\n  - Fixed non-working autocompletion of user defined variables.\n- Reorganized and extended docs, added docs on classes and more. Thanks @hgupta9.\n- Added new units `acre`, `hectare`, `torr`, `bar`, `mmHg`, `mmH2O`, `cmH2O`,\n  and added new aliases `acres`, `hectares`, `sqfeet`, `sqyard`, `sqmile`,\n  `sqmiles`, `mmhg`, `mmh2o`, `cmh2o`. Thanks @hgupta9.\n- Fixed a bug in the toString method of an IndexNode.\n- Fixed angle units `deg`, `rad`, `grad`, `cycle`, `arcsec`, and `arcmin` not\n  being defined as BigNumbers when configuring to use BigNumbers.\n\n\n## 2016-02-03, version 2.7.0\n\n- Added more unit aliases for time: `secs`, `mins`, `hr`, `hrs`. See #551.\n- Added support for doing operations with mixed `Fractions` and `BigNumbers`.\n- Fixed #540: `math.intersect()` returning null in some cases. Thanks @void42.\n- Fixed #546: Cannot import BigNumber, Fraction, Matrix, Array.\n  Thanks @brettjurgens.\n\n\n## 2016-01-08, version 2.6.0\n\n- Implemented (complex) units `VA` and `VAR`.\n- Implemented time units for weeks, months, years, decades, centuries, and\n  millennia. Thanks @owenversteeg.\n- Implemented new notation `engineering` in function `math.format`.\n  Thanks @johnmarinelli.\n- Fixed #523: In some circumstances, matrix subset returned a scalar instead\n  of the correct subset.\n- Fixed #536: A bug in an internal method used for sparse matrices.\n\n\n## 2015-12-05, version 2.5.0\n\n- Implemented support for numeric types `Fraction` and `BigNumber` in units.\n- Implemented new method `toNumeric` for units.\n- Implemented new units `arcsec`, `arcsecond`, `arcmin`, `arcminute`.\n  Thanks @devdevdata222.\n- Implemented new unit `Herts` (`Hz`). Thanks @SwamWithTurtles.\n- Fixed #485: Scoping issue with variables both used globally as well as in a\n  function definition.\n- Fixed: Function `number` didn't support `Fraction` as input.\n\n\n## 2015-11-14, version 2.4.2\n\n- Fixed #502: Issue with `format` in some JavaScript engines.\n- Fixed #503: Removed trailing commas and the use of keyword `import` as\n  property, as this gives issues with old JavaScript engines.\n\n\n## 2015-10-29, version 2.4.1\n\n- Fixed #480: `nthRoot` not working on Internet Explorer (up to IE 11).\n- Fixed #490: `nthRoot` returning an error for negative values like\n  `nthRoot(-2, 3)`.\n- Fixed #489: an issue with initializing a sparse matrix without data.\n  Thanks @Retsam.\n- Fixed: #493: function `combinations` did not throw an exception for\n  non-integer values of `k`.\n- Fixed: function `import` did not override typed functions when the option\n  override was set true.\n- Fixed: added functions `math.sparse` and `math.index` to the reference docs,\n  they where missing.\n- Fixed: removed memoization from `gamma` and `factorial` functions, this\n  could blow up memory.\n\n\n## 2015-10-09, version 2.4.0\n\n- Added support in the expression parser for mathematical alphanumeric symbols\n  in the expression parser: unicode range \\u{1D400} to \\u{1D7FF} excluding\n  invalid code points.\n- Extended function `distance` with more signatures. Thanks @kv-kunalvyas.\n- Fixed a bug in functions `sin` and `cos`, which gave wrong results for\n  BigNumber integer values around multiples of tau (i.e. `sin(bignumber(7))`).\n- Fixed value of unit `stone`. Thanks @Esvandiary for finding the error.\n\n\n## 2015-09-19, version 2.3.0\n\n- Implemented function `distance`. Thanks @devanp92.\n- Implemented support for Fractions in function `lcm`. Thanks @infusion.\n- Implemented function `cbrt` for numbers, complex numbers, BigNumbers, Units.\n- Implemented function `hypot`.\n- Upgraded to fraction.js v3.0.0.\n- Fixed #450: issue with non sorted index in sparse matrices.\n- Fixed #463, #322: inconsistent handling of implicit multiplication.\n- Fixed #444: factorial of infinity not returning infinity.\n\n\n## 2015-08-30, version 2.2.0\n\n- Units with powers (like `m^2` and `s^-1`) now output with the best prefix.\n- Implemented support for units to `abs`, `cube`, `sign`, `sqrt`, `square`.\n  Thanks @ericman314.\n- Implemented function `catalan` (Combinatorics). Thanks @devanp92.\n- Improved the `canDefineProperty` check to return false in case of IE8, which\n  has a broken implementation of `defineProperty`. Thanks @golmansax.\n- Fixed function `to` not working in case of a simplified unit.\n- Fixed #437: an issue with row swapping in `lup`, also affecting `lusolve`.\n\n\n## 2015-08-12, version 2.1.1\n\n- Fixed wrong values of the physical constants `speedOfLight`, `molarMassC12`,\n  and `magneticFluxQuantum`. Thanks @ericman314 for finding two of them.\n\n\n## 2015-08-11, version 2.1.0\n\n- Implemented derived units (like `110 km/h in m/s`). Thanks @ericman314.\n- Implemented support for electric units. Thanks @ericman314.\n- Implemented about 50 physical constants like `speedOfLight`, `gravity`, etc.\n- Implemented function `kldivergence` (Kullback-Leibler divergence).\n  Thanks @saromanov.\n- Implemented function `mode`. Thanks @kv-kunalvyas.\n- Added support for unicode characters in the expression parser: greek letters\n  and latin letters with accents. See #265.\n- Internal functions `Unit.parse` and `Complex.parse` now throw an Error\n  instead of returning null when passing invalid input.\n\n\n## 2015-07-29, version 2.0.1\n\n- Fixed operations with mixed fractions and numbers be converted to numbers\n  instead of fractions.\n\n\n## 2015-07-28, version 2.0.0\n\n- Large internal refactoring:\n  - performance improvements.\n  - allows to create custom bundles\n  - functions are composed using `typed-function` and are extensible\n- Implemented support for fractions, powered by the library `fraction.js`.\n- Implemented matrix LU decomposition with partial pivoting and a LU based\n  linear equations solver (functions `lup` and `lusolve`). Thanks @rjbaucells.\n- Implemented a new configuration option `predictable`, which can be set to\n  true in order to ensure predictable function output types.\n- Implemented function `intersect`. Thanks @kv-kunalvyas.\n- Implemented support for adding `toTex` properties to custom functions.\n  Thanks @FSMaxB.\n- Implemented support for complex values to `nthRoot`. Thanks @gangachris.\n- Implemented util functions `isInteger`, `isNegative`, `isNumeric`,\n  `isPositive`, and `isZero`.\n\n### breaking changes\n\n- String input is now converted to numbers by default for all functions.\n- Adding two strings will no longer concatenate them, but will convert the\n  strings to numbers and add them.\n- Function `index` does no longer accept an array `[start, end, step]`, but\n  instead accepts an array with arbitrary index values. It also accepts\n  a `Range` object as input.\n- Function `typeof` no longer returns lower case names, but now returns lower\n  case names for primitives (like `number`, `boolean`, `string`), and\n  upper-camel-case for non-primitives (like `Array`, `Complex`, `Function`).\n- Function `import` no longer supports a module name as argument. Instead,\n  modules can be loaded using require: `math.import(require('module-name'))`.\n- Function `import` has a new option `silent` to ignore errors, and throws\n  errors on duplicates by default.\n- Method `Node.compile()` no longer needs `math` to be passed as argument.\n- Reintroduced method `Node.eval([scope])`.\n- Function `sum` now returns zero when input is an empty array. Thanks @FSMAxB.\n- The size of Arrays is no longer validated. Matrices will validate this on\n  creation.\n\n\n## 2015-07-12, version 1.7.1\n\n- Fixed #397: Inaccuracies in nthRoot for very large values, and wrong results\n  for very small values. (backported from v2)\n- Fixed #405: Parser throws error when defining a function in a multiline\n  expression.\n\n\n## 2015-05-31, version 1.7.0\n\n- Implemented function `quantileSeq` and `partitionSelect`. Thanks @BigFav.\n- Implemented functions `stirlingS2`, `bellNumbers`, `composition`, and\n  `multinomial`. Thanks @devanp92.\n- Improved the performance of `median` (see #373). Thanks @BigFav.\n- Extended the command line interface with a `mode` option to output either\n  the expressions result, string representation, or tex representation.\n  Thanks @FSMaxB.\n- Fixed #309: Function median mutating the input matrix. Thanks @FSMaxB.\n- Fixed `Node.transform` not recursing over replaced parts of the\n  node tree (see #349).\n- Fixed #381: issue in docs of `randomInt`.\n\n\n## 2015-04-22, version 1.6.0\n\n- Improvements in `toTex`. Thanks @FSMaxB.\n- Fixed #328: `abs(0 + 0i)` evaluated to `NaN`.\n- Fixed not being able to override lazy loaded constants.\n\n\n## 2015-04-09, version 1.5.2\n\n- Fixed #313: parsed functions did not handle recursive calls correctly.\n- Fixed #251: binary prefix and SI prefix incorrectly used for byte. Now\n  following SI standards (`1 KiB == 1024 B`, `1 kB == 1000 B`).\n- Performance improvements in parsed functions.\n\n\n## 2015-04-08, version 1.5.1\n\n- Fixed #316: a bug in rounding values when formatting.\n- Fixed #317, #319: a bug in formatting negative values.\n\n\n## 2015-03-28, version 1.5.0\n\n- Added unit `stone` (6.35 kg).\n- Implemented support for sparse matrices. Thanks @rjbaucells.\n- Implemented BigNumber support for function `atan2`. Thanks @BigFav.\n- Implemented support for custom LaTeX representations. Thanks @FSMaxB.\n- Improvements and bug fixes in outputting parentheses in `Node.toString` and\n  `Node.toTex` functions. Thanks @FSMaxB.\n- Fixed #291: function `format` sometimes returning exponential notation when\n  it should return a fixed notation.\n\n\n## 2015-02-28, version 1.4.0\n\n- Implemented trigonometric functions:\n  `acosh`, `acoth`, `acsch`, `asech`, `asinh`, `atanh`, `acot`, `acsc`, `asec`.\n  Thanks @BigFav.\n- Added BigNumber support for functions: `cot`, `csc`, `sec`, `coth`,\n  `csch`, `sech`. Thanks @BigFav.\n- Implemented support for serialization and deserialization of math.js data\n  types.\n- Fixed the calculation of `norm()` and `abs()` for large complex numbers.\n  Thanks @rjbaucells.\n- Fixed #281: improved formatting complex numbers. Round the real or imaginary\n  part to zero when the difference is larger than the configured precision.\n\n\n## 2015-02-09, version 1.3.0\n\n- Implemented BigNumber implementations of most trigonometric functions: `sin`,\n  `cos`, `tan`, `asin`, `acos`, `atan`, `cosh`, `sinh`, `tanh`. Thanks @BigFav.\n- Implemented function `trace`. Thanks @pcorey.\n- Faster loading of BigNumber configuration with a high precision by lazy\n  loading constants like `pi` and `e`.\n- Fixed constants `NaN` and `Infinity` not being BigNumber objects when\n  BigNumbers are configured.\n- Fixed missing parentheses in the `toTex` representation of function\n  `permutations`.\n- Some minor fixes in the docs. Thanks @KenanY.\n\n\n## 2014-12-25, version 1.2.0\n\n- Support for bitwise operations `bitAnd`, `bitNot`, `bitOr`, `bitXor`,\n  `leftShift`, `rightArithShift`, and `rightLogShift`. Thanks @BigFav.\n- Support for boolean operations `and`, `not`, `or`, `xor`. Thanks @BigFav.\n- Support for `gamma` function. Thanks @BigFav.\n- Converting a unit without value will now result in a unit *with* value,\n  i.e. `inch in cm` will return `2.54 cm` instead of `cm`.\n- Improved accuracy of `sinh` and complex `cos` and `sin`. Thanks @pavpanchekha.\n- Renamed function `select` to `chain`. The old function `select` will remain\n  functional until math.js v2.0.\n- Upgraded to decimal.js v4.0.1 (BigNumber library).\n\n\n## 2014-11-22, version 1.1.1\n\n- Fixed Unit divided by Number returning zero.\n- Fixed BigNumber downgrading to Number for a negative base in `pow`.\n- Fixed some typos in error messaging (thanks @andy0130tw) and docs.\n\n\n## 2014-11-15, version 1.1.0\n\n- Implemented functions `dot` (dot product), `cross` (cross product), and\n  `nthRoot`.\n- Officially opened up the API of expression trees:\n  - Documented the API.\n  - Implemented recursive functions `clone`, `map`, `forEach`, `traverse`,\n    `transform`, and `filter` for expression trees.\n  - Parameter `index` in the callbacks of `map` and `forEach` are now cloned\n    for every callback.\n  - Some internal refactoring inside nodes to make the API consistent:\n    - Renamed `params` to `args` and vice versa to make things consistent.\n    - Renamed `Block.nodes` to `Block.blocks`.\n    - `FunctionNode` now has a `name: string` instead of a `symbol: SymbolNode`.\n    - Changed constructor of `RangeNode` to\n      `new RangeNode(start: Node, end: Node [, step: Node])`.\n    - Nodes for a `BlockNode` must now be passed via the constructor instead\n      of via a function `add`.\n- Fixed `2e` giving a syntax error instead of being parsed as `2 * e`.\n\n\n## 2014-09-12, version 1.0.1\n\n- Disabled array notation for ranges in a matrix index in the expression parser\n  (it is confusing and redundant there).\n- Fixed a regression in the build of function subset not being able to return\n  a scalar.\n- Fixed some missing docs and broken links in the docs.\n\n\n## 2014-09-04, version 1.0.0\n\n- Implemented a function `filter(x, test)`.\n- Removed `math.distribution` for now, needs some rethinking.\n- `math.number` can convert units to numbers (requires a second argument)\n- Fixed some precedence issues with the range and conversion operators.\n- Fixed an zero-based issue when getting a matrix subset using an index\n  containing a matrix.\n\n\n## 2014-08-21, version 0.27.0\n\n- Implemented functions `sort(x [, compare])` and `flatten(x)`.\n- Implemented support for `null` in all functions.\n- Implemented support for \"rawArgs\" functions in the expression parser. Raw\n  functions are invoked with unevaluated parameters (nodes).\n- Expressions in the expression parser can now be spread over multiple lines,\n  like '2 +\\n3'.\n- Changed default value of the option `wrap` of function `math.import` to false.\n- Changed the default value for new entries in a resized matrix when to zero.\n  To leave new entries uninitialized, use the new constant `math.uninitialized`\n  as default value.\n- Renamed transform property from `__transform__` to `transform`, and documented\n  the transform feature.\n- Fixed a bug in `math.import` not applying options when passing a module name.\n- A returned matrix subset is now only squeezed when the `index` consists of\n  scalar values, and no longer for ranges resolving into a single value.\n\n\n## 2014-08-03, version 0.26.0\n\n- A new instance of math.js can no longer be created like `math([options])`,\n  to prevent side effects from math being a function instead of an object.\n  Instead, use the function `math.create([options])` to create a new instance.\n- Implemented `BigNumber` support for all constants: `pi`, `tau`, `e`, `phi`,\n  `E`, `LN2`, `LN10`, `LOG2E`, `LOG10E`, `PI`, `SQRT1_2`, and `SQRT2`.\n- Implemented `BigNumber` support for functions `gcd`, `xgcd`, and `lcm`.\n- Fixed function `gxcd` returning an Array when math.js was configured\n  as `{matrix: 'matrix'}`.\n- Multi-line expressions now return a `ResultSet` instead of an `Array`.\n- Implemented transforms (used right now to transform one-based indices to\n  zero-based for expressions).\n- When used inside the expression parser, functions `concat`, `min`, `max`,\n  and `mean` expect an one-based dimension number.\n- Functions `map` and `forEach` invoke the callback with one-based indices\n  when used from within the expression parser.\n- When adding or removing dimensions when resizing a matrix, the dimensions\n  are added/removed from the inner side (right) instead of outer side (left).\n- Improved index out of range errors.\n- Fixed function `concat` not accepting a `BigNumber` for parameter `dim`.\n- Function `squeeze` now squeezes both inner and outer singleton dimensions.\n- Output of getting a matrix subset is not automatically squeezed anymore\n  except for scalar output.\n- Renamed `FunctionNode` to `FunctionAssignmentNode`, and renamed `ParamsNode`\n  to `FunctionNode` for more clarity.\n- Fixed broken auto completion in CLI.\n- Some minor fixes.\n\n\n## 2014-07-01, version 0.25.0\n\n- The library now immediately returns a default instance of mathjs, there is\n  no need to instantiate math.js in a separate step unless one ones to set\n  configuration options:\n\n        // instead of:\n        var mathjs = require('mathjs'),  // load math.js\n            math = mathjs();             // create an instance\n\n        // just do:\n        var math = require('mathjs');\n- Implemented support for implicit multiplication, like `math.eval('2a', {a:3})`\n  and `math.eval('(2+3)(1-3)')`. This changes behavior of matrix indexes as\n  well: an expression like `[...][...]` is not evaluated as taking a subset of\n  the first matrix, but as an implicit multiplication of two matrices.\n- Removed utility function `ifElse`. This function is redundant now the\n  expression parser has a conditional operator `a ? b : c`.\n- Fixed a bug with multiplying a number with a temperature,\n  like `math.eval('10 * celsius')`.\n- Fixed a bug with symbols having value `undefined` not being evaluated.\n\n\n## 2014-06-20, version 0.24.1\n\n- Something went wrong with publishing on npm.\n\n\n## 2014-06-20, version 0.24.0\n\n- Added constant `null`.\n- Functions `equal` and `unequal` support `null` and `undefined` now.\n- Function `typeof` now recognizes regular expressions as well.\n- Objects `Complex`, `Unit`, and `Help` now return their string representation\n  when calling `.valueOf()`.\n- Changed the default number of significant digits for BigNumbers from 20 to 64.\n- Changed the behavior of the conditional operator (a ? b : c) to lazy\n  evaluating.\n- Fixed imported, wrapped functions not accepting `null` and `undefined` as\n  function arguments.\n\n\n## 2014-06-10, version 0.23.0\n\n- Renamed some functions (everything now has a logical, camel case name):\n  - Renamed functions `edivide`, `emultiply`, and `epow` to `dotDivide`,\n    `dotMultiply`, and `dotPow` respectively.\n  - Renamed functions `smallereq` and `largereq` to `smallerEq` and `largerEq`.\n  - Renamed function `unary` to `unaryMinus` and added support for strings.\n- `end` is now a reserved keyword which cannot be used as function or symbol\n  name in the expression parser, and is not allowed in the scope against which\n  an expression is evaluated.\n- Implemented function `unaryPlus` and unary plus operator.\n- Implemented function `deepEqual` for matrix comparisons.\n- Added constant `phi`, the golden ratio (`phi = 1.618...`).\n- Added constant `version`, returning the version number of math.js as string.\n- Added unit `drop` (`gtt`).\n- Fixed not being able to load math.js using AMD/require.js.\n- Changed signature of `math.parse(expr, nodes)` to `math.parse(expr, options)`\n  where `options: {nodes: Object.<String, Node>}`\n- Removed matrix support from conditional function `ifElse`.\n- Removed automatic assignment of expression results to variable `ans`.\n  This functionality can be restored by pre- or postprocessing every evaluation,\n  something like:\n\n        function evalWithAns (expr, scope) {\n          var ans = math.eval(expr, scope);\n          if (scope) {\n            scope.ans = ans;\n          }\n          return ans;\n        }\n\n\n## 2014-05-22, version 0.22.0\n\n- Implemented support to export expressions to LaTeX. Thanks Niels Heisterkamp\n  (@nheisterkamp).\n- Output of matrix multiplication is now consistently squeezed.\n- Added reference documentation in the section /docs/reference.\n- Fixed a bug in multiplying units without value with a number (like `5 * cm`).\n- Fixed a bug in multiplying two matrices containing vectors (worked fine for\n  arrays).\n- Fixed random functions not accepting Matrix as input, and always returning\n  a Matrix as output.\n\n\n## 2014-05-13, version 0.21.1\n\n- Removed `crypto` library from the bundle.\n- Deprecated functions `Parser.parse` and `Parser.compile`. Use\n  `math.parse` and `math.compile` instead.\n- Fixed function `add` not adding strings and matrices element wise.\n- Fixed parser not being able to evaluate an exponent followed by a unary minus\n  like `2^-3`, and a transpose followed by an index like `[3]'[1]`.\n\n\n## 2014-04-24, version 0.21.0\n\n- Implemented trigonometric hyperbolic functions `cosh`, `coth`, `csch`,\n  `sech`, `sinh`, `tanh`. Thanks Rogelio J. Baucells (@rjbaucells).\n- Added property `type` to all expression nodes in an expression tree.\n- Fixed functions `log`, `log10`, `pow`, and `sqrt` not supporting complex\n  results from BigNumber input (like `sqrt(bignumber(-4))`).\n\n\n## 2014-04-16, version 0.20.0\n\n- Switched to module `decimal.js` for BigNumber support, instead of\n  `bignumber.js`.\n- Implemented support for polar coordinates to the `Complex` datatype.\n  Thanks Finn Pauls (@finnp).\n- Implemented BigNumber support for functions `exp`, `log`, and `log10`.\n- Implemented conditional operator `a ? b : c` in expression parser.\n- Improved floating point comparison: the functions now check whether values\n  are nearly equal, against a configured maximum relative difference `epsilon`.\n  Thanks Rogelio J. Baucells (@rjbaucells).\n- Implemented function `norm`. Thanks Rogelio J. Baucells (@rjbaucells).\n- Improved function `ifElse`, is now specified for special data types too.\n- Improved function `det`. Thanks Bryan Cuccioli (@bcuccioli).\n- Implemented `BigNumber` support for functions `det` and `diag`.\n- Added unit alias `lbs` (pound mass).\n- Changed configuration option `decimals` to `precision` (applies to BigNumbers\n  only).\n- Fixed support for element-wise comparisons between a string and a matrix.\n- Fixed: expression parser now trows IndexErrors with one-based indices instead\n  of zero-based.\n- Minor bug fixes.\n\n\n## 2014-03-30, version 0.19.0\n\n- Implemented functions `compare`, `sum`, `prod`, `var`, `std`, `median`.\n- Implemented function `ifElse` Thanks @mtraynham.\n- Minor bug fixes.\n\n\n## 2014-02-15, version 0.18.1\n\n- Added unit `feet`.\n- Implemented function `compile` (shortcut for parsing and then compiling).\n- Improved performance of function `pow` for matrices. Thanks @hamadu.\n- Fixed broken auto completion in the command line interface.\n- Fixed an error in function `combinations` for large numbers, and\n  improved performance of both functions `combinations` and `permutations`.\n\n\n## 2014-01-18, version 0.18.0\n\n- Changed matrix index notation of expression parser from round brackets to\n  square brackets, for example `A[1, 1:3]` instead of `A(1, 1:3)`.\n- Removed need to use the `function` keyword for function assignments in the\n  expression parser, you can define a function now like `f(x) = x^2`.\n- Implemented a compilation step in the expression parser: expressions are\n  compiled into JavaScript, giving much better performance (easily 10x as fast).\n- Renamed unit conversion function and operator `in` to `to`. Operator `in` is\n  still available in the expression parser as an alias for `to`. Added unit\n  `in`, an abbreviation for `inch`. Thanks Elijah Insua (@tmpvar).\n- Added plurals and aliases for units.\n- Implemented an argument `includeEnd` for function `range` (false by default).\n- Ranges in the expression parser now support big numbers.\n- Implemented functions `permutations` and `combinations`.\n  Thanks Daniel Levin (@daniel-levin).\n- Added lower case abbreviation `l` for unit litre.\n\n\n## 2013-12-19, version 0.17.1\n\n- Fixed a bug with negative temperatures.\n- Fixed a bug with prefixes of units squared meter `m2` and cubic meter `m3`.\n\n\n## 2013-12-12, version 0.17.0\n\n- Renamed and flattened configuration settings:\n  - `number.defaultType` is now `number`.\n  - `number.precision` is now `decimals`.\n  - `matrix.defaultType` is now `matrix`.\n- Function `multiply` now consistently outputs a complex number on complex input.\n- Fixed `mod` and `in` not working as function (only as operator).\n- Fixed support for old browsers (IE8 and older), compatible when using es5-shim.\n- Fixed support for Java's ScriptEngine.\n\n\n## 2013-11-28, version 0.16.0\n\n- Implemented BigNumber support for arbitrary precision calculations.\n  Added settings `number.defaultType` and `number.precision` to configure\n  big numbers.\n- Documentation is extended.\n- Removed utility functions `isScalar`, `toScalar`, `isVector`, `toVector`\n  from `Matrix` and `Range`. Use `math.squeeze` and `math.size` instead.\n- Implemented functions `get` and `set` on `Matrix`, for easier and faster\n  retrieval/replacement of elements in a matrix.\n- Implemented function `resize`, handling matrices, scalars, and strings.\n- Functions `ones` and `zeros` now return an empty matrix instead of a\n  number 1 or 0 when no arguments are provided.\n- Implemented functions `min` and `max` for `Range` and `Index`.\n- Resizing matrices now leaves new elements undefined by default instead of\n  filling them with zeros. Function `resize` now has an extra optional\n  parameter `defaultValue`.\n- Range operator `:` in expression parser has been given a higher precedence.\n- Functions don't allow arguments of unknown type anymore.\n- Options be set when constructing a math.js instance or using the new function\n  `config(options`. Options are no longer accessible via `math.options`.\n- Renamed `scientific` notation to `exponential` in function `format`.\n- Function `format` outputs exponential notation with positive exponents now\n  always with `+` sign, so outputs `2.1e+3` instead of `2.1e3`.\n- Fixed function `squeeze` not being able squeeze into a scalar.\n- Some fixes and performance improvements in the `resize` and `subset`\n  functions.\n- Function `size` now adheres to the option `matrix.defaultType` for scalar\n  input.\n- Minor bug fixes.\n\n\n## 2013-10-26, version 0.15.0\n\n- Math.js must be instantiated now, static calls are no longer supported. Usage:\n  - node.js: `var math = require('mathjs')();`\n  - browser: `var math = mathjs();`\n- Implemented support for multiplying vectors with matrices.\n- Improved number formatting:\n  - Function `format` now support various options: precision, different\n    notations (`fixed`, `scientific`, `auto`), and more.\n  - Numbers are no longer rounded to 5 digits by default when formatted.\n  - Implemented a function `format` for `Matrix`, `Complex`, `Unit`, `Range`,\n    and `Selector` to format using options.\n  - Function `format` does only stringify values now, and has a new parameter\n    `precision` to round to a specific number of digits.\n  - Removed option `math.options.precision`,\n    use `math.format(value [, precision])` instead.\n  - Fixed formatting numbers as scientific notation in some cases returning\n    a zero digit left from the decimal point. (like \"0.33333e8\" rather than\n    \"3.3333e7\"). Thanks @husayt.\n- Implemented a function `print` to interpolate values in a template string,\n  this functionality was moved from the function `format`.\n- Implemented statistics function `mean`. Thanks Guillermo Indalecio Fernandez\n  (@guillermobox).\n- Extended and changed `max` and `min` for multi dimensional matrices: they now\n  return the maximum and minimum of the flattened array. An optional second\n  argument `dim` allows to calculate the `max` or `min` for specified dimension.\n- Renamed option `math.options.matrix.default` to\n  `math.options.matrix.defaultType`.\n- Removed support for comparing complex numbers in functions `smaller`,\n  `smallereq`, `larger`, `largereq`. Complex numbers cannot be ordered.\n\n\n## 2013-10-08, version 0.14.0\n\n- Introduced an option `math.options.matrix.default` which can have values\n  `matrix` (default) or `array`. This option is used by the functions `eye`,\n  `ones`, `range`, and `zeros`, to determine the type of matrix output.\n- Getting a subset of a matrix will automatically squeeze the resulting subset,\n  setting a subset of a matrix will automatically unsqueeze the given subset.\n- Removed concatenation of nested arrays in the expression parser.\n  You can now input nested arrays like in JavaScript. Matrices can be\n  concatenated using the function `concat`.\n- The matrix syntax `[...]` in the expression parser now creates 1 dimensional\n  matrices by default. `math.eval('[1,2,3,4]')` returns a matrix with\n  size `[4]`, `math.eval('[1,2;3,4]')` returns a matrix with size `[2,2]`.\n- Documentation is restructured and extended.\n- Fixed non working operator `mod` (modulus operator).\n\n\n## 2013-09-03, version 0.13.0\n\n- Implemented support for booleans in all relevant functions.\n- Implemented functions `map` and `forEach`. Thanks Sebastien Piquemal (@sebpic).\n- All construction functions can be used to convert the type of variables,\n  also element-wise for all elements in an Array or Matrix.\n- Changed matrix indexes of the expression parser to one-based with the\n  upper-bound included, similar to most math applications. Note that on a\n  JavaScript level, math.js uses zero-based indexes with excluded upper-bound.\n- Removed support for scalars in the function `subset`, it now only supports\n  Array, Matrix, and String.\n- Removed the functions `get` and `set` from a selector, they are a duplicate\n  of the function `subset`.\n- Replaced functions `get` and `set` of `Matrix` with a single function\n  `subset`.\n- Some moving around with code and namespaces:\n  - Renamed namespace `math.expr` to `math.expression` (contains Scope, Parser,\n    node objects).\n  - Renamed namespace `math.docs` to `math.expression.docs`.\n  - Moved `math.expr.Selector` to `math.chaining.Selector`.\n- Fixed some edge cases in functions `lcm` and `xgcd`.\n\n\n## 2013-08-22, version 0.12.1\n\n- Fixed outdated version of README.md.\n- Fixed a broken unit test.\n\n\n## 2013-08-22, version 0.12.0\n\n- Implemented functions `random([min, max])`, `randomInt([min, max])`,\n  `pickRandom(array)`. Thanks Sebastien Piquemal (@sebpic).\n- Implemented function `distribution(name)`, generating a distribution object\n  with functions `random`, `randomInt`, `pickRandom` for different\n  distributions. Currently supporting `uniform` and `normal`.\n- Changed the behavior of `range` to exclude the upper bound, so `range(1, 4)`\n  now returns `[1, 2, 3]` instead of `[1, 2, 3, 4]`.\n- Changed the syntax of `range`, which is now `range(start, end [, step])`\n  instead of `range(start, [step, ] end)`.\n- Changed the behavior of `ones` and `zeros` to geometric dimensions, for\n  example `ones(3)` returns a vector with length 3, filled with ones, and\n  `ones(3,3)` returns a 2D array with size [3, 3].\n- Changed the return type of `ones` and `zeros`: they now return an Array when\n  arguments are Numbers or an Array, and returns a Matrix when the argument\n  is a Matrix.\n- Change matrix index notation in parser from round brackets to square brackets,\n  for example `A[0, 0:3]`.\n- Removed the feature introduced in v0.10.0 to automatically convert a complex\n  value with an imaginary part equal to zero to a number.\n- Fixed zeros being formatted as null. Thanks @TimKraft.\n\n\n## 2013-07-23, version 0.11.1\n\n- Fixed missing development dependency\n\n\n## 2013-07-23, version 0.11.0\n\n- Changed math.js from one-based to zero-based indexes.\n  - Getting and setting matrix subset is now zero-based.\n  - The dimension argument in function `concat` is now zero-based.\n- Improvements in the string output of function help.\n- Added constants `true` and `false`.\n- Added constructor function `boolean`.\n- Fixed function `select` not accepting `0` as input.\n  Thanks Elijah Manor (@elijahmanor).\n- Parser now supports multiple unary minus operators after each other.\n- Fixed not accepting empty matrices like `[[], []]`.\n- Some fixes in the end user documentation.\n\n\n## 2013-07-08, version 0.10.0\n\n- For complex calculations, all functions now automatically replace results\n  having an imaginary part of zero with a Number. (`2i * 2i` now returns a\n  Number `-4` instead of a Complex `-4 + 0i`).\n- Implemented support for injecting custom node handlers in the parser. Can be\n  used for example to implement a node handler for plotting a graph.\n- Implemented end user documentation and a new `help` function.\n- Functions `size` and `squeeze` now return a Matrix instead of an Array as\n  output on Matrix input.\n- Added a constant tau (2 * pi). Thanks Zak Zibrat (@palimpsests).\n- Renamed function `unaryminus` to `unary`.\n- Fixed a bug in determining node dependencies in function assignments.\n\n\n## 2013-06-14, version 0.9.1\n\n- Implemented element-wise functions and operators: `emultiply` (`x .* y`),\n  `edivide` (`x ./ y`), `epow` (`x .^ y`).\n- Added constants `Infinity` and `NaN`.\n- Removed support for Workspace to keep the library focused on its core task.\n- Fixed a bug in the Complex constructor, not accepting NaN values.\n- Fixed division by zero in case of pure complex values.\n- Fixed a bug in function multiply multiplying a pure complex value with\n  Infinity.\n\n\n## 2013-05-29, version 0.9.0\n\n- Implemented function `math.parse(expr [,scope])`. Optional parameter scope can\n  be a plain JavaScript Object containing variables.\n- Extended function `math.expr(expr [, scope])` with an additional parameter\n  `scope`, similar to `parse`. Example: `math.eval('x^a', {x:3, a:2});`.\n- Implemented function `subset`, to get or set a subset from a matrix, string,\n  or other data types.\n- Implemented construction functions number and string (mainly useful inside\n  the parser).\n- Improved function `det`. Thanks Bryan Cuccioli (@bcuccioli).\n- Moved the parse code from prototype math.expr.Parser to function math.parse,\n  simplified Parser a little bit.\n- Strongly simplified the code of Scope and Workspace.\n- Fixed function mod for negative numerators, and added error messages in case\n  of wrong input.\n\n\n## 2013-05-18, version 0.8.2\n\n- Extended the import function and some other minor improvements.\n- Fixed a bug in merging one dimensional vectors into a matrix.\n- Fixed a bug in function subtract, when subtracting a complex number from a\n  real number.\n\n\n## 2013-05-10, version 0.8.1\n\n- Fixed an npm warning when installing mathjs globally.\n\n\n## 2013-05-10, version 0.8.0\n\n- Implemented a command line interface. When math.js is installed globally via\n  npm, the application is available on your system as 'mathjs'.\n- Implemented `end` keyword for index operator, and added support for implicit\n  start and end (expressions like `a(2,:)` and `b(2:end,3:end-1)` are supported\n  now).\n- Function math.eval is more flexible now: it supports variables and multi-line\n  expressions.\n- Removed the read-only option from Parser and Scope.\n- Fixed non-working unequal operator != in the parser.\n- Fixed a bug in resizing matrices when replacing a subset.\n- Fixed a bug in updating a subset of a non-existing variable.\n- Minor bug fixes.\n\n\n## 2013-05-04, version 0.7.2\n\n- Fixed method unequal, which was checking for equality instead of inequality.\n  Thanks @FJS2.\n\n\n## 2013-04-27, version 0.7.1\n\n- Improvements in the parser:\n  - Added support for chained arguments.\n  - Added support for chained variable assignments.\n  - Added a function remove(name) to remove a variable from the parsers scope.\n  - Renamed nodes for more consistency and to resolve naming conflicts.\n  - Improved stringification of an expression tree.\n  - Some simplifications in the code.\n  - Minor bug fixes.\n- Fixed a bug in the parser, returning NaN instead of throwing an error for a\n  number with multiple decimal separators like `2.3.4`.\n- Fixed a bug in Workspace.insertAfter.\n- Fixed: math.js now works on IE 6-8 too.\n\n\n## 2013-04-20, version 0.7.0\n\n- Implemented method `math.eval`, which uses a readonly parser to evaluate\n  expressions.\n- Implemented method `xgcd` (extended eucledian algorithm). Thanks Bart Kiers\n  (@bkiers).\n- Improved math.format, which now rounds values to a maximum number of digits\n  instead of decimals (default is 5 digits, for example `math.format(math.pi)`\n  returns `3.1416`).\n- Added examples.\n- Changed methods square and cube to evaluate matrices element wise (consistent\n  with all other methods).\n- Changed second parameter of method import to an object with options.\n- Fixed method math.typeof on IE.\n- Minor bug fixes and improvements.\n\n\n## 2013-04-13, version 0.6.0\n\n- Implemented chained operations via method math.select(). For example\n  `math.select(3).add(4).subtract(2).done()` will return `5`.\n- Implemented methods gcd and lcm.\n- Implemented method `Unit.in(unit)`, which creates a clone of the unit with a\n  fixed representation. For example `math.unit('5.08 cm').in('inch')` will\n  return a unit which string representation always is in inch, thus `2 inch`.\n  `Unit.in(unit)` is the same as method `math.in(x, unit)`.\n- Implemented `Unit.toNumber(unit)`, which returns the value of the unit when\n  represented with given unit. For example\n  `math.unit('5.08 cm').toNumber('inch')` returns the number `2`, as the\n  representation of the unit in inches has 2 as value.\n- Improved: method `math.in(x, unit)` now supports a string as second parameter,\n  for example `math.in(math.unit('5.08 cm'), 'inch')`.\n- Split the end user documentation of the parser functions from the source\n  files.\n- Removed function help and the built-in documentation from the core library.\n- Fixed constant i being defined as -1i instead of 1i.\n- Minor bug fixes.\n\n\n## 2013-04-06, version 0.5.0\n\n- Implemented data types Matrix and Range.\n- Implemented matrix methods clone, concat, det, diag, eye, inv, ones, size,\n  squeeze, transpose, zeros.\n- Implemented range operator `:`, and transpose operator `'` in parser.\n- Changed: created construction methods for easy object creation for all data\n  types and for the parser. For example, a complex value is now created\n  with `math.complex(2, 3)` instead of `new math.Complex(2, 3)`, and a parser\n  is now created with `math.parser()` instead of `new math.parser.Parser()`.\n- Changed: moved all data types under the namespace math.type, and moved the\n  Parser, Workspace, etc. under the namespace math.expr.\n- Changed: changed operator precedence of the power operator:\n  - it is now right associative instead of left associative like most scripting\n    languages. So `2^3^4` is now calculated as `2^(3^4)`.\n  - it has now higher precedence than unary minus most languages, thus `-3^2` is\n    now calculated as `-(3^2)`.\n- Changed: renamed the parsers method 'put' into 'set'.\n- Fixed: method 'in' did not check for units to have the same base.\n\n\n## 2013-03-16, version 0.4.0\n\n- Implemented Array support for all methods.\n- Implemented Array support in the Parser.\n- Implemented method format.\n- Implemented parser for units, math.Unit.parse(str).\n- Improved parser for complex values math.Complex.parse(str);\n- Improved method help: it now evaluates the examples.\n- Fixed: a scoping issue with the Parser when defining functions.\n- Fixed: method 'typeof' was not working well with minified and mangled code.\n- Fixed: errors in determining the best prefix for a unit.\n\n\n## 2013-03-09, version 0.3.0\n\n- Implemented Workspace\n- Implemented methods cot, csc, sec.\n- Implemented Array support for methods with one parameter.\n\n\n## 2013-02-25, version 0.2.0\n\n- Parser, Scope, and expression tree with Nodes implemented.\n- Implemented method import which makes it easy to extend math.js.\n- Implemented methods arg, conj, cube, equal, factorial, im, largereq,\n  log(x, base), log10, mod, re, sign, smallereq, square, unequal.\n\n\n## 2013-02-18, version 0.1.0\n\n- Reached full compatibility with Javascripts built-in Math library.\n- More functions implemented.\n- Some bugfixes.\n\n\n## 2013-02-16, version 0.0.2\n\n- All constants of Math implemented, plus the imaginary unit i.\n- Data types Complex and Unit implemented.\n- First set of functions implemented.\n\n\n## 2013-02-15, version 0.0.1\n\n- First publish of the mathjs package. (package is still empty)\n", "import { isBigNumber } from './is'\n\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\nexport function clone (x) {\n  const type = typeof x\n\n  // immutable primitive types\n  if (type === 'number' || type === 'string' || type === 'boolean' ||\n      x === null || x === undefined) {\n    return x\n  }\n\n  // use clone function of the object when available\n  if (typeof x.clone === 'function') {\n    return x.clone()\n  }\n\n  // array\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value)\n    })\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf())\n  if (isBigNumber(x)) return x // bignumbers are immutable\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x) // TODO: clone a RegExp\n\n  // object\n  return mapObject(x, clone)\n}\n\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\nexport function mapObject (object, callback) {\n  const clone = {}\n\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key])\n    }\n  }\n\n  return clone\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexport function extend (a, b) {\n  for (const prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop]\n    }\n  }\n  return a\n}\n\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\nexport function deepExtend (a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend')\n  }\n\n  for (const prop in b) {\n    // We check against prop not being in Object.prototype or Function.prototype\n    // to prevent polluting for example Object.__proto__.\n    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {}\n        }\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop])\n        } else {\n          a[prop] = b[prop]\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend')\n      } else {\n        a[prop] = b[prop]\n      }\n    }\n  }\n  return a\n}\n\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\nexport function deepStrictEqual (a, b) {\n  let prop, i, len\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false\n    }\n\n    if (a.length !== b.length) {\n      return false\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false\n      }\n    }\n    return true\n  } else if (typeof a === 'function') {\n    return (a === b)\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false\n      }\n    }\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {\n        return false\n      }\n    }\n    return true\n  } else {\n    return (a === b)\n  }\n}\n\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\nexport function deepFlatten (nestedObject) {\n  const flattenedObject = {}\n\n  _deepFlatten(nestedObject, flattenedObject)\n\n  return flattenedObject\n}\n\n// helper function used by deepFlatten\nfunction _deepFlatten (nestedObject, flattenedObject) {\n  for (const prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      const value = nestedObject[prop]\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject)\n      } else {\n        flattenedObject[prop] = value\n      }\n    }\n  }\n}\n\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\nexport function canDefineProperty () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', { get: function () {} })\n      return true\n    }\n  } catch (e) {}\n\n  return false\n}\n\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\nexport function lazy (object, prop, valueResolver) {\n  let _uninitialized = true\n  let _value\n\n  Object.defineProperty(object, prop, {\n    get: function () {\n      if (_uninitialized) {\n        _value = valueResolver()\n        _uninitialized = false\n      }\n      return _value\n    },\n\n    set: function (value) {\n      _value = value\n      _uninitialized = false\n    },\n\n    configurable: true,\n    enumerable: true\n  })\n}\n\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\nexport function traverse (object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'))\n  }\n\n  let obj = object\n\n  if (path) {\n    for (let i = 0; i < path.length; i++) {\n      const key = path[i]\n      if (!(key in obj)) {\n        obj[key] = {}\n      }\n      obj = obj[key]\n    }\n  }\n\n  return obj\n}\n\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\nexport function hasOwnProperty (object, property) {\n  return object && Object.hasOwnProperty.call(object, property)\n}\n\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\nexport function isLegacyFactory (object) {\n  return object && typeof object.factory === 'function'\n}\n\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\nexport function get (object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'))\n    } else {\n      return object[path]\n    }\n  }\n\n  let child = object\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i]\n    child = child ? child[key] : undefined\n  }\n\n  return child\n}\n\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\nexport function set (object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value)\n    } else {\n      object[path] = value\n      return object\n    }\n  }\n\n  let child = object\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i]\n    if (child[key] === undefined) {\n      child[key] = {}\n    }\n    child = child[key]\n  }\n\n  if (path.length > 0) {\n    const lastKey = path[path.length - 1]\n    child[lastKey] = value\n  }\n\n  return object\n}\n\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\nexport function pick (object, properties, transform) {\n  const copy = {}\n\n  for (let i = 0; i < properties.length; i++) {\n    const key = properties[i]\n    const value = get(object, key)\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value)\n    }\n  }\n\n  return copy\n}\n\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\nexport function pickShallow (object, properties) {\n  const copy = {}\n\n  for (let i = 0; i < properties.length; i++) {\n    const key = properties[i]\n    const value = object[key]\n    if (value !== undefined) {\n      copy[key] = value\n    }\n  }\n\n  return copy\n}\n\nexport function values (object) {\n  return Object.keys(object).map(key => object[key])\n}\n\n// helper function to test whether a string contains a path like 'user.name'\nfunction isPath (str) {\n  return str.indexOf('.') !== -1\n}\n", "import assert from 'assert'\nimport math from '../../../src/bundleAny'\n\ndescribe('security', function () {\n  it('should not allow calling Function via constructor', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via constructor (2)', function () {\n    assert.throws(function () {\n      math.evaluate('f=sqrt.constructor(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: No access to method \"constructor\"/)\n  })\n\n  it('should not allow calling Function via call/apply', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor.call(null, \"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor.apply(null, [\"console.log(\\'hacked...\\')\"]); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling constructor of a class', function () {\n    assert.throws(function () {\n      math.evaluate('[].constructor()')\n    }, /Error: No access to method \"constructor\"/)\n  })\n\n  it('should not allow calling constructor', function () {\n    assert.throws(function () {\n      math.evaluate('constructor')\n    }, /Error: No access to property \"constructor\"/)\n\n    assert.throws(function () {\n      math.evaluate('toString')\n    }, /Cannot access method \"toString\" as a property/)\n  })\n\n  it('should not allow calling Function via constructor', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n\n    assert.throws(function () {\n      math.evaluate('f=[].map[\"constructor\"](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via a disguised constructor', function () {\n    assert.throws(function () {\n      math.evaluate('prop=\"constructor\"; f=[].map[prop](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n\n    assert.throws(function () {\n      math.evaluate('f=[].map[concat(\"constr\", \"uctor\")](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via bind', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map.constructor.bind()(\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow calling Function via map/forEach', function () {\n    // TODO: simplify this test case, let it output console.log('hacked...')\n    assert.throws(function () {\n      math.evaluate('[\"//\",\"a/*\\\\nreturn process.mainModule.require\"]._data.map(cos.constructor)[1]()(\"child_process\").execSync(\"ps >&2\")')\n    }, /Error: No access to property \"_data/)\n  })\n\n  it('should not allow calling Function via Object.assign', function () {\n    // TODO: simplify this test case, let it output console.log('hacked...')\n    assert.throws(function () {\n      math.evaluate('{}.constructor.assign(cos.constructor, {binding: cos.bind})\\n' +\n          '{}.constructor.assign(cos.constructor, {bind: null})\\n' +\n          'f=cos.constructor.binding()(\"console.log(\\'hacked...\\')\")\\n' +\n          'f()')\n    }, /Error: No access to property \"bind/)\n  })\n\n  it('should not allow disguising forbidden properties with unicode characters', function () {\n    const scope = {\n      a: {}\n    }\n\n    assert.throws(function () { math.evaluate('a.co\\u006Estructor', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a[\"co\\\\u006Estructor\"]', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a.constructor', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a.constructor = 2', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a[\"constructor\"] = 2', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a[\"co\\\\u006Estructor\"] = 2', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {\"constructor\": 2}', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {constructor: 2}', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {\"co\\\\u006Estructor\": 2}', scope) }, /Error: No access to property \"constructor\"/)\n    assert.throws(function () { math.evaluate('a = {co\\u006Estructor: 2}', scope) }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow calling Function via imported, overridden function', function () {\n    assert.throws(function () {\n      const math2 = math.create()\n      math2.evaluate('import({matrix:cos.constructor},{override:1});x=[\"console.log(\\'hacked...\\')\"];x()')\n    }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow calling Function via index retrieval', function () {\n    assert.throws(function () {\n      math.evaluate('a=[\"console.log(\\'hacked...\\')\"]._data;a.isRange=true;x={subset:cos.constructor}[a];x()')\n    }, /Error: No access to property \"_data/)\n  })\n\n  it('should not allow calling Function via getOwnPropertyDescriptor', function () {\n    assert.throws(function () {\n      math.evaluate('p = parser()\\n' +\n          'p.evaluate(\"\", [])\\n' +\n          'o = p.get(\"constructor\")\\n' +\n          'c = o.getOwnPropertyDescriptor(o.__proto__, \"constructor\")\\n' +\n          'f = c.value(\"console.log(\\'hacked...\\')\")\\n' +\n          'f()')\n    }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow calling Function via a symbol', function () {\n    assert.throws(function () {\n      math.evaluate('O = {}.constructor\\n' +\n          'd = O.getOwnPropertyDescriptor(O.__proto__, \"constructor\")\\n' +\n          'f = evaluate(\"value\", d)(\"console.log(\\'hacked...\\')\")\\n' +\n          'f()')\n    }, /Error: No access to property \"constructor/)\n  })\n\n  it('should not allow calling Function via a specially encoded constructor property name', function () {\n    assert.throws(function () {\n      math.evaluate('f=[].map[\"\\\\u0063onstructor\"](\"console.log(\\'hacked...\\')\"); f()')\n    }, /Error: Cannot access method \"map\" as a property/)\n  })\n\n  it('should not allow creating an Object with forbidden properties', function () {\n    assert.throws(function () {\n      math.evaluate('{hasOwnProperty: 2}')\n    }, /Error: No access to property \"hasOwnProperty/)\n\n    assert.throws(function () {\n      math.evaluate('{constructor: 2}')\n    }, /Error: No access to property \"constructor/)\n\n    assert.throws(function () {\n      math.evaluate('{toString: 2}')\n    }, /Error: No access to property \"toString/)\n  })\n\n  it('should not allow calling Object via a an object constructor', function () {\n    assert.throws(function () {\n      math.evaluate('{}.constructor.assign(expression.node.AssignmentNode.prototype, ' +\n                '{_compile: \"\".toString.bind(\"console.log(\\'hacked...\\')\")})\\n' +\n                'evaluate(\"a = 2\")')\n    }, /Error: No access to property \"constructor/)\n  })\n\n  it('should not allow calling Object via a __defineGetter__', function () {\n    assert.throws(function () {\n      math.evaluate('expression.node.AssignmentNode.prototype.__defineGetter__(\"_compile\", ' +\n          '{}.valueOf.bind(\"\".toString.bind(\"console.log(\\'hacked...\\')\"))); evaluate(\"a = 2\")')\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow calling evaluate via a custom compiled SymbolNode', function () {\n    assert.throws(function () {\n      math.evaluate(\"s={};s.__proto__=expression.node.SymbolNode[\\\"prototype\\\"];expression.node.SymbolNode.apply(s,[\\\"\\\\\\\");},\\\\\\\"exec\\\\\\\":function(a){return global.eval}};//\\\"]._data);s.compile().exec()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow calling evaluate via parse', function () {\n    assert.throws(function () {\n      math.evaluate('x=parse(\"cos\");x.name = \"\\\\\");},\\\\\"evaluate\\\\\": function(a) {return global.eval}};//a\"; x.compile().evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /No access to property \"name\"/)\n  })\n\n  it('should not allow calling evaluate via parse (2)', function () {\n    assert.throws(function () {\n      math.evaluate('p = parse(\"{}[\\\\\"console.log(\\'hacked...\\')\\\\\"]\"); p.index.dimensions[\"0\"].valueType = \"boolean\"; p.evaluate()')\n    }, /No access to property \"index\"/)\n  })\n\n  it('should not allow calling evaluate via function.syntax', function () {\n    assert.throws(function () {\n      math.evaluate('cos.syntax=\"global.eval\";s=unit(\"5 cm\");s.units=[]._data;s.value=cos;s._compile=s.toString;expression.node.Node.prototype.compile.call(s).evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /Error: No access to property \"syntax\"/)\n  })\n\n  it('should not allow calling evaluate via clone', function () {\n    assert.throws(function () {\n      math.evaluate('expression.node.ConstantNode.prototype.clone.call({\"value\":\"evaluate\"}).evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow replacing _compile', function () {\n    assert.throws(function () {\n      math.evaluate('c(x,y)=\"console.log(\\'hacked...\\')\";expression.node.Node.prototype.compile.apply({_compile:c}).evaluate()')\n    }, /Error: Undefined symbol expression/)\n  })\n\n  it('should not allow using restricted properties via subset (1)', function () {\n    assert.throws(function () {\n      math.evaluate('f()=false;' +\n          'g()={length:3};' +\n          'h()={\"0\":0,\"1\":0,\"2\":0};' +\n          'j(x)=[x(\"constructor\")];' +\n          'k(x)={map:j};' +\n          'i={isIndex:true,isScalar:f,size:g,min:h,max:h,dimension:k};' +\n          'f=subset(subset([[[0]]],i),index(1,1,1))(\"console.log(\\'hacked...\\')\");' +\n          'f()')\n    }, /TypeError: Unexpected type of argument in function subset \\(expected: Index, actual: Object, index: 1\\)/)\n  })\n\n  it('should not allow using restricted properties via subset (2)', function () {\n    assert.throws(function () {\n      math.evaluate(\"scope={}; setter = evaluate(\\\"f(obj, name, newValue, assign) = (obj[name] = newValue)\\\", scope); o = parse(\\\"1\\\"); setter(o, \\\"value\\\", \\\"evaluate\\\", subset); scope.obj.compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: No access to property \"value\"/)\n  })\n\n  it('should not allow using restricted properties via subset (3)', function () {\n    // this exploit does no longer work because parse(\"1\") returns a ConstantNode\n    // and subset doesn't accept that anymore (expects a plain Object)\n    assert.throws(function () {\n      math.evaluate('subset(parse(\"1\"), index(\"value\"), \"evaluate\").compile().evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /TypeError: Unexpected type of argument in function subset/)\n  })\n\n  it('should not allow inserting fake nodes with bad code via node.map or node.transform', function () {\n    assert.throws(function () {\n      math.evaluate(\"badValue = {\\\"isNode\\\": true, \\\"_compile\\\": evaluate(\\\"f(a, b) = \\\\\\\"evaluate\\\\\\\"\\\")}; x = evaluate(\\\"f(child, path, parent) = path ==\\\\\\\"value\\\\\\\" ? newChild : child\\\", {\\\"newChild\\\": badValue}); parse(\\\"x = 1\\\").map(x).compile().evaluate()(\\\"console.log('hacked')\\\")\")\n    }, /Error: Cannot convert \"object\" to a number/)\n\n    assert.throws(function () {\n      math.evaluate(\"badValue = {\\\"isNode\\\": true, \\\"type\\\": \\\"ConstantNode\\\", \\\"valueType\\\": \\\"string\\\", \\\"_compile\\\": evaluate(\\\"f(a, b) = \\\\\\\"evaluate\\\\\\\"\\\")}; x = evaluate(\\\"f(child, path, parent) = path ==\\\\\\\"value\\\\\\\" ? newChild : child\\\", {\\\"newChild\\\": badValue}); parse(\\\"x = 1\\\").map(x).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }) // The error message is vague but well...\n  })\n\n  it('should not allow replacing validateSafeMethod with a local variant', function () {\n    assert.throws(function () {\n      math.evaluate(\"evaluate(\\\"f(validateSafeMethod)=cos.constructor(\\\\\\\"return evaluate\\\\\\\")()\\\")(evaluate(\\\"f(x,y)=0\\\"))(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow abusing toString', function () {\n    assert.throws(function () {\n      math.evaluate(\"badToString = evaluate(\\\"f() = 1\\\"); badReplace = evaluate(\\\"f(a, b) = \\\\\\\"evaluate\\\\\\\"\\\"); badNumber = {toString:badToString, replace:badReplace}; badNode = {\\\"isNode\\\": true, \\\"type\\\": \\\"ConstantNode\\\", \\\"valueType\\\": \\\"number\\\", \\\"value\\\": badNumber}; x = evaluate(\\\"f(child, path, parent) = badNode\\\", {badNode:badNode}); parse(\\\"(1)\\\").map(x).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: No access to property \"toString\"/)\n  })\n\n  it('should not allow creating a bad FunctionAssignmentNode', function () {\n    assert.throws(function () {\n      math.evaluate(\"badNode={isNode:true,type:\\\"FunctionAssignmentNode\\\",expr:parse(\\\"1\\\"),types:{join:evaluate(\\\"f(a)=\\\\\\\"\\\\\\\"\\\")},params:{\\\"forEach\\\":evaluate(\\\"f(x)=1\\\"),\\\"join\\\":evaluate(\\\"f(x)=\\\\\\\"){return evaluate;}});return fn;})())}});return fn;})());}};//\\\\\\\"\\\")}};parse(\\\"f()=x\\\").map(evaluate(\\\"f(a,b,c)=badNode\\\",{\\\"badNode\\\":badNode})).compile().evaluate()()()(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow creating a bad OperatorNode (1)', function () {\n    assert.throws(function () {\n      math.evaluate(\"badNode={isNode:true,type:\\\"FunctionAssignmentNode\\\",expr:parse(\\\"1\\\"),types:{join:evaluate(\\\"f(a)=\\\\\\\"\\\\\\\"\\\")},params:{\\\"forEach\\\":evaluate(\\\"f(x)=1\\\"),\\\"join\\\":evaluate(\\\"f(x)=\\\\\\\"){return evaluate;}});return fn;})())}});return fn;})());}};//\\\\\\\"\\\")}};parse(\\\"f()=x\\\").map(evaluate(\\\"f(a,b,c)=badNode\\\",{\\\"badNode\\\":badNode})).compile().evaluate()()()(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow creating a bad OperatorNode (2)', function () {\n    assert.throws(function () {\n      math.evaluate(\"parse(\\\"(0)\\\").map(evaluate(\\\"f(a,b,c)=d\\\",{d:{isNode:true,type:\\\"OperatorNode\\\",fn:\\\"__lookupGetter__\\\",args:{map:evaluate(\\\"f(a)=b\\\",{b:{join:evaluate(\\\"f(a)=\\\\\\\"1)||evaluate;}};//\\\\\\\"\\\")}})}}})).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /TypeError: Node expected for parameter \"content\"/)\n  })\n\n  it('should not allow creating a bad ConstantNode', function () {\n    assert.throws(function () {\n      math.evaluate('f(x,y)=\"evaluate\";g()=3;fakeConstantNode={\"isNode\": true, \"type\": \"ConstantNode\", \"valueType\": \"number\", \"value\": {\"replace\": f, \"toString\": g}};injectFakeConstantNode(child,path,parent)=path==\"value\"?fakeConstantNode:child;parse(\"a=3\").map(injectFakeConstantNode).compile().evaluate()(\"console.log(\\'hacked...\\')\")')\n    }, /Error: No access to property \"toString\"/)\n  })\n\n  it('should not allow creating a bad ArrayNode', function () {\n    assert.throws(function () {\n      math.evaluate('g(x)=\"evaluate\";f(x)=({join: g});fakeArrayNode={isNode: true, type: \"ArrayNode\", items: {map: f}};injectFakeArrayNode(child,path,parent)=path==\"value\"?fakeArrayNode:child;parse(\"a=3\").map(injectFakeArrayNode).compile().evaluate()[1](\"console.log(\\'hacked...\\')\")')\n    }, /Error: Cannot convert \"object\" to a number/)\n  })\n\n  it('should not allow unescaping escaped double quotes', function () {\n    // exploits:\n    // 1) A bug in validateSafeMethod which allows to call any method in Object.prototype\n    // 2) A bug in stringify\n    assert.throws(function () {\n      math.evaluate(\"x=parse(\\\"\\\\\\\"a\\\\\\\"\\\");x.__defineGetter__(\\\"value\\\",evaluate(\\\"f()=\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"&&evaluate;}};\\\\/\\\\/\\\\\\\"\\\")); x.compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /Error: No access to method \"__defineGetter__\"/)\n  })\n\n  it('should not allow using method chain', function () {\n    assert.throws(function () {\n      math.evaluate('f=chain(\"a(){return evaluate;};function b\").typed({\"\":f()=0}).done();' +\n          'g=f();' +\n          \"g(\\\"console.log('hacked...')\\\")\")\n    }, /(is not a function)|(Object expected)/)\n  })\n\n  it('should not allow using method chain (2)', function () {\n    assert.throws(function () {\n      math.evaluate(\"evilMath=chain().create().done();evilMath.import({\\\"_compile\\\":f(a,b,c)=\\\"evaluate\\\",\\\"isNode\\\":f()=true}); parse(\\\"(1)\\\").map(g(a,b,c)=evilMath.chain()).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /(Cannot read property 'apply' of undefined)|(undefined has no properties)|(undefined is not an object)|(Unable to get property 'apply' of undefined or null reference)/)\n  })\n\n  it('should not allow using method Chain', function () {\n    assert.throws(function () {\n      math.evaluate('x=parse(\"a\",{nodes:{a:Chain}});Chain.bind(x,{})();' +\n          'evilMath=x.create().done();' +\n          'evilMath.import({\"_compile\":f(a,b,c)=\"evaluate\",\"isNode\":f()=true}); ' +\n          \"parse(\\\"(1)\\\").map(g(a,b,c)=evilMath.chain()).compile().evaluate()(\\\"console.log('hacked...')\\\")\")\n    }, /SyntaxError: Value expected/)\n  })\n\n  it('should not allow passing a function name containg bad contents', function () {\n    // underlying issues where:\n    // the input '[][\"fn\"]()=0'\n    // - defines a function in the root scope, but this shouldn't be allowed syntax\n    // - there is a typed function created which unsecurely evaluates JS code with the function name in it\n    //   -> when the function name contains JS code it can be executed, example:\n    //\n    //         const fn = typed(\"(){}+console.log(`hacked...`);function a\", { \"\": function () { } })\n\n    assert.throws(function () {\n      math.evaluate('[][\"(){}+console.log(`hacked...`);function a\"]()=0')\n    }, /SyntaxError: Invalid left hand side of assignment operator =/)\n\n    assert.throws(function () {\n      math.evaluate('{}[\"(){}+console.log(`hacked...`);function a\"]()=0')\n    }, /SyntaxError: Invalid left hand side of assignment operator =/)\n  })\n\n  it('should allow calling functions on math', function () {\n    assert.strictEqual(math.evaluate('sqrt(4)'), 2)\n  })\n\n  it('should allow invoking methods on complex numbers', function () {\n    assert.deepStrictEqual(math.evaluate('complex(4, 0).sqrt(2)'), math.complex(2, 0))\n  })\n\n  it('should allow accessing properties on an object', function () {\n    assert.deepStrictEqual(math.evaluate('obj.a', { obj: { a: 42 } }), 42)\n  })\n\n  it('should not allow accessing inherited properties on an object', function () {\n    assert.throws(function () {\n      math.evaluate('obj.constructor', { obj: { a: 42 } })\n    }, /Error: No access to property \"constructor\"/)\n  })\n\n  it('should not allow accessing __proto__', function () {\n    assert.throws(function () {\n      math.evaluate('{}.__proto__')\n    }, /Error: No access to property \"__proto__\"/)\n  })\n\n  it('should not allow getting properties from non plain objects', function () {\n    assert.throws(function () { math.evaluate('[]._data') }, /No access to property \"_data\"/)\n    assert.throws(function () { math.evaluate('unit(\"5cm\").valueOf') }, /Cannot access method \"valueOf\" as a property/)\n  })\n\n  it('should not have access to specific namespaces', function () {\n    Object.keys(math.expression.mathWithTransform).forEach(function (name) {\n      const value = math.expression.mathWithTransform[name]\n\n      // only plain functions allowed, no constructor functions\n      if (typeof value === 'function') {\n        assert.strictEqual(isPlainFunction(value), true,\n          'only plain functions expected, constructor functions not allowed (name: \"' + name + '\")')\n      } else {\n        // plain objects not allowed, only class instances like units and complex numbers\n        if (value && typeof value === 'object') {\n          if (isPlainObject(value)) {\n            throw new Error('plain objects are not allowed, only class instances (object name: ' + name + ')')\n          }\n        }\n      }\n    })\n\n    assert.throws(function () { math.evaluate('expression') }, /Undefined symbol/)\n    assert.throws(function () { math.evaluate('type') }, /Undefined symbol/)\n    assert.throws(function () { math.evaluate('error') }, /Undefined symbol/)\n    assert.throws(function () { math.evaluate('json') }, /Undefined symbol/)\n\n    assert.strictEqual(math.expression.mathWithTransform.Matrix, undefined)\n    assert.strictEqual(math.expression.mathWithTransform.Node, undefined)\n    assert.strictEqual(math.expression.mathWithTransform.chain, undefined)\n    assert.deepStrictEqual(math.evaluate('chain'), math.unit('chain'))\n  })\n\n  it('should not allow polluting the Object prototype via config', () => {\n    const obj = {}\n    assert.strictEqual(obj.polluted, undefined)\n\n    // change the configuration\n    const newConfig = JSON.parse('{\"__proto__\":{\"polluted\":\"yes\"}}')\n    math.config(newConfig)\n    assert.strictEqual(obj.polluted, undefined)\n  })\n\n  it('should not allow polluting the Object prototype via config via the expression parser', () => {\n    const obj = {}\n    assert.strictEqual(obj.polluted, undefined)\n\n    // change the configuration\n    math.evaluate('config({\"__proto__\":{\"polluted\":\"yes\"}})')\n    assert.strictEqual(obj.polluted, undefined)\n  })\n\n  it('should not allow polluting the Object prototype by creating an object in the expression parser', () => {\n    const obj = {}\n    assert.strictEqual(obj.polluted, undefined)\n\n    // change the configuration\n    math.evaluate('a = {\"__proto__\":{\"polluted\":\"yes\"}}')\n    assert.strictEqual(obj.polluted, undefined)\n  })\n})\n\nfunction isPlainObject (object) {\n  return typeof object === 'object' && object &&\n      object.constructor === Object &&\n      Object.getPrototypeOf(object) === Object.prototype\n}\n\nfunction isPlainFunction (fn) {\n  return typeof fn === 'function' && fn.prototype.constructor === fn\n}\n", "import assert from 'assert'\nimport {\n  canDefineProperty,\n  clone,\n  deepStrictEqual,\n  deepExtend,\n  extend,\n  get,\n  isLegacyFactory,\n  lazy,\n  pick,\n  set,\n  traverse,\n  deepFlatten, hasOwnProperty\n} from '../../../src/utils/object'\n\ndescribe('object', function () {\n  describe('clone', function () {\n    it('should clone undefined', function () {\n      assert.strictEqual(clone(undefined), undefined)\n    })\n\n    it('should clone null', function () {\n      assert.strictEqual(clone(null), null)\n    })\n\n    it('should clone booleans', function () {\n      assert.strictEqual(clone(true), true)\n      assert.strictEqual(clone(false), false)\n    })\n\n    it('should clone numbers', function () {\n      assert.strictEqual(clone(2.3), 2.3)\n    })\n\n    it('should clone strings', function () {\n      assert.strictEqual(clone('hello'), 'hello')\n    })\n\n    it('should (deep) clone objects', function () {\n      const obj = { a: { b: 'c', d: new Date(2014, 0, 1) } }\n      const c = clone(obj)\n\n      assert.deepStrictEqual(obj, c)\n\n      // check whether the clone remains unchanged when changing the original object\n      obj.a.b = 'cc'\n\n      assert.strictEqual(c.a.b, 'c')\n\n      obj.a.d.setMonth(2)\n      assert.strictEqual(c.a.d.valueOf(), new Date(2014, 0, 1).valueOf())\n    })\n\n    it('should clone dates', function () {\n      const d1 = new Date(2014, 1, 1)\n      const d2 = clone(d1)\n      assert.strictEqual(d1.valueOf(), d2.valueOf())\n      d1.setMonth(2)\n      assert.notStrictEqual(d1, d2)\n    })\n\n    it('should (deep) clone arrays', function () {\n      const d = new Date(2014, 0, 1)\n      const arr = [1, 2, d, { a: 3 }]\n      const c = clone(arr)\n\n      assert.deepStrictEqual(arr, c)\n      assert.notStrictEqual(arr, c)\n      assert.notStrictEqual(arr[2], c[2])\n      assert.notStrictEqual(arr[3], c[3])\n\n      // check whether the clone remains unchanged when changing the original object\n      arr[2] = null\n      arr[3].a = 1\n      d.setMonth(2)\n      assert.strictEqual(c[2].valueOf(), new Date(2014, 0, 1).valueOf())\n      assert.strictEqual(c[3].a, 3)\n    })\n\n    it('should throw an error in case of an unsupported type', function () {\n      assert.throws(function () { clone(/a regexp/) }, /Cannot clone/)\n    })\n  })\n\n  describe('extend', function () {\n    it('should extend an object with all properties of an other object', function () {\n      const e = {}\n      const o1 = { a: 2, b: 3 }\n      const o2 = { a: 4, b: null, c: undefined, d: 5, e: e }\n      const o3 = extend(o1, o2)\n\n      assert.strictEqual(o1, o3)\n      assert.strictEqual(o1.e, o3.e)\n      assert.deepStrictEqual(o3, { a: 4, b: null, c: undefined, d: 5, e: e })\n      assert.deepStrictEqual(o2, { a: 4, b: null, c: undefined, d: 5, e: e }) // should be unchanged\n    })\n\n    it('should ignore inherited properties when extending an object', function () {\n      Object.prototype.foo = 'bar' // eslint-disable-line no-extend-native\n      const o1 = { a: 2, b: 3 }\n      const o2 = extend({}, o1)\n\n      assert.strictEqual(o2.foo, 'bar')\n      assert.strictEqual(hasOwnProperty(o2, 'foo'), false)\n\n      delete Object.prototype.foo\n    })\n  })\n\n  describe('deepExtend', function () {\n    it('should deep extend an object with all properties of an other object', function () {\n      const e = { f: { g: 3 } }\n      const o1 = { a: 2, b: 3 }\n      const o2 = { a: 4, b: null, c: undefined, d: 5, e: e }\n      const o3 = deepExtend(o1, o2)\n\n      assert.strictEqual(o1, o3)\n      assert.notStrictEqual(o3.e, o2.e)\n      assert.deepStrictEqual(o3, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 3 } } })\n      assert.deepStrictEqual(o2, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 3 } } }) // should be unchanged\n\n      e.f.g = 4\n      assert.deepStrictEqual(o3, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 3 } } }) // should be unchanged\n      assert.deepStrictEqual(o2, { a: 4, b: null, c: undefined, d: 5, e: { f: { g: 4 } } }) // should be changed\n    })\n\n    it('should throw an error when deep extending an array (is not yet supported)', function () {\n      assert.throws(function () { deepExtend({}, []) }, /Arrays are not supported by deepExtend/)\n      assert.throws(function () { deepExtend({}, { a: [] }) }, /Arrays are not supported by deepExtend/)\n      assert.throws(function () { deepExtend({}, { a: { b: [] } }) }, /Arrays are not supported by deepExtend/)\n    })\n\n    it('should ignore inherited properties when deep extending an object', function () {\n      Object.prototype.foo = 'bar' // eslint-disable-line no-extend-native\n      const o1 = { a: 2, b: 3 }\n      const o2 = deepExtend({}, o1)\n\n      assert.strictEqual(o2.foo, 'bar')\n      assert.strictEqual(hasOwnProperty(o2, 'foo'), false)\n\n      delete Object.prototype.foo\n    })\n\n    it('should not pollute Object.__proto__', function () {\n      const obj = {}\n      assert.strictEqual(obj.polluted, undefined)\n\n      deepExtend(obj, JSON.parse('{\"__proto__\":{\"polluted\":\"yes\"}}'))\n      assert.strictEqual(obj.polluted, undefined)\n    })\n  })\n\n  describe('deepEqual', function () {\n    it('should deep compare two objects', function () {\n      assert.strictEqual(deepStrictEqual({}, {}), true)\n\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2, b: 3 }), true)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2, b: 4 }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2 }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2 }, { a: 2, b: 3 }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: 3 }, { a: 2, b: {} }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: {} }, { a: 2, b: {} }), true)\n\n      assert.strictEqual(deepStrictEqual({ a: 2, b: { c: 4 } }, { a: 2, b: { c: 4 } }), true)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: { c: 4 } }, { a: 2, b: { c: 5 } }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: { c: 4 } }, { a: 2, b: {} }), false)\n      assert.strictEqual(deepStrictEqual({ a: 2, b: {} }, { a: 2, b: { c: 4 } }), false)\n\n      assert.strictEqual(deepStrictEqual(undefined, undefined), true)\n      assert.strictEqual(deepStrictEqual({ a: undefined }, { }), false)\n      assert.strictEqual(deepStrictEqual({ }, { a: undefined }), false)\n      assert.strictEqual(deepStrictEqual({ a: undefined }, { a: undefined }), true)\n    })\n\n    it('should deep compare values and functions strictly', function () {\n      assert.strictEqual(deepStrictEqual({ a: 2 }, { a: '2' }), false)\n      assert.strictEqual(deepStrictEqual(2, '2'), false)\n\n      const fn1 = (a, b) => a + b\n      const fn2 = (a, b) => a + b\n      assert.strictEqual(deepStrictEqual({ add: fn1 }, { add: fn1 }), true)\n      assert.strictEqual(deepStrictEqual({ add: fn1 }, { add: fn2 }), false)\n      assert.strictEqual(deepStrictEqual({ b: { add: fn1 } }, { b: { add: fn1 } }), true)\n      assert.strictEqual(deepStrictEqual({ b: { add: fn1 } }, { b: { add: fn2 } }), false)\n    })\n\n    it('should deep compare two arrays', function () {\n      assert.strictEqual(deepStrictEqual([], []), true)\n      assert.strictEqual(deepStrictEqual([1, 2], [1, 2]), true)\n      assert.strictEqual(deepStrictEqual([1, 2], [1, 2, 3]), false)\n      assert.strictEqual(deepStrictEqual([1, 0, 3], [1, 2, 3]), false)\n\n      assert.strictEqual(deepStrictEqual([1, 2, [3, 4]], [1, 2, [3, 4]]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, [3]], [1, 2, [3, 4]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, [3, 4]], [1, 2, [3]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, null], [1, 2, [3]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, [3]], [1, 2, null]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, 3], [1, 2, [3]]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, [3]], [1, 2, 3]), false)\n    })\n\n    it('should deep compare mixed objects an arrays', function () {\n      assert.strictEqual(deepStrictEqual({}, []), false)\n      assert.strictEqual(deepStrictEqual({ a: {} }, { a: [] }), false)\n\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] }), true)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, {}] }, { a: [1, 2, {}] }), true)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, { b: 4 }] }, { a: [1, 2, { b: 4 }] }), true)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, { b: 4 }] }, { a: [1, 2, { b: 5 }] }), false)\n      assert.strictEqual(deepStrictEqual({ a: [1, 2, { b: 4 }] }, { a: [1, 2, {}] }), false)\n\n      assert.strictEqual(deepStrictEqual([1, 2, {}], [1, 2, {}]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: 3 }], [1, 2, { a: 3 }]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: 3 }], [1, 2, { a: 4 }]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: 3 }], [1, 2, 3]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, 3], [1, 2, { a: 3 }]), false)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: [3, 4] }], [1, 2, { a: [3, 4] }]), true)\n      assert.strictEqual(deepStrictEqual([1, 2, { a: [3, 4] }], [1, 2, { a: [3, 4, 5] }]), false)\n    })\n\n    it('should not ignore inherited properties during comparison', function () {\n      Object.prototype.foo = 'bar' // eslint-disable-line no-extend-native\n\n      assert.strictEqual(deepStrictEqual({}, {}), true)\n      assert.strictEqual(deepStrictEqual({ foo: 'bar' }, {}), true)\n\n      delete Object.prototype.foo\n    })\n  })\n\n  describe('canDefineProperty', function () {\n    it('should test whether defineProperty is available', function () {\n      assert.strictEqual(canDefineProperty(), true)\n    })\n  })\n\n  describe('lazy', function () {\n    it('should get a lazy property', function () {\n      const obj = {}\n      let count = 0\n      lazy(obj, 'x', function () {\n        count++\n        return 2\n      })\n\n      const x = obj.x\n      assert.strictEqual(x, 2)\n      assert.strictEqual(count, 1)\n\n      const x2 = obj.x\n      assert.strictEqual(x2, 2)\n      assert.strictEqual(count, 1)\n    })\n\n    it('should set a lazy property', function () {\n      const obj = {}\n      lazy(obj, 'x', function () {\n        return 2\n      })\n\n      obj.x = 3\n      const x = obj.x\n      assert.strictEqual(x, 3)\n    })\n  })\n\n  describe('traverse', function () {\n    it('should traverse an existing path into an object', function () {\n      const a = {}\n      const b = { a: a }\n      const c = { b: b }\n\n      assert.strictEqual(traverse(c), c)\n      assert.strictEqual(traverse(c, ''), c)\n      assert.strictEqual(traverse(c, 'b'), b)\n      assert.strictEqual(traverse(c, 'b.a'), a)\n      assert.strictEqual(traverse(c, ['b', 'a']), a)\n    })\n\n    it('should append missing piece of a path', function () {\n      const a = {}\n      const b = { a: a }\n      const c = { b: b }\n\n      assert.strictEqual(traverse(c), c)\n      assert.strictEqual(traverse(c, ''), c)\n      assert.strictEqual(traverse(c, 'b'), b)\n      assert.strictEqual(traverse(c, 'b.a'), a)\n      assert.strictEqual(traverse(c, 'b.d'), b.d)\n      assert.strictEqual(traverse(c, 'b.e.f'), b.e.f)\n    })\n  })\n\n  describe('isFactory', function () {\n    it('should test whether an object is a factory', function () {\n      assert.strictEqual(isLegacyFactory({}), false)\n      assert.strictEqual(isLegacyFactory({ foo: true }), false)\n      assert.strictEqual(isLegacyFactory({ name: 'foo' }), false)\n      assert.strictEqual(isLegacyFactory({ name: 'foo', factory: 'bar' }), false)\n      assert.strictEqual(isLegacyFactory({ name: 2, factory: function () {} }), true)\n      assert.strictEqual(isLegacyFactory({ factory: function () {} }), true)\n\n      assert.strictEqual(isLegacyFactory({ name: 'foo', factory: function () {} }), true)\n      assert.strictEqual(isLegacyFactory({ name: 'foo', factory: function () {}, foo: 'bar' }), true)\n    })\n  })\n\n  describe('get', function () {\n    it('should get nested properties from an object', () => {\n      const object = {\n        a: 2,\n        b: {\n          c: 3,\n          e: null\n        }\n      }\n\n      assert.strictEqual(get(object, ''), undefined)\n      assert.strictEqual(get(object, []), object)\n      assert.strictEqual(get(object, 'a'), 2)\n      assert.strictEqual(get(object, 'b.c'), 3)\n      assert.strictEqual(get(object, ['b', 'c']), 3)\n      assert.strictEqual(get(object, 'b.e'), null)\n      assert.strictEqual(get(object, 'a.foo'), undefined)\n    })\n  })\n\n  describe('set', function () {\n    it('should set a nested property in an object', () => {\n      assert.deepStrictEqual(set({}, [], 2), {})\n      assert.deepStrictEqual(set({}, 'a', 2), { a: 2 })\n      assert.deepStrictEqual(set({ a: 2 }, 'b.c', 3), { a: 2, b: { c: 3 } })\n      assert.deepStrictEqual(set({ a: 2 }, ['b', 'c'], 3), { a: 2, b: { c: 3 } })\n    })\n  })\n\n  describe('pick', function () {\n    it('should pick the selected properties', () => {\n      const object = { a: 1, b: 2, c: 3 }\n      assert.deepStrictEqual(pick(object, ['a', 'c', 'd']), { a: 1, c: 3 })\n    })\n\n    it('should pick nested properties', () => {\n      const object = {\n        a: 1,\n        b: {\n          c: 2,\n          d: 3\n        }\n      }\n\n      assert.deepStrictEqual(pick(object, ['a']), { a: 1 })\n      assert.deepStrictEqual(pick(object, ['a', 'b.c']), { a: 1, b: { c: 2 } })\n      assert.deepStrictEqual(pick(object, ['a', ['b', 'c']]), { a: 1, b: { c: 2 } })\n      assert.deepStrictEqual(pick(object, ['a', 'b.c', 'foo', 'b.foo']), { a: 1, b: { c: 2 } })\n    })\n\n    it('should pick and transform nested properties', () => {\n      const object = {\n        a: 1,\n        b: {\n          c: 2,\n          d: 3\n        }\n      }\n\n      function transform (value, key) {\n        return `[${key}:${value}]`\n      }\n\n      assert.deepStrictEqual(pick(object, ['a', 'b.c'], transform), {\n        a: '[a:1]',\n        b: {\n          c: '[b.c:2]'\n        }\n      })\n    })\n  })\n\n  describe('deepFlatten', function () {\n    it('should flatten nested object properties', () => {\n      assert.deepStrictEqual(deepFlatten({\n        obj: { a: 2, b: 3 },\n        c: 4,\n        foo: { bar: { d: 5 } }\n      }), { a: 2, b: 3, c: 4, d: 5 })\n    })\n\n    it('should merge duplicate values when flatting nested object properties', () => {\n      assert.deepStrictEqual(deepFlatten({\n        obj: { a: 2 },\n        foo: { bar: { a: 3 } }\n      }), { a: 3 })\n    })\n  })\n})\n"], "filenames": ["HISTORY.md", "src/utils/object.js", "test/unit-tests/expression/security.test.js", "test/unit-tests/utils/object.test.js"], "buggy_code_start_loc": [1, 89, 392, 143], "buggy_code_end_loc": [1, 90, 392, 143], "fixing_code_start_loc": [2, 89, 393, 144], "fixing_code_end_loc": [7, 92, 421, 152], "type": "CWE-1321", "message": "The package mathjs before 7.5.1 are vulnerable to Prototype Pollution via the deepExtend function that runs upon configuration updates.", "other": {"cve": {"id": "CVE-2020-7743", "sourceIdentifier": "report@snyk.io", "published": "2020-10-13T10:15:13.440", "lastModified": "2022-06-28T14:11:45.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package mathjs before 7.5.1 are vulnerable to Prototype Pollution via the deepExtend function that runs upon configuration updates."}, {"lang": "es", "value": "Las versiones anteriores a 7.5.1 del paquete mathjs, son vulnerables a una Contaminaci\u00f3n de Prototipo por medio de la funci\u00f3n deepExtend que se ejecuta con las actualizaciones de configuraci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "report@snyk.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mathjs:mathjs:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "7.5.1", "matchCriteriaId": "3A8FB1D1-BF2D-45EE-8ED1-10A79935D815"}]}]}], "references": [{"url": "https://github.com/josdejong/mathjs/blob/develop/src/utils/object.js%23L82", "source": "report@snyk.io", "tags": ["Broken Link", "Third Party Advisory"]}, {"url": "https://github.com/josdejong/mathjs/commit/ecb80514e80bce4e6ec7e71db8ff79954f07c57e", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARS-1017113", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-1017112", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1017111", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-MATHJS-1016401", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/josdejong/mathjs/commit/ecb80514e80bce4e6ec7e71db8ff79954f07c57e"}}