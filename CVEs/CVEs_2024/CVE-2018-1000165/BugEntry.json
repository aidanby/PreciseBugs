{"buggy_code": ["<?php\n\n/*\n * This file is part of the LightSAML-Core package.\n *\n * (c) Milos Tomic <tmilos@lightsaml.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace LightSaml\\Model\\XmlDSig;\n\nuse LightSaml\\Credential\\CredentialInterface;\nuse LightSaml\\Credential\\KeyHelper;\nuse LightSaml\\Error\\LightSamlSecurityException;\nuse RobRichards\\XMLSecLibs\\XMLSecurityKey;\n\nabstract class AbstractSignatureReader extends Signature\n{\n    /** @var XMLSecurityKey|null */\n    protected $key;\n\n    /**\n     * @param XMLSecurityKey $key\n     *\n     * @return bool True if validated, False if validation was not performed\n     *\n     * @throws \\LightSaml\\Error\\LightSamlSecurityException If validation fails\n     */\n    abstract public function validate(XMLSecurityKey $key);\n\n    /**\n     * @return XMLSecurityKey|null\n     */\n    public function getKey()\n    {\n        return $this->key;\n    }\n\n    /**\n     * @param CredentialInterface[] $credentialCandidates\n     *\n     * @throws \\InvalidArgumentException                   If element of $credentialCandidates array is not CredentialInterface\n     * @throws \\LightSaml\\Error\\LightSamlSecurityException If validation fails\n     *\n     * @return CredentialInterface|null Returns credential that validated the signature or null if validation was not performed\n     */\n    public function validateMulti(array $credentialCandidates)\n    {\n        $lastException = null;\n\n        foreach ($credentialCandidates as $credential) {\n            if (false == $credential instanceof CredentialInterface) {\n                throw new \\InvalidArgumentException('Expected CredentialInterface');\n            }\n            if (null == $credential->getPublicKey()) {\n                continue;\n            }\n\n            try {\n                $result = $this->validate($credential->getPublicKey());\n\n                if ($result === false) {\n                    return;\n                }\n\n                return $credential;\n            } catch (LightSamlSecurityException $ex) {\n                $lastException = $ex;\n            }\n        }\n\n        if ($lastException) {\n            throw $lastException;\n        } else {\n            throw new LightSamlSecurityException('No public key available for signature verification');\n        }\n    }\n\n    /**\n     * @return string\n     */\n    abstract public function getAlgorithm();\n\n    /**\n     * @param XMLSecurityKey $key\n     *\n     * @return XMLSecurityKey\n     */\n    protected function castKeyIfNecessary(XMLSecurityKey $key)\n    {\n        $algorithm = $this->getAlgorithm();\n        if ($algorithm != $key->type) {\n            $key = KeyHelper::castKey($key, $algorithm);\n        }\n\n        return $key;\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the LightSAML-Core package.\n *\n * (c) Milos Tomic <tmilos@lightsaml.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace LightSaml\\Model\\XmlDSig;\n\nuse LightSaml\\Credential\\CredentialInterface;\nuse LightSaml\\Credential\\KeyHelper;\nuse LightSaml\\Error\\LightSamlSecurityException;\nuse RobRichards\\XMLSecLibs\\XMLSecurityKey;\n\nabstract class AbstractSignatureReader extends Signature\n{\n    /** @var XMLSecurityKey|null */\n    protected $key;\n\n    /**\n     * @param XMLSecurityKey $key\n     *\n     * @return bool True if validated, False if validation was not performed\n     *\n     * @throws \\LightSaml\\Error\\LightSamlSecurityException If validation fails\n     */\n    abstract public function validate(XMLSecurityKey $key);\n\n    /**\n     * @return XMLSecurityKey|null\n     */\n    public function getKey()\n    {\n        return $this->key;\n    }\n\n    /**\n     * @param CredentialInterface[] $credentialCandidates\n     *\n     * @throws \\InvalidArgumentException                   If element of $credentialCandidates array is not CredentialInterface\n     * @throws \\LightSaml\\Error\\LightSamlSecurityException If validation fails\n     *\n     * @return CredentialInterface|null Returns credential that validated the signature or null if validation was not performed\n     */\n    public function validateMulti(array $credentialCandidates)\n    {\n        $lastException = null;\n\n        foreach ($credentialCandidates as $credential) {\n            if (false == $credential instanceof CredentialInterface) {\n                throw new \\InvalidArgumentException('Expected CredentialInterface');\n            }\n            if (null == $credential->getPublicKey()) {\n                continue;\n            }\n\n            try {\n                $result = $this->validate($credential->getPublicKey());\n\n                if ($result === false) {\n                    return null;\n                }\n\n                return $credential;\n            } catch (LightSamlSecurityException $ex) {\n                $lastException = $ex;\n            }\n        }\n\n        if ($lastException) {\n            throw $lastException;\n        } else {\n            throw new LightSamlSecurityException('No public key available for signature verification');\n        }\n    }\n\n    /**\n     * @return string\n     */\n    abstract public function getAlgorithm();\n\n    /**\n     * @param XMLSecurityKey $key\n     *\n     * @return XMLSecurityKey\n     */\n    protected function castKeyIfNecessary(XMLSecurityKey $key)\n    {\n        $algorithm = $this->getAlgorithm();\n\n        if (!in_array($algorithm, [\n            XMLSecurityKey::RSA_SHA1,\n            XMLSecurityKey::RSA_SHA256,\n            XMLSecurityKey::RSA_SHA384,\n            XMLSecurityKey::RSA_SHA512,\n        ])) {\n            throw new LightSamlSecurityException(sprintf('Unsupported signing algorithm: \"%s\"', $algorithm));\n        }\n\n        if ($algorithm != $key->type) {\n            $key = KeyHelper::castKey($key, $algorithm);\n        }\n\n        return $key;\n    }\n}\n"], "filenames": ["src/LightSaml/Model/XmlDSig/AbstractSignatureReader.php"], "buggy_code_start_loc": [65], "buggy_code_end_loc": [93], "fixing_code_start_loc": [65], "fixing_code_end_loc": [104], "type": "CWE-732", "message": "LightSAML version prior to 1.3.5 contains a Incorrect Access Control vulnerability in signature validation in readers in src/LightSaml/Model/XmlDSig/ that can result in impersonation of any user from Identity Provider. This vulnerability appears to have been fixed in 1.3.5 and later.", "other": {"cve": {"id": "CVE-2018-1000165", "sourceIdentifier": "cve@mitre.org", "published": "2018-04-18T19:29:00.770", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LightSAML version prior to 1.3.5 contains a Incorrect Access Control vulnerability in signature validation in readers in src/LightSaml/Model/XmlDSig/ that can result in impersonation of any user from Identity Provider. This vulnerability appears to have been fixed in 1.3.5 and later."}, {"lang": "es", "value": "LightSAML, en versiones anteriores a la 1.3.5, contiene una vulnerabilidad de control de acceso incorrecto en la validaci\u00f3n de firmas en readers en src/LightSaml/Model/XmlDSig/ que puede resultar en la suplantaci\u00f3n de cualquier usuario de Identity Provider. La vulnerabilidad parece haber sido solucionada en las versiones 1.3.5 y siguientes."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-732"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:lightsaml:lightsaml:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.5", "matchCriteriaId": "10E036B6-AA56-4634-AD85-F96509E77F79"}]}]}], "references": [{"url": "https://github.com/lightSAML/lightSAML/commit/47cef07bb09779df15620799f3763d1b8d32307a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/lightSAML/lightSAML/releases/tag/1.3.5", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/lightSAML/lightSAML/commit/47cef07bb09779df15620799f3763d1b8d32307a"}}