{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace Complex.Domino.Lib\n{\n    public abstract class EntityFactory<T> : ContextObject\n        where T : IDatabaseTableObject, new()\n    {\n        private string name;\n        private bool? readOnly;\n        private bool? hidden;\n\n        public string Name\n        {\n            get { return name; }\n            set { name = value; }\n        }\n\n        public bool? ReadOnly\n        {\n            get { return readOnly; }\n            set { readOnly = value; }\n        }\n\n        public bool? Hidden\n        {\n            get { return hidden; }\n            set { hidden = value; }\n        }\n\n        public EntityFactory(Context context)\n            : base(context)\n        {\n            InitializeMembers();\n        }\n\n        private void InitializeMembers()\n        {\n            this.name = null;\n            this.readOnly = null;\n            this.hidden = false;\n        }\n\n        public int Count()\n        {\n            using (var cmd = Context.CreateCommand())\n            {\n                string sql = @\"\nSELECT COUNT(*) FROM {0} AS entities\n{1}\";\n\n                var where = BuildWhereClause(cmd);\n                var tableQuery = GetTableQuery();\n\n                cmd.CommandText = String.Format(sql, GetTableQuery(), where);\n\n                return Context.ExecuteCommandScalar(cmd);\n            }\n        }\n\n        public IEnumerable<T> Find()\n        {\n            return Find(-1, -1, null);\n        }\n\n        public IEnumerable<T> Find(int max, int from, string orderBy)\n        {\n            using (var cmd = Context.CreateCommand())\n            {\n                string sql = @\"\nWITH q AS\n(\n    SELECT entities.*, ROW_NUMBER() OVER({1}) AS rn\n    FROM {0} AS entities\n    {2}\n)\nSELECT * FROM q\n{3}\n{1}\n\";\n\n                var where = BuildWhereClause(cmd);\n                var orderby = BuildOrderByClause(orderBy);\n\n                var limit = from > 0 || max > 0 ? \"WHERE rn BETWEEN @from AND @to\" : \"\";\n\n                var table = GetTableQuery();\n\n                cmd.CommandText = String.Format(sql, table, orderby, where, limit);\n\n                cmd.Parameters.Add(\"@from\", SqlDbType.Int).Value = from;\n                cmd.Parameters.Add(\"@to\", SqlDbType.Int).Value = from + max;\n\n                return Context.ExecuteCommandReader<T>(cmd);\n            }\n        }\n\n        protected abstract string GetTableQuery();\n\n        protected string BuildWhereClause(SqlCommand cmd)\n        {\n            var sb = new StringBuilder();\n\n            AppendWhereCriteria(sb, cmd);\n\n            if (sb.Length > 0)\n            {\n                sb.Insert(0, \"WHERE \");\n            }\n\n            return sb.ToString();\n        }\n\n        protected virtual void AppendWhereCriteria(StringBuilder sb, SqlCommand cmd)\n        {\n            if (name != null)\n            {\n                AppendWhereCriterion(sb, \"Name LIKE @Name\");\n\n                cmd.Parameters.Add(\"@Name\", SqlDbType.NVarChar).Value = '%' + name + '%';\n            }\n\n            if (readOnly.HasValue)\n            {\n                AppendWhereCriterion(sb, \"ReadOnly = @ReadOnly\");\n\n                cmd.Parameters.Add(\"@ReadOnly\", SqlDbType.Bit).Value = readOnly.Value;\n            }\n\n            if (hidden.HasValue)\n            {\n                AppendWhereCriterion(sb, \"Hidden = @Hidden\");\n\n                cmd.Parameters.Add(\"@Hidden\", SqlDbType.Bit).Value = hidden.Value;\n            }\n        }\n\n        protected void AppendWhereCriterion(StringBuilder sb, string criterion)\n        {\n            if (sb.Length > 0)\n            {\n                sb.Append(\" AND \");\n            }\n\n            sb.Append(\"(\");\n            sb.Append(criterion);\n            sb.AppendLine(\")\");\n        }\n\n        protected virtual string GetDefaultOrderBy()\n        {\n            return \"ID ASC\";\n        }\n\n        protected string BuildOrderByClause(string orderBy)\n        {\n            if (!String.IsNullOrWhiteSpace(orderBy))\n            {\n                return String.Format(\"ORDER BY {0}\", orderBy);\n            }\n            else\n            {\n                return \"ORDER BY \" + GetDefaultOrderBy();\n            }\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.UI;\nusing Complex.Domino.Lib;\n\nnamespace Complex.Domino.Web\n{\n    public class PageBase : Page\n    {\n        private bool bypassAuthentication;\n        private Context databaseContext;\n\n        public Context DatabaseContext\n        {\n            get\n            {\n                EnsureContextExists();\n\n                return databaseContext;\n            }\n        }\n\n        public string SessionGuid\n        {\n            get { return (string)Session[Constants.SessionGuid]; }\n        }\n\n        public string OriginalReferer\n        {\n            get { return (string)(ViewState[Constants.OriginalReferer] ?? String.Empty); }\n            private set { ViewState[Constants.OriginalReferer] = value; }\n        }\n\n        /// <summary>\n        /// Gets the root URL of the current web application\n        /// </summary>\n        public string BaseUrl\n        {\n            get { return Util.Url.ToBaseUrl(Request.Url.AbsoluteUri, Request.ApplicationPath); }\n        }\n\n        /// <summary>\n        /// Gets the return url from the query string of the request\n        /// </summary>\n        public string ReturnUrl\n        {\n            get { return Request.QueryString[Constants.ReturnUrl] ?? \"\"; }\n        }\n\n        protected void BypassAuthentication()\n        {\n            this.bypassAuthentication = true;\n        }\n\n        protected void SetUser(User user)\n        {\n            DatabaseContext.User = user;\n\n            Session[Constants.SessionUser] = user;\n        }\n\n        protected User GetUser()\n        {\n            var user = (User)Session[Constants.SessionUser];\n            return user;\n        }\n\n        protected void ResetUser()\n        {\n            DatabaseContext.User = null;\n\n            Session[Constants.SessionUser] = null;\n        }\n\n        private void EnsureContextExists()\n        {\n            if (databaseContext == null)\n            {\n                databaseContext = Complex.Domino.Lib.Context.Create();\n\n                databaseContext.User = GetUser();\n                if (databaseContext.User != null)\n                {\n                    databaseContext.User.Context = databaseContext;\n                }\n            }\n        }\n\n        protected override void OnLoad(EventArgs e)\n        {\n            if (!IsPostBack && Request.UrlReferrer != null)\n            {\n                OriginalReferer = Request.UrlReferrer.ToString();\n            }\n\n            if (!bypassAuthentication)\n            {\n                // If the user hold a valid cookie but the session is new\n                // we need to look up user details from the database\n                if (this.User.Identity.IsAuthenticated && Session[Constants.SessionUser] == null)\n                {\n                    var u = new User(DatabaseContext);\n                    u.Load(this.User.Identity.Name);\n\n                    if (!u.Enabled)\n                    {\n                        throw Lib.Error.InvalidUsernameOrPassword();\n                    }\n\n                    SetUser(u);\n                }\n            }\n\n            base.OnLoad(e);\n        }\n\n        protected override void OnError(EventArgs e)\n        {\n            var ex = Server.GetLastError();\n\n#if DEBUG\n            System.Diagnostics.Debugger.Break();\n#endif\n\n            // Save exception to session for future use\n            Session[Constants.SessionException] = ex;\n            Session[Constants.SessionExceptionUrl] = Request.Url.ToString();\n\n            if (databaseContext != null)\n            {\n                databaseContext.RollbackTransaction();\n            }\n\n            Server.ClearError();\n\n            Response.Redirect(Web.Error.GetUrl());\n        }\n\n        protected override void OnUnload(EventArgs e)\n        {\n            if (databaseContext != null)\n            {\n                databaseContext.CommitTransaction();\n                databaseContext.Dispose();\n                databaseContext = null;\n            }\n\n            base.OnUnload(e);\n        }\n    }\n}"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace Complex.Domino.Lib\n{\n    public abstract class EntityFactory<T> : ContextObject\n        where T : IDatabaseTableObject, new()\n    {\n        private static readonly Regex OrderByRegex = new Regex(@\"[a-z]+\\s*(asc|desc){0,1}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n\n        private string name;\n        private bool? readOnly;\n        private bool? hidden;\n\n        public string Name\n        {\n            get { return name; }\n            set { name = value; }\n        }\n\n        public bool? ReadOnly\n        {\n            get { return readOnly; }\n            set { readOnly = value; }\n        }\n\n        public bool? Hidden\n        {\n            get { return hidden; }\n            set { hidden = value; }\n        }\n\n        public EntityFactory(Context context)\n            : base(context)\n        {\n            InitializeMembers();\n        }\n\n        private void InitializeMembers()\n        {\n            this.name = null;\n            this.readOnly = null;\n            this.hidden = false;\n        }\n\n        public int Count()\n        {\n            using (var cmd = Context.CreateCommand())\n            {\n                string sql = @\"\nSELECT COUNT(*) FROM {0} AS entities\n{1}\";\n\n                var where = BuildWhereClause(cmd);\n                var tableQuery = GetTableQuery();\n\n                cmd.CommandText = String.Format(sql, GetTableQuery(), where);\n\n                return Context.ExecuteCommandScalar(cmd);\n            }\n        }\n\n        public IEnumerable<T> Find()\n        {\n            return Find(-1, -1, null);\n        }\n\n        public IEnumerable<T> Find(int max, int from, string orderBy)\n        {\n            // Prevent any injection attacks\n            if (!OrderByRegex.Match(orderBy).Success)\n            {\n                Error.AccessDenied();\n            }\n\n            using (var cmd = Context.CreateCommand())\n            {\n                string sql = @\"\nWITH q AS\n(\n    SELECT entities.*, ROW_NUMBER() OVER({1}) AS rn\n    FROM {0} AS entities\n    {2}\n)\nSELECT * FROM q\n{3}\n{1}\n\";\n\n                var where = BuildWhereClause(cmd);\n                var orderby = BuildOrderByClause(orderBy);\n\n                var limit = from > 0 || max > 0 ? \"WHERE rn BETWEEN @from AND @to\" : \"\";\n\n                var table = GetTableQuery();\n\n                cmd.CommandText = String.Format(sql, table, orderby, where, limit);\n\n                cmd.Parameters.Add(\"@from\", SqlDbType.Int).Value = from;\n                cmd.Parameters.Add(\"@to\", SqlDbType.Int).Value = from + max;\n\n                return Context.ExecuteCommandReader<T>(cmd);\n            }\n        }\n\n        protected abstract string GetTableQuery();\n\n        protected string BuildWhereClause(SqlCommand cmd)\n        {\n            var sb = new StringBuilder();\n\n            AppendWhereCriteria(sb, cmd);\n\n            if (sb.Length > 0)\n            {\n                sb.Insert(0, \"WHERE \");\n            }\n\n            return sb.ToString();\n        }\n\n        protected virtual void AppendWhereCriteria(StringBuilder sb, SqlCommand cmd)\n        {\n            if (name != null)\n            {\n                AppendWhereCriterion(sb, \"Name LIKE @Name\");\n\n                cmd.Parameters.Add(\"@Name\", SqlDbType.NVarChar).Value = '%' + name + '%';\n            }\n\n            if (readOnly.HasValue)\n            {\n                AppendWhereCriterion(sb, \"ReadOnly = @ReadOnly\");\n\n                cmd.Parameters.Add(\"@ReadOnly\", SqlDbType.Bit).Value = readOnly.Value;\n            }\n\n            if (hidden.HasValue)\n            {\n                AppendWhereCriterion(sb, \"Hidden = @Hidden\");\n\n                cmd.Parameters.Add(\"@Hidden\", SqlDbType.Bit).Value = hidden.Value;\n            }\n        }\n\n        protected void AppendWhereCriterion(StringBuilder sb, string criterion)\n        {\n            if (sb.Length > 0)\n            {\n                sb.Append(\" AND \");\n            }\n\n            sb.Append(\"(\");\n            sb.Append(criterion);\n            sb.AppendLine(\")\");\n        }\n\n        protected virtual string GetDefaultOrderBy()\n        {\n            return \"ID ASC\";\n        }\n\n        protected string BuildOrderByClause(string orderBy)\n        {\n            if (!String.IsNullOrWhiteSpace(orderBy))\n            {\n                return String.Format(\"ORDER BY {0}\", orderBy);\n            }\n            else\n            {\n                return \"ORDER BY \" + GetDefaultOrderBy();\n            }\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.UI;\nusing Complex.Domino.Lib;\n\nnamespace Complex.Domino.Web\n{\n    public class PageBase : Page\n    {\n        private bool bypassAuthentication;\n        private Context databaseContext;\n\n        public Context DatabaseContext\n        {\n            get\n            {\n                EnsureContextExists();\n\n                return databaseContext;\n            }\n        }\n\n        public string SessionGuid\n        {\n            get { return (string)Session[Constants.SessionGuid]; }\n        }\n\n        public string OriginalReferer\n        {\n            get { return (string)(ViewState[Constants.OriginalReferer] ?? String.Empty); }\n            private set { ViewState[Constants.OriginalReferer] = value; }\n        }\n\n        /// <summary>\n        /// Gets the root URL of the current web application\n        /// </summary>\n        public string BaseUrl\n        {\n            get { return Util.Url.ToBaseUrl(Request.Url.AbsoluteUri, Request.ApplicationPath); }\n        }\n\n        /// <summary>\n        /// Gets the return url from the query string of the request\n        /// </summary>\n        public string ReturnUrl\n        {\n            get { return Request.QueryString[Constants.ReturnUrl] ?? \"\"; }\n        }\n\n        protected void BypassAuthentication()\n        {\n            this.bypassAuthentication = true;\n        }\n\n        protected void SetUser(User user)\n        {\n            DatabaseContext.User = user;\n\n            Session[Constants.SessionUser] = user;\n        }\n\n        protected User GetUser()\n        {\n            var user = (User)Session[Constants.SessionUser];\n            return user;\n        }\n\n        protected void ResetUser()\n        {\n            DatabaseContext.User = null;\n\n            Session[Constants.SessionUser] = null;\n        }\n\n        private void EnsureContextExists()\n        {\n            if (databaseContext == null)\n            {\n                databaseContext = Complex.Domino.Lib.Context.Create();\n\n                databaseContext.User = GetUser();\n                if (databaseContext.User != null)\n                {\n                    databaseContext.User.Context = databaseContext;\n                }\n            }\n        }\n\n        protected override void OnLoad(EventArgs e)\n        {\n            if (!IsPostBack && Request.UrlReferrer != null)\n            {\n                OriginalReferer = Request.UrlReferrer.ToString();\n            }\n\n            if (!bypassAuthentication)\n            {\n                // If the user holds a valid cookie but the session is new\n                // we need to look up user details from the database\n                if (this.User.Identity.IsAuthenticated && Session[Constants.SessionUser] == null)\n                {\n                    var u = new User(DatabaseContext);\n                    u.Load(this.User.Identity.Name);\n\n                    if (!u.Enabled)\n                    {\n                        throw Lib.Error.InvalidUsernameOrPassword();\n                    }\n\n                    SetUser(u);\n                }\n            }\n\n            base.OnLoad(e);\n        }\n\n        protected override void OnError(EventArgs e)\n        {\n            var ex = Server.GetLastError();\n\n#if DEBUG\n            System.Diagnostics.Debugger.Break();\n#endif\n\n            // Save exception to session for future use\n            Session[Constants.SessionException] = ex;\n            Session[Constants.SessionExceptionUrl] = Request.Url.ToString();\n\n            if (databaseContext != null)\n            {\n                databaseContext.RollbackTransaction();\n            }\n\n            Server.ClearError();\n\n            Response.Redirect(Web.Error.GetUrl());\n        }\n\n        protected override void OnUnload(EventArgs e)\n        {\n            if (databaseContext != null)\n            {\n                databaseContext.CommitTransaction();\n                databaseContext.Dispose();\n                databaseContext = null;\n            }\n\n            base.OnUnload(e);\n        }\n    }\n}"], "filenames": ["src/Complex.Domino.Lib/Lib/EntityFactory.cs", "src/Complex.Domino.Web/PageBase.cs"], "buggy_code_start_loc": [4, 100], "buggy_code_end_loc": [72, 101], "fixing_code_start_loc": [5, 100], "fixing_code_end_loc": [82, 101], "type": "CWE-89", "message": "A vulnerability was found in dobos domino. It has been rated as critical. Affected by this issue is some unknown functionality in the library src/Complex.Domino.Lib/Lib/EntityFactory.cs. The manipulation leads to sql injection. Upgrading to version 0.1.5524.38553 is able to address this issue. The name of the patch is 16f039073709a21a76526110d773a6cce0ce753a. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218024.", "other": {"cve": {"id": "CVE-2015-10039", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-11T19:15:09.363", "lastModified": "2023-01-18T18:15:03.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in dobos domino. It has been rated as critical. Affected by this issue is some unknown functionality in the library src/Complex.Domino.Lib/Lib/EntityFactory.cs. The manipulation leads to sql injection. Upgrading to version 0.1.5524.38553 is able to address this issue. The name of the patch is 16f039073709a21a76526110d773a6cce0ce753a. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218024."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:domino_project:domino:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.1.5524.38553", "matchCriteriaId": "025027CC-B672-4596-9771-F7B56BC35664"}]}]}], "references": [{"url": "https://github.com/dobos/domino/commit/16f039073709a21a76526110d773a6cce0ce753a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dobos/domino/releases/tag/v0.1.5524.38553", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218024", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218024", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dobos/domino/commit/16f039073709a21a76526110d773a6cce0ce753a"}}