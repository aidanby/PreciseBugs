{"buggy_code": ["<?php\r\n\r\nclass erLhcoreClassFileUpload extends UploadHandler\r\n{\r\n\r\n    public $uploadedFile = false;\r\n\r\n    protected function get_file_name($name, $type = null, $index = null, $content_range = null)\r\n    {\r\n        $name = sha1($name . erLhcoreClassModelForgotPassword::randomPassword(40) . time());\r\n        return md5($this->get_unique_filename(\r\n            $this->trim_file_name($name, $type, $index, $content_range),\r\n            $type,\r\n            $index,\r\n            $content_range\r\n        ));\r\n    }\r\n\r\n    protected function generate_response($content, $print_response = true)\r\n    {\r\n        parent::generate_response($content, false);\r\n    }\r\n\r\n    protected function handle_file_upload_parent($uploaded_file, $name, $size, $type, $error, $index, $content_range)\r\n    {\r\n        return parent::handle_file_upload(\r\n            $uploaded_file, $name, $size, $type, $error, $index, $content_range\r\n        );\r\n    }\r\n\r\n    protected function handle_file_upload($uploaded_file, $name, $size, $type, $error, $index = null, $content_range = null)\r\n    {\r\n\r\n        $matches = array();\r\n        if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $type, $matches)) {\r\n            $name = $uploadFileName = 'clipboard.' . $matches[1];\r\n        } else {\r\n            $uploadFileName = $name;\r\n        }\r\n\r\n        $file = parent::handle_file_upload(\r\n            $uploaded_file, $name, $size, $type, $error, $index, $content_range\r\n        );\r\n\r\n        if (!preg_match($this->options['accept_file_types_lhc'], $uploadFileName)) {\r\n            $file->error = $this->get_error_message('accept_file_types');\r\n            return false;\r\n        }\r\n\r\n        if (isset($this->options['antivirus']) && $this->options['antivirus'] !== false && is_object($this->options['antivirus']) && !$this->options['antivirus']->scan(realpath($this->options['upload_dir'] . $file->name))) {\r\n            unlink($this->options['upload_dir'] . $file->name);\r\n            erLhcoreClassFileUpload::removeRecursiveIfEmpty('var/', str_replace('var/', '', $this->options['upload_dir']));\r\n            $file->error = 'Virus found in file!';\r\n        }\r\n\r\n        if (empty($file->error)) {\r\n            $fileUpload = new erLhcoreClassModelChatFile();\r\n            $fileUpload->size = $file->size;\r\n            $fileUpload->type = $file->type;\r\n            $fileUpload->name = $file->name;\r\n            $fileUpload->date = time();\r\n            $fileUpload->user_id = isset($this->options['user_id']) ? $this->options['user_id'] : 0;\r\n            $fileUpload->upload_name = $name;\r\n            $fileUpload->file_path = $this->options['upload_dir'];\r\n\r\n            if (isset($this->options['chat']) && $this->options['chat'] instanceof erLhcoreClassModelChat) {\r\n                $fileUpload->chat_id = $this->options['chat']->id;\r\n            } elseif (isset($this->options['online_user']) && $this->options['online_user'] instanceof erLhcoreClassModelChatOnlineUser) {\r\n                $fileUpload->online_user_id = $this->options['online_user']->id;\r\n            }\r\n\r\n            $matches = array();\r\n            if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $fileUpload->type, $matches)) {\r\n                $fileUpload->extension = $matches[1];\r\n            } else {\r\n                $partsFile = explode('.', $fileUpload->upload_name);\r\n                $fileUpload->extension = end($partsFile);\r\n            }\r\n\r\n            if (isset($this->options['remove_meta']) && $this->options['remove_meta'] == true && in_array($fileUpload->extension, array('jpg', 'jpeg', 'png', 'gif'))) {\r\n                erLhcoreClassFileUploadAdmin::removeExif($fileUpload->file_path_server, $fileUpload->file_path_server . '_exif');\r\n                unlink($fileUpload->file_path_server);\r\n                rename($fileUpload->file_path_server . '_exif', $fileUpload->file_path_server);\r\n                $fileUpload->size = filesize($fileUpload->file_path_server);\r\n            }\r\n\r\n            $fileUpload->saveThis();\r\n\r\n            $file->id = $fileUpload->id;\r\n\r\n            if (isset($this->options['chat']) && $this->options['chat'] instanceof erLhcoreClassModelChat) {\r\n                // Chat assign\r\n                $chat = $this->options['chat'];\r\n\r\n                // Format message\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = '[file=' . $file->id . '_' . $fileUpload->security_hash . ']';\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = isset($this->options['user_id']) ? $this->options['user_id'] : 0;\r\n\r\n                // We save instantly as message only visitors files\r\n                if ($msg->user_id == 0 || (isset($this->options['as_form']) && $this->options['as_form'] == true)) {\r\n\r\n                    $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                    erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                    // Set last message ID\r\n                    if ($chat->last_msg_id < $msg->id) {\r\n                        $chat->last_msg_id = $msg->id;\r\n                    }\r\n\r\n                    if ($msg->user_id == 0) {\r\n                        if ($chat->gbot_id > 0 && (!isset($chat->chat_variables_array['gbot_disabled']) || $chat->chat_variables_array['gbot_disabled'] == 0)) {\r\n                            erLhcoreClassGenericBotWorkflow::userMessageAdded($chat, $msg);\r\n                        }\r\n                        $chat->has_unread_messages = 1;\r\n                    }\r\n\r\n                    $chat->updateThis(array('update' => array('last_user_msg_time','last_msg_id','has_unread_messages')));\r\n\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.addmsguser',array('file' => $fileUpload, 'msg' => & $msg, 'chat' => & $chat));\r\n                }\r\n            }\r\n\r\n            $this->uploadedFile = $fileUpload;\r\n        } else {\r\n            $this->uploadedFile = $file;\r\n        }\r\n\r\n        return $file;\r\n    }\r\n\r\n    public function delete($print_response = true)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public static function mkdirRecursive($path, $chown = false, $wwwUser = 'apache', $wwwUserGroup = 'apache')\r\n    {\r\n        $partsPath = explode('/', $path);\r\n        $pathCurrent = '';\r\n\r\n        foreach ($partsPath as $key => $path) {\r\n            $pathCurrent .= $path . '/';\r\n            if (!is_dir($pathCurrent)) {\r\n                mkdir($pathCurrent, 0755);\r\n                if ($chown == true) {\r\n                    chown($pathCurrent, $wwwUser);\r\n                    chgrp($pathCurrent, $wwwUserGroup);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function hasFiles($sourceDir)\r\n    {\r\n        if (!is_dir($sourceDir)) {\r\n            return true;\r\n        }\r\n\r\n        $elements = array();\r\n        $d = @dir($sourceDir);\r\n        if (!$d) {\r\n            return true;\r\n        }\r\n\r\n        while (($entry = $d->read()) !== false) {\r\n            if ($entry == '.' || $entry == '..') {\r\n                continue;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static function removeRecursiveIfEmpty($basePath, $removePath)\r\n    {\r\n        $removePath = trim($removePath, '/');\r\n        $partsRemove = explode('/', $removePath);\r\n\r\n        $pathElementsCount = count($partsRemove);\r\n        foreach ($partsRemove as $part) {\r\n            // We found some files/folders, so we have to exit\r\n            if (self::hasFiles($basePath . implode('/', $partsRemove)) === true) {\r\n                return;\r\n            } else {\r\n                //Folder is empty, delete this folder\r\n                @rmdir($basePath . implode('/', $partsRemove));\r\n            }\r\n            array_pop($partsRemove);\r\n        }\r\n    }\r\n}\r\n\r\n?>", "<?php\r\n\r\nclass erLhcoreClassFileUploadAdmin extends erLhcoreClassFileUpload\r\n{\r\n\r\n    public $uploadedFile = false;\r\n\r\n    // https://stackoverflow.com/questions/3614925/remove-exif-data-from-jpg-using-php\r\n    public static function removeExif($in, $out)\r\n    {\r\n        $buffer_len = 4096;\r\n        $fd_in = fopen($in, 'rb');\r\n        $fd_out = fopen($out, 'wb');\r\n        while (($buffer = fread($fd_in, $buffer_len))) {\r\n            //  \\xFF\\xE1\\xHH\\xLLExif\\x00\\x00 - Exif\r\n            //  \\xFF\\xE1\\xHH\\xLLhttp://      - XMP\r\n            //  \\xFF\\xE2\\xHH\\xLLICC_PROFILE  - ICC\r\n            //  \\xFF\\xED\\xHH\\xLLPhotoshop    - PH\r\n            while (preg_match('/\\xFF[\\xE1\\xE2\\xED\\xEE](.)(.)(exif|photoshop|http:|icc_profile|adobe)/si', $buffer, $match, PREG_OFFSET_CAPTURE)) {\r\n                $len = ord($match[1][0]) * 256 + ord($match[2][0]);\r\n                fwrite($fd_out, substr($buffer, 0, $match[0][1]));\r\n                $filepos = $match[0][1] + 2 + $len - strlen($buffer);\r\n                fseek($fd_in, $filepos, SEEK_CUR);\r\n                $buffer = fread($fd_in, $buffer_len);\r\n            }\r\n            fwrite($fd_out, $buffer, strlen($buffer));\r\n        }\r\n        fclose($fd_out);\r\n        fclose($fd_in);\r\n    }\r\n\r\n    protected function handle_file_upload($uploaded_file, $name, $size, $type, $error, $index = null, $content_range = null)\r\n    {\r\n\r\n        $matches = array();\r\n        if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $type, $matches)) {\r\n            $name = $uploadFileName = 'clipboard.' . $matches[1];\r\n        } else {\r\n            $uploadFileName = $name;\r\n        }\r\n\r\n        if (!preg_match($this->options['accept_file_types_lhc'], $uploadFileName)) {\r\n            throw new Exception($this->get_error_message('accept_file_types'));\r\n            return false;\r\n        }\r\n\r\n        $file = parent::handle_file_upload_parent(\r\n            $uploaded_file, $name, $size, $type, $error, $index, $content_range\r\n        );\r\n\r\n        if (empty($file->error)) {\r\n\r\n            $fileUpload = new erLhcoreClassModelChatFile();\r\n            $fileUpload->size = $file->size;\r\n            $fileUpload->type = $file->type;\r\n            $fileUpload->name = $file->name;\r\n            $fileUpload->date = time();\r\n            $fileUpload->user_id = isset($this->options['user_id']) ? $this->options['user_id'] : 0;\r\n            $fileUpload->upload_name = (isset($this->options['file_name_manual']) && $this->options['file_name_manual'] != '') ? $this->options['file_name_manual'] . ' - ' . $name : $name;\r\n            $fileUpload->file_path = $this->options['upload_dir'];\r\n            $fileUpload->chat_id = (isset($this->options['chat_id']) && $this->options['chat_id'] > 0) ? (int)$this->options['chat_id'] : 0;\r\n            $fileUpload->persistent = (isset($this->options['persistent']) && $this->options['persistent'] == true) ? 1 : 0;\r\n\r\n            if (isset($this->options['file_name_replace']) && $this->options['file_name_replace'] != '') {\r\n                $fileUpload->upload_name = $this->options['file_name_replace'];\r\n            }\r\n\r\n            $matches = array();\r\n            if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $fileUpload->type, $matches)) {\r\n                $fileUpload->extension = strtolower($matches[1]);\r\n            } else {\r\n                $partsFile = explode('.', $name);\r\n                $fileUpload->extension = strtolower(end($partsFile));\r\n            }\r\n\r\n            if (isset($this->options['remove_meta']) && $this->options['remove_meta'] == true && in_array($fileUpload->extension, array('jpg', 'jpeg', 'png', 'gif'))) {\r\n                self::removeExif($fileUpload->file_path_server, $fileUpload->file_path_server . '_exif');\r\n                unlink($fileUpload->file_path_server);\r\n                rename($fileUpload->file_path_server . '_exif', $fileUpload->file_path_server);\r\n                $fileUpload->size = filesize($fileUpload->file_path_server);\r\n            }\r\n\r\n            $fileUpload->saveThis();\r\n\r\n            $this->uploadedFile = $fileUpload;\r\n        } else {\r\n            throw new Exception($file->error);\r\n        }\r\n\r\n        return $file;\r\n    }\r\n}\r\n\r\n?>"], "fixing_code": ["<?php\r\n\r\nclass erLhcoreClassFileUpload extends UploadHandler\r\n{\r\n\r\n    public $uploadedFile = false;\r\n\r\n    protected function get_file_name($name, $type = null, $index = null, $content_range = null)\r\n    {\r\n        $name = sha1($name . erLhcoreClassModelForgotPassword::randomPassword(40) . time());\r\n        return md5($this->get_unique_filename(\r\n            $this->trim_file_name($name, $type, $index, $content_range),\r\n            $type,\r\n            $index,\r\n            $content_range\r\n        ));\r\n    }\r\n\r\n    protected function generate_response($content, $print_response = true)\r\n    {\r\n        parent::generate_response($content, false);\r\n    }\r\n\r\n    protected function handle_file_upload_parent($uploaded_file, $name, $size, $type, $error, $index, $content_range)\r\n    {\r\n        return parent::handle_file_upload(\r\n            $uploaded_file, $name, $size, $type, $error, $index, $content_range\r\n        );\r\n    }\r\n\r\n    protected function handle_file_upload($uploaded_file, $name, $size, $type, $error, $index = null, $content_range = null)\r\n    {\r\n\r\n        $matches = array();\r\n        if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $type, $matches)) {\r\n            $name = $uploadFileName = 'clipboard.' . $matches[1];\r\n        } else {\r\n            $uploadFileName = $name;\r\n        }\r\n\r\n        $file = parent::handle_file_upload(\r\n            $uploaded_file, $name, $size, $type, $error, $index, $content_range\r\n        );\r\n\r\n        if (!preg_match($this->options['accept_file_types_lhc'], $uploadFileName)) {\r\n            $file->error = $this->get_error_message('accept_file_types');\r\n            return false;\r\n        }\r\n\r\n        if (isset($this->options['antivirus']) && $this->options['antivirus'] !== false && is_object($this->options['antivirus']) && !$this->options['antivirus']->scan(realpath($this->options['upload_dir'] . $file->name))) {\r\n            unlink($this->options['upload_dir'] . $file->name);\r\n            erLhcoreClassFileUpload::removeRecursiveIfEmpty('var/', str_replace('var/', '', $this->options['upload_dir']));\r\n            $file->error = 'Virus found in file!';\r\n        }\r\n\r\n        if (empty($file->error)) {\r\n            $fileUpload = new erLhcoreClassModelChatFile();\r\n            $fileUpload->size = $file->size;\r\n            $fileUpload->type = $file->type;\r\n            $fileUpload->name = $file->name;\r\n            $fileUpload->date = time();\r\n            $fileUpload->user_id = isset($this->options['user_id']) ? $this->options['user_id'] : 0;\r\n            $fileUpload->upload_name = $name;\r\n            $fileUpload->file_path = $this->options['upload_dir'];\r\n\r\n            if (isset($this->options['chat']) && $this->options['chat'] instanceof erLhcoreClassModelChat) {\r\n                $fileUpload->chat_id = $this->options['chat']->id;\r\n            } elseif (isset($this->options['online_user']) && $this->options['online_user'] instanceof erLhcoreClassModelChatOnlineUser) {\r\n                $fileUpload->online_user_id = $this->options['online_user']->id;\r\n            }\r\n\r\n            $matches = array();\r\n            if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $fileUpload->type, $matches)) {\r\n                $fileUpload->extension = strtolower($matches[1]);\r\n            } else {\r\n                $partsFile = explode('.', $fileUpload->upload_name);\r\n                $fileUpload->extension = strtolower(end($partsFile));\r\n            }\r\n\r\n            if ($fileUpload->extension == 'svg') {\r\n                erLhcoreClassFileUploadAdmin::cleanSVG($fileUpload->file_path_server);\r\n                $file->size = $fileUpload->size = filesize($fileUpload->file_path_server);\r\n            }\r\n\r\n            if (isset($this->options['remove_meta']) && $this->options['remove_meta'] == true && in_array($fileUpload->extension, array('jpg', 'jpeg', 'png', 'gif'))) {\r\n                erLhcoreClassFileUploadAdmin::removeExif($fileUpload->file_path_server, $fileUpload->file_path_server . '_exif');\r\n                unlink($fileUpload->file_path_server);\r\n                rename($fileUpload->file_path_server . '_exif', $fileUpload->file_path_server);\r\n                $fileUpload->size = filesize($fileUpload->file_path_server);\r\n            }\r\n\r\n            $fileUpload->saveThis();\r\n\r\n            $file->id = $fileUpload->id;\r\n\r\n            if (isset($this->options['chat']) && $this->options['chat'] instanceof erLhcoreClassModelChat) {\r\n                // Chat assign\r\n                $chat = $this->options['chat'];\r\n\r\n                // Format message\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = '[file=' . $file->id . '_' . $fileUpload->security_hash . ']';\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = isset($this->options['user_id']) ? $this->options['user_id'] : 0;\r\n\r\n                // We save instantly as message only visitors files\r\n                if ($msg->user_id == 0 || (isset($this->options['as_form']) && $this->options['as_form'] == true)) {\r\n\r\n                    $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                    erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                    // Set last message ID\r\n                    if ($chat->last_msg_id < $msg->id) {\r\n                        $chat->last_msg_id = $msg->id;\r\n                    }\r\n\r\n                    if ($msg->user_id == 0) {\r\n                        if ($chat->gbot_id > 0 && (!isset($chat->chat_variables_array['gbot_disabled']) || $chat->chat_variables_array['gbot_disabled'] == 0)) {\r\n                            erLhcoreClassGenericBotWorkflow::userMessageAdded($chat, $msg);\r\n                        }\r\n                        $chat->has_unread_messages = 1;\r\n                    }\r\n\r\n                    $chat->updateThis(array('update' => array('last_user_msg_time','last_msg_id','has_unread_messages')));\r\n\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.addmsguser',array('file' => $fileUpload, 'msg' => & $msg, 'chat' => & $chat));\r\n                }\r\n            }\r\n\r\n            $this->uploadedFile = $fileUpload;\r\n        } else {\r\n            $this->uploadedFile = $file;\r\n        }\r\n\r\n        return $file;\r\n    }\r\n\r\n    public function delete($print_response = true)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public static function mkdirRecursive($path, $chown = false, $wwwUser = 'apache', $wwwUserGroup = 'apache')\r\n    {\r\n        $partsPath = explode('/', $path);\r\n        $pathCurrent = '';\r\n\r\n        foreach ($partsPath as $key => $path) {\r\n            $pathCurrent .= $path . '/';\r\n            if (!is_dir($pathCurrent)) {\r\n                mkdir($pathCurrent, 0755);\r\n                if ($chown == true) {\r\n                    chown($pathCurrent, $wwwUser);\r\n                    chgrp($pathCurrent, $wwwUserGroup);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function hasFiles($sourceDir)\r\n    {\r\n        if (!is_dir($sourceDir)) {\r\n            return true;\r\n        }\r\n\r\n        $elements = array();\r\n        $d = @dir($sourceDir);\r\n        if (!$d) {\r\n            return true;\r\n        }\r\n\r\n        while (($entry = $d->read()) !== false) {\r\n            if ($entry == '.' || $entry == '..') {\r\n                continue;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static function removeRecursiveIfEmpty($basePath, $removePath)\r\n    {\r\n        $removePath = trim($removePath, '/');\r\n        $partsRemove = explode('/', $removePath);\r\n\r\n        $pathElementsCount = count($partsRemove);\r\n        foreach ($partsRemove as $part) {\r\n            // We found some files/folders, so we have to exit\r\n            if (self::hasFiles($basePath . implode('/', $partsRemove)) === true) {\r\n                return;\r\n            } else {\r\n                //Folder is empty, delete this folder\r\n                @rmdir($basePath . implode('/', $partsRemove));\r\n            }\r\n            array_pop($partsRemove);\r\n        }\r\n    }\r\n}\r\n\r\n?>", "<?php\r\n\r\nclass erLhcoreClassFileUploadAdmin extends erLhcoreClassFileUpload\r\n{\r\n\r\n    public $uploadedFile = false;\r\n\r\n    // https://stackoverflow.com/questions/3614925/remove-exif-data-from-jpg-using-php\r\n    public static function removeExif($in, $out)\r\n    {\r\n        $buffer_len = 4096;\r\n        $fd_in = fopen($in, 'rb');\r\n        $fd_out = fopen($out, 'wb');\r\n        while (($buffer = fread($fd_in, $buffer_len))) {\r\n            //  \\xFF\\xE1\\xHH\\xLLExif\\x00\\x00 - Exif\r\n            //  \\xFF\\xE1\\xHH\\xLLhttp://      - XMP\r\n            //  \\xFF\\xE2\\xHH\\xLLICC_PROFILE  - ICC\r\n            //  \\xFF\\xED\\xHH\\xLLPhotoshop    - PH\r\n            while (preg_match('/\\xFF[\\xE1\\xE2\\xED\\xEE](.)(.)(exif|photoshop|http:|icc_profile|adobe)/si', $buffer, $match, PREG_OFFSET_CAPTURE)) {\r\n                $len = ord($match[1][0]) * 256 + ord($match[2][0]);\r\n                fwrite($fd_out, substr($buffer, 0, $match[0][1]));\r\n                $filepos = $match[0][1] + 2 + $len - strlen($buffer);\r\n                fseek($fd_in, $filepos, SEEK_CUR);\r\n                $buffer = fread($fd_in, $buffer_len);\r\n            }\r\n            fwrite($fd_out, $buffer, strlen($buffer));\r\n        }\r\n        fclose($fd_out);\r\n        fclose($fd_in);\r\n    }\r\n\r\n    protected function handle_file_upload($uploaded_file, $name, $size, $type, $error, $index = null, $content_range = null)\r\n    {\r\n\r\n        $matches = array();\r\n        if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $type, $matches)) {\r\n            $name = $uploadFileName = 'clipboard.' . $matches[1];\r\n        } else {\r\n            $uploadFileName = $name;\r\n        }\r\n\r\n        if (!preg_match($this->options['accept_file_types_lhc'], $uploadFileName)) {\r\n            throw new Exception($this->get_error_message('accept_file_types'));\r\n            return false;\r\n        }\r\n\r\n        $file = parent::handle_file_upload_parent(\r\n            $uploaded_file, $name, $size, $type, $error, $index, $content_range\r\n        );\r\n\r\n        if (empty($file->error)) {\r\n\r\n            $fileUpload = new erLhcoreClassModelChatFile();\r\n            $fileUpload->size = $file->size;\r\n            $fileUpload->type = $file->type;\r\n            $fileUpload->name = $file->name;\r\n            $fileUpload->date = time();\r\n            $fileUpload->user_id = isset($this->options['user_id']) ? $this->options['user_id'] : 0;\r\n            $fileUpload->upload_name = (isset($this->options['file_name_manual']) && $this->options['file_name_manual'] != '') ? $this->options['file_name_manual'] . ' - ' . $name : $name;\r\n            $fileUpload->file_path = $this->options['upload_dir'];\r\n            $fileUpload->chat_id = (isset($this->options['chat_id']) && $this->options['chat_id'] > 0) ? (int)$this->options['chat_id'] : 0;\r\n            $fileUpload->persistent = (isset($this->options['persistent']) && $this->options['persistent'] == true) ? 1 : 0;\r\n\r\n            if (isset($this->options['file_name_replace']) && $this->options['file_name_replace'] != '') {\r\n                $fileUpload->upload_name = $this->options['file_name_replace'];\r\n            }\r\n\r\n            $matches = array();\r\n            if (strpos($name, '.') === false && preg_match('/^image\\/(gif|jpe?g|png)/', $fileUpload->type, $matches)) {\r\n                $fileUpload->extension = strtolower($matches[1]);\r\n            } else {\r\n                $partsFile = explode('.', $name);\r\n                $fileUpload->extension = strtolower(end($partsFile));\r\n            }\r\n\r\n            if ($fileUpload->extension == 'svg') {\r\n                self::cleanSVG($fileUpload->file_path_server);\r\n                $file->size = $fileUpload->size = filesize($fileUpload->file_path_server);\r\n            }\r\n\r\n            if (isset($this->options['remove_meta']) && $this->options['remove_meta'] == true && in_array($fileUpload->extension, array('jpg', 'jpeg', 'png', 'gif'))) {\r\n                self::removeExif($fileUpload->file_path_server, $fileUpload->file_path_server . '_exif');\r\n                unlink($fileUpload->file_path_server);\r\n                rename($fileUpload->file_path_server . '_exif', $fileUpload->file_path_server);\r\n                $file->size = $fileUpload->size = filesize($fileUpload->file_path_server);\r\n            }\r\n\r\n            $fileUpload->saveThis();\r\n\r\n            $this->uploadedFile = $fileUpload;\r\n        } else {\r\n            throw new Exception($file->error);\r\n        }\r\n\r\n        return $file;\r\n    }\r\n\r\n    public static function cleanSVG($path)\r\n    {\r\n        $sanitizer = new \\enshrined\\svgSanitize\\Sanitizer();\r\n        $dirtySVG = file_get_contents($path);\r\n        $cleanSVG = $sanitizer->sanitize($dirtySVG);\r\n        file_put_contents($path.'_svg', $cleanSVG);\r\n        unlink($path);\r\n        rename($path.'_svg', $path);\r\n    }\r\n}\r\n\r\n?>"], "filenames": ["lhc_web/lib/core/lhcore/lhfileupload.php", "lhc_web/lib/core/lhcore/lhfileuploadadmin.php"], "buggy_code_start_loc": [74, 75], "buggy_code_end_loc": [78, 91], "fixing_code_start_loc": [74, 76], "fixing_code_end_loc": [83, 107], "type": "CWE-79", "message": "livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4050", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-08T11:15:11.933", "lastModified": "2021-12-09T21:13:37.540", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "livehelperchat es vulnerable a una Neutralizaci\u00f3n inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:-:*:*:*:*:*:*:*", "matchCriteriaId": "62632E1D-C144-4FFB-900E-345918290D85"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/0ce1dd2a13509747c240c8484228a5df8d6e03ec", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/27eb39d7-7636-4c4b-922c-a2f8fbe1ba05", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/0ce1dd2a13509747c240c8484228a5df8d6e03ec"}}