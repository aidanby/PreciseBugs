{"buggy_code": ["// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * USB IBM C-It Video Camera driver\n *\n * Supports Xirlink C-It Video Camera, IBM PC Camera,\n * IBM NetCamera and Veo Stingray.\n *\n * Copyright (C) 2010 Hans de Goede <hdegoede@redhat.com>\n *\n * This driver is based on earlier work of:\n *\n * (C) Copyright 1999 Johannes Erdfelt\n * (C) Copyright 1999 Randy Dunlap\n */\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#define MODULE_NAME \"xirlink-cit\"\n\n#include <linux/input.h>\n#include \"gspca.h\"\n\nMODULE_AUTHOR(\"Hans de Goede <hdegoede@redhat.com>\");\nMODULE_DESCRIPTION(\"Xirlink C-IT\");\nMODULE_LICENSE(\"GPL\");\n\n/* FIXME we should autodetect this */\nstatic int ibm_netcam_pro;\nmodule_param(ibm_netcam_pro, int, 0);\nMODULE_PARM_DESC(ibm_netcam_pro,\n\t\t \"Use IBM Netcamera Pro init sequences for Model 3 cams\");\n\n/* FIXME this should be handled through the V4L2 input selection API */\nstatic int rca_input;\nmodule_param(rca_input, int, 0644);\nMODULE_PARM_DESC(rca_input,\n\t\t \"Use rca input instead of ccd sensor on Model 3 cams\");\n\n/* specific webcam descriptor */\nstruct sd {\n\tstruct gspca_dev gspca_dev;\t\t/* !! must be the first item */\n\tstruct v4l2_ctrl *lighting;\n\tu8 model;\n#define CIT_MODEL0 0 /* bcd version 0.01 cams ie the xvp-500 */\n#define CIT_MODEL1 1 /* The model 1 - 4 nomenclature comes from the old */\n#define CIT_MODEL2 2 /* ibmcam driver */\n#define CIT_MODEL3 3\n#define CIT_MODEL4 4\n#define CIT_IBM_NETCAM_PRO 5\n\tu8 input_index;\n\tu8 button_state;\n\tu8 stop_on_control_change;\n\tu8 sof_read;\n\tu8 sof_len;\n};\n\nstatic void sd_stop0(struct gspca_dev *gspca_dev);\n\nstatic const struct v4l2_pix_format cif_yuv_mode[] = {\n\t{176, 144, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 176,\n\t\t.sizeimage = 176 * 144 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{352, 288, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 352,\n\t\t.sizeimage = 352 * 288 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\nstatic const struct v4l2_pix_format vga_yuv_mode[] = {\n\t{160, 120, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 160,\n\t\t.sizeimage = 160 * 120 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{320, 240, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 320,\n\t\t.sizeimage = 320 * 240 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{640, 480, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 640,\n\t\t.sizeimage = 640 * 480 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\nstatic const struct v4l2_pix_format model0_mode[] = {\n\t{160, 120, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 160,\n\t\t.sizeimage = 160 * 120 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{176, 144, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 176,\n\t\t.sizeimage = 176 * 144 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{320, 240, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 320,\n\t\t.sizeimage = 320 * 240 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\nstatic const struct v4l2_pix_format model2_mode[] = {\n\t{160, 120, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 160,\n\t\t.sizeimage = 160 * 120 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{176, 144, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 176,\n\t\t.sizeimage = 176 * 144 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{320, 240, V4L2_PIX_FMT_SGRBG8, V4L2_FIELD_NONE,\n\t\t.bytesperline = 320,\n\t\t.sizeimage = 320 * 240 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{352, 288, V4L2_PIX_FMT_SGRBG8, V4L2_FIELD_NONE,\n\t\t.bytesperline = 352,\n\t\t.sizeimage = 352 * 288 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\n/*\n * 01.01.08 - Added for RCA video in support -LO\n * This struct is used to init the Model3 cam to use the RCA video in port\n * instead of the CCD sensor.\n */\nstatic const u16 rca_initdata[][3] = {\n\t{0, 0x0000, 0x010c},\n\t{0, 0x0006, 0x012c},\n\t{0, 0x0078, 0x012d},\n\t{0, 0x0046, 0x012f},\n\t{0, 0xd141, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfea8, 0x0124},\n\t{1, 0x0000, 0x0116},\n\t{0, 0x0064, 0x0116},\n\t{1, 0x0000, 0x0115},\n\t{0, 0x0003, 0x0115},\n\t{0, 0x0008, 0x0123},\n\t{0, 0x0000, 0x0117},\n\t{0, 0x0000, 0x0112},\n\t{0, 0x0080, 0x0100},\n\t{0, 0x0000, 0x0100},\n\t{1, 0x0000, 0x0116},\n\t{0, 0x0060, 0x0116},\n\t{0, 0x0002, 0x0112},\n\t{0, 0x0000, 0x0123},\n\t{0, 0x0001, 0x0117},\n\t{0, 0x0040, 0x0108},\n\t{0, 0x0019, 0x012c},\n\t{0, 0x0040, 0x0116},\n\t{0, 0x000a, 0x0115},\n\t{0, 0x000b, 0x0115},\n\t{0, 0x0078, 0x012d},\n\t{0, 0x0046, 0x012f},\n\t{0, 0xd141, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfea8, 0x0124},\n\t{0, 0x0064, 0x0116},\n\t{0, 0x0000, 0x0115},\n\t{0, 0x0001, 0x0115},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00aa, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f2, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x000f, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f8, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00fc, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f9, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x003c, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0027, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0019, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0021, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0006, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0045, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002a, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x000e, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002b, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f4, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002c, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0004, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002d, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0014, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002e, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0003, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002f, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0003, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0014, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0053, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0x0000, 0x0101},\n\t{0, 0x00a0, 0x0103},\n\t{0, 0x0078, 0x0105},\n\t{0, 0x0000, 0x010a},\n\t{0, 0x0024, 0x010b},\n\t{0, 0x0028, 0x0119},\n\t{0, 0x0088, 0x011b},\n\t{0, 0x0002, 0x011d},\n\t{0, 0x0003, 0x011e},\n\t{0, 0x0000, 0x0129},\n\t{0, 0x00fc, 0x012b},\n\t{0, 0x0008, 0x0102},\n\t{0, 0x0000, 0x0104},\n\t{0, 0x0008, 0x011a},\n\t{0, 0x0028, 0x011c},\n\t{0, 0x0021, 0x012a},\n\t{0, 0x0000, 0x0118},\n\t{0, 0x0000, 0x0132},\n\t{0, 0x0000, 0x0109},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0031, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00dc, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0032, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0020, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0030, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0008, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0x0003, 0x0111},\n};\n\n/* TESTME the old ibmcam driver repeats certain commands to Model1 cameras, we\n   do the same for now (testing needed to see if this is really necessary) */\nstatic const int cit_model1_ntries = 5;\nstatic const int cit_model1_ntries2 = 2;\n\nstatic int cit_write_reg(struct gspca_dev *gspca_dev, u16 value, u16 index)\n{\n\tstruct usb_device *udev = gspca_dev->dev;\n\tint err;\n\n\terr = usb_control_msg(udev, usb_sndctrlpipe(udev, 0), 0x00,\n\t\t\tUSB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_ENDPOINT,\n\t\t\tvalue, index, NULL, 0, 1000);\n\tif (err < 0)\n\t\tpr_err(\"Failed to write a register (index 0x%04X, value 0x%02X, error %d)\\n\",\n\t\t       index, value, err);\n\n\treturn 0;\n}\n\nstatic int cit_read_reg(struct gspca_dev *gspca_dev, u16 index, int verbose)\n{\n\tstruct usb_device *udev = gspca_dev->dev;\n\t__u8 *buf = gspca_dev->usb_buf;\n\tint res;\n\n\tres = usb_control_msg(udev, usb_rcvctrlpipe(udev, 0), 0x01,\n\t\t\tUSB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_ENDPOINT,\n\t\t\t0x00, index, buf, 8, 1000);\n\tif (res < 0) {\n\t\tpr_err(\"Failed to read a register (index 0x%04X, error %d)\\n\",\n\t\t       index, res);\n\t\treturn res;\n\t}\n\n\tif (verbose)\n\t\tgspca_dbg(gspca_dev, D_PROBE, \"Register %04x value: %02x\\n\",\n\t\t\t  index, buf[0]);\n\n\treturn 0;\n}\n\n/*\n * cit_send_FF_04_02()\n *\n * This procedure sends magic 3-command prefix to the camera.\n * The purpose of this prefix is not known.\n *\n * History:\n * 1/2/00   Created.\n */\nstatic void cit_send_FF_04_02(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x00FF, 0x0127);\n\tcit_write_reg(gspca_dev, 0x0004, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n}\n\nstatic void cit_send_00_04_06(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\tcit_write_reg(gspca_dev, 0x0004, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0006, 0x0124);\n}\n\nstatic void cit_send_x_00(struct gspca_dev *gspca_dev, unsigned short x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n}\n\nstatic void cit_send_x_00_05(struct gspca_dev *gspca_dev, unsigned short x)\n{\n\tcit_send_x_00(gspca_dev, x);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n}\n\nstatic void cit_send_x_00_05_02(struct gspca_dev *gspca_dev, unsigned short x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n}\n\nstatic void cit_send_x_01_00_05(struct gspca_dev *gspca_dev, u16 x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n}\n\nstatic void cit_send_x_00_05_02_01(struct gspca_dev *gspca_dev, u16 x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0124);\n}\n\nstatic void cit_send_x_00_05_02_08_01(struct gspca_dev *gspca_dev, u16 x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0124);\n}\n\nstatic void cit_Packet_Format1(struct gspca_dev *gspca_dev, u16 fkey, u16 val)\n{\n\tcit_send_x_01_00_05(gspca_dev, 0x0088);\n\tcit_send_x_00_05(gspca_dev, fkey);\n\tcit_send_x_00_05_02_08_01(gspca_dev, val);\n\tcit_send_x_00_05(gspca_dev, 0x0088);\n\tcit_send_x_00_05_02_01(gspca_dev, fkey);\n\tcit_send_x_00_05(gspca_dev, 0x0089);\n\tcit_send_x_00(gspca_dev, fkey);\n\tcit_send_00_04_06(gspca_dev);\n\tcit_read_reg(gspca_dev, 0x0126, 0);\n\tcit_send_FF_04_02(gspca_dev);\n}\n\nstatic void cit_PacketFormat2(struct gspca_dev *gspca_dev, u16 fkey, u16 val)\n{\n\tcit_send_x_01_00_05(gspca_dev, 0x0088);\n\tcit_send_x_00_05(gspca_dev, fkey);\n\tcit_send_x_00_05_02(gspca_dev, val);\n}\n\nstatic void cit_model2_Packet2(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x00ff, 0x012d);\n\tcit_write_reg(gspca_dev, 0xfea3, 0x0124);\n}\n\nstatic void cit_model2_Packet1(struct gspca_dev *gspca_dev, u16 v1, u16 v2)\n{\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x00ff, 0x012e);\n\tcit_write_reg(gspca_dev, v1,     0x012f);\n\tcit_write_reg(gspca_dev, 0x00ff, 0x0130);\n\tcit_write_reg(gspca_dev, 0xc719, 0x0124);\n\tcit_write_reg(gspca_dev, v2,     0x0127);\n\n\tcit_model2_Packet2(gspca_dev);\n}\n\n/*\n * cit_model3_Packet1()\n *\n * 00_0078_012d\n * 00_0097_012f\n * 00_d141_0124\n * 00_0096_0127\n * 00_fea8_0124\n*/\nstatic void cit_model3_Packet1(struct gspca_dev *gspca_dev, u16 v1, u16 v2)\n{\n\tcit_write_reg(gspca_dev, 0x0078, 0x012d);\n\tcit_write_reg(gspca_dev, v1,     0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, v2,     0x0127);\n\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n}\n\nstatic void cit_model4_Packet1(struct gspca_dev *gspca_dev, u16 v1, u16 v2)\n{\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, v1,     0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, v2,     0x0127);\n\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n}\n\nstatic void cit_model4_BrightnessPacket(struct gspca_dev *gspca_dev, u16 val)\n{\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0026, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, val,    0x0127);\n\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0038, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0004, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n}\n\n/* this function is called at probe time */\nstatic int sd_config(struct gspca_dev *gspca_dev,\n\t\t     const struct usb_device_id *id)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tstruct cam *cam;\n\n\tsd->model = id->driver_info;\n\tif (sd->model == CIT_MODEL3 && ibm_netcam_pro)\n\t\tsd->model = CIT_IBM_NETCAM_PRO;\n\n\tcam = &gspca_dev->cam;\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tcam->cam_mode = model0_mode;\n\t\tcam->nmodes = ARRAY_SIZE(model0_mode);\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\tcam->cam_mode = cif_yuv_mode;\n\t\tcam->nmodes = ARRAY_SIZE(cif_yuv_mode);\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tcam->cam_mode = model2_mode + 1; /* no 160x120 */\n\t\tcam->nmodes = 3;\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tcam->cam_mode = vga_yuv_mode;\n\t\tcam->nmodes = ARRAY_SIZE(vga_yuv_mode);\n\t\tsd->stop_on_control_change = 1;\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\tcam->cam_mode = model2_mode;\n\t\tcam->nmodes = ARRAY_SIZE(model2_mode);\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcam->cam_mode = vga_yuv_mode;\n\t\tcam->nmodes = 2; /* no 640 x 480 */\n\t\tcam->input_flags = V4L2_IN_ST_VFLIP;\n\t\tsd->stop_on_control_change = 1;\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int cit_init_model0(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100); /* turn on led */\n\tcit_write_reg(gspca_dev, 0x0001, 0x0112); /* turn on autogain ? */\n\tcit_write_reg(gspca_dev, 0x0000, 0x0400);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0400);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0420);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0420);\n\tcit_write_reg(gspca_dev, 0x000d, 0x0409);\n\tcit_write_reg(gspca_dev, 0x0002, 0x040a);\n\tcit_write_reg(gspca_dev, 0x0018, 0x0405);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0435);\n\tcit_write_reg(gspca_dev, 0x0026, 0x040b);\n\tcit_write_reg(gspca_dev, 0x0007, 0x0437);\n\tcit_write_reg(gspca_dev, 0x0015, 0x042f);\n\tcit_write_reg(gspca_dev, 0x002b, 0x0439);\n\tcit_write_reg(gspca_dev, 0x0026, 0x043a);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0438);\n\tcit_write_reg(gspca_dev, 0x001e, 0x042b);\n\tcit_write_reg(gspca_dev, 0x0041, 0x042c);\n\n\treturn 0;\n}\n\nstatic int cit_init_ibm_netcam_pro(struct gspca_dev *gspca_dev)\n{\n\tcit_read_reg(gspca_dev, 0x128, 1);\n\tcit_write_reg(gspca_dev, 0x0003, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0112);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0040, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0019, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0115);\n\tcit_write_reg(gspca_dev, 0x000b, 0x0115);\n\n\tcit_write_reg(gspca_dev, 0x0078, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0001, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0079, 0x012d);\n\tcit_write_reg(gspca_dev, 0x00ff, 0x0130);\n\tcit_write_reg(gspca_dev, 0xcd41, 0x0124);\n\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\tcit_read_reg(gspca_dev, 0x0126, 1);\n\n\tcit_model3_Packet1(gspca_dev, 0x0000, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0000, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x000b, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x000c, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x000d, 0x003a);\n\tcit_model3_Packet1(gspca_dev, 0x000e, 0x0060);\n\tcit_model3_Packet1(gspca_dev, 0x000f, 0x0060);\n\tcit_model3_Packet1(gspca_dev, 0x0010, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0011, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x0012, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x0013, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0014, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0015, 0x00fb);\n\tcit_model3_Packet1(gspca_dev, 0x0016, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0017, 0x0037);\n\tcit_model3_Packet1(gspca_dev, 0x0018, 0x0036);\n\tcit_model3_Packet1(gspca_dev, 0x001e, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0020, 0x00c1);\n\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0034);\n\tcit_model3_Packet1(gspca_dev, 0x0022, 0x0034);\n\tcit_model3_Packet1(gspca_dev, 0x0025, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0028, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x0029, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x002b, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x002c, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x002d, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x002e, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x002f, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x0030, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x0031, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x0032, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x0033, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0037, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x0039, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x003a, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x003b, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x003c, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0040, 0x000c);\n\tcit_model3_Packet1(gspca_dev, 0x0041, 0x00fb);\n\tcit_model3_Packet1(gspca_dev, 0x0042, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0043, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0045, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0046, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0047, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0048, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0049, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x004a, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x004b, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x004c, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x004f, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0050, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0051, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0055, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0056, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0057, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0058, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0059, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x005c, 0x0016);\n\tcit_model3_Packet1(gspca_dev, 0x005d, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x005e, 0x003c);\n\tcit_model3_Packet1(gspca_dev, 0x005f, 0x0050);\n\tcit_model3_Packet1(gspca_dev, 0x0060, 0x0044);\n\tcit_model3_Packet1(gspca_dev, 0x0061, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x006a, 0x007e);\n\tcit_model3_Packet1(gspca_dev, 0x006f, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0072, 0x001b);\n\tcit_model3_Packet1(gspca_dev, 0x0073, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0074, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0075, 0x001b);\n\tcit_model3_Packet1(gspca_dev, 0x0076, 0x002a);\n\tcit_model3_Packet1(gspca_dev, 0x0077, 0x003c);\n\tcit_model3_Packet1(gspca_dev, 0x0078, 0x0050);\n\tcit_model3_Packet1(gspca_dev, 0x007b, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x007c, 0x0011);\n\tcit_model3_Packet1(gspca_dev, 0x007d, 0x0024);\n\tcit_model3_Packet1(gspca_dev, 0x007e, 0x0043);\n\tcit_model3_Packet1(gspca_dev, 0x007f, 0x005a);\n\tcit_model3_Packet1(gspca_dev, 0x0084, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x0085, 0x0033);\n\tcit_model3_Packet1(gspca_dev, 0x0086, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0087, 0x0030);\n\tcit_model3_Packet1(gspca_dev, 0x0088, 0x0070);\n\tcit_model3_Packet1(gspca_dev, 0x008b, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x008f, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0090, 0x0006);\n\tcit_model3_Packet1(gspca_dev, 0x0091, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x0092, 0x005a);\n\tcit_model3_Packet1(gspca_dev, 0x0093, 0x0082);\n\tcit_model3_Packet1(gspca_dev, 0x0096, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x0097, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x0098, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00b0, 0x0046);\n\tcit_model3_Packet1(gspca_dev, 0x00b1, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00b2, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00b3, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00b4, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x00b6, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x00b7, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00bb, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00bc, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00bd, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00bf, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c0, 0x00c8);\n\tcit_model3_Packet1(gspca_dev, 0x00c1, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x00c2, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00c3, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c4, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00cb, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00cc, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00cd, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00ce, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00cf, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x00d0, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x00d1, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00d1, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00d2, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00d3, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00ea, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x00eb, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00ec, 0x00e8);\n\tcit_model3_Packet1(gspca_dev, 0x00ed, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00ef, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x00f0, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00f2, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x00f4, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x00f5, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fa, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fb, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00fc, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fd, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fe, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00ff, 0x0000);\n\n\tcit_model3_Packet1(gspca_dev, 0x00be, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x00c8, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c9, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x00ca, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x0053, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0082, 0x000e);\n\tcit_model3_Packet1(gspca_dev, 0x0083, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x0034, 0x003c);\n\tcit_model3_Packet1(gspca_dev, 0x006e, 0x0055);\n\tcit_model3_Packet1(gspca_dev, 0x0062, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0063, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0066, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0067, 0x0006);\n\tcit_model3_Packet1(gspca_dev, 0x006b, 0x0010);\n\tcit_model3_Packet1(gspca_dev, 0x005a, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x005b, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0023, 0x0006);\n\tcit_model3_Packet1(gspca_dev, 0x0026, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x0036, 0x0069);\n\tcit_model3_Packet1(gspca_dev, 0x0038, 0x0064);\n\tcit_model3_Packet1(gspca_dev, 0x003d, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x003e, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00b8, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x00b9, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x00e6, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00e8, 0x0001);\n\n\treturn 0;\n}\n\n/* this function is called at probe and resume time */\nstatic int sd_init(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tcit_init_model0(gspca_dev);\n\t\tsd_stop0(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL1:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL3:\n\tcase CIT_MODEL4:\n\t\tbreak; /* All is done in sd_start */\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_init_ibm_netcam_pro(gspca_dev);\n\t\tsd_stop0(gspca_dev);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int cit_set_brightness(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint i;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\t/* No (known) brightness control for these */\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\t/* Model 1: Brightness range 0 - 63 */\n\t\tcit_Packet_Format1(gspca_dev, 0x0031, val);\n\t\tcit_Packet_Format1(gspca_dev, 0x0032, val);\n\t\tcit_Packet_Format1(gspca_dev, 0x0033, val);\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\t/* Model 2: Brightness range 0x60 - 0xee */\n\t\t/* Scale 0 - 63 to 0x60 - 0xee */\n\t\ti = 0x60 + val * 2254 / 1000;\n\t\tcit_model2_Packet1(gspca_dev, 0x001a, i);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\t/* Model 3: Brightness range 'i' in [0x0C..0x3F] */\n\t\ti = val;\n\t\tif (i < 0x0c)\n\t\t\ti = 0x0c;\n\t\tcit_model3_Packet1(gspca_dev, 0x0036, i);\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\t/* Model 4: Brightness range 'i' in [0x04..0xb4] */\n\t\t/* Scale 0 - 63 to 0x04 - 0xb4 */\n\t\ti = 0x04 + val * 2794 / 1000;\n\t\tcit_model4_BrightnessPacket(gspca_dev, i);\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int cit_set_contrast(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0: {\n\t\tint i;\n\t\t/* gain 0-15, 0-20 -> 0-15 */\n\t\ti = val * 1000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0422);\n\t\t/* gain 0-31, may not be lower then 0x0422, 0-20 -> 0-31 */\n\t\ti = val * 2000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0423);\n\t\t/* gain 0-127, may not be lower then 0x0423, 0-20 -> 0-63  */\n\t\ti = val * 4000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0424);\n\t\t/* gain 0-127, may not be lower then 0x0424, , 0-20 -> 0-127 */\n\t\ti = val * 8000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0425);\n\t\tbreak;\n\t}\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\t/* These models do not have this control. */\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t{\n\t\t/* Scale 0 - 20 to 15 - 0 */\n\t\tint i, new_contrast = (20 - val) * 1000 / 1333;\n\t\tfor (i = 0; i < cit_model1_ntries; i++) {\n\t\t\tcit_Packet_Format1(gspca_dev, 0x0014, new_contrast);\n\t\t\tcit_send_FF_04_02(gspca_dev);\n\t\t}\n\t\tbreak;\n\t}\n\tcase CIT_MODEL3:\n\t{\t/* Preset hardware values */\n\t\tstatic const struct {\n\t\t\tunsigned short cv1;\n\t\t\tunsigned short cv2;\n\t\t\tunsigned short cv3;\n\t\t} cv[7] = {\n\t\t\t{ 0x05, 0x05, 0x0f },\t/* Minimum */\n\t\t\t{ 0x04, 0x04, 0x16 },\n\t\t\t{ 0x02, 0x03, 0x16 },\n\t\t\t{ 0x02, 0x08, 0x16 },\n\t\t\t{ 0x01, 0x0c, 0x16 },\n\t\t\t{ 0x01, 0x0e, 0x16 },\n\t\t\t{ 0x01, 0x10, 0x16 }\t/* Maximum */\n\t\t};\n\t\tint i = val / 3;\n\t\tcit_model3_Packet1(gspca_dev, 0x0067, cv[i].cv1);\n\t\tcit_model3_Packet1(gspca_dev, 0x005b, cv[i].cv2);\n\t\tcit_model3_Packet1(gspca_dev, 0x005c, cv[i].cv3);\n\t\tbreak;\n\t}\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_model3_Packet1(gspca_dev, 0x005b, val + 1);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int cit_set_hue(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\t/* No hue control for these models */\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tcit_model2_Packet1(gspca_dev, 0x0024, val);\n\t\t/* cit_model2_Packet1(gspca_dev, 0x0020, sat); */\n\t\tbreak;\n\tcase CIT_MODEL3: {\n\t\t/* Model 3: Brightness range 'i' in [0x05..0x37] */\n\t\t/* TESTME according to the ibmcam driver this does not work */\n\t\tif (0) {\n\t\t\t/* Scale 0 - 127 to 0x05 - 0x37 */\n\t\t\tint i = 0x05 + val * 1000 / 2540;\n\t\t\tcit_model3_Packet1(gspca_dev, 0x007e, i);\n\t\t}\n\t\tbreak;\n\t}\n\tcase CIT_MODEL4:\n\t\t/* HDG: taken from ibmcam, setting the color gains does not\n\t\t * really belong here.\n\t\t *\n\t\t * I am not sure r/g/b_gain variables exactly control gain\n\t\t * of those channels. Most likely they subtly change some\n\t\t * very internal image processing settings in the camera.\n\t\t * In any case, here is what they do, and feel free to tweak:\n\t\t *\n\t\t * r_gain: seriously affects red gain\n\t\t * g_gain: seriously affects green gain\n\t\t * b_gain: seriously affects blue gain\n\t\t * hue: changes average color from violet (0) to red (0xFF)\n\t\t */\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev,    160, 0x0127);  /* Green gain */\n\t\tcit_write_reg(gspca_dev,    160, 0x012e);  /* Red gain */\n\t\tcit_write_reg(gspca_dev,    160, 0x0130);  /* Blue gain */\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, val, 0x012d); /* Hue */\n\t\tcit_write_reg(gspca_dev, 0xf545, 0x0124);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int cit_set_sharpness(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\t/* These models do not have this control */\n\t\tbreak;\n\tcase CIT_MODEL1: {\n\t\tint i;\n\t\tstatic const unsigned short sa[] = {\n\t\t\t0x11, 0x13, 0x16, 0x18, 0x1a, 0x8, 0x0a };\n\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_PacketFormat2(gspca_dev, 0x0013, sa[val]);\n\t\tbreak;\n\t}\n\tcase CIT_MODEL3:\n\t{\t/*\n\t\t * \"Use a table of magic numbers.\n\t\t *  This setting doesn't really change much.\n\t\t *  But that's how Windows does it.\"\n\t\t */\n\t\tstatic const struct {\n\t\t\tunsigned short sv1;\n\t\t\tunsigned short sv2;\n\t\t\tunsigned short sv3;\n\t\t\tunsigned short sv4;\n\t\t} sv[7] = {\n\t\t\t{ 0x00, 0x00, 0x05, 0x14 },\t/* Smoothest */\n\t\t\t{ 0x01, 0x04, 0x05, 0x14 },\n\t\t\t{ 0x02, 0x04, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x04, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x05, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x06, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x07, 0x05, 0x14 }\t/* Sharpest */\n\t\t};\n\t\tcit_model3_Packet1(gspca_dev, 0x0060, sv[val].sv1);\n\t\tcit_model3_Packet1(gspca_dev, 0x0061, sv[val].sv2);\n\t\tcit_model3_Packet1(gspca_dev, 0x0062, sv[val].sv3);\n\t\tcit_model3_Packet1(gspca_dev, 0x0063, sv[val].sv4);\n\t\tbreak;\n\t}\n\t}\n\treturn 0;\n}\n\n/*\n * cit_set_lighting()\n *\n * Camera model 1:\n * We have 3 levels of lighting conditions: 0=Bright, 1=Medium, 2=Low.\n *\n * Camera model 2:\n * We have 16 levels of lighting, 0 for bright light and up to 15 for\n * low light. But values above 5 or so are useless because camera is\n * not really capable to produce anything worth viewing at such light.\n * This setting may be altered only in certain camera state.\n *\n * Low lighting forces slower FPS.\n *\n * History:\n * 1/5/00   Created.\n * 2/20/00  Added support for Model 2 cameras.\n */\nstatic void cit_set_lighting(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL3:\n\tcase CIT_MODEL4:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tbreak;\n\tcase CIT_MODEL1: {\n\t\tint i;\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x0027, val);\n\t\tbreak;\n\t}\n\t}\n}\n\nstatic void cit_set_hflip(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tif (val)\n\t\t\tcit_write_reg(gspca_dev, 0x0020, 0x0115);\n\t\telse\n\t\t\tcit_write_reg(gspca_dev, 0x0040, 0x0115);\n\t\tbreak;\n\tcase CIT_MODEL1:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL3:\n\tcase CIT_MODEL4:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tbreak;\n\t}\n}\n\nstatic int cit_restart_stream(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0114);\n\t\t/* Fall through */\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x010c); /* Go! */\n\t\tusb_clear_halt(gspca_dev->dev, gspca_dev->urb[0]->pipe);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0114);\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x010c); /* Go! */\n\t\tusb_clear_halt(gspca_dev->dev, gspca_dev->urb[0]->pipe);\n\t\t/* Clear button events from while we were not streaming */\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0113);\n\t\tbreak;\n\t}\n\n\tsd->sof_read = 0;\n\n\treturn 0;\n}\n\nstatic int cit_get_packet_size(struct gspca_dev *gspca_dev)\n{\n\tstruct usb_host_interface *alt;\n\tstruct usb_interface *intf;\n\n\tintf = usb_ifnum_to_if(gspca_dev->dev, gspca_dev->iface);\n\talt = usb_altnum_to_altsetting(intf, gspca_dev->alt);\n\tif (!alt) {\n\t\tpr_err(\"Couldn't get altsetting\\n\");\n\t\treturn -EIO;\n\t}\n\n\treturn le16_to_cpu(alt->endpoint[0].desc.wMaxPacketSize);\n}\n\n/* Calculate the clockdiv giving us max fps given the available bandwidth */\nstatic int cit_get_clock_div(struct gspca_dev *gspca_dev)\n{\n\tint clock_div = 7; /* 0=30 1=25 2=20 3=15 4=12 5=7.5 6=6 7=3fps ?? */\n\tint fps[8] = { 30, 25, 20, 15, 12, 8, 6, 3 };\n\tint packet_size;\n\n\tpacket_size = cit_get_packet_size(gspca_dev);\n\tif (packet_size < 0)\n\t\treturn packet_size;\n\n\twhile (clock_div > 3 &&\n\t\t\t1000 * packet_size >\n\t\t\tgspca_dev->pixfmt.width * gspca_dev->pixfmt.height *\n\t\t\tfps[clock_div - 1] * 3 / 2)\n\t\tclock_div--;\n\n\tgspca_dbg(gspca_dev, D_PROBE,\n\t\t  \"PacketSize: %d, res: %dx%d -> using clockdiv: %d (%d fps)\\n\",\n\t\t  packet_size,\n\t\t  gspca_dev->pixfmt.width, gspca_dev->pixfmt.height,\n\t\t  clock_div, fps[clock_div]);\n\n\treturn clock_div;\n}\n\nstatic int cit_start_model0(struct gspca_dev *gspca_dev)\n{\n\tconst unsigned short compression = 0; /* 0=none, 7=best frame rate */\n\tint clock_div;\n\n\tclock_div = cit_get_clock_div(gspca_dev);\n\tif (clock_div < 0)\n\t\treturn clock_div;\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100); /* turn on led */\n\tcit_write_reg(gspca_dev, 0x0003, 0x0438);\n\tcit_write_reg(gspca_dev, 0x001e, 0x042b);\n\tcit_write_reg(gspca_dev, 0x0041, 0x042c);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0436);\n\tcit_write_reg(gspca_dev, 0x0024, 0x0403);\n\tcit_write_reg(gspca_dev, 0x002c, 0x0404);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0426);\n\tcit_write_reg(gspca_dev, 0x0014, 0x0427);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160: /* 160x120 */\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105);\n\t\tbreak;\n\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0005, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x00b0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0090, 0x0105);\n\t\tbreak;\n\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0005, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105);\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, compression, 0x0109);\n\tcit_write_reg(gspca_dev, clock_div, 0x0111);\n\n\treturn 0;\n}\n\nstatic int cit_start_model1(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint i, clock_div;\n\n\tclock_div = cit_get_clock_div(gspca_dev);\n\tif (clock_div < 0)\n\t\treturn clock_div;\n\n\tcit_read_reg(gspca_dev, 0x0128, 1);\n\tcit_read_reg(gspca_dev, 0x0100, 0);\n\tcit_write_reg(gspca_dev, 0x01, 0x0100);\t/* LED On  */\n\tcit_read_reg(gspca_dev, 0x0100, 0);\n\tcit_write_reg(gspca_dev, 0x81, 0x0100);\t/* LED Off */\n\tcit_read_reg(gspca_dev, 0x0100, 0);\n\tcit_write_reg(gspca_dev, 0x01, 0x0100);\t/* LED On  */\n\tcit_write_reg(gspca_dev, 0x01, 0x0108);\n\n\tcit_write_reg(gspca_dev, 0x03, 0x0112);\n\tcit_read_reg(gspca_dev, 0x0115, 0);\n\tcit_write_reg(gspca_dev, 0x06, 0x0115);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x44, 0x0116);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x40, 0x0116);\n\tcit_read_reg(gspca_dev, 0x0115, 0);\n\tcit_write_reg(gspca_dev, 0x0e, 0x0115);\n\tcit_write_reg(gspca_dev, 0x19, 0x012c);\n\n\tcit_Packet_Format1(gspca_dev, 0x00, 0x1e);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x0d);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x09);\n\tcit_Packet_Format1(gspca_dev, 0x3b, 0x00);\n\tcit_Packet_Format1(gspca_dev, 0x28, 0x22);\n\tcit_Packet_Format1(gspca_dev, 0x27, 0x00);\n\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1f);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x08);\n\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x2c, 0x00);\n\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x30, 0x14);\n\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x02);\n\tcit_PacketFormat2(gspca_dev, 0x01, 0xe1);\n\tcit_PacketFormat2(gspca_dev, 0x02, 0xcd);\n\tcit_PacketFormat2(gspca_dev, 0x03, 0xcd);\n\tcit_PacketFormat2(gspca_dev, 0x04, 0xfa);\n\tcit_PacketFormat2(gspca_dev, 0x3f, 0xff);\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x00);\n\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x02);\n\tcit_PacketFormat2(gspca_dev, 0x0a, 0x37);\n\tcit_PacketFormat2(gspca_dev, 0x0b, 0xb8);\n\tcit_PacketFormat2(gspca_dev, 0x0c, 0xf3);\n\tcit_PacketFormat2(gspca_dev, 0x0d, 0xe3);\n\tcit_PacketFormat2(gspca_dev, 0x0e, 0x0d);\n\tcit_PacketFormat2(gspca_dev, 0x0f, 0xf2);\n\tcit_PacketFormat2(gspca_dev, 0x10, 0xd5);\n\tcit_PacketFormat2(gspca_dev, 0x11, 0xba);\n\tcit_PacketFormat2(gspca_dev, 0x12, 0x53);\n\tcit_PacketFormat2(gspca_dev, 0x3f, 0xff);\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x00);\n\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x02);\n\tcit_PacketFormat2(gspca_dev, 0x16, 0x00);\n\tcit_PacketFormat2(gspca_dev, 0x17, 0x28);\n\tcit_PacketFormat2(gspca_dev, 0x18, 0x7d);\n\tcit_PacketFormat2(gspca_dev, 0x19, 0xbe);\n\tcit_PacketFormat2(gspca_dev, 0x3f, 0xff);\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x00);\n\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x00, 0x18);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x13, 0x18);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x14, 0x06);\n\n\t/* TESTME These are handled through controls\n\t   KEEP until someone can test leaving this out is ok */\n\tif (0) {\n\t\t/* This is default brightness */\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x31, 0x37);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x32, 0x46);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x33, 0x55);\n\t}\n\n\tcit_Packet_Format1(gspca_dev, 0x2e, 0x04);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x2d, 0x04);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x29, 0x80);\n\tcit_Packet_Format1(gspca_dev, 0x2c, 0x01);\n\tcit_Packet_Format1(gspca_dev, 0x30, 0x17);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x08);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x34, 0x00);\n\n\tcit_write_reg(gspca_dev, 0x00, 0x0101);\n\tcit_write_reg(gspca_dev, 0x00, 0x010a);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 128: /* 128x96 */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x60, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x0c, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011b);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x0b, 0x011d);\n\t\tcit_write_reg(gspca_dev, 0x00, 0x011e);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00, 0x0129);\n\t\tbreak;\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0xb0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x8f, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x06, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011b);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x0d, 0x011d);\n\t\tcit_write_reg(gspca_dev, 0x00, 0x011e);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x03, 0x0129);\n\t\tbreak;\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0xb0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x90, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x02, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011b);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x05, 0x011d);\n\t\tcit_write_reg(gspca_dev, 0x00, 0x011e);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00, 0x0129);\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, 0xff, 0x012b);\n\n\t/* TESTME These are handled through controls\n\t   KEEP until someone can test leaving this out is ok */\n\tif (0) {\n\t\t/* This is another brightness - don't know why */\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x31, 0xc3);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x32, 0xd2);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x33, 0xe1);\n\n\t\t/* Default contrast */\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x14, 0x0a);\n\n\t\t/* Default sharpness */\n\t\tfor (i = 0; i < cit_model1_ntries2; i++)\n\t\t\tcit_PacketFormat2(gspca_dev, 0x13, 0x1a);\n\n\t\t/* Default lighting conditions */\n\t\tcit_Packet_Format1(gspca_dev, 0x0027,\n\t\t\t\t   v4l2_ctrl_g_ctrl(sd->lighting));\n\t}\n\n\t/* Assorted init */\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 128: /* 128x96 */\n\t\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1e);\n\t\tcit_write_reg(gspca_dev, 0xc9, 0x0119);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0109);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x36, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x1a, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011a);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x2b, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x23, 0x012a);\t/* Same everywhere */\n\t\tbreak;\n\tcase 176: /* 176x144 */\n\t\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1e);\n\t\tcit_write_reg(gspca_dev, 0xc9, 0x0119);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0109);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x04, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x02, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011a);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x2b, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x23, 0x012a);\t/* Same everywhere */\n\t\tbreak;\n\tcase 352: /* 352x288 */\n\t\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1f);\n\t\tcit_write_reg(gspca_dev, 0xc9, 0x0119);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0109);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x08, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x01, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011a);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x2f, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x23, 0x012a);\t/* Same everywhere */\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, 0x01, 0x0100);\t/* LED On  */\n\tcit_write_reg(gspca_dev, clock_div, 0x0111);\n\n\treturn 0;\n}\n\nstatic int cit_start_model2(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint clock_div = 0;\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\t/* LED on */\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0112);\n\tcit_write_reg(gspca_dev, 0x00bc, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0008, 0x012b);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\t/* All except 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\t/* 176x144, 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x00b9, 0x010a);\t/* Unique to this mode */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x0119);\t/* Unique to this mode */\n\t\t/* TESTME HDG: this does not seem right\n\t\t   (it is 2 for all other resolutions) */\n\t\tsd->sof_len = 10;\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\t/* Unique to this mode */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\t/* 320x240, 352x240 */\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\t/* All except 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\t/* All except 176x144 */\n\t\tsd->sof_len = 2;\n\t\tbreak;\n#if 0\n\tcase VIDEOSIZE_352x240:\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\t/* All except 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\t/* 320x240, 352x240 */\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\t/* All except 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\t/* All except 176x144 */\n\t\tsd->sof_len = 2;\n\t\tbreak;\n#endif\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\t/* All except 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\t/* 176x144, 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\t/* All except 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\t/* All except 176x144 */\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\t/* LED on */\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0050, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x0040, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0111);\n\t\tbreak;\n\t}\n\tcit_write_reg(gspca_dev, 0x009b, 0x010f);\n\tcit_write_reg(gspca_dev, 0x00bb, 0x010f);\n\n\t/*\n\t * Hardware settings, may affect CMOS sensor; not user controls!\n\t * -------------------------------------------------------------\n\t * 0x0004: no effect\n\t * 0x0006: hardware effect\n\t * 0x0008: no effect\n\t * 0x000a: stops video stream, probably important h/w setting\n\t * 0x000c: changes color in hardware manner (not user setting)\n\t * 0x0012: changes number of colors (does not affect speed)\n\t * 0x002a: no effect\n\t * 0x002c: hardware setting (related to scan lines)\n\t * 0x002e: stops video stream, probably important h/w setting\n\t */\n\tcit_model2_Packet1(gspca_dev, 0x000a, 0x005c);\n\tcit_model2_Packet1(gspca_dev, 0x0004, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x0006, 0x00fb);\n\tcit_model2_Packet1(gspca_dev, 0x0008, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x000c, 0x0009);\n\tcit_model2_Packet1(gspca_dev, 0x0012, 0x000a);\n\tcit_model2_Packet1(gspca_dev, 0x002a, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x002c, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x002e, 0x0008);\n\n\t/*\n\t * Function 0x0030 pops up all over the place. Apparently\n\t * it is a hardware control register, with every bit assigned to\n\t * do something.\n\t */\n\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0000);\n\n\t/*\n\t * Magic control of CMOS sensor. Only lower values like\n\t * 0-3 work, and picture shifts left or right. Don't change.\n\t */\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0002);\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0002); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x004a); /* Another hardware setting */\n\t\tclock_div = 6;\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0009);\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0005); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x0044); /* Another hardware setting */\n\t\tclock_div = 8;\n\t\tbreak;\n#if 0\n\tcase VIDEOSIZE_352x240:\n\t\t/* This mode doesn't work as Windows programs it; changed to work */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0009); /* Windows sets this to 8 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0003); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x0044); /* Windows sets this to 0x0045 */\n\t\tclock_div = 10;\n\t\tbreak;\n#endif\n\tcase 352: /* 352x288 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0003);\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0002); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x004a); /* Another hardware setting */\n\t\tclock_div = 16;\n\t\tbreak;\n\t}\n\n\t/* TESTME These are handled through controls\n\t   KEEP until someone can test leaving this out is ok */\n\tif (0)\n\t\tcit_model2_Packet1(gspca_dev, 0x001a, 0x005a);\n\n\t/*\n\t * We have our own frame rate setting varying from 0 (slowest) to 6\n\t * (fastest). The camera model 2 allows frame rate in range [0..0x1F]\n\t # where 0 is also the slowest setting. However for all practical\n\t # reasons high settings make no sense because USB is not fast enough\n\t # to support high FPS. Be aware that the picture datastream will be\n\t # severely disrupted if you ask for frame rate faster than allowed\n\t # for the video size - see below:\n\t *\n\t * Allowable ranges (obtained experimentally on OHCI, K6-3, 450 MHz):\n\t * -----------------------------------------------------------------\n\t * 176x144: [6..31]\n\t * 320x240: [8..31]\n\t * 352x240: [10..31]\n\t * 352x288: [16..31] I have to raise lower threshold for stability...\n\t *\n\t * As usual, slower FPS provides better sensitivity.\n\t */\n\tcit_model2_Packet1(gspca_dev, 0x001c, clock_div);\n\n\t/*\n\t * This setting does not visibly affect pictures; left it here\n\t * because it was present in Windows USB data stream. This function\n\t * does not allow arbitrary values and apparently is a bit mask, to\n\t * be activated only at appropriate time. Don't change it randomly!\n\t */\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x00c2);\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x0044);\n\t\tbreak;\n#if 0\n\tcase VIDEOSIZE_352x240:\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x0046);\n\t\tbreak;\n#endif\n\tcase 352: /* 352x288 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x0048);\n\t\tbreak;\n\t}\n\n\tcit_model2_Packet1(gspca_dev, 0x0028, v4l2_ctrl_g_ctrl(sd->lighting));\n\t/* model2 cannot change the backlight compensation while streaming */\n\tv4l2_ctrl_grab(sd->lighting, true);\n\n\t/* color balance rg2 */\n\tcit_model2_Packet1(gspca_dev, 0x001e, 0x002f);\n\t/* saturation */\n\tcit_model2_Packet1(gspca_dev, 0x0020, 0x0034);\n\t/* color balance yb */\n\tcit_model2_Packet1(gspca_dev, 0x0022, 0x00a0);\n\n\t/* Hardware control command */\n\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0004);\n\n\treturn 0;\n}\n\nstatic int cit_start_model3(struct gspca_dev *gspca_dev)\n{\n\tconst unsigned short compression = 0; /* 0=none, 7=best frame rate */\n\tint i, clock_div = 0;\n\n\t/* HDG not in ibmcam driver, added to see if it helps with\n\t   auto-detecting between model3 and ibm netcamera pro */\n\tcit_read_reg(gspca_dev, 0x128, 1);\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0112);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0040, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0019, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0115);\n\tcit_write_reg(gspca_dev, 0x0003, 0x0115);\n\tcit_read_reg(gspca_dev, 0x0115, 0);\n\tcit_write_reg(gspca_dev, 0x000b, 0x0115);\n\n\t/* TESTME HDG not in ibmcam driver, added to see if it helps with\n\t   auto-detecting between model3 and ibm netcamera pro */\n\tif (0) {\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0079, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x00ff, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0xcd41, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_read_reg(gspca_dev, 0x0126, 1);\n\t}\n\n\tcit_model3_Packet1(gspca_dev, 0x000a, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x000b, 0x00f6);\n\tcit_model3_Packet1(gspca_dev, 0x000c, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x000d, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x000e, 0x0033);\n\tcit_model3_Packet1(gspca_dev, 0x000f, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x0010, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0011, 0x0070);\n\tcit_model3_Packet1(gspca_dev, 0x0012, 0x0030);\n\tcit_model3_Packet1(gspca_dev, 0x0013, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0014, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0015, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0016, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0017, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0018, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x001e, 0x00c3);\n\tcit_model3_Packet1(gspca_dev, 0x0020, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0028, 0x0010);\n\tcit_model3_Packet1(gspca_dev, 0x0029, 0x0054);\n\tcit_model3_Packet1(gspca_dev, 0x002a, 0x0013);\n\tcit_model3_Packet1(gspca_dev, 0x002b, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x002d, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x002e, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0031, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0032, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0033, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0034, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0035, 0x0038);\n\tcit_model3_Packet1(gspca_dev, 0x003a, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x003c, 0x001e);\n\tcit_model3_Packet1(gspca_dev, 0x003f, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0041, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0046, 0x003f);\n\tcit_model3_Packet1(gspca_dev, 0x0047, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0050, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0052, 0x001a);\n\tcit_model3_Packet1(gspca_dev, 0x0053, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x005a, 0x006b);\n\tcit_model3_Packet1(gspca_dev, 0x005d, 0x001e);\n\tcit_model3_Packet1(gspca_dev, 0x005e, 0x0030);\n\tcit_model3_Packet1(gspca_dev, 0x005f, 0x0041);\n\tcit_model3_Packet1(gspca_dev, 0x0064, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0065, 0x0015);\n\tcit_model3_Packet1(gspca_dev, 0x0068, 0x000f);\n\tcit_model3_Packet1(gspca_dev, 0x0079, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x007a, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x007c, 0x003f);\n\tcit_model3_Packet1(gspca_dev, 0x0082, 0x000f);\n\tcit_model3_Packet1(gspca_dev, 0x0085, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0099, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x009b, 0x0023);\n\tcit_model3_Packet1(gspca_dev, 0x009c, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x009d, 0x0096);\n\tcit_model3_Packet1(gspca_dev, 0x009e, 0x0096);\n\tcit_model3_Packet1(gspca_dev, 0x009f, 0x000a);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0101); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x010b); /* Differs everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00a9, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0002, 0x011d); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x011e); /* Same on 160x120, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0001); /* Same */\n\t\tcit_write_reg(gspca_dev, compression, 0x0109);\n\t\tclock_div = 3;\n\t\tbreak;\n\tcase 320:\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0101); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x010b); /* Differs everywhere */\n\t\tcit_write_reg(gspca_dev, 0x0002, 0x011d); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x011e);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\t\t/* 4 commands from 160x120 skipped */\n\t\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0001); /* Same */\n\t\tcit_write_reg(gspca_dev, compression, 0x0109);\n\t\tcit_write_reg(gspca_dev, 0x00d9, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0021, 0x0102); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x003f, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tclock_div = 5;\n\t\tbreak;\n\tcase 640:\n\t\tcit_write_reg(gspca_dev, 0x00f0, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x010b); /* Differs everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00d9, 0x0119); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x011b); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011d); /* NC */\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x011e); /* Same on 160x120, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0021, 0x0102); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x0104); /* NC */\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x003f, 0x011c); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0118); /* Same on 320x240, 640x480 */\n\t\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0001); /* Same */\n\t\tcit_write_reg(gspca_dev, compression, 0x0109);\n\t\tcit_write_reg(gspca_dev, 0x0040, 0x0101);\n\t\tcit_write_reg(gspca_dev, 0x0040, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132); /* Same on 320x240, 640x480 */\n\t\tclock_div = 7;\n\t\tbreak;\n\t}\n\n\tcit_model3_Packet1(gspca_dev, 0x007e, 0x000e);\t/* Hue */\n\tcit_model3_Packet1(gspca_dev, 0x0036, 0x0011);\t/* Brightness */\n\tcit_model3_Packet1(gspca_dev, 0x0060, 0x0002);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0061, 0x0004);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0062, 0x0005);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0063, 0x0014);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0096, 0x00a0);\t/* Red sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0097, 0x0096);\t/* Blue sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0067, 0x0001);\t/* Contrast */\n\tcit_model3_Packet1(gspca_dev, 0x005b, 0x000c);\t/* Contrast */\n\tcit_model3_Packet1(gspca_dev, 0x005c, 0x0016);\t/* Contrast */\n\tcit_model3_Packet1(gspca_dev, 0x0098, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x002c, 0x0003);\t/* Was 1, broke 640x480 */\n\tcit_model3_Packet1(gspca_dev, 0x002f, 0x002a);\n\tcit_model3_Packet1(gspca_dev, 0x0030, 0x0029);\n\tcit_model3_Packet1(gspca_dev, 0x0037, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0038, 0x0059);\n\tcit_model3_Packet1(gspca_dev, 0x003d, 0x002e);\n\tcit_model3_Packet1(gspca_dev, 0x003e, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x0078, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x007b, 0x0011);\n\tcit_model3_Packet1(gspca_dev, 0x007d, 0x004b);\n\tcit_model3_Packet1(gspca_dev, 0x007f, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x0080, 0x000c);\n\tcit_model3_Packet1(gspca_dev, 0x0081, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x0083, 0x00fd);\n\tcit_model3_Packet1(gspca_dev, 0x0086, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x0087, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x007e, 0x000e);\n\tcit_model3_Packet1(gspca_dev, 0x0096, 0x00a0);\t/* Red sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0097, 0x0096);\t/* Blue sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0098, 0x000b);\n\n\t/* FIXME we should probably use cit_get_clock_div() here (in\n\t   combination with isoc negotiation using the programmable isoc size)\n\t   like with the IBM netcam pro). */\n\tcit_write_reg(gspca_dev, clock_div, 0x0111); /* Clock Divider */\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0000); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0039, 0x001f); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x003b, 0x003c); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0040, 0x000a);\n\t\tcit_model3_Packet1(gspca_dev, 0x0051, 0x000a);\n\t\tbreak;\n\tcase 320:\n\t\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0000); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0039, 0x001f); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x003b, 0x003c); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0040, 0x0008);\n\t\tcit_model3_Packet1(gspca_dev, 0x0051, 0x000b);\n\t\tbreak;\n\tcase 640:\n\t\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0002);\t/* !Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0039, 0x003e);\t/* !Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0040, 0x0008);\n\t\tcit_model3_Packet1(gspca_dev, 0x0051, 0x000a);\n\t\tbreak;\n\t}\n\n/*\tif (sd->input_index) { */\n\tif (rca_input) {\n\t\tfor (i = 0; i < ARRAY_SIZE(rca_initdata); i++) {\n\t\t\tif (rca_initdata[i][0])\n\t\t\t\tcit_read_reg(gspca_dev, rca_initdata[i][2], 0);\n\t\t\telse\n\t\t\t\tcit_write_reg(gspca_dev, rca_initdata[i][1],\n\t\t\t\t\t      rca_initdata[i][2]);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nstatic int cit_start_model4(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_write_reg(gspca_dev, 0x00c0, 0x0111);\n\tcit_write_reg(gspca_dev, 0x00bc, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0080, 0x012b);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0133);\n\tcit_write_reg(gspca_dev, 0x009b, 0x010f);\n\tcit_write_reg(gspca_dev, 0x00bb, 0x010f);\n\tcit_model4_Packet1(gspca_dev, 0x0038, 0x0000);\n\tcit_model4_Packet1(gspca_dev, 0x000a, 0x005c);\n\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0004, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\tcit_write_reg(gspca_dev, 0x00fb, 0x012e);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0130);\n\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\tcit_write_reg(gspca_dev, 0x000c, 0x0127);\n\tcit_write_reg(gspca_dev, 0x0009, 0x012e);\n\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0012, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0127);\n\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\tcit_write_reg(gspca_dev, 0x002a, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0000, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\tcit_model4_Packet1(gspca_dev, 0x0034, 0x0000);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 128: /* 128x96 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x000a, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005a, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0043, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00eb, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0031, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\tcase 160: /* 160x120 */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00b9, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x000b, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005a, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0043, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00c7, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0025, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0048, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0035, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0048, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0090, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00b9, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0007, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005e, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0049, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00c7, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x002a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x006d, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\t/* TESTME HDG: this does not seem right\n\t\t   (it is 2 for all other resolutions) */\n\t\tsd->sof_len = 10;\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x000a, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005a, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0043, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00eb, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0031, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0002, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005e, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0049, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00cf, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0025, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0048, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\t}\n\n\tcit_model4_Packet1(gspca_dev, 0x0038, 0x0004);\n\n\treturn 0;\n}\n\nstatic int cit_start_ibm_netcam_pro(struct gspca_dev *gspca_dev)\n{\n\tconst unsigned short compression = 0; /* 0=none, 7=best frame rate */\n\tint i, clock_div;\n\n\tclock_div = cit_get_clock_div(gspca_dev);\n\tif (clock_div < 0)\n\t\treturn clock_div;\n\n\tcit_write_reg(gspca_dev, 0x0003, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\t/* cit_write_reg(gspca_dev, 0x0002, 0x0112); see sd_stop0 */\n\tcit_write_reg(gspca_dev, 0x0000, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0040, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0019, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\t/* cit_write_reg(gspca_dev, 0x000b, 0x0115); see sd_stop0 */\n\n\tcit_model3_Packet1(gspca_dev, 0x0049, 0x0000);\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0101); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x003a, 0x0102); /* Hstart */\n\tcit_write_reg(gspca_dev, 0x00a0, 0x0103); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x0078, 0x0105); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\tcit_write_reg(gspca_dev, 0x0002, 0x011d); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160: /* 160x120 */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0089, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x000a, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x011e);\n\t\tcit_write_reg(gspca_dev, 0x0007, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0009, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x008b, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x00d9, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x011e);\n\t\tcit_write_reg(gspca_dev, 0x000e, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x003f, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x000c, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tbreak;\n\t}\n\n\tcit_model3_Packet1(gspca_dev, 0x0019, 0x0031);\n\tcit_model3_Packet1(gspca_dev, 0x001a, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x001b, 0x0038);\n\tcit_model3_Packet1(gspca_dev, 0x001c, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0024, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0027, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x002a, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x0035, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x003f, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0044, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0054, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c4, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00e7, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00e9, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00ee, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00f3, 0x00c0);\n\n\tcit_write_reg(gspca_dev, compression, 0x0109);\n\tcit_write_reg(gspca_dev, clock_div, 0x0111);\n\n/*\tif (sd->input_index) { */\n\tif (rca_input) {\n\t\tfor (i = 0; i < ARRAY_SIZE(rca_initdata); i++) {\n\t\t\tif (rca_initdata[i][0])\n\t\t\t\tcit_read_reg(gspca_dev, rca_initdata[i][2], 0);\n\t\t\telse\n\t\t\t\tcit_write_reg(gspca_dev, rca_initdata[i][1],\n\t\t\t\t\t      rca_initdata[i][2]);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/* -- start the camera -- */\nstatic int sd_start(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint packet_size;\n\n\tpacket_size = cit_get_packet_size(gspca_dev);\n\tif (packet_size < 0)\n\t\treturn packet_size;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tcit_start_model0(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\tcit_start_model1(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tcit_start_model2(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tcit_start_model3(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\tcit_start_model4(gspca_dev);\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_start_ibm_netcam_pro(gspca_dev);\n\t\tbreak;\n\t}\n\n\t/* Program max isoc packet size */\n\tcit_write_reg(gspca_dev, packet_size >> 8, 0x0106);\n\tcit_write_reg(gspca_dev, packet_size & 0xff, 0x0107);\n\n\tcit_restart_stream(gspca_dev);\n\n\treturn 0;\n}\n\nstatic int sd_isoc_init(struct gspca_dev *gspca_dev)\n{\n\tstruct usb_host_interface *alt;\n\tint max_packet_size;\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tmax_packet_size = 450;\n\t\tbreak;\n\tcase 176:\n\t\tmax_packet_size = 600;\n\t\tbreak;\n\tdefault:\n\t\tmax_packet_size = 1022;\n\t\tbreak;\n\t}\n\n\t/* Start isoc bandwidth \"negotiation\" at max isoc bandwidth */\n\talt = &gspca_dev->dev->actconfig->intf_cache[0]->altsetting[1];\n\talt->endpoint[0].desc.wMaxPacketSize = cpu_to_le16(max_packet_size);\n\n\treturn 0;\n}\n\nstatic int sd_isoc_nego(struct gspca_dev *gspca_dev)\n{\n\tint ret, packet_size, min_packet_size;\n\tstruct usb_host_interface *alt;\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tmin_packet_size = 200;\n\t\tbreak;\n\tcase 176:\n\t\tmin_packet_size = 266;\n\t\tbreak;\n\tdefault:\n\t\tmin_packet_size = 400;\n\t\tbreak;\n\t}\n\n\talt = &gspca_dev->dev->actconfig->intf_cache[0]->altsetting[1];\n\tpacket_size = le16_to_cpu(alt->endpoint[0].desc.wMaxPacketSize);\n\tif (packet_size <= min_packet_size)\n\t\treturn -EIO;\n\n\tpacket_size -= 100;\n\tif (packet_size < min_packet_size)\n\t\tpacket_size = min_packet_size;\n\talt->endpoint[0].desc.wMaxPacketSize = cpu_to_le16(packet_size);\n\n\tret = usb_set_interface(gspca_dev->dev, gspca_dev->iface, 1);\n\tif (ret < 0)\n\t\tpr_err(\"set alt 1 err %d\\n\", ret);\n\n\treturn ret;\n}\n\nstatic void sd_stopN(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x0000, 0x010c);\n}\n\nstatic void sd_stop0(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tif (!gspca_dev->present)\n\t\treturn;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\t/* HDG windows does this, but it causes the cams autogain to\n\t\t   restart from a gain of 0, which does not look good when\n\t\t   changing resolutions. */\n\t\t/* cit_write_reg(gspca_dev, 0x0000, 0x0112); */\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0100); /* LED Off */\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\tcit_send_FF_04_02(gspca_dev);\n\t\tcit_read_reg(gspca_dev, 0x0100, 0);\n\t\tcit_write_reg(gspca_dev, 0x81, 0x0100);\t/* LED Off */\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tv4l2_ctrl_grab(sd->lighting, false);\n\t\t/* Fall through! */\n\tcase CIT_MODEL4:\n\t\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0004);\n\n\t\tcit_write_reg(gspca_dev, 0x0080, 0x0100);\t/* LED Off */\n\t\tcit_write_reg(gspca_dev, 0x0020, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0111);\n\n\t\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0002);\n\n\t\tcit_write_reg(gspca_dev, 0x0020, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0112);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x012c);\n\t\tcit_model3_Packet1(gspca_dev, 0x0046, 0x0000);\n\t\tcit_read_reg(gspca_dev, 0x0116, 0);\n\t\tcit_write_reg(gspca_dev, 0x0064, 0x0116);\n\t\tcit_read_reg(gspca_dev, 0x0115, 0);\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x0115);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0112);\n\t\tcit_write_reg(gspca_dev, 0x0080, 0x0100);\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_model3_Packet1(gspca_dev, 0x0049, 0x00ff);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x012c);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0116);\n\t\t/* HDG windows does this, but I cannot get the camera\n\t\t   to restart with this without redoing the entire init\n\t\t   sequence which makes switching modes really slow */\n\t\t/* cit_write_reg(gspca_dev, 0x0006, 0x0115); */\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x0133);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0111);\n\t\t/* HDG windows does this, but I get a green picture when\n\t\t   restarting the stream after this */\n\t\t/* cit_write_reg(gspca_dev, 0x0000, 0x0112); */\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0100);\n\t\tbreak;\n\t}\n\n#if IS_ENABLED(CONFIG_INPUT)\n\t/* If the last button state is pressed, release it now! */\n\tif (sd->button_state) {\n\t\tinput_report_key(gspca_dev->input_dev, KEY_CAMERA, 0);\n\t\tinput_sync(gspca_dev->input_dev);\n\t\tsd->button_state = 0;\n\t}\n#endif\n}\n\nstatic u8 *cit_find_sof(struct gspca_dev *gspca_dev, u8 *data, int len)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tu8 byte3 = 0, byte4 = 0;\n\tint i;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\tcase CIT_MODEL3:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tswitch (gspca_dev->pixfmt.width) {\n\t\tcase 160: /* 160x120 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x0a;\n\t\t\tbreak;\n\t\tcase 176: /* 176x144 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x0e;\n\t\t\tbreak;\n\t\tcase 320: /* 320x240 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x08;\n\t\t\tbreak;\n\t\tcase 352: /* 352x288 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x00;\n\t\t\tbreak;\n\t\tcase 640:\n\t\t\tbyte3 = 0x03;\n\t\t\tbyte4 = 0x08;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* These have a different byte3 */\n\t\tif (sd->model <= CIT_MODEL1)\n\t\t\tbyte3 = 0x00;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\t/* For this model the SOF always starts at offset 0\n\t\t\t   so no need to search the entire frame */\n\t\t\tif (sd->model == CIT_MODEL0 && sd->sof_read != i)\n\t\t\t\tbreak;\n\n\t\t\tswitch (sd->sof_read) {\n\t\t\tcase 0:\n\t\t\t\tif (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (data[i] == 0xff)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\telse if (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read = 1;\n\t\t\t\telse\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (data[i] == byte3)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\telse if (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read = 1;\n\t\t\t\telse\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (data[i] == byte4) {\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\t\treturn data + i + (sd->sof_len - 3);\n\t\t\t\t}\n\t\t\t\tif (byte3 == 0x00 && data[i] == 0xff)\n\t\t\t\t\tsd->sof_read = 2;\n\t\t\t\telse if (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read = 1;\n\t\t\t\telse\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\t/* TESTME we need to find a longer sof signature to avoid\n\t\t   false positives */\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tswitch (sd->sof_read) {\n\t\t\tcase 0:\n\t\t\t\tif (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tsd->sof_read = 0;\n\t\t\t\tif (data[i] == 0xff) {\n\t\t\t\t\tif (i >= 4)\n\t\t\t\t\t\tgspca_dbg(gspca_dev, D_FRAM,\n\t\t\t\t\t\t\t  \"header found at offset: %d: %02x %02x 00 %3ph\\n\\n\",\n\t\t\t\t\t\t\t  i - 1,\n\t\t\t\t\t\t\t  data[i - 4],\n\t\t\t\t\t\t\t  data[i - 3],\n\t\t\t\t\t\t\t  &data[i]);\n\t\t\t\t\telse\n\t\t\t\t\t\tgspca_dbg(gspca_dev, D_FRAM,\n\t\t\t\t\t\t\t  \"header found at offset: %d: 00 %3ph\\n\\n\",\n\t\t\t\t\t\t\t  i - 1,\n\t\t\t\t\t\t\t  &data[i]);\n\t\t\t\t\treturn data + i + (sd->sof_len - 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\treturn NULL;\n}\n\nstatic void sd_pkt_scan(struct gspca_dev *gspca_dev,\n\t\t\tu8 *data, int len)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tunsigned char *sof;\n\n\tsof = cit_find_sof(gspca_dev, data, len);\n\tif (sof) {\n\t\tint n;\n\n\t\t/* finish decoding current frame */\n\t\tn = sof - data;\n\t\tif (n > sd->sof_len)\n\t\t\tn -= sd->sof_len;\n\t\telse\n\t\t\tn = 0;\n\t\tgspca_frame_add(gspca_dev, LAST_PACKET,\n\t\t\t\tdata, n);\n\t\tgspca_frame_add(gspca_dev, FIRST_PACKET, NULL, 0);\n\t\tlen -= sof - data;\n\t\tdata = sof;\n\t}\n\n\tgspca_frame_add(gspca_dev, INTER_PACKET, data, len);\n}\n\n#if IS_ENABLED(CONFIG_INPUT)\nstatic void cit_check_button(struct gspca_dev *gspca_dev)\n{\n\tint new_button_state;\n\tstruct sd *sd = (struct sd *)gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL3:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tbreak;\n\tdefault: /* TEST ME unknown if this works on other models too */\n\t\treturn;\n\t}\n\n\t/* Read the button state */\n\tcit_read_reg(gspca_dev, 0x0113, 0);\n\tnew_button_state = !gspca_dev->usb_buf[0];\n\n\t/* Tell the cam we've seen the button press, notice that this\n\t   is a nop (iow the cam keeps reporting pressed) until the\n\t   button is actually released. */\n\tif (new_button_state)\n\t\tcit_write_reg(gspca_dev, 0x01, 0x0113);\n\n\tif (sd->button_state != new_button_state) {\n\t\tinput_report_key(gspca_dev->input_dev, KEY_CAMERA,\n\t\t\t\t new_button_state);\n\t\tinput_sync(gspca_dev->input_dev);\n\t\tsd->button_state = new_button_state;\n\t}\n}\n#endif\n\nstatic int sd_s_ctrl(struct v4l2_ctrl *ctrl)\n{\n\tstruct gspca_dev *gspca_dev =\n\t\tcontainer_of(ctrl->handler, struct gspca_dev, ctrl_handler);\n\tstruct sd *sd = (struct sd *)gspca_dev;\n\n\tgspca_dev->usb_err = 0;\n\n\tif (!gspca_dev->streaming)\n\t\treturn 0;\n\n\tif (sd->stop_on_control_change)\n\t\tsd_stopN(gspca_dev);\n\tswitch (ctrl->id) {\n\tcase V4L2_CID_BRIGHTNESS:\n\t\tcit_set_brightness(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_CONTRAST:\n\t\tcit_set_contrast(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_HUE:\n\t\tcit_set_hue(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_HFLIP:\n\t\tcit_set_hflip(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_SHARPNESS:\n\t\tcit_set_sharpness(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_BACKLIGHT_COMPENSATION:\n\t\tcit_set_lighting(gspca_dev, ctrl->val);\n\t\tbreak;\n\t}\n\tif (sd->stop_on_control_change)\n\t\tcit_restart_stream(gspca_dev);\n\treturn gspca_dev->usb_err;\n}\n\nstatic const struct v4l2_ctrl_ops sd_ctrl_ops = {\n\t.s_ctrl = sd_s_ctrl,\n};\n\nstatic int sd_init_controls(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *)gspca_dev;\n\tstruct v4l2_ctrl_handler *hdl = &gspca_dev->ctrl_handler;\n\tbool has_brightness;\n\tbool has_contrast;\n\tbool has_hue;\n\tbool has_sharpness;\n\tbool has_lighting;\n\tbool has_hflip;\n\n\thas_brightness = has_contrast = has_hue =\n\t\thas_sharpness = has_hflip = has_lighting = false;\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\thas_contrast = has_hflip = true;\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\thas_brightness = has_contrast =\n\t\t\thas_sharpness = has_lighting = true;\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\thas_brightness = has_hue = has_lighting = true;\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\thas_brightness = has_contrast = has_sharpness = true;\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\thas_brightness = has_hue = true;\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\thas_brightness = has_hue =\n\t\t\thas_sharpness = has_hflip = has_lighting = true;\n\t\tbreak;\n\t}\n\tgspca_dev->vdev.ctrl_handler = hdl;\n\tv4l2_ctrl_handler_init(hdl, 5);\n\tif (has_brightness)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_BRIGHTNESS, 0, 63, 1, 32);\n\tif (has_contrast)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_CONTRAST, 0, 20, 1, 10);\n\tif (has_hue)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_HUE, 0, 127, 1, 63);\n\tif (has_sharpness)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_SHARPNESS, 0, 6, 1, 3);\n\tif (has_lighting)\n\t\tsd->lighting = v4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_BACKLIGHT_COMPENSATION, 0, 2, 1, 1);\n\tif (has_hflip)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_HFLIP, 0, 1, 1, 0);\n\n\tif (hdl->error) {\n\t\tpr_err(\"Could not initialize controls\\n\");\n\t\treturn hdl->error;\n\t}\n\treturn 0;\n}\n\n/* sub-driver description */\nstatic const struct sd_desc sd_desc = {\n\t.name = MODULE_NAME,\n\t.config = sd_config,\n\t.init = sd_init,\n\t.init_controls = sd_init_controls,\n\t.start = sd_start,\n\t.stopN = sd_stopN,\n\t.stop0 = sd_stop0,\n\t.pkt_scan = sd_pkt_scan,\n#if IS_ENABLED(CONFIG_INPUT)\n\t.dq_callback = cit_check_button,\n\t.other_input = 1,\n#endif\n};\n\nstatic const struct sd_desc sd_desc_isoc_nego = {\n\t.name = MODULE_NAME,\n\t.config = sd_config,\n\t.init = sd_init,\n\t.init_controls = sd_init_controls,\n\t.start = sd_start,\n\t.isoc_init = sd_isoc_init,\n\t.isoc_nego = sd_isoc_nego,\n\t.stopN = sd_stopN,\n\t.stop0 = sd_stop0,\n\t.pkt_scan = sd_pkt_scan,\n#if IS_ENABLED(CONFIG_INPUT)\n\t.dq_callback = cit_check_button,\n\t.other_input = 1,\n#endif\n};\n\n/* -- module initialisation -- */\nstatic const struct usb_device_id device_table[] = {\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x0001, 0x0001), .driver_info = CIT_MODEL0 },\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x0002, 0x0002), .driver_info = CIT_MODEL1 },\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x030a, 0x030a), .driver_info = CIT_MODEL2 },\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x0301, 0x0301), .driver_info = CIT_MODEL3 },\n\t{ USB_DEVICE_VER(0x0545, 0x8002, 0x030a, 0x030a), .driver_info = CIT_MODEL4 },\n\t{ USB_DEVICE_VER(0x0545, 0x800c, 0x030a, 0x030a), .driver_info = CIT_MODEL2 },\n\t{ USB_DEVICE_VER(0x0545, 0x800d, 0x030a, 0x030a), .driver_info = CIT_MODEL4 },\n\t{}\n};\nMODULE_DEVICE_TABLE(usb, device_table);\n\n/* -- device connect -- */\nstatic int sd_probe(struct usb_interface *intf,\n\t\t\tconst struct usb_device_id *id)\n{\n\tconst struct sd_desc *desc = &sd_desc;\n\n\tswitch (id->driver_info) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\t\tif (intf->cur_altsetting->desc.bInterfaceNumber != 2)\n\t\t\treturn -ENODEV;\n\t\tbreak;\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\tif (intf->cur_altsetting->desc.bInterfaceNumber != 0)\n\t\t\treturn -ENODEV;\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tif (intf->cur_altsetting->desc.bInterfaceNumber != 0)\n\t\t\treturn -ENODEV;\n\t\t/* FIXME this likely applies to all model3 cams and probably\n\t\t   to other models too. */\n\t\tif (ibm_netcam_pro)\n\t\t\tdesc = &sd_desc_isoc_nego;\n\t\tbreak;\n\t}\n\n\treturn gspca_dev_probe2(intf, id, desc, sizeof(struct sd), THIS_MODULE);\n}\n\nstatic struct usb_driver sd_driver = {\n\t.name = MODULE_NAME,\n\t.id_table = device_table,\n\t.probe = sd_probe,\n\t.disconnect = gspca_disconnect,\n#ifdef CONFIG_PM\n\t.suspend = gspca_suspend,\n\t.resume = gspca_resume,\n\t.reset_resume = gspca_resume,\n#endif\n};\n\nmodule_usb_driver(sd_driver);\n"], "fixing_code": ["// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * USB IBM C-It Video Camera driver\n *\n * Supports Xirlink C-It Video Camera, IBM PC Camera,\n * IBM NetCamera and Veo Stingray.\n *\n * Copyright (C) 2010 Hans de Goede <hdegoede@redhat.com>\n *\n * This driver is based on earlier work of:\n *\n * (C) Copyright 1999 Johannes Erdfelt\n * (C) Copyright 1999 Randy Dunlap\n */\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#define MODULE_NAME \"xirlink-cit\"\n\n#include <linux/input.h>\n#include \"gspca.h\"\n\nMODULE_AUTHOR(\"Hans de Goede <hdegoede@redhat.com>\");\nMODULE_DESCRIPTION(\"Xirlink C-IT\");\nMODULE_LICENSE(\"GPL\");\n\n/* FIXME we should autodetect this */\nstatic int ibm_netcam_pro;\nmodule_param(ibm_netcam_pro, int, 0);\nMODULE_PARM_DESC(ibm_netcam_pro,\n\t\t \"Use IBM Netcamera Pro init sequences for Model 3 cams\");\n\n/* FIXME this should be handled through the V4L2 input selection API */\nstatic int rca_input;\nmodule_param(rca_input, int, 0644);\nMODULE_PARM_DESC(rca_input,\n\t\t \"Use rca input instead of ccd sensor on Model 3 cams\");\n\n/* specific webcam descriptor */\nstruct sd {\n\tstruct gspca_dev gspca_dev;\t\t/* !! must be the first item */\n\tstruct v4l2_ctrl *lighting;\n\tu8 model;\n#define CIT_MODEL0 0 /* bcd version 0.01 cams ie the xvp-500 */\n#define CIT_MODEL1 1 /* The model 1 - 4 nomenclature comes from the old */\n#define CIT_MODEL2 2 /* ibmcam driver */\n#define CIT_MODEL3 3\n#define CIT_MODEL4 4\n#define CIT_IBM_NETCAM_PRO 5\n\tu8 input_index;\n\tu8 button_state;\n\tu8 stop_on_control_change;\n\tu8 sof_read;\n\tu8 sof_len;\n};\n\nstatic void sd_stop0(struct gspca_dev *gspca_dev);\n\nstatic const struct v4l2_pix_format cif_yuv_mode[] = {\n\t{176, 144, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 176,\n\t\t.sizeimage = 176 * 144 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{352, 288, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 352,\n\t\t.sizeimage = 352 * 288 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\nstatic const struct v4l2_pix_format vga_yuv_mode[] = {\n\t{160, 120, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 160,\n\t\t.sizeimage = 160 * 120 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{320, 240, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 320,\n\t\t.sizeimage = 320 * 240 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{640, 480, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 640,\n\t\t.sizeimage = 640 * 480 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\nstatic const struct v4l2_pix_format model0_mode[] = {\n\t{160, 120, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 160,\n\t\t.sizeimage = 160 * 120 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{176, 144, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 176,\n\t\t.sizeimage = 176 * 144 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{320, 240, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 320,\n\t\t.sizeimage = 320 * 240 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\nstatic const struct v4l2_pix_format model2_mode[] = {\n\t{160, 120, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 160,\n\t\t.sizeimage = 160 * 120 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{176, 144, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_FIELD_NONE,\n\t\t.bytesperline = 176,\n\t\t.sizeimage = 176 * 144 * 3 / 2 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{320, 240, V4L2_PIX_FMT_SGRBG8, V4L2_FIELD_NONE,\n\t\t.bytesperline = 320,\n\t\t.sizeimage = 320 * 240 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n\t{352, 288, V4L2_PIX_FMT_SGRBG8, V4L2_FIELD_NONE,\n\t\t.bytesperline = 352,\n\t\t.sizeimage = 352 * 288 + 4,\n\t\t.colorspace = V4L2_COLORSPACE_SRGB},\n};\n\n/*\n * 01.01.08 - Added for RCA video in support -LO\n * This struct is used to init the Model3 cam to use the RCA video in port\n * instead of the CCD sensor.\n */\nstatic const u16 rca_initdata[][3] = {\n\t{0, 0x0000, 0x010c},\n\t{0, 0x0006, 0x012c},\n\t{0, 0x0078, 0x012d},\n\t{0, 0x0046, 0x012f},\n\t{0, 0xd141, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfea8, 0x0124},\n\t{1, 0x0000, 0x0116},\n\t{0, 0x0064, 0x0116},\n\t{1, 0x0000, 0x0115},\n\t{0, 0x0003, 0x0115},\n\t{0, 0x0008, 0x0123},\n\t{0, 0x0000, 0x0117},\n\t{0, 0x0000, 0x0112},\n\t{0, 0x0080, 0x0100},\n\t{0, 0x0000, 0x0100},\n\t{1, 0x0000, 0x0116},\n\t{0, 0x0060, 0x0116},\n\t{0, 0x0002, 0x0112},\n\t{0, 0x0000, 0x0123},\n\t{0, 0x0001, 0x0117},\n\t{0, 0x0040, 0x0108},\n\t{0, 0x0019, 0x012c},\n\t{0, 0x0040, 0x0116},\n\t{0, 0x000a, 0x0115},\n\t{0, 0x000b, 0x0115},\n\t{0, 0x0078, 0x012d},\n\t{0, 0x0046, 0x012f},\n\t{0, 0xd141, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfea8, 0x0124},\n\t{0, 0x0064, 0x0116},\n\t{0, 0x0000, 0x0115},\n\t{0, 0x0001, 0x0115},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00aa, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f2, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x000f, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f8, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00fc, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f9, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x003c, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xffff, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0027, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0019, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0021, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0006, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0045, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002a, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x000e, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002b, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00f4, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002c, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0004, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002d, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0014, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002e, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0003, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x002f, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0003, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0014, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0053, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0x0000, 0x0101},\n\t{0, 0x00a0, 0x0103},\n\t{0, 0x0078, 0x0105},\n\t{0, 0x0000, 0x010a},\n\t{0, 0x0024, 0x010b},\n\t{0, 0x0028, 0x0119},\n\t{0, 0x0088, 0x011b},\n\t{0, 0x0002, 0x011d},\n\t{0, 0x0003, 0x011e},\n\t{0, 0x0000, 0x0129},\n\t{0, 0x00fc, 0x012b},\n\t{0, 0x0008, 0x0102},\n\t{0, 0x0000, 0x0104},\n\t{0, 0x0008, 0x011a},\n\t{0, 0x0028, 0x011c},\n\t{0, 0x0021, 0x012a},\n\t{0, 0x0000, 0x0118},\n\t{0, 0x0000, 0x0132},\n\t{0, 0x0000, 0x0109},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0031, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x00dc, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0032, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0020, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0001, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0040, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0037, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0030, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0xfff9, 0x0124},\n\t{0, 0x0086, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0038, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0008, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0x0000, 0x0127},\n\t{0, 0xfff8, 0x0124},\n\t{0, 0xfffd, 0x0124},\n\t{0, 0xfffa, 0x0124},\n\t{0, 0x0003, 0x0111},\n};\n\n/* TESTME the old ibmcam driver repeats certain commands to Model1 cameras, we\n   do the same for now (testing needed to see if this is really necessary) */\nstatic const int cit_model1_ntries = 5;\nstatic const int cit_model1_ntries2 = 2;\n\nstatic int cit_write_reg(struct gspca_dev *gspca_dev, u16 value, u16 index)\n{\n\tstruct usb_device *udev = gspca_dev->dev;\n\tint err;\n\n\terr = usb_control_msg(udev, usb_sndctrlpipe(udev, 0), 0x00,\n\t\t\tUSB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_ENDPOINT,\n\t\t\tvalue, index, NULL, 0, 1000);\n\tif (err < 0)\n\t\tpr_err(\"Failed to write a register (index 0x%04X, value 0x%02X, error %d)\\n\",\n\t\t       index, value, err);\n\n\treturn 0;\n}\n\nstatic int cit_read_reg(struct gspca_dev *gspca_dev, u16 index, int verbose)\n{\n\tstruct usb_device *udev = gspca_dev->dev;\n\t__u8 *buf = gspca_dev->usb_buf;\n\tint res;\n\n\tres = usb_control_msg(udev, usb_rcvctrlpipe(udev, 0), 0x01,\n\t\t\tUSB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_ENDPOINT,\n\t\t\t0x00, index, buf, 8, 1000);\n\tif (res < 0) {\n\t\tpr_err(\"Failed to read a register (index 0x%04X, error %d)\\n\",\n\t\t       index, res);\n\t\treturn res;\n\t}\n\n\tif (verbose)\n\t\tgspca_dbg(gspca_dev, D_PROBE, \"Register %04x value: %02x\\n\",\n\t\t\t  index, buf[0]);\n\n\treturn 0;\n}\n\n/*\n * cit_send_FF_04_02()\n *\n * This procedure sends magic 3-command prefix to the camera.\n * The purpose of this prefix is not known.\n *\n * History:\n * 1/2/00   Created.\n */\nstatic void cit_send_FF_04_02(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x00FF, 0x0127);\n\tcit_write_reg(gspca_dev, 0x0004, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n}\n\nstatic void cit_send_00_04_06(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\tcit_write_reg(gspca_dev, 0x0004, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0006, 0x0124);\n}\n\nstatic void cit_send_x_00(struct gspca_dev *gspca_dev, unsigned short x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n}\n\nstatic void cit_send_x_00_05(struct gspca_dev *gspca_dev, unsigned short x)\n{\n\tcit_send_x_00(gspca_dev, x);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n}\n\nstatic void cit_send_x_00_05_02(struct gspca_dev *gspca_dev, unsigned short x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n}\n\nstatic void cit_send_x_01_00_05(struct gspca_dev *gspca_dev, u16 x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n}\n\nstatic void cit_send_x_00_05_02_01(struct gspca_dev *gspca_dev, u16 x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0124);\n}\n\nstatic void cit_send_x_00_05_02_08_01(struct gspca_dev *gspca_dev, u16 x)\n{\n\tcit_write_reg(gspca_dev, x,      0x0127);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0005, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0124);\n}\n\nstatic void cit_Packet_Format1(struct gspca_dev *gspca_dev, u16 fkey, u16 val)\n{\n\tcit_send_x_01_00_05(gspca_dev, 0x0088);\n\tcit_send_x_00_05(gspca_dev, fkey);\n\tcit_send_x_00_05_02_08_01(gspca_dev, val);\n\tcit_send_x_00_05(gspca_dev, 0x0088);\n\tcit_send_x_00_05_02_01(gspca_dev, fkey);\n\tcit_send_x_00_05(gspca_dev, 0x0089);\n\tcit_send_x_00(gspca_dev, fkey);\n\tcit_send_00_04_06(gspca_dev);\n\tcit_read_reg(gspca_dev, 0x0126, 0);\n\tcit_send_FF_04_02(gspca_dev);\n}\n\nstatic void cit_PacketFormat2(struct gspca_dev *gspca_dev, u16 fkey, u16 val)\n{\n\tcit_send_x_01_00_05(gspca_dev, 0x0088);\n\tcit_send_x_00_05(gspca_dev, fkey);\n\tcit_send_x_00_05_02(gspca_dev, val);\n}\n\nstatic void cit_model2_Packet2(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x00ff, 0x012d);\n\tcit_write_reg(gspca_dev, 0xfea3, 0x0124);\n}\n\nstatic void cit_model2_Packet1(struct gspca_dev *gspca_dev, u16 v1, u16 v2)\n{\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x00ff, 0x012e);\n\tcit_write_reg(gspca_dev, v1,     0x012f);\n\tcit_write_reg(gspca_dev, 0x00ff, 0x0130);\n\tcit_write_reg(gspca_dev, 0xc719, 0x0124);\n\tcit_write_reg(gspca_dev, v2,     0x0127);\n\n\tcit_model2_Packet2(gspca_dev);\n}\n\n/*\n * cit_model3_Packet1()\n *\n * 00_0078_012d\n * 00_0097_012f\n * 00_d141_0124\n * 00_0096_0127\n * 00_fea8_0124\n*/\nstatic void cit_model3_Packet1(struct gspca_dev *gspca_dev, u16 v1, u16 v2)\n{\n\tcit_write_reg(gspca_dev, 0x0078, 0x012d);\n\tcit_write_reg(gspca_dev, v1,     0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, v2,     0x0127);\n\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n}\n\nstatic void cit_model4_Packet1(struct gspca_dev *gspca_dev, u16 v1, u16 v2)\n{\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, v1,     0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, v2,     0x0127);\n\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n}\n\nstatic void cit_model4_BrightnessPacket(struct gspca_dev *gspca_dev, u16 val)\n{\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0026, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, val,    0x0127);\n\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0038, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0004, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n}\n\n/* this function is called at probe time */\nstatic int sd_config(struct gspca_dev *gspca_dev,\n\t\t     const struct usb_device_id *id)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tstruct cam *cam;\n\n\tsd->model = id->driver_info;\n\tif (sd->model == CIT_MODEL3 && ibm_netcam_pro)\n\t\tsd->model = CIT_IBM_NETCAM_PRO;\n\n\tcam = &gspca_dev->cam;\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tcam->cam_mode = model0_mode;\n\t\tcam->nmodes = ARRAY_SIZE(model0_mode);\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\tcam->cam_mode = cif_yuv_mode;\n\t\tcam->nmodes = ARRAY_SIZE(cif_yuv_mode);\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tcam->cam_mode = model2_mode + 1; /* no 160x120 */\n\t\tcam->nmodes = 3;\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tcam->cam_mode = vga_yuv_mode;\n\t\tcam->nmodes = ARRAY_SIZE(vga_yuv_mode);\n\t\tsd->stop_on_control_change = 1;\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\tcam->cam_mode = model2_mode;\n\t\tcam->nmodes = ARRAY_SIZE(model2_mode);\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcam->cam_mode = vga_yuv_mode;\n\t\tcam->nmodes = 2; /* no 640 x 480 */\n\t\tcam->input_flags = V4L2_IN_ST_VFLIP;\n\t\tsd->stop_on_control_change = 1;\n\t\tsd->sof_len = 4;\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int cit_init_model0(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100); /* turn on led */\n\tcit_write_reg(gspca_dev, 0x0001, 0x0112); /* turn on autogain ? */\n\tcit_write_reg(gspca_dev, 0x0000, 0x0400);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0400);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0420);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0420);\n\tcit_write_reg(gspca_dev, 0x000d, 0x0409);\n\tcit_write_reg(gspca_dev, 0x0002, 0x040a);\n\tcit_write_reg(gspca_dev, 0x0018, 0x0405);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0435);\n\tcit_write_reg(gspca_dev, 0x0026, 0x040b);\n\tcit_write_reg(gspca_dev, 0x0007, 0x0437);\n\tcit_write_reg(gspca_dev, 0x0015, 0x042f);\n\tcit_write_reg(gspca_dev, 0x002b, 0x0439);\n\tcit_write_reg(gspca_dev, 0x0026, 0x043a);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0438);\n\tcit_write_reg(gspca_dev, 0x001e, 0x042b);\n\tcit_write_reg(gspca_dev, 0x0041, 0x042c);\n\n\treturn 0;\n}\n\nstatic int cit_init_ibm_netcam_pro(struct gspca_dev *gspca_dev)\n{\n\tcit_read_reg(gspca_dev, 0x128, 1);\n\tcit_write_reg(gspca_dev, 0x0003, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0112);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0040, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0019, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0115);\n\tcit_write_reg(gspca_dev, 0x000b, 0x0115);\n\n\tcit_write_reg(gspca_dev, 0x0078, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0001, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0079, 0x012d);\n\tcit_write_reg(gspca_dev, 0x00ff, 0x0130);\n\tcit_write_reg(gspca_dev, 0xcd41, 0x0124);\n\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\tcit_read_reg(gspca_dev, 0x0126, 1);\n\n\tcit_model3_Packet1(gspca_dev, 0x0000, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0000, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x000b, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x000c, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x000d, 0x003a);\n\tcit_model3_Packet1(gspca_dev, 0x000e, 0x0060);\n\tcit_model3_Packet1(gspca_dev, 0x000f, 0x0060);\n\tcit_model3_Packet1(gspca_dev, 0x0010, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0011, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x0012, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x0013, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0014, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0015, 0x00fb);\n\tcit_model3_Packet1(gspca_dev, 0x0016, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0017, 0x0037);\n\tcit_model3_Packet1(gspca_dev, 0x0018, 0x0036);\n\tcit_model3_Packet1(gspca_dev, 0x001e, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0020, 0x00c1);\n\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0034);\n\tcit_model3_Packet1(gspca_dev, 0x0022, 0x0034);\n\tcit_model3_Packet1(gspca_dev, 0x0025, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0028, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x0029, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x002b, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x002c, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x002d, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x002e, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x002f, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x0030, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x0031, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x0032, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x0033, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0037, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x0039, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x003a, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x003b, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x003c, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0040, 0x000c);\n\tcit_model3_Packet1(gspca_dev, 0x0041, 0x00fb);\n\tcit_model3_Packet1(gspca_dev, 0x0042, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0043, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0045, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0046, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0047, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0048, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0049, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x004a, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x004b, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x004c, 0x00ff);\n\tcit_model3_Packet1(gspca_dev, 0x004f, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0050, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0051, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0055, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0056, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0057, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0058, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0059, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x005c, 0x0016);\n\tcit_model3_Packet1(gspca_dev, 0x005d, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x005e, 0x003c);\n\tcit_model3_Packet1(gspca_dev, 0x005f, 0x0050);\n\tcit_model3_Packet1(gspca_dev, 0x0060, 0x0044);\n\tcit_model3_Packet1(gspca_dev, 0x0061, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x006a, 0x007e);\n\tcit_model3_Packet1(gspca_dev, 0x006f, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0072, 0x001b);\n\tcit_model3_Packet1(gspca_dev, 0x0073, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0074, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0075, 0x001b);\n\tcit_model3_Packet1(gspca_dev, 0x0076, 0x002a);\n\tcit_model3_Packet1(gspca_dev, 0x0077, 0x003c);\n\tcit_model3_Packet1(gspca_dev, 0x0078, 0x0050);\n\tcit_model3_Packet1(gspca_dev, 0x007b, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x007c, 0x0011);\n\tcit_model3_Packet1(gspca_dev, 0x007d, 0x0024);\n\tcit_model3_Packet1(gspca_dev, 0x007e, 0x0043);\n\tcit_model3_Packet1(gspca_dev, 0x007f, 0x005a);\n\tcit_model3_Packet1(gspca_dev, 0x0084, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x0085, 0x0033);\n\tcit_model3_Packet1(gspca_dev, 0x0086, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0087, 0x0030);\n\tcit_model3_Packet1(gspca_dev, 0x0088, 0x0070);\n\tcit_model3_Packet1(gspca_dev, 0x008b, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x008f, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0090, 0x0006);\n\tcit_model3_Packet1(gspca_dev, 0x0091, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x0092, 0x005a);\n\tcit_model3_Packet1(gspca_dev, 0x0093, 0x0082);\n\tcit_model3_Packet1(gspca_dev, 0x0096, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x0097, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x0098, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00b0, 0x0046);\n\tcit_model3_Packet1(gspca_dev, 0x00b1, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00b2, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00b3, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00b4, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x00b6, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x00b7, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00bb, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00bc, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00bd, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00bf, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c0, 0x00c8);\n\tcit_model3_Packet1(gspca_dev, 0x00c1, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x00c2, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00c3, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c4, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00cb, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00cc, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00cd, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00ce, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00cf, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x00d0, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x00d1, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00d1, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00d2, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00d3, 0x00bf);\n\tcit_model3_Packet1(gspca_dev, 0x00ea, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x00eb, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00ec, 0x00e8);\n\tcit_model3_Packet1(gspca_dev, 0x00ed, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00ef, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x00f0, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00f2, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x00f4, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x00f5, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fa, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fb, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00fc, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fd, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00fe, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00ff, 0x0000);\n\n\tcit_model3_Packet1(gspca_dev, 0x00be, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x00c8, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c9, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x00ca, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x0053, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0082, 0x000e);\n\tcit_model3_Packet1(gspca_dev, 0x0083, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x0034, 0x003c);\n\tcit_model3_Packet1(gspca_dev, 0x006e, 0x0055);\n\tcit_model3_Packet1(gspca_dev, 0x0062, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0063, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0066, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0067, 0x0006);\n\tcit_model3_Packet1(gspca_dev, 0x006b, 0x0010);\n\tcit_model3_Packet1(gspca_dev, 0x005a, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x005b, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0023, 0x0006);\n\tcit_model3_Packet1(gspca_dev, 0x0026, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x0036, 0x0069);\n\tcit_model3_Packet1(gspca_dev, 0x0038, 0x0064);\n\tcit_model3_Packet1(gspca_dev, 0x003d, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x003e, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00b8, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x00b9, 0x0014);\n\tcit_model3_Packet1(gspca_dev, 0x00e6, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x00e8, 0x0001);\n\n\treturn 0;\n}\n\n/* this function is called at probe and resume time */\nstatic int sd_init(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tcit_init_model0(gspca_dev);\n\t\tsd_stop0(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL1:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL3:\n\tcase CIT_MODEL4:\n\t\tbreak; /* All is done in sd_start */\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_init_ibm_netcam_pro(gspca_dev);\n\t\tsd_stop0(gspca_dev);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int cit_set_brightness(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint i;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\t/* No (known) brightness control for these */\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\t/* Model 1: Brightness range 0 - 63 */\n\t\tcit_Packet_Format1(gspca_dev, 0x0031, val);\n\t\tcit_Packet_Format1(gspca_dev, 0x0032, val);\n\t\tcit_Packet_Format1(gspca_dev, 0x0033, val);\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\t/* Model 2: Brightness range 0x60 - 0xee */\n\t\t/* Scale 0 - 63 to 0x60 - 0xee */\n\t\ti = 0x60 + val * 2254 / 1000;\n\t\tcit_model2_Packet1(gspca_dev, 0x001a, i);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\t/* Model 3: Brightness range 'i' in [0x0C..0x3F] */\n\t\ti = val;\n\t\tif (i < 0x0c)\n\t\t\ti = 0x0c;\n\t\tcit_model3_Packet1(gspca_dev, 0x0036, i);\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\t/* Model 4: Brightness range 'i' in [0x04..0xb4] */\n\t\t/* Scale 0 - 63 to 0x04 - 0xb4 */\n\t\ti = 0x04 + val * 2794 / 1000;\n\t\tcit_model4_BrightnessPacket(gspca_dev, i);\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int cit_set_contrast(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0: {\n\t\tint i;\n\t\t/* gain 0-15, 0-20 -> 0-15 */\n\t\ti = val * 1000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0422);\n\t\t/* gain 0-31, may not be lower then 0x0422, 0-20 -> 0-31 */\n\t\ti = val * 2000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0423);\n\t\t/* gain 0-127, may not be lower then 0x0423, 0-20 -> 0-63  */\n\t\ti = val * 4000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0424);\n\t\t/* gain 0-127, may not be lower then 0x0424, , 0-20 -> 0-127 */\n\t\ti = val * 8000 / 1333;\n\t\tcit_write_reg(gspca_dev, i, 0x0425);\n\t\tbreak;\n\t}\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\t/* These models do not have this control. */\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t{\n\t\t/* Scale 0 - 20 to 15 - 0 */\n\t\tint i, new_contrast = (20 - val) * 1000 / 1333;\n\t\tfor (i = 0; i < cit_model1_ntries; i++) {\n\t\t\tcit_Packet_Format1(gspca_dev, 0x0014, new_contrast);\n\t\t\tcit_send_FF_04_02(gspca_dev);\n\t\t}\n\t\tbreak;\n\t}\n\tcase CIT_MODEL3:\n\t{\t/* Preset hardware values */\n\t\tstatic const struct {\n\t\t\tunsigned short cv1;\n\t\t\tunsigned short cv2;\n\t\t\tunsigned short cv3;\n\t\t} cv[7] = {\n\t\t\t{ 0x05, 0x05, 0x0f },\t/* Minimum */\n\t\t\t{ 0x04, 0x04, 0x16 },\n\t\t\t{ 0x02, 0x03, 0x16 },\n\t\t\t{ 0x02, 0x08, 0x16 },\n\t\t\t{ 0x01, 0x0c, 0x16 },\n\t\t\t{ 0x01, 0x0e, 0x16 },\n\t\t\t{ 0x01, 0x10, 0x16 }\t/* Maximum */\n\t\t};\n\t\tint i = val / 3;\n\t\tcit_model3_Packet1(gspca_dev, 0x0067, cv[i].cv1);\n\t\tcit_model3_Packet1(gspca_dev, 0x005b, cv[i].cv2);\n\t\tcit_model3_Packet1(gspca_dev, 0x005c, cv[i].cv3);\n\t\tbreak;\n\t}\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_model3_Packet1(gspca_dev, 0x005b, val + 1);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int cit_set_hue(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\t/* No hue control for these models */\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tcit_model2_Packet1(gspca_dev, 0x0024, val);\n\t\t/* cit_model2_Packet1(gspca_dev, 0x0020, sat); */\n\t\tbreak;\n\tcase CIT_MODEL3: {\n\t\t/* Model 3: Brightness range 'i' in [0x05..0x37] */\n\t\t/* TESTME according to the ibmcam driver this does not work */\n\t\tif (0) {\n\t\t\t/* Scale 0 - 127 to 0x05 - 0x37 */\n\t\t\tint i = 0x05 + val * 1000 / 2540;\n\t\t\tcit_model3_Packet1(gspca_dev, 0x007e, i);\n\t\t}\n\t\tbreak;\n\t}\n\tcase CIT_MODEL4:\n\t\t/* HDG: taken from ibmcam, setting the color gains does not\n\t\t * really belong here.\n\t\t *\n\t\t * I am not sure r/g/b_gain variables exactly control gain\n\t\t * of those channels. Most likely they subtly change some\n\t\t * very internal image processing settings in the camera.\n\t\t * In any case, here is what they do, and feel free to tweak:\n\t\t *\n\t\t * r_gain: seriously affects red gain\n\t\t * g_gain: seriously affects green gain\n\t\t * b_gain: seriously affects blue gain\n\t\t * hue: changes average color from violet (0) to red (0xFF)\n\t\t */\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev,    160, 0x0127);  /* Green gain */\n\t\tcit_write_reg(gspca_dev,    160, 0x012e);  /* Red gain */\n\t\tcit_write_reg(gspca_dev,    160, 0x0130);  /* Blue gain */\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, val, 0x012d); /* Hue */\n\t\tcit_write_reg(gspca_dev, 0xf545, 0x0124);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int cit_set_sharpness(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\t/* These models do not have this control */\n\t\tbreak;\n\tcase CIT_MODEL1: {\n\t\tint i;\n\t\tstatic const unsigned short sa[] = {\n\t\t\t0x11, 0x13, 0x16, 0x18, 0x1a, 0x8, 0x0a };\n\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_PacketFormat2(gspca_dev, 0x0013, sa[val]);\n\t\tbreak;\n\t}\n\tcase CIT_MODEL3:\n\t{\t/*\n\t\t * \"Use a table of magic numbers.\n\t\t *  This setting doesn't really change much.\n\t\t *  But that's how Windows does it.\"\n\t\t */\n\t\tstatic const struct {\n\t\t\tunsigned short sv1;\n\t\t\tunsigned short sv2;\n\t\t\tunsigned short sv3;\n\t\t\tunsigned short sv4;\n\t\t} sv[7] = {\n\t\t\t{ 0x00, 0x00, 0x05, 0x14 },\t/* Smoothest */\n\t\t\t{ 0x01, 0x04, 0x05, 0x14 },\n\t\t\t{ 0x02, 0x04, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x04, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x05, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x06, 0x05, 0x14 },\n\t\t\t{ 0x03, 0x07, 0x05, 0x14 }\t/* Sharpest */\n\t\t};\n\t\tcit_model3_Packet1(gspca_dev, 0x0060, sv[val].sv1);\n\t\tcit_model3_Packet1(gspca_dev, 0x0061, sv[val].sv2);\n\t\tcit_model3_Packet1(gspca_dev, 0x0062, sv[val].sv3);\n\t\tcit_model3_Packet1(gspca_dev, 0x0063, sv[val].sv4);\n\t\tbreak;\n\t}\n\t}\n\treturn 0;\n}\n\n/*\n * cit_set_lighting()\n *\n * Camera model 1:\n * We have 3 levels of lighting conditions: 0=Bright, 1=Medium, 2=Low.\n *\n * Camera model 2:\n * We have 16 levels of lighting, 0 for bright light and up to 15 for\n * low light. But values above 5 or so are useless because camera is\n * not really capable to produce anything worth viewing at such light.\n * This setting may be altered only in certain camera state.\n *\n * Low lighting forces slower FPS.\n *\n * History:\n * 1/5/00   Created.\n * 2/20/00  Added support for Model 2 cameras.\n */\nstatic void cit_set_lighting(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL3:\n\tcase CIT_MODEL4:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tbreak;\n\tcase CIT_MODEL1: {\n\t\tint i;\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x0027, val);\n\t\tbreak;\n\t}\n\t}\n}\n\nstatic void cit_set_hflip(struct gspca_dev *gspca_dev, s32 val)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tif (val)\n\t\t\tcit_write_reg(gspca_dev, 0x0020, 0x0115);\n\t\telse\n\t\t\tcit_write_reg(gspca_dev, 0x0040, 0x0115);\n\t\tbreak;\n\tcase CIT_MODEL1:\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL3:\n\tcase CIT_MODEL4:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tbreak;\n\t}\n}\n\nstatic int cit_restart_stream(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0114);\n\t\t/* Fall through */\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x010c); /* Go! */\n\t\tusb_clear_halt(gspca_dev->dev, gspca_dev->urb[0]->pipe);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0114);\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x010c); /* Go! */\n\t\tusb_clear_halt(gspca_dev->dev, gspca_dev->urb[0]->pipe);\n\t\t/* Clear button events from while we were not streaming */\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0113);\n\t\tbreak;\n\t}\n\n\tsd->sof_read = 0;\n\n\treturn 0;\n}\n\nstatic int cit_get_packet_size(struct gspca_dev *gspca_dev)\n{\n\tstruct usb_host_interface *alt;\n\tstruct usb_interface *intf;\n\n\tintf = usb_ifnum_to_if(gspca_dev->dev, gspca_dev->iface);\n\talt = usb_altnum_to_altsetting(intf, gspca_dev->alt);\n\tif (!alt) {\n\t\tpr_err(\"Couldn't get altsetting\\n\");\n\t\treturn -EIO;\n\t}\n\n\tif (alt->desc.bNumEndpoints < 1)\n\t\treturn -ENODEV;\n\n\treturn le16_to_cpu(alt->endpoint[0].desc.wMaxPacketSize);\n}\n\n/* Calculate the clockdiv giving us max fps given the available bandwidth */\nstatic int cit_get_clock_div(struct gspca_dev *gspca_dev)\n{\n\tint clock_div = 7; /* 0=30 1=25 2=20 3=15 4=12 5=7.5 6=6 7=3fps ?? */\n\tint fps[8] = { 30, 25, 20, 15, 12, 8, 6, 3 };\n\tint packet_size;\n\n\tpacket_size = cit_get_packet_size(gspca_dev);\n\tif (packet_size < 0)\n\t\treturn packet_size;\n\n\twhile (clock_div > 3 &&\n\t\t\t1000 * packet_size >\n\t\t\tgspca_dev->pixfmt.width * gspca_dev->pixfmt.height *\n\t\t\tfps[clock_div - 1] * 3 / 2)\n\t\tclock_div--;\n\n\tgspca_dbg(gspca_dev, D_PROBE,\n\t\t  \"PacketSize: %d, res: %dx%d -> using clockdiv: %d (%d fps)\\n\",\n\t\t  packet_size,\n\t\t  gspca_dev->pixfmt.width, gspca_dev->pixfmt.height,\n\t\t  clock_div, fps[clock_div]);\n\n\treturn clock_div;\n}\n\nstatic int cit_start_model0(struct gspca_dev *gspca_dev)\n{\n\tconst unsigned short compression = 0; /* 0=none, 7=best frame rate */\n\tint clock_div;\n\n\tclock_div = cit_get_clock_div(gspca_dev);\n\tif (clock_div < 0)\n\t\treturn clock_div;\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100); /* turn on led */\n\tcit_write_reg(gspca_dev, 0x0003, 0x0438);\n\tcit_write_reg(gspca_dev, 0x001e, 0x042b);\n\tcit_write_reg(gspca_dev, 0x0041, 0x042c);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0436);\n\tcit_write_reg(gspca_dev, 0x0024, 0x0403);\n\tcit_write_reg(gspca_dev, 0x002c, 0x0404);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0426);\n\tcit_write_reg(gspca_dev, 0x0014, 0x0427);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160: /* 160x120 */\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105);\n\t\tbreak;\n\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0005, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x00b0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0090, 0x0105);\n\t\tbreak;\n\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0005, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105);\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, compression, 0x0109);\n\tcit_write_reg(gspca_dev, clock_div, 0x0111);\n\n\treturn 0;\n}\n\nstatic int cit_start_model1(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint i, clock_div;\n\n\tclock_div = cit_get_clock_div(gspca_dev);\n\tif (clock_div < 0)\n\t\treturn clock_div;\n\n\tcit_read_reg(gspca_dev, 0x0128, 1);\n\tcit_read_reg(gspca_dev, 0x0100, 0);\n\tcit_write_reg(gspca_dev, 0x01, 0x0100);\t/* LED On  */\n\tcit_read_reg(gspca_dev, 0x0100, 0);\n\tcit_write_reg(gspca_dev, 0x81, 0x0100);\t/* LED Off */\n\tcit_read_reg(gspca_dev, 0x0100, 0);\n\tcit_write_reg(gspca_dev, 0x01, 0x0100);\t/* LED On  */\n\tcit_write_reg(gspca_dev, 0x01, 0x0108);\n\n\tcit_write_reg(gspca_dev, 0x03, 0x0112);\n\tcit_read_reg(gspca_dev, 0x0115, 0);\n\tcit_write_reg(gspca_dev, 0x06, 0x0115);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x44, 0x0116);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x40, 0x0116);\n\tcit_read_reg(gspca_dev, 0x0115, 0);\n\tcit_write_reg(gspca_dev, 0x0e, 0x0115);\n\tcit_write_reg(gspca_dev, 0x19, 0x012c);\n\n\tcit_Packet_Format1(gspca_dev, 0x00, 0x1e);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x0d);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x09);\n\tcit_Packet_Format1(gspca_dev, 0x3b, 0x00);\n\tcit_Packet_Format1(gspca_dev, 0x28, 0x22);\n\tcit_Packet_Format1(gspca_dev, 0x27, 0x00);\n\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1f);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x08);\n\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x2c, 0x00);\n\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x30, 0x14);\n\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x02);\n\tcit_PacketFormat2(gspca_dev, 0x01, 0xe1);\n\tcit_PacketFormat2(gspca_dev, 0x02, 0xcd);\n\tcit_PacketFormat2(gspca_dev, 0x03, 0xcd);\n\tcit_PacketFormat2(gspca_dev, 0x04, 0xfa);\n\tcit_PacketFormat2(gspca_dev, 0x3f, 0xff);\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x00);\n\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x02);\n\tcit_PacketFormat2(gspca_dev, 0x0a, 0x37);\n\tcit_PacketFormat2(gspca_dev, 0x0b, 0xb8);\n\tcit_PacketFormat2(gspca_dev, 0x0c, 0xf3);\n\tcit_PacketFormat2(gspca_dev, 0x0d, 0xe3);\n\tcit_PacketFormat2(gspca_dev, 0x0e, 0x0d);\n\tcit_PacketFormat2(gspca_dev, 0x0f, 0xf2);\n\tcit_PacketFormat2(gspca_dev, 0x10, 0xd5);\n\tcit_PacketFormat2(gspca_dev, 0x11, 0xba);\n\tcit_PacketFormat2(gspca_dev, 0x12, 0x53);\n\tcit_PacketFormat2(gspca_dev, 0x3f, 0xff);\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x00);\n\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x02);\n\tcit_PacketFormat2(gspca_dev, 0x16, 0x00);\n\tcit_PacketFormat2(gspca_dev, 0x17, 0x28);\n\tcit_PacketFormat2(gspca_dev, 0x18, 0x7d);\n\tcit_PacketFormat2(gspca_dev, 0x19, 0xbe);\n\tcit_PacketFormat2(gspca_dev, 0x3f, 0xff);\n\tcit_PacketFormat2(gspca_dev, 0x39, 0x00);\n\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x00, 0x18);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x13, 0x18);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x14, 0x06);\n\n\t/* TESTME These are handled through controls\n\t   KEEP until someone can test leaving this out is ok */\n\tif (0) {\n\t\t/* This is default brightness */\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x31, 0x37);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x32, 0x46);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x33, 0x55);\n\t}\n\n\tcit_Packet_Format1(gspca_dev, 0x2e, 0x04);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x2d, 0x04);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x29, 0x80);\n\tcit_Packet_Format1(gspca_dev, 0x2c, 0x01);\n\tcit_Packet_Format1(gspca_dev, 0x30, 0x17);\n\tcit_Packet_Format1(gspca_dev, 0x39, 0x08);\n\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\tcit_Packet_Format1(gspca_dev, 0x34, 0x00);\n\n\tcit_write_reg(gspca_dev, 0x00, 0x0101);\n\tcit_write_reg(gspca_dev, 0x00, 0x010a);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 128: /* 128x96 */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x60, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x0c, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011b);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x0b, 0x011d);\n\t\tcit_write_reg(gspca_dev, 0x00, 0x011e);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00, 0x0129);\n\t\tbreak;\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0xb0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x8f, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x06, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011b);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x0d, 0x011d);\n\t\tcit_write_reg(gspca_dev, 0x00, 0x011e);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x03, 0x0129);\n\t\tbreak;\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0xb0, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x90, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x02, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011b);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x05, 0x011d);\n\t\tcit_write_reg(gspca_dev, 0x00, 0x011e);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00, 0x0129);\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, 0xff, 0x012b);\n\n\t/* TESTME These are handled through controls\n\t   KEEP until someone can test leaving this out is ok */\n\tif (0) {\n\t\t/* This is another brightness - don't know why */\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x31, 0xc3);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x32, 0xd2);\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x33, 0xe1);\n\n\t\t/* Default contrast */\n\t\tfor (i = 0; i < cit_model1_ntries; i++)\n\t\t\tcit_Packet_Format1(gspca_dev, 0x14, 0x0a);\n\n\t\t/* Default sharpness */\n\t\tfor (i = 0; i < cit_model1_ntries2; i++)\n\t\t\tcit_PacketFormat2(gspca_dev, 0x13, 0x1a);\n\n\t\t/* Default lighting conditions */\n\t\tcit_Packet_Format1(gspca_dev, 0x0027,\n\t\t\t\t   v4l2_ctrl_g_ctrl(sd->lighting));\n\t}\n\n\t/* Assorted init */\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 128: /* 128x96 */\n\t\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1e);\n\t\tcit_write_reg(gspca_dev, 0xc9, 0x0119);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0109);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x36, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x1a, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011a);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x2b, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x23, 0x012a);\t/* Same everywhere */\n\t\tbreak;\n\tcase 176: /* 176x144 */\n\t\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1e);\n\t\tcit_write_reg(gspca_dev, 0xc9, 0x0119);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0109);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x04, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x02, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011a);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x2b, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x23, 0x012a);\t/* Same everywhere */\n\t\tbreak;\n\tcase 352: /* 352x288 */\n\t\tcit_Packet_Format1(gspca_dev, 0x2b, 0x1f);\n\t\tcit_write_reg(gspca_dev, 0xc9, 0x0119);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x80, 0x0109);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x08, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x01, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x04, 0x011a);\t/* Same everywhere */\n\t\tcit_write_reg(gspca_dev, 0x2f, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x23, 0x012a);\t/* Same everywhere */\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, 0x01, 0x0100);\t/* LED On  */\n\tcit_write_reg(gspca_dev, clock_div, 0x0111);\n\n\treturn 0;\n}\n\nstatic int cit_start_model2(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint clock_div = 0;\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\t/* LED on */\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0112);\n\tcit_write_reg(gspca_dev, 0x00bc, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0008, 0x012b);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\t/* All except 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\t/* 176x144, 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x00b9, 0x010a);\t/* Unique to this mode */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x0119);\t/* Unique to this mode */\n\t\t/* TESTME HDG: this does not seem right\n\t\t   (it is 2 for all other resolutions) */\n\t\tsd->sof_len = 10;\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\t/* Unique to this mode */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\t/* 320x240, 352x240 */\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\t/* All except 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\t/* All except 176x144 */\n\t\tsd->sof_len = 2;\n\t\tbreak;\n#if 0\n\tcase VIDEOSIZE_352x240:\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\t/* All except 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\t/* 320x240, 352x240 */\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\t/* All except 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\t/* All except 176x144 */\n\t\tsd->sof_len = 2;\n\t\tbreak;\n#endif\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\t/* All except 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\t/* Same */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\t/* 176x144, 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\t/* All except 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\t/* All except 176x144 */\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\t}\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\t/* LED on */\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0050, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x0040, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0111);\n\t\tbreak;\n\t}\n\tcit_write_reg(gspca_dev, 0x009b, 0x010f);\n\tcit_write_reg(gspca_dev, 0x00bb, 0x010f);\n\n\t/*\n\t * Hardware settings, may affect CMOS sensor; not user controls!\n\t * -------------------------------------------------------------\n\t * 0x0004: no effect\n\t * 0x0006: hardware effect\n\t * 0x0008: no effect\n\t * 0x000a: stops video stream, probably important h/w setting\n\t * 0x000c: changes color in hardware manner (not user setting)\n\t * 0x0012: changes number of colors (does not affect speed)\n\t * 0x002a: no effect\n\t * 0x002c: hardware setting (related to scan lines)\n\t * 0x002e: stops video stream, probably important h/w setting\n\t */\n\tcit_model2_Packet1(gspca_dev, 0x000a, 0x005c);\n\tcit_model2_Packet1(gspca_dev, 0x0004, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x0006, 0x00fb);\n\tcit_model2_Packet1(gspca_dev, 0x0008, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x000c, 0x0009);\n\tcit_model2_Packet1(gspca_dev, 0x0012, 0x000a);\n\tcit_model2_Packet1(gspca_dev, 0x002a, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x002c, 0x0000);\n\tcit_model2_Packet1(gspca_dev, 0x002e, 0x0008);\n\n\t/*\n\t * Function 0x0030 pops up all over the place. Apparently\n\t * it is a hardware control register, with every bit assigned to\n\t * do something.\n\t */\n\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0000);\n\n\t/*\n\t * Magic control of CMOS sensor. Only lower values like\n\t * 0-3 work, and picture shifts left or right. Don't change.\n\t */\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0002);\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0002); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x004a); /* Another hardware setting */\n\t\tclock_div = 6;\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0009);\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0005); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x0044); /* Another hardware setting */\n\t\tclock_div = 8;\n\t\tbreak;\n#if 0\n\tcase VIDEOSIZE_352x240:\n\t\t/* This mode doesn't work as Windows programs it; changed to work */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0009); /* Windows sets this to 8 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0003); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x0044); /* Windows sets this to 0x0045 */\n\t\tclock_div = 10;\n\t\tbreak;\n#endif\n\tcase 352: /* 352x288 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0014, 0x0003);\n\t\tcit_model2_Packet1(gspca_dev, 0x0016, 0x0002); /* Horizontal shift */\n\t\tcit_model2_Packet1(gspca_dev, 0x0018, 0x004a); /* Another hardware setting */\n\t\tclock_div = 16;\n\t\tbreak;\n\t}\n\n\t/* TESTME These are handled through controls\n\t   KEEP until someone can test leaving this out is ok */\n\tif (0)\n\t\tcit_model2_Packet1(gspca_dev, 0x001a, 0x005a);\n\n\t/*\n\t * We have our own frame rate setting varying from 0 (slowest) to 6\n\t * (fastest). The camera model 2 allows frame rate in range [0..0x1F]\n\t # where 0 is also the slowest setting. However for all practical\n\t # reasons high settings make no sense because USB is not fast enough\n\t # to support high FPS. Be aware that the picture datastream will be\n\t # severely disrupted if you ask for frame rate faster than allowed\n\t # for the video size - see below:\n\t *\n\t * Allowable ranges (obtained experimentally on OHCI, K6-3, 450 MHz):\n\t * -----------------------------------------------------------------\n\t * 176x144: [6..31]\n\t * 320x240: [8..31]\n\t * 352x240: [10..31]\n\t * 352x288: [16..31] I have to raise lower threshold for stability...\n\t *\n\t * As usual, slower FPS provides better sensitivity.\n\t */\n\tcit_model2_Packet1(gspca_dev, 0x001c, clock_div);\n\n\t/*\n\t * This setting does not visibly affect pictures; left it here\n\t * because it was present in Windows USB data stream. This function\n\t * does not allow arbitrary values and apparently is a bit mask, to\n\t * be activated only at appropriate time. Don't change it randomly!\n\t */\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 176: /* 176x144 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x00c2);\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x0044);\n\t\tbreak;\n#if 0\n\tcase VIDEOSIZE_352x240:\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x0046);\n\t\tbreak;\n#endif\n\tcase 352: /* 352x288 */\n\t\tcit_model2_Packet1(gspca_dev, 0x0026, 0x0048);\n\t\tbreak;\n\t}\n\n\tcit_model2_Packet1(gspca_dev, 0x0028, v4l2_ctrl_g_ctrl(sd->lighting));\n\t/* model2 cannot change the backlight compensation while streaming */\n\tv4l2_ctrl_grab(sd->lighting, true);\n\n\t/* color balance rg2 */\n\tcit_model2_Packet1(gspca_dev, 0x001e, 0x002f);\n\t/* saturation */\n\tcit_model2_Packet1(gspca_dev, 0x0020, 0x0034);\n\t/* color balance yb */\n\tcit_model2_Packet1(gspca_dev, 0x0022, 0x00a0);\n\n\t/* Hardware control command */\n\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0004);\n\n\treturn 0;\n}\n\nstatic int cit_start_model3(struct gspca_dev *gspca_dev)\n{\n\tconst unsigned short compression = 0; /* 0=none, 7=best frame rate */\n\tint i, clock_div = 0;\n\n\t/* HDG not in ibmcam driver, added to see if it helps with\n\t   auto-detecting between model3 and ibm netcamera pro */\n\tcit_read_reg(gspca_dev, 0x128, 1);\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_read_reg(gspca_dev, 0x0116, 0);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0112);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0040, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0019, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\tcit_write_reg(gspca_dev, 0x0002, 0x0115);\n\tcit_write_reg(gspca_dev, 0x0003, 0x0115);\n\tcit_read_reg(gspca_dev, 0x0115, 0);\n\tcit_write_reg(gspca_dev, 0x000b, 0x0115);\n\n\t/* TESTME HDG not in ibmcam driver, added to see if it helps with\n\t   auto-detecting between model3 and ibm netcamera pro */\n\tif (0) {\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0079, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x00ff, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0xcd41, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_read_reg(gspca_dev, 0x0126, 1);\n\t}\n\n\tcit_model3_Packet1(gspca_dev, 0x000a, 0x0040);\n\tcit_model3_Packet1(gspca_dev, 0x000b, 0x00f6);\n\tcit_model3_Packet1(gspca_dev, 0x000c, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x000d, 0x0020);\n\tcit_model3_Packet1(gspca_dev, 0x000e, 0x0033);\n\tcit_model3_Packet1(gspca_dev, 0x000f, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x0010, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0011, 0x0070);\n\tcit_model3_Packet1(gspca_dev, 0x0012, 0x0030);\n\tcit_model3_Packet1(gspca_dev, 0x0013, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0014, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0015, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0016, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0017, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0018, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x001e, 0x00c3);\n\tcit_model3_Packet1(gspca_dev, 0x0020, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0028, 0x0010);\n\tcit_model3_Packet1(gspca_dev, 0x0029, 0x0054);\n\tcit_model3_Packet1(gspca_dev, 0x002a, 0x0013);\n\tcit_model3_Packet1(gspca_dev, 0x002b, 0x0007);\n\tcit_model3_Packet1(gspca_dev, 0x002d, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x002e, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0031, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0032, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0033, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0034, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0035, 0x0038);\n\tcit_model3_Packet1(gspca_dev, 0x003a, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x003c, 0x001e);\n\tcit_model3_Packet1(gspca_dev, 0x003f, 0x000a);\n\tcit_model3_Packet1(gspca_dev, 0x0041, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0046, 0x003f);\n\tcit_model3_Packet1(gspca_dev, 0x0047, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0050, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x0052, 0x001a);\n\tcit_model3_Packet1(gspca_dev, 0x0053, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x005a, 0x006b);\n\tcit_model3_Packet1(gspca_dev, 0x005d, 0x001e);\n\tcit_model3_Packet1(gspca_dev, 0x005e, 0x0030);\n\tcit_model3_Packet1(gspca_dev, 0x005f, 0x0041);\n\tcit_model3_Packet1(gspca_dev, 0x0064, 0x0008);\n\tcit_model3_Packet1(gspca_dev, 0x0065, 0x0015);\n\tcit_model3_Packet1(gspca_dev, 0x0068, 0x000f);\n\tcit_model3_Packet1(gspca_dev, 0x0079, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x007a, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x007c, 0x003f);\n\tcit_model3_Packet1(gspca_dev, 0x0082, 0x000f);\n\tcit_model3_Packet1(gspca_dev, 0x0085, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0099, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x009b, 0x0023);\n\tcit_model3_Packet1(gspca_dev, 0x009c, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x009d, 0x0096);\n\tcit_model3_Packet1(gspca_dev, 0x009e, 0x0096);\n\tcit_model3_Packet1(gspca_dev, 0x009f, 0x000a);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0101); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x010b); /* Differs everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00a9, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0002, 0x011d); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x011e); /* Same on 160x120, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0001); /* Same */\n\t\tcit_write_reg(gspca_dev, compression, 0x0109);\n\t\tclock_div = 3;\n\t\tbreak;\n\tcase 320:\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0101); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0103); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x0105); /* Same on 160x120, 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x010b); /* Differs everywhere */\n\t\tcit_write_reg(gspca_dev, 0x0002, 0x011d); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x011e);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\t\t/* 4 commands from 160x120 skipped */\n\t\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0001); /* Same */\n\t\tcit_write_reg(gspca_dev, compression, 0x0109);\n\t\tcit_write_reg(gspca_dev, 0x00d9, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0021, 0x0102); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x003f, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tclock_div = 5;\n\t\tbreak;\n\tcase 640:\n\t\tcit_write_reg(gspca_dev, 0x00f0, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x010b); /* Differs everywhere */\n\t\tcit_write_reg(gspca_dev, 0x00d9, 0x0119); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x011b); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011d); /* NC */\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x011e); /* Same on 160x120, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x0021, 0x0102); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x0104); /* NC */\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x003f, 0x011c); /* Same on 320x240, 640x480 */\n\t\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0118); /* Same on 320x240, 640x480 */\n\t\tcit_model3_Packet1(gspca_dev, 0x0021, 0x0001); /* Same */\n\t\tcit_write_reg(gspca_dev, compression, 0x0109);\n\t\tcit_write_reg(gspca_dev, 0x0040, 0x0101);\n\t\tcit_write_reg(gspca_dev, 0x0040, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132); /* Same on 320x240, 640x480 */\n\t\tclock_div = 7;\n\t\tbreak;\n\t}\n\n\tcit_model3_Packet1(gspca_dev, 0x007e, 0x000e);\t/* Hue */\n\tcit_model3_Packet1(gspca_dev, 0x0036, 0x0011);\t/* Brightness */\n\tcit_model3_Packet1(gspca_dev, 0x0060, 0x0002);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0061, 0x0004);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0062, 0x0005);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0063, 0x0014);\t/* Sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0096, 0x00a0);\t/* Red sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0097, 0x0096);\t/* Blue sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0067, 0x0001);\t/* Contrast */\n\tcit_model3_Packet1(gspca_dev, 0x005b, 0x000c);\t/* Contrast */\n\tcit_model3_Packet1(gspca_dev, 0x005c, 0x0016);\t/* Contrast */\n\tcit_model3_Packet1(gspca_dev, 0x0098, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x002c, 0x0003);\t/* Was 1, broke 640x480 */\n\tcit_model3_Packet1(gspca_dev, 0x002f, 0x002a);\n\tcit_model3_Packet1(gspca_dev, 0x0030, 0x0029);\n\tcit_model3_Packet1(gspca_dev, 0x0037, 0x0002);\n\tcit_model3_Packet1(gspca_dev, 0x0038, 0x0059);\n\tcit_model3_Packet1(gspca_dev, 0x003d, 0x002e);\n\tcit_model3_Packet1(gspca_dev, 0x003e, 0x0028);\n\tcit_model3_Packet1(gspca_dev, 0x0078, 0x0005);\n\tcit_model3_Packet1(gspca_dev, 0x007b, 0x0011);\n\tcit_model3_Packet1(gspca_dev, 0x007d, 0x004b);\n\tcit_model3_Packet1(gspca_dev, 0x007f, 0x0022);\n\tcit_model3_Packet1(gspca_dev, 0x0080, 0x000c);\n\tcit_model3_Packet1(gspca_dev, 0x0081, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x0083, 0x00fd);\n\tcit_model3_Packet1(gspca_dev, 0x0086, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x0087, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x007e, 0x000e);\n\tcit_model3_Packet1(gspca_dev, 0x0096, 0x00a0);\t/* Red sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0097, 0x0096);\t/* Blue sharpness */\n\tcit_model3_Packet1(gspca_dev, 0x0098, 0x000b);\n\n\t/* FIXME we should probably use cit_get_clock_div() here (in\n\t   combination with isoc negotiation using the programmable isoc size)\n\t   like with the IBM netcam pro). */\n\tcit_write_reg(gspca_dev, clock_div, 0x0111); /* Clock Divider */\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0000); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0039, 0x001f); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x003b, 0x003c); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0040, 0x000a);\n\t\tcit_model3_Packet1(gspca_dev, 0x0051, 0x000a);\n\t\tbreak;\n\tcase 320:\n\t\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0000); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0039, 0x001f); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x003b, 0x003c); /* Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0040, 0x0008);\n\t\tcit_model3_Packet1(gspca_dev, 0x0051, 0x000b);\n\t\tbreak;\n\tcase 640:\n\t\tcit_model3_Packet1(gspca_dev, 0x001f, 0x0002);\t/* !Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0039, 0x003e);\t/* !Same */\n\t\tcit_model3_Packet1(gspca_dev, 0x0040, 0x0008);\n\t\tcit_model3_Packet1(gspca_dev, 0x0051, 0x000a);\n\t\tbreak;\n\t}\n\n/*\tif (sd->input_index) { */\n\tif (rca_input) {\n\t\tfor (i = 0; i < ARRAY_SIZE(rca_initdata); i++) {\n\t\t\tif (rca_initdata[i][0])\n\t\t\t\tcit_read_reg(gspca_dev, rca_initdata[i][2], 0);\n\t\t\telse\n\t\t\t\tcit_write_reg(gspca_dev, rca_initdata[i][1],\n\t\t\t\t\t      rca_initdata[i][2]);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nstatic int cit_start_model4(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_write_reg(gspca_dev, 0x00c0, 0x0111);\n\tcit_write_reg(gspca_dev, 0x00bc, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0080, 0x012b);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0133);\n\tcit_write_reg(gspca_dev, 0x009b, 0x010f);\n\tcit_write_reg(gspca_dev, 0x00bb, 0x010f);\n\tcit_model4_Packet1(gspca_dev, 0x0038, 0x0000);\n\tcit_model4_Packet1(gspca_dev, 0x000a, 0x005c);\n\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0004, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\tcit_write_reg(gspca_dev, 0x00fb, 0x012e);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0130);\n\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\tcit_write_reg(gspca_dev, 0x000c, 0x0127);\n\tcit_write_reg(gspca_dev, 0x0009, 0x012e);\n\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\n\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0012, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0127);\n\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\tcit_write_reg(gspca_dev, 0x002a, 0x012d);\n\tcit_write_reg(gspca_dev, 0x0000, 0x012f);\n\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\tcit_model4_Packet1(gspca_dev, 0x0034, 0x0000);\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 128: /* 128x96 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x000a, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005a, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0043, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00eb, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0031, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\tcase 160: /* 160x120 */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00b9, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x000b, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005a, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0043, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00c7, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0025, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0048, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0035, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0048, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0090, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\tcase 176: /* 176x144 */\n\t\tcit_write_reg(gspca_dev, 0x0038, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00b9, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0007, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005e, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0049, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00c7, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x002a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x006d, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\t/* TESTME HDG: this does not seem right\n\t\t   (it is 2 for all other resolutions) */\n\t\tsd->sof_len = 10;\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00d0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x000a, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005a, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0043, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00eb, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0031, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0017, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0078, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\tcase 352: /* 352x288 */\n\t\tcit_write_reg(gspca_dev, 0x0070, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0039, 0x010a);\n\t\tcit_write_reg(gspca_dev, 0x0001, 0x0102);\n\t\tcit_write_reg(gspca_dev, 0x002c, 0x0103);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x0105);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0016, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0014, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0002, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x001a, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a0a, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x005e, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x9545, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0018, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0049, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd055, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x001c, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00cf, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0xaa28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0032, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x82a8, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0036, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0xfffa, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x00aa, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x001e, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd141, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0x0013, 0x012e);\n\t\tcit_write_reg(gspca_dev, 0x0025, 0x0130);\n\t\tcit_write_reg(gspca_dev, 0x8a28, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0010, 0x012d);\n\t\tcit_write_reg(gspca_dev, 0x0048, 0x012f);\n\t\tcit_write_reg(gspca_dev, 0xd145, 0x0124);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0127);\n\t\tcit_write_reg(gspca_dev, 0xfea8, 0x0124);\n\t\tsd->sof_len = 2;\n\t\tbreak;\n\t}\n\n\tcit_model4_Packet1(gspca_dev, 0x0038, 0x0004);\n\n\treturn 0;\n}\n\nstatic int cit_start_ibm_netcam_pro(struct gspca_dev *gspca_dev)\n{\n\tconst unsigned short compression = 0; /* 0=none, 7=best frame rate */\n\tint i, clock_div;\n\n\tclock_div = cit_get_clock_div(gspca_dev);\n\tif (clock_div < 0)\n\t\treturn clock_div;\n\n\tcit_write_reg(gspca_dev, 0x0003, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0100);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\t/* cit_write_reg(gspca_dev, 0x0002, 0x0112); see sd_stop0 */\n\tcit_write_reg(gspca_dev, 0x0000, 0x0133);\n\tcit_write_reg(gspca_dev, 0x0000, 0x0123);\n\tcit_write_reg(gspca_dev, 0x0001, 0x0117);\n\tcit_write_reg(gspca_dev, 0x0040, 0x0108);\n\tcit_write_reg(gspca_dev, 0x0019, 0x012c);\n\tcit_write_reg(gspca_dev, 0x0060, 0x0116);\n\t/* cit_write_reg(gspca_dev, 0x000b, 0x0115); see sd_stop0 */\n\n\tcit_model3_Packet1(gspca_dev, 0x0049, 0x0000);\n\n\tcit_write_reg(gspca_dev, 0x0000, 0x0101); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x003a, 0x0102); /* Hstart */\n\tcit_write_reg(gspca_dev, 0x00a0, 0x0103); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x0078, 0x0105); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x0000, 0x010a); /* Same */\n\tcit_write_reg(gspca_dev, 0x0002, 0x011d); /* Same on 160x120, 320x240 */\n\tcit_write_reg(gspca_dev, 0x0000, 0x0129); /* Same */\n\tcit_write_reg(gspca_dev, 0x00fc, 0x012b); /* Same */\n\tcit_write_reg(gspca_dev, 0x0022, 0x012a); /* Same */\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160: /* 160x120 */\n\t\tcit_write_reg(gspca_dev, 0x0024, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x0089, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x000a, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x011e);\n\t\tcit_write_reg(gspca_dev, 0x0007, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0009, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x008b, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tbreak;\n\tcase 320: /* 320x240 */\n\t\tcit_write_reg(gspca_dev, 0x0028, 0x010b);\n\t\tcit_write_reg(gspca_dev, 0x00d9, 0x0119);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x011b);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x011e);\n\t\tcit_write_reg(gspca_dev, 0x000e, 0x0104);\n\t\tcit_write_reg(gspca_dev, 0x0004, 0x011a);\n\t\tcit_write_reg(gspca_dev, 0x003f, 0x011c);\n\t\tcit_write_reg(gspca_dev, 0x000c, 0x0118);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0132);\n\t\tbreak;\n\t}\n\n\tcit_model3_Packet1(gspca_dev, 0x0019, 0x0031);\n\tcit_model3_Packet1(gspca_dev, 0x001a, 0x0003);\n\tcit_model3_Packet1(gspca_dev, 0x001b, 0x0038);\n\tcit_model3_Packet1(gspca_dev, 0x001c, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0024, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0027, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x002a, 0x0004);\n\tcit_model3_Packet1(gspca_dev, 0x0035, 0x000b);\n\tcit_model3_Packet1(gspca_dev, 0x003f, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x0044, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x0054, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00c4, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00e7, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00e9, 0x0001);\n\tcit_model3_Packet1(gspca_dev, 0x00ee, 0x0000);\n\tcit_model3_Packet1(gspca_dev, 0x00f3, 0x00c0);\n\n\tcit_write_reg(gspca_dev, compression, 0x0109);\n\tcit_write_reg(gspca_dev, clock_div, 0x0111);\n\n/*\tif (sd->input_index) { */\n\tif (rca_input) {\n\t\tfor (i = 0; i < ARRAY_SIZE(rca_initdata); i++) {\n\t\t\tif (rca_initdata[i][0])\n\t\t\t\tcit_read_reg(gspca_dev, rca_initdata[i][2], 0);\n\t\t\telse\n\t\t\t\tcit_write_reg(gspca_dev, rca_initdata[i][1],\n\t\t\t\t\t      rca_initdata[i][2]);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/* -- start the camera -- */\nstatic int sd_start(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tint packet_size;\n\n\tpacket_size = cit_get_packet_size(gspca_dev);\n\tif (packet_size < 0)\n\t\treturn packet_size;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\tcit_start_model0(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\tcit_start_model1(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tcit_start_model2(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tcit_start_model3(gspca_dev);\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\tcit_start_model4(gspca_dev);\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_start_ibm_netcam_pro(gspca_dev);\n\t\tbreak;\n\t}\n\n\t/* Program max isoc packet size */\n\tcit_write_reg(gspca_dev, packet_size >> 8, 0x0106);\n\tcit_write_reg(gspca_dev, packet_size & 0xff, 0x0107);\n\n\tcit_restart_stream(gspca_dev);\n\n\treturn 0;\n}\n\nstatic int sd_isoc_init(struct gspca_dev *gspca_dev)\n{\n\tstruct usb_interface_cache *intfc;\n\tstruct usb_host_interface *alt;\n\tint max_packet_size;\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tmax_packet_size = 450;\n\t\tbreak;\n\tcase 176:\n\t\tmax_packet_size = 600;\n\t\tbreak;\n\tdefault:\n\t\tmax_packet_size = 1022;\n\t\tbreak;\n\t}\n\n\tintfc = gspca_dev->dev->actconfig->intf_cache[0];\n\n\tif (intfc->num_altsetting < 2)\n\t\treturn -ENODEV;\n\n\talt = &intfc->altsetting[1];\n\n\tif (alt->desc.bNumEndpoints < 1)\n\t\treturn -ENODEV;\n\n\t/* Start isoc bandwidth \"negotiation\" at max isoc bandwidth */\n\talt->endpoint[0].desc.wMaxPacketSize = cpu_to_le16(max_packet_size);\n\n\treturn 0;\n}\n\nstatic int sd_isoc_nego(struct gspca_dev *gspca_dev)\n{\n\tint ret, packet_size, min_packet_size;\n\tstruct usb_host_interface *alt;\n\n\tswitch (gspca_dev->pixfmt.width) {\n\tcase 160:\n\t\tmin_packet_size = 200;\n\t\tbreak;\n\tcase 176:\n\t\tmin_packet_size = 266;\n\t\tbreak;\n\tdefault:\n\t\tmin_packet_size = 400;\n\t\tbreak;\n\t}\n\n\t/*\n\t * Existence of altsetting and endpoint was verified in sd_isoc_init()\n\t */\n\talt = &gspca_dev->dev->actconfig->intf_cache[0]->altsetting[1];\n\tpacket_size = le16_to_cpu(alt->endpoint[0].desc.wMaxPacketSize);\n\tif (packet_size <= min_packet_size)\n\t\treturn -EIO;\n\n\tpacket_size -= 100;\n\tif (packet_size < min_packet_size)\n\t\tpacket_size = min_packet_size;\n\talt->endpoint[0].desc.wMaxPacketSize = cpu_to_le16(packet_size);\n\n\tret = usb_set_interface(gspca_dev->dev, gspca_dev->iface, 1);\n\tif (ret < 0)\n\t\tpr_err(\"set alt 1 err %d\\n\", ret);\n\n\treturn ret;\n}\n\nstatic void sd_stopN(struct gspca_dev *gspca_dev)\n{\n\tcit_write_reg(gspca_dev, 0x0000, 0x010c);\n}\n\nstatic void sd_stop0(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\n\tif (!gspca_dev->present)\n\t\treturn;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\t/* HDG windows does this, but it causes the cams autogain to\n\t\t   restart from a gain of 0, which does not look good when\n\t\t   changing resolutions. */\n\t\t/* cit_write_reg(gspca_dev, 0x0000, 0x0112); */\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0100); /* LED Off */\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\tcit_send_FF_04_02(gspca_dev);\n\t\tcit_read_reg(gspca_dev, 0x0100, 0);\n\t\tcit_write_reg(gspca_dev, 0x81, 0x0100);\t/* LED Off */\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\tv4l2_ctrl_grab(sd->lighting, false);\n\t\t/* Fall through! */\n\tcase CIT_MODEL4:\n\t\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0004);\n\n\t\tcit_write_reg(gspca_dev, 0x0080, 0x0100);\t/* LED Off */\n\t\tcit_write_reg(gspca_dev, 0x0020, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x00a0, 0x0111);\n\n\t\tcit_model2_Packet1(gspca_dev, 0x0030, 0x0002);\n\n\t\tcit_write_reg(gspca_dev, 0x0020, 0x0111);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0112);\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x012c);\n\t\tcit_model3_Packet1(gspca_dev, 0x0046, 0x0000);\n\t\tcit_read_reg(gspca_dev, 0x0116, 0);\n\t\tcit_write_reg(gspca_dev, 0x0064, 0x0116);\n\t\tcit_read_reg(gspca_dev, 0x0115, 0);\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x0115);\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0112);\n\t\tcit_write_reg(gspca_dev, 0x0080, 0x0100);\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tcit_model3_Packet1(gspca_dev, 0x0049, 0x00ff);\n\t\tcit_write_reg(gspca_dev, 0x0006, 0x012c);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0116);\n\t\t/* HDG windows does this, but I cannot get the camera\n\t\t   to restart with this without redoing the entire init\n\t\t   sequence which makes switching modes really slow */\n\t\t/* cit_write_reg(gspca_dev, 0x0006, 0x0115); */\n\t\tcit_write_reg(gspca_dev, 0x0008, 0x0123);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0117);\n\t\tcit_write_reg(gspca_dev, 0x0003, 0x0133);\n\t\tcit_write_reg(gspca_dev, 0x0000, 0x0111);\n\t\t/* HDG windows does this, but I get a green picture when\n\t\t   restarting the stream after this */\n\t\t/* cit_write_reg(gspca_dev, 0x0000, 0x0112); */\n\t\tcit_write_reg(gspca_dev, 0x00c0, 0x0100);\n\t\tbreak;\n\t}\n\n#if IS_ENABLED(CONFIG_INPUT)\n\t/* If the last button state is pressed, release it now! */\n\tif (sd->button_state) {\n\t\tinput_report_key(gspca_dev->input_dev, KEY_CAMERA, 0);\n\t\tinput_sync(gspca_dev->input_dev);\n\t\tsd->button_state = 0;\n\t}\n#endif\n}\n\nstatic u8 *cit_find_sof(struct gspca_dev *gspca_dev, u8 *data, int len)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tu8 byte3 = 0, byte4 = 0;\n\tint i;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\tcase CIT_MODEL3:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tswitch (gspca_dev->pixfmt.width) {\n\t\tcase 160: /* 160x120 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x0a;\n\t\t\tbreak;\n\t\tcase 176: /* 176x144 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x0e;\n\t\t\tbreak;\n\t\tcase 320: /* 320x240 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x08;\n\t\t\tbreak;\n\t\tcase 352: /* 352x288 */\n\t\t\tbyte3 = 0x02;\n\t\t\tbyte4 = 0x00;\n\t\t\tbreak;\n\t\tcase 640:\n\t\t\tbyte3 = 0x03;\n\t\t\tbyte4 = 0x08;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* These have a different byte3 */\n\t\tif (sd->model <= CIT_MODEL1)\n\t\t\tbyte3 = 0x00;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\t/* For this model the SOF always starts at offset 0\n\t\t\t   so no need to search the entire frame */\n\t\t\tif (sd->model == CIT_MODEL0 && sd->sof_read != i)\n\t\t\t\tbreak;\n\n\t\t\tswitch (sd->sof_read) {\n\t\t\tcase 0:\n\t\t\t\tif (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (data[i] == 0xff)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\telse if (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read = 1;\n\t\t\t\telse\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (data[i] == byte3)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\telse if (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read = 1;\n\t\t\t\telse\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (data[i] == byte4) {\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\t\treturn data + i + (sd->sof_len - 3);\n\t\t\t\t}\n\t\t\t\tif (byte3 == 0x00 && data[i] == 0xff)\n\t\t\t\t\tsd->sof_read = 2;\n\t\t\t\telse if (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read = 1;\n\t\t\t\telse\n\t\t\t\t\tsd->sof_read = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\t/* TESTME we need to find a longer sof signature to avoid\n\t\t   false positives */\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tswitch (sd->sof_read) {\n\t\t\tcase 0:\n\t\t\t\tif (data[i] == 0x00)\n\t\t\t\t\tsd->sof_read++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tsd->sof_read = 0;\n\t\t\t\tif (data[i] == 0xff) {\n\t\t\t\t\tif (i >= 4)\n\t\t\t\t\t\tgspca_dbg(gspca_dev, D_FRAM,\n\t\t\t\t\t\t\t  \"header found at offset: %d: %02x %02x 00 %3ph\\n\\n\",\n\t\t\t\t\t\t\t  i - 1,\n\t\t\t\t\t\t\t  data[i - 4],\n\t\t\t\t\t\t\t  data[i - 3],\n\t\t\t\t\t\t\t  &data[i]);\n\t\t\t\t\telse\n\t\t\t\t\t\tgspca_dbg(gspca_dev, D_FRAM,\n\t\t\t\t\t\t\t  \"header found at offset: %d: 00 %3ph\\n\\n\",\n\t\t\t\t\t\t\t  i - 1,\n\t\t\t\t\t\t\t  &data[i]);\n\t\t\t\t\treturn data + i + (sd->sof_len - 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\treturn NULL;\n}\n\nstatic void sd_pkt_scan(struct gspca_dev *gspca_dev,\n\t\t\tu8 *data, int len)\n{\n\tstruct sd *sd = (struct sd *) gspca_dev;\n\tunsigned char *sof;\n\n\tsof = cit_find_sof(gspca_dev, data, len);\n\tif (sof) {\n\t\tint n;\n\n\t\t/* finish decoding current frame */\n\t\tn = sof - data;\n\t\tif (n > sd->sof_len)\n\t\t\tn -= sd->sof_len;\n\t\telse\n\t\t\tn = 0;\n\t\tgspca_frame_add(gspca_dev, LAST_PACKET,\n\t\t\t\tdata, n);\n\t\tgspca_frame_add(gspca_dev, FIRST_PACKET, NULL, 0);\n\t\tlen -= sof - data;\n\t\tdata = sof;\n\t}\n\n\tgspca_frame_add(gspca_dev, INTER_PACKET, data, len);\n}\n\n#if IS_ENABLED(CONFIG_INPUT)\nstatic void cit_check_button(struct gspca_dev *gspca_dev)\n{\n\tint new_button_state;\n\tstruct sd *sd = (struct sd *)gspca_dev;\n\n\tswitch (sd->model) {\n\tcase CIT_MODEL3:\n\tcase CIT_IBM_NETCAM_PRO:\n\t\tbreak;\n\tdefault: /* TEST ME unknown if this works on other models too */\n\t\treturn;\n\t}\n\n\t/* Read the button state */\n\tcit_read_reg(gspca_dev, 0x0113, 0);\n\tnew_button_state = !gspca_dev->usb_buf[0];\n\n\t/* Tell the cam we've seen the button press, notice that this\n\t   is a nop (iow the cam keeps reporting pressed) until the\n\t   button is actually released. */\n\tif (new_button_state)\n\t\tcit_write_reg(gspca_dev, 0x01, 0x0113);\n\n\tif (sd->button_state != new_button_state) {\n\t\tinput_report_key(gspca_dev->input_dev, KEY_CAMERA,\n\t\t\t\t new_button_state);\n\t\tinput_sync(gspca_dev->input_dev);\n\t\tsd->button_state = new_button_state;\n\t}\n}\n#endif\n\nstatic int sd_s_ctrl(struct v4l2_ctrl *ctrl)\n{\n\tstruct gspca_dev *gspca_dev =\n\t\tcontainer_of(ctrl->handler, struct gspca_dev, ctrl_handler);\n\tstruct sd *sd = (struct sd *)gspca_dev;\n\n\tgspca_dev->usb_err = 0;\n\n\tif (!gspca_dev->streaming)\n\t\treturn 0;\n\n\tif (sd->stop_on_control_change)\n\t\tsd_stopN(gspca_dev);\n\tswitch (ctrl->id) {\n\tcase V4L2_CID_BRIGHTNESS:\n\t\tcit_set_brightness(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_CONTRAST:\n\t\tcit_set_contrast(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_HUE:\n\t\tcit_set_hue(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_HFLIP:\n\t\tcit_set_hflip(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_SHARPNESS:\n\t\tcit_set_sharpness(gspca_dev, ctrl->val);\n\t\tbreak;\n\tcase V4L2_CID_BACKLIGHT_COMPENSATION:\n\t\tcit_set_lighting(gspca_dev, ctrl->val);\n\t\tbreak;\n\t}\n\tif (sd->stop_on_control_change)\n\t\tcit_restart_stream(gspca_dev);\n\treturn gspca_dev->usb_err;\n}\n\nstatic const struct v4l2_ctrl_ops sd_ctrl_ops = {\n\t.s_ctrl = sd_s_ctrl,\n};\n\nstatic int sd_init_controls(struct gspca_dev *gspca_dev)\n{\n\tstruct sd *sd = (struct sd *)gspca_dev;\n\tstruct v4l2_ctrl_handler *hdl = &gspca_dev->ctrl_handler;\n\tbool has_brightness;\n\tbool has_contrast;\n\tbool has_hue;\n\tbool has_sharpness;\n\tbool has_lighting;\n\tbool has_hflip;\n\n\thas_brightness = has_contrast = has_hue =\n\t\thas_sharpness = has_hflip = has_lighting = false;\n\tswitch (sd->model) {\n\tcase CIT_MODEL0:\n\t\thas_contrast = has_hflip = true;\n\t\tbreak;\n\tcase CIT_MODEL1:\n\t\thas_brightness = has_contrast =\n\t\t\thas_sharpness = has_lighting = true;\n\t\tbreak;\n\tcase CIT_MODEL2:\n\t\thas_brightness = has_hue = has_lighting = true;\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\thas_brightness = has_contrast = has_sharpness = true;\n\t\tbreak;\n\tcase CIT_MODEL4:\n\t\thas_brightness = has_hue = true;\n\t\tbreak;\n\tcase CIT_IBM_NETCAM_PRO:\n\t\thas_brightness = has_hue =\n\t\t\thas_sharpness = has_hflip = has_lighting = true;\n\t\tbreak;\n\t}\n\tgspca_dev->vdev.ctrl_handler = hdl;\n\tv4l2_ctrl_handler_init(hdl, 5);\n\tif (has_brightness)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_BRIGHTNESS, 0, 63, 1, 32);\n\tif (has_contrast)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_CONTRAST, 0, 20, 1, 10);\n\tif (has_hue)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_HUE, 0, 127, 1, 63);\n\tif (has_sharpness)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_SHARPNESS, 0, 6, 1, 3);\n\tif (has_lighting)\n\t\tsd->lighting = v4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_BACKLIGHT_COMPENSATION, 0, 2, 1, 1);\n\tif (has_hflip)\n\t\tv4l2_ctrl_new_std(hdl, &sd_ctrl_ops,\n\t\t\tV4L2_CID_HFLIP, 0, 1, 1, 0);\n\n\tif (hdl->error) {\n\t\tpr_err(\"Could not initialize controls\\n\");\n\t\treturn hdl->error;\n\t}\n\treturn 0;\n}\n\n/* sub-driver description */\nstatic const struct sd_desc sd_desc = {\n\t.name = MODULE_NAME,\n\t.config = sd_config,\n\t.init = sd_init,\n\t.init_controls = sd_init_controls,\n\t.start = sd_start,\n\t.stopN = sd_stopN,\n\t.stop0 = sd_stop0,\n\t.pkt_scan = sd_pkt_scan,\n#if IS_ENABLED(CONFIG_INPUT)\n\t.dq_callback = cit_check_button,\n\t.other_input = 1,\n#endif\n};\n\nstatic const struct sd_desc sd_desc_isoc_nego = {\n\t.name = MODULE_NAME,\n\t.config = sd_config,\n\t.init = sd_init,\n\t.init_controls = sd_init_controls,\n\t.start = sd_start,\n\t.isoc_init = sd_isoc_init,\n\t.isoc_nego = sd_isoc_nego,\n\t.stopN = sd_stopN,\n\t.stop0 = sd_stop0,\n\t.pkt_scan = sd_pkt_scan,\n#if IS_ENABLED(CONFIG_INPUT)\n\t.dq_callback = cit_check_button,\n\t.other_input = 1,\n#endif\n};\n\n/* -- module initialisation -- */\nstatic const struct usb_device_id device_table[] = {\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x0001, 0x0001), .driver_info = CIT_MODEL0 },\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x0002, 0x0002), .driver_info = CIT_MODEL1 },\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x030a, 0x030a), .driver_info = CIT_MODEL2 },\n\t{ USB_DEVICE_VER(0x0545, 0x8080, 0x0301, 0x0301), .driver_info = CIT_MODEL3 },\n\t{ USB_DEVICE_VER(0x0545, 0x8002, 0x030a, 0x030a), .driver_info = CIT_MODEL4 },\n\t{ USB_DEVICE_VER(0x0545, 0x800c, 0x030a, 0x030a), .driver_info = CIT_MODEL2 },\n\t{ USB_DEVICE_VER(0x0545, 0x800d, 0x030a, 0x030a), .driver_info = CIT_MODEL4 },\n\t{}\n};\nMODULE_DEVICE_TABLE(usb, device_table);\n\n/* -- device connect -- */\nstatic int sd_probe(struct usb_interface *intf,\n\t\t\tconst struct usb_device_id *id)\n{\n\tconst struct sd_desc *desc = &sd_desc;\n\n\tswitch (id->driver_info) {\n\tcase CIT_MODEL0:\n\tcase CIT_MODEL1:\n\t\tif (intf->cur_altsetting->desc.bInterfaceNumber != 2)\n\t\t\treturn -ENODEV;\n\t\tbreak;\n\tcase CIT_MODEL2:\n\tcase CIT_MODEL4:\n\t\tif (intf->cur_altsetting->desc.bInterfaceNumber != 0)\n\t\t\treturn -ENODEV;\n\t\tbreak;\n\tcase CIT_MODEL3:\n\t\tif (intf->cur_altsetting->desc.bInterfaceNumber != 0)\n\t\t\treturn -ENODEV;\n\t\t/* FIXME this likely applies to all model3 cams and probably\n\t\t   to other models too. */\n\t\tif (ibm_netcam_pro)\n\t\t\tdesc = &sd_desc_isoc_nego;\n\t\tbreak;\n\t}\n\n\treturn gspca_dev_probe2(intf, id, desc, sizeof(struct sd), THIS_MODULE);\n}\n\nstatic struct usb_driver sd_driver = {\n\t.name = MODULE_NAME,\n\t.id_table = device_table,\n\t.probe = sd_probe,\n\t.disconnect = gspca_disconnect,\n#ifdef CONFIG_PM\n\t.suspend = gspca_suspend,\n\t.resume = gspca_resume,\n\t.reset_resume = gspca_resume,\n#endif\n};\n\nmodule_usb_driver(sd_driver);\n"], "filenames": ["drivers/media/usb/gspca/xirlink_cit.c"], "buggy_code_start_loc": [1444], "buggy_code_end_loc": [2667], "fixing_code_start_loc": [1445], "fixing_code_end_loc": [2684], "type": "CWE-476", "message": "In the Linux kernel before 5.6.1, drivers/media/usb/gspca/xirlink_cit.c (aka the Xirlink camera USB driver) mishandles invalid descriptors, aka CID-a246b4d54770.", "other": {"cve": {"id": "CVE-2020-11668", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-09T21:15:15.327", "lastModified": "2020-06-10T20:15:13.327", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "In the Linux kernel before 5.6.1, drivers/media/usb/gspca/xirlink_cit.c (aka the Xirlink camera USB driver) mishandles invalid descriptors, aka CID-a246b4d54770."}, {"lang": "es", "value": "En el archivo drivers/media/usb/gspca/xirlink_cit.c de kernel de Linux versiones anteriores a 5.6.1, (tambi\u00e9n se conoce como el controlador USB de la c\u00e1mara Xirlink) maneja inapropiadamente los descriptores no v\u00e1lidos, tambi\u00e9n se conoce como CID-a246b4d54770."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:P/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "COMPLETE", "baseScore": 5.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 7.8, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6.1", "matchCriteriaId": "BB94C1F6-38C4-44F6-93E8-199096A6F86A"}]}]}], "references": [{"url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.6.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a246b4d547708f33ff4d4b9a7a5dbac741dc89d8", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/a246b4d547708f33ff4d4b9a7a5dbac741dc89d8", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/06/msg00011.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2020/06/msg00012.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2020/06/msg00013.html", "source": "cve@mitre.org"}, {"url": "https://security.netapp.com/advisory/ntap-20200430-0004/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4345-1/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4364-1/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4368-1/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4369-1/", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2020/dsa-4698", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/a246b4d547708f33ff4d4b9a7a5dbac741dc89d8"}}