{"buggy_code": ["# Done to increase the memory available to gradle.\norg.gradle.jvmargs=-Xmx1G\n# Fabric Properties\n# check these on https://modmuss50.me/fabric.html\nminecraft_version=1.20.1\nyarn_mappings=1.20.1+build.9\nloader_version=0.14.14\n# Mod Properties\nmod_version=1.0.2\nmaven_group=com.kihron\narchives_base_name=ServerRPExposer", "package com.kihron.serverrpexposer.mixins;\n\nimport com.kihron.serverrpexposer.ServerRPExposer;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.resource.ServerResourcePackProvider;\nimport net.minecraft.resource.ResourcePackSource;\nimport net.minecraft.resource.ZipResourcePack;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Enumeration;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\n@Mixin(ServerResourcePackProvider.class)\npublic class ServerResourcePackProviderMixin {\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Inject(at = @At(\"TAIL\"), method = \"loadServerPack(Ljava/io/File;Lnet/minecraft/resource/ResourcePackSource;)Ljava/util/concurrent/CompletableFuture;\")\n    public void loadServerPack(File file, ResourcePackSource packSource, CallbackInfoReturnable<CompletableFuture<Void>> cir) {\n        try (ZipResourcePack zipResourcePack = new ZipResourcePack(\"lmao\", file, false)) {\n            //noinspection DataFlowIssue\n            ZipFile zipFile = ((ZipResourcePackInvoker) zipResourcePack).getTheZipFile();\n            try {\n                Path path = MinecraftClient.getInstance().runDirectory.toPath().resolve(\"serverrp_exposer\");\n                Files.createDirectories(path);\n\n                int i = 1;\n                while (Files.exists(path.resolve(\"server_resource_pack_\" + i))) {\n                    i++;\n                }\n                path = path.resolve(\"server_resource_pack_\" + i);\n\n                ServerRPExposer.LOGGER.info(\"[ServerRPExposer] Copying server resource pack to: \" + path);\n\n                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n                while (entries.hasMoreElements()) {\n                    ZipEntry entry = entries.nextElement();\n                    File entryDestination = path.resolve(entry.getName()).toFile();\n                    if (entry.isDirectory()) {\n                        entryDestination.mkdirs();\n                    } else {\n                        entryDestination.getParentFile().mkdirs();\n                        InputStream in = zipFile.getInputStream(entry);\n                        OutputStream out = new FileOutputStream(entryDestination);\n                        byte[] buffer = new byte[4096];\n                        int len;\n                        while ((len = in.read(buffer)) >= 0) {\n                            out.write(buffer, 0, len);\n                        }\n                        in.close();\n                        out.close();\n                    }\n                }\n            } catch (IOException e) {\n                ServerRPExposer.LOGGER.error(\"[ServerRPExposer] Failed to extract server resource pack!\");\n            }\n        } catch (IOException e) {\n            ServerRPExposer.LOGGER.error(\"[ServerRPExposer] Failed to extract server resource pack!\");\n        }\n    }\n}\n"], "fixing_code": ["# Done to increase the memory available to gradle.\norg.gradle.jvmargs=-Xmx1G\n# Fabric Properties\n# check these on https://modmuss50.me/fabric.html\nminecraft_version=1.20.1\nyarn_mappings=1.20.1+build.9\nloader_version=0.14.14\n# Mod Properties\nmod_version=1.0.3\nmaven_group=com.kihron\narchives_base_name=ServerRPExposer", "package com.kihron.serverrpexposer.mixins;\n\nimport com.kihron.serverrpexposer.ServerRPExposer;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.resource.ServerResourcePackProvider;\nimport net.minecraft.resource.ResourcePackSource;\nimport net.minecraft.resource.ZipResourcePack;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Enumeration;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\n@Mixin(ServerResourcePackProvider.class)\npublic class ServerResourcePackProviderMixin {\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Inject(at = @At(\"TAIL\"), method = \"loadServerPack(Ljava/io/File;Lnet/minecraft/resource/ResourcePackSource;)Ljava/util/concurrent/CompletableFuture;\")\n    public void loadServerPack(File file, ResourcePackSource packSource, CallbackInfoReturnable<CompletableFuture<Void>> cir) {\n        try (ZipResourcePack zipResourcePack = new ZipResourcePack(\"lmao\", file, false)) {\n            //noinspection DataFlowIssue\n            ZipFile zipFile = ((ZipResourcePackInvoker) zipResourcePack).getTheZipFile();\n            try {\n                Path path = MinecraftClient.getInstance().runDirectory.toPath().resolve(\"serverrp_exposer\");\n                Files.createDirectories(path);\n\n                int i = 1;\n                while (Files.exists(path.resolve(\"server_resource_pack_\" + i))) {\n                    i++;\n                }\n                path = path.resolve(\"server_resource_pack_\" + i);\n\n                ServerRPExposer.LOGGER.info(\"[ServerRPExposer] Copying server resource pack to: \" + path);\n\n                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n                while (entries.hasMoreElements()) {\n                    ZipEntry entry = entries.nextElement();\n                    File entryDestination = path.resolve(entry.getName()).toFile();\n                    if (!entryDestination.getCanonicalPath().startsWith(path.toRealPath() + \"/\")) continue;\n                    if (entry.isDirectory()) {\n                        entryDestination.mkdirs();\n                    } else {\n                        entryDestination.getParentFile().mkdirs();\n                        InputStream in = zipFile.getInputStream(entry);\n                        OutputStream out = new FileOutputStream(entryDestination);\n                        byte[] buffer = new byte[4096];\n                        int len;\n                        while ((len = in.read(buffer)) >= 0) {\n                            out.write(buffer, 0, len);\n                        }\n                        in.close();\n                        out.close();\n                    }\n                }\n            } catch (IOException e) {\n                ServerRPExposer.LOGGER.error(\"[ServerRPExposer] Failed to extract server resource pack!\");\n            }\n        } catch (IOException e) {\n            ServerRPExposer.LOGGER.error(\"[ServerRPExposer] Failed to extract server resource pack!\");\n        }\n    }\n}\n"], "filenames": ["gradle.properties", "src/main/java/com/kihron/serverrpexposer/mixins/ServerResourcePackProviderMixin.java"], "buggy_code_start_loc": [9, 44], "buggy_code_end_loc": [10, 44], "fixing_code_start_loc": [9, 45], "fixing_code_end_loc": [10, 46], "type": "CWE-22", "message": "Directory Traversal vulnerability in Kihron ServerRPExposer v.1.0.2 and before allows a remote attacker to execute arbitrary code via the loadServerPack in ServerResourcePackProviderMixin.java.", "other": {"cve": {"id": "CVE-2024-22779", "sourceIdentifier": "cve@mitre.org", "published": "2024-02-02T02:15:17.890", "lastModified": "2024-02-10T04:10:09.100", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Directory Traversal vulnerability in Kihron ServerRPExposer v.1.0.2 and before allows a remote attacker to execute arbitrary code via the loadServerPack in ServerResourcePackProviderMixin.java."}, {"lang": "es", "value": "Vulnerabilidad de Directory Traversal en Kihron ServerRPExposer v.1.0.2 y anteriores permite a un atacante remoto ejecutar c\u00f3digo arbitrario a trav\u00e9s de loadServerPack en ServerResourcePackProviderMixin.java."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kihron:serverrpexposer:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.0.2", "matchCriteriaId": "5EADA1AF-BF6D-4F3B-AECF-4E33D47A212E"}]}]}], "references": [{"url": "https://gist.github.com/apple502j/193358682885fe1a6708309ce934e4ed", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/Kihron/ServerRPExposer/commit/8f7b829df633f59e828d677f736c53652d6f1b8f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://modrinth.com/mod/serverrpexposer", "source": "cve@mitre.org", "tags": ["Product"]}]}, "github_commit_url": "https://github.com/Kihron/ServerRPExposer/commit/8f7b829df633f59e828d677f736c53652d6f1b8f"}}