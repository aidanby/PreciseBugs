{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\User\\Models;\n\nuse EloquentFilter\\Filterable;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Fortify\\TwoFactorAuthenticatable;\nuse Laravel\\Passport\\HasApiTokens;\n\nuse MicroweberPackages\\Core\\Models\\HasSearchableTrait;\nuse MicroweberPackages\\Customer\\Models\\Customer;\nuse MicroweberPackages\\Database\\Casts\\ReplaceSiteUrlCast;\nuse MicroweberPackages\\Database\\Casts\\StripTagsCast;\nuse MicroweberPackages\\Database\\Casts\\StrToLowerTrimCast;\nuse MicroweberPackages\\Database\\Traits\\CacheableQueryBuilderTrait;\nuse MicroweberPackages\\User\\Models\\ModelFilters\\UserFilter;\nuse MicroweberPackages\\User\\Notifications\\MailResetPasswordNotification;\nuse MicroweberPackages\\User\\Notifications\\MustVerifyEmailTrait;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Validation\\Rule;\n\nuse carbon\\carbon;\n\nclass User extends Authenticatable implements MustVerifyEmail\n{\n    use HasFactory,\n        Notifiable,\n        TwoFactorAuthenticatable,\n       // HasRoles,\n        HasApiTokens,\n        Filterable,\n        HasSearchableTrait,\n        MustVerifyEmailTrait,\n        CanResetPassword,\n        CacheableQueryBuilderTrait;\n\n    protected $casts = [\n        'username' => StripTagsCast::class,\n        'thumbnail' => ReplaceSiteUrlCast::class,\n    ];\n\n    protected $attributes = [\n        'is_active' => 1,\n        'is_admin' =>0,\n        'is_verified' =>0,\n    ];\n\n    protected $searchable = [\n        'email',\n        'username',\n        'first_name',\n        'last_name',\n        'phone',\n    ];\n\n    protected $hidden = [\n        'api_key',\n        'remember_token',\n        'oauth_token',\n        'oauth_token_secret',\n        'password_reset_hash',\n        'password',\n        'is_admin',\n    ];\n\n    //protected $hidden = array('password', 'remember_token');\n    protected $fillable = array(\n        'updated_at',\n        'created_at',\n        'expires_on',\n        'last_login',\n        'last_login_ip',\n        'created_by',\n        'edited_by',\n        'username',\n        'password',\n        'email',\n        'is_active',\n        'is_admin',\n        'is_verified',\n        'is_public',\n        'basic_mode',\n        'first_name',\n        'last_name',\n        'thumbnail',\n        'parent_id',\n\n        'user_information',\n        'subscr_id',\n        'role',\n        'medium',\n        'oauth_uid',\n        'oauth_provider',\n        'profile_url',\n        'website_url',\n        'phone',\n\n    );\n\n    protected $rules = [\n        'email' => 'required'\n    ];\n\n    private $validator;\n\n\n\n    public static function boot()\n    {\n        parent::boot();\n\n        self::creating(function ($model) {\n\n           //$model->is_active = 0;\n           $model->is_verified = 0;\n        });\n    }\n\n    public function modelFilter()\n    {\n        return $this->provideFilter(UserFilter::class);\n    }\n\n    public function setPasswordAttribute($pass)\n    {\n        $this->attributes['password'] = (Hash::needsRehash($pass) ? Hash::make($pass) : $pass);\n    }\n\n\n    /**\n     * Find the user instance for the given username.\n     *\n     * @param  string $username\n     * @return \\App\\User\n     */\n    public function findForPassport($username)\n    {\n        return $this->where('email', $username)->first();\n    }\n\n    public function isAdmin()\n    {\n        return ($this->role == 'admin');\n    }\n\n    public static function login($request)\n    {\n        $remember = $request->remember;\n        $email = $request->email;\n        $password = $request->password;\n        return (\\Auth::attempt(array('email' => $email, 'password' => $password), $remember));\n    }\n\n    /**\n     * Override the mail body for reset password notification mail.\n     */\n    public function sendPasswordResetNotification($token)\n    {\n      $this->notify(new MailResetPasswordNotification($token));\n    }\n\n    public function customer()\n    {\n        return $this->hasOne(Customer::class);\n    }\n\n    public function getAvatarAttribute()\n    {\n        return user_picture($this->id);\n    }\n\n    public function getRoleNameAttribute()\n    {\n        if ($this->isAdmin()) {\n            return 'Admin';\n        }\n\n        return 'User';\n    }\n\n    public function getValidatorMessages()\n    {\n        return $this->validator->messages()->toArray();\n    }\n\n    public function validateAndFill($data)\n    {\n        if (!empty($data['password']) && !empty($data['verify_password'])) {\n            $this->rules['password'] = 'required|min:1|max:50';\n            $this->rules['verify_password'] = 'required|same:password|min:1|max:50';\n        }\n\n        $requireUsername = false;\n        if ((!isset($data['username']) || empty($data['username'])) && (!isset($data['email']) || empty($data['email']))) {\n            $requireUsername = true;\n        }\n\n        if ($requireUsername && isset($data['id']) && $data['id'] > 0) {\n            $this->rules['username'] = [\n                'required',\n                'min:1',\n                'max:50',\n                Rule::unique('users', 'username')->ignore($data['id'], 'id')\n            ];\n        }\n\n        $this->validator = \\Validator::make($data, $this->rules);\n        if ($this->validator->fails()) {\n            return false;\n        }\n        $this->fill($data);\n\n        return true;\n    }\n\n    public function avatarUrl()\n    {\n        return user_picture($this->id);\n    }\n\n    public function getFullNameAttribute()\n    {\n        return $this->first_name . ' ' . $this->last_name;\n    }\n\n    public function displayName()\n    {\n        if (!empty($this->first_name) || !empty($this->last_name)) {\n            $name = '';\n            if (!empty($this->first_name)) {\n                $name = $this->first_name;\n            }\n            if (!empty($this->last_name)) {\n                $name .= ' ' . $this->last_name;\n            }\n            return $name;\n        }\n\n        if (!empty($this->username)) {\n            return $this->username;\n        }\n        if (!empty($this->email)) {\n            return $this->email;\n        }\n\n        return \"\";\n    }\n\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\User\\Models;\n\nuse EloquentFilter\\Filterable;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Fortify\\TwoFactorAuthenticatable;\nuse Laravel\\Passport\\HasApiTokens;\n\nuse MicroweberPackages\\Core\\Models\\HasSearchableTrait;\nuse MicroweberPackages\\Customer\\Models\\Customer;\nuse MicroweberPackages\\Database\\Casts\\ReplaceSiteUrlCast;\nuse MicroweberPackages\\Database\\Casts\\StripTagsCast;\nuse MicroweberPackages\\Database\\Casts\\StrToLowerTrimCast;\nuse MicroweberPackages\\Database\\Traits\\CacheableQueryBuilderTrait;\nuse MicroweberPackages\\User\\Models\\ModelFilters\\UserFilter;\nuse MicroweberPackages\\User\\Notifications\\MailResetPasswordNotification;\nuse MicroweberPackages\\User\\Notifications\\MustVerifyEmailTrait;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Validation\\Rule;\n\nuse carbon\\carbon;\n\nclass User extends Authenticatable implements MustVerifyEmail\n{\n    use HasFactory,\n        Notifiable,\n        TwoFactorAuthenticatable,\n       // HasRoles,\n        HasApiTokens,\n        Filterable,\n        HasSearchableTrait,\n        MustVerifyEmailTrait,\n        CanResetPassword,\n        CacheableQueryBuilderTrait;\n\n    protected $casts = [\n        'username' => StripTagsCast::class,\n        'thumbnail' => ReplaceSiteUrlCast::class,\n    ];\n\n    protected $attributes = [\n        'is_active' => 1,\n        'is_admin' =>0,\n        'is_verified' =>0,\n    ];\n\n    protected $searchable = [\n        'email',\n        'username',\n        'first_name',\n        'last_name',\n        'phone',\n    ];\n\n    protected $hidden = [\n        'api_key',\n        'remember_token',\n        'oauth_token',\n        'oauth_token_secret',\n        'password_reset_hash',\n        'two_factor_recovery_codes',\n        'two_factor_secret',\n        'subscr_id',\n        'oauth_uid',\n        'oauth_provider',\n        'last_login_ip',\n        'password',\n        'is_admin',\n    ];\n\n    //protected $hidden = array('password', 'remember_token');\n    protected $fillable = array(\n        'updated_at',\n        'created_at',\n        'expires_on',\n        'last_login',\n        'last_login_ip',\n        'created_by',\n        'edited_by',\n        'username',\n        'password',\n        'email',\n        'is_active',\n        'is_admin',\n        'is_verified',\n        'is_public',\n        'basic_mode',\n        'first_name',\n        'last_name',\n        'thumbnail',\n        'parent_id',\n\n        'user_information',\n        'subscr_id',\n        'role',\n        'medium',\n        'oauth_uid',\n        'oauth_provider',\n        'profile_url',\n        'website_url',\n        'phone',\n\n    );\n\n    protected $rules = [\n        'email' => 'required'\n    ];\n\n    private $validator;\n\n\n\n    public static function boot()\n    {\n        parent::boot();\n\n        self::creating(function ($model) {\n\n           //$model->is_active = 0;\n           $model->is_verified = 0;\n        });\n    }\n\n    public function modelFilter()\n    {\n        return $this->provideFilter(UserFilter::class);\n    }\n\n    public function setPasswordAttribute($pass)\n    {\n        $this->attributes['password'] = (Hash::needsRehash($pass) ? Hash::make($pass) : $pass);\n    }\n\n\n    /**\n     * Find the user instance for the given username.\n     *\n     * @param  string $username\n     * @return \\App\\User\n     */\n    public function findForPassport($username)\n    {\n        return $this->where('email', $username)->first();\n    }\n\n    public function isAdmin()\n    {\n        return ($this->role == 'admin');\n    }\n\n    public static function login($request)\n    {\n        $remember = $request->remember;\n        $email = $request->email;\n        $password = $request->password;\n        return (\\Auth::attempt(array('email' => $email, 'password' => $password), $remember));\n    }\n\n    /**\n     * Override the mail body for reset password notification mail.\n     */\n    public function sendPasswordResetNotification($token)\n    {\n      $this->notify(new MailResetPasswordNotification($token));\n    }\n\n    public function customer()\n    {\n        return $this->hasOne(Customer::class);\n    }\n\n    public function getAvatarAttribute()\n    {\n        return user_picture($this->id);\n    }\n\n    public function getRoleNameAttribute()\n    {\n        if ($this->isAdmin()) {\n            return 'Admin';\n        }\n\n        return 'User';\n    }\n\n    public function getValidatorMessages()\n    {\n        return $this->validator->messages()->toArray();\n    }\n\n    public function validateAndFill($data)\n    {\n        if (!empty($data['password']) && !empty($data['verify_password'])) {\n            $this->rules['password'] = 'required|min:1|max:50';\n            $this->rules['verify_password'] = 'required|same:password|min:1|max:50';\n        }\n\n        $requireUsername = false;\n        if ((!isset($data['username']) || empty($data['username'])) && (!isset($data['email']) || empty($data['email']))) {\n            $requireUsername = true;\n        }\n\n        if ($requireUsername && isset($data['id']) && $data['id'] > 0) {\n            $this->rules['username'] = [\n                'required',\n                'min:1',\n                'max:50',\n                Rule::unique('users', 'username')->ignore($data['id'], 'id')\n            ];\n        }\n\n        $this->validator = \\Validator::make($data, $this->rules);\n        if ($this->validator->fails()) {\n            return false;\n        }\n        $this->fill($data);\n\n        return true;\n    }\n\n    public function avatarUrl()\n    {\n        return user_picture($this->id);\n    }\n\n    public function getFullNameAttribute()\n    {\n        return $this->first_name . ' ' . $this->last_name;\n    }\n\n    public function displayName()\n    {\n        if (!empty($this->first_name) || !empty($this->last_name)) {\n            $name = '';\n            if (!empty($this->first_name)) {\n                $name = $this->first_name;\n            }\n            if (!empty($this->last_name)) {\n                $name .= ' ' . $this->last_name;\n            }\n            return $name;\n        }\n\n        if (!empty($this->username)) {\n            return $this->username;\n        }\n        if (!empty($this->email)) {\n            return $this->email;\n        }\n\n        return \"\";\n    }\n\n}\n"], "filenames": ["src/MicroweberPackages/User/Models/User.php"], "buggy_code_start_loc": [66], "buggy_code_end_loc": [66], "fixing_code_start_loc": [67], "fixing_code_end_loc": [73], "type": "CWE-359", "message": "Exposure of Private Personal Information to an Unauthorized Actor in GitHub repository microweber/microweber prior to 1.3.4.", "other": {"cve": {"id": "CVE-2023-2239", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-22T17:15:07.067", "lastModified": "2023-04-28T03:47:23.527", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exposure of Private Personal Information to an Unauthorized Actor in GitHub repository microweber/microweber prior to 1.3.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-359"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.4", "matchCriteriaId": "E503E14E-D4EE-4F4C-8431-DE2EB7A58ABA"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/b0644cb3411b36b6ccc2ff7cdf7af3fa49525baa", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/edeff16b-fc71-4e26-8d2d-dfe7bb5e7868", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/b0644cb3411b36b6ccc2ff7cdf7af3fa49525baa"}}