{"buggy_code": ["<?php\n// (c) Copyright 2002-2016 by authors of the Tiki Wiki CMS Groupware Project\n//\n// All Rights Reserved. See copyright.txt for details and a complete list of authors.\n// Licensed under the GNU LESSER GENERAL PUBLIC LICENSE. See license.txt for details.\n// $Id$\n\nclass TikiFilter_PreventXss implements Zend\\Filter\\FilterInterface\n{\n\tfunction filter( $value )\n\t{\n\t\t// No need to filter really simple values\n\t\tif ( ctype_alnum($value) || empty($value) )\n\t\t\treturn $value;\n\t\telse\n\t\t\treturn $this->RemoveXSS($value);\n\t}\n\n\t/* RemoveXSS initially developped by kallahar - quickwired.com, modified for Tiki\n\t * Original code could be found here:\n\t * http://quickwired.com/smallprojects/php_xss_filter_function.php\n\t */\n\tfunction RemoveXSS($val)\n\t{\n\t\tstatic $ra_as_tag_only = NULL;\n\t\tstatic $ra_as_attribute = NULL;\n\t\tstatic $ra_as_content = NULL;\n\t\tstatic $ra_javascript = NULL;\n\n\t\t// now the only remaining whitespace attacks are \\t, \\n, and \\r\n\t\tif ( $ra_as_tag_only == NULL ) {\n\t\t\t$ra_as_tag_only = array(\n                'style',\n                'script',\n                'embed',\n                'object',\n                'applet',\n                'meta',\n                'iframe',\n                'frame',    // also filters frameset\n                'ilayer',\n                'layer',\n                'bgsound',\n                'base',\n                'xml',\n                'import',\n                'link',\n                'audio',\n                'video'\n\t\t\t);\n\n\n\t\t\t// note: short forms, such as onmouse, will filter its long forms:\u3000onmouseup, onmousedown etc.\n\t\t\t$ra_as_attribute = array(\n                'onabort',\n                'onactivate',\n                'onafter',\n                'onbefore',\n                'onbegin',\n                'onblur',\n                'onbounce',\n                'onbroadcast',\n                'oncellchange',\n                'onchange',\n                'onclick',\n                'onclose',\n                'oncommand',\n                'oncontextmenu',\n                'oncontrolselect',\n                'oncopy',\n                'oncut',\n                'ondata',\n                'ondblclick',\n                'ondeactivate',\n                'ondrag',\n                'ondrop',\n                'onend',\n                'onerror',\n                'onfilterchange',\n                'onfinish',\n                'onfocus',\n                'ongotpointer',\n                'onhashchange',\n                'onhelp',\n                'oninput',\n                'oninvalid',\n                'onkey',\n                'onlayoutcomplete',\n                'onload',\n                'onlosecapture',\n                'onlostpointer',\n                'onmedia',\n                'onmessage',\n                'onmouse',\n                'onmove',\n                'onoffline',\n                'ononline',\n                'onoutofsync',\n                'onover',\n                'onpage',\n                'onpaste',\n                'onpause',\n                'onpointer',\n                'onpopstate',\n                'onprogress',\n                'onpropertychange',\n                'onreadystatechange',\n                'onredo',\n                'onrepeat',\n                'onreset',\n                'onresize',\n                'onresume',\n                'onreverse',\n                'onrow',\n                'onunder',\n                'onscroll',\n                'onseek',\n                'onsearch',\n                'onselect',\n                'onstart',\n                'onshow',\n                'onstop',\n                'onstorage',\n                'onsyncrestored',\n                'onsubmit',\n                'ontimeerror',\n                'ontoggle',\n                'ontouch',\n                'ontrackchange',\n                'onundo',\n                'onunload',\n                'onurlflip',\n                'onwheel',\n                'onpopup',\n                'codebase',\n                'dynsrc',\n                'lowsrc',\n                'xmlns'\n\t\t\t);\n\n\t\t\t$ra_as_content = array('vbscript', 'eval');\n\t\t\t$ra_javascript = array('javascript');\n\t///\t\t$ra_style = array('style'); // Commented as it has been considered as a bit too aggressive\n\t\t}\n\n\t\t// keep replacing as long as the previous round replaced something\n\t\twhile ( $this->RemoveXSSchars($val)\n\t\t\t|| $this->RemoveXSSregexp($ra_as_tag_only, $val, '(\\<|\\[\\\\\\\\xC0\\]\\[\\\\\\\\xBC\\])\\??')\n\t\t\t|| $this->RemoveXSSregexp($ra_as_attribute, $val)\n\t\t\t|| $this->RemoveXSSregexp($ra_as_content, $val, '[\\.\\\\\\\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\|\\:;\\-\\/`#\"\\']', '(?!\\s*[a-z0-9])', true)\n\t\t\t|| $this->RemoveXSSregexp($ra_javascript, $val, '', ':', true)\n\t///\t\t|| RemoveXSSregexp($ra_style, $val, '[^a-z0-9]', '=') // Commented as it has been considered as a bit too aggressive\n\t\t);\n\n\t\treturn $val;\n\t}\n\n\tfunction RemoveXSSchars(&$val)\n\t{\n\t\tstatic $patterns = NULL;\n\t\tstatic $replacements = NULL;\n\t\t$val_before = $val;\n\t\t$found = true;\n\n\t\tif ( $patterns == NULL ) {\n\t\t\t$patterns = array();\n\t\t\t$replacements = array();\n\n\t\t\t// remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are\n\t\t\t// allowed this prevents some character re-spacing such as <java\\0script>\n\t\t\t// note that you have to handle splits with \\n, \\r, and \\t later since they\n\t\t\t// *are* allowed in some inputs\n\t\t\t$patterns[] = '/([\\x00-\\x08\\x0b-\\x0c\\x0e-\\x19])/';\n\t\t\t$replacements[] = '';\n\n\t\t\t// straight replacements, the user should never need these since they're\n\t\t\t// normal characters this prevents like\n\t\t\t// <IMG SRC=&#X40&#X61&#X76&#X61&#X73&#X63&#X72&#X69&#X70&#X74&#X3A&#X61&#X6C&#X65&#X72&#X74&#X28&#X27&#X58&#X53&#X53&#X27&#X29>\n\t\t\t// Calculate the search and replace patterns only once\n\t\t\t$search = 'abcdefghijklmnopqrstuvwxyz';\n\t\t\t$search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t\t\t$search .= '1234567890!@#$%^&*()';\n\t\t\t$search .= '~`\";:?+/={}[]-_|\\'\\\\';\n\t\t\tfor ($i = 0, $istrlen_search = strlen($search); $i < $istrlen_search; $i++) {\n\t\t\t\t// ;? matches the ;, which is optional\n\t\t\t\t// 0{0,8} matches any padded zeros,\n\t\t\t\t// which are optional and go up to 8 chars\n\t\t\t\t// &#x0040 @ search for the hex values\n\t\t\t\t$patterns[] = '/(&#[xX]0{0,8}'.dechex(ord($search[$i])).';?)/i';\n\t\t\t\t$replacements[] = $search[$i];\n\t\t\t\t// &#00064 @ 0{0,8} matches '0' zero to eight times\n\t\t\t\t// with a ;\n\t\t\t\t$patterns[] = '/(&#0{0,8}'.ord($search[$i]).';?)/';\n\t\t\t\t$replacements[] = $search[$i];\n\t\t\t}\n\t\t}\n\t\t$val = preg_replace($patterns, $replacements, $val);\n\t\tif ($val_before == $val) {\n\t\t\t// no replacements were made, so exit the loop\n\t\t\t$found = false;\n\t\t}\n\t\treturn $found;\n\t}\n\n\tfunction RemoveXSSregexp(&$ra, &$val, $prefix = '', $suffix = '', $allow_spaces = false)\n\t{\n\t\t$val_before = $val;\n\t\t$found = true;\n\t\t$patterns = array();\n\t\t$replacements = array();\n\n\t\t$pattern_sep = '('\n\t\t\t.'&#[xX]0{0,8}[9ab];?'\n\t\t\t.'|&#0{0,8}(9|10|13);?'\n\t\t\t.'|(?ms)(\\/\\*.*?\\*\\/|\\<\\!\\-\\-.*?\\-\\-\\>)'\n\t\t\t.'|(\\<\\!\\[CDATA\\[|\\]\\]\\>)'\n\t\t\t.'|\\\\\\\\?'\n\t\t\t.( $allow_spaces ? '|\\s' : '' )\n\t\t.')*';\n\n\t\t$pattern_start = '/';\n\t\tif ( $prefix != '' ) {\n\t\t\t$pattern_start .= '(' . $prefix . '\\s*' . $pattern_sep . ')';\n\t\t}\n\n\t\t$pattern_end = '/i';\n\t\tif ( $suffix != '' ) {\n\t\t\tif ( $suffix == '=' || $suffix == ':' ) {\n\t\t\t\t$replacement_end = $suffix;\n\t\t\t\t$pattern_end = '(' . $pattern_sep . '\\s*' . $suffix . ')' . $pattern_end;\n\t\t\t} else {\n\t\t\t\t$replacement_end = '';\n\t\t\t\t$pattern_end = $suffix . $pattern_end;\n\t\t\t}\n\t\t} else {\n\t\t\t$replacement_end = '';\n\t\t}\n\n\t\tfor ($i = 0, $isizeof_ra = count($ra); $i < $isizeof_ra; $i++) {\n\t\t\t$pattern = $pattern_start;\n\t\t\tfor ($j = 0, $jstrlen_rai = strlen($ra[$i]); $j < $jstrlen_rai; $j++) {\n\t\t\t\tif ($j > 0) {\n\t\t\t\t\t$pattern .= $pattern_sep;\n\t\t\t\t}\n\t\t\t\t$pattern .= $ra[$i][$j];\n\t\t\t}\n\t\t\t$pattern .= $pattern_end;\n\t\t\t$replacement = ( $prefix != '' ) ? '\\\\1' : '';\n\t\t\t// add in <> to nerf the tag\n\t\t\t$replacement .= substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2);\n\t\t\t$patterns[] = $pattern;\n\t\t\t$replacements[] = $replacement.$replacement_end;\n\t\t}\n\t\t// filter out the hex tags\n\t\t$val = preg_replace($patterns, $replacements, $val);\n\n\t\tif ($val === null) {\n\t\t\tFeedback::error(tr('Filter error: \"%0\"', \n\t\t\t\tarray_flip(get_defined_constants(true)['pcre'])[preg_last_error()]), 'session');\n\t\t}\n\t\tif ($val_before == $val) {\n\t\t\t// no replacements were made, so exit the loop\n\t\t\t$found = false;\n\t\t}\n\n\t\treturn $found;\n\t}\n}\n"], "fixing_code": ["<?php\n// (c) Copyright 2002-2016 by authors of the Tiki Wiki CMS Groupware Project\n//\n// All Rights Reserved. See copyright.txt for details and a complete list of authors.\n// Licensed under the GNU LESSER GENERAL PUBLIC LICENSE. See license.txt for details.\n// $Id$\n\nclass TikiFilter_PreventXss implements Zend\\Filter\\FilterInterface\n{\n\tfunction filter( $value )\n\t{\n\t\t// No need to filter really simple values\n\t\tif ( ctype_alnum($value) || empty($value) )\n\t\t\treturn $value;\n\t\telse\n\t\t\treturn $this->RemoveXSS($value);\n\t}\n\n\t/* RemoveXSS initially developped by kallahar - quickwired.com, modified for Tiki\n\t * Original code could be found here:\n\t * http://quickwired.com/smallprojects/php_xss_filter_function.php\n\t */\n\tfunction RemoveXSS($val)\n\t{\n\t\tstatic $ra_as_tag_only = NULL;\n\t\tstatic $ra_as_attribute = NULL;\n\t\tstatic $ra_as_content = NULL;\n\t\tstatic $ra_javascript = NULL;\n\n\t\t// now the only remaining whitespace attacks are \\t, \\n, and \\r\n\t\tif ( $ra_as_tag_only == NULL ) {\n\t\t\t$ra_as_tag_only = array(\n                'style',\n                'script',\n                'embed',\n                'object',\n                'applet',\n                'meta',\n                'iframe',\n                'frame',    // also filters frameset\n                'ilayer',\n                'layer',\n                'bgsound',\n                'base',\n                'xml',\n                'import',\n                'link',\n                'audio',\n                'video'\n\t\t\t);\n\n\n\t\t\t// note: short forms, such as onmouse, will filter its long forms:\u3000onmouseup, onmousedown etc.\n\t\t\t$ra_as_attribute = array(\n                'onabort',\n                'onactivate',\n                'onafter',\n                'onbefore',\n                'onbegin',\n                'onblur',\n                'onbounce',\n                'onbroadcast',\n                'oncellchange',\n                'onchange',\n                'onclick',\n                'onclose',\n                'oncommand',\n                'oncontextmenu',\n                'oncontrolselect',\n                'oncopy',\n                'oncut',\n                'ondata',\n                'ondblclick',\n                'ondeactivate',\n                'ondrag',\n                'ondrop',\n                'onend',\n                'onerror',\n                'onfilterchange',\n                'onfinish',\n                'onfocus',\n                'ongotpointer',\n                'onhashchange',\n                'onhelp',\n                'oninput',\n                'oninvalid',\n                'onkey',\n                'onlayoutcomplete',\n                'onload',\n                'onlosecapture',\n                'onlostpointer',\n                'onmedia',\n                'onmessage',\n                'onmouse',\n                'onmove',\n                'onoffline',\n                'ononline',\n                'onoutofsync',\n                'onover',\n                'onpage',\n                'onpaste',\n                'onpause',\n                'onpointer',\n                'onpopstate',\n                'onprogress',\n                'onpropertychange',\n                'onreadystatechange',\n                'onredo',\n                'onrepeat',\n                'onreset',\n                'onresize',\n                'onresume',\n                'onreverse',\n                'onrow',\n                'onunder',\n                'onscroll',\n                'onseek',\n                'onsearch',\n                'onselect',\n                'onstart',\n                'onshow',\n                'onstop',\n                'onstorage',\n                'onsyncrestored',\n                'onsubmit',\n                'ontimeerror',\n                'ontoggle',\n                'ontouch',\n                'ontrackchange',\n                'onundo',\n                'onunload',\n                'onurlflip',\n                'onwheel',\n                'onpopup',\n                'codebase',\n                'dynsrc',\n                'lowsrc',\n                'xmlns'\n\t\t\t);\n\n\t\t\t$ra_as_content = array('vbscript', 'eval');\n\t\t\t$ra_javascript = array('javascript');\n\t///\t\t$ra_style = array('style'); // Commented as it has been considered as a bit too aggressive\n\t\t}\n\n\t\t// keep replacing as long as the previous round replaced something\n\t\twhile ( $this->RemoveXSSchars($val)\n\t\t\t|| $this->RemoveXSSregexp($ra_as_tag_only, $val, '(\\<|\\[\\\\\\\\xC0\\]\\[\\\\\\\\xBC\\])\\??')\n\t\t\t|| $this->RemoveXSSregexp($ra_as_attribute, $val)\n\t\t\t|| $this->RemoveXSSregexp($ra_as_content, $val, '[\\.\\\\\\\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\|\\:;\\-\\/`#\"\\']', '(?!\\s*[a-z0-9])', true)\n\t\t\t|| $this->RemoveXSSregexp($ra_javascript, $val, '', ':', true)\n\t///\t\t|| RemoveXSSregexp($ra_style, $val, '[^a-z0-9]', '=') // Commented as it has been considered as a bit too aggressive\n\t\t);\n\n\t\treturn $val;\n\t}\n\n\tfunction RemoveXSSchars(&$val)\n\t{\n\t\tstatic $patterns = NULL;\n\t\tstatic $replacements = NULL;\n\t\t$val_before = $val;\n\t\t$found = true;\n\n\t\tif ( $patterns == NULL ) {\n\t\t\t$patterns = array();\n\t\t\t$replacements = array();\n\n\t\t\t// remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are\n\t\t\t// allowed this prevents some character re-spacing such as <java\\0script>\n\t\t\t// note that you have to handle splits with \\n, \\r, and \\t later since they\n\t\t\t// *are* allowed in some inputs\n\t\t\t$patterns[] = '/([\\x00-\\x08\\x0b-\\x0c\\x0e-\\x19])/';\n\t\t\t$replacements[] = '';\n\n\t\t\t// straight replacements, the user should never need these since they're\n\t\t\t// normal characters this prevents like\n\t\t\t// <IMG SRC=&#X40&#X61&#X76&#X61&#X73&#X63&#X72&#X69&#X70&#X74&#X3A&#X61&#X6C&#X65&#X72&#X74&#X28&#X27&#X58&#X53&#X53&#X27&#X29>\n\t\t\t// Calculate the search and replace patterns only once\n\t\t\t$search = 'abcdefghijklmnopqrstuvwxyz';\n\t\t\t$search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t\t\t$search .= '1234567890!@#$%^&*()';\n\t\t\t$search .= '~`\";:?+/={}[]-_|\\'\\\\';\n\t\t\tfor ($i = 0, $istrlen_search = strlen($search); $i < $istrlen_search; $i++) {\n\t\t\t\t// ;? matches the ;, which is optional\n\t\t\t\t// 0* matches any padded zeros, which are optional\n\t\t\t\t// &#x0040 @ search for the hex values\n\t\t\t\t$patterns[] = '/(&#x0*'.dechex(ord($search[$i])).';?)/i';\n\t\t\t\t$replacements[] = $search[$i];\n\t\t\t\t// &#00064 @ 0* matches padded zeros\n\t\t\t\t// with a ;\n\t\t\t\t$patterns[] = '/(&#0*'.ord($search[$i]).';?)/';\n\t\t\t\t$replacements[] = $search[$i];\n\t\t\t}\n\t\t}\n\t\t$val = preg_replace($patterns, $replacements, $val);\n\t\tif ($val_before == $val) {\n\t\t\t// no replacements were made, so exit the loop\n\t\t\t$found = false;\n\t\t}\n\t\treturn $found;\n\t}\n\n\tfunction RemoveXSSregexp(&$ra, &$val, $prefix = '', $suffix = '', $allow_spaces = false)\n\t{\n\t\t$val_before = $val;\n\t\t$found = true;\n\t\t$patterns = array();\n\t\t$replacements = array();\n\n\t\t$pattern_sep = '('\n\t\t\t.'&#[xX]0{0,8}[9ab];?'\n\t\t\t.'|&#0{0,8}(9|10|13);?'\n\t\t\t.'|(?ms)(\\/\\*.*?\\*\\/|\\<\\!\\-\\-.*?\\-\\-\\>)'\n\t\t\t.'|(\\<\\!\\[CDATA\\[|\\]\\]\\>)'\n\t\t\t.'|\\\\\\\\?'\n\t\t\t.( $allow_spaces ? '|\\s' : '' )\n\t\t.')*';\n\n\t\t$pattern_start = '/';\n\t\tif ( $prefix != '' ) {\n\t\t\t$pattern_start .= '(' . $prefix . '\\s*' . $pattern_sep . ')';\n\t\t}\n\n\t\t$pattern_end = '/i';\n\t\tif ( $suffix != '' ) {\n\t\t\tif ( $suffix == '=' || $suffix == ':' ) {\n\t\t\t\t$replacement_end = $suffix;\n\t\t\t\t$pattern_end = '(' . $pattern_sep . '\\s*' . $suffix . ')' . $pattern_end;\n\t\t\t} else {\n\t\t\t\t$replacement_end = '';\n\t\t\t\t$pattern_end = $suffix . $pattern_end;\n\t\t\t}\n\t\t} else {\n\t\t\t$replacement_end = '';\n\t\t}\n\n\t\tfor ($i = 0, $isizeof_ra = count($ra); $i < $isizeof_ra; $i++) {\n\t\t\t$pattern = $pattern_start;\n\t\t\tfor ($j = 0, $jstrlen_rai = strlen($ra[$i]); $j < $jstrlen_rai; $j++) {\n\t\t\t\tif ($j > 0) {\n\t\t\t\t\t$pattern .= $pattern_sep;\n\t\t\t\t}\n\t\t\t\t$pattern .= $ra[$i][$j];\n\t\t\t}\n\t\t\t$pattern .= $pattern_end;\n\t\t\t$replacement = ( $prefix != '' ) ? '\\\\1' : '';\n\t\t\t// add in <> to nerf the tag\n\t\t\t$replacement .= substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2);\n\t\t\t$patterns[] = $pattern;\n\t\t\t$replacements[] = $replacement.$replacement_end;\n\t\t}\n\t\t// filter out the hex tags\n\t\t$val = preg_replace($patterns, $replacements, $val);\n\n\t\tif ($val === null) {\n\t\t\tFeedback::error(tr('Filter error: \"%0\"', \n\t\t\t\tarray_flip(get_defined_constants(true)['pcre'])[preg_last_error()]), 'session');\n\t\t}\n\t\tif ($val_before == $val) {\n\t\t\t// no replacements were made, so exit the loop\n\t\t\t$found = false;\n\t\t}\n\n\t\treturn $found;\n\t}\n}\n"], "filenames": ["lib/core/TikiFilter/PreventXss.php"], "buggy_code_start_loc": [186], "buggy_code_end_loc": [194], "fixing_code_start_loc": [186], "fixing_code_end_loc": [193], "type": "CWE-79", "message": "lib/core/TikiFilter/PreventXss.php in Tiki Wiki CMS Groupware 16.2 allows remote attackers to bypass the XSS filter via padded zero characters, as demonstrated by an attack on tiki-batch_send_newsletter.php.", "other": {"cve": {"id": "CVE-2017-9305", "sourceIdentifier": "cve@mitre.org", "published": "2017-05-31T04:29:00.303", "lastModified": "2017-06-08T18:14:32.983", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "lib/core/TikiFilter/PreventXss.php in Tiki Wiki CMS Groupware 16.2 allows remote attackers to bypass the XSS filter via padded zero characters, as demonstrated by an attack on tiki-batch_send_newsletter.php."}, {"lang": "es", "value": "lib/core /TikiFilter/PreventXss.php en Tiki Wiki CMS Groupware 16.2 permitir\u00eda a un atacante remoto pasar por alto el filtro XSS a trav\u00e9s de caracteres de relleno cero, como lo demuestra un ataque a tiki-batch_send_newsletter.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tiki:tikiwiki_cms\\/groupware:16.2:*:*:*:*:*:*:*", "matchCriteriaId": "A9FAA7AE-B0A7-4D61-AF86-0A09A3A20152"}]}]}], "references": [{"url": "https://github.com/tikiorg/tiki/commit/6c016e8f066d2f404b18eaa1af7fa0c7a9651ccd", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://www.cdxy.me/?p=763", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tikiorg/tiki/commit/6c016e8f066d2f404b18eaa1af7fa0c7a9651ccd"}}