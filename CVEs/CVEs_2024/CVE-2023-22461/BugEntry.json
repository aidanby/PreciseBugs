{"buggy_code": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getWindow = () => (typeof window === 'undefined' ? null : window);\nconst readAsText = (svg) => new Promise((resolve) => {\n    if (!isFile(svg)) {\n        resolve(svg.toString('utf-8'));\n    }\n    else {\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            resolve(fileReader.result);\n        };\n        fileReader.readAsText(svg);\n    }\n});\nconst isFile = (obj) => {\n    return obj.size !== undefined;\n};\nconst sanitizeSVG = async (svg, window = getWindow()) => {\n    if (!window)\n        throw new Error('DOM window required');\n    if (isFile(svg) && svg.type !== 'image/svg+xml')\n        return svg;\n    const svgText = await readAsText(svg);\n    if (!svgText)\n        throw new Error('Image corrupt');\n    const div = window.document.createElement('div');\n    div.innerHTML = svgText;\n    const svgEl = div.firstElementChild;\n    const attributes = Array.from(svgEl.attributes).map(({ name }) => name);\n    const hasScriptAttr = !!attributes.find((attr) => attr.startsWith('on'));\n    const scripts = svgEl.getElementsByTagName('script');\n    return scripts.length === 0 && !hasScriptAttr ? svg : null;\n};\nexports.default = sanitizeSVG;\n//# sourceMappingURL=sanitizeSVG.js.map", "{\"version\":3,\"file\":\"sanitizeSVG.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/sanitizeSVG.ts\"],\"names\":[],\"mappings\":\";;AAAA,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;AACvE,MAAM,UAAU,GAAG,CAAC,GAAkB,EAAE,EAAE,CACxC,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,EAAE;IACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;QAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAA;KAC/B;SAAM;QACL,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAA;QACnC,UAAU,CAAC,MAAM,GAAG,GAAG,EAAE;YACvB,OAAO,CAAC,UAAU,CAAC,MAAuB,CAAC,CAAA;QAC7C,CAAC,CAAA;QACD,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;KAC3B;AACH,CAAC,CAAC,CAAA;AAEJ,MAAM,MAAM,GAAG,CAAC,GAAkB,EAAe,EAAE;IACjD,OAAQ,GAAY,CAAC,IAAI,KAAK,SAAS,CAAA;AACzC,CAAC,CAAA;AAED,MAAM,WAAW,GAAG,KAAK,EAAE,GAAkB,EAAE,MAAM,GAAG,SAAS,EAAE,EAAE,EAAE;IACrE,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;IACnD,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,eAAe;QAAE,OAAO,GAAG,CAAA;IAC3D,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAA;IACrC,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;IAC9C,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAChD,GAAG,CAAC,SAAS,GAAG,OAAO,CAAA;IACvB,MAAM,KAAK,GAAG,GAAG,CAAC,iBAAkB,CAAA;IACpC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAA;IACvE,MAAM,aAAa,GAAG,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;IACxE,MAAM,OAAO,GAAG,KAAK,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAA;IACpD,OAAO,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAA;AAC5D,CAAC,CAAA;AAED,kBAAe,WAAW,CAAA\"}", "{\"version\":3,\"file\":\"sanitizeSVG.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../src/sanitizeSVG.ts\"],\"names\":[],\"mappings\":\";AAkBA,QAAA,MAAM,WAAW,+EAYhB,CAAA;AAED,eAAe,WAAW,CAAA\"}", "const getWindow = () => (typeof window === 'undefined' ? null : window)\nconst readAsText = (svg: File | Buffer) =>\n  new Promise<string | null>((resolve) => {\n    if (!isFile(svg)) {\n      resolve(svg.toString('utf-8'))\n    } else {\n      const fileReader = new FileReader()\n      fileReader.onload = () => {\n        resolve(fileReader.result as string | null)\n      }\n      fileReader.readAsText(svg)\n    }\n  })\n\nconst isFile = (obj: File | Buffer): obj is File => {\n  return (obj as File).size !== undefined\n}\n\nconst sanitizeSVG = async (svg: File | Buffer, window = getWindow()) => {\n  if (!window) throw new Error('DOM window required')\n  if (isFile(svg) && svg.type !== 'image/svg+xml') return svg\n  const svgText = await readAsText(svg)\n  if (!svgText) throw new Error('Image corrupt')\n  const div = window.document.createElement('div')\n  div.innerHTML = svgText\n  const svgEl = div.firstElementChild!\n  const attributes = Array.from(svgEl.attributes).map(({ name }) => name)\n  const hasScriptAttr = !!attributes.find((attr) => attr.startsWith('on'))\n  const scripts = svgEl.getElementsByTagName('script')\n  return scripts.length === 0 && !hasScriptAttr ? svg : null\n}\n\nexport default sanitizeSVG\n"], "fixing_code": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst svgDisallowed = [\n    'a',\n    'animate',\n    'color-profile',\n    'cursor',\n    'discard',\n    'fedropshadow',\n    'font-face',\n    'font-face-format',\n    'font-face-name',\n    'font-face-src',\n    'font-face-uri',\n    'foreignobject',\n    'hatch',\n    'hatchpath',\n    'mesh',\n    'meshgradient',\n    'meshpatch',\n    'meshrow',\n    'missing-glyph',\n    'script',\n    'set',\n    'solidcolor',\n    'unknown',\n    'use',\n];\nconst getWindow = () => (typeof window === 'undefined' ? null : window);\nconst readAsText = (svg) => new Promise((resolve) => {\n    if (!isFile(svg)) {\n        resolve(svg.toString('utf-8'));\n    }\n    else {\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            resolve(fileReader.result);\n        };\n        fileReader.readAsText(svg);\n    }\n});\nconst isFile = (obj) => {\n    return obj.size !== undefined;\n};\nconst sanitizeSVG = async (svg, window = getWindow()) => {\n    if (!window)\n        throw new Error('DOM window required');\n    if (isFile(svg) && svg.type !== 'image/svg+xml')\n        return svg;\n    const svgText = await readAsText(svg);\n    if (!svgText)\n        throw new Error('Image corrupt');\n    const playground = window.document.createElement('template');\n    playground.innerHTML = svgText;\n    const svgEl = playground.content.firstElementChild;\n    const attributes = Array.from(svgEl.attributes).map(({ name }) => name);\n    const hasScriptAttr = !!attributes.find((attr) => attr.startsWith('on'));\n    const disallowedSvgElements = svgEl.querySelectorAll(svgDisallowed.join(','));\n    return disallowedSvgElements.length === 0 && !hasScriptAttr ? svg : null;\n};\nexports.default = sanitizeSVG;\n//# sourceMappingURL=sanitizeSVG.js.map", "{\"version\":3,\"file\":\"sanitizeSVG.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/sanitizeSVG.ts\"],\"names\":[],\"mappings\":\";;AAEA,MAAM,aAAa,GAAG;IACpB,GAAG;IACH,SAAS;IACT,eAAe;IACf,QAAQ;IACR,SAAS;IACT,cAAc;IACd,WAAW;IACX,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,eAAe;IACf,eAAe;IACf,OAAO;IACP,WAAW;IACX,MAAM;IACN,cAAc;IACd,WAAW;IACX,SAAS;IACT,eAAe;IACf,QAAQ;IACR,KAAK;IACL,YAAY;IACZ,SAAS;IACT,KAAK;CACN,CAAA;AAED,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;AACvE,MAAM,UAAU,GAAG,CAAC,GAAkB,EAAE,EAAE,CACxC,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,EAAE;IACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;QAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAA;KAC/B;SAAM;QACL,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAA;QACnC,UAAU,CAAC,MAAM,GAAG,GAAG,EAAE;YACvB,OAAO,CAAC,UAAU,CAAC,MAAuB,CAAC,CAAA;QAC7C,CAAC,CAAA;QACD,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;KAC3B;AACH,CAAC,CAAC,CAAA;AAEJ,MAAM,MAAM,GAAG,CAAC,GAAkB,EAAe,EAAE;IACjD,OAAQ,GAAY,CAAC,IAAI,KAAK,SAAS,CAAA;AACzC,CAAC,CAAA;AAED,MAAM,WAAW,GAAG,KAAK,EAAE,GAAkB,EAAE,MAAM,GAAG,SAAS,EAAE,EAAE,EAAE;IACrE,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;IACnD,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,eAAe;QAAE,OAAO,GAAG,CAAA;IAC3D,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAA;IACrC,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;IAC9C,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;IAC5D,UAAU,CAAC,SAAS,GAAG,OAAO,CAAA;IAC9B,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,iBAAkB,CAAA;IACnD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAA;IACrE,MAAM,aAAa,GAAG,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;IACxE,MAAM,qBAAqB,GAAG,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IAC7E,OAAO,qBAAqB,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAA;AAC1E,CAAC,CAAA;AAED,kBAAe,WAAW,CAAA\"}", "{\"version\":3,\"file\":\"sanitizeSVG.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../src/sanitizeSVG.ts\"],\"names\":[],\"mappings\":\";AA+CA,QAAA,MAAM,WAAW,+EAYhB,CAAA;AAED,eAAe,WAAW,CAAA\"}", "// List of disallowed SVG elements\n// Adjusted from https://github.com/cure53/DOMPurify/blob/f6fcdb9f1c13b3559697db0038744a0a327d46ab/src/tags.js#L201\nconst svgDisallowed = [\n  'a',\n  'animate',\n  'color-profile',\n  'cursor',\n  'discard',\n  'fedropshadow',\n  'font-face',\n  'font-face-format',\n  'font-face-name',\n  'font-face-src',\n  'font-face-uri',\n  'foreignobject',\n  'hatch',\n  'hatchpath',\n  'mesh',\n  'meshgradient',\n  'meshpatch',\n  'meshrow',\n  'missing-glyph',\n  'script',\n  'set',\n  'solidcolor',\n  'unknown',\n  'use'\n]\n\nconst getWindow = () => (typeof window === 'undefined' ? null : window)\nconst readAsText = (svg: File | Buffer) =>\n  new Promise<string | null>((resolve) => {\n    if (!isFile(svg)) {\n      resolve(svg.toString('utf-8'))\n    } else {\n      const fileReader = new FileReader()\n      fileReader.onload = () => {\n        resolve(fileReader.result as string | null)\n      }\n      fileReader.readAsText(svg)\n    }\n  })\n\nconst isFile = (obj: File | Buffer): obj is File => {\n  return (obj as File).size !== undefined\n}\n\nconst sanitizeSVG = async (svg: File | Buffer, window = getWindow()) => {\n  if (!window) throw new Error('DOM window required')\n  if (isFile(svg) && svg.type !== 'image/svg+xml') return svg\n  const svgText = await readAsText(svg)\n  if (!svgText) throw new Error('Image corrupt')\n  const playground = window.document.createElement('template')\n  playground.innerHTML = svgText\n  const svgEl = playground.content.firstElementChild!\n  const attributes = Array.from(svgEl.attributes).map(({ name }) => name)\n  const hasScriptAttr = !!attributes.find((attr) => attr.startsWith('on'))\n  const disallowedSvgElements = svgEl.querySelectorAll(svgDisallowed.join(','))\n  return disallowedSvgElements.length === 0 && !hasScriptAttr ? svg : null\n}\n\nexport default sanitizeSVG\n"], "filenames": ["dist/lib/sanitizeSVG.js", "dist/lib/sanitizeSVG.js.map", "dist/types/sanitizeSVG.d.ts.map", "src/sanitizeSVG.ts"], "buggy_code_start_loc": [2, 1, 1, 0], "buggy_code_end_loc": [34, 2, 2, 31], "fixing_code_start_loc": [3, 1, 1, 1], "fixing_code_end_loc": [60, 2, 2, 60], "type": "CWE-79", "message": "The `sanitize-svg` package, a small SVG sanitizer to prevent cross-site scripting attacks, uses a deny-list-pattern to sanitize SVGs to prevent XSS. In doing so, literal `<script>`-tags and on-event handlers were detected in versions prior to 0.4.0. As a result, downstream software that relies on `sanitize-svg` and expects resulting SVGs to be safe, may be vulnerable to cross-site scripting. This vulnerability was addressed in v0.4.0. There are no known workarounds", "other": {"cve": {"id": "CVE-2023-22461", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-04T15:15:09.510", "lastModified": "2023-01-10T19:14:41.823", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The `sanitize-svg` package, a small SVG sanitizer to prevent cross-site scripting attacks, uses a deny-list-pattern to sanitize SVGs to prevent XSS. In doing so, literal `<script>`-tags and on-event handlers were detected in versions prior to 0.4.0. As a result, downstream software that relies on `sanitize-svg` and expects resulting SVGs to be safe, may be vulnerable to cross-site scripting. This vulnerability was addressed in v0.4.0. There are no known workarounds"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}, {"lang": "en", "value": "CWE-80"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sanitize-svg_project:sanitize-svg:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.4.0", "matchCriteriaId": "F34D2E17-9B60-4263-A693-08F3930F8B7F"}]}]}], "references": [{"url": "https://github.com/mattkrick/sanitize-svg/commit/b107e453ede7b58adcccae74a3e474c012eec85d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mattkrick/sanitize-svg/security/advisories/GHSA-h857-2g56-468g", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mattkrick/sanitize-svg/commit/b107e453ede7b58adcccae74a3e474c012eec85d"}}