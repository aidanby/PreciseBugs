{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\n$autoloadPath = __DIR__ . '/vendor/autoload.php';\nif (file_exists($autoloadPath)) {\n    require_once $autoloadPath;\n}\n\nuse PrestaShop\\Module\\FacetedSearch\\Filters\\Converter;\nuse PrestaShop\\Module\\FacetedSearch\\HookDispatcher;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass Ps_Facetedsearch extends Module implements WidgetInterface\n{\n    /**\n     * @var string Name of the module running on PS 1.6.x. Used for data migration.\n     */\n    const PS_16_EQUIVALENT_MODULE = 'blocklayered';\n\n    /**\n     * Lock indexation if too many products\n     *\n     * @var int\n     */\n    const LOCK_TOO_MANY_PRODUCTS = 5000;\n\n    /**\n     * Lock template filter creation if too many products\n     *\n     * @var int\n     */\n    const LOCK_TEMPLATE_CREATION = 20000;\n\n    /**\n     * US iso code, used to prevent taxes usage while computing prices\n     *\n     * @var array\n     */\n    const ISO_CODE_TAX_FREE = [\n        'US',\n    ];\n\n    /**\n     * Number of digits for MySQL DECIMAL\n     *\n     * @var int\n     */\n    const DECIMAL_DIGITS = 5;\n\n    /**\n     * @var bool\n     */\n    private $ajax;\n\n    /**\n     * @var int\n     */\n    private $psLayeredFullTree;\n\n    /**\n     * @var Db\n     */\n    private $database;\n\n    /**\n     * @var HookDispatcher\n     */\n    private $hookDispatcher;\n\n    public function __construct()\n    {\n        $this->name = 'ps_facetedsearch';\n        $this->tab = 'front_office_features';\n        $this->version = '3.4.1';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->bootstrap = true;\n        $this->ajax = (bool) Tools::getValue('ajax');\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Faceted search', [], 'Modules.Facetedsearch.Admin');\n        $this->description = $this->trans('Displays a block allowing multiple filters.', [], 'Modules.Facetedsearch.Admin');\n        $this->psLayeredFullTree = Configuration::get('PS_LAYERED_FULL_TREE');\n        $this->ps_versions_compliancy = ['min' => '1.7.1.0', 'max' => _PS_VERSION_];\n\n        $this->hookDispatcher = new HookDispatcher($this);\n    }\n\n    /**\n     * Check if method is an ajax request.\n     * This check is an old behavior and only check for _GET value.\n     *\n     * @return bool\n     */\n    public function isAjax()\n    {\n        return (bool) $this->ajax;\n    }\n\n    /**\n     * Return the current database instance\n     *\n     * @return Db\n     */\n    public function getDatabase()\n    {\n        if ($this->database === null) {\n            $this->database = Db::getInstance();\n        }\n\n        return $this->database;\n    }\n\n    /**\n     * Return current context\n     *\n     * @return Context\n     */\n    public function getContext()\n    {\n        return $this->context;\n    }\n\n    protected function getDefaultFilters()\n    {\n        return [\n            'layered_selection_subcategories' => [\n                'label' => 'Sub-categories filter',\n            ],\n            'layered_selection_stock' => [\n                'label' => 'Product stock filter',\n            ],\n            'layered_selection_condition' => [\n                'label' => 'Product condition filter',\n            ],\n            'layered_selection_manufacturer' => [\n                'label' => 'Product brand filter',\n            ],\n            'layered_selection_weight_slider' => [\n                'label' => 'Product weight filter (slider)',\n                'slider' => true,\n            ],\n            'layered_selection_price_slider' => [\n                'label' => 'Product price filter (slider)',\n                'slider' => true,\n            ],\n        ];\n    }\n\n    public function install()\n    {\n        $installed = parent::install()\n                   && $this->registerHook($this->getHookDispatcher()->getAvailableHooks());\n\n        // Installation failed (or hook registration) => uninstall the module\n        if (!$installed) {\n            $this->uninstall();\n\n            return false;\n        }\n\n        if ($this->uninstallPrestaShop16Module()) {\n            $this->rebuildLayeredStructure();\n            $this->buildLayeredCategories();\n\n            $this->rebuildPriceIndexTable();\n\n            $this->getDatabase()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'layered_filter CHANGE `filters` `filters` LONGTEXT NULL');\n            $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'friendly_url');\n        } else {\n            Configuration::updateValue('PS_LAYERED_SHOW_QTIES', 1);\n            Configuration::updateValue('PS_LAYERED_FULL_TREE', 1);\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_USETAX', 1);\n            Configuration::updateValue('PS_LAYERED_FILTER_CATEGORY_DEPTH', 1);\n            Configuration::updateValue('PS_ATTRIBUTE_ANCHOR_SEPARATOR', '-');\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_ROUNDING', 1);\n            Configuration::updateValue('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST', 0);\n            Configuration::updateValue('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY', 0);\n\n            $this->psLayeredFullTree = 1;\n\n            $this->rebuildLayeredStructure();\n            $this->buildLayeredCategories();\n\n            $productsCount = $this->getDatabase()->getValue('SELECT COUNT(*) FROM `' . _DB_PREFIX_ . 'product`');\n\n            if ($productsCount < static::LOCK_TEMPLATE_CREATION) {\n                $this->rebuildLayeredCache();\n            }\n\n            $this->rebuildPriceIndexTable();\n            $this->installIndexableAttributeTable();\n            $this->installProductAttributeTable();\n\n            if ($productsCount < static::LOCK_TOO_MANY_PRODUCTS) {\n                $this->fullPricesIndexProcess();\n                $this->indexAttributes();\n            }\n        }\n\n        return true;\n    }\n\n    public function uninstall()\n    {\n        /* Delete all configurations */\n        Configuration::deleteByName('PS_LAYERED_SHOW_QTIES');\n        Configuration::deleteByName('PS_LAYERED_FULL_TREE');\n        Configuration::deleteByName('PS_LAYERED_INDEXED');\n        Configuration::deleteByName('PS_LAYERED_FILTER_PRICE_USETAX');\n        Configuration::deleteByName('PS_LAYERED_FILTER_CATEGORY_DEPTH');\n        Configuration::deleteByName('PS_LAYERED_FILTER_PRICE_ROUNDING');\n        Configuration::deleteByName('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST');\n        Configuration::deleteByName('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY');\n\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_category');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_filter');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_filter_block');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_filter_shop');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_attribute_group');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_attribute_group_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_attribute_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_feature');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_feature_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_feature_value_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_price_index');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_product_attribute');\n\n        return parent::uninstall();\n    }\n\n    /**\n     * Migrate data from 1.6 equivalent module (if applicable), then uninstall\n     */\n    private function uninstallPrestaShop16Module()\n    {\n        if (!Module::isInstalled(self::PS_16_EQUIVALENT_MODULE)) {\n            return false;\n        }\n        $oldModule = Module::getInstanceByName(self::PS_16_EQUIVALENT_MODULE);\n        if ($oldModule) {\n            // This closure calls the parent class to prevent data to be erased\n            // It allows the new module to be configured without migration\n            $parentUninstallClosure = function () {\n                return parent::uninstall();\n            };\n            $parentUninstallClosure = $parentUninstallClosure->bindTo($oldModule, get_class($oldModule));\n            $parentUninstallClosure();\n        }\n\n        return true;\n    }\n\n    /**\n     * @return HookDispatcher\n     */\n    public function getHookDispatcher()\n    {\n        return $this->hookDispatcher;\n    }\n\n    /*\n     * Generate data product attributes\n     *\n     * @param int $idProduct\n     *\n     * @return boolean\n     */\n    public function indexAttributes($idProduct = null)\n    {\n        if (null === $idProduct) {\n            $this->getDatabase()->execute('TRUNCATE ' . _DB_PREFIX_ . 'layered_product_attribute');\n        } else {\n            $this->getDatabase()->execute(\n                'DELETE FROM ' . _DB_PREFIX_ . 'layered_product_attribute\n                WHERE id_product = ' . (int) $idProduct\n            );\n        }\n\n        return $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_product_attribute` (`id_attribute`, `id_product`, `id_attribute_group`, `id_shop`)\n            SELECT pac.id_attribute, pa.id_product, ag.id_attribute_group, product_attribute_shop.`id_shop`\n            FROM ' . _DB_PREFIX_ . 'product_attribute pa' .\n            Shop::addSqlAssociation('product_attribute', 'pa') . '\n            INNER JOIN ' . _DB_PREFIX_ . 'product_attribute_combination pac ON pac.id_product_attribute = pa.id_product_attribute\n            INNER JOIN ' . _DB_PREFIX_ . 'attribute a ON (a.id_attribute = pac.id_attribute)\n            INNER JOIN ' . _DB_PREFIX_ . 'attribute_group ag ON ag.id_attribute_group = a.id_attribute_group\n            ' . ($idProduct === null ? '' : 'AND pa.id_product = ' . (int) $idProduct) . '\n            GROUP BY a.id_attribute, pa.id_product , product_attribute_shop.`id_shop`'\n        );\n    }\n\n    /*\n     * Generate data for product features\n     *\n     * @return boolean\n     */\n    public function indexFeatures()\n    {\n        return $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_feature` ' .\n            'SELECT id_feature, 1 FROM `' . _DB_PREFIX_ . 'feature` ' .\n            'WHERE id_feature NOT IN (SELECT id_feature FROM ' .\n            '`' . _DB_PREFIX_ . 'layered_indexable_feature`)'\n        );\n    }\n\n    /*\n     * Generate data for product attribute group\n     *\n     * @return boolean\n     */\n    public function indexAttributeGroup()\n    {\n        return $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_attribute_group` ' .\n            'SELECT id_attribute_group, 1 FROM `' . _DB_PREFIX_ . 'attribute_group` ' .\n            'WHERE id_attribute_group NOT IN (SELECT id_attribute_group FROM ' .\n            '`' . _DB_PREFIX_ . 'layered_indexable_attribute_group`)'\n        );\n    }\n\n    /**\n     * Full prices index process\n     *\n     * @param int $cursor in order to restart indexing from the last state\n     * @param bool $ajax\n     */\n    public function fullPricesIndexProcess($cursor = 0, $ajax = false, $smart = false)\n    {\n        if ($cursor == 0 && !$smart) {\n            $this->rebuildPriceIndexTable();\n        }\n\n        return $this->indexPrices($cursor, true, $ajax, $smart);\n    }\n\n    /**\n     * Prices index process\n     *\n     * @param int $cursor in order to restart indexing from the last state\n     * @param bool $ajax\n     */\n    public function pricesIndexProcess($cursor = 0, $ajax = false)\n    {\n        return $this->indexPrices($cursor, false, $ajax);\n    }\n\n    /**\n     * Index product prices\n     *\n     * @param int $idProduct\n     * @param bool $smart Delete before reindex\n     */\n    public function indexProductPrices($idProduct, $smart = true)\n    {\n        static $groups = null;\n\n        if ($groups === null) {\n            $groups = $this->getDatabase()->executeS('SELECT id_group FROM `' . _DB_PREFIX_ . 'group_reduction`');\n            if (!$groups) {\n                $groups = [];\n            }\n        }\n\n        $shopList = Shop::getShops(false, null, true);\n\n        foreach ($shopList as $idShop) {\n            $currencyList = Currency::getCurrencies(false, 1, new Shop($idShop));\n\n            $minPrice = [];\n            $maxPrice = [];\n\n            if ($smart) {\n                $this->getDatabase()->execute('DELETE FROM `' . _DB_PREFIX_ . 'layered_price_index` WHERE `id_product` = ' . (int) $idProduct . ' AND `id_shop` = ' . (int) $idShop);\n            }\n\n            $taxRatesByCountry = $this->getDatabase()->executeS(\n                'SELECT t.rate rate, tr.id_country, c.iso_code ' .\n                'FROM `' . _DB_PREFIX_ . 'product_shop` p ' .\n                'LEFT JOIN `' . _DB_PREFIX_ . 'tax_rules_group` trg ON  ' .\n                '(trg.id_tax_rules_group = p.id_tax_rules_group AND p.id_shop = ' . (int) $idShop . ') ' .\n                'LEFT JOIN `' . _DB_PREFIX_ . 'tax_rule` tr ON (tr.id_tax_rules_group = trg.id_tax_rules_group) ' .\n                'LEFT JOIN `' . _DB_PREFIX_ . 'tax` t ON (t.id_tax = tr.id_tax AND t.active = 1) ' .\n                'JOIN `' . _DB_PREFIX_ . 'country` c ON (tr.id_country=c.id_country AND c.active = 1) ' .\n                'WHERE id_product = ' . (int) $idProduct . ' ' .\n                'GROUP BY id_product, tr.id_country'\n            );\n\n            if (empty($taxRatesByCountry) || !Configuration::get('PS_LAYERED_FILTER_PRICE_USETAX')) {\n                $idCountry = (int) Configuration::get('PS_COUNTRY_DEFAULT', null, null, $idShop);\n                $isoCode = Country::getIsoById($idCountry);\n                $taxRatesByCountry = [['rate' => 0, 'id_country' => $idCountry, 'iso_code' => $isoCode]];\n            }\n\n            $productMinPrices = $this->getDatabase()->executeS(\n                'SELECT id_shop, id_currency, id_country, id_group, from_quantity\n                FROM `' . _DB_PREFIX_ . 'specific_price`\n                WHERE id_product = ' . (int) $idProduct . ' AND id_shop IN (0,' . (int) $idShop . ')'\n            );\n\n            $countries = Country::getCountries($this->getContext()->language->id, true, false, false);\n            foreach ($countries as $country) {\n                $idCountry = $country['id_country'];\n\n                // Get price by currency & country, without reduction!\n                foreach ($currencyList as $currency) {\n                    if (!empty($productMinPrices)) {\n                        $minPrice[$idCountry][$currency['id_currency']] = null;\n                        $maxPrice[$idCountry][$currency['id_currency']] = null;\n                        continue;\n                    }\n\n                    $price = Product::priceCalculation(\n                        $idShop,\n                        (int) $idProduct,\n                        null,\n                        $idCountry,\n                        null,\n                        null,\n                        $currency['id_currency'],\n                        null,\n                        null,\n                        false,\n                        6, // Decimals\n                        false,\n                        false,\n                        true,\n                        $specificPriceOutput,\n                        true\n                    );\n\n                    $minPrice[$idCountry][$currency['id_currency']] = $price;\n                    $maxPrice[$idCountry][$currency['id_currency']] = $price;\n                }\n\n                foreach ($productMinPrices as $specificPrice) {\n                    foreach ($currencyList as $currency) {\n                        if ($specificPrice['id_currency'] &&\n                            $specificPrice['id_currency'] != $currency['id_currency']\n                        ) {\n                            continue;\n                        }\n\n                        $price = Product::priceCalculation(\n                            $idShop,\n                            (int) $idProduct,\n                            null,\n                            $idCountry,\n                            null,\n                            null,\n                            $currency['id_currency'],\n                            (($specificPrice['id_group'] == 0) ? null : $specificPrice['id_group']),\n                            $specificPrice['from_quantity'],\n                            false,\n                            6,\n                            false,\n                            true,\n                            true,\n                            $specificPriceOutput,\n                            true\n                        );\n\n                        if ($price > $maxPrice[$idCountry][$currency['id_currency']]) {\n                            $maxPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n\n                        if ($price == 0) {\n                            continue;\n                        }\n\n                        if (null === $minPrice[$idCountry][$currency['id_currency']] || $price < $minPrice[$idCountry][$currency['id_currency']]) {\n                            $minPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n                    }\n                }\n\n                foreach ($groups as $group) {\n                    foreach ($currencyList as $currency) {\n                        $price = Product::priceCalculation(\n                            $idShop,\n                            (int) $idProduct,\n                            (int) $idCountry,\n                            null,\n                            null,\n                            null,\n                            (int) $currency['id_currency'],\n                            (int) $group['id_group'],\n                            null,\n                            false,\n                            6,\n                            false,\n                            true,\n                            true,\n                            $specificPriceOutput,\n                            true\n                        );\n\n                        if (!isset($maxPrice[$idCountry][$currency['id_currency']])) {\n                            $maxPrice[$idCountry][$currency['id_currency']] = 0;\n                        }\n\n                        if (!isset($minPrice[$idCountry][$currency['id_currency']])) {\n                            $minPrice[$idCountry][$currency['id_currency']] = null;\n                        }\n\n                        if ($price == 0) {\n                            continue;\n                        }\n\n                        if (null === $minPrice[$idCountry][$currency['id_currency']] || $price < $minPrice[$idCountry][$currency['id_currency']]) {\n                            $minPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n\n                        if ($price > $maxPrice[$idCountry][$currency['id_currency']]) {\n                            $maxPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n                    }\n                }\n            }\n\n            $values = [];\n            foreach ($taxRatesByCountry as $taxRateByCountry) {\n                $taxRate = $taxRateByCountry['rate'];\n                $idCountry = $taxRateByCountry['id_country'];\n                foreach ($currencyList as $currency) {\n                    $minPriceValue = array_key_exists($idCountry, $minPrice) ? $minPrice[$idCountry][$currency['id_currency']] : 0;\n                    $maxPriceValue = array_key_exists($idCountry, $maxPrice) ? $maxPrice[$idCountry][$currency['id_currency']] : 0;\n                    if (!in_array($taxRateByCountry['iso_code'], self::ISO_CODE_TAX_FREE)) {\n                        $minPriceValue = Tools::ps_round($minPriceValue * (100 + $taxRate) / 100, self::DECIMAL_DIGITS);\n                        $maxPriceValue = Tools::ps_round($maxPriceValue * (100 + $taxRate) / 100, self::DECIMAL_DIGITS);\n                    }\n\n                    $values[] = '(' . (int) $idProduct . ',\n                        ' . (int) $currency['id_currency'] . ',\n                        ' . $idShop . ',\n                        ' . $minPriceValue . ',\n                        ' . $maxPriceValue . ',\n                        ' . (int) $idCountry . ')';\n                }\n            }\n\n            if (!empty($values)) {\n                $this->getDatabase()->execute(\n                    'INSERT INTO `' . _DB_PREFIX_ . 'layered_price_index` (id_product, id_currency, id_shop, price_min, price_max, id_country)\n                     VALUES ' . implode(',', $values) . '\n                     ON DUPLICATE KEY UPDATE id_product = id_product' // Avoid duplicate keys\n                );\n            }\n        }\n    }\n\n    /**\n     * Get page content\n     */\n    public function getContent()\n    {\n        global $cookie;\n        $message = '';\n\n        if (Tools::isSubmit('SubmitFilter')) {\n            if (!Tools::getValue('layered_tpl_name')) {\n                $message = $this->displayError($this->trans('Filter template name required (cannot be empty)', [], 'Modules.Facetedsearch.Admin'));\n            } elseif (!Tools::getValue('categoryBox')) {\n                $message = $this->displayError($this->trans('You must select at least one category.', [], 'Modules.Facetedsearch.Admin'));\n            } else {\n                // Get or generate id\n                $idLayeredFilter = (int) Tools::getValue('id_layered_filter');\n                if (Tools::getValue('scope')) {\n                    $this->getDatabase()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'layered_filter');\n                    $categories = $this->getDatabase()->executeS(\n                        'SELECT id_category FROM ' . _DB_PREFIX_ . 'category'\n                    );\n\n                    foreach ($categories as $category) {\n                        $_POST['categoryBox'][] = (int) $category['id_category'];\n                    }\n                }\n\n                // Associate Shops\n                if (isset($_POST['checkBoxShopAsso_layered_filter'])) {\n                    $shopList = [];\n                    foreach ($_POST['checkBoxShopAsso_layered_filter'] as $idShop => $row) {\n                        $assos[] = ['id_shop' => (int) $idShop];\n                        $shopList[] = (int) $idShop;\n                    }\n                } else {\n                    $shopList = [(int) $this->getContext()->shop->id];\n                }\n\n                if (!empty($_POST['categoryBox']) && is_array($_POST['categoryBox'])) {\n                    /* Clean categoryBox before use */\n                    $_POST['categoryBox'] = array_map('intval', $_POST['categoryBox']);\n                    $filterValues = [\n                        'shop_list' => $shopList,\n                    ];\n\n                    foreach ($_POST['categoryBox'] as $idCategoryLayered) {\n                        $filterValues['categories'][] = $idCategoryLayered;\n                    }\n\n                    foreach ($_POST as $key => $value) {\n                        if (!preg_match('~^(?P<key>layered_selection_.*)(?<!_filter_)(?<!type)(?<!show_limit)$~', $key, $matches)) {\n                            continue;\n                        }\n\n                        $filterValues[$matches['key']] = [\n                            'filter_type' => (int) Tools::getValue($matches['key'] . '_filter_type', 0),\n                            'filter_show_limit' => (int) Tools::getValue($matches['key'] . '_filter_show_limit', 0),\n                        ];\n                    }\n\n                    $values = [\n                        'name' => pSQL(Tools::getValue('layered_tpl_name')),\n                        'filters' => pSQL(serialize($filterValues)),\n                        'n_categories' => (int) count($filterValues['categories']),\n                    ];\n\n                    if (!$idLayeredFilter) {\n                        $values['date_add'] = date('Y-m-d H:i:s');\n                        $sql = 'INSERT INTO ' . _DB_PREFIX_ . 'layered_filter ' .\n                             '(name, filters, n_categories, date_add, id_layered_filter) ' .\n                             'VALUES (' .\n                             '\"' . pSQL($values['name']) . '\", ' .\n                             '\"' . $values['filters'] . '\", ' .\n                             '' . (int) $values['n_categories'] . ', ' .\n                             '\"' . pSQL($values['date_add']) . '\", ' .\n                             '' . $idLayeredFilter . ')';\n                        $this->getDatabase()->execute($sql);\n                        $idLayeredFilter = (int) $this->getDatabase()->Insert_ID();\n                    } else {\n                        $this->getDatabase()->execute(\n                            'DELETE FROM ' . _DB_PREFIX_ . 'layered_filter_shop WHERE `id_layered_filter` = ' . (int) $idLayeredFilter\n                        );\n                        $sql = 'UPDATE ' . _DB_PREFIX_ . 'layered_filter ' .\n                             'SET name = \"' . pSQL($values['name']) . '\", ' .\n                             'filters = \"' . $values['filters'] . '\", ' .\n                             'n_categories = ' . (int) $values['n_categories'] . ' ' .\n                             'WHERE id_layered_filter = ' . $idLayeredFilter;\n                        $this->getDatabase()->execute($sql);\n                    }\n\n                    if (isset($assos)) {\n                        foreach ($assos as $asso) {\n                            $this->getDatabase()->execute(\n                                'INSERT INTO ' . _DB_PREFIX_ . 'layered_filter_shop (`id_layered_filter`, `id_shop`)\n    VALUES(' . $idLayeredFilter . ', ' . (int) $asso['id_shop'] . ')'\n                            );\n                        }\n                    }\n\n                    $this->buildLayeredCategories();\n                    $message = $this->displayConfirmation(\n                        $this->trans('Your filter', [], 'Modules.Facetedsearch.Admin') . ' \"' .\n                        Tools::safeOutput(Tools::getValue('layered_tpl_name')) . '\" ' .\n                        (\n                            !empty($_POST['id_layered_filter']) ?\n                            $this->trans('was updated successfully.', [], 'Modules.Facetedsearch.Admin') :\n                            $this->trans('was added successfully.', [], 'Modules.Facetedsearch.Admin')\n                        )\n                    );\n                }\n            }\n        } elseif (Tools::isSubmit('submitLayeredSettings')) {\n            Configuration::updateValue('PS_LAYERED_SHOW_QTIES', (int) Tools::getValue('ps_layered_show_qties'));\n            Configuration::updateValue('PS_LAYERED_FULL_TREE', (int) Tools::getValue('ps_layered_full_tree'));\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_USETAX', (int) Tools::getValue('ps_layered_filter_price_usetax'));\n            Configuration::updateValue('PS_LAYERED_FILTER_CATEGORY_DEPTH', (int) Tools::getValue('ps_layered_filter_category_depth'));\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_ROUNDING', (int) Tools::getValue('ps_layered_filter_price_rounding'));\n            Configuration::updateValue('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST', (int) Tools::getValue('ps_layered_filter_show_out_of_stock_last'));\n            Configuration::updateValue('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY', (int) Tools::getValue('ps_layered_filter_by_default_category'));\n\n            $this->psLayeredFullTree = (int) Tools::getValue('ps_layered_full_tree');\n\n            $message = '<div class=\"alert alert-success\">' . $this->trans('Settings saved successfully', [], 'Modules.Facetedsearch.Admin') . '</div>';\n            $this->invalidateLayeredFilterBlockCache();\n        } elseif (Tools::getValue('deleteFilterTemplate')) {\n            $layered_values = $this->getDatabase()->getValue(\n                'SELECT filters\n                FROM ' . _DB_PREFIX_ . 'layered_filter\n                WHERE id_layered_filter = ' . (int) Tools::getValue('id_layered_filter')\n            );\n\n            if ($layered_values) {\n                $this->getDatabase()->execute(\n                    'DELETE FROM ' . _DB_PREFIX_ . 'layered_filter\n                    WHERE id_layered_filter = ' . (int) Tools::getValue('id_layered_filter') . ' LIMIT 1'\n                );\n                $this->buildLayeredCategories();\n                $message = $this->displayConfirmation($this->trans('Filter template deleted, categories updated (reverted to default Filter template).', [], 'Modules.Facetedsearch.Admin'));\n            } else {\n                $message = $this->displayError($this->trans('Filter template not found', [], 'Modules.Facetedsearch.Admin'));\n            }\n        }\n\n        $categoryBox = [];\n        $attributeGroups = $this->getDatabase()->executeS(\n            'SELECT ag.id_attribute_group, ag.is_color_group, agl.name, COUNT(DISTINCT(a.id_attribute)) n\n            FROM ' . _DB_PREFIX_ . 'attribute_group ag\n            LEFT JOIN ' . _DB_PREFIX_ . 'attribute_group_lang agl ON (agl.id_attribute_group = ag.id_attribute_group)\n            LEFT JOIN ' . _DB_PREFIX_ . 'attribute a ON (a.id_attribute_group = ag.id_attribute_group)\n            WHERE agl.id_lang = ' . (int) $cookie->id_lang . '\n            GROUP BY ag.id_attribute_group'\n        );\n\n        $features = $this->getDatabase()->executeS(\n            'SELECT fl.id_feature, fl.name, COUNT(DISTINCT(fv.id_feature_value)) n\n            FROM ' . _DB_PREFIX_ . 'feature_lang fl\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_value fv ON (fv.id_feature = fl.id_feature)\n            WHERE (fv.custom IS NULL OR fv.custom = 0) AND fl.id_lang = ' . (int) $cookie->id_lang . '\n            GROUP BY fl.id_feature'\n        );\n\n        if (Shop::isFeatureActive() && count(Shop::getShops(true, null, true)) > 1) {\n            $helper = new HelperForm();\n            $helper->id = Tools::getValue('id_layered_filter', null);\n            $helper->table = 'layered_filter';\n            $helper->identifier = 'id_layered_filter';\n            $this->context->smarty->assign('asso_shops', $helper->renderAssoShop());\n        }\n\n        $treeCategoriesHelper = new HelperTreeCategories('categories-treeview');\n        $treeCategoriesHelper->setRootCategory((Shop::getContext() == Shop::CONTEXT_SHOP ? Category::getRootCategory()->id_category : 0))\n                                                                     ->setUseCheckBox(true);\n\n        $moduleUrl = Tools::getProtocol(Tools::usingSecureMode()) . $_SERVER['HTTP_HOST'] . $this->getPathUri();\n\n        if (method_exists($this->context->controller, 'addJquery')) {\n            $this->context->controller->addJS(_PS_JS_DIR_ . 'jquery/plugins/jquery.sortable.js');\n        }\n\n        $this->context->controller->addJS($this->_path . 'views/dist/back.js');\n        $this->context->controller->addCSS($this->_path . 'views/dist/back.css');\n\n        if (Tools::getValue('add_new_filters_template')) {\n            $this->context->smarty->assign([\n                'current_url' => $this->context->link->getAdminLink('AdminModules') . '&configure=ps_facetedsearch&tab_module=front_office_features&module_name=ps_facetedsearch',\n                'uri' => $this->getPathUri(),\n                'id_layered_filter' => 0,\n                'template_name' => sprintf($this->trans('My template - %s', [], 'Modules.Facetedsearch.Admin'), date('Y-m-d')),\n                'attribute_groups' => $attributeGroups,\n                'features' => $features,\n                'total_filters' => 6 + count($attributeGroups) + count($features),\n            ]);\n\n            $this->context->smarty->assign('categories_tree', $treeCategoriesHelper->render());\n\n            return $this->display(__FILE__, 'views/templates/admin/add.tpl');\n        }\n\n        if (Tools::getValue('edit_filters_template')) {\n            $idLayeredFilter = (int) Tools::getValue('id_layered_filter');\n            $template = $this->getDatabase()->getRow(\n                'SELECT *\n                FROM `' . _DB_PREFIX_ . 'layered_filter`\n                WHERE id_layered_filter = ' . $idLayeredFilter\n            );\n\n            if (!empty($template)) {\n                $filters = Tools::unSerialize($template['filters']);\n                $treeCategoriesHelper->setSelectedCategories($filters['categories']);\n                $this->context->smarty->assign('categories_tree', $treeCategoriesHelper->render());\n\n                $selectShops = $filters['shop_list'];\n                unset($filters['categories']);\n                unset($filters['shop_list']);\n\n                $this->context->smarty->assign([\n                    'current_url' => $this->context->link->getAdminLink('AdminModules') . '&configure=ps_facetedsearch&tab_module=front_office_features&module_name=ps_facetedsearch',\n                    'uri' => $this->getPathUri(),\n                    'id_layered_filter' => $idLayeredFilter,\n                    'template_name' => $template['name'],\n                    'attribute_groups' => $attributeGroups,\n                    'features' => $features,\n                    'filters' => $filters,\n                    'total_filters' => 6 + count($attributeGroups) + count($features),\n                    'default_filters' => $this->getDefaultFilters(),\n                ]);\n\n                return $this->display(__FILE__, 'views/templates/admin/view.tpl');\n            }\n        }\n\n        $this->context->smarty->assign([\n            'message' => $message,\n            'uri' => $this->getPathUri(),\n            'PS_LAYERED_INDEXED' => (int) Configuration::getGlobalValue('PS_LAYERED_INDEXED'),\n            'current_url' => Tools::safeOutput(preg_replace('/&deleteFilterTemplate=[0-9]*&id_layered_filter=[0-9]*/', '', $_SERVER['REQUEST_URI'])),\n            'id_lang' => $this->getContext()->cookie->id_lang,\n            'token' => substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'base_folder' => urlencode(_PS_ADMIN_DIR_),\n            'price_indexer_url' => $moduleUrl . 'ps_facetedsearch-price-indexer.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'full_price_indexer_url' => $moduleUrl . 'ps_facetedsearch-price-indexer.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10) . '&full=1',\n            'attribute_indexer_url' => $moduleUrl . 'ps_facetedsearch-attribute-indexer.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'clear_cache_url' => $moduleUrl . 'ps_facetedsearch-clear-cache.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'filters_templates' => $this->getDatabase()->executeS('SELECT * FROM ' . _DB_PREFIX_ . 'layered_filter ORDER BY date_add DESC'),\n            'show_quantities' => Configuration::get('PS_LAYERED_SHOW_QTIES'),\n            'full_tree' => $this->psLayeredFullTree,\n            'category_depth' => Configuration::get('PS_LAYERED_FILTER_CATEGORY_DEPTH'),\n            'price_use_tax' => (bool) Configuration::get('PS_LAYERED_FILTER_PRICE_USETAX'),\n            'limit_warning' => $this->displayLimitPostWarning(21 + count($attributeGroups) * 3 + count($features) * 3),\n            'price_use_rounding' => (bool) Configuration::get('PS_LAYERED_FILTER_PRICE_ROUNDING'),\n            'show_out_of_stock_last' => (bool) Configuration::get('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST'),\n            'filter_by_default_category' => (bool) Configuration::get('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/manage.tpl');\n    }\n\n    public function displayLimitPostWarning($count)\n    {\n        $return = [];\n        if ((ini_get('suhosin.post.max_vars') && ini_get('suhosin.post.max_vars') < $count) || (ini_get('suhosin.request.max_vars') && ini_get('suhosin.request.max_vars') < $count)) {\n            $return['error_type'] = 'suhosin';\n            $return['post.max_vars'] = ini_get('suhosin.post.max_vars');\n            $return['request.max_vars'] = ini_get('suhosin.request.max_vars');\n            $return['needed_limit'] = $count + 100;\n        } elseif (ini_get('max_input_vars') && ini_get('max_input_vars') < $count) {\n            $return['error_type'] = 'conf';\n            $return['max_input_vars'] = ini_get('max_input_vars');\n            $return['needed_limit'] = $count + 100;\n        }\n\n        return $return;\n    }\n\n    private function query($sqlQuery)\n    {\n        return $this->getDatabase()->query($sqlQuery);\n    }\n\n    /**\n     * Rebuild layered structure\n     */\n    public function rebuildLayeredStructure()\n    {\n        @set_time_limit(0);\n\n        /* Set memory limit to 128M only if current is lower */\n        $memoryLimit = Tools::getMemoryLimit();\n        if ($memoryLimit != -1 && $memoryLimit < 128 * 1024 * 1024) {\n            @ini_set('memory_limit', '128M');\n        }\n\n        /* Delete and re-create the layered categories table */\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_category');\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_category` (\n            `id_layered_category` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n            `id_shop` INT(11) UNSIGNED NOT NULL,\n            `id_category` INT(10) UNSIGNED NOT NULL,\n            `id_value` INT(10) UNSIGNED NULL DEFAULT \\'0\\',\n            `type` ENUM(\\'category\\',\\'id_feature\\',\\'id_attribute_group\\',\\'quantity\\',\\'condition\\',\\'manufacturer\\',\\'weight\\',\\'price\\') NOT NULL,\n            `position` INT(10) UNSIGNED NOT NULL,\n            `filter_type` int(10) UNSIGNED NOT NULL DEFAULT 0,\n            `filter_show_limit` int(10) UNSIGNED NOT NULL DEFAULT 0,\n            KEY `id_category_shop` (`id_category`, `id_shop`, `type`, id_value, `position`),\n            KEY `id_category` (`id_category`,`type`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_filter` (\n            `id_layered_filter` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n            `name` VARCHAR(64) NOT NULL,\n            `filters` LONGTEXT NULL,\n            `n_categories` INT(10) UNSIGNED NOT NULL,\n            `date_add` DATETIME NOT NULL\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_filter_block` (\n            `hash` CHAR(32) NOT NULL DEFAULT \"\" PRIMARY KEY,\n            `data` TEXT NULL\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_filter_shop` (\n            `id_layered_filter` INT(10) UNSIGNED NOT NULL,\n            `id_shop` INT(11) UNSIGNED NOT NULL,\n            PRIMARY KEY (`id_layered_filter`, `id_shop`),\n            KEY `id_shop` (`id_shop`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * Build layered cache\n     *\n     * @param array $productsIds\n     * @param array $categoriesIds\n     * @param bool $rebuildLayeredCategories\n     */\n    public function rebuildLayeredCache($productsIds = [], $categoriesIds = [], $rebuildLayeredCategories = true)\n    {\n        @set_time_limit(0);\n\n        $filterData = ['categories' => []];\n\n        /* Set memory limit to 128M only if current is lower */\n        $memoryLimit = Tools::getMemoryLimit();\n        if ($memoryLimit != -1 && $memoryLimit < 128 * 1024 * 1024) {\n            @ini_set('memory_limit', '128M');\n        }\n\n        $db = $this->getDatabase();\n        $nCategories = [];\n        $doneCategories = [];\n\n        $alias = 'product_shop';\n        $joinProduct = Shop::addSqlAssociation('product', 'p');\n        $joinProductAttribute = Shop::addSqlAssociation('product_attribute', 'pa');\n\n        $attributeGroups = $this->query(\n            'SELECT a.id_attribute, a.id_attribute_group\n            FROM ' . _DB_PREFIX_ . 'attribute a\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute_combination pac ON (pac.id_attribute = a.id_attribute)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute pa ON (pa.id_product_attribute = pac.id_product_attribute)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product p ON (p.id_product = pa.id_product)\n            ' . $joinProduct . $joinProductAttribute . '\n            LEFT JOIN ' . _DB_PREFIX_ . 'category_product cp ON (cp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'category c ON (c.id_category = cp.id_category)\n            WHERE c.active = 1' .\n            (count($categoriesIds) ? ' AND cp.id_category IN (' . implode(',', array_map('intval', $categoriesIds)) . ')' : '') . '\n            AND ' . $alias . '.active = 1 AND ' . $alias . '.`visibility` IN (\"both\", \"catalog\")\n            ' . (count($productsIds) ? 'AND p.id_product IN (' . implode(',', array_map('intval', $productsIds)) . ')' : '')\n        );\n\n        $attributeGroupsById = [];\n        while ($row = $db->nextRow($attributeGroups)) {\n            $attributeGroupsById[(int) $row['id_attribute']] = (int) $row['id_attribute_group'];\n        }\n\n        $features = $this->query(\n            'SELECT fv.id_feature_value, fv.id_feature\n            FROM ' . _DB_PREFIX_ . 'feature_value fv\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_product fp ON (fp.id_feature_value = fv.id_feature_value)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product p ON (p.id_product = fp.id_product)\n            ' . $joinProduct . '\n            LEFT JOIN ' . _DB_PREFIX_ . 'category_product cp ON (cp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'category c ON (c.id_category = cp.id_category)\n            WHERE (fv.custom IS NULL OR fv.custom = 0) AND c.active = 1' . (count($categoriesIds) ? ' AND cp.id_category IN (' . implode(',', array_map('intval', $categoriesIds)) . ')' : '') . '\n            AND ' . $alias . '.active = 1 AND ' . $alias . '.`visibility` IN (\"both\", \"catalog\") ' .\n            (count($productsIds) ? 'AND p.id_product IN (' . implode(',', array_map('intval', $productsIds)) . ')' : '')\n        );\n\n        $featuresById = [];\n        while ($row = $db->nextRow($features)) {\n            $featuresById[(int) $row['id_feature_value']] = (int) $row['id_feature'];\n        }\n\n        $result = $this->query(\n            'SELECT p.id_product,\n            GROUP_CONCAT(DISTINCT fv.id_feature_value) features,\n            GROUP_CONCAT(DISTINCT cp.id_category) categories,\n            GROUP_CONCAT(DISTINCT pac.id_attribute) attributes\n            FROM ' . _DB_PREFIX_ . 'product p\n            LEFT JOIN ' . _DB_PREFIX_ . 'category_product cp ON (cp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'category c ON (c.id_category = cp.id_category)\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_product fp ON (fp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_value fv ON (fv.id_feature_value = fp.id_feature_value)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute pa ON (pa.id_product = p.id_product)\n            ' . $joinProduct . $joinProductAttribute . '\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute_combination pac ON (pac.id_product_attribute = pa.id_product_attribute)\n            WHERE c.active = 1' . (count($categoriesIds) ? ' AND cp.id_category IN (' . implode(',', array_map('intval', $categoriesIds)) . ')' : '') . '\n            AND ' . $alias . '.active = 1 AND ' . $alias . '.`visibility` IN (\"both\", \"catalog\")\n            ' . (count($productsIds) ? 'AND p.id_product IN (' . implode(',', array_map('intval', $productsIds)) . ')' : '') .\n            ' AND (fv.custom IS NULL OR fv.custom = 0)\n            GROUP BY p.id_product'\n        );\n\n        $shopList = Shop::getShops(false, null, true);\n\n        $toInsert = false;\n        while ($product = $db->nextRow($result)) {\n            $a = $c = $f = [];\n            if (!empty($product['attributes'])) {\n                $a = array_flip(explode(',', $product['attributes']));\n            }\n\n            if (!empty($product['categories'])) {\n                $c = array_flip(explode(',', $product['categories']));\n            }\n\n            if (!empty($product['features'])) {\n                $f = array_flip(explode(',', $product['features']));\n            }\n\n            $filterData['shop_list'] = $shopList;\n\n            foreach ($c as $idCategory => $category) {\n                if (!in_array($idCategory, $filterData['categories'])) {\n                    $filterData['categories'][] = $idCategory;\n                }\n\n                if (!isset($nCategories[(int) $idCategory])) {\n                    $nCategories[(int) $idCategory] = 1;\n                }\n                if (!isset($doneCategories[(int) $idCategory]['cat'])) {\n                    $filterData['layered_selection_subcategories'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['cat'] = true;\n                    $toInsert = true;\n                }\n                if (is_array($attributeGroupsById) && count($attributeGroupsById) > 0) {\n                    foreach ($a as $kAttribute => $attribute) {\n                        if (!isset($doneCategories[(int) $idCategory]['a' . (int) $attributeGroupsById[(int) $kAttribute]])) {\n                            $filterData['layered_selection_ag_' . (int) $attributeGroupsById[(int) $kAttribute]] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                            $doneCategories[(int) $idCategory]['a' . (int) $attributeGroupsById[(int) $kAttribute]] = true;\n                            $toInsert = true;\n                        }\n                    }\n                }\n                if (is_array($attributeGroupsById) && count($attributeGroupsById) > 0) {\n                    foreach ($f as $kFeature => $feature) {\n                        if (!isset($doneCategories[(int) $idCategory]['f' . (int) $featuresById[(int) $kFeature]])) {\n                            $filterData['layered_selection_feat_' . (int) $featuresById[(int) $kFeature]] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                            $doneCategories[(int) $idCategory]['f' . (int) $featuresById[(int) $kFeature]] = true;\n                            $toInsert = true;\n                        }\n                    }\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['q'])) {\n                    $filterData['layered_selection_stock'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['q'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['m'])) {\n                    $filterData['layered_selection_manufacturer'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['m'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['c'])) {\n                    $filterData['layered_selection_condition'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['c'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['w'])) {\n                    $filterData['layered_selection_weight_slider'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['w'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['p'])) {\n                    $filterData['layered_selection_price_slider'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['p'] = true;\n                    $toInsert = true;\n                }\n            }\n        }\n\n        if ($toInsert) {\n            $this->getDatabase()->execute('INSERT INTO ' . _DB_PREFIX_ . 'layered_filter(name, filters, n_categories, date_add)\nVALUES (\\'' . sprintf($this->trans('My template %s', [], 'Modules.Facetedsearch.Admin'), date('Y-m-d')) . '\\', \\'' . pSQL(serialize($filterData)) . '\\', ' . count($filterData['categories']) . ', NOW())');\n\n            $last_id = $this->getDatabase()->Insert_ID();\n            $this->getDatabase()->execute('DELETE FROM ' . _DB_PREFIX_ . 'layered_filter_shop WHERE `id_layered_filter` = ' . $last_id);\n            foreach ($shopList as $idShop) {\n                $this->getDatabase()->execute('INSERT INTO ' . _DB_PREFIX_ . 'layered_filter_shop (`id_layered_filter`, `id_shop`)\nVALUES(' . $last_id . ', ' . (int) $idShop . ')');\n            }\n\n            if ($rebuildLayeredCategories) {\n                $this->buildLayeredCategories();\n            }\n        }\n    }\n\n    /**\n     * Build layered categories\n     */\n    public function buildLayeredCategories()\n    {\n        // Get all filter template\n        $res = $this->getDatabase()->executeS('SELECT * FROM ' . _DB_PREFIX_ . 'layered_filter ORDER BY date_add DESC');\n        $categories = [];\n        // Clear cache\n        $this->invalidateLayeredFilterBlockCache();\n        // Remove all from layered_category\n        $this->getDatabase()->execute('TRUNCATE ' . _DB_PREFIX_ . 'layered_category');\n\n        if (!count($res)) { // No filters templates defined, nothing else to do\n            return true;\n        }\n\n        $sqlInsertPrefix = 'INSERT INTO ' . _DB_PREFIX_ . 'layered_category (id_category, id_shop, id_value, type, position, filter_show_limit, filter_type) VALUES ';\n        $sqlInsert = '';\n        $nbSqlValuesToInsert = 0;\n\n        foreach ($res as $filterTemplate) {\n            $data = Tools::unSerialize($filterTemplate['filters']);\n            foreach ($data['shop_list'] as $idShop) {\n                if (!isset($categories[$idShop])) {\n                    $categories[$idShop] = [];\n                }\n\n                foreach ($data['categories'] as $idCategory) {\n                    $n = 0;\n                    if (in_array($idCategory, $categories[$idShop])) {\n                        continue;\n                    }\n                    // Last definition, erase previous categories defined\n\n                    $categories[$idShop][] = $idCategory;\n\n                    foreach ($data as $key => $value) {\n                        if (substr($key, 0, 17) == 'layered_selection') {\n                            $type = $value['filter_type'];\n                            $limit = $value['filter_show_limit'];\n                            ++$n;\n\n                            if ($key == 'layered_selection_stock') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'quantity\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_subcategories') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'category\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_condition') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'condition\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_weight_slider') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'weight\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_price_slider') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'price\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_manufacturer') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'manufacturer\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif (substr($key, 0, 21) == 'layered_selection_ag_') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', ' . (int) str_replace('layered_selection_ag_', '', $key) . ',\n\\'id_attribute_group\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif (substr($key, 0, 23) == 'layered_selection_feat_') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', ' . (int) str_replace('layered_selection_feat_', '', $key) . ',\n\\'id_feature\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            }\n\n                            ++$nbSqlValuesToInsert;\n                            if ($nbSqlValuesToInsert >= 100) {\n                                $this->getDatabase()->execute($sqlInsertPrefix . rtrim($sqlInsert, ','));\n                                $sqlInsert = '';\n                                $nbSqlValuesToInsert = 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($nbSqlValuesToInsert) {\n            $this->getDatabase()->execute($sqlInsertPrefix . rtrim($sqlInsert, ','));\n        }\n    }\n\n    /**\n     * Render template\n     *\n     * @param string $template\n     * @param array $params\n     *\n     * @return string\n     */\n    public function render($template, array $params = [])\n    {\n        $this->context->smarty->assign($params);\n\n        return $this->display(__FILE__, $template);\n    }\n\n    /**\n     * Check if link rewrite are availables and corrects\n     *\n     * @param array $params\n     */\n    public function checkLinksRewrite($params)\n    {\n        foreach (Language::getLanguages(false) as $language) {\n            $idLang = $language['id_lang'];\n            $urlNameLang = Tools::getValue('url_name_' . $idLang);\n            if ($urlNameLang && Tools::link_rewrite($urlNameLang) != strtolower($urlNameLang)) {\n                $params['errors'][] = Tools::displayError(\n                    $this->trans(\n                        '\"%s\" is not a valid url',\n                        [$urlNameLang],\n                        'Modules.Facetedsearch.Admin'\n                    )\n                );\n            }\n        }\n    }\n\n    /**\n     * Dispatch hooks\n     *\n     * @param string $methodName\n     * @param array $arguments\n     */\n    public function __call($methodName, array $arguments)\n    {\n        return $this->getHookDispatcher()->dispatch(\n            $methodName,\n            !empty($arguments[0]) ? $arguments[0] : []\n        );\n    }\n\n    /**\n     * Invalid filter block cache\n     */\n    public function invalidateLayeredFilterBlockCache()\n    {\n        return $this->getDatabase()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'layered_filter_block');\n    }\n\n    /**\n     * Install price indexes table\n     */\n    public function rebuildPriceIndexTable()\n    {\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_price_index`');\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_price_index` (\n            `id_product` INT  NOT NULL,\n            `id_currency` INT NOT NULL,\n            `id_shop` INT NOT NULL,\n            `price_min` DECIMAL(11, 5) NOT NULL,\n            `price_max` DECIMAL(11, 5) NOT NULL,\n            `id_country` INT NOT NULL,\n            PRIMARY KEY (`id_product`, `id_currency`, `id_shop`, `id_country`),\n            INDEX `id_currency` (`id_currency`),\n            INDEX `price_min` (`price_min`),\n            INDEX `price_max` (`price_max`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * create table product attribute.\n     */\n    private function installProductAttributeTable()\n    {\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_product_attribute`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_product_attribute` (\n            `id_attribute` int(10) unsigned NOT NULL,\n            `id_product` int(10) unsigned NOT NULL,\n            `id_attribute_group` int(10) unsigned NOT NULL DEFAULT \"0\",\n            `id_shop` int(10) unsigned NOT NULL DEFAULT \"1\",\n            PRIMARY KEY (`id_attribute`, `id_product`, `id_shop`),\n            UNIQUE KEY `id_attribute_group` (`id_attribute_group`,`id_attribute`,`id_product`, `id_shop`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * Install indexable attribute table\n     */\n    private function installIndexableAttributeTable()\n    {\n        // Attributes Groups\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_attribute_group`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_attribute_group` (\n            `id_attribute_group` INT NOT NULL,\n            `indexable` BOOL NOT NULL DEFAULT 0,\n            PRIMARY KEY (`id_attribute_group`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n        $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_attribute_group`\n            SELECT id_attribute_group, 1 FROM `' . _DB_PREFIX_ . 'attribute_group`'\n        );\n\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_attribute_group_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_attribute_group_lang_value` (\n            `id_attribute_group` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128),\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_attribute_group`, `id_lang`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        // Attributes\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_attribute_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_attribute_lang_value` (\n            `id_attribute` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128),\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_attribute`, `id_lang`)\n           )  ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        // Features\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_feature`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_feature` (\n            `id_feature` INT NOT NULL,\n            `indexable` BOOL NOT NULL DEFAULT 0,\n            PRIMARY KEY (`id_feature`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_feature`\n            SELECT id_feature, 1 FROM `' . _DB_PREFIX_ . 'feature`'\n        );\n\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_feature_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_feature_lang_value` (\n            `id_feature` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128) NOT NULL,\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_feature`, `id_lang`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        // Features values\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_feature_value_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_feature_value_lang_value` (\n            `id_feature_value` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128),\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_feature_value`, `id_lang`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * Index prices\n     *\n     * @param $cursor int last indexed id_product\n     * @param bool $full\n     * @param bool $ajax\n     * @param bool $smart\n     *\n     * @return int\n     */\n    private function indexPrices($cursor = 0, $full = false, $ajax = false, $smart = false)\n    {\n        if ($full) {\n            $nbProducts = (int) $this->getDatabase()->getValue(\n                'SELECT count(DISTINCT p.`id_product`) ' .\n                'FROM ' . _DB_PREFIX_ . 'product p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ' .\n                'ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\"))'\n            );\n        } else {\n            $nbProducts = (int) $this->getDatabase()->getValue(\n                'SELECT COUNT(DISTINCT p.`id_product`) ' .\n                'FROM `' . _DB_PREFIX_ . 'product` p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\")) ' .\n                'LEFT JOIN  `' . _DB_PREFIX_ . 'layered_price_index` psi ON (psi.id_product = p.id_product) ' .\n                'WHERE psi.id_product IS NULL'\n            );\n        }\n\n        $maxExecutiontime = @ini_get('max_execution_time');\n        if ($maxExecutiontime > 5 || $maxExecutiontime <= 0) {\n            $maxExecutiontime = 5;\n        }\n\n        $startTime = microtime(true);\n\n        $indexedProducts = 0;\n        $length = 100;\n        do {\n            $lastCursor = $cursor;\n            $cursor = (int) $this->indexPricesUnbreakable((int) $cursor, $full, $smart, $length);\n            if ($cursor == 0) {\n                $lastCursor = $cursor;\n                break;\n            }\n            $time_elapsed = microtime(true) - $startTime;\n            $indexedProducts += $length;\n        } while (\n            $cursor < $nbProducts\n            && (Tools::getMemoryLimit() == -1 || Tools::getMemoryLimit() > memory_get_peak_usage())\n            && $time_elapsed < $maxExecutiontime\n        );\n\n        if (($nbProducts > 0 && !$full || $cursor != $lastCursor && $full) && !$ajax) {\n            $token = substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10);\n            $domain = Tools::usingSecureMode()\n                    ? Tools::getShopDomainSsl(true)\n                    : Tools::getShopDomain(true);\n\n            $this->indexPrices((int) $cursor, (int) $full);\n\n            return $cursor;\n        }\n\n        if ($ajax && $nbProducts > 0 && $cursor != $lastCursor && $full) {\n            return json_encode([\n                'cursor' => $cursor,\n                'count' => $indexedProducts,\n            ]);\n        }\n\n        if ($ajax && $nbProducts > 0 && !$full) {\n            return json_encode([\n                'cursor' => $cursor,\n                'count' => $nbProducts,\n            ]);\n        }\n\n        Configuration::updateGlobalValue('PS_LAYERED_INDEXED', 1);\n\n        if ($ajax) {\n            return json_encode([\n                'result' => 'ok',\n            ]);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Index prices unbreakable\n     *\n     * @param $cursor int last indexed id_product\n     * @param bool $full All products, otherwise only indexed products\n     * @param bool $smart Delete before reindex\n     * @param int $length nb of products to index\n     *\n     * @return int\n     */\n    private function indexPricesUnbreakable($cursor, $full = false, $smart = false, $length = 100)\n    {\n        if (null === $cursor) {\n            $cursor = 0;\n        }\n\n        if ($full) {\n            $query = 'SELECT p.`id_product` ' .\n                'FROM `' . _DB_PREFIX_ . 'product` p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ' .\n                'ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\")) ' .\n                'WHERE p.id_product > ' . (int) $cursor . ' ' .\n                'GROUP BY p.`id_product` ' .\n                'ORDER BY p.`id_product` LIMIT 0,' . (int) $length;\n        } else {\n            $query = 'SELECT p.`id_product` ' .\n                'FROM `' . _DB_PREFIX_ . 'product` p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ' .\n                'ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\")) ' .\n                'LEFT JOIN  `' . _DB_PREFIX_ . 'layered_price_index` psi ON (psi.id_product = p.id_product) ' .\n                'WHERE psi.id_product IS NULL ' .\n                'GROUP BY p.`id_product` ' .\n                'ORDER BY p.`id_product` LIMIT 0,' . (int) $length;\n        }\n\n        $lastIdProduct = 0;\n        foreach ($this->getDatabase()->executeS($query) as $product) {\n            $this->indexProductPrices((int) $product['id_product'], ($smart && $full));\n            $lastIdProduct = $product['id_product'];\n        }\n\n        return (int) $lastIdProduct;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function renderWidget($hookName, array $configuration)\n    {\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n\n        return $this->fetch(\n            'module:ps_facetedsearch/ps_facetedsearch.tpl'\n        );\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getWidgetVariables($hookName, array $configuration)\n    {\n        return [];\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop.\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\n$autoloadPath = __DIR__ . '/vendor/autoload.php';\nif (file_exists($autoloadPath)) {\n    require_once $autoloadPath;\n}\n\nuse PrestaShop\\Module\\FacetedSearch\\Filters\\Converter;\nuse PrestaShop\\Module\\FacetedSearch\\HookDispatcher;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass Ps_Facetedsearch extends Module implements WidgetInterface\n{\n    /**\n     * @var string Name of the module running on PS 1.6.x. Used for data migration.\n     */\n    const PS_16_EQUIVALENT_MODULE = 'blocklayered';\n\n    /**\n     * Lock indexation if too many products\n     *\n     * @var int\n     */\n    const LOCK_TOO_MANY_PRODUCTS = 5000;\n\n    /**\n     * Lock template filter creation if too many products\n     *\n     * @var int\n     */\n    const LOCK_TEMPLATE_CREATION = 20000;\n\n    /**\n     * US iso code, used to prevent taxes usage while computing prices\n     *\n     * @var array\n     */\n    const ISO_CODE_TAX_FREE = [\n        'US',\n    ];\n\n    /**\n     * Number of digits for MySQL DECIMAL\n     *\n     * @var int\n     */\n    const DECIMAL_DIGITS = 5;\n\n    /**\n     * @var bool\n     */\n    private $ajax;\n\n    /**\n     * @var int\n     */\n    private $psLayeredFullTree;\n\n    /**\n     * @var Db\n     */\n    private $database;\n\n    /**\n     * @var HookDispatcher\n     */\n    private $hookDispatcher;\n\n    public function __construct()\n    {\n        $this->name = 'ps_facetedsearch';\n        $this->tab = 'front_office_features';\n        $this->version = '3.4.1';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->bootstrap = true;\n        $this->ajax = (bool) Tools::getValue('ajax');\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Faceted search', [], 'Modules.Facetedsearch.Admin');\n        $this->description = $this->trans('Displays a block allowing multiple filters.', [], 'Modules.Facetedsearch.Admin');\n        $this->psLayeredFullTree = Configuration::get('PS_LAYERED_FULL_TREE');\n        $this->ps_versions_compliancy = ['min' => '1.7.1.0', 'max' => _PS_VERSION_];\n\n        $this->hookDispatcher = new HookDispatcher($this);\n    }\n\n    /**\n     * Check if method is an ajax request.\n     * This check is an old behavior and only check for _GET value.\n     *\n     * @return bool\n     */\n    public function isAjax()\n    {\n        return (bool) $this->ajax;\n    }\n\n    /**\n     * Return the current database instance\n     *\n     * @return Db\n     */\n    public function getDatabase()\n    {\n        if ($this->database === null) {\n            $this->database = Db::getInstance();\n        }\n\n        return $this->database;\n    }\n\n    /**\n     * Return current context\n     *\n     * @return Context\n     */\n    public function getContext()\n    {\n        return $this->context;\n    }\n\n    protected function getDefaultFilters()\n    {\n        return [\n            'layered_selection_subcategories' => [\n                'label' => 'Sub-categories filter',\n            ],\n            'layered_selection_stock' => [\n                'label' => 'Product stock filter',\n            ],\n            'layered_selection_condition' => [\n                'label' => 'Product condition filter',\n            ],\n            'layered_selection_manufacturer' => [\n                'label' => 'Product brand filter',\n            ],\n            'layered_selection_weight_slider' => [\n                'label' => 'Product weight filter (slider)',\n                'slider' => true,\n            ],\n            'layered_selection_price_slider' => [\n                'label' => 'Product price filter (slider)',\n                'slider' => true,\n            ],\n        ];\n    }\n\n    public function install()\n    {\n        $installed = parent::install()\n                   && $this->registerHook($this->getHookDispatcher()->getAvailableHooks());\n\n        // Installation failed (or hook registration) => uninstall the module\n        if (!$installed) {\n            $this->uninstall();\n\n            return false;\n        }\n\n        if ($this->uninstallPrestaShop16Module()) {\n            $this->rebuildLayeredStructure();\n            $this->buildLayeredCategories();\n\n            $this->rebuildPriceIndexTable();\n\n            $this->getDatabase()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'layered_filter CHANGE `filters` `filters` LONGTEXT NULL');\n            $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'friendly_url');\n        } else {\n            Configuration::updateValue('PS_LAYERED_SHOW_QTIES', 1);\n            Configuration::updateValue('PS_LAYERED_FULL_TREE', 1);\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_USETAX', 1);\n            Configuration::updateValue('PS_LAYERED_FILTER_CATEGORY_DEPTH', 1);\n            Configuration::updateValue('PS_ATTRIBUTE_ANCHOR_SEPARATOR', '-');\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_ROUNDING', 1);\n            Configuration::updateValue('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST', 0);\n            Configuration::updateValue('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY', 0);\n\n            $this->psLayeredFullTree = 1;\n\n            $this->rebuildLayeredStructure();\n            $this->buildLayeredCategories();\n\n            $productsCount = $this->getDatabase()->getValue('SELECT COUNT(*) FROM `' . _DB_PREFIX_ . 'product`');\n\n            if ($productsCount < static::LOCK_TEMPLATE_CREATION) {\n                $this->rebuildLayeredCache();\n            }\n\n            $this->rebuildPriceIndexTable();\n            $this->installIndexableAttributeTable();\n            $this->installProductAttributeTable();\n\n            if ($productsCount < static::LOCK_TOO_MANY_PRODUCTS) {\n                $this->fullPricesIndexProcess();\n                $this->indexAttributes();\n            }\n        }\n\n        return true;\n    }\n\n    public function uninstall()\n    {\n        /* Delete all configurations */\n        Configuration::deleteByName('PS_LAYERED_SHOW_QTIES');\n        Configuration::deleteByName('PS_LAYERED_FULL_TREE');\n        Configuration::deleteByName('PS_LAYERED_INDEXED');\n        Configuration::deleteByName('PS_LAYERED_FILTER_PRICE_USETAX');\n        Configuration::deleteByName('PS_LAYERED_FILTER_CATEGORY_DEPTH');\n        Configuration::deleteByName('PS_LAYERED_FILTER_PRICE_ROUNDING');\n        Configuration::deleteByName('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST');\n        Configuration::deleteByName('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY');\n\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_category');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_filter');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_filter_block');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_filter_shop');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_attribute_group');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_attribute_group_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_attribute_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_feature');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_feature_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_indexable_feature_value_lang_value');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_price_index');\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_product_attribute');\n\n        return parent::uninstall();\n    }\n\n    /**\n     * Migrate data from 1.6 equivalent module (if applicable), then uninstall\n     */\n    private function uninstallPrestaShop16Module()\n    {\n        if (!Module::isInstalled(self::PS_16_EQUIVALENT_MODULE)) {\n            return false;\n        }\n        $oldModule = Module::getInstanceByName(self::PS_16_EQUIVALENT_MODULE);\n        if ($oldModule) {\n            // This closure calls the parent class to prevent data to be erased\n            // It allows the new module to be configured without migration\n            $parentUninstallClosure = function () {\n                return parent::uninstall();\n            };\n            $parentUninstallClosure = $parentUninstallClosure->bindTo($oldModule, get_class($oldModule));\n            $parentUninstallClosure();\n        }\n\n        return true;\n    }\n\n    /**\n     * @return HookDispatcher\n     */\n    public function getHookDispatcher()\n    {\n        return $this->hookDispatcher;\n    }\n\n    /*\n     * Generate data product attributes\n     *\n     * @param int $idProduct\n     *\n     * @return boolean\n     */\n    public function indexAttributes($idProduct = null)\n    {\n        if (null === $idProduct) {\n            $this->getDatabase()->execute('TRUNCATE ' . _DB_PREFIX_ . 'layered_product_attribute');\n        } else {\n            $this->getDatabase()->execute(\n                'DELETE FROM ' . _DB_PREFIX_ . 'layered_product_attribute\n                WHERE id_product = ' . (int) $idProduct\n            );\n        }\n\n        return $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_product_attribute` (`id_attribute`, `id_product`, `id_attribute_group`, `id_shop`)\n            SELECT pac.id_attribute, pa.id_product, ag.id_attribute_group, product_attribute_shop.`id_shop`\n            FROM ' . _DB_PREFIX_ . 'product_attribute pa' .\n            Shop::addSqlAssociation('product_attribute', 'pa') . '\n            INNER JOIN ' . _DB_PREFIX_ . 'product_attribute_combination pac ON pac.id_product_attribute = pa.id_product_attribute\n            INNER JOIN ' . _DB_PREFIX_ . 'attribute a ON (a.id_attribute = pac.id_attribute)\n            INNER JOIN ' . _DB_PREFIX_ . 'attribute_group ag ON ag.id_attribute_group = a.id_attribute_group\n            ' . ($idProduct === null ? '' : 'AND pa.id_product = ' . (int) $idProduct) . '\n            GROUP BY a.id_attribute, pa.id_product , product_attribute_shop.`id_shop`'\n        );\n    }\n\n    /*\n     * Generate data for product features\n     *\n     * @return boolean\n     */\n    public function indexFeatures()\n    {\n        return $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_feature` ' .\n            'SELECT id_feature, 1 FROM `' . _DB_PREFIX_ . 'feature` ' .\n            'WHERE id_feature NOT IN (SELECT id_feature FROM ' .\n            '`' . _DB_PREFIX_ . 'layered_indexable_feature`)'\n        );\n    }\n\n    /*\n     * Generate data for product attribute group\n     *\n     * @return boolean\n     */\n    public function indexAttributeGroup()\n    {\n        return $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_attribute_group` ' .\n            'SELECT id_attribute_group, 1 FROM `' . _DB_PREFIX_ . 'attribute_group` ' .\n            'WHERE id_attribute_group NOT IN (SELECT id_attribute_group FROM ' .\n            '`' . _DB_PREFIX_ . 'layered_indexable_attribute_group`)'\n        );\n    }\n\n    /**\n     * Full prices index process\n     *\n     * @param int $cursor in order to restart indexing from the last state\n     * @param bool $ajax\n     */\n    public function fullPricesIndexProcess($cursor = 0, $ajax = false, $smart = false)\n    {\n        if ($cursor == 0 && !$smart) {\n            $this->rebuildPriceIndexTable();\n        }\n\n        return $this->indexPrices($cursor, true, $ajax, $smart);\n    }\n\n    /**\n     * Prices index process\n     *\n     * @param int $cursor in order to restart indexing from the last state\n     * @param bool $ajax\n     */\n    public function pricesIndexProcess($cursor = 0, $ajax = false)\n    {\n        return $this->indexPrices($cursor, false, $ajax);\n    }\n\n    /**\n     * Index product prices\n     *\n     * @param int $idProduct\n     * @param bool $smart Delete before reindex\n     */\n    public function indexProductPrices($idProduct, $smart = true)\n    {\n        static $groups = null;\n\n        if ($groups === null) {\n            $groups = $this->getDatabase()->executeS('SELECT id_group FROM `' . _DB_PREFIX_ . 'group_reduction`');\n            if (!$groups) {\n                $groups = [];\n            }\n        }\n\n        $shopList = Shop::getShops(false, null, true);\n\n        foreach ($shopList as $idShop) {\n            $currencyList = Currency::getCurrencies(false, 1, new Shop($idShop));\n\n            $minPrice = [];\n            $maxPrice = [];\n\n            if ($smart) {\n                $this->getDatabase()->execute('DELETE FROM `' . _DB_PREFIX_ . 'layered_price_index` WHERE `id_product` = ' . (int) $idProduct . ' AND `id_shop` = ' . (int) $idShop);\n            }\n\n            $taxRatesByCountry = $this->getDatabase()->executeS(\n                'SELECT t.rate rate, tr.id_country, c.iso_code ' .\n                'FROM `' . _DB_PREFIX_ . 'product_shop` p ' .\n                'LEFT JOIN `' . _DB_PREFIX_ . 'tax_rules_group` trg ON  ' .\n                '(trg.id_tax_rules_group = p.id_tax_rules_group AND p.id_shop = ' . (int) $idShop . ') ' .\n                'LEFT JOIN `' . _DB_PREFIX_ . 'tax_rule` tr ON (tr.id_tax_rules_group = trg.id_tax_rules_group) ' .\n                'LEFT JOIN `' . _DB_PREFIX_ . 'tax` t ON (t.id_tax = tr.id_tax AND t.active = 1) ' .\n                'JOIN `' . _DB_PREFIX_ . 'country` c ON (tr.id_country=c.id_country AND c.active = 1) ' .\n                'WHERE id_product = ' . (int) $idProduct . ' ' .\n                'GROUP BY id_product, tr.id_country'\n            );\n\n            if (empty($taxRatesByCountry) || !Configuration::get('PS_LAYERED_FILTER_PRICE_USETAX')) {\n                $idCountry = (int) Configuration::get('PS_COUNTRY_DEFAULT', null, null, $idShop);\n                $isoCode = Country::getIsoById($idCountry);\n                $taxRatesByCountry = [['rate' => 0, 'id_country' => $idCountry, 'iso_code' => $isoCode]];\n            }\n\n            $productMinPrices = $this->getDatabase()->executeS(\n                'SELECT id_shop, id_currency, id_country, id_group, from_quantity\n                FROM `' . _DB_PREFIX_ . 'specific_price`\n                WHERE id_product = ' . (int) $idProduct . ' AND id_shop IN (0,' . (int) $idShop . ')'\n            );\n\n            $countries = Country::getCountries($this->getContext()->language->id, true, false, false);\n            foreach ($countries as $country) {\n                $idCountry = $country['id_country'];\n\n                // Get price by currency & country, without reduction!\n                foreach ($currencyList as $currency) {\n                    if (!empty($productMinPrices)) {\n                        $minPrice[$idCountry][$currency['id_currency']] = null;\n                        $maxPrice[$idCountry][$currency['id_currency']] = null;\n                        continue;\n                    }\n\n                    $price = Product::priceCalculation(\n                        $idShop,\n                        (int) $idProduct,\n                        null,\n                        $idCountry,\n                        null,\n                        null,\n                        $currency['id_currency'],\n                        null,\n                        null,\n                        false,\n                        6, // Decimals\n                        false,\n                        false,\n                        true,\n                        $specificPriceOutput,\n                        true\n                    );\n\n                    $minPrice[$idCountry][$currency['id_currency']] = $price;\n                    $maxPrice[$idCountry][$currency['id_currency']] = $price;\n                }\n\n                foreach ($productMinPrices as $specificPrice) {\n                    foreach ($currencyList as $currency) {\n                        if ($specificPrice['id_currency'] &&\n                            $specificPrice['id_currency'] != $currency['id_currency']\n                        ) {\n                            continue;\n                        }\n\n                        $price = Product::priceCalculation(\n                            $idShop,\n                            (int) $idProduct,\n                            null,\n                            $idCountry,\n                            null,\n                            null,\n                            $currency['id_currency'],\n                            (($specificPrice['id_group'] == 0) ? null : $specificPrice['id_group']),\n                            $specificPrice['from_quantity'],\n                            false,\n                            6,\n                            false,\n                            true,\n                            true,\n                            $specificPriceOutput,\n                            true\n                        );\n\n                        if ($price > $maxPrice[$idCountry][$currency['id_currency']]) {\n                            $maxPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n\n                        if ($price == 0) {\n                            continue;\n                        }\n\n                        if (null === $minPrice[$idCountry][$currency['id_currency']] || $price < $minPrice[$idCountry][$currency['id_currency']]) {\n                            $minPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n                    }\n                }\n\n                foreach ($groups as $group) {\n                    foreach ($currencyList as $currency) {\n                        $price = Product::priceCalculation(\n                            $idShop,\n                            (int) $idProduct,\n                            (int) $idCountry,\n                            null,\n                            null,\n                            null,\n                            (int) $currency['id_currency'],\n                            (int) $group['id_group'],\n                            null,\n                            false,\n                            6,\n                            false,\n                            true,\n                            true,\n                            $specificPriceOutput,\n                            true\n                        );\n\n                        if (!isset($maxPrice[$idCountry][$currency['id_currency']])) {\n                            $maxPrice[$idCountry][$currency['id_currency']] = 0;\n                        }\n\n                        if (!isset($minPrice[$idCountry][$currency['id_currency']])) {\n                            $minPrice[$idCountry][$currency['id_currency']] = null;\n                        }\n\n                        if ($price == 0) {\n                            continue;\n                        }\n\n                        if (null === $minPrice[$idCountry][$currency['id_currency']] || $price < $minPrice[$idCountry][$currency['id_currency']]) {\n                            $minPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n\n                        if ($price > $maxPrice[$idCountry][$currency['id_currency']]) {\n                            $maxPrice[$idCountry][$currency['id_currency']] = $price;\n                        }\n                    }\n                }\n            }\n\n            $values = [];\n            foreach ($taxRatesByCountry as $taxRateByCountry) {\n                $taxRate = $taxRateByCountry['rate'];\n                $idCountry = $taxRateByCountry['id_country'];\n                foreach ($currencyList as $currency) {\n                    $minPriceValue = array_key_exists($idCountry, $minPrice) ? $minPrice[$idCountry][$currency['id_currency']] : 0;\n                    $maxPriceValue = array_key_exists($idCountry, $maxPrice) ? $maxPrice[$idCountry][$currency['id_currency']] : 0;\n                    if (!in_array($taxRateByCountry['iso_code'], self::ISO_CODE_TAX_FREE)) {\n                        $minPriceValue = Tools::ps_round($minPriceValue * (100 + $taxRate) / 100, self::DECIMAL_DIGITS);\n                        $maxPriceValue = Tools::ps_round($maxPriceValue * (100 + $taxRate) / 100, self::DECIMAL_DIGITS);\n                    }\n\n                    $values[] = '(' . (int) $idProduct . ',\n                        ' . (int) $currency['id_currency'] . ',\n                        ' . $idShop . ',\n                        ' . $minPriceValue . ',\n                        ' . $maxPriceValue . ',\n                        ' . (int) $idCountry . ')';\n                }\n            }\n\n            if (!empty($values)) {\n                $this->getDatabase()->execute(\n                    'INSERT INTO `' . _DB_PREFIX_ . 'layered_price_index` (id_product, id_currency, id_shop, price_min, price_max, id_country)\n                     VALUES ' . implode(',', $values) . '\n                     ON DUPLICATE KEY UPDATE id_product = id_product' // Avoid duplicate keys\n                );\n            }\n        }\n    }\n\n    /**\n     * Get page content\n     */\n    public function getContent()\n    {\n        global $cookie;\n        $message = '';\n\n        if (Tools::isSubmit('SubmitFilter')) {\n            if (!Tools::getValue('layered_tpl_name')) {\n                $message = $this->displayError($this->trans('Filter template name required (cannot be empty)', [], 'Modules.Facetedsearch.Admin'));\n            } elseif (!Tools::getValue('categoryBox')) {\n                $message = $this->displayError($this->trans('You must select at least one category.', [], 'Modules.Facetedsearch.Admin'));\n            } else {\n                // Get or generate id\n                $idLayeredFilter = (int) Tools::getValue('id_layered_filter');\n                if (Tools::getValue('scope')) {\n                    $this->getDatabase()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'layered_filter');\n                    $categories = $this->getDatabase()->executeS(\n                        'SELECT id_category FROM ' . _DB_PREFIX_ . 'category'\n                    );\n\n                    foreach ($categories as $category) {\n                        $_POST['categoryBox'][] = (int) $category['id_category'];\n                    }\n                }\n\n                // Associate Shops\n                if (isset($_POST['checkBoxShopAsso_layered_filter'])) {\n                    $shopList = [];\n                    foreach ($_POST['checkBoxShopAsso_layered_filter'] as $idShop => $row) {\n                        $assos[] = ['id_shop' => (int) $idShop];\n                        $shopList[] = (int) $idShop;\n                    }\n                } else {\n                    $shopList = [(int) $this->getContext()->shop->id];\n                }\n\n                if (!empty($_POST['categoryBox']) && is_array($_POST['categoryBox'])) {\n                    /* Clean categoryBox before use */\n                    $_POST['categoryBox'] = array_map('intval', $_POST['categoryBox']);\n                    $filterValues = [\n                        'shop_list' => $shopList,\n                    ];\n\n                    foreach ($_POST['categoryBox'] as $idCategoryLayered) {\n                        $filterValues['categories'][] = $idCategoryLayered;\n                    }\n\n                    foreach ($_POST as $key => $value) {\n                        if (!preg_match('~^(?P<key>layered_selection_.*)(?<!_filter_)(?<!type)(?<!show_limit)$~', $key, $matches)) {\n                            continue;\n                        }\n\n                        $filterValues[$matches['key']] = [\n                            'filter_type' => (int) Tools::getValue($matches['key'] . '_filter_type', 0),\n                            'filter_show_limit' => (int) Tools::getValue($matches['key'] . '_filter_show_limit', 0),\n                        ];\n                    }\n\n                    $values = [\n                        'name' => pSQL(Tools::getValue('layered_tpl_name')),\n                        'filters' => pSQL(serialize($filterValues)),\n                        'n_categories' => (int) count($filterValues['categories']),\n                    ];\n\n                    if (!$idLayeredFilter) {\n                        $values['date_add'] = date('Y-m-d H:i:s');\n                        $sql = 'INSERT INTO ' . _DB_PREFIX_ . 'layered_filter ' .\n                             '(name, filters, n_categories, date_add, id_layered_filter) ' .\n                             'VALUES (' .\n                             '\"' . pSQL($values['name']) . '\", ' .\n                             '\"' . $values['filters'] . '\", ' .\n                             '' . (int) $values['n_categories'] . ', ' .\n                             '\"' . pSQL($values['date_add']) . '\", ' .\n                             '' . $idLayeredFilter . ')';\n                        $this->getDatabase()->execute($sql);\n                        $idLayeredFilter = (int) $this->getDatabase()->Insert_ID();\n                    } else {\n                        $this->getDatabase()->execute(\n                            'DELETE FROM ' . _DB_PREFIX_ . 'layered_filter_shop WHERE `id_layered_filter` = ' . (int) $idLayeredFilter\n                        );\n                        $sql = 'UPDATE ' . _DB_PREFIX_ . 'layered_filter ' .\n                             'SET name = \"' . pSQL($values['name']) . '\", ' .\n                             'filters = \"' . $values['filters'] . '\", ' .\n                             'n_categories = ' . (int) $values['n_categories'] . ' ' .\n                             'WHERE id_layered_filter = ' . $idLayeredFilter;\n                        $this->getDatabase()->execute($sql);\n                    }\n\n                    if (isset($assos)) {\n                        foreach ($assos as $asso) {\n                            $this->getDatabase()->execute(\n                                'INSERT INTO ' . _DB_PREFIX_ . 'layered_filter_shop (`id_layered_filter`, `id_shop`)\n    VALUES(' . $idLayeredFilter . ', ' . (int) $asso['id_shop'] . ')'\n                            );\n                        }\n                    }\n\n                    $this->buildLayeredCategories();\n                    $message = $this->displayConfirmation(\n                        $this->trans('Your filter', [], 'Modules.Facetedsearch.Admin') . ' \"' .\n                        Tools::safeOutput(Tools::getValue('layered_tpl_name')) . '\" ' .\n                        (\n                            !empty($_POST['id_layered_filter']) ?\n                            $this->trans('was updated successfully.', [], 'Modules.Facetedsearch.Admin') :\n                            $this->trans('was added successfully.', [], 'Modules.Facetedsearch.Admin')\n                        )\n                    );\n                }\n            }\n        } elseif (Tools::isSubmit('submitLayeredSettings')) {\n            Configuration::updateValue('PS_LAYERED_SHOW_QTIES', (int) Tools::getValue('ps_layered_show_qties'));\n            Configuration::updateValue('PS_LAYERED_FULL_TREE', (int) Tools::getValue('ps_layered_full_tree'));\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_USETAX', (int) Tools::getValue('ps_layered_filter_price_usetax'));\n            Configuration::updateValue('PS_LAYERED_FILTER_CATEGORY_DEPTH', (int) Tools::getValue('ps_layered_filter_category_depth'));\n            Configuration::updateValue('PS_LAYERED_FILTER_PRICE_ROUNDING', (int) Tools::getValue('ps_layered_filter_price_rounding'));\n            Configuration::updateValue('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST', (int) Tools::getValue('ps_layered_filter_show_out_of_stock_last'));\n            Configuration::updateValue('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY', (int) Tools::getValue('ps_layered_filter_by_default_category'));\n\n            $this->psLayeredFullTree = (int) Tools::getValue('ps_layered_full_tree');\n\n            $message = '<div class=\"alert alert-success\">' . $this->trans('Settings saved successfully', [], 'Modules.Facetedsearch.Admin') . '</div>';\n            $this->invalidateLayeredFilterBlockCache();\n        } elseif (Tools::getValue('deleteFilterTemplate')) {\n            $layered_values = $this->getDatabase()->getValue(\n                'SELECT filters\n                FROM ' . _DB_PREFIX_ . 'layered_filter\n                WHERE id_layered_filter = ' . (int) Tools::getValue('id_layered_filter')\n            );\n\n            if ($layered_values) {\n                $this->getDatabase()->execute(\n                    'DELETE FROM ' . _DB_PREFIX_ . 'layered_filter\n                    WHERE id_layered_filter = ' . (int) Tools::getValue('id_layered_filter') . ' LIMIT 1'\n                );\n                $this->buildLayeredCategories();\n                $message = $this->displayConfirmation($this->trans('Filter template deleted, categories updated (reverted to default Filter template).', [], 'Modules.Facetedsearch.Admin'));\n            } else {\n                $message = $this->displayError($this->trans('Filter template not found', [], 'Modules.Facetedsearch.Admin'));\n            }\n        }\n\n        $categoryBox = [];\n        $attributeGroups = $this->getDatabase()->executeS(\n            'SELECT ag.id_attribute_group, ag.is_color_group, agl.name, COUNT(DISTINCT(a.id_attribute)) n\n            FROM ' . _DB_PREFIX_ . 'attribute_group ag\n            LEFT JOIN ' . _DB_PREFIX_ . 'attribute_group_lang agl ON (agl.id_attribute_group = ag.id_attribute_group)\n            LEFT JOIN ' . _DB_PREFIX_ . 'attribute a ON (a.id_attribute_group = ag.id_attribute_group)\n            WHERE agl.id_lang = ' . (int) $cookie->id_lang . '\n            GROUP BY ag.id_attribute_group'\n        );\n\n        $features = $this->getDatabase()->executeS(\n            'SELECT fl.id_feature, fl.name, COUNT(DISTINCT(fv.id_feature_value)) n\n            FROM ' . _DB_PREFIX_ . 'feature_lang fl\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_value fv ON (fv.id_feature = fl.id_feature)\n            WHERE (fv.custom IS NULL OR fv.custom = 0) AND fl.id_lang = ' . (int) $cookie->id_lang . '\n            GROUP BY fl.id_feature'\n        );\n\n        if (Shop::isFeatureActive() && count(Shop::getShops(true, null, true)) > 1) {\n            $helper = new HelperForm();\n            $helper->id = Tools::getValue('id_layered_filter', null);\n            $helper->table = 'layered_filter';\n            $helper->identifier = 'id_layered_filter';\n            $this->context->smarty->assign('asso_shops', $helper->renderAssoShop());\n        }\n\n        $treeCategoriesHelper = new HelperTreeCategories('categories-treeview');\n        $treeCategoriesHelper->setRootCategory((Shop::getContext() == Shop::CONTEXT_SHOP ? Category::getRootCategory()->id_category : 0))\n                                                                     ->setUseCheckBox(true);\n\n        $moduleUrl = Tools::getProtocol(Tools::usingSecureMode()) . $_SERVER['HTTP_HOST'] . $this->getPathUri();\n\n        if (method_exists($this->context->controller, 'addJquery')) {\n            $this->context->controller->addJS(_PS_JS_DIR_ . 'jquery/plugins/jquery.sortable.js');\n        }\n\n        $this->context->controller->addJS($this->_path . 'views/dist/back.js');\n        $this->context->controller->addCSS($this->_path . 'views/dist/back.css');\n\n        if (Tools::getValue('add_new_filters_template')) {\n            $this->context->smarty->assign([\n                'current_url' => $this->context->link->getAdminLink('AdminModules') . '&configure=ps_facetedsearch&tab_module=front_office_features&module_name=ps_facetedsearch',\n                'uri' => $this->getPathUri(),\n                'id_layered_filter' => 0,\n                'template_name' => sprintf($this->trans('My template - %s', [], 'Modules.Facetedsearch.Admin'), date('Y-m-d')),\n                'attribute_groups' => $attributeGroups,\n                'features' => $features,\n                'total_filters' => 6 + count($attributeGroups) + count($features),\n            ]);\n\n            $this->context->smarty->assign('categories_tree', $treeCategoriesHelper->render());\n\n            return $this->display(__FILE__, 'views/templates/admin/add.tpl');\n        }\n\n        if (Tools::getValue('edit_filters_template')) {\n            $idLayeredFilter = (int) Tools::getValue('id_layered_filter');\n            $template = $this->getDatabase()->getRow(\n                'SELECT *\n                FROM `' . _DB_PREFIX_ . 'layered_filter`\n                WHERE id_layered_filter = ' . $idLayeredFilter\n            );\n\n            if (!empty($template)) {\n                $filters = Tools::unSerialize($template['filters']);\n                $treeCategoriesHelper->setSelectedCategories($filters['categories']);\n                $this->context->smarty->assign('categories_tree', $treeCategoriesHelper->render());\n\n                $selectShops = $filters['shop_list'];\n                unset($filters['categories']);\n                unset($filters['shop_list']);\n\n                $this->context->smarty->assign([\n                    'current_url' => $this->context->link->getAdminLink('AdminModules') . '&configure=ps_facetedsearch&tab_module=front_office_features&module_name=ps_facetedsearch',\n                    'uri' => $this->getPathUri(),\n                    'id_layered_filter' => $idLayeredFilter,\n                    'template_name' => $template['name'],\n                    'attribute_groups' => $attributeGroups,\n                    'features' => $features,\n                    'filters' => $filters,\n                    'total_filters' => 6 + count($attributeGroups) + count($features),\n                    'default_filters' => $this->getDefaultFilters(),\n                ]);\n\n                return $this->display(__FILE__, 'views/templates/admin/view.tpl');\n            }\n        }\n\n        $this->context->smarty->assign([\n            'message' => $message,\n            'uri' => $this->getPathUri(),\n            'PS_LAYERED_INDEXED' => (int) Configuration::getGlobalValue('PS_LAYERED_INDEXED'),\n            'current_url' => Tools::safeOutput(preg_replace('/&deleteFilterTemplate=[0-9]*&id_layered_filter=[0-9]*/', '', $_SERVER['REQUEST_URI'])),\n            'id_lang' => $this->getContext()->cookie->id_lang,\n            'token' => substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'base_folder' => urlencode(_PS_ADMIN_DIR_),\n            'price_indexer_url' => $moduleUrl . 'ps_facetedsearch-price-indexer.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'full_price_indexer_url' => $moduleUrl . 'ps_facetedsearch-price-indexer.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10) . '&full=1',\n            'attribute_indexer_url' => $moduleUrl . 'ps_facetedsearch-attribute-indexer.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'clear_cache_url' => $moduleUrl . 'ps_facetedsearch-clear-cache.php' . '?token=' . substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10),\n            'filters_templates' => $this->getDatabase()->executeS('SELECT * FROM ' . _DB_PREFIX_ . 'layered_filter ORDER BY date_add DESC'),\n            'show_quantities' => Configuration::get('PS_LAYERED_SHOW_QTIES'),\n            'full_tree' => $this->psLayeredFullTree,\n            'category_depth' => Configuration::get('PS_LAYERED_FILTER_CATEGORY_DEPTH'),\n            'price_use_tax' => (bool) Configuration::get('PS_LAYERED_FILTER_PRICE_USETAX'),\n            'limit_warning' => $this->displayLimitPostWarning(21 + count($attributeGroups) * 3 + count($features) * 3),\n            'price_use_rounding' => (bool) Configuration::get('PS_LAYERED_FILTER_PRICE_ROUNDING'),\n            'show_out_of_stock_last' => (bool) Configuration::get('PS_LAYERED_FILTER_SHOW_OUT_OF_STOCK_LAST'),\n            'filter_by_default_category' => (bool) Configuration::get('PS_LAYERED_FILTER_BY_DEFAULT_CATEGORY'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/manage.tpl');\n    }\n\n    public function displayLimitPostWarning($count)\n    {\n        $return = [];\n        if ((ini_get('suhosin.post.max_vars') && ini_get('suhosin.post.max_vars') < $count) || (ini_get('suhosin.request.max_vars') && ini_get('suhosin.request.max_vars') < $count)) {\n            $return['error_type'] = 'suhosin';\n            $return['post.max_vars'] = ini_get('suhosin.post.max_vars');\n            $return['request.max_vars'] = ini_get('suhosin.request.max_vars');\n            $return['needed_limit'] = $count + 100;\n        } elseif (ini_get('max_input_vars') && ini_get('max_input_vars') < $count) {\n            $return['error_type'] = 'conf';\n            $return['max_input_vars'] = ini_get('max_input_vars');\n            $return['needed_limit'] = $count + 100;\n        }\n\n        return $return;\n    }\n\n    private function query($sqlQuery)\n    {\n        return $this->getDatabase()->query($sqlQuery);\n    }\n\n    /**\n     * Rebuild layered structure\n     */\n    public function rebuildLayeredStructure()\n    {\n        @set_time_limit(0);\n\n        /* Set memory limit to 128M only if current is lower */\n        $memoryLimit = Tools::getMemoryLimit();\n        if ($memoryLimit != -1 && $memoryLimit < 128 * 1024 * 1024) {\n            @ini_set('memory_limit', '128M');\n        }\n\n        /* Delete and re-create the layered categories table */\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS ' . _DB_PREFIX_ . 'layered_category');\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_category` (\n            `id_layered_category` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n            `id_shop` INT(11) UNSIGNED NOT NULL,\n            `id_category` INT(10) UNSIGNED NOT NULL,\n            `id_value` INT(10) UNSIGNED NULL DEFAULT \\'0\\',\n            `type` ENUM(\\'category\\',\\'id_feature\\',\\'id_attribute_group\\',\\'quantity\\',\\'condition\\',\\'manufacturer\\',\\'weight\\',\\'price\\') NOT NULL,\n            `position` INT(10) UNSIGNED NOT NULL,\n            `filter_type` int(10) UNSIGNED NOT NULL DEFAULT 0,\n            `filter_show_limit` int(10) UNSIGNED NOT NULL DEFAULT 0,\n            KEY `id_category_shop` (`id_category`, `id_shop`, `type`, id_value, `position`),\n            KEY `id_category` (`id_category`,`type`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_filter` (\n            `id_layered_filter` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n            `name` VARCHAR(64) NOT NULL,\n            `filters` LONGTEXT NULL,\n            `n_categories` INT(10) UNSIGNED NOT NULL,\n            `date_add` DATETIME NOT NULL\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_filter_block` (\n            `hash` CHAR(32) NOT NULL DEFAULT \"\" PRIMARY KEY,\n            `data` TEXT NULL\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'layered_filter_shop` (\n            `id_layered_filter` INT(10) UNSIGNED NOT NULL,\n            `id_shop` INT(11) UNSIGNED NOT NULL,\n            PRIMARY KEY (`id_layered_filter`, `id_shop`),\n            KEY `id_shop` (`id_shop`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * Build layered cache\n     *\n     * @param array $productsIds\n     * @param array $categoriesIds\n     * @param bool $rebuildLayeredCategories\n     */\n    public function rebuildLayeredCache($productsIds = [], $categoriesIds = [], $rebuildLayeredCategories = true)\n    {\n        @set_time_limit(0);\n\n        $filterData = ['categories' => []];\n\n        /* Set memory limit to 128M only if current is lower */\n        $memoryLimit = Tools::getMemoryLimit();\n        if ($memoryLimit != -1 && $memoryLimit < 128 * 1024 * 1024) {\n            @ini_set('memory_limit', '128M');\n        }\n\n        $db = $this->getDatabase();\n        $nCategories = [];\n        $doneCategories = [];\n\n        $alias = 'product_shop';\n        $joinProduct = Shop::addSqlAssociation('product', 'p');\n        $joinProductAttribute = Shop::addSqlAssociation('product_attribute', 'pa');\n\n        $attributeGroups = $this->query(\n            'SELECT a.id_attribute, a.id_attribute_group\n            FROM ' . _DB_PREFIX_ . 'attribute a\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute_combination pac ON (pac.id_attribute = a.id_attribute)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute pa ON (pa.id_product_attribute = pac.id_product_attribute)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product p ON (p.id_product = pa.id_product)\n            ' . $joinProduct . $joinProductAttribute . '\n            LEFT JOIN ' . _DB_PREFIX_ . 'category_product cp ON (cp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'category c ON (c.id_category = cp.id_category)\n            WHERE c.active = 1' .\n            (count($categoriesIds) ? ' AND cp.id_category IN (' . implode(',', array_map('intval', $categoriesIds)) . ')' : '') . '\n            AND ' . $alias . '.active = 1 AND ' . $alias . '.`visibility` IN (\"both\", \"catalog\")\n            ' . (count($productsIds) ? 'AND p.id_product IN (' . implode(',', array_map('intval', $productsIds)) . ')' : '')\n        );\n\n        $attributeGroupsById = [];\n        while ($row = $db->nextRow($attributeGroups)) {\n            $attributeGroupsById[(int) $row['id_attribute']] = (int) $row['id_attribute_group'];\n        }\n\n        $features = $this->query(\n            'SELECT fv.id_feature_value, fv.id_feature\n            FROM ' . _DB_PREFIX_ . 'feature_value fv\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_product fp ON (fp.id_feature_value = fv.id_feature_value)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product p ON (p.id_product = fp.id_product)\n            ' . $joinProduct . '\n            LEFT JOIN ' . _DB_PREFIX_ . 'category_product cp ON (cp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'category c ON (c.id_category = cp.id_category)\n            WHERE (fv.custom IS NULL OR fv.custom = 0) AND c.active = 1' . (count($categoriesIds) ? ' AND cp.id_category IN (' . implode(',', array_map('intval', $categoriesIds)) . ')' : '') . '\n            AND ' . $alias . '.active = 1 AND ' . $alias . '.`visibility` IN (\"both\", \"catalog\") ' .\n            (count($productsIds) ? 'AND p.id_product IN (' . implode(',', array_map('intval', $productsIds)) . ')' : '')\n        );\n\n        $featuresById = [];\n        while ($row = $db->nextRow($features)) {\n            $featuresById[(int) $row['id_feature_value']] = (int) $row['id_feature'];\n        }\n\n        $result = $this->query(\n            'SELECT p.id_product,\n            GROUP_CONCAT(DISTINCT fv.id_feature_value) features,\n            GROUP_CONCAT(DISTINCT cp.id_category) categories,\n            GROUP_CONCAT(DISTINCT pac.id_attribute) attributes\n            FROM ' . _DB_PREFIX_ . 'product p\n            LEFT JOIN ' . _DB_PREFIX_ . 'category_product cp ON (cp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'category c ON (c.id_category = cp.id_category)\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_product fp ON (fp.id_product = p.id_product)\n            LEFT JOIN ' . _DB_PREFIX_ . 'feature_value fv ON (fv.id_feature_value = fp.id_feature_value)\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute pa ON (pa.id_product = p.id_product)\n            ' . $joinProduct . $joinProductAttribute . '\n            LEFT JOIN ' . _DB_PREFIX_ . 'product_attribute_combination pac ON (pac.id_product_attribute = pa.id_product_attribute)\n            WHERE c.active = 1' . (count($categoriesIds) ? ' AND cp.id_category IN (' . implode(',', array_map('intval', $categoriesIds)) . ')' : '') . '\n            AND ' . $alias . '.active = 1 AND ' . $alias . '.`visibility` IN (\"both\", \"catalog\")\n            ' . (count($productsIds) ? 'AND p.id_product IN (' . implode(',', array_map('intval', $productsIds)) . ')' : '') .\n            ' AND (fv.custom IS NULL OR fv.custom = 0)\n            GROUP BY p.id_product'\n        );\n\n        $shopList = Shop::getShops(false, null, true);\n\n        $toInsert = false;\n        while ($product = $db->nextRow($result)) {\n            $a = $c = $f = [];\n            if (!empty($product['attributes'])) {\n                $a = array_flip(explode(',', $product['attributes']));\n            }\n\n            if (!empty($product['categories'])) {\n                $c = array_flip(explode(',', $product['categories']));\n            }\n\n            if (!empty($product['features'])) {\n                $f = array_flip(explode(',', $product['features']));\n            }\n\n            $filterData['shop_list'] = $shopList;\n\n            foreach ($c as $idCategory => $category) {\n                if (!in_array($idCategory, $filterData['categories'])) {\n                    $filterData['categories'][] = $idCategory;\n                }\n\n                if (!isset($nCategories[(int) $idCategory])) {\n                    $nCategories[(int) $idCategory] = 1;\n                }\n                if (!isset($doneCategories[(int) $idCategory]['cat'])) {\n                    $filterData['layered_selection_subcategories'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['cat'] = true;\n                    $toInsert = true;\n                }\n                if (is_array($attributeGroupsById) && count($attributeGroupsById) > 0) {\n                    foreach ($a as $kAttribute => $attribute) {\n                        if (!isset($doneCategories[(int) $idCategory]['a' . (int) $attributeGroupsById[(int) $kAttribute]])) {\n                            $filterData['layered_selection_ag_' . (int) $attributeGroupsById[(int) $kAttribute]] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                            $doneCategories[(int) $idCategory]['a' . (int) $attributeGroupsById[(int) $kAttribute]] = true;\n                            $toInsert = true;\n                        }\n                    }\n                }\n                if (is_array($attributeGroupsById) && count($attributeGroupsById) > 0) {\n                    foreach ($f as $kFeature => $feature) {\n                        if (!isset($doneCategories[(int) $idCategory]['f' . (int) $featuresById[(int) $kFeature]])) {\n                            $filterData['layered_selection_feat_' . (int) $featuresById[(int) $kFeature]] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                            $doneCategories[(int) $idCategory]['f' . (int) $featuresById[(int) $kFeature]] = true;\n                            $toInsert = true;\n                        }\n                    }\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['q'])) {\n                    $filterData['layered_selection_stock'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['q'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['m'])) {\n                    $filterData['layered_selection_manufacturer'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['m'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['c'])) {\n                    $filterData['layered_selection_condition'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['c'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['w'])) {\n                    $filterData['layered_selection_weight_slider'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['w'] = true;\n                    $toInsert = true;\n                }\n\n                if (!isset($doneCategories[(int) $idCategory]['p'])) {\n                    $filterData['layered_selection_price_slider'] = ['filter_type' => Converter::WIDGET_TYPE_CHECKBOX, 'filter_show_limit' => 0];\n                    $doneCategories[(int) $idCategory]['p'] = true;\n                    $toInsert = true;\n                }\n            }\n        }\n\n        if ($toInsert) {\n            $this->getDatabase()->execute('INSERT INTO ' . _DB_PREFIX_ . 'layered_filter(name, filters, n_categories, date_add)\nVALUES (\\'' . sprintf($this->trans('My template %s', [], 'Modules.Facetedsearch.Admin'), date('Y-m-d')) . '\\', \\'' . pSQL(serialize($filterData)) . '\\', ' . count($filterData['categories']) . ', NOW())');\n\n            $last_id = $this->getDatabase()->Insert_ID();\n            $this->getDatabase()->execute('DELETE FROM ' . _DB_PREFIX_ . 'layered_filter_shop WHERE `id_layered_filter` = ' . $last_id);\n            foreach ($shopList as $idShop) {\n                $this->getDatabase()->execute('INSERT INTO ' . _DB_PREFIX_ . 'layered_filter_shop (`id_layered_filter`, `id_shop`)\nVALUES(' . $last_id . ', ' . (int) $idShop . ')');\n            }\n\n            if ($rebuildLayeredCategories) {\n                $this->buildLayeredCategories();\n            }\n        }\n    }\n\n    /**\n     * Build layered categories\n     */\n    public function buildLayeredCategories()\n    {\n        // Get all filter template\n        $res = $this->getDatabase()->executeS('SELECT * FROM ' . _DB_PREFIX_ . 'layered_filter ORDER BY date_add DESC');\n        $categories = [];\n        // Clear cache\n        $this->invalidateLayeredFilterBlockCache();\n        // Remove all from layered_category\n        $this->getDatabase()->execute('TRUNCATE ' . _DB_PREFIX_ . 'layered_category');\n\n        if (!count($res)) { // No filters templates defined, nothing else to do\n            return true;\n        }\n\n        $sqlInsertPrefix = 'INSERT INTO ' . _DB_PREFIX_ . 'layered_category (id_category, id_shop, id_value, type, position, filter_show_limit, filter_type) VALUES ';\n        $sqlInsert = '';\n        $nbSqlValuesToInsert = 0;\n\n        foreach ($res as $filterTemplate) {\n            $data = Tools::unSerialize($filterTemplate['filters']);\n            foreach ($data['shop_list'] as $idShop) {\n                if (!isset($categories[$idShop])) {\n                    $categories[$idShop] = [];\n                }\n\n                foreach ($data['categories'] as $idCategory) {\n                    $n = 0;\n                    if (in_array($idCategory, $categories[$idShop])) {\n                        continue;\n                    }\n                    // Last definition, erase previous categories defined\n\n                    $categories[$idShop][] = $idCategory;\n\n                    foreach ($data as $key => $value) {\n                        if (substr($key, 0, 17) == 'layered_selection') {\n                            $type = $value['filter_type'];\n                            $limit = $value['filter_show_limit'];\n                            ++$n;\n\n                            if ($key == 'layered_selection_stock') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'quantity\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_subcategories') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'category\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_condition') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'condition\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_weight_slider') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'weight\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_price_slider') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'price\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif ($key == 'layered_selection_manufacturer') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', NULL,\\'manufacturer\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif (substr($key, 0, 21) == 'layered_selection_ag_') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', ' . (int) str_replace('layered_selection_ag_', '', $key) . ',\n\\'id_attribute_group\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            } elseif (substr($key, 0, 23) == 'layered_selection_feat_') {\n                                $sqlInsert .= '(' . (int) $idCategory . ', ' . (int) $idShop . ', ' . (int) str_replace('layered_selection_feat_', '', $key) . ',\n\\'id_feature\\',' . (int) $n . ', ' . (int) $limit . ', ' . (int) $type . '),';\n                            }\n\n                            ++$nbSqlValuesToInsert;\n                            if ($nbSqlValuesToInsert >= 100) {\n                                $this->getDatabase()->execute($sqlInsertPrefix . rtrim($sqlInsert, ','));\n                                $sqlInsert = '';\n                                $nbSqlValuesToInsert = 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($nbSqlValuesToInsert) {\n            $this->getDatabase()->execute($sqlInsertPrefix . rtrim($sqlInsert, ','));\n        }\n    }\n\n    /**\n     * Render template\n     *\n     * @param string $template\n     * @param array $params\n     *\n     * @return string\n     */\n    public function render($template, array $params = [])\n    {\n        $this->context->smarty->assign($params);\n\n        return $this->display(__FILE__, $template);\n    }\n\n    /**\n     * Check if link rewrite are availables and corrects\n     *\n     * @param array $params\n     */\n    public function checkLinksRewrite($params)\n    {\n        foreach (Language::getLanguages(false) as $language) {\n            $idLang = $language['id_lang'];\n            $urlNameLang = Tools::getValue('url_name_' . $idLang);\n            if ($urlNameLang && Tools::link_rewrite($urlNameLang) != strtolower($urlNameLang)) {\n                $params['errors'][] = Tools::displayError(\n                    $this->trans(\n                        '\"%s\" is not a valid url',\n                        [Tools::safeOutput($urlNameLang, true)],\n                        'Modules.Facetedsearch.Admin'\n                    )\n                );\n            }\n        }\n    }\n\n    /**\n     * Dispatch hooks\n     *\n     * @param string $methodName\n     * @param array $arguments\n     */\n    public function __call($methodName, array $arguments)\n    {\n        return $this->getHookDispatcher()->dispatch(\n            $methodName,\n            !empty($arguments[0]) ? $arguments[0] : []\n        );\n    }\n\n    /**\n     * Invalid filter block cache\n     */\n    public function invalidateLayeredFilterBlockCache()\n    {\n        return $this->getDatabase()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'layered_filter_block');\n    }\n\n    /**\n     * Install price indexes table\n     */\n    public function rebuildPriceIndexTable()\n    {\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_price_index`');\n\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_price_index` (\n            `id_product` INT  NOT NULL,\n            `id_currency` INT NOT NULL,\n            `id_shop` INT NOT NULL,\n            `price_min` DECIMAL(11, 5) NOT NULL,\n            `price_max` DECIMAL(11, 5) NOT NULL,\n            `id_country` INT NOT NULL,\n            PRIMARY KEY (`id_product`, `id_currency`, `id_shop`, `id_country`),\n            INDEX `id_currency` (`id_currency`),\n            INDEX `price_min` (`price_min`),\n            INDEX `price_max` (`price_max`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * create table product attribute.\n     */\n    private function installProductAttributeTable()\n    {\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_product_attribute`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_product_attribute` (\n            `id_attribute` int(10) unsigned NOT NULL,\n            `id_product` int(10) unsigned NOT NULL,\n            `id_attribute_group` int(10) unsigned NOT NULL DEFAULT \"0\",\n            `id_shop` int(10) unsigned NOT NULL DEFAULT \"1\",\n            PRIMARY KEY (`id_attribute`, `id_product`, `id_shop`),\n            UNIQUE KEY `id_attribute_group` (`id_attribute_group`,`id_attribute`,`id_product`, `id_shop`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * Install indexable attribute table\n     */\n    private function installIndexableAttributeTable()\n    {\n        // Attributes Groups\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_attribute_group`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_attribute_group` (\n            `id_attribute_group` INT NOT NULL,\n            `indexable` BOOL NOT NULL DEFAULT 0,\n            PRIMARY KEY (`id_attribute_group`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n        $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_attribute_group`\n            SELECT id_attribute_group, 1 FROM `' . _DB_PREFIX_ . 'attribute_group`'\n        );\n\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_attribute_group_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_attribute_group_lang_value` (\n            `id_attribute_group` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128),\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_attribute_group`, `id_lang`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        // Attributes\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_attribute_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_attribute_lang_value` (\n            `id_attribute` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128),\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_attribute`, `id_lang`)\n           )  ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        // Features\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_feature`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_feature` (\n            `id_feature` INT NOT NULL,\n            `indexable` BOOL NOT NULL DEFAULT 0,\n            PRIMARY KEY (`id_feature`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        $this->getDatabase()->execute(\n            'INSERT INTO `' . _DB_PREFIX_ . 'layered_indexable_feature`\n            SELECT id_feature, 1 FROM `' . _DB_PREFIX_ . 'feature`'\n        );\n\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_feature_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_feature_lang_value` (\n            `id_feature` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128) NOT NULL,\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_feature`, `id_lang`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n\n        // Features values\n        $this->getDatabase()->execute('DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'layered_indexable_feature_value_lang_value`');\n        $this->getDatabase()->execute(\n            'CREATE TABLE `' . _DB_PREFIX_ . 'layered_indexable_feature_value_lang_value` (\n            `id_feature_value` INT NOT NULL,\n            `id_lang` INT NOT NULL,\n            `url_name` VARCHAR(128),\n            `meta_title` VARCHAR(128),\n            PRIMARY KEY (`id_feature_value`, `id_lang`)\n            ) ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'\n        );\n    }\n\n    /**\n     * Index prices\n     *\n     * @param $cursor int last indexed id_product\n     * @param bool $full\n     * @param bool $ajax\n     * @param bool $smart\n     *\n     * @return int\n     */\n    private function indexPrices($cursor = 0, $full = false, $ajax = false, $smart = false)\n    {\n        if ($full) {\n            $nbProducts = (int) $this->getDatabase()->getValue(\n                'SELECT count(DISTINCT p.`id_product`) ' .\n                'FROM ' . _DB_PREFIX_ . 'product p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ' .\n                'ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\"))'\n            );\n        } else {\n            $nbProducts = (int) $this->getDatabase()->getValue(\n                'SELECT COUNT(DISTINCT p.`id_product`) ' .\n                'FROM `' . _DB_PREFIX_ . 'product` p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\")) ' .\n                'LEFT JOIN  `' . _DB_PREFIX_ . 'layered_price_index` psi ON (psi.id_product = p.id_product) ' .\n                'WHERE psi.id_product IS NULL'\n            );\n        }\n\n        $maxExecutiontime = @ini_get('max_execution_time');\n        if ($maxExecutiontime > 5 || $maxExecutiontime <= 0) {\n            $maxExecutiontime = 5;\n        }\n\n        $startTime = microtime(true);\n\n        $indexedProducts = 0;\n        $length = 100;\n        do {\n            $lastCursor = $cursor;\n            $cursor = (int) $this->indexPricesUnbreakable((int) $cursor, $full, $smart, $length);\n            if ($cursor == 0) {\n                $lastCursor = $cursor;\n                break;\n            }\n            $time_elapsed = microtime(true) - $startTime;\n            $indexedProducts += $length;\n        } while (\n            $cursor < $nbProducts\n            && (Tools::getMemoryLimit() == -1 || Tools::getMemoryLimit() > memory_get_peak_usage())\n            && $time_elapsed < $maxExecutiontime\n        );\n\n        if (($nbProducts > 0 && !$full || $cursor != $lastCursor && $full) && !$ajax) {\n            $token = substr(Tools::encrypt('ps_facetedsearch/index'), 0, 10);\n            $domain = Tools::usingSecureMode()\n                    ? Tools::getShopDomainSsl(true)\n                    : Tools::getShopDomain(true);\n\n            $this->indexPrices((int) $cursor, (int) $full);\n\n            return $cursor;\n        }\n\n        if ($ajax && $nbProducts > 0 && $cursor != $lastCursor && $full) {\n            return json_encode([\n                'cursor' => $cursor,\n                'count' => $indexedProducts,\n            ]);\n        }\n\n        if ($ajax && $nbProducts > 0 && !$full) {\n            return json_encode([\n                'cursor' => $cursor,\n                'count' => $nbProducts,\n            ]);\n        }\n\n        Configuration::updateGlobalValue('PS_LAYERED_INDEXED', 1);\n\n        if ($ajax) {\n            return json_encode([\n                'result' => 'ok',\n            ]);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Index prices unbreakable\n     *\n     * @param $cursor int last indexed id_product\n     * @param bool $full All products, otherwise only indexed products\n     * @param bool $smart Delete before reindex\n     * @param int $length nb of products to index\n     *\n     * @return int\n     */\n    private function indexPricesUnbreakable($cursor, $full = false, $smart = false, $length = 100)\n    {\n        if (null === $cursor) {\n            $cursor = 0;\n        }\n\n        if ($full) {\n            $query = 'SELECT p.`id_product` ' .\n                'FROM `' . _DB_PREFIX_ . 'product` p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ' .\n                'ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\")) ' .\n                'WHERE p.id_product > ' . (int) $cursor . ' ' .\n                'GROUP BY p.`id_product` ' .\n                'ORDER BY p.`id_product` LIMIT 0,' . (int) $length;\n        } else {\n            $query = 'SELECT p.`id_product` ' .\n                'FROM `' . _DB_PREFIX_ . 'product` p ' .\n                'INNER JOIN `' . _DB_PREFIX_ . 'product_shop` ps ' .\n                'ON (ps.`id_product` = p.`id_product` AND ps.`active` = 1 AND ps.`visibility` IN (\"both\", \"catalog\")) ' .\n                'LEFT JOIN  `' . _DB_PREFIX_ . 'layered_price_index` psi ON (psi.id_product = p.id_product) ' .\n                'WHERE psi.id_product IS NULL ' .\n                'GROUP BY p.`id_product` ' .\n                'ORDER BY p.`id_product` LIMIT 0,' . (int) $length;\n        }\n\n        $lastIdProduct = 0;\n        foreach ($this->getDatabase()->executeS($query) as $product) {\n            $this->indexProductPrices((int) $product['id_product'], ($smart && $full));\n            $lastIdProduct = $product['id_product'];\n        }\n\n        return (int) $lastIdProduct;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function renderWidget($hookName, array $configuration)\n    {\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n\n        return $this->fetch(\n            'module:ps_facetedsearch/ps_facetedsearch.tpl'\n        );\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getWidgetVariables($hookName, array $configuration)\n    {\n        return [];\n    }\n}\n"], "filenames": ["ps_facetedsearch.php"], "buggy_code_start_loc": [1211], "buggy_code_end_loc": [1212], "fixing_code_start_loc": [1211], "fixing_code_end_loc": [1212], "type": "CWE-79", "message": "PrestaShop module ps_facetedsearch versions before 3.5.0 has a reflected XSS with `url_name` parameter. The problem is fixed in 3.5.0", "other": {"cve": {"id": "CVE-2020-5277", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-25T19:15:15.840", "lastModified": "2020-03-27T16:35:59.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop module ps_facetedsearch versions before 3.5.0 has a reflected XSS with `url_name` parameter. The problem is fixed in 3.5.0"}, {"lang": "es", "value": "El m\u00f3dulo ps_facetedsearch de PrestaShop versiones anteriores a 3.5.0, presenta una vulnerabilidad de tipo XSS reflejado con el par\u00e1metro \"url_name\". El problema es corregido en la versi\u00f3n 3.5.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:faceted_search_module:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.0.0", "versionEndExcluding": "3.5.0", "matchCriteriaId": "1F97AA7E-6924-41EB-A697-AFB8A75C2E51"}]}]}], "references": [{"url": "https://github.com/PrestaShop/ps_facetedsearch/commit/c792ddcdd84ec208a6dfa4a30fd66d8bc9863f4a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/ps_facetedsearch/security/advisories/GHSA-mmmv-m5q9-g3cm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/ps_facetedsearch/commit/c792ddcdd84ec208a6dfa4a30fd66d8bc9863f4a"}}