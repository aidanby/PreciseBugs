{"buggy_code": ["# Full list of environment variables that can be used with BookStack.\n# Selectively copy these to your '.env' file as required.\n# Each option is shown with it's default value.\n# Do not copy this whole file to use as your '.env' file.\n\n# Application environment\n# Can be 'production', 'development', 'testing' or 'demo'\nAPP_ENV=production\n\n# Enable debug mode\n# Shows advanced debug information and errors.\n# CAN EXPOSE OTHER VARIABLES, LEAVE DISABLED\nAPP_DEBUG=false\n\n# Application key\n# Used for encryption where needed.\n# Run `php artisan key:generate` to generate a valid key.\nAPP_KEY=SomeRandomString\n\n# Application URL\n# This must be the root URL that you want to host BookStack on.\n# All URL's in BookStack will be generated using this value.\nAPP_URL=https://example.com\n\n# Application default language\n# The default language choice to show.\n# May be overridden by user-preference or visitor browser settings.\nAPP_LANG=en\n\n# Auto-detect language for public visitors.\n# Uses browser-sent headers to infer a language.\n# APP_LANG will be used if such a header is not provided.\nAPP_AUTO_LANG_PUBLIC=true\n\n# Application timezone\n# Used where dates are displayed such as on exported content.\n# Valid timezone values can be found here: https://www.php.net/manual/en/timezones.php\nAPP_TIMEZONE=UTC\n\n# Application theme\n# Used to specific a themes/<APP_THEME> folder where BookStack UI\n# overrides can be made. Defaults to disabled.\nAPP_THEME=false\n\n# Database details\n# Host can contain a port (localhost:3306) or a separate DB_PORT option can be used.\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=database_database\nDB_USERNAME=database_username\nDB_PASSWORD=database_user_password\n\n# Mail system to use\n# Can be 'smtp' or 'sendmail'\nMAIL_DRIVER=smtp\n\n# Mail sending options\nMAIL_FROM=mail@bookstackapp.com\nMAIL_FROM_NAME=BookStack\n\n# SMTP mail options\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\n# Cache & Session driver to use\n# Can be 'file', 'database', 'memcached' or 'redis'\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n\n# Session configuration\nSESSION_LIFETIME=120\nSESSION_COOKIE_NAME=bookstack_session\nSESSION_SECURE_COOKIE=false\n\n# Cache key prefix\n# Can be used to prevent conflicts multiple BookStack instances use the same store.\nCACHE_PREFIX=bookstack\n\n# Memcached server configuration\n# If using a UNIX socket path for the host, set the port to 0\n# This follows the following format: HOST:PORT:WEIGHT\n# For multiple servers separate with a comma\nMEMCACHED_SERVERS=127.0.0.1:11211:100\n\n# Redis server configuration\n# This follows the following format: HOST:PORT:DATABASE\n# or, if using a password: HOST:PORT:DATABASE:PASSWORD\n# For multiple servers separate with a comma. These will be clustered.\nREDIS_SERVERS=127.0.0.1:6379:0\n\n# Queue driver to use\n# Queue not really currently used but may be configurable in the future.\n# Would advise not to change this for now.\nQUEUE_CONNECTION=sync\n\n# Storage system to use\n# Can be 'local', 'local_secure' or 's3'\nSTORAGE_TYPE=local\n\n# Image storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE.\nSTORAGE_IMAGE_TYPE=local\n\n# Attachment storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE although 'local' will be forced to 'local_secure'.\nSTORAGE_ATTACHMENT_TYPE=local_secure\n\n# Amazon S3 storage configuration\nSTORAGE_S3_KEY=your-s3-key\nSTORAGE_S3_SECRET=your-s3-secret\nSTORAGE_S3_BUCKET=s3-bucket-name\nSTORAGE_S3_REGION=s3-bucket-region\n\n# S3 endpoint to use for storage calls\n# Only set this if using a non-Amazon s3-compatible service such as Minio\nSTORAGE_S3_ENDPOINT=https://my-custom-s3-compatible.service.com:8001\n\n# Storage URL prefix\n# Used as a base for any generated image urls.\n# An s3-format URL will be generated if not set.\nSTORAGE_URL=false\n\n# Authentication method to use\n# Can be 'standard', 'ldap' or 'saml2'\nAUTH_METHOD=standard\n\n# Social authentication configuration\n# All disabled by default.\n# Refer to https://www.bookstackapp.com/docs/admin/third-party-auth/\n\nAZURE_APP_ID=false\nAZURE_APP_SECRET=false\nAZURE_TENANT=false\nAZURE_AUTO_REGISTER=false\nAZURE_AUTO_CONFIRM_EMAIL=false\n\nDISCORD_APP_ID=false\nDISCORD_APP_SECRET=false\nDISCORD_AUTO_REGISTER=false\nDISCORD_AUTO_CONFIRM_EMAIL=false\n\nFACEBOOK_APP_ID=false\nFACEBOOK_APP_SECRET=false\nFACEBOOK_AUTO_REGISTER=false\nFACEBOOK_AUTO_CONFIRM_EMAIL=false\n\nGITHUB_APP_ID=false\nGITHUB_APP_SECRET=false\nGITHUB_AUTO_REGISTER=false\nGITHUB_AUTO_CONFIRM_EMAIL=false\n\nGITLAB_APP_ID=false\nGITLAB_APP_SECRET=false\nGITLAB_BASE_URI=false\nGITLAB_AUTO_REGISTER=false\nGITLAB_AUTO_CONFIRM_EMAIL=false\n\nGOOGLE_APP_ID=false\nGOOGLE_APP_SECRET=false\nGOOGLE_SELECT_ACCOUNT=false\nGOOGLE_AUTO_REGISTER=false\nGOOGLE_AUTO_CONFIRM_EMAIL=false\n\nOKTA_BASE_URL=false\nOKTA_APP_ID=false\nOKTA_APP_SECRET=false\nOKTA_AUTO_REGISTER=false\nOKTA_AUTO_CONFIRM_EMAIL=false\n\nSLACK_APP_ID=false\nSLACK_APP_SECRET=false\nSLACK_AUTO_REGISTER=false\nSLACK_AUTO_CONFIRM_EMAIL=false\n\nTWITCH_APP_ID=false\nTWITCH_APP_SECRET=false\nTWITCH_AUTO_REGISTER=false\nTWITCH_AUTO_CONFIRM_EMAIL=false\n\nTWITTER_APP_ID=false\nTWITTER_APP_SECRET=false\nTWITTER_AUTO_REGISTER=false\nTWITTER_AUTO_CONFIRM_EMAIL=false\n\n# LDAP authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_SERVER=false\nLDAP_BASE_DN=false\nLDAP_DN=false\nLDAP_PASS=false\nLDAP_USER_FILTER=false\nLDAP_VERSION=false\nLDAP_START_TLS=false\nLDAP_TLS_INSECURE=false\nLDAP_ID_ATTRIBUTE=uid\nLDAP_EMAIL_ATTRIBUTE=mail\nLDAP_DISPLAY_NAME_ATTRIBUTE=cn\nLDAP_THUMBNAIL_ATTRIBUTE=null\nLDAP_FOLLOW_REFERRALS=true\nLDAP_DUMP_USER_DETAILS=false\n\n# LDAP group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_USER_TO_GROUPS=false\nLDAP_GROUP_ATTRIBUTE=\"memberOf\"\nLDAP_REMOVE_FROM_GROUPS=false\n\n# SAML authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_NAME=SSO\nSAML2_EMAIL_ATTRIBUTE=email\nSAML2_DISPLAY_NAME_ATTRIBUTES=username\nSAML2_EXTERNAL_ID_ATTRIBUTE=null\nSAML2_IDP_ENTITYID=null\nSAML2_IDP_SSO=null\nSAML2_IDP_SLO=null\nSAML2_IDP_x509=null\nSAML2_ONELOGIN_OVERRIDES=null\nSAML2_DUMP_USER_DETAILS=false\nSAML2_AUTOLOAD_METADATA=false\nSAML2_IDP_AUTHNCONTEXT=true\n\n# SAML group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_USER_TO_GROUPS=false\nSAML2_GROUP_ATTRIBUTE=group\nSAML2_REMOVE_FROM_GROUPS=false\n\n# Disable default third-party services such as Gravatar and Draw.IO\n# Service-specific options will override this option\nDISABLE_EXTERNAL_SERVICES=false\n\n# Use custom avatar service, Sets fetch URL\n# Possible placeholders: ${hash} ${size} ${email}\n# If set, Avatars will be fetched regardless of DISABLE_EXTERNAL_SERVICES option.\n# Example: AVATAR_URL=https://seccdn.libravatar.org/avatar/${hash}?s=${size}&d=identicon\nAVATAR_URL=\n\n# Enable diagrams.net integration\n# Can simply be true/false to enable/disable the integration.\n# Alternatively, It can be URL to the diagrams.net instance you want to use.\n# For URLs, The following URL parameters should be included: embed=1&proto=json&spin=1\nDRAWIO=true\n\n# Default item listing view\n# Used for public visitors and user's without a preference.\n# Can be 'list' or 'grid'.\nAPP_VIEWS_BOOKS=list\nAPP_VIEWS_BOOKSHELVES=grid\nAPP_VIEWS_BOOKSHELF=grid\n\n# Use dark mode by default\n# Will be overriden by any user/session preference.\nAPP_DEFAULT_DARK_MODE=false\n\n# Page revision limit\n# Number of page revisions to keep in the system before deleting old revisions.\n# If set to 'false' a limit will not be enforced.\nREVISION_LIMIT=50\n\n# Recycle Bin Lifetime\n# The number of days that content will remain in the recycle bin before\n# being considered for auto-removal. It is not a guarantee that content will\n# be removed after this time.\n# Set to 0 for no recycle bin functionality.\n# Set to -1 for unlimited recycle bin lifetime.\nRECYCLE_BIN_LIFETIME=30\n\n# Allow <script> tags in page content\n# Note, if set to 'true' the page editor may still escape scripts.\nALLOW_CONTENT_SCRIPTS=false\n\n# Indicate if robots/crawlers should crawl your instance.\n# Can be 'true', 'false' or 'null'.\n# The behaviour of the default 'null' option will depend on the 'app-public' admin setting.\n# Contents of the robots.txt file can be overridden, making this option obsolete.\nALLOW_ROBOTS=null\n\n# A list of hosts that BookStack can be iframed within.\n# Space separated if multiple. BookStack host domain is auto-inferred.\n# For Example: ALLOWED_IFRAME_HOSTS=\"https://example.com https://a.example.com\"\n# Setting this option will also auto-adjust cookies to be SameSite=None.\nALLOWED_IFRAME_HOSTS=null\n\n# The default and maximum item-counts for listing API requests.\nAPI_DEFAULT_ITEM_COUNT=100\nAPI_MAX_ITEM_COUNT=500\n\n# The number of API requests that can be made per minute by a single user.\nAPI_REQUESTS_PER_MIN=180\n\n# Enable the logging of failed email+password logins with the given message.\n# The default log channel below uses the php 'error_log' function which commonly\n# results in messages being output to the webserver error logs.\n# The message can contain a %u parameter which will be replaced with the login\n# user identifier (Username or email).\nLOG_FAILED_LOGIN_MESSAGE=false\nLOG_FAILED_LOGIN_CHANNEL=errorlog_plain_webserver\n", "<?php\n\n/**\n * Global app configuration options.\n *\n * Changes to these config files are not supported by BookStack and may break upon updates.\n * Configuration should be altered via the `.env` file or environment variables.\n * Do not edit this file unless you're happy to maintain any changes yourself.\n */\n\nreturn [\n\n    // The environment to run BookStack in.\n    // Options: production, development, demo, testing\n    'env' => env('APP_ENV', 'production'),\n\n    // Enter the application in debug mode.\n    // Shows much more verbose error messages. Has potential to show\n    // private configuration variables so should remain disabled in public.\n    'debug' => env('APP_DEBUG', false),\n\n    // The number of revisions to keep in the database.\n    // Once this limit is reached older revisions will be deleted.\n    // If set to false then a limit will not be enforced.\n    'revision_limit' => env('REVISION_LIMIT', 50),\n\n    // The number of days that content will remain in the recycle bin before\n    // being considered for auto-removal. It is not a guarantee that content will\n    // be removed after this time.\n    // Set to 0 for no recycle bin functionality.\n    // Set to -1 for unlimited recycle bin lifetime.\n    'recycle_bin_lifetime' => env('RECYCLE_BIN_LIFETIME', 30),\n\n    // Allow <script> tags to entered within page content.\n    // <script> tags are escaped by default.\n    // Even when overridden the WYSIWYG editor may still escape script content.\n    'allow_content_scripts' => env('ALLOW_CONTENT_SCRIPTS', false),\n\n    // Override the default behaviour for allowing crawlers to crawl the instance.\n    // May be ignored if view has be overridden or modified.\n    // Defaults to null since, if not set, 'app-public' status used instead.\n    'allow_robots' => env('ALLOW_ROBOTS', null),\n\n    // Application Base URL, Used by laravel in development commands\n    // and used by BookStack in URL generation.\n    'url' => env('APP_URL', '') === 'http://bookstack.dev' ? '' : env('APP_URL', ''),\n\n    // A list of hosts that BookStack can be iframed within.\n    // Space separated if multiple. BookStack host domain is auto-inferred.\n    'iframe_hosts' => env('ALLOWED_IFRAME_HOSTS', null),\n\n    // Application timezone for back-end date functions.\n    'timezone' => env('APP_TIMEZONE', 'UTC'),\n\n    // Default locale to use\n    'locale' => env('APP_LANG', 'en'),\n\n    // Locales available\n    'locales' => ['en', 'ar', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'de_informal', 'es', 'es_AR', 'fa', 'fr', 'he', 'hr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'nl', 'nb', 'pt', 'pt_BR', 'sk', 'sl', 'sv', 'pl',  'ru', 'th', 'tr', 'uk', 'vi', 'zh_CN', 'zh_TW'],\n\n    //  Application Fallback Locale\n    'fallback_locale' => 'en',\n\n    // Faker Locale\n    'faker_locale' => 'en_GB',\n\n    // Enable right-to-left text control.\n    'rtl' => false,\n\n    // Auto-detect the locale for public users\n    // For public users their locale can be guessed by headers sent by their\n    // browser. This is usually set by users in their browser settings.\n    // If not found the default app locale will be used.\n    'auto_detect_locale' => env('APP_AUTO_LANG_PUBLIC', true),\n\n    // Encryption key\n    'key' => env('APP_KEY', 'AbAZchsay4uBTU33RubBzLKw203yqSqr'),\n\n    // Encryption cipher\n    'cipher' => 'AES-256-CBC',\n\n    // Application Services Provides\n    'providers' => [\n\n        // Laravel Framework Service Providers...\n        Illuminate\\Auth\\AuthServiceProvider::class,\n        Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n        Illuminate\\Bus\\BusServiceProvider::class,\n        Illuminate\\Cache\\CacheServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider::class,\n        Illuminate\\Cookie\\CookieServiceProvider::class,\n        Illuminate\\Database\\DatabaseServiceProvider::class,\n        Illuminate\\Encryption\\EncryptionServiceProvider::class,\n        Illuminate\\Filesystem\\FilesystemServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\FoundationServiceProvider::class,\n        Illuminate\\Hashing\\HashServiceProvider::class,\n        Illuminate\\Mail\\MailServiceProvider::class,\n        Illuminate\\Pipeline\\PipelineServiceProvider::class,\n        Illuminate\\Queue\\QueueServiceProvider::class,\n        Illuminate\\Redis\\RedisServiceProvider::class,\n        Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::class,\n        Illuminate\\Session\\SessionServiceProvider::class,\n        Illuminate\\Validation\\ValidationServiceProvider::class,\n        Illuminate\\View\\ViewServiceProvider::class,\n        Illuminate\\Notifications\\NotificationServiceProvider::class,\n        SocialiteProviders\\Manager\\ServiceProvider::class,\n\n        // Third party service providers\n        Intervention\\Image\\ImageServiceProvider::class,\n        Barryvdh\\DomPDF\\ServiceProvider::class,\n        Barryvdh\\Snappy\\ServiceProvider::class,\n\n        // BookStack replacement service providers (Extends Laravel)\n        BookStack\\Providers\\PaginationServiceProvider::class,\n        BookStack\\Providers\\TranslationServiceProvider::class,\n\n        // BookStack custom service providers\n        BookStack\\Providers\\ThemeServiceProvider::class,\n        BookStack\\Providers\\AuthServiceProvider::class,\n        BookStack\\Providers\\AppServiceProvider::class,\n        BookStack\\Providers\\BroadcastServiceProvider::class,\n        BookStack\\Providers\\EventServiceProvider::class,\n        BookStack\\Providers\\RouteServiceProvider::class,\n        BookStack\\Providers\\CustomFacadeProvider::class,\n        BookStack\\Providers\\CustomValidationServiceProvider::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Class Aliases\n    |--------------------------------------------------------------------------\n    |\n    | This array of class aliases will be registered when this application\n    | is started. However, feel free to register as many as you wish as\n    | the aliases are \"lazy\" loaded so they don't hinder performance.\n    |\n    */\n\n    // Class aliases, Registered on application start\n    'aliases' => [\n\n        // Laravel\n        'App'          => Illuminate\\Support\\Facades\\App::class,\n        'Arr'          => Illuminate\\Support\\Arr::class,\n        'Artisan'      => Illuminate\\Support\\Facades\\Artisan::class,\n        'Auth'         => Illuminate\\Support\\Facades\\Auth::class,\n        'Blade'        => Illuminate\\Support\\Facades\\Blade::class,\n        'Bus'          => Illuminate\\Support\\Facades\\Bus::class,\n        'Cache'        => Illuminate\\Support\\Facades\\Cache::class,\n        'Config'       => Illuminate\\Support\\Facades\\Config::class,\n        'Cookie'       => Illuminate\\Support\\Facades\\Cookie::class,\n        'Crypt'        => Illuminate\\Support\\Facades\\Crypt::class,\n        'DB'           => Illuminate\\Support\\Facades\\DB::class,\n        'Eloquent'     => Illuminate\\Database\\Eloquent\\Model::class,\n        'Event'        => Illuminate\\Support\\Facades\\Event::class,\n        'File'         => Illuminate\\Support\\Facades\\File::class,\n        'Hash'         => Illuminate\\Support\\Facades\\Hash::class,\n        'Input'        => Illuminate\\Support\\Facades\\Input::class,\n        'Inspiring'    => Illuminate\\Foundation\\Inspiring::class,\n        'Lang'         => Illuminate\\Support\\Facades\\Lang::class,\n        'Log'          => Illuminate\\Support\\Facades\\Log::class,\n        'Mail'         => Illuminate\\Support\\Facades\\Mail::class,\n        'Notification' => Illuminate\\Support\\Facades\\Notification::class,\n        'Password'     => Illuminate\\Support\\Facades\\Password::class,\n        'Queue'        => Illuminate\\Support\\Facades\\Queue::class,\n        'Redirect'     => Illuminate\\Support\\Facades\\Redirect::class,\n        'Redis'        => Illuminate\\Support\\Facades\\Redis::class,\n        'Request'      => Illuminate\\Support\\Facades\\Request::class,\n        'Response'     => Illuminate\\Support\\Facades\\Response::class,\n        'Route'        => Illuminate\\Support\\Facades\\Route::class,\n        'Schema'       => Illuminate\\Support\\Facades\\Schema::class,\n        'Session'      => Illuminate\\Support\\Facades\\Session::class,\n        'Storage'      => Illuminate\\Support\\Facades\\Storage::class,\n        'Str'          => Illuminate\\Support\\Str::class,\n        'URL'          => Illuminate\\Support\\Facades\\URL::class,\n        'Validator'    => Illuminate\\Support\\Facades\\Validator::class,\n        'View'         => Illuminate\\Support\\Facades\\View::class,\n        'Socialite'    => Laravel\\Socialite\\Facades\\Socialite::class,\n\n        // Third Party\n        'ImageTool' => Intervention\\Image\\Facades\\Image::class,\n        'DomPDF'    => Barryvdh\\DomPDF\\Facade::class,\n        'SnappyPDF' => Barryvdh\\Snappy\\Facades\\SnappyPdf::class,\n\n        // Custom BookStack\n        'Activity'    => BookStack\\Facades\\Activity::class,\n        'Permissions' => BookStack\\Facades\\Permissions::class,\n        'Theme'       => BookStack\\Facades\\Theme::class,\n    ],\n\n    // Proxy configuration\n    'proxies' => env('APP_PROXIES', ''),\n\n];\n", "<?php\n\n/**\n * DOMPDF configuration options.\n *\n * Changes to these config files are not supported by BookStack and may break upon updates.\n * Configuration should be altered via the `.env` file or environment variables.\n * Do not edit this file unless you're happy to maintain any changes yourself.\n */\n\nreturn [\n\n    'show_warnings' => false,   // Throw an Exception on warnings from dompdf\n    'orientation'   => 'portrait',\n    'defines'       => [\n        /**\n         * The location of the DOMPDF font directory.\n         *\n         * The location of the directory where DOMPDF will store fonts and font metrics\n         * Note: This directory must exist and be writable by the webserver process.\n         * *Please note the trailing slash.*\n         *\n         * Notes regarding fonts:\n         * Additional .afm font metrics can be added by executing load_font.php from command line.\n         *\n         * Only the original \"Base 14 fonts\" are present on all pdf viewers. Additional fonts must\n         * be embedded in the pdf file or the PDF may not display correctly. This can significantly\n         * increase file size unless font subsetting is enabled. Before embedding a font please\n         * review your rights under the font license.\n         *\n         * Any font specification in the source HTML is translated to the closest font available\n         * in the font directory.\n         *\n         * The pdf standard \"Base 14 fonts\" are:\n         * Courier, Courier-Bold, Courier-BoldOblique, Courier-Oblique,\n         * Helvetica, Helvetica-Bold, Helvetica-BoldOblique, Helvetica-Oblique,\n         * Times-Roman, Times-Bold, Times-BoldItalic, Times-Italic,\n         * Symbol, ZapfDingbats.\n         */\n        'DOMPDF_FONT_DIR' => storage_path('fonts/'),  // advised by dompdf (https://github.com/dompdf/dompdf/pull/782)\n\n        /**\n         * The location of the DOMPDF font cache directory.\n         *\n         * This directory contains the cached font metrics for the fonts used by DOMPDF.\n         * This directory can be the same as DOMPDF_FONT_DIR\n         *\n         * Note: This directory must exist and be writable by the webserver process.\n         */\n        'DOMPDF_FONT_CACHE' => storage_path('fonts/'),\n\n        /**\n         * The location of a temporary directory.\n         *\n         * The directory specified must be writeable by the webserver process.\n         * The temporary directory is required to download remote images and when\n         * using the PFDLib back end.\n         */\n        'DOMPDF_TEMP_DIR' => sys_get_temp_dir(),\n\n        /**\n         * ==== IMPORTANT ====.\n         *\n         * dompdf's \"chroot\": Prevents dompdf from accessing system files or other\n         * files on the webserver.  All local files opened by dompdf must be in a\n         * subdirectory of this directory.  DO NOT set it to '/' since this could\n         * allow an attacker to use dompdf to read any files on the server.  This\n         * should be an absolute path.\n         * This is only checked on command line call by dompdf.php, but not by\n         * direct class use like:\n         * $dompdf = new DOMPDF();  $dompdf->load_html($htmldata); $dompdf->render(); $pdfdata = $dompdf->output();\n         */\n        'DOMPDF_CHROOT' => realpath(base_path()),\n\n        /**\n         * Whether to use Unicode fonts or not.\n         *\n         * When set to true the PDF backend must be set to \"CPDF\" and fonts must be\n         * loaded via load_font.php.\n         *\n         * When enabled, dompdf can support all Unicode glyphs. Any glyphs used in a\n         * document must be present in your fonts, however.\n         */\n        'DOMPDF_UNICODE_ENABLED' => true,\n\n        /**\n         * Whether to enable font subsetting or not.\n         */\n        'DOMPDF_ENABLE_FONTSUBSETTING' => false,\n\n        /**\n         * The PDF rendering backend to use.\n         *\n         * Valid settings are 'PDFLib', 'CPDF' (the bundled R&OS PDF class), 'GD' and\n         * 'auto'. 'auto' will look for PDFLib and use it if found, or if not it will\n         * fall back on CPDF. 'GD' renders PDFs to graphic files. {@link * Canvas_Factory} ultimately determines which rendering class to instantiate\n         * based on this setting.\n         *\n         * Both PDFLib & CPDF rendering backends provide sufficient rendering\n         * capabilities for dompdf, however additional features (e.g. object,\n         * image and font support, etc.) differ between backends.  Please see\n         * {@link PDFLib_Adapter} for more information on the PDFLib backend\n         * and {@link CPDF_Adapter} and lib/class.pdf.php for more information\n         * on CPDF. Also see the documentation for each backend at the links\n         * below.\n         *\n         * The GD rendering backend is a little different than PDFLib and\n         * CPDF. Several features of CPDF and PDFLib are not supported or do\n         * not make any sense when creating image files.  For example,\n         * multiple pages are not supported, nor are PDF 'objects'.  Have a\n         * look at {@link GD_Adapter} for more information.  GD support is\n         * experimental, so use it at your own risk.\n         *\n         * @link http://www.pdflib.com\n         * @link http://www.ros.co.nz/pdf\n         * @link http://www.php.net/image\n         */\n        'DOMPDF_PDF_BACKEND' => 'CPDF',\n\n        /**\n         * PDFlib license key.\n         *\n         * If you are using a licensed, commercial version of PDFlib, specify\n         * your license key here.  If you are using PDFlib-Lite or are evaluating\n         * the commercial version of PDFlib, comment out this setting.\n         *\n         * @link http://www.pdflib.com\n         *\n         * If pdflib present in web server and auto or selected explicitely above,\n         * a real license code must exist!\n         */\n        //\"DOMPDF_PDFLIB_LICENSE\" => \"your license key here\",\n\n        /**\n         * html target media view which should be rendered into pdf.\n         * List of types and parsing rules for future extensions:\n         * http://www.w3.org/TR/REC-html40/types.html\n         *   screen, tty, tv, projection, handheld, print, braille, aural, all\n         * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.\n         * Note, even though the generated pdf file is intended for print output,\n         * the desired content might be different (e.g. screen or projection view of html file).\n         * Therefore allow specification of content here.\n         */\n        'DOMPDF_DEFAULT_MEDIA_TYPE' => 'print',\n\n        /**\n         * The default paper size.\n         *\n         * North America standard is \"letter\"; other countries generally \"a4\"\n         *\n         * @see CPDF_Adapter::PAPER_SIZES for valid sizes ('letter', 'legal', 'A4', etc.)\n         */\n        'DOMPDF_DEFAULT_PAPER_SIZE' => 'a4',\n\n        /**\n         * The default font family.\n         *\n         * Used if no suitable fonts can be found. This must exist in the font folder.\n         *\n         * @var string\n         */\n        'DOMPDF_DEFAULT_FONT' => 'dejavu sans',\n\n        /**\n         * Image DPI setting.\n         *\n         * This setting determines the default DPI setting for images and fonts.  The\n         * DPI may be overridden for inline images by explictly setting the\n         * image's width & height style attributes (i.e. if the image's native\n         * width is 600 pixels and you specify the image's width as 72 points,\n         * the image will have a DPI of 600 in the rendered PDF.  The DPI of\n         * background images can not be overridden and is controlled entirely\n         * via this parameter.\n         *\n         * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).\n         * If a size in html is given as px (or without unit as image size),\n         * this tells the corresponding size in pt.\n         * This adjusts the relative sizes to be similar to the rendering of the\n         * html page in a reference browser.\n         *\n         * In pdf, always 1 pt = 1/72 inch\n         *\n         * Rendering resolution of various browsers in px per inch:\n         * Windows Firefox and Internet Explorer:\n         *   SystemControl->Display properties->FontResolution: Default:96, largefonts:120, custom:?\n         * Linux Firefox:\n         *   about:config *resolution: Default:96\n         *   (xorg screen dimension in mm and Desktop font dpi settings are ignored)\n         *\n         * Take care about extra font/image zoom factor of browser.\n         *\n         * In images, <img> size in pixel attribute, img css style, are overriding\n         * the real image dimension in px for rendering.\n         *\n         * @var int\n         */\n        'DOMPDF_DPI' => 96,\n\n        /**\n         * Enable inline PHP.\n         *\n         * If this setting is set to true then DOMPDF will automatically evaluate\n         * inline PHP contained within <script type=\"text/php\"> ... </script> tags.\n         *\n         * Enabling this for documents you do not trust (e.g. arbitrary remote html\n         * pages) is a security risk.  Set this option to false if you wish to process\n         * untrusted documents.\n         *\n         * @var bool\n         */\n        'DOMPDF_ENABLE_PHP' => false,\n\n        /**\n         * Enable inline Javascript.\n         *\n         * If this setting is set to true then DOMPDF will automatically insert\n         * JavaScript code contained within <script type=\"text/javascript\"> ... </script> tags.\n         *\n         * @var bool\n         */\n        'DOMPDF_ENABLE_JAVASCRIPT' => false,\n\n        /**\n         * Enable remote file access.\n         *\n         * If this setting is set to true, DOMPDF will access remote sites for\n         * images and CSS files as required.\n         * This is required for part of test case www/test/image_variants.html through www/examples.php\n         *\n         * Attention!\n         * This can be a security risk, in particular in combination with DOMPDF_ENABLE_PHP and\n         * allowing remote access to dompdf.php or on allowing remote html code to be passed to\n         * $dompdf = new DOMPDF(, $dompdf->load_html(...,\n         * This allows anonymous users to download legally doubtful internet content which on\n         * tracing back appears to being downloaded by your server, or allows malicious php code\n         * in remote html pages to be executed by your server with your account privileges.\n         *\n         * @var bool\n         */\n        'DOMPDF_ENABLE_REMOTE' => true,\n\n        /**\n         * A ratio applied to the fonts height to be more like browsers' line height.\n         */\n        'DOMPDF_FONT_HEIGHT_RATIO' => 1.1,\n\n        /**\n         * Enable CSS float.\n         *\n         * Allows people to disabled CSS float support\n         *\n         * @var bool\n         */\n        'DOMPDF_ENABLE_CSS_FLOAT' => true,\n\n        /**\n         * Use the more-than-experimental HTML5 Lib parser.\n         */\n        'DOMPDF_ENABLE_HTML5PARSER' => true,\n\n    ],\n\n];\n", "<?php\n\nnamespace BookStack\\Entities\\Tools;\n\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\Markdown\\HtmlToMarkdown;\nuse BookStack\\Uploads\\ImageService;\nuse DomPDF;\nuse Exception;\nuse SnappyPDF;\nuse Throwable;\n\nclass ExportFormatter\n{\n    protected $imageService;\n\n    /**\n     * ExportService constructor.\n     */\n    public function __construct(ImageService $imageService)\n    {\n        $this->imageService = $imageService;\n    }\n\n    /**\n     * Convert a page to a self-contained HTML file.\n     * Includes required CSS & image content. Images are base64 encoded into the HTML.\n     *\n     * @throws Throwable\n     */\n    public function pageToContainedHtml(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $pageHtml = view('pages.export', [\n            'page'   => $page,\n            'format' => 'html',\n        ])->render();\n\n        return $this->containHtml($pageHtml);\n    }\n\n    /**\n     * Convert a chapter to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToContainedHtml(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'html',\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a book to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function bookToContainedHtml(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'html',\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a page to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function pageToPdf(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $html = view('pages.export', [\n            'page'   => $page,\n            'format' => 'pdf',\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a chapter to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToPdf(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'pdf',\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a book to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function bookToPdf(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'pdf',\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert normal web-page HTML to a PDF.\n     *\n     * @throws Exception\n     */\n    protected function htmlToPdf(string $html): string\n    {\n        $containedHtml = $this->containHtml($html);\n        $useWKHTML = config('snappy.pdf.binary') !== false;\n        if ($useWKHTML) {\n            $pdf = SnappyPDF::loadHTML($containedHtml);\n            $pdf->setOption('print-media-type', true);\n        } else {\n            $pdf = DomPDF::loadHTML($containedHtml);\n        }\n\n        return $pdf->output();\n    }\n\n    /**\n     * Bundle of the contents of a html file to be self-contained.\n     *\n     * @throws Exception\n     */\n    protected function containHtml(string $htmlContent): string\n    {\n        $imageTagsOutput = [];\n        preg_match_all(\"/\\<img.*?src\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $imageTagsOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($imageTagsOutput[0]) && count($imageTagsOutput[0]) > 0) {\n            foreach ($imageTagsOutput[0] as $index => $imgMatch) {\n                $oldImgTagString = $imgMatch;\n                $srcString = $imageTagsOutput[2][$index];\n                $imageEncoded = $this->imageService->imageUriToBase64($srcString);\n                if ($imageEncoded === null) {\n                    $imageEncoded = $srcString;\n                }\n                $newImgTagString = str_replace($srcString, $imageEncoded, $oldImgTagString);\n                $htmlContent = str_replace($oldImgTagString, $newImgTagString, $htmlContent);\n            }\n        }\n\n        $linksOutput = [];\n        preg_match_all(\"/\\<a.*href\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $linksOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($linksOutput[0]) && count($linksOutput[0]) > 0) {\n            foreach ($linksOutput[0] as $index => $linkMatch) {\n                $oldLinkString = $linkMatch;\n                $srcString = $linksOutput[2][$index];\n                if (strpos(trim($srcString), 'http') !== 0) {\n                    $newSrcString = url($srcString);\n                    $newLinkString = str_replace($srcString, $newSrcString, $oldLinkString);\n                    $htmlContent = str_replace($oldLinkString, $newLinkString, $htmlContent);\n                }\n            }\n        }\n\n        // Replace any relative links with system domain\n        return $htmlContent;\n    }\n\n    /**\n     * Converts the page contents into simple plain text.\n     * This method filters any bad looking content to provide a nice final output.\n     */\n    public function pageToPlainText(Page $page): string\n    {\n        $html = (new PageContent($page))->render();\n        $text = strip_tags($html);\n        // Replace multiple spaces with single spaces\n        $text = preg_replace('/\\ {2,}/', ' ', $text);\n        // Reduce multiple horrid whitespace characters.\n        $text = preg_replace('/(\\x0A|\\xA0|\\x0A|\\r|\\n){2,}/su', \"\\n\\n\", $text);\n        $text = html_entity_decode($text);\n        // Add title\n        $text = $page->name . \"\\n\\n\" . $text;\n\n        return $text;\n    }\n\n    /**\n     * Convert a chapter into a plain text string.\n     */\n    public function chapterToPlainText(Chapter $chapter): string\n    {\n        $text = $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->getVisiblePages() as $page) {\n            $text .= $this->pageToPlainText($page);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToPlainText(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, false);\n        $text = $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild->isA('chapter')) {\n                $text .= $this->chapterToPlainText($bookChild);\n            } else {\n                $text .= $this->pageToPlainText($bookChild);\n            }\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a page to a Markdown file.\n     */\n    public function pageToMarkdown(Page $page): string\n    {\n        if ($page->markdown) {\n            return '# ' . $page->name . \"\\n\\n\" . $page->markdown;\n        }\n\n        return '# ' . $page->name . \"\\n\\n\" . (new HtmlToMarkdown($page->html))->convert();\n    }\n\n    /**\n     * Convert a chapter to a Markdown file.\n     */\n    public function chapterToMarkdown(Chapter $chapter): string\n    {\n        $text = '# ' . $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->pages as $page) {\n            $text .= $this->pageToMarkdown($page) . \"\\n\\n\";\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToMarkdown(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $text = '# ' . $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild instanceof Chapter) {\n                $text .= $this->chapterToMarkdown($bookChild);\n            } else {\n                $text .= $this->pageToMarkdown($bookChild);\n            }\n        }\n\n        return $text;\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">app/</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Application Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <server name=\"APP_ENV\" value=\"testing\"/>\n    <server name=\"APP_DEBUG\" value=\"false\"/>\n    <server name=\"APP_LANG\" value=\"en\"/>\n    <server name=\"APP_THEME\" value=\"none\"/>\n    <server name=\"APP_AUTO_LANG_PUBLIC\" value=\"true\"/>\n    <server name=\"APP_URL\" value=\"http://bookstack.dev\"/>\n    <server name=\"ALLOWED_IFRAME_HOSTS\" value=\"\"/>\n    <server name=\"CACHE_DRIVER\" value=\"array\"/>\n    <server name=\"SESSION_DRIVER\" value=\"array\"/>\n    <server name=\"QUEUE_CONNECTION\" value=\"sync\"/>\n    <server name=\"DB_CONNECTION\" value=\"mysql_testing\"/>\n    <server name=\"BCRYPT_ROUNDS\" value=\"4\"/>\n    <server name=\"MAIL_DRIVER\" value=\"array\"/>\n    <server name=\"LOG_CHANNEL\" value=\"single\"/>\n    <server name=\"AUTH_METHOD\" value=\"standard\"/>\n    <server name=\"DISABLE_EXTERNAL_SERVICES\" value=\"true\"/>\n    <server name=\"AVATAR_URL\" value=\"\"/>\n    <server name=\"LDAP_START_TLS\" value=\"false\"/>\n    <server name=\"LDAP_VERSION\" value=\"3\"/>\n    <server name=\"SESSION_SECURE_COOKIE\" value=\"null\"/>\n    <server name=\"STORAGE_TYPE\" value=\"local\"/>\n    <server name=\"STORAGE_ATTACHMENT_TYPE\" value=\"local\"/>\n    <server name=\"STORAGE_IMAGE_TYPE\" value=\"local\"/>\n    <server name=\"GITHUB_APP_ID\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GITHUB_APP_SECRET\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GITHUB_AUTO_REGISTER\" value=\"\"/>\n    <server name=\"GITHUB_AUTO_CONFIRM_EMAIL\" value=\"\"/>\n    <server name=\"GOOGLE_APP_ID\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GOOGLE_APP_SECRET\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GOOGLE_AUTO_REGISTER\" value=\"\"/>\n    <server name=\"GOOGLE_AUTO_CONFIRM_EMAIL\" value=\"\"/>\n    <server name=\"GOOGLE_SELECT_ACCOUNT\" value=\"\"/>\n    <server name=\"DEBUGBAR_ENABLED\" value=\"false\"/>\n    <server name=\"SAML2_ENABLED\" value=\"false\"/>\n    <server name=\"API_REQUESTS_PER_MIN\" value=\"180\"/>\n    <server name=\"LOG_FAILED_LOGIN_MESSAGE\" value=\"\"/>\n    <server name=\"LOG_FAILED_LOGIN_CHANNEL\" value=\"testing\"/>\n    <server name=\"WKHTMLTOPDF\" value=\"false\"/>\n    <server name=\"APP_DEFAULT_DARK_MODE\" value=\"false\"/>\n  </php>\n</phpunit>\n", "<?php\n\nnamespace Tests\\Entity;\n\nuse BookStack\\Auth\\Role;\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Tests\\TestCase;\n\nclass ExportTest extends TestCase\n{\n    public function test_page_text_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.txt\"');\n    }\n\n    public function test_page_pdf_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.pdf\"');\n    }\n\n    public function test_page_html_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.html\"');\n    }\n\n    public function test_book_text_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.txt\"');\n    }\n\n    public function test_book_pdf_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.pdf\"');\n    }\n\n    public function test_book_html_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.html\"');\n    }\n\n    public function test_book_html_export_shows_chapter_descriptions()\n    {\n        $chapterDesc = 'My custom test chapter description ' . Str::random(12);\n        $chapter = Chapter::query()->first();\n        $chapter->description = $chapterDesc;\n        $chapter->save();\n\n        $book = $chapter->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertSee($chapterDesc);\n    }\n\n    public function test_chapter_text_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.txt\"');\n    }\n\n    public function test_chapter_pdf_export()\n    {\n        $chapter = Chapter::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.pdf\"');\n    }\n\n    public function test_chapter_html_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.html\"');\n    }\n\n    public function test_page_html_export_contains_custom_head_if_set()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<style>p{color: red;}</style>';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($customHeadContent);\n    }\n\n    public function test_page_html_export_does_not_break_with_only_comments_in_custom_head()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<!-- A comment -->';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($customHeadContent);\n    }\n\n    public function test_page_html_export_use_absolute_dates()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($page->created_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->created_at->diffForHumans());\n        $resp->assertSee($page->updated_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->updated_at->diffForHumans());\n    }\n\n    public function test_page_export_does_not_include_user_or_revision_links()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee($page->getUrl('/revisions'));\n        $resp->assertDontSee($page->createdBy->getProfileUrl());\n        $resp->assertSee($page->createdBy->name);\n    }\n\n    public function test_page_export_sets_right_data_type_for_svg_embeds()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\">';\n        $page->save();\n\n        $this->asEditor();\n        $resp = $this->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n\n        $resp->assertStatus(200);\n        $resp->assertSee('<img src=\"data:image/svg+xml;base64');\n    }\n\n    public function test_page_image_containment_works_on_multiple_images_within_a_single_line()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test2.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\" class=\"a\"><img src=\"http://localhost/uploads/images/gallery/svg_test2.svg\" class=\"b\">';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test2.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test');\n    }\n\n    public function test_page_export_contained_html_image_fetches_only_run_when_url_points_to_image_upload_folder()\n    {\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\"/>'\n            . '<img src=\"http://localhost/uploads/svg_test.svg\"/>'\n            . '<img src=\"/uploads/svg_test.svg\"/>';\n        $storageDisk = Storage::disk('local');\n        $storageDisk->makeDirectory('uploads/images/gallery');\n        $storageDisk->put('uploads/images/gallery/svg_test.svg', '<svg>good</svg>');\n        $storageDisk->put('uploads/svg_test.svg', '<svg>bad</svg>');\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n\n        $storageDisk->delete('uploads/images/gallery/svg_test.svg');\n        $storageDisk->delete('uploads/svg_test.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test.svg');\n        $resp->assertSee('http://localhost/uploads/svg_test.svg');\n        $resp->assertSee('src=\"/uploads/svg_test.svg\"');\n    }\n\n    public function test_exports_removes_scripts_from_custom_head()\n    {\n        $entities = [\n            Page::query()->first(), Chapter::query()->first(), Book::query()->first(),\n        ];\n        setting()->put('app-custom-head', '<script>window.donkey = \"cat\";</script><style>.my-test-class { color: red; }</style>');\n\n        foreach ($entities as $entity) {\n            $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n            $resp->assertDontSee('window.donkey');\n            $resp->assertDontSee('script');\n            $resp->assertSee('.my-test-class { color: red; }');\n        }\n    }\n\n    public function test_page_export_with_deleted_creator_and_updater()\n    {\n        $user = $this->getViewer(['name' => 'ExportWizardTheFifth']);\n        $page = Page::query()->first();\n        $page->created_by = $user->id;\n        $page->updated_by = $user->id;\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee('ExportWizardTheFifth');\n\n        $user->delete();\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertDontSee('ExportWizardTheFifth');\n    }\n\n    public function test_page_markdown_export()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.md\"');\n    }\n\n    public function test_page_markdown_export_uses_existing_markdown_if_apparent()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '# A header',\n            'html'     => '<h1>Dogcat</h1>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee('A header');\n        $resp->assertDontSee('Dogcat');\n    }\n\n    public function test_page_markdown_export_converts_html_where_no_markdown()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p>Some <strong>bold</strong> text</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\nSome **bold** text\");\n    }\n\n    public function test_page_markdown_export_does_not_convert_callouts()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p class=\"callout info\">Some callout text</p><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n<p class=\\\"callout info\\\">Some callout text</p>\\n\\nAnother line\");\n    }\n\n    public function test_page_markdown_export_handles_bookstacks_wysiwyg_codeblock_format()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1>' . \"\\r\\n\" . '<pre id=\"bkmrk-var-a-%3D-%27cat%27%3B\"><code class=\"language-JavaScript\">var a = \\'cat\\';</code></pre><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n```JavaScript\\nvar a = 'cat';\\n```\\n\\nAnother line\");\n    }\n\n    public function test_chapter_markdown_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($chapter->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_book_markdown_export()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($book->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $book->name);\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_export_option_only_visible_and_accessible_with_permission()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $entities = [$book, $chapter, $page];\n        $user = $this->getViewer();\n        $this->actingAs($user);\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertSee('/export/pdf');\n        }\n\n        /** @var Role $role */\n        $this->removePermissionFromUser($user, 'content-export');\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertDontSee('/export/pdf');\n            $resp = $this->get($entity->getUrl('/export/pdf'));\n            $this->assertPermissionError($resp);\n        }\n    }\n}\n", "<?php\n\nnamespace Tests\\Unit;\n\nuse Illuminate\\Support\\Facades\\Log;\nuse Tests\\TestCase;\n\n/**\n * Class ConfigTest\n * Many of the tests here are to check on tweaks made\n * to maintain backwards compatibility.\n */\nclass ConfigTest extends TestCase\n{\n    public function test_filesystem_images_falls_back_to_storage_type_var()\n    {\n        $this->runWithEnv('STORAGE_TYPE', 'local_secure', function () {\n            $this->checkEnvConfigResult('STORAGE_IMAGE_TYPE', 's3', 'filesystems.images', 's3');\n            $this->checkEnvConfigResult('STORAGE_IMAGE_TYPE', null, 'filesystems.images', 'local_secure');\n        });\n    }\n\n    public function test_filesystem_attachments_falls_back_to_storage_type_var()\n    {\n        $this->runWithEnv('STORAGE_TYPE', 'local_secure', function () {\n            $this->checkEnvConfigResult('STORAGE_ATTACHMENT_TYPE', 's3', 'filesystems.attachments', 's3');\n            $this->checkEnvConfigResult('STORAGE_ATTACHMENT_TYPE', null, 'filesystems.attachments', 'local_secure');\n        });\n    }\n\n    public function test_app_url_blank_if_old_default_value()\n    {\n        $initUrl = 'https://example.com/docs';\n        $oldDefault = 'http://bookstack.dev';\n        $this->checkEnvConfigResult('APP_URL', $initUrl, 'app.url', $initUrl);\n        $this->checkEnvConfigResult('APP_URL', $oldDefault, 'app.url', '');\n    }\n\n    public function test_errorlog_plain_webserver_channel()\n    {\n        // We can't full test this due to it being targeted for the SAPI logging handler\n        // so we just overwrite that component so we can capture the error log output.\n        config()->set([\n            'logging.channels.errorlog_plain_webserver.handler_with' => [0],\n        ]);\n\n        $temp = tempnam(sys_get_temp_dir(), 'bs-test');\n        $original = ini_set('error_log', $temp);\n\n        Log::channel('errorlog_plain_webserver')->info('Aww, look, a cute puppy');\n\n        ini_set('error_log', $original);\n\n        $output = file_get_contents($temp);\n        $this->assertStringContainsString('Aww, look, a cute puppy', $output);\n        $this->assertStringNotContainsString('INFO', $output);\n        $this->assertStringNotContainsString('info', $output);\n        $this->assertStringNotContainsString('testing', $output);\n    }\n\n    public function test_session_cookie_uses_sub_path_from_app_url()\n    {\n        $this->checkEnvConfigResult('APP_URL', 'https://example.com', 'session.path', '/');\n        $this->checkEnvConfigResult('APP_URL', 'https://a.com/b', 'session.path', '/b');\n        $this->checkEnvConfigResult('APP_URL', 'https://a.com/b/d/e', 'session.path', '/b/d/e');\n        $this->checkEnvConfigResult('APP_URL', '', 'session.path', '/');\n    }\n\n    public function test_saml2_idp_authn_context_string_parsed_as_space_separated_array()\n    {\n        $this->checkEnvConfigResult(\n            'SAML2_IDP_AUTHNCONTEXT',\n            'urn:federation:authentication:windows urn:federation:authentication:linux',\n            'saml2.onelogin.security.requestedAuthnContext',\n            ['urn:federation:authentication:windows', 'urn:federation:authentication:linux']\n        );\n    }\n\n    /**\n     * Set an environment variable of the given name and value\n     * then check the given config key to see if it matches the given result.\n     * Providing a null $envVal clears the variable.\n     *\n     * @param mixed $expectedResult\n     */\n    protected function checkEnvConfigResult(string $envName, ?string $envVal, string $configKey, $expectedResult)\n    {\n        $this->runWithEnv($envName, $envVal, function () use ($configKey, $expectedResult) {\n            $this->assertEquals($expectedResult, config($configKey));\n        });\n    }\n}\n"], "fixing_code": ["# Full list of environment variables that can be used with BookStack.\n# Selectively copy these to your '.env' file as required.\n# Each option is shown with it's default value.\n# Do not copy this whole file to use as your '.env' file.\n\n# Application environment\n# Can be 'production', 'development', 'testing' or 'demo'\nAPP_ENV=production\n\n# Enable debug mode\n# Shows advanced debug information and errors.\n# CAN EXPOSE OTHER VARIABLES, LEAVE DISABLED\nAPP_DEBUG=false\n\n# Application key\n# Used for encryption where needed.\n# Run `php artisan key:generate` to generate a valid key.\nAPP_KEY=SomeRandomString\n\n# Application URL\n# This must be the root URL that you want to host BookStack on.\n# All URL's in BookStack will be generated using this value.\nAPP_URL=https://example.com\n\n# Application default language\n# The default language choice to show.\n# May be overridden by user-preference or visitor browser settings.\nAPP_LANG=en\n\n# Auto-detect language for public visitors.\n# Uses browser-sent headers to infer a language.\n# APP_LANG will be used if such a header is not provided.\nAPP_AUTO_LANG_PUBLIC=true\n\n# Application timezone\n# Used where dates are displayed such as on exported content.\n# Valid timezone values can be found here: https://www.php.net/manual/en/timezones.php\nAPP_TIMEZONE=UTC\n\n# Application theme\n# Used to specific a themes/<APP_THEME> folder where BookStack UI\n# overrides can be made. Defaults to disabled.\nAPP_THEME=false\n\n# Database details\n# Host can contain a port (localhost:3306) or a separate DB_PORT option can be used.\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=database_database\nDB_USERNAME=database_username\nDB_PASSWORD=database_user_password\n\n# Mail system to use\n# Can be 'smtp' or 'sendmail'\nMAIL_DRIVER=smtp\n\n# Mail sending options\nMAIL_FROM=mail@bookstackapp.com\nMAIL_FROM_NAME=BookStack\n\n# SMTP mail options\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\n# Cache & Session driver to use\n# Can be 'file', 'database', 'memcached' or 'redis'\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n\n# Session configuration\nSESSION_LIFETIME=120\nSESSION_COOKIE_NAME=bookstack_session\nSESSION_SECURE_COOKIE=false\n\n# Cache key prefix\n# Can be used to prevent conflicts multiple BookStack instances use the same store.\nCACHE_PREFIX=bookstack\n\n# Memcached server configuration\n# If using a UNIX socket path for the host, set the port to 0\n# This follows the following format: HOST:PORT:WEIGHT\n# For multiple servers separate with a comma\nMEMCACHED_SERVERS=127.0.0.1:11211:100\n\n# Redis server configuration\n# This follows the following format: HOST:PORT:DATABASE\n# or, if using a password: HOST:PORT:DATABASE:PASSWORD\n# For multiple servers separate with a comma. These will be clustered.\nREDIS_SERVERS=127.0.0.1:6379:0\n\n# Queue driver to use\n# Queue not really currently used but may be configurable in the future.\n# Would advise not to change this for now.\nQUEUE_CONNECTION=sync\n\n# Storage system to use\n# Can be 'local', 'local_secure' or 's3'\nSTORAGE_TYPE=local\n\n# Image storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE.\nSTORAGE_IMAGE_TYPE=local\n\n# Attachment storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE although 'local' will be forced to 'local_secure'.\nSTORAGE_ATTACHMENT_TYPE=local_secure\n\n# Amazon S3 storage configuration\nSTORAGE_S3_KEY=your-s3-key\nSTORAGE_S3_SECRET=your-s3-secret\nSTORAGE_S3_BUCKET=s3-bucket-name\nSTORAGE_S3_REGION=s3-bucket-region\n\n# S3 endpoint to use for storage calls\n# Only set this if using a non-Amazon s3-compatible service such as Minio\nSTORAGE_S3_ENDPOINT=https://my-custom-s3-compatible.service.com:8001\n\n# Storage URL prefix\n# Used as a base for any generated image urls.\n# An s3-format URL will be generated if not set.\nSTORAGE_URL=false\n\n# Authentication method to use\n# Can be 'standard', 'ldap' or 'saml2'\nAUTH_METHOD=standard\n\n# Social authentication configuration\n# All disabled by default.\n# Refer to https://www.bookstackapp.com/docs/admin/third-party-auth/\n\nAZURE_APP_ID=false\nAZURE_APP_SECRET=false\nAZURE_TENANT=false\nAZURE_AUTO_REGISTER=false\nAZURE_AUTO_CONFIRM_EMAIL=false\n\nDISCORD_APP_ID=false\nDISCORD_APP_SECRET=false\nDISCORD_AUTO_REGISTER=false\nDISCORD_AUTO_CONFIRM_EMAIL=false\n\nFACEBOOK_APP_ID=false\nFACEBOOK_APP_SECRET=false\nFACEBOOK_AUTO_REGISTER=false\nFACEBOOK_AUTO_CONFIRM_EMAIL=false\n\nGITHUB_APP_ID=false\nGITHUB_APP_SECRET=false\nGITHUB_AUTO_REGISTER=false\nGITHUB_AUTO_CONFIRM_EMAIL=false\n\nGITLAB_APP_ID=false\nGITLAB_APP_SECRET=false\nGITLAB_BASE_URI=false\nGITLAB_AUTO_REGISTER=false\nGITLAB_AUTO_CONFIRM_EMAIL=false\n\nGOOGLE_APP_ID=false\nGOOGLE_APP_SECRET=false\nGOOGLE_SELECT_ACCOUNT=false\nGOOGLE_AUTO_REGISTER=false\nGOOGLE_AUTO_CONFIRM_EMAIL=false\n\nOKTA_BASE_URL=false\nOKTA_APP_ID=false\nOKTA_APP_SECRET=false\nOKTA_AUTO_REGISTER=false\nOKTA_AUTO_CONFIRM_EMAIL=false\n\nSLACK_APP_ID=false\nSLACK_APP_SECRET=false\nSLACK_AUTO_REGISTER=false\nSLACK_AUTO_CONFIRM_EMAIL=false\n\nTWITCH_APP_ID=false\nTWITCH_APP_SECRET=false\nTWITCH_AUTO_REGISTER=false\nTWITCH_AUTO_CONFIRM_EMAIL=false\n\nTWITTER_APP_ID=false\nTWITTER_APP_SECRET=false\nTWITTER_AUTO_REGISTER=false\nTWITTER_AUTO_CONFIRM_EMAIL=false\n\n# LDAP authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_SERVER=false\nLDAP_BASE_DN=false\nLDAP_DN=false\nLDAP_PASS=false\nLDAP_USER_FILTER=false\nLDAP_VERSION=false\nLDAP_START_TLS=false\nLDAP_TLS_INSECURE=false\nLDAP_ID_ATTRIBUTE=uid\nLDAP_EMAIL_ATTRIBUTE=mail\nLDAP_DISPLAY_NAME_ATTRIBUTE=cn\nLDAP_THUMBNAIL_ATTRIBUTE=null\nLDAP_FOLLOW_REFERRALS=true\nLDAP_DUMP_USER_DETAILS=false\n\n# LDAP group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_USER_TO_GROUPS=false\nLDAP_GROUP_ATTRIBUTE=\"memberOf\"\nLDAP_REMOVE_FROM_GROUPS=false\n\n# SAML authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_NAME=SSO\nSAML2_EMAIL_ATTRIBUTE=email\nSAML2_DISPLAY_NAME_ATTRIBUTES=username\nSAML2_EXTERNAL_ID_ATTRIBUTE=null\nSAML2_IDP_ENTITYID=null\nSAML2_IDP_SSO=null\nSAML2_IDP_SLO=null\nSAML2_IDP_x509=null\nSAML2_ONELOGIN_OVERRIDES=null\nSAML2_DUMP_USER_DETAILS=false\nSAML2_AUTOLOAD_METADATA=false\nSAML2_IDP_AUTHNCONTEXT=true\n\n# SAML group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_USER_TO_GROUPS=false\nSAML2_GROUP_ATTRIBUTE=group\nSAML2_REMOVE_FROM_GROUPS=false\n\n# Disable default third-party services such as Gravatar and Draw.IO\n# Service-specific options will override this option\nDISABLE_EXTERNAL_SERVICES=false\n\n# Use custom avatar service, Sets fetch URL\n# Possible placeholders: ${hash} ${size} ${email}\n# If set, Avatars will be fetched regardless of DISABLE_EXTERNAL_SERVICES option.\n# Example: AVATAR_URL=https://seccdn.libravatar.org/avatar/${hash}?s=${size}&d=identicon\nAVATAR_URL=\n\n# Enable diagrams.net integration\n# Can simply be true/false to enable/disable the integration.\n# Alternatively, It can be URL to the diagrams.net instance you want to use.\n# For URLs, The following URL parameters should be included: embed=1&proto=json&spin=1\nDRAWIO=true\n\n# Default item listing view\n# Used for public visitors and user's without a preference.\n# Can be 'list' or 'grid'.\nAPP_VIEWS_BOOKS=list\nAPP_VIEWS_BOOKSHELVES=grid\nAPP_VIEWS_BOOKSHELF=grid\n\n# Use dark mode by default\n# Will be overriden by any user/session preference.\nAPP_DEFAULT_DARK_MODE=false\n\n# Page revision limit\n# Number of page revisions to keep in the system before deleting old revisions.\n# If set to 'false' a limit will not be enforced.\nREVISION_LIMIT=50\n\n# Recycle Bin Lifetime\n# The number of days that content will remain in the recycle bin before\n# being considered for auto-removal. It is not a guarantee that content will\n# be removed after this time.\n# Set to 0 for no recycle bin functionality.\n# Set to -1 for unlimited recycle bin lifetime.\nRECYCLE_BIN_LIFETIME=30\n\n# Allow <script> tags in page content\n# Note, if set to 'true' the page editor may still escape scripts.\nALLOW_CONTENT_SCRIPTS=false\n\n# Indicate if robots/crawlers should crawl your instance.\n# Can be 'true', 'false' or 'null'.\n# The behaviour of the default 'null' option will depend on the 'app-public' admin setting.\n# Contents of the robots.txt file can be overridden, making this option obsolete.\nALLOW_ROBOTS=null\n\n# Allow server-side fetches to be performed to potentially unknown\n# and user-provided locations. Primarily used in exports when loading\n# in externally referenced assets.\n# Can be 'true' or 'false'.\nALLOW_UNTRUSTED_SERVER_FETCHING=false\n\n# A list of hosts that BookStack can be iframed within.\n# Space separated if multiple. BookStack host domain is auto-inferred.\n# For Example: ALLOWED_IFRAME_HOSTS=\"https://example.com https://a.example.com\"\n# Setting this option will also auto-adjust cookies to be SameSite=None.\nALLOWED_IFRAME_HOSTS=null\n\n# The default and maximum item-counts for listing API requests.\nAPI_DEFAULT_ITEM_COUNT=100\nAPI_MAX_ITEM_COUNT=500\n\n# The number of API requests that can be made per minute by a single user.\nAPI_REQUESTS_PER_MIN=180\n\n# Enable the logging of failed email+password logins with the given message.\n# The default log channel below uses the php 'error_log' function which commonly\n# results in messages being output to the webserver error logs.\n# The message can contain a %u parameter which will be replaced with the login\n# user identifier (Username or email).\nLOG_FAILED_LOGIN_MESSAGE=false\nLOG_FAILED_LOGIN_CHANNEL=errorlog_plain_webserver\n", "<?php\n\n/**\n * Global app configuration options.\n *\n * Changes to these config files are not supported by BookStack and may break upon updates.\n * Configuration should be altered via the `.env` file or environment variables.\n * Do not edit this file unless you're happy to maintain any changes yourself.\n */\n\nreturn [\n\n    // The environment to run BookStack in.\n    // Options: production, development, demo, testing\n    'env' => env('APP_ENV', 'production'),\n\n    // Enter the application in debug mode.\n    // Shows much more verbose error messages. Has potential to show\n    // private configuration variables so should remain disabled in public.\n    'debug' => env('APP_DEBUG', false),\n\n    // The number of revisions to keep in the database.\n    // Once this limit is reached older revisions will be deleted.\n    // If set to false then a limit will not be enforced.\n    'revision_limit' => env('REVISION_LIMIT', 50),\n\n    // The number of days that content will remain in the recycle bin before\n    // being considered for auto-removal. It is not a guarantee that content will\n    // be removed after this time.\n    // Set to 0 for no recycle bin functionality.\n    // Set to -1 for unlimited recycle bin lifetime.\n    'recycle_bin_lifetime' => env('RECYCLE_BIN_LIFETIME', 30),\n\n    // Allow <script> tags to entered within page content.\n    // <script> tags are escaped by default.\n    // Even when overridden the WYSIWYG editor may still escape script content.\n    'allow_content_scripts' => env('ALLOW_CONTENT_SCRIPTS', false),\n\n    # Allow server-side fetches to be performed to potentially unknown\n    # and user-provided locations. Primarily used in exports when loading\n    # in externally referenced assets.\n    'allow_untrusted_server_fetching' => env('ALLOW_UNTRUSTED_SERVER_FETCHING', false),\n\n    // Override the default behaviour for allowing crawlers to crawl the instance.\n    // May be ignored if view has be overridden or modified.\n    // Defaults to null since, if not set, 'app-public' status used instead.\n    'allow_robots' => env('ALLOW_ROBOTS', null),\n\n    // Application Base URL, Used by laravel in development commands\n    // and used by BookStack in URL generation.\n    'url' => env('APP_URL', '') === 'http://bookstack.dev' ? '' : env('APP_URL', ''),\n\n    // A list of hosts that BookStack can be iframed within.\n    // Space separated if multiple. BookStack host domain is auto-inferred.\n    'iframe_hosts' => env('ALLOWED_IFRAME_HOSTS', null),\n\n    // Application timezone for back-end date functions.\n    'timezone' => env('APP_TIMEZONE', 'UTC'),\n\n    // Default locale to use\n    'locale' => env('APP_LANG', 'en'),\n\n    // Locales available\n    'locales' => ['en', 'ar', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'de_informal', 'es', 'es_AR', 'fa', 'fr', 'he', 'hr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'nl', 'nb', 'pt', 'pt_BR', 'sk', 'sl', 'sv', 'pl',  'ru', 'th', 'tr', 'uk', 'vi', 'zh_CN', 'zh_TW'],\n\n    //  Application Fallback Locale\n    'fallback_locale' => 'en',\n\n    // Faker Locale\n    'faker_locale' => 'en_GB',\n\n    // Enable right-to-left text control.\n    'rtl' => false,\n\n    // Auto-detect the locale for public users\n    // For public users their locale can be guessed by headers sent by their\n    // browser. This is usually set by users in their browser settings.\n    // If not found the default app locale will be used.\n    'auto_detect_locale' => env('APP_AUTO_LANG_PUBLIC', true),\n\n    // Encryption key\n    'key' => env('APP_KEY', 'AbAZchsay4uBTU33RubBzLKw203yqSqr'),\n\n    // Encryption cipher\n    'cipher' => 'AES-256-CBC',\n\n    // Application Services Provides\n    'providers' => [\n\n        // Laravel Framework Service Providers...\n        Illuminate\\Auth\\AuthServiceProvider::class,\n        Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n        Illuminate\\Bus\\BusServiceProvider::class,\n        Illuminate\\Cache\\CacheServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider::class,\n        Illuminate\\Cookie\\CookieServiceProvider::class,\n        Illuminate\\Database\\DatabaseServiceProvider::class,\n        Illuminate\\Encryption\\EncryptionServiceProvider::class,\n        Illuminate\\Filesystem\\FilesystemServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\FoundationServiceProvider::class,\n        Illuminate\\Hashing\\HashServiceProvider::class,\n        Illuminate\\Mail\\MailServiceProvider::class,\n        Illuminate\\Pipeline\\PipelineServiceProvider::class,\n        Illuminate\\Queue\\QueueServiceProvider::class,\n        Illuminate\\Redis\\RedisServiceProvider::class,\n        Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::class,\n        Illuminate\\Session\\SessionServiceProvider::class,\n        Illuminate\\Validation\\ValidationServiceProvider::class,\n        Illuminate\\View\\ViewServiceProvider::class,\n        Illuminate\\Notifications\\NotificationServiceProvider::class,\n        SocialiteProviders\\Manager\\ServiceProvider::class,\n\n        // Third party service providers\n        Intervention\\Image\\ImageServiceProvider::class,\n        Barryvdh\\DomPDF\\ServiceProvider::class,\n        Barryvdh\\Snappy\\ServiceProvider::class,\n\n        // BookStack replacement service providers (Extends Laravel)\n        BookStack\\Providers\\PaginationServiceProvider::class,\n        BookStack\\Providers\\TranslationServiceProvider::class,\n\n        // BookStack custom service providers\n        BookStack\\Providers\\ThemeServiceProvider::class,\n        BookStack\\Providers\\AuthServiceProvider::class,\n        BookStack\\Providers\\AppServiceProvider::class,\n        BookStack\\Providers\\BroadcastServiceProvider::class,\n        BookStack\\Providers\\EventServiceProvider::class,\n        BookStack\\Providers\\RouteServiceProvider::class,\n        BookStack\\Providers\\CustomFacadeProvider::class,\n        BookStack\\Providers\\CustomValidationServiceProvider::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Class Aliases\n    |--------------------------------------------------------------------------\n    |\n    | This array of class aliases will be registered when this application\n    | is started. However, feel free to register as many as you wish as\n    | the aliases are \"lazy\" loaded so they don't hinder performance.\n    |\n    */\n\n    // Class aliases, Registered on application start\n    'aliases' => [\n\n        // Laravel\n        'App'          => Illuminate\\Support\\Facades\\App::class,\n        'Arr'          => Illuminate\\Support\\Arr::class,\n        'Artisan'      => Illuminate\\Support\\Facades\\Artisan::class,\n        'Auth'         => Illuminate\\Support\\Facades\\Auth::class,\n        'Blade'        => Illuminate\\Support\\Facades\\Blade::class,\n        'Bus'          => Illuminate\\Support\\Facades\\Bus::class,\n        'Cache'        => Illuminate\\Support\\Facades\\Cache::class,\n        'Config'       => Illuminate\\Support\\Facades\\Config::class,\n        'Cookie'       => Illuminate\\Support\\Facades\\Cookie::class,\n        'Crypt'        => Illuminate\\Support\\Facades\\Crypt::class,\n        'DB'           => Illuminate\\Support\\Facades\\DB::class,\n        'Eloquent'     => Illuminate\\Database\\Eloquent\\Model::class,\n        'Event'        => Illuminate\\Support\\Facades\\Event::class,\n        'File'         => Illuminate\\Support\\Facades\\File::class,\n        'Hash'         => Illuminate\\Support\\Facades\\Hash::class,\n        'Input'        => Illuminate\\Support\\Facades\\Input::class,\n        'Inspiring'    => Illuminate\\Foundation\\Inspiring::class,\n        'Lang'         => Illuminate\\Support\\Facades\\Lang::class,\n        'Log'          => Illuminate\\Support\\Facades\\Log::class,\n        'Mail'         => Illuminate\\Support\\Facades\\Mail::class,\n        'Notification' => Illuminate\\Support\\Facades\\Notification::class,\n        'Password'     => Illuminate\\Support\\Facades\\Password::class,\n        'Queue'        => Illuminate\\Support\\Facades\\Queue::class,\n        'Redirect'     => Illuminate\\Support\\Facades\\Redirect::class,\n        'Redis'        => Illuminate\\Support\\Facades\\Redis::class,\n        'Request'      => Illuminate\\Support\\Facades\\Request::class,\n        'Response'     => Illuminate\\Support\\Facades\\Response::class,\n        'Route'        => Illuminate\\Support\\Facades\\Route::class,\n        'Schema'       => Illuminate\\Support\\Facades\\Schema::class,\n        'Session'      => Illuminate\\Support\\Facades\\Session::class,\n        'Storage'      => Illuminate\\Support\\Facades\\Storage::class,\n        'Str'          => Illuminate\\Support\\Str::class,\n        'URL'          => Illuminate\\Support\\Facades\\URL::class,\n        'Validator'    => Illuminate\\Support\\Facades\\Validator::class,\n        'View'         => Illuminate\\Support\\Facades\\View::class,\n        'Socialite'    => Laravel\\Socialite\\Facades\\Socialite::class,\n\n        // Third Party\n        'ImageTool' => Intervention\\Image\\Facades\\Image::class,\n        'DomPDF'    => Barryvdh\\DomPDF\\Facade::class,\n        'SnappyPDF' => Barryvdh\\Snappy\\Facades\\SnappyPdf::class,\n\n        // Custom BookStack\n        'Activity'    => BookStack\\Facades\\Activity::class,\n        'Permissions' => BookStack\\Facades\\Permissions::class,\n        'Theme'       => BookStack\\Facades\\Theme::class,\n    ],\n\n    // Proxy configuration\n    'proxies' => env('APP_PROXIES', ''),\n\n];\n", "<?php\n\n/**\n * DOMPDF configuration options.\n *\n * Changes to these config files are not supported by BookStack and may break upon updates.\n * Configuration should be altered via the `.env` file or environment variables.\n * Do not edit this file unless you're happy to maintain any changes yourself.\n */\n\nreturn [\n\n    'show_warnings' => false,   // Throw an Exception on warnings from dompdf\n    'orientation'   => 'portrait',\n    'defines'       => [\n        /**\n         * The location of the DOMPDF font directory.\n         *\n         * The location of the directory where DOMPDF will store fonts and font metrics\n         * Note: This directory must exist and be writable by the webserver process.\n         * *Please note the trailing slash.*\n         *\n         * Notes regarding fonts:\n         * Additional .afm font metrics can be added by executing load_font.php from command line.\n         *\n         * Only the original \"Base 14 fonts\" are present on all pdf viewers. Additional fonts must\n         * be embedded in the pdf file or the PDF may not display correctly. This can significantly\n         * increase file size unless font subsetting is enabled. Before embedding a font please\n         * review your rights under the font license.\n         *\n         * Any font specification in the source HTML is translated to the closest font available\n         * in the font directory.\n         *\n         * The pdf standard \"Base 14 fonts\" are:\n         * Courier, Courier-Bold, Courier-BoldOblique, Courier-Oblique,\n         * Helvetica, Helvetica-Bold, Helvetica-BoldOblique, Helvetica-Oblique,\n         * Times-Roman, Times-Bold, Times-BoldItalic, Times-Italic,\n         * Symbol, ZapfDingbats.\n         */\n        'font_dir' => storage_path('fonts/'),  // advised by dompdf (https://github.com/dompdf/dompdf/pull/782)\n\n        /**\n         * The location of the DOMPDF font cache directory.\n         *\n         * This directory contains the cached font metrics for the fonts used by DOMPDF.\n         * This directory can be the same as DOMPDF_FONT_DIR\n         *\n         * Note: This directory must exist and be writable by the webserver process.\n         */\n        'font_cache' => storage_path('fonts/'),\n\n        /**\n         * The location of a temporary directory.\n         *\n         * The directory specified must be writeable by the webserver process.\n         * The temporary directory is required to download remote images and when\n         * using the PFDLib back end.\n         */\n        'temp_dir' => sys_get_temp_dir(),\n\n        /**\n         * ==== IMPORTANT ====.\n         *\n         * dompdf's \"chroot\": Prevents dompdf from accessing system files or other\n         * files on the webserver.  All local files opened by dompdf must be in a\n         * subdirectory of this directory.  DO NOT set it to '/' since this could\n         * allow an attacker to use dompdf to read any files on the server.  This\n         * should be an absolute path.\n         * This is only checked on command line call by dompdf.php, but not by\n         * direct class use like:\n         * $dompdf = new DOMPDF();  $dompdf->load_html($htmldata); $dompdf->render(); $pdfdata = $dompdf->output();\n         */\n        'chroot' => realpath(base_path()),\n\n        /**\n         * Whether to use Unicode fonts or not.\n         *\n         * When set to true the PDF backend must be set to \"CPDF\" and fonts must be\n         * loaded via load_font.php.\n         *\n         * When enabled, dompdf can support all Unicode glyphs. Any glyphs used in a\n         * document must be present in your fonts, however.\n         */\n        'unicode_enabled' => true,\n\n        /**\n         * Whether to enable font subsetting or not.\n         */\n        'enable_fontsubsetting' => false,\n\n        /**\n         * The PDF rendering backend to use.\n         *\n         * Valid settings are 'PDFLib', 'CPDF' (the bundled R&OS PDF class), 'GD' and\n         * 'auto'. 'auto' will look for PDFLib and use it if found, or if not it will\n         * fall back on CPDF. 'GD' renders PDFs to graphic files. {@link * Canvas_Factory} ultimately determines which rendering class to instantiate\n         * based on this setting.\n         *\n         * Both PDFLib & CPDF rendering backends provide sufficient rendering\n         * capabilities for dompdf, however additional features (e.g. object,\n         * image and font support, etc.) differ between backends.  Please see\n         * {@link PDFLib_Adapter} for more information on the PDFLib backend\n         * and {@link CPDF_Adapter} and lib/class.pdf.php for more information\n         * on CPDF. Also see the documentation for each backend at the links\n         * below.\n         *\n         * The GD rendering backend is a little different than PDFLib and\n         * CPDF. Several features of CPDF and PDFLib are not supported or do\n         * not make any sense when creating image files.  For example,\n         * multiple pages are not supported, nor are PDF 'objects'.  Have a\n         * look at {@link GD_Adapter} for more information.  GD support is\n         * experimental, so use it at your own risk.\n         *\n         * @link http://www.pdflib.com\n         * @link http://www.ros.co.nz/pdf\n         * @link http://www.php.net/image\n         */\n        'pdf_backend' => 'CPDF',\n\n        /**\n         * PDFlib license key.\n         *\n         * If you are using a licensed, commercial version of PDFlib, specify\n         * your license key here.  If you are using PDFlib-Lite or are evaluating\n         * the commercial version of PDFlib, comment out this setting.\n         *\n         * @link http://www.pdflib.com\n         *\n         * If pdflib present in web server and auto or selected explicitely above,\n         * a real license code must exist!\n         */\n        //\"DOMPDF_PDFLIB_LICENSE\" => \"your license key here\",\n\n        /**\n         * html target media view which should be rendered into pdf.\n         * List of types and parsing rules for future extensions:\n         * http://www.w3.org/TR/REC-html40/types.html\n         *   screen, tty, tv, projection, handheld, print, braille, aural, all\n         * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.\n         * Note, even though the generated pdf file is intended for print output,\n         * the desired content might be different (e.g. screen or projection view of html file).\n         * Therefore allow specification of content here.\n         */\n        'default_media_type' => 'print',\n\n        /**\n         * The default paper size.\n         *\n         * North America standard is \"letter\"; other countries generally \"a4\"\n         *\n         * @see CPDF_Adapter::PAPER_SIZES for valid sizes ('letter', 'legal', 'A4', etc.)\n         */\n        'default_paper_size' => 'a4',\n\n        /**\n         * The default font family.\n         *\n         * Used if no suitable fonts can be found. This must exist in the font folder.\n         *\n         * @var string\n         */\n        'default_font' => 'dejavu sans',\n\n        /**\n         * Image DPI setting.\n         *\n         * This setting determines the default DPI setting for images and fonts.  The\n         * DPI may be overridden for inline images by explictly setting the\n         * image's width & height style attributes (i.e. if the image's native\n         * width is 600 pixels and you specify the image's width as 72 points,\n         * the image will have a DPI of 600 in the rendered PDF.  The DPI of\n         * background images can not be overridden and is controlled entirely\n         * via this parameter.\n         *\n         * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).\n         * If a size in html is given as px (or without unit as image size),\n         * this tells the corresponding size in pt.\n         * This adjusts the relative sizes to be similar to the rendering of the\n         * html page in a reference browser.\n         *\n         * In pdf, always 1 pt = 1/72 inch\n         *\n         * Rendering resolution of various browsers in px per inch:\n         * Windows Firefox and Internet Explorer:\n         *   SystemControl->Display properties->FontResolution: Default:96, largefonts:120, custom:?\n         * Linux Firefox:\n         *   about:config *resolution: Default:96\n         *   (xorg screen dimension in mm and Desktop font dpi settings are ignored)\n         *\n         * Take care about extra font/image zoom factor of browser.\n         *\n         * In images, <img> size in pixel attribute, img css style, are overriding\n         * the real image dimension in px for rendering.\n         *\n         * @var int\n         */\n        'dpi' => 96,\n\n        /**\n         * Enable inline PHP.\n         *\n         * If this setting is set to true then DOMPDF will automatically evaluate\n         * inline PHP contained within <script type=\"text/php\"> ... </script> tags.\n         *\n         * Enabling this for documents you do not trust (e.g. arbitrary remote html\n         * pages) is a security risk.  Set this option to false if you wish to process\n         * untrusted documents.\n         *\n         * @var bool\n         */\n        'enable_php' => false,\n\n        /**\n         * Enable inline Javascript.\n         *\n         * If this setting is set to true then DOMPDF will automatically insert\n         * JavaScript code contained within <script type=\"text/javascript\"> ... </script> tags.\n         *\n         * @var bool\n         */\n        'enable_javascript' => false,\n\n        /**\n         * Enable remote file access.\n         *\n         * If this setting is set to true, DOMPDF will access remote sites for\n         * images and CSS files as required.\n         * This is required for part of test case www/test/image_variants.html through www/examples.php\n         *\n         * Attention!\n         * This can be a security risk, in particular in combination with DOMPDF_ENABLE_PHP and\n         * allowing remote access to dompdf.php or on allowing remote html code to be passed to\n         * $dompdf = new DOMPDF(, $dompdf->load_html(...,\n         * This allows anonymous users to download legally doubtful internet content which on\n         * tracing back appears to being downloaded by your server, or allows malicious php code\n         * in remote html pages to be executed by your server with your account privileges.\n         *\n         * @var bool\n         */\n        'enable_remote' => env('ALLOW_UNTRUSTED_SERVER_FETCHING', false),\n\n        /**\n         * A ratio applied to the fonts height to be more like browsers' line height.\n         */\n        'font_height_ratio' => 1.1,\n\n        /**\n         * Enable CSS float.\n         *\n         * Allows people to disabled CSS float support\n         *\n         * @var bool\n         */\n        'enable_css_float' => true,\n\n        /**\n         * Use the more-than-experimental HTML5 Lib parser.\n         */\n        'enable_html5parser' => true,\n\n    ],\n\n];\n", "<?php\n\nnamespace BookStack\\Entities\\Tools;\n\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\Markdown\\HtmlToMarkdown;\nuse BookStack\\Uploads\\ImageService;\nuse DomPDF;\nuse Exception;\nuse SnappyPDF;\nuse Throwable;\n\nclass ExportFormatter\n{\n    protected $imageService;\n\n    /**\n     * ExportService constructor.\n     */\n    public function __construct(ImageService $imageService)\n    {\n        $this->imageService = $imageService;\n    }\n\n    /**\n     * Convert a page to a self-contained HTML file.\n     * Includes required CSS & image content. Images are base64 encoded into the HTML.\n     *\n     * @throws Throwable\n     */\n    public function pageToContainedHtml(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $pageHtml = view('pages.export', [\n            'page'   => $page,\n            'format' => 'html',\n        ])->render();\n\n        return $this->containHtml($pageHtml);\n    }\n\n    /**\n     * Convert a chapter to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToContainedHtml(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'html',\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a book to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function bookToContainedHtml(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'html',\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a page to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function pageToPdf(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $html = view('pages.export', [\n            'page'   => $page,\n            'format' => 'pdf',\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a chapter to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToPdf(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'pdf',\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a book to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function bookToPdf(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'pdf',\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert normal web-page HTML to a PDF.\n     *\n     * @throws Exception\n     */\n    protected function htmlToPdf(string $html): string\n    {\n        $containedHtml = $this->containHtml($html);\n        $useWKHTML = config('snappy.pdf.binary') !== false && config('app.allow_untrusted_server_fetching') === true;\n        if ($useWKHTML) {\n            $pdf = SnappyPDF::loadHTML($containedHtml);\n            $pdf->setOption('print-media-type', true);\n        } else {\n            $pdf = DomPDF::loadHTML($containedHtml);\n        }\n\n        return $pdf->output();\n    }\n\n    /**\n     * Bundle of the contents of a html file to be self-contained.\n     *\n     * @throws Exception\n     */\n    protected function containHtml(string $htmlContent): string\n    {\n        $imageTagsOutput = [];\n        preg_match_all(\"/\\<img.*?src\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $imageTagsOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($imageTagsOutput[0]) && count($imageTagsOutput[0]) > 0) {\n            foreach ($imageTagsOutput[0] as $index => $imgMatch) {\n                $oldImgTagString = $imgMatch;\n                $srcString = $imageTagsOutput[2][$index];\n                $imageEncoded = $this->imageService->imageUriToBase64($srcString);\n                if ($imageEncoded === null) {\n                    $imageEncoded = $srcString;\n                }\n                $newImgTagString = str_replace($srcString, $imageEncoded, $oldImgTagString);\n                $htmlContent = str_replace($oldImgTagString, $newImgTagString, $htmlContent);\n            }\n        }\n\n        $linksOutput = [];\n        preg_match_all(\"/\\<a.*href\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $linksOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($linksOutput[0]) && count($linksOutput[0]) > 0) {\n            foreach ($linksOutput[0] as $index => $linkMatch) {\n                $oldLinkString = $linkMatch;\n                $srcString = $linksOutput[2][$index];\n                if (strpos(trim($srcString), 'http') !== 0) {\n                    $newSrcString = url($srcString);\n                    $newLinkString = str_replace($srcString, $newSrcString, $oldLinkString);\n                    $htmlContent = str_replace($oldLinkString, $newLinkString, $htmlContent);\n                }\n            }\n        }\n\n        // Replace any relative links with system domain\n        return $htmlContent;\n    }\n\n    /**\n     * Converts the page contents into simple plain text.\n     * This method filters any bad looking content to provide a nice final output.\n     */\n    public function pageToPlainText(Page $page): string\n    {\n        $html = (new PageContent($page))->render();\n        $text = strip_tags($html);\n        // Replace multiple spaces with single spaces\n        $text = preg_replace('/\\ {2,}/', ' ', $text);\n        // Reduce multiple horrid whitespace characters.\n        $text = preg_replace('/(\\x0A|\\xA0|\\x0A|\\r|\\n){2,}/su', \"\\n\\n\", $text);\n        $text = html_entity_decode($text);\n        // Add title\n        $text = $page->name . \"\\n\\n\" . $text;\n\n        return $text;\n    }\n\n    /**\n     * Convert a chapter into a plain text string.\n     */\n    public function chapterToPlainText(Chapter $chapter): string\n    {\n        $text = $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->getVisiblePages() as $page) {\n            $text .= $this->pageToPlainText($page);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToPlainText(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, false);\n        $text = $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild->isA('chapter')) {\n                $text .= $this->chapterToPlainText($bookChild);\n            } else {\n                $text .= $this->pageToPlainText($bookChild);\n            }\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a page to a Markdown file.\n     */\n    public function pageToMarkdown(Page $page): string\n    {\n        if ($page->markdown) {\n            return '# ' . $page->name . \"\\n\\n\" . $page->markdown;\n        }\n\n        return '# ' . $page->name . \"\\n\\n\" . (new HtmlToMarkdown($page->html))->convert();\n    }\n\n    /**\n     * Convert a chapter to a Markdown file.\n     */\n    public function chapterToMarkdown(Chapter $chapter): string\n    {\n        $text = '# ' . $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->pages as $page) {\n            $text .= $this->pageToMarkdown($page) . \"\\n\\n\";\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToMarkdown(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $text = '# ' . $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild instanceof Chapter) {\n                $text .= $this->chapterToMarkdown($bookChild);\n            } else {\n                $text .= $this->pageToMarkdown($bookChild);\n            }\n        }\n\n        return $text;\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">app/</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Application Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <server name=\"APP_ENV\" value=\"testing\"/>\n    <server name=\"APP_DEBUG\" value=\"false\"/>\n    <server name=\"APP_LANG\" value=\"en\"/>\n    <server name=\"APP_THEME\" value=\"none\"/>\n    <server name=\"APP_AUTO_LANG_PUBLIC\" value=\"true\"/>\n    <server name=\"APP_URL\" value=\"http://bookstack.dev\"/>\n    <server name=\"ALLOWED_IFRAME_HOSTS\" value=\"\"/>\n    <server name=\"CACHE_DRIVER\" value=\"array\"/>\n    <server name=\"SESSION_DRIVER\" value=\"array\"/>\n    <server name=\"QUEUE_CONNECTION\" value=\"sync\"/>\n    <server name=\"DB_CONNECTION\" value=\"mysql_testing\"/>\n    <server name=\"BCRYPT_ROUNDS\" value=\"4\"/>\n    <server name=\"MAIL_DRIVER\" value=\"array\"/>\n    <server name=\"LOG_CHANNEL\" value=\"single\"/>\n    <server name=\"AUTH_METHOD\" value=\"standard\"/>\n    <server name=\"DISABLE_EXTERNAL_SERVICES\" value=\"true\"/>\n    <server name=\"ALLOW_UNTRUSTED_SERVER_FETCHING\" value=\"false\"/>\n    <server name=\"AVATAR_URL\" value=\"\"/>\n    <server name=\"LDAP_START_TLS\" value=\"false\"/>\n    <server name=\"LDAP_VERSION\" value=\"3\"/>\n    <server name=\"SESSION_SECURE_COOKIE\" value=\"null\"/>\n    <server name=\"STORAGE_TYPE\" value=\"local\"/>\n    <server name=\"STORAGE_ATTACHMENT_TYPE\" value=\"local\"/>\n    <server name=\"STORAGE_IMAGE_TYPE\" value=\"local\"/>\n    <server name=\"GITHUB_APP_ID\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GITHUB_APP_SECRET\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GITHUB_AUTO_REGISTER\" value=\"\"/>\n    <server name=\"GITHUB_AUTO_CONFIRM_EMAIL\" value=\"\"/>\n    <server name=\"GOOGLE_APP_ID\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GOOGLE_APP_SECRET\" value=\"aaaaaaaaaaaaaa\"/>\n    <server name=\"GOOGLE_AUTO_REGISTER\" value=\"\"/>\n    <server name=\"GOOGLE_AUTO_CONFIRM_EMAIL\" value=\"\"/>\n    <server name=\"GOOGLE_SELECT_ACCOUNT\" value=\"\"/>\n    <server name=\"DEBUGBAR_ENABLED\" value=\"false\"/>\n    <server name=\"SAML2_ENABLED\" value=\"false\"/>\n    <server name=\"API_REQUESTS_PER_MIN\" value=\"180\"/>\n    <server name=\"LOG_FAILED_LOGIN_MESSAGE\" value=\"\"/>\n    <server name=\"LOG_FAILED_LOGIN_CHANNEL\" value=\"testing\"/>\n    <server name=\"WKHTMLTOPDF\" value=\"false\"/>\n    <server name=\"APP_DEFAULT_DARK_MODE\" value=\"false\"/>\n  </php>\n</phpunit>\n", "<?php\n\nnamespace Tests\\Entity;\n\nuse BookStack\\Auth\\Role;\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Tests\\TestCase;\n\nclass ExportTest extends TestCase\n{\n    public function test_page_text_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.txt\"');\n    }\n\n    public function test_page_pdf_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.pdf\"');\n    }\n\n    public function test_page_html_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.html\"');\n    }\n\n    public function test_book_text_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.txt\"');\n    }\n\n    public function test_book_pdf_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.pdf\"');\n    }\n\n    public function test_book_html_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.html\"');\n    }\n\n    public function test_book_html_export_shows_chapter_descriptions()\n    {\n        $chapterDesc = 'My custom test chapter description ' . Str::random(12);\n        $chapter = Chapter::query()->first();\n        $chapter->description = $chapterDesc;\n        $chapter->save();\n\n        $book = $chapter->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertSee($chapterDesc);\n    }\n\n    public function test_chapter_text_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.txt\"');\n    }\n\n    public function test_chapter_pdf_export()\n    {\n        $chapter = Chapter::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.pdf\"');\n    }\n\n    public function test_chapter_html_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.html\"');\n    }\n\n    public function test_page_html_export_contains_custom_head_if_set()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<style>p{color: red;}</style>';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($customHeadContent);\n    }\n\n    public function test_page_html_export_does_not_break_with_only_comments_in_custom_head()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<!-- A comment -->';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($customHeadContent);\n    }\n\n    public function test_page_html_export_use_absolute_dates()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($page->created_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->created_at->diffForHumans());\n        $resp->assertSee($page->updated_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->updated_at->diffForHumans());\n    }\n\n    public function test_page_export_does_not_include_user_or_revision_links()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee($page->getUrl('/revisions'));\n        $resp->assertDontSee($page->createdBy->getProfileUrl());\n        $resp->assertSee($page->createdBy->name);\n    }\n\n    public function test_page_export_sets_right_data_type_for_svg_embeds()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\">';\n        $page->save();\n\n        $this->asEditor();\n        $resp = $this->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n\n        $resp->assertStatus(200);\n        $resp->assertSee('<img src=\"data:image/svg+xml;base64');\n    }\n\n    public function test_page_image_containment_works_on_multiple_images_within_a_single_line()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test2.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\" class=\"a\"><img src=\"http://localhost/uploads/images/gallery/svg_test2.svg\" class=\"b\">';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test2.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test');\n    }\n\n    public function test_page_export_contained_html_image_fetches_only_run_when_url_points_to_image_upload_folder()\n    {\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\"/>'\n            . '<img src=\"http://localhost/uploads/svg_test.svg\"/>'\n            . '<img src=\"/uploads/svg_test.svg\"/>';\n        $storageDisk = Storage::disk('local');\n        $storageDisk->makeDirectory('uploads/images/gallery');\n        $storageDisk->put('uploads/images/gallery/svg_test.svg', '<svg>good</svg>');\n        $storageDisk->put('uploads/svg_test.svg', '<svg>bad</svg>');\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n\n        $storageDisk->delete('uploads/images/gallery/svg_test.svg');\n        $storageDisk->delete('uploads/svg_test.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test.svg');\n        $resp->assertSee('http://localhost/uploads/svg_test.svg');\n        $resp->assertSee('src=\"/uploads/svg_test.svg\"');\n    }\n\n    public function test_exports_removes_scripts_from_custom_head()\n    {\n        $entities = [\n            Page::query()->first(), Chapter::query()->first(), Book::query()->first(),\n        ];\n        setting()->put('app-custom-head', '<script>window.donkey = \"cat\";</script><style>.my-test-class { color: red; }</style>');\n\n        foreach ($entities as $entity) {\n            $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n            $resp->assertDontSee('window.donkey');\n            $resp->assertDontSee('script');\n            $resp->assertSee('.my-test-class { color: red; }');\n        }\n    }\n\n    public function test_page_export_with_deleted_creator_and_updater()\n    {\n        $user = $this->getViewer(['name' => 'ExportWizardTheFifth']);\n        $page = Page::query()->first();\n        $page->created_by = $user->id;\n        $page->updated_by = $user->id;\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee('ExportWizardTheFifth');\n\n        $user->delete();\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertDontSee('ExportWizardTheFifth');\n    }\n\n    public function test_page_markdown_export()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.md\"');\n    }\n\n    public function test_page_markdown_export_uses_existing_markdown_if_apparent()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '# A header',\n            'html'     => '<h1>Dogcat</h1>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee('A header');\n        $resp->assertDontSee('Dogcat');\n    }\n\n    public function test_page_markdown_export_converts_html_where_no_markdown()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p>Some <strong>bold</strong> text</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\nSome **bold** text\");\n    }\n\n    public function test_page_markdown_export_does_not_convert_callouts()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p class=\"callout info\">Some callout text</p><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n<p class=\\\"callout info\\\">Some callout text</p>\\n\\nAnother line\");\n    }\n\n    public function test_page_markdown_export_handles_bookstacks_wysiwyg_codeblock_format()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1>' . \"\\r\\n\" . '<pre id=\"bkmrk-var-a-%3D-%27cat%27%3B\"><code class=\"language-JavaScript\">var a = \\'cat\\';</code></pre><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n```JavaScript\\nvar a = 'cat';\\n```\\n\\nAnother line\");\n    }\n\n    public function test_chapter_markdown_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($chapter->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_book_markdown_export()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($book->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $book->name);\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_export_option_only_visible_and_accessible_with_permission()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $entities = [$book, $chapter, $page];\n        $user = $this->getViewer();\n        $this->actingAs($user);\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertSee('/export/pdf');\n        }\n\n        /** @var Role $role */\n        $this->removePermissionFromUser($user, 'content-export');\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertDontSee('/export/pdf');\n            $resp = $this->get($entity->getUrl('/export/pdf'));\n            $this->assertPermissionError($resp);\n        }\n    }\n\n    public function test_wkhtmltopdf_only_used_when_allow_untrusted_is_true()\n    {\n        /** @var Page $page */\n        $page = Page::query()->first();\n\n        config()->set('snappy.pdf.binary', '/abc123');\n        config()->set('app.allow_untrusted_server_fetching', false);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200); // Sucessful response with invalid snappy binary indicates dompdf usage.\n\n        config()->set('app.allow_untrusted_server_fetching', true);\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(500); // Bad response indicates wkhtml usage\n    }\n}\n", "<?php\n\nnamespace Tests\\Unit;\n\nuse Illuminate\\Support\\Facades\\Log;\nuse Tests\\TestCase;\n\n/**\n * Class ConfigTest\n * Many of the tests here are to check on tweaks made\n * to maintain backwards compatibility.\n */\nclass ConfigTest extends TestCase\n{\n    public function test_filesystem_images_falls_back_to_storage_type_var()\n    {\n        $this->runWithEnv('STORAGE_TYPE', 'local_secure', function () {\n            $this->checkEnvConfigResult('STORAGE_IMAGE_TYPE', 's3', 'filesystems.images', 's3');\n            $this->checkEnvConfigResult('STORAGE_IMAGE_TYPE', null, 'filesystems.images', 'local_secure');\n        });\n    }\n\n    public function test_filesystem_attachments_falls_back_to_storage_type_var()\n    {\n        $this->runWithEnv('STORAGE_TYPE', 'local_secure', function () {\n            $this->checkEnvConfigResult('STORAGE_ATTACHMENT_TYPE', 's3', 'filesystems.attachments', 's3');\n            $this->checkEnvConfigResult('STORAGE_ATTACHMENT_TYPE', null, 'filesystems.attachments', 'local_secure');\n        });\n    }\n\n    public function test_app_url_blank_if_old_default_value()\n    {\n        $initUrl = 'https://example.com/docs';\n        $oldDefault = 'http://bookstack.dev';\n        $this->checkEnvConfigResult('APP_URL', $initUrl, 'app.url', $initUrl);\n        $this->checkEnvConfigResult('APP_URL', $oldDefault, 'app.url', '');\n    }\n\n    public function test_errorlog_plain_webserver_channel()\n    {\n        // We can't full test this due to it being targeted for the SAPI logging handler\n        // so we just overwrite that component so we can capture the error log output.\n        config()->set([\n            'logging.channels.errorlog_plain_webserver.handler_with' => [0],\n        ]);\n\n        $temp = tempnam(sys_get_temp_dir(), 'bs-test');\n        $original = ini_set('error_log', $temp);\n\n        Log::channel('errorlog_plain_webserver')->info('Aww, look, a cute puppy');\n\n        ini_set('error_log', $original);\n\n        $output = file_get_contents($temp);\n        $this->assertStringContainsString('Aww, look, a cute puppy', $output);\n        $this->assertStringNotContainsString('INFO', $output);\n        $this->assertStringNotContainsString('info', $output);\n        $this->assertStringNotContainsString('testing', $output);\n    }\n\n    public function test_session_cookie_uses_sub_path_from_app_url()\n    {\n        $this->checkEnvConfigResult('APP_URL', 'https://example.com', 'session.path', '/');\n        $this->checkEnvConfigResult('APP_URL', 'https://a.com/b', 'session.path', '/b');\n        $this->checkEnvConfigResult('APP_URL', 'https://a.com/b/d/e', 'session.path', '/b/d/e');\n        $this->checkEnvConfigResult('APP_URL', '', 'session.path', '/');\n    }\n\n    public function test_saml2_idp_authn_context_string_parsed_as_space_separated_array()\n    {\n        $this->checkEnvConfigResult(\n            'SAML2_IDP_AUTHNCONTEXT',\n            'urn:federation:authentication:windows urn:federation:authentication:linux',\n            'saml2.onelogin.security.requestedAuthnContext',\n            ['urn:federation:authentication:windows', 'urn:federation:authentication:linux']\n        );\n    }\n\n    public function test_dompdf_remote_fetching_controlled_by_allow_untrusted_server_fetching_false()\n    {\n        $this->checkEnvConfigResult('ALLOW_UNTRUSTED_SERVER_FETCHING', 'false', 'dompdf.defines.enable_remote', false);\n        $this->checkEnvConfigResult('ALLOW_UNTRUSTED_SERVER_FETCHING', 'true', 'dompdf.defines.enable_remote', true);\n    }\n\n    /**\n     * Set an environment variable of the given name and value\n     * then check the given config key to see if it matches the given result.\n     * Providing a null $envVal clears the variable.\n     *\n     * @param mixed $expectedResult\n     */\n    protected function checkEnvConfigResult(string $envName, ?string $envVal, string $configKey, $expectedResult)\n    {\n        $this->runWithEnv($envName, $envVal, function () use ($configKey, $expectedResult) {\n            $this->assertEquals($expectedResult, config($configKey));\n        });\n    }\n}\n"], "filenames": [".env.example.complete", "app/Config/app.php", "app/Config/dompdf.php", "app/Entities/Tools/ExportFormatter.php", "phpunit.xml", "tests/Entity/ExportTest.php", "tests/Unit/ConfigTest.php"], "buggy_code_start_loc": [283, 37, 40, 143, 39, 368, 78], "buggy_code_end_loc": [283, 37, 260, 144, 39, 368, 78], "fixing_code_start_loc": [284, 38, 40, 143, 40, 369, 79], "fixing_code_end_loc": [290, 43, 260, 144, 41, 385, 85], "type": "CWE-918", "message": "bookstack is vulnerable to Server-Side Request Forgery (SSRF)", "other": {"cve": {"id": "CVE-2021-3758", "sourceIdentifier": "security@huntr.dev", "published": "2021-09-02T12:15:07.693", "lastModified": "2021-09-10T18:05:03.760", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "bookstack is vulnerable to Server-Side Request Forgery (SSRF)"}, {"lang": "es", "value": "bookstack es vulnerable a un ataque de tipo Server-Side Request Forgery (SSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bookstackapp:bookstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.08", "matchCriteriaId": "0F6C91A0-C3AC-4716-8525-B0EFC23668F1"}]}]}], "references": [{"url": "https://github.com/bookstackapp/bookstack/commit/bee5e2c7ca637d034c6985c0328cef0ce068778e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a8d7fb24-9a69-42f3-990a-2db93b53f76b", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bookstackapp/bookstack/commit/bee5e2c7ca637d034c6985c0328cef0ce068778e"}}