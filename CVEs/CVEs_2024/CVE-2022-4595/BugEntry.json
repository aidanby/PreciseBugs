{"buggy_code": ["from rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework.renderers import (\n    TemplateHTMLRenderer,\n    JSONRenderer,\n    BrowsableAPIRenderer,\n)\nfrom rest_framework.views import APIView\nfrom rest_framework.decorators import api_view, renderer_classes, permission_classes\n\nfrom rest_framework_csv.renderers import CSVRenderer\n\nfrom django.db.models.aggregates import Count\nfrom django.http import HttpResponse\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.auth import get_user_model\nfrom django.apps import apps\nfrom django.db.models import Q, F\nfrom django.utils import timezone\n\nfrom openipam.hosts.models import Host\nfrom openipam.report.models import Ports\nfrom openipam.report.models import database_connect, database_close\nfrom openipam.network.models import Network, Lease, Address\nfrom openipam.dns.models import DnsRecord\nfrom openipam.conf.ipam_settings import CONFIG, CONFIG_DEFAULTS\nfrom openipam.conf.settings import get_buildingmap_data\n\nfrom functools import reduce\n\nfrom guardian.models import UserObjectPermission, GroupObjectPermission\n\nimport copy\n\nimport qsstats\n\nimport operator\n\nfrom netaddr import IPNetwork\n\nimport requests\n\nimport itertools\n\nfrom tempfile import TemporaryFile\n\nfrom datetime import datetime, timedelta\n\nfrom collections import OrderedDict\n\nUser = get_user_model()\n\n\nclass LeaseUsageView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, TemplateHTMLRenderer, JSONRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        network_blocks = request.GET.get(\"network_blocks\")\n        network_tags = request.GET.get(\"network_tags\")\n        by_router = request.GET.get(\"by_router\")\n        exclude_free = request.GET.get(\"exclude_free\")\n\n        if network_blocks:\n            show_blocks = \"&\".join(\n                [\"show_blocks=%s\" % n for n in network_blocks.split(\",\")]\n            )\n            url = \"https://gul.usu.edu/subnetparser.py?format=json&%s\" % show_blocks\n            lease_data = requests.get(\n                url, auth=(\"django-openipam\", \"ZEraWDJ1aSLsYmzvqhUT2ZL4z2xpA9Yt\")\n            )\n        elif network_tags:\n            network_tags = network_tags.split(\",\")\n            networks = Network.objects.filter(dhcp_group__name__in=network_tags)\n            show_blocks = \"&\".join(\n                [\"show_blocks=%s\" % str(n.network) for n in networks]\n            )\n            url = \"https://gul.usu.edu/subnetparser.py?format=json&%s\" % show_blocks\n            lease_data = requests.get(\n                url, auth=(\"django-openipam\", \"ZEraWDJ1aSLsYmzvqhUT2ZL4z2xpA9Yt\")\n            )\n        else:\n            lease_data = requests.get(\n                \"https://gul.usu.edu/subnetparser.py?format=json\",\n                auth=(\"django-openipam\", \"ZEraWDJ1aSLsYmzvqhUT2ZL4z2xpA9Yt\"),\n            )\n\n        try:\n            lease_data = lease_data.json()\n        except ValueError:\n            return HttpResponse(\n                \"Error parsing JSON from GUL\",\n                status=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            )\n\n        for ld in lease_data:\n            if ld[\"router\"] is None:\n                ld[\"router\"] = \"\"\n        lease_data = sorted(\n            lease_data, key=lambda k: (k[\"router\"], IPNetwork(k[\"network\"]))\n        )\n\n        def get_ratio(available, total):\n            ratio = 1\n            if total != 0:\n                ratio = available * 1.0 / total\n            else:\n                ratio = None\n            return ratio\n\n        def color(ratio):\n            # Convert a number in the range [0,1] to an HTML color code\n            if ratio is None:\n                return \"#77f\"\n            if ratio < 0:\n                ratio = 0\n            if ratio > 1:\n                ratio = 1\n\n            r = ratio * 2.0 - 1\n            g = ratio * 2.0\n\n            if r < 0.0:\n                r = 0.0\n            if g > 1.0:\n                g = 1.0\n\n            rgb = (int((1 - r) * 255), int(g * 255), 0)\n            color = \"#%02x%02x%02x\" % rgb\n            return color\n\n        if not by_router:\n            for item in lease_data:\n                network = IPNetwork(item[\"network\"])\n                child = item\n\n                if \"usage\" in item:\n                    child[\"ratio\"] = get_ratio(\n                        item[\"usage\"][\"available\"], item[\"usage\"][\"dynamic\"]\n                    )\n                    child[\"utilized\"] = (\n                        int((1 - child[\"ratio\"]) * 100)\n                        if child[\"ratio\"] is not None\n                        else 0\n                    )\n                else:\n                    child[\"ratio\"] = 1\n                    child[\"utilized\"] = 0\n\n                if \"ratio\" in item:\n                    child[\"style\"] = color(child[\"ratio\"])\n                else:\n                    child[\"style\"] = \"#77f\"\n\n                child[\"size\"] = network.size\n                if network.prefixlen >= 28:\n                    child[\"size_width\"] = 50\n                else:\n                    child[\"size_width\"] = (32 - 4 - network.prefixlen) ** 1.5 * 20 + 50\n\n            lease_data = sorted(\n                lease_data,\n                key=lambda x: float(x[\"ratio\"]) if x[\"ratio\"] is not None else 1.1,\n            )\n\n            if request.accepted_renderer.format == \"html\":\n                context = {\"lease_data\": lease_data, \"excluded_keys\": [\"style\"]}\n                return Response(context, template_name=\"api/web/lease_usage.html\")\n            else:\n                return Response(\n                    lease_data,\n                    status=status.HTTP_200_OK,\n                    template_name=\"api/web/lease_usage.html\",\n                )\n\n        grouped_lease_data = {\"name\": \"routers\", \"children\": [], \"style\": \"#000033\"}\n\n        for key, group in itertools.groupby(lease_data, lambda item: item[\"router\"]):\n\n            if exclude_free and key is None:\n                continue\n\n            router = {\n                \"name\": key.replace(\".gw.usu.edu\", \"\") if key is not None else \"FREE\",\n                \"children\": [],\n            }\n\n            for item in group:\n                network = IPNetwork(item[\"network\"])\n                child = item\n\n                if \"usage\" in item:\n                    child[\"ratio\"] = get_ratio(\n                        item[\"usage\"][\"available\"], item[\"usage\"][\"dynamic\"]\n                    )\n                else:\n                    child[\"ratio\"] = 1\n\n                # if key is not None:\n                if \"ratio\" in item:\n                    child[\"style\"] = color(child[\"ratio\"])\n                else:\n                    child[\"style\"] = \"#77f\"\n\n                child[\"name\"] = item[\"network\"]\n                child[\"desc\"] = item[\"portdesc\"]\n                child[\"size\"] = network.size\n                child[\"value\"] = network.size if network.size > 256 else 256\n                del child[\"router\"]\n\n                router[\"children\"].append(child)\n\n            grouped_lease_data[\"children\"].append(router)\n\n        return Response(\n            grouped_lease_data,\n            status=status.HTTP_200_OK,\n            template_name=\"api/web/lease_usage.html\",\n        )\n\n\nclass LeaseGraphView(APIView):\n    permission_classes = (AllowAny,)\n\n    def get(self, request, network, format=None, **kwargs):\n        time = request.GET.get(\"length_back\", \"-4weeks\")\n        parsed_network = network.replace(\"/\", \"_\").replace(\".\", \"-\")\n        params = {\n            \"width\": \"700\",\n            \"height\": \"350\",\n            \"_salt\": \"1414518442.099\",\n            \"areaMode\": \"stacked\",\n            \"from\": time,\n            \"bgcolor\": \"000000\",\n            \"fgcolor\": \"FFFFFF\",\n            \"target\": [\n                'color(aliasByMetric(ipam.leases.%s.reserved),\"purple\")'\n                % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.static),\"orange\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.abandoned),\"red\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.leased),\"yellow\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.expired),\"green\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.unleased),\"blue\")' % parsed_network,\n            ],\n        }\n        req = requests.get(\n            \"http://graphite.ser321.usu.edu:8190/render/\", params=params, stream=True\n        )\n\n        if req.status_code == 200:\n            with TemporaryFile() as f:\n                for chunk in req.iter_content():\n                    f.write(chunk)\n                f.seek(0)\n                return HttpResponse(f, content_type=\"image/png\")\n        else:\n            return HttpResponse(\n                req.reason, status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n\nclass WeatherMapView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, JSONRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        # see http://peewee.readthedocs.org/en/latest/peewee/database.html#error-2006-mysql-server-has-gone-away\n        database_connect()\n\n        result = False\n\n        try:\n            result = self._get(request, format, **kwargs)\n        finally:\n            database_close()\n\n        return result\n\n    def _get(self, request, format=None, **kwargs):\n        if request.query_params.get(\"buildings\", False):\n            data = OrderedDict(copy.deepcopy(get_buildingmap_data().get(\"data\")))\n        else:\n            data = OrderedDict(copy.deepcopy(CONFIG.get(\"WEATHERMAP_DATA\").get(\"data\")))\n\n        all_ports = []\n        for k, v in list(data.items()):\n            all_ports.extend(v[\"id\"])\n\n        ports = Ports.select(Ports).where(Ports.port << all_ports)\n\n        for port in ports:\n            for key, value in list(data.items()):\n                for portid in value[\"id\"]:\n                    if port.port == portid:\n                        value[\"A\"] = value.get(\"A\", 0)\n                        value[\"Z\"] = value.get(\"Z\", 0)\n                        if port.ifoutoctets_rate:\n                            value[\"A\"] += port.ifoutoctets_rate * 8\n                        if port.ifinoctets_rate:\n                            value[\"Z\"] += port.ifinoctets_rate * 8\n                        value[\"speed\"] = (\n                            value.get(\"speed\", 0) + port.ifspeed if port.ifspeed else 0\n                        )\n                        value[\"timestamp\"] = port.poll_time\n                        value[\"poll_frequency\"] = 300\n                        value[\"isUp\"] = bool(port.ifoperstatus == \"up\")\n\n        for key, value in list(data.items()):\n            del value[\"id\"]\n\n        data[\"timestamp\"] = int(datetime.now().strftime(\"%s\"))\n\n        return Response(data, status=status.HTTP_200_OK)\n\n\nclass StatsAPIView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (TemplateHTMLRenderer,)\n\n    def get(self, request, format=None, **kwargs):\n        app = request.GET.get(\"app\")\n        model = request.GET.get(\"model\")\n        column = request.GET.get(\"column\")\n\n        model_klass = apps.get_model(app_label=app, model_name=model)\n        queryset = model_klass.objects.all()\n        qs_stats = qsstats.QuerySetStats(queryset, column, aggregate=Count(\"pk\"))\n\n        xdata = [\"Today\", \"This Week\", \"This Month\"]\n        ydata = [qs_stats.this_day(), qs_stats.this_week(), qs_stats.this_month()]\n\n        extra_serie1 = {\n            \"tooltip\": {\n                \"y_start\": \"\",\n                \"y_end\": \" %s\" % model_klass._meta.verbose_name_plural.title(),\n            }\n        }\n        chartdata = {\"x\": xdata, \"name1\": \"Hosts\", \"y1\": ydata, \"extra1\": extra_serie1}\n        charttype = \"discreteBarChart\"\n        chartcontainer = \"%s_stats\" % model.lower()\n        context = {\n            \"charttype\": charttype,\n            \"chartdata\": chartdata,\n            \"chartcontainer\": chartcontainer,\n            \"extra\": {\n                \"x_is_date\": False,\n                \"x_axis_format\": \"\",\n                \"tag_script_js\": True,\n                \"jquery_on_ready\": False,\n            },\n        }\n\n        return Response(context, template_name=\"api/web/ipam_stats.html\")\n\n\nclass DashboardAPIView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, JSONRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        wireless_networks = Network.objects.filter(\n            dhcp_group__name__in=[\"aruba_wireless\", \"aruba_wireless_eastern\"]\n        )\n        wireless_networks_available_qs = [\n            Q(address__net_contained=network.network) for network in wireless_networks\n        ]\n\n        data = (\n            (\n                \"Static Hosts\",\n                \"%s\"\n                % Host.objects.filter(\n                    addresses__isnull=False, expires__gte=timezone.now()\n                ).count(),\n            ),\n            (\n                \"Dynamic Hosts\",\n                \"%s\"\n                % Host.objects.filter(\n                    pools__isnull=False, expires__gte=timezone.now()\n                ).count(),\n            ),\n            (\n                \"Active Leases\",\n                \"%s\" % Lease.objects.filter(ends__gte=timezone.now()).count(),\n            ),\n            (\"Abandoned Leases\", \"%s\" % Lease.objects.filter(abandoned=True).count()),\n            (\n                \"Networks: (Total / Wireless)\",\n                \"%s / %s\" % (Network.objects.all().count(), wireless_networks.count()),\n            ),\n            (\n                \"Available Wireless Addresses\",\n                Address.objects.filter(\n                    reduce(operator.or_, wireless_networks_available_qs),\n                    leases__ends__lt=timezone.now(),\n                ).count(),\n            ),\n            (\n                \"DNS A Records\",\n                DnsRecord.objects.filter(dns_type__name__in=[\"A\", \"AAAA\"]).count(),\n            ),\n            (\n                \"DNS CNAME Records\",\n                DnsRecord.objects.filter(dns_type__name=\"CNAME\").count(),\n            ),\n            (\"DNS MX Records\", DnsRecord.objects.filter(dns_type__name=\"MX\").count()),\n            (\n                \"Active Users Within 1 Year\",\n                User.objects.filter(\n                    last_login__gte=(timezone.now() - timedelta(days=365))\n                ).count(),\n            ),\n        )\n\n        data = OrderedDict(data)\n\n        return Response(data, status=status.HTTP_200_OK)\n\n\nclass ServerHostCSVRenderer(CSVRenderer):\n    header = [\n        \"hostname\",\n        \"mac\",\n        \"description\",\n        \"master_ip_address\",\n        \"user_owners\",\n        \"group_owners\",\n    ]\n\n\nclass ServerHostView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, JSONRenderer, ServerHostCSVRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        hosts = (\n            Host.objects.prefetch_related(\"addresses\")\n            .filter(\n                structured_attributes__structured_attribute_value__attribute__name=\"nac-profile\",\n                structured_attributes__structured_attribute_value__value__startswith=CONFIG_DEFAULTS[\n                    \"NAC_PROFILE_IS_SERVER_PREFIX\"\n                ],\n            )\n            .annotate(\n                nac_profile=F(\n                    \"structured_attributes__structured_attribute_value__value\"\n                ),\n            )\n        )\n\n        user_perms_prefetch = UserObjectPermission.objects.select_related(\n            \"permission\", \"user\"\n        ).filter(\n            content_type=ContentType.objects.get_for_model(Host),\n            object_pk__in=[str(host.mac) for host in hosts],\n            permission__codename=\"is_owner_host\",\n        )\n        group_perms_prefetch = GroupObjectPermission.objects.select_related(\n            \"permission\", \"group\"\n        ).filter(\n            content_type=ContentType.objects.get_for_model(Host),\n            object_pk__in=[str(host.mac) for host in hosts],\n            permission__codename=\"is_owner_host\",\n        )\n\n        data = []\n        for host in hosts:\n            owners = host.get_owners(\n                name_only=True,\n                user_perms_prefetch=user_perms_prefetch,\n                group_perms_prefetch=group_perms_prefetch,\n            )\n            data.append(\n                {\n                    \"hostname\": host.hostname,\n                    \"mac\": str(host.mac),\n                    \"description\": host.description,\n                    \"master_ip_address\": host.ip_addresses[0]\n                    if host.ip_addresses\n                    else None,\n                    \"user_owners\": \", \".join(owners[0]),\n                    \"group_owners\": \", \".join(owners[1]),\n                    \"nac_profile\": host.nac_profile,\n                }\n            )\n\n        if request.accepted_renderer.format == \"json\":\n            return Response({\"data\": data}, status=status.HTTP_200_OK)\n        else:\n            return Response(data, status=status.HTTP_200_OK)\n\n\n@api_view((\"GET\",))\n@permission_classes((AllowAny,))\n@renderer_classes((JSONRenderer,))\ndef weathermap_config(request):\n    data = copy.deepcopy(CONFIG.get(\"WEATHERMAP_DATA\").get(\"config\"))\n\n    return Response(data)\n\n\n@api_view((\"GET\",))\n@permission_classes((AllowAny,))\n@renderer_classes((JSONRenderer,))\ndef buildingmap_config(request):\n    data = copy.deepcopy(get_buildingmap_data().get(\"config\"))\n\n    return Response(data)\n", "{% extends \"report/base.html\" %} {% load static %} {% block page_title %}Exposed Hosts Report{% endblock %} {% block extrahead %} {{ block.super }}\n<link rel=\"stylesheet\" href=\"{% static 'core/css/dataTables.bootstrap.css' %}\" type=\"text/css\" />\n<link rel=\"stylesheet\" href=\"{% static 'datatables-responsive/css/dataTables.responsive.css' %}\" type=\"text/css\" />\n<style type=\"text/css\">\n  #content {\n    background: #fff;\n    padding: 20px;\n  }\n\n  .dataTables_empty {\n    font-size: 18px;\n    font-weight: bold;\n    background: #fcf8e3;\n  }\n</style>\n\n<script type=\"text/javascript\" src=\"{% static 'datatables/media/js/jquery.dataTables.min.js' %}\"></script>\n<script type=\"text/javascript\" src=\"{% static 'datatables-responsive/js/dataTables.responsive.js' %}\"></script>\n<script type=\"text/javascript\" src=\"{% static 'core/js/dataTables.bootstrap.js' %}\"></script>\n\n<script type=\"text/javascript\">\n  $(function () {\n    $(\"#server_link\").addClass(\"active\");\n    $(\"#reports_dropdown\").addClass(\"active\");\n\n    $(\"#result_list\").DataTable({\n      ajax: \"/api/reports/serverhosts?format=json\",\n      columns: [{\n          data: \"hostname\"\n        },\n        {\n          data: \"mac\"\n        },\n        {\n          data: \"description\",\n          orderable: false\n        },\n        {\n          data: \"master_ip_address\"\n        },\n        {\n          data: \"user_owners\",\n          orderable: false\n        },\n        {\n          data: \"group_owners\",\n          orderable: false\n        },\n        {\n          data: \"nac_profile\",\n          orderable: false\n        },\n      ],\n      paging: false,\n      dom: '<\"paginator\"lpi<\"clear\">>',\n    });\n  });\n</script>\n{% endblock %} {% block content %}\n<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <h1>Exposed Hosts</h1>\n    <div class=\"pull-right large\">\n      <a href=\"{% url 'api_reports_server_hosts' %}?format=csv\">\n        Download Report (CSV)\n      </a>\n    </div>\n    <p>Hosts whose nac-profile starts with \"expose_\".</p>\n    <table id=\"result_list\" class=\"table table-striped table-condensed table-bordered\">\n      <tr>\n        <thead>\n          <th scope=\"col\">Host</th>\n          <th scope=\"col\">Mac Address</th>\n          <th scope=\"col\">Description</th>\n          <th scope=\"col\">IP Address</th>\n          <th scope=\"col\">User Owners</th>\n          <th scope=\"col\">Group Owners</th>\n          <th scope=\"col\">NAC Profile</th>\n        </thead>\n      </tr>\n      <tbody></tbody>\n    </table>\n  </div>\n</div>\n{% endblock %}"], "fixing_code": ["from rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework.renderers import (\n    TemplateHTMLRenderer,\n    JSONRenderer,\n    BrowsableAPIRenderer,\n)\nfrom rest_framework.views import APIView\nfrom rest_framework.decorators import api_view, renderer_classes, permission_classes\n\nfrom rest_framework_csv.renderers import CSVRenderer\n\nfrom django.db import connection\nfrom django.db.models.aggregates import Count\nfrom django.http import HttpResponse\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.models import Permission\nfrom django.apps import apps\nfrom django.db.models import Q\nfrom django.utils import timezone\n\nfrom openipam.hosts.models import Host, Attribute\nfrom openipam.report.models import Ports\nfrom openipam.report.models import database_connect, database_close\nfrom openipam.network.models import Network, Lease, Address\nfrom openipam.dns.models import DnsRecord\nfrom openipam.conf.ipam_settings import CONFIG\nfrom openipam.conf.settings import get_buildingmap_data\n\nfrom functools import reduce\n\nimport copy\n\nimport qsstats\n\nimport operator\n\nfrom netaddr import IPNetwork\n\nimport requests\n\nimport itertools\n\nfrom tempfile import TemporaryFile\n\nfrom datetime import datetime, timedelta\n\nfrom collections import OrderedDict\n\nUser = get_user_model()\n\n\nclass LeaseUsageView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, TemplateHTMLRenderer, JSONRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        network_blocks = request.GET.get(\"network_blocks\")\n        network_tags = request.GET.get(\"network_tags\")\n        by_router = request.GET.get(\"by_router\")\n        exclude_free = request.GET.get(\"exclude_free\")\n\n        if network_blocks:\n            show_blocks = \"&\".join(\n                [\"show_blocks=%s\" % n for n in network_blocks.split(\",\")]\n            )\n            url = \"https://gul.usu.edu/subnetparser.py?format=json&%s\" % show_blocks\n            lease_data = requests.get(\n                url, auth=(\"django-openipam\", \"ZEraWDJ1aSLsYmzvqhUT2ZL4z2xpA9Yt\")\n            )\n        elif network_tags:\n            network_tags = network_tags.split(\",\")\n            networks = Network.objects.filter(dhcp_group__name__in=network_tags)\n            show_blocks = \"&\".join(\n                [\"show_blocks=%s\" % str(n.network) for n in networks]\n            )\n            url = \"https://gul.usu.edu/subnetparser.py?format=json&%s\" % show_blocks\n            lease_data = requests.get(\n                url, auth=(\"django-openipam\", \"ZEraWDJ1aSLsYmzvqhUT2ZL4z2xpA9Yt\")\n            )\n        else:\n            lease_data = requests.get(\n                \"https://gul.usu.edu/subnetparser.py?format=json\",\n                auth=(\"django-openipam\", \"ZEraWDJ1aSLsYmzvqhUT2ZL4z2xpA9Yt\"),\n            )\n\n        try:\n            lease_data = lease_data.json()\n        except ValueError:\n            return HttpResponse(\n                \"Error parsing JSON from GUL\",\n                status=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            )\n\n        for ld in lease_data:\n            if ld[\"router\"] is None:\n                ld[\"router\"] = \"\"\n        lease_data = sorted(\n            lease_data, key=lambda k: (k[\"router\"], IPNetwork(k[\"network\"]))\n        )\n\n        def get_ratio(available, total):\n            ratio = 1\n            if total != 0:\n                ratio = available * 1.0 / total\n            else:\n                ratio = None\n            return ratio\n\n        def color(ratio):\n            # Convert a number in the range [0,1] to an HTML color code\n            if ratio is None:\n                return \"#77f\"\n            if ratio < 0:\n                ratio = 0\n            if ratio > 1:\n                ratio = 1\n\n            r = ratio * 2.0 - 1\n            g = ratio * 2.0\n\n            if r < 0.0:\n                r = 0.0\n            if g > 1.0:\n                g = 1.0\n\n            rgb = (int((1 - r) * 255), int(g * 255), 0)\n            color = \"#%02x%02x%02x\" % rgb\n            return color\n\n        if not by_router:\n            for item in lease_data:\n                network = IPNetwork(item[\"network\"])\n                child = item\n\n                if \"usage\" in item:\n                    child[\"ratio\"] = get_ratio(\n                        item[\"usage\"][\"available\"], item[\"usage\"][\"dynamic\"]\n                    )\n                    child[\"utilized\"] = (\n                        int((1 - child[\"ratio\"]) * 100)\n                        if child[\"ratio\"] is not None\n                        else 0\n                    )\n                else:\n                    child[\"ratio\"] = 1\n                    child[\"utilized\"] = 0\n\n                if \"ratio\" in item:\n                    child[\"style\"] = color(child[\"ratio\"])\n                else:\n                    child[\"style\"] = \"#77f\"\n\n                child[\"size\"] = network.size\n                if network.prefixlen >= 28:\n                    child[\"size_width\"] = 50\n                else:\n                    child[\"size_width\"] = (32 - 4 - network.prefixlen) ** 1.5 * 20 + 50\n\n            lease_data = sorted(\n                lease_data,\n                key=lambda x: float(x[\"ratio\"]) if x[\"ratio\"] is not None else 1.1,\n            )\n\n            if request.accepted_renderer.format == \"html\":\n                context = {\"lease_data\": lease_data, \"excluded_keys\": [\"style\"]}\n                return Response(context, template_name=\"api/web/lease_usage.html\")\n            else:\n                return Response(\n                    lease_data,\n                    status=status.HTTP_200_OK,\n                    template_name=\"api/web/lease_usage.html\",\n                )\n\n        grouped_lease_data = {\"name\": \"routers\", \"children\": [], \"style\": \"#000033\"}\n\n        for key, group in itertools.groupby(lease_data, lambda item: item[\"router\"]):\n\n            if exclude_free and key is None:\n                continue\n\n            router = {\n                \"name\": key.replace(\".gw.usu.edu\", \"\") if key is not None else \"FREE\",\n                \"children\": [],\n            }\n\n            for item in group:\n                network = IPNetwork(item[\"network\"])\n                child = item\n\n                if \"usage\" in item:\n                    child[\"ratio\"] = get_ratio(\n                        item[\"usage\"][\"available\"], item[\"usage\"][\"dynamic\"]\n                    )\n                else:\n                    child[\"ratio\"] = 1\n\n                # if key is not None:\n                if \"ratio\" in item:\n                    child[\"style\"] = color(child[\"ratio\"])\n                else:\n                    child[\"style\"] = \"#77f\"\n\n                child[\"name\"] = item[\"network\"]\n                child[\"desc\"] = item[\"portdesc\"]\n                child[\"size\"] = network.size\n                child[\"value\"] = network.size if network.size > 256 else 256\n                del child[\"router\"]\n\n                router[\"children\"].append(child)\n\n            grouped_lease_data[\"children\"].append(router)\n\n        return Response(\n            grouped_lease_data,\n            status=status.HTTP_200_OK,\n            template_name=\"api/web/lease_usage.html\",\n        )\n\n\nclass LeaseGraphView(APIView):\n    permission_classes = (AllowAny,)\n\n    def get(self, request, network, format=None, **kwargs):\n        time = request.GET.get(\"length_back\", \"-4weeks\")\n        parsed_network = network.replace(\"/\", \"_\").replace(\".\", \"-\")\n        params = {\n            \"width\": \"700\",\n            \"height\": \"350\",\n            \"_salt\": \"1414518442.099\",\n            \"areaMode\": \"stacked\",\n            \"from\": time,\n            \"bgcolor\": \"000000\",\n            \"fgcolor\": \"FFFFFF\",\n            \"target\": [\n                'color(aliasByMetric(ipam.leases.%s.reserved),\"purple\")'\n                % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.static),\"orange\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.abandoned),\"red\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.leased),\"yellow\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.expired),\"green\")' % parsed_network,\n                'color(aliasByMetric(ipam.leases.%s.unleased),\"blue\")' % parsed_network,\n            ],\n        }\n        req = requests.get(\n            \"http://graphite.ser321.usu.edu:8190/render/\", params=params, stream=True\n        )\n\n        if req.status_code == 200:\n            with TemporaryFile() as f:\n                for chunk in req.iter_content():\n                    f.write(chunk)\n                f.seek(0)\n                return HttpResponse(f, content_type=\"image/png\")\n        else:\n            return HttpResponse(\n                req.reason, status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n\nclass WeatherMapView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, JSONRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        # see http://peewee.readthedocs.org/en/latest/peewee/database.html#error-2006-mysql-server-has-gone-away\n        database_connect()\n\n        result = False\n\n        try:\n            result = self._get(request, format, **kwargs)\n        finally:\n            database_close()\n\n        return result\n\n    def _get(self, request, format=None, **kwargs):\n        if request.query_params.get(\"buildings\", False):\n            data = OrderedDict(copy.deepcopy(get_buildingmap_data().get(\"data\")))\n        else:\n            data = OrderedDict(copy.deepcopy(CONFIG.get(\"WEATHERMAP_DATA\").get(\"data\")))\n\n        all_ports = []\n        for k, v in list(data.items()):\n            all_ports.extend(v[\"id\"])\n\n        ports = Ports.select(Ports).where(Ports.port << all_ports)\n\n        for port in ports:\n            for key, value in list(data.items()):\n                for portid in value[\"id\"]:\n                    if port.port == portid:\n                        value[\"A\"] = value.get(\"A\", 0)\n                        value[\"Z\"] = value.get(\"Z\", 0)\n                        if port.ifoutoctets_rate:\n                            value[\"A\"] += port.ifoutoctets_rate * 8\n                        if port.ifinoctets_rate:\n                            value[\"Z\"] += port.ifinoctets_rate * 8\n                        value[\"speed\"] = (\n                            value.get(\"speed\", 0) + port.ifspeed if port.ifspeed else 0\n                        )\n                        value[\"timestamp\"] = port.poll_time\n                        value[\"poll_frequency\"] = 300\n                        value[\"isUp\"] = bool(port.ifoperstatus == \"up\")\n\n        for key, value in list(data.items()):\n            del value[\"id\"]\n\n        data[\"timestamp\"] = int(datetime.now().strftime(\"%s\"))\n\n        return Response(data, status=status.HTTP_200_OK)\n\n\nclass StatsAPIView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (TemplateHTMLRenderer,)\n\n    def get(self, request, format=None, **kwargs):\n        app = request.GET.get(\"app\")\n        model = request.GET.get(\"model\")\n        column = request.GET.get(\"column\")\n\n        model_klass = apps.get_model(app_label=app, model_name=model)\n        queryset = model_klass.objects.all()\n        qs_stats = qsstats.QuerySetStats(queryset, column, aggregate=Count(\"pk\"))\n\n        xdata = [\"Today\", \"This Week\", \"This Month\"]\n        ydata = [qs_stats.this_day(), qs_stats.this_week(), qs_stats.this_month()]\n\n        extra_serie1 = {\n            \"tooltip\": {\n                \"y_start\": \"\",\n                \"y_end\": \" %s\" % model_klass._meta.verbose_name_plural.title(),\n            }\n        }\n        chartdata = {\"x\": xdata, \"name1\": \"Hosts\", \"y1\": ydata, \"extra1\": extra_serie1}\n        charttype = \"discreteBarChart\"\n        chartcontainer = \"%s_stats\" % model.lower()\n        context = {\n            \"charttype\": charttype,\n            \"chartdata\": chartdata,\n            \"chartcontainer\": chartcontainer,\n            \"extra\": {\n                \"x_is_date\": False,\n                \"x_axis_format\": \"\",\n                \"tag_script_js\": True,\n                \"jquery_on_ready\": False,\n            },\n        }\n\n        return Response(context, template_name=\"api/web/ipam_stats.html\")\n\n\nclass DashboardAPIView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, JSONRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        wireless_networks = Network.objects.filter(\n            dhcp_group__name__in=[\"aruba_wireless\", \"aruba_wireless_eastern\"]\n        )\n        wireless_networks_available_qs = [\n            Q(address__net_contained=network.network) for network in wireless_networks\n        ]\n\n        data = (\n            (\n                \"Static Hosts\",\n                \"%s\"\n                % Host.objects.filter(\n                    addresses__isnull=False, expires__gte=timezone.now()\n                ).count(),\n            ),\n            (\n                \"Dynamic Hosts\",\n                \"%s\"\n                % Host.objects.filter(\n                    pools__isnull=False, expires__gte=timezone.now()\n                ).count(),\n            ),\n            (\n                \"Active Leases\",\n                \"%s\" % Lease.objects.filter(ends__gte=timezone.now()).count(),\n            ),\n            (\"Abandoned Leases\", \"%s\" % Lease.objects.filter(abandoned=True).count()),\n            (\n                \"Networks: (Total / Wireless)\",\n                \"%s / %s\" % (Network.objects.all().count(), wireless_networks.count()),\n            ),\n            (\n                \"Available Wireless Addresses\",\n                Address.objects.filter(\n                    reduce(operator.or_, wireless_networks_available_qs),\n                    leases__ends__lt=timezone.now(),\n                ).count(),\n            ),\n            (\n                \"DNS A Records\",\n                DnsRecord.objects.filter(dns_type__name__in=[\"A\", \"AAAA\"]).count(),\n            ),\n            (\n                \"DNS CNAME Records\",\n                DnsRecord.objects.filter(dns_type__name=\"CNAME\").count(),\n            ),\n            (\"DNS MX Records\", DnsRecord.objects.filter(dns_type__name=\"MX\").count()),\n            (\n                \"Active Users Within 1 Year\",\n                User.objects.filter(\n                    last_login__gte=(timezone.now() - timedelta(days=365))\n                ).count(),\n            ),\n        )\n\n        data = OrderedDict(data)\n\n        return Response(data, status=status.HTTP_200_OK)\n\n\nclass ServerHostCSVRenderer(CSVRenderer):\n    header = [\n        \"hostname\",\n        \"mac\",\n        \"description\",\n        \"addresses\",\n        \"user_owners\",\n        \"group_owners\",\n        \"nac_profiles\",\n    ]\n\n\nclass ServerHostView(APIView):\n    permission_classes = (AllowAny,)\n    renderer_classes = (BrowsableAPIRenderer, JSONRenderer, ServerHostCSVRenderer)\n\n    def get(self, request, format=None, **kwargs):\n        nac_profile_attribute = Attribute.objects.get(name=\"nac-profile\")\n        host_owner_permission = Permission.objects.get(codename=\"is_owner_host\")\n\n        cursor = connection.cursor()\n        cursor.execute(\n            \"\"\"\n            SELECT hosts.hostname AS hostname,\n                   hosts.mac AS mac,\n                   hosts.description AS description,\n                   STRING_AGG(DISTINCT((SELECT CAST(addresses.address AS VARCHAR))), ', ') AS addresses,\n                   STRING_AGG(DISTINCT(users.username), ', ') AS users,\n                   STRING_AGG(DISTINCT(groups.name), ', ') AS groups,\n                   STRING_AGG(DISTINCT(host_attr_vals.value), ', ') AS nac_profiles\n            FROM hosts\n                JOIN structured_attributes_to_hosts AS host_attrs ON hosts.mac=host_attrs.mac\n                JOIN structured_attribute_values AS host_attr_vals ON host_attrs.avid=host_attr_vals.id\n                LEFT JOIN guardian_userobjectpermission AS uop ON uop.object_pk=(SELECT CAST(hosts.mac AS VARCHAR)) AND uop.permission_id = %s\n                LEFT JOIN guardian_groupobjectpermission AS gop ON gop.object_pk=(SELECT CAST(hosts.mac AS VARCHAR)) AND gop.permission_id=%s\n                LEFT JOIN addresses ON hosts.mac=addresses.mac\n                LEFT JOIN users ON uop.user_id=users.id\n                LEFT JOIN groups ON gop.group_id=groups.id\n            WHERE host_attr_vals.aid = %s\n            AND STARTS_WITH(host_attr_vals.value, %s)\n            GROUP BY hosts.mac, hosts.hostname, hosts.description\n            \"\"\",\n            [\n                host_owner_permission.id,\n                host_owner_permission.id,\n                nac_profile_attribute.id,\n                CONFIG[\"NAC_PROFILE_IS_SERVER_PREFIX\"],\n            ],\n        )\n\n        data = [\n            dict(zip([col[0] for col in cursor.description], row))\n            for row in cursor.fetchall()\n        ]\n\n        if request.accepted_renderer.format == \"json\":\n            return Response({\"data\": data}, status=status.HTTP_200_OK)\n        else:\n            return Response(data, status=status.HTTP_200_OK)\n\n\n@api_view((\"GET\",))\n@permission_classes((AllowAny,))\n@renderer_classes((JSONRenderer,))\ndef weathermap_config(request):\n    data = copy.deepcopy(CONFIG.get(\"WEATHERMAP_DATA\").get(\"config\"))\n\n    return Response(data)\n\n\n@api_view((\"GET\",))\n@permission_classes((AllowAny,))\n@renderer_classes((JSONRenderer,))\ndef buildingmap_config(request):\n    data = copy.deepcopy(get_buildingmap_data().get(\"config\"))\n\n    return Response(data)\n", "{% extends \"report/base.html\" %} {% load static %} {% block page_title %}Exposed Hosts Report{% endblock %} {% block extrahead %} {{ block.super }}\n<link rel=\"stylesheet\" href=\"{% static 'core/css/dataTables.bootstrap.css' %}\" type=\"text/css\" />\n<link rel=\"stylesheet\" href=\"{% static 'datatables-responsive/css/dataTables.responsive.css' %}\" type=\"text/css\" />\n<style type=\"text/css\">\n  #content {\n    background: #fff;\n    padding: 20px;\n  }\n\n  .dataTables_empty {\n    font-size: 18px;\n    font-weight: bold;\n    background: #fcf8e3;\n  }\n</style>\n\n<script type=\"text/javascript\" src=\"{% static 'datatables/media/js/jquery.dataTables.min.js' %}\"></script>\n<script type=\"text/javascript\" src=\"{% static 'datatables-responsive/js/dataTables.responsive.js' %}\"></script>\n<script type=\"text/javascript\" src=\"{% static 'core/js/dataTables.bootstrap.js' %}\"></script>\n\n<script type=\"text/javascript\">\n  const escapeHtml = (t) => $('<div />').text(t).html();  \n\n  $(function () {\n    $(\"#server_link\").addClass(\"active\");\n    $(\"#reports_dropdown\").addClass(\"active\");\n\n    $(\"#result_list\").DataTable({\n      ajax: \"/api/reports/serverhosts?format=json\",\n      columns: [{\n          data: \"hostname\",\n          orderable: true,\n        },\n        {\n          data: \"mac\",\n          orderable: true,\n          render: (t) => `<a href=\"/hosts/${escapeHtml(t).replace(/\\:/g, \"\")}/detail\">${escapeHtml(t)}</a>`,\n        },\n        {\n          data: \"description\",\n          orderable: false,\n          render: escapeHtml,\n        },\n        {\n          data: \"addresses\",\n          orderable: true,\n        },\n        {\n          data: \"users\",\n          orderable: false,\n        },\n        {\n          data: \"groups\",\n          orderable: false,\n        },\n        {\n          data: \"nac_profiles\",\n          orderable: false,\n        },\n      ],\n      paging: false,\n      dom: '<\"paginator\"lpi<\"clear\">>',\n    });\n  });\n</script>\n{% endblock %} {% block content %}\n<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <h1>Exposed Hosts</h1>\n    <div class=\"pull-right large\">\n      <a href=\"{% url 'api_reports_server_hosts' %}?format=csv\">\n        Download Report (CSV)\n      </a>\n    </div>\n    <p>Hosts whose nac-profile starts with \"expose_\".</p>\n    <table id=\"result_list\" class=\"table table-striped table-condensed table-bordered\">\n      <tr>\n        <thead>\n          <th scope=\"col\">Host</th>\n          <th scope=\"col\">Mac Address</th>\n          <th scope=\"col\">Description</th>\n          <th scope=\"col\">IP Address(es)</th>\n          <th scope=\"col\">User Owner(s)</th>\n          <th scope=\"col\">Group Owner(s)</th>\n          <th scope=\"col\">NAC Profile(s)</th>\n        </thead>\n      </tr>\n      <tbody></tbody>\n    </table>\n  </div>\n</div>\n{% endblock %}"], "filenames": ["openipam/api/views/report.py", "openipam/report/templates/report/exposed_hosts.html"], "buggy_code_start_loc": [13, 21], "buggy_code_end_loc": [488, 79], "fixing_code_start_loc": [14, 22], "fixing_code_end_loc": [475, 86], "type": "CWE-707", "message": "A vulnerability classified as problematic has been found in django-openipam. This affects an unknown part of the file openipam/report/templates/report/exposed_hosts.html. The manipulation of the argument description leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is a6223a1150d60cd036106ba6a8e676c1bfc3cc85. It is recommended to apply a patch to fix this issue. The identifier VDB-216189 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4595", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-18T11:15:10.327", "lastModified": "2022-12-22T17:02:16.807", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in django-openipam. This affects an unknown part of the file openipam/report/templates/report/exposed_hosts.html. The manipulation of the argument description leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is a6223a1150d60cd036106ba6a8e676c1bfc3cc85. It is recommended to apply a patch to fix this issue. The identifier VDB-216189 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:django-openipam_project:django-openipam:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-11-11", "matchCriteriaId": "B80E9154-0600-49A7-873A-F37066D1C773"}]}]}], "references": [{"url": "https://github.com/openipam/django-openipam/commit/a6223a1150d60cd036106ba6a8e676c1bfc3cc85", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openipam/django-openipam/pull/205", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216189", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openipam/django-openipam/commit/a6223a1150d60cd036106ba6a8e676c1bfc3cc85"}}