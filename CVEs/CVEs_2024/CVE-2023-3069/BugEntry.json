{"buggy_code": ["<?php\n/*************************************************************************************************\n * Copyright 2015 JPL TSolucio, S.L. -- This file is a part of TSOLUCIO coreBOS customizations.\n * You can copy, adapt and distribute the work under the \"Attribution-NonCommercial-ShareAlike\"\n * Vizsage Public License (the \"License\"). You may not use this file except in compliance with the\n * License. Roughly speaking, non-commercial users may share and modify this code, but must give credit\n * and share improvements. However, for proper details please read the full License, available at\n * http://vizsage.com/license/Vizsage-License-BY-NC-SA.html and the handy reference for understanding\n * the full license at http://vizsage.com/license/Vizsage-Deed-BY-NC-SA.html. Unless required by\n * applicable law or agreed to in writing, any software distributed under the License is distributed\n * on an  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the\n * License terms of Creative Commons Attribution-NonCommercial-ShareAlike 3.0 (the License).\n *************************************************************************************************\n *  Version      : 1.0\n *  Author       : JPL TSolucio, S. L.\n *************************************************************************************************/\nrequire_once 'include/utils/utils.php';\ninclude_once 'vtlib/Vtiger/Link.php';\nrequire_once 'include/ListView/ListViewGrid.php';\nglobal $adb, $log, $current_user;\n\n$functiontocall = vtlib_purify($_REQUEST['functiontocall']);\n\nswitch ($functiontocall) {\n\tcase 'getFieldAutocomplete':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$searchinmodule = vtlib_purify($_REQUEST['searchinmodule']);\n\t\t$fields = vtlib_purify($_REQUEST['fields']);\n\t\t$returnfields = vtlib_purify($_REQUEST['returnfields']);\n\t\t$limit = vtlib_purify($_REQUEST['limit']);\n\t\t$filter = vtlib_purify($_REQUEST['filter']);\n\t\tif (is_array($filter)) {\n\t\t\t// Filter array format looks like this:\n\t\t\t/**************************************\n\t\t\t[filter] => Array(\n\t\t\t\t[logic] => and\n\t\t\t\t[filters] => Array(\n\t\t\t\t\t[0] => Array(\n\t\t\t\t\t\t[value] => {value to search}\n\t\t\t\t\t\t[operator] => startswith\n\t\t\t\t\t\t[field] => crmname\n\t\t\t\t\t\t[ignoreCase] => true\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t\t***************************************/\n\t\t\t$term = $filter['filters'][0]['value'];\n\t\t\t$op = isset($filter['filters'][0]['operator']) ? $filter['filters'][0]['operator'] : 'startswith';\n\t\t} else {\n\t\t\t$term = vtlib_purify($_REQUEST['term']);\n\t\t\t$op = empty($filter) ? 'startswith' : $filter;\n\t\t}\n\t\t$retvals = getFieldAutocomplete($term, $op, $searchinmodule, $fields, $returnfields, $limit, $current_user);\n\t\t$ret = array();\n\t\tforeach ($retvals as $value) {\n\t\t\t$ret[] = array('crmid'=>$value['crmid'],'crmname'=>implode(',', $value['crmfields']));\n\t\t}\n\t\tbreak;\n\tcase 'getReferenceAutocomplete':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$searchinmodule = vtlib_purify($_REQUEST['searchinmodule']);\n\t\t$limit = vtlib_purify($_REQUEST['limit']);\n\t\t$filter = vtlib_purify($_REQUEST['filter']);\n\t\tif (is_array($filter)) {\n\t\t\t$term = $filter['filters'][0]['value'];\n\t\t\t$op = isset($filter['filters'][0]['operator']) ? $filter['filters'][0]['operator'] : 'startswith';\n\t\t} else {\n\t\t\t$term = vtlib_purify($_REQUEST['term']);\n\t\t\t$op = empty($filter) ? 'startswith' : $filter;\n\t\t}\n\t\t$ret = getReferenceAutocomplete($term, $op, $searchinmodule, $limit, $current_user);\n\t\tbreak;\n\tcase 'getProductServiceAutocomplete':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$limit = isset($_REQUEST['limit']) ? $_REQUEST['limit'] : 5;\n\t\t$ret = getProductServiceAutocomplete($_REQUEST['term'], array(), $limit);\n\t\tbreak;\n\tcase 'getEntityName':\n\t\t$ret = '';\n\t\t$crmid = vtlib_purify($_REQUEST['getNameFrom']);\n\t\tif (!empty($crmid)) {\n\t\t\t$ename = getEntityName(getSalesEntityType($crmid), $crmid);\n\t\t\t$ret = $ename[$crmid];\n\t\t}\n\t\tbreak;\n\tcase 'getFieldValuesFromRecord':\n\t\t$ret = array();\n\t\t$crmid = vtlib_purify($_REQUEST['getFieldValuesFrom']);\n\t\tif (!empty($crmid)) {\n\t\t\t$module = getSalesEntityType($crmid);\n\t\t\t$fields = vtlib_purify($_REQUEST['getTheseFields']);\n\t\t\t$fields = explode(',', $fields);\n\t\t\t$queryGenerator = new QueryGenerator($module, $current_user);\n\t\t\t$queryGenerator->setFields($fields);\n\t\t\t$queryGenerator->addCondition('id', $crmid, 'e');\n\t\t\t$query = $queryGenerator->getQuery();\n\t\t\t$queryres=$adb->pquery($query, array());\n\t\t\tif ($adb->num_rows($queryres)>0) {\n\t\t\t\t$col=0;\n\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t$ret[$field]=$adb->query_result($queryres, 0, $col++);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getFieldValuesFromRecordRecursively':\n\t\t$moduleName = vtlib_purify($_REQUEST['moduleName']);\n\t\t$value = vtlib_purify($_REQUEST['value']);\n\t\t$fieldsArray = explode('.', $value);\n\t\t// remove all $ signs\n\t\tarray_walk($fieldsArray, function (&$item, $key) {\n\t\t\t$item = substr($item, 1);\n\t\t});\n\t\t$firstFieldRecordID = vtlib_purify($_REQUEST['firstFieldRecordID']);\n\n\t\t$ret = '';\n\t\t$currentFieldvalue = $firstFieldRecordID;\n\t\tforeach ($fieldsArray as $key => $fieldName) {\n\t\t\tif ($key == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$queryGenerator = new QueryGenerator(getSalesEntityType($currentFieldvalue), $current_user);\n\t\t\t$queryGenerator->setFields(explode(',', $fieldName));\n\t\t\t$queryGenerator->addCondition('id', $currentFieldvalue, 'e');\n\t\t\t$query = $queryGenerator->getQuery();\n\t\t\tif (count($fieldsArray) == $key + 1) {\n\t\t\t\t$ret = $adb->query($query)->fields;\n\t\t\t} else {\n\t\t\t\t$ret = $adb->query($query)->fields[0];\n\t\t\t}\n\t\t\t$currentFieldvalue = $ret;\n\t\t}\n\t\tbreak;\n\tcase 'getFieldValuesFromSearch':\n\t\t$ret = array();\n\t\tglobal $current_user, $adb;\n\t\t$module = vtlib_purify($_REQUEST['getFieldValuesFrom']);\n\t\tif (!empty($module) && vtlib_isModuleActive($module)) {\n\t\t\t$fields = vtlib_purify($_REQUEST['getTheseFields']);\n\t\t\t$fields = explode(',', $fields);\n\t\t\t$queryGenerator = new QueryGenerator($module, $current_user);\n\t\t\t$queryGenerator->setFields($fields);\n\t\t\tif (substr($_REQUEST['getFieldSearchField'], 0, 1)=='[') {\n\t\t\t\t$JSONconditions = json_decode($_REQUEST['getFieldSearchField']);\n\t\t\t\tforeach ($JSONconditions as $fconds) {\n\t\t\t\t\tif (empty($fconds[3])) {\n\t\t\t\t\t\t$glue = QueryGenerator::$AND;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$glue = (strtolower(trim($fconds[3]))=='or' ? QueryGenerator::$OR : QueryGenerator::$AND);\n\t\t\t\t\t}\n\t\t\t\t\tif (strpos($fconds[0], ')')) {\n\t\t\t\t\t\tpreg_match('/\\((\\w+) : \\(([_\\w]+)\\) (.+)\\)/', vtlib_purify($fconds[0]), $matches);\n\t\t\t\t\t\tlist($full, $referenceField, $referenceModule, $fieldname) = $matches;\n\t\t\t\t\t\t$queryGenerator->addReferenceModuleFieldCondition(\n\t\t\t\t\t\t\t$referenceModule,\n\t\t\t\t\t\t\t$referenceField,\n\t\t\t\t\t\t\t$fieldname,\n\t\t\t\t\t\t\tvtlib_purify($fconds[1]),\n\t\t\t\t\t\t\t(empty($fconds[2]) ? 'e' : vtlib_purify($fconds[2])),\n\t\t\t\t\t\t\t$glue\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$queryGenerator->addCondition(\n\t\t\t\t\t\t\tvtlib_purify($fconds[0]),\n\t\t\t\t\t\t\tvtlib_purify($fconds[1]),\n\t\t\t\t\t\t\t(empty($fconds[2]) ? 'e' : vtlib_purify($fconds[2])),\n\t\t\t\t\t\t\t$glue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (strpos($_REQUEST['getFieldSearchField'], ')')) {\n\t\t\t\t\tpreg_match('/\\((\\w+) : \\(([_\\w]+)\\) (.+)\\)/', vtlib_purify($_REQUEST['getFieldSearchField']), $matches);\n\t\t\t\t\tlist($full, $referenceField, $referenceModule, $fieldname) = $matches;\n\t\t\t\t\t$queryGenerator->addReferenceModuleFieldCondition(\n\t\t\t\t\t\t$referenceModule,\n\t\t\t\t\t\t$referenceField,\n\t\t\t\t\t\t$fieldname,\n\t\t\t\t\t\tvtlib_purify($_REQUEST['getFieldSearchValue']),\n\t\t\t\t\t\t(empty($_REQUEST['getFieldSearchop']) ? 'e' : vtlib_purify($_REQUEST['getFieldSearchop']))\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$queryGenerator->addCondition(\n\t\t\t\t\t\tvtlib_purify($_REQUEST['getFieldSearchField']),\n\t\t\t\t\t\tvtlib_purify($_REQUEST['getFieldSearchValue']),\n\t\t\t\t\t\t(empty($_REQUEST['getFieldSearchop']) ? 'e' : vtlib_purify($_REQUEST['getFieldSearchop']))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$query = $queryGenerator->getQuery();\n\t\t\t$queryres=$adb->pquery($query, array());\n\t\t\tif ($adb->num_rows($queryres)>0) {\n\t\t\t\t$col=0;\n\t\t\t\t$orgtabid = getTabid($module);\n\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t$row = array(\n\t\t\t\t\t\t$field => $adb->query_result($queryres, 0, $col++)\n\t\t\t\t\t);\n\t\t\t\t\t$finfo = VTCacheUtils::lookupFieldInfo($orgtabid, $field);\n\t\t\t\t\t$output = getDetailViewOutputHtml($finfo['uitype'], $finfo['fieldname'], $finfo['fieldlabel'], $row, $finfo['generatedtype'], $orgtabid, $module);\n\t\t\t\t\tif (isset($output['parent_id'])) {\n\t\t\t\t\t\t$ret[$field]= $output['parent_id'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret[$field]= $output[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getMergedDescription':\n\t\t$tpl = vtlib_purify($_REQUEST['template']);\n\t\t$crmid = vtlib_purify($_REQUEST['crmid']);\n\t\t$ret = '';\n\t\tif (!empty($tpl) && !empty($crmid)) {\n\t\t\t$ret = getMergedDescription(urldecode($tpl), $crmid, 0);\n\t\t\t$searchModule = (1 == GlobalVariable::getVariable('Application_B2B', '1')) ? 'Accounts' : 'Contacts';\n\t\t\t$relid = getRelatedAccountContact($crmid, $searchModule);\n\t\t\tif (!empty($relid)) {\n\t\t\t\t$ret = getMergedDescription($ret, $relid, $searchModule);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getEmailTemplateDetails':\n\t\t$emltplid = vtlib_purify($_REQUEST['templateid']);\n\t\t$emltpl = getTemplateDetails($emltplid);\n\t\t$ret = array();\n\t\tif (!empty($emltpl)) {\n\t\t\t$ret['subject'] = $emltpl[2];\n\t\t\t$ret['body'] = $emltpl[1];\n\t\t\t$ret['from_email'] = $emltpl[3];\n\t\t}\n\t\tbreak;\n\tcase 'exportUserComments':\n\t\t$recordid = vtlib_purify($_REQUEST['record']);\n\t\t$module = vtlib_purify($_REQUEST['module']);\n\t\tinclude_once 'include/utils/ExportUtils.php';\n\t\tif (GlobalVariable::getVariable('ModComments_Export_Format', 'CSV', $module) == 'CSV') {\n\t\t\theader('Content-Disposition:attachment;filename=\"Comments'.$recordid.'.csv\"');\n\t\t\theader('Content-Type:text/csv;charset=UTF-8');\n\t\t\theader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n\t\t\theader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n\t\t\theader('Cache-Control: post-check=0, pre-check=0', false);\n\t\t\texportUserCommentsForModule($module, $recordid, 'CSV');\n\t\t} else {\n\t\t\tglobal $root_directory, $cache_dir;\n\t\t\t$fname = tempnam($root_directory.$cache_dir, 'comm.xls');\n\t\t\t$xlsobject = exportUserCommentsForModule($module, $recordid, 'XLS');\n\t\t\t$xlsobject->save($fname);\n\t\t\theader('Content-Type: application/x-msexcel');\n\t\t\theader('Content-Length: '.@filesize($fname));\n\t\t\theader('Content-disposition: attachment; filename=\"Comments'.$recordid.'.xls\"');\n\t\t\t$fh=fopen($fname, 'rb');\n\t\t\tfpassthru($fh);\n\t\t}\n\t\texit;\n\t\tbreak;\n\tcase 'ValidationExists':\n\t\t$valmod = vtlib_purify($_REQUEST['valmodule']);\n\t\tif (file_exists(\"modules/{$valmod}/{$valmod}Validation.php\")) {\n\t\t\techo 'yes';\n\t\t} else {\n\t\t\tinclude_once 'modules/cbMap/processmap/Validations.php';\n\t\t\tif (Validations::ValidationsExist($valmod)) {\n\t\t\t\techo 'yes';\n\t\t\t} elseif (recordIsAssignedToInactiveUser(vtlib_purify($_REQUEST['crmid']))) {\n\t\t\t\techo 'yes';\n\t\t\t} else {\n\t\t\t\t$lnks = Vtiger_Link::getAllByType(getTabid($valmod), 'PRESAVE', array('MODULE'=>$valmod, 'ACTION'=>'Save'));\n\t\t\t\tif (count($lnks)>0) {\n\t\t\t\t\techo 'yes';\n\t\t\t\t} else {\n\t\t\t\t\techo 'no';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdie();\n\t\tbreak;\n\tcase 'getWeekendDates':\n\t\t$startDate = vtlib_purify($_REQUEST['startFrom']);\n\t\t$endDate = vtlib_purify($_REQUEST['endFrom']);\n\t\t$format = isset($_REQUEST['dateFormat']) ? vtlib_purify($_REQUEST['dateFormat']) : 'Y-m-d';\n\t\t$ret = DateTimeField::getWeekendDates($startDate, $endDate, $format);\n\t\tbreak;\n\tcase 'ValidationLoad':\n\t\t$valmod = vtlib_purify($_REQUEST['valmodule']);\n\t\tinclude_once 'modules/cbMap/processmap/Validations.php';\n\t\tif (Validations::recordIsAssignedToInactiveUser()) {\n\t\t\techo getTranslatedString('RecordIsAssignedToInactiveUser');\n\t\t\tdie();\n\t\t}\n\t\t$validation = Validations::processAllValidationsFor($valmod);\n\t\tif ($validation!==true) {\n\t\t\techo Validations::formatValidationErrors($validation, $valmod);\n\t\t\tdie();\n\t\t}\n\t\tif (file_exists(\"modules/{$valmod}/{$valmod}Validation.php\")) {\n\t\t\tinclude \"modules/{$valmod}/{$valmod}Validation.php\";\n\t\t} else {\n\t\t\t$lnks = Vtiger_Link::getAllByType(getTabid($valmod), 'PRESAVE', array('MODULE'=>$valmod, 'ACTION'=>'Save'));\n\t\t\tif (count($lnks)>0) {\n\t\t\t\t$screen_values = json_decode($_REQUEST['structure'], true);\n\t\t\t\t$rdo = '';\n\t\t\t\tforeach ($lnks as $lnk) {\n\t\t\t\t\t$rdo .= vtlib_process_widget($lnk, $screen_values);\n\t\t\t\t}\n\t\t\t\techo $rdo;\n\t\t\t} else {\n\t\t\t\techo '%%%OK%%%';\n\t\t\t}\n\t\t}\n\t\tdie();\n\t\tbreak;\n\tcase 'getModuleWebseriviceID':\n\t\t$wsmod = vtlib_purify($_REQUEST['wsmodule']);\n\t\tif (!empty($wsmod)) {\n\t\t\t$ret = vtws_getEntityId($wsmod);\n\t\t} else {\n\t\t\t$ret = '';\n\t\t}\n\t\tbreak;\n\tcase 'updateBrowserTabSession':\n\t\t$newssid = vtlib_purify($_REQUEST['newtabssid']);\n\t\t$oldssid = vtlib_purify($_REQUEST['oldtabssid']);\n\t\tif (!empty($oldssid)) {\n\t\t\tforeach ($_SESSION as $key => $value) {\n\t\t\t\tif (strpos($key, $oldssid) !== false && strpos($key, $oldssid.'__prev') === false) {\n\t\t\t\t\t$newkey = str_replace($oldssid, $newssid, $key);\n\t\t\t\t\tcoreBOS_Session::set($newkey, $value);\n\t\t\t\t\tcoreBOS_Session::set($key, (isset($_SESSION[$key.'__prev']) ? $_SESSION[$key.'__prev'] : ''));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$ret = '';\n\t\tbreak;\n\tcase 'getEmailTemplateVariables':\n\t\t$module = vtlib_purify($_REQUEST['module_from']);\n\t\t$allOptions=getEmailTemplateVariables(array($module,'Accounts'));\n\t\t$ret = array_merge($allOptions[0], $allOptions[1], $allOptions[2]);\n\t\tbreak;\n\tcase 'downloadfile':\n\t\tinclude_once 'include/utils/downloadfile.php';\n\t\tdie();\n\t\tbreak;\n\tcase 'delImage':\n\t\tVtiger_Request::validateRequest();\n\t\tinclude_once 'include/utils/DelImage.php';\n\t\t$id = vtlib_purify($_REQUEST['recordid']);\n\t\t$id = preg_replace('/[^0-9]/', '', $id);\n\t\tif (isset($_REQUEST['attachmodule']) && $_REQUEST['attachmodule']=='Emails') {\n\t\t\tDelAttachment($id);\n\t\t} else {\n\t\t\tDelImage($id);\n\t\t}\n\t\techo 'SUCCESS';\n\t\tdie();\n\t\tbreak;\n\tcase 'saveAttachment':\n\t\tinclude_once 'modules/Settings/MailScanner/core/MailAttachmentMIME.php';\n\t\tinclude_once 'modules/MailManager/src/controllers/UploadController.php';\n\t\t$allowedFileExtension = array();\n\t\t$upload_maxsize = GlobalVariable::getVariable('Application_Upload_MaxSize', 3000000, 'Emails');\n\t\t$upload = new MailManager_Uploader($allowedFileExtension, $upload_maxsize);\n\t\tif ($upload) {\n\t\t\t$filePath = decideFilePath();\n\t\t\t$ret = $upload->handleUpload($filePath, false);\n\t\t} else {\n\t\t\t$ret = '';\n\t\t}\n\t\tbreak;\n\tcase 'getNumberDisplayValue':\n\t\t$value = vtlib_purify($_REQUEST['val']);\n\t\tif (empty($value)) {\n\t\t\t$ret = '0';\n\t\t} else {\n\t\t\t$currencyField = new CurrencyField($value);\n\t\t\t$decimals = vtlib_purify($_REQUEST['decimals']);\n\t\t\t$currencyField->initialize($current_user);\n\t\t\t$currencyField->setNumberofDecimals(min($decimals, $currencyField->getCurrencyDecimalPlaces()));\n\t\t\t$ret = $currencyField->getDisplayValue(null, true, true);\n\t\t}\n\t\tbreak;\n\tcase 'getGloalSearch':\n\tcase 'getGlobalSearch':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$data = json_decode($_REQUEST['data'], true);\n\t\t$searchin = vtlib_purify($data['searchin']);\n\t\t$limit = isset($data['maxresults']) ? vtlib_purify($data['maxresults']) : '';\n\t\t$term = vtlib_purify($data['term']);\n\t\t$retvals = getGlobalSearch($term, $searchin, $limit, $current_user);\n\t\t$ret = array();\n\t\tif (!empty($retvals['data'])) {\n\t\t\tforeach ($retvals['data'] as $value) {\n\t\t\t\t$ret[] = array(\n\t\t\t\t\t'crmid' => $value['crmid'],\n\t\t\t\t\t'crmmodule' => $value['crmmodule'],\n\t\t\t\t\t'query_string' => $value['query_string'],\n\t\t\t\t\t'total' => $retvals['total']\n\t\t\t\t) + $value['crmfields'];\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getRelatedListInfo':\n\t\t$sql = 'SELECT rl.tabid,rl.related_tabid,rl.label,tab.name as name, tabrel.name as relname\n\t\t\tFROM vtiger_relatedlists rl\n\t\t\tLEFT JOIN vtiger_tab tab ON rl.tabid=tab.tabid\n\t\t\tLEFT JOIN vtiger_tab tabrel ON rl.related_tabid=tabrel.tabid\n\t\t\tWHERE relation_id=?';\n\t\t$res = $adb->pquery($sql, array($_REQUEST['relation_id']));\n\t\t$ret = array();\n\t\tif ($adb->num_rows($res) > 0) {\n\t\t\t$tabid = $adb->query_result($res, 0, 'tabid');\n\t\t\t$tabidrel = $adb->query_result($res, 0, 'related_tabid');\n\t\t\t$label = $adb->query_result($res, 0, 'label');\n\t\t\t$mod = $adb->query_result($res, 0, 'name');\n\t\t\t$modrel = $adb->query_result($res, 0, 'relname');\n\t\t\t$ret = array(\n\t\t\t\t'tabid'=>$tabid,\n\t\t\t\t'tabidrel'=>$tabidrel,\n\t\t\t\t'label'=>$label,\n\t\t\t\t'module'=>$mod,\n\t\t\t\t'modulerel'=>$modrel,\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'getSetting':\n\t\t$skey = vtlib_purify($_REQUEST['skey']);\n\t\tif (!empty($_REQUEST['default'])) {\n\t\t\t$default = vtlib_purify($_REQUEST['default']);\n\t\t\t$ret = coreBOS_Settings::getSetting($skey, $default);\n\t\t} else {\n\t\t\t$ret = coreBOS_Settings::getSetting($skey, null);\n\t\t}\n\t\tbreak;\n\tcase 'setSetting':\n\t\tVtiger_Request::validateRequest();\n\t\t$skey = vtlib_purify($_REQUEST['skey']);\n\t\t$svalue = vtlib_purify($_REQUEST['svalue']);\n\t\tcoreBOS_Settings::setSetting($skey, $svalue);\n\t\t$ret = '';\n\t\tbreak;\n\tcase 'delSetting':\n\t\tVtiger_Request::validateRequest();\n\t\t$skey = vtlib_purify($_REQUEST['skey']);\n\t\tcoreBOS_Settings::delSetting($skey);\n\t\t$ret = '';\n\t\tbreak;\n\tcase 'getTranslatedStrings':\n\t\tglobal $currentModule;\n\t\t$i18nm = empty($_REQUEST['i18nmodule']) ? $currentModule : vtlib_purify($_REQUEST['i18nmodule']);\n\t\t$tkeys = vtlib_purify($_REQUEST['tkeys']);\n\t\t$tkeys = explode(';', $tkeys);\n\t\t$ret = array();\n\t\tforeach ($tkeys as $tr) {\n\t\t\t$ret[$tr] = getTranslatedString($tr, $i18nm);\n\t\t}\n\t\tbreak;\n\tcase 'execrule':\n\t\t$ret = '';\n\t\tif (isset($_REQUEST['rulebmap'])) {\n\t\t\t$bmap = vtlib_purify($_REQUEST['rulebmap']);\n\t\t\tif (is_numeric($bmap)) {\n\t\t\t\t$cbmap = cbMap::getMapByID($bmap);\n\t\t\t} else {\n\t\t\t\t$cbmapid = GlobalVariable::getVariable('BusinessMapping_'.$bmap, cbMap::getMapIdByName($bmap));\n\t\t\t\t$cbmap = cbMap::getMapByID($cbmapid);\n\t\t\t}\n\t\t\t$screen_values = json_decode($_REQUEST['structure'], true);\n\t\t\tif (empty($_REQUEST['record'])) { // isNew\n\t\t\t\tif (!empty($cbmap) && ($cbmap->column_fields['maptype'] == 'Condition Expression' || $cbmap->column_fields['maptype'] == 'DecisionTable')) {\n\t\t\t\t\tif ($cbmap->column_fields['maptype'] == 'Condition Expression') {\n\t\t\t\t\t\t$ret = $cbmap->ConditionExpression($screen_values);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret = $cbmap->DecisionTable($screen_values);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { // editing\n\t\t\t\t$screen_values['record_id'] = vtlib_purify($_REQUEST['record']);\n\t\t\t\t$ret = coreBOS_Rule::evaluate($bmap, $screen_values);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'execwf':\n\t\tinclude_once 'include/Webservices/ExecuteWorkflow.php';\n\t\t$wfid = vtlib_purify($_REQUEST['wfid']);\n\t\t$ids = explode(';', trim(vtlib_purify($_REQUEST['ids']), ';'));\n\t\t$id = reset($ids);\n\t\t$wsid = vtws_getEntityId(getSalesEntityType($id)).'x';\n\t\t$crmids = array();\n\t\tforeach ($ids as $crmid) {\n\t\t\t$crmids[] = $wsid.$crmid;\n\t\t}\n\t\tif (empty($_REQUEST['ctx'])) {\n\t\t\t$context = '[]';\n\t\t} else {\n\t\t\t$context = vtlib_purify($_REQUEST['ctx']);\n\t\t}\n\t\ttry {\n\t\t\t$ret = cbwsExecuteWorkflowWithContext($wfid, json_encode($crmids), $context, $current_user);\n\t\t} catch (Exception $e) {\n\t\t\t$ret = false;\n\t\t}\n\t\tbreak;\n\tcase 'setDetailViewBlockStatus':\n\t\tif (GlobalVariable::getVariable('Application_DetailView_Sticky_BlockStatus', '0')=='1') {\n\t\t\t$blockssesion = coreBOS_Session::get('DVBLOCKSTATUS^'.$_REQUEST['dvmodule']);\n\t\t\t$blocks = getBlockOpenClosedStatus($_REQUEST['dvmodule'], 'detail');\n\t\t\tforeach ($blocks as $blabel => $bstatus) {\n\t\t\t\tif ('tbl'.str_replace(' ', '', $blabel)==$_REQUEST['dvblock']) {\n\t\t\t\t\t$blockssesion[$blabel] = vtlib_purify($_REQUEST['dvstatus']);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcoreBOS_Session::set('DVBLOCKSTATUS^'.$_REQUEST['dvmodule'], $blockssesion);\n\t\t}\n\t\t$ret = true;\n\t\tbreak;\n\tcase 'ispermitted':\n\t\t$mod = vtlib_purify($_REQUEST['checkmodule']);\n\t\t$act = vtlib_purify($_REQUEST['checkaction']);\n\t\t$rec = isset($_REQUEST['checkrecord']) ? vtlib_purify($_REQUEST['checkrecord']) : '';\n\t\t$rdo = isPermitted($mod, $act, $rec)=='yes';\n\t\t$ret = array('isPermitted'=>$rdo);\n\t\tbreak;\n\tcase 'checkButton':\n\t\t$mod = vtlib_purify($_REQUEST['formodule']);\n\t\t$ret = Button_Check($mod);\n\t\tbreak;\n\tcase 'getRecordActions':\n\t\tinclude_once 'include/ListView/ListViewGrid.php';\n\t\t$mod = vtlib_purify($_REQUEST['formodule']);\n\t\t$recordid = vtlib_purify($_REQUEST['recordid']);\n\t\t$grid = new GridListView($mod);\n\t\t$ret = $grid->Actions($recordid);\n\t\tbreak;\n\tcase 'listViewJSON':\n\t\tinclude_once 'include/ListView/ListViewGrid.php';\n\t\tif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'updateDataListView') {\n\t\t\t$grid = new GridListView($_REQUEST['modulename']);\n\t\t\t$grid->Update();\n\t\t\t$ret = array();\n\t\t} else {\n\t\t\t$orderBy = ' DESC';\n\t\t\t$entries = GlobalVariable::getVariable('Application_ListView_PageSize', 20, $currentModule);\n\t\t\t$formodule = isset($_REQUEST['formodule']) ? vtlib_purify($_REQUEST['formodule']) : '';\n\t\t\t$columns = isset($_REQUEST['columns']) ? vtlib_purify($_REQUEST['columns']) : '';\n\t\t\t$beforeFilter = isset($_REQUEST['beforeFilter']) ? vtlib_purify($_REQUEST['beforeFilter']) : '';\n\t\t\t$tabid = getTabid($formodule);\n\t\t\t$grid = new GridListView($formodule);\n\t\t\tif (isset($_REQUEST['perPage'])) {\n\t\t\t\t//get data\n\t\t\t\t$perPage = isset($_REQUEST['perPage']) ? vtlib_purify($_REQUEST['perPage']) : $entries;\n\t\t\t\t$sortAscending = isset($_REQUEST['sortAscending']) ? vtlib_purify($_REQUEST['sortAscending']) : '';\n\t\t\t\t$sortColumn = isset($_REQUEST['sortColumn']) ? vtlib_purify($_REQUEST['sortColumn']) : '';\n\t\t\t\t$page = isset($_REQUEST['page']) ? vtlib_purify($_REQUEST['page']) : 1;\n\t\t\t\t$search = isset($_REQUEST['search']) ? vtlib_purify($_REQUEST['search']) : '';\n\t\t\t\t$searchtype = isset($_REQUEST['searchtype']) ? vtlib_purify($_REQUEST['searchtype']) : '';\n\t\t\t\t$session_sort = coreBOS_Session::get($formodule.'_Sort_Order');\n\t\t\t\tif ($session_sort != '') {\n\t\t\t\t\tif ($session_sort == ' ASC' && $sortAscending == 'true') {\n\t\t\t\t\t\t$orderBy = ' ASC';\n\t\t\t\t\t} elseif ($session_sort == ' ASC' && $sortAscending == 'false') {\n\t\t\t\t\t\t$orderBy = ' DESC';\n\t\t\t\t\t} elseif ($session_sort == ' DESC' && $sortAscending == 'true') {\n\t\t\t\t\t\t$orderBy = ' ASC';\n\t\t\t\t\t} elseif ($session_sort == ' DESC' && $sortAscending == 'false') {\n\t\t\t\t\t\t$orderBy = ' DESC';\n\t\t\t\t\t} elseif ($sortAscending == '') {\n\t\t\t\t\t\t$orderBy = $session_sort;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($sortAscending == 'true') {\n\t\t\t\t\t\t$orderBy = ' ASC';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcoreBOS_Session::set($formodule.'_Sort_Order', $orderBy);\n\t\t\t\t$grid->tabid = $tabid;\n\t\t\t\t$grid->entries = $perPage;\n\t\t\t\t$grid->orderBy = $orderBy;\n\t\t\t\t$grid->sortColumn = $sortColumn;\n\t\t\t\t$grid->currentPage = $page;\n\t\t\t\t$grid->searchUrl = $search;\n\t\t\t\t$grid->searchtype = $searchtype;\n\t\t\t\t$lv = $grid->Show();\n\t\t\t} else {\n\t\t\t\t$grid->tabid = $tabid;\n\t\t\t\t$lv = $grid->Headers();\n\t\t\t}\n\t\t\tif (isset($columns) && $columns == 'true') {\n\t\t\t\t$ret = array($lv['headers'], $lv['customview'], $lv['folders']);\n\t\t\t} else {\n\t\t\t\t$ret = $lv['data'];\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getUserName':\n\t\t$ret = getUserName(vtlib_purify($_REQUEST['userid']));\n\t\tbreak;\n\tcase 'getImageInfoFor':\n\t\t$id = vtlib_purify($_REQUEST['record']);\n\t\t$imageinfo = array();\n\t\tif (isPermitted(getSalesEntityType($id), 'DetailView', $id)=='yes') {\n\t\t\trequire_once 'include/Webservices/getRecordImages.php';\n\t\t\t$imageinfo = cbws_getrecordimageinfo($id, $current_user);\n\t\t}\n\t\theader('Content-Type: application/json');\n\t\tif ((int)$imageinfo['results'] > 0) {\n\t\t\t$ret = $imageinfo;\n\t\t} else {\n\t\t\t$ret = '';\n\t\t}\n\t\tbreak;\n\tcase 'isAdmin':\n\t\tif (is_admin($current_user)) {\n\t\t\t$ret = array('admin' => 'on');\n\t\t} else {\n\t\t\t$ret = array('admin' => 'off');\n\t\t}\n\t\tbreak;\n\tcase 'setNewPassword':\n\t\tVtiger_Request::validateRequest();\n\t\trequire_once 'modules/Users/Users.php';\n\t\trequire_once 'include/utils/UserInfoUtil.php';\n\t\t$userid = vtlib_purify($_REQUEST['record']);\n\t\tif (is_admin($current_user) || $current_user->id==$userid) {\n\t\t\t$focus = new Users();\n\t\t\t$focus->mode='edit';\n\t\t\t$focus->id = $userid;\n\t\t\t$focus->retrieve_entity_info($userid, 'Users');\n\t\t\t$ret = $focus->change_password('old_password', vtlib_purify(substr($_REQUEST['new_password'], 0, 1024)));\n\t\t\tif ($ret) {\n\t\t\t\t$ret = array('password'=>$ret);\n\t\t\t} else {\n\t\t\t\t$ret = array('password'=>false, 'msg' => $focus->error_string);\n\t\t\t}\n\t\t} else {\n\t\t\t$ret = array('password'=>false, 'msg' => $focus->error_string);\n\t\t}\n\t\tbreak;\n\tcase 'ismoduleactive':\n\t\t$mod = vtlib_purify($_REQUEST['checkmodule']);\n\t\t$rdo = vtlib_isModuleActive($mod);\n\t\t$ret = array('isactive'=>$rdo);\n\t\tbreak;\n\tcase 'deleteModule':\n\t\t$modname = vtlib_purify($_REQUEST['formodule']);\n\t\t$module = Vtiger_Module::getInstance($modname);\n\t\tif ($module && is_admin($current_user)) {\n\t\t\trequire_once 'modules/com_vtiger_workflow/VTEntityMethodManager.inc';\n\t\t\t$ev = new VTEventsManager($adb);\n\t\t\t$handlers = $ev->listHandlersForModule($modname);\n\t\t\tif (!empty($handlers)) {\n\t\t\t\tforeach ($handlers as $className) {\n\t\t\t\t\t$ev->unregisterHandler($className);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$module->deleteRelatedLists();\n\t\t\t$module->deleteLinks();\n\t\t\t$module->deinitWebservice();\n\t\t\t$module->delete();\n\t\t\t$ret = array(\n\t\t\t\t'success' => true,\n\t\t\t\t'message' => 'Module '.getTranslatedString($modname, $modname).' EXTERMINATED!'\n\t\t\t);\n\t\t} else {\n\t\t\t$ret = array(\n\t\t\t\t'success' => false,\n\t\t\t\t'message' => 'Failed to find '.getTranslatedString($modname, $modname).' module.'\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'getMapByName':\n\t\t$mapname = vtlib_purify($_REQUEST['mapname']);\n\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$mapname, cbMap::getMapIdByName($mapname));\n\t\t$content = 'NOT_PERMITTED';\n\t\tif ($cbMapid && isPermitted('cbMap', 'DetailView', $cbMapid)=='yes') {\n\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t$mtype = $cbMap->column_fields['maptype'];\n\t\t\t$content = $cbMap->$mtype();\n\t\t}\n\t\t$ret = array(\n\t\t\t'content' => $content\n\t\t);\n\t\tbreak;\n\tcase 'setNotificationStatus':\n\t\t$rdo = $adb->pquery(\n\t\t\t'update vtiger_activity_reminder_popup set status=? WHERE moreinfo->\"$.id\"=?',\n\t\t\t[vtlib_purify($_REQUEST['status']), vtlib_purify($_REQUEST['remid'])]\n\t\t);\n\t\t$ret = ($rdo!==false);\n\t\tbreak;\n\tcase 'getFieldsAttributes':\n\t\t$fields = vtlib_purify($_REQUEST['fields']);\n\t\t$modulename = vtlib_purify($_REQUEST['modulename']);\n\t\t$tabid = getTabid($modulename);\n\t\t$fields = explode(',', $fields);\n\t\t$rs = $adb->pquery(\n\t\t\t'SELECT tablename, fieldname, columnname, fieldlabel, typeofdata FROM vtiger_field WHERE tabid=? AND fieldname IN ('.generateQuestionMarks($fields).')',\n\t\t\tarray($tabid, $fields)\n\t\t);\n\t\t$fieldInfo = array();\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$typeofdata = explode('~', $row['typeofdata']);\n\t\t\t$fieldInfo[] = array(\n\t\t\t\t'tablename' => $row['tablename'],\n\t\t\t\t'fieldname' => $row['fieldname'],\n\t\t\t\t'columnname' => $row['columnname'],\n\t\t\t\t'fieldlabel' => $row['fieldlabel'],\n\t\t\t\t'typeofdata' => $typeofdata[0]\n\t\t\t);\n\t\t}\n\t\t$ret = array(\n\t\t\t'fields' => $fieldInfo,\n\t\t);\n\t\tbreak;\n\tcase 'clickHouse':\n\t\tinclude_once 'include/integrations/clickhouse/clickhouse.php';\n\t\t$clickHouse = new corebos_clickhouse();\n\t\tif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'addUpdateTable') {\n\t\t\t$ws_name = $_REQUEST['ws_name'];\n\t\t\t$table_name = $_REQUEST['table_name'];\n\t\t\t$access = $_REQUEST['access'];\n\t\t\t$create = $_REQUEST['create'];\n\t\t\t$read = $_REQUEST['read'];\n\t\t\t$write = $_REQUEST['write'];\n\t\t\t$old_ws_name = $_REQUEST['old_ws_name'];\n\t\t\t$old_table_name = $_REQUEST['old_table_name'];\n\t\t\t$ret = $clickHouse->addUpdateTable($ws_name, $table_name, $access, $create, $read, $write, $old_ws_name, $old_table_name);\n\t\t} elseif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'getTables') {\n\t\t\t$grid = new GridListView('Utilities');\n\t\t\t$q = 'select * from vtiger_ws_clickhousetables';\n\t\t\t$field_lists = array(\n\t\t\t\t'id' => array('vtiger_ws_clickhousetables'=>'id'),\n\t\t\t\t'ws_name' => array('vtiger_ws_clickhousetables'=>'ws_name'),\n\t\t\t\t'table_name' => array('vtiger_ws_clickhousetables'=>'table_name') ,\n\t\t\t\t'access' => array('vtiger_ws_clickhousetables'=>'access'),\n\t\t\t\t'create' => array('vtiger_ws_clickhousetables'=>'create'),\n\t\t\t\t'read' => array('vtiger_ws_clickhousetables'=>'read'),\n\t\t\t\t'write' => array('vtiger_ws_clickhousetables'=>'write'),\n\t\t\t\t'delete' => array('vtiger_ws_clickhousetables'=>'delete'),\n\t\t\t);\n\t\t\t$ret = $grid->gridTableBasedEntries($q, $field_lists, 'vtiger_ws_clickhousetables');\n\t\t} elseif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'deleteTable') {\n\t\t\t$table_name = $_REQUEST['table_name'];\n\t\t\t$ws_name = $_REQUEST['ws_name'];\n\t\t\t$res = $clickHouse->deleteTable($table_name, $ws_name);\n\t\t\tif ($res) {\n\t\t\t\t$success = true;\n\t\t\t} else {\n\t\t\t\t$success = false;\n\t\t\t}\n\t\t\t$ret = array(\n\t\t\t\t'success' => $success,\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'shareLink':\n\t\trequire_once 'modules/Documents/ShareDocLinkWidgetDetailViewBlock.php';\n\t\t$recordId = vtlib_purify($_REQUEST['recordId']);\n\t\t$operation = vtlib_purify($_REQUEST['operation']);\n\t\tif ($operation == 'create') {\n\t\t\t$doclink = new ShareDocLinkWidgetDetailViewBlock();\n\t\t\t$expirationTime = time() + 86400; // one day\n\t\t\t$timeString = date('Y-m-d H:i:s', $expirationTime);\n\t\t\t$shareToken = $doclink->createShareLinkForSlider($recordId, $expirationTime);\n\t\t\t$ret = array(\n\t\t\t\t'shareToken' => $shareToken,\n\t\t\t\t'validUntil' => $timeString,\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'compressAndDownloadFiles':\n\t\t// you have to call this ExecuteFunctions with the downloadFilesAsZip() js function\n\t\t// in order to be able to download the file. if you make a normal http request it will\n\t\t// give the binary data of the zip file and will not download it automatically.\n\t\tglobal $root_directory;\n\t\t$zipFileName = vtlib_purify($_REQUEST['zipFileName']);\n\t\t$filesToBeCompressed = json_decode(vtlib_purify($_REQUEST['filesToBeCompressed']));\n\t\t$zip = new Vtiger_Zip('test.zip');\n\t\tforeach ($filesToBeCompressed as $value) {\n\t\t\t$filePath = convertFileUrlToRelativePath($value);\n\t\t\t$fileName = explode('/', convertFileUrlToRelativePath($value))[count(explode('/', convertFileUrlToRelativePath($value)))-1];\n\t\t\t$zip->addFile($root_directory  . $filePath, $fileName);\n\t\t}\n\t\t$zip->save();\n\t\t$zip->forceDownload($zipFileName);\n\t\t$ret = array(\n\t\t\t'success' => true,\n\t\t);\n\t\tbreak;\n\tdefault:\n\t\t$ret = '';\n\t\tbreak;\n}\necho json_encode($ret);\ndie();\n?>\n"], "fixing_code": ["<?php\n/*************************************************************************************************\n * Copyright 2015 JPL TSolucio, S.L. -- This file is a part of TSOLUCIO coreBOS customizations.\n * You can copy, adapt and distribute the work under the \"Attribution-NonCommercial-ShareAlike\"\n * Vizsage Public License (the \"License\"). You may not use this file except in compliance with the\n * License. Roughly speaking, non-commercial users may share and modify this code, but must give credit\n * and share improvements. However, for proper details please read the full License, available at\n * http://vizsage.com/license/Vizsage-License-BY-NC-SA.html and the handy reference for understanding\n * the full license at http://vizsage.com/license/Vizsage-Deed-BY-NC-SA.html. Unless required by\n * applicable law or agreed to in writing, any software distributed under the License is distributed\n * on an  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and limitations under the\n * License terms of Creative Commons Attribution-NonCommercial-ShareAlike 3.0 (the License).\n *************************************************************************************************\n *  Version      : 1.0\n *  Author       : JPL TSolucio, S. L.\n *************************************************************************************************/\nrequire_once 'include/utils/utils.php';\ninclude_once 'vtlib/Vtiger/Link.php';\nrequire_once 'include/ListView/ListViewGrid.php';\nglobal $adb, $log, $current_user;\n\n$functiontocall = vtlib_purify($_REQUEST['functiontocall']);\n\nswitch ($functiontocall) {\n\tcase 'getFieldAutocomplete':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$searchinmodule = vtlib_purify($_REQUEST['searchinmodule']);\n\t\t$fields = vtlib_purify($_REQUEST['fields']);\n\t\t$returnfields = vtlib_purify($_REQUEST['returnfields']);\n\t\t$limit = vtlib_purify($_REQUEST['limit']);\n\t\t$filter = vtlib_purify($_REQUEST['filter']);\n\t\tif (is_array($filter)) {\n\t\t\t// Filter array format looks like this:\n\t\t\t/**************************************\n\t\t\t[filter] => Array(\n\t\t\t\t[logic] => and\n\t\t\t\t[filters] => Array(\n\t\t\t\t\t[0] => Array(\n\t\t\t\t\t\t[value] => {value to search}\n\t\t\t\t\t\t[operator] => startswith\n\t\t\t\t\t\t[field] => crmname\n\t\t\t\t\t\t[ignoreCase] => true\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t\t***************************************/\n\t\t\t$term = $filter['filters'][0]['value'];\n\t\t\t$op = isset($filter['filters'][0]['operator']) ? $filter['filters'][0]['operator'] : 'startswith';\n\t\t} else {\n\t\t\t$term = vtlib_purify($_REQUEST['term']);\n\t\t\t$op = empty($filter) ? 'startswith' : $filter;\n\t\t}\n\t\t$retvals = getFieldAutocomplete($term, $op, $searchinmodule, $fields, $returnfields, $limit, $current_user);\n\t\t$ret = array();\n\t\tforeach ($retvals as $value) {\n\t\t\t$ret[] = array('crmid'=>$value['crmid'],'crmname'=>implode(',', $value['crmfields']));\n\t\t}\n\t\tbreak;\n\tcase 'getReferenceAutocomplete':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$searchinmodule = vtlib_purify($_REQUEST['searchinmodule']);\n\t\t$limit = vtlib_purify($_REQUEST['limit']);\n\t\t$filter = vtlib_purify($_REQUEST['filter']);\n\t\tif (is_array($filter)) {\n\t\t\t$term = $filter['filters'][0]['value'];\n\t\t\t$op = isset($filter['filters'][0]['operator']) ? $filter['filters'][0]['operator'] : 'startswith';\n\t\t} else {\n\t\t\t$term = vtlib_purify($_REQUEST['term']);\n\t\t\t$op = empty($filter) ? 'startswith' : $filter;\n\t\t}\n\t\t$ret = getReferenceAutocomplete($term, $op, $searchinmodule, $limit, $current_user);\n\t\tbreak;\n\tcase 'getProductServiceAutocomplete':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$limit = isset($_REQUEST['limit']) ? $_REQUEST['limit'] : 5;\n\t\t$ret = getProductServiceAutocomplete($_REQUEST['term'], array(), $limit);\n\t\tbreak;\n\tcase 'getEntityName':\n\t\t$ret = '';\n\t\t$crmid = vtlib_purify($_REQUEST['getNameFrom']);\n\t\tif (!empty($crmid)) {\n\t\t\t$ename = getEntityName(getSalesEntityType($crmid), $crmid);\n\t\t\t$ret = $ename[$crmid];\n\t\t}\n\t\tbreak;\n\tcase 'getFieldValuesFromRecord':\n\t\t$ret = array();\n\t\t$crmid = vtlib_purify($_REQUEST['getFieldValuesFrom']);\n\t\tif (!empty($crmid)) {\n\t\t\t$module = getSalesEntityType($crmid);\n\t\t\t$fields = vtlib_purify($_REQUEST['getTheseFields']);\n\t\t\t$fields = explode(',', $fields);\n\t\t\t$queryGenerator = new QueryGenerator($module, $current_user);\n\t\t\t$queryGenerator->setFields($fields);\n\t\t\t$queryGenerator->addCondition('id', $crmid, 'e');\n\t\t\t$query = $queryGenerator->getQuery();\n\t\t\t$queryres=$adb->pquery($query, array());\n\t\t\tif ($adb->num_rows($queryres)>0) {\n\t\t\t\t$col=0;\n\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t$ret[$field]=$adb->query_result($queryres, 0, $col++);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getFieldValuesFromRecordRecursively':\n\t\t$moduleName = vtlib_purify($_REQUEST['moduleName']);\n\t\t$value = vtlib_purify($_REQUEST['value']);\n\t\t$fieldsArray = explode('.', $value);\n\t\t// remove all $ signs\n\t\tarray_walk($fieldsArray, function (&$item, $key) {\n\t\t\t$item = substr($item, 1);\n\t\t});\n\t\t$firstFieldRecordID = vtlib_purify($_REQUEST['firstFieldRecordID']);\n\n\t\t$ret = '';\n\t\t$currentFieldvalue = $firstFieldRecordID;\n\t\tforeach ($fieldsArray as $key => $fieldName) {\n\t\t\tif ($key == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$queryGenerator = new QueryGenerator(getSalesEntityType($currentFieldvalue), $current_user);\n\t\t\t$queryGenerator->setFields(explode(',', $fieldName));\n\t\t\t$queryGenerator->addCondition('id', $currentFieldvalue, 'e');\n\t\t\t$query = $queryGenerator->getQuery();\n\t\t\tif (count($fieldsArray) == $key + 1) {\n\t\t\t\t$ret = $adb->query($query)->fields;\n\t\t\t} else {\n\t\t\t\t$ret = $adb->query($query)->fields[0];\n\t\t\t}\n\t\t\t$currentFieldvalue = $ret;\n\t\t}\n\t\tbreak;\n\tcase 'getFieldValuesFromSearch':\n\t\t$ret = array();\n\t\tglobal $current_user, $adb;\n\t\t$module = vtlib_purify($_REQUEST['getFieldValuesFrom']);\n\t\tif (!empty($module) && vtlib_isModuleActive($module)) {\n\t\t\t$fields = vtlib_purify($_REQUEST['getTheseFields']);\n\t\t\t$fields = explode(',', $fields);\n\t\t\t$queryGenerator = new QueryGenerator($module, $current_user);\n\t\t\t$queryGenerator->setFields($fields);\n\t\t\tif (substr($_REQUEST['getFieldSearchField'], 0, 1)=='[') {\n\t\t\t\t$JSONconditions = json_decode($_REQUEST['getFieldSearchField']);\n\t\t\t\tforeach ($JSONconditions as $fconds) {\n\t\t\t\t\tif (empty($fconds[3])) {\n\t\t\t\t\t\t$glue = QueryGenerator::$AND;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$glue = (strtolower(trim($fconds[3]))=='or' ? QueryGenerator::$OR : QueryGenerator::$AND);\n\t\t\t\t\t}\n\t\t\t\t\tif (strpos($fconds[0], ')')) {\n\t\t\t\t\t\tpreg_match('/\\((\\w+) : \\(([_\\w]+)\\) (.+)\\)/', vtlib_purify($fconds[0]), $matches);\n\t\t\t\t\t\tlist($full, $referenceField, $referenceModule, $fieldname) = $matches;\n\t\t\t\t\t\t$queryGenerator->addReferenceModuleFieldCondition(\n\t\t\t\t\t\t\t$referenceModule,\n\t\t\t\t\t\t\t$referenceField,\n\t\t\t\t\t\t\t$fieldname,\n\t\t\t\t\t\t\tvtlib_purify($fconds[1]),\n\t\t\t\t\t\t\t(empty($fconds[2]) ? 'e' : vtlib_purify($fconds[2])),\n\t\t\t\t\t\t\t$glue\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$queryGenerator->addCondition(\n\t\t\t\t\t\t\tvtlib_purify($fconds[0]),\n\t\t\t\t\t\t\tvtlib_purify($fconds[1]),\n\t\t\t\t\t\t\t(empty($fconds[2]) ? 'e' : vtlib_purify($fconds[2])),\n\t\t\t\t\t\t\t$glue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (strpos($_REQUEST['getFieldSearchField'], ')')) {\n\t\t\t\t\tpreg_match('/\\((\\w+) : \\(([_\\w]+)\\) (.+)\\)/', vtlib_purify($_REQUEST['getFieldSearchField']), $matches);\n\t\t\t\t\tlist($full, $referenceField, $referenceModule, $fieldname) = $matches;\n\t\t\t\t\t$queryGenerator->addReferenceModuleFieldCondition(\n\t\t\t\t\t\t$referenceModule,\n\t\t\t\t\t\t$referenceField,\n\t\t\t\t\t\t$fieldname,\n\t\t\t\t\t\tvtlib_purify($_REQUEST['getFieldSearchValue']),\n\t\t\t\t\t\t(empty($_REQUEST['getFieldSearchop']) ? 'e' : vtlib_purify($_REQUEST['getFieldSearchop']))\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$queryGenerator->addCondition(\n\t\t\t\t\t\tvtlib_purify($_REQUEST['getFieldSearchField']),\n\t\t\t\t\t\tvtlib_purify($_REQUEST['getFieldSearchValue']),\n\t\t\t\t\t\t(empty($_REQUEST['getFieldSearchop']) ? 'e' : vtlib_purify($_REQUEST['getFieldSearchop']))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$query = $queryGenerator->getQuery();\n\t\t\t$queryres=$adb->pquery($query, array());\n\t\t\tif ($adb->num_rows($queryres)>0) {\n\t\t\t\t$col=0;\n\t\t\t\t$orgtabid = getTabid($module);\n\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t$row = array(\n\t\t\t\t\t\t$field => $adb->query_result($queryres, 0, $col++)\n\t\t\t\t\t);\n\t\t\t\t\t$finfo = VTCacheUtils::lookupFieldInfo($orgtabid, $field);\n\t\t\t\t\t$output = getDetailViewOutputHtml($finfo['uitype'], $finfo['fieldname'], $finfo['fieldlabel'], $row, $finfo['generatedtype'], $orgtabid, $module);\n\t\t\t\t\tif (isset($output['parent_id'])) {\n\t\t\t\t\t\t$ret[$field]= $output['parent_id'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret[$field]= $output[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getMergedDescription':\n\t\t$tpl = vtlib_purify($_REQUEST['template']);\n\t\t$crmid = vtlib_purify($_REQUEST['crmid']);\n\t\t$ret = '';\n\t\tif (!empty($tpl) && !empty($crmid)) {\n\t\t\t$ret = getMergedDescription(urldecode($tpl), $crmid, 0);\n\t\t\t$searchModule = (1 == GlobalVariable::getVariable('Application_B2B', '1')) ? 'Accounts' : 'Contacts';\n\t\t\t$relid = getRelatedAccountContact($crmid, $searchModule);\n\t\t\tif (!empty($relid)) {\n\t\t\t\t$ret = getMergedDescription($ret, $relid, $searchModule);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getEmailTemplateDetails':\n\t\t$emltplid = vtlib_purify($_REQUEST['templateid']);\n\t\t$emltpl = getTemplateDetails($emltplid);\n\t\t$ret = array();\n\t\tif (!empty($emltpl)) {\n\t\t\t$ret['subject'] = $emltpl[2];\n\t\t\t$ret['body'] = $emltpl[1];\n\t\t\t$ret['from_email'] = $emltpl[3];\n\t\t}\n\t\tbreak;\n\tcase 'exportUserComments':\n\t\t$recordid = vtlib_purify($_REQUEST['record']);\n\t\t$module = vtlib_purify($_REQUEST['module']);\n\t\tinclude_once 'include/utils/ExportUtils.php';\n\t\tif (GlobalVariable::getVariable('ModComments_Export_Format', 'CSV', $module) == 'CSV') {\n\t\t\theader('Content-Disposition:attachment;filename=\"Comments'.$recordid.'.csv\"');\n\t\t\theader('Content-Type:text/csv;charset=UTF-8');\n\t\t\theader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n\t\t\theader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n\t\t\theader('Cache-Control: post-check=0, pre-check=0', false);\n\t\t\texportUserCommentsForModule($module, $recordid, 'CSV');\n\t\t} else {\n\t\t\tglobal $root_directory, $cache_dir;\n\t\t\t$fname = tempnam($root_directory.$cache_dir, 'comm.xls');\n\t\t\t$xlsobject = exportUserCommentsForModule($module, $recordid, 'XLS');\n\t\t\t$xlsobject->save($fname);\n\t\t\theader('Content-Type: application/x-msexcel');\n\t\t\theader('Content-Length: '.@filesize($fname));\n\t\t\theader('Content-disposition: attachment; filename=\"Comments'.$recordid.'.xls\"');\n\t\t\t$fh=fopen($fname, 'rb');\n\t\t\tfpassthru($fh);\n\t\t}\n\t\texit;\n\t\tbreak;\n\tcase 'ValidationExists':\n\t\t$valmod = vtlib_purify($_REQUEST['valmodule']);\n\t\tif (file_exists(\"modules/{$valmod}/{$valmod}Validation.php\")) {\n\t\t\techo 'yes';\n\t\t} else {\n\t\t\tinclude_once 'modules/cbMap/processmap/Validations.php';\n\t\t\tif (Validations::ValidationsExist($valmod)) {\n\t\t\t\techo 'yes';\n\t\t\t} elseif (recordIsAssignedToInactiveUser(vtlib_purify($_REQUEST['crmid']))) {\n\t\t\t\techo 'yes';\n\t\t\t} else {\n\t\t\t\t$lnks = Vtiger_Link::getAllByType(getTabid($valmod), 'PRESAVE', array('MODULE'=>$valmod, 'ACTION'=>'Save'));\n\t\t\t\tif (count($lnks)>0) {\n\t\t\t\t\techo 'yes';\n\t\t\t\t} else {\n\t\t\t\t\techo 'no';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdie();\n\t\tbreak;\n\tcase 'getWeekendDates':\n\t\t$startDate = vtlib_purify($_REQUEST['startFrom']);\n\t\t$endDate = vtlib_purify($_REQUEST['endFrom']);\n\t\t$format = isset($_REQUEST['dateFormat']) ? vtlib_purify($_REQUEST['dateFormat']) : 'Y-m-d';\n\t\t$ret = DateTimeField::getWeekendDates($startDate, $endDate, $format);\n\t\tbreak;\n\tcase 'ValidationLoad':\n\t\t$valmod = vtlib_purify($_REQUEST['valmodule']);\n\t\tinclude_once 'modules/cbMap/processmap/Validations.php';\n\t\tif (Validations::recordIsAssignedToInactiveUser()) {\n\t\t\techo getTranslatedString('RecordIsAssignedToInactiveUser');\n\t\t\tdie();\n\t\t}\n\t\t$validation = Validations::processAllValidationsFor($valmod);\n\t\tif ($validation!==true) {\n\t\t\techo Validations::formatValidationErrors($validation, $valmod);\n\t\t\tdie();\n\t\t}\n\t\tif (file_exists(\"modules/{$valmod}/{$valmod}Validation.php\")) {\n\t\t\tinclude \"modules/{$valmod}/{$valmod}Validation.php\";\n\t\t} else {\n\t\t\t$lnks = Vtiger_Link::getAllByType(getTabid($valmod), 'PRESAVE', array('MODULE'=>$valmod, 'ACTION'=>'Save'));\n\t\t\tif (count($lnks)>0) {\n\t\t\t\t$screen_values = json_decode($_REQUEST['structure'], true);\n\t\t\t\t$rdo = '';\n\t\t\t\tforeach ($lnks as $lnk) {\n\t\t\t\t\t$rdo .= vtlib_process_widget($lnk, $screen_values);\n\t\t\t\t}\n\t\t\t\techo $rdo;\n\t\t\t} else {\n\t\t\t\techo '%%%OK%%%';\n\t\t\t}\n\t\t}\n\t\tdie();\n\t\tbreak;\n\tcase 'getModuleWebseriviceID':\n\t\t$wsmod = vtlib_purify($_REQUEST['wsmodule']);\n\t\tif (!empty($wsmod)) {\n\t\t\t$ret = vtws_getEntityId($wsmod);\n\t\t} else {\n\t\t\t$ret = '';\n\t\t}\n\t\tbreak;\n\tcase 'updateBrowserTabSession':\n\t\t$newssid = vtlib_purify($_REQUEST['newtabssid']);\n\t\t$oldssid = vtlib_purify($_REQUEST['oldtabssid']);\n\t\tif (!empty($oldssid)) {\n\t\t\tforeach ($_SESSION as $key => $value) {\n\t\t\t\tif (strpos($key, $oldssid) !== false && strpos($key, $oldssid.'__prev') === false) {\n\t\t\t\t\t$newkey = str_replace($oldssid, $newssid, $key);\n\t\t\t\t\tcoreBOS_Session::set($newkey, $value);\n\t\t\t\t\tcoreBOS_Session::set($key, (isset($_SESSION[$key.'__prev']) ? $_SESSION[$key.'__prev'] : ''));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$ret = '';\n\t\tbreak;\n\tcase 'getEmailTemplateVariables':\n\t\t$module = vtlib_purify($_REQUEST['module_from']);\n\t\t$allOptions=getEmailTemplateVariables(array($module,'Accounts'));\n\t\t$ret = array_merge($allOptions[0], $allOptions[1], $allOptions[2]);\n\t\tbreak;\n\tcase 'downloadfile':\n\t\tinclude_once 'include/utils/downloadfile.php';\n\t\tdie();\n\t\tbreak;\n\tcase 'delImage':\n\t\tVtiger_Request::validateRequest();\n\t\tinclude_once 'include/utils/DelImage.php';\n\t\t$id = vtlib_purify($_REQUEST['recordid']);\n\t\t$id = preg_replace('/[^0-9]/', '', $id);\n\t\tif (isset($_REQUEST['attachmodule']) && $_REQUEST['attachmodule']=='Emails') {\n\t\t\tDelAttachment($id);\n\t\t} else {\n\t\t\tDelImage($id);\n\t\t}\n\t\techo 'SUCCESS';\n\t\tdie();\n\t\tbreak;\n\tcase 'saveAttachment':\n\t\tinclude_once 'modules/Settings/MailScanner/core/MailAttachmentMIME.php';\n\t\tinclude_once 'modules/MailManager/src/controllers/UploadController.php';\n\t\t$allowedFileExtension = array();\n\t\t$upload_maxsize = GlobalVariable::getVariable('Application_Upload_MaxSize', 3000000, 'Emails');\n\t\t$upload = new MailManager_Uploader($allowedFileExtension, $upload_maxsize);\n\t\tif ($upload) {\n\t\t\t$filePath = decideFilePath();\n\t\t\t$ret = $upload->handleUpload($filePath, false);\n\t\t} else {\n\t\t\t$ret = '';\n\t\t}\n\t\tbreak;\n\tcase 'getNumberDisplayValue':\n\t\t$value = vtlib_purify($_REQUEST['val']);\n\t\tif (empty($value)) {\n\t\t\t$ret = '0';\n\t\t} else {\n\t\t\t$currencyField = new CurrencyField($value);\n\t\t\t$decimals = vtlib_purify($_REQUEST['decimals']);\n\t\t\t$currencyField->initialize($current_user);\n\t\t\t$currencyField->setNumberofDecimals(min($decimals, $currencyField->getCurrencyDecimalPlaces()));\n\t\t\t$ret = $currencyField->getDisplayValue(null, true, true);\n\t\t}\n\t\tbreak;\n\tcase 'getGloalSearch':\n\tcase 'getGlobalSearch':\n\t\tinclude_once 'include/Webservices/CustomerPortalWS.php';\n\t\t$data = json_decode($_REQUEST['data'], true);\n\t\t$searchin = vtlib_purify($data['searchin']);\n\t\t$limit = isset($data['maxresults']) ? vtlib_purify($data['maxresults']) : '';\n\t\t$term = vtlib_purify($data['term']);\n\t\t$retvals = getGlobalSearch($term, $searchin, $limit, $current_user);\n\t\t$ret = array();\n\t\tif (!empty($retvals['data'])) {\n\t\t\tforeach ($retvals['data'] as $value) {\n\t\t\t\t$ret[] = array(\n\t\t\t\t\t'crmid' => $value['crmid'],\n\t\t\t\t\t'crmmodule' => $value['crmmodule'],\n\t\t\t\t\t'query_string' => $value['query_string'],\n\t\t\t\t\t'total' => $retvals['total']\n\t\t\t\t) + $value['crmfields'];\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getRelatedListInfo':\n\t\t$sql = 'SELECT rl.tabid,rl.related_tabid,rl.label,tab.name as name, tabrel.name as relname\n\t\t\tFROM vtiger_relatedlists rl\n\t\t\tLEFT JOIN vtiger_tab tab ON rl.tabid=tab.tabid\n\t\t\tLEFT JOIN vtiger_tab tabrel ON rl.related_tabid=tabrel.tabid\n\t\t\tWHERE relation_id=?';\n\t\t$res = $adb->pquery($sql, array($_REQUEST['relation_id']));\n\t\t$ret = array();\n\t\tif ($adb->num_rows($res) > 0) {\n\t\t\t$tabid = $adb->query_result($res, 0, 'tabid');\n\t\t\t$tabidrel = $adb->query_result($res, 0, 'related_tabid');\n\t\t\t$label = $adb->query_result($res, 0, 'label');\n\t\t\t$mod = $adb->query_result($res, 0, 'name');\n\t\t\t$modrel = $adb->query_result($res, 0, 'relname');\n\t\t\t$ret = array(\n\t\t\t\t'tabid'=>$tabid,\n\t\t\t\t'tabidrel'=>$tabidrel,\n\t\t\t\t'label'=>$label,\n\t\t\t\t'module'=>$mod,\n\t\t\t\t'modulerel'=>$modrel,\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'getSetting':\n\t\t$skey = vtlib_purify($_REQUEST['skey']);\n\t\tif (!empty($_REQUEST['default'])) {\n\t\t\t$default = vtlib_purify($_REQUEST['default']);\n\t\t\t$ret = coreBOS_Settings::getSetting($skey, $default);\n\t\t} else {\n\t\t\t$ret = coreBOS_Settings::getSetting($skey, null);\n\t\t}\n\t\tbreak;\n\tcase 'setSetting':\n\t\tVtiger_Request::validateRequest();\n\t\t$skey = vtlib_purify($_REQUEST['skey']);\n\t\t$svalue = vtlib_purify($_REQUEST['svalue']);\n\t\tcoreBOS_Settings::setSetting($skey, $svalue);\n\t\t$ret = '';\n\t\tbreak;\n\tcase 'delSetting':\n\t\tVtiger_Request::validateRequest();\n\t\t$skey = vtlib_purify($_REQUEST['skey']);\n\t\tcoreBOS_Settings::delSetting($skey);\n\t\t$ret = '';\n\t\tbreak;\n\tcase 'getTranslatedStrings':\n\t\tglobal $currentModule;\n\t\t$i18nm = empty($_REQUEST['i18nmodule']) ? $currentModule : vtlib_purify($_REQUEST['i18nmodule']);\n\t\t$tkeys = vtlib_purify($_REQUEST['tkeys']);\n\t\t$tkeys = explode(';', $tkeys);\n\t\t$ret = array();\n\t\tforeach ($tkeys as $tr) {\n\t\t\t$ret[$tr] = getTranslatedString($tr, $i18nm);\n\t\t}\n\t\tbreak;\n\tcase 'execrule':\n\t\t$ret = '';\n\t\tif (isset($_REQUEST['rulebmap'])) {\n\t\t\t$bmap = vtlib_purify($_REQUEST['rulebmap']);\n\t\t\tif (is_numeric($bmap)) {\n\t\t\t\t$cbmap = cbMap::getMapByID($bmap);\n\t\t\t} else {\n\t\t\t\t$cbmapid = GlobalVariable::getVariable('BusinessMapping_'.$bmap, cbMap::getMapIdByName($bmap));\n\t\t\t\t$cbmap = cbMap::getMapByID($cbmapid);\n\t\t\t}\n\t\t\t$screen_values = json_decode($_REQUEST['structure'], true);\n\t\t\tif (empty($_REQUEST['record'])) { // isNew\n\t\t\t\tif (!empty($cbmap) && ($cbmap->column_fields['maptype'] == 'Condition Expression' || $cbmap->column_fields['maptype'] == 'DecisionTable')) {\n\t\t\t\t\tif ($cbmap->column_fields['maptype'] == 'Condition Expression') {\n\t\t\t\t\t\t$ret = $cbmap->ConditionExpression($screen_values);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret = $cbmap->DecisionTable($screen_values);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { // editing\n\t\t\t\t$screen_values['record_id'] = vtlib_purify($_REQUEST['record']);\n\t\t\t\t$ret = coreBOS_Rule::evaluate($bmap, $screen_values);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'execwf':\n\t\tinclude_once 'include/Webservices/ExecuteWorkflow.php';\n\t\t$wfid = vtlib_purify($_REQUEST['wfid']);\n\t\t$ids = explode(';', trim(vtlib_purify($_REQUEST['ids']), ';'));\n\t\t$id = reset($ids);\n\t\t$wsid = vtws_getEntityId(getSalesEntityType($id)).'x';\n\t\t$crmids = array();\n\t\tforeach ($ids as $crmid) {\n\t\t\t$crmids[] = $wsid.$crmid;\n\t\t}\n\t\tif (empty($_REQUEST['ctx'])) {\n\t\t\t$context = '[]';\n\t\t} else {\n\t\t\t$context = vtlib_purify($_REQUEST['ctx']);\n\t\t}\n\t\ttry {\n\t\t\t$ret = cbwsExecuteWorkflowWithContext($wfid, json_encode($crmids), $context, $current_user);\n\t\t} catch (Exception $e) {\n\t\t\t$ret = false;\n\t\t}\n\t\tbreak;\n\tcase 'setDetailViewBlockStatus':\n\t\tif (GlobalVariable::getVariable('Application_DetailView_Sticky_BlockStatus', '0')=='1') {\n\t\t\t$blockssesion = coreBOS_Session::get('DVBLOCKSTATUS^'.$_REQUEST['dvmodule']);\n\t\t\t$blocks = getBlockOpenClosedStatus($_REQUEST['dvmodule'], 'detail');\n\t\t\tforeach ($blocks as $blabel => $bstatus) {\n\t\t\t\tif ('tbl'.str_replace(' ', '', $blabel)==$_REQUEST['dvblock']) {\n\t\t\t\t\t$blockssesion[$blabel] = vtlib_purify($_REQUEST['dvstatus']);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcoreBOS_Session::set('DVBLOCKSTATUS^'.$_REQUEST['dvmodule'], $blockssesion);\n\t\t}\n\t\t$ret = true;\n\t\tbreak;\n\tcase 'ispermitted':\n\t\t$mod = vtlib_purify($_REQUEST['checkmodule']);\n\t\t$act = vtlib_purify($_REQUEST['checkaction']);\n\t\t$rec = isset($_REQUEST['checkrecord']) ? vtlib_purify($_REQUEST['checkrecord']) : '';\n\t\t$rdo = isPermitted($mod, $act, $rec)=='yes';\n\t\t$ret = array('isPermitted'=>$rdo);\n\t\tbreak;\n\tcase 'checkButton':\n\t\t$mod = vtlib_purify($_REQUEST['formodule']);\n\t\t$ret = Button_Check($mod);\n\t\tbreak;\n\tcase 'getRecordActions':\n\t\tinclude_once 'include/ListView/ListViewGrid.php';\n\t\t$mod = vtlib_purify($_REQUEST['formodule']);\n\t\t$recordid = vtlib_purify($_REQUEST['recordid']);\n\t\t$grid = new GridListView($mod);\n\t\t$ret = $grid->Actions($recordid);\n\t\tbreak;\n\tcase 'listViewJSON':\n\t\tinclude_once 'include/ListView/ListViewGrid.php';\n\t\tif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'updateDataListView') {\n\t\t\t$grid = new GridListView($_REQUEST['modulename']);\n\t\t\t$grid->Update();\n\t\t\t$ret = array();\n\t\t} else {\n\t\t\t$orderBy = ' DESC';\n\t\t\t$entries = GlobalVariable::getVariable('Application_ListView_PageSize', 20, $currentModule);\n\t\t\t$formodule = isset($_REQUEST['formodule']) ? vtlib_purify($_REQUEST['formodule']) : '';\n\t\t\t$columns = isset($_REQUEST['columns']) ? vtlib_purify($_REQUEST['columns']) : '';\n\t\t\t$beforeFilter = isset($_REQUEST['beforeFilter']) ? vtlib_purify($_REQUEST['beforeFilter']) : '';\n\t\t\t$tabid = getTabid($formodule);\n\t\t\t$grid = new GridListView($formodule);\n\t\t\tif (isset($_REQUEST['perPage'])) {\n\t\t\t\t//get data\n\t\t\t\t$perPage = isset($_REQUEST['perPage']) ? vtlib_purify($_REQUEST['perPage']) : $entries;\n\t\t\t\t$sortAscending = isset($_REQUEST['sortAscending']) ? vtlib_purify($_REQUEST['sortAscending']) : '';\n\t\t\t\t$sortColumn = isset($_REQUEST['sortColumn']) ? vtlib_purify($_REQUEST['sortColumn']) : '';\n\t\t\t\t$page = isset($_REQUEST['page']) ? vtlib_purify($_REQUEST['page']) : 1;\n\t\t\t\t$search = isset($_REQUEST['search']) ? vtlib_purify($_REQUEST['search']) : '';\n\t\t\t\t$searchtype = isset($_REQUEST['searchtype']) ? vtlib_purify($_REQUEST['searchtype']) : '';\n\t\t\t\t$session_sort = coreBOS_Session::get($formodule.'_Sort_Order');\n\t\t\t\tif ($session_sort != '') {\n\t\t\t\t\tif ($session_sort == ' ASC' && $sortAscending == 'true') {\n\t\t\t\t\t\t$orderBy = ' ASC';\n\t\t\t\t\t} elseif ($session_sort == ' ASC' && $sortAscending == 'false') {\n\t\t\t\t\t\t$orderBy = ' DESC';\n\t\t\t\t\t} elseif ($session_sort == ' DESC' && $sortAscending == 'true') {\n\t\t\t\t\t\t$orderBy = ' ASC';\n\t\t\t\t\t} elseif ($session_sort == ' DESC' && $sortAscending == 'false') {\n\t\t\t\t\t\t$orderBy = ' DESC';\n\t\t\t\t\t} elseif ($sortAscending == '') {\n\t\t\t\t\t\t$orderBy = $session_sort;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($sortAscending == 'true') {\n\t\t\t\t\t\t$orderBy = ' ASC';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcoreBOS_Session::set($formodule.'_Sort_Order', $orderBy);\n\t\t\t\t$grid->tabid = $tabid;\n\t\t\t\t$grid->entries = $perPage;\n\t\t\t\t$grid->orderBy = $orderBy;\n\t\t\t\t$grid->sortColumn = $sortColumn;\n\t\t\t\t$grid->currentPage = $page;\n\t\t\t\t$grid->searchUrl = $search;\n\t\t\t\t$grid->searchtype = $searchtype;\n\t\t\t\t$lv = $grid->Show();\n\t\t\t} else {\n\t\t\t\t$grid->tabid = $tabid;\n\t\t\t\t$lv = $grid->Headers();\n\t\t\t}\n\t\t\tif (isset($columns) && $columns == 'true') {\n\t\t\t\t$ret = array($lv['headers'], $lv['customview'], $lv['folders']);\n\t\t\t} else {\n\t\t\t\t$ret = $lv['data'];\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'getUserName':\n\t\t$ret = getUserName(vtlib_purify($_REQUEST['userid']));\n\t\tbreak;\n\tcase 'getImageInfoFor':\n\t\t$id = vtlib_purify($_REQUEST['record']);\n\t\t$imageinfo = array();\n\t\tif (isPermitted(getSalesEntityType($id), 'DetailView', $id)=='yes') {\n\t\t\trequire_once 'include/Webservices/getRecordImages.php';\n\t\t\t$imageinfo = cbws_getrecordimageinfo($id, $current_user);\n\t\t}\n\t\theader('Content-Type: application/json');\n\t\tif ((int)$imageinfo['results'] > 0) {\n\t\t\t$ret = $imageinfo;\n\t\t} else {\n\t\t\t$ret = '';\n\t\t}\n\t\tbreak;\n\tcase 'isAdmin':\n\t\tif (is_admin($current_user)) {\n\t\t\t$ret = array('admin' => 'on');\n\t\t} else {\n\t\t\t$ret = array('admin' => 'off');\n\t\t}\n\t\tbreak;\n\tcase 'setNewPassword':\n\t\tVtiger_Request::validateRequest();\n\t\trequire_once 'modules/Users/Users.php';\n\t\trequire_once 'include/utils/UserInfoUtil.php';\n\t\trequire_once 'include/Webservices/ChangePassword.php';\n\t\t$userid = vtlib_purify($_REQUEST['record']);\n\t\ttry {\n\t\t\t$npass = vtlib_purify($_REQUEST['new_password']);\n\t\t\tvtws_changePassword(vtlib_purify($_REQUEST['record']), 'nocheck_old_password', $npass, $npass, $current_user);\n\t\t\t$ret = array('password'=>true);\n\t\t} catch (\\Throwable $th) {\n\t\t\t$ret = array('password'=>false, 'msg' => $th->getMessage());\n\t\t}\n\t\tbreak;\n\tcase 'ismoduleactive':\n\t\t$mod = vtlib_purify($_REQUEST['checkmodule']);\n\t\t$rdo = vtlib_isModuleActive($mod);\n\t\t$ret = array('isactive'=>$rdo);\n\t\tbreak;\n\tcase 'deleteModule':\n\t\t$modname = vtlib_purify($_REQUEST['formodule']);\n\t\t$module = Vtiger_Module::getInstance($modname);\n\t\tif ($module && is_admin($current_user)) {\n\t\t\trequire_once 'modules/com_vtiger_workflow/VTEntityMethodManager.inc';\n\t\t\t$ev = new VTEventsManager($adb);\n\t\t\t$handlers = $ev->listHandlersForModule($modname);\n\t\t\tif (!empty($handlers)) {\n\t\t\t\tforeach ($handlers as $className) {\n\t\t\t\t\t$ev->unregisterHandler($className);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$module->deleteRelatedLists();\n\t\t\t$module->deleteLinks();\n\t\t\t$module->deinitWebservice();\n\t\t\t$module->delete();\n\t\t\t$ret = array(\n\t\t\t\t'success' => true,\n\t\t\t\t'message' => 'Module '.getTranslatedString($modname, $modname).' EXTERMINATED!'\n\t\t\t);\n\t\t} else {\n\t\t\t$ret = array(\n\t\t\t\t'success' => false,\n\t\t\t\t'message' => 'Failed to find '.getTranslatedString($modname, $modname).' module.'\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'getMapByName':\n\t\t$mapname = vtlib_purify($_REQUEST['mapname']);\n\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$mapname, cbMap::getMapIdByName($mapname));\n\t\t$content = 'NOT_PERMITTED';\n\t\tif ($cbMapid && isPermitted('cbMap', 'DetailView', $cbMapid)=='yes') {\n\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t$mtype = $cbMap->column_fields['maptype'];\n\t\t\t$content = $cbMap->$mtype();\n\t\t}\n\t\t$ret = array(\n\t\t\t'content' => $content\n\t\t);\n\t\tbreak;\n\tcase 'setNotificationStatus':\n\t\t$rdo = $adb->pquery(\n\t\t\t'update vtiger_activity_reminder_popup set status=? WHERE moreinfo->\"$.id\"=?',\n\t\t\t[vtlib_purify($_REQUEST['status']), vtlib_purify($_REQUEST['remid'])]\n\t\t);\n\t\t$ret = ($rdo!==false);\n\t\tbreak;\n\tcase 'getFieldsAttributes':\n\t\t$fields = vtlib_purify($_REQUEST['fields']);\n\t\t$modulename = vtlib_purify($_REQUEST['modulename']);\n\t\t$tabid = getTabid($modulename);\n\t\t$fields = explode(',', $fields);\n\t\t$rs = $adb->pquery(\n\t\t\t'SELECT tablename, fieldname, columnname, fieldlabel, typeofdata FROM vtiger_field WHERE tabid=? AND fieldname IN ('.generateQuestionMarks($fields).')',\n\t\t\tarray($tabid, $fields)\n\t\t);\n\t\t$fieldInfo = array();\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$typeofdata = explode('~', $row['typeofdata']);\n\t\t\t$fieldInfo[] = array(\n\t\t\t\t'tablename' => $row['tablename'],\n\t\t\t\t'fieldname' => $row['fieldname'],\n\t\t\t\t'columnname' => $row['columnname'],\n\t\t\t\t'fieldlabel' => $row['fieldlabel'],\n\t\t\t\t'typeofdata' => $typeofdata[0]\n\t\t\t);\n\t\t}\n\t\t$ret = array(\n\t\t\t'fields' => $fieldInfo,\n\t\t);\n\t\tbreak;\n\tcase 'clickHouse':\n\t\tinclude_once 'include/integrations/clickhouse/clickhouse.php';\n\t\t$clickHouse = new corebos_clickhouse();\n\t\tif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'addUpdateTable') {\n\t\t\t$ws_name = $_REQUEST['ws_name'];\n\t\t\t$table_name = $_REQUEST['table_name'];\n\t\t\t$access = $_REQUEST['access'];\n\t\t\t$create = $_REQUEST['create'];\n\t\t\t$read = $_REQUEST['read'];\n\t\t\t$write = $_REQUEST['write'];\n\t\t\t$old_ws_name = $_REQUEST['old_ws_name'];\n\t\t\t$old_table_name = $_REQUEST['old_table_name'];\n\t\t\t$ret = $clickHouse->addUpdateTable($ws_name, $table_name, $access, $create, $read, $write, $old_ws_name, $old_table_name);\n\t\t} elseif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'getTables') {\n\t\t\t$grid = new GridListView('Utilities');\n\t\t\t$q = 'select * from vtiger_ws_clickhousetables';\n\t\t\t$field_lists = array(\n\t\t\t\t'id' => array('vtiger_ws_clickhousetables'=>'id'),\n\t\t\t\t'ws_name' => array('vtiger_ws_clickhousetables'=>'ws_name'),\n\t\t\t\t'table_name' => array('vtiger_ws_clickhousetables'=>'table_name') ,\n\t\t\t\t'access' => array('vtiger_ws_clickhousetables'=>'access'),\n\t\t\t\t'create' => array('vtiger_ws_clickhousetables'=>'create'),\n\t\t\t\t'read' => array('vtiger_ws_clickhousetables'=>'read'),\n\t\t\t\t'write' => array('vtiger_ws_clickhousetables'=>'write'),\n\t\t\t\t'delete' => array('vtiger_ws_clickhousetables'=>'delete'),\n\t\t\t);\n\t\t\t$ret = $grid->gridTableBasedEntries($q, $field_lists, 'vtiger_ws_clickhousetables');\n\t\t} elseif (isset($_REQUEST['method']) && $_REQUEST['method'] == 'deleteTable') {\n\t\t\t$table_name = $_REQUEST['table_name'];\n\t\t\t$ws_name = $_REQUEST['ws_name'];\n\t\t\t$res = $clickHouse->deleteTable($table_name, $ws_name);\n\t\t\tif ($res) {\n\t\t\t\t$success = true;\n\t\t\t} else {\n\t\t\t\t$success = false;\n\t\t\t}\n\t\t\t$ret = array(\n\t\t\t\t'success' => $success,\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'shareLink':\n\t\trequire_once 'modules/Documents/ShareDocLinkWidgetDetailViewBlock.php';\n\t\t$recordId = vtlib_purify($_REQUEST['recordId']);\n\t\t$operation = vtlib_purify($_REQUEST['operation']);\n\t\tif ($operation == 'create') {\n\t\t\t$doclink = new ShareDocLinkWidgetDetailViewBlock();\n\t\t\t$expirationTime = time() + 86400; // one day\n\t\t\t$timeString = date('Y-m-d H:i:s', $expirationTime);\n\t\t\t$shareToken = $doclink->createShareLinkForSlider($recordId, $expirationTime);\n\t\t\t$ret = array(\n\t\t\t\t'shareToken' => $shareToken,\n\t\t\t\t'validUntil' => $timeString,\n\t\t\t);\n\t\t}\n\t\tbreak;\n\tcase 'compressAndDownloadFiles':\n\t\t// you have to call this ExecuteFunctions with the downloadFilesAsZip() js function\n\t\t// in order to be able to download the file. if you make a normal http request it will\n\t\t// give the binary data of the zip file and will not download it automatically.\n\t\tglobal $root_directory;\n\t\t$zipFileName = vtlib_purify($_REQUEST['zipFileName']);\n\t\t$filesToBeCompressed = json_decode(vtlib_purify($_REQUEST['filesToBeCompressed']));\n\t\t$zip = new Vtiger_Zip('test.zip');\n\t\tforeach ($filesToBeCompressed as $value) {\n\t\t\t$filePath = convertFileUrlToRelativePath($value);\n\t\t\t$fileName = explode('/', convertFileUrlToRelativePath($value))[count(explode('/', convertFileUrlToRelativePath($value)))-1];\n\t\t\t$zip->addFile($root_directory  . $filePath, $fileName);\n\t\t}\n\t\t$zip->save();\n\t\t$zip->forceDownload($zipFileName);\n\t\t$ret = array(\n\t\t\t'success' => true,\n\t\t);\n\t\tbreak;\n\tdefault:\n\t\t$ret = '';\n\t\tbreak;\n}\necho json_encode($ret);\ndie();\n?>\n"], "filenames": ["modules/Vtiger/ExecuteFunctions.php"], "buggy_code_start_loc": [623], "buggy_code_end_loc": [638], "fixing_code_start_loc": [624], "fixing_code_end_loc": [632], "type": "CWE-287", "message": "Unverified Password Change in GitHub repository tsolucio/corebos prior to 8.", "other": {"cve": {"id": "CVE-2023-3069", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-02T17:15:13.380", "lastModified": "2023-06-08T17:43:09.440", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unverified Password Change in GitHub repository tsolucio/corebos prior to 8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-620"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:corebos:corebos:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.0", "matchCriteriaId": "2ED1C4A9-9F39-4663-9E1B-6270C9CC2539"}]}]}], "references": [{"url": "https://github.com/tsolucio/corebos/commit/e3dabd74c68646bb54538d66411fc1e633ec454b", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/00544982-365a-476b-b5fe-42f02f11d367", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/tsolucio/corebos/commit/e3dabd74c68646bb54538d66411fc1e633ec454b"}}