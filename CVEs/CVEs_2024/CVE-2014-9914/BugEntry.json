{"buggy_code": ["/*\n *\tcommon UDP/RAW code\n *\tLinux INET implementation\n *\n * Authors:\n * \tHideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>\n *\n * \tThis program is free software; you can redistribute it and/or\n * \tmodify it under the terms of the GNU General Public License\n * \tas published by the Free Software Foundation; either version\n * \t2 of the License, or (at your option) any later version.\n */\n\n#include <linux/types.h>\n#include <linux/module.h>\n#include <linux/ip.h>\n#include <linux/in.h>\n#include <net/ip.h>\n#include <net/sock.h>\n#include <net/route.h>\n#include <net/tcp_states.h>\n\nint ip4_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)\n{\n\tstruct inet_sock *inet = inet_sk(sk);\n\tstruct sockaddr_in *usin = (struct sockaddr_in *) uaddr;\n\tstruct flowi4 *fl4;\n\tstruct rtable *rt;\n\t__be32 saddr;\n\tint oif;\n\tint err;\n\n\n\tif (addr_len < sizeof(*usin))\n\t\treturn -EINVAL;\n\n\tif (usin->sin_family != AF_INET)\n\t\treturn -EAFNOSUPPORT;\n\n\tsk_dst_reset(sk);\n\n\tlock_sock(sk);\n\n\toif = sk->sk_bound_dev_if;\n\tsaddr = inet->inet_saddr;\n\tif (ipv4_is_multicast(usin->sin_addr.s_addr)) {\n\t\tif (!oif)\n\t\t\toif = inet->mc_index;\n\t\tif (!saddr)\n\t\t\tsaddr = inet->mc_addr;\n\t}\n\tfl4 = &inet->cork.fl.u.ip4;\n\trt = ip_route_connect(fl4, usin->sin_addr.s_addr, saddr,\n\t\t\t      RT_CONN_FLAGS(sk), oif,\n\t\t\t      sk->sk_protocol,\n\t\t\t      inet->inet_sport, usin->sin_port, sk);\n\tif (IS_ERR(rt)) {\n\t\terr = PTR_ERR(rt);\n\t\tif (err == -ENETUNREACH)\n\t\t\tIP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);\n\t\tgoto out;\n\t}\n\n\tif ((rt->rt_flags & RTCF_BROADCAST) && !sock_flag(sk, SOCK_BROADCAST)) {\n\t\tip_rt_put(rt);\n\t\terr = -EACCES;\n\t\tgoto out;\n\t}\n\tif (!inet->inet_saddr)\n\t\tinet->inet_saddr = fl4->saddr;\t/* Update source address */\n\tif (!inet->inet_rcv_saddr) {\n\t\tinet->inet_rcv_saddr = fl4->saddr;\n\t\tif (sk->sk_prot->rehash)\n\t\t\tsk->sk_prot->rehash(sk);\n\t}\n\tinet->inet_daddr = fl4->daddr;\n\tinet->inet_dport = usin->sin_port;\n\tsk->sk_state = TCP_ESTABLISHED;\n\tinet->inet_id = jiffies;\n\n\tsk_dst_set(sk, &rt->dst);\n\terr = 0;\nout:\n\trelease_sock(sk);\n\treturn err;\n}\nEXPORT_SYMBOL(ip4_datagram_connect);\n\nvoid ip4_datagram_release_cb(struct sock *sk)\n{\n\tconst struct inet_sock *inet = inet_sk(sk);\n\tconst struct ip_options_rcu *inet_opt;\n\t__be32 daddr = inet->inet_daddr;\n\tstruct flowi4 fl4;\n\tstruct rtable *rt;\n\n\tif (! __sk_dst_get(sk) || __sk_dst_check(sk, 0))\n\t\treturn;\n\n\trcu_read_lock();\n\tinet_opt = rcu_dereference(inet->inet_opt);\n\tif (inet_opt && inet_opt->opt.srr)\n\t\tdaddr = inet_opt->opt.faddr;\n\trt = ip_route_output_ports(sock_net(sk), &fl4, sk, daddr,\n\t\t\t\t   inet->inet_saddr, inet->inet_dport,\n\t\t\t\t   inet->inet_sport, sk->sk_protocol,\n\t\t\t\t   RT_CONN_FLAGS(sk), sk->sk_bound_dev_if);\n\tif (!IS_ERR(rt))\n\t\t__sk_dst_set(sk, &rt->dst);\n\trcu_read_unlock();\n}\nEXPORT_SYMBOL_GPL(ip4_datagram_release_cb);\n"], "fixing_code": ["/*\n *\tcommon UDP/RAW code\n *\tLinux INET implementation\n *\n * Authors:\n * \tHideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>\n *\n * \tThis program is free software; you can redistribute it and/or\n * \tmodify it under the terms of the GNU General Public License\n * \tas published by the Free Software Foundation; either version\n * \t2 of the License, or (at your option) any later version.\n */\n\n#include <linux/types.h>\n#include <linux/module.h>\n#include <linux/ip.h>\n#include <linux/in.h>\n#include <net/ip.h>\n#include <net/sock.h>\n#include <net/route.h>\n#include <net/tcp_states.h>\n\nint ip4_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)\n{\n\tstruct inet_sock *inet = inet_sk(sk);\n\tstruct sockaddr_in *usin = (struct sockaddr_in *) uaddr;\n\tstruct flowi4 *fl4;\n\tstruct rtable *rt;\n\t__be32 saddr;\n\tint oif;\n\tint err;\n\n\n\tif (addr_len < sizeof(*usin))\n\t\treturn -EINVAL;\n\n\tif (usin->sin_family != AF_INET)\n\t\treturn -EAFNOSUPPORT;\n\n\tsk_dst_reset(sk);\n\n\tlock_sock(sk);\n\n\toif = sk->sk_bound_dev_if;\n\tsaddr = inet->inet_saddr;\n\tif (ipv4_is_multicast(usin->sin_addr.s_addr)) {\n\t\tif (!oif)\n\t\t\toif = inet->mc_index;\n\t\tif (!saddr)\n\t\t\tsaddr = inet->mc_addr;\n\t}\n\tfl4 = &inet->cork.fl.u.ip4;\n\trt = ip_route_connect(fl4, usin->sin_addr.s_addr, saddr,\n\t\t\t      RT_CONN_FLAGS(sk), oif,\n\t\t\t      sk->sk_protocol,\n\t\t\t      inet->inet_sport, usin->sin_port, sk);\n\tif (IS_ERR(rt)) {\n\t\terr = PTR_ERR(rt);\n\t\tif (err == -ENETUNREACH)\n\t\t\tIP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);\n\t\tgoto out;\n\t}\n\n\tif ((rt->rt_flags & RTCF_BROADCAST) && !sock_flag(sk, SOCK_BROADCAST)) {\n\t\tip_rt_put(rt);\n\t\terr = -EACCES;\n\t\tgoto out;\n\t}\n\tif (!inet->inet_saddr)\n\t\tinet->inet_saddr = fl4->saddr;\t/* Update source address */\n\tif (!inet->inet_rcv_saddr) {\n\t\tinet->inet_rcv_saddr = fl4->saddr;\n\t\tif (sk->sk_prot->rehash)\n\t\t\tsk->sk_prot->rehash(sk);\n\t}\n\tinet->inet_daddr = fl4->daddr;\n\tinet->inet_dport = usin->sin_port;\n\tsk->sk_state = TCP_ESTABLISHED;\n\tinet->inet_id = jiffies;\n\n\tsk_dst_set(sk, &rt->dst);\n\terr = 0;\nout:\n\trelease_sock(sk);\n\treturn err;\n}\nEXPORT_SYMBOL(ip4_datagram_connect);\n\n/* Because UDP xmit path can manipulate sk_dst_cache without holding\n * socket lock, we need to use sk_dst_set() here,\n * even if we own the socket lock.\n */\nvoid ip4_datagram_release_cb(struct sock *sk)\n{\n\tconst struct inet_sock *inet = inet_sk(sk);\n\tconst struct ip_options_rcu *inet_opt;\n\t__be32 daddr = inet->inet_daddr;\n\tstruct dst_entry *dst;\n\tstruct flowi4 fl4;\n\tstruct rtable *rt;\n\n\trcu_read_lock();\n\n\tdst = __sk_dst_get(sk);\n\tif (!dst || !dst->obsolete || dst->ops->check(dst, 0)) {\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\tinet_opt = rcu_dereference(inet->inet_opt);\n\tif (inet_opt && inet_opt->opt.srr)\n\t\tdaddr = inet_opt->opt.faddr;\n\trt = ip_route_output_ports(sock_net(sk), &fl4, sk, daddr,\n\t\t\t\t   inet->inet_saddr, inet->inet_dport,\n\t\t\t\t   inet->inet_sport, sk->sk_protocol,\n\t\t\t\t   RT_CONN_FLAGS(sk), sk->sk_bound_dev_if);\n\n\tdst = !IS_ERR(rt) ? &rt->dst : NULL;\n\tsk_dst_set(sk, dst);\n\n\trcu_read_unlock();\n}\nEXPORT_SYMBOL_GPL(ip4_datagram_release_cb);\n"], "filenames": ["net/ipv4/datagram.c"], "buggy_code_start_loc": [88], "buggy_code_end_loc": [110], "fixing_code_start_loc": [89], "fixing_code_end_loc": [120], "type": "CWE-362", "message": "Race condition in the ip4_datagram_release_cb function in net/ipv4/datagram.c in the Linux kernel before 3.15.2 allows local users to gain privileges or cause a denial of service (use-after-free) by leveraging incorrect expectations about locking during multithreaded access to internal data structures for IPv4 UDP sockets.", "other": {"cve": {"id": "CVE-2014-9914", "sourceIdentifier": "security@android.com", "published": "2017-02-07T07:59:00.183", "lastModified": "2023-01-17T21:40:59.560", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Race condition in the ip4_datagram_release_cb function in net/ipv4/datagram.c in the Linux kernel before 3.15.2 allows local users to gain privileges or cause a denial of service (use-after-free) by leveraging incorrect expectations about locking during multithreaded access to internal data structures for IPv4 UDP sockets."}, {"lang": "es", "value": "Condici\u00f3n de carrera en la funci\u00f3n ip4_datagram_release_cb en net/ipv4/datagram.c en el kernel de Linux en versiones anteriores a 3.15.2 permite a usuarios locales obtener privilegios o provocar una denegaci\u00f3n de servicio (uso despu\u00e9s de liberaci\u00f3n de memoria) aprovechando expectativas incorrectas sobre el bloqueo durante el acceso multihilo a las estructuras de datos internas para sockets IPv4 UDP."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-362"}, {"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.7.8", "versionEndExcluding": "3.10.45", "matchCriteriaId": "80A43C19-EC66-4102-8135-E392C8D06017"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.11", "versionEndExcluding": "3.12.23", "matchCriteriaId": "655FD88B-E9E2-423E-9E42-4289EA0ED29D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.13", "versionEndExcluding": "3.14.9", "matchCriteriaId": "08F42EB9-1436-4C37-AD7B-6E6FB1F7C717"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.15", "versionEndExcluding": "3.15.2", "matchCriteriaId": "85903EBC-EB08-4A3D-8CC7-A7DDC755B5F5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:google:android:*:*:*:*:*:*:*:*", "versionEndIncluding": "7.1.1", "matchCriteriaId": "0F11609D-D1B4-4DD6-8CC7-A224344E1E67"}]}]}], "references": [{"url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9709674e68646cee5a24e3000b3558d25412203a", "source": "security@android.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "http://source.android.com/security/bulletin/2017-02-01.html", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.15.2", "source": "security@android.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/bid/96100", "source": "security@android.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037798", "source": "security@android.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/torvalds/linux/commit/9709674e68646cee5a24e3000b3558d25412203a", "source": "security@android.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/9709674e68646cee5a24e3000b3558d25412203a"}}