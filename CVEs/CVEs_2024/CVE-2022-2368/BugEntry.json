{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\User;\n\nuse Illuminate\\Http\\Client\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Config;\nuse Laravel\\Socialite\\SocialiteManager;\nuse Illuminate\\Support\\Facades\\Session;\nuse Auth;\nuse MicroweberPackages\\App\\Http\\RequestRoute;\nuse MicroweberPackages\\App\\LoginAttempt;\nuse MicroweberPackages\\User\\Http\\Controllers\\UserLoginController;\nuse MicroweberPackages\\User\\Http\\Requests\\LoginRequest;\nuse MicroweberPackages\\User\\Http\\Resources\\UserResource;\nuse MicroweberPackages\\User\\Models\\User;\nuse MicroweberPackages\\User\\Socialite\\MicroweberProvider;\nuse MicroweberPackages\\Utils\\ThirdPartyLibs\\DisposableEmailChecker;\n\n\nclass UserManager\n{\n    public $tables = array();\n\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public function __construct($app = null)\n    {\n        $this->set_table_names();\n\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n        $this->socialite = new SocialiteManager($this->app);\n    }\n\n    public function set_table_names($tables = false)\n    {\n        if (!is_array($tables)) {\n            $tables = array();\n        }\n        if (!isset($tables['users'])) {\n            $tables['users'] = 'users';\n        }\n        if (!isset($tables['log'])) {\n            $tables['log'] = 'log';\n        }\n\n        $this->tables['users'] = $tables['users'];\n        $this->tables['log'] = $tables['log'];\n    }\n\n    public function is_admin()\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        if (Auth::check()) {\n            return Auth::user()->is_admin;\n        }\n    }\n\n    public function id()\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        if (Auth::check()) {\n            return Auth::user()->id;\n        }\n\n        return false;\n    }\n\n    /**\n     * Allows you to login a user into the system.\n     *\n     * It also sets user session when the user is logged. <br />\n     * On 5 unsuccessful logins, blocks the ip for few minutes <br />\n     *\n     *\n     * @param array|string $params You can pass parameter as string or as array.\n     * @param mixed|string $params ['email'] optional If you set  it will use this email for login\n     * @param mixed|string $params ['password'] optional Use password for login, it gets trough $this->hash_pass() function\n     *\n     * @example\n     * <code>\n     * //login with username\n     * $this->login('username=test&password=pass')\n     * </code>\n     * @example\n     * <code>\n     * //login with email\n     * $this->login('email=my@email.com&password=pass')\n     * </code>\n     * @example\n     * <code>\n     * //login hashed password\n     * $this->login('email=my@email.com&password_hashed=c4ca4238a0b923820dcc509a6f75849b')\n     * </code>\n     *\n     * @return array|bool\n     *\n     * @category Users\n     *\n     * @uses     $this->hash_pass()\n     * @uses     parse_str()\n     * @uses     $this->get_all()\n     * @uses     $this->session_set()\n     * @uses     $this->app->log_manager->get()\n     * @uses     $this->app->log_manager->save()\n     * @uses     $this->login_set_failed_attempt()\n     * @uses     $this->update_last_login_time()\n     * @uses     $this->app->event_manager->trigger()\n     * @function $this->login()\n     *\n     * @see      _table() For the database table fields\n     */\n\n    public function codeLogin()\n    {\n        if (!function_exists('get_whitelabel_whmcs_settings')) {\n            return false;\n        }\n\n        $code = $_GET['code_login'];\n        $parse = parse_url(site_url());\n        if (!isset($parse['host'])) {\n            return redirect(admin_url());\n        }\n\n        $domain = $parse['host'];\n        $domain = str_replace('www.','', $domain);\n\n        $whmcsSettings = get_whitelabel_whmcs_settings();\n\n        if (!isset($whmcsSettings['whmcs_url']) || empty($whmcsSettings['whmcs_url'])) {\n            return redirect(admin_url());\n        }\n\n        $verifyUrl = $whmcsSettings['whmcs_url'] . '/index.php?m=microweber_addon&function=verify_login_code&code='.$code.'&domain='.$domain;\n\n        $verifyCheck = @app()->http->url($verifyUrl)->get();\n        $verifyCheck = @json_decode($verifyCheck, true);\n\n        if (isset($verifyCheck['success']) && $verifyCheck['success'] == true && isset($verifyCheck['code']) && $verifyCheck['code'] == $code) {\n            $user = User::where('is_admin', '=', '1')->first();\n            if ($user !== null) {\n                \\Illuminate\\Support\\Facades\\Auth::login($user);\n\n                if (isset($_GET['http_redirect']) && !empty($_GET['http_redirect'])) {\n                    return redirect($_GET['http_redirect']);\n                }\n            }\n\n            return redirect(admin_url());\n        }\n\n        return redirect(admin_url());\n    }\n\n    public function login($params)\n    {\n        $params = parse_params($params);\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n\n        $check = $this->app->log_manager->get('no_cache=1&count=1&updated_at=[mt]1 min ago&is_system=y&rel_type=login_failed&user_ip=' . user_ip());\n        $url = $this->app->url->current(1);\n        if ($check == 5) {\n            $url_href = \"<a href='$url' target='_blank'>$url</a>\";\n            $this->app->log_manager->save('title=User IP ' . user_ip() . ' is blocked for 1 minute for 5 failed logins.&content=Last login url was ' . $url_href . '&is_system=n&rel_type=login_failed&user_ip=' . user_ip());\n        }\n        if ($check > 5) {\n            $check = $check - 1;\n            return array('error' => 'There are ' . $check . ' failed login attempts from your IP in the last minute. Try again in 1 minute!');\n        }\n\n        $check2 = $this->app->log_manager->get('no_cache=1&is_system=y&count=1&created_at=[mt]10 min ago&updated_at=[lt]10 min&rel_type=login_failed&user_ip=' . user_ip());\n        if ($check2 > 25) {\n            return array('error' => 'There are ' . $check2 . ' failed login attempts from your IP in the last 10 minutes. You are blocked for 10 minutes!');\n        }\n\n        if (isset($params['code_login'])) {\n            return $this->codeLogin($params['code_login']);\n        }\n\n        // So we use second parameter\n        if (!isset($params['username']) and isset($params['username_encoded']) and $params['username_encoded']) {\n            $params['username_encoded'] = rawurldecode($params['username_encoded']);\n            $decoded_username = @base64_decode($params['username_encoded']);\n            if (!empty($decoded_username)) {\n                $params['username'] = $decoded_username;\n            } else {\n                $params['username'] = @base62_decode($params['username_encoded']);\n            }\n            unset($params['username_encoded'] );\n        }\n        if (!isset($params['password']) and isset($params['password_encoded']) and $params['password_encoded']) {\n            $params['password_encoded'] = rawurldecode($params['password_encoded']);\n            $decoded_password = @base64_decode($params['password_encoded']);\n             if (!empty($decoded_password)) {\n                $params['password'] = $decoded_password;\n             } else {\n                $params['password'] = @base62_decode($params['password_encoded']);\n            }\n            unset($params['password_encoded'] );\n        }\n\n        $override = $this->app->event_manager->trigger('mw.user.before_login', $params);\n\n        $redirect_after = isset($params['http_redirect']) ? $params['http_redirect'] : false;\n\n        if(!$redirect_after){\n            //legacy redirect param\n            $redirect_after = isset($params['redirect']) ? $params['redirect'] : false;\n        }\n\n        $overiden = false;\n        $return_resp = false;\n        if (is_array($override)) {\n            foreach ($override as $resp) {\n                if (isset($resp['error']) or isset($resp['success'])) {\n                    if (isset($resp['success']) and isset($resp['http_redirect'])) {\n                        $redirect_after = $resp['http_redirect'];\n                    } else  if (isset($resp['success']) and isset($resp['redirect'])) {\n                        $redirect_after = $resp['redirect'];\n                    }\n                    $return_resp = $resp;\n                    $overiden = true;\n                }\n            }\n        }\n        if ($overiden == true and $redirect_after != false) {\n            return $this->app->url_manager->redirect($redirect_after);\n        } elseif ($overiden == true and $return_resp) {\n            return $return_resp;\n        }\n\n\n\n        $params['x-no-throttle'] = false; //allow throttle\n        return RequestRoute::postJson(route('api.user.login'), $params);\n    }\n\n    public function logout($params = false)\n    {\n        Auth::logout();\n        Session::flush();\n        $aj = $this->app->url_manager->is_ajax();\n        $redirect_after = isset($_GET['redirect']) ? $_GET['redirect'] : false;\n        if ($redirect_after == false) {\n            $redirect_after = isset($_GET['redirect_to']) ? $_GET['redirect_to'] : false;\n        }\n        if (isset($_COOKIE['editmode'])) {\n            setcookie('editmode');\n        }\n\n        $this->app->event_manager->trigger('mw.user.logout', $params);\n        if ($redirect_after == false and $aj == false) {\n            if (isset($_SERVER['HTTP_REFERER'])) {\n                return $this->app->url_manager->redirect($_SERVER['HTTP_REFERER']);\n            }\n        }\n\n        if ($redirect_after == true) {\n            $redir = $redirect_after;\n\n            // $redir = site_url($redirect_after);\n            return $this->app->url_manager->redirect($redir);\n        }\n\n        return true;\n    }\n\n    public function is_logged()\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        if (Auth::check()) {\n            $user =Auth::user();\n            if ($user and isset($user->is_active) and intval($user->is_active) == 0) {\n                // logout user if its set inactive in database\n                $this->logout();\n                return false;\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function login_as($params)\n    {\n        $is_a = $this->is_admin();\n        if ($is_a == true) {\n            return true;\n        }\n    }\n\n    public function has_access($function_name = '')\n    {\n        // will be updated with roles and perms\n        $is_a = $this->is_admin();\n        if ($is_a == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function admin_access()\n    {\n        if ($this->is_admin() == false) {\n            exit('You must be logged as admin');\n        }\n    }\n\n    public function attributes($user_id = false)\n    {\n        if (!$user_id) {\n            $user_id = $this->id();\n        }\n        if (!$user_id) {\n            return;\n        }\n\n        $data = array();\n        $data['rel_type'] = 'users';\n        $data['rel_id'] = intval($user_id);\n        $res = array();\n        $get = $this->app->attributes_manager->get($data);\n        if (!empty($get)) {\n            foreach ($get as $item) {\n                if (isset($item['attribute_name']) and isset($item['attribute_value'])) {\n                    $res[$item['attribute_name']] = $item['attribute_value'];\n                }\n            }\n        }\n        if (!empty($res)) {\n            return $res;\n        }\n\n        return $get;\n    }\n\n    public function data_fields($user_id = false)\n    {\n        if (!$user_id) {\n            $user_id = $this->id();\n        }\n        if (!$user_id) {\n            return;\n        }\n\n        $data = array();\n        $data['rel_type'] = 'users';\n        $data['rel_id'] = intval($user_id);\n        $res = array();\n        $get = $this->app->content_manager->get_data($data);\n        if (!empty($get)) {\n            foreach ($get as $item) {\n                if (isset($item['field_name']) and isset($item['field_value'])) {\n                    $res[$item['field_name']] = $item['field_value'];\n                }\n            }\n        }\n        if (!empty($res)) {\n            return $res;\n        }\n\n        return $get;\n    }\n\n    public function picture($user_id = false)\n    {\n\n        if (!$user_id) {\n            $user_id = $this->id();\n        }\n\n        $name = $this->get_by_id($user_id);\n        if (isset($name['thumbnail']) and $name['thumbnail'] != '') {\n            if (is_https()) {\n                $rep = 1;\n                $name['thumbnail'] = str_ireplace('http://', '//', $name['thumbnail'], $rep);\n            }\n            return $name['thumbnail'];\n        }\n\n        return modules_url() . 'microweber/api/libs/mw-ui/assets/img/no-user.png';\n    }\n\n    /**\n     * @function user_name\n     * gets the user's FULL name\n     *\n     * @param        $user_id the id of the user. If false it will use the curent user (you)\n     * @param string $mode full|first|last|username\n     *                        'full' //prints full name (first +last)\n     *                        'first' //prints first name\n     *                        'last' //prints last name\n     *                        'username' //prints username\n     *\n     * @return string\n     */\n    public function name($user_id = false, $mode = 'full')\n    {\n        if ($mode != 'username') {\n            if ($user_id == user_id()) {\n                // return 'You';\n            }\n        }\n        if ($user_id == false) {\n            $user_id = user_id();\n        }\n\n        $name = $this->nice_name($user_id, $mode);\n\n        return $name;\n    }\n\n    /**\n     * Function to get user printable name by given ID.\n     *\n     * @param        $id\n     * @param string $mode\n     *\n     * @return string\n     *\n     * @example\n     * <code>\n     * //get user name for user with id 10\n     * $this->nice_name(10, 'full');\n     * </code>\n     *\n     * @uses $this->get_by_id()\n     */\n    public function nice_name($id = false, $mode = 'full')\n    {\n\n        if (!$id) {\n            $id = $this->id();\n        }\n\n        $user = $this->get_by_id($id);\n\n\n        $user_data = $user;\n        if (empty($user)) {\n            return false;\n        }\n\n        switch ($mode) {\n            case 'first' :\n            case 'fist' :\n                // because of a common typo :)\n                $user_data['first_name'] ? $name = $user_data['first_name'] : $name = $user_data['username'];\n                $name = ucwords($name);\n\n                if (trim($name) == '' and $user_data['email'] != '') {\n                    $n = explode('@', $user_data['email']);\n                    $name = $n[0];\n                }\n                // return $name;\n                break;\n\n            case 'last' :\n                $user_data['last_name'] ? $name = $user_data['last_name'] : $name = $user_data['last_name'];\n                $name = ucwords($name);\n                break;\n\n            case 'username' :\n                $name = $user_data['username'];\n                break;\n\n\n            case 'email' :\n                $name = $user_data['email'];\n                break;\n\n            case 'full' :\n            default :\n\n                $name = '';\n                if (isset($user_data['first_name'])) {\n                    if ($user_data['first_name']) {\n                        $name = $user_data['first_name'];\n                    }\n                }\n\n                if (isset($user_data['last_name'])) {\n                    if ($user_data['last_name']) {\n                        $name .= ' ' . $user_data['last_name'];\n                    }\n                }\n                $name = ucwords($name);\n\n                if (trim($name) == '' and $user_data['email'] != '') {\n                    $name = $user_data['email'];\n                    $name_from_email = explode('@', $user_data['email']);\n                    $name = $name_from_email[0];\n                }\n\n                if (trim($name) == '' and $user_data['username'] != '') {\n                    $name = $user_data['username'];\n                    $name = ucwords($name);\n                }\n\n                break;\n        }\n\n        if (!isset($name) or $name == false or $name == null or trim($name) == '') {\n            if (isset($user_data['username']) and $user_data['username'] != false and trim($user_data['username']) != '') {\n                $name = $user_data['username'];\n            } elseif (isset($user_data['email']) and $user_data['email'] != false and trim($user_data['email']) != '') {\n                $name_from_email = explode('@', $user_data['email']);\n                $name = $name_from_email[0];\n            }\n        }\n\n        return $name;\n    }\n\n    public function api_login($api_key = false)\n    {\n        if ($api_key == false and isset($_REQUEST['api_key']) and user_id() == 0) {\n            $api_key = $_REQUEST['api_key'];\n        }\n\n        if ($api_key == false) {\n            return false;\n        } else {\n            if (trim($api_key) == '') {\n                return false;\n            } else {\n                if (user_id() > 0) {\n                    return true;\n                } else {\n                    $data = array();\n                    $data['api_key'] = $api_key;\n                    $data['is_active'] = 1;\n                    $data['limit'] = 1;\n\n                    $data = $this->get_all($data);\n\n                    if ($data != false) {\n                        if (isset($data[0])) {\n                            $data = $data[0];\n\n                            if (isset($data['api_key']) and $data['api_key'] == $api_key) {\n                                return $this->make_logged($data['id']);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public function register($params)\n    {\n        return RequestRoute::postJson(route('api.user.register'), $params);\n    }\n\n    public function after_register($user_id, $suppress_output = true)\n    {\n        if ($suppress_output == true) {\n            //ob_start();\n        }\n        $data = $this->get_by_id($user_id);\n        if (!$data) {\n            return;\n        }\n\n        $notif = array();\n        $notif['module'] = 'users';\n        $notif['rel_type'] = 'users';\n        $notif['rel_id'] = $user_id;\n        $notif['title'] = 'New user registration';\n        $notif['description'] = 'You have new user registration';\n        $notif['content'] = 'You have new user registered with the username [' . $data['username'] . '] and id [' . $user_id . ']';\n        $this->app->notifications_manager->save($notif);\n\n\n\n        $this->app->log_manager->save($notif);\n        $this->register_email_send($user_id);\n\n        $this->app->event_manager->trigger('mw.user.after_register', $data);\n        if ($suppress_output == true) {\n            if (ob_get_length()) {ob_end_clean();}\n\n        }\n    }\n\n    public function register_email_send($user_id = false)\n    {\n        if ($user_id == false) {\n            $user_id = $this->id();\n        }\n        if ($user_id == false) {\n            return;\n        }\n        $data = $this->get_by_id($user_id);\n        if (!$data) {\n            return;\n        }\n        if (is_array($data)) {\n            $register_email_enabled = $this->app->option_manager->get('register_email_enabled', 'users');\n            if ($register_email_enabled == true) {\n\n                /*\n                $register_email_subject = $this->app->option_manager->get('register_email_subject', 'users');\n                $register_email_content = $this->app->option_manager->get('register_email_content', 'users');\n                 */\n\n                // Get register mail temlate\n                $new_user_registration_template_id = $this->app->option_manager->get('new_user_registration_email_template', 'users');\n                $mail_template = get_mail_template_by_id($new_user_registration_template_id, 'new_user_registration');\n\n                $register_email_subject = $mail_template['subject'];\n                $register_email_content = $mail_template['message'];\n\n\n                $appendFiles = array();\n                if (!empty(get_option('append_files', 'mail_template_id_' . $new_user_registration_template_id))) {\n                    $appendFiles = explode(\",\", get_option('append_files', 'mail_template_id_' . $new_user_registration_template_id));\n                }\n\n                if ($register_email_subject == false or trim($register_email_subject) == '') {\n                    $register_email_subject = 'Thank you for your registration!';\n                }\n                $to = $data['email'];\n                if ($register_email_content != false and trim($register_email_subject) != '') {\n                    if (!empty($data)) {\n                        foreach ($data as $key => $value) {\n                            if (!is_array($value) and is_string($key)) {\n                                $register_email_content = str_ireplace('{' . $key . '}', $value, $register_email_content);\n                            }\n                        }\n                    }\n                    $verify_email_link = $this->app->format->encrypt($data['id']);\n                    $verify_email_link = api_url('users/verify_email_link') . '?key=' . $verify_email_link;\n                    $register_email_content = str_ireplace('{verify_email_link}', $verify_email_link, $register_email_content);\n\n\n                    if (isset($to) and (filter_var($to, FILTER_VALIDATE_EMAIL))) {\n\n                        $sender = new \\MicroweberPackages\\Utils\\Mail\\MailSender();\n                        return $sender->send($to, $register_email_subject, $register_email_content, false, false, false, false, false, false, $appendFiles);\n\n                    }\n                }\n            }\n        }\n    }\n\n    public function csrf_validate(&$data)\n    {\n        $data['_token_header'] = request()->header('X-CSRF-TOKEN');\n        $session_token = Session::token();\n        if (is_array($data) and $this->session_id()) {\n            foreach ($data as $k => $v) {\n                if ($k == 'token' or $k == '_token' or $k == '_token_header') {\n                    if ($session_token === $v) {\n                        unset($data[$k]);\n\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n\n    public function hash_pass($pass)\n    {\n        $hash = \\Hash::make($pass);\n\n        return $hash;\n    }\n\n    /**\n     * Allows you to save users in the database.\n     *\n     * By default it have security rules.\n     *\n     * If you are admin you can save any user in the system;\n     *\n     * However if you are regular user you must post param id with the current user id;\n     *\n     * @param  $params\n     * @param  $params ['id'] = $user_id; // REQUIRED , you must set the user id.\n     *                 For security reasons, to make new user please use user_register() function that requires captcha\n     *                 or write your own save_user wrapper function that sets  mw_var('force_save_user',true);\n     *                 and pass its params to save_user();\n     * @param  $params ['is_active'] = 1; //default is 'n'\n     *\n     * @usage\n     *\n     * $upd = array();\n     * $upd['id'] = 1;\n     * $upd['email'] = $params['new_email'];\n     * $upd['password'] = $params['passwordhash'];\n     * mw_var('force_save_user', false|true); // if true you want to make new user or foce save ... skips id check and is admin check\n     * mw_var('save_user_no_pass_hash', false|true); //if true skips pass hash function and saves password it as is in the request, please hash the password before that or ensure its hashed\n     * $s = save_user($upd);\n     *\n     * @return bool|int\n     */\n    public $force_save = false;\n\n    public function save($params)\n    {\n        $force = false;\n        if (defined('MW_FORCE_USER_SAVE')) {\n            $force = MW_FORCE_USER_SAVE;\n        } elseif ($this->force_save) {\n            $force = $this->force_save;\n        } elseif (mw_var('force_save_user')) {\n            $force = mw_var('force_save_user');\n        }\n        if (!$force) {\n            if (defined('MW_API_CALL') and mw_is_installed() == true) {\n                if (isset($params['is_admin']) and $this->is_admin() == false and !is_null(User::first())) {\n                    unset($params['is_admin']);\n                }\n            }\n        }\n        if ($force == false) {\n            if (!is_cli()) {\n                $validate_token = mw()->user_manager->csrf_validate($params);\n                if ($validate_token == false) {\n                    return array(\n                        'error' => _e('Confirm edit of profile', true),\n                        'form_data_required' => 'token',\n                        'form_data_module' => 'users/profile/confirm_edit'\n                    );\n                }\n            }\n\n            if (isset($params['id']) and $params['id'] != 0) {\n                $adm = $this->is_admin();\n                if ($adm == false) {\n                    $is_logged = user_id();\n                    if ($is_logged == false or $is_logged == 0) {\n                        return array('error' => 'You must be logged to save user');\n                    } elseif (intval($is_logged) == intval($params['id']) and intval($params['id']) != 0) {\n                        // the user is editing their own profile\n                    } else {\n                        return array('error' => 'You must be logged to as admin save this user');\n                    }\n                }\n            } else {\n                if (defined('MW_API_CALL') and mw_is_installed() == true) {\n                    $adm = $this->is_admin();\n                    if ($adm == false) {\n                        $params['id'] = $this->id();\n                        $is_logged = user_id();\n                        if (intval($params['id']) != 0 and $is_logged != $params['id']) {\n                            return array('error' => 'You must be logged save your settings');\n                        }\n                    } else {\n\n\n                        if (!isset($params['id'])) {\n                            $params['id'] = $this->id();\n                        }\n                    }\n                }\n            }\n        }\n\n        $data_to_save = $params;\n\n        if (isset($data_to_save['id']) and $data_to_save['id'] != 0 and isset($data_to_save['email']) and $data_to_save['email'] != false) {\n            $old_user_data = $this->get_by_id($data_to_save['id']);\n            if (isset($old_user_data['email']) and $old_user_data['email'] != false) {\n                if ($data_to_save['email'] != $old_user_data['email']) {\n\n                    $old_user_data_reset = User::where('id', $data_to_save['id'])->first();\n                    if($old_user_data_reset){\n                        $old_user_data_reset->password_reset_hash = null;\n                        $old_user_data_reset->save();\n                    }\n\n//                    if (isset($old_user_data['password_reset_hash']) and $old_user_data['password_reset_hash'] != false) {\n//                        $hash_cache_id = md5(serialize($old_user_data)) . uniqid() . rand();\n//                        $data_to_save['password_reset_hash'] = $hash_cache_id;\n//                    }\n                }\n            }\n        }\n        if (isset($data_to_save['email']) and isset($data_to_save['id'])) {\n            $email = trim($data_to_save['email']);\n            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                $check_existing = array();\n                $check_existing['email'] = $email;\n                $check_existing['single'] = 1;\n                $check_existing = $this->get_all($check_existing);\n\n                if (isset($check_existing['id']) and $check_existing['id'] != $data_to_save['id']) {\n                    return array('error' => 'User with this email already exists! Try different email address!');\n                }\n            }\n        }\n\n\n        if (isset($params['id']) and intval($params['id']) != 0) {\n            $user = User::find($params['id']);\n\n\n        } else {\n            $user = new User();\n        }\n        $id_to_return = false;\n\n        $data_to_save = $this->app->format->clean_xss($data_to_save);\n\n\n        if (isset($data_to_save['password2'])) {\n            $data_to_save['verify_password'] = $data_to_save['password2'];\n        }\n\n        $checkValidator = $user->validateAndFill($data_to_save);\n        $getValidatorMessages = $user->getValidatorMessages();\n\n\n        if ($checkValidator) {\n\n            if (isset($data_to_save['id'])) {\n\n                $can_edit = $this->__check_id_has_ability_to_edit_user($data_to_save['id']);\n                if (!$can_edit) {\n                    return array('error' => 'You do not have permission to edit this user');\n                }\n            }\n\n\n            if (isset($user->id)) {\n                $data_to_save['id'] = $params['id'] = $user->id;\n            }\n\n\n            if (isset($data_to_save['id']) and $data_to_save['id'] == 0) {\n                if ((isset($data_to_save['username']) and $data_to_save['username'] == false) and (isset($data_to_save['email']) and $data_to_save['email'] == false)\n                ) {\n                    return array('error' => 'You must set email or username');\n                }\n            }\n\n            if (isset($data_to_save['username']) and $data_to_save['username'] != false) {\n                $check_existing = array();\n                $check_existing['username'] = $data_to_save['username'];\n                $check_existing['single'] = 1;\n                $check_existing = $this->get_all($check_existing);\n\n                $err = array('error' => 'User with this username already exists! Try different username!');\n\n                if ($check_existing) {\n                    if (isset($data_to_save['id']) and $data_to_save['id'] != false) {\n                        if (isset($check_existing['id']) and $check_existing['id'] != $data_to_save['id']) {\n                            return $err;\n                        }\n                    } else {\n                        return $err;\n                    }\n                }\n            }\n\n            if ($this->is_admin()) {\n                if (isset($params['roles'][0])) {\n                    if ($params['roles'][0] == 'Super Admin') {\n                        $user->is_admin = 1;\n                    }  else  if ($params['roles'][0] == 'User') {\n                        $user->is_admin = 0;\n                    } else {\n                        $user->is_admin = 0;\n\n                        $user->assignRole($params['roles']);\n                    }\n                }\n                if (isset($params['is_active'])) {\n                    $user->is_active =$params['is_active'];\n                }\n            }\n\n            try {\n                $save = $user->save();\n            } catch (\\Exception $e) {\n                return array('error' => $e->getMessage());\n            }\n\n            if (isset($params['attributes']) or isset($params['data_fields'])) {\n                $params['extended_save'] = true;\n            }\n\n            if (isset($params['extended_save'])) {\n                if (isset($data_to_save['password'])) {\n                    unset($data_to_save['password']);\n                }\n\n                if (isset($data_to_save['id'])) {\n                    $data_to_save['table'] = 'users';\n                    $this->app->database_manager->extended_save($data_to_save);\n                }\n            }\n\n\n            if (isset($params['id']) and intval($params['id']) != 0) {\n                $id_to_return = intval($params['id']);\n            } else {\n                $id_to_return = DB::getPdo()->lastInsertId();\n            }\n            $params['id'] = $id_to_return;\n            $this->app->event_manager->trigger('mw.user.save', $params);\n        } else {\n            $errorMessages = '';\n            foreach ($getValidatorMessages as $validatorInputs) {\n                foreach ($validatorInputs as $validatorInput) {\n                    $errorMessages .= $validatorInput . '<br />';\n                }\n            }\n            return array('error' => $errorMessages);\n        }\n        $this->app->cache_manager->delete('users' . DIRECTORY_SEPARATOR . 'global');\n        $this->app->cache_manager->delete('users' . DIRECTORY_SEPARATOR . '0');\n        $this->app->cache_manager->delete('users' . DIRECTORY_SEPARATOR . $id_to_return);\n\n        return $id_to_return;\n    }\n\n    public function login_set_attempt($params = array())\n    {\n        if (!empty($params)) {\n            if (isset($params['username']) || isset($params['email'])) {\n\n                if (isset($params['username']) && $params['username'] != false and filter_var($params['username'], FILTER_VALIDATE_EMAIL)) {\n                    $params['email'] = $params['username'];\n                }\n\n                $findUserId = false;\n                $findByUsername = false;\n\n                if (isset($params['username'])) {\n                    $findByUsername = User::where('username', $params['username'])->first();\n                }\n\n                if ($findByUsername) {\n                    $findUserId = $findByUsername->id;\n                } else {\n                    if (isset($params['email'])) {\n                        $findByEmail = User::where('email', $params['email'])->first();\n                        if ($findByEmail) {\n                            $findUserId = $findByEmail->id;\n                        }\n                    }\n                }\n\n                if (!$findUserId) {\n                    return;\n                }\n\n                $loginAttempt = new LoginAttempt();\n                if (isset($params['username'])) {\n                    $loginAttempt->username = $params['username'];\n                }\n                if (isset($params['email'])) {\n                    $loginAttempt->email = $params['email'];\n                }\n\n                $loginAttempt->user_id = $findUserId;\n                $loginAttempt->time = time();\n                $loginAttempt->ip = user_ip();\n                $loginAttempt->success = $params['success'];\n                $loginAttempt->save();\n            }\n        }\n    }\n\n    public function login_set_success_attempt($params = array())\n    {\n        $params['success'] = true;\n        $this->login_set_attempt($params);\n\n        $this->app->log_manager->save('title=Success login&is_system=y&rel_type=login_succes&user_ip=' . user_ip());\n    }\n\n    public function login_set_failed_attempt($params = array())\n    {\n        $params['success'] = false;\n        $this->login_set_attempt($params);\n\n        $this->app->log_manager->save('title=Failed login&is_system=y&rel_type=login_failed&user_ip=' . user_ip());\n    }\n\n    public function get($params = false)\n    {\n        $id = $params;\n        if ($id == false) {\n            $id = $this->id();\n        }\n        if ($id == 0) {\n            return false;\n        }\n        $res = $this->get_by_id($id);\n        if (empty($res)) {\n            $res = $this->get_by_username($id);\n        }\n\n        return $res;\n    }\n\n    public function get_by_email($email)\n    {\n        $data = array();\n        $data['email'] = $email;\n        $data['limit'] = 1;\n        $data = $this->get_all($data);\n        if (isset($data[0])) {\n            $data = $data[0];\n        }\n\n        return $data;\n    }\n\n    public function get_by_username($username)\n    {\n        $data = array();\n        $data['username'] = $username;\n        $data['limit'] = 1;\n        $data = $this->get_all($data);\n        if (isset($data[0])) {\n            $data = $data[0];\n        }\n\n        return $data;\n    }\n\n    public function delete($data)\n    {\n        if (!is_array($data)) {\n            $new_data = array();\n            $new_data['id'] = intval($data);\n            $data = $new_data;\n        }\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $can_edit = $this->__check_id_has_ability_to_edit_user($c_id);\n            if (!$can_edit) {\n                return false;\n            }\n\n            $this->app->database_manager->delete_by_id('users', $c_id);\n\n            return $c_id;\n        }\n\n        return $data;\n    }\n\n    public function reset_password_from_link($params)\n    {\n        if (!isset($params['captcha'])) {\n            return array('error' => 'Please enter the captcha answer!');\n        } else {\n            $validate_captcha = $this->app->captcha_manager->validate($params['captcha']);\n            if (!$validate_captcha) {\n                return array('error' => 'Invalid captcha answer!', 'captcha_error' => true);\n            }\n        }\n\n        if (!isset($params['id']) or trim($params['id']) == '') {\n            return array('error' => 'You must send id parameter');\n        }\n\n        if (isset($params['id'])) {\n\n            $can_edit = $this->__check_id_has_ability_to_edit_user($params['id']);\n            if (!$can_edit) {\n                return array('error' => 'You do not have permission to edit this user');\n            }\n        }\n\n\n        if (!isset($params['password_reset_hash']) or trim($params['password_reset_hash']) == '') {\n            return array('error' => 'You must send password_reset_hash parameter');\n        }\n\n        if (!isset($params['pass1']) or trim($params['pass1']) == '') {\n            return array('error' => 'Enter new password!');\n        }\n\n        if (!isset($params['pass2']) or trim($params['pass2']) == '') {\n            return array('error' => 'Enter repeat new password!');\n        }\n\n        if ($params['pass1'] != $params['pass2']) {\n            return array('error' => 'Your passwords does not match!');\n        }\n\n        $data1 = array();\n        $data1['id'] = intval($params['id']);\n        $data1['password_reset_hash'] = $this->app->database_manager->escape_string($params['password_reset_hash']);\n        $table = $this->tables['users'];\n\n\n        $check = User::whereNotNull('password_reset_hash')->where('password_reset_hash', $data1['password_reset_hash'])->where('id', $data1['id'])->first();\n        if (!$check) {\n            return array('error' => 'Invalid data or expired link!');\n        } else {\n            $data1['password_reset_hash'] = '';\n        }\n\n        $this->force_save = true;\n        $save = $this->app->database_manager->save($table, $data1);\n        $save_user = array();\n        $save_user['id'] = intval($params['id']);\n        $save_user['password'] = $params['pass1'];\n        if (isset($check['email'])) {\n            $save_user['email'] = $check['email'];\n        }\n        $this->app->event_manager->trigger('mw.user.change_password', $save_user);\n\n        $this->save($save_user);\n\n        $notif = array();\n        $notif['module'] = 'users';\n        $notif['rel_type'] = 'users';\n        $notif['rel_id'] = $data1['id'];\n        $notif['title'] = \"The user have successfully changed password. (User id: {$data1['id']})\";\n\n        $this->app->log_manager->save($notif);\n        $this->session_end();\n\n        return array('success' => 'Your password have been changed!');\n    }\n\n    public function session_end()\n    {\n        \\Session::flush();\n        \\Session::regenerate();\n    }\n\n    public function send_forgot_password($params)\n    {\n        return RequestRoute::postJson(route('api.user.password.email'), $params);\n    }\n\n    public function social_login($params)\n    {\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n\n        $return_after_login = false;\n        if (isset($params['redirect'])) {\n            $return_after_login = $params['redirect'];\n            $this->session_set('user_after_login', $return_after_login);\n        } elseif (isset($_SERVER['HTTP_REFERER']) and stristr($_SERVER['HTTP_REFERER'], $this->app->url_manager->site())) {\n            $return_after_login = $_SERVER['HTTP_REFERER'];\n            $this->session_set('user_after_login', $return_after_login);\n        }\n\n        $provider = false;\n        if (isset($_REQUEST['provider'])) {\n            $provider = $_REQUEST['provider'];\n            $provider = trim(strip_tags($provider));\n        }\n\n        if ($provider != false and isset($params) and !empty($params)) {\n            $this->socialite_config($provider);\n            switch ($provider) {\n                case 'github':\n                    return $login = $this->socialite->with($provider)->scopes(['user:email'])->redirect();\n            }\n\n            return $login = $this->socialite->with($provider)->redirect();\n        }\n    }\n\n    public function make_logged($user_id,$remember = false)\n    {\n        if (is_array($user_id)) {\n            if (isset($user_id['id'])) {\n                $user_id = $user_id['id'];\n            }\n        }\n\n\n\n        if (intval($user_id) > 0) {\n            $data = $this->get_by_id($user_id);\n            if ($data == false) {\n                return false;\n            } else {\n                if (is_array($data)) {\n\n                    $user = User::find($user_id);\n\n                    $user_session = array();\n                    $user_session['is_logged'] = 'yes';\n                    $user_session['user_id'] = $data['id'];\n\n                    if (!defined('USER_ID')) {\n                        define('USER_ID', $data['id']);\n                    }\n\n                    $old_sid = Session::getId();\n                    $this->session_set('old_sid',$old_sid);\n\n                    $data['old_sid'] = $old_sid;\n                    $user_session['old_session_id'] = $old_sid;\n                    $current_user = Auth::user();\n                    if ((isset($current_user->id) and $current_user->id == $user_id)) {\n                        Auth::login(Auth::user(), $remember);\n                    } else {\n                        Auth::loginUsingId($data['id'], $remember);\n                    }\n//\n//                    Session::setId($old_sid);\n//                    Session::save();\n\n                    $this->app->event_manager->trigger('mw.user.login', $data);\n                    $this->session_set('user_session', $user_session);\n                    $user_session = $this->session_get('user_session');\n\n                    $this->update_last_login_time();\n                    $user_session['success'] = _e('You are logged in!', true);\n                    return $user_session;\n                }\n            }\n        }\n    }\n\n    /**\n     * Generic function to get the user by id.\n     * Uses the getUsers function to get the data.\n     *\n     * @param\n     *            int id\n     *\n     * @return array\n     */\n    public function get_by_id($id)\n    {\n        $id = intval($id);\n        if ($id == 0) {\n            return false;\n        }\n\n        $findUser = User::where('id', $id)->first();\n        if ($findUser == null) {\n            return false;\n        }\n\n\n        return $findUser->toArray();\n    }\n\n    public function update_last_login_time()\n    {\n        $uid = user_id();\n        if (intval($uid) > 0) {\n            $data_to_save = array();\n            $data_to_save['id'] = $uid;\n            $data_to_save['last_login'] = date('Y-m-d H:i:s');\n            $data_to_save['last_login_ip'] = user_ip();\n\n            $table = $this->tables['users'];\n            $save = $this->app->database_manager->save($table, $data_to_save);\n\n            $this->app->log_manager->delete('is_system=y&rel_type=login_failed&user_ip=' . user_ip());\n        }\n    }\n\n    public function social_login_process($params = false)\n    {\n        $user_after_login = $this->session_get('user_after_login');\n\n        if (!isset($_REQUEST['provider']) and isset($_REQUEST['hauth_done'])) {\n            $_REQUEST['provider'] = $_REQUEST['hauth_done'];\n        }\n        if (!isset($_REQUEST['provider'])) {\n            return $this->app->url_manager->redirect(site_url());\n        }\n\n        $auth_provider = $_REQUEST['provider'];\n        $this->socialite_config($auth_provider);\n\n\n        try {\n            // $this->socialite_config($auth_provider);\n            $user = $this->socialite->driver($auth_provider)->stateless()->user();\n\n            $email = $user->getEmail();\n\n            $username = $user->getNickname();\n            $oauth_id = $user->getId();\n            $avatar = $user->getAvatar();\n            $name = $user->getName();\n\n            $existing = array();\n\n            if ($email != false) {\n                $existing['email'] = $email;\n            } else {\n                $existing['oauth_uid'] = $oauth_id;\n                $existing['oauth_provider'] = $auth_provider;\n            }\n            $save = $existing;\n            $save['thumbnail'] = $avatar;\n            $save['username'] = $username;\n            $save['is_active'] = 1;\n            $save['is_admin'] = 0;\n            $save['first_name'] = '';\n            $save['last_name'] = '';\n\n            if ($name != false) {\n                $names = explode(' ', $name);\n                if (isset($names[0])) {\n                    $save['first_name'] = array_shift($names);\n                    if (!empty($names)) {\n                        $last = implode(' ', $names);\n                        $save['last_name'] = $last;\n                    }\n                }\n            }\n            $existing['single'] = true;\n            $existing['limit'] = 1;\n            $existing = $this->get_all($existing);\n            if (!defined('MW_FORCE_USER_SAVE')) {\n                define('MW_FORCE_USER_SAVE', true);\n            }\n            if (isset($existing['id'])) {\n                if ($save['is_active'] != 1) {\n                    return;\n                }\n                $this->make_logged($existing['id']);\n            } else {\n\n\n                $user = new User;\n                $user->fill($save);\n                 $user->save($save);\n               // $new_user = $this->save($save);\n                 $new_user = $user->id;\n\n                $this->after_register($new_user);\n\n                $this->make_logged($new_user);\n            }\n        } catch (\\Laravel\\Socialite\\Two\\InvalidStateException $e) {\n            //do nothing\n        } catch (\\GuzzleHttp\\Exception\\ClientException $e) {\n            //do nothing\n        } catch (\\InvalidArgumentException $e) {\n            //do nothing\n        } catch (\\Exception $e) {\n            //do nothing\n        }\n\n        if ($user_after_login != false) {\n            return $this->app->url_manager->redirect($user_after_login);\n        } else {\n            return $this->app->url_manager->redirect(site_url());\n        }\n    }\n\n    public function count()\n    {\n        $options = array();\n        $options['count'] = true;\n        $options['cache_group'] = 'users/global/';\n        $data = $this->get_all($options);\n\n        return $data;\n    }\n\n    /**\n     * @function get_users\n     *\n     * @param $params array|string;\n     * @params $params['username'] string username for user\n     * @params $params['email'] string email for user\n     * @params $params['password'] string password for user\n     *\n     *\n     * @usage $this->get_all('email=my_email');\n     *\n     * @return array of users;\n     */\n    public function get_all($params)\n    {\n        $params = parse_params($params);\n\n        $table = $this->tables['users'];\n\n        $data = $this->app->format->clean_html($params);\n        $orig_data = $data;\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n            if (!empty($data['ids'])) {\n                $ids = $data['ids'];\n            }\n        }\n        if (!isset($params['search_in_fields'])) {\n            $data['search_in_fields'] = array('id', 'first_name', 'last_name', 'username', 'email');\n        }\n        $cache_group = 'users/global';\n        if (isset($limit) and $limit != false) {\n            $data['limit'] = $limit;\n        }\n        if (isset($count_only) and $count_only != false) {\n            $data['count'] = $count_only;\n        }\n        if (isset($data['username']) and $data['username'] == false) {\n            unset($data['username']);\n        }\n\n\n        $data['table'] = $table;\n        $data['exclude_shorthand'] = true;\n       // $data['no_cache'] = 1;\n\n        $get = $this->app->database_manager->get($data);\n\n        return $get;\n    }\n\n    public function register_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'register.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'register';\n        } else {\n            $default_url = 'users/register';\n        }\n\n        $checkout_url = $this->app->option_manager->get('register_url', 'users');\n        if ($checkout_url != false and trim($checkout_url) != '') {\n            $default_url = $checkout_url;\n        }\n\n        $checkout_url_sess = $this->session_get('register_url');\n\n        if ($checkout_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($checkout_url_sess);\n        }\n    }\n\n    public function logout_url()\n    {\n\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'logout.php';\n        $logout_url_settings = $this->app->option_manager->get('logout_url', 'users');\n        $logout_url_sess = $this->session_get('logout_url');\n\n        if ($logout_url_sess) {\n            return $logout_url_sess;\n        } else if ($logout_url_settings) {\n            return $logout_url_settings;\n        } else if (is_file($file)) {\n            return site_url('logout');\n        } else {\n            //return route('api.user.logout');\n            return route('logout');\n        }\n\n    }\n\n    public function login_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'login.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'login';\n        } else {\n            $default_url = 'users/login';\n        }\n\n        $login_url = $this->app->option_manager->get('login_url', 'users');\n        if ($login_url != false and trim($login_url) != '') {\n            $default_url = $login_url;\n        }\n\n        $login_url_sess = $this->session_get('login_url');\n\n        if ($login_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($login_url_sess);\n        }\n    }\n\n    public function profile_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'profile.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'profile';\n        } else {\n            $default_url = 'users/profile';\n        }\n\n        $profile_url = $this->app->option_manager->get('profile_url', 'users');\n        if ($profile_url != false and trim($profile_url) != '') {\n            $profile_url = $profile_url;\n        }\n\n        $profile_url_sess = $this->session_get('profile_url');\n\n        if ($profile_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($profile_url_sess);\n        }\n    }\n\n    public function forgot_password_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'forgot_password.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'forgot_password';\n        } else {\n            $default_url = 'users/forgot_password';\n        }\n        $checkout_url = $this->app->option_manager->get('forgot_password_url', 'users');\n        if ($checkout_url != false and trim($checkout_url) != '') {\n            $default_url = $checkout_url;\n        }\n        $checkout_url_sess = $this->session_get('forgot_password_url');\n        if ($checkout_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($checkout_url_sess);\n        }\n    }\n\n    public function session_set($name, $val)\n    {\n        $this->app->event_manager->trigger('mw.user.session_set', $name, $val);\n\n        return Session::put($name, $val);\n    }\n\n    public function csrf_form($unique_form_name = false)\n    {\n        if ($unique_form_name == false) {\n            $unique_form_name = uniqid();\n        }\n\n        $token = $this->csrf_token($unique_form_name);\n\n        $input = '<input type=\"hidden\" value=\"' . $token . '\" name=\"_token\">';\n\n        return $input;\n    }\n\n    public function session_all()\n    {\n        $value = Session::all();\n\n        return $value;\n    }\n\n    public function session_id()\n    {\n        return Session::getId();\n    }\n\n    public function session_get($name)\n    {\n        $value = Session::get($name);\n\n        return $value;\n    }\n\n    public function session_del($name)\n    {\n        Session::forget($name);\n    }\n\n    public function csrf_token($unique_form_name = false)\n    {\n        return csrf_token();\n    }\n\n    public function socialite_config($provider = false)\n    {\n        $callback_url = api_url('social_login_process?provider=' . $provider);\n\n        if (get_option('enable_user_fb_registration', 'users') == 'y') {\n            Config::set('services.facebook.client_id', get_option('fb_app_id', 'users'));\n            Config::set('services.facebook.client_secret', get_option('fb_app_secret', 'users'));\n            Config::set('services.facebook.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_twitter_registration', 'users') == 'y') {\n            Config::set('services.twitter.client_id', get_option('twitter_app_id', 'users'));\n            Config::set('services.twitter.client_secret', get_option('twitter_app_secret', 'users'));\n            Config::set('services.twitter.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_google_registration', 'users') == 'y') {\n            Config::set('services.google.client_id', get_option('google_app_id', 'users'));\n            Config::set('services.google.client_secret', get_option('google_app_secret', 'users'));\n            Config::set('services.google.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_github_registration', 'users') == 'y') {\n            Config::set('services.github.client_id', get_option('github_app_id', 'users'));\n            Config::set('services.github.client_secret', get_option('github_app_secret', 'users'));\n            Config::set('services.github.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_linkedin_registration', 'users') == 'y') {\n            Config::set('services.linkedin.client_id', get_option('linkedin_app_id', 'users'));\n            Config::set('services.linkedin.client_secret', get_option('linkedin_app_secret', 'users'));\n            Config::set('services.linkedin.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_microweber_registration', 'users') == 'y') {\n            $svc = Config::get('services.microweber');\n            if (!isset($svc['client_id'])) {\n                Config::set('services.microweber.client_id', get_option('microweber_app_id', 'users'));\n            }\n            if (!isset($svc['client_secret'])) {\n                Config::set('services.microweber.client_secret', get_option('microweber_app_secret', 'users'));\n            }\n            if (!isset($svc['redirect'])) {\n                Config::set('services.microweber.redirect', $callback_url);\n            }\n            $this->socialite->extend('microweber', function ($app) {\n                $config = $app['config']['services.microweber'];\n\n                return $this->socialite->buildProvider(MicroweberProvider::class, $config);\n            });\n        }\n    }\n\n    public function terms_accept($tos_name, $user_id_or_email = false)\n    {\n        $tos = new TosManager();\n        return $tos->terms_accept($tos_name, $user_id_or_email);\n\n    }\n\n    public function terms_check($tos_name = false, $user_id_or_email = false)\n    {\n\n        $tos = new TosManager();\n        return $tos->terms_check($tos_name, $user_id_or_email);\n\n    }\n\n\n    public function get_shipping_address()\n    {\n        $shipping_address_from_profile = [];\n        if ($this->is_logged()) {\n            $findCustomer = \\MicroweberPackages\\Customer\\Models\\Customer::where('user_id', Auth::id())->first();\n            if ($findCustomer) {\n                $findAddressShipping = \\MicroweberPackages\\Customer\\Models\\Address::where('type', 'shipping')->where('customer_id', $findCustomer->id)->first();\n                if ($findAddressShipping) {\n                    $country_from_shipping_addr = $findAddressShipping->country()->first();\n                    foreach ($findAddressShipping->toArray() as $addressKey => $addressValue) {\n                        $shipping_address_from_profile[$addressKey] = $addressValue;\n                    }\n                    if ($country_from_shipping_addr and isset($country_from_shipping_addr->name)) {\n                        $shipping_address_from_profile['country'] = $country_from_shipping_addr->name;\n                    }\n\n                    if ($findAddressShipping and isset($findAddressShipping->address_street_1)) {\n                        $shipping_address_from_profile['address'] = $findAddressShipping->address_street_1;\n                    }\n\n                    if (!isset($shipping_address_from_profile['address']) and $findAddressShipping and isset($findAddressShipping->address_street_2)) {\n                        $shipping_address_from_profile['address'] = $findAddressShipping->address_street_2;\n                    }\n\n\n                    return $shipping_address_from_profile;\n                }\n            }\n\n        }\n    }\n\n    private function __check_id_has_ability_to_edit_user($user_id)\n    {\n        if (!$user_id) {\n            return true;\n        }\n        $disable_edit_users = Config::get('microweber.users_disable_edit');\n        if ($disable_edit_users) {\n            $a = array();\n            if (!is_array($disable_edit_users)) {\n                $a[] = $disable_edit_users;\n            } else {\n                $a = $disable_edit_users;\n            }\n            if (is_arr($a)) {\n                foreach ($a as $disabled_user_id) {\n                    if ($disabled_user_id and $disabled_user_id == $user_id) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n\n        return true;\n\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\User;\n\nuse Illuminate\\Http\\Client\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Config;\nuse Laravel\\Socialite\\SocialiteManager;\nuse Illuminate\\Support\\Facades\\Session;\nuse Auth;\nuse MicroweberPackages\\App\\Http\\RequestRoute;\nuse MicroweberPackages\\App\\LoginAttempt;\nuse MicroweberPackages\\User\\Http\\Controllers\\UserLoginController;\nuse MicroweberPackages\\User\\Http\\Requests\\LoginRequest;\nuse MicroweberPackages\\User\\Http\\Resources\\UserResource;\nuse MicroweberPackages\\User\\Models\\User;\nuse MicroweberPackages\\User\\Socialite\\MicroweberProvider;\nuse MicroweberPackages\\Utils\\ThirdPartyLibs\\DisposableEmailChecker;\n\n\nclass UserManager\n{\n    public $tables = array();\n\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public function __construct($app = null)\n    {\n        $this->set_table_names();\n\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n        $this->socialite = new SocialiteManager($this->app);\n    }\n\n    public function set_table_names($tables = false)\n    {\n        if (!is_array($tables)) {\n            $tables = array();\n        }\n        if (!isset($tables['users'])) {\n            $tables['users'] = 'users';\n        }\n        if (!isset($tables['log'])) {\n            $tables['log'] = 'log';\n        }\n\n        $this->tables['users'] = $tables['users'];\n        $this->tables['log'] = $tables['log'];\n    }\n\n    public function is_admin()\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        if (Auth::check()) {\n            return Auth::user()->is_admin;\n        }\n    }\n\n    public function id()\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        if (Auth::check()) {\n            return Auth::user()->id;\n        }\n\n        return false;\n    }\n\n    /**\n     * Allows you to login a user into the system.\n     *\n     * It also sets user session when the user is logged. <br />\n     * On 5 unsuccessful logins, blocks the ip for few minutes <br />\n     *\n     *\n     * @param array|string $params You can pass parameter as string or as array.\n     * @param mixed|string $params ['email'] optional If you set  it will use this email for login\n     * @param mixed|string $params ['password'] optional Use password for login, it gets trough $this->hash_pass() function\n     *\n     * @example\n     * <code>\n     * //login with username\n     * $this->login('username=test&password=pass')\n     * </code>\n     * @example\n     * <code>\n     * //login with email\n     * $this->login('email=my@email.com&password=pass')\n     * </code>\n     * @example\n     * <code>\n     * //login hashed password\n     * $this->login('email=my@email.com&password_hashed=c4ca4238a0b923820dcc509a6f75849b')\n     * </code>\n     *\n     * @return array|bool\n     *\n     * @category Users\n     *\n     * @uses     $this->hash_pass()\n     * @uses     parse_str()\n     * @uses     $this->get_all()\n     * @uses     $this->session_set()\n     * @uses     $this->app->log_manager->get()\n     * @uses     $this->app->log_manager->save()\n     * @uses     $this->login_set_failed_attempt()\n     * @uses     $this->update_last_login_time()\n     * @uses     $this->app->event_manager->trigger()\n     * @function $this->login()\n     *\n     * @see      _table() For the database table fields\n     */\n\n    public function codeLogin()\n    {\n        if (!function_exists('get_whitelabel_whmcs_settings')) {\n            return false;\n        }\n\n        $code = $_GET['code_login'];\n        $parse = parse_url(site_url());\n        if (!isset($parse['host'])) {\n            return redirect(admin_url());\n        }\n\n        $domain = $parse['host'];\n        $domain = str_replace('www.','', $domain);\n\n        $whmcsSettings = get_whitelabel_whmcs_settings();\n\n        if (!isset($whmcsSettings['whmcs_url']) || empty($whmcsSettings['whmcs_url'])) {\n            return redirect(admin_url());\n        }\n\n        $verifyUrl = $whmcsSettings['whmcs_url'] . '/index.php?m=microweber_addon&function=verify_login_code&code='.$code.'&domain='.$domain;\n\n        $verifyCheck = @app()->http->url($verifyUrl)->get();\n        $verifyCheck = @json_decode($verifyCheck, true);\n\n        if (isset($verifyCheck['success']) && $verifyCheck['success'] == true && isset($verifyCheck['code']) && $verifyCheck['code'] == $code) {\n            $user = User::where('is_admin', '=', '1')->first();\n            if ($user !== null) {\n                \\Illuminate\\Support\\Facades\\Auth::login($user);\n\n                if (isset($_GET['http_redirect']) && !empty($_GET['http_redirect'])) {\n                    return redirect($_GET['http_redirect']);\n                }\n            }\n\n            return redirect(admin_url());\n        }\n\n        return redirect(admin_url());\n    }\n\n    public function login($params)\n    {\n        $params = parse_params($params);\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n\n        $check = $this->app->log_manager->get('no_cache=1&count=1&updated_at=[mt]1 min ago&is_system=y&rel_type=login_failed&user_ip=' . user_ip());\n        $url = $this->app->url->current(1);\n        if ($check == 5) {\n            $url_href = \"<a href='$url' target='_blank'>$url</a>\";\n            $this->app->log_manager->save('title=User IP ' . user_ip() . ' is blocked for 1 minute for 5 failed logins.&content=Last login url was ' . $url_href . '&is_system=n&rel_type=login_failed&user_ip=' . user_ip());\n        }\n        if ($check > 5) {\n            $check = $check - 1;\n            return array('error' => 'There are ' . $check . ' failed login attempts from your IP in the last minute. Try again in 1 minute!');\n        }\n\n        $check2 = $this->app->log_manager->get('no_cache=1&is_system=y&count=1&created_at=[mt]10 min ago&updated_at=[lt]10 min&rel_type=login_failed&user_ip=' . user_ip());\n        if ($check2 > 25) {\n            return array('error' => 'There are ' . $check2 . ' failed login attempts from your IP in the last 10 minutes. You are blocked for 10 minutes!');\n        }\n\n\n\n        // third check by server REMOTE_ADDR , if the an atacker spoofs the user headers such as HTTP_X_FORWARDED or HTTP_CLIENT_IP\n        if (isset($_SERVER['REMOTE_ADDR'])) {\n            $check3 = $this->app->log_manager->get('no_cache=1&is_system=y&count=1&created_at=[mt]15 min ago&updated_at=[lt]15 min&rel_type=login_failed&user_ip=' . $_SERVER['REMOTE_ADDR']);\n            if ($check3 > 25) {\n                return array('error' => 'There are ' . $check3 . ' failed login attempts from your IP in the last 15 minutes. You are blocked for 15 minutes!');\n            }\n        }\n\n\n\n        if (isset($params['code_login'])) {\n            return $this->codeLogin($params['code_login']);\n        }\n\n        // So we use second parameter\n        if (!isset($params['username']) and isset($params['username_encoded']) and $params['username_encoded']) {\n            $params['username_encoded'] = rawurldecode($params['username_encoded']);\n            $decoded_username = @base64_decode($params['username_encoded']);\n            if (!empty($decoded_username)) {\n                $params['username'] = $decoded_username;\n            } else {\n                $params['username'] = @base62_decode($params['username_encoded']);\n            }\n            unset($params['username_encoded'] );\n        }\n        if (!isset($params['password']) and isset($params['password_encoded']) and $params['password_encoded']) {\n            $params['password_encoded'] = rawurldecode($params['password_encoded']);\n            $decoded_password = @base64_decode($params['password_encoded']);\n             if (!empty($decoded_password)) {\n                $params['password'] = $decoded_password;\n             } else {\n                $params['password'] = @base62_decode($params['password_encoded']);\n            }\n            unset($params['password_encoded'] );\n        }\n\n        $override = $this->app->event_manager->trigger('mw.user.before_login', $params);\n\n        $redirect_after = isset($params['http_redirect']) ? $params['http_redirect'] : false;\n\n        if(!$redirect_after){\n            //legacy redirect param\n            $redirect_after = isset($params['redirect']) ? $params['redirect'] : false;\n        }\n\n        $overiden = false;\n        $return_resp = false;\n        if (is_array($override)) {\n            foreach ($override as $resp) {\n                if (isset($resp['error']) or isset($resp['success'])) {\n                    if (isset($resp['success']) and isset($resp['http_redirect'])) {\n                        $redirect_after = $resp['http_redirect'];\n                    } else  if (isset($resp['success']) and isset($resp['redirect'])) {\n                        $redirect_after = $resp['redirect'];\n                    }\n                    $return_resp = $resp;\n                    $overiden = true;\n                }\n            }\n        }\n        if ($overiden == true and $redirect_after != false) {\n            return $this->app->url_manager->redirect($redirect_after);\n        } elseif ($overiden == true and $return_resp) {\n            return $return_resp;\n        }\n\n\n\n        $params['x-no-throttle'] = false; //allow throttle\n        return RequestRoute::postJson(route('api.user.login'), $params);\n    }\n\n    public function logout($params = false)\n    {\n        Auth::logout();\n        Session::flush();\n        $aj = $this->app->url_manager->is_ajax();\n        $redirect_after = isset($_GET['redirect']) ? $_GET['redirect'] : false;\n        if ($redirect_after == false) {\n            $redirect_after = isset($_GET['redirect_to']) ? $_GET['redirect_to'] : false;\n        }\n        if (isset($_COOKIE['editmode'])) {\n            setcookie('editmode');\n        }\n\n        $this->app->event_manager->trigger('mw.user.logout', $params);\n        if ($redirect_after == false and $aj == false) {\n            if (isset($_SERVER['HTTP_REFERER'])) {\n                return $this->app->url_manager->redirect($_SERVER['HTTP_REFERER']);\n            }\n        }\n\n        if ($redirect_after == true) {\n            $redir = $redirect_after;\n\n            // $redir = site_url($redirect_after);\n            return $this->app->url_manager->redirect($redir);\n        }\n\n        return true;\n    }\n\n    public function is_logged()\n    {\n        if (!mw_is_installed()) {\n            return false;\n        }\n\n        if (Auth::check()) {\n            $user =Auth::user();\n            if ($user and isset($user->is_active) and intval($user->is_active) == 0) {\n                // logout user if its set inactive in database\n                $this->logout();\n                return false;\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function login_as($params)\n    {\n        $is_a = $this->is_admin();\n        if ($is_a == true) {\n            return true;\n        }\n    }\n\n    public function has_access($function_name = '')\n    {\n        // will be updated with roles and perms\n        $is_a = $this->is_admin();\n        if ($is_a == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function admin_access()\n    {\n        if ($this->is_admin() == false) {\n            exit('You must be logged as admin');\n        }\n    }\n\n    public function attributes($user_id = false)\n    {\n        if (!$user_id) {\n            $user_id = $this->id();\n        }\n        if (!$user_id) {\n            return;\n        }\n\n        $data = array();\n        $data['rel_type'] = 'users';\n        $data['rel_id'] = intval($user_id);\n        $res = array();\n        $get = $this->app->attributes_manager->get($data);\n        if (!empty($get)) {\n            foreach ($get as $item) {\n                if (isset($item['attribute_name']) and isset($item['attribute_value'])) {\n                    $res[$item['attribute_name']] = $item['attribute_value'];\n                }\n            }\n        }\n        if (!empty($res)) {\n            return $res;\n        }\n\n        return $get;\n    }\n\n    public function data_fields($user_id = false)\n    {\n        if (!$user_id) {\n            $user_id = $this->id();\n        }\n        if (!$user_id) {\n            return;\n        }\n\n        $data = array();\n        $data['rel_type'] = 'users';\n        $data['rel_id'] = intval($user_id);\n        $res = array();\n        $get = $this->app->content_manager->get_data($data);\n        if (!empty($get)) {\n            foreach ($get as $item) {\n                if (isset($item['field_name']) and isset($item['field_value'])) {\n                    $res[$item['field_name']] = $item['field_value'];\n                }\n            }\n        }\n        if (!empty($res)) {\n            return $res;\n        }\n\n        return $get;\n    }\n\n    public function picture($user_id = false)\n    {\n\n        if (!$user_id) {\n            $user_id = $this->id();\n        }\n\n        $name = $this->get_by_id($user_id);\n        if (isset($name['thumbnail']) and $name['thumbnail'] != '') {\n            if (is_https()) {\n                $rep = 1;\n                $name['thumbnail'] = str_ireplace('http://', '//', $name['thumbnail'], $rep);\n            }\n            return $name['thumbnail'];\n        }\n\n        return modules_url() . 'microweber/api/libs/mw-ui/assets/img/no-user.png';\n    }\n\n    /**\n     * @function user_name\n     * gets the user's FULL name\n     *\n     * @param        $user_id the id of the user. If false it will use the curent user (you)\n     * @param string $mode full|first|last|username\n     *                        'full' //prints full name (first +last)\n     *                        'first' //prints first name\n     *                        'last' //prints last name\n     *                        'username' //prints username\n     *\n     * @return string\n     */\n    public function name($user_id = false, $mode = 'full')\n    {\n        if ($mode != 'username') {\n            if ($user_id == user_id()) {\n                // return 'You';\n            }\n        }\n        if ($user_id == false) {\n            $user_id = user_id();\n        }\n\n        $name = $this->nice_name($user_id, $mode);\n\n        return $name;\n    }\n\n    /**\n     * Function to get user printable name by given ID.\n     *\n     * @param        $id\n     * @param string $mode\n     *\n     * @return string\n     *\n     * @example\n     * <code>\n     * //get user name for user with id 10\n     * $this->nice_name(10, 'full');\n     * </code>\n     *\n     * @uses $this->get_by_id()\n     */\n    public function nice_name($id = false, $mode = 'full')\n    {\n\n        if (!$id) {\n            $id = $this->id();\n        }\n\n        $user = $this->get_by_id($id);\n\n\n        $user_data = $user;\n        if (empty($user)) {\n            return false;\n        }\n\n        switch ($mode) {\n            case 'first' :\n            case 'fist' :\n                // because of a common typo :)\n                $user_data['first_name'] ? $name = $user_data['first_name'] : $name = $user_data['username'];\n                $name = ucwords($name);\n\n                if (trim($name) == '' and $user_data['email'] != '') {\n                    $n = explode('@', $user_data['email']);\n                    $name = $n[0];\n                }\n                // return $name;\n                break;\n\n            case 'last' :\n                $user_data['last_name'] ? $name = $user_data['last_name'] : $name = $user_data['last_name'];\n                $name = ucwords($name);\n                break;\n\n            case 'username' :\n                $name = $user_data['username'];\n                break;\n\n\n            case 'email' :\n                $name = $user_data['email'];\n                break;\n\n            case 'full' :\n            default :\n\n                $name = '';\n                if (isset($user_data['first_name'])) {\n                    if ($user_data['first_name']) {\n                        $name = $user_data['first_name'];\n                    }\n                }\n\n                if (isset($user_data['last_name'])) {\n                    if ($user_data['last_name']) {\n                        $name .= ' ' . $user_data['last_name'];\n                    }\n                }\n                $name = ucwords($name);\n\n                if (trim($name) == '' and $user_data['email'] != '') {\n                    $name = $user_data['email'];\n                    $name_from_email = explode('@', $user_data['email']);\n                    $name = $name_from_email[0];\n                }\n\n                if (trim($name) == '' and $user_data['username'] != '') {\n                    $name = $user_data['username'];\n                    $name = ucwords($name);\n                }\n\n                break;\n        }\n\n        if (!isset($name) or $name == false or $name == null or trim($name) == '') {\n            if (isset($user_data['username']) and $user_data['username'] != false and trim($user_data['username']) != '') {\n                $name = $user_data['username'];\n            } elseif (isset($user_data['email']) and $user_data['email'] != false and trim($user_data['email']) != '') {\n                $name_from_email = explode('@', $user_data['email']);\n                $name = $name_from_email[0];\n            }\n        }\n\n        return $name;\n    }\n\n    public function api_login($api_key = false)\n    {\n        if ($api_key == false and isset($_REQUEST['api_key']) and user_id() == 0) {\n            $api_key = $_REQUEST['api_key'];\n        }\n\n        if ($api_key == false) {\n            return false;\n        } else {\n            if (trim($api_key) == '') {\n                return false;\n            } else {\n                if (user_id() > 0) {\n                    return true;\n                } else {\n                    $data = array();\n                    $data['api_key'] = $api_key;\n                    $data['is_active'] = 1;\n                    $data['limit'] = 1;\n\n                    $data = $this->get_all($data);\n\n                    if ($data != false) {\n                        if (isset($data[0])) {\n                            $data = $data[0];\n\n                            if (isset($data['api_key']) and $data['api_key'] == $api_key) {\n                                return $this->make_logged($data['id']);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public function register($params)\n    {\n        return RequestRoute::postJson(route('api.user.register'), $params);\n    }\n\n    public function after_register($user_id, $suppress_output = true)\n    {\n        if ($suppress_output == true) {\n            //ob_start();\n        }\n        $data = $this->get_by_id($user_id);\n        if (!$data) {\n            return;\n        }\n\n        $notif = array();\n        $notif['module'] = 'users';\n        $notif['rel_type'] = 'users';\n        $notif['rel_id'] = $user_id;\n        $notif['title'] = 'New user registration';\n        $notif['description'] = 'You have new user registration';\n        $notif['content'] = 'You have new user registered with the username [' . $data['username'] . '] and id [' . $user_id . ']';\n        $this->app->notifications_manager->save($notif);\n\n\n\n        $this->app->log_manager->save($notif);\n        $this->register_email_send($user_id);\n\n        $this->app->event_manager->trigger('mw.user.after_register', $data);\n        if ($suppress_output == true) {\n            if (ob_get_length()) {ob_end_clean();}\n\n        }\n    }\n\n    public function register_email_send($user_id = false)\n    {\n        if ($user_id == false) {\n            $user_id = $this->id();\n        }\n        if ($user_id == false) {\n            return;\n        }\n        $data = $this->get_by_id($user_id);\n        if (!$data) {\n            return;\n        }\n        if (is_array($data)) {\n            $register_email_enabled = $this->app->option_manager->get('register_email_enabled', 'users');\n            if ($register_email_enabled == true) {\n\n                /*\n                $register_email_subject = $this->app->option_manager->get('register_email_subject', 'users');\n                $register_email_content = $this->app->option_manager->get('register_email_content', 'users');\n                 */\n\n                // Get register mail temlate\n                $new_user_registration_template_id = $this->app->option_manager->get('new_user_registration_email_template', 'users');\n                $mail_template = get_mail_template_by_id($new_user_registration_template_id, 'new_user_registration');\n\n                $register_email_subject = $mail_template['subject'];\n                $register_email_content = $mail_template['message'];\n\n\n                $appendFiles = array();\n                if (!empty(get_option('append_files', 'mail_template_id_' . $new_user_registration_template_id))) {\n                    $appendFiles = explode(\",\", get_option('append_files', 'mail_template_id_' . $new_user_registration_template_id));\n                }\n\n                if ($register_email_subject == false or trim($register_email_subject) == '') {\n                    $register_email_subject = 'Thank you for your registration!';\n                }\n                $to = $data['email'];\n                if ($register_email_content != false and trim($register_email_subject) != '') {\n                    if (!empty($data)) {\n                        foreach ($data as $key => $value) {\n                            if (!is_array($value) and is_string($key)) {\n                                $register_email_content = str_ireplace('{' . $key . '}', $value, $register_email_content);\n                            }\n                        }\n                    }\n                    $verify_email_link = $this->app->format->encrypt($data['id']);\n                    $verify_email_link = api_url('users/verify_email_link') . '?key=' . $verify_email_link;\n                    $register_email_content = str_ireplace('{verify_email_link}', $verify_email_link, $register_email_content);\n\n\n                    if (isset($to) and (filter_var($to, FILTER_VALIDATE_EMAIL))) {\n\n                        $sender = new \\MicroweberPackages\\Utils\\Mail\\MailSender();\n                        return $sender->send($to, $register_email_subject, $register_email_content, false, false, false, false, false, false, $appendFiles);\n\n                    }\n                }\n            }\n        }\n    }\n\n    public function csrf_validate(&$data)\n    {\n        $data['_token_header'] = request()->header('X-CSRF-TOKEN');\n        $session_token = Session::token();\n        if (is_array($data) and $this->session_id()) {\n            foreach ($data as $k => $v) {\n                if ($k == 'token' or $k == '_token' or $k == '_token_header') {\n                    if ($session_token === $v) {\n                        unset($data[$k]);\n\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n\n    public function hash_pass($pass)\n    {\n        $hash = \\Hash::make($pass);\n\n        return $hash;\n    }\n\n    /**\n     * Allows you to save users in the database.\n     *\n     * By default it have security rules.\n     *\n     * If you are admin you can save any user in the system;\n     *\n     * However if you are regular user you must post param id with the current user id;\n     *\n     * @param  $params\n     * @param  $params ['id'] = $user_id; // REQUIRED , you must set the user id.\n     *                 For security reasons, to make new user please use user_register() function that requires captcha\n     *                 or write your own save_user wrapper function that sets  mw_var('force_save_user',true);\n     *                 and pass its params to save_user();\n     * @param  $params ['is_active'] = 1; //default is 'n'\n     *\n     * @usage\n     *\n     * $upd = array();\n     * $upd['id'] = 1;\n     * $upd['email'] = $params['new_email'];\n     * $upd['password'] = $params['passwordhash'];\n     * mw_var('force_save_user', false|true); // if true you want to make new user or foce save ... skips id check and is admin check\n     * mw_var('save_user_no_pass_hash', false|true); //if true skips pass hash function and saves password it as is in the request, please hash the password before that or ensure its hashed\n     * $s = save_user($upd);\n     *\n     * @return bool|int\n     */\n    public $force_save = false;\n\n    public function save($params)\n    {\n        $force = false;\n        if (defined('MW_FORCE_USER_SAVE')) {\n            $force = MW_FORCE_USER_SAVE;\n        } elseif ($this->force_save) {\n            $force = $this->force_save;\n        } elseif (mw_var('force_save_user')) {\n            $force = mw_var('force_save_user');\n        }\n        if (!$force) {\n            if (defined('MW_API_CALL') and mw_is_installed() == true) {\n                if (isset($params['is_admin']) and $this->is_admin() == false and !is_null(User::first())) {\n                    unset($params['is_admin']);\n                }\n            }\n        }\n        if ($force == false) {\n            if (!is_cli()) {\n                $validate_token = mw()->user_manager->csrf_validate($params);\n                if ($validate_token == false) {\n                    return array(\n                        'error' => _e('Confirm edit of profile', true),\n                        'form_data_required' => 'token',\n                        'form_data_module' => 'users/profile/confirm_edit'\n                    );\n                }\n            }\n\n            if (isset($params['id']) and $params['id'] != 0) {\n                $adm = $this->is_admin();\n                if ($adm == false) {\n                    $is_logged = user_id();\n                    if ($is_logged == false or $is_logged == 0) {\n                        return array('error' => 'You must be logged to save user');\n                    } elseif (intval($is_logged) == intval($params['id']) and intval($params['id']) != 0) {\n                        // the user is editing their own profile\n                    } else {\n                        return array('error' => 'You must be logged to as admin save this user');\n                    }\n                }\n            } else {\n                if (defined('MW_API_CALL') and mw_is_installed() == true) {\n                    $adm = $this->is_admin();\n                    if ($adm == false) {\n                        $params['id'] = $this->id();\n                        $is_logged = user_id();\n                        if (intval($params['id']) != 0 and $is_logged != $params['id']) {\n                            return array('error' => 'You must be logged save your settings');\n                        }\n                    } else {\n\n\n                        if (!isset($params['id'])) {\n                            $params['id'] = $this->id();\n                        }\n                    }\n                }\n            }\n        }\n\n        $data_to_save = $params;\n\n        if (isset($data_to_save['id']) and $data_to_save['id'] != 0 and isset($data_to_save['email']) and $data_to_save['email'] != false) {\n            $old_user_data = $this->get_by_id($data_to_save['id']);\n            if (isset($old_user_data['email']) and $old_user_data['email'] != false) {\n                if ($data_to_save['email'] != $old_user_data['email']) {\n\n                    $old_user_data_reset = User::where('id', $data_to_save['id'])->first();\n                    if($old_user_data_reset){\n                        $old_user_data_reset->password_reset_hash = null;\n                        $old_user_data_reset->save();\n                    }\n\n//                    if (isset($old_user_data['password_reset_hash']) and $old_user_data['password_reset_hash'] != false) {\n//                        $hash_cache_id = md5(serialize($old_user_data)) . uniqid() . rand();\n//                        $data_to_save['password_reset_hash'] = $hash_cache_id;\n//                    }\n                }\n            }\n        }\n        if (isset($data_to_save['email']) and isset($data_to_save['id'])) {\n            $email = trim($data_to_save['email']);\n            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                $check_existing = array();\n                $check_existing['email'] = $email;\n                $check_existing['single'] = 1;\n                $check_existing = $this->get_all($check_existing);\n\n                if (isset($check_existing['id']) and $check_existing['id'] != $data_to_save['id']) {\n                    return array('error' => 'User with this email already exists! Try different email address!');\n                }\n            }\n        }\n\n\n        if (isset($params['id']) and intval($params['id']) != 0) {\n            $user = User::find($params['id']);\n\n\n        } else {\n            $user = new User();\n        }\n        $id_to_return = false;\n\n        $data_to_save = $this->app->format->clean_xss($data_to_save);\n\n\n        if (isset($data_to_save['password2'])) {\n            $data_to_save['verify_password'] = $data_to_save['password2'];\n        }\n\n        $checkValidator = $user->validateAndFill($data_to_save);\n        $getValidatorMessages = $user->getValidatorMessages();\n\n\n        if ($checkValidator) {\n\n            if (isset($data_to_save['id'])) {\n\n                $can_edit = $this->__check_id_has_ability_to_edit_user($data_to_save['id']);\n                if (!$can_edit) {\n                    return array('error' => 'You do not have permission to edit this user');\n                }\n            }\n\n\n            if (isset($user->id)) {\n                $data_to_save['id'] = $params['id'] = $user->id;\n            }\n\n\n            if (isset($data_to_save['id']) and $data_to_save['id'] == 0) {\n                if ((isset($data_to_save['username']) and $data_to_save['username'] == false) and (isset($data_to_save['email']) and $data_to_save['email'] == false)\n                ) {\n                    return array('error' => 'You must set email or username');\n                }\n            }\n\n            if (isset($data_to_save['username']) and $data_to_save['username'] != false) {\n                $check_existing = array();\n                $check_existing['username'] = $data_to_save['username'];\n                $check_existing['single'] = 1;\n                $check_existing = $this->get_all($check_existing);\n\n                $err = array('error' => 'User with this username already exists! Try different username!');\n\n                if ($check_existing) {\n                    if (isset($data_to_save['id']) and $data_to_save['id'] != false) {\n                        if (isset($check_existing['id']) and $check_existing['id'] != $data_to_save['id']) {\n                            return $err;\n                        }\n                    } else {\n                        return $err;\n                    }\n                }\n            }\n\n            if ($this->is_admin()) {\n                if (isset($params['roles'][0])) {\n                    if ($params['roles'][0] == 'Super Admin') {\n                        $user->is_admin = 1;\n                    }  else  if ($params['roles'][0] == 'User') {\n                        $user->is_admin = 0;\n                    } else {\n                        $user->is_admin = 0;\n\n                        $user->assignRole($params['roles']);\n                    }\n                }\n                if (isset($params['is_active'])) {\n                    $user->is_active =$params['is_active'];\n                }\n            }\n\n            try {\n                $save = $user->save();\n            } catch (\\Exception $e) {\n                return array('error' => $e->getMessage());\n            }\n\n            if (isset($params['attributes']) or isset($params['data_fields'])) {\n                $params['extended_save'] = true;\n            }\n\n            if (isset($params['extended_save'])) {\n                if (isset($data_to_save['password'])) {\n                    unset($data_to_save['password']);\n                }\n\n                if (isset($data_to_save['id'])) {\n                    $data_to_save['table'] = 'users';\n                    $this->app->database_manager->extended_save($data_to_save);\n                }\n            }\n\n\n            if (isset($params['id']) and intval($params['id']) != 0) {\n                $id_to_return = intval($params['id']);\n            } else {\n                $id_to_return = DB::getPdo()->lastInsertId();\n            }\n            $params['id'] = $id_to_return;\n            $this->app->event_manager->trigger('mw.user.save', $params);\n        } else {\n            $errorMessages = '';\n            foreach ($getValidatorMessages as $validatorInputs) {\n                foreach ($validatorInputs as $validatorInput) {\n                    $errorMessages .= $validatorInput . '<br />';\n                }\n            }\n            return array('error' => $errorMessages);\n        }\n        $this->app->cache_manager->delete('users' . DIRECTORY_SEPARATOR . 'global');\n        $this->app->cache_manager->delete('users' . DIRECTORY_SEPARATOR . '0');\n        $this->app->cache_manager->delete('users' . DIRECTORY_SEPARATOR . $id_to_return);\n\n        return $id_to_return;\n    }\n\n    public function login_set_attempt($params = array())\n    {\n        if (!empty($params)) {\n            if (isset($params['username']) || isset($params['email'])) {\n\n                if (isset($params['username']) && $params['username'] != false and filter_var($params['username'], FILTER_VALIDATE_EMAIL)) {\n                    $params['email'] = $params['username'];\n                }\n\n                $findUserId = false;\n                $findByUsername = false;\n\n                if (isset($params['username'])) {\n                    $findByUsername = User::where('username', $params['username'])->first();\n                }\n\n                if ($findByUsername) {\n                    $findUserId = $findByUsername->id;\n                } else {\n                    if (isset($params['email'])) {\n                        $findByEmail = User::where('email', $params['email'])->first();\n                        if ($findByEmail) {\n                            $findUserId = $findByEmail->id;\n                        }\n                    }\n                }\n\n                if (!$findUserId) {\n                    return;\n                }\n\n                $loginAttempt = new LoginAttempt();\n                if (isset($params['username'])) {\n                    $loginAttempt->username = $params['username'];\n                }\n                if (isset($params['email'])) {\n                    $loginAttempt->email = $params['email'];\n                }\n\n                $loginAttempt->user_id = $findUserId;\n                $loginAttempt->time = time();\n                $loginAttempt->ip = user_ip();\n                $loginAttempt->success = $params['success'];\n                $loginAttempt->save();\n            }\n        }\n    }\n\n    public function login_set_success_attempt($params = array())\n    {\n        $params['success'] = true;\n        $this->login_set_attempt($params);\n\n        $this->app->log_manager->save('title=Success login&is_system=y&rel_type=login_succes&user_ip=' . user_ip());\n    }\n\n    public function login_set_failed_attempt($params = array())\n    {\n        $params['success'] = false;\n        $this->login_set_attempt($params);\n\n        $this->app->log_manager->save('title=Failed login&is_system=y&rel_type=login_failed&user_ip=' . user_ip());\n    }\n\n    public function get($params = false)\n    {\n        $id = $params;\n        if ($id == false) {\n            $id = $this->id();\n        }\n        if ($id == 0) {\n            return false;\n        }\n        $res = $this->get_by_id($id);\n        if (empty($res)) {\n            $res = $this->get_by_username($id);\n        }\n\n        return $res;\n    }\n\n    public function get_by_email($email)\n    {\n        $data = array();\n        $data['email'] = $email;\n        $data['limit'] = 1;\n        $data = $this->get_all($data);\n        if (isset($data[0])) {\n            $data = $data[0];\n        }\n\n        return $data;\n    }\n\n    public function get_by_username($username)\n    {\n        $data = array();\n        $data['username'] = $username;\n        $data['limit'] = 1;\n        $data = $this->get_all($data);\n        if (isset($data[0])) {\n            $data = $data[0];\n        }\n\n        return $data;\n    }\n\n    public function delete($data)\n    {\n        if (!is_array($data)) {\n            $new_data = array();\n            $new_data['id'] = intval($data);\n            $data = $new_data;\n        }\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $can_edit = $this->__check_id_has_ability_to_edit_user($c_id);\n            if (!$can_edit) {\n                return false;\n            }\n\n            $this->app->database_manager->delete_by_id('users', $c_id);\n\n            return $c_id;\n        }\n\n        return $data;\n    }\n\n    public function reset_password_from_link($params)\n    {\n        if (!isset($params['captcha'])) {\n            return array('error' => 'Please enter the captcha answer!');\n        } else {\n            $validate_captcha = $this->app->captcha_manager->validate($params['captcha']);\n            if (!$validate_captcha) {\n                return array('error' => 'Invalid captcha answer!', 'captcha_error' => true);\n            }\n        }\n\n        if (!isset($params['id']) or trim($params['id']) == '') {\n            return array('error' => 'You must send id parameter');\n        }\n\n        if (isset($params['id'])) {\n\n            $can_edit = $this->__check_id_has_ability_to_edit_user($params['id']);\n            if (!$can_edit) {\n                return array('error' => 'You do not have permission to edit this user');\n            }\n        }\n\n\n        if (!isset($params['password_reset_hash']) or trim($params['password_reset_hash']) == '') {\n            return array('error' => 'You must send password_reset_hash parameter');\n        }\n\n        if (!isset($params['pass1']) or trim($params['pass1']) == '') {\n            return array('error' => 'Enter new password!');\n        }\n\n        if (!isset($params['pass2']) or trim($params['pass2']) == '') {\n            return array('error' => 'Enter repeat new password!');\n        }\n\n        if ($params['pass1'] != $params['pass2']) {\n            return array('error' => 'Your passwords does not match!');\n        }\n\n        $data1 = array();\n        $data1['id'] = intval($params['id']);\n        $data1['password_reset_hash'] = $this->app->database_manager->escape_string($params['password_reset_hash']);\n        $table = $this->tables['users'];\n\n\n        $check = User::whereNotNull('password_reset_hash')->where('password_reset_hash', $data1['password_reset_hash'])->where('id', $data1['id'])->first();\n        if (!$check) {\n            return array('error' => 'Invalid data or expired link!');\n        } else {\n            $data1['password_reset_hash'] = '';\n        }\n\n        $this->force_save = true;\n        $save = $this->app->database_manager->save($table, $data1);\n        $save_user = array();\n        $save_user['id'] = intval($params['id']);\n        $save_user['password'] = $params['pass1'];\n        if (isset($check['email'])) {\n            $save_user['email'] = $check['email'];\n        }\n        $this->app->event_manager->trigger('mw.user.change_password', $save_user);\n\n        $this->save($save_user);\n\n        $notif = array();\n        $notif['module'] = 'users';\n        $notif['rel_type'] = 'users';\n        $notif['rel_id'] = $data1['id'];\n        $notif['title'] = \"The user have successfully changed password. (User id: {$data1['id']})\";\n\n        $this->app->log_manager->save($notif);\n        $this->session_end();\n\n        return array('success' => 'Your password have been changed!');\n    }\n\n    public function session_end()\n    {\n        \\Session::flush();\n        \\Session::regenerate();\n    }\n\n    public function send_forgot_password($params)\n    {\n        return RequestRoute::postJson(route('api.user.password.email'), $params);\n    }\n\n    public function social_login($params)\n    {\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n\n        $return_after_login = false;\n        if (isset($params['redirect'])) {\n            $return_after_login = $params['redirect'];\n            $this->session_set('user_after_login', $return_after_login);\n        } elseif (isset($_SERVER['HTTP_REFERER']) and stristr($_SERVER['HTTP_REFERER'], $this->app->url_manager->site())) {\n            $return_after_login = $_SERVER['HTTP_REFERER'];\n            $this->session_set('user_after_login', $return_after_login);\n        }\n\n        $provider = false;\n        if (isset($_REQUEST['provider'])) {\n            $provider = $_REQUEST['provider'];\n            $provider = trim(strip_tags($provider));\n        }\n\n        if ($provider != false and isset($params) and !empty($params)) {\n            $this->socialite_config($provider);\n            switch ($provider) {\n                case 'github':\n                    return $login = $this->socialite->with($provider)->scopes(['user:email'])->redirect();\n            }\n\n            return $login = $this->socialite->with($provider)->redirect();\n        }\n    }\n\n    public function make_logged($user_id,$remember = false)\n    {\n        if (is_array($user_id)) {\n            if (isset($user_id['id'])) {\n                $user_id = $user_id['id'];\n            }\n        }\n\n\n\n        if (intval($user_id) > 0) {\n            $data = $this->get_by_id($user_id);\n            if ($data == false) {\n                return false;\n            } else {\n                if (is_array($data)) {\n\n                    $user = User::find($user_id);\n\n                    $user_session = array();\n                    $user_session['is_logged'] = 'yes';\n                    $user_session['user_id'] = $data['id'];\n\n                    if (!defined('USER_ID')) {\n                        define('USER_ID', $data['id']);\n                    }\n\n                    $old_sid = Session::getId();\n                    $this->session_set('old_sid',$old_sid);\n\n                    $data['old_sid'] = $old_sid;\n                    $user_session['old_session_id'] = $old_sid;\n                    $current_user = Auth::user();\n                    if ((isset($current_user->id) and $current_user->id == $user_id)) {\n                        Auth::login(Auth::user(), $remember);\n                    } else {\n                        Auth::loginUsingId($data['id'], $remember);\n                    }\n//\n//                    Session::setId($old_sid);\n//                    Session::save();\n\n                    $this->app->event_manager->trigger('mw.user.login', $data);\n                    $this->session_set('user_session', $user_session);\n                    $user_session = $this->session_get('user_session');\n\n                    $this->update_last_login_time();\n                    $user_session['success'] = _e('You are logged in!', true);\n                    return $user_session;\n                }\n            }\n        }\n    }\n\n    /**\n     * Generic function to get the user by id.\n     * Uses the getUsers function to get the data.\n     *\n     * @param\n     *            int id\n     *\n     * @return array\n     */\n    public function get_by_id($id)\n    {\n        $id = intval($id);\n        if ($id == 0) {\n            return false;\n        }\n\n        $findUser = User::where('id', $id)->first();\n        if ($findUser == null) {\n            return false;\n        }\n\n\n        return $findUser->toArray();\n    }\n\n    public function update_last_login_time()\n    {\n        $uid = user_id();\n        if (intval($uid) > 0) {\n            $data_to_save = array();\n            $data_to_save['id'] = $uid;\n            $data_to_save['last_login'] = date('Y-m-d H:i:s');\n            $data_to_save['last_login_ip'] = user_ip();\n\n            $table = $this->tables['users'];\n            $save = $this->app->database_manager->save($table, $data_to_save);\n\n            $this->app->log_manager->delete('is_system=y&rel_type=login_failed&user_ip=' . user_ip());\n        }\n    }\n\n    public function social_login_process($params = false)\n    {\n        $user_after_login = $this->session_get('user_after_login');\n\n        if (!isset($_REQUEST['provider']) and isset($_REQUEST['hauth_done'])) {\n            $_REQUEST['provider'] = $_REQUEST['hauth_done'];\n        }\n        if (!isset($_REQUEST['provider'])) {\n            return $this->app->url_manager->redirect(site_url());\n        }\n\n        $auth_provider = $_REQUEST['provider'];\n        $this->socialite_config($auth_provider);\n\n\n        try {\n            // $this->socialite_config($auth_provider);\n            $user = $this->socialite->driver($auth_provider)->stateless()->user();\n\n            $email = $user->getEmail();\n\n            $username = $user->getNickname();\n            $oauth_id = $user->getId();\n            $avatar = $user->getAvatar();\n            $name = $user->getName();\n\n            $existing = array();\n\n            if ($email != false) {\n                $existing['email'] = $email;\n            } else {\n                $existing['oauth_uid'] = $oauth_id;\n                $existing['oauth_provider'] = $auth_provider;\n            }\n            $save = $existing;\n            $save['thumbnail'] = $avatar;\n            $save['username'] = $username;\n            $save['is_active'] = 1;\n            $save['is_admin'] = 0;\n            $save['first_name'] = '';\n            $save['last_name'] = '';\n\n            if ($name != false) {\n                $names = explode(' ', $name);\n                if (isset($names[0])) {\n                    $save['first_name'] = array_shift($names);\n                    if (!empty($names)) {\n                        $last = implode(' ', $names);\n                        $save['last_name'] = $last;\n                    }\n                }\n            }\n            $existing['single'] = true;\n            $existing['limit'] = 1;\n            $existing = $this->get_all($existing);\n            if (!defined('MW_FORCE_USER_SAVE')) {\n                define('MW_FORCE_USER_SAVE', true);\n            }\n            if (isset($existing['id'])) {\n                if ($save['is_active'] != 1) {\n                    return;\n                }\n                $this->make_logged($existing['id']);\n            } else {\n\n\n                $user = new User;\n                $user->fill($save);\n                 $user->save($save);\n               // $new_user = $this->save($save);\n                 $new_user = $user->id;\n\n                $this->after_register($new_user);\n\n                $this->make_logged($new_user);\n            }\n        } catch (\\Laravel\\Socialite\\Two\\InvalidStateException $e) {\n            //do nothing\n        } catch (\\GuzzleHttp\\Exception\\ClientException $e) {\n            //do nothing\n        } catch (\\InvalidArgumentException $e) {\n            //do nothing\n        } catch (\\Exception $e) {\n            //do nothing\n        }\n\n        if ($user_after_login != false) {\n            return $this->app->url_manager->redirect($user_after_login);\n        } else {\n            return $this->app->url_manager->redirect(site_url());\n        }\n    }\n\n    public function count()\n    {\n        $options = array();\n        $options['count'] = true;\n        $options['cache_group'] = 'users/global/';\n        $data = $this->get_all($options);\n\n        return $data;\n    }\n\n    /**\n     * @function get_users\n     *\n     * @param $params array|string;\n     * @params $params['username'] string username for user\n     * @params $params['email'] string email for user\n     * @params $params['password'] string password for user\n     *\n     *\n     * @usage $this->get_all('email=my_email');\n     *\n     * @return array of users;\n     */\n    public function get_all($params)\n    {\n        $params = parse_params($params);\n\n        $table = $this->tables['users'];\n\n        $data = $this->app->format->clean_html($params);\n        $orig_data = $data;\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n            if (!empty($data['ids'])) {\n                $ids = $data['ids'];\n            }\n        }\n        if (!isset($params['search_in_fields'])) {\n            $data['search_in_fields'] = array('id', 'first_name', 'last_name', 'username', 'email');\n        }\n        $cache_group = 'users/global';\n        if (isset($limit) and $limit != false) {\n            $data['limit'] = $limit;\n        }\n        if (isset($count_only) and $count_only != false) {\n            $data['count'] = $count_only;\n        }\n        if (isset($data['username']) and $data['username'] == false) {\n            unset($data['username']);\n        }\n\n\n        $data['table'] = $table;\n        $data['exclude_shorthand'] = true;\n       // $data['no_cache'] = 1;\n\n        $get = $this->app->database_manager->get($data);\n\n        return $get;\n    }\n\n    public function register_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'register.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'register';\n        } else {\n            $default_url = 'users/register';\n        }\n\n        $checkout_url = $this->app->option_manager->get('register_url', 'users');\n        if ($checkout_url != false and trim($checkout_url) != '') {\n            $default_url = $checkout_url;\n        }\n\n        $checkout_url_sess = $this->session_get('register_url');\n\n        if ($checkout_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($checkout_url_sess);\n        }\n    }\n\n    public function logout_url()\n    {\n\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'logout.php';\n        $logout_url_settings = $this->app->option_manager->get('logout_url', 'users');\n        $logout_url_sess = $this->session_get('logout_url');\n\n        if ($logout_url_sess) {\n            return $logout_url_sess;\n        } else if ($logout_url_settings) {\n            return $logout_url_settings;\n        } else if (is_file($file)) {\n            return site_url('logout');\n        } else {\n            //return route('api.user.logout');\n            return route('logout');\n        }\n\n    }\n\n    public function login_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'login.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'login';\n        } else {\n            $default_url = 'users/login';\n        }\n\n        $login_url = $this->app->option_manager->get('login_url', 'users');\n        if ($login_url != false and trim($login_url) != '') {\n            $default_url = $login_url;\n        }\n\n        $login_url_sess = $this->session_get('login_url');\n\n        if ($login_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($login_url_sess);\n        }\n    }\n\n    public function profile_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'profile.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'profile';\n        } else {\n            $default_url = 'users/profile';\n        }\n\n        $profile_url = $this->app->option_manager->get('profile_url', 'users');\n        if ($profile_url != false and trim($profile_url) != '') {\n            $profile_url = $profile_url;\n        }\n\n        $profile_url_sess = $this->session_get('profile_url');\n\n        if ($profile_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($profile_url_sess);\n        }\n    }\n\n    public function forgot_password_url()\n    {\n        $template_dir = $this->app->template->dir();\n        $file = $template_dir . 'forgot_password.php';\n        $default_url = false;\n        if (is_file($file)) {\n            $default_url = 'forgot_password';\n        } else {\n            $default_url = 'users/forgot_password';\n        }\n        $checkout_url = $this->app->option_manager->get('forgot_password_url', 'users');\n        if ($checkout_url != false and trim($checkout_url) != '') {\n            $default_url = $checkout_url;\n        }\n        $checkout_url_sess = $this->session_get('forgot_password_url');\n        if ($checkout_url_sess == false) {\n            return $this->app->url_manager->site($default_url);\n        } else {\n            return $this->app->url_manager->site($checkout_url_sess);\n        }\n    }\n\n    public function session_set($name, $val)\n    {\n        $this->app->event_manager->trigger('mw.user.session_set', $name, $val);\n\n        return Session::put($name, $val);\n    }\n\n    public function csrf_form($unique_form_name = false)\n    {\n        if ($unique_form_name == false) {\n            $unique_form_name = uniqid();\n        }\n\n        $token = $this->csrf_token($unique_form_name);\n\n        $input = '<input type=\"hidden\" value=\"' . $token . '\" name=\"_token\">';\n\n        return $input;\n    }\n\n    public function session_all()\n    {\n        $value = Session::all();\n\n        return $value;\n    }\n\n    public function session_id()\n    {\n        return Session::getId();\n    }\n\n    public function session_get($name)\n    {\n        $value = Session::get($name);\n\n        return $value;\n    }\n\n    public function session_del($name)\n    {\n        Session::forget($name);\n    }\n\n    public function csrf_token($unique_form_name = false)\n    {\n        return csrf_token();\n    }\n\n    public function socialite_config($provider = false)\n    {\n        $callback_url = api_url('social_login_process?provider=' . $provider);\n\n        if (get_option('enable_user_fb_registration', 'users') == 'y') {\n            Config::set('services.facebook.client_id', get_option('fb_app_id', 'users'));\n            Config::set('services.facebook.client_secret', get_option('fb_app_secret', 'users'));\n            Config::set('services.facebook.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_twitter_registration', 'users') == 'y') {\n            Config::set('services.twitter.client_id', get_option('twitter_app_id', 'users'));\n            Config::set('services.twitter.client_secret', get_option('twitter_app_secret', 'users'));\n            Config::set('services.twitter.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_google_registration', 'users') == 'y') {\n            Config::set('services.google.client_id', get_option('google_app_id', 'users'));\n            Config::set('services.google.client_secret', get_option('google_app_secret', 'users'));\n            Config::set('services.google.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_github_registration', 'users') == 'y') {\n            Config::set('services.github.client_id', get_option('github_app_id', 'users'));\n            Config::set('services.github.client_secret', get_option('github_app_secret', 'users'));\n            Config::set('services.github.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_linkedin_registration', 'users') == 'y') {\n            Config::set('services.linkedin.client_id', get_option('linkedin_app_id', 'users'));\n            Config::set('services.linkedin.client_secret', get_option('linkedin_app_secret', 'users'));\n            Config::set('services.linkedin.redirect', $callback_url);\n        }\n\n        if (get_option('enable_user_microweber_registration', 'users') == 'y') {\n            $svc = Config::get('services.microweber');\n            if (!isset($svc['client_id'])) {\n                Config::set('services.microweber.client_id', get_option('microweber_app_id', 'users'));\n            }\n            if (!isset($svc['client_secret'])) {\n                Config::set('services.microweber.client_secret', get_option('microweber_app_secret', 'users'));\n            }\n            if (!isset($svc['redirect'])) {\n                Config::set('services.microweber.redirect', $callback_url);\n            }\n            $this->socialite->extend('microweber', function ($app) {\n                $config = $app['config']['services.microweber'];\n\n                return $this->socialite->buildProvider(MicroweberProvider::class, $config);\n            });\n        }\n    }\n\n    public function terms_accept($tos_name, $user_id_or_email = false)\n    {\n        $tos = new TosManager();\n        return $tos->terms_accept($tos_name, $user_id_or_email);\n\n    }\n\n    public function terms_check($tos_name = false, $user_id_or_email = false)\n    {\n\n        $tos = new TosManager();\n        return $tos->terms_check($tos_name, $user_id_or_email);\n\n    }\n\n\n    public function get_shipping_address()\n    {\n        $shipping_address_from_profile = [];\n        if ($this->is_logged()) {\n            $findCustomer = \\MicroweberPackages\\Customer\\Models\\Customer::where('user_id', Auth::id())->first();\n            if ($findCustomer) {\n                $findAddressShipping = \\MicroweberPackages\\Customer\\Models\\Address::where('type', 'shipping')->where('customer_id', $findCustomer->id)->first();\n                if ($findAddressShipping) {\n                    $country_from_shipping_addr = $findAddressShipping->country()->first();\n                    foreach ($findAddressShipping->toArray() as $addressKey => $addressValue) {\n                        $shipping_address_from_profile[$addressKey] = $addressValue;\n                    }\n                    if ($country_from_shipping_addr and isset($country_from_shipping_addr->name)) {\n                        $shipping_address_from_profile['country'] = $country_from_shipping_addr->name;\n                    }\n\n                    if ($findAddressShipping and isset($findAddressShipping->address_street_1)) {\n                        $shipping_address_from_profile['address'] = $findAddressShipping->address_street_1;\n                    }\n\n                    if (!isset($shipping_address_from_profile['address']) and $findAddressShipping and isset($findAddressShipping->address_street_2)) {\n                        $shipping_address_from_profile['address'] = $findAddressShipping->address_street_2;\n                    }\n\n\n                    return $shipping_address_from_profile;\n                }\n            }\n\n        }\n    }\n\n    private function __check_id_has_ability_to_edit_user($user_id)\n    {\n        if (!$user_id) {\n            return true;\n        }\n        $disable_edit_users = Config::get('microweber.users_disable_edit');\n        if ($disable_edit_users) {\n            $a = array();\n            if (!is_array($disable_edit_users)) {\n                $a[] = $disable_edit_users;\n            } else {\n                $a = $disable_edit_users;\n            }\n            if (is_arr($a)) {\n                foreach ($a as $disabled_user_id) {\n                    if ($disabled_user_id and $disabled_user_id == $user_id) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n\n        return true;\n\n    }\n}\n"], "filenames": ["src/MicroweberPackages/User/UserManager.php"], "buggy_code_start_loc": [190], "buggy_code_end_loc": [190], "fixing_code_start_loc": [191], "fixing_code_end_loc": [203], "type": "CWE-840", "message": "Business Logic Errors in GitHub repository microweber/microweber prior to 1.2.20.", "other": {"cve": {"id": "CVE-2022-2368", "sourceIdentifier": "security@huntr.dev", "published": "2022-07-11T08:15:07.047", "lastModified": "2022-07-15T17:34:26.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository microweber/microweber prior to 1.2.20."}, {"lang": "es", "value": "Unos Errores de L\u00f3gica de Negocio en el repositorio de GitHub microweber/microweber versiones anteriores a 1.2.20"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.20", "matchCriteriaId": "F54E3F9B-1291-41CE-B2F8-F5BD15BD57A6"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/53c000ccd5602536e28b15d9630eb8261b04a302", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a9595eda-a5e0-4717-8d64-b445ef83f452", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/53c000ccd5602536e28b15d9630eb8261b04a302"}}