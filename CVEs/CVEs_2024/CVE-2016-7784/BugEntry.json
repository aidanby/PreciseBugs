{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expRouter\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n\nclass expRouter {\n\n    private $maps = array();\n    public  $url_parts = '';\n    public  $current_url = '';\n    /**\n     * Type of url\n     * either 'base' (default page), 'page', 'action', or 'malformed'\n     * @var string\n     */\n    public  $url_type = '';\n    /**\n     * Style of url\n     * either 'sef' or 'query'\n     * @var string\n     */\n    public  $url_style = '';\n    public  $params = array();\n    public  $sefPath = null;\n    \n    function __construct() {\n        self::getRouterMaps();\n    }\n\n    /**\n     * remove trailing slash\n     *\n     * @param $fulllink\n     *\n     * @return string\n     */\n    public static function cleanLink($fulllink)\n    {           \n        if(substr($fulllink, -1) == '/') $fulllink = substr($fulllink, 0, -1);  \n        return $fulllink;                                   \n    }\n    \n    /**\n\t * Will build url to a module/page/etc (determined by what is passed to the $params array).\n\t *\n\t * @param array $params The params that are passed will determine what link is make\n\t *               section\n\t *               action\n\t *               sef_name\n\t *               module\n\t *               controller\n\t *               action\n\t *\n\t * @param bool $force_old_school Old School as in not SEF.\n\t *\n\t * @param bool $secure If you set $secure true but ENABLE_SSL is not turned on in the config this will be forced false\n\t *\n\t * @param bool $no_map Ignore router_maps\n     *\n\t * @return string A url\n\t */\n    public function makeLink($params, $force_old_school=false, $secure=false, $no_map=false) {\n        $secure = ENABLE_SSL == 1 ? $secure : false;  // check if this site can use SSL if not then force the link to not be secure\n        $linkbase =  $secure ? URL_BASE_SECURE : URL_BASE;\n        $linkbase .= SCRIPT_RELATIVE;\n                \n        if (isset($params['section']) && $params['section'] == SITE_DEFAULT_SECTION) {            \n            return self::cleanLink($linkbase);\n        }\n\n        // Check to see if SEF_URLS have been turned on in the site config\n        if (SEF_URLS == 1 && ($_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'index.php' || $_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'install/index.php') && $force_old_school == false) {\n            \n            if (isset($params['section']) && !isset($params['action'])) {                \n                if (empty($params['sef_name'])) {\n                    global $db;\n\n                    $params['sef_name'] = $db->selectValue('section', 'sef_name', 'id='.intval($params['section']));\n                }                               \n                return self::cleanLink($linkbase.$params['sef_name']);\n            } else {                \n                // initialize the link\n                $link = '';               \n        \n                // we need to add the change the module parameter to controller if it exists\n                // we can remove this snippit once the old modules are gone.\n                if (!empty($params['module']) && empty($params['controller'])) $params['controller'] = $params['module'];\n            \n                // check to see if we have a router mapping for this controller/action\n                if (empty($no_map)){\n                    for ($i = 0, $iMax = count($this->maps); $i < $iMax; $i++) {\n                        $missing_params = array(\"dump\");\n\n                        if ((!empty($params) && !empty($params['controller']) && !empty($params['action'])) && (in_array($params['controller'], $this->maps[$i]) && in_array($params['action'], $this->maps[$i]) && (!isset($this->maps[$i]['src']) || in_array($params['src'], $this->maps[$i])))) {\n                            $missing_params = array_diff_key($this->maps[$i]['url_parts'], $params);\n                        }\n\n                        if (count($missing_params) == 0) {\n                            foreach($this->maps[$i]['url_parts'] as $key=>$value) {\n                                if ($key == 'controller') {\n                                    $link .= urlencode($value).\"/\";\n                                } else {\n                                    $link .= urlencode($params[$key]).\"/\";\n                                }\n                            }\n                            break;  // if this hits then we've found a match\n                        }\n                    }\n                }\n\n                // if we found a mapping for this link then we can return it now.\n                //if ($link != '') return self::encode($linkbase.$link);\n                if ($link != '') return self::cleanLink($linkbase.$link);\n                \n                if (!empty($params['controller'])) $link .= $params['controller'].'/';\n                if (!empty($params['action'])) $link .= $params['action'].'/';\n                foreach ($params as $key=>$value) {\n                    if(!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID') {\n                        $value = trim($value);\n                        $key = trim($key);\n                        if ($value != \"\") {\n                            if ($key != 'module' && $key != 'action' && $key != 'controller') {\n                                if ($key != 'src') {\n                                    $link .= urlencode($key).\"/\".urlencode($value).\"/\";\n                                } else {\n                                    $link .= $key.\"/\".$value.\"/\";\n                                }\n                            }\n                        }\n                    }\n                }\n                //trim last / off                 \n                return self::cleanLink($linkbase.$link);\n            }\n        } else {\n            // if the users don't have SEF URL's turned on then we make the link the old school way.\n            if (!empty($params['sef_name'])) unset($params['sef_name']);\n            $link = $linkbase . SCRIPT_FILENAME . \"?\";\n            foreach ($params as $key=>$value) {\n                if (!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID'){\n                    $value = trim($value);\n                    $key = trim($key);\n                    if ($value != \"\") {\n                        if ($key != 'src') {\n                            $link .= urlencode($key).\"=\".urlencode($value).\"&\";\n                        } else {\n                            $link .= $key.\"=\".$value.\"&\";\n                        }                    \n                    }\n                }\n            }\n\n            $link = substr($link,0,-1);\n            return $link; // phillip: removed htmlspecialchars so that links return without parsing & to &amp; in URL strings\n            //return htmlspecialchars($link,ENT_QUOTES);\n        }\n    }\n\n    /**\n     * Returns a cleaner canonical link sans 'src' param\n     *\n     * @return string\n     */\n    public function plainPath() {\n        $params = $this->params;\n        unset($params['src']);\n        return $this->makeLink($params);\n    }\n\n    public function routeRequest() {\n        global $user;\n\n        // strip out possible xss exploits via url\n        foreach ($_GET as $key=>$var) {\n            if (is_string($var) && strpos($var,'\">')) {\n                unset(\n                    $_GET[$key],\n                    $_REQUEST[$key]\n                );\n            }\n        }\n        // conventional method to ensure the 'id' is only an id\n        if (isset($_REQUEST['id'])) {\n            if (isset($_GET['id']))\n                $_GET['id'] = intval($_GET['id']);\n            if (isset($_POST['id']))\n                $_POST['id'] = intval($_POST['id']);\n\n            $_REQUEST['id'] = intval($_REQUEST['id']);\n        }\n        // do the same for the other id's\n        foreach ($_REQUEST as $key=>$var) {\n            if (is_string($var) && strlen($key) >= 3 && strrpos($key,'_id',-3) !== false) {\n                if (isset($_GET[$key]))\n                    $_GET[$key] = intval($_GET[$key]);\n                if (isset($_POST[$key]))\n                    $_POST[$key] = intval($_POST[$key]);\n\n                $_REQUEST[$key] = intval($_REQUEST[$key]);\n            }\n        }\n        if (empty($user->id) || (!empty($user->id) && !$user->isAdmin())) {  //FIXME why would $user be empty here unless $db is down?\n//            $_REQUEST['route_sanitized'] = true;//FIXME debug test\n            expString::sanitize($_REQUEST);  // strip other exploits like sql injections\n        }\n\n        // start splitting the URL into it's different parts\n        $this->splitURL();\n        // edebug($this,1);\n\n        if ($this->url_style == 'sef') {\n            if ($this->url_type == 'page' || $this->url_type == 'base') {\n                $ret = $this->routePageRequest();               // if we hit this the formatting of the URL looks like the user is trying to go to a page.\n                if (!$ret) $this->url_type = 'malformed';\n            } elseif ($this->url_type == 'action') {\n                $this->isMappedURL();                       //check for a router map\n                $ret = $this->routeActionRequest();         // we didn't have a map for this URL.  Try to route it with this function.\n\n                // if this url wasn't a valid section, or action then kill it.  It might not actually be a \"bad\" url, \n                // but this is a precautionary measure against bad paths on images, css & js file, etc...with the new\n                // mod_rewrite rules these bad paths will not route thru here so we need to take them into account and\n                // deal with them accordingly.\n                if (!$ret) $this->url_type = 'malformed';  \n            } elseif ($this->url_type == 'post') {\n                // some forms aren't getting the controller field set right when the form is created\n                // we are putting this check here to safe guard against a controller being referred to as\n                // a module in the form.\n                if (!empty($_POST['controller']) || !empty($_POST['module'])) {\n                    $module = !empty($_POST['controller']) ? expString::sanitize($_POST['controller']) : expString::sanitize($_POST['module']);\n                    // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n                    if (expModules::controllerExists($module)) {\n                        $_POST['controller'] = $module;\n                        $_REQUEST['controller'] = $module;\n                    }\n                }\n            }\n        } elseif ($this->url_style == 'query' && SEF_URLS == 1 && !empty($_REQUEST['section']) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            // if we hit this it's an old school url coming in and we're trying to use SEF's. \n            // we will send a permanent redirect so the search engines don't freak out about 2 links pointing\n            // to the same page.\n            header(\"Location: \".$this->makeLink(array('section'=>intval($_REQUEST['section']))),TRUE,301);          \n        }\n\n        // if this is a valid URL then we build out the current_url var which is used by flow, and possibly other places too\n        if ($this->url_type != 'malformed') {               \n            $this->current_url = $this->buildCurrentUrl();\n        } else {\n            // check if the URL is looking for a non-existent page or controller (we will check for bad action in renderAction())\n            // if page or controller is not found we will route to the not found controller.            \n            $_REQUEST['controller'] = 'notfound';\n            $_REQUEST['action'] = 'handle';\n        }\n    }\n\n    //FIXME what are we doing with this history? saving each page load\n    public function updateHistory($section=null) {\n        global $db,$user;\n\n        // if its not already set\n        // configurable tracking length\n        setcookie('UserUID',expSession::getTicketString(),86400 * TRACKING_COOKIE_EXPIRES);\n        $cookieID = (empty($_COOKIE['UserUID'])) ? expSession::getTicketString() : $_COOKIE['UserUID'];\n        // Build out the object to insert into the db.\n        // Get our parameters.\n        $tmpParams = array();\n        foreach ($this->params as $key=>$value) {\n            if ($key != 'module' && $key != 'action' && $key != 'controller' && $key != 'section') {\n                $tmpParams[$key] = $value;\n            }\n        }\n        $trackingObject = new stdClass();\n        $trackingObject->params = serialize($tmpParams);\n        if ($this->url_type == 'page' || $this->url_type == 'base') {\n            $trackingObject->section = $section;\n        } else {\n            $trackingObject->module = ($_SERVER['REQUEST_METHOD'] == 'POST') ? (empty($_POST['controller']) ? expString::sanitize($_POST['module']) : expString::sanitize($_POST['controller'])) : $this->url_parts[0];\n            $trackingObject->action = ($_SERVER['REQUEST_METHOD'] == 'POST') ? $_POST['action'] : $this->url_parts[1];\n        }\n        $trackingObject->referer = empty($_SERVER['HTTP_REFERER']) ? null : $_SERVER['HTTP_REFERER'];\n        $trackingObject->cookieUID = $cookieID;\n        $trackingObject->user_id = $user->id;\n        $trackingObject->timestamp = time();\n        $trackingObject->user_address = $_SERVER['REMOTE_ADDR'];\n        $trackingObject->user_agent = $_SERVER['HTTP_USER_AGENT'];\n        $trackingObject->session_id = $_COOKIE['PHPSESSID'];\n        $db->insertObject($trackingObject,'tracking_rawdata');\n    }\n\n    public function splitURL() {\n        global $db;\n\n        $this->url_parts = array();\n        $this->buildSEFPath();\n\n        if (!empty($this->sefPath)) {\n            $this->url_style = 'sef';\n            $this->url_parts = explode('/', $this->sefPath);     \n\n            // remove empty first and last url_parts if they exist\n            //if (empty($this->url_parts[count($this->url_parts)-1])) array_pop($this->url_parts);\n            if ($this->url_parts[count($this->url_parts)-1] == '') array_pop($this->url_parts);\n            if (empty($this->url_parts[0])) array_shift($this->url_parts);\n            \n            if (count($this->url_parts) < 1 || (empty($this->url_parts[0]) && count($this->url_parts) == 1) ) {\n                $this->url_type = 'base';  // no params\n            } elseif (count($this->url_parts) == 1 || $db->selectObject('section', \"sef_name='\" . substr($this->sefPath,1) . \"'\") != null) {\n                $this->url_type = 'page';  // single param is page name\n            } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n                $this->url_type = 'post';  // params via form/post\n            } else {\n                // take a peek and see if a page exists with the same name as the first value...if so we probably have a page with\n                // extra perms...like printerfriendly=1 or ajax_action=1;\n                if (($db->selectObject('section', \"sef_name='\" . $this->url_parts[0] . \"'\") != null) && (in_array(array('printerfriendly','exportaspdf','ajax_action'), $this->url_parts))) {\n                    $this->url_type = 'page';\n                } else {\n                    $this->url_type = 'action';\n                }\n            }\n            $this->params = $this->convertPartsToParams();\n        } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            $this->url_style = 'sef';\n            $this->url_type = 'post';\n            $this->params = $this->convertPartsToParams();\n        } elseif (isset($_SERVER['REQUEST_URI'])) {\n            // if we hit here, we don't really need to do much.  All the pertinent info will come thru in the POST/GET vars\n            // so we don't really need to worry about what the URL looks like.\n            if ($_SERVER['REQUEST_URI'] == PATH_RELATIVE) {\n                $this->url_type = 'base';\n                $this->params = array();\n            } else {\n                $sefPath = explode('%22%3E',$_SERVER['REQUEST_URI']);  // remove any attempts to close the command\n                $_SERVER['REQUEST_URI'] = $sefPath[0];\n                $this->url_style = 'query';\n            }\n        } else {\n            $this->url_type = 'base';\n            $this->params = array();\n        }\n                              \n        // Check if this was a printer friendly link request\n        define('PRINTER_FRIENDLY', (isset($_REQUEST['printerfriendly']) || isset($this->params['printerfriendly'])) ? 1 : 0);         \n        define('EXPORT_AS_PDF', (isset($_REQUEST['exportaspdf']) || isset($this->params['exportaspdf'])) ? 1 : 0);\n        define('EXPORT_AS_PDF_LANDSCAPE', (isset($_REQUEST['landscapepdf']) || isset($this->params['landscapepdf'])) ? 1 : 0);\n    }\n\n    public function routePageRequest() {        \n//        global $db;\n\n        if ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            if (expTheme::inAction()) {\n                $_REQUEST['section'] = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            } else {\n                $_REQUEST['section'] = SITE_DEFAULT_SECTION;  \n            }\n        } else {\n            // Try to look up the page by sef_name first.  If that doesn't exist, strip out the dashes and\n            // check the regular page names.  If that still doesn't work then we'll redirect them to the \n            // search module using the page name as the search string.\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            ########################################################\n            #FJD TODO:  this needs further refinement\n            #currently this requires a matching routerMap as such to work properly:\n            /*\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showall',\n                    'url_parts'=>array(                \n                            'title'=>'(.*)'),\n            );\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showByTitle',\n                    'url_parts'=>array(                \n                            'title'=>'(.*)'),\n            );\n            */\n            //if section is empty, we'll look for the page overrides first and route to \n            //routeActionRequest with some hand wacked variables. If we can't find an override\n            //then we'll return false as usual\n            // since we only received a single param and it wasn't a page, try for store category, or a product\n            if (empty($section)) {\n                $sef_url = $this->url_parts[0];\n                //check for a category\n                $c = new storeCategory();                \n                $cat = $c->findBy('sef_url', $sef_url);\n                if (empty($cat)) {\n                    //check for a product\n                    $p = new product();\n                    $prod = $p->findBy('sef_url', $sef_url);\n                    if(!empty($prod)) {\n                        //fake parts and route to action  \n                        $this->url_type = 'action';                   \n                        $this->url_parts[0] = 'store'; //controller\n                        $this->url_parts[1] = 'show'; //controller\n                        $this->url_parts[2] = 'title'; //controller\n                        $this->url_parts[3] = $sef_url; //controller\n                        //eDebug($this->url_parts,true);\n                        $this->params = $this->convertPartsToParams();\n                        return $this->routeActionRequest();\n                    }\n                    //else fall through\n                } else {\n                    //fake parts and route to action \n                    $this->url_type = 'action';                                      \n                    $this->url_parts[0] = 'store'; //controller\n                    $this->url_parts[1] = 'showall'; //controller\n                    $this->url_parts[2] = 'title'; //controller                    \n                    $this->url_parts[3] = $sef_url; //controller\n                    //eDebug($this->url_parts,true);\n                    $this->params = $this->convertPartsToParams();\n                    return $this->routeActionRequest();\n                }\n                return false;\n            }\n            #########################################################\n            //if (empty($section)) return false;  //couldnt find the page..let the calling action deal with it.\n            $_REQUEST['section'] = $section->id;\n        }\n        \n        expHistory::set('viewable', array('section'=>intval($_REQUEST['section'])));\n        return true;\n    }\n\n    /**\n     * figure out if this action is mapped via the mapping file (router_maps.php)\n     */\n    public function isMappedURL() {\n        $part_count = count($this->url_parts);\n        foreach ($this->maps as $map) {\n            $matched = true;\n            $pairs = array();\n            $i = 0;\n            if ($part_count == count($map['url_parts'])) {               \n                foreach($map['url_parts'] as $key=>$map_part) {\n                    $res = preg_match(\"/^$map_part/\", $this->url_parts[$i]);\n                    if ($res != 1) {\n                        $matched = false;\n                        break;\n                    } \n                    $pairs[$key] = $this->url_parts[$i];\n                    $i++;\n                }\n            } else {\n                $matched = false;\n            }            \n              \n            if ($matched) {\n                // safeguard against false matches when a real action was what the user really wanted.\n                if (count($this->url_parts) >= 2 && method_exists(expModules::getController($this->url_parts[0]), $this->url_parts[1]))\n                    return false;\n\n                $this->url_parts = array();\n                $this->url_parts[0] = $map['controller'];\n                $this->url_parts[1] = $map['action'];\n        \n                if (isset($map['view'])) {\n                    $this->url_parts[2] = 'view';\n                    $this->url_parts[3] = $map['view'];\n                }\n\n                foreach($map as $key=>$value) {\n                    if ($key != 'controller' && $key != 'action' && $key != 'view' && $key != 'url_parts') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n\n                foreach($pairs as $key=>$value) {\n                    if ($key != 'controller') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n                \n                $this->params = $this->convertPartsToParams();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function routeActionRequest() {\n        $return_params = array('controller'=>'','action'=>'','url_parts'=>array());\n    \n        // If we have three url parts we assume they are controller->action->id, otherwise split them out into name<=>value pairs\n        $return_params['controller'] = $this->url_parts[0]; // set the controller/module\n        $return_params['action'] = $this->url_parts[1];     // set the action\n\n        // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n        if (expModules::controllerExists($return_params['controller'])) {\n            $requestType = 'controller';\n//        } elseif (is_dir(BASE.'framework/modules-1/'.$return_params['controller'])) {\n//            $requestType = 'module';\n        } else {\n            return false;  //this is an invalid url return an let the calling function deal with it.\n        }\n\n        // now figure out the name<=>value pairs\n        if (count($this->url_parts) == 3) {\n            if ( is_numeric($this->url_parts[2])) {\n                $return_params['url_parts']['id'] = $this->url_parts[2];\n            }\n        } else {\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $return_params['url_parts'][$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        }        \n\n        // Set the module or controller - this how the actual routing happens\n        $_REQUEST[$requestType] = $return_params['controller']; //url_parts[0];\n        $_GET[$requestType] = $return_params['controller'];\n        $_POST[$requestType] = $return_params['controller'];\n    \n        // Set the action for this module or controller\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            // most of the time we can just grab the action outta the POST array since this is passed as a hidden field, \n            // but sometimes it is actually set as the action on the form itself...then we get it from the params array instead.\n            $action = !empty($_POST['action']) ? $_POST['action'] : $this->params['action'];\n        } else {\n            $action = $return_params['action'];\n        }\n    \n        $_REQUEST['action'] = $action;\n        $_GET['action'] = $action;\n        $_POST['action'] = $action;\n\n        // pass off the name<=>value pairs\n        foreach($return_params['url_parts'] as $key=>$value) {\n            $save_value = expString::sanitize($value);\n            $_REQUEST[$key] = $save_value;\n            $_GET[$key] = $save_value;\n        }\n\n        return true;\n    }\n\n    public function buildCurrentUrl() {\n        $url =  URL_BASE;\n        if ($this->url_style == 'sef') {\n            $url .= substr(PATH_RELATIVE,0,-1).$this->sefPath;\n        } else {\n            $url .= urldecode((empty($_SERVER['REQUEST_URI'])) ? $_ENV['REQUEST_URI'] : $_SERVER['REQUEST_URI']);\n        }\n        return expString::escape(expString::sanitize($url));\n    }\n\n    public static function encode($url) {\n        $url = str_replace('&', 'and', $url);\n        return preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $url))));\n    }\n    \n    public static function decode($url) {\n        $url = str_replace('-', ' ', $url);\n        return str_replace('+', '-', $url);\n    }\n\n    public function getSefUrlByPageId($id=null) {  //FIXME this method is never called and doesn't do anything as written\n        if (!empty($id)) {\n            global $db;\n\n            $section = $db->selectObject('section', 'id='.intval($id));\n            $url = URL_FULL;\n            $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n        }\n    }\n\n    public function buildUrlByPageId($id=null) {\n        global $db;\n\n        //$url = URL_FULL;\n        $url = '';\n        if (!empty($id)) {\n            if (SEF_URLS == 1) {\n                $section = $db->selectObject('section', 'id='.intval($id));\n                if ($section->id != SITE_DEFAULT_SECTION) {\n                    $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n                }\n            } else {\n                $url .= 'index.php?section='.$id;\n            }\n        }\n        return $url;\n    }\n\n    public function printerFriendlyLink($link_text=\"Printer Friendly\", $class=null, $width=800, $height=600, $view='', $title_text = \"Printer Friendly\") {\n        $url = '';\n        if (PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            $class = !empty($class) ? $class : 'printer-friendly-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            $url .= '&printerfriendly=1\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n        \n        return $url; \n    }\n\n    public function exportAsPDFLink($link_text=\"Export as PDF\", $class=null, $width=800, $height=600, $view='', $orientation=false, $limit='', $title_text=\"Export as PDF\") {\n        $url = '';\n        if (EXPORT_AS_PDF != 1 && PRINTER_FRIENDLY != 1) {\n            $class = !empty($class) ? $class : 'export-pdf-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            if (!empty($orientation)) {\n                $orientation = '&landscapepdf='.$orientation;\n            }\n            if (!empty($limit)) {\n                $limit = '&limit='.$limit;\n            }\n            $url .= '&exportaspdf=1'.$orientation.$limit.'&\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n\n        return $url;\n    }\n\n    public function convertToOldSchoolUrl() {\n        $params = $this->convertPartsToParams();\n        return $this->makeLink($params, true);\n    }\n\n    public function convertPartsToParams() {\n        $params = array();\n        if ($this->url_type == 'base') {\n            $params['section'] = SITE_DEFAULT_SECTION;\n        } elseif ($this->url_type == 'page') {\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            $params['section'] = empty($section->id) ? null : $section->id;\n        } elseif ($this->url_type == 'action') {\n            $params['controller'] = $this->url_parts[0];\n            $params['action'] = !empty($this->url_parts[1]) ? $this->url_parts[1] : null;\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $params[$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        } elseif ($this->url_type == 'post') {\n            if (isset($_REQUEST['PHPSESSID'])) unset($_REQUEST['PHPSESSID']);\n//            foreach($_REQUEST as $name=>$val) {\n////                if (get_magic_quotes_gpc()) $val = stripslashes($val);  // magic quotes fix??\n////                $params[$name] = $val;\n//                $params[$name] = expString::sanitize($val);  //FIXME need array sanitizer\n//            }\n//            if (empty($_REQUEST['route_sanitized']))\n                $params = expString::sanitize($_REQUEST);\n//            if (empty($data['route_sanitized'])) $_REQUEST['pre_sanitized'] = true;//FIXME debug test\n        }\n        //TODO: fully sanitize all params values here for ---We already do this!\n//        if (isset($params['src'])) $params['src'] = expString::sanitize(htmlspecialchars($params['src']));\n        return $params;\n    }\n\n    public function getPageByName($url_name) {\n        global $db;\n        \n        $section = null;\n        if (is_numeric($url_name)) {\n            $section = $db->selectObject('section', 'id=' . $url_name);\n            if ($section == null) $section = $db->selectObject('section', \"sef_name='\" . $url_name . \"'\");\n        } elseif ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            $section = $db->selectObject('section', 'id='.SITE_DEFAULT_SECTION);\n        } else {\n            $section = $db->selectObject('section', \"sef_name='\".$url_name.\"'\");\n        }\n        // if section is still empty then we should route the user to the search (cool new feature :-) )\n        // at some point we need to write a special action/view for the search module that lets the user\n        // know they were redirected to search since the page they tried to go to directly didn't exist.\n#       if (empty($section)) {\n#           header(\"Refresh: 0; url=\".$this->makeLink(array('module'=>'search', 'action'=>'search', 'search_string'=>$this->url_parts[0])), false, 404);\n#           exit();\n#       } else {\n#           return $section;\n#       }\n        return $section;\n    }\n    \n    private function buildSEFPath () {\n        // Apache\n        if (strpos($_SERVER['SERVER_SOFTWARE'],'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'],'WebServerX') !== false) {\n            switch(php_sapi_name()) {\n                case \"cgi\":\n                    $this->sefPath = !empty($_SERVER['REQUEST_URI']) ? urldecode($_SERVER['REQUEST_URI']): null;\n                    break;\n                case \"cgi-fcgi\":\n                    if (isset($_SERVER['REDIRECT_URL']) && $_SERVER['REDIRECT_URL'] != PATH_RELATIVE.'index.php') {\n                        $this->sefPath = urldecode($_SERVER['REDIRECT_URL']);\n                    } elseif (!empty($_ENV['REQUEST_URI'])) {\n                        $this->sefPath = urldecode($_ENV['REQUEST_URI']);\n                    } else {\n                        $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n                    }\n                    break;\n                default:\n                    $this->sefPath = !empty($_SERVER['REDIRECT_URL']) ? urldecode($_SERVER['REDIRECT_URL']) : null;\n                    break;\n            }\n        // Lighty ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'lighttpd') !== false) {\n            //FIXME, we still need a good lighttpd.conf rewrite config for sef_urls to work\n            if (isset($_SERVER['ORIG_PATH_INFO'])) {\n                $this->sefPath = urldecode($_SERVER['ORIG_PATH_INFO']);\n            } elseif (isset($_SERVER['REDIRECT_URI'])){\n                $this->sefPath = urldecode(substr($_SERVER['REDIRECT_URI'],9));\n            } elseif (isset($_SERVER['REQUEST_URI'])){\n                $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n            }\n        // Nginx ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'nginx') !== false) {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        } else {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        }\n        \n        $this->sefPath = substr($this->sefPath,strlen(substr(PATH_RELATIVE,0,-1))); \n        if (strpos($this->sefPath,'/index.php') === 0) {\n            $this->sefPath = null;\n        }\n        \n\t\t//parse the ecommerce tracking code if present and include in the object\n        if(isset($_SERVER['argv']) && is_array($_SERVER['argv']))\n        {\n            foreach($_SERVER['argv'] as $set)\n            {\n                $s = explode(\"=\",$set);\n                if($s[0] == \"ectid\")\n                {\n                    $this->ectid = $s[1];    \n                }   \n            }            \n        }\n        if (substr($this->sefPath,-1) == \"/\") $this->sefPath = substr($this->sefPath,0,-1);\n        // sanitize it\n        $sefPath = explode('\">',$this->sefPath);  // remove any attempts to close the command\n        $this->sefPath = expString::escape(expString::sanitize($sefPath[0]));\n    }\n\n    public function getSection() {\n        global $db;\n\n        if (expTheme::inAction()) {\n            if (isset($_REQUEST['section'])) {\n                $section = $this->url_style==\"sef\" ? $this->getPageByName($_REQUEST['section'])->id : intval($_REQUEST['section']) ;\n            } else {\n                $section = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            }\n        } else {\n            $section = (isset($_REQUEST['section']) ? intval($_REQUEST['section']) : SITE_DEFAULT_SECTION);\n        }\n        $testsection = $db->selectObject('section','id='.$section);\n        if (empty($testsection)) {\n            $section = SITE_DEFAULT_SECTION;\n        }\n        return $section;\n    }\n\n    public function getSectionObj($section) {\n        global $db;\n\n        if ($section == \"*\") {\n            $sectionObj = call_user_func(expModules::getModuleClassName($this->params['controller']) . \"::getSection\", $this->params);\n        } else {\n//            $sectionObj = $db->selectObject('section','id='. intval($section));\n            $sectionObj = new section(intval($section));\n        }\n//        $sectionObj = $db->selectObject('section','id='. intval($section));\n        if (!$sectionObj->canView()) {\n            define('AUTHORIZED_SECTION',0);\n        } else {\n            define('AUTHORIZED_SECTION',1);\n        }\n        if (!$sectionObj->isPublic()) {\n            define('PUBLIC_SECTION',0);\n        } else {\n            define('PUBLIC_SECTION',1);\n        }\n    \n        if (isset($_REQUEST['section'])) {\n            expSession::set('last_section', intval($_REQUEST['section']));\n        } elseif ($section == SITE_DEFAULT_SECTION) {\n            expSession::set('last_section', intval(SITE_DEFAULT_SECTION));\n        } else {\n            //expSession::unset('last_section');\n        }\n        return $sectionObj;\n    }\n    \n    public function getRouterMaps() {\n        $mapfile = BASE.'framework/core/router_maps.php';\n\t\tif (file_exists(BASE.'themes/'.DISPLAY_THEME.'/router_maps.php')) {\n\t\t\t$mapfile = BASE.'themes/'.DISPLAY_THEME.'/router_maps.php';\n        }\n\n        include_once($mapfile);\n        $this->maps = $maps;  // $maps is set by included $mapfile\n    }\n    \n    public function getTrackingId()\n    {        \n        if(isset($this->ectid)) return $this->ectid;\n        else return '';\n    }\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass blogController extends expController {\n    public $useractions = array(\n        'showall'=>'Show All Posts',\n        'tags'=>\"Show Post Tags\",\n        'authors'=>\"Show Post Authors\",\n        'categories'=>\"Show Post Categories\",\n        'dates'=>\"Show Post Dates\",\n        'comments'=>\"Show Recent Post Comments\",\n    );\n    protected $manage_permissions = array(\n//        'approve'=>\"Approve Comments\",\n    );\n    public $remove_configs = array(\n//        'categories',\n//        'ealerts'\n    ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Blog\"); }\n    static function description() { return gt(\"Run a blog on your site.\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n    static function hasSources() { return false; }  // must be explicitly added by config['add_source'] or config['aggregate']\n    static function isSearchable() { return true; }\n\n    static function canImportData() {\n        return true;\n    }\n\n    static function canExportData() {\n        return true;\n    }\n\n    public function showall() {\n\t    expHistory::set('viewable', $this->params);\n\t\t$page = new expPaginator(array(\n            'model'=>$this->basemodel_name,\n            'where'=>$this->aggregateWhereClause(),\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] :10,\n            'order'=>'publish',\n            'dir'=>empty($this->config['sort_dir']) ? 'DESC' : $this->config['sort_dir'],\n            'categorize'=> empty($this->config['usecategories']) ? false : $this->config['usecategories'],\n            'groups'=>!isset($this->params['cat']) ? array() : array($this->params['cat']),\n            'uncat'=>!empty($this->config['uncat']) ? $this->config['uncat'] : gt('Not Categorized'),\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'=>array(\n                gt('Title')=>'title'\n            ),\n        ));\n\n\t\tassign_to_template(array(\n            'page'=>$page,\n            'params'=>$this->params,\n        ));\n        if (isset($this->params['cat'])) assign_to_template(array(\n            'moduletitle' => gt('Posts filed under') . ' ' . (empty($page->records[0]->expCat[0]->title) ? $this->config['uncat'] : $page->records[0]->expCat[0]->title),\n        ));\n\n\t}\n\n\tpublic function authors() {\n        expHistory::set('viewable', $this->params);\n        $blogs = $this->blog->find('all');\n        $users = array();\n        foreach ($blogs as $blog) {\n            if (isset($users[$blog->poster])) {\n                $users[$blog->poster]->count++;\n            } else {\n                $users[$blog->poster] = new user($blog->poster);\n                $users[$blog->poster]->count = 1;\n            }\n        }\n\n\t    assign_to_template(array(\n            'authors'=>$users\n        ));\n\t}\n\n\tpublic function dates() {\n\t    global $db;\n\n        expHistory::set('viewable', $this->params);\n        $where = $this->aggregateWhereClause();\n\t    $dates = $db->selectColumn('blog', 'publish', $where, 'publish DESC');\n\t    $blog_date = array();\n        $count = 0;\n        $limit = empty($this->config['limit']) ? count($dates) : $this->config['limit'];\n\t    foreach ($dates as $date) {\n\t        $year = date('Y',$date);\n\t        $month = date('n',$date);\n\t        if (isset($blog_date[$year][$month])) {\n\t            $blog_date[$year][$month]->count++;\n\t        } else {\n                $count++;\n                if ($count > $limit) break;\n                $blog_date[$year][$month] = new stdClass();\n\t            $blog_date[$year][$month]->name = date('F',$date);\n\t            $blog_date[$year][$month]->count = 1;\n\t        }\n\t    }\n        if (!empty($blog_date)) {\n            ksort($blog_date);\n            $blog_date = array_reverse($blog_date,1);\n            foreach ($blog_date as $key=>$val) {\n                ksort($blog_date[$key]);\n                $blog_date[$key] = array_reverse($blog_date[$key],1);\n            }\n        } else {\n            $blog_date = array();\n        }\n\t    //eDebug($blog_date);\n\t    assign_to_template(array(\n            'dates'=>$blog_date\n        ));\n\t}\n\n    public function showall_by_date() {\n\t    expHistory::set('viewable', $this->params);\n\t    $start_date = expDateTime::startOfMonthTimestamp(mktime(0, 0, 0, $this->params['month'], 1, $this->params['year']));\n\t    $end_date = expDateTime::endOfMonthTimestamp(mktime(0, 0, 0, $this->params['month'], 1, $this->params['year']));\n\n\t\t$page = new expPaginator(array(\n            'model'=>$this->basemodel_name,\n            'where'=>($this->aggregateWhereClause()?$this->aggregateWhereClause().\" AND \":\"\").\"publish >= '\".$start_date.\"' AND publish <= '\".$end_date.\"'\",\n            'limit'=>isset($this->config['limit']) ? $this->config['limit'] : 10,\n            'order'=>'publish',\n            'dir'=>'desc',\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'=>array(\n                gt('Title')=>'title'\n            ),\n        ));\n\n\t\tassign_to_template(array(\n            'page'=>$page,\n            'moduletitle'=>gt('Blogs by date').' \"'.expDateTime::format_date($start_date,\"%B %Y\").'\"')\n        );\n\t}\n\n\tpublic function showall_by_author() {\n\t    expHistory::set('viewable', $this->params);\n\n        $this->params['author'] = expString::escape($this->params['author']);\n        $user = user::getUserByName($this->params['author']);\n\t\t$page = new expPaginator(array(\n            'model'=>$this->basemodel_name,\n            'where'=>($this->aggregateWhereClause()?$this->aggregateWhereClause().\" AND \":\"\").\"poster=\".$user->id,\n            'limit'=>isset($this->config['limit']) ? $this->config['limit'] : 10,\n            'order'=>'publish',\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'=>array(\n                gt('Title')=>'title'\n            ),\n        ));\n\n\t\tassign_to_template(array(\n            'page'=>$page,\n            'moduletitle'=>gt('Blogs by author').' \"'.$this->params['author'].'\"'\n        ));\n\t}\n\n\tpublic function show() {\n        expHistory::set('viewable', $this->params);\n\t    $id = isset($this->params['title']) ? $this->params['title'] : $this->params['id'];\n        $record = new blog($id);\n        if (empty($record->id))\n            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>expString::escape($this->params['title'])));\n\n\t    // since we are probably getting here via a router mapped url\n\t    // some of the links (tags in particular) require a source, we will\n\t    // populate the location data in the template now.\n        $config = expConfig::getConfig($record->location_data);\n        if (empty($this->config))\n            $this->config = $config;\n        if (empty($this->loc->src)) {\n            $r_loc = expUnserialize($record->location_data);\n            $this->loc->src = $r_loc->src;\n        }\n\n        $nextwhere = $this->aggregateWhereClause().' AND publish > '.$record->publish.' ORDER BY publish';\n        $record->next = $record->find('first',$nextwhere);\n        $prevwhere = $this->aggregateWhereClause().' AND publish < '.$record->publish.' ORDER BY publish DESC';\n        $record->prev = $record->find('first',$prevwhere);\n\n\t    assign_to_template(array(\n            'record'=>$record,\n            'config'=>$config,\n            'params'=>$this->params\n        ));\n\t}\n\n    /**\n     * view items referenced by tags\n     * @deprecated 2.0.0\n     */\n    function showByTags() {\n        global $db;\n\n        // set the history point for this action\n        expHistory::set('viewable', $this->params);\n\n        // setup some objects\n        $tagobj = new expTag();\n        $modelname = empty($this->params['model']) ? $this->basemodel_name : expString::escape($this->params['model']);\n        $model = new $modelname();\n\n        // start building the sql query\n        $sql  = 'SELECT DISTINCT m.id FROM '.$db->prefix.$model->tablename.' m ';\n        $sql .= 'JOIN '.$db->prefix.$tagobj->attachable_table.' ct ';\n        $sql .= 'ON m.id = ct.content_id WHERE (';\n        $first = true;\n\n        if (isset($this->params['tags'])) {\n            $tags = is_array($this->params['tags']) ? $this->params['tags'] : array($this->params['tags']);\n        } elseif (isset($this->config['expTags'])) {\n            $tags = $this->config['expTags'];\n        } else {\n            $tags = array();\n        }\n\n        foreach ($tags as $tagid) {\n            $sql .= ($first) ? 'exptags_id='.intval($tagid) : ' OR exptags_id='.intval($tagid);\n            $first = false;\n        }\n        $sql .= \") AND content_type='\".$model->classname.\"'\";\n        if (!expPermissions::check('edit',$this->loc)) {\n            $sql = \"(publish =0 or publish <= \" . time() . \")) AND \". $sql . ' AND private=0';\n        }\n\n        // get the objects and render the template\n        $tag_assocs = $db->selectObjectsBySql($sql);\n        $records = array();\n        foreach ($tag_assocs as $assoc) {\n            $records[] = new $modelname($assoc->id);\n        }\n\n        assign_to_template(array(\n            'items'=>$records\n        ));\n    }\n\n    /**\n     * get the blog items in an rss feed format\n     *\n     * @return array\n     */\n//    function getRSSContent() {\n//        $class = new blog();\n//        $items = $class->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'publish DESC');\n//\n//        //Convert the items to rss items\n//        $rssitems = array();\n//        foreach ($items as $key => $item) {\n//            $rss_item = new FeedItem();\n//            $rss_item->title = expString::convertSmartQuotes($item->title);\n//            $rss_item->link = $rss_item->guid = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url));\n//            $rss_item->description = expString::convertSmartQuotes($item->body);\n//            $rss_item->author = user::getUserById($item->poster)->firstname.' '.user::getUserById($item->poster)->lastname;\n//            $rss_item->authorEmail = user::getEmailById($item->poster);\n////            $rss_item->date = isset($item->publish_date) ? date(DATE_RSS,$item->publish_date) : date(DATE_RSS, $item->created_at);\n//            $rss_item->date = isset($item->publish_date) ? $item->publish_date : $item->created_at;\n////            $rss_item->guid = expUnserialize($item->location_data)->src.'-id#'.$item->id;\n//            if (!empty($item->expCat[0]->title)) $rss_item->category = array($item->expCat[0]->title);\n//            $comment_count = expCommentController::countComments(array('content_id'=>$item->id,'content_type'=>$this->basemodel_name));\n//            if ($comment_count) {\n//                $rss_item->comments = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n////                $rss_item->commentsRSS = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n//                $rss_item->commentsCount = $comment_count;\n//            }\n//            $rssitems[$key] = $rss_item;\n//        }\n//        return $rssitems;\n//    }\n\n    /**\n     * additional check for display of search hit, only display non-draft\n     *\n     * @param $record\n     *\n     * @return bool\n     */\n    public static function searchHit($record) {\n        $blog = new blog($record->original_id);\n        if (expPermissions::check('edit', expUnserialize($record->location_data)) || $blog->private == 0 && ($blog->publish === 0 || $blog->publish <= time())) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * The aggregateWhereClause function creates a sql where clause which also includes aggregated module content\n     *\n     * @param string $type\n     *\n     * @return string\n     */\n   \tfunction aggregateWhereClause($type='') {\n        $sql = parent::aggregateWhereClause();\n        if (!expPermissions::check('edit',$this->loc)) {\n            if (!empty($sql)) {\n                $sql .= \" AND \";\n            }\n            $sql .= \"private = 0 AND (publish = 0 OR publish <= \" . time() . \")\";\n        }\n\n        return $sql;\n    }\n\n    /**\n     * delete module's items (all) by instance\n     */\n    function delete_instance($loc = false) {\n        parent::delete_instance(true);\n    }\n\n    /**\n     * Returns Facebook og: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_fb($request, $object, $canonical) {\n        $metainfo = array();\n        $metainfo['type'] = 'article';\n        if (!empty($object->body)) {\n            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n        } else {\n            $desc = SITE_DESCRIPTION;\n        }\n        $metainfo['title'] = substr(empty($object->meta_fb['title']) ? $object->title : $object->meta_fb['title'], 0, 87);\n        $metainfo['description'] = substr(empty($object->meta_fb['description']) ? $desc : $object->meta_fb['description'], 0, 199);\n        $metainfo['url'] = empty($object->meta_fb['url']) ? $canonical : $object->meta_fb['url'];\n        $metainfo['image'] = empty($object->meta_fb['fbimage'][0]) ? '' : $object->meta_fb['fbimage'][0]->url;\n        if (empty($metainfo['image'])) {\n            if (!empty($object->expFile['files'][0]->is_image)) {\n                $metainfo['image'] = $object->expFile['files'][0]->url;\n            } else {\n                $config = expConfig::getConfig($object->location_data);\n                if (!empty($config['expFile']['fbimage'][0]))\n                    $file = new expFile($config['expFile']['fbimage'][0]);\n                if (!empty($file->id))\n                    $metainfo['image'] = $file->url;\n                if (empty($metainfo['image']))\n                    $metainfo['image'] = URL_BASE . MIMEICON_RELATIVE . 'generic_22x22.png';\n            }\n        }\n        return $metainfo;\n    }\n\n    /**\n     * Returns Twitter twitter: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_tw($request, $object, $canonical) {\n        $metainfo = array();\n        $metainfo['card'] = 'summary';\n        if (!empty($object->body)) {\n            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n        } else {\n            $desc = SITE_DESCRIPTION;\n        }\n        $config = expConfig::getConfig($object->location_data);\n        if (!empty($object->meta_tw['twsite'])) {\n            $metainfo['site'] = $object->meta_tw['twsite'];\n        } elseif (!empty($config['twsite'])) {\n            $metainfo['site'] = $config['twsite'];\n        }\n        $metainfo['title'] = substr(empty($object->meta_tw['title']) ? $object->title : $object->meta_tw['title'], 0, 87);\n        $metainfo['description'] = substr(empty($object->meta_tw['description']) ? $desc : $object->meta_tw['description'], 0, 199);\n        $metainfo['image'] = empty($object->meta_tw['twimage'][0]) ? '' : $object->meta_tw['twimage'][0]->url;\n        if (empty($metainfo['image'])) {\n            if (!empty($object->expFile['images'][0]->is_image)) {\n                $metainfo['image'] = $object->expFile['images'][0]->url;\n            } else {\n                if (!empty($config['expFile']['twimage'][0]))\n                    $file = new expFile($config['expFile']['twimage'][0]);\n                if (!empty($file->id))\n                    $metainfo['image'] = $file->url;\n                if (empty($metainfo['image']))\n                    $metainfo['image'] = URL_BASE . MIMEICON_RELATIVE . 'generic_22x22.png';\n            }\n        }\n        return $metainfo;\n    }\n\n    function showall_by_author_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['author'])) {\n            // set the meta info\n            $u = user::getUserByName(expString::sanitize($request['author']));\n            $str = user::getUserAttribution($u->id);\n//            switch (DISPLAY_ATTRIBUTION) {\n//                case \"firstlast\":\n//                    $str = $u->firstname . \" \" . $u->lastname;\n//                    break;\n//                case \"lastfirst\":\n//                    $str = $u->lastname . \", \" . $u->firstname;\n//                    break;\n//                case \"first\":\n//                    $str = $u->firstname;\n//                    break;\n//                case \"username\":\n//                default:\n//                    $str = $u->username;\n//                    break;\n//            }\n\n            if (!empty($str)) {\n                $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n                $metainfo['title'] = gt('Showing all Blog Posts written by') .\" \\\"\" . $str . \"\\\"\";\n//                $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords;  //FIXME $object not set\n                $metainfo['keywords'] = $str;\n//                $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description;  //FIXME $object not set\n                $metainfo['description'] = SITE_DESCRIPTION;\n//                $metainfo['canonical'] = empty($object->canonical) ? URL_FULL.substr($router->sefPath, 1) : $object->canonical;  //FIXME $object not set\n//                $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n                $metainfo['canonical'] = $router->plainPath();\n\n                return $metainfo;\n            }\n        }\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass searchController extends expController {\n    public $useractions = array(\n        'show'=>'Show Search Form',\n        'cloud'=>'Show Tag Cloud'\n    );\n    protected $manage_permissions = array(\n        'spider'=>'Spider Site',\n        'searchQueryReport'=>'Search Query Report',\n        'topSearchReport'=>'Top Search Report',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Search Form\"); }\n    static function description() { return gt(\"Add a form to allow users to search for content on your website.\"); }\n    static function hasSources() { return false; }\n    static function hasContent() { return false; }\n\n    public function search()\n    {\n        global $router;\n\n        $terms = $this->params['search_string'];\n\n        // If magic quotes is on and the user uses modifiers like \" (quotes) they get escaped. We don't want that in this case.\n        if (get_magic_quotes_gpc()) {\n            $terms = stripslashes($terms);\n        }\n        $terms = htmlspecialchars($terms);\n\n        if ($router->current_url == substr(URL_FULL, 0, -1)) {  // give us a user friendly url\n            unset($router->params['int']);\n//            unset($router->params['src']);\n//            $router->params['src'] = '1';\n            redirect_to($router->params);\n        }\n\n        $search = new search();\n\n        $page = new expPaginator(array(\n//            'model'=>'search',\n            'records'=>$search->getSearchResults($terms, !empty($this->config['only_best']), 0, !empty($this->config['eventlimit']) ? $this->config['eventlimit'] : null),\n            //'sql'=>$sql,\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'=>'score',\n            'dir'=>'DESC',\n            'page' => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'dontsortwithincat'=>true,\n            'controller' => $this->params['controller'],\n            'action' => $this->params['action'],\n            'src' => $this->loc->src,\n        ));\n\n        if (!empty($this->config['is_categorized'])) {\n            $results = array();\n            foreach ($page->records as $hit) {\n                if (!isset($results[$hit->category])) {\n                    $results[$hit->category] = array();\n                }\n                $results[$hit->category][] = $hit;\n            }\n            assign_to_template(array(\n                'results'=>$results,\n            ));\n        }\n\n        // include CSS for results\n        // auto-include the CSS for pagination links\n\t    expCSS::pushToHead(array(\n//\t\t    \"unique\"=>\"search-results\",\n\t\t    \"link\"=>$this->asset_path.\"css/results.css\",\n\t\t    )\n\t\t);\n\n        assign_to_template(array(\n            'page'=>$page,\n            'terms'=>$terms,\n            'params'=>$this->params,\n        ));\n    }\n\n    public static function spider() {\n        global $db;\n\n        // reinitialize search index\n\t    $db->delete('search');\n\n        $mods = array();\n        // old school modules\n//\t    foreach (expModules::modules_list() as $mod) {\n////\t\t    $name = @call_user_func(array($mod,'name'));\n//            $name = @call_user_func(array($mod,'searchName'));\n//\t\t    if (class_exists($mod) && is_callable(array($mod,'spiderContent'))) {\n//                $mods[$name] = call_user_func(array($mod,'spiderContent'));\n//\t\t    }\n//\t    }\n\n        // 2.0 modules\n//\t    foreach (expModules::listControllers() as $ctlname=>$ctl) {\n        foreach (expModules::getActiveControllersList() as $ctl) {\n            $ctlname = expModules::getModuleClassName($ctl);\n\t\t    $controller = new $ctlname();\n\t\t    if (method_exists($controller,'isSearchable') && $controller->isSearchable()) {\n//\t\t\t    $mods[$controller->name()] = $controller->addContentToSearch();\n                $mods[$controller->searchName()] = $controller->addContentToSearch();\n\t\t    }\n\t    }\n\n\t    uksort($mods,'strnatcasecmp');\n\t    assign_to_template(array(\n            'mods'=>$mods\n        ));\n    }\n\n    public function show() {\n        //no need to do anything..we're just showing the form... so far! MUAHAHAHAHAHAAA!   what?\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'showall'));\n    }\n\n    public function showall() {\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'show'));\n//        $this->show();\n    }\n\n    /**\n     * tag cloud\n     */\n    function cloud() {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'=>'expTag',\n            'where'=>null,\n//          'limit'=>999,\n            'order'=>\"title\",\n            'dontsortwithincat'=>true,\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>static::hasSources() == true ? $this->loc->src : null,\n            'columns'=>array(gt('ID#')=>'id',gt('Title')=>'title',gt('Body')=>'body'),\n        ));\n\n//        foreach ($db->selectColumn('content_expTags','content_type',null,null,true) as $contenttype) {\n//            foreach ($page->records as $key => $value) {\n//                $attatchedat = $page->records[$key]->findWhereAttachedTo($contenttype);\n//                if (!empty($attatchedat)) {\n//                    $page->records[$key]->attachedcount = @$page->records[$key]->attachedcount + count($attatchedat);\n//                    $page->records[$key]->attached[$contenttype] = $attatchedat;\n//                }\n//            }\n//        }\n        $tags_list = array();\n        foreach ($page->records as $key=>$record) {\n            $count = $db->countObjects('content_expTags','exptags_id=' . $record->id);\n            if ($count) {\n                $page->records[$key]->attachedcount = $count;\n                $tags_list[$record->title] = new stdClass();\n                $tags_list[$record->title]->count = $count;\n                $tags_list[$record->title]->sef_url = $record->sef_url;\n                $tags_list[$record->title]->title = $record->title;\n            } else {\n                unset($page->records[$key]);\n            }\n        }\n        // trim the tag cloud to our limit.\n        $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'attachedcount DESC', 'type'=>'a'));\n        if (!empty($this->config['limit'])) $page->records = array_slice($page->records,0,$this->config['limit']);\n        if (!empty($this->config['order']) && $this->config['order'] != 'hits') {\n            $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'title ASC', 'ignore_case'=>true, 'sort_type'=>'a'));\n        }\n        assign_to_template(array(\n            'page'=>$page,\n            'tags_list'=>$tags_list\n        ));\n    }\n\n    // some general search stuff\n    public function autocomplete() {\n        return;\n        global $db;\n\n        $model = $this->params['model'];\n        $mod = new $model();\n        $srchcol = explode(\",\",$this->params['searchoncol']);\n        /*for ($i=0; $i<count($srchcol); $i++) {\n            if ($i>=1) $sql .= \" OR \";\n            $sql .= $srchcol[$i].' LIKE \\'%'.$this->params['query'].'%\\'';\n        }*/\n        //    $sql .= ' AND parent_id=0';\n        //eDebug($sql);\n\n        //$res = $mod->find('all',$sql,'id',25);\n        $sql = \"select DISTINCT(p.id), p.title, model, sef_url, f.id as fileid from \".$db->prefix.\"product as p INNER JOIN \".$db->prefix.\"content_expfiles as cef ON p.id=cef.content_id INNER JOIN \".$db->prefix.\"expfiles as f ON cef.expfiles_id = f.id where match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') AND p.parent_id=0 order by match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') desc LIMIT 25\";\n        //$res = $db->selectObjectsBySql($sql);\n        //$res = $db->selectObjectBySql('SELECT * FROM `exponent_product`');\n\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n\tpublic function searchQueryReport() {\n\t\tglobal $db;\n\n\t\t//Instantiate the search model\n\t\t$search = new search();\n\n\t\t//Store the keywords that returns nothing\n        $badSearch = array();\n\t\t$badSearchArr =  array();\n\n\t\t//User Records Initialization\n\t\t$all_user  = -1;\n\t\t$anonymous = -2;\n\t\t$uname = array('id'=>array($all_user, $anonymous), 'name'=>array('All Users', 'Anonymous'));\n\n\t\t$user_default = '';\n\t\t$where = '';\n\n\t\tif(isset($this->params['user_id']) && $this->params['user_id'] != -1) {\n\t\t\t$user_default = $this->params['user_id'];\n\t\t}\n\n\t\texpHistory::set('manageable', $this->params);\n\n\t\t$ctr  = 2;\n\t\t$ctr2 = 0;\n\n\t\t//Getting the search users\n\t\t$records = $db->selectObjects('search_queries');\n\n\n\t\tforeach($records as $item) {\n\t\t\t$u = user::getUserById($item->user_id);\n\n\t\t\tif($item->user_id == 0) {\n\t\t\t\t$item->user_id = $anonymous;\n\t\t\t}\n\n\t\t\tif(!in_array($item->user_id, $uname['id'])) {\n\t\t\t\t$uname['name'][$ctr] = $u->firstname . ' ' . $u->lastname;\n\t\t\t\t$uname['id'][$ctr] = $item->user_id;\n\t\t\t\t$ctr++;\n\t\t\t}\n\n\t\t\t$result  = $search->getSearchResults($item->query, false, true);\n\t\t\tif(empty($result) && !in_array($item->query, $badSearchArr)) {\n\t\t\t\t$badSearchArr[] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['query'] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['count'] = $db->countObjects(\"search_queries\", \"query='{$item->query}'\");\n\t\t\t\t$ctr2++;\n\t\t\t}\n\n\t\t}\n\n\t\t//Check if the user choose from the dropdown\n\t\tif(!empty($user_default)) {\n\t\t\tif($user_default == $anonymous) {\n\t\t\t\t$u_id = 0;\n\t\t\t} else {\n\t\t\t\t$u_id = $user_default;\n\t\t\t}\n\t\t\t$where .= \"user_id = {$u_id}\";\n\t\t}\n\n\t\t//Get all the search query records\n\t\t$records = $db->selectObjects('search_queries', $where);\n        for ($i = 0, $iMax = count($records); $i < $iMax; $i++) {\n\t\t\tif(!empty($records[$i]->user_id)) {\n\t\t\t\t$u = user::getUserById($records[$i]->user_id);\n\t\t\t\t$records[$i]->user = $u->firstname . ' ' . $u->lastname;\n\t\t\t}\n\t\t}\n\n        $page = new expPaginator(array(\n            'records' => $records,\n            'where'=>1,\n            'model'=>'search_queries',\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? 10 : $this->config['limit'],\n            'order'=>empty($this->config['order']) ? 'timestamp' : $this->config['order'],\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'columns'=>array(\n                'ID'=>'id',\n                gt('Query')=>'query',\n                gt('Timestamp')=>'timestamp',\n                gt('User')=>'user_id',\n            ),\n        ));\n\n        $uname['id'] = implode($uname['id'],',');\n        $uname['name'] = implode($uname['name'],',');\n        assign_to_template(array(\n            'page'=>$page,\n            'users'=>$uname,\n            'user_default' => $user_default,\n            'badSearch' => $badSearch\n        ));\n\n\t}\n\n\tpublic function topSearchReport() {\n\t\tglobal $db;\n\t\t$limit = intval(TOP_SEARCH);\n\n\t\tif(empty($limit)) {\n\t\t\t$limit = 10;\n\t\t}\n\n\t\t$count   = $db->countObjects('search_queries');\n\n\t\t$records = $db->selectObjectsBySql(\"SELECT COUNT(query) cnt, query FROM \" .$db->prefix . \"search_queries GROUP BY query ORDER BY cnt DESC LIMIT 0, {$limit}\");\n\n        $records_key_arr = array();\n        $records_values_arr = array();\n\t\tforeach($records as $item) {\n\t\t\t$records_key_arr[] = '\"' . addslashes($item->query) . '\"';\n\t\t\t$records_values_arr[] = number_format((($item->cnt / $count)*100), 2);\n\t\t}\n\t\t$records_key   = implode(\",\", $records_key_arr);\n\t\t$records_values = implode(\",\", $records_values_arr);\n\n\t\tassign_to_template(array(\n            'records'=>$records,\n            'total'=>$count,\n            'limit' => $limit,\n            'records_key' => $records_key,\n            'records_values' => $records_values\n        ));\n\t}\n\n    function delete_search_queries() {\n        $sq = new search_queries();\n        $sqall = $sq->find('all');\n        if (!empty($sqall)) foreach ($sqall as $sqd) {\n            $sqd->delete();\n        }\n        flash('message', gt(\"Search Queries successfully deleted.\"));\n        expHistory::back();\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expRouter\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n\nclass expRouter {\n\n    private $maps = array();\n    public  $url_parts = '';\n    public  $current_url = '';\n    /**\n     * Type of url\n     * either 'base' (default page), 'page', 'action', or 'malformed'\n     * @var string\n     */\n    public  $url_type = '';\n    /**\n     * Style of url\n     * either 'sef' or 'query'\n     * @var string\n     */\n    public  $url_style = '';\n    public  $params = array();\n    public  $sefPath = null;\n\n    function __construct() {\n        self::getRouterMaps();\n    }\n\n    /**\n     * remove trailing slash\n     *\n     * @param $fulllink\n     *\n     * @return string\n     */\n    public static function cleanLink($fulllink)\n    {\n        if(substr($fulllink, -1) == '/') $fulllink = substr($fulllink, 0, -1);\n        return $fulllink;\n    }\n\n    /**\n\t * Will build url to a module/page/etc (determined by what is passed to the $params array).\n\t *\n\t * @param array $params The params that are passed will determine what link is make\n\t *               section\n\t *               action\n\t *               sef_name\n\t *               module\n\t *               controller\n\t *               action\n\t *\n\t * @param bool $force_old_school Old School as in not SEF.\n\t *\n\t * @param bool $secure If you set $secure true but ENABLE_SSL is not turned on in the config this will be forced false\n\t *\n\t * @param bool $no_map Ignore router_maps\n     *\n\t * @return string A url\n\t */\n    public function makeLink($params, $force_old_school=false, $secure=false, $no_map=false) {\n        $secure = ENABLE_SSL == 1 ? $secure : false;  // check if this site can use SSL if not then force the link to not be secure\n        $linkbase =  $secure ? URL_BASE_SECURE : URL_BASE;\n        $linkbase .= SCRIPT_RELATIVE;\n\n        if (isset($params['section']) && $params['section'] == SITE_DEFAULT_SECTION) {\n            return self::cleanLink($linkbase);\n        }\n\n        // Check to see if SEF_URLS have been turned on in the site config\n        if (SEF_URLS == 1 && ($_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'index.php' || $_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'install/index.php') && $force_old_school == false) {\n\n            if (isset($params['section']) && !isset($params['action'])) {\n                if (empty($params['sef_name'])) {\n                    global $db;\n\n                    $params['sef_name'] = $db->selectValue('section', 'sef_name', 'id='.intval($params['section']));\n                }\n                return self::cleanLink($linkbase.$params['sef_name']);\n            } else {\n                // initialize the link\n                $link = '';\n\n                // we need to add the change the module parameter to controller if it exists\n                // we can remove this snippit once the old modules are gone.\n                if (!empty($params['module']) && empty($params['controller'])) $params['controller'] = $params['module'];\n\n                // check to see if we have a router mapping for this controller/action\n                if (empty($no_map)){\n                    for ($i = 0, $iMax = count($this->maps); $i < $iMax; $i++) {\n                        $missing_params = array(\"dump\");\n\n                        if ((!empty($params) && !empty($params['controller']) && !empty($params['action'])) && (in_array($params['controller'], $this->maps[$i]) && in_array($params['action'], $this->maps[$i]) && (!isset($this->maps[$i]['src']) || in_array($params['src'], $this->maps[$i])))) {\n                            $missing_params = array_diff_key($this->maps[$i]['url_parts'], $params);\n                        }\n\n                        if (count($missing_params) == 0) {\n                            foreach($this->maps[$i]['url_parts'] as $key=>$value) {\n                                if ($key == 'controller') {\n                                    $link .= urlencode($value).\"/\";\n                                } else {\n                                    $link .= urlencode($params[$key]).\"/\";\n                                }\n                            }\n                            break;  // if this hits then we've found a match\n                        }\n                    }\n                }\n\n                // if we found a mapping for this link then we can return it now.\n                //if ($link != '') return self::encode($linkbase.$link);\n                if ($link != '') return self::cleanLink($linkbase.$link);\n\n                if (!empty($params['controller'])) $link .= $params['controller'].'/';\n                if (!empty($params['action'])) $link .= $params['action'].'/';\n                foreach ($params as $key=>$value) {\n                    if(!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID') {\n                        $value = trim($value);\n                        $key = trim($key);\n                        if ($value != \"\") {\n                            if ($key != 'module' && $key != 'action' && $key != 'controller') {\n                                if ($key != 'src') {\n                                    $link .= urlencode($key).\"/\".urlencode($value).\"/\";\n                                } else {\n                                    $link .= $key.\"/\".$value.\"/\";\n                                }\n                            }\n                        }\n                    }\n                }\n                //trim last / off\n                return self::cleanLink($linkbase.$link);\n            }\n        } else {\n            // if the users don't have SEF URL's turned on then we make the link the old school way.\n            if (!empty($params['sef_name'])) unset($params['sef_name']);\n            $link = $linkbase . SCRIPT_FILENAME . \"?\";\n            foreach ($params as $key=>$value) {\n                if (!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID'){\n                    $value = trim($value);\n                    $key = trim($key);\n                    if ($value != \"\") {\n                        if ($key != 'src') {\n                            $link .= urlencode($key).\"=\".urlencode($value).\"&\";\n                        } else {\n                            $link .= $key.\"=\".$value.\"&\";\n                        }\n                    }\n                }\n            }\n\n            $link = substr($link,0,-1);\n            return $link; // phillip: removed htmlspecialchars so that links return without parsing & to &amp; in URL strings\n            //return htmlspecialchars($link,ENT_QUOTES);\n        }\n    }\n\n    /**\n     * Returns a cleaner canonical link sans 'src' param\n     *\n     * @return string\n     */\n    public function plainPath() {\n        $params = $this->params;\n        unset($params['src']);\n        return $this->makeLink($params);\n    }\n\n    public function routeRequest() {\n        global $user;\n\n        // strip out possible xss exploits via url\n        foreach ($_GET as $key=>$var) {\n            if (is_string($var) && strpos($var,'\">')) {\n                unset(\n                    $_GET[$key],\n                    $_REQUEST[$key]\n                );\n            }\n        }\n        // conventional method to ensure the 'id' is only an id\n        if (isset($_REQUEST['id'])) {\n            if (isset($_GET['id']))\n                $_GET['id'] = intval($_GET['id']);\n            if (isset($_POST['id']))\n                $_POST['id'] = intval($_POST['id']);\n\n            $_REQUEST['id'] = intval($_REQUEST['id']);\n        }\n        // do the same for the other id's\n        foreach ($_REQUEST as $key=>$var) {\n            if (is_string($var) && strlen($key) >= 3 && strrpos($key,'_id',-3) !== false) {\n                if (isset($_GET[$key]))\n                    $_GET[$key] = intval($_GET[$key]);\n                if (isset($_POST[$key]))\n                    $_POST[$key] = intval($_POST[$key]);\n\n                $_REQUEST[$key] = intval($_REQUEST[$key]);\n            }\n        }\n        if (empty($user->id) || (!empty($user->id) && !$user->isAdmin())) {  //FIXME why would $user be empty here unless $db is down?\n//            $_REQUEST['route_sanitized'] = true;//FIXME debug test\n            expString::sanitize($_REQUEST);  // strip other exploits like sql injections\n        }\n\n        // start splitting the URL into it's different parts\n        $this->splitURL();\n        // edebug($this,1);\n\n        if ($this->url_style == 'sef') {\n            if ($this->url_type == 'page' || $this->url_type == 'base') {\n                $ret = $this->routePageRequest();               // if we hit this the formatting of the URL looks like the user is trying to go to a page.\n                if (!$ret) $this->url_type = 'malformed';\n            } elseif ($this->url_type == 'action') {\n                $this->isMappedURL();                       //check for a router map\n                $ret = $this->routeActionRequest();         // we didn't have a map for this URL.  Try to route it with this function.\n\n                // if this url wasn't a valid section, or action then kill it.  It might not actually be a \"bad\" url,\n                // but this is a precautionary measure against bad paths on images, css & js file, etc...with the new\n                // mod_rewrite rules these bad paths will not route thru here so we need to take them into account and\n                // deal with them accordingly.\n                if (!$ret) $this->url_type = 'malformed';\n            } elseif ($this->url_type == 'post') {\n                // some forms aren't getting the controller field set right when the form is created\n                // we are putting this check here to safe guard against a controller being referred to as\n                // a module in the form.\n                if (!empty($_POST['controller']) || !empty($_POST['module'])) {\n                    $module = !empty($_POST['controller']) ? expString::sanitize($_POST['controller']) : expString::sanitize($_POST['module']);\n                    // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n                    if (expModules::controllerExists($module)) {\n                        $_POST['controller'] = $module;\n                        $_REQUEST['controller'] = $module;\n                    }\n                }\n            }\n        } elseif ($this->url_style == 'query' && SEF_URLS == 1 && !empty($_REQUEST['section']) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            // if we hit this it's an old school url coming in and we're trying to use SEF's.\n            // we will send a permanent redirect so the search engines don't freak out about 2 links pointing\n            // to the same page.\n            header(\"Location: \".$this->makeLink(array('section'=>intval($_REQUEST['section']))),TRUE,301);\n        }\n\n        // if this is a valid URL then we build out the current_url var which is used by flow, and possibly other places too\n        if ($this->url_type != 'malformed') {\n            $this->current_url = $this->buildCurrentUrl();\n        } else {\n            // check if the URL is looking for a non-existent page or controller (we will check for bad action in renderAction())\n            // if page or controller is not found we will route to the not found controller.\n            $_REQUEST['controller'] = 'notfound';\n            $_REQUEST['action'] = 'handle';\n        }\n    }\n\n    //FIXME what are we doing with this history? saving each page load\n    public function updateHistory($section=null) {\n        global $db,$user;\n\n        // if its not already set\n        // configurable tracking length\n        setcookie('UserUID',expSession::getTicketString(),86400 * TRACKING_COOKIE_EXPIRES);\n        $cookieID = (empty($_COOKIE['UserUID'])) ? expSession::getTicketString() : $_COOKIE['UserUID'];\n        // Build out the object to insert into the db.\n        // Get our parameters.\n        $tmpParams = array();\n        foreach ($this->params as $key=>$value) {\n            if ($key != 'module' && $key != 'action' && $key != 'controller' && $key != 'section') {\n                $tmpParams[$key] = $value;\n            }\n        }\n        $trackingObject = new stdClass();\n        $trackingObject->params = serialize($tmpParams);\n        if ($this->url_type == 'page' || $this->url_type == 'base') {\n            $trackingObject->section = $section;\n        } else {\n            $trackingObject->module = ($_SERVER['REQUEST_METHOD'] == 'POST') ? (empty($_POST['controller']) ? expString::sanitize($_POST['module']) : expString::sanitize($_POST['controller'])) : $this->url_parts[0];\n            $trackingObject->action = ($_SERVER['REQUEST_METHOD'] == 'POST') ? $_POST['action'] : $this->url_parts[1];\n        }\n        $trackingObject->referer = empty($_SERVER['HTTP_REFERER']) ? null : $_SERVER['HTTP_REFERER'];\n        $trackingObject->cookieUID = $cookieID;\n        $trackingObject->user_id = $user->id;\n        $trackingObject->timestamp = time();\n        $trackingObject->user_address = $_SERVER['REMOTE_ADDR'];\n        $trackingObject->user_agent = $_SERVER['HTTP_USER_AGENT'];\n        $trackingObject->session_id = $_COOKIE['PHPSESSID'];\n        $db->insertObject($trackingObject,'tracking_rawdata');\n    }\n\n    public function splitURL() {\n        global $db;\n\n        $this->url_parts = array();\n        $this->buildSEFPath();\n\n        if (!empty($this->sefPath)) {\n            $this->url_style = 'sef';\n            $this->url_parts = explode('/', $this->sefPath);\n\n            // remove empty first and last url_parts if they exist\n            //if (empty($this->url_parts[count($this->url_parts)-1])) array_pop($this->url_parts);\n            if ($this->url_parts[count($this->url_parts)-1] == '') array_pop($this->url_parts);\n            if (empty($this->url_parts[0])) array_shift($this->url_parts);\n\n            if (count($this->url_parts) < 1 || (empty($this->url_parts[0]) && count($this->url_parts) == 1) ) {\n                $this->url_type = 'base';  // no params\n            } elseif (count($this->url_parts) == 1 || $db->selectObject('section', \"sef_name='\" . substr($this->sefPath,1) . \"'\") != null) {\n                $this->url_type = 'page';  // single param is page name\n            } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n                $this->url_type = 'post';  // params via form/post\n            } else {\n                // take a peek and see if a page exists with the same name as the first value...if so we probably have a page with\n                // extra perms...like printerfriendly=1 or ajax_action=1;\n                if (($db->selectObject('section', \"sef_name='\" . $this->url_parts[0] . \"'\") != null) && (in_array(array('printerfriendly','exportaspdf','ajax_action'), $this->url_parts))) {\n                    $this->url_type = 'page';\n                } else {\n                    $this->url_type = 'action';\n                }\n            }\n            $this->params = $this->convertPartsToParams();\n        } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            $this->url_style = 'sef';\n            $this->url_type = 'post';\n            $this->params = $this->convertPartsToParams();\n        } elseif (isset($_SERVER['REQUEST_URI'])) {\n            // if we hit here, we don't really need to do much.  All the pertinent info will come thru in the POST/GET vars\n            // so we don't really need to worry about what the URL looks like.\n            if ($_SERVER['REQUEST_URI'] == PATH_RELATIVE) {\n                $this->url_type = 'base';\n                $this->params = array();\n            } else {\n                $sefPath = explode('%22%3E',$_SERVER['REQUEST_URI']);  // remove any attempts to close the command\n                $_SERVER['REQUEST_URI'] = $sefPath[0];\n                $this->url_style = 'query';\n            }\n        } else {\n            $this->url_type = 'base';\n            $this->params = array();\n        }\n\n        // Check if this was a printer friendly link request\n        define('PRINTER_FRIENDLY', (isset($_REQUEST['printerfriendly']) || isset($this->params['printerfriendly'])) ? 1 : 0);\n        define('EXPORT_AS_PDF', (isset($_REQUEST['exportaspdf']) || isset($this->params['exportaspdf'])) ? 1 : 0);\n        define('EXPORT_AS_PDF_LANDSCAPE', (isset($_REQUEST['landscapepdf']) || isset($this->params['landscapepdf'])) ? 1 : 0);\n    }\n\n    public function routePageRequest() {\n//        global $db;\n\n        if ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            if (expTheme::inAction()) {\n                $_REQUEST['section'] = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            } else {\n                $_REQUEST['section'] = SITE_DEFAULT_SECTION;\n            }\n        } else {\n            // Try to look up the page by sef_name first.  If that doesn't exist, strip out the dashes and\n            // check the regular page names.  If that still doesn't work then we'll redirect them to the\n            // search module using the page name as the search string.\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            ########################################################\n            #FJD TODO:  this needs further refinement\n            #currently this requires a matching routerMap as such to work properly:\n            /*\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showall',\n                    'url_parts'=>array(\n                            'title'=>'(.*)'),\n            );\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showByTitle',\n                    'url_parts'=>array(\n                            'title'=>'(.*)'),\n            );\n            */\n            //if section is empty, we'll look for the page overrides first and route to\n            //routeActionRequest with some hand wacked variables. If we can't find an override\n            //then we'll return false as usual\n            // since we only received a single param and it wasn't a page, try for store category, or a product\n            if (empty($section)) {\n                $sef_url = $this->url_parts[0];\n                //check for a category\n                $c = new storeCategory();\n                $cat = $c->findBy('sef_url', $sef_url);\n                if (empty($cat)) {\n                    //check for a product\n                    $p = new product();\n                    $prod = $p->findBy('sef_url', $sef_url);\n                    if(!empty($prod)) {\n                        //fake parts and route to action\n                        $this->url_type = 'action';\n                        $this->url_parts[0] = 'store'; //controller\n                        $this->url_parts[1] = 'show'; //action\n                        $this->url_parts[2] = 'title'; //param name\n                        $this->url_parts[3] = $sef_url; //param\n                        //eDebug($this->url_parts,true);\n                        $this->params = $this->convertPartsToParams();\n                        return $this->routeActionRequest();\n                    }\n                    //else fall through\n                } else {\n                    //it's a store category\n                    //fake parts and route to action\n                    $this->url_type = 'action';\n                    $this->url_parts[0] = 'store'; //controller\n                    $this->url_parts[1] = 'showall'; //action\n                    $this->url_parts[2] = 'title'; //param name\n                    $this->url_parts[3] = $sef_url; //param\n                    //eDebug($this->url_parts,true);\n                    $this->params = $this->convertPartsToParams();\n                    return $this->routeActionRequest();\n                }\n//fixme we may want to log missed pages (no existing store cat/product) requests and set up/use a redirect table (404)??\n//fixme and we may also want to log any redirects taken??\n                return false;\n            }\n            #########################################################\n            //if (empty($section)) return false;  //couldnt find the page..let the calling action deal with it.\n            $_REQUEST['section'] = $section->id;\n        }\n\n        expHistory::set('viewable', array('section'=>intval($_REQUEST['section'])));\n        return true;\n    }\n\n    /**\n     * figure out if this action is mapped via the mapping file (router_maps.php)\n     */\n    public function isMappedURL() {\n        $part_count = count($this->url_parts);\n        foreach ($this->maps as $map) {\n            $matched = true;\n            $pairs = array();\n            $i = 0;\n            if ($part_count == count($map['url_parts'])) {\n                foreach($map['url_parts'] as $key=>$map_part) {\n                    $res = preg_match(\"/^$map_part/\", $this->url_parts[$i]);\n                    if ($res != 1) {\n                        $matched = false;\n                        break;\n                    }\n                    $pairs[$key] = $this->url_parts[$i];\n                    $i++;\n                }\n            } else {\n                $matched = false;\n            }\n\n            if ($matched) {\n                // safeguard against false matches when a real action was what the user really wanted.\n                if (count($this->url_parts) >= 2 && method_exists(expModules::getController($this->url_parts[0]), $this->url_parts[1]))\n                    return false;\n\n                $this->url_parts = array();\n                $this->url_parts[0] = $map['controller'];\n                $this->url_parts[1] = $map['action'];\n\n                if (isset($map['view'])) {\n                    $this->url_parts[2] = 'view';\n                    $this->url_parts[3] = $map['view'];\n                }\n\n                foreach($map as $key=>$value) {\n                    if ($key != 'controller' && $key != 'action' && $key != 'view' && $key != 'url_parts') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n\n                foreach($pairs as $key=>$value) {\n                    if ($key != 'controller') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n\n                $this->params = $this->convertPartsToParams();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function routeActionRequest() {\n        $return_params = array('controller'=>'','action'=>'','url_parts'=>array());\n\n        // If we have three url parts we assume they are controller->action->id, otherwise split them out into name<=>value pairs\n        $return_params['controller'] = $this->url_parts[0]; // set the controller/module\n        $return_params['action'] = $this->url_parts[1];     // set the action\n\n        // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n        if (expModules::controllerExists($return_params['controller'])) {\n            $requestType = 'controller';\n//        } elseif (is_dir(BASE.'framework/modules-1/'.$return_params['controller'])) {\n//            $requestType = 'module';\n        } else {\n            return false;  //this is an invalid url return an let the calling function deal with it.\n        }\n\n        // now figure out the name<=>value pairs\n        if (count($this->url_parts) == 3) {\n            if ( is_numeric($this->url_parts[2])) {\n                $return_params['url_parts']['id'] = $this->url_parts[2];\n            }\n        } else {\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $return_params['url_parts'][$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        }\n\n        // Set the module or controller - this how the actual routing happens\n        $_REQUEST[$requestType] = $return_params['controller']; //url_parts[0];\n        $_GET[$requestType] = $return_params['controller'];\n        $_POST[$requestType] = $return_params['controller'];\n\n        // Set the action for this module or controller\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            // most of the time we can just grab the action outta the POST array since this is passed as a hidden field,\n            // but sometimes it is actually set as the action on the form itself...then we get it from the params array instead.\n            $action = !empty($_POST['action']) ? $_POST['action'] : $this->params['action'];\n        } else {\n            $action = $return_params['action'];\n        }\n\n        $_REQUEST['action'] = $action;\n        $_GET['action'] = $action;\n        $_POST['action'] = $action;\n\n        // pass off the name<=>value pairs\n        foreach($return_params['url_parts'] as $key=>$value) {\n            $save_value = expString::sanitize($value);\n            $_REQUEST[$key] = $save_value;\n            $_GET[$key] = $save_value;\n        }\n\n        return true;\n    }\n\n    public function buildCurrentUrl() {\n        $url =  URL_BASE;\n        if ($this->url_style == 'sef') {\n            $url .= substr(PATH_RELATIVE,0,-1).$this->sefPath;\n        } else {\n            $url .= urldecode((empty($_SERVER['REQUEST_URI'])) ? $_ENV['REQUEST_URI'] : $_SERVER['REQUEST_URI']);\n        }\n        return expString::escape(expString::sanitize($url));\n    }\n\n    public static function encode($url) {\n        $url = str_replace('&', 'and', $url);\n        return preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $url))));\n    }\n\n    public static function decode($url) {\n        $url = str_replace('-', ' ', $url);\n        return str_replace('+', '-', $url);\n    }\n\n    public function getSefUrlByPageId($id=null) {  //FIXME this method is never called and doesn't do anything as written\n        if (!empty($id)) {\n            global $db;\n\n            $section = $db->selectObject('section', 'id='.intval($id));\n            $url = URL_FULL;\n            $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n        }\n    }\n\n    public function buildUrlByPageId($id=null) {\n        global $db;\n\n        //$url = URL_FULL;\n        $url = '';\n        if (!empty($id)) {\n            if (SEF_URLS == 1) {\n                $section = $db->selectObject('section', 'id='.intval($id));\n                if ($section->id != SITE_DEFAULT_SECTION) {\n                    $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n                }\n            } else {\n                $url .= 'index.php?section='.$id;\n            }\n        }\n        return $url;\n    }\n\n    public function printerFriendlyLink($link_text=\"Printer Friendly\", $class=null, $width=800, $height=600, $view='', $title_text = \"Printer Friendly\") {\n        $url = '';\n        if (PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            $class = !empty($class) ? $class : 'printer-friendly-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            $url .= '&printerfriendly=1\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n\n        return $url;\n    }\n\n    public function exportAsPDFLink($link_text=\"Export as PDF\", $class=null, $width=800, $height=600, $view='', $orientation=false, $limit='', $title_text=\"Export as PDF\") {\n        $url = '';\n        if (EXPORT_AS_PDF != 1 && PRINTER_FRIENDLY != 1) {\n            $class = !empty($class) ? $class : 'export-pdf-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            if (!empty($orientation)) {\n                $orientation = '&landscapepdf='.$orientation;\n            }\n            if (!empty($limit)) {\n                $limit = '&limit='.$limit;\n            }\n            $url .= '&exportaspdf=1'.$orientation.$limit.'&\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n\n        return $url;\n    }\n\n    public function convertToOldSchoolUrl() {\n        $params = $this->convertPartsToParams();\n        return $this->makeLink($params, true);\n    }\n\n    public function convertPartsToParams() {\n        $params = array();\n        if ($this->url_type == 'base') {\n            $params['section'] = SITE_DEFAULT_SECTION;\n        } elseif ($this->url_type == 'page') {\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            $params['section'] = empty($section->id) ? null : $section->id;\n        } elseif ($this->url_type == 'action') {\n            $params['controller'] = $this->url_parts[0];\n            $params['action'] = !empty($this->url_parts[1]) ? $this->url_parts[1] : null;\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $params[$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        } elseif ($this->url_type == 'post') {\n            if (isset($_REQUEST['PHPSESSID'])) unset($_REQUEST['PHPSESSID']);\n//            foreach($_REQUEST as $name=>$val) {\n////                if (get_magic_quotes_gpc()) $val = stripslashes($val);  // magic quotes fix??\n////                $params[$name] = $val;\n//                $params[$name] = expString::sanitize($val);  //FIXME need array sanitizer\n//            }\n//            if (empty($_REQUEST['route_sanitized']))\n                $params = expString::sanitize($_REQUEST);\n//            if (empty($data['route_sanitized'])) $_REQUEST['pre_sanitized'] = true;//FIXME debug test\n        }\n        //TODO: fully sanitize all params values here for ---We already do this!\n//        if (isset($params['src'])) $params['src'] = expString::sanitize(htmlspecialchars($params['src']));\n        return $params;\n    }\n\n    public function getPageByName($url_name) {\n        global $db;\n\n        $section = null;\n        if (is_numeric($url_name)) {\n            $section = $db->selectObject('section', 'id=' . $url_name);\n            if ($section == null) $section = $db->selectObject('section', \"sef_name='\" . $url_name . \"'\");\n        } elseif ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            $section = $db->selectObject('section', 'id='.SITE_DEFAULT_SECTION);\n        } else {\n            $section = $db->selectObject('section', \"sef_name='\".$url_name.\"'\");\n        }\n        // if section is still empty then we should route the user to the search (cool new feature :-) )\n        // at some point we need to write a special action/view for the search module that lets the user\n        // know they were redirected to search since the page they tried to go to directly didn't exist.\n#       if (empty($section)) {\n#           header(\"Refresh: 0; url=\".$this->makeLink(array('module'=>'search', 'action'=>'search', 'search_string'=>$this->url_parts[0])), false, 404);\n#           exit();\n#       } else {\n#           return $section;\n#       }\n        return $section;\n    }\n\n    private function buildSEFPath () {\n        // Apache\n        if (strpos($_SERVER['SERVER_SOFTWARE'],'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'],'WebServerX') !== false) {\n            switch(php_sapi_name()) {\n                case \"cgi\":\n                    $this->sefPath = !empty($_SERVER['REQUEST_URI']) ? urldecode($_SERVER['REQUEST_URI']): null;\n                    break;\n                case \"cgi-fcgi\":\n                    if (isset($_SERVER['REDIRECT_URL']) && $_SERVER['REDIRECT_URL'] != PATH_RELATIVE.'index.php') {\n                        $this->sefPath = urldecode($_SERVER['REDIRECT_URL']);\n                    } elseif (!empty($_ENV['REQUEST_URI'])) {\n                        $this->sefPath = urldecode($_ENV['REQUEST_URI']);\n                    } else {\n                        $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n                    }\n                    break;\n                default:\n                    $this->sefPath = !empty($_SERVER['REDIRECT_URL']) ? urldecode($_SERVER['REDIRECT_URL']) : null;\n                    break;\n            }\n        // Lighty ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'lighttpd') !== false) {\n            //FIXME, we still need a good lighttpd.conf rewrite config for sef_urls to work\n            if (isset($_SERVER['ORIG_PATH_INFO'])) {\n                $this->sefPath = urldecode($_SERVER['ORIG_PATH_INFO']);\n            } elseif (isset($_SERVER['REDIRECT_URI'])){\n                $this->sefPath = urldecode(substr($_SERVER['REDIRECT_URI'],9));\n            } elseif (isset($_SERVER['REQUEST_URI'])){\n                $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n            }\n        // Nginx ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'nginx') !== false) {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        } else {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        }\n\n        $this->sefPath = substr($this->sefPath,strlen(substr(PATH_RELATIVE,0,-1)));\n        if (strpos($this->sefPath,'/index.php') === 0) {\n            $this->sefPath = null;\n        }\n\n\t\t//parse the ecommerce tracking code if present and include in the object\n        if(isset($_SERVER['argv']) && is_array($_SERVER['argv']))\n        {\n            foreach($_SERVER['argv'] as $set)\n            {\n                $s = explode(\"=\",$set);\n                if($s[0] == \"ectid\")\n                {\n                    $this->ectid = $s[1];\n                }\n            }\n        }\n        if (substr($this->sefPath,-1) == \"/\") $this->sefPath = substr($this->sefPath,0,-1);\n        // sanitize it\n        $sefPath = explode('\">',$this->sefPath);  // remove any attempts to close the command\n        $this->sefPath = expString::escape(expString::sanitize($sefPath[0]));\n    }\n\n    public function getSection() {\n        global $db;\n\n        if (expTheme::inAction()) {\n            if (isset($_REQUEST['section'])) {\n                $section = $this->url_style==\"sef\" ? $this->getPageByName(expString::escape($_REQUEST['section']))->id : intval($_REQUEST['section']) ;\n            } else {\n                $section = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            }\n        } else {\n            $section = (isset($_REQUEST['section']) ? intval($_REQUEST['section']) : SITE_DEFAULT_SECTION);\n        }\n        $testsection = $db->selectObject('section','id='.$section);\n        if (empty($testsection)) {\n            $section = SITE_DEFAULT_SECTION;\n        }\n        return $section;\n    }\n\n    public function getSectionObj($section) {\n        global $db;\n\n        if ($section == \"*\") {\n            $sectionObj = call_user_func(expModules::getModuleClassName($this->params['controller']) . \"::getSection\", $this->params);\n        } else {\n//            $sectionObj = $db->selectObject('section','id='. intval($section));\n            $sectionObj = new section(intval($section));\n        }\n//        $sectionObj = $db->selectObject('section','id='. intval($section));\n        if (!$sectionObj->canView()) {\n            define('AUTHORIZED_SECTION',0);\n        } else {\n            define('AUTHORIZED_SECTION',1);\n        }\n        if (!$sectionObj->isPublic()) {\n            define('PUBLIC_SECTION',0);\n        } else {\n            define('PUBLIC_SECTION',1);\n        }\n\n        if (isset($_REQUEST['section'])) {\n            expSession::set('last_section', intval($_REQUEST['section']));\n        } elseif ($section == SITE_DEFAULT_SECTION) {\n            expSession::set('last_section', intval(SITE_DEFAULT_SECTION));\n        } else {\n            //expSession::unset('last_section');\n        }\n        return $sectionObj;\n    }\n\n    public function getRouterMaps() {\n        $mapfile = BASE.'framework/core/router_maps.php';\n\t\tif (file_exists(BASE.'themes/'.DISPLAY_THEME.'/router_maps.php')) {\n\t\t\t$mapfile = BASE.'themes/'.DISPLAY_THEME.'/router_maps.php';\n        }\n\n        include_once($mapfile);\n        $this->maps = $maps;  // $maps is set by included $mapfile\n    }\n\n    public function getTrackingId()\n    {\n        if(isset($this->ectid)) return $this->ectid;\n        else return '';\n    }\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass blogController extends expController {\n    public $useractions = array(\n        'showall'=>'Show All Posts',\n        'tags'=>\"Show Post Tags\",\n        'authors'=>\"Show Post Authors\",\n        'categories'=>\"Show Post Categories\",\n        'dates'=>\"Show Post Dates\",\n        'comments'=>\"Show Recent Post Comments\",\n    );\n    protected $manage_permissions = array(\n//        'approve'=>\"Approve Comments\",\n    );\n    public $remove_configs = array(\n//        'categories',\n//        'ealerts'\n    ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Blog\"); }\n    static function description() { return gt(\"Run a blog on your site.\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n    static function hasSources() { return false; }  // must be explicitly added by config['add_source'] or config['aggregate']\n    static function isSearchable() { return true; }\n\n    static function canImportData() {\n        return true;\n    }\n\n    static function canExportData() {\n        return true;\n    }\n\n    public function showall() {\n\t    expHistory::set('viewable', $this->params);\n\t\t$page = new expPaginator(array(\n            'model'=>$this->basemodel_name,\n            'where'=>$this->aggregateWhereClause(),\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] :10,\n            'order'=>'publish',\n            'dir'=>empty($this->config['sort_dir']) ? 'DESC' : $this->config['sort_dir'],\n            'categorize'=> empty($this->config['usecategories']) ? false : $this->config['usecategories'],\n            'groups'=>!isset($this->params['cat']) ? array() : array($this->params['cat']),\n            'uncat'=>!empty($this->config['uncat']) ? $this->config['uncat'] : gt('Not Categorized'),\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'=>array(\n                gt('Title')=>'title'\n            ),\n        ));\n\n\t\tassign_to_template(array(\n            'page'=>$page,\n            'params'=>$this->params,\n        ));\n        if (isset($this->params['cat'])) assign_to_template(array(\n            'moduletitle' => gt('Posts filed under') . ' ' . (empty($page->records[0]->expCat[0]->title) ? $this->config['uncat'] : $page->records[0]->expCat[0]->title),\n        ));\n\n\t}\n\n\tpublic function authors() {\n        expHistory::set('viewable', $this->params);\n        $blogs = $this->blog->find('all');\n        $users = array();\n        foreach ($blogs as $blog) {\n            if (isset($users[$blog->poster])) {\n                $users[$blog->poster]->count++;\n            } else {\n                $users[$blog->poster] = new user($blog->poster);\n                $users[$blog->poster]->count = 1;\n            }\n        }\n\n\t    assign_to_template(array(\n            'authors'=>$users\n        ));\n\t}\n\n\tpublic function dates() {\n\t    global $db;\n\n        expHistory::set('viewable', $this->params);\n        $where = $this->aggregateWhereClause();\n\t    $dates = $db->selectColumn('blog', 'publish', $where, 'publish DESC');\n\t    $blog_date = array();\n        $count = 0;\n        $limit = empty($this->config['limit']) ? count($dates) : $this->config['limit'];\n\t    foreach ($dates as $date) {\n\t        $year = date('Y',$date);\n\t        $month = date('n',$date);\n\t        if (isset($blog_date[$year][$month])) {\n\t            $blog_date[$year][$month]->count++;\n\t        } else {\n                $count++;\n                if ($count > $limit) break;\n                $blog_date[$year][$month] = new stdClass();\n\t            $blog_date[$year][$month]->name = date('F',$date);\n\t            $blog_date[$year][$month]->count = 1;\n\t        }\n\t    }\n        if (!empty($blog_date)) {\n            ksort($blog_date);\n            $blog_date = array_reverse($blog_date,1);\n            foreach ($blog_date as $key=>$val) {\n                ksort($blog_date[$key]);\n                $blog_date[$key] = array_reverse($blog_date[$key],1);\n            }\n        } else {\n            $blog_date = array();\n        }\n\t    //eDebug($blog_date);\n\t    assign_to_template(array(\n            'dates'=>$blog_date\n        ));\n\t}\n\n    public function showall_by_date() {\n\t    expHistory::set('viewable', $this->params);\n\t    $start_date = expDateTime::startOfMonthTimestamp(mktime(0, 0, 0, $this->params['month'], 1, $this->params['year']));\n\t    $end_date = expDateTime::endOfMonthTimestamp(mktime(0, 0, 0, $this->params['month'], 1, $this->params['year']));\n\n\t\t$page = new expPaginator(array(\n            'model'=>$this->basemodel_name,\n            'where'=>($this->aggregateWhereClause()?$this->aggregateWhereClause().\" AND \":\"\").\"publish >= '\".$start_date.\"' AND publish <= '\".$end_date.\"'\",\n            'limit'=>isset($this->config['limit']) ? $this->config['limit'] : 10,\n            'order'=>'publish',\n            'dir'=>'desc',\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'=>array(\n                gt('Title')=>'title'\n            ),\n        ));\n\n\t\tassign_to_template(array(\n            'page'=>$page,\n            'moduletitle'=>gt('Blogs by date').' \"'.expDateTime::format_date($start_date,\"%B %Y\").'\"')\n        );\n\t}\n\n\tpublic function showall_by_author() {\n\t    expHistory::set('viewable', $this->params);\n\n        $this->params['author'] = expString::escape($this->params['author']);\n        $user = user::getUserByName($this->params['author']);\n\t\t$page = new expPaginator(array(\n            'model'=>$this->basemodel_name,\n            'where'=>($this->aggregateWhereClause()?$this->aggregateWhereClause().\" AND \":\"\").\"poster=\".$user->id,\n            'limit'=>isset($this->config['limit']) ? $this->config['limit'] : 10,\n            'order'=>'publish',\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'=>array(\n                gt('Title')=>'title'\n            ),\n        ));\n\n\t\tassign_to_template(array(\n            'page'=>$page,\n            'moduletitle'=>gt('Blogs by author').' \"'.$this->params['author'].'\"'\n        ));\n\t}\n\n\tpublic function show() {\n        expHistory::set('viewable', $this->params);\n\t    $id = isset($this->params['title']) ? $this->params['title'] : $this->params['id'];\n        $record = new blog($id);\n        if (empty($record->id))\n            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>$this->params['title']));\n\n\t    // since we are probably getting here via a router mapped url\n\t    // some of the links (tags in particular) require a source, we will\n\t    // populate the location data in the template now.\n        $config = expConfig::getConfig($record->location_data);\n        if (empty($this->config))\n            $this->config = $config;\n        if (empty($this->loc->src)) {\n            $r_loc = expUnserialize($record->location_data);\n            $this->loc->src = $r_loc->src;\n        }\n\n        $nextwhere = $this->aggregateWhereClause().' AND publish > '.$record->publish.' ORDER BY publish';\n        $record->next = $record->find('first',$nextwhere);\n        $prevwhere = $this->aggregateWhereClause().' AND publish < '.$record->publish.' ORDER BY publish DESC';\n        $record->prev = $record->find('first',$prevwhere);\n\n\t    assign_to_template(array(\n            'record'=>$record,\n            'config'=>$config,\n            'params'=>$this->params\n        ));\n\t}\n\n    /**\n     * view items referenced by tags\n     * @deprecated 2.0.0\n     */\n    function showByTags() {\n        global $db;\n\n        // set the history point for this action\n        expHistory::set('viewable', $this->params);\n\n        // setup some objects\n        $tagobj = new expTag();\n        $modelname = empty($this->params['model']) ? $this->basemodel_name : expString::escape($this->params['model']);\n        $model = new $modelname();\n\n        // start building the sql query\n        $sql  = 'SELECT DISTINCT m.id FROM '.$db->prefix.$model->tablename.' m ';\n        $sql .= 'JOIN '.$db->prefix.$tagobj->attachable_table.' ct ';\n        $sql .= 'ON m.id = ct.content_id WHERE (';\n        $first = true;\n\n        if (isset($this->params['tags'])) {\n            $tags = is_array($this->params['tags']) ? $this->params['tags'] : array($this->params['tags']);\n        } elseif (isset($this->config['expTags'])) {\n            $tags = $this->config['expTags'];\n        } else {\n            $tags = array();\n        }\n\n        foreach ($tags as $tagid) {\n            $sql .= ($first) ? 'exptags_id='.intval($tagid) : ' OR exptags_id='.intval($tagid);\n            $first = false;\n        }\n        $sql .= \") AND content_type='\".$model->classname.\"'\";\n        if (!expPermissions::check('edit',$this->loc)) {\n            $sql = \"(publish =0 or publish <= \" . time() . \")) AND \". $sql . ' AND private=0';\n        }\n\n        // get the objects and render the template\n        $tag_assocs = $db->selectObjectsBySql($sql);\n        $records = array();\n        foreach ($tag_assocs as $assoc) {\n            $records[] = new $modelname($assoc->id);\n        }\n\n        assign_to_template(array(\n            'items'=>$records\n        ));\n    }\n\n    /**\n     * get the blog items in an rss feed format\n     *\n     * @return array\n     */\n//    function getRSSContent() {\n//        $class = new blog();\n//        $items = $class->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'publish DESC');\n//\n//        //Convert the items to rss items\n//        $rssitems = array();\n//        foreach ($items as $key => $item) {\n//            $rss_item = new FeedItem();\n//            $rss_item->title = expString::convertSmartQuotes($item->title);\n//            $rss_item->link = $rss_item->guid = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url));\n//            $rss_item->description = expString::convertSmartQuotes($item->body);\n//            $rss_item->author = user::getUserById($item->poster)->firstname.' '.user::getUserById($item->poster)->lastname;\n//            $rss_item->authorEmail = user::getEmailById($item->poster);\n////            $rss_item->date = isset($item->publish_date) ? date(DATE_RSS,$item->publish_date) : date(DATE_RSS, $item->created_at);\n//            $rss_item->date = isset($item->publish_date) ? $item->publish_date : $item->created_at;\n////            $rss_item->guid = expUnserialize($item->location_data)->src.'-id#'.$item->id;\n//            if (!empty($item->expCat[0]->title)) $rss_item->category = array($item->expCat[0]->title);\n//            $comment_count = expCommentController::countComments(array('content_id'=>$item->id,'content_type'=>$this->basemodel_name));\n//            if ($comment_count) {\n//                $rss_item->comments = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n////                $rss_item->commentsRSS = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n//                $rss_item->commentsCount = $comment_count;\n//            }\n//            $rssitems[$key] = $rss_item;\n//        }\n//        return $rssitems;\n//    }\n\n    /**\n     * additional check for display of search hit, only display non-draft\n     *\n     * @param $record\n     *\n     * @return bool\n     */\n    public static function searchHit($record) {\n        $blog = new blog($record->original_id);\n        if (expPermissions::check('edit', expUnserialize($record->location_data)) || $blog->private == 0 && ($blog->publish === 0 || $blog->publish <= time())) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * The aggregateWhereClause function creates a sql where clause which also includes aggregated module content\n     *\n     * @param string $type\n     *\n     * @return string\n     */\n   \tfunction aggregateWhereClause($type='') {\n        $sql = parent::aggregateWhereClause();\n        if (!expPermissions::check('edit',$this->loc)) {\n            if (!empty($sql)) {\n                $sql .= \" AND \";\n            }\n            $sql .= \"private = 0 AND (publish = 0 OR publish <= \" . time() . \")\";\n        }\n\n        return $sql;\n    }\n\n    /**\n     * delete module's items (all) by instance\n     */\n    function delete_instance($loc = false) {\n        parent::delete_instance(true);\n    }\n\n    /**\n     * Returns Facebook og: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_fb($request, $object, $canonical) {\n        $metainfo = array();\n        $metainfo['type'] = 'article';\n        if (!empty($object->body)) {\n            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n        } else {\n            $desc = SITE_DESCRIPTION;\n        }\n        $metainfo['title'] = substr(empty($object->meta_fb['title']) ? $object->title : $object->meta_fb['title'], 0, 87);\n        $metainfo['description'] = substr(empty($object->meta_fb['description']) ? $desc : $object->meta_fb['description'], 0, 199);\n        $metainfo['url'] = empty($object->meta_fb['url']) ? $canonical : $object->meta_fb['url'];\n        $metainfo['image'] = empty($object->meta_fb['fbimage'][0]) ? '' : $object->meta_fb['fbimage'][0]->url;\n        if (empty($metainfo['image'])) {\n            if (!empty($object->expFile['files'][0]->is_image)) {\n                $metainfo['image'] = $object->expFile['files'][0]->url;\n            } else {\n                $config = expConfig::getConfig($object->location_data);\n                if (!empty($config['expFile']['fbimage'][0]))\n                    $file = new expFile($config['expFile']['fbimage'][0]);\n                if (!empty($file->id))\n                    $metainfo['image'] = $file->url;\n                if (empty($metainfo['image']))\n                    $metainfo['image'] = URL_BASE . MIMEICON_RELATIVE . 'generic_22x22.png';\n            }\n        }\n        return $metainfo;\n    }\n\n    /**\n     * Returns Twitter twitter: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_tw($request, $object, $canonical) {\n        $metainfo = array();\n        $metainfo['card'] = 'summary';\n        if (!empty($object->body)) {\n            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n        } else {\n            $desc = SITE_DESCRIPTION;\n        }\n        $config = expConfig::getConfig($object->location_data);\n        if (!empty($object->meta_tw['twsite'])) {\n            $metainfo['site'] = $object->meta_tw['twsite'];\n        } elseif (!empty($config['twsite'])) {\n            $metainfo['site'] = $config['twsite'];\n        }\n        $metainfo['title'] = substr(empty($object->meta_tw['title']) ? $object->title : $object->meta_tw['title'], 0, 87);\n        $metainfo['description'] = substr(empty($object->meta_tw['description']) ? $desc : $object->meta_tw['description'], 0, 199);\n        $metainfo['image'] = empty($object->meta_tw['twimage'][0]) ? '' : $object->meta_tw['twimage'][0]->url;\n        if (empty($metainfo['image'])) {\n            if (!empty($object->expFile['images'][0]->is_image)) {\n                $metainfo['image'] = $object->expFile['images'][0]->url;\n            } else {\n                if (!empty($config['expFile']['twimage'][0]))\n                    $file = new expFile($config['expFile']['twimage'][0]);\n                if (!empty($file->id))\n                    $metainfo['image'] = $file->url;\n                if (empty($metainfo['image']))\n                    $metainfo['image'] = URL_BASE . MIMEICON_RELATIVE . 'generic_22x22.png';\n            }\n        }\n        return $metainfo;\n    }\n\n    function showall_by_author_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['author'])) {\n            // set the meta info\n            $u = user::getUserByName(expString::sanitize($request['author']));\n            $str = user::getUserAttribution($u->id);\n//            switch (DISPLAY_ATTRIBUTION) {\n//                case \"firstlast\":\n//                    $str = $u->firstname . \" \" . $u->lastname;\n//                    break;\n//                case \"lastfirst\":\n//                    $str = $u->lastname . \", \" . $u->firstname;\n//                    break;\n//                case \"first\":\n//                    $str = $u->firstname;\n//                    break;\n//                case \"username\":\n//                default:\n//                    $str = $u->username;\n//                    break;\n//            }\n\n            if (!empty($str)) {\n                $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n                $metainfo['title'] = gt('Showing all Blog Posts written by') .\" \\\"\" . $str . \"\\\"\";\n//                $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords;  //FIXME $object not set\n                $metainfo['keywords'] = $str;\n//                $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description;  //FIXME $object not set\n                $metainfo['description'] = SITE_DESCRIPTION;\n//                $metainfo['canonical'] = empty($object->canonical) ? URL_FULL.substr($router->sefPath, 1) : $object->canonical;  //FIXME $object not set\n//                $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n                $metainfo['canonical'] = $router->plainPath();\n\n                return $metainfo;\n            }\n        }\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass searchController extends expController {\n    public $useractions = array(\n        'show'=>'Show Search Form',\n        'cloud'=>'Show Tag Cloud'\n    );\n    protected $manage_permissions = array(\n        'spider'=>'Spider Site',\n        'searchQueryReport'=>'Search Query Report',\n        'topSearchReport'=>'Top Search Report',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Search Form\"); }\n    static function description() { return gt(\"Add a form to allow users to search for content on your website.\"); }\n    static function hasSources() { return false; }\n    static function hasContent() { return false; }\n\n    public function search()\n    {\n        global $router;\n\n        $terms = $this->params['search_string'];\n\n        // If magic quotes is on and the user uses modifiers like \" (quotes) they get escaped. We don't want that in this case.\n        if (get_magic_quotes_gpc()) {\n            $terms = stripslashes($terms);\n        }\n        $terms = htmlspecialchars($terms);\n\n        if ($router->current_url == substr(URL_FULL, 0, -1)) {  // give us a user friendly url\n            unset($router->params['int']);\n//            unset($router->params['src']);\n//            $router->params['src'] = '1';\n            redirect_to($router->params);\n        }\n\n        $search = new search();\n\n        $page = new expPaginator(array(\n//            'model'=>'search',\n            'records'=>$search->getSearchResults($terms, !empty($this->config['only_best']), 0, !empty($this->config['eventlimit']) ? $this->config['eventlimit'] : null),\n            //'sql'=>$sql,\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'=>'score',\n            'dir'=>'DESC',\n            'page' => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'dontsortwithincat'=>true,\n            'controller' => $this->params['controller'],\n            'action' => $this->params['action'],\n            'src' => $this->loc->src,\n        ));\n\n        if (!empty($this->config['is_categorized'])) {\n            $results = array();\n            foreach ($page->records as $hit) {\n                if (!isset($results[$hit->category])) {\n                    $results[$hit->category] = array();\n                }\n                $results[$hit->category][] = $hit;\n            }\n            assign_to_template(array(\n                'results'=>$results,\n            ));\n        }\n\n        // include CSS for results\n        // auto-include the CSS for pagination links\n\t    expCSS::pushToHead(array(\n//\t\t    \"unique\"=>\"search-results\",\n\t\t    \"link\"=>$this->asset_path.\"css/results.css\",\n\t\t    )\n\t\t);\n\n        assign_to_template(array(\n            'page'=>$page,\n            'terms'=>$terms,\n            'params'=>$this->params,\n        ));\n    }\n\n    public static function spider() {\n        global $db;\n\n        // reinitialize search index\n\t    $db->delete('search');\n\n        $mods = array();\n        // old school modules\n//\t    foreach (expModules::modules_list() as $mod) {\n////\t\t    $name = @call_user_func(array($mod,'name'));\n//            $name = @call_user_func(array($mod,'searchName'));\n//\t\t    if (class_exists($mod) && is_callable(array($mod,'spiderContent'))) {\n//                $mods[$name] = call_user_func(array($mod,'spiderContent'));\n//\t\t    }\n//\t    }\n\n        // 2.0 modules\n//\t    foreach (expModules::listControllers() as $ctlname=>$ctl) {\n        foreach (expModules::getActiveControllersList() as $ctl) {\n            $ctlname = expModules::getModuleClassName($ctl);\n\t\t    $controller = new $ctlname();\n\t\t    if (method_exists($controller,'isSearchable') && $controller->isSearchable()) {\n//\t\t\t    $mods[$controller->name()] = $controller->addContentToSearch();\n                $mods[$controller->searchName()] = $controller->addContentToSearch();\n\t\t    }\n\t    }\n\n\t    uksort($mods,'strnatcasecmp');\n\t    assign_to_template(array(\n            'mods'=>$mods\n        ));\n    }\n\n    public function show() {\n        //no need to do anything..we're just showing the form... so far! MUAHAHAHAHAHAAA!   what?\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'showall'));\n    }\n\n    public function showall() {\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'show'));\n//        $this->show();\n    }\n\n    /**\n     * tag cloud\n     */\n    function cloud() {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'=>'expTag',\n            'where'=>null,\n//          'limit'=>999,\n            'order'=>\"title\",\n            'dontsortwithincat'=>true,\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>static::hasSources() == true ? $this->loc->src : null,\n            'columns'=>array(gt('ID#')=>'id',gt('Title')=>'title',gt('Body')=>'body'),\n        ));\n\n//        foreach ($db->selectColumn('content_expTags','content_type',null,null,true) as $contenttype) {\n//            foreach ($page->records as $key => $value) {\n//                $attatchedat = $page->records[$key]->findWhereAttachedTo($contenttype);\n//                if (!empty($attatchedat)) {\n//                    $page->records[$key]->attachedcount = @$page->records[$key]->attachedcount + count($attatchedat);\n//                    $page->records[$key]->attached[$contenttype] = $attatchedat;\n//                }\n//            }\n//        }\n        $tags_list = array();\n        foreach ($page->records as $key=>$record) {\n            $count = $db->countObjects('content_expTags','exptags_id=' . $record->id);\n            if ($count) {\n                $page->records[$key]->attachedcount = $count;\n                $tags_list[$record->title] = new stdClass();\n                $tags_list[$record->title]->count = $count;\n                $tags_list[$record->title]->sef_url = $record->sef_url;\n                $tags_list[$record->title]->title = $record->title;\n            } else {\n                unset($page->records[$key]);\n            }\n        }\n        // trim the tag cloud to our limit.\n        $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'attachedcount DESC', 'type'=>'a'));\n        if (!empty($this->config['limit'])) $page->records = array_slice($page->records,0,$this->config['limit']);\n        if (!empty($this->config['order']) && $this->config['order'] != 'hits') {\n            $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'title ASC', 'ignore_case'=>true, 'sort_type'=>'a'));\n        }\n        assign_to_template(array(\n            'page'=>$page,\n            'tags_list'=>$tags_list\n        ));\n    }\n\n    // some general search stuff\n    public function autocomplete() {\n        return;  //fixme this negates the code below!\n        global $db;\n\n        $model = $this->params['model'];\n        $mod = new $model();\n        $srchcol = explode(\",\",$this->params['searchoncol']);\n        /*for ($i=0; $i<count($srchcol); $i++) {\n            if ($i>=1) $sql .= \" OR \";\n            $sql .= $srchcol[$i].' LIKE \\'%'.$this->params['query'].'%\\'';\n        }*/\n        //    $sql .= ' AND parent_id=0';\n        //eDebug($sql);\n\n        //$res = $mod->find('all',$sql,'id',25);\n        $sql = \"select DISTINCT(p.id), p.title, model, sef_url, f.id as fileid from \".$db->prefix.\"product as p INNER JOIN \".$db->prefix.\"content_expfiles as cef ON p.id=cef.content_id INNER JOIN \".$db->prefix.\"expfiles as f ON cef.expfiles_id = f.id where match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') AND p.parent_id=0 order by match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') desc LIMIT 25\";\n        //$res = $db->selectObjectsBySql($sql);\n        //$res = $db->selectObjectBySql('SELECT * FROM `exponent_product`');\n\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n\tpublic function searchQueryReport() {  //fixme this will typically create a 500 error due to number of search query records\n\t\tglobal $db;\n\n\t\t//Instantiate the search model\n\t\t$search = new search();\n\n\t\t//Store the keywords that returns nothing\n        $badSearch = array();\n\t\t$badSearchArr =  array();\n\n\t\t//User Records Initialization\n\t\t$all_user  = -1;\n\t\t$anonymous = -2;\n\t\t$uname = array('id'=>array($all_user, $anonymous), 'name'=>array('All Users', 'Anonymous'));\n\n\t\t$user_default = '';\n\t\t$where = '';\n\n\t\tif(isset($this->params['user_id']) && $this->params['user_id'] != -1) {\n\t\t\t$user_default = $this->params['user_id'];\n\t\t}\n\n\t\texpHistory::set('manageable', $this->params);\n\n\t\t$ctr  = 2;\n\t\t$ctr2 = 0;\n\n\t\t//Getting the search users\n\t\t$records = $db->selectObjects('search_queries');  // note we get all records a first time?\n\n\n\t\tforeach($records as $item) {\n\t\t\t$u = user::getUserById($item->user_id);\n\n\t\t\tif($item->user_id == 0) {\n\t\t\t\t$item->user_id = $anonymous;\n\t\t\t}\n\n\t\t\tif(!in_array($item->user_id, $uname['id'])) {\n\t\t\t\t$uname['name'][$ctr] = $u->firstname . ' ' . $u->lastname;\n\t\t\t\t$uname['id'][$ctr] = $item->user_id;\n\t\t\t\t$ctr++;\n\t\t\t}\n\n\t\t\t$result  = $search->getSearchResults($item->query, false, true);\n\t\t\tif(empty($result) && !in_array($item->query, $badSearchArr)) {\n\t\t\t\t$badSearchArr[] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['query'] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['count'] = $db->countObjects(\"search_queries\", \"query='{$item->query}'\");\n\t\t\t\t$ctr2++;\n\t\t\t}\n\n\t\t}\n\n\t\t//Check if the user choose from the dropdown\n\t\tif(!empty($user_default)) {\n\t\t\tif($user_default == $anonymous) {\n\t\t\t\t$u_id = 0;\n\t\t\t} else {\n\t\t\t\t$u_id = $user_default;\n\t\t\t}\n\t\t\t$where .= \"user_id = {$u_id}\";\n\t\t}\n\n\t\t//Get all the search query records\n\t\t$records = $db->selectObjects('search_queries', $where);  // note we then get all records a 2nd time?\n        for ($i = 0, $iMax = count($records); $i < $iMax; $i++) {\n\t\t\tif(!empty($records[$i]->user_id)) {\n\t\t\t\t$u = user::getUserById($records[$i]->user_id);\n\t\t\t\t$records[$i]->user = $u->firstname . ' ' . $u->lastname;\n\t\t\t}\n\t\t}\n\n        $page = new expPaginator(array(\n            'records' => $records,\n            'where'=>1,\n            'model'=>'search_queries',\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? 10 : $this->config['limit'],\n            'order'=>empty($this->config['order']) ? 'timestamp' : $this->config['order'],\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'columns'=>array(\n                'ID'=>'id',\n                gt('Query')=>'query',\n                gt('Timestamp')=>'timestamp',\n                gt('User')=>'user_id',\n            ),\n        ));\n\n        $uname['id'] = implode($uname['id'],',');\n        $uname['name'] = implode($uname['name'],',');\n        assign_to_template(array(\n            'page'=>$page,\n            'users'=>$uname,\n            'user_default' => $user_default,\n            'badSearch' => $badSearch\n        ));\n\n\t}\n\n\tpublic function topSearchReport() {\n\t\tglobal $db;\n\n\t\t$limit = intval(TOP_SEARCH);\n\n\t\tif(empty($limit)) {\n\t\t\t$limit = 10;\n\t\t}\n\n\t\t$count   = $db->countObjects('search_queries');\n\n\t\t$records = $db->selectObjectsBySql(\"SELECT COUNT(query) cnt, query FROM \" .$db->prefix . \"search_queries GROUP BY query ORDER BY cnt DESC LIMIT 0, {$limit}\");\n\n        $records_key_arr = array();\n        $records_values_arr = array();\n\t\tforeach($records as $item) {\n\t\t\t$records_key_arr[] = '\"' . addslashes($item->query) . '\"';\n\t\t\t$records_values_arr[] = number_format((($item->cnt / $count)*100), 2);\n\t\t}\n\t\t$records_key   = implode(\",\", $records_key_arr);\n\t\t$records_values = implode(\",\", $records_values_arr);\n\n\t\tassign_to_template(array(\n            'records'=>$records,\n            'total'=>$count,\n            'limit' => $limit,\n            'records_key' => $records_key,\n            'records_values' => $records_values\n        ));\n\t}\n\n    function delete_search_queries() {\n        $sq = new search_queries();\n        $sqall = $sq->find('all');\n        if (!empty($sqall)) foreach ($sqall as $sqd) {\n            $sqd->delete();\n        }\n        flash('message', gt(\"Search Queries successfully deleted.\"));\n        expHistory::back();\n    }\n\n}\n\n?>"], "filenames": ["framework/core/subsystems/expRouter.php", "framework/modules/blog/controllers/blogController.php", "framework/modules/search/controllers/searchController.php"], "buggy_code_start_loc": [44, 196, 212], "buggy_code_end_loc": [843, 197, 336], "fixing_code_start_loc": [44, 196, 212], "fixing_code_end_loc": [846, 197, 338], "type": "CWE-89", "message": "SQL injection vulnerability in the getSection function in framework/core/subsystems/expRouter.php in Exponent CMS 2.3.9 and earlier allows remote attackers to execute arbitrary SQL commands via the section parameter.", "other": {"cve": {"id": "CVE-2016-7784", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-07T16:59:01.383", "lastModified": "2017-07-28T01:29:06.610", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in the getSection function in framework/core/subsystems/expRouter.php in Exponent CMS 2.3.9 and earlier allows remote attackers to execute arbitrary SQL commands via the section parameter."}, {"lang": "es", "value": "Vulnerabilidad de inyecci\u00f3n SQL en la funci\u00f3n getSection en framework/core/subsystems/expRouter.php en Exponent CMS 2.3.9 y versiones anteriores permite a atacantes remotos ejecutar comandos SQL arbitrarios a trav\u00e9s del par\u00e1metro section."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.9", "matchCriteriaId": "C723D5FF-CEE4-461B-911F-E760A7BF1805"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/139484/Exponent-CMS-2.3.9-SQL-Injection.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2016/Nov/12", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/97232", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1037252", "source": "cve@mitre.org"}, {"url": "https://github.com/exponentcms/exponent-cms/commit/1965e3719986406576898668855b8afbab43ed2c", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/1965e3719986406576898668855b8afbab43ed2c"}}