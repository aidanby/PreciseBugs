{"buggy_code": ["import copy\nimport os\nimport re\nimport shutil\nimport sys\nfrom io import BytesIO\n\nimport pytest\nfrom packaging.version import parse as parse_version\n\nfrom PIL import Image, ImageDraw, ImageFont, features\n\nfrom .helper import (\n    assert_image_equal,\n    assert_image_equal_tofile,\n    assert_image_similar_tofile,\n    is_win32,\n    skip_unless_feature,\n    skip_unless_feature_version,\n)\n\nFONT_PATH = \"Tests/fonts/FreeMono.ttf\"\nFONT_SIZE = 20\n\nTEST_TEXT = \"hey you\\nyou are awesome\\nthis looks awkward\"\n\n\npytestmark = skip_unless_feature(\"freetype2\")\n\n\ndef test_sanity():\n    assert re.search(r\"\\d+\\.\\d+\\.\\d+$\", features.version_module(\"freetype2\"))\n\n\n@pytest.fixture(\n    scope=\"module\",\n    params=[\n        pytest.param(ImageFont.Layout.BASIC),\n        pytest.param(ImageFont.Layout.RAQM, marks=skip_unless_feature(\"raqm\")),\n    ],\n)\ndef layout_engine(request):\n    return request.param\n\n\n@pytest.fixture(scope=\"module\")\ndef font(layout_engine):\n    return ImageFont.truetype(FONT_PATH, FONT_SIZE, layout_engine=layout_engine)\n\n\ndef test_font_properties(font):\n    assert font.path == FONT_PATH\n    assert font.size == FONT_SIZE\n\n    font_copy = font.font_variant()\n    assert font_copy.path == FONT_PATH\n    assert font_copy.size == FONT_SIZE\n\n    font_copy = font.font_variant(size=FONT_SIZE + 1)\n    assert font_copy.size == FONT_SIZE + 1\n\n    second_font_path = \"Tests/fonts/DejaVuSans/DejaVuSans.ttf\"\n    font_copy = font.font_variant(font=second_font_path)\n    assert font_copy.path == second_font_path\n\n\ndef _render(font, layout_engine):\n    txt = \"Hello World!\"\n    ttf = ImageFont.truetype(font, FONT_SIZE, layout_engine=layout_engine)\n    ttf.getbbox(txt)\n\n    img = Image.new(\"RGB\", (256, 64), \"white\")\n    d = ImageDraw.Draw(img)\n    d.text((10, 10), txt, font=ttf, fill=\"black\")\n\n    return img\n\n\ndef test_font_with_name(layout_engine):\n    _render(FONT_PATH, layout_engine)\n\n\ndef test_font_with_filelike(layout_engine):\n    def _font_as_bytes():\n        with open(FONT_PATH, \"rb\") as f:\n            font_bytes = BytesIO(f.read())\n        return font_bytes\n\n    ttf = ImageFont.truetype(_font_as_bytes(), FONT_SIZE, layout_engine=layout_engine)\n    ttf_copy = ttf.font_variant()\n    assert ttf_copy.font_bytes == ttf.font_bytes\n\n    _render(_font_as_bytes(), layout_engine)\n    # Usage note:  making two fonts from the same buffer fails.\n    # shared_bytes = _font_as_bytes()\n    # _render(shared_bytes)\n    # with pytest.raises(Exception):\n    #   _render(shared_bytes)\n\n\ndef test_font_with_open_file(layout_engine):\n    with open(FONT_PATH, \"rb\") as f:\n        _render(f, layout_engine)\n\n\ndef test_render_equal(layout_engine):\n    img_path = _render(FONT_PATH, layout_engine)\n    with open(FONT_PATH, \"rb\") as f:\n        font_filelike = BytesIO(f.read())\n    img_filelike = _render(font_filelike, layout_engine)\n\n    assert_image_equal(img_path, img_filelike)\n\n\ndef test_non_ascii_path(tmp_path, layout_engine):\n    tempfile = str(tmp_path / (\"temp_\" + chr(128) + \".ttf\"))\n    try:\n        shutil.copy(FONT_PATH, tempfile)\n    except UnicodeEncodeError:\n        pytest.skip(\"Non-ASCII path could not be created\")\n\n    ImageFont.truetype(tempfile, FONT_SIZE, layout_engine=layout_engine)\n\n\ndef test_transparent_background(font):\n    im = Image.new(mode=\"RGBA\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    txt = \"Hello World!\"\n    draw.text((10, 10), txt, font=font)\n\n    target = \"Tests/images/transparent_background_text.png\"\n    assert_image_similar_tofile(im, target, 4.09)\n\n    target = \"Tests/images/transparent_background_text_L.png\"\n    assert_image_similar_tofile(im.convert(\"L\"), target, 0.01)\n\n\ndef test_I16(font):\n    im = Image.new(mode=\"I;16\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    txt = \"Hello World!\"\n    draw.text((10, 10), txt, font=font)\n\n    target = \"Tests/images/transparent_background_text_L.png\"\n    assert_image_similar_tofile(im.convert(\"L\"), target, 0.01)\n\n\ndef test_textbbox_equal(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    txt = \"Hello World!\"\n    bbox = draw.textbbox((10, 10), txt, font)\n    draw.text((10, 10), txt, font=font)\n    draw.rectangle(bbox)\n\n    assert_image_similar_tofile(im, \"Tests/images/rectangle_surrounding_text.png\", 2.5)\n\n\n@pytest.mark.parametrize(\n    \"text, mode, fontname, size, length_basic, length_raqm\",\n    (\n        # basic test\n        (\"text\", \"L\", \"FreeMono.ttf\", 15, 36, 36),\n        (\"text\", \"1\", \"FreeMono.ttf\", 15, 36, 36),\n        # issue 4177\n        (\"rrr\", \"L\", \"DejaVuSans/DejaVuSans.ttf\", 18, 21, 22.21875),\n        (\"rrr\", \"1\", \"DejaVuSans/DejaVuSans.ttf\", 18, 24, 22.21875),\n        # test 'l' not including extra margin\n        # using exact value 2047 / 64 for raqm, checked with debugger\n        (\"ill\", \"L\", \"OpenSansCondensed-LightItalic.ttf\", 63, 33, 31.984375),\n        (\"ill\", \"1\", \"OpenSansCondensed-LightItalic.ttf\", 63, 33, 31.984375),\n    ),\n)\ndef test_getlength(\n    text, mode, fontname, size, layout_engine, length_basic, length_raqm\n):\n    f = ImageFont.truetype(\"Tests/fonts/\" + fontname, size, layout_engine=layout_engine)\n\n    im = Image.new(mode, (1, 1), 0)\n    d = ImageDraw.Draw(im)\n\n    if layout_engine == ImageFont.Layout.BASIC:\n        length = d.textlength(text, f)\n        assert length == length_basic\n    else:\n        # disable kerning, kerning metrics changed\n        length = d.textlength(text, f, features=[\"-kern\"])\n        assert length == length_raqm\n\n\ndef test_float_size():\n    lengths = []\n    for size in (48, 48.5, 49):\n        f = ImageFont.truetype(\n            \"Tests/fonts/NotoSans-Regular.ttf\", size, layout_engine=layout_engine\n        )\n        lengths.append(f.getlength(\"text\"))\n    assert lengths[0] != lengths[1] != lengths[2]\n\n\ndef test_render_multiline(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    line_spacing = font.getbbox(\"A\")[3] + 4\n    lines = TEST_TEXT.split(\"\\n\")\n    y = 0\n    for line in lines:\n        draw.text((0, y), line, font=font)\n        y += line_spacing\n\n    # some versions of freetype have different horizontal spacing.\n    # setting a tight epsilon, I'm showing the original test failure\n    # at epsilon = ~38.\n    assert_image_similar_tofile(im, \"Tests/images/multiline_text.png\", 6.2)\n\n\ndef test_render_multiline_text(font):\n    # Test that text() correctly connects to multiline_text()\n    # and that align defaults to left\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    draw.text((0, 0), TEST_TEXT, font=font)\n\n    assert_image_similar_tofile(im, \"Tests/images/multiline_text.png\", 0.01)\n\n    # Test that text() can pass on additional arguments\n    # to multiline_text()\n    draw.text(\n        (0, 0), TEST_TEXT, fill=None, font=font, anchor=None, spacing=4, align=\"left\"\n    )\n    draw.text((0, 0), TEST_TEXT, None, font, None, 4, \"left\")\n\n\n@pytest.mark.parametrize(\n    \"align, ext\", ((\"left\", \"\"), (\"center\", \"_center\"), (\"right\", \"_right\"))\n)\ndef test_render_multiline_text_align(font, align, ext):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    draw.multiline_text((0, 0), TEST_TEXT, font=font, align=align)\n\n    assert_image_similar_tofile(im, f\"Tests/images/multiline_text{ext}.png\", 0.01)\n\n\ndef test_unknown_align(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    # Act/Assert\n    with pytest.raises(ValueError):\n        draw.multiline_text((0, 0), TEST_TEXT, font=font, align=\"unknown\")\n\n\ndef test_draw_align(font):\n    im = Image.new(\"RGB\", (300, 100), \"white\")\n    draw = ImageDraw.Draw(im)\n    line = \"some text\"\n    draw.text((100, 40), line, (0, 0, 0), font=font, align=\"left\")\n\n\ndef test_multiline_bbox(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    # Test that textbbox() correctly connects to multiline_textbbox()\n    assert draw.textbbox((0, 0), TEST_TEXT, font=font) == draw.multiline_textbbox(\n        (0, 0), TEST_TEXT, font=font\n    )\n\n    # Test that multiline_textbbox corresponds to ImageFont.textbbox()\n    # for single line text\n    assert font.getbbox(\"A\") == draw.multiline_textbbox((0, 0), \"A\", font=font)\n\n    # Test that textbbox() can pass on additional arguments\n    # to multiline_textbbox()\n    draw.textbbox((0, 0), TEST_TEXT, font=font, spacing=4)\n\n\ndef test_multiline_width(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    assert (\n        draw.textbbox((0, 0), \"longest line\", font=font)[2]\n        == draw.multiline_textbbox((0, 0), \"longest line\\nline\", font=font)[2]\n    )\n\n\ndef test_multiline_spacing(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    draw.multiline_text((0, 0), TEST_TEXT, font=font, spacing=10)\n\n    assert_image_similar_tofile(im, \"Tests/images/multiline_text_spacing.png\", 2.5)\n\n\n@pytest.mark.parametrize(\n    \"orientation\", (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270)\n)\ndef test_rotated_transposed_font(font, orientation):\n    img_grey = Image.new(\"L\", (100, 100))\n    draw = ImageDraw.Draw(img_grey)\n    word = \"testing\"\n\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Original font\n    draw.font = font\n    bbox_a = draw.textbbox((10, 10), word)\n\n    # Rotated font\n    draw.font = transposed_font\n    bbox_b = draw.textbbox((20, 20), word)\n\n    # Check (w, h) of box a is (h, w) of box b\n    assert (\n        bbox_a[2] - bbox_a[0],\n        bbox_a[3] - bbox_a[1],\n    ) == (\n        bbox_b[3] - bbox_b[1],\n        bbox_b[2] - bbox_b[0],\n    )\n\n    # Check top left co-ordinates are correct\n    assert bbox_b[:2] == (20, 20)\n\n    # text length is undefined for vertical text\n    with pytest.raises(ValueError):\n        draw.textlength(word)\n\n\n@pytest.mark.parametrize(\n    \"orientation\",\n    (\n        None,\n        Image.Transpose.ROTATE_180,\n        Image.Transpose.FLIP_LEFT_RIGHT,\n        Image.Transpose.FLIP_TOP_BOTTOM,\n    ),\n)\ndef test_unrotated_transposed_font(font, orientation):\n    img_grey = Image.new(\"L\", (100, 100))\n    draw = ImageDraw.Draw(img_grey)\n    word = \"testing\"\n\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Original font\n    draw.font = font\n    bbox_a = draw.textbbox((10, 10), word)\n    length_a = draw.textlength(word)\n\n    # Rotated font\n    draw.font = transposed_font\n    bbox_b = draw.textbbox((20, 20), word)\n    length_b = draw.textlength(word)\n\n    # Check boxes a and b are same size\n    assert (\n        bbox_a[2] - bbox_a[0],\n        bbox_a[3] - bbox_a[1],\n    ) == (\n        bbox_b[2] - bbox_b[0],\n        bbox_b[3] - bbox_b[1],\n    )\n\n    # Check top left co-ordinates are correct\n    assert bbox_b[:2] == (20, 20)\n\n    assert length_a == length_b\n\n\n@pytest.mark.parametrize(\n    \"orientation\", (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270)\n)\ndef test_rotated_transposed_font_get_mask(font, orientation):\n    # Arrange\n    text = \"mask this\"\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Act\n    mask = transposed_font.getmask(text)\n\n    # Assert\n    assert mask.size == (13, 108)\n\n\n@pytest.mark.parametrize(\n    \"orientation\",\n    (\n        None,\n        Image.Transpose.ROTATE_180,\n        Image.Transpose.FLIP_LEFT_RIGHT,\n        Image.Transpose.FLIP_TOP_BOTTOM,\n    ),\n)\ndef test_unrotated_transposed_font_get_mask(font, orientation):\n    # Arrange\n    text = \"mask this\"\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Act\n    mask = transposed_font.getmask(text)\n\n    # Assert\n    assert mask.size == (108, 13)\n\n\ndef test_free_type_font_get_name(font):\n    assert (\"FreeMono\", \"Regular\") == font.getname()\n\n\ndef test_free_type_font_get_metrics(font):\n    ascent, descent = font.getmetrics()\n\n    assert isinstance(ascent, int)\n    assert isinstance(descent, int)\n    assert (ascent, descent) == (16, 4)\n\n\ndef test_free_type_font_get_mask(font):\n    # Arrange\n    text = \"mask this\"\n\n    # Act\n    mask = font.getmask(text)\n\n    # Assert\n    assert mask.size == (108, 13)\n\n\ndef test_load_path_not_found():\n    # Arrange\n    filename = \"somefilenamethatdoesntexist.ttf\"\n\n    # Act/Assert\n    with pytest.raises(OSError):\n        ImageFont.load_path(filename)\n    with pytest.raises(OSError):\n        ImageFont.truetype(filename)\n\n\ndef test_load_non_font_bytes():\n    with open(\"Tests/images/hopper.jpg\", \"rb\") as f:\n        with pytest.raises(OSError):\n            ImageFont.truetype(f)\n\n\ndef test_default_font():\n    # Arrange\n    txt = 'This is a \"better than nothing\" default font.'\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    # Act\n    default_font = ImageFont.load_default()\n    draw.text((10, 10), txt, font=default_font)\n\n    # Assert\n    assert_image_equal_tofile(im, \"Tests/images/default_font.png\")\n\n\n@pytest.mark.parametrize(\"mode\", (None, \"1\", \"RGBA\"))\ndef test_getbbox(font, mode):\n    assert (0, 4, 12, 16) == font.getbbox(\"A\", mode)\n\n\ndef test_getbbox_empty(font):\n    # issue #2614, should not crash.\n    assert (0, 0, 0, 0) == font.getbbox(\"\")\n\n\ndef test_render_empty(font):\n    # issue 2666\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    target = im.copy()\n    draw = ImageDraw.Draw(im)\n    # should not crash here.\n    draw.text((10, 10), \"\", font=font)\n    assert_image_equal(im, target)\n\n\ndef test_unicode_pilfont():\n    # should not segfault, should return UnicodeDecodeError\n    # issue #2826\n    font = ImageFont.load_default()\n    with pytest.raises(UnicodeEncodeError):\n        font.getbbox(\"\u2019\")\n\n\ndef test_unicode_extended(layout_engine):\n    # issue #3777\n    text = \"A\\u278A\\U0001F12B\"\n    target = \"Tests/images/unicode_extended.png\"\n\n    ttf = ImageFont.truetype(\n        \"Tests/fonts/NotoSansSymbols-Regular.ttf\",\n        FONT_SIZE,\n        layout_engine=layout_engine,\n    )\n    img = Image.new(\"RGB\", (100, 60))\n    d = ImageDraw.Draw(img)\n    d.text((10, 10), text, font=ttf)\n\n    # fails with 14.7\n    assert_image_similar_tofile(img, target, 6.2)\n\n\n@pytest.mark.parametrize(\n    \"platform, font_directory\",\n    ((\"linux\", \"/usr/local/share/fonts\"), (\"darwin\", \"/System/Library/Fonts\")),\n)\n@pytest.mark.skipif(is_win32(), reason=\"requires Unix or macOS\")\ndef test_find_font(monkeypatch, platform, font_directory):\n    def _test_fake_loading_font(path_to_fake, fontname):\n        # Make a copy of FreeTypeFont so we can patch the original\n        free_type_font = copy.deepcopy(ImageFont.FreeTypeFont)\n        with monkeypatch.context() as m:\n            m.setattr(ImageFont, \"_FreeTypeFont\", free_type_font, raising=False)\n\n            def loadable_font(filepath, size, index, encoding, *args, **kwargs):\n                if filepath == path_to_fake:\n                    return ImageFont._FreeTypeFont(\n                        FONT_PATH, size, index, encoding, *args, **kwargs\n                    )\n                return ImageFont._FreeTypeFont(\n                    filepath, size, index, encoding, *args, **kwargs\n                )\n\n            m.setattr(ImageFont, \"FreeTypeFont\", loadable_font)\n            font = ImageFont.truetype(fontname)\n            # Make sure it's loaded\n            name = font.getname()\n            assert (\"FreeMono\", \"Regular\") == name\n\n    # A lot of mocking here - this is more for hitting code and\n    # catching syntax like errors\n    monkeypatch.setattr(sys, \"platform\", platform)\n    if platform == \"linux\":\n        monkeypatch.setenv(\"XDG_DATA_DIRS\", \"/usr/share/:/usr/local/share/\")\n\n    def fake_walker(path):\n        if path == font_directory:\n            return [\n                (\n                    path,\n                    [],\n                    [\"Arial.ttf\", \"Single.otf\", \"Duplicate.otf\", \"Duplicate.ttf\"],\n                )\n            ]\n        return [(path, [], [\"some_random_font.ttf\"])]\n\n    monkeypatch.setattr(os, \"walk\", fake_walker)\n\n    # Test that the font loads both with and without the extension\n    _test_fake_loading_font(font_directory + \"/Arial.ttf\", \"Arial.ttf\")\n    _test_fake_loading_font(font_directory + \"/Arial.ttf\", \"Arial\")\n\n    # Test that non-ttf fonts can be found without the extension\n    _test_fake_loading_font(font_directory + \"/Single.otf\", \"Single\")\n\n    # Test that ttf fonts are preferred if the extension is not specified\n    _test_fake_loading_font(font_directory + \"/Duplicate.ttf\", \"Duplicate\")\n\n\ndef test_imagefont_getters(font):\n    assert font.getmetrics() == (16, 4)\n    assert font.font.ascent == 16\n    assert font.font.descent == 4\n    assert font.font.height == 20\n    assert font.font.x_ppem == 20\n    assert font.font.y_ppem == 20\n    assert font.font.glyphs == 4177\n    assert font.getbbox(\"A\") == (0, 4, 12, 16)\n    assert font.getbbox(\"AB\") == (0, 4, 24, 16)\n    assert font.getbbox(\"M\") == (0, 4, 12, 16)\n    assert font.getbbox(\"y\") == (0, 7, 12, 20)\n    assert font.getbbox(\"a\") == (0, 7, 12, 16)\n    assert font.getlength(\"A\") == 12\n    assert font.getlength(\"AB\") == 24\n    assert font.getlength(\"M\") == 12\n    assert font.getlength(\"y\") == 12\n    assert font.getlength(\"a\") == 12\n\n\n@pytest.mark.parametrize(\"stroke_width\", (0, 2))\ndef test_getsize_stroke(font, stroke_width):\n    assert font.getbbox(\"A\", stroke_width=stroke_width) == (\n        0 - stroke_width,\n        4 - stroke_width,\n        12 + stroke_width,\n        16 + stroke_width,\n    )\n\n\ndef test_complex_font_settings():\n    t = ImageFont.truetype(FONT_PATH, FONT_SIZE, layout_engine=ImageFont.Layout.BASIC)\n    with pytest.raises(KeyError):\n        t.getmask(\"\u0430\u0431\u0432\u0433\", direction=\"rtl\")\n    with pytest.raises(KeyError):\n        t.getmask(\"\u0430\u0431\u0432\u0433\", features=[\"-kern\"])\n    with pytest.raises(KeyError):\n        t.getmask(\"\u0430\u0431\u0432\u0433\", language=\"sr\")\n\n\ndef test_variation_get(font):\n    freetype = parse_version(features.version_module(\"freetype2\"))\n    if freetype < parse_version(\"2.9.1\"):\n        with pytest.raises(NotImplementedError):\n            font.get_variation_names()\n        with pytest.raises(NotImplementedError):\n            font.get_variation_axes()\n        return\n\n    with pytest.raises(OSError):\n        font.get_variation_names()\n    with pytest.raises(OSError):\n        font.get_variation_axes()\n\n    font = ImageFont.truetype(\"Tests/fonts/AdobeVFPrototype.ttf\")\n    assert font.get_variation_names(), [\n        b\"ExtraLight\",\n        b\"Light\",\n        b\"Regular\",\n        b\"Semibold\",\n        b\"Bold\",\n        b\"Black\",\n        b\"Black Medium Contrast\",\n        b\"Black High Contrast\",\n        b\"Default\",\n    ]\n    assert font.get_variation_axes() == [\n        {\"name\": b\"Weight\", \"minimum\": 200, \"maximum\": 900, \"default\": 389},\n        {\"name\": b\"Contrast\", \"minimum\": 0, \"maximum\": 100, \"default\": 0},\n    ]\n\n    font = ImageFont.truetype(\"Tests/fonts/TINY5x3GX.ttf\")\n    assert font.get_variation_names() == [\n        b\"20\",\n        b\"40\",\n        b\"60\",\n        b\"80\",\n        b\"100\",\n        b\"120\",\n        b\"140\",\n        b\"160\",\n        b\"180\",\n        b\"200\",\n        b\"220\",\n        b\"240\",\n        b\"260\",\n        b\"280\",\n        b\"300\",\n        b\"Regular\",\n    ]\n    assert font.get_variation_axes() == [\n        {\"name\": b\"Size\", \"minimum\": 0, \"maximum\": 300, \"default\": 0}\n    ]\n\n\ndef _check_text(font, path, epsilon):\n    im = Image.new(\"RGB\", (100, 75), \"white\")\n    d = ImageDraw.Draw(im)\n    d.text((10, 10), \"Text\", font=font, fill=\"black\")\n\n    try:\n        assert_image_similar_tofile(im, path, epsilon)\n    except AssertionError:\n        if \"_adobe\" in path:\n            path = path.replace(\"_adobe\", \"_adobe_older_harfbuzz\")\n            assert_image_similar_tofile(im, path, epsilon)\n        else:\n            raise\n\n\ndef test_variation_set_by_name(font):\n    freetype = parse_version(features.version_module(\"freetype2\"))\n    if freetype < parse_version(\"2.9.1\"):\n        with pytest.raises(NotImplementedError):\n            font.set_variation_by_name(\"Bold\")\n        return\n\n    with pytest.raises(OSError):\n        font.set_variation_by_name(\"Bold\")\n\n    font = ImageFont.truetype(\"Tests/fonts/AdobeVFPrototype.ttf\", 36)\n    _check_text(font, \"Tests/images/variation_adobe.png\", 11)\n    for name in [\"Bold\", b\"Bold\"]:\n        font.set_variation_by_name(name)\n        assert font.getname()[1] == \"Bold\"\n    _check_text(font, \"Tests/images/variation_adobe_name.png\", 16)\n\n    font = ImageFont.truetype(\"Tests/fonts/TINY5x3GX.ttf\", 36)\n    _check_text(font, \"Tests/images/variation_tiny.png\", 40)\n    for name in [\"200\", b\"200\"]:\n        font.set_variation_by_name(name)\n        assert font.getname()[1] == \"200\"\n    _check_text(font, \"Tests/images/variation_tiny_name.png\", 40)\n\n\ndef test_variation_set_by_axes(font):\n    freetype = parse_version(features.version_module(\"freetype2\"))\n    if freetype < parse_version(\"2.9.1\"):\n        with pytest.raises(NotImplementedError):\n            font.set_variation_by_axes([100])\n        return\n\n    with pytest.raises(OSError):\n        font.set_variation_by_axes([500, 50])\n\n    font = ImageFont.truetype(\"Tests/fonts/AdobeVFPrototype.ttf\", 36)\n    font.set_variation_by_axes([500, 50])\n    _check_text(font, \"Tests/images/variation_adobe_axes.png\", 11.05)\n\n    font = ImageFont.truetype(\"Tests/fonts/TINY5x3GX.ttf\", 36)\n    font.set_variation_by_axes([100])\n    _check_text(font, \"Tests/images/variation_tiny_axes.png\", 32.5)\n\n\ndef test_textbbox_non_freetypefont():\n    im = Image.new(\"RGB\", (200, 200))\n    d = ImageDraw.Draw(im)\n    default_font = ImageFont.load_default()\n    assert d.textlength(\"test\", font=default_font) == 24\n    assert d.textbbox((0, 0), \"test\", font=default_font) == (0, 0, 24, 11)\n\n\n@pytest.mark.parametrize(\n    \"anchor, left, top\",\n    (\n        # test horizontal anchors\n        (\"ls\", 0, -36),\n        (\"ms\", -64, -36),\n        (\"rs\", -128, -36),\n        # test vertical anchors\n        (\"ma\", -64, 16),\n        (\"mt\", -64, 0),\n        (\"mm\", -64, -17),\n        (\"mb\", -64, -44),\n        (\"md\", -64, -51),\n    ),\n    ids=(\"ls\", \"ms\", \"rs\", \"ma\", \"mt\", \"mm\", \"mb\", \"md\"),\n)\ndef test_anchor(layout_engine, anchor, left, top):\n    name, text = \"quick\", \"Quick\"\n    path = f\"Tests/images/test_anchor_{name}_{anchor}.png\"\n\n    if layout_engine == ImageFont.Layout.RAQM:\n        width, height = (129, 44)\n    else:\n        width, height = (128, 44)\n\n    bbox_expected = (left, top, left + width, top + height)\n\n    f = ImageFont.truetype(\n        \"Tests/fonts/NotoSans-Regular.ttf\", 48, layout_engine=layout_engine\n    )\n\n    im = Image.new(\"RGB\", (200, 200), \"white\")\n    d = ImageDraw.Draw(im)\n    d.line(((0, 100), (200, 100)), \"gray\")\n    d.line(((100, 0), (100, 200)), \"gray\")\n    d.text((100, 100), text, fill=\"black\", anchor=anchor, font=f)\n\n    assert d.textbbox((0, 0), text, f, anchor=anchor) == bbox_expected\n\n    assert_image_similar_tofile(im, path, 7)\n\n\n@pytest.mark.parametrize(\n    \"anchor, align\",\n    (\n        # test horizontal anchors\n        (\"lm\", \"left\"),\n        (\"lm\", \"center\"),\n        (\"lm\", \"right\"),\n        (\"mm\", \"left\"),\n        (\"mm\", \"center\"),\n        (\"mm\", \"right\"),\n        (\"rm\", \"left\"),\n        (\"rm\", \"center\"),\n        (\"rm\", \"right\"),\n        # test vertical anchors\n        (\"ma\", \"center\"),\n        # (\"mm\", \"center\"),  # duplicate\n        (\"md\", \"center\"),\n    ),\n)\ndef test_anchor_multiline(layout_engine, anchor, align):\n    target = f\"Tests/images/test_anchor_multiline_{anchor}_{align}.png\"\n    text = \"a\\nlong\\ntext sample\"\n\n    f = ImageFont.truetype(\n        \"Tests/fonts/NotoSans-Regular.ttf\", 48, layout_engine=layout_engine\n    )\n\n    # test render\n    im = Image.new(\"RGB\", (600, 400), \"white\")\n    d = ImageDraw.Draw(im)\n    d.line(((0, 200), (600, 200)), \"gray\")\n    d.line(((300, 0), (300, 400)), \"gray\")\n    d.multiline_text((300, 200), text, fill=\"black\", anchor=anchor, font=f, align=align)\n\n    assert_image_similar_tofile(im, target, 4)\n\n\ndef test_anchor_invalid(font):\n    im = Image.new(\"RGB\", (100, 100), \"white\")\n    d = ImageDraw.Draw(im)\n    d.font = font\n\n    for anchor in [\"\", \"l\", \"a\", \"lax\", \"sa\", \"xa\", \"lx\"]:\n        with pytest.raises(ValueError):\n            font.getmask2(\"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            font.getbbox(\"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.text((0, 0), \"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.textbbox((0, 0), \"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.multiline_text((0, 0), \"foo\\nbar\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.multiline_textbbox((0, 0), \"foo\\nbar\", anchor=anchor)\n    for anchor in [\"lt\", \"lb\"]:\n        with pytest.raises(ValueError):\n            d.multiline_text((0, 0), \"foo\\nbar\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.multiline_textbbox((0, 0), \"foo\\nbar\", anchor=anchor)\n\n\n@pytest.mark.parametrize(\"bpp\", (1, 2, 4, 8))\ndef test_bitmap_font(layout_engine, bpp):\n    text = \"Bitmap Font\"\n    layout_name = [\"basic\", \"raqm\"][layout_engine]\n    target = f\"Tests/images/bitmap_font_{bpp}_{layout_name}.png\"\n    font = ImageFont.truetype(\n        f\"Tests/fonts/DejaVuSans/DejaVuSans-24-{bpp}-stripped.ttf\",\n        24,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (160, 35), \"white\")\n    draw = ImageDraw.Draw(im)\n    draw.text((2, 2), text, \"black\", font)\n\n    assert_image_equal_tofile(im, target)\n\n\ndef test_bitmap_font_stroke(layout_engine):\n    text = \"Bitmap Font\"\n    layout_name = [\"basic\", \"raqm\"][layout_engine]\n    target = f\"Tests/images/bitmap_font_stroke_{layout_name}.png\"\n    font = ImageFont.truetype(\n        \"Tests/fonts/DejaVuSans/DejaVuSans-24-8-stripped.ttf\",\n        24,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (160, 35), \"white\")\n    draw = ImageDraw.Draw(im)\n    draw.text((2, 2), text, \"black\", font, stroke_width=2, stroke_fill=\"red\")\n\n    assert_image_similar_tofile(im, target, 0.03)\n\n\ndef test_standard_embedded_color(layout_engine):\n    txt = \"Hello World!\"\n    ttf = ImageFont.truetype(FONT_PATH, 40, layout_engine=layout_engine)\n    ttf.getbbox(txt)\n\n    im = Image.new(\"RGB\", (300, 64), \"white\")\n    d = ImageDraw.Draw(im)\n    d.text((10, 10), txt, font=ttf, fill=\"#fa6\", embedded_color=True)\n\n    assert_image_similar_tofile(im, \"Tests/images/standard_embedded.png\", 3.1)\n\n\n@pytest.mark.parametrize(\"fontmode\", (\"1\", \"L\", \"RGBA\"))\ndef test_float_coord(layout_engine, fontmode):\n    txt = \"Hello World!\"\n    ttf = ImageFont.truetype(FONT_PATH, 40, layout_engine=layout_engine)\n\n    im = Image.new(\"RGB\", (300, 64), \"white\")\n    d = ImageDraw.Draw(im)\n    if fontmode == \"1\":\n        d.fontmode = \"1\"\n\n    embedded_color = fontmode == \"RGBA\"\n    d.text((9.5, 9.5), txt, font=ttf, fill=\"#fa6\", embedded_color=embedded_color)\n    try:\n        assert_image_similar_tofile(im, \"Tests/images/text_float_coord.png\", 3.9)\n    except AssertionError:\n        if fontmode == \"1\" and layout_engine == ImageFont.Layout.BASIC:\n            assert_image_similar_tofile(\n                im, \"Tests/images/text_float_coord_1_alt.png\", 1\n            )\n        else:\n            raise\n\n\ndef test_cbdt(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/NotoColorEmoji.ttf\", size=109, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (150, 150), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((10, 10), \"\\U0001f469\", font=font, embedded_color=True)\n\n        assert_image_similar_tofile(im, \"Tests/images/cbdt_notocoloremoji.png\", 6.2)\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or CBDT support\")\n\n\ndef test_cbdt_mask(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/NotoColorEmoji.ttf\", size=109, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (150, 150), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((10, 10), \"\\U0001f469\", \"black\", font=font)\n\n        assert_image_similar_tofile(\n            im, \"Tests/images/cbdt_notocoloremoji_mask.png\", 6.2\n        )\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or CBDT support\")\n\n\ndef test_sbix(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/chromacheck-sbix.woff\", size=300, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (400, 400), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((50, 50), \"\\uE901\", font=font, embedded_color=True)\n\n        assert_image_similar_tofile(im, \"Tests/images/chromacheck-sbix.png\", 1)\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or SBIX support\")\n\n\ndef test_sbix_mask(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/chromacheck-sbix.woff\", size=300, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (400, 400), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((50, 50), \"\\uE901\", (100, 0, 0), font=font)\n\n        assert_image_similar_tofile(im, \"Tests/images/chromacheck-sbix_mask.png\", 1)\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or SBIX support\")\n\n\n@skip_unless_feature_version(\"freetype2\", \"2.10.0\")\ndef test_colr(layout_engine):\n    font = ImageFont.truetype(\n        \"Tests/fonts/BungeeColor-Regular_colr_Windows.ttf\",\n        size=64,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (300, 75), \"white\")\n    d = ImageDraw.Draw(im)\n\n    d.text((15, 5), \"Bungee\", font=font, embedded_color=True)\n\n    assert_image_similar_tofile(im, \"Tests/images/colr_bungee.png\", 21)\n\n\n@skip_unless_feature_version(\"freetype2\", \"2.10.0\")\ndef test_colr_mask(layout_engine):\n    font = ImageFont.truetype(\n        \"Tests/fonts/BungeeColor-Regular_colr_Windows.ttf\",\n        size=64,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (300, 75), \"white\")\n    d = ImageDraw.Draw(im)\n\n    d.text((15, 5), \"Bungee\", \"black\", font=font)\n\n    assert_image_similar_tofile(im, \"Tests/images/colr_bungee_mask.png\", 22)\n\n\ndef test_woff2(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/OpenSans.woff2\",\n            size=64,\n            layout_engine=layout_engine,\n        )\n    except OSError as e:\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"FreeType compiled without brotli or WOFF2 support\")\n\n    im = Image.new(\"RGB\", (350, 100), \"white\")\n    d = ImageDraw.Draw(im)\n\n    d.text((15, 5), \"OpenSans\", \"black\", font=font)\n\n    assert_image_similar_tofile(im, \"Tests/images/test_woff2.png\", 5)\n\n\ndef test_render_mono_size():\n    # issue 4177\n\n    im = Image.new(\"P\", (100, 30), \"white\")\n    draw = ImageDraw.Draw(im)\n    ttf = ImageFont.truetype(\n        \"Tests/fonts/DejaVuSans/DejaVuSans.ttf\",\n        18,\n        layout_engine=ImageFont.Layout.BASIC,\n    )\n\n    draw.text((10, 10), \"r\" * 10, \"black\", ttf)\n    assert_image_equal_tofile(im, \"Tests/images/text_mono.gif\")\n\n\n@pytest.mark.parametrize(\n    \"test_file\",\n    [\n        \"Tests/fonts/oom-e8e927ba6c0d38274a37c1567560eb33baf74627.ttf\",\n        \"Tests/fonts/oom-4da0210eb7081b0bf15bf16cc4c52ce02c1e1bbc.ttf\",\n    ],\n)\ndef test_oom(test_file):\n    with open(test_file, \"rb\") as f:\n        font = ImageFont.truetype(BytesIO(f.read()))\n        with pytest.raises(Image.DecompressionBombError):\n            font.getmask(\"Test Text\")\n\n\ndef test_raqm_missing_warning(monkeypatch):\n    monkeypatch.setattr(ImageFont.core, \"HAVE_RAQM\", False)\n    with pytest.warns(UserWarning) as record:\n        font = ImageFont.truetype(\n            FONT_PATH, FONT_SIZE, layout_engine=ImageFont.Layout.RAQM\n        )\n    assert font.layout_engine == ImageFont.Layout.BASIC\n    assert str(record[-1].message) == (\n        \"Raqm layout was requested, but Raqm is not available. \"\n        \"Falling back to basic layout.\"\n    )\n", ".. py:module:: PIL.ImageFont\n.. py:currentmodule:: PIL.ImageFont\n\n:py:mod:`~PIL.ImageFont` Module\n===============================\n\nThe :py:mod:`~PIL.ImageFont` module defines a class with the same name. Instances of\nthis class store bitmap fonts, and are used with the\n:py:meth:`PIL.ImageDraw.ImageDraw.text` method.\n\nPIL uses its own font file format to store bitmap fonts, limited to 256 characters. You can use\n`pilfont.py <https://github.com/python-pillow/pillow-scripts/blob/main/Scripts/pilfont.py>`_\nfrom `pillow-scripts <https://pypi.org/project/pillow-scripts/>`_ to convert BDF and\nPCF font descriptors (X window font formats) to this format.\n\nStarting with version 1.1.4, PIL can be configured to support TrueType and\nOpenType fonts (as well as other font formats supported by the FreeType\nlibrary). For earlier versions, TrueType support is only available as part of\nthe imToolkit package.\n\nExample\n-------\n\n::\n\n    from PIL import ImageFont, ImageDraw\n\n    draw = ImageDraw.Draw(image)\n\n    # use a bitmap font\n    font = ImageFont.load(\"arial.pil\")\n\n    draw.text((10, 10), \"hello\", font=font)\n\n    # use a truetype font\n    font = ImageFont.truetype(\"arial.ttf\", 15)\n\n    draw.text((10, 25), \"world\", font=font)\n\nFunctions\n---------\n\n.. autofunction:: PIL.ImageFont.load\n.. autofunction:: PIL.ImageFont.load_path\n.. autofunction:: PIL.ImageFont.truetype\n.. autofunction:: PIL.ImageFont.load_default\n\nMethods\n-------\n\n.. autoclass:: PIL.ImageFont.ImageFont\n    :members:\n\n.. autoclass:: PIL.ImageFont.FreeTypeFont\n    :members:\n\n.. autoclass:: PIL.ImageFont.TransposedFont\n    :members:\n    :undoc-members:\n\nConstants\n---------\n\n.. data:: PIL.ImageFont.Layout.BASIC\n\n    Use basic text layout for TrueType font.\n    Advanced features such as text direction are not supported.\n\n.. data:: PIL.ImageFont.Layout.RAQM\n\n    Use Raqm text layout for TrueType font.\n    Advanced features are supported.\n\n    Requires Raqm, you can check support using\n    :py:func:`PIL.features.check_feature` with ``feature=\"raqm\"``.\n", "10.0.0\n------\n\nBackwards Incompatible Changes\n==============================\n\nCategories\n^^^^^^^^^^\n\n``im.category`` has been removed, along with the related ``Image.NORMAL``,\n``Image.SEQUENCE`` and ``Image.CONTAINER`` attributes.\n\nTo determine if an image has multiple frames or not,\n``getattr(im, \"is_animated\", False)`` can be used instead.\n\nTk/Tcl 8.4\n^^^^^^^^^^\n\nSupport for Tk/Tcl 8.4 has been removed.\n\nJpegImagePlugin.convert_dict_qtables\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSince deprecation in Pillow 8.3.0, the ``convert_dict_qtables`` method no longer\nperformed any operations on the data given to it, and has been removed.\n\nImagePalette size parameter\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBefore Pillow 8.3.0, ``ImagePalette`` required palette data of particular lengths by\ndefault, and the ``size`` parameter could be used to override that. Pillow 8.3.0\nremoved the default required length, also removing the need for the ``size`` parameter.\n\nImageShow.Viewer.show_file file argument\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``file`` argument in :py:meth:`~PIL.ImageShow.Viewer.show_file()` has been\nremoved and replaced by ``path``.\n\nIn effect, ``viewer.show_file(\"test.jpg\")`` will continue to work unchanged.\n\nConstants\n^^^^^^^^^\n\nA number of constants have been removed.\nInstead, ``enum.IntEnum`` classes have been added.\n\n=====================================================  ============================================================\nRemoved                                                Use instead\n=====================================================  ============================================================\n``Image.LINEAR``                                       ``Image.BILINEAR`` or ``Image.Resampling.BILINEAR``\n``Image.CUBIC``                                        ``Image.BICUBIC`` or ``Image.Resampling.BICUBIC``\n``Image.ANTIALIAS``                                    ``Image.LANCZOS`` or ``Image.Resampling.LANCZOS``\n``ImageCms.INTENT_PERCEPTUAL``                         ``ImageCms.Intent.PERCEPTUAL``\n``ImageCms.INTENT_RELATIVE_COLORMETRIC``               ``ImageCms.Intent.RELATIVE_COLORMETRIC``\n``ImageCms.INTENT_SATURATION``                         ``ImageCms.Intent.SATURATION``\n``ImageCms.INTENT_ABSOLUTE_COLORIMETRIC``              ``ImageCms.Intent.ABSOLUTE_COLORIMETRIC``\n``ImageCms.DIRECTION_INPUT``                           ``ImageCms.Direction.INPUT``\n``ImageCms.DIRECTION_OUTPUT``                          ``ImageCms.Direction.OUTPUT``\n``ImageCms.DIRECTION_PROOF``                           ``ImageCms.Direction.PROOF``\n``ImageFont.LAYOUT_BASIC``                             ``ImageFont.Layout.BASIC``\n``ImageFont.LAYOUT_RAQM``                              ``ImageFont.Layout.RAQM``\n``BlpImagePlugin.BLP_FORMAT_JPEG``                     ``BlpImagePlugin.Format.JPEG``\n``BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED``           ``BlpImagePlugin.Encoding.UNCOMPRESSED``\n``BlpImagePlugin.BLP_ENCODING_DXT``                    ``BlpImagePlugin.Encoding.DXT``\n``BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA``  ``BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA``\n``BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1``             ``BlpImagePlugin.AlphaEncoding.DXT1``\n``BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3``             ``BlpImagePlugin.AlphaEncoding.DXT3``\n``BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5``             ``BlpImagePlugin.AlphaEncoding.DXT5``\n``FtexImagePlugin.FORMAT_DXT1``                        ``FtexImagePlugin.Format.DXT1``\n``FtexImagePlugin.FORMAT_UNCOMPRESSED``                ``FtexImagePlugin.Format.UNCOMPRESSED``\n``PngImagePlugin.APNG_DISPOSE_OP_NONE``                ``PngImagePlugin.Disposal.OP_NONE``\n``PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND``          ``PngImagePlugin.Disposal.OP_BACKGROUND``\n``PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS``            ``PngImagePlugin.Disposal.OP_PREVIOUS``\n``PngImagePlugin.APNG_BLEND_OP_SOURCE``                ``PngImagePlugin.Blend.OP_SOURCE``\n``PngImagePlugin.APNG_BLEND_OP_OVER``                  ``PngImagePlugin.Blend.OP_OVER``\n=====================================================  ============================================================\n\nFitsStubImagePlugin\n^^^^^^^^^^^^^^^^^^^\n\nThe stub image plugin ``FitsStubImagePlugin`` has been removed.\nFITS images can be read without a handler through :mod:`~PIL.FitsImagePlugin` instead.\n\nFont size and offset methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSeveral functions for computing the size and offset of rendered text have been removed:\n\n=============================================================== =============================================================================================================\nRemoved                                                         Use instead\n=============================================================== =============================================================================================================\n``FreeTypeFont.getsize()`` and ``FreeTypeFont.getoffset()``     :py:meth:`.FreeTypeFont.getbbox` and :py:meth:`.FreeTypeFont.getlength`\n``FreeTypeFont.getsize_multiline()``                            :py:meth:`.ImageDraw.multiline_textbbox`\n``ImageFont.getsize()``                                         :py:meth:`.ImageFont.getbbox` and :py:meth:`.ImageFont.getlength`\n``TransposedFont.getsize()``                                    :py:meth:`.TransposedFont.getbbox` and :py:meth:`.TransposedFont.getlength`\n``ImageDraw.textsize()`` and ``ImageDraw.multiline_textsize()`` :py:meth:`.ImageDraw.textbbox`, :py:meth:`.ImageDraw.textlength` and :py:meth:`.ImageDraw.multiline_textbbox`\n``ImageDraw2.Draw.textsize()``                                  :py:meth:`.ImageDraw2.Draw.textbbox` and :py:meth:`.ImageDraw2.Draw.textlength`\n=============================================================== =============================================================================================================\n\nFreeTypeFont.getmask2 fill parameter\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe undocumented ``fill`` parameter of :py:meth:`.FreeTypeFont.getmask2` has been\nremoved.\n\nPhotoImage.paste box parameter\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``box`` parameter was unused and has been removed.\n\nPyQt5 and PySide2\n^^^^^^^^^^^^^^^^^\n\n`Qt 5 reached end-of-life <https://www.qt.io/blog/qt-5.15-released>`_ on 2020-12-08 for\nopen-source users (and will reach EOL on 2023-12-08 for commercial licence holders).\n\nSupport for PyQt5 and PySide2 has been removed from ``ImageQt``. Upgrade to\n`PyQt6 <https://www.riverbankcomputing.com/static/Docs/PyQt6/>`_ or\n`PySide6 <https://doc.qt.io/qtforpython-6/>`_ instead.\n\nImage.coerce_e\n^^^^^^^^^^^^^^\n\nThis undocumented method has been removed.\n\nDeprecations\n============\n\nPyAccess and Image.USE_CFFI_ACCESS\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSince Pillow's C API is now faster than PyAccess on PyPy,\n:py:mod:`~PIL.PyAccess` has been deprecated and will be removed in Pillow\n11.0.0 (2024-10-15). Pillow's C API will now be used by default on PyPy instead.\n\n``Image.USE_CFFI_ACCESS``, for switching from the C API to PyAccess, is\nsimilarly deprecated.\n\nAPI Changes\n===========\n\nAdded line width parameter to ImageDraw regular_polygon\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAn optional line ``width`` parameter has been added to\n``ImageDraw.Draw.regular_polygon``.\n\nAPI Additions\n=============\n\nAdded ``alpha_only`` argument to ``getbbox()``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:py:meth:`~PIL.Image.Image.getbbox` now accepts a keyword argument of\n``alpha_only``. This is an optional flag, defaulting to ``True``. If ``True``\nand the image has an alpha channel, trim transparent pixels. Otherwise, trim\npixels when all channels are zero.\n\nSecurity\n========\n\nLimit size even if one dimension is zero\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen performing decompression bomb checks, Pillow did not reject images with\nexcessive width and zero height, or zero width and excessive height. That has\nnow been fixed.\n\nThis effectively dates to the PIL fork, since problem images would still have\nbeen processed before Pillow started checking for decompression bombs.\n\nOther Changes\n=============\n\n32-bit wheels\n^^^^^^^^^^^^^\n\n32-bit wheels are no longer provided.\n\nSupport display_jpeg() in IPython\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn addition to ``display()`` and ``display_png``, ``display_jpeg()`` can now\nalso be used to display images in IPython::\n\n    from PIL import Image\n    from IPython.display import display_jpeg\n\n    im = Image.new(\"RGB\", (100, 100), (255, 0, 0))\n    display_jpeg(im)\n\nSupport reading signed 8-bit TIFF images\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTIFF images with signed integer data, 8 bits per sample and a photometric\ninterpretaton of BlackIsZero can now be read.\n", "#\n# The Python Imaging Library.\n# $Id$\n#\n# PIL raster font management\n#\n# History:\n# 1996-08-07 fl   created (experimental)\n# 1997-08-25 fl   minor adjustments to handle fonts from pilfont 0.3\n# 1999-02-06 fl   rewrote most font management stuff in C\n# 1999-03-17 fl   take pth files into account in load_path (from Richard Jones)\n# 2001-02-17 fl   added freetype support\n# 2001-05-09 fl   added TransposedFont wrapper class\n# 2002-03-04 fl   make sure we have a \"L\" or \"1\" font\n# 2002-12-04 fl   skip non-directory entries in the system path\n# 2003-04-29 fl   add embedded default font\n# 2003-09-27 fl   added support for truetype charmap encodings\n#\n# Todo:\n# Adapt to PILFONT2 format (16-bit fonts, compressed, single file)\n#\n# Copyright (c) 1997-2003 by Secret Labs AB\n# Copyright (c) 1996-2003 by Fredrik Lundh\n#\n# See the README file for information on usage and redistribution.\n#\n\nimport base64\nimport os\nimport sys\nimport warnings\nfrom enum import IntEnum\nfrom io import BytesIO\n\nfrom . import Image\nfrom ._util import is_directory, is_path\n\n\nclass Layout(IntEnum):\n    BASIC = 0\n    RAQM = 1\n\n\ntry:\n    from . import _imagingft as core\nexcept ImportError as ex:\n    from ._util import DeferredError\n\n    core = DeferredError(ex)\n\n\n# FIXME: add support for pilfont2 format (see FontFile.py)\n\n# --------------------------------------------------------------------\n# Font metrics format:\n#       \"PILfont\" LF\n#       fontdescriptor LF\n#       (optional) key=value... LF\n#       \"DATA\" LF\n#       binary data: 256*10*2 bytes (dx, dy, dstbox, srcbox)\n#\n# To place a character, cut out srcbox and paste at dstbox,\n# relative to the character position.  Then move the character\n# position according to dx, dy.\n# --------------------------------------------------------------------\n\n\nclass ImageFont:\n    \"\"\"PIL font wrapper\"\"\"\n\n    def _load_pilfont(self, filename):\n        with open(filename, \"rb\") as fp:\n            image = None\n            for ext in (\".png\", \".gif\", \".pbm\"):\n                if image:\n                    image.close()\n                try:\n                    fullname = os.path.splitext(filename)[0] + ext\n                    image = Image.open(fullname)\n                except Exception:\n                    pass\n                else:\n                    if image and image.mode in (\"1\", \"L\"):\n                        break\n            else:\n                if image:\n                    image.close()\n                msg = \"cannot find glyph data file\"\n                raise OSError(msg)\n\n            self.file = fullname\n\n            self._load_pilfont_data(fp, image)\n            image.close()\n\n    def _load_pilfont_data(self, file, image):\n        # read PILfont header\n        if file.readline() != b\"PILfont\\n\":\n            msg = \"Not a PILfont file\"\n            raise SyntaxError(msg)\n        file.readline().split(b\";\")\n        self.info = []  # FIXME: should be a dictionary\n        while True:\n            s = file.readline()\n            if not s or s == b\"DATA\\n\":\n                break\n            self.info.append(s)\n\n        # read PILfont metrics\n        data = file.read(256 * 20)\n\n        # check image\n        if image.mode not in (\"1\", \"L\"):\n            msg = \"invalid font image mode\"\n            raise TypeError(msg)\n\n        image.load()\n\n        self.font = Image.core.font(image.im, data)\n\n    def getmask(self, text, mode=\"\", *args, **kwargs):\n        \"\"\"\n        Create a bitmap for the text.\n\n        If the font uses antialiasing, the bitmap should have mode ``L`` and use a\n        maximum value of 255. Otherwise, it should have mode ``1``.\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n                     .. versionadded:: 1.1.5\n\n        :return: An internal PIL storage memory instance as defined by the\n                 :py:mod:`PIL.Image.core` interface module.\n        \"\"\"\n        return self.font.getmask(text, mode)\n\n    def getbbox(self, text, *args, **kwargs):\n        \"\"\"\n        Returns bounding box (in pixels) of given text.\n\n        .. versionadded:: 9.2.0\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n        :return: ``(left, top, right, bottom)`` bounding box\n        \"\"\"\n        width, height = self.font.getsize(text)\n        return 0, 0, width, height\n\n    def getlength(self, text, *args, **kwargs):\n        \"\"\"\n        Returns length (in pixels) of given text.\n        This is the amount by which following text should be offset.\n\n        .. versionadded:: 9.2.0\n        \"\"\"\n        width, height = self.font.getsize(text)\n        return width\n\n\n##\n# Wrapper for FreeType fonts.  Application code should use the\n# <b>truetype</b> factory function to create font objects.\n\n\nclass FreeTypeFont:\n    \"\"\"FreeType font wrapper (requires _imagingft service)\"\"\"\n\n    def __init__(self, font=None, size=10, index=0, encoding=\"\", layout_engine=None):\n        # FIXME: use service provider instead\n\n        self.path = font\n        self.size = size\n        self.index = index\n        self.encoding = encoding\n\n        if layout_engine not in (Layout.BASIC, Layout.RAQM):\n            layout_engine = Layout.BASIC\n            if core.HAVE_RAQM:\n                layout_engine = Layout.RAQM\n        elif layout_engine == Layout.RAQM and not core.HAVE_RAQM:\n            warnings.warn(\n                \"Raqm layout was requested, but Raqm is not available. \"\n                \"Falling back to basic layout.\"\n            )\n            layout_engine = Layout.BASIC\n\n        self.layout_engine = layout_engine\n\n        def load_from_bytes(f):\n            self.font_bytes = f.read()\n            self.font = core.getfont(\n                \"\", size, index, encoding, self.font_bytes, layout_engine\n            )\n\n        if is_path(font):\n            if sys.platform == \"win32\":\n                font_bytes_path = font if isinstance(font, bytes) else font.encode()\n                try:\n                    font_bytes_path.decode(\"ascii\")\n                except UnicodeDecodeError:\n                    # FreeType cannot load fonts with non-ASCII characters on Windows\n                    # So load it into memory first\n                    with open(font, \"rb\") as f:\n                        load_from_bytes(f)\n                    return\n            self.font = core.getfont(\n                font, size, index, encoding, layout_engine=layout_engine\n            )\n        else:\n            load_from_bytes(font)\n\n    def __getstate__(self):\n        return [self.path, self.size, self.index, self.encoding, self.layout_engine]\n\n    def __setstate__(self, state):\n        path, size, index, encoding, layout_engine = state\n        self.__init__(path, size, index, encoding, layout_engine)\n\n    def getname(self):\n        \"\"\"\n        :return: A tuple of the font family (e.g. Helvetica) and the font style\n            (e.g. Bold)\n        \"\"\"\n        return self.font.family, self.font.style\n\n    def getmetrics(self):\n        \"\"\"\n        :return: A tuple of the font ascent (the distance from the baseline to\n            the highest outline point) and descent (the distance from the\n            baseline to the lowest outline point, a negative value)\n        \"\"\"\n        return self.font.ascent, self.font.descent\n\n    def getlength(self, text, mode=\"\", direction=None, features=None, language=None):\n        \"\"\"\n        Returns length (in pixels with 1/64 precision) of given text when rendered\n        in font with provided direction, features, and language.\n\n        This is the amount by which following text should be offset.\n        Text bounding box may extend past the length in some fonts,\n        e.g. when using italics or accents.\n\n        The result is returned as a float; it is a whole number if using basic layout.\n\n        Note that the sum of two lengths may not equal the length of a concatenated\n        string due to kerning. If you need to adjust for kerning, include the following\n        character and subtract its length.\n\n        For example, instead of ::\n\n          hello = font.getlength(\"Hello\")\n          world = font.getlength(\"World\")\n          hello_world = hello + world  # not adjusted for kerning\n          assert hello_world == font.getlength(\"HelloWorld\")  # may fail\n\n        use ::\n\n          hello = font.getlength(\"HelloW\") - font.getlength(\"W\")  # adjusted for kerning\n          world = font.getlength(\"World\")\n          hello_world = hello + world  # adjusted for kerning\n          assert hello_world == font.getlength(\"HelloWorld\")  # True\n\n        or disable kerning with (requires libraqm) ::\n\n          hello = draw.textlength(\"Hello\", font, features=[\"-kern\"])\n          world = draw.textlength(\"World\", font, features=[\"-kern\"])\n          hello_world = hello + world  # kerning is disabled, no need to adjust\n          assert hello_world == draw.textlength(\"HelloWorld\", font, features=[\"-kern\"])\n\n        .. versionadded:: 8.0.0\n\n        :param text: Text to measure.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n        :return: Width for horizontal, height for vertical text.\n        \"\"\"\n        return self.font.getlength(text, mode, direction, features, language) / 64\n\n    def getbbox(\n        self,\n        text,\n        mode=\"\",\n        direction=None,\n        features=None,\n        language=None,\n        stroke_width=0,\n        anchor=None,\n    ):\n        \"\"\"\n        Returns bounding box (in pixels) of given text relative to given anchor\n        when rendered in font with provided direction, features, and language.\n\n        Use :py:meth:`getlength()` to get the offset of following text with\n        1/64 pixel precision. The bounding box includes extra margins for\n        some fonts, e.g. italics or accents.\n\n        .. versionadded:: 8.0.0\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n        :param stroke_width: The width of the text stroke.\n\n        :param anchor:  The text anchor alignment. Determines the relative location of\n                        the anchor to the text. The default alignment is top left.\n                        See :ref:`text-anchors` for valid values.\n\n        :return: ``(left, top, right, bottom)`` bounding box\n        \"\"\"\n        size, offset = self.font.getsize(\n            text, mode, direction, features, language, anchor\n        )\n        left, top = offset[0] - stroke_width, offset[1] - stroke_width\n        width, height = size[0] + 2 * stroke_width, size[1] + 2 * stroke_width\n        return left, top, left + width, top + height\n\n    def getmask(\n        self,\n        text,\n        mode=\"\",\n        direction=None,\n        features=None,\n        language=None,\n        stroke_width=0,\n        anchor=None,\n        ink=0,\n        start=None,\n    ):\n        \"\"\"\n        Create a bitmap for the text.\n\n        If the font uses antialiasing, the bitmap should have mode ``L`` and use a\n        maximum value of 255. If the font has embedded color data, the bitmap\n        should have mode ``RGBA``. Otherwise, it should have mode ``1``.\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n                     .. versionadded:: 1.1.5\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n                          .. versionadded:: 4.2.0\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n                         .. versionadded:: 4.2.0\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n                         .. versionadded:: 6.0.0\n\n        :param stroke_width: The width of the text stroke.\n\n                         .. versionadded:: 6.2.0\n\n        :param anchor:  The text anchor alignment. Determines the relative location of\n                        the anchor to the text. The default alignment is top left.\n                        See :ref:`text-anchors` for valid values.\n\n                         .. versionadded:: 8.0.0\n\n        :param ink: Foreground ink for rendering in RGBA mode.\n\n                         .. versionadded:: 8.0.0\n\n        :param start: Tuple of horizontal and vertical offset, as text may render\n                      differently when starting at fractional coordinates.\n\n                         .. versionadded:: 9.4.0\n\n        :return: An internal PIL storage memory instance as defined by the\n                 :py:mod:`PIL.Image.core` interface module.\n        \"\"\"\n        return self.getmask2(\n            text,\n            mode,\n            direction=direction,\n            features=features,\n            language=language,\n            stroke_width=stroke_width,\n            anchor=anchor,\n            ink=ink,\n            start=start,\n        )[0]\n\n    def getmask2(\n        self,\n        text,\n        mode=\"\",\n        direction=None,\n        features=None,\n        language=None,\n        stroke_width=0,\n        anchor=None,\n        ink=0,\n        start=None,\n        *args,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a bitmap for the text.\n\n        If the font uses antialiasing, the bitmap should have mode ``L`` and use a\n        maximum value of 255. If the font has embedded color data, the bitmap\n        should have mode ``RGBA``. Otherwise, it should have mode ``1``.\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n                     .. versionadded:: 1.1.5\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n                          .. versionadded:: 4.2.0\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n                         .. versionadded:: 4.2.0\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n                         .. versionadded:: 6.0.0\n\n        :param stroke_width: The width of the text stroke.\n\n                         .. versionadded:: 6.2.0\n\n        :param anchor:  The text anchor alignment. Determines the relative location of\n                        the anchor to the text. The default alignment is top left.\n                        See :ref:`text-anchors` for valid values.\n\n                         .. versionadded:: 8.0.0\n\n        :param ink: Foreground ink for rendering in RGBA mode.\n\n                         .. versionadded:: 8.0.0\n\n        :param start: Tuple of horizontal and vertical offset, as text may render\n                      differently when starting at fractional coordinates.\n\n                         .. versionadded:: 9.4.0\n\n        :return: A tuple of an internal PIL storage memory instance as defined by the\n                 :py:mod:`PIL.Image.core` interface module, and the text offset, the\n                 gap between the starting coordinate and the first marking\n        \"\"\"\n        if start is None:\n            start = (0, 0)\n        im, size, offset = self.font.render(\n            text,\n            Image.core.fill,\n            mode,\n            direction,\n            features,\n            language,\n            stroke_width,\n            anchor,\n            ink,\n            start[0],\n            start[1],\n            Image.MAX_IMAGE_PIXELS,\n        )\n        Image._decompression_bomb_check(size)\n        return im, offset\n\n    def font_variant(\n        self, font=None, size=None, index=None, encoding=None, layout_engine=None\n    ):\n        \"\"\"\n        Create a copy of this FreeTypeFont object,\n        using any specified arguments to override the settings.\n\n        Parameters are identical to the parameters used to initialize this\n        object.\n\n        :return: A FreeTypeFont object.\n        \"\"\"\n        if font is None:\n            try:\n                font = BytesIO(self.font_bytes)\n            except AttributeError:\n                font = self.path\n        return FreeTypeFont(\n            font=font,\n            size=self.size if size is None else size,\n            index=self.index if index is None else index,\n            encoding=self.encoding if encoding is None else encoding,\n            layout_engine=layout_engine or self.layout_engine,\n        )\n\n    def get_variation_names(self):\n        \"\"\"\n        :returns: A list of the named styles in a variation font.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        try:\n            names = self.font.getvarnames()\n        except AttributeError as e:\n            msg = \"FreeType 2.9.1 or greater is required\"\n            raise NotImplementedError(msg) from e\n        return [name.replace(b\"\\x00\", b\"\") for name in names]\n\n    def set_variation_by_name(self, name):\n        \"\"\"\n        :param name: The name of the style.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        names = self.get_variation_names()\n        if not isinstance(name, bytes):\n            name = name.encode()\n        index = names.index(name) + 1\n\n        if index == getattr(self, \"_last_variation_index\", None):\n            # When the same name is set twice in a row,\n            # there is an 'unknown freetype error'\n            # https://savannah.nongnu.org/bugs/?56186\n            return\n        self._last_variation_index = index\n\n        self.font.setvarname(index)\n\n    def get_variation_axes(self):\n        \"\"\"\n        :returns: A list of the axes in a variation font.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        try:\n            axes = self.font.getvaraxes()\n        except AttributeError as e:\n            msg = \"FreeType 2.9.1 or greater is required\"\n            raise NotImplementedError(msg) from e\n        for axis in axes:\n            axis[\"name\"] = axis[\"name\"].replace(b\"\\x00\", b\"\")\n        return axes\n\n    def set_variation_by_axes(self, axes):\n        \"\"\"\n        :param axes: A list of values for each axis.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        try:\n            self.font.setvaraxes(axes)\n        except AttributeError as e:\n            msg = \"FreeType 2.9.1 or greater is required\"\n            raise NotImplementedError(msg) from e\n\n\nclass TransposedFont:\n    \"\"\"Wrapper for writing rotated or mirrored text\"\"\"\n\n    def __init__(self, font, orientation=None):\n        \"\"\"\n        Wrapper that creates a transposed font from any existing font\n        object.\n\n        :param font: A font object.\n        :param orientation: An optional orientation.  If given, this should\n            be one of Image.Transpose.FLIP_LEFT_RIGHT, Image.Transpose.FLIP_TOP_BOTTOM,\n            Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_180, or\n            Image.Transpose.ROTATE_270.\n        \"\"\"\n        self.font = font\n        self.orientation = orientation  # any 'transpose' argument, or None\n\n    def getmask(self, text, mode=\"\", *args, **kwargs):\n        im = self.font.getmask(text, mode, *args, **kwargs)\n        if self.orientation is not None:\n            return im.transpose(self.orientation)\n        return im\n\n    def getbbox(self, text, *args, **kwargs):\n        # TransposedFont doesn't support getmask2, move top-left point to (0, 0)\n        # this has no effect on ImageFont and simulates anchor=\"lt\" for FreeTypeFont\n        left, top, right, bottom = self.font.getbbox(text, *args, **kwargs)\n        width = right - left\n        height = bottom - top\n        if self.orientation in (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270):\n            return 0, 0, height, width\n        return 0, 0, width, height\n\n    def getlength(self, text, *args, **kwargs):\n        if self.orientation in (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270):\n            msg = \"text length is undefined for text rotated by 90 or 270 degrees\"\n            raise ValueError(msg)\n        return self.font.getlength(text, *args, **kwargs)\n\n\ndef load(filename):\n    \"\"\"\n    Load a font file.  This function loads a font object from the given\n    bitmap font file, and returns the corresponding font object.\n\n    :param filename: Name of font file.\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n    f = ImageFont()\n    f._load_pilfont(filename)\n    return f\n\n\ndef truetype(font=None, size=10, index=0, encoding=\"\", layout_engine=None):\n    \"\"\"\n    Load a TrueType or OpenType font from a file or file-like object,\n    and create a font object.\n    This function loads a font object from the given file or file-like\n    object, and creates a font object for a font of the given size.\n\n    Pillow uses FreeType to open font files. On Windows, be aware that FreeType\n    will keep the file open as long as the FreeTypeFont object exists. Windows\n    limits the number of files that can be open in C at once to 512, so if many\n    fonts are opened simultaneously and that limit is approached, an\n    ``OSError`` may be thrown, reporting that FreeType \"cannot open resource\".\n    A workaround would be to copy the file(s) into memory, and open that instead.\n\n    This function requires the _imagingft service.\n\n    :param font: A filename or file-like object containing a TrueType font.\n                 If the file is not found in this filename, the loader may also\n                 search in other directories, such as the :file:`fonts/`\n                 directory on Windows or :file:`/Library/Fonts/`,\n                 :file:`/System/Library/Fonts/` and :file:`~/Library/Fonts/` on\n                 macOS.\n\n    :param size: The requested size, in pixels.\n    :param index: Which font face to load (default is first available face).\n    :param encoding: Which font encoding to use (default is Unicode). Possible\n                     encodings include (see the FreeType documentation for more\n                     information):\n\n                     * \"unic\" (Unicode)\n                     * \"symb\" (Microsoft Symbol)\n                     * \"ADOB\" (Adobe Standard)\n                     * \"ADBE\" (Adobe Expert)\n                     * \"ADBC\" (Adobe Custom)\n                     * \"armn\" (Apple Roman)\n                     * \"sjis\" (Shift JIS)\n                     * \"gb  \" (PRC)\n                     * \"big5\"\n                     * \"wans\" (Extended Wansung)\n                     * \"joha\" (Johab)\n                     * \"lat1\" (Latin-1)\n\n                     This specifies the character set to use. It does not alter the\n                     encoding of any text provided in subsequent operations.\n    :param layout_engine: Which layout engine to use, if available:\n                     :data:`.ImageFont.Layout.BASIC` or :data:`.ImageFont.Layout.RAQM`.\n                     If it is available, Raqm layout will be used by default.\n                     Otherwise, basic layout will be used.\n\n                     Raqm layout is recommended for all non-English text. If Raqm layout\n                     is not required, basic layout will have better performance.\n\n                     You can check support for Raqm layout using\n                     :py:func:`PIL.features.check_feature` with ``feature=\"raqm\"``.\n\n                     .. versionadded:: 4.2.0\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n\n    def freetype(font):\n        return FreeTypeFont(font, size, index, encoding, layout_engine)\n\n    try:\n        return freetype(font)\n    except OSError:\n        if not is_path(font):\n            raise\n        ttf_filename = os.path.basename(font)\n\n        dirs = []\n        if sys.platform == \"win32\":\n            # check the windows font repository\n            # NOTE: must use uppercase WINDIR, to work around bugs in\n            # 1.5.2's os.environ.get()\n            windir = os.environ.get(\"WINDIR\")\n            if windir:\n                dirs.append(os.path.join(windir, \"fonts\"))\n        elif sys.platform in (\"linux\", \"linux2\"):\n            lindirs = os.environ.get(\"XDG_DATA_DIRS\")\n            if not lindirs:\n                # According to the freedesktop spec, XDG_DATA_DIRS should\n                # default to /usr/share\n                lindirs = \"/usr/share\"\n            dirs += [os.path.join(lindir, \"fonts\") for lindir in lindirs.split(\":\")]\n        elif sys.platform == \"darwin\":\n            dirs += [\n                \"/Library/Fonts\",\n                \"/System/Library/Fonts\",\n                os.path.expanduser(\"~/Library/Fonts\"),\n            ]\n\n        ext = os.path.splitext(ttf_filename)[1]\n        first_font_with_a_different_extension = None\n        for directory in dirs:\n            for walkroot, walkdir, walkfilenames in os.walk(directory):\n                for walkfilename in walkfilenames:\n                    if ext and walkfilename == ttf_filename:\n                        return freetype(os.path.join(walkroot, walkfilename))\n                    elif not ext and os.path.splitext(walkfilename)[0] == ttf_filename:\n                        fontpath = os.path.join(walkroot, walkfilename)\n                        if os.path.splitext(fontpath)[1] == \".ttf\":\n                            return freetype(fontpath)\n                        if not ext and first_font_with_a_different_extension is None:\n                            first_font_with_a_different_extension = fontpath\n        if first_font_with_a_different_extension:\n            return freetype(first_font_with_a_different_extension)\n        raise\n\n\ndef load_path(filename):\n    \"\"\"\n    Load font file. Same as :py:func:`~PIL.ImageFont.load`, but searches for a\n    bitmap font along the Python path.\n\n    :param filename: Name of font file.\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n    for directory in sys.path:\n        if is_directory(directory):\n            if not isinstance(filename, str):\n                filename = filename.decode(\"utf-8\")\n            try:\n                return load(os.path.join(directory, filename))\n            except OSError:\n                pass\n    msg = \"cannot find font file\"\n    raise OSError(msg)\n\n\ndef load_default():\n    \"\"\"Load a \"better than nothing\" default font.\n\n    .. versionadded:: 1.1.4\n\n    :return: A font object.\n    \"\"\"\n    f = ImageFont()\n    f._load_pilfont_data(\n        # courB08\n        BytesIO(\n            base64.b64decode(\n                b\"\"\"\nUElMZm9udAo7Ozs7OzsxMDsKREFUQQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAA//8AAQAAAAAAAAABAAEA\nBgAAAAH/+gADAAAAAQAAAAMABgAGAAAAAf/6AAT//QADAAAABgADAAYAAAAA//kABQABAAYAAAAL\nAAgABgAAAAD/+AAFAAEACwAAABAACQAGAAAAAP/5AAUAAAAQAAAAFQAHAAYAAP////oABQAAABUA\nAAAbAAYABgAAAAH/+QAE//wAGwAAAB4AAwAGAAAAAf/5AAQAAQAeAAAAIQAIAAYAAAAB//kABAAB\nACEAAAAkAAgABgAAAAD/+QAE//0AJAAAACgABAAGAAAAAP/6AAX//wAoAAAALQAFAAYAAAAB//8A\nBAACAC0AAAAwAAMABgAAAAD//AAF//0AMAAAADUAAQAGAAAAAf//AAMAAAA1AAAANwABAAYAAAAB\n//kABQABADcAAAA7AAgABgAAAAD/+QAFAAAAOwAAAEAABwAGAAAAAP/5AAYAAABAAAAARgAHAAYA\nAAAA//kABQAAAEYAAABLAAcABgAAAAD/+QAFAAAASwAAAFAABwAGAAAAAP/5AAYAAABQAAAAVgAH\nAAYAAAAA//kABQAAAFYAAABbAAcABgAAAAD/+QAFAAAAWwAAAGAABwAGAAAAAP/5AAUAAABgAAAA\nZQAHAAYAAAAA//kABQAAAGUAAABqAAcABgAAAAD/+QAFAAAAagAAAG8ABwAGAAAAAf/8AAMAAABv\nAAAAcQAEAAYAAAAA//wAAwACAHEAAAB0AAYABgAAAAD/+gAE//8AdAAAAHgABQAGAAAAAP/7AAT/\n/gB4AAAAfAADAAYAAAAB//oABf//AHwAAACAAAUABgAAAAD/+gAFAAAAgAAAAIUABgAGAAAAAP/5\nAAYAAQCFAAAAiwAIAAYAAP////oABgAAAIsAAACSAAYABgAA////+gAFAAAAkgAAAJgABgAGAAAA\nAP/6AAUAAACYAAAAnQAGAAYAAP////oABQAAAJ0AAACjAAYABgAA////+gAFAAAAowAAAKkABgAG\nAAD////6AAUAAACpAAAArwAGAAYAAAAA//oABQAAAK8AAAC0AAYABgAA////+gAGAAAAtAAAALsA\nBgAGAAAAAP/6AAQAAAC7AAAAvwAGAAYAAP////oABQAAAL8AAADFAAYABgAA////+gAGAAAAxQAA\nAMwABgAGAAD////6AAUAAADMAAAA0gAGAAYAAP////oABQAAANIAAADYAAYABgAA////+gAGAAAA\n2AAAAN8ABgAGAAAAAP/6AAUAAADfAAAA5AAGAAYAAP////oABQAAAOQAAADqAAYABgAAAAD/+gAF\nAAEA6gAAAO8ABwAGAAD////6AAYAAADvAAAA9gAGAAYAAAAA//oABQAAAPYAAAD7AAYABgAA////\n+gAFAAAA+wAAAQEABgAGAAD////6AAYAAAEBAAABCAAGAAYAAP////oABgAAAQgAAAEPAAYABgAA\n////+gAGAAABDwAAARYABgAGAAAAAP/6AAYAAAEWAAABHAAGAAYAAP////oABgAAARwAAAEjAAYA\nBgAAAAD/+gAFAAABIwAAASgABgAGAAAAAf/5AAQAAQEoAAABKwAIAAYAAAAA//kABAABASsAAAEv\nAAgABgAAAAH/+QAEAAEBLwAAATIACAAGAAAAAP/5AAX//AEyAAABNwADAAYAAAAAAAEABgACATcA\nAAE9AAEABgAAAAH/+QAE//wBPQAAAUAAAwAGAAAAAP/7AAYAAAFAAAABRgAFAAYAAP////kABQAA\nAUYAAAFMAAcABgAAAAD/+wAFAAABTAAAAVEABQAGAAAAAP/5AAYAAAFRAAABVwAHAAYAAAAA//sA\nBQAAAVcAAAFcAAUABgAAAAD/+QAFAAABXAAAAWEABwAGAAAAAP/7AAYAAgFhAAABZwAHAAYAAP//\n//kABQAAAWcAAAFtAAcABgAAAAD/+QAGAAABbQAAAXMABwAGAAAAAP/5AAQAAgFzAAABdwAJAAYA\nAP////kABgAAAXcAAAF+AAcABgAAAAD/+QAGAAABfgAAAYQABwAGAAD////7AAUAAAGEAAABigAF\nAAYAAP////sABQAAAYoAAAGQAAUABgAAAAD/+wAFAAABkAAAAZUABQAGAAD////7AAUAAgGVAAAB\nmwAHAAYAAAAA//sABgACAZsAAAGhAAcABgAAAAD/+wAGAAABoQAAAacABQAGAAAAAP/7AAYAAAGn\nAAABrQAFAAYAAAAA//kABgAAAa0AAAGzAAcABgAA////+wAGAAABswAAAboABQAGAAD////7AAUA\nAAG6AAABwAAFAAYAAP////sABgAAAcAAAAHHAAUABgAAAAD/+wAGAAABxwAAAc0ABQAGAAD////7\nAAYAAgHNAAAB1AAHAAYAAAAA//sABQAAAdQAAAHZAAUABgAAAAH/+QAFAAEB2QAAAd0ACAAGAAAA\nAv/6AAMAAQHdAAAB3gAHAAYAAAAA//kABAABAd4AAAHiAAgABgAAAAD/+wAF//0B4gAAAecAAgAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAB\n//sAAwACAecAAAHpAAcABgAAAAD/+QAFAAEB6QAAAe4ACAAGAAAAAP/5AAYAAAHuAAAB9AAHAAYA\nAAAA//oABf//AfQAAAH5AAUABgAAAAD/+QAGAAAB+QAAAf8ABwAGAAAAAv/5AAMAAgH/AAACAAAJ\nAAYAAAAA//kABQABAgAAAAIFAAgABgAAAAH/+gAE//sCBQAAAggAAQAGAAAAAP/5AAYAAAIIAAAC\nDgAHAAYAAAAB//kABf/+Ag4AAAISAAUABgAA////+wAGAAACEgAAAhkABQAGAAAAAP/7AAX//gIZ\nAAACHgADAAYAAAAA//wABf/9Ah4AAAIjAAEABgAAAAD/+QAHAAACIwAAAioABwAGAAAAAP/6AAT/\n+wIqAAACLgABAAYAAAAA//kABP/8Ai4AAAIyAAMABgAAAAD/+gAFAAACMgAAAjcABgAGAAAAAf/5\nAAT//QI3AAACOgAEAAYAAAAB//kABP/9AjoAAAI9AAQABgAAAAL/+QAE//sCPQAAAj8AAgAGAAD/\n///7AAYAAgI/AAACRgAHAAYAAAAA//kABgABAkYAAAJMAAgABgAAAAH//AAD//0CTAAAAk4AAQAG\nAAAAAf//AAQAAgJOAAACUQADAAYAAAAB//kABP/9AlEAAAJUAAQABgAAAAH/+QAF//4CVAAAAlgA\nBQAGAAD////7AAYAAAJYAAACXwAFAAYAAP////kABgAAAl8AAAJmAAcABgAA////+QAGAAACZgAA\nAm0ABwAGAAD////5AAYAAAJtAAACdAAHAAYAAAAA//sABQACAnQAAAJ5AAcABgAA////9wAGAAAC\neQAAAoAACQAGAAD////3AAYAAAKAAAAChwAJAAYAAP////cABgAAAocAAAKOAAkABgAA////9wAG\nAAACjgAAApUACQAGAAD////4AAYAAAKVAAACnAAIAAYAAP////cABgAAApwAAAKjAAkABgAA////\n+gAGAAACowAAAqoABgAGAAAAAP/6AAUAAgKqAAACrwAIAAYAAP////cABQAAAq8AAAK1AAkABgAA\n////9wAFAAACtQAAArsACQAGAAD////3AAUAAAK7AAACwQAJAAYAAP////gABQAAAsEAAALHAAgA\nBgAAAAD/9wAEAAACxwAAAssACQAGAAAAAP/3AAQAAALLAAACzwAJAAYAAAAA//cABAAAAs8AAALT\nAAkABgAAAAD/+AAEAAAC0wAAAtcACAAGAAD////6AAUAAALXAAAC3QAGAAYAAP////cABgAAAt0A\nAALkAAkABgAAAAD/9wAFAAAC5AAAAukACQAGAAAAAP/3AAUAAALpAAAC7gAJAAYAAAAA//cABQAA\nAu4AAALzAAkABgAAAAD/9wAFAAAC8wAAAvgACQAGAAAAAP/4AAUAAAL4AAAC/QAIAAYAAAAA//oA\nBf//Av0AAAMCAAUABgAA////+gAGAAADAgAAAwkABgAGAAD////3AAYAAAMJAAADEAAJAAYAAP//\n//cABgAAAxAAAAMXAAkABgAA////9wAGAAADFwAAAx4ACQAGAAD////4AAYAAAAAAAoABwASAAYA\nAP////cABgAAAAcACgAOABMABgAA////+gAFAAAADgAKABQAEAAGAAD////6AAYAAAAUAAoAGwAQ\nAAYAAAAA//gABgAAABsACgAhABIABgAAAAD/+AAGAAAAIQAKACcAEgAGAAAAAP/4AAYAAAAnAAoA\nLQASAAYAAAAA//gABgAAAC0ACgAzABIABgAAAAD/+QAGAAAAMwAKADkAEQAGAAAAAP/3AAYAAAA5\nAAoAPwATAAYAAP////sABQAAAD8ACgBFAA8ABgAAAAD/+wAFAAIARQAKAEoAEQAGAAAAAP/4AAUA\nAABKAAoATwASAAYAAAAA//gABQAAAE8ACgBUABIABgAAAAD/+AAFAAAAVAAKAFkAEgAGAAAAAP/5\nAAUAAABZAAoAXgARAAYAAAAA//gABgAAAF4ACgBkABIABgAAAAD/+AAGAAAAZAAKAGoAEgAGAAAA\nAP/4AAYAAABqAAoAcAASAAYAAAAA//kABgAAAHAACgB2ABEABgAAAAD/+AAFAAAAdgAKAHsAEgAG\nAAD////4AAYAAAB7AAoAggASAAYAAAAA//gABQAAAIIACgCHABIABgAAAAD/+AAFAAAAhwAKAIwA\nEgAGAAAAAP/4AAUAAACMAAoAkQASAAYAAAAA//gABQAAAJEACgCWABIABgAAAAD/+QAFAAAAlgAK\nAJsAEQAGAAAAAP/6AAX//wCbAAoAoAAPAAYAAAAA//oABQABAKAACgClABEABgAA////+AAGAAAA\npQAKAKwAEgAGAAD////4AAYAAACsAAoAswASAAYAAP////gABgAAALMACgC6ABIABgAA////+QAG\nAAAAugAKAMEAEQAGAAD////4AAYAAgDBAAoAyAAUAAYAAP////kABQACAMgACgDOABMABgAA////\n+QAGAAIAzgAKANUAEw==\n\"\"\"\n            )\n        ),\n        Image.open(\n            BytesIO(\n                base64.b64decode(\n                    b\"\"\"\niVBORw0KGgoAAAANSUhEUgAAAx4AAAAUAQAAAAArMtZoAAAEwElEQVR4nABlAJr/AHVE4czCI/4u\nMc4b7vuds/xzjz5/3/7u/n9vMe7vnfH/9++vPn/xyf5zhxzjt8GHw8+2d83u8x27199/nxuQ6Od9\nM43/5z2I+9n9ZtmDBwMQECDRQw/eQIQohJXxpBCNVE6QCCAAAAD//wBlAJr/AgALyj1t/wINwq0g\nLeNZUworuN1cjTPIzrTX6ofHWeo3v336qPzfEwRmBnHTtf95/fglZK5N0PDgfRTslpGBvz7LFc4F\nIUXBWQGjQ5MGCx34EDFPwXiY4YbYxavpnhHFrk14CDAAAAD//wBlAJr/AgKqRooH2gAgPeggvUAA\nBu2WfgPoAwzRAABAAAAAAACQgLz/3Uv4Gv+gX7BJgDeeGP6AAAD1NMDzKHD7ANWr3loYbxsAD791\nNAADfcoIDyP44K/jv4Y63/Z+t98Ovt+ub4T48LAAAAD//wBlAJr/AuplMlADJAAAAGuAphWpqhMx\nin0A/fRvAYBABPgBwBUgABBQ/sYAyv9g0bCHgOLoGAAAAAAAREAAwI7nr0ArYpow7aX8//9LaP/9\nSjdavWA8ePHeBIKB//81/83ndznOaXx379wAAAD//wBlAJr/AqDxW+D3AABAAbUh/QMnbQag/gAY\nAYDAAACgtgD/gOqAAAB5IA/8AAAk+n9w0AAA8AAAmFRJuPo27ciC0cD5oeW4E7KA/wD3ECMAn2tt\ny8PgwH8AfAxFzC0JzeAMtratAsC/ffwAAAD//wBlAJr/BGKAyCAA4AAAAvgeYTAwHd1kmQF5chkG\nABoMIHcL5xVpTfQbUqzlAAAErwAQBgAAEOClA5D9il08AEh/tUzdCBsXkbgACED+woQg8Si9VeqY\nlODCn7lmF6NhnAEYgAAA/NMIAAAAAAD//2JgjLZgVGBg5Pv/Tvpc8hwGBjYGJADjHDrAwPzAjv/H\n/Wf3PzCwtzcwHmBgYGcwbZz8wHaCAQMDOwMDQ8MCBgYOC3W7mp+f0w+wHOYxO3OG+e376hsMZjk3\nAAAAAP//YmCMY2A4wMAIN5e5gQETPD6AZisDAwMDgzSDAAPjByiHcQMDAwMDg1nOze1lByRu5/47\nc4859311AYNZzg0AAAAA//9iYGDBYihOIIMuwIjGL39/fwffA8b//xv/P2BPtzzHwCBjUQAAAAD/\n/yLFBrIBAAAA//9i1HhcwdhizX7u8NZNzyLbvT97bfrMf/QHI8evOwcSqGUJAAAA//9iYBB81iSw\npEE170Qrg5MIYydHqwdDQRMrAwcVrQAAAAD//2J4x7j9AAMDn8Q/BgYLBoaiAwwMjPdvMDBYM1Tv\noJodAAAAAP//Yqo/83+dxePWlxl3npsel9lvLfPcqlE9725C+acfVLMEAAAA//9i+s9gwCoaaGMR\nevta/58PTEWzr21hufPjA8N+qlnBwAAAAAD//2JiWLci5v1+HmFXDqcnULE/MxgYGBj+f6CaJQAA\nAAD//2Ji2FrkY3iYpYC5qDeGgeEMAwPDvwQBBoYvcTwOVLMEAAAA//9isDBgkP///0EOg9z35v//\nGc/eeW7BwPj5+QGZhANUswMAAAD//2JgqGBgYGBgqEMXlvhMPUsAAAAA//8iYDd1AAAAAP//AwDR\nw7IkEbzhVQAAAABJRU5ErkJggg==\n\"\"\"\n                )\n            )\n        ),\n    )\n    return f\n"], "fixing_code": ["import copy\nimport os\nimport re\nimport shutil\nimport sys\nfrom io import BytesIO\n\nimport pytest\nfrom packaging.version import parse as parse_version\n\nfrom PIL import Image, ImageDraw, ImageFont, features\n\nfrom .helper import (\n    assert_image_equal,\n    assert_image_equal_tofile,\n    assert_image_similar_tofile,\n    is_win32,\n    skip_unless_feature,\n    skip_unless_feature_version,\n)\n\nFONT_PATH = \"Tests/fonts/FreeMono.ttf\"\nFONT_SIZE = 20\n\nTEST_TEXT = \"hey you\\nyou are awesome\\nthis looks awkward\"\n\n\npytestmark = skip_unless_feature(\"freetype2\")\n\n\ndef test_sanity():\n    assert re.search(r\"\\d+\\.\\d+\\.\\d+$\", features.version_module(\"freetype2\"))\n\n\n@pytest.fixture(\n    scope=\"module\",\n    params=[\n        pytest.param(ImageFont.Layout.BASIC),\n        pytest.param(ImageFont.Layout.RAQM, marks=skip_unless_feature(\"raqm\")),\n    ],\n)\ndef layout_engine(request):\n    return request.param\n\n\n@pytest.fixture(scope=\"module\")\ndef font(layout_engine):\n    return ImageFont.truetype(FONT_PATH, FONT_SIZE, layout_engine=layout_engine)\n\n\ndef test_font_properties(font):\n    assert font.path == FONT_PATH\n    assert font.size == FONT_SIZE\n\n    font_copy = font.font_variant()\n    assert font_copy.path == FONT_PATH\n    assert font_copy.size == FONT_SIZE\n\n    font_copy = font.font_variant(size=FONT_SIZE + 1)\n    assert font_copy.size == FONT_SIZE + 1\n\n    second_font_path = \"Tests/fonts/DejaVuSans/DejaVuSans.ttf\"\n    font_copy = font.font_variant(font=second_font_path)\n    assert font_copy.path == second_font_path\n\n\ndef _render(font, layout_engine):\n    txt = \"Hello World!\"\n    ttf = ImageFont.truetype(font, FONT_SIZE, layout_engine=layout_engine)\n    ttf.getbbox(txt)\n\n    img = Image.new(\"RGB\", (256, 64), \"white\")\n    d = ImageDraw.Draw(img)\n    d.text((10, 10), txt, font=ttf, fill=\"black\")\n\n    return img\n\n\ndef test_font_with_name(layout_engine):\n    _render(FONT_PATH, layout_engine)\n\n\ndef test_font_with_filelike(layout_engine):\n    def _font_as_bytes():\n        with open(FONT_PATH, \"rb\") as f:\n            font_bytes = BytesIO(f.read())\n        return font_bytes\n\n    ttf = ImageFont.truetype(_font_as_bytes(), FONT_SIZE, layout_engine=layout_engine)\n    ttf_copy = ttf.font_variant()\n    assert ttf_copy.font_bytes == ttf.font_bytes\n\n    _render(_font_as_bytes(), layout_engine)\n    # Usage note:  making two fonts from the same buffer fails.\n    # shared_bytes = _font_as_bytes()\n    # _render(shared_bytes)\n    # with pytest.raises(Exception):\n    #   _render(shared_bytes)\n\n\ndef test_font_with_open_file(layout_engine):\n    with open(FONT_PATH, \"rb\") as f:\n        _render(f, layout_engine)\n\n\ndef test_render_equal(layout_engine):\n    img_path = _render(FONT_PATH, layout_engine)\n    with open(FONT_PATH, \"rb\") as f:\n        font_filelike = BytesIO(f.read())\n    img_filelike = _render(font_filelike, layout_engine)\n\n    assert_image_equal(img_path, img_filelike)\n\n\ndef test_non_ascii_path(tmp_path, layout_engine):\n    tempfile = str(tmp_path / (\"temp_\" + chr(128) + \".ttf\"))\n    try:\n        shutil.copy(FONT_PATH, tempfile)\n    except UnicodeEncodeError:\n        pytest.skip(\"Non-ASCII path could not be created\")\n\n    ImageFont.truetype(tempfile, FONT_SIZE, layout_engine=layout_engine)\n\n\ndef test_transparent_background(font):\n    im = Image.new(mode=\"RGBA\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    txt = \"Hello World!\"\n    draw.text((10, 10), txt, font=font)\n\n    target = \"Tests/images/transparent_background_text.png\"\n    assert_image_similar_tofile(im, target, 4.09)\n\n    target = \"Tests/images/transparent_background_text_L.png\"\n    assert_image_similar_tofile(im.convert(\"L\"), target, 0.01)\n\n\ndef test_I16(font):\n    im = Image.new(mode=\"I;16\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    txt = \"Hello World!\"\n    draw.text((10, 10), txt, font=font)\n\n    target = \"Tests/images/transparent_background_text_L.png\"\n    assert_image_similar_tofile(im.convert(\"L\"), target, 0.01)\n\n\ndef test_textbbox_equal(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    txt = \"Hello World!\"\n    bbox = draw.textbbox((10, 10), txt, font)\n    draw.text((10, 10), txt, font=font)\n    draw.rectangle(bbox)\n\n    assert_image_similar_tofile(im, \"Tests/images/rectangle_surrounding_text.png\", 2.5)\n\n\n@pytest.mark.parametrize(\n    \"text, mode, fontname, size, length_basic, length_raqm\",\n    (\n        # basic test\n        (\"text\", \"L\", \"FreeMono.ttf\", 15, 36, 36),\n        (\"text\", \"1\", \"FreeMono.ttf\", 15, 36, 36),\n        # issue 4177\n        (\"rrr\", \"L\", \"DejaVuSans/DejaVuSans.ttf\", 18, 21, 22.21875),\n        (\"rrr\", \"1\", \"DejaVuSans/DejaVuSans.ttf\", 18, 24, 22.21875),\n        # test 'l' not including extra margin\n        # using exact value 2047 / 64 for raqm, checked with debugger\n        (\"ill\", \"L\", \"OpenSansCondensed-LightItalic.ttf\", 63, 33, 31.984375),\n        (\"ill\", \"1\", \"OpenSansCondensed-LightItalic.ttf\", 63, 33, 31.984375),\n    ),\n)\ndef test_getlength(\n    text, mode, fontname, size, layout_engine, length_basic, length_raqm\n):\n    f = ImageFont.truetype(\"Tests/fonts/\" + fontname, size, layout_engine=layout_engine)\n\n    im = Image.new(mode, (1, 1), 0)\n    d = ImageDraw.Draw(im)\n\n    if layout_engine == ImageFont.Layout.BASIC:\n        length = d.textlength(text, f)\n        assert length == length_basic\n    else:\n        # disable kerning, kerning metrics changed\n        length = d.textlength(text, f, features=[\"-kern\"])\n        assert length == length_raqm\n\n\ndef test_float_size():\n    lengths = []\n    for size in (48, 48.5, 49):\n        f = ImageFont.truetype(\n            \"Tests/fonts/NotoSans-Regular.ttf\", size, layout_engine=layout_engine\n        )\n        lengths.append(f.getlength(\"text\"))\n    assert lengths[0] != lengths[1] != lengths[2]\n\n\ndef test_render_multiline(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    line_spacing = font.getbbox(\"A\")[3] + 4\n    lines = TEST_TEXT.split(\"\\n\")\n    y = 0\n    for line in lines:\n        draw.text((0, y), line, font=font)\n        y += line_spacing\n\n    # some versions of freetype have different horizontal spacing.\n    # setting a tight epsilon, I'm showing the original test failure\n    # at epsilon = ~38.\n    assert_image_similar_tofile(im, \"Tests/images/multiline_text.png\", 6.2)\n\n\ndef test_render_multiline_text(font):\n    # Test that text() correctly connects to multiline_text()\n    # and that align defaults to left\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    draw.text((0, 0), TEST_TEXT, font=font)\n\n    assert_image_similar_tofile(im, \"Tests/images/multiline_text.png\", 0.01)\n\n    # Test that text() can pass on additional arguments\n    # to multiline_text()\n    draw.text(\n        (0, 0), TEST_TEXT, fill=None, font=font, anchor=None, spacing=4, align=\"left\"\n    )\n    draw.text((0, 0), TEST_TEXT, None, font, None, 4, \"left\")\n\n\n@pytest.mark.parametrize(\n    \"align, ext\", ((\"left\", \"\"), (\"center\", \"_center\"), (\"right\", \"_right\"))\n)\ndef test_render_multiline_text_align(font, align, ext):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    draw.multiline_text((0, 0), TEST_TEXT, font=font, align=align)\n\n    assert_image_similar_tofile(im, f\"Tests/images/multiline_text{ext}.png\", 0.01)\n\n\ndef test_unknown_align(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    # Act/Assert\n    with pytest.raises(ValueError):\n        draw.multiline_text((0, 0), TEST_TEXT, font=font, align=\"unknown\")\n\n\ndef test_draw_align(font):\n    im = Image.new(\"RGB\", (300, 100), \"white\")\n    draw = ImageDraw.Draw(im)\n    line = \"some text\"\n    draw.text((100, 40), line, (0, 0, 0), font=font, align=\"left\")\n\n\ndef test_multiline_bbox(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    # Test that textbbox() correctly connects to multiline_textbbox()\n    assert draw.textbbox((0, 0), TEST_TEXT, font=font) == draw.multiline_textbbox(\n        (0, 0), TEST_TEXT, font=font\n    )\n\n    # Test that multiline_textbbox corresponds to ImageFont.textbbox()\n    # for single line text\n    assert font.getbbox(\"A\") == draw.multiline_textbbox((0, 0), \"A\", font=font)\n\n    # Test that textbbox() can pass on additional arguments\n    # to multiline_textbbox()\n    draw.textbbox((0, 0), TEST_TEXT, font=font, spacing=4)\n\n\ndef test_multiline_width(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    assert (\n        draw.textbbox((0, 0), \"longest line\", font=font)[2]\n        == draw.multiline_textbbox((0, 0), \"longest line\\nline\", font=font)[2]\n    )\n\n\ndef test_multiline_spacing(font):\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n    draw.multiline_text((0, 0), TEST_TEXT, font=font, spacing=10)\n\n    assert_image_similar_tofile(im, \"Tests/images/multiline_text_spacing.png\", 2.5)\n\n\n@pytest.mark.parametrize(\n    \"orientation\", (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270)\n)\ndef test_rotated_transposed_font(font, orientation):\n    img_grey = Image.new(\"L\", (100, 100))\n    draw = ImageDraw.Draw(img_grey)\n    word = \"testing\"\n\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Original font\n    draw.font = font\n    bbox_a = draw.textbbox((10, 10), word)\n\n    # Rotated font\n    draw.font = transposed_font\n    bbox_b = draw.textbbox((20, 20), word)\n\n    # Check (w, h) of box a is (h, w) of box b\n    assert (\n        bbox_a[2] - bbox_a[0],\n        bbox_a[3] - bbox_a[1],\n    ) == (\n        bbox_b[3] - bbox_b[1],\n        bbox_b[2] - bbox_b[0],\n    )\n\n    # Check top left co-ordinates are correct\n    assert bbox_b[:2] == (20, 20)\n\n    # text length is undefined for vertical text\n    with pytest.raises(ValueError):\n        draw.textlength(word)\n\n\n@pytest.mark.parametrize(\n    \"orientation\",\n    (\n        None,\n        Image.Transpose.ROTATE_180,\n        Image.Transpose.FLIP_LEFT_RIGHT,\n        Image.Transpose.FLIP_TOP_BOTTOM,\n    ),\n)\ndef test_unrotated_transposed_font(font, orientation):\n    img_grey = Image.new(\"L\", (100, 100))\n    draw = ImageDraw.Draw(img_grey)\n    word = \"testing\"\n\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Original font\n    draw.font = font\n    bbox_a = draw.textbbox((10, 10), word)\n    length_a = draw.textlength(word)\n\n    # Rotated font\n    draw.font = transposed_font\n    bbox_b = draw.textbbox((20, 20), word)\n    length_b = draw.textlength(word)\n\n    # Check boxes a and b are same size\n    assert (\n        bbox_a[2] - bbox_a[0],\n        bbox_a[3] - bbox_a[1],\n    ) == (\n        bbox_b[2] - bbox_b[0],\n        bbox_b[3] - bbox_b[1],\n    )\n\n    # Check top left co-ordinates are correct\n    assert bbox_b[:2] == (20, 20)\n\n    assert length_a == length_b\n\n\n@pytest.mark.parametrize(\n    \"orientation\", (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270)\n)\ndef test_rotated_transposed_font_get_mask(font, orientation):\n    # Arrange\n    text = \"mask this\"\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Act\n    mask = transposed_font.getmask(text)\n\n    # Assert\n    assert mask.size == (13, 108)\n\n\n@pytest.mark.parametrize(\n    \"orientation\",\n    (\n        None,\n        Image.Transpose.ROTATE_180,\n        Image.Transpose.FLIP_LEFT_RIGHT,\n        Image.Transpose.FLIP_TOP_BOTTOM,\n    ),\n)\ndef test_unrotated_transposed_font_get_mask(font, orientation):\n    # Arrange\n    text = \"mask this\"\n    transposed_font = ImageFont.TransposedFont(font, orientation=orientation)\n\n    # Act\n    mask = transposed_font.getmask(text)\n\n    # Assert\n    assert mask.size == (108, 13)\n\n\ndef test_free_type_font_get_name(font):\n    assert (\"FreeMono\", \"Regular\") == font.getname()\n\n\ndef test_free_type_font_get_metrics(font):\n    ascent, descent = font.getmetrics()\n\n    assert isinstance(ascent, int)\n    assert isinstance(descent, int)\n    assert (ascent, descent) == (16, 4)\n\n\ndef test_free_type_font_get_mask(font):\n    # Arrange\n    text = \"mask this\"\n\n    # Act\n    mask = font.getmask(text)\n\n    # Assert\n    assert mask.size == (108, 13)\n\n\ndef test_load_path_not_found():\n    # Arrange\n    filename = \"somefilenamethatdoesntexist.ttf\"\n\n    # Act/Assert\n    with pytest.raises(OSError):\n        ImageFont.load_path(filename)\n    with pytest.raises(OSError):\n        ImageFont.truetype(filename)\n\n\ndef test_load_non_font_bytes():\n    with open(\"Tests/images/hopper.jpg\", \"rb\") as f:\n        with pytest.raises(OSError):\n            ImageFont.truetype(f)\n\n\ndef test_default_font():\n    # Arrange\n    txt = 'This is a \"better than nothing\" default font.'\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    draw = ImageDraw.Draw(im)\n\n    # Act\n    default_font = ImageFont.load_default()\n    draw.text((10, 10), txt, font=default_font)\n\n    # Assert\n    assert_image_equal_tofile(im, \"Tests/images/default_font.png\")\n\n\n@pytest.mark.parametrize(\"mode\", (None, \"1\", \"RGBA\"))\ndef test_getbbox(font, mode):\n    assert (0, 4, 12, 16) == font.getbbox(\"A\", mode)\n\n\ndef test_getbbox_empty(font):\n    # issue #2614, should not crash.\n    assert (0, 0, 0, 0) == font.getbbox(\"\")\n\n\ndef test_render_empty(font):\n    # issue 2666\n    im = Image.new(mode=\"RGB\", size=(300, 100))\n    target = im.copy()\n    draw = ImageDraw.Draw(im)\n    # should not crash here.\n    draw.text((10, 10), \"\", font=font)\n    assert_image_equal(im, target)\n\n\ndef test_unicode_pilfont():\n    # should not segfault, should return UnicodeDecodeError\n    # issue #2826\n    font = ImageFont.load_default()\n    with pytest.raises(UnicodeEncodeError):\n        font.getbbox(\"\u2019\")\n\n\ndef test_unicode_extended(layout_engine):\n    # issue #3777\n    text = \"A\\u278A\\U0001F12B\"\n    target = \"Tests/images/unicode_extended.png\"\n\n    ttf = ImageFont.truetype(\n        \"Tests/fonts/NotoSansSymbols-Regular.ttf\",\n        FONT_SIZE,\n        layout_engine=layout_engine,\n    )\n    img = Image.new(\"RGB\", (100, 60))\n    d = ImageDraw.Draw(img)\n    d.text((10, 10), text, font=ttf)\n\n    # fails with 14.7\n    assert_image_similar_tofile(img, target, 6.2)\n\n\n@pytest.mark.parametrize(\n    \"platform, font_directory\",\n    ((\"linux\", \"/usr/local/share/fonts\"), (\"darwin\", \"/System/Library/Fonts\")),\n)\n@pytest.mark.skipif(is_win32(), reason=\"requires Unix or macOS\")\ndef test_find_font(monkeypatch, platform, font_directory):\n    def _test_fake_loading_font(path_to_fake, fontname):\n        # Make a copy of FreeTypeFont so we can patch the original\n        free_type_font = copy.deepcopy(ImageFont.FreeTypeFont)\n        with monkeypatch.context() as m:\n            m.setattr(ImageFont, \"_FreeTypeFont\", free_type_font, raising=False)\n\n            def loadable_font(filepath, size, index, encoding, *args, **kwargs):\n                if filepath == path_to_fake:\n                    return ImageFont._FreeTypeFont(\n                        FONT_PATH, size, index, encoding, *args, **kwargs\n                    )\n                return ImageFont._FreeTypeFont(\n                    filepath, size, index, encoding, *args, **kwargs\n                )\n\n            m.setattr(ImageFont, \"FreeTypeFont\", loadable_font)\n            font = ImageFont.truetype(fontname)\n            # Make sure it's loaded\n            name = font.getname()\n            assert (\"FreeMono\", \"Regular\") == name\n\n    # A lot of mocking here - this is more for hitting code and\n    # catching syntax like errors\n    monkeypatch.setattr(sys, \"platform\", platform)\n    if platform == \"linux\":\n        monkeypatch.setenv(\"XDG_DATA_DIRS\", \"/usr/share/:/usr/local/share/\")\n\n    def fake_walker(path):\n        if path == font_directory:\n            return [\n                (\n                    path,\n                    [],\n                    [\"Arial.ttf\", \"Single.otf\", \"Duplicate.otf\", \"Duplicate.ttf\"],\n                )\n            ]\n        return [(path, [], [\"some_random_font.ttf\"])]\n\n    monkeypatch.setattr(os, \"walk\", fake_walker)\n\n    # Test that the font loads both with and without the extension\n    _test_fake_loading_font(font_directory + \"/Arial.ttf\", \"Arial.ttf\")\n    _test_fake_loading_font(font_directory + \"/Arial.ttf\", \"Arial\")\n\n    # Test that non-ttf fonts can be found without the extension\n    _test_fake_loading_font(font_directory + \"/Single.otf\", \"Single\")\n\n    # Test that ttf fonts are preferred if the extension is not specified\n    _test_fake_loading_font(font_directory + \"/Duplicate.ttf\", \"Duplicate\")\n\n\ndef test_imagefont_getters(font):\n    assert font.getmetrics() == (16, 4)\n    assert font.font.ascent == 16\n    assert font.font.descent == 4\n    assert font.font.height == 20\n    assert font.font.x_ppem == 20\n    assert font.font.y_ppem == 20\n    assert font.font.glyphs == 4177\n    assert font.getbbox(\"A\") == (0, 4, 12, 16)\n    assert font.getbbox(\"AB\") == (0, 4, 24, 16)\n    assert font.getbbox(\"M\") == (0, 4, 12, 16)\n    assert font.getbbox(\"y\") == (0, 7, 12, 20)\n    assert font.getbbox(\"a\") == (0, 7, 12, 16)\n    assert font.getlength(\"A\") == 12\n    assert font.getlength(\"AB\") == 24\n    assert font.getlength(\"M\") == 12\n    assert font.getlength(\"y\") == 12\n    assert font.getlength(\"a\") == 12\n\n\n@pytest.mark.parametrize(\"stroke_width\", (0, 2))\ndef test_getsize_stroke(font, stroke_width):\n    assert font.getbbox(\"A\", stroke_width=stroke_width) == (\n        0 - stroke_width,\n        4 - stroke_width,\n        12 + stroke_width,\n        16 + stroke_width,\n    )\n\n\ndef test_complex_font_settings():\n    t = ImageFont.truetype(FONT_PATH, FONT_SIZE, layout_engine=ImageFont.Layout.BASIC)\n    with pytest.raises(KeyError):\n        t.getmask(\"\u0430\u0431\u0432\u0433\", direction=\"rtl\")\n    with pytest.raises(KeyError):\n        t.getmask(\"\u0430\u0431\u0432\u0433\", features=[\"-kern\"])\n    with pytest.raises(KeyError):\n        t.getmask(\"\u0430\u0431\u0432\u0433\", language=\"sr\")\n\n\ndef test_variation_get(font):\n    freetype = parse_version(features.version_module(\"freetype2\"))\n    if freetype < parse_version(\"2.9.1\"):\n        with pytest.raises(NotImplementedError):\n            font.get_variation_names()\n        with pytest.raises(NotImplementedError):\n            font.get_variation_axes()\n        return\n\n    with pytest.raises(OSError):\n        font.get_variation_names()\n    with pytest.raises(OSError):\n        font.get_variation_axes()\n\n    font = ImageFont.truetype(\"Tests/fonts/AdobeVFPrototype.ttf\")\n    assert font.get_variation_names(), [\n        b\"ExtraLight\",\n        b\"Light\",\n        b\"Regular\",\n        b\"Semibold\",\n        b\"Bold\",\n        b\"Black\",\n        b\"Black Medium Contrast\",\n        b\"Black High Contrast\",\n        b\"Default\",\n    ]\n    assert font.get_variation_axes() == [\n        {\"name\": b\"Weight\", \"minimum\": 200, \"maximum\": 900, \"default\": 389},\n        {\"name\": b\"Contrast\", \"minimum\": 0, \"maximum\": 100, \"default\": 0},\n    ]\n\n    font = ImageFont.truetype(\"Tests/fonts/TINY5x3GX.ttf\")\n    assert font.get_variation_names() == [\n        b\"20\",\n        b\"40\",\n        b\"60\",\n        b\"80\",\n        b\"100\",\n        b\"120\",\n        b\"140\",\n        b\"160\",\n        b\"180\",\n        b\"200\",\n        b\"220\",\n        b\"240\",\n        b\"260\",\n        b\"280\",\n        b\"300\",\n        b\"Regular\",\n    ]\n    assert font.get_variation_axes() == [\n        {\"name\": b\"Size\", \"minimum\": 0, \"maximum\": 300, \"default\": 0}\n    ]\n\n\ndef _check_text(font, path, epsilon):\n    im = Image.new(\"RGB\", (100, 75), \"white\")\n    d = ImageDraw.Draw(im)\n    d.text((10, 10), \"Text\", font=font, fill=\"black\")\n\n    try:\n        assert_image_similar_tofile(im, path, epsilon)\n    except AssertionError:\n        if \"_adobe\" in path:\n            path = path.replace(\"_adobe\", \"_adobe_older_harfbuzz\")\n            assert_image_similar_tofile(im, path, epsilon)\n        else:\n            raise\n\n\ndef test_variation_set_by_name(font):\n    freetype = parse_version(features.version_module(\"freetype2\"))\n    if freetype < parse_version(\"2.9.1\"):\n        with pytest.raises(NotImplementedError):\n            font.set_variation_by_name(\"Bold\")\n        return\n\n    with pytest.raises(OSError):\n        font.set_variation_by_name(\"Bold\")\n\n    font = ImageFont.truetype(\"Tests/fonts/AdobeVFPrototype.ttf\", 36)\n    _check_text(font, \"Tests/images/variation_adobe.png\", 11)\n    for name in [\"Bold\", b\"Bold\"]:\n        font.set_variation_by_name(name)\n        assert font.getname()[1] == \"Bold\"\n    _check_text(font, \"Tests/images/variation_adobe_name.png\", 16)\n\n    font = ImageFont.truetype(\"Tests/fonts/TINY5x3GX.ttf\", 36)\n    _check_text(font, \"Tests/images/variation_tiny.png\", 40)\n    for name in [\"200\", b\"200\"]:\n        font.set_variation_by_name(name)\n        assert font.getname()[1] == \"200\"\n    _check_text(font, \"Tests/images/variation_tiny_name.png\", 40)\n\n\ndef test_variation_set_by_axes(font):\n    freetype = parse_version(features.version_module(\"freetype2\"))\n    if freetype < parse_version(\"2.9.1\"):\n        with pytest.raises(NotImplementedError):\n            font.set_variation_by_axes([100])\n        return\n\n    with pytest.raises(OSError):\n        font.set_variation_by_axes([500, 50])\n\n    font = ImageFont.truetype(\"Tests/fonts/AdobeVFPrototype.ttf\", 36)\n    font.set_variation_by_axes([500, 50])\n    _check_text(font, \"Tests/images/variation_adobe_axes.png\", 11.05)\n\n    font = ImageFont.truetype(\"Tests/fonts/TINY5x3GX.ttf\", 36)\n    font.set_variation_by_axes([100])\n    _check_text(font, \"Tests/images/variation_tiny_axes.png\", 32.5)\n\n\ndef test_textbbox_non_freetypefont():\n    im = Image.new(\"RGB\", (200, 200))\n    d = ImageDraw.Draw(im)\n    default_font = ImageFont.load_default()\n    assert d.textlength(\"test\", font=default_font) == 24\n    assert d.textbbox((0, 0), \"test\", font=default_font) == (0, 0, 24, 11)\n\n\n@pytest.mark.parametrize(\n    \"anchor, left, top\",\n    (\n        # test horizontal anchors\n        (\"ls\", 0, -36),\n        (\"ms\", -64, -36),\n        (\"rs\", -128, -36),\n        # test vertical anchors\n        (\"ma\", -64, 16),\n        (\"mt\", -64, 0),\n        (\"mm\", -64, -17),\n        (\"mb\", -64, -44),\n        (\"md\", -64, -51),\n    ),\n    ids=(\"ls\", \"ms\", \"rs\", \"ma\", \"mt\", \"mm\", \"mb\", \"md\"),\n)\ndef test_anchor(layout_engine, anchor, left, top):\n    name, text = \"quick\", \"Quick\"\n    path = f\"Tests/images/test_anchor_{name}_{anchor}.png\"\n\n    if layout_engine == ImageFont.Layout.RAQM:\n        width, height = (129, 44)\n    else:\n        width, height = (128, 44)\n\n    bbox_expected = (left, top, left + width, top + height)\n\n    f = ImageFont.truetype(\n        \"Tests/fonts/NotoSans-Regular.ttf\", 48, layout_engine=layout_engine\n    )\n\n    im = Image.new(\"RGB\", (200, 200), \"white\")\n    d = ImageDraw.Draw(im)\n    d.line(((0, 100), (200, 100)), \"gray\")\n    d.line(((100, 0), (100, 200)), \"gray\")\n    d.text((100, 100), text, fill=\"black\", anchor=anchor, font=f)\n\n    assert d.textbbox((0, 0), text, f, anchor=anchor) == bbox_expected\n\n    assert_image_similar_tofile(im, path, 7)\n\n\n@pytest.mark.parametrize(\n    \"anchor, align\",\n    (\n        # test horizontal anchors\n        (\"lm\", \"left\"),\n        (\"lm\", \"center\"),\n        (\"lm\", \"right\"),\n        (\"mm\", \"left\"),\n        (\"mm\", \"center\"),\n        (\"mm\", \"right\"),\n        (\"rm\", \"left\"),\n        (\"rm\", \"center\"),\n        (\"rm\", \"right\"),\n        # test vertical anchors\n        (\"ma\", \"center\"),\n        # (\"mm\", \"center\"),  # duplicate\n        (\"md\", \"center\"),\n    ),\n)\ndef test_anchor_multiline(layout_engine, anchor, align):\n    target = f\"Tests/images/test_anchor_multiline_{anchor}_{align}.png\"\n    text = \"a\\nlong\\ntext sample\"\n\n    f = ImageFont.truetype(\n        \"Tests/fonts/NotoSans-Regular.ttf\", 48, layout_engine=layout_engine\n    )\n\n    # test render\n    im = Image.new(\"RGB\", (600, 400), \"white\")\n    d = ImageDraw.Draw(im)\n    d.line(((0, 200), (600, 200)), \"gray\")\n    d.line(((300, 0), (300, 400)), \"gray\")\n    d.multiline_text((300, 200), text, fill=\"black\", anchor=anchor, font=f, align=align)\n\n    assert_image_similar_tofile(im, target, 4)\n\n\ndef test_anchor_invalid(font):\n    im = Image.new(\"RGB\", (100, 100), \"white\")\n    d = ImageDraw.Draw(im)\n    d.font = font\n\n    for anchor in [\"\", \"l\", \"a\", \"lax\", \"sa\", \"xa\", \"lx\"]:\n        with pytest.raises(ValueError):\n            font.getmask2(\"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            font.getbbox(\"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.text((0, 0), \"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.textbbox((0, 0), \"hello\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.multiline_text((0, 0), \"foo\\nbar\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.multiline_textbbox((0, 0), \"foo\\nbar\", anchor=anchor)\n    for anchor in [\"lt\", \"lb\"]:\n        with pytest.raises(ValueError):\n            d.multiline_text((0, 0), \"foo\\nbar\", anchor=anchor)\n        with pytest.raises(ValueError):\n            d.multiline_textbbox((0, 0), \"foo\\nbar\", anchor=anchor)\n\n\n@pytest.mark.parametrize(\"bpp\", (1, 2, 4, 8))\ndef test_bitmap_font(layout_engine, bpp):\n    text = \"Bitmap Font\"\n    layout_name = [\"basic\", \"raqm\"][layout_engine]\n    target = f\"Tests/images/bitmap_font_{bpp}_{layout_name}.png\"\n    font = ImageFont.truetype(\n        f\"Tests/fonts/DejaVuSans/DejaVuSans-24-{bpp}-stripped.ttf\",\n        24,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (160, 35), \"white\")\n    draw = ImageDraw.Draw(im)\n    draw.text((2, 2), text, \"black\", font)\n\n    assert_image_equal_tofile(im, target)\n\n\ndef test_bitmap_font_stroke(layout_engine):\n    text = \"Bitmap Font\"\n    layout_name = [\"basic\", \"raqm\"][layout_engine]\n    target = f\"Tests/images/bitmap_font_stroke_{layout_name}.png\"\n    font = ImageFont.truetype(\n        \"Tests/fonts/DejaVuSans/DejaVuSans-24-8-stripped.ttf\",\n        24,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (160, 35), \"white\")\n    draw = ImageDraw.Draw(im)\n    draw.text((2, 2), text, \"black\", font, stroke_width=2, stroke_fill=\"red\")\n\n    assert_image_similar_tofile(im, target, 0.03)\n\n\ndef test_standard_embedded_color(layout_engine):\n    txt = \"Hello World!\"\n    ttf = ImageFont.truetype(FONT_PATH, 40, layout_engine=layout_engine)\n    ttf.getbbox(txt)\n\n    im = Image.new(\"RGB\", (300, 64), \"white\")\n    d = ImageDraw.Draw(im)\n    d.text((10, 10), txt, font=ttf, fill=\"#fa6\", embedded_color=True)\n\n    assert_image_similar_tofile(im, \"Tests/images/standard_embedded.png\", 3.1)\n\n\n@pytest.mark.parametrize(\"fontmode\", (\"1\", \"L\", \"RGBA\"))\ndef test_float_coord(layout_engine, fontmode):\n    txt = \"Hello World!\"\n    ttf = ImageFont.truetype(FONT_PATH, 40, layout_engine=layout_engine)\n\n    im = Image.new(\"RGB\", (300, 64), \"white\")\n    d = ImageDraw.Draw(im)\n    if fontmode == \"1\":\n        d.fontmode = \"1\"\n\n    embedded_color = fontmode == \"RGBA\"\n    d.text((9.5, 9.5), txt, font=ttf, fill=\"#fa6\", embedded_color=embedded_color)\n    try:\n        assert_image_similar_tofile(im, \"Tests/images/text_float_coord.png\", 3.9)\n    except AssertionError:\n        if fontmode == \"1\" and layout_engine == ImageFont.Layout.BASIC:\n            assert_image_similar_tofile(\n                im, \"Tests/images/text_float_coord_1_alt.png\", 1\n            )\n        else:\n            raise\n\n\ndef test_cbdt(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/NotoColorEmoji.ttf\", size=109, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (150, 150), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((10, 10), \"\\U0001f469\", font=font, embedded_color=True)\n\n        assert_image_similar_tofile(im, \"Tests/images/cbdt_notocoloremoji.png\", 6.2)\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or CBDT support\")\n\n\ndef test_cbdt_mask(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/NotoColorEmoji.ttf\", size=109, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (150, 150), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((10, 10), \"\\U0001f469\", \"black\", font=font)\n\n        assert_image_similar_tofile(\n            im, \"Tests/images/cbdt_notocoloremoji_mask.png\", 6.2\n        )\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or CBDT support\")\n\n\ndef test_sbix(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/chromacheck-sbix.woff\", size=300, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (400, 400), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((50, 50), \"\\uE901\", font=font, embedded_color=True)\n\n        assert_image_similar_tofile(im, \"Tests/images/chromacheck-sbix.png\", 1)\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or SBIX support\")\n\n\ndef test_sbix_mask(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/chromacheck-sbix.woff\", size=300, layout_engine=layout_engine\n        )\n\n        im = Image.new(\"RGB\", (400, 400), \"white\")\n        d = ImageDraw.Draw(im)\n\n        d.text((50, 50), \"\\uE901\", (100, 0, 0), font=font)\n\n        assert_image_similar_tofile(im, \"Tests/images/chromacheck-sbix_mask.png\", 1)\n    except OSError as e:  # pragma: no cover\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"freetype compiled without libpng or SBIX support\")\n\n\n@skip_unless_feature_version(\"freetype2\", \"2.10.0\")\ndef test_colr(layout_engine):\n    font = ImageFont.truetype(\n        \"Tests/fonts/BungeeColor-Regular_colr_Windows.ttf\",\n        size=64,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (300, 75), \"white\")\n    d = ImageDraw.Draw(im)\n\n    d.text((15, 5), \"Bungee\", font=font, embedded_color=True)\n\n    assert_image_similar_tofile(im, \"Tests/images/colr_bungee.png\", 21)\n\n\n@skip_unless_feature_version(\"freetype2\", \"2.10.0\")\ndef test_colr_mask(layout_engine):\n    font = ImageFont.truetype(\n        \"Tests/fonts/BungeeColor-Regular_colr_Windows.ttf\",\n        size=64,\n        layout_engine=layout_engine,\n    )\n\n    im = Image.new(\"RGB\", (300, 75), \"white\")\n    d = ImageDraw.Draw(im)\n\n    d.text((15, 5), \"Bungee\", \"black\", font=font)\n\n    assert_image_similar_tofile(im, \"Tests/images/colr_bungee_mask.png\", 22)\n\n\ndef test_woff2(layout_engine):\n    try:\n        font = ImageFont.truetype(\n            \"Tests/fonts/OpenSans.woff2\",\n            size=64,\n            layout_engine=layout_engine,\n        )\n    except OSError as e:\n        assert str(e) in (\"unimplemented feature\", \"unknown file format\")\n        pytest.skip(\"FreeType compiled without brotli or WOFF2 support\")\n\n    im = Image.new(\"RGB\", (350, 100), \"white\")\n    d = ImageDraw.Draw(im)\n\n    d.text((15, 5), \"OpenSans\", \"black\", font=font)\n\n    assert_image_similar_tofile(im, \"Tests/images/test_woff2.png\", 5)\n\n\ndef test_render_mono_size():\n    # issue 4177\n\n    im = Image.new(\"P\", (100, 30), \"white\")\n    draw = ImageDraw.Draw(im)\n    ttf = ImageFont.truetype(\n        \"Tests/fonts/DejaVuSans/DejaVuSans.ttf\",\n        18,\n        layout_engine=ImageFont.Layout.BASIC,\n    )\n\n    draw.text((10, 10), \"r\" * 10, \"black\", ttf)\n    assert_image_equal_tofile(im, \"Tests/images/text_mono.gif\")\n\n\ndef test_too_many_characters(font):\n    with pytest.raises(ValueError):\n        font.getlength(\"A\" * 1000001)\n    with pytest.raises(ValueError):\n        font.getbbox(\"A\" * 1000001)\n    with pytest.raises(ValueError):\n        font.getmask2(\"A\" * 1000001)\n\n    transposed_font = ImageFont.TransposedFont(font)\n    with pytest.raises(ValueError):\n        transposed_font.getlength(\"A\" * 1000001)\n\n    default_font = ImageFont.load_default()\n    with pytest.raises(ValueError):\n        default_font.getlength(\"A\" * 1000001)\n    with pytest.raises(ValueError):\n        default_font.getbbox(\"A\" * 1000001)\n\n\n@pytest.mark.parametrize(\n    \"test_file\",\n    [\n        \"Tests/fonts/oom-e8e927ba6c0d38274a37c1567560eb33baf74627.ttf\",\n        \"Tests/fonts/oom-4da0210eb7081b0bf15bf16cc4c52ce02c1e1bbc.ttf\",\n    ],\n)\ndef test_oom(test_file):\n    with open(test_file, \"rb\") as f:\n        font = ImageFont.truetype(BytesIO(f.read()))\n        with pytest.raises(Image.DecompressionBombError):\n            font.getmask(\"Test Text\")\n\n\ndef test_raqm_missing_warning(monkeypatch):\n    monkeypatch.setattr(ImageFont.core, \"HAVE_RAQM\", False)\n    with pytest.warns(UserWarning) as record:\n        font = ImageFont.truetype(\n            FONT_PATH, FONT_SIZE, layout_engine=ImageFont.Layout.RAQM\n        )\n    assert font.layout_engine == ImageFont.Layout.BASIC\n    assert str(record[-1].message) == (\n        \"Raqm layout was requested, but Raqm is not available. \"\n        \"Falling back to basic layout.\"\n    )\n", ".. py:module:: PIL.ImageFont\n.. py:currentmodule:: PIL.ImageFont\n\n:py:mod:`~PIL.ImageFont` Module\n===============================\n\nThe :py:mod:`~PIL.ImageFont` module defines a class with the same name. Instances of\nthis class store bitmap fonts, and are used with the\n:py:meth:`PIL.ImageDraw.ImageDraw.text` method.\n\nPIL uses its own font file format to store bitmap fonts, limited to 256 characters. You can use\n`pilfont.py <https://github.com/python-pillow/pillow-scripts/blob/main/Scripts/pilfont.py>`_\nfrom `pillow-scripts <https://pypi.org/project/pillow-scripts/>`_ to convert BDF and\nPCF font descriptors (X window font formats) to this format.\n\nStarting with version 1.1.4, PIL can be configured to support TrueType and\nOpenType fonts (as well as other font formats supported by the FreeType\nlibrary). For earlier versions, TrueType support is only available as part of\nthe imToolkit package.\n\n.. warning::\n    To protect against potential DOS attacks when using arbitrary strings as\n    text input, Pillow will raise a ``ValueError`` if the number of characters\n    is over a certain limit, :py:data:`MAX_STRING_LENGTH`.\n\n    This threshold can be changed by setting\n    :py:data:`MAX_STRING_LENGTH`. It can be disabled by setting\n    ``ImageFont.MAX_STRING_LENGTH = None``.\n\nExample\n-------\n\n::\n\n    from PIL import ImageFont, ImageDraw\n\n    draw = ImageDraw.Draw(image)\n\n    # use a bitmap font\n    font = ImageFont.load(\"arial.pil\")\n\n    draw.text((10, 10), \"hello\", font=font)\n\n    # use a truetype font\n    font = ImageFont.truetype(\"arial.ttf\", 15)\n\n    draw.text((10, 25), \"world\", font=font)\n\nFunctions\n---------\n\n.. autofunction:: PIL.ImageFont.load\n.. autofunction:: PIL.ImageFont.load_path\n.. autofunction:: PIL.ImageFont.truetype\n.. autofunction:: PIL.ImageFont.load_default\n\nMethods\n-------\n\n.. autoclass:: PIL.ImageFont.ImageFont\n    :members:\n\n.. autoclass:: PIL.ImageFont.FreeTypeFont\n    :members:\n\n.. autoclass:: PIL.ImageFont.TransposedFont\n    :members:\n    :undoc-members:\n\nConstants\n---------\n\n.. data:: PIL.ImageFont.Layout.BASIC\n\n    Use basic text layout for TrueType font.\n    Advanced features such as text direction are not supported.\n\n.. data:: PIL.ImageFont.Layout.RAQM\n\n    Use Raqm text layout for TrueType font.\n    Advanced features are supported.\n\n    Requires Raqm, you can check support using\n    :py:func:`PIL.features.check_feature` with ``feature=\"raqm\"``.\n\nConstants\n---------\n\n.. data:: MAX_STRING_LENGTH\n\n    Set to 1,000,000, to protect against potential DOS attacks. Pillow will\n    raise a ``ValueError`` if the number of characters is over this limit. The\n    check can be disabled by setting ``ImageFont.MAX_STRING_LENGTH = None``.\n", "10.0.0\n------\n\nBackwards Incompatible Changes\n==============================\n\nCategories\n^^^^^^^^^^\n\n``im.category`` has been removed, along with the related ``Image.NORMAL``,\n``Image.SEQUENCE`` and ``Image.CONTAINER`` attributes.\n\nTo determine if an image has multiple frames or not,\n``getattr(im, \"is_animated\", False)`` can be used instead.\n\nTk/Tcl 8.4\n^^^^^^^^^^\n\nSupport for Tk/Tcl 8.4 has been removed.\n\nJpegImagePlugin.convert_dict_qtables\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSince deprecation in Pillow 8.3.0, the ``convert_dict_qtables`` method no longer\nperformed any operations on the data given to it, and has been removed.\n\nImagePalette size parameter\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBefore Pillow 8.3.0, ``ImagePalette`` required palette data of particular lengths by\ndefault, and the ``size`` parameter could be used to override that. Pillow 8.3.0\nremoved the default required length, also removing the need for the ``size`` parameter.\n\nImageShow.Viewer.show_file file argument\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``file`` argument in :py:meth:`~PIL.ImageShow.Viewer.show_file()` has been\nremoved and replaced by ``path``.\n\nIn effect, ``viewer.show_file(\"test.jpg\")`` will continue to work unchanged.\n\nConstants\n^^^^^^^^^\n\nA number of constants have been removed.\nInstead, ``enum.IntEnum`` classes have been added.\n\n=====================================================  ============================================================\nRemoved                                                Use instead\n=====================================================  ============================================================\n``Image.LINEAR``                                       ``Image.BILINEAR`` or ``Image.Resampling.BILINEAR``\n``Image.CUBIC``                                        ``Image.BICUBIC`` or ``Image.Resampling.BICUBIC``\n``Image.ANTIALIAS``                                    ``Image.LANCZOS`` or ``Image.Resampling.LANCZOS``\n``ImageCms.INTENT_PERCEPTUAL``                         ``ImageCms.Intent.PERCEPTUAL``\n``ImageCms.INTENT_RELATIVE_COLORMETRIC``               ``ImageCms.Intent.RELATIVE_COLORMETRIC``\n``ImageCms.INTENT_SATURATION``                         ``ImageCms.Intent.SATURATION``\n``ImageCms.INTENT_ABSOLUTE_COLORIMETRIC``              ``ImageCms.Intent.ABSOLUTE_COLORIMETRIC``\n``ImageCms.DIRECTION_INPUT``                           ``ImageCms.Direction.INPUT``\n``ImageCms.DIRECTION_OUTPUT``                          ``ImageCms.Direction.OUTPUT``\n``ImageCms.DIRECTION_PROOF``                           ``ImageCms.Direction.PROOF``\n``ImageFont.LAYOUT_BASIC``                             ``ImageFont.Layout.BASIC``\n``ImageFont.LAYOUT_RAQM``                              ``ImageFont.Layout.RAQM``\n``BlpImagePlugin.BLP_FORMAT_JPEG``                     ``BlpImagePlugin.Format.JPEG``\n``BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED``           ``BlpImagePlugin.Encoding.UNCOMPRESSED``\n``BlpImagePlugin.BLP_ENCODING_DXT``                    ``BlpImagePlugin.Encoding.DXT``\n``BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA``  ``BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA``\n``BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1``             ``BlpImagePlugin.AlphaEncoding.DXT1``\n``BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3``             ``BlpImagePlugin.AlphaEncoding.DXT3``\n``BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5``             ``BlpImagePlugin.AlphaEncoding.DXT5``\n``FtexImagePlugin.FORMAT_DXT1``                        ``FtexImagePlugin.Format.DXT1``\n``FtexImagePlugin.FORMAT_UNCOMPRESSED``                ``FtexImagePlugin.Format.UNCOMPRESSED``\n``PngImagePlugin.APNG_DISPOSE_OP_NONE``                ``PngImagePlugin.Disposal.OP_NONE``\n``PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND``          ``PngImagePlugin.Disposal.OP_BACKGROUND``\n``PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS``            ``PngImagePlugin.Disposal.OP_PREVIOUS``\n``PngImagePlugin.APNG_BLEND_OP_SOURCE``                ``PngImagePlugin.Blend.OP_SOURCE``\n``PngImagePlugin.APNG_BLEND_OP_OVER``                  ``PngImagePlugin.Blend.OP_OVER``\n=====================================================  ============================================================\n\nFitsStubImagePlugin\n^^^^^^^^^^^^^^^^^^^\n\nThe stub image plugin ``FitsStubImagePlugin`` has been removed.\nFITS images can be read without a handler through :mod:`~PIL.FitsImagePlugin` instead.\n\nFont size and offset methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSeveral functions for computing the size and offset of rendered text have been removed:\n\n=============================================================== =============================================================================================================\nRemoved                                                         Use instead\n=============================================================== =============================================================================================================\n``FreeTypeFont.getsize()`` and ``FreeTypeFont.getoffset()``     :py:meth:`.FreeTypeFont.getbbox` and :py:meth:`.FreeTypeFont.getlength`\n``FreeTypeFont.getsize_multiline()``                            :py:meth:`.ImageDraw.multiline_textbbox`\n``ImageFont.getsize()``                                         :py:meth:`.ImageFont.getbbox` and :py:meth:`.ImageFont.getlength`\n``TransposedFont.getsize()``                                    :py:meth:`.TransposedFont.getbbox` and :py:meth:`.TransposedFont.getlength`\n``ImageDraw.textsize()`` and ``ImageDraw.multiline_textsize()`` :py:meth:`.ImageDraw.textbbox`, :py:meth:`.ImageDraw.textlength` and :py:meth:`.ImageDraw.multiline_textbbox`\n``ImageDraw2.Draw.textsize()``                                  :py:meth:`.ImageDraw2.Draw.textbbox` and :py:meth:`.ImageDraw2.Draw.textlength`\n=============================================================== =============================================================================================================\n\nFreeTypeFont.getmask2 fill parameter\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe undocumented ``fill`` parameter of :py:meth:`.FreeTypeFont.getmask2` has been\nremoved.\n\nPhotoImage.paste box parameter\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``box`` parameter was unused and has been removed.\n\nPyQt5 and PySide2\n^^^^^^^^^^^^^^^^^\n\n`Qt 5 reached end-of-life <https://www.qt.io/blog/qt-5.15-released>`_ on 2020-12-08 for\nopen-source users (and will reach EOL on 2023-12-08 for commercial licence holders).\n\nSupport for PyQt5 and PySide2 has been removed from ``ImageQt``. Upgrade to\n`PyQt6 <https://www.riverbankcomputing.com/static/Docs/PyQt6/>`_ or\n`PySide6 <https://doc.qt.io/qtforpython-6/>`_ instead.\n\nImage.coerce_e\n^^^^^^^^^^^^^^\n\nThis undocumented method has been removed.\n\nDeprecations\n============\n\nPyAccess and Image.USE_CFFI_ACCESS\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSince Pillow's C API is now faster than PyAccess on PyPy,\n:py:mod:`~PIL.PyAccess` has been deprecated and will be removed in Pillow\n11.0.0 (2024-10-15). Pillow's C API will now be used by default on PyPy instead.\n\n``Image.USE_CFFI_ACCESS``, for switching from the C API to PyAccess, is\nsimilarly deprecated.\n\nAPI Changes\n===========\n\nAdded line width parameter to ImageDraw regular_polygon\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAn optional line ``width`` parameter has been added to\n``ImageDraw.Draw.regular_polygon``.\n\nAPI Additions\n=============\n\nAdded ``alpha_only`` argument to ``getbbox()``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:py:meth:`~PIL.Image.Image.getbbox` now accepts a keyword argument of\n``alpha_only``. This is an optional flag, defaulting to ``True``. If ``True``\nand the image has an alpha channel, trim transparent pixels. Otherwise, trim\npixels when all channels are zero.\n\nSecurity\n========\n\nLimit size even if one dimension is zero\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen performing decompression bomb checks, Pillow did not reject images with\nexcessive width and zero height, or zero width and excessive height. That has\nnow been fixed.\n\nThis effectively dates to the PIL fork, since problem images would still have\nbeen processed before Pillow started checking for decompression bombs.\n\nAdded ImageFont.MAX_STRING_LENGTH\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo protect against potential DOS attacks when using arbitrary strings as text\ninput, Pillow will now raise a ``ValueError`` if the number of characters\npassed into ImageFont methods is over a certain limit,\n:py:data:`PIL.ImageFont.MAX_STRING_LENGTH`.\n\nThis threshold can be changed by setting\n:py:data:`PIL.ImageFont.MAX_STRING_LENGTH`. It can be disabled by setting\n``ImageFont.MAX_STRING_LENGTH = None``.\n\nOther Changes\n=============\n\n32-bit wheels\n^^^^^^^^^^^^^\n\n32-bit wheels are no longer provided.\n\nSupport display_jpeg() in IPython\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn addition to ``display()`` and ``display_png``, ``display_jpeg()`` can now\nalso be used to display images in IPython::\n\n    from PIL import Image\n    from IPython.display import display_jpeg\n\n    im = Image.new(\"RGB\", (100, 100), (255, 0, 0))\n    display_jpeg(im)\n\nSupport reading signed 8-bit TIFF images\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTIFF images with signed integer data, 8 bits per sample and a photometric\ninterpretaton of BlackIsZero can now be read.\n", "#\n# The Python Imaging Library.\n# $Id$\n#\n# PIL raster font management\n#\n# History:\n# 1996-08-07 fl   created (experimental)\n# 1997-08-25 fl   minor adjustments to handle fonts from pilfont 0.3\n# 1999-02-06 fl   rewrote most font management stuff in C\n# 1999-03-17 fl   take pth files into account in load_path (from Richard Jones)\n# 2001-02-17 fl   added freetype support\n# 2001-05-09 fl   added TransposedFont wrapper class\n# 2002-03-04 fl   make sure we have a \"L\" or \"1\" font\n# 2002-12-04 fl   skip non-directory entries in the system path\n# 2003-04-29 fl   add embedded default font\n# 2003-09-27 fl   added support for truetype charmap encodings\n#\n# Todo:\n# Adapt to PILFONT2 format (16-bit fonts, compressed, single file)\n#\n# Copyright (c) 1997-2003 by Secret Labs AB\n# Copyright (c) 1996-2003 by Fredrik Lundh\n#\n# See the README file for information on usage and redistribution.\n#\n\nimport base64\nimport os\nimport sys\nimport warnings\nfrom enum import IntEnum\nfrom io import BytesIO\n\nfrom . import Image\nfrom ._util import is_directory, is_path\n\n\nclass Layout(IntEnum):\n    BASIC = 0\n    RAQM = 1\n\n\nMAX_STRING_LENGTH = 1000000\n\n\ntry:\n    from . import _imagingft as core\nexcept ImportError as ex:\n    from ._util import DeferredError\n\n    core = DeferredError(ex)\n\n\ndef _string_length_check(text):\n    if MAX_STRING_LENGTH is not None and len(text) > MAX_STRING_LENGTH:\n        msg = \"too many characters in string\"\n        raise ValueError(msg)\n\n\n# FIXME: add support for pilfont2 format (see FontFile.py)\n\n# --------------------------------------------------------------------\n# Font metrics format:\n#       \"PILfont\" LF\n#       fontdescriptor LF\n#       (optional) key=value... LF\n#       \"DATA\" LF\n#       binary data: 256*10*2 bytes (dx, dy, dstbox, srcbox)\n#\n# To place a character, cut out srcbox and paste at dstbox,\n# relative to the character position.  Then move the character\n# position according to dx, dy.\n# --------------------------------------------------------------------\n\n\nclass ImageFont:\n    \"\"\"PIL font wrapper\"\"\"\n\n    def _load_pilfont(self, filename):\n        with open(filename, \"rb\") as fp:\n            image = None\n            for ext in (\".png\", \".gif\", \".pbm\"):\n                if image:\n                    image.close()\n                try:\n                    fullname = os.path.splitext(filename)[0] + ext\n                    image = Image.open(fullname)\n                except Exception:\n                    pass\n                else:\n                    if image and image.mode in (\"1\", \"L\"):\n                        break\n            else:\n                if image:\n                    image.close()\n                msg = \"cannot find glyph data file\"\n                raise OSError(msg)\n\n            self.file = fullname\n\n            self._load_pilfont_data(fp, image)\n            image.close()\n\n    def _load_pilfont_data(self, file, image):\n        # read PILfont header\n        if file.readline() != b\"PILfont\\n\":\n            msg = \"Not a PILfont file\"\n            raise SyntaxError(msg)\n        file.readline().split(b\";\")\n        self.info = []  # FIXME: should be a dictionary\n        while True:\n            s = file.readline()\n            if not s or s == b\"DATA\\n\":\n                break\n            self.info.append(s)\n\n        # read PILfont metrics\n        data = file.read(256 * 20)\n\n        # check image\n        if image.mode not in (\"1\", \"L\"):\n            msg = \"invalid font image mode\"\n            raise TypeError(msg)\n\n        image.load()\n\n        self.font = Image.core.font(image.im, data)\n\n    def getmask(self, text, mode=\"\", *args, **kwargs):\n        \"\"\"\n        Create a bitmap for the text.\n\n        If the font uses antialiasing, the bitmap should have mode ``L`` and use a\n        maximum value of 255. Otherwise, it should have mode ``1``.\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n                     .. versionadded:: 1.1.5\n\n        :return: An internal PIL storage memory instance as defined by the\n                 :py:mod:`PIL.Image.core` interface module.\n        \"\"\"\n        return self.font.getmask(text, mode)\n\n    def getbbox(self, text, *args, **kwargs):\n        \"\"\"\n        Returns bounding box (in pixels) of given text.\n\n        .. versionadded:: 9.2.0\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n        :return: ``(left, top, right, bottom)`` bounding box\n        \"\"\"\n        _string_length_check(text)\n        width, height = self.font.getsize(text)\n        return 0, 0, width, height\n\n    def getlength(self, text, *args, **kwargs):\n        \"\"\"\n        Returns length (in pixels) of given text.\n        This is the amount by which following text should be offset.\n\n        .. versionadded:: 9.2.0\n        \"\"\"\n        _string_length_check(text)\n        width, height = self.font.getsize(text)\n        return width\n\n\n##\n# Wrapper for FreeType fonts.  Application code should use the\n# <b>truetype</b> factory function to create font objects.\n\n\nclass FreeTypeFont:\n    \"\"\"FreeType font wrapper (requires _imagingft service)\"\"\"\n\n    def __init__(self, font=None, size=10, index=0, encoding=\"\", layout_engine=None):\n        # FIXME: use service provider instead\n\n        self.path = font\n        self.size = size\n        self.index = index\n        self.encoding = encoding\n\n        if layout_engine not in (Layout.BASIC, Layout.RAQM):\n            layout_engine = Layout.BASIC\n            if core.HAVE_RAQM:\n                layout_engine = Layout.RAQM\n        elif layout_engine == Layout.RAQM and not core.HAVE_RAQM:\n            warnings.warn(\n                \"Raqm layout was requested, but Raqm is not available. \"\n                \"Falling back to basic layout.\"\n            )\n            layout_engine = Layout.BASIC\n\n        self.layout_engine = layout_engine\n\n        def load_from_bytes(f):\n            self.font_bytes = f.read()\n            self.font = core.getfont(\n                \"\", size, index, encoding, self.font_bytes, layout_engine\n            )\n\n        if is_path(font):\n            if sys.platform == \"win32\":\n                font_bytes_path = font if isinstance(font, bytes) else font.encode()\n                try:\n                    font_bytes_path.decode(\"ascii\")\n                except UnicodeDecodeError:\n                    # FreeType cannot load fonts with non-ASCII characters on Windows\n                    # So load it into memory first\n                    with open(font, \"rb\") as f:\n                        load_from_bytes(f)\n                    return\n            self.font = core.getfont(\n                font, size, index, encoding, layout_engine=layout_engine\n            )\n        else:\n            load_from_bytes(font)\n\n    def __getstate__(self):\n        return [self.path, self.size, self.index, self.encoding, self.layout_engine]\n\n    def __setstate__(self, state):\n        path, size, index, encoding, layout_engine = state\n        self.__init__(path, size, index, encoding, layout_engine)\n\n    def getname(self):\n        \"\"\"\n        :return: A tuple of the font family (e.g. Helvetica) and the font style\n            (e.g. Bold)\n        \"\"\"\n        return self.font.family, self.font.style\n\n    def getmetrics(self):\n        \"\"\"\n        :return: A tuple of the font ascent (the distance from the baseline to\n            the highest outline point) and descent (the distance from the\n            baseline to the lowest outline point, a negative value)\n        \"\"\"\n        return self.font.ascent, self.font.descent\n\n    def getlength(self, text, mode=\"\", direction=None, features=None, language=None):\n        \"\"\"\n        Returns length (in pixels with 1/64 precision) of given text when rendered\n        in font with provided direction, features, and language.\n\n        This is the amount by which following text should be offset.\n        Text bounding box may extend past the length in some fonts,\n        e.g. when using italics or accents.\n\n        The result is returned as a float; it is a whole number if using basic layout.\n\n        Note that the sum of two lengths may not equal the length of a concatenated\n        string due to kerning. If you need to adjust for kerning, include the following\n        character and subtract its length.\n\n        For example, instead of ::\n\n          hello = font.getlength(\"Hello\")\n          world = font.getlength(\"World\")\n          hello_world = hello + world  # not adjusted for kerning\n          assert hello_world == font.getlength(\"HelloWorld\")  # may fail\n\n        use ::\n\n          hello = font.getlength(\"HelloW\") - font.getlength(\"W\")  # adjusted for kerning\n          world = font.getlength(\"World\")\n          hello_world = hello + world  # adjusted for kerning\n          assert hello_world == font.getlength(\"HelloWorld\")  # True\n\n        or disable kerning with (requires libraqm) ::\n\n          hello = draw.textlength(\"Hello\", font, features=[\"-kern\"])\n          world = draw.textlength(\"World\", font, features=[\"-kern\"])\n          hello_world = hello + world  # kerning is disabled, no need to adjust\n          assert hello_world == draw.textlength(\"HelloWorld\", font, features=[\"-kern\"])\n\n        .. versionadded:: 8.0.0\n\n        :param text: Text to measure.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n        :return: Width for horizontal, height for vertical text.\n        \"\"\"\n        _string_length_check(text)\n        return self.font.getlength(text, mode, direction, features, language) / 64\n\n    def getbbox(\n        self,\n        text,\n        mode=\"\",\n        direction=None,\n        features=None,\n        language=None,\n        stroke_width=0,\n        anchor=None,\n    ):\n        \"\"\"\n        Returns bounding box (in pixels) of given text relative to given anchor\n        when rendered in font with provided direction, features, and language.\n\n        Use :py:meth:`getlength()` to get the offset of following text with\n        1/64 pixel precision. The bounding box includes extra margins for\n        some fonts, e.g. italics or accents.\n\n        .. versionadded:: 8.0.0\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n        :param stroke_width: The width of the text stroke.\n\n        :param anchor:  The text anchor alignment. Determines the relative location of\n                        the anchor to the text. The default alignment is top left.\n                        See :ref:`text-anchors` for valid values.\n\n        :return: ``(left, top, right, bottom)`` bounding box\n        \"\"\"\n        _string_length_check(text)\n        size, offset = self.font.getsize(\n            text, mode, direction, features, language, anchor\n        )\n        left, top = offset[0] - stroke_width, offset[1] - stroke_width\n        width, height = size[0] + 2 * stroke_width, size[1] + 2 * stroke_width\n        return left, top, left + width, top + height\n\n    def getmask(\n        self,\n        text,\n        mode=\"\",\n        direction=None,\n        features=None,\n        language=None,\n        stroke_width=0,\n        anchor=None,\n        ink=0,\n        start=None,\n    ):\n        \"\"\"\n        Create a bitmap for the text.\n\n        If the font uses antialiasing, the bitmap should have mode ``L`` and use a\n        maximum value of 255. If the font has embedded color data, the bitmap\n        should have mode ``RGBA``. Otherwise, it should have mode ``1``.\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n                     .. versionadded:: 1.1.5\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n                          .. versionadded:: 4.2.0\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n                         .. versionadded:: 4.2.0\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n                         .. versionadded:: 6.0.0\n\n        :param stroke_width: The width of the text stroke.\n\n                         .. versionadded:: 6.2.0\n\n        :param anchor:  The text anchor alignment. Determines the relative location of\n                        the anchor to the text. The default alignment is top left.\n                        See :ref:`text-anchors` for valid values.\n\n                         .. versionadded:: 8.0.0\n\n        :param ink: Foreground ink for rendering in RGBA mode.\n\n                         .. versionadded:: 8.0.0\n\n        :param start: Tuple of horizontal and vertical offset, as text may render\n                      differently when starting at fractional coordinates.\n\n                         .. versionadded:: 9.4.0\n\n        :return: An internal PIL storage memory instance as defined by the\n                 :py:mod:`PIL.Image.core` interface module.\n        \"\"\"\n        return self.getmask2(\n            text,\n            mode,\n            direction=direction,\n            features=features,\n            language=language,\n            stroke_width=stroke_width,\n            anchor=anchor,\n            ink=ink,\n            start=start,\n        )[0]\n\n    def getmask2(\n        self,\n        text,\n        mode=\"\",\n        direction=None,\n        features=None,\n        language=None,\n        stroke_width=0,\n        anchor=None,\n        ink=0,\n        start=None,\n        *args,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a bitmap for the text.\n\n        If the font uses antialiasing, the bitmap should have mode ``L`` and use a\n        maximum value of 255. If the font has embedded color data, the bitmap\n        should have mode ``RGBA``. Otherwise, it should have mode ``1``.\n\n        :param text: Text to render.\n        :param mode: Used by some graphics drivers to indicate what mode the\n                     driver prefers; if empty, the renderer may return either\n                     mode. Note that the mode is always a string, to simplify\n                     C-level implementations.\n\n                     .. versionadded:: 1.1.5\n\n        :param direction: Direction of the text. It can be 'rtl' (right to\n                          left), 'ltr' (left to right) or 'ttb' (top to bottom).\n                          Requires libraqm.\n\n                          .. versionadded:: 4.2.0\n\n        :param features: A list of OpenType font features to be used during text\n                         layout. This is usually used to turn on optional\n                         font features that are not enabled by default,\n                         for example 'dlig' or 'ss01', but can be also\n                         used to turn off default font features for\n                         example '-liga' to disable ligatures or '-kern'\n                         to disable kerning.  To get all supported\n                         features, see\n                         https://learn.microsoft.com/en-us/typography/opentype/spec/featurelist\n                         Requires libraqm.\n\n                         .. versionadded:: 4.2.0\n\n        :param language: Language of the text. Different languages may use\n                         different glyph shapes or ligatures. This parameter tells\n                         the font which language the text is in, and to apply the\n                         correct substitutions as appropriate, if available.\n                         It should be a `BCP 47 language code\n                         <https://www.w3.org/International/articles/language-tags/>`_\n                         Requires libraqm.\n\n                         .. versionadded:: 6.0.0\n\n        :param stroke_width: The width of the text stroke.\n\n                         .. versionadded:: 6.2.0\n\n        :param anchor:  The text anchor alignment. Determines the relative location of\n                        the anchor to the text. The default alignment is top left.\n                        See :ref:`text-anchors` for valid values.\n\n                         .. versionadded:: 8.0.0\n\n        :param ink: Foreground ink for rendering in RGBA mode.\n\n                         .. versionadded:: 8.0.0\n\n        :param start: Tuple of horizontal and vertical offset, as text may render\n                      differently when starting at fractional coordinates.\n\n                         .. versionadded:: 9.4.0\n\n        :return: A tuple of an internal PIL storage memory instance as defined by the\n                 :py:mod:`PIL.Image.core` interface module, and the text offset, the\n                 gap between the starting coordinate and the first marking\n        \"\"\"\n        _string_length_check(text)\n        if start is None:\n            start = (0, 0)\n        im, size, offset = self.font.render(\n            text,\n            Image.core.fill,\n            mode,\n            direction,\n            features,\n            language,\n            stroke_width,\n            anchor,\n            ink,\n            start[0],\n            start[1],\n            Image.MAX_IMAGE_PIXELS,\n        )\n        Image._decompression_bomb_check(size)\n        return im, offset\n\n    def font_variant(\n        self, font=None, size=None, index=None, encoding=None, layout_engine=None\n    ):\n        \"\"\"\n        Create a copy of this FreeTypeFont object,\n        using any specified arguments to override the settings.\n\n        Parameters are identical to the parameters used to initialize this\n        object.\n\n        :return: A FreeTypeFont object.\n        \"\"\"\n        if font is None:\n            try:\n                font = BytesIO(self.font_bytes)\n            except AttributeError:\n                font = self.path\n        return FreeTypeFont(\n            font=font,\n            size=self.size if size is None else size,\n            index=self.index if index is None else index,\n            encoding=self.encoding if encoding is None else encoding,\n            layout_engine=layout_engine or self.layout_engine,\n        )\n\n    def get_variation_names(self):\n        \"\"\"\n        :returns: A list of the named styles in a variation font.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        try:\n            names = self.font.getvarnames()\n        except AttributeError as e:\n            msg = \"FreeType 2.9.1 or greater is required\"\n            raise NotImplementedError(msg) from e\n        return [name.replace(b\"\\x00\", b\"\") for name in names]\n\n    def set_variation_by_name(self, name):\n        \"\"\"\n        :param name: The name of the style.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        names = self.get_variation_names()\n        if not isinstance(name, bytes):\n            name = name.encode()\n        index = names.index(name) + 1\n\n        if index == getattr(self, \"_last_variation_index\", None):\n            # When the same name is set twice in a row,\n            # there is an 'unknown freetype error'\n            # https://savannah.nongnu.org/bugs/?56186\n            return\n        self._last_variation_index = index\n\n        self.font.setvarname(index)\n\n    def get_variation_axes(self):\n        \"\"\"\n        :returns: A list of the axes in a variation font.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        try:\n            axes = self.font.getvaraxes()\n        except AttributeError as e:\n            msg = \"FreeType 2.9.1 or greater is required\"\n            raise NotImplementedError(msg) from e\n        for axis in axes:\n            axis[\"name\"] = axis[\"name\"].replace(b\"\\x00\", b\"\")\n        return axes\n\n    def set_variation_by_axes(self, axes):\n        \"\"\"\n        :param axes: A list of values for each axis.\n        :exception OSError: If the font is not a variation font.\n        \"\"\"\n        try:\n            self.font.setvaraxes(axes)\n        except AttributeError as e:\n            msg = \"FreeType 2.9.1 or greater is required\"\n            raise NotImplementedError(msg) from e\n\n\nclass TransposedFont:\n    \"\"\"Wrapper for writing rotated or mirrored text\"\"\"\n\n    def __init__(self, font, orientation=None):\n        \"\"\"\n        Wrapper that creates a transposed font from any existing font\n        object.\n\n        :param font: A font object.\n        :param orientation: An optional orientation.  If given, this should\n            be one of Image.Transpose.FLIP_LEFT_RIGHT, Image.Transpose.FLIP_TOP_BOTTOM,\n            Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_180, or\n            Image.Transpose.ROTATE_270.\n        \"\"\"\n        self.font = font\n        self.orientation = orientation  # any 'transpose' argument, or None\n\n    def getmask(self, text, mode=\"\", *args, **kwargs):\n        im = self.font.getmask(text, mode, *args, **kwargs)\n        if self.orientation is not None:\n            return im.transpose(self.orientation)\n        return im\n\n    def getbbox(self, text, *args, **kwargs):\n        # TransposedFont doesn't support getmask2, move top-left point to (0, 0)\n        # this has no effect on ImageFont and simulates anchor=\"lt\" for FreeTypeFont\n        left, top, right, bottom = self.font.getbbox(text, *args, **kwargs)\n        width = right - left\n        height = bottom - top\n        if self.orientation in (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270):\n            return 0, 0, height, width\n        return 0, 0, width, height\n\n    def getlength(self, text, *args, **kwargs):\n        if self.orientation in (Image.Transpose.ROTATE_90, Image.Transpose.ROTATE_270):\n            msg = \"text length is undefined for text rotated by 90 or 270 degrees\"\n            raise ValueError(msg)\n        _string_length_check(text)\n        return self.font.getlength(text, *args, **kwargs)\n\n\ndef load(filename):\n    \"\"\"\n    Load a font file.  This function loads a font object from the given\n    bitmap font file, and returns the corresponding font object.\n\n    :param filename: Name of font file.\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n    f = ImageFont()\n    f._load_pilfont(filename)\n    return f\n\n\ndef truetype(font=None, size=10, index=0, encoding=\"\", layout_engine=None):\n    \"\"\"\n    Load a TrueType or OpenType font from a file or file-like object,\n    and create a font object.\n    This function loads a font object from the given file or file-like\n    object, and creates a font object for a font of the given size.\n\n    Pillow uses FreeType to open font files. On Windows, be aware that FreeType\n    will keep the file open as long as the FreeTypeFont object exists. Windows\n    limits the number of files that can be open in C at once to 512, so if many\n    fonts are opened simultaneously and that limit is approached, an\n    ``OSError`` may be thrown, reporting that FreeType \"cannot open resource\".\n    A workaround would be to copy the file(s) into memory, and open that instead.\n\n    This function requires the _imagingft service.\n\n    :param font: A filename or file-like object containing a TrueType font.\n                 If the file is not found in this filename, the loader may also\n                 search in other directories, such as the :file:`fonts/`\n                 directory on Windows or :file:`/Library/Fonts/`,\n                 :file:`/System/Library/Fonts/` and :file:`~/Library/Fonts/` on\n                 macOS.\n\n    :param size: The requested size, in pixels.\n    :param index: Which font face to load (default is first available face).\n    :param encoding: Which font encoding to use (default is Unicode). Possible\n                     encodings include (see the FreeType documentation for more\n                     information):\n\n                     * \"unic\" (Unicode)\n                     * \"symb\" (Microsoft Symbol)\n                     * \"ADOB\" (Adobe Standard)\n                     * \"ADBE\" (Adobe Expert)\n                     * \"ADBC\" (Adobe Custom)\n                     * \"armn\" (Apple Roman)\n                     * \"sjis\" (Shift JIS)\n                     * \"gb  \" (PRC)\n                     * \"big5\"\n                     * \"wans\" (Extended Wansung)\n                     * \"joha\" (Johab)\n                     * \"lat1\" (Latin-1)\n\n                     This specifies the character set to use. It does not alter the\n                     encoding of any text provided in subsequent operations.\n    :param layout_engine: Which layout engine to use, if available:\n                     :data:`.ImageFont.Layout.BASIC` or :data:`.ImageFont.Layout.RAQM`.\n                     If it is available, Raqm layout will be used by default.\n                     Otherwise, basic layout will be used.\n\n                     Raqm layout is recommended for all non-English text. If Raqm layout\n                     is not required, basic layout will have better performance.\n\n                     You can check support for Raqm layout using\n                     :py:func:`PIL.features.check_feature` with ``feature=\"raqm\"``.\n\n                     .. versionadded:: 4.2.0\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n\n    def freetype(font):\n        return FreeTypeFont(font, size, index, encoding, layout_engine)\n\n    try:\n        return freetype(font)\n    except OSError:\n        if not is_path(font):\n            raise\n        ttf_filename = os.path.basename(font)\n\n        dirs = []\n        if sys.platform == \"win32\":\n            # check the windows font repository\n            # NOTE: must use uppercase WINDIR, to work around bugs in\n            # 1.5.2's os.environ.get()\n            windir = os.environ.get(\"WINDIR\")\n            if windir:\n                dirs.append(os.path.join(windir, \"fonts\"))\n        elif sys.platform in (\"linux\", \"linux2\"):\n            lindirs = os.environ.get(\"XDG_DATA_DIRS\")\n            if not lindirs:\n                # According to the freedesktop spec, XDG_DATA_DIRS should\n                # default to /usr/share\n                lindirs = \"/usr/share\"\n            dirs += [os.path.join(lindir, \"fonts\") for lindir in lindirs.split(\":\")]\n        elif sys.platform == \"darwin\":\n            dirs += [\n                \"/Library/Fonts\",\n                \"/System/Library/Fonts\",\n                os.path.expanduser(\"~/Library/Fonts\"),\n            ]\n\n        ext = os.path.splitext(ttf_filename)[1]\n        first_font_with_a_different_extension = None\n        for directory in dirs:\n            for walkroot, walkdir, walkfilenames in os.walk(directory):\n                for walkfilename in walkfilenames:\n                    if ext and walkfilename == ttf_filename:\n                        return freetype(os.path.join(walkroot, walkfilename))\n                    elif not ext and os.path.splitext(walkfilename)[0] == ttf_filename:\n                        fontpath = os.path.join(walkroot, walkfilename)\n                        if os.path.splitext(fontpath)[1] == \".ttf\":\n                            return freetype(fontpath)\n                        if not ext and first_font_with_a_different_extension is None:\n                            first_font_with_a_different_extension = fontpath\n        if first_font_with_a_different_extension:\n            return freetype(first_font_with_a_different_extension)\n        raise\n\n\ndef load_path(filename):\n    \"\"\"\n    Load font file. Same as :py:func:`~PIL.ImageFont.load`, but searches for a\n    bitmap font along the Python path.\n\n    :param filename: Name of font file.\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n    for directory in sys.path:\n        if is_directory(directory):\n            if not isinstance(filename, str):\n                filename = filename.decode(\"utf-8\")\n            try:\n                return load(os.path.join(directory, filename))\n            except OSError:\n                pass\n    msg = \"cannot find font file\"\n    raise OSError(msg)\n\n\ndef load_default():\n    \"\"\"Load a \"better than nothing\" default font.\n\n    .. versionadded:: 1.1.4\n\n    :return: A font object.\n    \"\"\"\n    f = ImageFont()\n    f._load_pilfont_data(\n        # courB08\n        BytesIO(\n            base64.b64decode(\n                b\"\"\"\nUElMZm9udAo7Ozs7OzsxMDsKREFUQQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAA//8AAQAAAAAAAAABAAEA\nBgAAAAH/+gADAAAAAQAAAAMABgAGAAAAAf/6AAT//QADAAAABgADAAYAAAAA//kABQABAAYAAAAL\nAAgABgAAAAD/+AAFAAEACwAAABAACQAGAAAAAP/5AAUAAAAQAAAAFQAHAAYAAP////oABQAAABUA\nAAAbAAYABgAAAAH/+QAE//wAGwAAAB4AAwAGAAAAAf/5AAQAAQAeAAAAIQAIAAYAAAAB//kABAAB\nACEAAAAkAAgABgAAAAD/+QAE//0AJAAAACgABAAGAAAAAP/6AAX//wAoAAAALQAFAAYAAAAB//8A\nBAACAC0AAAAwAAMABgAAAAD//AAF//0AMAAAADUAAQAGAAAAAf//AAMAAAA1AAAANwABAAYAAAAB\n//kABQABADcAAAA7AAgABgAAAAD/+QAFAAAAOwAAAEAABwAGAAAAAP/5AAYAAABAAAAARgAHAAYA\nAAAA//kABQAAAEYAAABLAAcABgAAAAD/+QAFAAAASwAAAFAABwAGAAAAAP/5AAYAAABQAAAAVgAH\nAAYAAAAA//kABQAAAFYAAABbAAcABgAAAAD/+QAFAAAAWwAAAGAABwAGAAAAAP/5AAUAAABgAAAA\nZQAHAAYAAAAA//kABQAAAGUAAABqAAcABgAAAAD/+QAFAAAAagAAAG8ABwAGAAAAAf/8AAMAAABv\nAAAAcQAEAAYAAAAA//wAAwACAHEAAAB0AAYABgAAAAD/+gAE//8AdAAAAHgABQAGAAAAAP/7AAT/\n/gB4AAAAfAADAAYAAAAB//oABf//AHwAAACAAAUABgAAAAD/+gAFAAAAgAAAAIUABgAGAAAAAP/5\nAAYAAQCFAAAAiwAIAAYAAP////oABgAAAIsAAACSAAYABgAA////+gAFAAAAkgAAAJgABgAGAAAA\nAP/6AAUAAACYAAAAnQAGAAYAAP////oABQAAAJ0AAACjAAYABgAA////+gAFAAAAowAAAKkABgAG\nAAD////6AAUAAACpAAAArwAGAAYAAAAA//oABQAAAK8AAAC0AAYABgAA////+gAGAAAAtAAAALsA\nBgAGAAAAAP/6AAQAAAC7AAAAvwAGAAYAAP////oABQAAAL8AAADFAAYABgAA////+gAGAAAAxQAA\nAMwABgAGAAD////6AAUAAADMAAAA0gAGAAYAAP////oABQAAANIAAADYAAYABgAA////+gAGAAAA\n2AAAAN8ABgAGAAAAAP/6AAUAAADfAAAA5AAGAAYAAP////oABQAAAOQAAADqAAYABgAAAAD/+gAF\nAAEA6gAAAO8ABwAGAAD////6AAYAAADvAAAA9gAGAAYAAAAA//oABQAAAPYAAAD7AAYABgAA////\n+gAFAAAA+wAAAQEABgAGAAD////6AAYAAAEBAAABCAAGAAYAAP////oABgAAAQgAAAEPAAYABgAA\n////+gAGAAABDwAAARYABgAGAAAAAP/6AAYAAAEWAAABHAAGAAYAAP////oABgAAARwAAAEjAAYA\nBgAAAAD/+gAFAAABIwAAASgABgAGAAAAAf/5AAQAAQEoAAABKwAIAAYAAAAA//kABAABASsAAAEv\nAAgABgAAAAH/+QAEAAEBLwAAATIACAAGAAAAAP/5AAX//AEyAAABNwADAAYAAAAAAAEABgACATcA\nAAE9AAEABgAAAAH/+QAE//wBPQAAAUAAAwAGAAAAAP/7AAYAAAFAAAABRgAFAAYAAP////kABQAA\nAUYAAAFMAAcABgAAAAD/+wAFAAABTAAAAVEABQAGAAAAAP/5AAYAAAFRAAABVwAHAAYAAAAA//sA\nBQAAAVcAAAFcAAUABgAAAAD/+QAFAAABXAAAAWEABwAGAAAAAP/7AAYAAgFhAAABZwAHAAYAAP//\n//kABQAAAWcAAAFtAAcABgAAAAD/+QAGAAABbQAAAXMABwAGAAAAAP/5AAQAAgFzAAABdwAJAAYA\nAP////kABgAAAXcAAAF+AAcABgAAAAD/+QAGAAABfgAAAYQABwAGAAD////7AAUAAAGEAAABigAF\nAAYAAP////sABQAAAYoAAAGQAAUABgAAAAD/+wAFAAABkAAAAZUABQAGAAD////7AAUAAgGVAAAB\nmwAHAAYAAAAA//sABgACAZsAAAGhAAcABgAAAAD/+wAGAAABoQAAAacABQAGAAAAAP/7AAYAAAGn\nAAABrQAFAAYAAAAA//kABgAAAa0AAAGzAAcABgAA////+wAGAAABswAAAboABQAGAAD////7AAUA\nAAG6AAABwAAFAAYAAP////sABgAAAcAAAAHHAAUABgAAAAD/+wAGAAABxwAAAc0ABQAGAAD////7\nAAYAAgHNAAAB1AAHAAYAAAAA//sABQAAAdQAAAHZAAUABgAAAAH/+QAFAAEB2QAAAd0ACAAGAAAA\nAv/6AAMAAQHdAAAB3gAHAAYAAAAA//kABAABAd4AAAHiAAgABgAAAAD/+wAF//0B4gAAAecAAgAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAB\n//sAAwACAecAAAHpAAcABgAAAAD/+QAFAAEB6QAAAe4ACAAGAAAAAP/5AAYAAAHuAAAB9AAHAAYA\nAAAA//oABf//AfQAAAH5AAUABgAAAAD/+QAGAAAB+QAAAf8ABwAGAAAAAv/5AAMAAgH/AAACAAAJ\nAAYAAAAA//kABQABAgAAAAIFAAgABgAAAAH/+gAE//sCBQAAAggAAQAGAAAAAP/5AAYAAAIIAAAC\nDgAHAAYAAAAB//kABf/+Ag4AAAISAAUABgAA////+wAGAAACEgAAAhkABQAGAAAAAP/7AAX//gIZ\nAAACHgADAAYAAAAA//wABf/9Ah4AAAIjAAEABgAAAAD/+QAHAAACIwAAAioABwAGAAAAAP/6AAT/\n+wIqAAACLgABAAYAAAAA//kABP/8Ai4AAAIyAAMABgAAAAD/+gAFAAACMgAAAjcABgAGAAAAAf/5\nAAT//QI3AAACOgAEAAYAAAAB//kABP/9AjoAAAI9AAQABgAAAAL/+QAE//sCPQAAAj8AAgAGAAD/\n///7AAYAAgI/AAACRgAHAAYAAAAA//kABgABAkYAAAJMAAgABgAAAAH//AAD//0CTAAAAk4AAQAG\nAAAAAf//AAQAAgJOAAACUQADAAYAAAAB//kABP/9AlEAAAJUAAQABgAAAAH/+QAF//4CVAAAAlgA\nBQAGAAD////7AAYAAAJYAAACXwAFAAYAAP////kABgAAAl8AAAJmAAcABgAA////+QAGAAACZgAA\nAm0ABwAGAAD////5AAYAAAJtAAACdAAHAAYAAAAA//sABQACAnQAAAJ5AAcABgAA////9wAGAAAC\neQAAAoAACQAGAAD////3AAYAAAKAAAAChwAJAAYAAP////cABgAAAocAAAKOAAkABgAA////9wAG\nAAACjgAAApUACQAGAAD////4AAYAAAKVAAACnAAIAAYAAP////cABgAAApwAAAKjAAkABgAA////\n+gAGAAACowAAAqoABgAGAAAAAP/6AAUAAgKqAAACrwAIAAYAAP////cABQAAAq8AAAK1AAkABgAA\n////9wAFAAACtQAAArsACQAGAAD////3AAUAAAK7AAACwQAJAAYAAP////gABQAAAsEAAALHAAgA\nBgAAAAD/9wAEAAACxwAAAssACQAGAAAAAP/3AAQAAALLAAACzwAJAAYAAAAA//cABAAAAs8AAALT\nAAkABgAAAAD/+AAEAAAC0wAAAtcACAAGAAD////6AAUAAALXAAAC3QAGAAYAAP////cABgAAAt0A\nAALkAAkABgAAAAD/9wAFAAAC5AAAAukACQAGAAAAAP/3AAUAAALpAAAC7gAJAAYAAAAA//cABQAA\nAu4AAALzAAkABgAAAAD/9wAFAAAC8wAAAvgACQAGAAAAAP/4AAUAAAL4AAAC/QAIAAYAAAAA//oA\nBf//Av0AAAMCAAUABgAA////+gAGAAADAgAAAwkABgAGAAD////3AAYAAAMJAAADEAAJAAYAAP//\n//cABgAAAxAAAAMXAAkABgAA////9wAGAAADFwAAAx4ACQAGAAD////4AAYAAAAAAAoABwASAAYA\nAP////cABgAAAAcACgAOABMABgAA////+gAFAAAADgAKABQAEAAGAAD////6AAYAAAAUAAoAGwAQ\nAAYAAAAA//gABgAAABsACgAhABIABgAAAAD/+AAGAAAAIQAKACcAEgAGAAAAAP/4AAYAAAAnAAoA\nLQASAAYAAAAA//gABgAAAC0ACgAzABIABgAAAAD/+QAGAAAAMwAKADkAEQAGAAAAAP/3AAYAAAA5\nAAoAPwATAAYAAP////sABQAAAD8ACgBFAA8ABgAAAAD/+wAFAAIARQAKAEoAEQAGAAAAAP/4AAUA\nAABKAAoATwASAAYAAAAA//gABQAAAE8ACgBUABIABgAAAAD/+AAFAAAAVAAKAFkAEgAGAAAAAP/5\nAAUAAABZAAoAXgARAAYAAAAA//gABgAAAF4ACgBkABIABgAAAAD/+AAGAAAAZAAKAGoAEgAGAAAA\nAP/4AAYAAABqAAoAcAASAAYAAAAA//kABgAAAHAACgB2ABEABgAAAAD/+AAFAAAAdgAKAHsAEgAG\nAAD////4AAYAAAB7AAoAggASAAYAAAAA//gABQAAAIIACgCHABIABgAAAAD/+AAFAAAAhwAKAIwA\nEgAGAAAAAP/4AAUAAACMAAoAkQASAAYAAAAA//gABQAAAJEACgCWABIABgAAAAD/+QAFAAAAlgAK\nAJsAEQAGAAAAAP/6AAX//wCbAAoAoAAPAAYAAAAA//oABQABAKAACgClABEABgAA////+AAGAAAA\npQAKAKwAEgAGAAD////4AAYAAACsAAoAswASAAYAAP////gABgAAALMACgC6ABIABgAA////+QAG\nAAAAugAKAMEAEQAGAAD////4AAYAAgDBAAoAyAAUAAYAAP////kABQACAMgACgDOABMABgAA////\n+QAGAAIAzgAKANUAEw==\n\"\"\"\n            )\n        ),\n        Image.open(\n            BytesIO(\n                base64.b64decode(\n                    b\"\"\"\niVBORw0KGgoAAAANSUhEUgAAAx4AAAAUAQAAAAArMtZoAAAEwElEQVR4nABlAJr/AHVE4czCI/4u\nMc4b7vuds/xzjz5/3/7u/n9vMe7vnfH/9++vPn/xyf5zhxzjt8GHw8+2d83u8x27199/nxuQ6Od9\nM43/5z2I+9n9ZtmDBwMQECDRQw/eQIQohJXxpBCNVE6QCCAAAAD//wBlAJr/AgALyj1t/wINwq0g\nLeNZUworuN1cjTPIzrTX6ofHWeo3v336qPzfEwRmBnHTtf95/fglZK5N0PDgfRTslpGBvz7LFc4F\nIUXBWQGjQ5MGCx34EDFPwXiY4YbYxavpnhHFrk14CDAAAAD//wBlAJr/AgKqRooH2gAgPeggvUAA\nBu2WfgPoAwzRAABAAAAAAACQgLz/3Uv4Gv+gX7BJgDeeGP6AAAD1NMDzKHD7ANWr3loYbxsAD791\nNAADfcoIDyP44K/jv4Y63/Z+t98Ovt+ub4T48LAAAAD//wBlAJr/AuplMlADJAAAAGuAphWpqhMx\nin0A/fRvAYBABPgBwBUgABBQ/sYAyv9g0bCHgOLoGAAAAAAAREAAwI7nr0ArYpow7aX8//9LaP/9\nSjdavWA8ePHeBIKB//81/83ndznOaXx379wAAAD//wBlAJr/AqDxW+D3AABAAbUh/QMnbQag/gAY\nAYDAAACgtgD/gOqAAAB5IA/8AAAk+n9w0AAA8AAAmFRJuPo27ciC0cD5oeW4E7KA/wD3ECMAn2tt\ny8PgwH8AfAxFzC0JzeAMtratAsC/ffwAAAD//wBlAJr/BGKAyCAA4AAAAvgeYTAwHd1kmQF5chkG\nABoMIHcL5xVpTfQbUqzlAAAErwAQBgAAEOClA5D9il08AEh/tUzdCBsXkbgACED+woQg8Si9VeqY\nlODCn7lmF6NhnAEYgAAA/NMIAAAAAAD//2JgjLZgVGBg5Pv/Tvpc8hwGBjYGJADjHDrAwPzAjv/H\n/Wf3PzCwtzcwHmBgYGcwbZz8wHaCAQMDOwMDQ8MCBgYOC3W7mp+f0w+wHOYxO3OG+e376hsMZjk3\nAAAAAP//YmCMY2A4wMAIN5e5gQETPD6AZisDAwMDgzSDAAPjByiHcQMDAwMDg1nOze1lByRu5/47\nc4859311AYNZzg0AAAAA//9iYGDBYihOIIMuwIjGL39/fwffA8b//xv/P2BPtzzHwCBjUQAAAAD/\n/yLFBrIBAAAA//9i1HhcwdhizX7u8NZNzyLbvT97bfrMf/QHI8evOwcSqGUJAAAA//9iYBB81iSw\npEE170Qrg5MIYydHqwdDQRMrAwcVrQAAAAD//2J4x7j9AAMDn8Q/BgYLBoaiAwwMjPdvMDBYM1Tv\noJodAAAAAP//Yqo/83+dxePWlxl3npsel9lvLfPcqlE9725C+acfVLMEAAAA//9i+s9gwCoaaGMR\nevta/58PTEWzr21hufPjA8N+qlnBwAAAAAD//2JiWLci5v1+HmFXDqcnULE/MxgYGBj+f6CaJQAA\nAAD//2Ji2FrkY3iYpYC5qDeGgeEMAwPDvwQBBoYvcTwOVLMEAAAA//9isDBgkP///0EOg9z35v//\nGc/eeW7BwPj5+QGZhANUswMAAAD//2JgqGBgYGBgqEMXlvhMPUsAAAAA//8iYDd1AAAAAP//AwDR\nw7IkEbzhVQAAAABJRU5ErkJggg==\n\"\"\"\n                )\n            )\n        ),\n    )\n    return f\n"], "filenames": ["Tests/test_imagefont.py", "docs/reference/ImageFont.rst", "docs/releasenotes/10.0.0.rst", "src/PIL/ImageFont.py"], "buggy_code_start_loc": [1040, 19, 172, 43], "buggy_code_end_loc": [1040, 75, 172, 686], "fixing_code_start_loc": [1041, 20, 173, 44], "fixing_code_end_loc": [1060, 94, 185, 702], "type": "CWE-770", "message": "An issue was discovered in Pillow before 10.0.0. It is a Denial of Service that uncontrollably allocates memory to process a given task, potentially causing a service to crash by having it run out of memory. This occurs for truetype in ImageFont when textlength in an ImageDraw instance operates on a long text argument.", "other": {"cve": {"id": "CVE-2023-44271", "sourceIdentifier": "cve@mitre.org", "published": "2023-11-03T05:15:30.137", "lastModified": "2024-01-12T22:09:08.133", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Pillow before 10.0.0. It is a Denial of Service that uncontrollably allocates memory to process a given task, potentially causing a service to crash by having it run out of memory. This occurs for truetype in ImageFont when textlength in an ImageDraw instance operates on a long text argument."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en Pillow antes de la versi\u00f3n 10.0.0. Es una Denegaci\u00f3n de Servicio que asigna memoria de forma incontrolable para procesar una tarea determinada, lo que puede provocar que un servicio falle al quedarse sin memoria. Esto ocurre para truetype en ImageFont cuando la longitud del texto en una instancia de ImageDraw opera con un argumento de texto largo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:python:pillow:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.0.0", "matchCriteriaId": "70ADC73C-9DBB-4903-B4E9-6C2354F2F07A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:38:*:*:*:*:*:*:*", "matchCriteriaId": "CC559B26-5DFC-4B7A-A27C-B77DE755DFF9"}]}]}], "references": [{"url": "https://devhub.checkmarx.com/cve-details/CVE-2023-44271/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/python-pillow/Pillow/commit/1fe1bb49c452b0318cad12ea9d97c3bef188e9a7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/python-pillow/Pillow/pull/7244", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/N2JOEDUJDQLCUII2LQYZYSM7RJL2I3P4/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/python-pillow/Pillow/commit/1fe1bb49c452b0318cad12ea9d97c3bef188e9a7"}}