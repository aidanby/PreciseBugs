{"buggy_code": ["==============\nlxml changelog\n==============\n\n4.6.2 (2020-11-26)\n==================\n\nBugs fixed\n----------\n\n* A vulnerability (CVE-2020-27783) was discovered in the HTML Cleaner by Yaniv Nizry,\n  which allowed JavaScript to pass through.  The cleaner now removes more sneaky\n  \"style\" content.\n\n\n4.6.1 (2020-10-18)\n==================\n\nBugs fixed\n----------\n\n* A vulnerability was discovered in the HTML Cleaner by Yaniv Nizry, which allowed\n  JavaScript to pass through.  The cleaner now removes more sneaky \"style\" content.\n\n\n4.6.0 (2020-10-17)\n==================\n\nFeatures added\n--------------\n\n* GH#310: ``lxml.html.InputGetter`` supports ``__len__()`` to count the number of input fields.\n  Patch by Aidan Woolley.\n\n* ``lxml.html.InputGetter`` has a new ``.items()`` method to ease processing all input fields.\n\n* ``lxml.html.InputGetter.keys()`` now returns the field names in document order.\n\n* GH-309: The API documentation is now generated using ``sphinx-apidoc``.\n  Patch by Chris Mayo.\n\nBugs fixed\n----------\n\n* LP#1869455: C14N 2.0 serialisation failed for unprefixed attributes\n  when a default namespace was defined.\n\n* ``TreeBuilder.close()`` raised ``AssertionError`` in some error cases where it\n  should have raised ``XMLSyntaxError``.  It now raises a combined exception to\n  keep up backwards compatibility, while switching to ``XMLSyntaxError`` as an\n  interface.\n\n\n4.5.2 (2020-07-09)\n==================\n\nBugs fixed\n----------\n\n* ``Cleaner()`` now validates that only known configuration options can be set.\n\n* LP#1882606: ``Cleaner.clean_html()`` discarded comments and PIs regardless of the\n  corresponding configuration option, if ``remove_unknown_tags`` was set.\n\n* LP#1880251: Instead of globally overwriting the document loader in libxml2, lxml now\n  sets it per parser run, which improves the interoperability with other users of libxml2\n  such as libxmlsec.\n\n* LP#1881960: Fix build in CPython 3.10 by using Cython 0.29.21.\n\n* The setup options \"--with-xml2-config\" and \"--with-xslt-config\" were accidentally renamed\n  to \"--xml2-config\" and \"--xslt-config\" in 4.5.1 and are now available again.\n\n\n4.5.1 (2020-05-19)\n==================\n\nBugs fixed\n----------\n\n* LP#1570388: Fix failures when serialising documents larger than 2GB in some cases.\n\n* LP#1865141, GH#298: ``QName`` values were not accepted by the ``el.iter()`` method.\n  Patch by xmo-odoo.\n\n* LP#1863413, GH#297: The build failed to detect libraries on Linux that are only\n  configured via pkg-config.\n  Patch by Hugh McMaster.\n\n\n4.5.0 (2020-01-29)\n==================\n\nFeatures added\n--------------\n\n* A new function ``indent()`` was added to insert tail whitespace for pretty-printing\n  an XML tree.\n\nBugs fixed\n----------\n\n* LP#1857794: Tail text of nodes that get removed from a document using item\n  deletion disappeared silently instead of sticking with the node that was removed.\n\nOther changes\n-------------\n\n* MacOS builds are 64-bit-only by default.\n  Set CFLAGS and LDFLAGS explicitly to override it.\n\n* Linux/MacOS Binary wheels now use libxml2 2.9.10 and libxslt 1.1.34.\n\n* LP#1840234: The package version number is now available as ``lxml.__version__``.\n\n\n4.4.3 (2020-01-28)\n==================\n\nBugs fixed\n----------\n\n* LP#1844674: ``itertext()`` was missing tail text of comments and PIs since 4.4.0.\n\n\n4.4.2 (2019-11-25)\n==================\n\nBugs fixed\n----------\n\n* LP#1835708: ``ElementInclude`` incorrectly rejected repeated non-recursive\n  includes as recursive.\n  Patch by Rainer Hausdorf.\n\n\n4.4.1 (2019-08-11)\n==================\n\nBugs fixed\n----------\n\n* LP#1838252: The order of an OrderedDict was lost in 4.4.0 when passing it as\n  attrib mapping during element creation.\n\n* LP#1838521: The package metadata now lists the supported Python versions.\n\n\n4.4.0 (2019-07-27)\n==================\n\nFeatures added\n--------------\n\n* ``Element.clear()`` accepts a new keyword argument ``keep_tail=True`` to clear\n  everything but the tail text.  This is helpful in some document-style use cases\n  and for clearing the current element in ``iterparse()`` and pull parsing.\n\n* When creating attributes or namespaces from a dict in Python 3.6+, lxml now\n  preserves the original insertion order of that dict, instead of always sorting\n  the items by name.  A similar change was made for ElementTree in CPython 3.8.\n  See https://bugs.python.org/issue34160\n\n* Integer elements in ``lxml.objectify`` implement the ``__index__()`` special method.\n\n* GH#269: Read-only elements in XSLT were missing the ``nsmap`` property.\n  Original patch by Jan Pazdziora.\n\n* ElementInclude can now restrict the maximum inclusion depth via a ``max_depth``\n  argument to prevent content explosion.  It is limited to 6 by default.\n\n* The ``target`` object of the XMLParser can have ``start_ns()`` and ``end_ns()``\n  callback methods to listen to namespace declarations.\n\n* The ``TreeBuilder`` has new arguments ``comment_factory`` and ``pi_factory`` to\n  pass factories for creating comments and processing instructions, as well as\n  flag arguments ``insert_comments`` and ``insert_pis`` to discard them from the\n  tree when set to false.\n\n* A `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ implementation was added as\n  ``etree.canonicalize()``, a corresponding ``C14NWriterTarget`` class, and\n  a ``c14n2`` serialisation method.\n\nBugs fixed\n----------\n\n* When writing to file paths that contain the URL escape character '%', the file\n  path could wrongly be mangled by URL unescaping and thus write to a different\n  file or directory.  Code that writes to file paths that are provided by untrusted\n  sources, but that must work with previous versions of lxml, should best either\n  reject paths that contain '%' characters, or otherwise make sure that the path\n  does not contain maliciously injected '%XX' URL hex escapes for paths like '../'.\n\n* Assigning to Element child slices with negative step could insert the slice at\n  the wrong position, starting too far on the left.\n\n* Assigning to Element child slices with overly large step size could take very\n  long, regardless of the length of the actual slice.\n\n* Assigning to Element child slices of the wrong size could sometimes fail to\n  raise a ValueError (like a list assignment would) and instead assign outside\n  of the original slice bounds or leave parts of it unreplaced.\n\n* The ``comment`` and ``pi`` events in ``iterwalk()`` were never triggered, and\n  instead, comments and processing instructions in the tree were reported as\n  ``start`` elements.  Also, when walking an ElementTree (as opposed to its root\n  element), comments and PIs outside of the root element are now reported.\n\n* LP#1827833: The RelaxNG compact syntax support was broken with recent versions\n  of ``rnc2rng``.\n\n* LP#1758553: The HTML elements ``source`` and ``track`` were added to the list\n  of empty tags in ``lxml.html.defs``.\n\n* Registering a prefix other than \"xml\" for the XML namespace is now rejected.\n\n* Failing to write XSLT output to a file could raise a misleading exception.\n  It now raises ``IOError``.\n\nOther changes\n-------------\n\n* Support for Python 3.4 was removed.\n\n* When using ``Element.find*()`` with prefix-namespace mappings, the empty string\n  is now accepted to define a default namespace, in addition to the previously\n  supported ``None`` prefix.  Empty strings are more convenient since they keep\n  all prefix keys in a namespace dict strings, which simplifies sorting etc.\n\n* The ``ElementTree.write_c14n()`` method has been deprecated in favour of the\n  long preferred ``ElementTree.write(f, method=\"c14n\")``.  It will be removed\n  in a future release.\n\n\n4.3.5 (2019-07-27)\n==================\n\n* Rebuilt with Cython 0.29.13 to support Python 3.8.\n\n\n4.3.4 (2019-06-10)\n==================\n\n* Rebuilt with Cython 0.29.10 to support Python 3.8.\n\n\n4.3.3 (2019-03-26)\n==================\n\nBugs fixed\n----------\n\n* Fix leak of output buffer and unclosed files in ``_XSLTResultTree.write_output()``.\n\n\n4.3.2 (2019-02-29)\n==================\n\nBugs fixed\n----------\n\n* Crash in 4.3.1 when appending a child subtree with certain text nodes.\n\nOther changes\n-------------\n\n* Built with Cython 0.29.6.\n\n\n4.3.1 (2019-02-08)\n==================\n\nBugs fixed\n----------\n\n* LP#1814522: Crash when appending a child subtree that contains unsubstituted\n  entity references.\n\nOther changes\n-------------\n\n* Built with Cython 0.29.5.\n\n\n4.3.0 (2019-01-04)\n==================\n\nFeatures added\n--------------\n\n* The module ``lxml.sax`` is compiled using Cython in order to speed it up.\n\n* GH#267: ``lxml.sax.ElementTreeProducer`` now preserves the namespace prefixes.\n  If two prefixes point to the same URI, the first prefix in alphabetical order\n  is used.  Patch by Lennart Regebro.\n\n* Updated ISO-Schematron implementation to 2013 version (now MIT licensed)\n  and the corresponding schema to the 2016 version (with optional \"properties\").\n\nOther changes\n-------------\n\n* GH#270, GH#271: Support for Python 2.6 and 3.3 was removed.\n  Patch by hugovk.\n\n* The minimum dependency versions were raised to libxml2 2.9.2 and libxslt 1.1.27,\n  which were released in 2014 and 2012 respectively.\n\n* Built with Cython 0.29.2.\n\n\n4.2.6 (2019-01-02)\n==================\n\nBugs fixed\n----------\n\n* LP#1799755: Fix a DeprecationWarning in Py3.7+.\n\n* Import warnings in Python 3.6+ were resolved.\n\n\n4.2.5 (2018-09-09)\n==================\n\nBugs fixed\n----------\n\n* Javascript URLs that used URL escaping were not removed by the HTML cleaner.\n  Security problem found by Omar Eissa.  (CVE-2018-19787)\n\n\n4.2.4 (2018-08-03)\n==================\n\nFeatures added\n--------------\n\n* GH#259: Allow using ``pkg-config`` for build configuration.\n  Patch by Patrick Griffis.\n\nBugs fixed\n----------\n\n* LP#1773749, GH#268: Crash when moving an element to another document with\n  ``Element.insert()``.\n  Patch by Alexander Weggerle.\n\n\n4.2.3 (2018-06-27)\n==================\n\nBugs fixed\n----------\n\n* Reverted GH#265: lxml links against zlib as a shared library again.\n\n\n4.2.2 (2018-06-22)\n==================\n\nBugs fixed\n----------\n\n* GH#266: Fix sporadic crash during GC when parse-time schema validation is used\n  and the parser participates in a reference cycle.\n  Original patch by Julien Greard.\n\n* GH#265: lxml no longer links against zlib as a shared library, only on static builds.\n  Patch by Nehal J Wani.\n\n\n4.2.1 (2018-03-21)\n==================\n\nBugs fixed\n----------\n\n* LP#1755825: ``iterwalk()`` failed to return the 'start' event for the initial\n  element if a tag selector is used.\n\n* LP#1756314: Failure to import 4.2.0 into PyPy due to a missing library symbol.\n\n* LP#1727864, GH#258: Add \"-isysroot\" linker option on MacOS as needed by XCode 9.\n\n\n4.2.0 (2018-03-13)\n==================\n\nFeatures added\n--------------\n\n* GH#255: ``SelectElement.value`` returns more standard-compliant and\n  browser-like defaults for non-multi-selects.  If no option is selected, the\n  value of the first option is returned (instead of None).  If multiple options\n  are selected, the value of the last one is returned (instead of that of the\n  first one).  If no options are present (not standard-compliant)\n  ``SelectElement.value`` still returns ``None``.\n\n* GH#261: The ``HTMLParser()`` now supports the ``huge_tree`` option.\n  Patch by stranac.\n\nBugs fixed\n----------\n\n* LP#1551797: Some XSLT messages were not captured by the transform error log.\n\n* LP#1737825: Crash at shutdown after an interrupted iterparse run with XMLSchema\n  validation.\n\nOther changes\n-------------\n\n\n4.1.1 (2017-11-04)\n==================\n\n* Rebuild with Cython 0.27.3 to improve support for Py3.7.\n\n\n4.1.0 (2017-10-13)\n==================\n\nFeatures added\n--------------\n\n* ElementPath supports text predicates for current node, like \"[.='text']\".\n\n* ElementPath allows spaces in predicates.\n\n* Custom Element classes and XPath functions can now be registered with a\n  decorator rather than explicit dict assignments.\n\n* Static Linux wheels are now built with link time optimisation (LTO) enabled.\n  This should have a beneficial impact on the overall performance by providing\n  a tighter compiler integration between lxml and libxml2/libxslt.\n\nBugs fixed\n----------\n\n* LP#1722776: Requesting non-Element objects like comments from a document with\n  ``PythonElementClassLookup`` could fail with a TypeError.\n\n\n4.0.0 (2017-09-17)\n==================\n\nFeatures added\n--------------\n\n* The ElementPath implementation is now compiled using Cython,\n  which speeds up the ``.find*()`` methods quite significantly.\n\n* The modules ``lxml.builder``, ``lxml.html.diff`` and ``lxml.html.clean``\n  are also compiled using Cython in order to speed them up.\n\n* ``xmlfile()`` supports async coroutines using ``async with`` and ``await``.\n\n* ``iterwalk()`` has a new method ``skip_subtree()`` that prevents walking into\n  the descendants of the current element.\n\n* ``RelaxNG.from_rnc_string()`` accepts a ``base_url`` argument to\n  allow relative resource lookups.\n\n* The XSLT result object has a new method ``.write_output(file)`` that serialises\n  output data into a file according to the ``<xsl:output>`` configuration.\n\nBugs fixed\n----------\n\n* GH#251: HTML comments were handled incorrectly by the soupparser.\n  Patch by mozbugbox.\n\n* LP#1654544: The html5parser no longer passes the ``useChardet`` option\n  if the input is a Unicode string, unless explicitly requested.  When parsing\n  files, the default is to enable it when a URL or file path is passed (because\n  the file is then opened in binary mode), and to disable it when reading from\n  a file(-like) object.\n\n  Note: This is a backwards incompatible change of the default configuration.\n  If your code parses byte strings/streams and depends on character detection,\n  please pass the option ``guess_charset=True`` explicitly, which already worked\n  in older lxml versions.\n\n* LP#1703810: ``etree.fromstring()`` failed to parse UTF-32 data with BOM.\n\n* LP#1526522: Some RelaxNG errors were not reported in the error log.\n\n* LP#1567526: Empty and plain text input raised a TypeError in soupparser.\n\n* LP#1710429: Uninitialised variable usage in HTML diff.\n\n* LP#1415643: The closing tags context manager in ``xmlfile()`` could continue\n  to output end tags even after writing failed with an exception.\n\n* LP#1465357: ``xmlfile.write()`` now accepts and ignores None as input argument.\n\n* Compilation under Py3.7-pre failed due to a modified function signature.\n\nOther changes\n-------------\n\n* The main module source files were renamed from ``lxml.*.pyx`` to plain\n  ``*.pyx`` (e.g. ``etree.pyx``) to simplify their handling in the build\n  process.  Care was taken to keep the old header files as fallbacks for\n  code that compiles against the public C-API of lxml, but it might still\n  be worth validating that third-party code does not notice this change.\n\n\n3.8.0 (2017-06-03)\n==================\n\nFeatures added\n--------------\n\n* ``ElementTree.write()`` has a new option ``doctype`` that writes out a\n  doctype string before the serialisation, in the same way as ``tostring()``.\n\n* GH#220: ``xmlfile`` allows switching output methods at an element level.\n  Patch by Burak Arslan.\n\n* LP#1595781, GH#240: added a PyCapsule Python API and C-level API for\n  passing externally generated libxml2 documents into lxml.\n\n* GH#244: error log entries have a new property ``path`` with an XPath\n  expression (if known, None otherwise) that points to the tree element\n  responsible for the error. Patch by Bob Kline.\n\n* The namespace prefix mapping that can be used in ElementPath now injects\n  a default namespace when passing a None prefix.\n\nBugs fixed\n----------\n\n* GH#238: Character escapes were not hex-encoded in the ``xmlfile`` serialiser.\n  Patch by matejcik.\n\n* GH#229: fix for externally created XML documents.  Patch by Theodore Dubois.\n\n* LP#1665241, GH#228: Form data handling in lxml.html no longer strips the\n  option values specified in form attributes but only the text values.\n  Patch by Ashish Kulkarni.\n\n* LP#1551797: revert previous fix for XSLT error logging as it breaks\n  multi-threaded XSLT processing.\n\n* LP#1673355, GH#233: ``fromstring()`` html5parser failed to parse byte strings.\n\nOther changes\n-------------\n\n* The previously undocumented ``docstring`` option in ``ElementTree.write()``\n  produces a deprecation warning and will eventually be removed.\n\n\n3.7.4 (2017-??-??)\n==================\n\nBugs fixed\n----------\n\n* LP#1551797: revert previous fix for XSLT error logging as it breaks\n  multi-threaded XSLT processing.\n\n* LP#1673355, GH#233: ``fromstring()`` html5parser failed to parse byte strings.\n\n\n3.7.3 (2017-02-18)\n==================\n\nBugs fixed\n----------\n\n* GH#218 was ineffective in Python 3.\n\n* GH#222: ``lxml.html.submit_form()`` failed in Python 3.\n  Patch by Jakub Wilk.\n\n\n3.7.2 (2017-01-08)\n==================\n\n* GH#220: ``xmlfile`` allows switching output methods at an element level.\n  Patch by Burak Arslan.\n\nBugs fixed\n----------\n\n* Work around installation problems in recent Python 2.7 versions\n  due to FTP download failures.\n\n* GH#219: ``xmlfile.element()`` was not properly quoting attribute values.\n  Patch by Burak Arslan.\n\n* GH#218: ``xmlfile.element()`` was not properly escaping text content of\n  script/style tags.  Patch by Burak Arslan.\n\n\n3.7.1 (2016-12-23)\n==================\n\n* No source changes, issued only to solve problems with the\n  binary packages released for 3.7.0.\n\n\n3.7.0 (2016-12-10)\n==================\n\nFeatures added\n--------------\n\n* GH#217: ``XMLSyntaxError`` now behaves more like its ``SyntaxError``\n  baseclass.  Patch by Philipp A.\n\n* GH#216: ``HTMLParser()`` now supports the same ``collect_ids`` parameter\n  as ``XMLParser()``.  Patch by Burak Arslan.\n\n* GH#210: Allow specifying a serialisation method in ``xmlfile.write()``.\n  Patch by Burak Arslan.\n\n* GH#203: New option ``default_doctype`` in ``HTMLParser`` that allows\n  disabling the automatic doctype creation.  Patch by Shadab Zafar.\n\n* GH#201: Calling the method ``.set('attrname')`` without value argument\n  (or ``None``) on HTML elements creates an attribute without value that\n  serialises like ``<div attrname></div>``.  Patch by Daniel Holth.\n\n* GH#197: Ignore form input fields in ``form_values()`` when they are\n  marked as ``disabled`` in HTML.  Patch by Kristian Klemon.\n\nBugs fixed\n----------\n\n* GH#206: File name and line number were missing from XSLT error messages.\n  Patch by Marcus Brinkmann.\n\nOther changes\n-------------\n\n* Log entries no longer allow anything but plain string objects as message text\n  and file name.\n\n* ``zlib`` is included in the list of statically built libraries.\n\n\n3.6.4 (2016-08-20)\n==================\n\n* GH#204, LP#1614693: build fix for MacOS-X.\n\n\n3.6.3 (2016-08-18)\n==================\n\n* LP#1614603: change linker flags to build multi-linux wheels\n\n\n3.6.2 (2016-08-18)\n==================\n\n* LP#1614603: release without source changes to provide cleanly built Linux wheels\n\n\n3.6.1 (2016-07-24)\n==================\n\nFeatures added\n--------------\n\n* GH#180: Separate option ``inline_style`` for Cleaner that only removes ``style``\n  attributes instead of all styles.  Patch by Christian Pedersen.\n\n* GH#196: Windows build support for Python 3.5.  Contribution by Maximilian Hils.\n\nBugs fixed\n----------\n\n* GH#199: Exclude ``file`` fields from ``FormElement.form_values`` (as browsers do).\n  Patch by Tomas Divis.\n\n* GH#198, LP#1568167: Try to provide base URL from ``Resolver.resolve_string()``.\n  Patch by Michael van Tellingen.\n\n* GH#191: More accurate float serialisation in ``objectify.FloatElement``.\n  Patch by Holger Joukl.\n\n* LP#1551797: Repair XSLT error logging. Patch by Marcus Brinkmann.\n\n\n3.6.0 (2016-03-17)\n==================\n\nFeatures added\n--------------\n\n* GH#187: Now supports (only) version 5.x and later of PyPy.\n  Patch by Armin Rigo.\n\n* GH#181: Direct support for ``.rnc`` files in `RelaxNG()` if ``rnc2rng``\n  is installed.  Patch by Dirkjan Ochtman.\n\nBugs fixed\n----------\n\n* GH#189: Static builds honour FTP proxy configurations when downloading\n  the external libs.  Patch by Youhei Sakurai.\n\n* GH#186: Soupparser failed to process entities in Python 3.x.\n  Patch by Duncan Morris.\n\n* GH#185: Rare encoding related ``TypeError`` on import was fixed.\n  Patch by Petr Demin.\n\n\n3.5.0 (2015-11-13)\n==================\n\nBugs fixed\n----------\n\n* Unicode string results failed XPath queries in PyPy.\n\n* LP#1497051: HTML target parser failed to terminate on exceptions\n  and continued parsing instead.\n\n* Deprecated API usage in doctestcompare.\n\n\n3.5.0b1 (2015-09-18)\n====================\n\nFeatures added\n--------------\n\n* ``cleanup_namespaces()`` accepts a new argument ``keep_ns_prefixes``\n  that does not remove definitions of the provided prefix-namespace\n  mapping from the tree.\n\n* ``cleanup_namespaces()`` accepts a new argument ``top_nsmap`` that\n  moves definitions of the provided prefix-namespace mapping to the\n  top of the tree.\n\n* LP#1490451: ``Element`` objects gained a ``cssselect()`` method as\n  known from ``lxml.html``.  Patch by Simon Sapin.\n\n* API functions and methods behave and look more like Python functions,\n  which allows introspection on them etc.  One side effect to be aware of\n  is that the functions now bind as methods when assigned to a class\n  variable.  A quick fix is to wrap them in ``staticmethod()`` (as for\n  normal Python functions).\n\n* ISO-Schematron support gained an option ``error_finder`` that allows\n  passing a filter function for picking validation errors from reports.\n\n* LP#1243600: Elements in ``lxml.html`` gained a ``classes`` property\n  that provides a set-like interface to the ``class`` attribute.\n  Original patch by masklinn.\n\n* LP#1341964: The soupparser now handles DOCTYPE declarations, comments\n  and processing instructions outside of the root element.\n  Patch by Olli Pottonen.\n\n* LP#1421512: The ``docinfo`` of a tree was made editable to allow\n  setting and removing the public ID and system ID of the DOCTYPE.\n  Patch by Olli Pottonen.\n\n* LP#1442427: More work-arounds for quirks and bugs in pypy and pypy3.\n\n* ``lxml.html.soupparser`` now uses BeautifulSoup version 4 instead\n  of version 3 if available.\n\nBugs fixed\n----------\n\n* Memory errors that occur during tree adaptations (e.g. moving subtrees\n  to foreign documents) could leave the tree in a crash prone state.\n\n* Calling ``process_children()`` in an XSLT extension element without\n  an ``output_parent`` argument failed with a ``TypeError``.\n  Fix by Jens Tr\u00f6ger.\n\n* GH#162: Image data in HTML ``data`` URLs is considered safe and\n  no longer removed by ``lxml.html.clean`` JavaScript cleaner.\n\n* GH#166: Static build could link libraries in wrong order.\n\n* GH#172: Rely a bit more on libxml2 for encoding detection rather than\n  rolling our own in some cases.  Patch by Olli Pottonen.\n\n* GH#159: Validity checks for names and string content were tightened\n  to detect the use of illegal characters early.  Patch by Olli Pottonen.\n\n* LP#1421921: Comments/PIs before the DOCTYPE declaration were not\n  serialised.  Patch by Olli Pottonen.\n\n* LP#659367: Some HTML DOCTYPE declarations were not serialised.\n  Patch by Olli Pottonen.\n\n* LP#1238503: lxml.doctestcompare is now consistent with stdlib's doctest\n  in how it uses ``+`` and ``-`` to refer to unexpected and missing output.\n\n* Empty prefixes are explicitly rejected when a namespace mapping is used\n  with ElementPath to avoid hiding bugs in user code.\n\n* Several problems with PyPy were fixed by switching to Cython 0.23.\n\n\n3.4.4 (2015-04-25)\n==================\n\nBugs fixed\n----------\n\n* An ElementTree compatibility test added in lxml 3.4.3 that failed in\n  Python 3.4+ was removed again.\n\n\n3.4.3 (2015-04-15)\n==================\n\nBugs fixed\n----------\n\n* Expression cache in ElementPath was ignored.  Fix by Changaco.\n\n* LP#1426868: Passing a default namespace and a prefixed namespace mapping\n  as nsmap into ``xmlfile.element()`` raised a ``TypeError``.\n\n* LP#1421927: DOCTYPE system URLs were incorrectly quoted when containing\n  double quotes.  Patch by Olli Pottonen.\n\n* LP#1419354: meta-redirect URLs were incorrectly processed by\n  ``iterlinks()`` if preceded by whitespace.\n\n\n3.4.2 (2015-02-07)\n==================\n\nBugs fixed\n----------\n\n* LP#1415907: Crash when creating an XMLSchema from a non-root element\n  of an XML document.\n\n* LP#1369362: HTML cleaning failed when hitting processing instructions\n  with pseudo-attributes.\n\n* ``CDATA()`` wrapped content was rejected for tail text.\n\n* CDATA sections were not serialised as tail text of the top-level element.\n\n\n3.4.1 (2014-11-20)\n==================\n\nFeatures added\n--------------\n\n* New ``htmlfile`` HTML generator to accompany the incremental ``xmlfile``\n  serialisation API.  Patch by Burak Arslan.\n\nBugs fixed\n----------\n\n* ``lxml.sax.ElementTreeContentHandler`` did not initialise its superclass.\n\n\n3.4.0 (2014-09-10)\n==================\n\nFeatures added\n--------------\n\n* ``xmlfile(buffered=False)`` disables output buffering and flushes the\n  content after each API operation (starting/ending element blocks or writes).\n  A new method ``xf.flush()`` can alternatively be used to explicitly flush\n  the output.\n\n* ``lxml.html.document_fromstring`` has a new option ``ensure_head_body=True``\n  which will add an empty head and/or body element to the result document if\n  missing.\n\n* ``lxml.html.iterlinks`` now returns links inside meta refresh tags.\n\n* New ``XMLParser`` option ``collect_ids=False`` to disable ID hash table\n  creation.  This can substantially speed up parsing of documents with many\n  different IDs that are not used.\n\n* The parser uses per-document hash tables for XML IDs.  This reduces the\n  load of the global parser dict and speeds up parsing for documents with\n  many different IDs.\n\n* ``ElementTree.getelementpath(element)`` returns a structural ElementPath\n  expression for the given element, which can be used for lookups later.\n\n* ``xmlfile()`` accepts a new argument ``close=True`` to close file(-like)\n  objects after writing to them.  Before, ``xmlfile()`` only closed the file\n  if it had opened it internally.\n\n* Allow \"bytearray\" type for ASCII text input.\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n* LP#400588: decoding errors have become hard errors even in recovery mode.\n  Previously, they could lead to an internal tree representation in a mixed\n  encoding state, which lead to very late errors or even silently incorrect\n  behaviour during tree traversal or serialisation.\n\n* Requires Python 2.6, 2.7, 3.2 or later. No longer supports\n  Python 2.4, 2.5 and 3.1, use lxml 3.3.x for those.\n\n* Requires libxml2 2.7.0 or later and libxslt 1.1.23 or later,\n  use lxml 3.3.x with older versions.\n\n\n3.3.6 (2014-08-28)\n==================\n\nBugs fixed\n----------\n\n* Prevent tree cycle creation when adding Elements as siblings.\n\n* LP#1361948: crash when deallocating Element siblings without parent.\n\n* LP#1354652: crash when traversing internally loaded documents in XSLT\n  extension functions.\n\n\n3.3.5 (2014-04-18)\n==================\n\nBugs fixed\n----------\n\n* HTML cleaning could fail to strip javascript links that mix control\n  characters into the link scheme.\n\n\n3.3.4 (2014-04-03)\n==================\n\nFeatures added\n--------------\n\n* Source line numbers above 65535 are available on Elements when\n  using libxml2 2.9 or later.\n\nBugs fixed\n----------\n\n* ``lxml.html.fragment_fromstring()`` failed for bytes input in Py3.\n\nOther changes\n-------------\n\n\n3.3.3 (2014-03-04)\n==================\n\nBugs fixed\n----------\n\n* LP#1287118: Crash when using Element subtypes with ``__slots__``.\n\nOther changes\n-------------\n\n* The internal classes ``_LogEntry`` and ``_Attrib`` can no longer be\n  subclassed from Python code.\n\n\n3.3.2 (2014-02-26)\n==================\n\nBugs fixed\n----------\n\n* The properties ``resolvers`` and ``version``, as well as the methods\n  ``set_element_class_lookup()`` and ``makeelement()``, were lost from\n  ``iterparse`` objects in 3.3.0.\n\n* LP#1222132: instances of ``XMLSchema``, ``Schematron`` and ``RelaxNG``\n  did not clear their local ``error_log`` before running a validation.\n\n* LP#1238500: lxml.doctestcompare mixed up \"expected\" and \"actual\" in\n  attribute values.\n\n* Some file I/O tests were failing in MS-Windows due to non-portable temp\n  file usage.  Initial patch by Gabi Davar.\n\n* LP#910014: duplicate IDs in a document were not reported by DTD validation.\n\n* LP#1185332: ``tostring(method=\"html\")`` did not use HTML serialisation\n  semantics for trailing tail text.  Initial patch by Sylvain Viollon.\n\n* LP#1281139: ``.attrib`` value of Comments lost its mutation methods\n  in 3.3.0.  Even though it is empty and immutable, it should still\n  provide the same interface as that returned for Elements.\n\n\n3.3.1 (2014-02-12)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1014290: HTML documents parsed with ``parser.feed()`` failed to find\n  elements during tag iteration.\n\n* LP#1273709: Building in PyPy failed due to missing support for\n  ``PyUnicode_Compare()`` and ``PyByteArray_*()`` in PyPy's C-API.\n\n* LP#1274413: Compilation in MSVC failed due to missing \"stdint.h\" standard\n  header file.\n\n* LP#1274118: iterparse() failed to parse BOM prefixed files.\n\nOther changes\n-------------\n\n\n3.3.0 (2014-01-26)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* The heuristic that distinguishes file paths from URLs was tightened\n  to produce less false negatives.\n\nOther changes\n-------------\n\n\n3.3.0beta5 (2014-01-18)\n=======================\n\nFeatures added\n--------------\n\n* The PEP 393 unicode parsing support gained a fallback for wchar strings\n  which might still be somewhat common on Windows systems.\n\nBugs fixed\n----------\n\n* Several error handling problems were fixed throughout the code base that\n  could previously lead to exceptions being silently swallowed or not\n  properly reported.\n\n* The C-API function ``appendChild()`` is now deprecated as it does not\n  propagate exceptions (its return type is ``void``).  The new function\n  ``appendChildToElement()`` was added as a safe replacement.\n\n* Passing a string into ``fromstringlist()`` raises an exception instead of\n  parsing the string character by character.\n\nOther changes\n-------------\n\n* Document cleanup code was simplified using the new GC features in\n  Cython 0.20.\n\n\n3.3.0beta4 (2014-01-12)\n=======================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* The (empty) value returned by the ``attrib`` property of Entity and Comment\n  objects was mutable.\n\n* Element class lookup wasn't available for the new pull parsers or when using\n  a custom parser target.\n\n* Setting Element attributes on instantiation with both the ``attrib`` argument\n  and keyword arguments could modify the mapping passed as ``attrib``.\n\n* LP#1266171: DTDs instantiated from internal/external subsets (i.e. through\n  the docinfo property) lost their attribute declarations.\n\nOther changes\n-------------\n\n* Built with Cython 0.20pre (gitrev 012ae82eb) to prepare support for\n  Python 3.4.\n\n\n3.3.0beta3 (2014-01-02)\n=======================\n\nFeatures added\n--------------\n\n* Unicode string parsing was optimised for Python 3.3 (PEP 393).\n\nBugs fixed\n----------\n\n* HTML parsing of Unicode strings could misdecode the input on some platforms.\n\n* Crash in xmlfile() when closing open elements out of order in an error case.\n\nOther changes\n-------------\n\n\n3.3.0beta2 (2013-12-20)\n=======================\n\nFeatures added\n--------------\n\n* ``iterparse()`` supports the ``recover`` option.\n\nBugs fixed\n----------\n\n* Crash in ``iterparse()`` for HTML parsing.\n\n* Crash in target parsing with attributes.\n\nOther changes\n-------------\n\n* The safety check in the read-only tree implementation (e.g. used by\n  ``PythonElementClassLookup``) raises a more appropriate ``ReferenceError``\n  for illegal access after tree disposal instead of an ``AssertionError``.\n  This should only impact test code that specifically checks the original\n  behaviour.\n\n\n3.3.0beta1 (2013-12-12)\n=======================\n\nFeatures added\n--------------\n\n* New option ``handle_failures`` in ``make_links_absolute()`` and\n  ``resolve_base_href()`` (lxml.html) that enables ignoring or\n  discarding links that fail to parse as URLs.\n\n* New parser classes ``XMLPullParser`` and ``HTMLPullParser`` for\n  incremental parsing, as implemented for ElementTree in Python 3.4.\n\n* ``iterparse()`` enables recovery mode by default for HTML parsing\n  (``html=True``).\n\nBugs fixed\n----------\n\n* LP#1255132: crash when trying to run validation over non-Element (e.g.\n  comment or PI).\n\n* Error messages in the log and in exception messages that originated\n  from libxml2 could accidentally be picked up from preceding warnings\n  instead of the actual error.\n\n* The ``ElementMaker`` in lxml.objectify did not accept a dict as\n  argument for adding attributes to the element it's building. This\n  works as in lxml.builder now.\n\n* LP#1228881: ``repr(XSLTAccessControl)`` failed in Python 3.\n\n* Raise ``ValueError`` when trying to append an Element to itself or\n  to one of its own descendants, instead of running into an infinite\n  loop.\n\n* LP#1206077: htmldiff discarded whitespace from the output.\n\n* Compressed plain-text serialisation to file-like objects was broken.\n\n* lxml.html.formfill: Fix textarea form filling.\n  The textarea used to be cleared before the new content was set,\n  which removed the name attribute.\n\n\nOther changes\n-------------\n\n* Some basic API classes use freelists internally for faster\n  instantiation.  This can speed up some ``iterparse()`` scenarios,\n  for example.\n\n* ``iterparse()`` was rewritten to use the new ``*PullParser``\n  classes internally instead of being a parser itself.\n\n\n3.2.5 (2014-01-02)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash in xmlfile() when closing open elements out of order in an error case.\n\n* Crash in target parsing with attributes.\n\n* LP#1255132: crash when trying to run validation over non-Element (e.g.\n  comment or PI).\n\nOther changes\n-------------\n\n\n3.2.4 (2013-11-07)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Memory leak when creating an XPath evaluator in a thread.\n\n* LP#1228881: ``repr(XSLTAccessControl)`` failed in Python 3.\n\n* Raise ``ValueError`` when trying to append an Element to itself or\n  to one of its own descendants.\n\n* LP#1206077: htmldiff discarded whitespace from the output.\n\n* Compressed plain-text serialisation to file-like objects was broken.\n\nOther changes\n-------------\n\n\n3.2.3 (2013-07-28)\n==================\n\nBugs fixed\n----------\n\n* Fix support for Python 2.4 which was lost in 3.2.2.\n\n\n3.2.2 (2013-07-28)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1185701: spurious XMLSyntaxError after finishing iterparse().\n\n* Crash in lxml.objectify during xsi annotation.\n\nOther changes\n-------------\n\n* Return values of user provided element class lookup methods are now\n  validated against the type of the XML node they represent to prevent\n  API class mismatches.\n\n\n3.2.1 (2013-05-11)\n==================\n\nFeatures added\n--------------\n\n* The methods ``apply_templates()`` and ``process_children()`` of XSLT\n  extension elements have gained two new boolean options ``elements_only``\n  and ``remove_blank_text`` that discard either all strings or whitespace-only\n  strings from the result list.\n\nBugs fixed\n----------\n\n* When moving Elements to another tree, the namespace cleanup mechanism\n  no longer drops namespace prefixes from attributes for which it finds\n  a default namespace declaration, to prevent them from appearing as\n  unnamespaced attributes after serialisation.\n\n* Returning non-type objects from a custom class lookup method could lead\n  to a crash.\n\n* Instantiating and using subtypes of Comments and ProcessingInstructions\n  crashed.\n\nOther changes\n-------------\n\n\n3.2.0 (2013-04-28)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#690319: Leading whitespace could change the behaviour of the string\n  parsing functions in ``lxml.html``.\n\n* LP#599318: The string parsing functions in ``lxml.html`` are more robust\n  in the face of uncommon HTML content like framesets or missing body tags.\n  Patch by Stefan Seelmann.\n\n* LP#712941: I/O errors while trying to access files with paths that contain\n  non-ASCII characters could raise ``UnicodeDecodeError`` instead of properly\n  reporting the ``IOError``.\n\n* LP#673205: Parsing from in-memory strings disabled network access in the\n  default parser and made subsequent attempts to parse from a URL fail.\n\n* LP#971754: lxml.html.clean appends 'nofollow' to 'rel' attributes instead\n  of overwriting the current value.\n\n* LP#715687: lxml.html.clean no longer discards scripts that are explicitly\n  allowed by the user provided whitelist.  Patch by Christine Koppelt.\n\nOther changes\n-------------\n\n\n3.1.2 (2013-04-12)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1136509: Passing attributes through the namespace-unaware API of\n  the sax bridge (i.e. the ``handler.startElement()`` method) failed\n  with a ``TypeError``.  Patch by Mike Bayer.\n\n* LP#1123074: Fix serialisation error in XSLT output when converting\n  the result tree to a Unicode string.\n\n* GH#105: Replace illegal usage of ``xmlBufLength()`` in libxml2 2.9.0\n  by properly exported API function ``xmlBufUse()``.\n\nOther changes\n-------------\n\n\n3.1.1 (2013-03-29)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1160386: Write access to ``lxml.html.FormElement.fields`` raised\n  an AttributeError in Py3.\n\n* Illegal memory access during cleanup in incremental xmlfile writer.\n\nOther changes\n-------------\n\n* The externally useless class ``lxml.etree._BaseParser`` was removed\n  from the module dict.\n\n\n3.1.0 (2013-02-10)\n==================\n\nFeatures added\n--------------\n\n* GH#89: lxml.html.clean allows overriding the set of attributes that it\n  considers 'safe'.  Patch by Francis Devereux.\n\nBugs fixed\n----------\n\n* LP#1104370: ``copy.copy(el.attrib)`` raised an exception.  It now returns\n  a copy of the attributes as a plain Python dict.\n\n* GH#95: When used with namespace prefixes, the  ``el.find*()`` methods\n  always used the first namespace mapping that was provided for each\n  path expression instead of using the one that was actually passed\n  in for the current run.\n\n* LP#1092521, GH#91: Fix undefined C symbol in Python runtimes compiled\n  without threading support.  Patch by Ulrich Seidl.\n\nOther changes\n-------------\n\n\n3.1beta1 (2012-12-21)\n=====================\n\nFeatures added\n--------------\n\n* New build-time option ``--with-unicode-strings`` for Python 2 that\n  makes the API always return Unicode strings for names and text\n  instead of byte strings for plain ASCII content.\n\n* New incremental XML file writing API ``etree.xmlfile()``.\n\n* E factory in lxml.objectify is callable to simplify the creation of\n  tags with non-identifier names without having to resort to getattr().\n\nBugs fixed\n----------\n\n* When starting from a non-namespaced element in lxml.objectify, searching\n  for a child without explicitly specifying a namespace incorrectly found\n  namespaced elements with the requested local name, instead of restricting\n  the search to non-namespaced children.\n\n* GH#85: Deprecation warnings were fixed for Python 3.x.\n\n* GH#33: lxml.html.fromstring() failed to accept bytes input in Py3.\n\n* LP#1080792: Static build of libxml2 2.9.0 failed due to missing file.\n\nOther changes\n-------------\n\n* The externally useless class ``_ObjectifyElementMakerCaller`` was\n  removed from the module API of lxml.objectify.\n\n* LP#1075622: lxml.builder is faster for adding text to elements with\n  many children.  Patch by Anders Hammarquist.\n\n\n3.0.2 (2012-12-14)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Fix crash during interpreter shutdown by switching to Cython 0.17.3 for building.\n\nOther changes\n-------------\n\n\n3.0.1 (2012-10-14)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1065924: Element proxies could disappear during garbage collection\n  in PyPy without proper cleanup.\n\n* GH#71: Failure to work with libxml2 2.6.x.\n\n* LP#1065139: static MacOS-X build failed in Py3.\n\nOther changes\n-------------\n\n\n3.0 (2012-10-08)\n================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* End-of-file handling was incorrect in iterparse() when reading from\n  a low-level C file stream and failed in libxml2 2.9.0 due to its\n  improved consistency checks.\n\nOther changes\n-------------\n\n* The build no longer uses Cython by default unless the generated C files\n  are missing.  To use Cython, pass the option \"--with-cython\".  To ignore\n  the fatal build error when Cython is required but not available (e.g. to\n  run special setup.py commands that do not actually run a build), pass\n  \"--without-cython\".\n\n\n3.0beta1 (2012-09-26)\n=====================\n\nFeatures added\n--------------\n\n* Python level access to (optional) libxml2 memory debugging features\n  to simplify debugging of memory leaks etc.\n\nBugs fixed\n----------\n\n* Fix a memory leak in XPath by switching to Cython 0.17.1.\n\n* Some tests were adapted to work with PyPy.\n\nOther changes\n-------------\n\n* The code was adapted to work with the upcoming libxml2 2.9.0 release.\n\n\n3.0alpha2 (2012-08-23)\n======================\n\nFeatures added\n--------------\n\n* The ``.iter()`` method of elements now accepts ``tag`` arguments like\n  ``\"{*}name\"`` to search for elements with a given local name in any\n  namespace. With this addition, all combinations of wildcards now work\n  as expected:\n  ``\"{ns}name\"``, ``\"{}name\"``, ``\"{*}name\"``, ``\"{ns}*\"``, ``\"{}*\"``\n  and ``\"{*}*\"``.  Note that ``\"name\"`` is equivalent to ``\"{}name\"``,\n  but ``\"*\"`` is ``\"{*}*\"``.\n  The same change applies to the ``.getiterator()``, ``.itersiblings()``,\n  ``.iterancestors()``, ``.iterdescendants()``, ``.iterchildren()``\n  and ``.itertext()`` methods;the ``strip_attributes()``,\n  ``strip_elements()`` and ``strip_tags()`` functions as well as the\n  ``iterparse()`` class.  Patch by Simon Sapin.\n\n* C14N allows specifying the inclusive prefixes to be promoted\n  to top-level during exclusive serialisation.\n\nBugs fixed\n----------\n\n* Passing long Unicode strings into the ``feed()`` parser interface\n  failed to read the entire string.\n\nOther changes\n-------------\n\n\n3.0alpha1 (2012-07-31)\n======================\n\nFeatures added\n--------------\n\n* Initial support for building in PyPy (through cpyext).\n\n* DTD objects gained an API that allows read access to their\n  declarations.\n\n* ``xpathgrep.py`` gained support for parsing line-by-line (e.g.\n  from grep output) and for surrounding the output with a new root\n  tag.\n\n* ``E-factory`` in ``lxml.builder`` accepts subtypes of known data\n  types (such as string subtypes) when building elements around them.\n\n* Tree iteration and ``iterparse()`` with a selective ``tag``\n  argument supports passing a set of tags.  Tree nodes will be\n  returned by the iterators if they match any of the tags.\n\nBugs fixed\n----------\n\n* The ``.find*()`` methods in ``lxml.objectify`` no longer use XPath\n  internally, which makes them faster in many cases (especially when\n  short circuiting after a single or couple of elements) and fixes\n  some behavioural differences compared to ``lxml.etree``.  Note that\n  this means that they no longer support arbitrary XPath expressions\n  but only the subset that the ``ElementPath`` language supports.\n  The previous implementation was also redundant with the normal\n  XPath support, which can be used as a replacement.\n\n* ``el.find('*')`` could accidentally return a comment or processing\n  instruction that happened to be in the wrong spot.  (Same for the\n  other ``.find*()`` methods.)\n\n* The error logging is less intrusive and avoids a global setup where\n  possible.\n\n* Fixed undefined names in html5lib parser.\n\n* ``xpathgrep.py`` did not work in Python 3.\n\n* ``Element.attrib.update()`` did not accept an ``attrib`` of\n  another Element as parameter.\n\n* For subtypes of ``ElementBase`` that make the ``.text`` or ``.tail``\n  properties immutable (as in objectify, for example), inserting text\n  when creating Elements through the E-Factory feature of the class\n  constructor would fail with an exception, stating that the text\n  cannot be modified.\n\nOther changes\n--------------\n\n* The code base was overhauled to properly use 'const' where the API\n  of libxml2 and libxslt requests it.  This also has an impact on the\n  public C-API of lxml itself, as defined in ``etreepublic.pxd``, as\n  well as the provided declarations in the ``lxml/includes/`` directory.\n  Code that uses these declarations may have to be adapted.  On the\n  plus side, this fixes several C compiler warnings, also for user\n  code, thus making it easier to spot real problems again.\n\n* The functionality of \"lxml.cssselect\" was moved into a separate PyPI\n  package called \"cssselect\".  To continue using it, you must install\n  that package separately.  The \"lxml.cssselect\" module is still\n  available and provides the same interface, provided the \"cssselect\"\n  package can be imported at runtime.\n\n* Element attributes passed in as an ``attrib`` dict or as keyword\n  arguments are now sorted by (namespaced) name before being created\n  to make their order predictable for serialisation and iteration.\n  Note that adding or deleting attributes afterwards does not take\n  that order into account, i.e. setting a new attribute appends it\n  after the existing ones.\n\n* Several classes that are for internal use only were removed\n  from the ``lxml.etree`` module dict:\n  ``_InputDocument, _ResolverRegistry, _ResolverContext, _BaseContext,\n  _ExsltRegExp, _IterparseContext, _TempStore, _ExceptionContext,\n  __ContentOnlyElement, _AttribIterator, _NamespaceRegistry,\n  _ClassNamespaceRegistry, _FunctionNamespaceRegistry,\n  _XPathFunctionNamespaceRegistry, _ParserDictionaryContext,\n  _FileReaderContext, _ParserContext, _PythonSaxParserTarget,\n  _TargetParserContext, _ReadOnlyProxy, _ReadOnlyPIProxy,\n  _ReadOnlyEntityProxy, _ReadOnlyElementProxy, _OpaqueNodeWrapper,\n  _OpaqueDocumentWrapper, _ModifyContentOnlyProxy,\n  _ModifyContentOnlyPIProxy, _ModifyContentOnlyEntityProxy,\n  _AppendOnlyElementProxy, _SaxParserContext, _FilelikeWriter,\n  _ParserSchemaValidationContext, _XPathContext,\n  _XSLTResolverContext, _XSLTContext, _XSLTQuotedStringParam``\n\n* Several internal classes can no longer be inherited from:\n  ``_InputDocument, _ResolverRegistry, _ExsltRegExp, _ElementUnicodeResult,\n  _IterparseContext, _TempStore, _AttribIterator, _ClassNamespaceRegistry,\n  _XPathFunctionNamespaceRegistry, _ParserDictionaryContext,\n  _FileReaderContext, _PythonSaxParserTarget, _TargetParserContext,\n  _ReadOnlyPIProxy, _ReadOnlyEntityProxy, _OpaqueDocumentWrapper,\n  _ModifyContentOnlyPIProxy, _ModifyContentOnlyEntityProxy,\n  _AppendOnlyElementProxy, _FilelikeWriter, _ParserSchemaValidationContext,\n  _XPathContext, _XSLTResolverContext, _XSLTContext, _XSLTQuotedStringParam,\n  _XSLTResultTree, _XSLTProcessingInstruction``\n\n\n2.3.6 (2012-09-28)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Passing long Unicode strings into the ``feed()`` parser interface\n  failed to read the entire string.\n\nOther changes\n--------------\n\n\n2.3.5 (2012-07-31)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash when merging text nodes in ``element.remove()``.\n\n* Crash in sax/target parser when reporting empty doctype.\n\nOther changes\n--------------\n\n\n2.3.4 (2012-03-26)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash when building an nsmap (Element property) with empty\n  namespace URIs.\n\n* Crash due to race condition when errors (or user messages) occur\n  during threaded XSLT processing.\n\n* XSLT stylesheet compilation could ignore compilation errors.\n\nOther changes\n--------------\n\n\n2.3.3 (2012-01-04)\n==================\n\nFeatures added\n--------------\n\n* ``lxml.html.tostring()`` gained new serialisation options\n  ``with_tail`` and ``doctype``.\n\nBugs fixed\n----------\n\n* Fixed a crash when using ``iterparse()`` for HTML parsing and\n  requesting start events.\n\n* Fixed parsing of more selectors in cssselect.  Whitespace before\n  pseudo-elements and pseudo-classes is significant as it is a\n  descendant combinator.\n  \"E :pseudo\" should parse the same as \"E \\*:pseudo\", not \"E:pseudo\".\n  Patch by Simon Sapin.\n\n* lxml.html.diff no longer raises an exception when hitting\n  'img' tags without 'src' attribute.\n\nOther changes\n--------------\n\n\n2.3.2 (2011-11-11)\n==================\n\nFeatures added\n--------------\n\n* ``lxml.objectify.deannotate()`` has a new boolean option\n  ``cleanup_namespaces`` to remove the objectify namespace\n  declarations (and generally clean up the namespace declarations)\n  after removing the type annotations.\n\n* ``lxml.objectify`` gained its own ``SubElement()`` function as a\n  copy of ``etree.SubElement`` to avoid an otherwise redundant import\n  of ``lxml.etree`` on the user side.\n\nBugs fixed\n----------\n\n* Fixed the \"descendant\" bug in cssselect a second time (after a first\n  fix in lxml 2.3.1).  The previous change resulted in a serious\n  performance regression for the XPath based evaluation of the\n  translated expression.  Note that this breaks the usage of some of\n  the generated XPath expressions as XSLT location paths that\n  previously worked in 2.3.1.\n\n* Fixed parsing of some selectors in cssselect. Whitespace after combinators\n  \">\", \"+\" and \"~\" is now correctly ignored. Previously it was parsed as\n  a descendant combinator. For example, \"div> .foo\" was parsed the same as\n  \"div>* .foo\" instead of \"div>.foo\". Patch by Simon Sapin.\n\nOther changes\n--------------\n\n\n2.3.1 (2011-09-25)\n==================\n\nFeatures added\n--------------\n\n* New option ``kill_tags`` in ``lxml.html.clean`` to remove specific\n  tags and their content (i.e. their whole subtree).\n\n* ``pi.get()`` and ``pi.attrib`` on processing instructions to parse\n  pseudo-attributes from the text content of processing instructions.\n\n* ``lxml.get_include()`` returns a list of include paths that can be\n  used to compile external C code against lxml.etree.  This is\n  specifically required for statically linked lxml builds when code\n  needs to compile against the exact same header file versions as lxml\n  itself.\n\n* ``Resolver.resolve_file()`` takes an additional option\n  ``close_file`` that configures if the file(-like) object will be\n  closed after reading or not.  By default, the file will be closed,\n  as the user is not expected to keep a reference to it.\n\nBugs fixed\n----------\n\n* HTML cleaning didn't remove 'data:' links.\n\n* The html5lib parser integration now uses the 'official'\n  implementation in html5lib itself, which makes it work with newer\n  releases of the library.\n\n* In ``lxml.sax``, ``endElementNS()`` could incorrectly reject a plain\n  tag name when the corresponding start event inferred the same plain\n  tag name to be in the default namespace.\n\n* When an open file-like object is passed into ``parse()`` or\n  ``iterparse()``, the parser will no longer close it after use.  This\n  reverts a change in lxml 2.3 where all files would be closed.  It is\n  the users responsibility to properly close the file(-like) object,\n  also in error cases.\n\n* Assertion error in lxml.html.cleaner when discarding top-level elements.\n\n* In lxml.cssselect, use the xpath 'A//B' (short for\n  'A/descendant-or-self::node()/B') instead of 'A/descendant::B' for\n  the css descendant selector ('A B').  This makes a few edge cases\n  like ``\"div *:last-child\"`` consistent with the selector behavior in\n  WebKit and Firefox, and makes more css expressions valid location\n  paths (for use in xsl:template match).\n\n* In lxml.html, non-selected ``<option>`` tags no longer show up in the\n  collected form values.\n\n* Adding/removing ``<option>`` values to/from a multiple select form\n  field properly selects them and unselects them.\n\nOther changes\n--------------\n\n* Static builds can specify the download directory with the\n  ``--download-dir`` option.\n\n\n2.3 (2011-02-06)\n================\n\nFeatures added\n--------------\n\n* When looking for children, ``lxml.objectify`` takes '{}tag' as\n  meaning an empty namespace, as opposed to the parent namespace.\n\nBugs fixed\n----------\n\n* When finished reading from a file-like object, the parser\n  immediately calls its ``.close()`` method.\n\n* When finished parsing, ``iterparse()`` immediately closes the input\n  file.\n\n* Work-around for libxml2 bug that can leave the HTML parser in a\n  non-functional state after parsing a severely broken document (fixed\n  in libxml2 2.7.8).\n\n* ``marque`` tag in HTML cleanup code is correctly named ``marquee``.\n\nOther changes\n--------------\n\n* Some public functions in the Cython-level C-API have more explicit\n  return types.\n\n\n2.3beta1 (2010-09-06)\n=====================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash in newer libxml2 versions when moving elements between\n  documents that had attributes on replaced XInclude nodes.\n\n* ``XMLID()`` function was missing the optional ``parser`` and\n  ``base_url`` parameters.\n\n* Searching for wildcard tags in ``iterparse()`` was broken in Py3.\n\n* ``lxml.html.open_in_browser()`` didn't work in Python 3 due to the\n  use of os.tempnam.  It now takes an optional 'encoding' parameter.\n\nOther changes\n--------------\n\n\n2.3alpha2 (2010-07-24)\n======================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash in XSLT when generating text-only result documents with a\n  stylesheet created in a different thread.\n\nOther changes\n--------------\n\n* ``repr()`` of Element objects shows the hex ID with leading 0x\n  (following ElementTree 1.3).\n\n\n2.3alpha1 (2010-06-19)\n======================\n\nFeatures added\n--------------\n\n* Keyword argument ``namespaces`` in ``lxml.cssselect.CSSSelector()``\n  to pass a prefix-to-namespace mapping for the selector.\n\n* New function ``lxml.etree.register_namespace(prefix, uri)`` that\n  globally registers a namespace prefix for a namespace that newly\n  created Elements in that namespace will use automatically.  Follows\n  ElementTree 1.3.\n\n* Support 'unicode' string name as encoding parameter in\n  ``tostring()``, following ElementTree 1.3.\n\n* Support 'c14n' serialisation method in ``ElementTree.write()`` and\n  ``tostring()``, following ElementTree 1.3.\n\n* The ElementPath expression syntax (``el.find*()``) was extended to\n  match the upcoming ElementTree 1.3 that will ship in the standard\n  library of Python 3.2/2.7.  This includes extended support for\n  predicates as well as namespace prefixes (as known from XPath).\n\n* During regular XPath evaluation, various ESXLT functions are\n  available within their namespace when using libxslt 1.1.26 or later.\n\n* Support passing a readily configured logger instance into\n  ``PyErrorLog``, instead of a logger name.\n\n* On serialisation, the new ``doctype`` parameter can be used to\n  override the DOCTYPE (internal subset) of the document.\n\n* New parameter ``output_parent`` to ``XSLTExtension.apply_templates()``\n  to append the resulting content directly to an output element.\n\n* ``XSLTExtension.process_children()`` to process the content of the\n  XSLT extension element itself.\n\n* ISO-Schematron support based on the de-facto Schematron reference\n  'skeleton implementation'.\n\n* XSLT objects now take XPath object as ``__call__`` stylesheet\n  parameters.\n\n* Enable path caching in ElementPath (``el.find*()``) to avoid parsing\n  overhead.\n\n* Setting the value of a namespaced attribute always uses a prefixed\n  namespace instead of the default namespace even if both declare the\n  same namespace URI.  This avoids serialisation problems when an\n  attribute from a default namespace is set on an element from a\n  different namespace.\n\n* XSLT extension elements: support for XSLT context nodes other than\n  elements: document root, comments, processing instructions.\n\n* Support for strings (in addition to Elements) in node-sets returned\n  by extension functions.\n\n* Forms that lack an ``action`` attribute default to the base URL of\n  the document on submit.\n\n* XPath attribute result strings have an ``attrname`` property.\n\n* Namespace URIs get validated against RFC 3986 at the API level\n  (required by the XML namespace specification).\n\n* Target parsers show their target object in the ``.target`` property\n  (compatible with ElementTree).\n\nBugs fixed\n----------\n\n* API is hardened against invalid proxy instances to prevent crashes\n  due to incorrectly instantiated Element instances.\n\n* Prevent crash when instantiating ``CommentBase`` and friends.\n\n* Export ElementTree compatible XML parser class as\n  ``XMLTreeBuilder``, as it is called in ET 1.2.\n\n* ObjectifiedDataElements in lxml.objectify were not hashable.  They\n  now use the hash value of the underlying Python value (string,\n  number, etc.) to which they compare equal.\n\n* Parsing broken fragments in lxml.html could fail if the fragment\n  contained an orphaned closing '</div>' tag.\n\n* Using XSLT extension elements around the root of the output document\n  crashed.\n\n* ``lxml.cssselect`` did not distinguish between ``x[attr=\"val\"]`` and\n  ``x [attr=\"val\"]`` (with a space).  The latter now matches the\n  attribute independent of the element.\n\n* Rewriting multiple links inside of HTML text content could end up\n  replacing unrelated content as replacements could impact the\n  reported position of subsequent matches.  Modifications are now\n  simplified by letting the ``iterlinks()`` generator in ``lxml.html``\n  return links in reversed order if they appear inside the same text\n  node.  Thus, replacements and link-internal modifications no longer\n  change the position of links reported afterwards.\n\n* The ``.value`` attribute of ``textarea`` elements in lxml.html did\n  not represent the complete raw value (including child tags etc.). It\n  now serialises the complete content on read and replaces the\n  complete content by a string on write.\n\n* Target parser didn't call ``.close()`` on the target object if\n  parsing failed.  Now it is guaranteed that ``.close()`` will be\n  called after parsing, regardless of the outcome.\n\nOther changes\n-------------\n\n* Official support for Python 3.1.2 and later.\n\n* Static MS Windows builds can now download their dependencies\n  themselves.\n\n* ``Element.attrib`` no longer uses a cyclic reference back to its\n  Element object.  It therefore no longer requires the garbage\n  collector to clean up.\n\n* Static builds include libiconv, in addition to libxml2 and libxslt.\n\n\n2.2.8 (2010-09-02)\n==================\n\nBugs fixed\n----------\n\n* Crash in newer libxml2 versions when moving elements between\n  documents that had attributes on replaced XInclude nodes.\n\n* Import fix for urljoin in Python 3.1+.\n\n\n2.2.7 (2010-07-24)\n==================\n\nBugs fixed\n----------\n\n* Crash in XSLT when generating text-only result documents with a\n  stylesheet created in a different thread.\n\n\n2.2.6 (2010-03-02)\n==================\n\nBugs fixed\n----------\n\n* Fixed several Python 3 regressions by building with Cython 0.11.3.\n\n\n2.2.5 (2010-02-28)\n==================\n\nFeatures added\n--------------\n\n* Support for running XSLT extension elements on the input root node\n  (e.g. in a template matching on \"/\").\n\nBugs fixed\n----------\n\n* Crash in XPath evaluation when reading smart strings from a document\n  other than the original context document.\n\n* Support recent versions of html5lib by not requiring its\n  ``XHTMLParser`` in ``htmlparser.py`` anymore.\n\n* Manually instantiating the custom element classes in\n  ``lxml.objectify`` could crash.\n\n* Invalid XML text characters were not rejected by the API when they\n  appeared in unicode strings directly after non-ASCII characters.\n\n* lxml.html.open_http_urllib() did not work in Python 3.\n\n* The functions ``strip_tags()`` and ``strip_elements()`` in\n  ``lxml.etree`` did not remove all occurrences of a tag in all cases.\n\n* Crash in XSLT extension elements when the XSLT context node is not\n  an element.\n\n\n2.2.4 (2009-11-11)\n==================\n\nBugs fixed\n----------\n\n* Static build of libxml2/libxslt was broken.\n\n\n2.2.3 (2009-10-30)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* The ``resolve_entities`` option did not work in the incremental feed\n  parser.\n\n* Looking up and deleting attributes without a namespace could hit a\n  namespaced attribute of the same name instead.\n\n* Late errors during calls to ``SubElement()`` (e.g. attribute related\n  ones) could leave a partially initialised element in the tree.\n\n* Modifying trees that contain parsed entity references could result\n  in an infinite loop.\n\n* ObjectifiedElement.__setattr__ created an empty-string child element when the\n  attribute value was rejected as a non-unicode/non-ascii string\n\n* Syntax errors in ``lxml.cssselect`` could result in misleading error\n  messages.\n\n* Invalid syntax in CSS expressions could lead to an infinite loop in\n  the parser of ``lxml.cssselect``.\n\n* CSS special character escapes were not properly handled in\n  ``lxml.cssselect``.\n\n* CSS Unicode escapes were not properly decoded in ``lxml.cssselect``.\n\n* Select options in HTML forms that had no explicit ``value``\n  attribute were not handled correctly.  The HTML standard dictates\n  that their value is defined by their text content.  This is now\n  supported by lxml.html.\n\n* XPath raised a TypeError when finding CDATA sections.  This is now\n  fully supported.\n\n* Calling ``help(lxml.objectify)`` didn't work at the prompt.\n\n* The ``ElementMaker`` in lxml.objectify no longer defines the default\n  namespaces when annotation is disabled.\n\n* Feed parser failed to honour the 'recover' option on parse errors.\n\n* Diverting the error logging to Python's logging system was broken.\n\nOther changes\n-------------\n\n\n2.2.2 (2009-06-21)\n==================\n\nFeatures added\n--------------\n\n* New helper functions ``strip_attributes()``, ``strip_elements()``,\n  ``strip_tags()`` in lxml.etree to remove attributes/subtrees/tags\n  from a subtree.\n\nBugs fixed\n----------\n\n* Namespace cleanup on subtree insertions could result in missing\n  namespace declarations (and potentially crashes) if the element\n  defining a namespace was deleted and the namespace was not used by\n  the top element of the inserted subtree but only in deeper subtrees.\n\n* Raising an exception from a parser target callback didn't always\n  terminate the parser.\n\n* Only {true, false, 1, 0} are accepted as the lexical representation for\n  BoolElement ({True, False, T, F, t, f} not any more), restoring lxml <= 2.0\n  behaviour.\n\nOther changes\n-------------\n\n\n2.2.1 (2009-06-02)\n==================\n\nFeatures added\n--------------\n\n* Injecting default attributes into a document during XML Schema\n  validation (also at parse time).\n\n* Pass ``huge_tree`` parser option to disable parser security\n  restrictions imposed by libxml2 2.7.\n\nBugs fixed\n----------\n\n* The script for statically building libxml2 and libxslt didn't work\n  in Py3.\n\n* ``XMLSchema()`` also passes invalid schema documents on to libxml2\n  for parsing (which could lead to a crash before release 2.6.24).\n\nOther changes\n-------------\n\n\n2.2 (2009-03-21)\n================\n\nFeatures added\n--------------\n\n* Support for ``standalone`` flag in XML declaration through\n  ``tree.docinfo.standalone`` and by passing ``standalone=True/False``\n  on serialisation.\n\nBugs fixed\n----------\n\n* Crash when parsing an XML Schema with external imports from a\n  filename.\n\n\n2.2beta4 (2009-02-27)\n=====================\n\nFeatures added\n--------------\n\n* Support strings and instantiable Element classes as child arguments\n  to the constructor of custom Element classes.\n\n* GZip compression support for serialisation to files and file-like\n  objects.\n\nBugs fixed\n----------\n\n* Deep-copying an ElementTree copied neither its sibling PIs and\n  comments nor its internal/external DTD subsets.\n\n* Soupparser failed on broken attributes without values.\n\n* Crash in XSLT when overwriting an already defined attribute using\n  ``xsl:attribute``.\n\n* Crash bug in exception handling code under Python 3.  This was due\n  to a problem in Cython, not lxml itself.\n\n* ``lxml.html.FormElement._name()`` failed for non top-level forms.\n\n* ``TAG`` special attribute in constructor of custom Element classes\n  was evaluated incorrectly.\n\nOther changes\n-------------\n\n* Official support for Python 3.0.1.\n\n* ``Element.findtext()`` now returns an empty string instead of None\n  for Elements without text content.\n\n\n2.2beta3 (2009-02-17)\n=====================\n\nFeatures added\n--------------\n\n* ``XSLT.strparam()`` class method to wrap quoted string parameters\n  that require escaping.\n\nBugs fixed\n----------\n\n* Memory leak in XPath evaluators.\n\n* Crash when parsing indented XML in one thread and merging it with\n  other documents parsed in another thread.\n\n* Setting the ``base`` attribute in ``lxml.objectify`` from a unicode\n  string failed.\n\n* Fixes following changes in Python 3.0.1.\n\n* Minor fixes for Python 3.\n\nOther changes\n-------------\n\n* The global error log (which is copied into the exception log) is now\n  local to a thread, which fixes some race conditions.\n\n* More robust error handling on serialisation.\n\n\n2.2beta2 (2009-01-25)\n=====================\n\nBugs fixed\n----------\n\n* Potential memory leak on exception handling.  This was due to a\n  problem in Cython, not lxml itself.\n\n* ``iter_links`` (and related link-rewriting functions) in\n  ``lxml.html`` would interpret CSS like ``url(\"link\")`` incorrectly\n  (treating the quotation marks as part of the link).\n\n* Failing import on systems that have an ``io`` module.\n\n\n2.1.5 (2009-01-06)\n==================\n\nBugs fixed\n----------\n\n* Potential memory leak on exception handling.  This was due to a\n  problem in Cython, not lxml itself.\n\n* Failing import on systems that have an ``io`` module.\n\n\n2.2beta1 (2008-12-12)\n=====================\n\nFeatures added\n--------------\n\n* Allow ``lxml.html.diff.htmldiff`` to accept Element objects, not\n  just HTML strings.\n\nBugs fixed\n----------\n\n* Crash when using an XPath evaluator in multiple threads.\n\n* Fixed missing whitespace before ``Link:...`` in ``lxml.html.diff``.\n\nOther changes\n-------------\n\n* Export ``lxml.html.parse``.\n\n\n2.1.4 (2008-12-12)\n==================\n\nBugs fixed\n----------\n\n* Crash when using an XPath evaluator in multiple threads.\n\n\n2.0.11 (2008-12-12)\n===================\n\nBugs fixed\n----------\n\n* Crash when using an XPath evaluator in multiple threads.\n\n\n2.2alpha1 (2008-11-23)\n======================\n\nFeatures added\n--------------\n\n* Support for XSLT result tree fragments in XPath/XSLT extension\n  functions.\n\n* QName objects have new properties ``namespace`` and ``localname``.\n\n* New options for exclusive C14N and C14N without comments.\n\n* Instantiating a custom Element classes creates a new Element.\n\nBugs fixed\n----------\n\n* XSLT didn't inherit the parse options of the input document.\n\n* 0-bytes could slip through the API when used inside of Unicode\n  strings.\n\n* With ``lxml.html.clean.autolink``, links with balanced parenthesis,\n  that end in a parenthesis, will be linked in their entirety (typical\n  with Wikipedia links).\n\nOther changes\n-------------\n\n\n2.1.3 (2008-11-17)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Ref-count leaks when lxml enters a try-except statement while an\n  outside exception lives in sys.exc_*(). This was due to a problem in\n  Cython, not lxml itself.\n\n* Parser Unicode decoding errors could get swallowed by other\n  exceptions.\n\n* Name/import errors in some Python modules.\n\n* Internal DTD subsets that did not specify a system or public ID were\n  not serialised and did not appear in the docinfo property of\n  ElementTrees.\n\n* Fix a pre-Py3k warning when parsing from a gzip file in Py2.6.\n\n* Test suite fixes for libxml2 2.7.\n\n* Resolver.resolve_string() did not work for non-ASCII byte strings.\n\n* Resolver.resolve_file() was broken.\n\n* Overriding the parser encoding didn't work for many encodings.\n\nOther changes\n-------------\n\n\n2.0.10 (2008-11-17)\n===================\n\nBugs fixed\n----------\n\n* Ref-count leaks when lxml enters a try-except statement while an\n  outside exception lives in sys.exc_*(). This was due to a problem in\n  Cython, not lxml itself.\n\n\n2.1.2 (2008-09-05)\n==================\n\nFeatures added\n--------------\n\n* lxml.etree now tries to find the absolute path name of files when\n  parsing from a file-like object.  This helps custom resolvers when\n  resolving relative URLs, as lixbml2 can prepend them with the path\n  of the source document.\n\nBugs fixed\n----------\n\n* Memory problem when passing documents between threads.\n\n* Target parser did not honour the ``recover`` option and raised an\n  exception instead of calling ``.close()`` on the target.\n\nOther changes\n-------------\n\n\n2.0.9 (2008-09-05)\n==================\n\nBugs fixed\n----------\n\n* Memory problem when passing documents between threads.\n\n* Target parser did not honour the ``recover`` option and raised an\n  exception instead of calling ``.close()`` on the target.\n\n\n2.1.1 (2008-07-24)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash when parsing XSLT stylesheets in a thread and using them in\n  another.\n\n* Encoding problem when including text with ElementInclude under\n  Python 3.\n\nOther changes\n-------------\n\n\n2.0.8 (2008-07-24)\n==================\n\nFeatures added\n--------------\n\n* ``lxml.html.rewrite_links()`` strips links to work around documents\n  with whitespace in URL attributes.\n\nBugs fixed\n----------\n\n* Crash when parsing XSLT stylesheets in a thread and using them in\n  another.\n\n* CSS selector parser dropped remaining expression after a function\n  with parameters.\n\nOther changes\n-------------\n\n\n2.1 (2008-07-09)\n================\n\nFeatures added\n--------------\n\n* Smart strings can be switched off in XPath (``smart_strings``\n  keyword option).\n\n* ``lxml.html.rewrite_links()`` strips links to work around documents\n  with whitespace in URL attributes.\n\nBugs fixed\n----------\n\n* Custom resolvers were not used for XMLSchema includes/imports and\n  XInclude processing.\n\n* CSS selector parser dropped remaining expression after a function\n  with parameters.\n\nOther changes\n-------------\n\n* ``objectify.enableRecursiveStr()`` was removed, use\n  ``objectify.enable_recursive_str()`` instead\n\n* Speed-up when running XSLTs on documents from other threads\n\n\n2.0.7 (2008-06-20)\n==================\n\nFeatures added\n--------------\n\n* Pickling ``ElementTree`` objects in lxml.objectify.\n\nBugs fixed\n----------\n\n* Descending dot-separated classes in CSS selectors were not resolved\n  correctly.\n\n* ``ElementTree.parse()`` didn't handle target parser result.\n\n* Potential threading problem in XInclude.\n\n* Crash in Element class lookup classes when the __init__() method of\n  the super class is not called from Python subclasses.\n\nOther changes\n-------------\n\n* Non-ASCII characters in attribute values are no longer escaped on\n  serialisation.\n\n\n2.1beta3 (2008-06-19)\n=====================\n\nFeatures added\n--------------\n\n* Major overhaul of ``tools/xpathgrep.py`` script.\n\n* Pickling ``ElementTree`` objects in lxml.objectify.\n\n* Support for parsing from file-like objects that return unicode\n  strings.\n\n* New function ``etree.cleanup_namespaces(el)`` that removes unused\n  namespace declarations from a (sub)tree (experimental).\n\n* XSLT results support the buffer protocol in Python 3.\n\n* Polymorphic functions in ``lxml.html`` that accept either a tree or\n  a parsable string will return either a UTF-8 encoded byte string, a\n  unicode string or a tree, based on the type of the input.\n  Previously, the result was always a byte string or a tree.\n\n* Support for Python 2.6 and 3.0 beta.\n\n* File name handling now uses a heuristic to convert between byte\n  strings (usually filenames) and unicode strings (usually URLs).\n\n* Parsing from a plain file object frees the GIL under Python 2.x.\n\n* Running ``iterparse()`` on a plain file (or filename) frees the GIL\n  on reading under Python 2.x.\n\n* Conversion functions ``html_to_xhtml()`` and ``xhtml_to_html()`` in\n  lxml.html (experimental).\n\n* Most features in lxml.html work for XHTML namespaced tag names\n  (experimental).\n\nBugs fixed\n----------\n\n* ``ElementTree.parse()`` didn't handle target parser result.\n\n* Crash in Element class lookup classes when the __init__() method of\n  the super class is not called from Python subclasses.\n\n* A number of problems related to unicode/byte string conversion of\n  filenames and error messages were fixed.\n\n* Building on MacOS-X now passes the \"flat_namespace\" option to the C\n  compiler, which reportedly prevents build quirks and crashes on this\n  platform.\n\n* Windows build was broken.\n\n* Rare crash when serialising to a file object with certain encodings.\n\nOther changes\n-------------\n\n* Non-ASCII characters in attribute values are no longer escaped on\n  serialisation.\n\n* Passing non-ASCII byte strings or invalid unicode strings as .tag,\n  namespaces, etc. will result in a ValueError instead of an\n  AssertionError (just like the tag well-formedness check).\n\n* Up to several times faster attribute access (i.e. tree traversal) in\n  lxml.objectify.\n\n\n2.0.6 (2008-05-31)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Incorrect evaluation of ``el.find(\"tag[child]\")``.\n\n* Windows build was broken.\n\n* Moving a subtree from a document created in one thread into a\n  document of another thread could crash when the rest of the source\n  document is deleted while the subtree is still in use.\n\n* Rare crash when serialising to a file object with certain encodings.\n\nOther changes\n-------------\n\n* lxml should now build without problems on MacOS-X.\n\n\n2.1beta2 (2008-05-02)\n=====================\n\nFeatures added\n--------------\n\n* All parse functions in lxml.html take a ``parser`` keyword argument.\n\n* lxml.html has a new parser class ``XHTMLParser`` and a module\n  attribute ``xhtml_parser`` that provide XML parsers that are\n  pre-configured for the lxml.html package.\n\nBugs fixed\n----------\n\n* Moving a subtree from a document created in one thread into a\n  document of another thread could crash when the rest of the source\n  document is deleted while the subtree is still in use.\n\n* Passing an nsmap when creating an Element will no longer strip\n  redundantly defined namespace URIs.  This prevented the definition\n  of more than one prefix for a namespace on the same Element.\n\nOther changes\n-------------\n\n* If the default namespace is redundantly defined with a prefix on the\n  same Element, the prefix will now be preferred for subelements and\n  attributes.  This allows users to work around a problem in libxml2\n  where attributes from the default namespace could serialise without\n  a prefix even when they appear on an Element with a different\n  namespace (i.e. they would end up in the wrong namespace).\n\n\n2.0.5 (2008-05-01)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Resolving to a filename in custom resolvers didn't work.\n\n* lxml did not honour libxslt's second error state \"STOPPED\", which\n  let some XSLT errors pass silently.\n\n* Memory leak in Schematron with libxml2 >= 2.6.31.\n\nOther changes\n-------------\n\n\n2.1beta1 (2008-04-15)\n=====================\n\nFeatures added\n--------------\n\n* Error logging in Schematron (requires libxml2 2.6.32 or later).\n\n* Parser option ``strip_cdata`` for normalising or keeping CDATA\n  sections.  Defaults to ``True`` as before, thus replacing CDATA\n  sections by their text content.\n\n* ``CDATA()`` factory to wrap string content as CDATA section.\n\nBugs fixed\n----------\n\n* Resolving to a filename in custom resolvers didn't work.\n\n* lxml did not honour libxslt's second error state \"STOPPED\", which\n  let some XSLT errors pass silently.\n\n* Memory leak in Schematron with libxml2 >= 2.6.31.\n\n* lxml.etree accepted non well-formed namespace prefix names.\n\nOther changes\n-------------\n\n* Major cleanup in internal ``moveNodeToDocument()`` function, which\n  takes care of namespace cleanup when moving elements between\n  different namespace contexts.\n\n* New Elements created through the ``makeelement()`` method of an HTML\n  parser or through lxml.html now end up in a new HTML document\n  (doctype HTML 4.01 Transitional) instead of a generic XML document.\n  This mostly impacts the serialisation and the availability of a DTD\n  context.\n\n\n2.0.4 (2008-04-13)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Hanging thread in conjunction with GTK threading.\n\n* Crash bug in iterparse when moving elements into other documents.\n\n* HTML elements' ``.cssselect()`` method was broken.\n\n* ``ElementTree.find*()`` didn't accept QName objects.\n\nOther changes\n-------------\n\n\n2.1alpha1 (2008-03-27)\n======================\n\nFeatures added\n--------------\n\n* New event types 'comment' and 'pi' in ``iterparse()``.\n\n* ``XSLTAccessControl`` instances have a property ``options`` that\n  returns a dict of access configuration options.\n\n* Constant instances ``DENY_ALL`` and ``DENY_WRITE`` on\n  ``XSLTAccessControl`` class.\n\n* Extension elements for XSLT (experimental!)\n\n* ``Element.base`` property returns the xml:base or HTML base URL of\n  an Element.\n\n* ``docinfo.URL`` property is writable.\n\nBugs fixed\n----------\n\n* Default encoding for plain text serialisation was different from\n  that of XML serialisation (UTF-8 instead of ASCII).\n\nOther changes\n-------------\n\n* Minor API speed-ups.\n\n* The benchmark suite now uses tail text in the trees, which makes the\n  absolute numbers incomparable to previous results.\n\n* Generating the HTML documentation now requires Pygments_, which is\n  used to enable syntax highlighting for the doctest examples.\n\n.. _Pygments: http://pygments.org/\n\nMost long-time deprecated functions and methods were removed:\n\n- ``etree.clearErrorLog()``, use ``etree.clear_error_log()``\n\n- ``etree.useGlobalPythonLog()``, use\n  ``etree.use_global_python_log()``\n\n- ``etree.ElementClassLookup.setFallback()``, use\n  ``etree.ElementClassLookup.set_fallback()``\n\n- ``etree.getDefaultParser()``, use ``etree.get_default_parser()``\n\n- ``etree.setDefaultParser()``, use ``etree.set_default_parser()``\n\n- ``etree.setElementClassLookup()``, use\n  ``etree.set_element_class_lookup()``\n\n  Note that ``parser.setElementClassLookup()`` has not been removed\n  yet, although ``parser.set_element_class_lookup()`` should be used\n  instead.\n\n- ``xpath_evaluator.registerNamespace()``, use\n  ``xpath_evaluator.register_namespace()``\n\n- ``xpath_evaluator.registerNamespaces()``, use\n  ``xpath_evaluator.register_namespaces()``\n\n- ``objectify.setPytypeAttributeTag``, use\n  ``objectify.set_pytype_attribute_tag``\n\n- ``objectify.setDefaultParser()``, use\n  ``objectify.set_default_parser()``\n\n\n2.0.3 (2008-03-26)\n==================\n\nFeatures added\n--------------\n\n* soupparser.parse() allows passing keyword arguments on to\n  BeautifulSoup.\n\n* ``fromstring()`` method in ``lxml.html.soupparser``.\n\nBugs fixed\n----------\n\n* ``lxml.html.diff`` didn't treat empty tags properly (e.g.,\n  ``<br>``).\n\n* Handle entity replacements correctly in target parser.\n\n* Crash when using ``iterparse()`` with XML Schema validation.\n\n* The BeautifulSoup parser (soupparser.py) did not replace entities,\n  which made them turn up in text content.\n\n* Attribute assignment of custom PyTypes in objectify could fail to\n  correctly serialise the value to a string.\n\nOther changes\n-------------\n\n* ``lxml.html.ElementSoup`` was replaced by a new module\n  ``lxml.html.soupparser`` with a more consistent API.  The old module\n  remains for compatibility with ElementTree's own ElementSoup module.\n\n* Setting the XSLT_CONFIG and XML2_CONFIG environment variables at\n  build time will let setup.py pick up the ``xml2-config`` and\n  ``xslt-config`` scripts from the supplied path name.\n\n* Passing ``--with-xml2-config=/path/to/xml2-config`` to setup.py will\n  override the ``xml2-config`` script that is used to determine the C\n  compiler options.  The same applies for the ``--with-xslt-config``\n  option.\n\n\n2.0.2 (2008-02-22)\n==================\n\nFeatures added\n--------------\n\n* Support passing ``base_url`` to file parser functions to override\n  the filename of the file(-like) object.\n\nBugs fixed\n----------\n\n* The prefix for objectify's pytype namespace was missing from the set\n  of default prefixes.\n\n* Memory leak in Schematron (fixed only for libxml2 2.6.31+).\n\n* Error type names in RelaxNG were reported incorrectly.\n\n* Slice deletion bug fixed in objectify.\n\nOther changes\n-------------\n\n* Enabled doctests for some Python modules (especially ``lxml.html``).\n\n* Add a ``method`` argument to ``lxml.html.tostring()``\n  (``method=\"xml\"`` for XHTML output).\n\n* Make it clearer that methods like ``lxml.html.fromstring()`` take a\n  ``base_url`` argument.\n\n\n2.0.1 (2008-02-13)\n==================\n\nFeatures added\n--------------\n\n* Child iteration in ``lxml.pyclasslookup``.\n\n* Loads of new docstrings reflect the signature of functions and\n  methods to make them visible in API docs and ``help()``\n\nBugs fixed\n----------\n\n* The module ``lxml.html.builder`` was duplicated as\n  ``lxml.htmlbuilder``\n\n* Form elements would return None for ``form.fields.keys()`` if there\n  was an unnamed input field.  Now unnamed input fields are completely\n  ignored.\n\n* Setting an element slice in objectify could insert slice-overlapping\n  elements at the wrong position.\n\nOther changes\n-------------\n\n* The generated API documentation was cleaned up and disburdened from\n  non-public classes etc.\n\n* The previously public module ``lxml.html.setmixin`` was renamed to\n  ``lxml.html._setmixin`` as it is not an official part of lxml.  If\n  you want to use it, feel free to copy it over to your own source\n  base.\n\n* Passing ``--with-xslt-config=/path/to/xslt-config`` to setup.py will\n  override the ``xslt-config`` script that is used to determine the C\n  compiler options.\n\n\n2.0 (2008-02-01)\n================\n\nFeatures added\n--------------\n\n* Passing the ``unicode`` type as ``encoding`` to ``tostring()`` will\n  serialise to unicode.  The ``tounicode()`` function is now\n  deprecated.\n\n* ``XMLSchema()`` and ``RelaxNG()`` can parse from StringIO.\n\n* ``makeparser()`` function in ``lxml.objectify`` to create a new\n  parser with the usual objectify setup.\n\n* Plain ASCII XPath string results are no longer forced into unicode\n  objects as in 2.0beta1, but are returned as plain strings as before.\n\n* All XPath string results are 'smart' objects that have a\n  ``getparent()`` method to retrieve their parent Element.\n\n* ``with_tail`` option in serialiser functions.\n\n* More accurate exception messages in validator creation.\n\n* Parse-time XML schema validation (``schema`` parser keyword).\n\n* XPath string results of the ``text()`` function and attribute\n  selection make their Element container accessible through a\n  ``getparent()`` method.  As a side-effect, they are now always\n  unicode objects (even ASCII strings).\n\n* ``XSLT`` objects are usable in any thread - at the cost of a deep\n  copy if they were not created in that thread.\n\n* Invalid entity names and character references will be rejected by\n  the ``Entity()`` factory.\n\n* ``entity.text`` returns the textual representation of the entity,\n  e.g. ``&amp;``.\n\n* New properties ``position`` and ``code`` on ParseError exception (as\n  in ET 1.3)\n\n* Rich comparison of ``element.attrib`` proxies.\n\n* ElementTree compatible TreeBuilder class.\n\n* Use default prefixes for some common XML namespaces.\n\n* ``lxml.html.clean.Cleaner`` now allows for a ``host_whitelist``, and\n  two overridable methods: ``allow_embedded_url(el, url)`` and the\n  more general ``allow_element(el)``.\n\n* Extended slicing of Elements as in ``element[1:-1:2]``, both in\n  etree and in objectify\n\n* Resolvers can now provide a ``base_url`` keyword argument when\n  resolving a document as string data.\n\n* When using ``lxml.doctestcompare`` you can give the doctest option\n  ``NOPARSE_MARKUP`` (like ``# doctest: +NOPARSE_MARKUP``) to suppress\n  the special checking for one test.\n\n* Separate ``feed_error_log`` property for the feed parser interface.\n  The normal parser interface and ``iterparse`` continue to use\n  ``error_log``.\n\n* The normal parsers and the feed parser interface are now separated\n  and can be used concurrently on the same parser instance.\n\n* ``fromstringlist()`` and ``tostringlist()`` functions as in\n  ElementTree 1.3\n\n* ``iterparse()`` accepts an ``html`` boolean keyword argument for\n  parsing with the HTML parser (note that this interface may be\n  subject to change)\n\n* Parsers accept an ``encoding`` keyword argument that overrides the encoding\n  of the parsed documents.\n\n* New C-API function ``hasChild()`` to test for children\n\n* ``annotate()`` function in objectify can annotate with Python types and XSI\n  types in one step.  Accompanied by ``xsiannotate()`` and ``pyannotate()``.\n\n* ``ET.write()``, ``tostring()`` and ``tounicode()`` now accept a keyword\n  argument ``method`` that can be one of 'xml' (or None), 'html' or 'text' to\n  serialise as XML, HTML or plain text content.\n\n* ``iterfind()`` method on Elements returns an iterator equivalent to\n  ``findall()``\n\n* ``itertext()`` method on Elements\n\n* Setting a QName object as value of the .text property or as an attribute\n  will resolve its prefix in the respective context\n\n* ElementTree-like parser target interface as described in\n  http://effbot.org/elementtree/elementtree-xmlparser.htm\n\n* ElementTree-like feed parser interface on XMLParser and HTMLParser\n  (``feed()`` and ``close()`` methods)\n\n* Reimplemented ``objectify.E`` for better performance and improved\n  integration with objectify.  Provides extended type support based on\n  registered PyTypes.\n\n* XSLT objects now support deep copying\n\n* New ``makeSubElement()`` C-API function that allows creating a new\n  subelement straight with text, tail and attributes.\n\n* XPath extension functions can now access the current context node\n  (``context.context_node``) and use a context dictionary\n  (``context.eval_context``) from the context provided in their first\n  parameter\n\n* HTML tag soup parser based on BeautifulSoup in ``lxml.html.ElementSoup``\n\n* New module ``lxml.doctestcompare`` by Ian Bicking for writing simplified\n  doctests based on XML/HTML output.  Use by importing ``lxml.usedoctest`` or\n  ``lxml.html.usedoctest`` from within a doctest.\n\n* New module ``lxml.cssselect`` by Ian Bicking for selecting Elements with CSS\n  selectors.\n\n* New package ``lxml.html`` written by Ian Bicking for advanced HTML\n  treatment.\n\n* Namespace class setup is now local to the ``ElementNamespaceClassLookup``\n  instance and no longer global.\n\n* Schematron validation (incomplete in libxml2)\n\n* Additional ``stringify`` argument to ``objectify.PyType()`` takes a\n  conversion function to strings to support setting text values from arbitrary\n  types.\n\n* Entity support through an ``Entity`` factory and element classes.  XML\n  parsers now have a ``resolve_entities`` keyword argument that can be set to\n  False to keep entities in the document.\n\n* ``column`` field on error log entries to accompany the ``line`` field\n\n* Error specific messages in XPath parsing and evaluation\n  NOTE: for evaluation errors, you will now get an XPathEvalError instead of\n  an XPathSyntaxError.  To catch both, you can except on ``XPathError``\n\n* The regular expression functions in XPath now support passing a node-set\n  instead of a string\n\n* Extended type annotation in objectify: new ``xsiannotate()`` function\n\n* EXSLT RegExp support in standard XPath (not only XSLT)\n\nBugs fixed\n----------\n\n* Missing import in ``lxml.html.clean``.\n\n* Some Python 2.4-isms prevented lxml from building/running under\n  Python 2.3.\n\n* XPath on ElementTrees could crash when selecting the virtual root\n  node of the ElementTree.\n\n* Compilation ``--without-threading`` was buggy in alpha5/6.\n\n* Memory leak in the ``parse()`` function.\n\n* Minor bugs in XSLT error message formatting.\n\n* Result document memory leak in target parser.\n\n* Target parser failed to report comments.\n\n* In the ``lxml.html`` ``iter_links`` method, links in ``<object>``\n  tags weren't recognized.  (Note: plugin-specific link parameters\n  still aren't recognized.)  Also, the ``<embed>`` tag, though not\n  standard, is now included in ``lxml.html.defs.special_inline_tags``.\n\n* Using custom resolvers on XSLT stylesheets parsed from a string\n  could request ill-formed URLs.\n\n* With ``lxml.doctestcompare`` if you do ``<tag xmlns=\"...\">`` in your\n  output, it will then be namespace-neutral (before the ellipsis was\n  treated as a real namespace).\n\n* AttributeError in feed parser on parse errors\n\n* XML feed parser setup problem\n\n* Type annotation for unicode strings in ``DataElement()``\n\n* lxml failed to serialise namespace declarations of elements other than the\n  root node of a tree\n\n* Race condition in XSLT where the resolver context leaked between concurrent\n  XSLT calls\n\n* lxml.etree did not check tag/attribute names\n\n* The XML parser did not report undefined entities as error\n\n* The text in exceptions raised by XML parsers, validators and XPath\n  evaluators now reports the first error that occurred instead of the last\n\n* Passing '' as XPath namespace prefix did not raise an error\n\n* Thread safety in XPath evaluators\n\nOther changes\n-------------\n\n* Exceptions carry only the part of the error log that is related to\n  the operation that caused the error.\n\n* ``XMLSchema()`` and ``RelaxNG()`` now enforce passing the source\n  file/filename through the ``file`` keyword argument.\n\n* The test suite now skips most doctests under Python 2.3.\n\n* ``make clean`` no longer removes the .c files (use ``make\n  realclean`` instead)\n\n* Minor performance tweaks for Element instantiation and subelement\n  creation\n\n* Various places in the XPath, XSLT and iteration APIs now require\n  keyword-only arguments.\n\n* The argument order in ``element.itersiblings()`` was changed to\n  match the order used in all other iteration methods.  The second\n  argument ('preceding') is now a keyword-only argument.\n\n* The ``getiterator()`` method on Elements and ElementTrees was\n  reverted to return an iterator as it did in lxml 1.x.  The ET API\n  specification allows it to return either a sequence or an iterator,\n  and it traditionally returned a sequence in ET and an iterator in\n  lxml.  However, it is now deprecated in favour of the ``iter()``\n  method, which should be used in new code wherever possible.\n\n* The 'pretty printed' serialisation of ElementTree objects now\n  inserts newlines at the root level between processing instructions,\n  comments and the root tag.\n\n* A 'pretty printed' serialisation is now terminated with a newline.\n\n* Second argument to ``lxml.etree.Extension()`` helper is no longer\n  required, third argument is now a keyword-only argument ``ns``.\n\n* ``lxml.html.tostring`` takes an ``encoding`` argument.\n\n* The module source files were renamed to \"lxml.*.pyx\", such as\n  \"lxml.etree.pyx\".  This was changed for consistency with the way\n  Pyrex commonly handles package imports.  The main effect is that\n  classes now know about their fully qualified class name, including\n  the package name of their module.\n\n* Keyword-only arguments in some API functions, especially in the\n  parsers and serialisers.\n\n* Tag name validation in lxml.etree (and lxml.html) now distinguishes\n  between HTML tags and XML tags based on the parser that was used to\n  parse or create them.  HTML tags no longer reject any non-ASCII\n  characters in tag names but only spaces and the special characters\n  ``<>&/\"'``.\n\n* lxml.etree now emits a warning if you use XPath with libxml2 2.6.27\n  (which can crash on certain XPath errors)\n\n* Type annotation in objectify now preserves the already annotated type by\n  default to prevent losing type information that is already there.\n\n* ``element.getiterator()`` returns a list, use ``element.iter()`` to retrieve\n  an iterator (ElementTree 1.3 compatible behaviour)\n\n* objectify.PyType for None is now called \"NoneType\"\n\n* ``el.getiterator()`` renamed to ``el.iter()``, following ElementTree 1.3 -\n  original name is still available as alias\n\n* In the public C-API, ``findOrBuildNodeNs()`` was replaced by the more\n  generic ``findOrBuildNodeNsPrefix``\n\n* Major refactoring in XPath/XSLT extension function code\n\n* Network access in parsers disabled by default\n\n\n1.3.6 (2007-10-29)\n==================\n\nBugs fixed\n----------\n\n* Backported decref crash fix from 2.0\n\n* Well hidden free-while-in-use crash bug in ObjectPath\n\nOther changes\n-------------\n\n* The test suites now run ``gc.collect()`` in the ``tearDown()``\n  methods.  While this makes them take a lot longer to run, it also\n  makes it easier to link a specific test to garbage collection\n  problems that would otherwise appear in later tests.\n\n\n1.3.5 (2007-10-22)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* lxml.etree could crash when adding more than 10000 namespaces to a\n  document\n\n* lxml failed to serialise namespace declarations of elements other\n  than the root node of a tree\n\n\n1.3.4 (2007-08-30)\n==================\n\nFeatures added\n--------------\n\n* The ``ElementMaker`` in ``lxml.builder`` now accepts the keyword arguments\n  ``namespace`` and ``nsmap`` to set a namespace and nsmap for the Elements it\n  creates.\n\n* The ``docinfo`` on ElementTree objects has new properties ``internalDTD``\n  and ``externalDTD`` that return a DTD object for the internal or external\n  subset of the document respectively.\n\n* Serialising an ElementTree now includes any internal DTD subsets that are\n  part of the document, as well as comments and PIs that are siblings of the\n  root node.\n\nBugs fixed\n----------\n\n* Parsing with the ``no_network`` option could fail\n\nOther changes\n-------------\n\n* lxml now raises a TagNameWarning about tag names containing ':' instead of\n  an Error as 1.3.3 did.  The reason is that a number of projects currently\n  misuse the previous lack of tag name validation to generate namespace\n  prefixes without declaring namespaces.  Apart from the danger of generating\n  broken XML this way, it also breaks most of the namespace-aware tools in\n  XML, including XPath, XSLT and validation.  lxml 1.3.x will continue to\n  support this bug with a Warning, while lxml 2.0 will be strict about\n  well-formed tag names (not only regarding ':').\n\n* Serialising an Element no longer includes its comment and PI siblings (only\n  ElementTree serialisation includes them).\n\n\n1.3.3 (2007-07-26)\n==================\n\nFeatures added\n--------------\n\n* ElementTree compatible parser ``ETCompatXMLParser`` strips processing\n  instructions and comments while parsing XML\n\n* Parsers now support stripping PIs (keyword argument 'remove_pis')\n\n* ``etree.fromstring()`` now supports parsing both HTML and XML, depending on\n  the parser you pass.\n\n* Support ``base_url`` keyword argument in ``HTML()`` and ``XML()``\n\nBugs fixed\n----------\n\n* Parsing from Python Unicode strings failed on some platforms\n\n* ``Element()`` did not raise an exception on tag names containing ':'\n\n* ``Element.getiterator(tag)`` did not accept ``Comment`` and\n  ``ProcessingInstruction`` as tags. It also accepts ``Element`` now.\n\n\n1.3.2 (2007-07-03)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* \"deallocating None\" crash bug\n\n\n1.3.1 (2007-07-02)\n==================\n\nFeatures added\n--------------\n\n* objectify.DataElement now supports setting values from existing data\n  elements (not just plain Python types) and reuses defined namespaces etc.\n\n* E-factory support for lxml.objectify (``objectify.E``)\n\nBugs fixed\n----------\n\n* Better way to prevent crashes in Element proxy cleanup code\n\n* objectify.DataElement didn't set up None value correctly\n\n* objectify.DataElement didn't check the value against the provided type hints\n\n* Reference-counting bug in ``Element.attrib.pop()``\n\n\n1.3 (2007-06-24)\n================\n\nFeatures added\n--------------\n\n* Module ``lxml.pyclasslookup`` module implements an Element class lookup\n  scheme that can access the entire tree in read-only mode to help determining\n  a suitable Element class\n\n* Parsers take a ``remove_comments`` keyword argument that skips over comments\n\n* ``parse()`` function in ``objectify``, corresponding to ``XML()`` etc.\n\n* ``Element.addnext(el)`` and ``Element.addprevious(el)`` methods to support\n  adding processing instructions and comments around the root node\n\n* ``Element.attrib`` was missing ``clear()`` and ``pop()`` methods\n\n* Extended type annotation in objectify: cleaner annotation namespace setup\n  plus new ``deannotate()`` function\n\n* Support for custom Element class instantiation in lxml.sax: passing a\n  ``makeelement`` function to the ElementTreeContentHandler will reuse the\n  lookup context of that function\n\n* '.' represents empty ObjectPath (identity)\n\n* ``Element.values()`` to accompany the existing ``.keys()`` and ``.items()``\n\n* ``collectAttributes()`` C-function to build a list of attribute\n  keys/values/items for a libxml2 node\n\n* ``DTD`` validator class (like ``RelaxNG`` and ``XMLSchema``)\n\n* HTML generator helpers by Fredrik Lundh in ``lxml.htmlbuilder``\n\n* ``ElementMaker`` XML generator by Fredrik Lundh in ``lxml.builder.E``\n\n* Support for pickling ``objectify.ObjectifiedElement`` objects to XML\n\n* ``update()`` method on Element.attrib\n\n* Optimised replacement for libxml2's _xmlReconsiliateNs(). This allows lxml\n  a better handling of namespaces when moving elements between documents.\n\nBugs fixed\n----------\n\n* Removing Elements from a tree could make them lose their namespace\n  declarations\n\n* ``ElementInclude`` didn't honour base URL of original document\n\n* Replacing the children slice of an Element would cut off the tails of the\n  original children\n\n* ``Element.getiterator(tag)`` did not accept ``Comment`` and\n  ``ProcessingInstruction`` as tags\n\n* API functions now check incoming strings for XML conformity.  Zero bytes or\n  low ASCII characters are no longer accepted (AssertionError).\n\n* XSLT parsing failed to pass resolver context on to imported documents\n\n* passing '' as namespace prefix in nsmap could be passed through to libxml2\n\n* Objectify couldn't handle prefixed XSD type names in ``xsi:type``\n\n* More ET compatible behaviour when writing out XML declarations or not\n\n* More robust error handling in ``iterparse()``\n\n* Documents lost their top-level PIs and comments on serialisation\n\n* lxml.sax failed on comments and PIs. Comments are now properly ignored and\n  PIs are copied.\n\n* Possible memory leaks in namespace handling when moving elements between\n  documents\n\nOther changes\n-------------\n\n* major restructuring in the documentation\n\n\n1.2.1 (2007-02-27)\n==================\n\nBugs fixed\n----------\n\n* Build fixes for MS compiler\n\n* Item assignments to special names like ``element[\"text\"]`` failed\n\n* Renamed ObjectifiedDataElement.__setText() to _setText() to make it easier\n  to access\n\n* The pattern for attribute names in ObjectPath was too restrictive\n\n\n1.2 (2007-02-20)\n================\n\nFeatures added\n--------------\n\n* Rich comparison of QName objects\n\n* Support for regular expressions in benchmark selection\n\n* get/set emulation (not .attrib!) for attributes on processing instructions\n\n* ElementInclude Python module for ElementTree compatible XInclude processing\n  that honours custom resolvers registered with the source document\n\n* ElementTree.parser property holds the parser used to parse the document\n\n* setup.py has been refactored for greater readability and flexibility\n\n* --rpath flag to setup.py to induce automatic linking-in of dynamic library\n  runtime search paths has been renamed to --auto-rpath. This makes it\n  possible to pass an --rpath directly to distutils; previously this was being\n  shadowed.\n\nBugs fixed\n----------\n\n* Element instantiation now uses locks to prevent race conditions with threads\n\n* ElementTree.write() did not raise an exception when the file was not writable\n\n* Error handling could crash under Python <= 2.4.1 - fixed by disabling thread\n  support in these environments\n\n* Element.find*() did not accept QName objects as path\n\nOther changes\n-------------\n\n* code cleanup: redundant _NodeBase super class merged into _Element class\n  Note: although the impact should be zero in most cases, this change breaks\n  the compatibility of the public C-API\n\n\n1.1.2 (2006-10-30)\n==================\n\nFeatures added\n--------------\n\n* Data elements in objectify support repr(), which is now used by dump()\n\n* Source distribution now ships with a patched Pyrex\n\n* New C-API function makeElement() to create new elements with text,\n  tail, attributes and namespaces\n\n* Reuse original parser flags for XInclude\n\n* Simplified support for handling XSLT processing instructions\n\nBugs fixed\n----------\n\n* Parser resources were not freed before the next parser run\n\n* Open files and XML strings returned by Python resolvers were not\n  closed/freed\n\n* Crash in the IDDict returned by XMLDTDID\n\n* Copying Comments and ProcessingInstructions failed\n\n* Memory leak for external URLs in _XSLTProcessingInstruction.parseXSL()\n\n* Memory leak when garbage collecting tailed root elements\n\n* HTML script/style content was not propagated to .text\n\n* Show text xincluded between text nodes correctly in .text and .tail\n\n* 'integer * objectify.StringElement' operation was not supported\n\n\n1.1.1 (2006-09-21)\n==================\n\nFeatures added\n--------------\n\n* XSLT profiling support (``profile_run`` keyword)\n\n* countchildren() method on objectify.ObjectifiedElement\n\n* Support custom elements for tree nodes in lxml.objectify\n\nBugs fixed\n----------\n\n* lxml.objectify failed to support long data values (e.g., \"123L\")\n\n* Error messages from XSLT did not reach ``XSLT.error_log``\n\n* Factories objectify.Element() and objectify.DataElement() were missing\n  ``attrib`` and ``nsmap`` keyword arguments\n\n* Changing the default parser in lxml.objectify did not update the factories\n  Element() and DataElement()\n\n* Let lxml.objectify.Element() always generate tree elements (not data\n  elements)\n\n* Build under Windows failed ('\\0' bug in patched Pyrex version)\n\n\n1.1 (2006-09-13)\n================\n\nFeatures added\n--------------\n\n* Comments and processing instructions return '<!-- comment -->' and\n  '<?pi-target content?>' for repr()\n\n* Parsers are now the preferred (and default) place where element class lookup\n  schemes should be registered.  Namespace lookup is no longer supported by\n  default.\n\n* Support for Python 2.5 beta\n\n* Unlock the GIL for deep copying documents and for XPath()\n\n* New ``compact`` keyword argument for parsing read-only documents\n\n* Support for parser options in iterparse()\n\n* The ``namespace`` axis is supported in XPath and returns (prefix, URI)\n  tuples\n\n* The XPath expression \"/\" now returns an empty list instead of raising an\n  exception\n\n* XML-Object API on top of lxml (lxml.objectify)\n\n* Customizable Element class lookup:\n\n  * different pre-implemented lookup mechanisms\n\n  * support for externally provided lookup functions\n\n* Support for processing instructions (ET-like, not compatible)\n\n* Public C-level API for independent extension modules\n\n* Module level ``iterwalk()`` function as 'iterparse' for trees\n\n* Module level ``iterparse()`` function similar to ElementTree (see\n  documentation for differences)\n\n* Element.nsmap property returns a mapping of all namespace prefixes known at\n  the Element to their namespace URI\n\n* Reentrant threading support in RelaxNG, XMLSchema and XSLT\n\n* Threading support in parsers and serializers:\n\n  * All in-memory operations (tostring, parse(StringIO), etc.) free the GIL\n\n  * File operations (on file names) free the GIL\n\n  * Reading from file-like objects frees the GIL and reacquires it for reading\n\n  * Serialisation to file-like objects is single-threaded (high lock overhead)\n\n* Element iteration over XPath axes:\n\n  * Element.iterdescendants() iterates over the descendants of an element\n\n  * Element.iterancestors() iterates over the ancestors of an element (from\n    parent to parent)\n\n  * Element.itersiblings() iterates over either the following or preceding\n    siblings of an element\n\n  * Element.iterchildren() iterates over the children of an element in either\n    direction\n\n  * All iterators support the ``tag`` keyword argument to restrict the\n    generated elements\n\n* Element.getnext() and Element.getprevious() return the direct siblings of an\n  element\n\nBugs fixed\n----------\n\n* filenames with local 8-bit encoding were not supported\n\n* 1.1beta did not compile under Python 2.3\n\n* ignore unknown 'pyval' attribute values in objectify\n\n* objectify.ObjectifiedElement.addattr() failed to accept Elements and Lists\n\n* objectify.ObjectPath.setattr() failed to accept Elements and Lists\n\n* XPathSyntaxError now inherits from XPathError\n\n* Threading race conditions in RelaxNG and XMLSchema\n\n* Crash when mixing elements from XSLT results into other trees, concurrent\n  XSLT is only allowed when the stylesheet was parsed in the main thread\n\n* The EXSLT ``regexp:match`` function now works as defined (except for some\n  differences in the regular expression syntax)\n\n* Setting element.text to '' returned None on request, not the empty string\n\n* ``iterparse()`` could crash on long XML files\n\n* Creating documents no longer copies the parser for later URL resolving.  For\n  performance reasons, only a reference is kept.  Resolver updates on the\n  parser will now be reflected by documents that were parsed before the\n  change.  Although this should rarely become visible, it is a behavioral\n  change from 1.0.\n\n\n1.0.4 (2006-09-09)\n==================\n\nFeatures added\n--------------\n\n* List-like ``Element.extend()`` method\n\nBugs fixed\n----------\n\n* Crash in tail handling in ``Element.replace()``\n\n\n1.0.3 (2006-08-08)\n==================\n\nFeatures added\n--------------\n\n* Element.replace(old, new) method to replace a subelement by another one\n\nBugs fixed\n----------\n\n* Crash when mixing elements from XSLT results into other trees\n\n* Copying/deepcopying did not work for ElementTree objects\n\n* Setting an attribute to a non-string value did not raise an exception\n\n* Element.remove() deleted the tail text from the removed Element\n\n\n1.0.2 (2006-06-27)\n==================\n\nFeatures added\n--------------\n\n* Support for setting a custom default Element class as opposed to namespace\n  specific classes (which still override the default class)\n\nBugs fixed\n----------\n\n* Rare exceptions in Python list functions were not handled\n\n* Parsing accepted unicode strings with XML encoding declaration in certain\n  cases\n\n* Parsing 8-bit encoded strings from StringIO objects raised an exception\n\n* Module function ``initThread()`` was removed - useless (and never worked)\n\n* XSLT and parser exception messages include the error line number\n\n\n1.0.1 (2006-06-09)\n==================\n\nFeatures added\n--------------\n\n* Repeated calls to Element.attrib now efficiently return the same instance\n\nBugs fixed\n----------\n\n* Document deallocation could crash in certain garbage collection scenarios\n\n* Extension function calls in XSLT variable declarations could break the\n  stylesheet and crash on repeated calls\n\n* Deep copying Elements could lose namespaces declared in parents\n\n* Deep copying Elements did not copy tail\n\n* Parsing file(-like) objects failed to load external entities\n\n* Parsing 8-bit strings from file(-like) objects raised an exception\n\n* xsl:include failed when the stylesheet was parsed from a file-like object\n\n* lxml.sax.ElementTreeProducer did not call startDocument() / endDocument()\n\n* MSVC compiler complained about long strings (supports only 2048 bytes)\n\n\n1.0 (2006-06-01)\n================\n\nFeatures added\n--------------\n\n* Element.getiterator() and the findall() methods support finding arbitrary\n  elements from a namespace (pattern ``{namespace}*``)\n\n* Another speedup in tree iteration code\n\n* General speedup of Python Element object creation and deallocation\n\n* Writing C14N no longer serializes in memory (reduced memory footprint)\n\n* PyErrorLog for error logging through the Python ``logging`` module\n\n* ``Element.getroottree()`` returns an ElementTree for the root node of the\n  document that contains the element.\n\n* ElementTree.getpath(element) returns a simple, absolute XPath expression to\n  find the element in the tree structure\n\n* Error logs have a ``last_error`` attribute for convenience\n\n* Comment texts can be changed through the API\n\n* Formatted output via ``pretty_print`` keyword in serialization functions\n\n* XSLT can block access to file system and network via ``XSLTAccessControl``\n\n* ElementTree.write() no longer serializes in memory (reduced memory\n  footprint)\n\n* Speedup of Element.findall(tag) and Element.getiterator(tag)\n\n* Support for writing the XML representation of Elements and ElementTrees to\n  Python unicode strings via ``etree.tounicode()``\n\n* Support for writing XSLT results to Python unicode strings via ``unicode()``\n\n* Parsing a unicode string no longer copies the string (reduced memory\n  footprint)\n\n* Parsing file-like objects reads chunks rather than the whole file (reduced\n  memory footprint)\n\n* Parsing StringIO objects from the start avoids copying the string (reduced\n  memory footprint)\n\n* Read-only 'docinfo' attribute in ElementTree class holds DOCTYPE\n  information, original encoding and XML version as seen by the parser\n\n* etree module can be compiled without libxslt by commenting out the line\n  ``include \"xslt.pxi\"`` near the end of the etree.pyx source file\n\n* Better error messages in parser exceptions\n\n* Error reporting also works in XSLT\n\n* Support for custom document loaders (URI resolvers) in parsers and XSLT,\n  resolvers are registered at parser level\n\n* Implementation of exslt:regexp for XSLT based on the Python 're' module,\n  enabled by default, can be switched off with 'regexp=False' keyword argument\n\n* Support for exslt extensions (libexslt) and libxslt extra functions\n  (node-set, document, write, output)\n\n* Substantial speedup in XPath.evaluate()\n\n* HTMLParser for parsing (broken) HTML\n\n* XMLDTDID function parses XML into tuple (root node, ID dict) based on xml:id\n  implementation of libxml2 (as opposed to ET compatible XMLID)\n\nBugs fixed\n----------\n\n* Memory leak in Element.__setitem__\n\n* Memory leak in Element.attrib.items() and Element.attrib.values()\n\n* Memory leak in XPath extension functions\n\n* Memory leak in unicode related setup code\n\n* Element now raises ValueError on empty tag names\n\n* Namespace fixing after moving elements between documents could fail if the\n  source document was freed too early\n\n* Setting namespace-less tag names on namespaced elements ('{ns}t' -> 't')\n  didn't reset the namespace\n\n* Unknown constants from newer libxml2 versions could raise exceptions in the\n  error handlers\n\n* lxml.etree compiles much faster\n\n* On libxml2 <= 2.6.22, parsing strings with encoding declaration could fail\n  in certain cases\n\n* Document reference in ElementTree objects was not updated when the root\n  element was moved to a different document\n\n* Running absolute XPath expressions on an Element now evaluates against the\n  root tree\n\n* Evaluating absolute XPath expressions (``/*``) on an ElementTree could fail\n\n* Crashes when calling XSLT, RelaxNG, etc. with uninitialized ElementTree\n  objects\n\n* Removed public function ``initThreadLogging()``, replaced by more general\n  ``initThread()`` which fixes a number of setup problems in threads\n\n* Memory leak when using iconv encoders in tostring/write\n\n* Deep copying Elements and ElementTrees maintains the document information\n\n* Serialization functions raise LookupError for unknown encodings\n\n* Memory deallocation crash resulting from deep copying elements\n\n* Some ElementTree methods could crash if the root node was not initialized\n  (neither file nor element passed to the constructor)\n\n* Element/SubElement failed to set attribute namespaces from passed ``attrib``\n  dictionary\n\n* ``tostring()`` adds an XML declaration for non-ASCII encodings\n\n* ``tostring()`` failed to serialize encodings that contain 0-bytes\n\n* ElementTree.xpath() and XPathDocumentEvaluator were not using the\n  ElementTree root node as reference point\n\n* Calling ``document('')`` in XSLT failed to return the stylesheet\n\n\n0.9.2 (2006-05-10)\n==================\n\nFeatures added\n--------------\n\n* Speedup for Element.makeelement(): the new element reuses the original\n  libxml2 document instead of creating a new empty one\n\n* Speedup for reversed() iteration over element children (Py2.4+ only)\n\n* ElementTree compatible QName class\n\n* RelaxNG and XMLSchema accept any Element, not only ElementTrees\n\nBugs fixed\n----------\n\n* str(xslt_result) was broken for XSLT output other than UTF-8\n\n* Memory leak if write_c14n fails to write the file after conversion\n\n* Crash in XMLSchema and RelaxNG when passing non-schema documents\n\n* Memory leak in RelaxNG() when RelaxNGParseError is raised\n\n0.9.1 (2006-03-30)\n==================\n\nFeatures added\n--------------\n\n* lxml.sax.ElementTreeContentHandler checks closing elements and raises\n  SaxError on mismatch\n\n* lxml.sax.ElementTreeContentHandler supports namespace-less SAX events\n  (startElement, endElement) and defaults to empty attributes (keyword\n  argument)\n\n* Speedup for repeatedly accessing element tag names\n\n* Minor API performance improvements\n\nBugs fixed\n----------\n\n* Memory deallocation bug when using XSLT output method \"html\"\n\n* sax.py was handling UTF-8 encoded tag names where it shouldn't\n\n* lxml.tests package will no longer be installed (is still in source tar)\n\n0.9 (2006-03-20)\n================\n\nFeatures added\n--------------\n\n* Error logging API for libxml2 error messages\n\n* Various performance improvements\n\n* Benchmark script for lxml, ElementTree and cElementTree\n\n* Support for registering extension functions through new FunctionNamespace\n  class (see doc/extensions.txt)\n\n* ETXPath class for XPath expressions in ElementTree notation ('//{ns}tag')\n\n* Support for variables in XPath expressions (also in XPath class)\n\n* XPath class for compiled XPath expressions\n\n* XMLID module level function (ElementTree compatible)\n\n* XMLParser API for customized libxml2 parser configuration\n\n* Support for custom Element classes through new Namespace API (see\n  doc/namespace_extensions.txt)\n\n* Common exception base class LxmlError for module exceptions\n\n* real iterator support in iter(Element), Element.getiterator()\n\n* XSLT objects are callable, result trees support str()\n\n* Added MANIFEST.in for easier creation of RPM files.\n\n* 'getparent' method on elements allows navigation to an element's\n  parent element.\n\n* Python core compatible SAX tree builder and SAX event generator. See\n  doc/sax.txt for more information.\n\nBugs fixed\n----------\n\n* Segfaults and memory leaks in various API functions of Element\n\n* Segfault in XSLT.tostring()\n\n* ElementTree objects no longer interfere, Elements can be root of different\n  ElementTrees at the same time\n\n* document('') works in XSLT documents read from files (in-memory documents\n  cannot support this due to libxslt deficiencies)\n\n0.8 (2005-11-03)\n================\n\nFeatures added\n--------------\n\n* Support for copy.deepcopy() on elements. copy.copy() works also, but\n  does the same thing, and does *not* create a shallow copy, as that\n  makes no sense in the context of libxml2 trees. This means a\n  potential incompatibility with ElementTree, but there's more chance\n  that it works than if copy.copy() isn't supported at all.\n\n* Increased compatibility with (c)ElementTree; .parse() on ElementTree is\n  supported and parsing of gzipped XML files works.\n\n* implemented index() on elements, allowing one to find the index of a\n  SubElement.\n\nBugs fixed\n----------\n\n* Use xslt-config instead of xml2-config to find out libxml2\n  directories to take into account a case where libxslt is installed\n  in a different directory than libxslt.\n\n* Eliminate crash condition in iteration when text nodes are changed.\n\n* Passing 'None' to tostring() does not result in a segfault anymore,\n  but an AssertionError.\n\n* Some test fixes for Windows.\n\n* Raise XMLSyntaxError and XPathSyntaxError instead of plain python\n  syntax errors. This should be less confusing.\n\n* Fixed error with uncaught exception in Pyrex code.\n\n* Calling lxml.etree.fromstring('') throws XMLSyntaxError instead of a\n  segfault.\n\n* has_key() works on attrib. 'in' tests also work correctly on attrib.\n\n* INSTALL.txt was saying 2.2.16 instead of 2.6.16 as a supported\n  libxml2 version, as it should.\n\n* Passing a UTF-8 encoded string to the XML() function would fail;\n  fixed.\n\n0.7 (2005-06-15)\n================\n\nFeatures added\n--------------\n\n* parameters (XPath expressions) can be passed to XSLT using keyword\n  parameters.\n\n* Simple XInclude support. Calling the xinclude() method on a tree\n  will process any XInclude statements in the document.\n\n* XMLSchema support. Use the XMLSchema class or the convenience\n  xmlschema() method on a tree to do XML Schema (XSD) validation.\n\n* Added convenience xslt() method on tree. This is less efficient\n  than the XSLT object, but makes it easier to write quick code.\n\n* Added convenience relaxng() method on tree. This is less efficient\n  than the RelaxNG object, but makes it easier to write quick code.\n\n* Make it possible to use XPathEvaluator with elements as well. The\n  XPathEvaluator in this case will retain the element so multiple\n  XPath queries can be made against one element efficiently. This\n  replaces the second argument to the .evaluate() method that existed\n  previously.\n\n* Allow registerNamespace() to be called on an XPathEvaluator, after\n  creation, to add additional namespaces. Also allow registerNamespaces(),\n  which does the same for a namespace dictionary.\n\n* Add 'prefix' attribute to element to be able to read prefix information.\n  This is entirely read-only.\n\n* It is possible to supply an extra nsmap keyword parameter to\n  the Element() and SubElement() constructors, which supplies a\n  prefix to namespace URI mapping. This will create namespace\n  prefix declarations on these elements and these prefixes will show up\n  in XML serialization.\n\nBugs fixed\n----------\n\n* Killed yet another memory management related bug: trees created\n  using newDoc would not get a libxml2-level dictionary, which caused\n  problems when deallocating these documents later if they contained a\n  node that came from a document with a dictionary.\n\n* Moving namespaced elements between documents was problematic as\n  references to the original document would remain. This has been fixed\n  by applying xmlReconciliateNs() after each move operation.\n\n* Can pass None to 'dump()' without segfaults.\n\n* tostring() works properly for non-root elements as well.\n\n* Cleaned out the tostring() method so it should handle encoding\n  correctly.\n\n* Cleaned out the ElementTree.write() method so it should handle encoding\n  correctly. Writing directly to a file should also be faster, as there is no\n  need to go through a Python string in that case. Made sure the test cases\n  test both serializing to StringIO as well as serializing to a real file.\n\n0.6 (2005-05-14)\n================\n\nFeatures added\n--------------\n\n* Changed setup.py so that library_dirs is also guessed. This should\n  help with compilation on the Mac OS X platform, where otherwise the\n  wrong library (shipping with the OS) could be picked up.\n\n* Tweaked setup.py so that it picks up the version from version.txt.\n\nBugs fixed\n----------\n\n* Do the right thing when handling namespaced attributes.\n\n* fix bug where tostring() moved nodes into new documents. tostring()\n  had very nasty side-effects before this fix, sorry!\n\n0.5.1 (2005-04-09)\n==================\n\n* Python 2.2 compatibility fixes.\n\n* unicode fixes in Element() and Comment() as well as XML(); unicode\n  input wasn't properly being UTF-8 encoded.\n\n0.5 (2005-04-08)\n================\n\nInitial public release.\n", "lxml\n====\n\n.. meta::\n  :description: lxml - the most feature-rich and easy-to-use library for processing XML and HTML in the Python language\n  :keywords: Python XML, XML processing, HTML, lxml, simple XML, ElementTree, etree, lxml.etree, objectify, XML parsing, XML validation, XPath, XSLT\n\n.. class:: pagequote\n\n| `\u00bb lxml takes all the pain out of XML. \u00ab <https://mailman-mail5.webfaction.com/pipermail/lxml/20080131/019119.html>`_\n| Stephan Richter\n\n.. class:: eyecatcher\n\n     lxml is the most feature-rich\n     and easy-to-use library\n     for processing XML and HTML\n     in the Python language.\n\n.. \n   1  Introduction\n   2  Documentation\n   3  Download\n   4  Mailing list\n   5  Bug tracker\n   6  License\n   7  Old Versions\n\n\nIntroduction\n------------\n\nThe lxml XML toolkit is a Pythonic binding for the C libraries\nlibxml2_ and libxslt_.  It is unique in that it combines the speed and\nXML feature completeness of these libraries with the simplicity of a\nnative Python API, mostly compatible but superior to the well-known\nElementTree_ API.  The latest release works with all CPython versions\nfrom 2.7 to 3.9.  See the introduction_ for more information about\nbackground and goals of the lxml project.  Some common questions are\nanswered in the FAQ_.\n\n.. _libxml2: http://xmlsoft.org/\n.. _libxslt: http://xmlsoft.org/XSLT/\n\n.. _introduction: intro.html\n.. _FAQ:          FAQ.html\n\n\nDocumentation\n-------------\n\nThe complete lxml documentation is available for download as `PDF\ndocumentation`_.  The HTML documentation from this web site is part of\nthe normal `source download <#download>`_.\n\n* Tutorials:\n\n  * the `lxml.etree tutorial for XML processing`_\n\n  * John Shipman's tutorial on `Python XML processing with lxml`_\n\n  * Fredrik Lundh's `tutorial for ElementTree`_\n\n* ElementTree:\n\n  * `ElementTree API`_\n\n  * compatibility_ and differences of lxml.etree\n\n  * `ElementTree performance`_ characteristics and comparison\n\n* lxml.etree:\n\n  * `lxml.etree specific API`_ documentation\n\n  * the `generated API documentation`_ as a reference\n\n  * parsing_ and validating_ XML\n\n  * `XPath and XSLT`_ support\n\n  * Python `XPath extension functions`_ for XPath and XSLT\n\n  * `custom XML element classes`_ for custom XML APIs (see `EuroPython 2008 talk`_)\n\n  * a `SAX compliant API`_ for interfacing with other XML tools\n\n  * a `C-level API`_ for interfacing with external C/Cython modules\n\n* lxml.objectify:\n\n  * `lxml.objectify`_ API documentation\n\n  * a brief comparison of `objectify and etree`_\n\nlxml.etree follows the ElementTree_ API as much as possible, building\nit on top of the native libxml2 tree.  If you are new to ElementTree,\nstart with the `lxml.etree tutorial for XML processing`_.  See also the\nElementTree compatibility_ overview and the `ElementTree performance`_\npage comparing lxml to the original ElementTree_ and cElementTree_\nimplementations.\n\nRight after the `lxml.etree tutorial for XML processing`_ and the\nElementTree_ documentation, the next place to look is the `lxml.etree\nspecific API`_ documentation.  It describes how lxml extends the\nElementTree API to expose libxml2 and libxslt specific XML\nfunctionality, such as XPath_, `Relax NG`_, `XML Schema`_, XSLT_, and\n`c14n`_ (including `c14n 2.0`_).\nPython code can be called from XPath expressions and XSLT\nstylesheets through the use of `XPath extension functions`_.  lxml\nalso offers a `SAX compliant API`_, that works with the SAX support in\nthe standard library.\n\nThere is a separate module `lxml.objectify`_ that implements a data-binding\nAPI on top of lxml.etree.  See the `objectify and etree`_ FAQ entry for a\ncomparison.\n\nIn addition to the ElementTree API, lxml also features a sophisticated\nAPI for `custom XML element classes`_.  This is a simple way to write\narbitrary XML driven APIs on top of lxml.  lxml.etree also has a\n`C-level API`_ that can be used to efficiently extend lxml.etree in\nexternal C modules, including fast custom element class support.\n\n.. _ElementTree:  http://effbot.org/zone/element-index.htm\n.. _`ElementTree API`:  http://effbot.org/zone/element-index.htm#documentation\n.. _cElementTree: http://effbot.org/zone/celementtree.htm\n\n.. _`tutorial for ElementTree`: http://effbot.org/zone/element.htm\n.. _`lxml.etree tutorial for XML processing`: tutorial.html\n.. _`Python XML processing with lxml`: http://www.nmt.edu/tcc/help/pubs/pylxml/\n.. _`generated API documentation`:   api/index.html\n.. _`ElementTree performance`: performance.html\n.. _`compatibility`: compatibility.html\n.. _`lxml.etree specific API`: api.html\n.. _`parsing`: parsing.html\n.. _`validating`: validation.html\n.. _`XPath and XSLT`: xpathxslt.html\n.. _`XPath extension functions`: extensions.html\n.. _`custom XML element classes`: element_classes.html\n.. _`SAX compliant API`: sax.html\n.. _`C-level API`: capi.html\n.. _`lxml.objectify`: objectify.html\n.. _`objectify and etree`: FAQ.html#what-is-the-difference-between-lxml-etree-and-lxml-objectify\n.. _`EuroPython 2008 talk`: s5/lxml-ep2008.html\n\n.. _XPath: https://www.w3.org/TR/xpath/\n.. _`Relax NG`: https://relaxng.org/\n.. _`XML Schema`: https://www.w3.org/XML/Schema\n.. _`XSLT`: https://www.w3.org/TR/xslt\n.. _`c14n`: https://www.w3.org/TR/xml-c14n\n.. _`c14n 2.0`: https://www.w3.org/TR/xml-c14n2\n\n\nDownload\n--------\n\nThe best way to download lxml is to visit `lxml at the Python Package\nIndex <http://pypi.python.org/pypi/lxml/>`_ (PyPI).  It has the source\nthat compiles on various platforms.  The source distribution is signed\nwith `this key <pubkey.asc>`_.\n\nThe latest version is `lxml 4.6.2`_, released 2020-11-26\n(`changes for 4.6.2`_).  `Older versions <#old-versions>`_\nare listed below.\n\nPlease take a look at the\n`installation instructions <installation.html>`_ !\n\nThis complete web site (including the generated API documentation) is\npart of the source distribution, so if you want to download the\ndocumentation for offline use, take the source archive and copy the\n``doc/html`` directory out of the source tree, or use the\n`PDF documentation`_.\n\nThe latest `installable developer sources <https://github.com/lxml/lxml/archive/master.zip>`_\nare available from Github.  It's also possible to check out\nthe latest development version of lxml from Github directly, using a command\nlike this (assuming you use hg and have hg-git installed)::\n\n  hg clone git+ssh://git@github.com/lxml/lxml.git lxml\n\nAlternatively, if you use git, this should work as well::\n\n  git clone https://github.com/lxml/lxml.git lxml\n\nYou can browse the `source repository`_ and its history through\nthe web.  Please read `how to build lxml from source <build.html>`_\nfirst.  The `latest CHANGES`_ of the developer version are also\naccessible.  You can check there if a bug you found has been fixed\nor a feature you want has been implemented in the latest trunk version.\n\n.. _`source repository`: https://github.com/lxml/lxml/\n.. _`latest CHANGES`: https://github.com/lxml/lxml/blob/master/CHANGES.txt\n\n\nMailing list\n------------\n\nQuestions? Suggestions? Code to contribute? We have a `mailing list`_.\n\nYou can search the archive with Gmane_ or Google_.\n\n.. _`mailing list`: http://lxml.de/mailinglist/\n.. _Gmane: http://blog.gmane.org/gmane.comp.python.lxml.devel\n.. _Google: http://www.google.com/webhp?q=site:comments.gmane.org%2Fgmane.comp.python.lxml.devel+\n\n\nBug tracker\n-----------\n\nlxml uses the `launchpad bug tracker`_.  If you are sure you found a\nbug in lxml, please file a bug report there.  If you are not sure\nwhether some unexpected behaviour of lxml is a bug or not, please\ncheck the documentation and ask on the `mailing list`_ first.  Do not\nforget to search the archive (e.g. with Gmane_)!\n\n.. _`launchpad bug tracker`: https://launchpad.net/lxml/\n\n\nLicense\n-------\n\nThe lxml library is shipped under a `BSD license`_. libxml2 and libxslt2\nitself are shipped under the `MIT license`_. There should therefore be no\nobstacle to using lxml in your codebase.\n\n.. _`BSD license`: https://github.com/lxml/lxml/blob/master/doc/licenses/BSD.txt\n.. _`MIT license`: http://www.opensource.org/licenses/mit-license.html\n\n\nOld Versions\n------------\n\nSee the websites of lxml\n`4.5 <http://lxml.de/4.5/>`_,\n`4.4 <http://lxml.de/4.4/>`_,\n`4.3 <http://lxml.de/4.3/>`_,\n`4.2 <http://lxml.de/4.2/>`_,\n`4.1 <http://lxml.de/4.1/>`_,\n`4.0 <http://lxml.de/4.0/>`_,\n`3.8 <http://lxml.de/3.8/>`_,\n`3.7 <http://lxml.de/3.7/>`_,\n`3.6 <http://lxml.de/3.6/>`_,\n`3.5 <http://lxml.de/3.5/>`_,\n`3.4 <http://lxml.de/3.4/>`_,\n`3.3 <http://lxml.de/3.3/>`_,\n`3.2 <http://lxml.de/3.2/>`_,\n`3.1 <http://lxml.de/3.1/>`_,\n`3.0 <http://lxml.de/3.0/>`_,\n`2.3 <http://lxml.de/2.3/>`_,\n`2.2 <http://lxml.de/2.2/>`_,\n`2.1 <http://lxml.de/2.1/>`_,\n`2.0 <http://lxml.de/2.0/>`_,\n`1.3 <http://lxml.de/1.3/>`_\n\n..\n   and the `latest in-development version <http://lxml.de/dev/>`_.\n\n.. _`PDF documentation`: lxmldoc-4.6.2.pdf\n\n* `lxml 4.6.2`_, released 2020-11-26 (`changes for 4.6.2`_)\n\n* `lxml 4.6.1`_, released 2020-10-18 (`changes for 4.6.1`_)\n\n* `lxml 4.6.0`_, released 2020-10-17 (`changes for 4.6.0`_)\n\n* `lxml 4.5.2`_, released 2020-07-09 (`changes for 4.5.2`_)\n\n* `lxml 4.5.1`_, released 2020-05-19 (`changes for 4.5.1`_)\n\n* `lxml 4.5.0`_, released 2020-01-29 (`changes for 4.5.0`_)\n\n* `lxml 4.4.3`_, released 2020-01-28 (`changes for 4.4.3`_)\n\n* `lxml 4.4.2`_, released 2019-11-25 (`changes for 4.4.2`_)\n\n* `lxml 4.4.1`_, released 2019-08-11 (`changes for 4.4.1`_)\n\n* `lxml 4.4.0`_, released 2019-07-27 (`changes for 4.4.0`_)\n\n* `older releases <http://lxml.de/4.3/#old-versions>`_\n\n.. _`lxml 4.6.2`: /files/lxml-4.6.2.tgz\n.. _`lxml 4.6.1`: /files/lxml-4.6.1.tgz\n.. _`lxml 4.6.0`: /files/lxml-4.6.0.tgz\n.. _`lxml 4.5.2`: /files/lxml-4.5.2.tgz\n.. _`lxml 4.5.1`: /files/lxml-4.5.1.tgz\n.. _`lxml 4.5.0`: /files/lxml-4.5.0.tgz\n.. _`lxml 4.4.3`: /files/lxml-4.4.3.tgz\n.. _`lxml 4.4.2`: /files/lxml-4.4.2.tgz\n.. _`lxml 4.4.1`: /files/lxml-4.4.1.tgz\n.. _`lxml 4.4.0`: /files/lxml-4.4.0.tgz\n\n.. _`changes for 4.6.2`: /changes-4.6.2.html\n.. _`changes for 4.6.1`: /changes-4.6.1.html\n.. _`changes for 4.6.0`: /changes-4.6.0.html\n.. _`changes for 4.5.2`: /changes-4.5.2.html\n.. _`changes for 4.5.1`: /changes-4.5.1.html\n.. _`changes for 4.5.0`: /changes-4.5.0.html\n.. _`changes for 4.4.3`: /changes-4.4.3.html\n.. _`changes for 4.4.2`: /changes-4.4.2.html\n.. _`changes for 4.4.1`: /changes-4.4.1.html\n.. _`changes for 4.4.0`: /changes-4.4.0.html\n", "# this is a package\n\n__version__ = \"4.6.2\"\n\n\ndef get_include():\n    \"\"\"\n    Returns a list of header include paths (for lxml itself, libxml2\n    and libxslt) needed to compile C code against lxml if it was built\n    with statically linked libraries.\n    \"\"\"\n    import os\n    lxml_path = __path__[0]\n    include_path = os.path.join(lxml_path, 'includes')\n    includes = [include_path, lxml_path]\n\n    for name in os.listdir(include_path):\n        path = os.path.join(include_path, name)\n        if os.path.isdir(path):\n            includes.append(path)\n\n    return includes\n\n"], "fixing_code": ["==============\nlxml changelog\n==============\n\n4.6.3 (2021-03-21)\n==================\n\nBugs fixed\n----------\n\n* A vulnerability (CVE-2021-28957) was discovered in the HTML Cleaner by Kevin Chung,\n  which allowed JavaScript to pass through.  The cleaner now removes the HTML5\n  ``formaction`` attribute.\n\n\n4.6.2 (2020-11-26)\n==================\n\nBugs fixed\n----------\n\n* A vulnerability (CVE-2020-27783) was discovered in the HTML Cleaner by Yaniv Nizry,\n  which allowed JavaScript to pass through.  The cleaner now removes more sneaky\n  \"style\" content.\n\n\n4.6.1 (2020-10-18)\n==================\n\nBugs fixed\n----------\n\n* A vulnerability was discovered in the HTML Cleaner by Yaniv Nizry, which allowed\n  JavaScript to pass through.  The cleaner now removes more sneaky \"style\" content.\n\n\n4.6.0 (2020-10-17)\n==================\n\nFeatures added\n--------------\n\n* GH#310: ``lxml.html.InputGetter`` supports ``__len__()`` to count the number of input fields.\n  Patch by Aidan Woolley.\n\n* ``lxml.html.InputGetter`` has a new ``.items()`` method to ease processing all input fields.\n\n* ``lxml.html.InputGetter.keys()`` now returns the field names in document order.\n\n* GH-309: The API documentation is now generated using ``sphinx-apidoc``.\n  Patch by Chris Mayo.\n\nBugs fixed\n----------\n\n* LP#1869455: C14N 2.0 serialisation failed for unprefixed attributes\n  when a default namespace was defined.\n\n* ``TreeBuilder.close()`` raised ``AssertionError`` in some error cases where it\n  should have raised ``XMLSyntaxError``.  It now raises a combined exception to\n  keep up backwards compatibility, while switching to ``XMLSyntaxError`` as an\n  interface.\n\n\n4.5.2 (2020-07-09)\n==================\n\nBugs fixed\n----------\n\n* ``Cleaner()`` now validates that only known configuration options can be set.\n\n* LP#1882606: ``Cleaner.clean_html()`` discarded comments and PIs regardless of the\n  corresponding configuration option, if ``remove_unknown_tags`` was set.\n\n* LP#1880251: Instead of globally overwriting the document loader in libxml2, lxml now\n  sets it per parser run, which improves the interoperability with other users of libxml2\n  such as libxmlsec.\n\n* LP#1881960: Fix build in CPython 3.10 by using Cython 0.29.21.\n\n* The setup options \"--with-xml2-config\" and \"--with-xslt-config\" were accidentally renamed\n  to \"--xml2-config\" and \"--xslt-config\" in 4.5.1 and are now available again.\n\n\n4.5.1 (2020-05-19)\n==================\n\nBugs fixed\n----------\n\n* LP#1570388: Fix failures when serialising documents larger than 2GB in some cases.\n\n* LP#1865141, GH#298: ``QName`` values were not accepted by the ``el.iter()`` method.\n  Patch by xmo-odoo.\n\n* LP#1863413, GH#297: The build failed to detect libraries on Linux that are only\n  configured via pkg-config.\n  Patch by Hugh McMaster.\n\n\n4.5.0 (2020-01-29)\n==================\n\nFeatures added\n--------------\n\n* A new function ``indent()`` was added to insert tail whitespace for pretty-printing\n  an XML tree.\n\nBugs fixed\n----------\n\n* LP#1857794: Tail text of nodes that get removed from a document using item\n  deletion disappeared silently instead of sticking with the node that was removed.\n\nOther changes\n-------------\n\n* MacOS builds are 64-bit-only by default.\n  Set CFLAGS and LDFLAGS explicitly to override it.\n\n* Linux/MacOS Binary wheels now use libxml2 2.9.10 and libxslt 1.1.34.\n\n* LP#1840234: The package version number is now available as ``lxml.__version__``.\n\n\n4.4.3 (2020-01-28)\n==================\n\nBugs fixed\n----------\n\n* LP#1844674: ``itertext()`` was missing tail text of comments and PIs since 4.4.0.\n\n\n4.4.2 (2019-11-25)\n==================\n\nBugs fixed\n----------\n\n* LP#1835708: ``ElementInclude`` incorrectly rejected repeated non-recursive\n  includes as recursive.\n  Patch by Rainer Hausdorf.\n\n\n4.4.1 (2019-08-11)\n==================\n\nBugs fixed\n----------\n\n* LP#1838252: The order of an OrderedDict was lost in 4.4.0 when passing it as\n  attrib mapping during element creation.\n\n* LP#1838521: The package metadata now lists the supported Python versions.\n\n\n4.4.0 (2019-07-27)\n==================\n\nFeatures added\n--------------\n\n* ``Element.clear()`` accepts a new keyword argument ``keep_tail=True`` to clear\n  everything but the tail text.  This is helpful in some document-style use cases\n  and for clearing the current element in ``iterparse()`` and pull parsing.\n\n* When creating attributes or namespaces from a dict in Python 3.6+, lxml now\n  preserves the original insertion order of that dict, instead of always sorting\n  the items by name.  A similar change was made for ElementTree in CPython 3.8.\n  See https://bugs.python.org/issue34160\n\n* Integer elements in ``lxml.objectify`` implement the ``__index__()`` special method.\n\n* GH#269: Read-only elements in XSLT were missing the ``nsmap`` property.\n  Original patch by Jan Pazdziora.\n\n* ElementInclude can now restrict the maximum inclusion depth via a ``max_depth``\n  argument to prevent content explosion.  It is limited to 6 by default.\n\n* The ``target`` object of the XMLParser can have ``start_ns()`` and ``end_ns()``\n  callback methods to listen to namespace declarations.\n\n* The ``TreeBuilder`` has new arguments ``comment_factory`` and ``pi_factory`` to\n  pass factories for creating comments and processing instructions, as well as\n  flag arguments ``insert_comments`` and ``insert_pis`` to discard them from the\n  tree when set to false.\n\n* A `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ implementation was added as\n  ``etree.canonicalize()``, a corresponding ``C14NWriterTarget`` class, and\n  a ``c14n2`` serialisation method.\n\nBugs fixed\n----------\n\n* When writing to file paths that contain the URL escape character '%', the file\n  path could wrongly be mangled by URL unescaping and thus write to a different\n  file or directory.  Code that writes to file paths that are provided by untrusted\n  sources, but that must work with previous versions of lxml, should best either\n  reject paths that contain '%' characters, or otherwise make sure that the path\n  does not contain maliciously injected '%XX' URL hex escapes for paths like '../'.\n\n* Assigning to Element child slices with negative step could insert the slice at\n  the wrong position, starting too far on the left.\n\n* Assigning to Element child slices with overly large step size could take very\n  long, regardless of the length of the actual slice.\n\n* Assigning to Element child slices of the wrong size could sometimes fail to\n  raise a ValueError (like a list assignment would) and instead assign outside\n  of the original slice bounds or leave parts of it unreplaced.\n\n* The ``comment`` and ``pi`` events in ``iterwalk()`` were never triggered, and\n  instead, comments and processing instructions in the tree were reported as\n  ``start`` elements.  Also, when walking an ElementTree (as opposed to its root\n  element), comments and PIs outside of the root element are now reported.\n\n* LP#1827833: The RelaxNG compact syntax support was broken with recent versions\n  of ``rnc2rng``.\n\n* LP#1758553: The HTML elements ``source`` and ``track`` were added to the list\n  of empty tags in ``lxml.html.defs``.\n\n* Registering a prefix other than \"xml\" for the XML namespace is now rejected.\n\n* Failing to write XSLT output to a file could raise a misleading exception.\n  It now raises ``IOError``.\n\nOther changes\n-------------\n\n* Support for Python 3.4 was removed.\n\n* When using ``Element.find*()`` with prefix-namespace mappings, the empty string\n  is now accepted to define a default namespace, in addition to the previously\n  supported ``None`` prefix.  Empty strings are more convenient since they keep\n  all prefix keys in a namespace dict strings, which simplifies sorting etc.\n\n* The ``ElementTree.write_c14n()`` method has been deprecated in favour of the\n  long preferred ``ElementTree.write(f, method=\"c14n\")``.  It will be removed\n  in a future release.\n\n\n4.3.5 (2019-07-27)\n==================\n\n* Rebuilt with Cython 0.29.13 to support Python 3.8.\n\n\n4.3.4 (2019-06-10)\n==================\n\n* Rebuilt with Cython 0.29.10 to support Python 3.8.\n\n\n4.3.3 (2019-03-26)\n==================\n\nBugs fixed\n----------\n\n* Fix leak of output buffer and unclosed files in ``_XSLTResultTree.write_output()``.\n\n\n4.3.2 (2019-02-29)\n==================\n\nBugs fixed\n----------\n\n* Crash in 4.3.1 when appending a child subtree with certain text nodes.\n\nOther changes\n-------------\n\n* Built with Cython 0.29.6.\n\n\n4.3.1 (2019-02-08)\n==================\n\nBugs fixed\n----------\n\n* LP#1814522: Crash when appending a child subtree that contains unsubstituted\n  entity references.\n\nOther changes\n-------------\n\n* Built with Cython 0.29.5.\n\n\n4.3.0 (2019-01-04)\n==================\n\nFeatures added\n--------------\n\n* The module ``lxml.sax`` is compiled using Cython in order to speed it up.\n\n* GH#267: ``lxml.sax.ElementTreeProducer`` now preserves the namespace prefixes.\n  If two prefixes point to the same URI, the first prefix in alphabetical order\n  is used.  Patch by Lennart Regebro.\n\n* Updated ISO-Schematron implementation to 2013 version (now MIT licensed)\n  and the corresponding schema to the 2016 version (with optional \"properties\").\n\nOther changes\n-------------\n\n* GH#270, GH#271: Support for Python 2.6 and 3.3 was removed.\n  Patch by hugovk.\n\n* The minimum dependency versions were raised to libxml2 2.9.2 and libxslt 1.1.27,\n  which were released in 2014 and 2012 respectively.\n\n* Built with Cython 0.29.2.\n\n\n4.2.6 (2019-01-02)\n==================\n\nBugs fixed\n----------\n\n* LP#1799755: Fix a DeprecationWarning in Py3.7+.\n\n* Import warnings in Python 3.6+ were resolved.\n\n\n4.2.5 (2018-09-09)\n==================\n\nBugs fixed\n----------\n\n* Javascript URLs that used URL escaping were not removed by the HTML cleaner.\n  Security problem found by Omar Eissa.  (CVE-2018-19787)\n\n\n4.2.4 (2018-08-03)\n==================\n\nFeatures added\n--------------\n\n* GH#259: Allow using ``pkg-config`` for build configuration.\n  Patch by Patrick Griffis.\n\nBugs fixed\n----------\n\n* LP#1773749, GH#268: Crash when moving an element to another document with\n  ``Element.insert()``.\n  Patch by Alexander Weggerle.\n\n\n4.2.3 (2018-06-27)\n==================\n\nBugs fixed\n----------\n\n* Reverted GH#265: lxml links against zlib as a shared library again.\n\n\n4.2.2 (2018-06-22)\n==================\n\nBugs fixed\n----------\n\n* GH#266: Fix sporadic crash during GC when parse-time schema validation is used\n  and the parser participates in a reference cycle.\n  Original patch by Julien Greard.\n\n* GH#265: lxml no longer links against zlib as a shared library, only on static builds.\n  Patch by Nehal J Wani.\n\n\n4.2.1 (2018-03-21)\n==================\n\nBugs fixed\n----------\n\n* LP#1755825: ``iterwalk()`` failed to return the 'start' event for the initial\n  element if a tag selector is used.\n\n* LP#1756314: Failure to import 4.2.0 into PyPy due to a missing library symbol.\n\n* LP#1727864, GH#258: Add \"-isysroot\" linker option on MacOS as needed by XCode 9.\n\n\n4.2.0 (2018-03-13)\n==================\n\nFeatures added\n--------------\n\n* GH#255: ``SelectElement.value`` returns more standard-compliant and\n  browser-like defaults for non-multi-selects.  If no option is selected, the\n  value of the first option is returned (instead of None).  If multiple options\n  are selected, the value of the last one is returned (instead of that of the\n  first one).  If no options are present (not standard-compliant)\n  ``SelectElement.value`` still returns ``None``.\n\n* GH#261: The ``HTMLParser()`` now supports the ``huge_tree`` option.\n  Patch by stranac.\n\nBugs fixed\n----------\n\n* LP#1551797: Some XSLT messages were not captured by the transform error log.\n\n* LP#1737825: Crash at shutdown after an interrupted iterparse run with XMLSchema\n  validation.\n\nOther changes\n-------------\n\n\n4.1.1 (2017-11-04)\n==================\n\n* Rebuild with Cython 0.27.3 to improve support for Py3.7.\n\n\n4.1.0 (2017-10-13)\n==================\n\nFeatures added\n--------------\n\n* ElementPath supports text predicates for current node, like \"[.='text']\".\n\n* ElementPath allows spaces in predicates.\n\n* Custom Element classes and XPath functions can now be registered with a\n  decorator rather than explicit dict assignments.\n\n* Static Linux wheels are now built with link time optimisation (LTO) enabled.\n  This should have a beneficial impact on the overall performance by providing\n  a tighter compiler integration between lxml and libxml2/libxslt.\n\nBugs fixed\n----------\n\n* LP#1722776: Requesting non-Element objects like comments from a document with\n  ``PythonElementClassLookup`` could fail with a TypeError.\n\n\n4.0.0 (2017-09-17)\n==================\n\nFeatures added\n--------------\n\n* The ElementPath implementation is now compiled using Cython,\n  which speeds up the ``.find*()`` methods quite significantly.\n\n* The modules ``lxml.builder``, ``lxml.html.diff`` and ``lxml.html.clean``\n  are also compiled using Cython in order to speed them up.\n\n* ``xmlfile()`` supports async coroutines using ``async with`` and ``await``.\n\n* ``iterwalk()`` has a new method ``skip_subtree()`` that prevents walking into\n  the descendants of the current element.\n\n* ``RelaxNG.from_rnc_string()`` accepts a ``base_url`` argument to\n  allow relative resource lookups.\n\n* The XSLT result object has a new method ``.write_output(file)`` that serialises\n  output data into a file according to the ``<xsl:output>`` configuration.\n\nBugs fixed\n----------\n\n* GH#251: HTML comments were handled incorrectly by the soupparser.\n  Patch by mozbugbox.\n\n* LP#1654544: The html5parser no longer passes the ``useChardet`` option\n  if the input is a Unicode string, unless explicitly requested.  When parsing\n  files, the default is to enable it when a URL or file path is passed (because\n  the file is then opened in binary mode), and to disable it when reading from\n  a file(-like) object.\n\n  Note: This is a backwards incompatible change of the default configuration.\n  If your code parses byte strings/streams and depends on character detection,\n  please pass the option ``guess_charset=True`` explicitly, which already worked\n  in older lxml versions.\n\n* LP#1703810: ``etree.fromstring()`` failed to parse UTF-32 data with BOM.\n\n* LP#1526522: Some RelaxNG errors were not reported in the error log.\n\n* LP#1567526: Empty and plain text input raised a TypeError in soupparser.\n\n* LP#1710429: Uninitialised variable usage in HTML diff.\n\n* LP#1415643: The closing tags context manager in ``xmlfile()`` could continue\n  to output end tags even after writing failed with an exception.\n\n* LP#1465357: ``xmlfile.write()`` now accepts and ignores None as input argument.\n\n* Compilation under Py3.7-pre failed due to a modified function signature.\n\nOther changes\n-------------\n\n* The main module source files were renamed from ``lxml.*.pyx`` to plain\n  ``*.pyx`` (e.g. ``etree.pyx``) to simplify their handling in the build\n  process.  Care was taken to keep the old header files as fallbacks for\n  code that compiles against the public C-API of lxml, but it might still\n  be worth validating that third-party code does not notice this change.\n\n\n3.8.0 (2017-06-03)\n==================\n\nFeatures added\n--------------\n\n* ``ElementTree.write()`` has a new option ``doctype`` that writes out a\n  doctype string before the serialisation, in the same way as ``tostring()``.\n\n* GH#220: ``xmlfile`` allows switching output methods at an element level.\n  Patch by Burak Arslan.\n\n* LP#1595781, GH#240: added a PyCapsule Python API and C-level API for\n  passing externally generated libxml2 documents into lxml.\n\n* GH#244: error log entries have a new property ``path`` with an XPath\n  expression (if known, None otherwise) that points to the tree element\n  responsible for the error. Patch by Bob Kline.\n\n* The namespace prefix mapping that can be used in ElementPath now injects\n  a default namespace when passing a None prefix.\n\nBugs fixed\n----------\n\n* GH#238: Character escapes were not hex-encoded in the ``xmlfile`` serialiser.\n  Patch by matejcik.\n\n* GH#229: fix for externally created XML documents.  Patch by Theodore Dubois.\n\n* LP#1665241, GH#228: Form data handling in lxml.html no longer strips the\n  option values specified in form attributes but only the text values.\n  Patch by Ashish Kulkarni.\n\n* LP#1551797: revert previous fix for XSLT error logging as it breaks\n  multi-threaded XSLT processing.\n\n* LP#1673355, GH#233: ``fromstring()`` html5parser failed to parse byte strings.\n\nOther changes\n-------------\n\n* The previously undocumented ``docstring`` option in ``ElementTree.write()``\n  produces a deprecation warning and will eventually be removed.\n\n\n3.7.4 (2017-??-??)\n==================\n\nBugs fixed\n----------\n\n* LP#1551797: revert previous fix for XSLT error logging as it breaks\n  multi-threaded XSLT processing.\n\n* LP#1673355, GH#233: ``fromstring()`` html5parser failed to parse byte strings.\n\n\n3.7.3 (2017-02-18)\n==================\n\nBugs fixed\n----------\n\n* GH#218 was ineffective in Python 3.\n\n* GH#222: ``lxml.html.submit_form()`` failed in Python 3.\n  Patch by Jakub Wilk.\n\n\n3.7.2 (2017-01-08)\n==================\n\n* GH#220: ``xmlfile`` allows switching output methods at an element level.\n  Patch by Burak Arslan.\n\nBugs fixed\n----------\n\n* Work around installation problems in recent Python 2.7 versions\n  due to FTP download failures.\n\n* GH#219: ``xmlfile.element()`` was not properly quoting attribute values.\n  Patch by Burak Arslan.\n\n* GH#218: ``xmlfile.element()`` was not properly escaping text content of\n  script/style tags.  Patch by Burak Arslan.\n\n\n3.7.1 (2016-12-23)\n==================\n\n* No source changes, issued only to solve problems with the\n  binary packages released for 3.7.0.\n\n\n3.7.0 (2016-12-10)\n==================\n\nFeatures added\n--------------\n\n* GH#217: ``XMLSyntaxError`` now behaves more like its ``SyntaxError``\n  baseclass.  Patch by Philipp A.\n\n* GH#216: ``HTMLParser()`` now supports the same ``collect_ids`` parameter\n  as ``XMLParser()``.  Patch by Burak Arslan.\n\n* GH#210: Allow specifying a serialisation method in ``xmlfile.write()``.\n  Patch by Burak Arslan.\n\n* GH#203: New option ``default_doctype`` in ``HTMLParser`` that allows\n  disabling the automatic doctype creation.  Patch by Shadab Zafar.\n\n* GH#201: Calling the method ``.set('attrname')`` without value argument\n  (or ``None``) on HTML elements creates an attribute without value that\n  serialises like ``<div attrname></div>``.  Patch by Daniel Holth.\n\n* GH#197: Ignore form input fields in ``form_values()`` when they are\n  marked as ``disabled`` in HTML.  Patch by Kristian Klemon.\n\nBugs fixed\n----------\n\n* GH#206: File name and line number were missing from XSLT error messages.\n  Patch by Marcus Brinkmann.\n\nOther changes\n-------------\n\n* Log entries no longer allow anything but plain string objects as message text\n  and file name.\n\n* ``zlib`` is included in the list of statically built libraries.\n\n\n3.6.4 (2016-08-20)\n==================\n\n* GH#204, LP#1614693: build fix for MacOS-X.\n\n\n3.6.3 (2016-08-18)\n==================\n\n* LP#1614603: change linker flags to build multi-linux wheels\n\n\n3.6.2 (2016-08-18)\n==================\n\n* LP#1614603: release without source changes to provide cleanly built Linux wheels\n\n\n3.6.1 (2016-07-24)\n==================\n\nFeatures added\n--------------\n\n* GH#180: Separate option ``inline_style`` for Cleaner that only removes ``style``\n  attributes instead of all styles.  Patch by Christian Pedersen.\n\n* GH#196: Windows build support for Python 3.5.  Contribution by Maximilian Hils.\n\nBugs fixed\n----------\n\n* GH#199: Exclude ``file`` fields from ``FormElement.form_values`` (as browsers do).\n  Patch by Tomas Divis.\n\n* GH#198, LP#1568167: Try to provide base URL from ``Resolver.resolve_string()``.\n  Patch by Michael van Tellingen.\n\n* GH#191: More accurate float serialisation in ``objectify.FloatElement``.\n  Patch by Holger Joukl.\n\n* LP#1551797: Repair XSLT error logging. Patch by Marcus Brinkmann.\n\n\n3.6.0 (2016-03-17)\n==================\n\nFeatures added\n--------------\n\n* GH#187: Now supports (only) version 5.x and later of PyPy.\n  Patch by Armin Rigo.\n\n* GH#181: Direct support for ``.rnc`` files in `RelaxNG()` if ``rnc2rng``\n  is installed.  Patch by Dirkjan Ochtman.\n\nBugs fixed\n----------\n\n* GH#189: Static builds honour FTP proxy configurations when downloading\n  the external libs.  Patch by Youhei Sakurai.\n\n* GH#186: Soupparser failed to process entities in Python 3.x.\n  Patch by Duncan Morris.\n\n* GH#185: Rare encoding related ``TypeError`` on import was fixed.\n  Patch by Petr Demin.\n\n\n3.5.0 (2015-11-13)\n==================\n\nBugs fixed\n----------\n\n* Unicode string results failed XPath queries in PyPy.\n\n* LP#1497051: HTML target parser failed to terminate on exceptions\n  and continued parsing instead.\n\n* Deprecated API usage in doctestcompare.\n\n\n3.5.0b1 (2015-09-18)\n====================\n\nFeatures added\n--------------\n\n* ``cleanup_namespaces()`` accepts a new argument ``keep_ns_prefixes``\n  that does not remove definitions of the provided prefix-namespace\n  mapping from the tree.\n\n* ``cleanup_namespaces()`` accepts a new argument ``top_nsmap`` that\n  moves definitions of the provided prefix-namespace mapping to the\n  top of the tree.\n\n* LP#1490451: ``Element`` objects gained a ``cssselect()`` method as\n  known from ``lxml.html``.  Patch by Simon Sapin.\n\n* API functions and methods behave and look more like Python functions,\n  which allows introspection on them etc.  One side effect to be aware of\n  is that the functions now bind as methods when assigned to a class\n  variable.  A quick fix is to wrap them in ``staticmethod()`` (as for\n  normal Python functions).\n\n* ISO-Schematron support gained an option ``error_finder`` that allows\n  passing a filter function for picking validation errors from reports.\n\n* LP#1243600: Elements in ``lxml.html`` gained a ``classes`` property\n  that provides a set-like interface to the ``class`` attribute.\n  Original patch by masklinn.\n\n* LP#1341964: The soupparser now handles DOCTYPE declarations, comments\n  and processing instructions outside of the root element.\n  Patch by Olli Pottonen.\n\n* LP#1421512: The ``docinfo`` of a tree was made editable to allow\n  setting and removing the public ID and system ID of the DOCTYPE.\n  Patch by Olli Pottonen.\n\n* LP#1442427: More work-arounds for quirks and bugs in pypy and pypy3.\n\n* ``lxml.html.soupparser`` now uses BeautifulSoup version 4 instead\n  of version 3 if available.\n\nBugs fixed\n----------\n\n* Memory errors that occur during tree adaptations (e.g. moving subtrees\n  to foreign documents) could leave the tree in a crash prone state.\n\n* Calling ``process_children()`` in an XSLT extension element without\n  an ``output_parent`` argument failed with a ``TypeError``.\n  Fix by Jens Tr\u00f6ger.\n\n* GH#162: Image data in HTML ``data`` URLs is considered safe and\n  no longer removed by ``lxml.html.clean`` JavaScript cleaner.\n\n* GH#166: Static build could link libraries in wrong order.\n\n* GH#172: Rely a bit more on libxml2 for encoding detection rather than\n  rolling our own in some cases.  Patch by Olli Pottonen.\n\n* GH#159: Validity checks for names and string content were tightened\n  to detect the use of illegal characters early.  Patch by Olli Pottonen.\n\n* LP#1421921: Comments/PIs before the DOCTYPE declaration were not\n  serialised.  Patch by Olli Pottonen.\n\n* LP#659367: Some HTML DOCTYPE declarations were not serialised.\n  Patch by Olli Pottonen.\n\n* LP#1238503: lxml.doctestcompare is now consistent with stdlib's doctest\n  in how it uses ``+`` and ``-`` to refer to unexpected and missing output.\n\n* Empty prefixes are explicitly rejected when a namespace mapping is used\n  with ElementPath to avoid hiding bugs in user code.\n\n* Several problems with PyPy were fixed by switching to Cython 0.23.\n\n\n3.4.4 (2015-04-25)\n==================\n\nBugs fixed\n----------\n\n* An ElementTree compatibility test added in lxml 3.4.3 that failed in\n  Python 3.4+ was removed again.\n\n\n3.4.3 (2015-04-15)\n==================\n\nBugs fixed\n----------\n\n* Expression cache in ElementPath was ignored.  Fix by Changaco.\n\n* LP#1426868: Passing a default namespace and a prefixed namespace mapping\n  as nsmap into ``xmlfile.element()`` raised a ``TypeError``.\n\n* LP#1421927: DOCTYPE system URLs were incorrectly quoted when containing\n  double quotes.  Patch by Olli Pottonen.\n\n* LP#1419354: meta-redirect URLs were incorrectly processed by\n  ``iterlinks()`` if preceded by whitespace.\n\n\n3.4.2 (2015-02-07)\n==================\n\nBugs fixed\n----------\n\n* LP#1415907: Crash when creating an XMLSchema from a non-root element\n  of an XML document.\n\n* LP#1369362: HTML cleaning failed when hitting processing instructions\n  with pseudo-attributes.\n\n* ``CDATA()`` wrapped content was rejected for tail text.\n\n* CDATA sections were not serialised as tail text of the top-level element.\n\n\n3.4.1 (2014-11-20)\n==================\n\nFeatures added\n--------------\n\n* New ``htmlfile`` HTML generator to accompany the incremental ``xmlfile``\n  serialisation API.  Patch by Burak Arslan.\n\nBugs fixed\n----------\n\n* ``lxml.sax.ElementTreeContentHandler`` did not initialise its superclass.\n\n\n3.4.0 (2014-09-10)\n==================\n\nFeatures added\n--------------\n\n* ``xmlfile(buffered=False)`` disables output buffering and flushes the\n  content after each API operation (starting/ending element blocks or writes).\n  A new method ``xf.flush()`` can alternatively be used to explicitly flush\n  the output.\n\n* ``lxml.html.document_fromstring`` has a new option ``ensure_head_body=True``\n  which will add an empty head and/or body element to the result document if\n  missing.\n\n* ``lxml.html.iterlinks`` now returns links inside meta refresh tags.\n\n* New ``XMLParser`` option ``collect_ids=False`` to disable ID hash table\n  creation.  This can substantially speed up parsing of documents with many\n  different IDs that are not used.\n\n* The parser uses per-document hash tables for XML IDs.  This reduces the\n  load of the global parser dict and speeds up parsing for documents with\n  many different IDs.\n\n* ``ElementTree.getelementpath(element)`` returns a structural ElementPath\n  expression for the given element, which can be used for lookups later.\n\n* ``xmlfile()`` accepts a new argument ``close=True`` to close file(-like)\n  objects after writing to them.  Before, ``xmlfile()`` only closed the file\n  if it had opened it internally.\n\n* Allow \"bytearray\" type for ASCII text input.\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n* LP#400588: decoding errors have become hard errors even in recovery mode.\n  Previously, they could lead to an internal tree representation in a mixed\n  encoding state, which lead to very late errors or even silently incorrect\n  behaviour during tree traversal or serialisation.\n\n* Requires Python 2.6, 2.7, 3.2 or later. No longer supports\n  Python 2.4, 2.5 and 3.1, use lxml 3.3.x for those.\n\n* Requires libxml2 2.7.0 or later and libxslt 1.1.23 or later,\n  use lxml 3.3.x with older versions.\n\n\n3.3.6 (2014-08-28)\n==================\n\nBugs fixed\n----------\n\n* Prevent tree cycle creation when adding Elements as siblings.\n\n* LP#1361948: crash when deallocating Element siblings without parent.\n\n* LP#1354652: crash when traversing internally loaded documents in XSLT\n  extension functions.\n\n\n3.3.5 (2014-04-18)\n==================\n\nBugs fixed\n----------\n\n* HTML cleaning could fail to strip javascript links that mix control\n  characters into the link scheme.\n\n\n3.3.4 (2014-04-03)\n==================\n\nFeatures added\n--------------\n\n* Source line numbers above 65535 are available on Elements when\n  using libxml2 2.9 or later.\n\nBugs fixed\n----------\n\n* ``lxml.html.fragment_fromstring()`` failed for bytes input in Py3.\n\nOther changes\n-------------\n\n\n3.3.3 (2014-03-04)\n==================\n\nBugs fixed\n----------\n\n* LP#1287118: Crash when using Element subtypes with ``__slots__``.\n\nOther changes\n-------------\n\n* The internal classes ``_LogEntry`` and ``_Attrib`` can no longer be\n  subclassed from Python code.\n\n\n3.3.2 (2014-02-26)\n==================\n\nBugs fixed\n----------\n\n* The properties ``resolvers`` and ``version``, as well as the methods\n  ``set_element_class_lookup()`` and ``makeelement()``, were lost from\n  ``iterparse`` objects in 3.3.0.\n\n* LP#1222132: instances of ``XMLSchema``, ``Schematron`` and ``RelaxNG``\n  did not clear their local ``error_log`` before running a validation.\n\n* LP#1238500: lxml.doctestcompare mixed up \"expected\" and \"actual\" in\n  attribute values.\n\n* Some file I/O tests were failing in MS-Windows due to non-portable temp\n  file usage.  Initial patch by Gabi Davar.\n\n* LP#910014: duplicate IDs in a document were not reported by DTD validation.\n\n* LP#1185332: ``tostring(method=\"html\")`` did not use HTML serialisation\n  semantics for trailing tail text.  Initial patch by Sylvain Viollon.\n\n* LP#1281139: ``.attrib`` value of Comments lost its mutation methods\n  in 3.3.0.  Even though it is empty and immutable, it should still\n  provide the same interface as that returned for Elements.\n\n\n3.3.1 (2014-02-12)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1014290: HTML documents parsed with ``parser.feed()`` failed to find\n  elements during tag iteration.\n\n* LP#1273709: Building in PyPy failed due to missing support for\n  ``PyUnicode_Compare()`` and ``PyByteArray_*()`` in PyPy's C-API.\n\n* LP#1274413: Compilation in MSVC failed due to missing \"stdint.h\" standard\n  header file.\n\n* LP#1274118: iterparse() failed to parse BOM prefixed files.\n\nOther changes\n-------------\n\n\n3.3.0 (2014-01-26)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* The heuristic that distinguishes file paths from URLs was tightened\n  to produce less false negatives.\n\nOther changes\n-------------\n\n\n3.3.0beta5 (2014-01-18)\n=======================\n\nFeatures added\n--------------\n\n* The PEP 393 unicode parsing support gained a fallback for wchar strings\n  which might still be somewhat common on Windows systems.\n\nBugs fixed\n----------\n\n* Several error handling problems were fixed throughout the code base that\n  could previously lead to exceptions being silently swallowed or not\n  properly reported.\n\n* The C-API function ``appendChild()`` is now deprecated as it does not\n  propagate exceptions (its return type is ``void``).  The new function\n  ``appendChildToElement()`` was added as a safe replacement.\n\n* Passing a string into ``fromstringlist()`` raises an exception instead of\n  parsing the string character by character.\n\nOther changes\n-------------\n\n* Document cleanup code was simplified using the new GC features in\n  Cython 0.20.\n\n\n3.3.0beta4 (2014-01-12)\n=======================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* The (empty) value returned by the ``attrib`` property of Entity and Comment\n  objects was mutable.\n\n* Element class lookup wasn't available for the new pull parsers or when using\n  a custom parser target.\n\n* Setting Element attributes on instantiation with both the ``attrib`` argument\n  and keyword arguments could modify the mapping passed as ``attrib``.\n\n* LP#1266171: DTDs instantiated from internal/external subsets (i.e. through\n  the docinfo property) lost their attribute declarations.\n\nOther changes\n-------------\n\n* Built with Cython 0.20pre (gitrev 012ae82eb) to prepare support for\n  Python 3.4.\n\n\n3.3.0beta3 (2014-01-02)\n=======================\n\nFeatures added\n--------------\n\n* Unicode string parsing was optimised for Python 3.3 (PEP 393).\n\nBugs fixed\n----------\n\n* HTML parsing of Unicode strings could misdecode the input on some platforms.\n\n* Crash in xmlfile() when closing open elements out of order in an error case.\n\nOther changes\n-------------\n\n\n3.3.0beta2 (2013-12-20)\n=======================\n\nFeatures added\n--------------\n\n* ``iterparse()`` supports the ``recover`` option.\n\nBugs fixed\n----------\n\n* Crash in ``iterparse()`` for HTML parsing.\n\n* Crash in target parsing with attributes.\n\nOther changes\n-------------\n\n* The safety check in the read-only tree implementation (e.g. used by\n  ``PythonElementClassLookup``) raises a more appropriate ``ReferenceError``\n  for illegal access after tree disposal instead of an ``AssertionError``.\n  This should only impact test code that specifically checks the original\n  behaviour.\n\n\n3.3.0beta1 (2013-12-12)\n=======================\n\nFeatures added\n--------------\n\n* New option ``handle_failures`` in ``make_links_absolute()`` and\n  ``resolve_base_href()`` (lxml.html) that enables ignoring or\n  discarding links that fail to parse as URLs.\n\n* New parser classes ``XMLPullParser`` and ``HTMLPullParser`` for\n  incremental parsing, as implemented for ElementTree in Python 3.4.\n\n* ``iterparse()`` enables recovery mode by default for HTML parsing\n  (``html=True``).\n\nBugs fixed\n----------\n\n* LP#1255132: crash when trying to run validation over non-Element (e.g.\n  comment or PI).\n\n* Error messages in the log and in exception messages that originated\n  from libxml2 could accidentally be picked up from preceding warnings\n  instead of the actual error.\n\n* The ``ElementMaker`` in lxml.objectify did not accept a dict as\n  argument for adding attributes to the element it's building. This\n  works as in lxml.builder now.\n\n* LP#1228881: ``repr(XSLTAccessControl)`` failed in Python 3.\n\n* Raise ``ValueError`` when trying to append an Element to itself or\n  to one of its own descendants, instead of running into an infinite\n  loop.\n\n* LP#1206077: htmldiff discarded whitespace from the output.\n\n* Compressed plain-text serialisation to file-like objects was broken.\n\n* lxml.html.formfill: Fix textarea form filling.\n  The textarea used to be cleared before the new content was set,\n  which removed the name attribute.\n\n\nOther changes\n-------------\n\n* Some basic API classes use freelists internally for faster\n  instantiation.  This can speed up some ``iterparse()`` scenarios,\n  for example.\n\n* ``iterparse()`` was rewritten to use the new ``*PullParser``\n  classes internally instead of being a parser itself.\n\n\n3.2.5 (2014-01-02)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash in xmlfile() when closing open elements out of order in an error case.\n\n* Crash in target parsing with attributes.\n\n* LP#1255132: crash when trying to run validation over non-Element (e.g.\n  comment or PI).\n\nOther changes\n-------------\n\n\n3.2.4 (2013-11-07)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Memory leak when creating an XPath evaluator in a thread.\n\n* LP#1228881: ``repr(XSLTAccessControl)`` failed in Python 3.\n\n* Raise ``ValueError`` when trying to append an Element to itself or\n  to one of its own descendants.\n\n* LP#1206077: htmldiff discarded whitespace from the output.\n\n* Compressed plain-text serialisation to file-like objects was broken.\n\nOther changes\n-------------\n\n\n3.2.3 (2013-07-28)\n==================\n\nBugs fixed\n----------\n\n* Fix support for Python 2.4 which was lost in 3.2.2.\n\n\n3.2.2 (2013-07-28)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1185701: spurious XMLSyntaxError after finishing iterparse().\n\n* Crash in lxml.objectify during xsi annotation.\n\nOther changes\n-------------\n\n* Return values of user provided element class lookup methods are now\n  validated against the type of the XML node they represent to prevent\n  API class mismatches.\n\n\n3.2.1 (2013-05-11)\n==================\n\nFeatures added\n--------------\n\n* The methods ``apply_templates()`` and ``process_children()`` of XSLT\n  extension elements have gained two new boolean options ``elements_only``\n  and ``remove_blank_text`` that discard either all strings or whitespace-only\n  strings from the result list.\n\nBugs fixed\n----------\n\n* When moving Elements to another tree, the namespace cleanup mechanism\n  no longer drops namespace prefixes from attributes for which it finds\n  a default namespace declaration, to prevent them from appearing as\n  unnamespaced attributes after serialisation.\n\n* Returning non-type objects from a custom class lookup method could lead\n  to a crash.\n\n* Instantiating and using subtypes of Comments and ProcessingInstructions\n  crashed.\n\nOther changes\n-------------\n\n\n3.2.0 (2013-04-28)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#690319: Leading whitespace could change the behaviour of the string\n  parsing functions in ``lxml.html``.\n\n* LP#599318: The string parsing functions in ``lxml.html`` are more robust\n  in the face of uncommon HTML content like framesets or missing body tags.\n  Patch by Stefan Seelmann.\n\n* LP#712941: I/O errors while trying to access files with paths that contain\n  non-ASCII characters could raise ``UnicodeDecodeError`` instead of properly\n  reporting the ``IOError``.\n\n* LP#673205: Parsing from in-memory strings disabled network access in the\n  default parser and made subsequent attempts to parse from a URL fail.\n\n* LP#971754: lxml.html.clean appends 'nofollow' to 'rel' attributes instead\n  of overwriting the current value.\n\n* LP#715687: lxml.html.clean no longer discards scripts that are explicitly\n  allowed by the user provided whitelist.  Patch by Christine Koppelt.\n\nOther changes\n-------------\n\n\n3.1.2 (2013-04-12)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1136509: Passing attributes through the namespace-unaware API of\n  the sax bridge (i.e. the ``handler.startElement()`` method) failed\n  with a ``TypeError``.  Patch by Mike Bayer.\n\n* LP#1123074: Fix serialisation error in XSLT output when converting\n  the result tree to a Unicode string.\n\n* GH#105: Replace illegal usage of ``xmlBufLength()`` in libxml2 2.9.0\n  by properly exported API function ``xmlBufUse()``.\n\nOther changes\n-------------\n\n\n3.1.1 (2013-03-29)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1160386: Write access to ``lxml.html.FormElement.fields`` raised\n  an AttributeError in Py3.\n\n* Illegal memory access during cleanup in incremental xmlfile writer.\n\nOther changes\n-------------\n\n* The externally useless class ``lxml.etree._BaseParser`` was removed\n  from the module dict.\n\n\n3.1.0 (2013-02-10)\n==================\n\nFeatures added\n--------------\n\n* GH#89: lxml.html.clean allows overriding the set of attributes that it\n  considers 'safe'.  Patch by Francis Devereux.\n\nBugs fixed\n----------\n\n* LP#1104370: ``copy.copy(el.attrib)`` raised an exception.  It now returns\n  a copy of the attributes as a plain Python dict.\n\n* GH#95: When used with namespace prefixes, the  ``el.find*()`` methods\n  always used the first namespace mapping that was provided for each\n  path expression instead of using the one that was actually passed\n  in for the current run.\n\n* LP#1092521, GH#91: Fix undefined C symbol in Python runtimes compiled\n  without threading support.  Patch by Ulrich Seidl.\n\nOther changes\n-------------\n\n\n3.1beta1 (2012-12-21)\n=====================\n\nFeatures added\n--------------\n\n* New build-time option ``--with-unicode-strings`` for Python 2 that\n  makes the API always return Unicode strings for names and text\n  instead of byte strings for plain ASCII content.\n\n* New incremental XML file writing API ``etree.xmlfile()``.\n\n* E factory in lxml.objectify is callable to simplify the creation of\n  tags with non-identifier names without having to resort to getattr().\n\nBugs fixed\n----------\n\n* When starting from a non-namespaced element in lxml.objectify, searching\n  for a child without explicitly specifying a namespace incorrectly found\n  namespaced elements with the requested local name, instead of restricting\n  the search to non-namespaced children.\n\n* GH#85: Deprecation warnings were fixed for Python 3.x.\n\n* GH#33: lxml.html.fromstring() failed to accept bytes input in Py3.\n\n* LP#1080792: Static build of libxml2 2.9.0 failed due to missing file.\n\nOther changes\n-------------\n\n* The externally useless class ``_ObjectifyElementMakerCaller`` was\n  removed from the module API of lxml.objectify.\n\n* LP#1075622: lxml.builder is faster for adding text to elements with\n  many children.  Patch by Anders Hammarquist.\n\n\n3.0.2 (2012-12-14)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Fix crash during interpreter shutdown by switching to Cython 0.17.3 for building.\n\nOther changes\n-------------\n\n\n3.0.1 (2012-10-14)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* LP#1065924: Element proxies could disappear during garbage collection\n  in PyPy without proper cleanup.\n\n* GH#71: Failure to work with libxml2 2.6.x.\n\n* LP#1065139: static MacOS-X build failed in Py3.\n\nOther changes\n-------------\n\n\n3.0 (2012-10-08)\n================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* End-of-file handling was incorrect in iterparse() when reading from\n  a low-level C file stream and failed in libxml2 2.9.0 due to its\n  improved consistency checks.\n\nOther changes\n-------------\n\n* The build no longer uses Cython by default unless the generated C files\n  are missing.  To use Cython, pass the option \"--with-cython\".  To ignore\n  the fatal build error when Cython is required but not available (e.g. to\n  run special setup.py commands that do not actually run a build), pass\n  \"--without-cython\".\n\n\n3.0beta1 (2012-09-26)\n=====================\n\nFeatures added\n--------------\n\n* Python level access to (optional) libxml2 memory debugging features\n  to simplify debugging of memory leaks etc.\n\nBugs fixed\n----------\n\n* Fix a memory leak in XPath by switching to Cython 0.17.1.\n\n* Some tests were adapted to work with PyPy.\n\nOther changes\n-------------\n\n* The code was adapted to work with the upcoming libxml2 2.9.0 release.\n\n\n3.0alpha2 (2012-08-23)\n======================\n\nFeatures added\n--------------\n\n* The ``.iter()`` method of elements now accepts ``tag`` arguments like\n  ``\"{*}name\"`` to search for elements with a given local name in any\n  namespace. With this addition, all combinations of wildcards now work\n  as expected:\n  ``\"{ns}name\"``, ``\"{}name\"``, ``\"{*}name\"``, ``\"{ns}*\"``, ``\"{}*\"``\n  and ``\"{*}*\"``.  Note that ``\"name\"`` is equivalent to ``\"{}name\"``,\n  but ``\"*\"`` is ``\"{*}*\"``.\n  The same change applies to the ``.getiterator()``, ``.itersiblings()``,\n  ``.iterancestors()``, ``.iterdescendants()``, ``.iterchildren()``\n  and ``.itertext()`` methods;the ``strip_attributes()``,\n  ``strip_elements()`` and ``strip_tags()`` functions as well as the\n  ``iterparse()`` class.  Patch by Simon Sapin.\n\n* C14N allows specifying the inclusive prefixes to be promoted\n  to top-level during exclusive serialisation.\n\nBugs fixed\n----------\n\n* Passing long Unicode strings into the ``feed()`` parser interface\n  failed to read the entire string.\n\nOther changes\n-------------\n\n\n3.0alpha1 (2012-07-31)\n======================\n\nFeatures added\n--------------\n\n* Initial support for building in PyPy (through cpyext).\n\n* DTD objects gained an API that allows read access to their\n  declarations.\n\n* ``xpathgrep.py`` gained support for parsing line-by-line (e.g.\n  from grep output) and for surrounding the output with a new root\n  tag.\n\n* ``E-factory`` in ``lxml.builder`` accepts subtypes of known data\n  types (such as string subtypes) when building elements around them.\n\n* Tree iteration and ``iterparse()`` with a selective ``tag``\n  argument supports passing a set of tags.  Tree nodes will be\n  returned by the iterators if they match any of the tags.\n\nBugs fixed\n----------\n\n* The ``.find*()`` methods in ``lxml.objectify`` no longer use XPath\n  internally, which makes them faster in many cases (especially when\n  short circuiting after a single or couple of elements) and fixes\n  some behavioural differences compared to ``lxml.etree``.  Note that\n  this means that they no longer support arbitrary XPath expressions\n  but only the subset that the ``ElementPath`` language supports.\n  The previous implementation was also redundant with the normal\n  XPath support, which can be used as a replacement.\n\n* ``el.find('*')`` could accidentally return a comment or processing\n  instruction that happened to be in the wrong spot.  (Same for the\n  other ``.find*()`` methods.)\n\n* The error logging is less intrusive and avoids a global setup where\n  possible.\n\n* Fixed undefined names in html5lib parser.\n\n* ``xpathgrep.py`` did not work in Python 3.\n\n* ``Element.attrib.update()`` did not accept an ``attrib`` of\n  another Element as parameter.\n\n* For subtypes of ``ElementBase`` that make the ``.text`` or ``.tail``\n  properties immutable (as in objectify, for example), inserting text\n  when creating Elements through the E-Factory feature of the class\n  constructor would fail with an exception, stating that the text\n  cannot be modified.\n\nOther changes\n--------------\n\n* The code base was overhauled to properly use 'const' where the API\n  of libxml2 and libxslt requests it.  This also has an impact on the\n  public C-API of lxml itself, as defined in ``etreepublic.pxd``, as\n  well as the provided declarations in the ``lxml/includes/`` directory.\n  Code that uses these declarations may have to be adapted.  On the\n  plus side, this fixes several C compiler warnings, also for user\n  code, thus making it easier to spot real problems again.\n\n* The functionality of \"lxml.cssselect\" was moved into a separate PyPI\n  package called \"cssselect\".  To continue using it, you must install\n  that package separately.  The \"lxml.cssselect\" module is still\n  available and provides the same interface, provided the \"cssselect\"\n  package can be imported at runtime.\n\n* Element attributes passed in as an ``attrib`` dict or as keyword\n  arguments are now sorted by (namespaced) name before being created\n  to make their order predictable for serialisation and iteration.\n  Note that adding or deleting attributes afterwards does not take\n  that order into account, i.e. setting a new attribute appends it\n  after the existing ones.\n\n* Several classes that are for internal use only were removed\n  from the ``lxml.etree`` module dict:\n  ``_InputDocument, _ResolverRegistry, _ResolverContext, _BaseContext,\n  _ExsltRegExp, _IterparseContext, _TempStore, _ExceptionContext,\n  __ContentOnlyElement, _AttribIterator, _NamespaceRegistry,\n  _ClassNamespaceRegistry, _FunctionNamespaceRegistry,\n  _XPathFunctionNamespaceRegistry, _ParserDictionaryContext,\n  _FileReaderContext, _ParserContext, _PythonSaxParserTarget,\n  _TargetParserContext, _ReadOnlyProxy, _ReadOnlyPIProxy,\n  _ReadOnlyEntityProxy, _ReadOnlyElementProxy, _OpaqueNodeWrapper,\n  _OpaqueDocumentWrapper, _ModifyContentOnlyProxy,\n  _ModifyContentOnlyPIProxy, _ModifyContentOnlyEntityProxy,\n  _AppendOnlyElementProxy, _SaxParserContext, _FilelikeWriter,\n  _ParserSchemaValidationContext, _XPathContext,\n  _XSLTResolverContext, _XSLTContext, _XSLTQuotedStringParam``\n\n* Several internal classes can no longer be inherited from:\n  ``_InputDocument, _ResolverRegistry, _ExsltRegExp, _ElementUnicodeResult,\n  _IterparseContext, _TempStore, _AttribIterator, _ClassNamespaceRegistry,\n  _XPathFunctionNamespaceRegistry, _ParserDictionaryContext,\n  _FileReaderContext, _PythonSaxParserTarget, _TargetParserContext,\n  _ReadOnlyPIProxy, _ReadOnlyEntityProxy, _OpaqueDocumentWrapper,\n  _ModifyContentOnlyPIProxy, _ModifyContentOnlyEntityProxy,\n  _AppendOnlyElementProxy, _FilelikeWriter, _ParserSchemaValidationContext,\n  _XPathContext, _XSLTResolverContext, _XSLTContext, _XSLTQuotedStringParam,\n  _XSLTResultTree, _XSLTProcessingInstruction``\n\n\n2.3.6 (2012-09-28)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Passing long Unicode strings into the ``feed()`` parser interface\n  failed to read the entire string.\n\nOther changes\n--------------\n\n\n2.3.5 (2012-07-31)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash when merging text nodes in ``element.remove()``.\n\n* Crash in sax/target parser when reporting empty doctype.\n\nOther changes\n--------------\n\n\n2.3.4 (2012-03-26)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash when building an nsmap (Element property) with empty\n  namespace URIs.\n\n* Crash due to race condition when errors (or user messages) occur\n  during threaded XSLT processing.\n\n* XSLT stylesheet compilation could ignore compilation errors.\n\nOther changes\n--------------\n\n\n2.3.3 (2012-01-04)\n==================\n\nFeatures added\n--------------\n\n* ``lxml.html.tostring()`` gained new serialisation options\n  ``with_tail`` and ``doctype``.\n\nBugs fixed\n----------\n\n* Fixed a crash when using ``iterparse()`` for HTML parsing and\n  requesting start events.\n\n* Fixed parsing of more selectors in cssselect.  Whitespace before\n  pseudo-elements and pseudo-classes is significant as it is a\n  descendant combinator.\n  \"E :pseudo\" should parse the same as \"E \\*:pseudo\", not \"E:pseudo\".\n  Patch by Simon Sapin.\n\n* lxml.html.diff no longer raises an exception when hitting\n  'img' tags without 'src' attribute.\n\nOther changes\n--------------\n\n\n2.3.2 (2011-11-11)\n==================\n\nFeatures added\n--------------\n\n* ``lxml.objectify.deannotate()`` has a new boolean option\n  ``cleanup_namespaces`` to remove the objectify namespace\n  declarations (and generally clean up the namespace declarations)\n  after removing the type annotations.\n\n* ``lxml.objectify`` gained its own ``SubElement()`` function as a\n  copy of ``etree.SubElement`` to avoid an otherwise redundant import\n  of ``lxml.etree`` on the user side.\n\nBugs fixed\n----------\n\n* Fixed the \"descendant\" bug in cssselect a second time (after a first\n  fix in lxml 2.3.1).  The previous change resulted in a serious\n  performance regression for the XPath based evaluation of the\n  translated expression.  Note that this breaks the usage of some of\n  the generated XPath expressions as XSLT location paths that\n  previously worked in 2.3.1.\n\n* Fixed parsing of some selectors in cssselect. Whitespace after combinators\n  \">\", \"+\" and \"~\" is now correctly ignored. Previously it was parsed as\n  a descendant combinator. For example, \"div> .foo\" was parsed the same as\n  \"div>* .foo\" instead of \"div>.foo\". Patch by Simon Sapin.\n\nOther changes\n--------------\n\n\n2.3.1 (2011-09-25)\n==================\n\nFeatures added\n--------------\n\n* New option ``kill_tags`` in ``lxml.html.clean`` to remove specific\n  tags and their content (i.e. their whole subtree).\n\n* ``pi.get()`` and ``pi.attrib`` on processing instructions to parse\n  pseudo-attributes from the text content of processing instructions.\n\n* ``lxml.get_include()`` returns a list of include paths that can be\n  used to compile external C code against lxml.etree.  This is\n  specifically required for statically linked lxml builds when code\n  needs to compile against the exact same header file versions as lxml\n  itself.\n\n* ``Resolver.resolve_file()`` takes an additional option\n  ``close_file`` that configures if the file(-like) object will be\n  closed after reading or not.  By default, the file will be closed,\n  as the user is not expected to keep a reference to it.\n\nBugs fixed\n----------\n\n* HTML cleaning didn't remove 'data:' links.\n\n* The html5lib parser integration now uses the 'official'\n  implementation in html5lib itself, which makes it work with newer\n  releases of the library.\n\n* In ``lxml.sax``, ``endElementNS()`` could incorrectly reject a plain\n  tag name when the corresponding start event inferred the same plain\n  tag name to be in the default namespace.\n\n* When an open file-like object is passed into ``parse()`` or\n  ``iterparse()``, the parser will no longer close it after use.  This\n  reverts a change in lxml 2.3 where all files would be closed.  It is\n  the users responsibility to properly close the file(-like) object,\n  also in error cases.\n\n* Assertion error in lxml.html.cleaner when discarding top-level elements.\n\n* In lxml.cssselect, use the xpath 'A//B' (short for\n  'A/descendant-or-self::node()/B') instead of 'A/descendant::B' for\n  the css descendant selector ('A B').  This makes a few edge cases\n  like ``\"div *:last-child\"`` consistent with the selector behavior in\n  WebKit and Firefox, and makes more css expressions valid location\n  paths (for use in xsl:template match).\n\n* In lxml.html, non-selected ``<option>`` tags no longer show up in the\n  collected form values.\n\n* Adding/removing ``<option>`` values to/from a multiple select form\n  field properly selects them and unselects them.\n\nOther changes\n--------------\n\n* Static builds can specify the download directory with the\n  ``--download-dir`` option.\n\n\n2.3 (2011-02-06)\n================\n\nFeatures added\n--------------\n\n* When looking for children, ``lxml.objectify`` takes '{}tag' as\n  meaning an empty namespace, as opposed to the parent namespace.\n\nBugs fixed\n----------\n\n* When finished reading from a file-like object, the parser\n  immediately calls its ``.close()`` method.\n\n* When finished parsing, ``iterparse()`` immediately closes the input\n  file.\n\n* Work-around for libxml2 bug that can leave the HTML parser in a\n  non-functional state after parsing a severely broken document (fixed\n  in libxml2 2.7.8).\n\n* ``marque`` tag in HTML cleanup code is correctly named ``marquee``.\n\nOther changes\n--------------\n\n* Some public functions in the Cython-level C-API have more explicit\n  return types.\n\n\n2.3beta1 (2010-09-06)\n=====================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash in newer libxml2 versions when moving elements between\n  documents that had attributes on replaced XInclude nodes.\n\n* ``XMLID()`` function was missing the optional ``parser`` and\n  ``base_url`` parameters.\n\n* Searching for wildcard tags in ``iterparse()`` was broken in Py3.\n\n* ``lxml.html.open_in_browser()`` didn't work in Python 3 due to the\n  use of os.tempnam.  It now takes an optional 'encoding' parameter.\n\nOther changes\n--------------\n\n\n2.3alpha2 (2010-07-24)\n======================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash in XSLT when generating text-only result documents with a\n  stylesheet created in a different thread.\n\nOther changes\n--------------\n\n* ``repr()`` of Element objects shows the hex ID with leading 0x\n  (following ElementTree 1.3).\n\n\n2.3alpha1 (2010-06-19)\n======================\n\nFeatures added\n--------------\n\n* Keyword argument ``namespaces`` in ``lxml.cssselect.CSSSelector()``\n  to pass a prefix-to-namespace mapping for the selector.\n\n* New function ``lxml.etree.register_namespace(prefix, uri)`` that\n  globally registers a namespace prefix for a namespace that newly\n  created Elements in that namespace will use automatically.  Follows\n  ElementTree 1.3.\n\n* Support 'unicode' string name as encoding parameter in\n  ``tostring()``, following ElementTree 1.3.\n\n* Support 'c14n' serialisation method in ``ElementTree.write()`` and\n  ``tostring()``, following ElementTree 1.3.\n\n* The ElementPath expression syntax (``el.find*()``) was extended to\n  match the upcoming ElementTree 1.3 that will ship in the standard\n  library of Python 3.2/2.7.  This includes extended support for\n  predicates as well as namespace prefixes (as known from XPath).\n\n* During regular XPath evaluation, various ESXLT functions are\n  available within their namespace when using libxslt 1.1.26 or later.\n\n* Support passing a readily configured logger instance into\n  ``PyErrorLog``, instead of a logger name.\n\n* On serialisation, the new ``doctype`` parameter can be used to\n  override the DOCTYPE (internal subset) of the document.\n\n* New parameter ``output_parent`` to ``XSLTExtension.apply_templates()``\n  to append the resulting content directly to an output element.\n\n* ``XSLTExtension.process_children()`` to process the content of the\n  XSLT extension element itself.\n\n* ISO-Schematron support based on the de-facto Schematron reference\n  'skeleton implementation'.\n\n* XSLT objects now take XPath object as ``__call__`` stylesheet\n  parameters.\n\n* Enable path caching in ElementPath (``el.find*()``) to avoid parsing\n  overhead.\n\n* Setting the value of a namespaced attribute always uses a prefixed\n  namespace instead of the default namespace even if both declare the\n  same namespace URI.  This avoids serialisation problems when an\n  attribute from a default namespace is set on an element from a\n  different namespace.\n\n* XSLT extension elements: support for XSLT context nodes other than\n  elements: document root, comments, processing instructions.\n\n* Support for strings (in addition to Elements) in node-sets returned\n  by extension functions.\n\n* Forms that lack an ``action`` attribute default to the base URL of\n  the document on submit.\n\n* XPath attribute result strings have an ``attrname`` property.\n\n* Namespace URIs get validated against RFC 3986 at the API level\n  (required by the XML namespace specification).\n\n* Target parsers show their target object in the ``.target`` property\n  (compatible with ElementTree).\n\nBugs fixed\n----------\n\n* API is hardened against invalid proxy instances to prevent crashes\n  due to incorrectly instantiated Element instances.\n\n* Prevent crash when instantiating ``CommentBase`` and friends.\n\n* Export ElementTree compatible XML parser class as\n  ``XMLTreeBuilder``, as it is called in ET 1.2.\n\n* ObjectifiedDataElements in lxml.objectify were not hashable.  They\n  now use the hash value of the underlying Python value (string,\n  number, etc.) to which they compare equal.\n\n* Parsing broken fragments in lxml.html could fail if the fragment\n  contained an orphaned closing '</div>' tag.\n\n* Using XSLT extension elements around the root of the output document\n  crashed.\n\n* ``lxml.cssselect`` did not distinguish between ``x[attr=\"val\"]`` and\n  ``x [attr=\"val\"]`` (with a space).  The latter now matches the\n  attribute independent of the element.\n\n* Rewriting multiple links inside of HTML text content could end up\n  replacing unrelated content as replacements could impact the\n  reported position of subsequent matches.  Modifications are now\n  simplified by letting the ``iterlinks()`` generator in ``lxml.html``\n  return links in reversed order if they appear inside the same text\n  node.  Thus, replacements and link-internal modifications no longer\n  change the position of links reported afterwards.\n\n* The ``.value`` attribute of ``textarea`` elements in lxml.html did\n  not represent the complete raw value (including child tags etc.). It\n  now serialises the complete content on read and replaces the\n  complete content by a string on write.\n\n* Target parser didn't call ``.close()`` on the target object if\n  parsing failed.  Now it is guaranteed that ``.close()`` will be\n  called after parsing, regardless of the outcome.\n\nOther changes\n-------------\n\n* Official support for Python 3.1.2 and later.\n\n* Static MS Windows builds can now download their dependencies\n  themselves.\n\n* ``Element.attrib`` no longer uses a cyclic reference back to its\n  Element object.  It therefore no longer requires the garbage\n  collector to clean up.\n\n* Static builds include libiconv, in addition to libxml2 and libxslt.\n\n\n2.2.8 (2010-09-02)\n==================\n\nBugs fixed\n----------\n\n* Crash in newer libxml2 versions when moving elements between\n  documents that had attributes on replaced XInclude nodes.\n\n* Import fix for urljoin in Python 3.1+.\n\n\n2.2.7 (2010-07-24)\n==================\n\nBugs fixed\n----------\n\n* Crash in XSLT when generating text-only result documents with a\n  stylesheet created in a different thread.\n\n\n2.2.6 (2010-03-02)\n==================\n\nBugs fixed\n----------\n\n* Fixed several Python 3 regressions by building with Cython 0.11.3.\n\n\n2.2.5 (2010-02-28)\n==================\n\nFeatures added\n--------------\n\n* Support for running XSLT extension elements on the input root node\n  (e.g. in a template matching on \"/\").\n\nBugs fixed\n----------\n\n* Crash in XPath evaluation when reading smart strings from a document\n  other than the original context document.\n\n* Support recent versions of html5lib by not requiring its\n  ``XHTMLParser`` in ``htmlparser.py`` anymore.\n\n* Manually instantiating the custom element classes in\n  ``lxml.objectify`` could crash.\n\n* Invalid XML text characters were not rejected by the API when they\n  appeared in unicode strings directly after non-ASCII characters.\n\n* lxml.html.open_http_urllib() did not work in Python 3.\n\n* The functions ``strip_tags()`` and ``strip_elements()`` in\n  ``lxml.etree`` did not remove all occurrences of a tag in all cases.\n\n* Crash in XSLT extension elements when the XSLT context node is not\n  an element.\n\n\n2.2.4 (2009-11-11)\n==================\n\nBugs fixed\n----------\n\n* Static build of libxml2/libxslt was broken.\n\n\n2.2.3 (2009-10-30)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* The ``resolve_entities`` option did not work in the incremental feed\n  parser.\n\n* Looking up and deleting attributes without a namespace could hit a\n  namespaced attribute of the same name instead.\n\n* Late errors during calls to ``SubElement()`` (e.g. attribute related\n  ones) could leave a partially initialised element in the tree.\n\n* Modifying trees that contain parsed entity references could result\n  in an infinite loop.\n\n* ObjectifiedElement.__setattr__ created an empty-string child element when the\n  attribute value was rejected as a non-unicode/non-ascii string\n\n* Syntax errors in ``lxml.cssselect`` could result in misleading error\n  messages.\n\n* Invalid syntax in CSS expressions could lead to an infinite loop in\n  the parser of ``lxml.cssselect``.\n\n* CSS special character escapes were not properly handled in\n  ``lxml.cssselect``.\n\n* CSS Unicode escapes were not properly decoded in ``lxml.cssselect``.\n\n* Select options in HTML forms that had no explicit ``value``\n  attribute were not handled correctly.  The HTML standard dictates\n  that their value is defined by their text content.  This is now\n  supported by lxml.html.\n\n* XPath raised a TypeError when finding CDATA sections.  This is now\n  fully supported.\n\n* Calling ``help(lxml.objectify)`` didn't work at the prompt.\n\n* The ``ElementMaker`` in lxml.objectify no longer defines the default\n  namespaces when annotation is disabled.\n\n* Feed parser failed to honour the 'recover' option on parse errors.\n\n* Diverting the error logging to Python's logging system was broken.\n\nOther changes\n-------------\n\n\n2.2.2 (2009-06-21)\n==================\n\nFeatures added\n--------------\n\n* New helper functions ``strip_attributes()``, ``strip_elements()``,\n  ``strip_tags()`` in lxml.etree to remove attributes/subtrees/tags\n  from a subtree.\n\nBugs fixed\n----------\n\n* Namespace cleanup on subtree insertions could result in missing\n  namespace declarations (and potentially crashes) if the element\n  defining a namespace was deleted and the namespace was not used by\n  the top element of the inserted subtree but only in deeper subtrees.\n\n* Raising an exception from a parser target callback didn't always\n  terminate the parser.\n\n* Only {true, false, 1, 0} are accepted as the lexical representation for\n  BoolElement ({True, False, T, F, t, f} not any more), restoring lxml <= 2.0\n  behaviour.\n\nOther changes\n-------------\n\n\n2.2.1 (2009-06-02)\n==================\n\nFeatures added\n--------------\n\n* Injecting default attributes into a document during XML Schema\n  validation (also at parse time).\n\n* Pass ``huge_tree`` parser option to disable parser security\n  restrictions imposed by libxml2 2.7.\n\nBugs fixed\n----------\n\n* The script for statically building libxml2 and libxslt didn't work\n  in Py3.\n\n* ``XMLSchema()`` also passes invalid schema documents on to libxml2\n  for parsing (which could lead to a crash before release 2.6.24).\n\nOther changes\n-------------\n\n\n2.2 (2009-03-21)\n================\n\nFeatures added\n--------------\n\n* Support for ``standalone`` flag in XML declaration through\n  ``tree.docinfo.standalone`` and by passing ``standalone=True/False``\n  on serialisation.\n\nBugs fixed\n----------\n\n* Crash when parsing an XML Schema with external imports from a\n  filename.\n\n\n2.2beta4 (2009-02-27)\n=====================\n\nFeatures added\n--------------\n\n* Support strings and instantiable Element classes as child arguments\n  to the constructor of custom Element classes.\n\n* GZip compression support for serialisation to files and file-like\n  objects.\n\nBugs fixed\n----------\n\n* Deep-copying an ElementTree copied neither its sibling PIs and\n  comments nor its internal/external DTD subsets.\n\n* Soupparser failed on broken attributes without values.\n\n* Crash in XSLT when overwriting an already defined attribute using\n  ``xsl:attribute``.\n\n* Crash bug in exception handling code under Python 3.  This was due\n  to a problem in Cython, not lxml itself.\n\n* ``lxml.html.FormElement._name()`` failed for non top-level forms.\n\n* ``TAG`` special attribute in constructor of custom Element classes\n  was evaluated incorrectly.\n\nOther changes\n-------------\n\n* Official support for Python 3.0.1.\n\n* ``Element.findtext()`` now returns an empty string instead of None\n  for Elements without text content.\n\n\n2.2beta3 (2009-02-17)\n=====================\n\nFeatures added\n--------------\n\n* ``XSLT.strparam()`` class method to wrap quoted string parameters\n  that require escaping.\n\nBugs fixed\n----------\n\n* Memory leak in XPath evaluators.\n\n* Crash when parsing indented XML in one thread and merging it with\n  other documents parsed in another thread.\n\n* Setting the ``base`` attribute in ``lxml.objectify`` from a unicode\n  string failed.\n\n* Fixes following changes in Python 3.0.1.\n\n* Minor fixes for Python 3.\n\nOther changes\n-------------\n\n* The global error log (which is copied into the exception log) is now\n  local to a thread, which fixes some race conditions.\n\n* More robust error handling on serialisation.\n\n\n2.2beta2 (2009-01-25)\n=====================\n\nBugs fixed\n----------\n\n* Potential memory leak on exception handling.  This was due to a\n  problem in Cython, not lxml itself.\n\n* ``iter_links`` (and related link-rewriting functions) in\n  ``lxml.html`` would interpret CSS like ``url(\"link\")`` incorrectly\n  (treating the quotation marks as part of the link).\n\n* Failing import on systems that have an ``io`` module.\n\n\n2.1.5 (2009-01-06)\n==================\n\nBugs fixed\n----------\n\n* Potential memory leak on exception handling.  This was due to a\n  problem in Cython, not lxml itself.\n\n* Failing import on systems that have an ``io`` module.\n\n\n2.2beta1 (2008-12-12)\n=====================\n\nFeatures added\n--------------\n\n* Allow ``lxml.html.diff.htmldiff`` to accept Element objects, not\n  just HTML strings.\n\nBugs fixed\n----------\n\n* Crash when using an XPath evaluator in multiple threads.\n\n* Fixed missing whitespace before ``Link:...`` in ``lxml.html.diff``.\n\nOther changes\n-------------\n\n* Export ``lxml.html.parse``.\n\n\n2.1.4 (2008-12-12)\n==================\n\nBugs fixed\n----------\n\n* Crash when using an XPath evaluator in multiple threads.\n\n\n2.0.11 (2008-12-12)\n===================\n\nBugs fixed\n----------\n\n* Crash when using an XPath evaluator in multiple threads.\n\n\n2.2alpha1 (2008-11-23)\n======================\n\nFeatures added\n--------------\n\n* Support for XSLT result tree fragments in XPath/XSLT extension\n  functions.\n\n* QName objects have new properties ``namespace`` and ``localname``.\n\n* New options for exclusive C14N and C14N without comments.\n\n* Instantiating a custom Element classes creates a new Element.\n\nBugs fixed\n----------\n\n* XSLT didn't inherit the parse options of the input document.\n\n* 0-bytes could slip through the API when used inside of Unicode\n  strings.\n\n* With ``lxml.html.clean.autolink``, links with balanced parenthesis,\n  that end in a parenthesis, will be linked in their entirety (typical\n  with Wikipedia links).\n\nOther changes\n-------------\n\n\n2.1.3 (2008-11-17)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Ref-count leaks when lxml enters a try-except statement while an\n  outside exception lives in sys.exc_*(). This was due to a problem in\n  Cython, not lxml itself.\n\n* Parser Unicode decoding errors could get swallowed by other\n  exceptions.\n\n* Name/import errors in some Python modules.\n\n* Internal DTD subsets that did not specify a system or public ID were\n  not serialised and did not appear in the docinfo property of\n  ElementTrees.\n\n* Fix a pre-Py3k warning when parsing from a gzip file in Py2.6.\n\n* Test suite fixes for libxml2 2.7.\n\n* Resolver.resolve_string() did not work for non-ASCII byte strings.\n\n* Resolver.resolve_file() was broken.\n\n* Overriding the parser encoding didn't work for many encodings.\n\nOther changes\n-------------\n\n\n2.0.10 (2008-11-17)\n===================\n\nBugs fixed\n----------\n\n* Ref-count leaks when lxml enters a try-except statement while an\n  outside exception lives in sys.exc_*(). This was due to a problem in\n  Cython, not lxml itself.\n\n\n2.1.2 (2008-09-05)\n==================\n\nFeatures added\n--------------\n\n* lxml.etree now tries to find the absolute path name of files when\n  parsing from a file-like object.  This helps custom resolvers when\n  resolving relative URLs, as lixbml2 can prepend them with the path\n  of the source document.\n\nBugs fixed\n----------\n\n* Memory problem when passing documents between threads.\n\n* Target parser did not honour the ``recover`` option and raised an\n  exception instead of calling ``.close()`` on the target.\n\nOther changes\n-------------\n\n\n2.0.9 (2008-09-05)\n==================\n\nBugs fixed\n----------\n\n* Memory problem when passing documents between threads.\n\n* Target parser did not honour the ``recover`` option and raised an\n  exception instead of calling ``.close()`` on the target.\n\n\n2.1.1 (2008-07-24)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Crash when parsing XSLT stylesheets in a thread and using them in\n  another.\n\n* Encoding problem when including text with ElementInclude under\n  Python 3.\n\nOther changes\n-------------\n\n\n2.0.8 (2008-07-24)\n==================\n\nFeatures added\n--------------\n\n* ``lxml.html.rewrite_links()`` strips links to work around documents\n  with whitespace in URL attributes.\n\nBugs fixed\n----------\n\n* Crash when parsing XSLT stylesheets in a thread and using them in\n  another.\n\n* CSS selector parser dropped remaining expression after a function\n  with parameters.\n\nOther changes\n-------------\n\n\n2.1 (2008-07-09)\n================\n\nFeatures added\n--------------\n\n* Smart strings can be switched off in XPath (``smart_strings``\n  keyword option).\n\n* ``lxml.html.rewrite_links()`` strips links to work around documents\n  with whitespace in URL attributes.\n\nBugs fixed\n----------\n\n* Custom resolvers were not used for XMLSchema includes/imports and\n  XInclude processing.\n\n* CSS selector parser dropped remaining expression after a function\n  with parameters.\n\nOther changes\n-------------\n\n* ``objectify.enableRecursiveStr()`` was removed, use\n  ``objectify.enable_recursive_str()`` instead\n\n* Speed-up when running XSLTs on documents from other threads\n\n\n2.0.7 (2008-06-20)\n==================\n\nFeatures added\n--------------\n\n* Pickling ``ElementTree`` objects in lxml.objectify.\n\nBugs fixed\n----------\n\n* Descending dot-separated classes in CSS selectors were not resolved\n  correctly.\n\n* ``ElementTree.parse()`` didn't handle target parser result.\n\n* Potential threading problem in XInclude.\n\n* Crash in Element class lookup classes when the __init__() method of\n  the super class is not called from Python subclasses.\n\nOther changes\n-------------\n\n* Non-ASCII characters in attribute values are no longer escaped on\n  serialisation.\n\n\n2.1beta3 (2008-06-19)\n=====================\n\nFeatures added\n--------------\n\n* Major overhaul of ``tools/xpathgrep.py`` script.\n\n* Pickling ``ElementTree`` objects in lxml.objectify.\n\n* Support for parsing from file-like objects that return unicode\n  strings.\n\n* New function ``etree.cleanup_namespaces(el)`` that removes unused\n  namespace declarations from a (sub)tree (experimental).\n\n* XSLT results support the buffer protocol in Python 3.\n\n* Polymorphic functions in ``lxml.html`` that accept either a tree or\n  a parsable string will return either a UTF-8 encoded byte string, a\n  unicode string or a tree, based on the type of the input.\n  Previously, the result was always a byte string or a tree.\n\n* Support for Python 2.6 and 3.0 beta.\n\n* File name handling now uses a heuristic to convert between byte\n  strings (usually filenames) and unicode strings (usually URLs).\n\n* Parsing from a plain file object frees the GIL under Python 2.x.\n\n* Running ``iterparse()`` on a plain file (or filename) frees the GIL\n  on reading under Python 2.x.\n\n* Conversion functions ``html_to_xhtml()`` and ``xhtml_to_html()`` in\n  lxml.html (experimental).\n\n* Most features in lxml.html work for XHTML namespaced tag names\n  (experimental).\n\nBugs fixed\n----------\n\n* ``ElementTree.parse()`` didn't handle target parser result.\n\n* Crash in Element class lookup classes when the __init__() method of\n  the super class is not called from Python subclasses.\n\n* A number of problems related to unicode/byte string conversion of\n  filenames and error messages were fixed.\n\n* Building on MacOS-X now passes the \"flat_namespace\" option to the C\n  compiler, which reportedly prevents build quirks and crashes on this\n  platform.\n\n* Windows build was broken.\n\n* Rare crash when serialising to a file object with certain encodings.\n\nOther changes\n-------------\n\n* Non-ASCII characters in attribute values are no longer escaped on\n  serialisation.\n\n* Passing non-ASCII byte strings or invalid unicode strings as .tag,\n  namespaces, etc. will result in a ValueError instead of an\n  AssertionError (just like the tag well-formedness check).\n\n* Up to several times faster attribute access (i.e. tree traversal) in\n  lxml.objectify.\n\n\n2.0.6 (2008-05-31)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Incorrect evaluation of ``el.find(\"tag[child]\")``.\n\n* Windows build was broken.\n\n* Moving a subtree from a document created in one thread into a\n  document of another thread could crash when the rest of the source\n  document is deleted while the subtree is still in use.\n\n* Rare crash when serialising to a file object with certain encodings.\n\nOther changes\n-------------\n\n* lxml should now build without problems on MacOS-X.\n\n\n2.1beta2 (2008-05-02)\n=====================\n\nFeatures added\n--------------\n\n* All parse functions in lxml.html take a ``parser`` keyword argument.\n\n* lxml.html has a new parser class ``XHTMLParser`` and a module\n  attribute ``xhtml_parser`` that provide XML parsers that are\n  pre-configured for the lxml.html package.\n\nBugs fixed\n----------\n\n* Moving a subtree from a document created in one thread into a\n  document of another thread could crash when the rest of the source\n  document is deleted while the subtree is still in use.\n\n* Passing an nsmap when creating an Element will no longer strip\n  redundantly defined namespace URIs.  This prevented the definition\n  of more than one prefix for a namespace on the same Element.\n\nOther changes\n-------------\n\n* If the default namespace is redundantly defined with a prefix on the\n  same Element, the prefix will now be preferred for subelements and\n  attributes.  This allows users to work around a problem in libxml2\n  where attributes from the default namespace could serialise without\n  a prefix even when they appear on an Element with a different\n  namespace (i.e. they would end up in the wrong namespace).\n\n\n2.0.5 (2008-05-01)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Resolving to a filename in custom resolvers didn't work.\n\n* lxml did not honour libxslt's second error state \"STOPPED\", which\n  let some XSLT errors pass silently.\n\n* Memory leak in Schematron with libxml2 >= 2.6.31.\n\nOther changes\n-------------\n\n\n2.1beta1 (2008-04-15)\n=====================\n\nFeatures added\n--------------\n\n* Error logging in Schematron (requires libxml2 2.6.32 or later).\n\n* Parser option ``strip_cdata`` for normalising or keeping CDATA\n  sections.  Defaults to ``True`` as before, thus replacing CDATA\n  sections by their text content.\n\n* ``CDATA()`` factory to wrap string content as CDATA section.\n\nBugs fixed\n----------\n\n* Resolving to a filename in custom resolvers didn't work.\n\n* lxml did not honour libxslt's second error state \"STOPPED\", which\n  let some XSLT errors pass silently.\n\n* Memory leak in Schematron with libxml2 >= 2.6.31.\n\n* lxml.etree accepted non well-formed namespace prefix names.\n\nOther changes\n-------------\n\n* Major cleanup in internal ``moveNodeToDocument()`` function, which\n  takes care of namespace cleanup when moving elements between\n  different namespace contexts.\n\n* New Elements created through the ``makeelement()`` method of an HTML\n  parser or through lxml.html now end up in a new HTML document\n  (doctype HTML 4.01 Transitional) instead of a generic XML document.\n  This mostly impacts the serialisation and the availability of a DTD\n  context.\n\n\n2.0.4 (2008-04-13)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Hanging thread in conjunction with GTK threading.\n\n* Crash bug in iterparse when moving elements into other documents.\n\n* HTML elements' ``.cssselect()`` method was broken.\n\n* ``ElementTree.find*()`` didn't accept QName objects.\n\nOther changes\n-------------\n\n\n2.1alpha1 (2008-03-27)\n======================\n\nFeatures added\n--------------\n\n* New event types 'comment' and 'pi' in ``iterparse()``.\n\n* ``XSLTAccessControl`` instances have a property ``options`` that\n  returns a dict of access configuration options.\n\n* Constant instances ``DENY_ALL`` and ``DENY_WRITE`` on\n  ``XSLTAccessControl`` class.\n\n* Extension elements for XSLT (experimental!)\n\n* ``Element.base`` property returns the xml:base or HTML base URL of\n  an Element.\n\n* ``docinfo.URL`` property is writable.\n\nBugs fixed\n----------\n\n* Default encoding for plain text serialisation was different from\n  that of XML serialisation (UTF-8 instead of ASCII).\n\nOther changes\n-------------\n\n* Minor API speed-ups.\n\n* The benchmark suite now uses tail text in the trees, which makes the\n  absolute numbers incomparable to previous results.\n\n* Generating the HTML documentation now requires Pygments_, which is\n  used to enable syntax highlighting for the doctest examples.\n\n.. _Pygments: http://pygments.org/\n\nMost long-time deprecated functions and methods were removed:\n\n- ``etree.clearErrorLog()``, use ``etree.clear_error_log()``\n\n- ``etree.useGlobalPythonLog()``, use\n  ``etree.use_global_python_log()``\n\n- ``etree.ElementClassLookup.setFallback()``, use\n  ``etree.ElementClassLookup.set_fallback()``\n\n- ``etree.getDefaultParser()``, use ``etree.get_default_parser()``\n\n- ``etree.setDefaultParser()``, use ``etree.set_default_parser()``\n\n- ``etree.setElementClassLookup()``, use\n  ``etree.set_element_class_lookup()``\n\n  Note that ``parser.setElementClassLookup()`` has not been removed\n  yet, although ``parser.set_element_class_lookup()`` should be used\n  instead.\n\n- ``xpath_evaluator.registerNamespace()``, use\n  ``xpath_evaluator.register_namespace()``\n\n- ``xpath_evaluator.registerNamespaces()``, use\n  ``xpath_evaluator.register_namespaces()``\n\n- ``objectify.setPytypeAttributeTag``, use\n  ``objectify.set_pytype_attribute_tag``\n\n- ``objectify.setDefaultParser()``, use\n  ``objectify.set_default_parser()``\n\n\n2.0.3 (2008-03-26)\n==================\n\nFeatures added\n--------------\n\n* soupparser.parse() allows passing keyword arguments on to\n  BeautifulSoup.\n\n* ``fromstring()`` method in ``lxml.html.soupparser``.\n\nBugs fixed\n----------\n\n* ``lxml.html.diff`` didn't treat empty tags properly (e.g.,\n  ``<br>``).\n\n* Handle entity replacements correctly in target parser.\n\n* Crash when using ``iterparse()`` with XML Schema validation.\n\n* The BeautifulSoup parser (soupparser.py) did not replace entities,\n  which made them turn up in text content.\n\n* Attribute assignment of custom PyTypes in objectify could fail to\n  correctly serialise the value to a string.\n\nOther changes\n-------------\n\n* ``lxml.html.ElementSoup`` was replaced by a new module\n  ``lxml.html.soupparser`` with a more consistent API.  The old module\n  remains for compatibility with ElementTree's own ElementSoup module.\n\n* Setting the XSLT_CONFIG and XML2_CONFIG environment variables at\n  build time will let setup.py pick up the ``xml2-config`` and\n  ``xslt-config`` scripts from the supplied path name.\n\n* Passing ``--with-xml2-config=/path/to/xml2-config`` to setup.py will\n  override the ``xml2-config`` script that is used to determine the C\n  compiler options.  The same applies for the ``--with-xslt-config``\n  option.\n\n\n2.0.2 (2008-02-22)\n==================\n\nFeatures added\n--------------\n\n* Support passing ``base_url`` to file parser functions to override\n  the filename of the file(-like) object.\n\nBugs fixed\n----------\n\n* The prefix for objectify's pytype namespace was missing from the set\n  of default prefixes.\n\n* Memory leak in Schematron (fixed only for libxml2 2.6.31+).\n\n* Error type names in RelaxNG were reported incorrectly.\n\n* Slice deletion bug fixed in objectify.\n\nOther changes\n-------------\n\n* Enabled doctests for some Python modules (especially ``lxml.html``).\n\n* Add a ``method`` argument to ``lxml.html.tostring()``\n  (``method=\"xml\"`` for XHTML output).\n\n* Make it clearer that methods like ``lxml.html.fromstring()`` take a\n  ``base_url`` argument.\n\n\n2.0.1 (2008-02-13)\n==================\n\nFeatures added\n--------------\n\n* Child iteration in ``lxml.pyclasslookup``.\n\n* Loads of new docstrings reflect the signature of functions and\n  methods to make them visible in API docs and ``help()``\n\nBugs fixed\n----------\n\n* The module ``lxml.html.builder`` was duplicated as\n  ``lxml.htmlbuilder``\n\n* Form elements would return None for ``form.fields.keys()`` if there\n  was an unnamed input field.  Now unnamed input fields are completely\n  ignored.\n\n* Setting an element slice in objectify could insert slice-overlapping\n  elements at the wrong position.\n\nOther changes\n-------------\n\n* The generated API documentation was cleaned up and disburdened from\n  non-public classes etc.\n\n* The previously public module ``lxml.html.setmixin`` was renamed to\n  ``lxml.html._setmixin`` as it is not an official part of lxml.  If\n  you want to use it, feel free to copy it over to your own source\n  base.\n\n* Passing ``--with-xslt-config=/path/to/xslt-config`` to setup.py will\n  override the ``xslt-config`` script that is used to determine the C\n  compiler options.\n\n\n2.0 (2008-02-01)\n================\n\nFeatures added\n--------------\n\n* Passing the ``unicode`` type as ``encoding`` to ``tostring()`` will\n  serialise to unicode.  The ``tounicode()`` function is now\n  deprecated.\n\n* ``XMLSchema()`` and ``RelaxNG()`` can parse from StringIO.\n\n* ``makeparser()`` function in ``lxml.objectify`` to create a new\n  parser with the usual objectify setup.\n\n* Plain ASCII XPath string results are no longer forced into unicode\n  objects as in 2.0beta1, but are returned as plain strings as before.\n\n* All XPath string results are 'smart' objects that have a\n  ``getparent()`` method to retrieve their parent Element.\n\n* ``with_tail`` option in serialiser functions.\n\n* More accurate exception messages in validator creation.\n\n* Parse-time XML schema validation (``schema`` parser keyword).\n\n* XPath string results of the ``text()`` function and attribute\n  selection make their Element container accessible through a\n  ``getparent()`` method.  As a side-effect, they are now always\n  unicode objects (even ASCII strings).\n\n* ``XSLT`` objects are usable in any thread - at the cost of a deep\n  copy if they were not created in that thread.\n\n* Invalid entity names and character references will be rejected by\n  the ``Entity()`` factory.\n\n* ``entity.text`` returns the textual representation of the entity,\n  e.g. ``&amp;``.\n\n* New properties ``position`` and ``code`` on ParseError exception (as\n  in ET 1.3)\n\n* Rich comparison of ``element.attrib`` proxies.\n\n* ElementTree compatible TreeBuilder class.\n\n* Use default prefixes for some common XML namespaces.\n\n* ``lxml.html.clean.Cleaner`` now allows for a ``host_whitelist``, and\n  two overridable methods: ``allow_embedded_url(el, url)`` and the\n  more general ``allow_element(el)``.\n\n* Extended slicing of Elements as in ``element[1:-1:2]``, both in\n  etree and in objectify\n\n* Resolvers can now provide a ``base_url`` keyword argument when\n  resolving a document as string data.\n\n* When using ``lxml.doctestcompare`` you can give the doctest option\n  ``NOPARSE_MARKUP`` (like ``# doctest: +NOPARSE_MARKUP``) to suppress\n  the special checking for one test.\n\n* Separate ``feed_error_log`` property for the feed parser interface.\n  The normal parser interface and ``iterparse`` continue to use\n  ``error_log``.\n\n* The normal parsers and the feed parser interface are now separated\n  and can be used concurrently on the same parser instance.\n\n* ``fromstringlist()`` and ``tostringlist()`` functions as in\n  ElementTree 1.3\n\n* ``iterparse()`` accepts an ``html`` boolean keyword argument for\n  parsing with the HTML parser (note that this interface may be\n  subject to change)\n\n* Parsers accept an ``encoding`` keyword argument that overrides the encoding\n  of the parsed documents.\n\n* New C-API function ``hasChild()`` to test for children\n\n* ``annotate()`` function in objectify can annotate with Python types and XSI\n  types in one step.  Accompanied by ``xsiannotate()`` and ``pyannotate()``.\n\n* ``ET.write()``, ``tostring()`` and ``tounicode()`` now accept a keyword\n  argument ``method`` that can be one of 'xml' (or None), 'html' or 'text' to\n  serialise as XML, HTML or plain text content.\n\n* ``iterfind()`` method on Elements returns an iterator equivalent to\n  ``findall()``\n\n* ``itertext()`` method on Elements\n\n* Setting a QName object as value of the .text property or as an attribute\n  will resolve its prefix in the respective context\n\n* ElementTree-like parser target interface as described in\n  http://effbot.org/elementtree/elementtree-xmlparser.htm\n\n* ElementTree-like feed parser interface on XMLParser and HTMLParser\n  (``feed()`` and ``close()`` methods)\n\n* Reimplemented ``objectify.E`` for better performance and improved\n  integration with objectify.  Provides extended type support based on\n  registered PyTypes.\n\n* XSLT objects now support deep copying\n\n* New ``makeSubElement()`` C-API function that allows creating a new\n  subelement straight with text, tail and attributes.\n\n* XPath extension functions can now access the current context node\n  (``context.context_node``) and use a context dictionary\n  (``context.eval_context``) from the context provided in their first\n  parameter\n\n* HTML tag soup parser based on BeautifulSoup in ``lxml.html.ElementSoup``\n\n* New module ``lxml.doctestcompare`` by Ian Bicking for writing simplified\n  doctests based on XML/HTML output.  Use by importing ``lxml.usedoctest`` or\n  ``lxml.html.usedoctest`` from within a doctest.\n\n* New module ``lxml.cssselect`` by Ian Bicking for selecting Elements with CSS\n  selectors.\n\n* New package ``lxml.html`` written by Ian Bicking for advanced HTML\n  treatment.\n\n* Namespace class setup is now local to the ``ElementNamespaceClassLookup``\n  instance and no longer global.\n\n* Schematron validation (incomplete in libxml2)\n\n* Additional ``stringify`` argument to ``objectify.PyType()`` takes a\n  conversion function to strings to support setting text values from arbitrary\n  types.\n\n* Entity support through an ``Entity`` factory and element classes.  XML\n  parsers now have a ``resolve_entities`` keyword argument that can be set to\n  False to keep entities in the document.\n\n* ``column`` field on error log entries to accompany the ``line`` field\n\n* Error specific messages in XPath parsing and evaluation\n  NOTE: for evaluation errors, you will now get an XPathEvalError instead of\n  an XPathSyntaxError.  To catch both, you can except on ``XPathError``\n\n* The regular expression functions in XPath now support passing a node-set\n  instead of a string\n\n* Extended type annotation in objectify: new ``xsiannotate()`` function\n\n* EXSLT RegExp support in standard XPath (not only XSLT)\n\nBugs fixed\n----------\n\n* Missing import in ``lxml.html.clean``.\n\n* Some Python 2.4-isms prevented lxml from building/running under\n  Python 2.3.\n\n* XPath on ElementTrees could crash when selecting the virtual root\n  node of the ElementTree.\n\n* Compilation ``--without-threading`` was buggy in alpha5/6.\n\n* Memory leak in the ``parse()`` function.\n\n* Minor bugs in XSLT error message formatting.\n\n* Result document memory leak in target parser.\n\n* Target parser failed to report comments.\n\n* In the ``lxml.html`` ``iter_links`` method, links in ``<object>``\n  tags weren't recognized.  (Note: plugin-specific link parameters\n  still aren't recognized.)  Also, the ``<embed>`` tag, though not\n  standard, is now included in ``lxml.html.defs.special_inline_tags``.\n\n* Using custom resolvers on XSLT stylesheets parsed from a string\n  could request ill-formed URLs.\n\n* With ``lxml.doctestcompare`` if you do ``<tag xmlns=\"...\">`` in your\n  output, it will then be namespace-neutral (before the ellipsis was\n  treated as a real namespace).\n\n* AttributeError in feed parser on parse errors\n\n* XML feed parser setup problem\n\n* Type annotation for unicode strings in ``DataElement()``\n\n* lxml failed to serialise namespace declarations of elements other than the\n  root node of a tree\n\n* Race condition in XSLT where the resolver context leaked between concurrent\n  XSLT calls\n\n* lxml.etree did not check tag/attribute names\n\n* The XML parser did not report undefined entities as error\n\n* The text in exceptions raised by XML parsers, validators and XPath\n  evaluators now reports the first error that occurred instead of the last\n\n* Passing '' as XPath namespace prefix did not raise an error\n\n* Thread safety in XPath evaluators\n\nOther changes\n-------------\n\n* Exceptions carry only the part of the error log that is related to\n  the operation that caused the error.\n\n* ``XMLSchema()`` and ``RelaxNG()`` now enforce passing the source\n  file/filename through the ``file`` keyword argument.\n\n* The test suite now skips most doctests under Python 2.3.\n\n* ``make clean`` no longer removes the .c files (use ``make\n  realclean`` instead)\n\n* Minor performance tweaks for Element instantiation and subelement\n  creation\n\n* Various places in the XPath, XSLT and iteration APIs now require\n  keyword-only arguments.\n\n* The argument order in ``element.itersiblings()`` was changed to\n  match the order used in all other iteration methods.  The second\n  argument ('preceding') is now a keyword-only argument.\n\n* The ``getiterator()`` method on Elements and ElementTrees was\n  reverted to return an iterator as it did in lxml 1.x.  The ET API\n  specification allows it to return either a sequence or an iterator,\n  and it traditionally returned a sequence in ET and an iterator in\n  lxml.  However, it is now deprecated in favour of the ``iter()``\n  method, which should be used in new code wherever possible.\n\n* The 'pretty printed' serialisation of ElementTree objects now\n  inserts newlines at the root level between processing instructions,\n  comments and the root tag.\n\n* A 'pretty printed' serialisation is now terminated with a newline.\n\n* Second argument to ``lxml.etree.Extension()`` helper is no longer\n  required, third argument is now a keyword-only argument ``ns``.\n\n* ``lxml.html.tostring`` takes an ``encoding`` argument.\n\n* The module source files were renamed to \"lxml.*.pyx\", such as\n  \"lxml.etree.pyx\".  This was changed for consistency with the way\n  Pyrex commonly handles package imports.  The main effect is that\n  classes now know about their fully qualified class name, including\n  the package name of their module.\n\n* Keyword-only arguments in some API functions, especially in the\n  parsers and serialisers.\n\n* Tag name validation in lxml.etree (and lxml.html) now distinguishes\n  between HTML tags and XML tags based on the parser that was used to\n  parse or create them.  HTML tags no longer reject any non-ASCII\n  characters in tag names but only spaces and the special characters\n  ``<>&/\"'``.\n\n* lxml.etree now emits a warning if you use XPath with libxml2 2.6.27\n  (which can crash on certain XPath errors)\n\n* Type annotation in objectify now preserves the already annotated type by\n  default to prevent losing type information that is already there.\n\n* ``element.getiterator()`` returns a list, use ``element.iter()`` to retrieve\n  an iterator (ElementTree 1.3 compatible behaviour)\n\n* objectify.PyType for None is now called \"NoneType\"\n\n* ``el.getiterator()`` renamed to ``el.iter()``, following ElementTree 1.3 -\n  original name is still available as alias\n\n* In the public C-API, ``findOrBuildNodeNs()`` was replaced by the more\n  generic ``findOrBuildNodeNsPrefix``\n\n* Major refactoring in XPath/XSLT extension function code\n\n* Network access in parsers disabled by default\n\n\n1.3.6 (2007-10-29)\n==================\n\nBugs fixed\n----------\n\n* Backported decref crash fix from 2.0\n\n* Well hidden free-while-in-use crash bug in ObjectPath\n\nOther changes\n-------------\n\n* The test suites now run ``gc.collect()`` in the ``tearDown()``\n  methods.  While this makes them take a lot longer to run, it also\n  makes it easier to link a specific test to garbage collection\n  problems that would otherwise appear in later tests.\n\n\n1.3.5 (2007-10-22)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* lxml.etree could crash when adding more than 10000 namespaces to a\n  document\n\n* lxml failed to serialise namespace declarations of elements other\n  than the root node of a tree\n\n\n1.3.4 (2007-08-30)\n==================\n\nFeatures added\n--------------\n\n* The ``ElementMaker`` in ``lxml.builder`` now accepts the keyword arguments\n  ``namespace`` and ``nsmap`` to set a namespace and nsmap for the Elements it\n  creates.\n\n* The ``docinfo`` on ElementTree objects has new properties ``internalDTD``\n  and ``externalDTD`` that return a DTD object for the internal or external\n  subset of the document respectively.\n\n* Serialising an ElementTree now includes any internal DTD subsets that are\n  part of the document, as well as comments and PIs that are siblings of the\n  root node.\n\nBugs fixed\n----------\n\n* Parsing with the ``no_network`` option could fail\n\nOther changes\n-------------\n\n* lxml now raises a TagNameWarning about tag names containing ':' instead of\n  an Error as 1.3.3 did.  The reason is that a number of projects currently\n  misuse the previous lack of tag name validation to generate namespace\n  prefixes without declaring namespaces.  Apart from the danger of generating\n  broken XML this way, it also breaks most of the namespace-aware tools in\n  XML, including XPath, XSLT and validation.  lxml 1.3.x will continue to\n  support this bug with a Warning, while lxml 2.0 will be strict about\n  well-formed tag names (not only regarding ':').\n\n* Serialising an Element no longer includes its comment and PI siblings (only\n  ElementTree serialisation includes them).\n\n\n1.3.3 (2007-07-26)\n==================\n\nFeatures added\n--------------\n\n* ElementTree compatible parser ``ETCompatXMLParser`` strips processing\n  instructions and comments while parsing XML\n\n* Parsers now support stripping PIs (keyword argument 'remove_pis')\n\n* ``etree.fromstring()`` now supports parsing both HTML and XML, depending on\n  the parser you pass.\n\n* Support ``base_url`` keyword argument in ``HTML()`` and ``XML()``\n\nBugs fixed\n----------\n\n* Parsing from Python Unicode strings failed on some platforms\n\n* ``Element()`` did not raise an exception on tag names containing ':'\n\n* ``Element.getiterator(tag)`` did not accept ``Comment`` and\n  ``ProcessingInstruction`` as tags. It also accepts ``Element`` now.\n\n\n1.3.2 (2007-07-03)\n==================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* \"deallocating None\" crash bug\n\n\n1.3.1 (2007-07-02)\n==================\n\nFeatures added\n--------------\n\n* objectify.DataElement now supports setting values from existing data\n  elements (not just plain Python types) and reuses defined namespaces etc.\n\n* E-factory support for lxml.objectify (``objectify.E``)\n\nBugs fixed\n----------\n\n* Better way to prevent crashes in Element proxy cleanup code\n\n* objectify.DataElement didn't set up None value correctly\n\n* objectify.DataElement didn't check the value against the provided type hints\n\n* Reference-counting bug in ``Element.attrib.pop()``\n\n\n1.3 (2007-06-24)\n================\n\nFeatures added\n--------------\n\n* Module ``lxml.pyclasslookup`` module implements an Element class lookup\n  scheme that can access the entire tree in read-only mode to help determining\n  a suitable Element class\n\n* Parsers take a ``remove_comments`` keyword argument that skips over comments\n\n* ``parse()`` function in ``objectify``, corresponding to ``XML()`` etc.\n\n* ``Element.addnext(el)`` and ``Element.addprevious(el)`` methods to support\n  adding processing instructions and comments around the root node\n\n* ``Element.attrib`` was missing ``clear()`` and ``pop()`` methods\n\n* Extended type annotation in objectify: cleaner annotation namespace setup\n  plus new ``deannotate()`` function\n\n* Support for custom Element class instantiation in lxml.sax: passing a\n  ``makeelement`` function to the ElementTreeContentHandler will reuse the\n  lookup context of that function\n\n* '.' represents empty ObjectPath (identity)\n\n* ``Element.values()`` to accompany the existing ``.keys()`` and ``.items()``\n\n* ``collectAttributes()`` C-function to build a list of attribute\n  keys/values/items for a libxml2 node\n\n* ``DTD`` validator class (like ``RelaxNG`` and ``XMLSchema``)\n\n* HTML generator helpers by Fredrik Lundh in ``lxml.htmlbuilder``\n\n* ``ElementMaker`` XML generator by Fredrik Lundh in ``lxml.builder.E``\n\n* Support for pickling ``objectify.ObjectifiedElement`` objects to XML\n\n* ``update()`` method on Element.attrib\n\n* Optimised replacement for libxml2's _xmlReconsiliateNs(). This allows lxml\n  a better handling of namespaces when moving elements between documents.\n\nBugs fixed\n----------\n\n* Removing Elements from a tree could make them lose their namespace\n  declarations\n\n* ``ElementInclude`` didn't honour base URL of original document\n\n* Replacing the children slice of an Element would cut off the tails of the\n  original children\n\n* ``Element.getiterator(tag)`` did not accept ``Comment`` and\n  ``ProcessingInstruction`` as tags\n\n* API functions now check incoming strings for XML conformity.  Zero bytes or\n  low ASCII characters are no longer accepted (AssertionError).\n\n* XSLT parsing failed to pass resolver context on to imported documents\n\n* passing '' as namespace prefix in nsmap could be passed through to libxml2\n\n* Objectify couldn't handle prefixed XSD type names in ``xsi:type``\n\n* More ET compatible behaviour when writing out XML declarations or not\n\n* More robust error handling in ``iterparse()``\n\n* Documents lost their top-level PIs and comments on serialisation\n\n* lxml.sax failed on comments and PIs. Comments are now properly ignored and\n  PIs are copied.\n\n* Possible memory leaks in namespace handling when moving elements between\n  documents\n\nOther changes\n-------------\n\n* major restructuring in the documentation\n\n\n1.2.1 (2007-02-27)\n==================\n\nBugs fixed\n----------\n\n* Build fixes for MS compiler\n\n* Item assignments to special names like ``element[\"text\"]`` failed\n\n* Renamed ObjectifiedDataElement.__setText() to _setText() to make it easier\n  to access\n\n* The pattern for attribute names in ObjectPath was too restrictive\n\n\n1.2 (2007-02-20)\n================\n\nFeatures added\n--------------\n\n* Rich comparison of QName objects\n\n* Support for regular expressions in benchmark selection\n\n* get/set emulation (not .attrib!) for attributes on processing instructions\n\n* ElementInclude Python module for ElementTree compatible XInclude processing\n  that honours custom resolvers registered with the source document\n\n* ElementTree.parser property holds the parser used to parse the document\n\n* setup.py has been refactored for greater readability and flexibility\n\n* --rpath flag to setup.py to induce automatic linking-in of dynamic library\n  runtime search paths has been renamed to --auto-rpath. This makes it\n  possible to pass an --rpath directly to distutils; previously this was being\n  shadowed.\n\nBugs fixed\n----------\n\n* Element instantiation now uses locks to prevent race conditions with threads\n\n* ElementTree.write() did not raise an exception when the file was not writable\n\n* Error handling could crash under Python <= 2.4.1 - fixed by disabling thread\n  support in these environments\n\n* Element.find*() did not accept QName objects as path\n\nOther changes\n-------------\n\n* code cleanup: redundant _NodeBase super class merged into _Element class\n  Note: although the impact should be zero in most cases, this change breaks\n  the compatibility of the public C-API\n\n\n1.1.2 (2006-10-30)\n==================\n\nFeatures added\n--------------\n\n* Data elements in objectify support repr(), which is now used by dump()\n\n* Source distribution now ships with a patched Pyrex\n\n* New C-API function makeElement() to create new elements with text,\n  tail, attributes and namespaces\n\n* Reuse original parser flags for XInclude\n\n* Simplified support for handling XSLT processing instructions\n\nBugs fixed\n----------\n\n* Parser resources were not freed before the next parser run\n\n* Open files and XML strings returned by Python resolvers were not\n  closed/freed\n\n* Crash in the IDDict returned by XMLDTDID\n\n* Copying Comments and ProcessingInstructions failed\n\n* Memory leak for external URLs in _XSLTProcessingInstruction.parseXSL()\n\n* Memory leak when garbage collecting tailed root elements\n\n* HTML script/style content was not propagated to .text\n\n* Show text xincluded between text nodes correctly in .text and .tail\n\n* 'integer * objectify.StringElement' operation was not supported\n\n\n1.1.1 (2006-09-21)\n==================\n\nFeatures added\n--------------\n\n* XSLT profiling support (``profile_run`` keyword)\n\n* countchildren() method on objectify.ObjectifiedElement\n\n* Support custom elements for tree nodes in lxml.objectify\n\nBugs fixed\n----------\n\n* lxml.objectify failed to support long data values (e.g., \"123L\")\n\n* Error messages from XSLT did not reach ``XSLT.error_log``\n\n* Factories objectify.Element() and objectify.DataElement() were missing\n  ``attrib`` and ``nsmap`` keyword arguments\n\n* Changing the default parser in lxml.objectify did not update the factories\n  Element() and DataElement()\n\n* Let lxml.objectify.Element() always generate tree elements (not data\n  elements)\n\n* Build under Windows failed ('\\0' bug in patched Pyrex version)\n\n\n1.1 (2006-09-13)\n================\n\nFeatures added\n--------------\n\n* Comments and processing instructions return '<!-- comment -->' and\n  '<?pi-target content?>' for repr()\n\n* Parsers are now the preferred (and default) place where element class lookup\n  schemes should be registered.  Namespace lookup is no longer supported by\n  default.\n\n* Support for Python 2.5 beta\n\n* Unlock the GIL for deep copying documents and for XPath()\n\n* New ``compact`` keyword argument for parsing read-only documents\n\n* Support for parser options in iterparse()\n\n* The ``namespace`` axis is supported in XPath and returns (prefix, URI)\n  tuples\n\n* The XPath expression \"/\" now returns an empty list instead of raising an\n  exception\n\n* XML-Object API on top of lxml (lxml.objectify)\n\n* Customizable Element class lookup:\n\n  * different pre-implemented lookup mechanisms\n\n  * support for externally provided lookup functions\n\n* Support for processing instructions (ET-like, not compatible)\n\n* Public C-level API for independent extension modules\n\n* Module level ``iterwalk()`` function as 'iterparse' for trees\n\n* Module level ``iterparse()`` function similar to ElementTree (see\n  documentation for differences)\n\n* Element.nsmap property returns a mapping of all namespace prefixes known at\n  the Element to their namespace URI\n\n* Reentrant threading support in RelaxNG, XMLSchema and XSLT\n\n* Threading support in parsers and serializers:\n\n  * All in-memory operations (tostring, parse(StringIO), etc.) free the GIL\n\n  * File operations (on file names) free the GIL\n\n  * Reading from file-like objects frees the GIL and reacquires it for reading\n\n  * Serialisation to file-like objects is single-threaded (high lock overhead)\n\n* Element iteration over XPath axes:\n\n  * Element.iterdescendants() iterates over the descendants of an element\n\n  * Element.iterancestors() iterates over the ancestors of an element (from\n    parent to parent)\n\n  * Element.itersiblings() iterates over either the following or preceding\n    siblings of an element\n\n  * Element.iterchildren() iterates over the children of an element in either\n    direction\n\n  * All iterators support the ``tag`` keyword argument to restrict the\n    generated elements\n\n* Element.getnext() and Element.getprevious() return the direct siblings of an\n  element\n\nBugs fixed\n----------\n\n* filenames with local 8-bit encoding were not supported\n\n* 1.1beta did not compile under Python 2.3\n\n* ignore unknown 'pyval' attribute values in objectify\n\n* objectify.ObjectifiedElement.addattr() failed to accept Elements and Lists\n\n* objectify.ObjectPath.setattr() failed to accept Elements and Lists\n\n* XPathSyntaxError now inherits from XPathError\n\n* Threading race conditions in RelaxNG and XMLSchema\n\n* Crash when mixing elements from XSLT results into other trees, concurrent\n  XSLT is only allowed when the stylesheet was parsed in the main thread\n\n* The EXSLT ``regexp:match`` function now works as defined (except for some\n  differences in the regular expression syntax)\n\n* Setting element.text to '' returned None on request, not the empty string\n\n* ``iterparse()`` could crash on long XML files\n\n* Creating documents no longer copies the parser for later URL resolving.  For\n  performance reasons, only a reference is kept.  Resolver updates on the\n  parser will now be reflected by documents that were parsed before the\n  change.  Although this should rarely become visible, it is a behavioral\n  change from 1.0.\n\n\n1.0.4 (2006-09-09)\n==================\n\nFeatures added\n--------------\n\n* List-like ``Element.extend()`` method\n\nBugs fixed\n----------\n\n* Crash in tail handling in ``Element.replace()``\n\n\n1.0.3 (2006-08-08)\n==================\n\nFeatures added\n--------------\n\n* Element.replace(old, new) method to replace a subelement by another one\n\nBugs fixed\n----------\n\n* Crash when mixing elements from XSLT results into other trees\n\n* Copying/deepcopying did not work for ElementTree objects\n\n* Setting an attribute to a non-string value did not raise an exception\n\n* Element.remove() deleted the tail text from the removed Element\n\n\n1.0.2 (2006-06-27)\n==================\n\nFeatures added\n--------------\n\n* Support for setting a custom default Element class as opposed to namespace\n  specific classes (which still override the default class)\n\nBugs fixed\n----------\n\n* Rare exceptions in Python list functions were not handled\n\n* Parsing accepted unicode strings with XML encoding declaration in certain\n  cases\n\n* Parsing 8-bit encoded strings from StringIO objects raised an exception\n\n* Module function ``initThread()`` was removed - useless (and never worked)\n\n* XSLT and parser exception messages include the error line number\n\n\n1.0.1 (2006-06-09)\n==================\n\nFeatures added\n--------------\n\n* Repeated calls to Element.attrib now efficiently return the same instance\n\nBugs fixed\n----------\n\n* Document deallocation could crash in certain garbage collection scenarios\n\n* Extension function calls in XSLT variable declarations could break the\n  stylesheet and crash on repeated calls\n\n* Deep copying Elements could lose namespaces declared in parents\n\n* Deep copying Elements did not copy tail\n\n* Parsing file(-like) objects failed to load external entities\n\n* Parsing 8-bit strings from file(-like) objects raised an exception\n\n* xsl:include failed when the stylesheet was parsed from a file-like object\n\n* lxml.sax.ElementTreeProducer did not call startDocument() / endDocument()\n\n* MSVC compiler complained about long strings (supports only 2048 bytes)\n\n\n1.0 (2006-06-01)\n================\n\nFeatures added\n--------------\n\n* Element.getiterator() and the findall() methods support finding arbitrary\n  elements from a namespace (pattern ``{namespace}*``)\n\n* Another speedup in tree iteration code\n\n* General speedup of Python Element object creation and deallocation\n\n* Writing C14N no longer serializes in memory (reduced memory footprint)\n\n* PyErrorLog for error logging through the Python ``logging`` module\n\n* ``Element.getroottree()`` returns an ElementTree for the root node of the\n  document that contains the element.\n\n* ElementTree.getpath(element) returns a simple, absolute XPath expression to\n  find the element in the tree structure\n\n* Error logs have a ``last_error`` attribute for convenience\n\n* Comment texts can be changed through the API\n\n* Formatted output via ``pretty_print`` keyword in serialization functions\n\n* XSLT can block access to file system and network via ``XSLTAccessControl``\n\n* ElementTree.write() no longer serializes in memory (reduced memory\n  footprint)\n\n* Speedup of Element.findall(tag) and Element.getiterator(tag)\n\n* Support for writing the XML representation of Elements and ElementTrees to\n  Python unicode strings via ``etree.tounicode()``\n\n* Support for writing XSLT results to Python unicode strings via ``unicode()``\n\n* Parsing a unicode string no longer copies the string (reduced memory\n  footprint)\n\n* Parsing file-like objects reads chunks rather than the whole file (reduced\n  memory footprint)\n\n* Parsing StringIO objects from the start avoids copying the string (reduced\n  memory footprint)\n\n* Read-only 'docinfo' attribute in ElementTree class holds DOCTYPE\n  information, original encoding and XML version as seen by the parser\n\n* etree module can be compiled without libxslt by commenting out the line\n  ``include \"xslt.pxi\"`` near the end of the etree.pyx source file\n\n* Better error messages in parser exceptions\n\n* Error reporting also works in XSLT\n\n* Support for custom document loaders (URI resolvers) in parsers and XSLT,\n  resolvers are registered at parser level\n\n* Implementation of exslt:regexp for XSLT based on the Python 're' module,\n  enabled by default, can be switched off with 'regexp=False' keyword argument\n\n* Support for exslt extensions (libexslt) and libxslt extra functions\n  (node-set, document, write, output)\n\n* Substantial speedup in XPath.evaluate()\n\n* HTMLParser for parsing (broken) HTML\n\n* XMLDTDID function parses XML into tuple (root node, ID dict) based on xml:id\n  implementation of libxml2 (as opposed to ET compatible XMLID)\n\nBugs fixed\n----------\n\n* Memory leak in Element.__setitem__\n\n* Memory leak in Element.attrib.items() and Element.attrib.values()\n\n* Memory leak in XPath extension functions\n\n* Memory leak in unicode related setup code\n\n* Element now raises ValueError on empty tag names\n\n* Namespace fixing after moving elements between documents could fail if the\n  source document was freed too early\n\n* Setting namespace-less tag names on namespaced elements ('{ns}t' -> 't')\n  didn't reset the namespace\n\n* Unknown constants from newer libxml2 versions could raise exceptions in the\n  error handlers\n\n* lxml.etree compiles much faster\n\n* On libxml2 <= 2.6.22, parsing strings with encoding declaration could fail\n  in certain cases\n\n* Document reference in ElementTree objects was not updated when the root\n  element was moved to a different document\n\n* Running absolute XPath expressions on an Element now evaluates against the\n  root tree\n\n* Evaluating absolute XPath expressions (``/*``) on an ElementTree could fail\n\n* Crashes when calling XSLT, RelaxNG, etc. with uninitialized ElementTree\n  objects\n\n* Removed public function ``initThreadLogging()``, replaced by more general\n  ``initThread()`` which fixes a number of setup problems in threads\n\n* Memory leak when using iconv encoders in tostring/write\n\n* Deep copying Elements and ElementTrees maintains the document information\n\n* Serialization functions raise LookupError for unknown encodings\n\n* Memory deallocation crash resulting from deep copying elements\n\n* Some ElementTree methods could crash if the root node was not initialized\n  (neither file nor element passed to the constructor)\n\n* Element/SubElement failed to set attribute namespaces from passed ``attrib``\n  dictionary\n\n* ``tostring()`` adds an XML declaration for non-ASCII encodings\n\n* ``tostring()`` failed to serialize encodings that contain 0-bytes\n\n* ElementTree.xpath() and XPathDocumentEvaluator were not using the\n  ElementTree root node as reference point\n\n* Calling ``document('')`` in XSLT failed to return the stylesheet\n\n\n0.9.2 (2006-05-10)\n==================\n\nFeatures added\n--------------\n\n* Speedup for Element.makeelement(): the new element reuses the original\n  libxml2 document instead of creating a new empty one\n\n* Speedup for reversed() iteration over element children (Py2.4+ only)\n\n* ElementTree compatible QName class\n\n* RelaxNG and XMLSchema accept any Element, not only ElementTrees\n\nBugs fixed\n----------\n\n* str(xslt_result) was broken for XSLT output other than UTF-8\n\n* Memory leak if write_c14n fails to write the file after conversion\n\n* Crash in XMLSchema and RelaxNG when passing non-schema documents\n\n* Memory leak in RelaxNG() when RelaxNGParseError is raised\n\n0.9.1 (2006-03-30)\n==================\n\nFeatures added\n--------------\n\n* lxml.sax.ElementTreeContentHandler checks closing elements and raises\n  SaxError on mismatch\n\n* lxml.sax.ElementTreeContentHandler supports namespace-less SAX events\n  (startElement, endElement) and defaults to empty attributes (keyword\n  argument)\n\n* Speedup for repeatedly accessing element tag names\n\n* Minor API performance improvements\n\nBugs fixed\n----------\n\n* Memory deallocation bug when using XSLT output method \"html\"\n\n* sax.py was handling UTF-8 encoded tag names where it shouldn't\n\n* lxml.tests package will no longer be installed (is still in source tar)\n\n0.9 (2006-03-20)\n================\n\nFeatures added\n--------------\n\n* Error logging API for libxml2 error messages\n\n* Various performance improvements\n\n* Benchmark script for lxml, ElementTree and cElementTree\n\n* Support for registering extension functions through new FunctionNamespace\n  class (see doc/extensions.txt)\n\n* ETXPath class for XPath expressions in ElementTree notation ('//{ns}tag')\n\n* Support for variables in XPath expressions (also in XPath class)\n\n* XPath class for compiled XPath expressions\n\n* XMLID module level function (ElementTree compatible)\n\n* XMLParser API for customized libxml2 parser configuration\n\n* Support for custom Element classes through new Namespace API (see\n  doc/namespace_extensions.txt)\n\n* Common exception base class LxmlError for module exceptions\n\n* real iterator support in iter(Element), Element.getiterator()\n\n* XSLT objects are callable, result trees support str()\n\n* Added MANIFEST.in for easier creation of RPM files.\n\n* 'getparent' method on elements allows navigation to an element's\n  parent element.\n\n* Python core compatible SAX tree builder and SAX event generator. See\n  doc/sax.txt for more information.\n\nBugs fixed\n----------\n\n* Segfaults and memory leaks in various API functions of Element\n\n* Segfault in XSLT.tostring()\n\n* ElementTree objects no longer interfere, Elements can be root of different\n  ElementTrees at the same time\n\n* document('') works in XSLT documents read from files (in-memory documents\n  cannot support this due to libxslt deficiencies)\n\n0.8 (2005-11-03)\n================\n\nFeatures added\n--------------\n\n* Support for copy.deepcopy() on elements. copy.copy() works also, but\n  does the same thing, and does *not* create a shallow copy, as that\n  makes no sense in the context of libxml2 trees. This means a\n  potential incompatibility with ElementTree, but there's more chance\n  that it works than if copy.copy() isn't supported at all.\n\n* Increased compatibility with (c)ElementTree; .parse() on ElementTree is\n  supported and parsing of gzipped XML files works.\n\n* implemented index() on elements, allowing one to find the index of a\n  SubElement.\n\nBugs fixed\n----------\n\n* Use xslt-config instead of xml2-config to find out libxml2\n  directories to take into account a case where libxslt is installed\n  in a different directory than libxslt.\n\n* Eliminate crash condition in iteration when text nodes are changed.\n\n* Passing 'None' to tostring() does not result in a segfault anymore,\n  but an AssertionError.\n\n* Some test fixes for Windows.\n\n* Raise XMLSyntaxError and XPathSyntaxError instead of plain python\n  syntax errors. This should be less confusing.\n\n* Fixed error with uncaught exception in Pyrex code.\n\n* Calling lxml.etree.fromstring('') throws XMLSyntaxError instead of a\n  segfault.\n\n* has_key() works on attrib. 'in' tests also work correctly on attrib.\n\n* INSTALL.txt was saying 2.2.16 instead of 2.6.16 as a supported\n  libxml2 version, as it should.\n\n* Passing a UTF-8 encoded string to the XML() function would fail;\n  fixed.\n\n0.7 (2005-06-15)\n================\n\nFeatures added\n--------------\n\n* parameters (XPath expressions) can be passed to XSLT using keyword\n  parameters.\n\n* Simple XInclude support. Calling the xinclude() method on a tree\n  will process any XInclude statements in the document.\n\n* XMLSchema support. Use the XMLSchema class or the convenience\n  xmlschema() method on a tree to do XML Schema (XSD) validation.\n\n* Added convenience xslt() method on tree. This is less efficient\n  than the XSLT object, but makes it easier to write quick code.\n\n* Added convenience relaxng() method on tree. This is less efficient\n  than the RelaxNG object, but makes it easier to write quick code.\n\n* Make it possible to use XPathEvaluator with elements as well. The\n  XPathEvaluator in this case will retain the element so multiple\n  XPath queries can be made against one element efficiently. This\n  replaces the second argument to the .evaluate() method that existed\n  previously.\n\n* Allow registerNamespace() to be called on an XPathEvaluator, after\n  creation, to add additional namespaces. Also allow registerNamespaces(),\n  which does the same for a namespace dictionary.\n\n* Add 'prefix' attribute to element to be able to read prefix information.\n  This is entirely read-only.\n\n* It is possible to supply an extra nsmap keyword parameter to\n  the Element() and SubElement() constructors, which supplies a\n  prefix to namespace URI mapping. This will create namespace\n  prefix declarations on these elements and these prefixes will show up\n  in XML serialization.\n\nBugs fixed\n----------\n\n* Killed yet another memory management related bug: trees created\n  using newDoc would not get a libxml2-level dictionary, which caused\n  problems when deallocating these documents later if they contained a\n  node that came from a document with a dictionary.\n\n* Moving namespaced elements between documents was problematic as\n  references to the original document would remain. This has been fixed\n  by applying xmlReconciliateNs() after each move operation.\n\n* Can pass None to 'dump()' without segfaults.\n\n* tostring() works properly for non-root elements as well.\n\n* Cleaned out the tostring() method so it should handle encoding\n  correctly.\n\n* Cleaned out the ElementTree.write() method so it should handle encoding\n  correctly. Writing directly to a file should also be faster, as there is no\n  need to go through a Python string in that case. Made sure the test cases\n  test both serializing to StringIO as well as serializing to a real file.\n\n0.6 (2005-05-14)\n================\n\nFeatures added\n--------------\n\n* Changed setup.py so that library_dirs is also guessed. This should\n  help with compilation on the Mac OS X platform, where otherwise the\n  wrong library (shipping with the OS) could be picked up.\n\n* Tweaked setup.py so that it picks up the version from version.txt.\n\nBugs fixed\n----------\n\n* Do the right thing when handling namespaced attributes.\n\n* fix bug where tostring() moved nodes into new documents. tostring()\n  had very nasty side-effects before this fix, sorry!\n\n0.5.1 (2005-04-09)\n==================\n\n* Python 2.2 compatibility fixes.\n\n* unicode fixes in Element() and Comment() as well as XML(); unicode\n  input wasn't properly being UTF-8 encoded.\n\n0.5 (2005-04-08)\n================\n\nInitial public release.\n", "lxml\n====\n\n.. meta::\n  :description: lxml - the most feature-rich and easy-to-use library for processing XML and HTML in the Python language\n  :keywords: Python XML, XML processing, HTML, lxml, simple XML, ElementTree, etree, lxml.etree, objectify, XML parsing, XML validation, XPath, XSLT\n\n.. class:: pagequote\n\n| `\u00bb lxml takes all the pain out of XML. \u00ab <https://mailman-mail5.webfaction.com/pipermail/lxml/20080131/019119.html>`_\n| Stephan Richter\n\n.. class:: eyecatcher\n\n     lxml is the most feature-rich\n     and easy-to-use library\n     for processing XML and HTML\n     in the Python language.\n\n.. \n   1  Introduction\n   2  Documentation\n   3  Download\n   4  Mailing list\n   5  Bug tracker\n   6  License\n   7  Old Versions\n\n\nIntroduction\n------------\n\nThe lxml XML toolkit is a Pythonic binding for the C libraries\nlibxml2_ and libxslt_.  It is unique in that it combines the speed and\nXML feature completeness of these libraries with the simplicity of a\nnative Python API, mostly compatible but superior to the well-known\nElementTree_ API.  The latest release works with all CPython versions\nfrom 2.7 to 3.9.  See the introduction_ for more information about\nbackground and goals of the lxml project.  Some common questions are\nanswered in the FAQ_.\n\n.. _libxml2: http://xmlsoft.org/\n.. _libxslt: http://xmlsoft.org/XSLT/\n\n.. _introduction: intro.html\n.. _FAQ:          FAQ.html\n\n\nDocumentation\n-------------\n\nThe complete lxml documentation is available for download as `PDF\ndocumentation`_.  The HTML documentation from this web site is part of\nthe normal `source download <#download>`_.\n\n* Tutorials:\n\n  * the `lxml.etree tutorial for XML processing`_\n\n  * John Shipman's tutorial on `Python XML processing with lxml`_\n\n  * Fredrik Lundh's `tutorial for ElementTree`_\n\n* ElementTree:\n\n  * `ElementTree API`_\n\n  * compatibility_ and differences of lxml.etree\n\n  * `ElementTree performance`_ characteristics and comparison\n\n* lxml.etree:\n\n  * `lxml.etree specific API`_ documentation\n\n  * the `generated API documentation`_ as a reference\n\n  * parsing_ and validating_ XML\n\n  * `XPath and XSLT`_ support\n\n  * Python `XPath extension functions`_ for XPath and XSLT\n\n  * `custom XML element classes`_ for custom XML APIs (see `EuroPython 2008 talk`_)\n\n  * a `SAX compliant API`_ for interfacing with other XML tools\n\n  * a `C-level API`_ for interfacing with external C/Cython modules\n\n* lxml.objectify:\n\n  * `lxml.objectify`_ API documentation\n\n  * a brief comparison of `objectify and etree`_\n\nlxml.etree follows the ElementTree_ API as much as possible, building\nit on top of the native libxml2 tree.  If you are new to ElementTree,\nstart with the `lxml.etree tutorial for XML processing`_.  See also the\nElementTree compatibility_ overview and the `ElementTree performance`_\npage comparing lxml to the original ElementTree_ and cElementTree_\nimplementations.\n\nRight after the `lxml.etree tutorial for XML processing`_ and the\nElementTree_ documentation, the next place to look is the `lxml.etree\nspecific API`_ documentation.  It describes how lxml extends the\nElementTree API to expose libxml2 and libxslt specific XML\nfunctionality, such as XPath_, `Relax NG`_, `XML Schema`_, XSLT_, and\n`c14n`_ (including `c14n 2.0`_).\nPython code can be called from XPath expressions and XSLT\nstylesheets through the use of `XPath extension functions`_.  lxml\nalso offers a `SAX compliant API`_, that works with the SAX support in\nthe standard library.\n\nThere is a separate module `lxml.objectify`_ that implements a data-binding\nAPI on top of lxml.etree.  See the `objectify and etree`_ FAQ entry for a\ncomparison.\n\nIn addition to the ElementTree API, lxml also features a sophisticated\nAPI for `custom XML element classes`_.  This is a simple way to write\narbitrary XML driven APIs on top of lxml.  lxml.etree also has a\n`C-level API`_ that can be used to efficiently extend lxml.etree in\nexternal C modules, including fast custom element class support.\n\n.. _ElementTree:  http://effbot.org/zone/element-index.htm\n.. _`ElementTree API`:  http://effbot.org/zone/element-index.htm#documentation\n.. _cElementTree: http://effbot.org/zone/celementtree.htm\n\n.. _`tutorial for ElementTree`: http://effbot.org/zone/element.htm\n.. _`lxml.etree tutorial for XML processing`: tutorial.html\n.. _`Python XML processing with lxml`: http://www.nmt.edu/tcc/help/pubs/pylxml/\n.. _`generated API documentation`:   api/index.html\n.. _`ElementTree performance`: performance.html\n.. _`compatibility`: compatibility.html\n.. _`lxml.etree specific API`: api.html\n.. _`parsing`: parsing.html\n.. _`validating`: validation.html\n.. _`XPath and XSLT`: xpathxslt.html\n.. _`XPath extension functions`: extensions.html\n.. _`custom XML element classes`: element_classes.html\n.. _`SAX compliant API`: sax.html\n.. _`C-level API`: capi.html\n.. _`lxml.objectify`: objectify.html\n.. _`objectify and etree`: FAQ.html#what-is-the-difference-between-lxml-etree-and-lxml-objectify\n.. _`EuroPython 2008 talk`: s5/lxml-ep2008.html\n\n.. _XPath: https://www.w3.org/TR/xpath/\n.. _`Relax NG`: https://relaxng.org/\n.. _`XML Schema`: https://www.w3.org/XML/Schema\n.. _`XSLT`: https://www.w3.org/TR/xslt\n.. _`c14n`: https://www.w3.org/TR/xml-c14n\n.. _`c14n 2.0`: https://www.w3.org/TR/xml-c14n2\n\n\nDownload\n--------\n\nThe best way to download lxml is to visit `lxml at the Python Package\nIndex <http://pypi.python.org/pypi/lxml/>`_ (PyPI).  It has the source\nthat compiles on various platforms.  The source distribution is signed\nwith `this key <pubkey.asc>`_.\n\nThe latest version is `lxml 4.6.3`_, released 2021-03-21\n(`changes for 4.6.3`_).  `Older versions <#old-versions>`_\nare listed below.\n\nPlease take a look at the\n`installation instructions <installation.html>`_ !\n\nThis complete web site (including the generated API documentation) is\npart of the source distribution, so if you want to download the\ndocumentation for offline use, take the source archive and copy the\n``doc/html`` directory out of the source tree, or use the\n`PDF documentation`_.\n\nThe latest `installable developer sources <https://github.com/lxml/lxml/archive/master.zip>`_\nare available from Github.  It's also possible to check out\nthe latest development version of lxml from Github directly, using a command\nlike this (assuming you use hg and have hg-git installed)::\n\n  hg clone git+ssh://git@github.com/lxml/lxml.git lxml\n\nAlternatively, if you use git, this should work as well::\n\n  git clone https://github.com/lxml/lxml.git lxml\n\nYou can browse the `source repository`_ and its history through\nthe web.  Please read `how to build lxml from source <build.html>`_\nfirst.  The `latest CHANGES`_ of the developer version are also\naccessible.  You can check there if a bug you found has been fixed\nor a feature you want has been implemented in the latest trunk version.\n\n.. _`source repository`: https://github.com/lxml/lxml/\n.. _`latest CHANGES`: https://github.com/lxml/lxml/blob/master/CHANGES.txt\n\n\nMailing list\n------------\n\nQuestions? Suggestions? Code to contribute? We have a `mailing list`_.\n\nYou can search the archive with Gmane_ or Google_.\n\n.. _`mailing list`: http://lxml.de/mailinglist/\n.. _Gmane: http://blog.gmane.org/gmane.comp.python.lxml.devel\n.. _Google: http://www.google.com/webhp?q=site:comments.gmane.org%2Fgmane.comp.python.lxml.devel+\n\n\nBug tracker\n-----------\n\nlxml uses the `launchpad bug tracker`_.  If you are sure you found a\nbug in lxml, please file a bug report there.  If you are not sure\nwhether some unexpected behaviour of lxml is a bug or not, please\ncheck the documentation and ask on the `mailing list`_ first.  Do not\nforget to search the archive (e.g. with Gmane_)!\n\n.. _`launchpad bug tracker`: https://launchpad.net/lxml/\n\n\nLicense\n-------\n\nThe lxml library is shipped under a `BSD license`_. libxml2 and libxslt2\nitself are shipped under the `MIT license`_. There should therefore be no\nobstacle to using lxml in your codebase.\n\n.. _`BSD license`: https://github.com/lxml/lxml/blob/master/doc/licenses/BSD.txt\n.. _`MIT license`: http://www.opensource.org/licenses/mit-license.html\n\n\nOld Versions\n------------\n\nSee the websites of lxml\n`4.5 <http://lxml.de/4.5/>`_,\n`4.4 <http://lxml.de/4.4/>`_,\n`4.3 <http://lxml.de/4.3/>`_,\n`4.2 <http://lxml.de/4.2/>`_,\n`4.1 <http://lxml.de/4.1/>`_,\n`4.0 <http://lxml.de/4.0/>`_,\n`3.8 <http://lxml.de/3.8/>`_,\n`3.7 <http://lxml.de/3.7/>`_,\n`3.6 <http://lxml.de/3.6/>`_,\n`3.5 <http://lxml.de/3.5/>`_,\n`3.4 <http://lxml.de/3.4/>`_,\n`3.3 <http://lxml.de/3.3/>`_,\n`3.2 <http://lxml.de/3.2/>`_,\n`3.1 <http://lxml.de/3.1/>`_,\n`3.0 <http://lxml.de/3.0/>`_,\n`2.3 <http://lxml.de/2.3/>`_,\n`2.2 <http://lxml.de/2.2/>`_,\n`2.1 <http://lxml.de/2.1/>`_,\n`2.0 <http://lxml.de/2.0/>`_,\n`1.3 <http://lxml.de/1.3/>`_\n\n..\n   and the `latest in-development version <http://lxml.de/dev/>`_.\n\n.. _`PDF documentation`: lxmldoc-4.6.3.pdf\n\n* `lxml 4.6.3`_, released 2021-03-21 (`changes for 4.6.3`_)\n\n* `lxml 4.6.2`_, released 2020-11-26 (`changes for 4.6.2`_)\n\n* `lxml 4.6.1`_, released 2020-10-18 (`changes for 4.6.1`_)\n\n* `lxml 4.6.0`_, released 2020-10-17 (`changes for 4.6.0`_)\n\n* `lxml 4.5.2`_, released 2020-07-09 (`changes for 4.5.2`_)\n\n* `lxml 4.5.1`_, released 2020-05-19 (`changes for 4.5.1`_)\n\n* `lxml 4.5.0`_, released 2020-01-29 (`changes for 4.5.0`_)\n\n* `lxml 4.4.3`_, released 2020-01-28 (`changes for 4.4.3`_)\n\n* `lxml 4.4.2`_, released 2019-11-25 (`changes for 4.4.2`_)\n\n* `lxml 4.4.1`_, released 2019-08-11 (`changes for 4.4.1`_)\n\n* `lxml 4.4.0`_, released 2019-07-27 (`changes for 4.4.0`_)\n\n* `older releases <http://lxml.de/4.3/#old-versions>`_\n\n.. _`lxml 4.6.3`: /files/lxml-4.6.3.tgz\n.. _`lxml 4.6.2`: /files/lxml-4.6.2.tgz\n.. _`lxml 4.6.1`: /files/lxml-4.6.1.tgz\n.. _`lxml 4.6.0`: /files/lxml-4.6.0.tgz\n.. _`lxml 4.5.2`: /files/lxml-4.5.2.tgz\n.. _`lxml 4.5.1`: /files/lxml-4.5.1.tgz\n.. _`lxml 4.5.0`: /files/lxml-4.5.0.tgz\n.. _`lxml 4.4.3`: /files/lxml-4.4.3.tgz\n.. _`lxml 4.4.2`: /files/lxml-4.4.2.tgz\n.. _`lxml 4.4.1`: /files/lxml-4.4.1.tgz\n.. _`lxml 4.4.0`: /files/lxml-4.4.0.tgz\n\n.. _`changes for 4.6.3`: /changes-4.6.3.html\n.. _`changes for 4.6.2`: /changes-4.6.2.html\n.. _`changes for 4.6.1`: /changes-4.6.1.html\n.. _`changes for 4.6.0`: /changes-4.6.0.html\n.. _`changes for 4.5.2`: /changes-4.5.2.html\n.. _`changes for 4.5.1`: /changes-4.5.1.html\n.. _`changes for 4.5.0`: /changes-4.5.0.html\n.. _`changes for 4.4.3`: /changes-4.4.3.html\n.. _`changes for 4.4.2`: /changes-4.4.2.html\n.. _`changes for 4.4.1`: /changes-4.4.1.html\n.. _`changes for 4.4.0`: /changes-4.4.0.html\n", "# this is a package\n\n__version__ = \"4.6.3\"\n\n\ndef get_include():\n    \"\"\"\n    Returns a list of header include paths (for lxml itself, libxml2\n    and libxslt) needed to compile C code against lxml if it was built\n    with statically linked libraries.\n    \"\"\"\n    import os\n    lxml_path = __path__[0]\n    include_path = os.path.join(lxml_path, 'includes')\n    includes = [include_path, lxml_path]\n\n    for name in os.listdir(include_path):\n        path = os.path.join(include_path, name)\n        if os.path.isdir(path):\n            includes.append(path)\n\n    return includes\n\n"], "filenames": ["CHANGES.txt", "doc/main.txt", "src/lxml/__init__.py"], "buggy_code_start_loc": [3, 162, 3], "buggy_code_end_loc": [3, 293, 4], "fixing_code_start_loc": [4, 162, 3], "fixing_code_end_loc": [15, 298, 4], "type": "CWE-79", "message": "An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3.", "other": {"cve": {"id": "CVE-2021-28957", "sourceIdentifier": "cve@mitre.org", "published": "2021-03-21T05:15:13.367", "lastModified": "2022-12-09T18:15:50.807", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3."}, {"lang": "es", "value": "Se ha descubierto una vulnerabilidad XSS en las versiones del m\u00f3dulo clean de python-lxml anteriores a la versi\u00f3n 4.6.3. Al desactivar los argumentos safe_attrs_only y forms, la clase Cleaner no elimina el atributo formaction, lo que permite que JS eluda el sanitizador. Un atacante remoto podr\u00eda aprovechar este fallo para ejecutar c\u00f3digo JS arbitrario en usuarios que interact\u00faen con HTML incorrectamente saneado. Este problema est\u00e1 parcheado en lxml  versi\u00f3n 4.6.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:lxml:lxml:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.6.3", "matchCriteriaId": "2BADE2D9-D321-4DB0-839C-EB11673439DD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netapp:snapcenter:-:*:*:*:*:*:*:*", "matchCriteriaId": "BDFB1169-41A0-4A86-8E4F-FDA9730B1E94"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:zfs_storage_appliance_kit:8.8:*:*:*:*:*:*:*", "matchCriteriaId": "D3E503FB-6279-4D4A-91D8-E237ECF9D2B0"}]}]}], "references": [{"url": "https://bugs.launchpad.net/lxml/+bug/1888153", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/lxml/lxml/commit/a5f9cb52079dc57477c460dbe6ba0f775e14a999", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/lxml/lxml/pull/316/commits/10ec1b4e9f93713513a3264ed6158af22492f270", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/03/msg00031.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3C2R44VDUY7FJVMAVRZ2WY7XYL4SVN45/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XXN3QPWCTQVOGW4BMWV3AUUZZ4NRZNSQ/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-06", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20210521-0004/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2021/dsa-4880", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/lxml/lxml/commit/a5f9cb52079dc57477c460dbe6ba0f775e14a999"}}