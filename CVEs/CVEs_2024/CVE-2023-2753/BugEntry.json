{"buggy_code": ["<?php\n\n/**\n * Helper class for phpMyFAQ FAQs.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-11-12\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse DOMDocument;\nuse Exception;\nuse ParsedownExtra;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Language\\LanguageCodes;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\Utils;\n\n/**\n * Class FaqHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass FaqHelper extends Helper\n{\n    /**\n     * Constructor.\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Rewrites the CSS class generated by TinyMCE for HighlightJS.\n     */\n    public function renderMarkupContent(string $answer): string\n    {\n        return str_replace('class=\"language-markup\"', 'class=\"language-html\"', $answer);\n    }\n\n    /**\n     * Extends URL fragments (e.g. <a href=\"#foo\">) with the full default URL.\n     */\n    public function rewriteUrlFragments(string $answer, string $currentUrl): string\n    {\n        return str_replace('href=\"#', 'href=\"' . $currentUrl . '#', $answer);\n    }\n\n    /**\n     * Renders a Share on Twitter link.\n     */\n    public function renderTwitterShareLink(string $url): string\n    {\n        if (empty($url) || $this->config->get('socialnetworks.disableAll')) {\n            return '';\n        }\n\n        return sprintf(\n            '<i aria-hidden=\"true\" class=\"fa fa-twitter\"></i>' .\n            '<a rel=\"nofollow\" href=\"%s\" target=\"_blank\" class=\"text-decoration-none\">Twitter</a>',\n            $url\n        );\n    }\n\n    /**\n     * Renders a \"Send to friend\" HTML snippet.\n     */\n    public function renderSendToFriend(string $url): string\n    {\n        if (empty($url) || !$this->config->get('main.enableSendToFriend')) {\n            return '';\n        }\n\n        return sprintf(\n            '<i aria-hidden=\"true\" class=\"fa fa-envelope\"></i>' .\n            '<a rel=\"nofollow\" href=\"%s\" class=\"text-decoration-none\">%s</a>',\n            $url,\n            Translation::get('msgSend2Friend')\n        );\n    }\n\n\n    /**\n     * Renders a select box with all translations of a FAQ.\n     */\n    public function renderChangeLanguageSelector(Faq $faq, int $categoryId): string\n    {\n        $html = '';\n        $faqUrl = sprintf(\n            '?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%%s',\n            $categoryId,\n            $faq->faqRecord['id']\n        );\n\n        $oLink = new Link($this->config->getDefaultUrl() . $faqUrl, $this->config);\n        $oLink->itemTitle = $faq->faqRecord['title'];\n        $availableLanguages = $this->config->getLanguage()->isLanguageAvailable($faq->faqRecord['id']);\n\n        if ((is_countable($availableLanguages) ? count($availableLanguages) : 0) > 1) {\n            $html = '<form method=\"post\">';\n            $html .= '<select name=\"language\" onchange=\"top.location.href = this.options[this.selectedIndex].value;\">';\n\n            foreach ($availableLanguages as $language) {\n                $html .= sprintf('<option value=\"%s\"', sprintf($oLink->toString(), $language));\n                $html .= ($faq->faqRecord['lang'] === $language ? ' selected' : '');\n                $html .= sprintf('>%s</option>', LanguageCodes::get($language));\n            }\n\n            $html .= '</select></form>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a preview of the answer.\n     *\n     * @throws Exception\n     */\n    public function renderAnswerPreview(string $answer, int $numWords): string\n    {\n        if ($this->config->get('main.enableMarkdownEditor')) {\n            $parseDown = new ParsedownExtra();\n            return Utils::chopString(strip_tags((string) $parseDown->text($answer)), $numWords);\n        } else {\n            return Utils::chopString(strip_tags($answer), $numWords);\n        }\n    }\n\n    /**\n     * Creates an overview with all categories with their FAQs.\n     *\n     * @throws Exception\n     */\n    public function createOverview(Category $category, Faq $faq, string $language = ''): string\n    {\n        $output = '';\n\n        // Initialize categories\n        $category->transform(0);\n\n        // Get all FAQs\n        $faq->getAllRecords(FAQ_SORTING_TYPE_CATID_FAQID, ['lang' => $language]);\n        $date = new Date($this->config);\n\n        if (count($faq->faqRecords)) {\n            $lastCategory = 0;\n            foreach ($faq->faqRecords as $data) {\n                if ($data['category_id'] !== $lastCategory) {\n                    $output .= sprintf('<h3>%s</h3>', $category->getPath($data['category_id'], ' &raquo; '));\n                }\n\n                $output .= sprintf('<h4>%s</h4>', Strings::htmlentities($data['title']));\n                $output .= sprintf('<article>%s</article>', $data['content']);\n                $output .= sprintf(\n                    '<p>%s: %s<br>%s',\n                    Translation::get('msgAuthor'),\n                    Strings::htmlentities($data['author']),\n                    Translation::get('msgLastUpdateArticle') . $date->format($data['updated'])\n                );\n                $output .= '<hr>';\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Creates a list of links with available languages to edit a FAQ\n     * in the admin backend.\n     */\n    public function createFaqTranslationLinkList(int $faqId, int $categoryId, string $faqLang): string\n    {\n        $output = '';\n\n        $availableLanguages = $this->config->getLanguage()->isLanguageAvailable($categoryId, 'faqcategories');\n        foreach ($availableLanguages as $languageCode) {\n            if ($languageCode !== $faqLang) {\n                $output .= sprintf(\n                    '<a class=\"dropdown-item\" href=\"?action=editentry&id=%d&cat=%d&translateTo=%s\">%s %s</a>',\n                    $faqId,\n                    $categoryId,\n                    $languageCode,\n                    'Translate to',\n                    LanguageCodes::get($languageCode)\n                );\n            } else {\n                $output .= '<a class=\"dropdown-item\">n/a</a>';\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns the URL for a given FAQ Entity and category ID.\n     * @param FaqEntity $faqEntity\n     * @param int       $categoryId\n     * @return string\n     */\n    public function createFaqUrl(FaqEntity $faqEntity, int $categoryId): string\n    {\n        return sprintf(\n            '%s?action=faq&cat=%d&id=%d&artlang=%s',\n            $this->config->getDefaultUrl() . 'index.php',\n            $categoryId,\n            $faqEntity->getId(),\n            $faqEntity->getLanguage()\n        );\n    }\n\n    /**\n     * Remove <script> tags, we don't need them\n     *\n     * @param string $content\n     * @return string\n     */\n    public function cleanUpContent(string $content): string\n    {\n        $document = new DOMDocument();\n        $document->loadHTML($content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);\n\n        $scriptTags = $document->getElementsByTagName('script');\n\n        for ($i = 0; $i < $scriptTags->length; $i++) {\n            $scriptTags->item($i)->parentNode->removeChild($scriptTags->item($i));\n        }\n\n        return preg_replace(['/\\r/', '/\\n/'], '', $document->saveHTML());\n    }\n}\n", "<?php\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Database\\Sqlite3;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\System;\nuse PHPUnit\\Framework\\TestCase;\n\nclass FaqHelperTest extends TestCase\n{\n    /** @var Configuration */\n    private Configuration $configuration;\n\n    /** @var FaqHelper*/\n    private FaqHelper $faqHelper;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $dbHandle = new Sqlite3();\n        $dbHandle->connect(PMF_TEST_DIR . '/test.db', '', '');\n        $this->configuration = new Configuration($dbHandle);\n        $this->configuration->set('main.currentVersion', System::getVersion());\n        $this->configuration->set('main.referenceURL', 'https://localhost:443/');\n\n        $this->faqHelper = new FaqHelper($this->configuration);\n    }\n\n    public function testRenderMarkupContent(): void\n    {\n        $this->assertEquals(\n            '<div class=\"language-html\">Foobar</div>',\n            $this->faqHelper->renderMarkupContent('<div class=\"language-markup\">Foobar</div>')\n        );\n    }\n\n    public function testRewriteUrlFragments(): void\n    {\n        $content = '<a href=\"#Foobar\">Hello, World</a>';\n        $result = $this->faqHelper->rewriteUrlFragments($content, 'https://localhost:443/');\n\n        $this->assertEquals(\n            '<a href=\"https://localhost:443/#Foobar\">Hello, World</a>',\n            $result\n        );\n    }\n    public function testCreateFaqUrl(): void\n    {\n        $faqEntity = new FaqEntity();\n        $faqEntity\n            ->setId(42)\n            ->setLanguage('de');\n\n        $this->assertEquals(\n            'https://localhost:443/index.php?action=faq&cat=1&id=42&artlang=de',\n            $this->faqHelper->createFaqUrl($faqEntity, 1)\n        );\n    }\n\n    public function testCleanUpContent(): void\n    {\n        $content = '<p>Some text <script>alert(\"Hello, world!\");</script></p>';\n        $expectedOutput = '<p>Some text </p>';\n\n        $actualOutput = $this->faqHelper->cleanUpContent($content);\n\n        $this->assertEquals($expectedOutput, $actualOutput);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Helper class for phpMyFAQ FAQs.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-11-12\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse DOMDocument;\nuse DOMXPath;\nuse Exception;\nuse ParsedownExtra;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Language\\LanguageCodes;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\Utils;\n\n/**\n * Class FaqHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass FaqHelper extends Helper\n{\n    /**\n     * Constructor.\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Rewrites the CSS class generated by TinyMCE for HighlightJS.\n     */\n    public function renderMarkupContent(string $answer): string\n    {\n        return str_replace('class=\"language-markup\"', 'class=\"language-html\"', $answer);\n    }\n\n    /**\n     * Extends URL fragments (e.g. <a href=\"#foo\">) with the full default URL.\n     */\n    public function rewriteUrlFragments(string $answer, string $currentUrl): string\n    {\n        return str_replace('href=\"#', 'href=\"' . $currentUrl . '#', $answer);\n    }\n\n    /**\n     * Renders a Share on Twitter link.\n     */\n    public function renderTwitterShareLink(string $url): string\n    {\n        if (empty($url) || $this->config->get('socialnetworks.disableAll')) {\n            return '';\n        }\n\n        return sprintf(\n            '<i aria-hidden=\"true\" class=\"fa fa-twitter\"></i>' .\n            '<a rel=\"nofollow\" href=\"%s\" target=\"_blank\" class=\"text-decoration-none\">Twitter</a>',\n            $url\n        );\n    }\n\n    /**\n     * Renders a \"Send to friend\" HTML snippet.\n     */\n    public function renderSendToFriend(string $url): string\n    {\n        if (empty($url) || !$this->config->get('main.enableSendToFriend')) {\n            return '';\n        }\n\n        return sprintf(\n            '<i aria-hidden=\"true\" class=\"fa fa-envelope\"></i>' .\n            '<a rel=\"nofollow\" href=\"%s\" class=\"text-decoration-none\">%s</a>',\n            $url,\n            Translation::get('msgSend2Friend')\n        );\n    }\n\n\n    /**\n     * Renders a select box with all translations of a FAQ.\n     */\n    public function renderChangeLanguageSelector(Faq $faq, int $categoryId): string\n    {\n        $html = '';\n        $faqUrl = sprintf(\n            '?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%%s',\n            $categoryId,\n            $faq->faqRecord['id']\n        );\n\n        $oLink = new Link($this->config->getDefaultUrl() . $faqUrl, $this->config);\n        $oLink->itemTitle = $faq->faqRecord['title'];\n        $availableLanguages = $this->config->getLanguage()->isLanguageAvailable($faq->faqRecord['id']);\n\n        if ((is_countable($availableLanguages) ? count($availableLanguages) : 0) > 1) {\n            $html = '<form method=\"post\">';\n            $html .= '<select name=\"language\" onchange=\"top.location.href = this.options[this.selectedIndex].value;\">';\n\n            foreach ($availableLanguages as $language) {\n                $html .= sprintf('<option value=\"%s\"', sprintf($oLink->toString(), $language));\n                $html .= ($faq->faqRecord['lang'] === $language ? ' selected' : '');\n                $html .= sprintf('>%s</option>', LanguageCodes::get($language));\n            }\n\n            $html .= '</select></form>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a preview of the answer.\n     *\n     * @throws Exception\n     */\n    public function renderAnswerPreview(string $answer, int $numWords): string\n    {\n        if ($this->config->get('main.enableMarkdownEditor')) {\n            $parseDown = new ParsedownExtra();\n            return Utils::chopString(strip_tags((string) $parseDown->text($answer)), $numWords);\n        } else {\n            return Utils::chopString(strip_tags($answer), $numWords);\n        }\n    }\n\n    /**\n     * Creates an overview with all categories with their FAQs.\n     *\n     * @throws Exception\n     */\n    public function createOverview(Category $category, Faq $faq, string $language = ''): string\n    {\n        $output = '';\n\n        // Initialize categories\n        $category->transform(0);\n\n        // Get all FAQs\n        $faq->getAllRecords(FAQ_SORTING_TYPE_CATID_FAQID, ['lang' => $language]);\n        $date = new Date($this->config);\n\n        if (count($faq->faqRecords)) {\n            $lastCategory = 0;\n            foreach ($faq->faqRecords as $data) {\n                if ($data['category_id'] !== $lastCategory) {\n                    $output .= sprintf('<h3>%s</h3>', $category->getPath($data['category_id'], ' &raquo; '));\n                }\n\n                $output .= sprintf('<h4>%s</h4>', Strings::htmlentities($data['title']));\n                $output .= sprintf('<article>%s</article>', $data['content']);\n                $output .= sprintf(\n                    '<p>%s: %s<br>%s',\n                    Translation::get('msgAuthor'),\n                    Strings::htmlentities($data['author']),\n                    Translation::get('msgLastUpdateArticle') . $date->format($data['updated'])\n                );\n                $output .= '<hr>';\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Creates a list of links with available languages to edit a FAQ\n     * in the admin backend.\n     */\n    public function createFaqTranslationLinkList(int $faqId, int $categoryId, string $faqLang): string\n    {\n        $output = '';\n\n        $availableLanguages = $this->config->getLanguage()->isLanguageAvailable($categoryId, 'faqcategories');\n        foreach ($availableLanguages as $languageCode) {\n            if ($languageCode !== $faqLang) {\n                $output .= sprintf(\n                    '<a class=\"dropdown-item\" href=\"?action=editentry&id=%d&cat=%d&translateTo=%s\">%s %s</a>',\n                    $faqId,\n                    $categoryId,\n                    $languageCode,\n                    'Translate to',\n                    LanguageCodes::get($languageCode)\n                );\n            } else {\n                $output .= '<a class=\"dropdown-item\">n/a</a>';\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns the URL for a given FAQ Entity and category ID.\n     * @param FaqEntity $faqEntity\n     * @param int       $categoryId\n     * @return string\n     */\n    public function createFaqUrl(FaqEntity $faqEntity, int $categoryId): string\n    {\n        return sprintf(\n            '%s?action=faq&cat=%d&id=%d&artlang=%s',\n            $this->config->getDefaultUrl() . 'index.php',\n            $categoryId,\n            $faqEntity->getId(),\n            $faqEntity->getLanguage()\n        );\n    }\n\n    /**\n     * Remove <script> tags, we don't need them\n     *\n     * @param string $content\n     * @return string\n     */\n    public function cleanUpContent(string $content): string\n    {\n        $document = new DOMDocument();\n        $document->loadHTML($content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);\n\n        $scriptTags = $document->getElementsByTagName('script');\n\n        for ($i = 0; $i < $scriptTags->length; $i++) {\n            $scriptTags->item($i)->parentNode->removeChild($scriptTags->item($i));\n        }\n\n        $xpath = new DOMXPath($document);\n        $onAttributes = $xpath->query(\"//*/@*[starts-with(name(), 'on')]\");\n        foreach ($onAttributes as $onAttribute) {\n            $onAttribute->ownerElement->removeAttributeNode($onAttribute);\n        }\n\n        $body = $xpath->query('body')->item(0);\n\n        return preg_replace(['/\\r/', '/\\n/'], '', $document->saveHTML($body));\n    }\n}\n", "<?php\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Database\\Sqlite3;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\System;\nuse PHPUnit\\Framework\\TestCase;\n\nclass FaqHelperTest extends TestCase\n{\n    /** @var Configuration */\n    private Configuration $configuration;\n\n    /** @var FaqHelper*/\n    private FaqHelper $faqHelper;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $dbHandle = new Sqlite3();\n        $dbHandle->connect(PMF_TEST_DIR . '/test.db', '', '');\n        $this->configuration = new Configuration($dbHandle);\n        $this->configuration->set('main.currentVersion', System::getVersion());\n        $this->configuration->set('main.referenceURL', 'https://localhost:443/');\n\n        $this->faqHelper = new FaqHelper($this->configuration);\n    }\n\n    public function testRenderMarkupContent(): void\n    {\n        $this->assertEquals(\n            '<div class=\"language-html\">Foobar</div>',\n            $this->faqHelper->renderMarkupContent('<div class=\"language-markup\">Foobar</div>')\n        );\n    }\n\n    public function testRewriteUrlFragments(): void\n    {\n        $content = '<a href=\"#Foobar\">Hello, World</a>';\n        $result = $this->faqHelper->rewriteUrlFragments($content, 'https://localhost:443/');\n\n        $this->assertEquals(\n            '<a href=\"https://localhost:443/#Foobar\">Hello, World</a>',\n            $result\n        );\n    }\n    public function testCreateFaqUrl(): void\n    {\n        $faqEntity = new FaqEntity();\n        $faqEntity\n            ->setId(42)\n            ->setLanguage('de');\n\n        $this->assertEquals(\n            'https://localhost:443/index.php?action=faq&cat=1&id=42&artlang=de',\n            $this->faqHelper->createFaqUrl($faqEntity, 1)\n        );\n    }\n\n    public function testCleanUpContent(): void\n    {\n        $content = '<p>Some text <script>alert(\"Hello, world!\");</script><img src=foo onerror=alert(document.cookie)></p>';\n        $expectedOutput = '<p>Some text <img src=\"foo\"></p>';\n\n        $actualOutput = $this->faqHelper->cleanUpContent($content);\n\n        $this->assertEquals($expectedOutput, $actualOutput);\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Helper/FaqHelper.php", "tests/phpMyFAQ/Helper/FaqHelperTest.php"], "buggy_code_start_loc": [20, 65], "buggy_code_end_loc": [249, 67], "fixing_code_start_loc": [21, 65], "fixing_code_end_loc": [258, 67], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.2.0-beta.", "other": {"cve": {"id": "CVE-2023-2753", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-17T08:15:08.837", "lastModified": "2023-05-24T15:18:44.767", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.2.0-beta."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.2.0", "matchCriteriaId": "972DB9E1-96EB-4DEC-8A58-14DDF7B8A7E2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:3.2.0:alpha:*:*:*:*:*:*", "matchCriteriaId": "71D0A0BD-EC7D-47C7-8C0F-716EE0843E52"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/5401ab75d022932b8d5d7adaa771acf44fed18ba", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/eca2284d-e81a-4ab8-91bb-7afeca557628", "source": "security@huntr.dev", "tags": ["Broken Link", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/5401ab75d022932b8d5d7adaa771acf44fed18ba"}}