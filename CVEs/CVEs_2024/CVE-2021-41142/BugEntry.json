{"buggy_code": ["<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFileFullRepresentation;\n\n/**\n * Manage values in changeset for files fields\n */\nclass Tracker_Artifact_ChangesetValue_File extends Tracker_Artifact_ChangesetValue implements Countable, ArrayAccess, Iterator\n{\n\n    /**\n     * @var array of Tracker_FileInfo\n     */\n    protected $files;\n\n    public function __construct($id, Tracker_Artifact_Changeset $changeset, $field, $has_changed, $files)\n    {\n        parent::__construct($id, $changeset, $field, $has_changed);\n        $this->files = $files;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function accept(Tracker_Artifact_ChangesetValueVisitor $visitor)\n    {\n        return $visitor->visitFile($this);\n    }\n\n    /**\n     * spl\\Countable\n     *\n     * @return int the number of files\n     */\n    public function count()\n    {\n        return count($this->files);\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int|string $offset to retrieve\n     *\n     * @return mixed value at given offset\n     */\n    public function offsetGet($offset)\n    {\n        return $this->files[$offset];\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int   $offset to modify\n     * @param mixed $value  new value\n     *\n     * @return void\n     */\n    public function offsetSet($offset, $value)\n    {\n        $this->files[$offset] = $value;\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int $offset to check\n     *\n     * @return bool wether the offset exists\n     */\n    public function offsetExists($offset)\n    {\n        return isset($this->files[$offset]);\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int $offset to delete\n     *\n     * @return void\n     */\n    public function offsetUnset($offset)\n    {\n        unset($this->files[$offset]);\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * The internal pointer to traverse the collection\n     * @var int\n     */\n    protected $index;\n\n    /**\n     * spl\\Iterator\n     *\n     * @return Tracker_FileInfo the current one\n     */\n    public function current()\n    {\n        return $this->files[$this->index];\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * @return int the current index\n     */\n    public function key()\n    {\n        return $this->index;\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * Jump to the next Tracker_FileInfo\n     *\n     * @return void\n     */\n    public function next()\n    {\n        $this->index++;\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * Reset the pointer to the start of the collection\n     *\n     * @return Tracker_FileInfo the current one\n     */\n    public function rewind()\n    {\n        $this->index = 0;\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * @return bool true if the current pointer is valid\n     */\n    public function valid()\n    {\n        return isset($this->files[$this->index]);\n    }\n\n    /**\n     * Get the files infos\n     *\n     * @return Tracker_FileInfo[]\n     */\n    public function getFiles()\n    {\n        return $this->files;\n    }\n\n    public function getRESTValue(PFUser $user)\n    {\n        return $this->getFullRESTValue($user);\n    }\n\n    public function getFullRESTValue(PFUser $user)\n    {\n        $values = [];\n        foreach ($this->getFiles() as $file_info) {\n            $values[] = $file_info->getRESTValue();\n        }\n        $field_value_file_representation = new ArtifactFieldValueFileFullRepresentation();\n        $field_value_file_representation->build(\n            $this->field->getId(),\n            Tracker_FormElementFactory::instance()->getType($this->field),\n            $this->field->getLabel(),\n            $values\n        );\n        return $field_value_file_representation;\n    }\n\n    /**\n     * Returns the value of this changeset value\n     *\n     * @return mixed The value of this artifact changeset value\n     */\n    public function getValue()\n    {\n        // TODO : implement\n        return false;\n    }\n\n    /**\n     * @return false|string\n     */\n    public function mailDiff(\n        $changeset_value,\n        $artifact_id,\n        $changeset_id,\n        $ignore_perms,\n        $format = 'html',\n        ?PFUser $user = null\n    ) {\n        return $this->formatDiff($changeset_value, $format, true);\n    }\n\n    /**\n     * Returns a diff between this changeset value and the one passed in param\n     *\n     * @return string|false The difference between another $changeset_value, false if no differneces\n     */\n    public function diff($changeset_value, $format = 'html', ?PFUser $user = null, $ignore_perms = false)\n    {\n        return $this->formatDiff($changeset_value, $format, false);\n    }\n\n    private function formatDiff($changeset_value, $format, $is_for_mail)\n    {\n        if ($this->files !== $changeset_value->getFiles()) {\n            $result  = '';\n            $removed = [];\n            foreach (array_diff($changeset_value->getFiles(), $this->files) as $fi) {\n                $removed[] = $fi->getFilename();\n            }\n            if ($removed = implode(', ', $removed)) {\n                $result .= $removed . ' ' . dgettext('tuleap-tracker', 'removed');\n            }\n\n            $added = $this->fetchAddedFiles(array_diff($this->files, $changeset_value->getFiles()), $format, $is_for_mail);\n            if ($added && $result) {\n                $result .= $format === 'html' ? '; ' : PHP_EOL;\n            }\n            $result .= $added;\n\n            return $result;\n        }\n        return false;\n    }\n\n     /**\n     * Returns the \"set to\" for field added later\n     *\n     * @return string The sentence to add in changeset\n     */\n    public function nodiff($format = 'html')\n    {\n        if (empty($this->files)) {\n            return '';\n        }\n\n        return $this->fetchAddedFiles($this->files, $format, false);\n    }\n\n    private function fetchAddedFiles(array $files, $format, $is_for_mail)\n    {\n        $artifact = $this->changeset->getArtifact();\n\n        $still_existing_files_ids = [];\n\n        if ($artifact->getLastChangeset()->getValue($this->field)) {\n            foreach ($artifact->getLastChangeset()->getValue($this->field)->getFiles() as $file) {\n                $still_existing_files_ids[$file->getId()] = true;\n            }\n        }\n\n        $added    = [];\n        $previews = [];\n        $this->extractAddedAndPreviewsFromFiles($files, $format, $still_existing_files_ids, $added, $previews);\n\n        $result = '';\n        if ($added) {\n            $result .= implode(', ', $added) . ' ' . dgettext('tuleap-tracker', 'added');\n        }\n\n        if ($previews && ! $is_for_mail) {\n            $result .= '<div>' . $this->field->fetchAllAttachment(\n                $artifact->getId(),\n                $previews,\n                true,\n                [],\n                true,\n                $this->changeset->getId()\n            ) . '</div>';\n        }\n\n        return $result;\n    }\n\n    private function extractAddedAndPreviewsFromFiles(\n        array $files,\n        $format,\n        $still_existing_files_ids,\n        &$added,\n        &$previews\n    ) {\n        foreach ($files as $file) {\n            \\assert($file instanceof Tracker_FileInfo);\n            if ($format === 'html') {\n                $this->addFileForHTMLFormat($still_existing_files_ids, $added, $previews, $file);\n            } else {\n                $added[] = $file->getFilename();\n            }\n        }\n    }\n\n    private function addFileForHTMLFormat($still_existing_files_ids, &$added, &$previews, $file)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $request  = HTTPRequest::instance();\n        if (isset($still_existing_files_ids[$file->getId()])) {\n            $added[] = '<a href=\"' . $request->getServerUrl() . $purifier->purify($this->field->getFileHTMLUrl($file)) . '\">' .\n                $purifier->purify($file->getFilename())\n                . '</a>';\n\n            if ($file->isImage()) {\n                $previews[] = $file;\n            }\n        } else {\n            $reason  = dgettext('tuleap-tracker', 'This file has been removed meantime.');\n            $added[] = '<s title=\"' . $purifier->purify($reason) . '\">' .\n                $purifier->purify($file->getFilename())\n                . '</s>';\n        }\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForRestCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTraditionalUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTusUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentToFinalPlaceMover;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\ChangesetValueFileSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FieldDataFromRESTBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileInfoForTusUploadedFileReadyToBeAttachedProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\FileOngoingUploadDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\Tus\\FileBeingUploadedInformationProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\UploadPathAllocator;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_File extends Tracker_FormElement_Field\n{\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field  is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                $c = 'C_' . $this->id;\n\n                $da             = CodendiDataAccess::instance();\n                $criteria_value = $da->quoteLikeValueSurround($criteria_value);\n\n                return \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_file AS $b ON ($b.changeset_value_id = $a.id)\n                         INNER JOIN tracker_fileinfo AS $c ON (\n                            $c.id = $b.fileinfo_id\n                            AND (\n                                $c.description LIKE \" . $criteria_value . \"\n                                OR\n                                $c.filename LIKE \" . $criteria_value . \"\n                            )\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_File_ValueDao();\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact_id, $this->getChangesetValues($changeset_id), $submitter_needed, []);\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchAllAttachmentForCSV($artifact_id, $this->getChangesetValues($changeset_id));\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = '';\n        if ($v = $changeset->getValue($this)) {\n            assert($v instanceof Tracker_Artifact_ChangesetValue_File);\n            if (isset($v['value_id'])) {\n                $v = [$v];\n            }\n            /** @psalm-var array{value_id:int} $val */\n            foreach ($v as $val) {\n                if ($val['value_id'] != 100) {\n                    if ($row = $this->getValueDao()->searchById($val['value_id'], $this->id)->getRow()) {\n                        if ($value) {\n                            $value .= ', ';\n                        }\n                        $value .= $row['filename'];\n                    }\n                }\n            }\n        }\n        return $value;\n    }\n\n    protected function getValueDao()\n    {\n        return new FileFieldValueDao();\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values\n    ) {\n        $html             = '';\n        $submitter_needed = true;\n        $read_only        = false;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, $submitted_values, $read_only);\n        $html            .= $this->fetchSubmitValue($submitted_values);\n        return $html;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n        if ($last_changeset) {\n            $value = $last_changeset->getValue($this);\n            return $this->fetchAllAttachmentTitleAndDescription($value);\n        }\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in Mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text'\n    ) {\n        if (empty($value) || ! $value->getFiles()) {\n            return '-';\n        }\n\n        return $this->fetchMailAllAttachment($artifact->id, $value, $format);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, []);\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html  = '';\n        $html .= '<div class=\"add-attachement\">';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<div class=\"tracker_artifact_add_attachment\">';\n        $html .= '<p>';\n        $html .= '<input type=\"file\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][file]\" data-upload-is-enabled/>';\n        $html .= '<label>' . dgettext('tuleap-tracker', 'Description:');\n        $html .= '</label>';\n        $html .= ' <input type=\"text\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][description]\" />';\n        $html .= '</p>';\n        $html .= '</div>';\n        $html .= '</div>';\n        if (isset($submitted_values[$this->id])) {\n            foreach ($submitted_values[$this->id] as $submitted_value) {\n                if (isset($submitted_value['tus-uploaded-id'])) {\n                    $html .= '<input\n                        type=\"hidden\"\n                        name=\"artifact[' . $this->id . '][][tus-uploaded-id]\"\n                        value=\"' . (int) $submitted_value['tus-uploaded-id'] . '\">';\n                }\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';  // deactivate mass change for file fields (see issue described in rev #15855)\n    }\n\n    public function fetchAllAttachment(\n        $artifact_id,\n        $values,\n        $submitter_needed,\n        array $submitted_values,\n        $read_only = true,\n        $lytebox_id = null\n    ) {\n        $html = '';\n        if ($lytebox_id === null) {\n            $lytebox_id = $this->getId();\n        }\n        if ($values !== null && count($values) > 0) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $uh    = UserHelper::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $this->getFileHTMLUrl($fileinfo);\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n\n                $link_show = '<a href=\"' . $query_link . '\"' .\n                                 $this->getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id) . '\n                                 title=\"' . $sanitized_description . '\">';\n\n                $add = '<div class=\"tracker_artifact_attachment\">';\n                if (! $read_only) {\n                    $add .= $this->fetchDeleteCheckbox($fileinfo, $submitted_values);\n                }\n\n                $add .= '<div class=\"tracker_artifact_preview_attachment_hover\">';\n                if ($submitter_needed) {\n                    $add .= '<div class=\"tracker_artifact_attachment_submitter\">' . 'By ' . $uh->getLinkOnUserFromUserId($fileinfo->getSubmittedBy()) . '</div>';\n                }\n                $add .= '<div class=\"tracker_artifact_attachment_size\">(' . $fileinfo->getHumanReadableFilesize() . ')</div>';\n                $add .= '<div>';\n                $add .= $link_show . '<i class=\"fa fa-eye\"></i></a>';\n                $add .= '<a href=\"' . $query_link . '\" download><i class=\"fa fa-download\"></i></a>';\n                $add .= '</div>';\n                $add .= '</div>';\n\n                if ($fileinfo->isImage()) {\n                    $query_add = $this->getFileHTMLPreviewUrl($fileinfo);\n\n                    $add .= '<div class=\"tracker_artifact_preview_attachment image\">';\n                    $add .= '<div style=\"background-image: url(\\'' . $query_add . '\\')\"></div>';\n                    $add .= '</div>';\n                } else {\n                    $add .= '<div class=\"tracker_artifact_preview_attachment\"></div>';\n                }\n\n                $link_goto = '<a href=\"' . $query_link . '\"' .\n                                 'title=\"' . $sanitized_description . '\">';\n                $add      .= '<div class=\"tracker_artifact_attachment_name\">' . $link_goto . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a></div>';\n\n                if ($sanitized_description) {\n                    $add .= '<div class=\"tracker_artifact_attachment_description\">' . $sanitized_description . '</div>';\n                }\n\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $html .= implode('', $added);\n        }\n\n        if ($read_only && ($values === null || count($values) === 0)) {\n            $html .= $this->getNoValueLabel();\n        }\n\n        return $html;\n    }\n\n    public function getFileHTMLUrl(Tracker_FileInfo $file_info)\n    {\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/' . $this->getFilenameSlug($file_info);\n    }\n\n    public function getFileHTMLPreviewUrl(Tracker_FileInfo $file_info)\n    {\n        if (! $file_info->isImage()) {\n            return;\n        }\n\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/preview/' . $this->getFilenameSlug($file_info);\n    }\n\n    /**\n     * @return string\n     */\n    private function getFilenameSlug(Tracker_FileInfo $file_info)\n    {\n        return (int) $file_info->getId() . '-' . rawurlencode($file_info->getFilename());\n    }\n\n    private function getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id)\n    {\n        if (! $fileinfo->isImage()) {\n            return '';\n        }\n\n        if ($read_only) {\n            return 'rel=\"lytebox[' . $lytebox_id . ']\"';\n        }\n\n        return 'data-rel=\"lytebox[' . $lytebox_id . ']\"';\n    }\n\n    private function fetchDeleteCheckbox(Tracker_FileInfo $fileinfo, array $submitted_values)\n    {\n        $html    = '';\n        $html   .= '<label class=\"pc_checkbox tracker_artifact_attachment_delete\">';\n        $checked = '';\n        if (isset($submitted_values[$this->id]) && ! empty($submitted_values[$this->id]['delete']) && in_array($fileinfo->getId(), $submitted_values[$this->id]['delete'])) {\n            $checked = 'checked=\"checked\"';\n        }\n        $html .= '<input type=\"checkbox\" name=\"artifact[' . $this->id . '][delete][]\" value=\"' . $fileinfo->getId() . '\" title=\"delete\" ' . $checked . ' />&nbsp;';\n        $html .= '</label>';\n        return $html;\n    }\n\n    protected function fetchAllAttachmentForCSV($artifact_id, $values)\n    {\n        $txt = '';\n        if (count($values)) {\n            $filenames = [];\n            foreach ($values as $fileinfo) {\n                $filenames[] = $fileinfo->getFilename();\n            }\n            $txt .= implode(',', $filenames);\n        }\n        return $txt;\n    }\n\n    protected function fetchAllAttachmentTitleAndDescription($values)\n    {\n        $html = '';\n        if ($values) {\n            $purifier = Codendi_HTMLPurifier::instance();\n            $html    .= '<div class=\"tracker-artifact-attachement-title-list tracker_artifact_field\"\n                              data-field-id=\"' . $this->id . '\"\n                              data-is-required=\"false\">';\n            $html    .= '<div class=\"disabled_field\">' . dgettext('tuleap-tracker', '\"Attachment\" type field cannot be modified during artifact copy.') . '</div>';\n            $html    .= '<ul>';\n            foreach ($values as $value) {\n                $description = $value->getDescription();\n\n                $html .= '<li>';\n                $html .= '<span class=\"file-title\">';\n                $html .= $purifier->purify($value->getFileName());\n                $html .= '</span>';\n\n                if ($description) {\n                    $html .= '<span class=\"file-description\">';\n                    $html .= ' - ' . $purifier->purify($description);\n                    $html .= '</span>';\n                }\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch all attachements for Mail output\n     *\n     * @param int $artifact_id The artifact Id\n     * @param Array            $values     The actual value of the field\n     * @param String            $format       The mail format\n     *\n     * @return String\n     */\n    protected function fetchMailAllAttachment($artifact_id, $values, $format)\n    {\n        $output = '';\n        if (! count($values)) {\n            return '';\n        }\n\n        $uh = UserHelper::instance();\n\n        $proto = ForgeConfig::get('sys_https_host') ? 'https' : 'http';\n        $url   = $proto . '://' . ForgeConfig::get('sys_default_domain');\n\n        if ($format == 'text') {\n            foreach ($values as $fileinfo) {\n                $query_link = $this->getFileHTMLUrl($fileinfo);\n\n                $link    = '<' . $url . $query_link . '>';\n                $output .= $fileinfo->getDescription();\n                $output .= ' | ';\n                $output .= $fileinfo->getFilename();\n                $output .= ' | ';\n                $output .= $fileinfo->getHumanReadableFilesize();\n                $output .= ' | ';\n                $output .= $uh->getDisplayNameFromUserId($fileinfo->getSubmittedBy());\n                $output .= PHP_EOL;\n                $output .= $link;\n                $output .= PHP_EOL;\n            }\n        } else {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $this->getFileHTMLUrl($fileinfo);\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n                $link_show             = '<a href=\"' . $url . $query_link . '\"\n                                 title=\"' . $sanitized_description . '\">';\n\n                $info  = $link_show . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a>';\n                $info .= ' (' . $fileinfo->getHumanReadableFilesize() . ')';\n\n                $add     = '<div class=\"tracker_artifact_attachment\">';\n                $add    .= '<table><tr><td>';\n                $add    .= $info;\n                $add    .= '</td></tr></table>';\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $output .= implode('', $added);\n        }\n        return $output;\n    }\n\n    protected $file_values_by_changeset;\n\n    /**\n     * @return array\n     */\n    protected function getChangesetValues($changeset_id)\n    {\n        $da = CodendiDataAccess::instance();\n        if (! $this->file_values_by_changeset) {\n            $this->file_values_by_changeset = [];\n            $field_id                       = $da->escapeInt($this->id);\n            $sql                            = \"SELECT c.changeset_id, c.has_changed, f.id\n                    FROM tracker_fileinfo as f\n                         INNER JOIN tracker_changeset_value_file AS vf on (f.id = vf.fileinfo_id)\n                         INNER JOIN tracker_changeset_value AS c\n                         ON ( vf.changeset_value_id = c.id\n                          AND c.field_id = $field_id\n                         )\n                    ORDER BY f.id\";\n            $dao                            = new DataAccessObject();\n            $file_info_factory              = $this->getTrackerFileInfoFactory();\n            foreach ($dao->retrieve($sql) as $row) {\n                $this->file_values_by_changeset[$row['changeset_id']][] = $file_info_factory->getById($row['id']);\n            }\n        }\n        return isset($this->file_values_by_changeset[$changeset_id]) ? $this->file_values_by_changeset[$changeset_id] : [];\n    }\n\n    public function previewAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->isImage() && file_exists($fileinfo->getThumbnailPath())) {\n                header('Content-type: ' . $fileinfo->getFiletype());\n                readfile($fileinfo->getThumbnailPath());\n            }\n        }\n        exit();\n    }\n\n    public function showAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->fileExists()) {\n                $http = Codendi_HTTPPurifier::instance();\n                header('X-Content-Type-Options: nosniff');\n                header('Content-Type: ' . $http->purify($fileinfo->getFiletype()));\n                header('Content-Length: ' . $http->purify($fileinfo->getFilesize()));\n                header('Content-Disposition: attachment; filename=\"' . $http->purify($fileinfo->getFilename()) . '\"');\n                header('Content-Description: ' . $http->purify($fileinfo->getDescription()));\n                if (ob_get_level()) {\n                    ob_end_clean();\n                }\n                flush();\n                $file = fopen($fileinfo->getPath(), \"r\");\n                while (! feof($file)) {\n                    print fread($file, 30 * 1024);\n                    flush();\n                }\n                fclose($file);\n            }\n        }\n        exit();\n    }\n\n    public function getRootPath()\n    {\n        return $this->getGlobalTrackerRootPath() . $this->getId();\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<table class=\"tracker_artifact_add_attachment\">';\n        $html .= '<tr><td><label>' . dgettext('tuleap-tracker', 'Description:') . '</label></td><td><label>' . dgettext('tuleap-tracker', 'File:') . '</label></td></tr>';\n        $html .= '<tr><td><input type=\"text\" id=\"tracker_field_' . $this->id . '\" /></td>';\n        $html .= '<td><input type=\"file\" id=\"tracker_field_' . $this->id . '\" /></td></tr>';\n        $html .= '</table>';\n        $html .= '</div>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'File upload');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Lets the user attach files to the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Artifact                    $artifact The artifact\n     * @param Tracker_ChangesetValue_File $value    The changeset value of this field\n     *\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value) {\n            $files_info = $value->getFiles();\n            if (count($files_info)) {\n                $html .= '<div class=\"cross-ref-tooltip-collection\">';\n\n                $hp = Codendi_HTMLPurifier::instance();\n\n                $added = [];\n                foreach ($files_info as $file_info) {\n                    $add = '';\n\n                    if ($file_info->isImage()) {\n                        $query = $this->getFileHTMLPreviewUrl($file_info);\n                        $add  .= '<img src=\"' . $query . '\"\n                                      alt=\"' .  $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                                 >';\n                    } elseif ($file_info->getDescription()) {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    } else {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    }\n                    $added[] = $add;\n                }\n                $html .= implode('', $added) . '</div>';\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (is_array($value)) {\n            $this->checkAllFilesHaveBeenSuccessfullyUploaded($value);\n        }\n\n        return ! $this->has_errors;\n    }\n\n    private function checkAllFilesHaveBeenSuccessfullyUploaded($value)\n    {\n        $rule = new Rule_File();\n        foreach ($value as $i => $attachment) {\n            if ($this->isAttachmentNeedsToBeValidated($i, $attachment)) {\n                if (! $rule->isValid($attachment)) {\n                    $this->has_errors = true;\n                    $attachment_error = sprintf(dgettext('tuleap-tracker', 'Attachment #%1$s has not been saved:'), $i);\n                    $GLOBALS['Response']->addFeedback('error', $attachment_error . ' ' . $rule->getErrorMessage());\n                }\n            }\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    private function isAttachmentNeedsToBeValidated($attachment_index, array $attachment)\n    {\n        if ($attachment_index === 'delete' || isset($attachment['tus-uploaded-id'])) {\n            return false;\n        }\n\n        $is_file_uploaded             = ! empty($attachment['error']) && $attachment['error'] != UPLOAD_ERR_NO_FILE;\n        $is_file_description_provided = trim($attachment['description']);\n\n        return $is_file_uploaded || $is_file_description_provided;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact The artifact to check\n     * @param mixed    $value    The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (\n            is_array($value) &&\n            $this->isRequired() &&\n            ! $this->checkThatAtLeastOneFileIsUploaded($value) &&\n            $this->isPreviousChangesetEmpty($artifact, $value)\n        ) {\n            $this->addRequiredError();\n        }\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Check that at least one file is sent\n     *\n     * @param array $files the files\n     *\n     * @return bool true if success\n     */\n    public function checkThatAtLeastOneFileIsUploaded($files)\n    {\n        $r              = new Rule_File();\n        $a_file_is_sent = false;\n        foreach ($files as $action => $attachment) {\n            if ($a_file_is_sent) {\n                break;\n            }\n            if ((string) $action === 'delete') {\n                continue;\n            }\n            $a_file_is_sent = isset($attachment['tus-uploaded-id']) || $r->isValid($attachment);\n        }\n        return $a_file_is_sent;\n    }\n\n    /**\n     * Extract data from request\n     * Some fields like files doesn't have their value submitted in POST or GET\n     * Let them populate $fields_data[field_id] if needed\n     *\n     * @param array &$fields_data The user submitted value\n     *\n     * @return void\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        if (! isset($fields_data[$this->getId()]) || ! is_array($fields_data[$this->getId()])) {\n            $fields_data[$this->getId()] = [];\n        }\n        $files_infos = $this->getSubmittedInfoFromFILES();\n        if (isset($files_infos['name'][$this->getId()])) {\n            $info_keys = array_keys($files_infos); //name, type, error, ...\n            $nb        = count($files_infos['name'][$this->getId()]);\n            for ($i = 0; $i < $nb; ++$i) {\n                $tab = [];\n                foreach ($info_keys as $key) {\n                    $tab[$key] = $files_infos[$key][$this->getId()][$i]['file'];\n                }\n                if (isset($fields_data[$this->getId()][$i])) {\n                    $fields_data[$this->getId()][$i] = array_merge($fields_data[$this->getId()][$i], $tab);\n                } else {\n                    $fields_data[$this->getId()][] = $tab;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the array wich contains files submitted by the user\n     *\n     * @return null|array null if not found\n     */\n    protected function getSubmittedInfoFromFILES()\n    {\n        return isset($_FILES['artifact']) ? $_FILES['artifact'] : null;\n    }\n\n    protected $files_info_from_request = null;\n    /**\n     * Extract the file information (name, error, tmp, ...) from the request\n     *\n     * @return array Array of file info\n     */\n    protected function extractFilesFromRequest()\n    {\n        if (! $this->files_info_from_request) {\n        }\n        return $this->files_info_from_request;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping\n    ) {\n        $mover              = new AttachmentToFinalPlaceMover();\n        $rule_file          = new Rule_File();\n        $ongoing_upload_dao = new FileOngoingUploadDao();\n        $attachment_creator = new AttachmentForTusUploadCreator(\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider($ongoing_upload_dao),\n            $ongoing_upload_dao,\n            new AttachmentForRestCreator(\n                $mover,\n                $this->getTemporaryFileManager(),\n                new AttachmentForTraditionalUploadCreator($mover, $rule_file),\n                $rule_file\n            )\n        );\n\n        $saver = new ChangesetValueFileSaver($this->getValueDao(), $attachment_creator);\n\n        assert($previous_changesetvalue instanceof Tracker_Artifact_ChangesetValue_File || $previous_changesetvalue === null);\n        return $saver->saveValue(\n            $this->getCurrentUser(),\n            $this,\n            $changeset_value_id,\n            $value,\n            $previous_changesetvalue,\n            $url_mapping\n        );\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        //\"old\" and \"new\" value are irrelevant in this context.\n        //We just have to know if there is at least one file successfully uploaded\n        return $this->checkThatAtLeastOneFileIsUploaded($new_value) || ! empty($new_value['delete']);\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     *\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return true;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed): Tracker_Artifact_ChangesetValue_File\n    {\n        $file_info_factory = $this->getTrackerFileInfoFactory();\n\n        $files      = [];\n        $file_value = $this->getValueDao()->searchById($value_id);\n        foreach ($file_value as $row) {\n            $file = $file_info_factory->getById($row['fileinfo_id']);\n            if ($file !== null) {\n                $files[] = $file;\n            }\n        }\n        return new Tracker_Artifact_ChangesetValue_File($value_id, $changeset, $this, $has_changed, $files);\n    }\n\n    /**\n     * Get the file dao\n     *\n     * @return Tracker_FileInfoDao\n     */\n    protected function getFileInfoDao()\n    {\n        return new Tracker_FileInfoDao();\n    }\n\n    /**\n     * Get file info factory\n     *\n     * @return Tracker_FileInfoFactory\n     */\n    protected function getFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            $this->getFileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Override default value as it's not possible to import a file via CSV\n     *\n     * @param type $csv_value\n     *\n     * @return array\n     */\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValue(array $rest_value, ?Artifact $artifact = null)\n    {\n        //Transform array to object\n        $value = json_decode(json_encode($rest_value), false);\n\n        $this->validateDataFromREST($value);\n\n        $builder = new FieldDataFromRESTBuilder(\n            $this->getUserManager(),\n            $this->getFormElementFactory(),\n            $this->getTrackerFileInfoFactory(),\n            $this->getTemporaryFileManager(),\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider(new FileOngoingUploadDao())\n        );\n        return $builder->buildFieldDataFromREST($value, $this, $artifact);\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    private function validateDataFromREST($data)\n    {\n        if (! property_exists($data, 'value') || ! is_array($data->value)) {\n            throw new Tracker_FormElement_InvalidFieldException('Invalid format for file field \"' . $data->field_id . '\". '\n                . ' Correct format is {\"field_id\" : 425, \"value\" : [457, 258]}');\n        }\n    }\n\n    /**\n     * @return Tracker_Artifact_Attachment_TemporaryFileManager\n     */\n    private function getTemporaryFileManager()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManager(\n            $this->getUserManager(),\n            new Tracker_Artifact_Attachment_TemporaryFileManagerDao(),\n            new System_Command(),\n            ForgeConfig::get('sys_file_deletion_delay'),\n            new \\Tuleap\\DB\\DBTransactionExecutorWithConnection(\\Tuleap\\DB\\DBFactory::getMainTuleapDBConnection())\n        );\n    }\n\n    private function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    protected function getTrackerFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            new Tracker_FileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    protected function getTemporaryFileManagerDao()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManagerDao();\n    }\n\n    public function deleteChangesetValue(Tracker_Artifact_Changeset $changeset, $changeset_value_id)\n    {\n        $values = $this->getChangesetValue($changeset, $changeset_value_id, false);\n        foreach ($values as $fileinfo) {\n            $fileinfo->delete();\n        }\n        parent::deleteChangesetValue($changeset, $changeset_value_id);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitFile($this);\n    }\n\n    protected function isPreviousChangesetEmpty(Artifact $artifact, $value)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n\n        if (\n            $last_changeset &&\n            ! is_a($last_changeset, Tracker_Artifact_Changeset_Null::class) &&\n            count($last_changeset->getValue($this)->getFiles()) > 0\n        ) {\n            return $this->areAllFilesDeletedFromPreviousChangeset($last_changeset, $value);\n        }\n        return true;\n    }\n\n    private function areAllFilesDeletedFromPreviousChangeset($last_changeset, $value)\n    {\n        $files = $last_changeset->getValue($this)->getFiles();\n        if (isset($value['delete']) && (count($files) == count($value['delete']))) {\n            return true;\n        }\n        return false;\n    }\n\n    public function isEmpty($value, $artifact)\n    {\n        $is_empty = ! $this->checkThatAtLeastOneFileIsUploaded($value);\n        if ($is_empty) {\n            $is_empty = $this->isPreviousChangesetEmpty($artifact, $value);\n        }\n        return $is_empty;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGlobalTrackerRootPath()\n    {\n        return ForgeConfig::get('sys_data_dir') . '/tracker/';\n    }\n\n    protected function getFileInfoForTusUploadedFileReadyToBeAttachedProvider(FileOngoingUploadDao $ongoing_upload_dao): FileInfoForTusUploadedFileReadyToBeAttachedProvider\n    {\n        return new FileInfoForTusUploadedFileReadyToBeAttachedProvider(\n            new FileBeingUploadedInformationProvider(\n                new UploadPathAllocator(\n                    $ongoing_upload_dao,\n                    Tracker_FormElementFactory::instance()\n                ),\n                $ongoing_upload_dao\n            ),\n            $ongoing_upload_dao\n        );\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFileFullRepresentation;\n\n/**\n * Manage values in changeset for files fields\n */\nclass Tracker_Artifact_ChangesetValue_File extends Tracker_Artifact_ChangesetValue implements Countable, ArrayAccess, Iterator\n{\n\n    /**\n     * @var array of Tracker_FileInfo\n     */\n    protected $files;\n\n    public function __construct($id, Tracker_Artifact_Changeset $changeset, $field, $has_changed, $files)\n    {\n        parent::__construct($id, $changeset, $field, $has_changed);\n        $this->files = $files;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function accept(Tracker_Artifact_ChangesetValueVisitor $visitor)\n    {\n        return $visitor->visitFile($this);\n    }\n\n    /**\n     * spl\\Countable\n     *\n     * @return int the number of files\n     */\n    public function count()\n    {\n        return count($this->files);\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int|string $offset to retrieve\n     *\n     * @return mixed value at given offset\n     */\n    public function offsetGet($offset)\n    {\n        return $this->files[$offset];\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int   $offset to modify\n     * @param mixed $value  new value\n     *\n     * @return void\n     */\n    public function offsetSet($offset, $value)\n    {\n        $this->files[$offset] = $value;\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int $offset to check\n     *\n     * @return bool wether the offset exists\n     */\n    public function offsetExists($offset)\n    {\n        return isset($this->files[$offset]);\n    }\n\n    /**\n     * spl\\ArrayAccess\n     *\n     * @param int $offset to delete\n     *\n     * @return void\n     */\n    public function offsetUnset($offset)\n    {\n        unset($this->files[$offset]);\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * The internal pointer to traverse the collection\n     * @var int\n     */\n    protected $index;\n\n    /**\n     * spl\\Iterator\n     *\n     * @return Tracker_FileInfo the current one\n     */\n    public function current()\n    {\n        return $this->files[$this->index];\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * @return int the current index\n     */\n    public function key()\n    {\n        return $this->index;\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * Jump to the next Tracker_FileInfo\n     *\n     * @return void\n     */\n    public function next()\n    {\n        $this->index++;\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * Reset the pointer to the start of the collection\n     *\n     * @return Tracker_FileInfo the current one\n     */\n    public function rewind()\n    {\n        $this->index = 0;\n    }\n\n    /**\n     * spl\\Iterator\n     *\n     * @return bool true if the current pointer is valid\n     */\n    public function valid()\n    {\n        return isset($this->files[$this->index]);\n    }\n\n    /**\n     * Get the files infos\n     *\n     * @return Tracker_FileInfo[]\n     */\n    public function getFiles()\n    {\n        return $this->files;\n    }\n\n    public function getRESTValue(PFUser $user)\n    {\n        return $this->getFullRESTValue($user);\n    }\n\n    public function getFullRESTValue(PFUser $user)\n    {\n        $values = [];\n        foreach ($this->getFiles() as $file_info) {\n            $values[] = $file_info->getRESTValue();\n        }\n        $field_value_file_representation = new ArtifactFieldValueFileFullRepresentation();\n        $field_value_file_representation->build(\n            $this->field->getId(),\n            Tracker_FormElementFactory::instance()->getType($this->field),\n            $this->field->getLabel(),\n            $values\n        );\n        return $field_value_file_representation;\n    }\n\n    /**\n     * Returns the value of this changeset value\n     *\n     * @return mixed The value of this artifact changeset value\n     */\n    public function getValue()\n    {\n        // TODO : implement\n        return false;\n    }\n\n    /**\n     * @return false|string\n     */\n    public function mailDiff(\n        $changeset_value,\n        $artifact_id,\n        $changeset_id,\n        $ignore_perms,\n        $format = 'html',\n        ?PFUser $user = null\n    ) {\n        return $this->formatDiff($changeset_value, $format, true);\n    }\n\n    /**\n     * Returns a diff between this changeset value and the one passed in param\n     *\n     * @return string|false The difference between another $changeset_value, false if no differneces\n     */\n    public function diff($changeset_value, $format = 'html', ?PFUser $user = null, $ignore_perms = false)\n    {\n        return $this->formatDiff($changeset_value, $format, false);\n    }\n\n    private function formatDiff($changeset_value, $format, $is_for_mail)\n    {\n        if ($this->files !== $changeset_value->getFiles()) {\n            $result  = '';\n            $removed = [];\n            foreach (array_diff($changeset_value->getFiles(), $this->files) as $fi) {\n                $removed[] = $fi->getFilename();\n            }\n            if ($removed = implode(', ', $removed)) {\n                $purifier = Codendi_HTMLPurifier::instance();\n                $result  .= $purifier->purify($removed) . ' ' . dgettext('tuleap-tracker', 'removed');\n            }\n\n            $added = $this->fetchAddedFiles(array_diff($this->files, $changeset_value->getFiles()), $format, $is_for_mail);\n            if ($added && $result) {\n                $result .= $format === 'html' ? '; ' : PHP_EOL;\n            }\n            $result .= $added;\n\n            return $result;\n        }\n        return false;\n    }\n\n     /**\n     * Returns the \"set to\" for field added later\n     *\n     * @return string The sentence to add in changeset\n     */\n    public function nodiff($format = 'html')\n    {\n        if (empty($this->files)) {\n            return '';\n        }\n\n        return $this->fetchAddedFiles($this->files, $format, false);\n    }\n\n    private function fetchAddedFiles(array $files, $format, $is_for_mail)\n    {\n        $artifact = $this->changeset->getArtifact();\n\n        $still_existing_files_ids = [];\n\n        if ($artifact->getLastChangeset()->getValue($this->field)) {\n            foreach ($artifact->getLastChangeset()->getValue($this->field)->getFiles() as $file) {\n                $still_existing_files_ids[$file->getId()] = true;\n            }\n        }\n\n        $added    = [];\n        $previews = [];\n        $this->extractAddedAndPreviewsFromFiles($files, $format, $still_existing_files_ids, $added, $previews);\n\n        $result = '';\n        if ($added) {\n            $result .= implode(', ', $added) . ' ' . dgettext('tuleap-tracker', 'added');\n        }\n\n        if ($previews && ! $is_for_mail) {\n            $result .= '<div>' . $this->field->fetchAllAttachment(\n                $artifact->getId(),\n                $previews,\n                true,\n                [],\n                true,\n                $this->changeset->getId()\n            ) . '</div>';\n        }\n\n        return $result;\n    }\n\n    private function extractAddedAndPreviewsFromFiles(\n        array $files,\n        $format,\n        $still_existing_files_ids,\n        &$added,\n        &$previews\n    ) {\n        foreach ($files as $file) {\n            \\assert($file instanceof Tracker_FileInfo);\n            if ($format === 'html') {\n                $this->addFileForHTMLFormat($still_existing_files_ids, $added, $previews, $file);\n            } else {\n                $added[] = $file->getFilename();\n            }\n        }\n    }\n\n    private function addFileForHTMLFormat($still_existing_files_ids, &$added, &$previews, $file)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $request  = HTTPRequest::instance();\n        if (isset($still_existing_files_ids[$file->getId()])) {\n            $added[] = '<a href=\"' . $request->getServerUrl() . $purifier->purify($this->field->getFileHTMLUrl($file)) . '\">' .\n                $purifier->purify($file->getFilename())\n                . '</a>';\n\n            if ($file->isImage()) {\n                $previews[] = $file;\n            }\n        } else {\n            $reason  = dgettext('tuleap-tracker', 'This file has been removed meantime.');\n            $added[] = '<s title=\"' . $purifier->purify($reason) . '\">' .\n                $purifier->purify($file->getFilename())\n                . '</s>';\n        }\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForRestCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTraditionalUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTusUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentToFinalPlaceMover;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\ChangesetValueFileSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FieldDataFromRESTBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileInfoForTusUploadedFileReadyToBeAttachedProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\FileOngoingUploadDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\Tus\\FileBeingUploadedInformationProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\UploadPathAllocator;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_File extends Tracker_FormElement_Field\n{\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field  is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                $c = 'C_' . $this->id;\n\n                $da             = CodendiDataAccess::instance();\n                $criteria_value = $da->quoteLikeValueSurround($criteria_value);\n\n                return \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_file AS $b ON ($b.changeset_value_id = $a.id)\n                         INNER JOIN tracker_fileinfo AS $c ON (\n                            $c.id = $b.fileinfo_id\n                            AND (\n                                $c.description LIKE \" . $criteria_value . \"\n                                OR\n                                $c.filename LIKE \" . $criteria_value . \"\n                            )\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_File_ValueDao();\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact_id, $this->getChangesetValues($changeset_id), $submitter_needed, []);\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchAllAttachmentForCSV($artifact_id, $this->getChangesetValues($changeset_id));\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = '';\n        if ($v = $changeset->getValue($this)) {\n            assert($v instanceof Tracker_Artifact_ChangesetValue_File);\n            if (isset($v['value_id'])) {\n                $v = [$v];\n            }\n            /** @psalm-var array{value_id:int} $val */\n            foreach ($v as $val) {\n                if ($val['value_id'] != 100) {\n                    if ($row = $this->getValueDao()->searchById($val['value_id'], $this->id)->getRow()) {\n                        if ($value) {\n                            $value .= ', ';\n                        }\n                        $value .= $row['filename'];\n                    }\n                }\n            }\n        }\n        return $value;\n    }\n\n    protected function getValueDao()\n    {\n        return new FileFieldValueDao();\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values\n    ) {\n        $html             = '';\n        $submitter_needed = true;\n        $read_only        = false;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, $submitted_values, $read_only);\n        $html            .= $this->fetchSubmitValue($submitted_values);\n        return $html;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n        if ($last_changeset) {\n            $value = $last_changeset->getValue($this);\n            return $this->fetchAllAttachmentTitleAndDescription($value);\n        }\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in Mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text'\n    ) {\n        if (empty($value) || ! $value->getFiles()) {\n            return '-';\n        }\n\n        return $this->fetchMailAllAttachment($artifact->id, $value, $format);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, []);\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html  = '';\n        $html .= '<div class=\"add-attachement\">';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<div class=\"tracker_artifact_add_attachment\">';\n        $html .= '<p>';\n        $html .= '<input type=\"file\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][file]\" data-upload-is-enabled/>';\n        $html .= '<label>' . dgettext('tuleap-tracker', 'Description:');\n        $html .= '</label>';\n        $html .= ' <input type=\"text\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][description]\" />';\n        $html .= '</p>';\n        $html .= '</div>';\n        $html .= '</div>';\n        if (isset($submitted_values[$this->id])) {\n            foreach ($submitted_values[$this->id] as $submitted_value) {\n                if (isset($submitted_value['tus-uploaded-id'])) {\n                    $html .= '<input\n                        type=\"hidden\"\n                        name=\"artifact[' . $this->id . '][][tus-uploaded-id]\"\n                        value=\"' . (int) $submitted_value['tus-uploaded-id'] . '\">';\n                }\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';  // deactivate mass change for file fields (see issue described in rev #15855)\n    }\n\n    public function fetchAllAttachment(\n        $artifact_id,\n        $values,\n        $submitter_needed,\n        array $submitted_values,\n        $read_only = true,\n        $lytebox_id = null\n    ) {\n        $html = '';\n        if ($lytebox_id === null) {\n            $lytebox_id = $this->getId();\n        }\n        if ($values !== null && count($values) > 0) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $uh    = UserHelper::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $hp->purify($this->getFileHTMLUrl($fileinfo));\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n\n                $link_show = '<a href=\"' . $query_link . '\"' .\n                                 $this->getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id) . '\n                                 title=\"' . $sanitized_description . '\">';\n\n                $add = '<div class=\"tracker_artifact_attachment\">';\n                if (! $read_only) {\n                    $add .= $this->fetchDeleteCheckbox($fileinfo, $submitted_values);\n                }\n\n                $add .= '<div class=\"tracker_artifact_preview_attachment_hover\">';\n                if ($submitter_needed) {\n                    $add .= '<div class=\"tracker_artifact_attachment_submitter\">' . 'By ' . $uh->getLinkOnUserFromUserId($fileinfo->getSubmittedBy()) . '</div>';\n                }\n                $add .= '<div class=\"tracker_artifact_attachment_size\">(' . $hp->purify($fileinfo->getHumanReadableFilesize()) . ')</div>';\n                $add .= '<div>';\n                $add .= $link_show . '<i class=\"fa fa-eye\"></i></a>';\n                $add .= '<a href=\"' . $query_link . '\" download><i class=\"fa fa-download\"></i></a>';\n                $add .= '</div>';\n                $add .= '</div>';\n\n                if ($fileinfo->isImage()) {\n                    $query_add = $hp->purify($this->getFileHTMLPreviewUrl($fileinfo));\n\n                    $add .= '<div class=\"tracker_artifact_preview_attachment image\">';\n                    $add .= '<div style=\"background-image: url(\\'' . $query_add . '\\')\"></div>';\n                    $add .= '</div>';\n                } else {\n                    $add .= '<div class=\"tracker_artifact_preview_attachment\"></div>';\n                }\n\n                $link_goto = '<a href=\"' . $query_link . '\"' .\n                                 'title=\"' . $sanitized_description . '\">';\n                $add      .= '<div class=\"tracker_artifact_attachment_name\">' . $link_goto . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a></div>';\n\n                if ($sanitized_description) {\n                    $add .= '<div class=\"tracker_artifact_attachment_description\">' . $sanitized_description . '</div>';\n                }\n\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $html .= implode('', $added);\n        }\n\n        if ($read_only && ($values === null || count($values) === 0)) {\n            $html .= $this->getNoValueLabel();\n        }\n\n        return $html;\n    }\n\n    public function getFileHTMLUrl(Tracker_FileInfo $file_info)\n    {\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/' . $this->getFilenameSlug($file_info);\n    }\n\n    public function getFileHTMLPreviewUrl(Tracker_FileInfo $file_info)\n    {\n        if (! $file_info->isImage()) {\n            return;\n        }\n\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/preview/' . $this->getFilenameSlug($file_info);\n    }\n\n    /**\n     * @return string\n     */\n    private function getFilenameSlug(Tracker_FileInfo $file_info)\n    {\n        return (int) $file_info->getId() . '-' . rawurlencode($file_info->getFilename());\n    }\n\n    private function getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id)\n    {\n        if (! $fileinfo->isImage()) {\n            return '';\n        }\n\n        if ($read_only) {\n            return 'rel=\"lytebox[' . $lytebox_id . ']\"';\n        }\n\n        return 'data-rel=\"lytebox[' . $lytebox_id . ']\"';\n    }\n\n    private function fetchDeleteCheckbox(Tracker_FileInfo $fileinfo, array $submitted_values)\n    {\n        $html    = '';\n        $html   .= '<label class=\"pc_checkbox tracker_artifact_attachment_delete\">';\n        $checked = '';\n        if (isset($submitted_values[$this->id]) && ! empty($submitted_values[$this->id]['delete']) && in_array($fileinfo->getId(), $submitted_values[$this->id]['delete'])) {\n            $checked = 'checked=\"checked\"';\n        }\n        $html .= '<input type=\"checkbox\" name=\"artifact[' . $this->id . '][delete][]\" value=\"' . $fileinfo->getId() . '\" title=\"delete\" ' . $checked . ' />&nbsp;';\n        $html .= '</label>';\n        return $html;\n    }\n\n    protected function fetchAllAttachmentForCSV($artifact_id, $values)\n    {\n        $txt = '';\n        if (count($values)) {\n            $filenames = [];\n            foreach ($values as $fileinfo) {\n                $filenames[] = $fileinfo->getFilename();\n            }\n            $txt .= implode(',', $filenames);\n        }\n        return $txt;\n    }\n\n    protected function fetchAllAttachmentTitleAndDescription($values)\n    {\n        $html = '';\n        if ($values) {\n            $purifier = Codendi_HTMLPurifier::instance();\n            $html    .= '<div class=\"tracker-artifact-attachement-title-list tracker_artifact_field\"\n                              data-field-id=\"' . $this->id . '\"\n                              data-is-required=\"false\">';\n            $html    .= '<div class=\"disabled_field\">' . dgettext('tuleap-tracker', '\"Attachment\" type field cannot be modified during artifact copy.') . '</div>';\n            $html    .= '<ul>';\n            foreach ($values as $value) {\n                $description = $value->getDescription();\n\n                $html .= '<li>';\n                $html .= '<span class=\"file-title\">';\n                $html .= $purifier->purify($value->getFileName());\n                $html .= '</span>';\n\n                if ($description) {\n                    $html .= '<span class=\"file-description\">';\n                    $html .= ' - ' . $purifier->purify($description);\n                    $html .= '</span>';\n                }\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch all attachements for Mail output\n     *\n     * @param int $artifact_id The artifact Id\n     * @param Array            $values     The actual value of the field\n     * @param String            $format       The mail format\n     *\n     * @return String\n     */\n    protected function fetchMailAllAttachment($artifact_id, $values, $format)\n    {\n        $output = '';\n        if (! count($values)) {\n            return '';\n        }\n\n        $uh = UserHelper::instance();\n\n        $proto = ForgeConfig::get('sys_https_host') ? 'https' : 'http';\n        $url   = $proto . '://' . ForgeConfig::get('sys_default_domain');\n\n        if ($format == 'text') {\n            foreach ($values as $fileinfo) {\n                $query_link = $this->getFileHTMLUrl($fileinfo);\n\n                $link    = '<' . $url . $query_link . '>';\n                $output .= $fileinfo->getDescription();\n                $output .= ' | ';\n                $output .= $fileinfo->getFilename();\n                $output .= ' | ';\n                $output .= $fileinfo->getHumanReadableFilesize();\n                $output .= ' | ';\n                $output .= $uh->getDisplayNameFromUserId($fileinfo->getSubmittedBy());\n                $output .= PHP_EOL;\n                $output .= $link;\n                $output .= PHP_EOL;\n            }\n        } else {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $hp->purify($this->getFileHTMLUrl($fileinfo));\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n                $link_show             = '<a href=\"' . $url . $query_link . '\"\n                                 title=\"' . $sanitized_description . '\">';\n\n                $info  = $link_show . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a>';\n                $info .= ' (' . $hp->purify($fileinfo->getHumanReadableFilesize()) . ')';\n\n                $add     = '<div class=\"tracker_artifact_attachment\">';\n                $add    .= '<table><tr><td>';\n                $add    .= $info;\n                $add    .= '</td></tr></table>';\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $output .= implode('', $added);\n        }\n        return $output;\n    }\n\n    protected $file_values_by_changeset;\n\n    /**\n     * @return array\n     */\n    protected function getChangesetValues($changeset_id)\n    {\n        $da = CodendiDataAccess::instance();\n        if (! $this->file_values_by_changeset) {\n            $this->file_values_by_changeset = [];\n            $field_id                       = $da->escapeInt($this->id);\n            $sql                            = \"SELECT c.changeset_id, c.has_changed, f.id\n                    FROM tracker_fileinfo as f\n                         INNER JOIN tracker_changeset_value_file AS vf on (f.id = vf.fileinfo_id)\n                         INNER JOIN tracker_changeset_value AS c\n                         ON ( vf.changeset_value_id = c.id\n                          AND c.field_id = $field_id\n                         )\n                    ORDER BY f.id\";\n            $dao                            = new DataAccessObject();\n            $file_info_factory              = $this->getTrackerFileInfoFactory();\n            foreach ($dao->retrieve($sql) as $row) {\n                $this->file_values_by_changeset[$row['changeset_id']][] = $file_info_factory->getById($row['id']);\n            }\n        }\n        return isset($this->file_values_by_changeset[$changeset_id]) ? $this->file_values_by_changeset[$changeset_id] : [];\n    }\n\n    public function previewAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->isImage() && file_exists($fileinfo->getThumbnailPath())) {\n                header('Content-type: ' . $fileinfo->getFiletype());\n                readfile($fileinfo->getThumbnailPath());\n            }\n        }\n        exit();\n    }\n\n    public function showAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->fileExists()) {\n                $http = Codendi_HTTPPurifier::instance();\n                header('X-Content-Type-Options: nosniff');\n                header('Content-Type: ' . $http->purify($fileinfo->getFiletype()));\n                header('Content-Length: ' . $http->purify($fileinfo->getFilesize()));\n                header('Content-Disposition: attachment; filename=\"' . $http->purify($fileinfo->getFilename()) . '\"');\n                header('Content-Description: ' . $http->purify($fileinfo->getDescription()));\n                if (ob_get_level()) {\n                    ob_end_clean();\n                }\n                flush();\n                $file = fopen($fileinfo->getPath(), \"r\");\n                while (! feof($file)) {\n                    print fread($file, 30 * 1024);\n                    flush();\n                }\n                fclose($file);\n            }\n        }\n        exit();\n    }\n\n    public function getRootPath()\n    {\n        return $this->getGlobalTrackerRootPath() . $this->getId();\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<table class=\"tracker_artifact_add_attachment\">';\n        $html .= '<tr><td><label>' . dgettext('tuleap-tracker', 'Description:') . '</label></td><td><label>' . dgettext('tuleap-tracker', 'File:') . '</label></td></tr>';\n        $html .= '<tr><td><input type=\"text\" id=\"tracker_field_' . $this->id . '\" /></td>';\n        $html .= '<td><input type=\"file\" id=\"tracker_field_' . $this->id . '\" /></td></tr>';\n        $html .= '</table>';\n        $html .= '</div>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'File upload');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Lets the user attach files to the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Artifact                    $artifact The artifact\n     * @param Tracker_ChangesetValue_File $value    The changeset value of this field\n     *\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value) {\n            $files_info = $value->getFiles();\n            if (count($files_info)) {\n                $html .= '<div class=\"cross-ref-tooltip-collection\">';\n\n                $hp = Codendi_HTMLPurifier::instance();\n\n                $added = [];\n                foreach ($files_info as $file_info) {\n                    $add = '';\n\n                    if ($file_info->isImage()) {\n                        $query = $this->getFileHTMLPreviewUrl($file_info);\n                        $add  .= '<img src=\"' . $hp->purify($query) . '\"\n                                      alt=\"' .  $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                                 >';\n                    } elseif ($file_info->getDescription()) {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    } else {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    }\n                    $added[] = $add;\n                }\n                $html .= implode('', $added) . '</div>';\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (is_array($value)) {\n            $this->checkAllFilesHaveBeenSuccessfullyUploaded($value);\n        }\n\n        return ! $this->has_errors;\n    }\n\n    private function checkAllFilesHaveBeenSuccessfullyUploaded($value)\n    {\n        $rule = new Rule_File();\n        foreach ($value as $i => $attachment) {\n            if ($this->isAttachmentNeedsToBeValidated($i, $attachment)) {\n                if (! $rule->isValid($attachment)) {\n                    $this->has_errors = true;\n                    $attachment_error = sprintf(dgettext('tuleap-tracker', 'Attachment #%1$s has not been saved:'), $i);\n                    $GLOBALS['Response']->addFeedback('error', $attachment_error . ' ' . $rule->getErrorMessage());\n                }\n            }\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    private function isAttachmentNeedsToBeValidated($attachment_index, array $attachment)\n    {\n        if ($attachment_index === 'delete' || isset($attachment['tus-uploaded-id'])) {\n            return false;\n        }\n\n        $is_file_uploaded             = ! empty($attachment['error']) && $attachment['error'] != UPLOAD_ERR_NO_FILE;\n        $is_file_description_provided = trim($attachment['description']);\n\n        return $is_file_uploaded || $is_file_description_provided;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact The artifact to check\n     * @param mixed    $value    The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (\n            is_array($value) &&\n            $this->isRequired() &&\n            ! $this->checkThatAtLeastOneFileIsUploaded($value) &&\n            $this->isPreviousChangesetEmpty($artifact, $value)\n        ) {\n            $this->addRequiredError();\n        }\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Check that at least one file is sent\n     *\n     * @param array $files the files\n     *\n     * @return bool true if success\n     */\n    public function checkThatAtLeastOneFileIsUploaded($files)\n    {\n        $r              = new Rule_File();\n        $a_file_is_sent = false;\n        foreach ($files as $action => $attachment) {\n            if ($a_file_is_sent) {\n                break;\n            }\n            if ((string) $action === 'delete') {\n                continue;\n            }\n            $a_file_is_sent = isset($attachment['tus-uploaded-id']) || $r->isValid($attachment);\n        }\n        return $a_file_is_sent;\n    }\n\n    /**\n     * Extract data from request\n     * Some fields like files doesn't have their value submitted in POST or GET\n     * Let them populate $fields_data[field_id] if needed\n     *\n     * @param array &$fields_data The user submitted value\n     *\n     * @return void\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        if (! isset($fields_data[$this->getId()]) || ! is_array($fields_data[$this->getId()])) {\n            $fields_data[$this->getId()] = [];\n        }\n        $files_infos = $this->getSubmittedInfoFromFILES();\n        if (isset($files_infos['name'][$this->getId()])) {\n            $info_keys = array_keys($files_infos); //name, type, error, ...\n            $nb        = count($files_infos['name'][$this->getId()]);\n            for ($i = 0; $i < $nb; ++$i) {\n                $tab = [];\n                foreach ($info_keys as $key) {\n                    $tab[$key] = $files_infos[$key][$this->getId()][$i]['file'];\n                }\n                if (isset($fields_data[$this->getId()][$i])) {\n                    $fields_data[$this->getId()][$i] = array_merge($fields_data[$this->getId()][$i], $tab);\n                } else {\n                    $fields_data[$this->getId()][] = $tab;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the array wich contains files submitted by the user\n     *\n     * @return null|array null if not found\n     */\n    protected function getSubmittedInfoFromFILES()\n    {\n        return isset($_FILES['artifact']) ? $_FILES['artifact'] : null;\n    }\n\n    protected $files_info_from_request = null;\n    /**\n     * Extract the file information (name, error, tmp, ...) from the request\n     *\n     * @return array Array of file info\n     */\n    protected function extractFilesFromRequest()\n    {\n        if (! $this->files_info_from_request) {\n        }\n        return $this->files_info_from_request;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping\n    ) {\n        $mover              = new AttachmentToFinalPlaceMover();\n        $rule_file          = new Rule_File();\n        $ongoing_upload_dao = new FileOngoingUploadDao();\n        $attachment_creator = new AttachmentForTusUploadCreator(\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider($ongoing_upload_dao),\n            $ongoing_upload_dao,\n            new AttachmentForRestCreator(\n                $mover,\n                $this->getTemporaryFileManager(),\n                new AttachmentForTraditionalUploadCreator($mover, $rule_file),\n                $rule_file\n            )\n        );\n\n        $saver = new ChangesetValueFileSaver($this->getValueDao(), $attachment_creator);\n\n        assert($previous_changesetvalue instanceof Tracker_Artifact_ChangesetValue_File || $previous_changesetvalue === null);\n        return $saver->saveValue(\n            $this->getCurrentUser(),\n            $this,\n            $changeset_value_id,\n            $value,\n            $previous_changesetvalue,\n            $url_mapping\n        );\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        //\"old\" and \"new\" value are irrelevant in this context.\n        //We just have to know if there is at least one file successfully uploaded\n        return $this->checkThatAtLeastOneFileIsUploaded($new_value) || ! empty($new_value['delete']);\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     *\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return true;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed): Tracker_Artifact_ChangesetValue_File\n    {\n        $file_info_factory = $this->getTrackerFileInfoFactory();\n\n        $files      = [];\n        $file_value = $this->getValueDao()->searchById($value_id);\n        foreach ($file_value as $row) {\n            $file = $file_info_factory->getById($row['fileinfo_id']);\n            if ($file !== null) {\n                $files[] = $file;\n            }\n        }\n        return new Tracker_Artifact_ChangesetValue_File($value_id, $changeset, $this, $has_changed, $files);\n    }\n\n    /**\n     * Get the file dao\n     *\n     * @return Tracker_FileInfoDao\n     */\n    protected function getFileInfoDao()\n    {\n        return new Tracker_FileInfoDao();\n    }\n\n    /**\n     * Get file info factory\n     *\n     * @return Tracker_FileInfoFactory\n     */\n    protected function getFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            $this->getFileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Override default value as it's not possible to import a file via CSV\n     *\n     * @param type $csv_value\n     *\n     * @return array\n     */\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValue(array $rest_value, ?Artifact $artifact = null)\n    {\n        //Transform array to object\n        $value = json_decode(json_encode($rest_value), false);\n\n        $this->validateDataFromREST($value);\n\n        $builder = new FieldDataFromRESTBuilder(\n            $this->getUserManager(),\n            $this->getFormElementFactory(),\n            $this->getTrackerFileInfoFactory(),\n            $this->getTemporaryFileManager(),\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider(new FileOngoingUploadDao())\n        );\n        return $builder->buildFieldDataFromREST($value, $this, $artifact);\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    private function validateDataFromREST($data)\n    {\n        if (! property_exists($data, 'value') || ! is_array($data->value)) {\n            throw new Tracker_FormElement_InvalidFieldException('Invalid format for file field \"' . $data->field_id . '\". '\n                . ' Correct format is {\"field_id\" : 425, \"value\" : [457, 258]}');\n        }\n    }\n\n    /**\n     * @return Tracker_Artifact_Attachment_TemporaryFileManager\n     */\n    private function getTemporaryFileManager()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManager(\n            $this->getUserManager(),\n            new Tracker_Artifact_Attachment_TemporaryFileManagerDao(),\n            new System_Command(),\n            ForgeConfig::get('sys_file_deletion_delay'),\n            new \\Tuleap\\DB\\DBTransactionExecutorWithConnection(\\Tuleap\\DB\\DBFactory::getMainTuleapDBConnection())\n        );\n    }\n\n    private function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    protected function getTrackerFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            new Tracker_FileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    protected function getTemporaryFileManagerDao()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManagerDao();\n    }\n\n    public function deleteChangesetValue(Tracker_Artifact_Changeset $changeset, $changeset_value_id)\n    {\n        $values = $this->getChangesetValue($changeset, $changeset_value_id, false);\n        foreach ($values as $fileinfo) {\n            $fileinfo->delete();\n        }\n        parent::deleteChangesetValue($changeset, $changeset_value_id);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitFile($this);\n    }\n\n    protected function isPreviousChangesetEmpty(Artifact $artifact, $value)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n\n        if (\n            $last_changeset &&\n            ! is_a($last_changeset, Tracker_Artifact_Changeset_Null::class) &&\n            count($last_changeset->getValue($this)->getFiles()) > 0\n        ) {\n            return $this->areAllFilesDeletedFromPreviousChangeset($last_changeset, $value);\n        }\n        return true;\n    }\n\n    private function areAllFilesDeletedFromPreviousChangeset($last_changeset, $value)\n    {\n        $files = $last_changeset->getValue($this)->getFiles();\n        if (isset($value['delete']) && (count($files) == count($value['delete']))) {\n            return true;\n        }\n        return false;\n    }\n\n    public function isEmpty($value, $artifact)\n    {\n        $is_empty = ! $this->checkThatAtLeastOneFileIsUploaded($value);\n        if ($is_empty) {\n            $is_empty = $this->isPreviousChangesetEmpty($artifact, $value);\n        }\n        return $is_empty;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGlobalTrackerRootPath()\n    {\n        return ForgeConfig::get('sys_data_dir') . '/tracker/';\n    }\n\n    protected function getFileInfoForTusUploadedFileReadyToBeAttachedProvider(FileOngoingUploadDao $ongoing_upload_dao): FileInfoForTusUploadedFileReadyToBeAttachedProvider\n    {\n        return new FileInfoForTusUploadedFileReadyToBeAttachedProvider(\n            new FileBeingUploadedInformationProvider(\n                new UploadPathAllocator(\n                    $ongoing_upload_dao,\n                    Tracker_FormElementFactory::instance()\n                ),\n                $ongoing_upload_dao\n            ),\n            $ongoing_upload_dao\n        );\n    }\n}\n"], "filenames": ["plugins/tracker/include/Tracker/Artifact/Tracker_Artifact_ChangesetValue_File.class.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_File.php"], "buggy_code_start_loc": [245, 313], "buggy_code_end_loc": [246, 664], "fixing_code_start_loc": [245, 313], "fixing_code_end_loc": [247, 664], "type": "CWE-79", "message": "Tuleap Open ALM is a libre and open source tool for end to end traceability of application and system developments. There is a cross-site scripting vulnerability in Tuleap Community Edition prior to 12.11.99.25 and Tuleap Enterprise Edition 12.11-2. A malicious user with the capability to add and remove attachment to an artifact could force a victim to execute uncontrolled code. Tuleap Community Edition 11.17.99.146 and Tuleap Enterprise Edition 12.11-2 contain a fix for the issue.", "other": {"cve": {"id": "CVE-2021-41142", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-14T16:15:09.617", "lastModified": "2021-10-20T18:07:10.410", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap Open ALM is a libre and open source tool for end to end traceability of application and system developments. There is a cross-site scripting vulnerability in Tuleap Community Edition prior to 12.11.99.25 and Tuleap Enterprise Edition 12.11-2. A malicious user with the capability to add and remove attachment to an artifact could force a victim to execute uncontrolled code. Tuleap Community Edition 11.17.99.146 and Tuleap Enterprise Edition 12.11-2 contain a fix for the issue."}, {"lang": "es", "value": "Tuleap Open ALM es una herramienta libre y de c\u00f3digo abierto para la trazabilidad de extremo a extremo de los desarrollos de aplicaciones y sistemas. Se presenta una vulnerabilidad de tipo cross-site scripting en Tuleap Community Edition versiones anteriores a 12.11.99.25 y Tuleap Enterprise Edition versi\u00f3n 12.11-2. Un usuario malicioso con capacidad para a\u00f1adir y eliminar archivos adjuntos a un artefacto podr\u00eda forzar a la v\u00edctima a ejecutar c\u00f3digo no controlado. Tuleap Community Edition 11.17.99.146 y Tuleap Enterprise Edition 12.11-2 contienen una correcci\u00f3n del problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "11.17.99.146", "matchCriteriaId": "E96D40EA-8C9F-4052-9F5E-84F8368AD64B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionEndExcluding": "12.11-2", "matchCriteriaId": "A58EE8FC-2459-40EF-8991-360390118C6E"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/d6c837ed6fa66d319175954a42f93d4d86745208", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-p3j6-6h9h-34r5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=d6c837ed6fa66d319175954a42f93d4d86745208", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=22570", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/d6c837ed6fa66d319175954a42f93d4d86745208"}}