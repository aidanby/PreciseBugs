{"buggy_code": ["<?php\n\nnamespace Barzahlen;\n\nclass Middleware\n{\n    /**\n     * @param string $host\n     * @param string $method\n     * @param string $path\n     * @param string $query\n     * @param string $date\n     * @param string $idempotency\n     * @param string $body\n     * @param string $key\n     * @return string\n     */\n    public static function generateSignature($host, $method, $path, $query, $date, $idempotency, $body, $key)\n    {\n        $signatureData = array(\n            $host,\n            $method,\n            $path,\n            $query,\n            $date,\n            $idempotency,\n            hash('sha256', $body)\n        );\n        $signatureString = implode(\"\\n\", $signatureData);\n\n        return hash_hmac('sha256', $signatureString, $key);\n    }\n}\n", "<?php\n\nnamespace Barzahlen;\n\nclass Webhook\n{\n    /**\n     * @var string\n     */\n    private $paymentKey;\n\n\n    /**\n     * @param string $paymentKey\n     */\n    public function __construct($paymentKey)\n    {\n        $this->paymentKey = $paymentKey;\n    }\n\n    /**\n     * @param array $header\n     * @param string $body\n     * @return boolean\n     */\n    public function verify($header, $body)\n    {\n        $signature = Middleware::generateSignature(\n            $header['HTTP_HOST'] . ':' . $header['SERVER_PORT'],\n            $header['REQUEST_METHOD'],\n            $header['SCRIPT_NAME'],\n            $header['QUERY_STRING'],\n            $header['HTTP_DATE'],\n            '',\n            $body,\n            $this->paymentKey\n        );\n\n        return $header['HTTP_BZ_SIGNATURE'] == 'BZ1-HMAC-SHA256 ' . $signature;\n    }\n}", "<?php\n\nnamespace Barzahlen\\Tests;\n\nuse Barzahlen\\Middleware;\n\nclass MiddlewareTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testGenerateSignature()\n    {\n        $signature = Middleware::generateSignature(\n            'callback.example.com:443',\n            'POST',\n            '/barzahlen/callback',\n            '',\n            'Fri, 01 Apr 2016 09:20:06 GMT',\n            '',\n            '{\"foo\":\"bar\"}',\n            PAYMENTKEY\n        );\n\n        $this->assertEquals('35764655afcf2121602a5493b58020d3b6b9d75b4150c7395acf6114ae0ba49c', $signature);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Barzahlen;\n\nclass Middleware\n{\n    /**\n     * @param string $host\n     * @param string $method\n     * @param string $path\n     * @param string $query\n     * @param string $date\n     * @param string $idempotency\n     * @param string $body\n     * @param string $key\n     * @return string\n     */\n    public static function generateSignature($host, $method, $path, $query, $date, $idempotency, $body, $key)\n    {\n        $signatureData = array(\n            $host,\n            $method,\n            $path,\n            $query,\n            $date,\n            $idempotency,\n            hash('sha256', $body)\n        );\n        $signatureString = implode(\"\\n\", $signatureData);\n\n        return hash_hmac('sha256', $signatureString, $key);\n    }\n\n    /**\n     * @param string $first\n     * @param string $second\n     * @return boolean\n     *\n     * Workaround for PHP < 5.6 by: asphp at dsgml dot com\n     * Source: https://php.net/manual/en/function.hash-equals.php#115635\n     */\n    public static function stringsEqual($first, $second)\n    {\n        if (function_exists('hash_equals')) {\n            return hash_equals($first, $second);\n        }\n\n        if (strlen($first) != strlen($second)) {\n            return false;\n        }\n\n        $res = $first ^ $second;\n        $ret = 0;\n        for ($i = strlen($res) - 1; $i >= 0; $i--) {\n            $ret |= ord($res[$i]);\n        }\n        return !$ret;\n    }\n}\n", "<?php\n\nnamespace Barzahlen;\n\nclass Webhook\n{\n    /**\n     * @var string\n     */\n    private $paymentKey;\n\n\n    /**\n     * @param string $paymentKey\n     */\n    public function __construct($paymentKey)\n    {\n        $this->paymentKey = $paymentKey;\n    }\n\n    /**\n     * @param array $header\n     * @param string $body\n     * @return boolean\n     */\n    public function verify($header, $body)\n    {\n        $signature = Middleware::generateSignature(\n            $header['HTTP_HOST'] . ':' . $header['SERVER_PORT'],\n            $header['REQUEST_METHOD'],\n            $header['SCRIPT_NAME'],\n            $header['QUERY_STRING'],\n            $header['HTTP_DATE'],\n            '',\n            $body,\n            $this->paymentKey\n        );\n\n        return Middleware::stringsEqual($header['HTTP_BZ_SIGNATURE'], 'BZ1-HMAC-SHA256 ' . $signature);\n    }\n}", "<?php\n\nnamespace Barzahlen\\Tests;\n\nuse Barzahlen\\Middleware;\n\nclass MiddlewareTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testGenerateSignature()\n    {\n        $signature = Middleware::generateSignature(\n            'callback.example.com:443',\n            'POST',\n            '/barzahlen/callback',\n            '',\n            'Fri, 01 Apr 2016 09:20:06 GMT',\n            '',\n            '{\"foo\":\"bar\"}',\n            PAYMENTKEY\n        );\n\n        $this->assertEquals('35764655afcf2121602a5493b58020d3b6b9d75b4150c7395acf6114ae0ba49c', $signature);\n    }\n\n    public function testStringsEqualInvalidLength()\n    {\n        $first = 'thisisarandomstring123';\n        $second = 'thisisanotherrandomstring123';\n\n        $this->assertFalse(Middleware::stringsEqual($first, $second));\n    }\n\n    public function testStringsEqualInvalidContent()\n    {\n        $first = 'thisisarandomstring123';\n        $second = 'thisisarandomstring124';\n\n        $this->assertFalse(Middleware::stringsEqual($first, $second));\n    }\n\n    public function testStringsEqualValid()\n    {\n        $first = 'thismustbeavalidhash';\n        $second = 'thismustbeavalidhash';\n\n        $this->assertTrue(Middleware::stringsEqual($first, $second));\n    }\n}\n"], "filenames": ["src/Middleware.php", "src/Webhook.php", "tests/MiddlewareTest.php"], "buggy_code_start_loc": [32, 39, 23], "buggy_code_end_loc": [32, 40, 23], "fixing_code_start_loc": [33, 39, 24], "fixing_code_end_loc": [59, 40, 48], "type": "CWE-203", "message": "A vulnerability, which was classified as problematic, was found in viafintech Barzahlen Payment Module PHP SDK up to 2.0.0. Affected is the function verify of the file src/Webhook.php. The manipulation leads to observable timing discrepancy. Upgrading to version 2.0.1 is able to address this issue. The name of the patch is 3e7d29dc0ca6c054a6d6e211f32dae89078594c1. It is recommended to upgrade the affected component. VDB-217650 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15015", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-08T18:15:10.023", "lastModified": "2023-01-12T23:39:22.993", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in viafintech Barzahlen Payment Module PHP SDK up to 2.0.0. Affected is the function verify of the file src/Webhook.php. The manipulation leads to observable timing discrepancy. Upgrading to version 2.0.1 is able to address this issue. The name of the patch is 3e7d29dc0ca6c054a6d6e211f32dae89078594c1. It is recommended to upgrade the affected component. VDB-217650 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:H/Au:S/C:P/I:N/A:N", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 1.4}, "baseSeverity": "LOW", "exploitabilityScore": 2.5, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-203"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-208"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:paysafe:barzahlen_payment_module_php_sdk:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.1", "matchCriteriaId": "CB9AB020-ACA7-4595-993B-BC91108BBB8F"}]}]}], "references": [{"url": "https://github.com/viafintech/Barzahlen-PHP/commit/3e7d29dc0ca6c054a6d6e211f32dae89078594c1", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/viafintech/Barzahlen-PHP/pull/8", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/viafintech/Barzahlen-PHP/releases/tag/v2.0.1", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217650", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217650", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/viafintech/Barzahlen-PHP/commit/3e7d29dc0ca6c054a6d6e211f32dae89078594c1"}}