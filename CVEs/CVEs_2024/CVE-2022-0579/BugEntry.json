{"buggy_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Models\\Supplier;\nuse Illuminate\\Support\\Facades\\Auth;\n\n/**\n * This controller handles all actions related to Suppliers for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass SuppliersController extends Controller\n{\n    /**\n     * Show a list of all suppliers\n     *\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function index()\n    {\n        // Grab all the suppliers\n        $this->authorize('view', Supplier::class);\n\n        // Show the page\n        return view('suppliers/index');\n    }\n\n\n    /**\n     * Supplier create.\n     *\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function create()\n    {\n        $this->authorize('create', Supplier::class);\n        return view('suppliers/edit')->with('item', new Supplier);\n    }\n\n\n    /**\n     * Supplier create form processing.\n     *\n     * @param ImageUploadRequest $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function store(ImageUploadRequest $request)\n    {\n        $this->authorize('create', Supplier::class);\n        // Create a new supplier\n        $supplier = new Supplier;\n        // Save the location data\n        $supplier->name                 = request('name');\n        $supplier->address              = request('address');\n        $supplier->address2             = request('address2');\n        $supplier->city                 = request('city');\n        $supplier->state                = request('state');\n        $supplier->country              = request('country');\n        $supplier->zip                  = request('zip');\n        $supplier->contact              = request('contact');\n        $supplier->phone                = request('phone');\n        $supplier->fax                  = request('fax');\n        $supplier->email                = request('email');\n        $supplier->notes                = request('notes');\n        $supplier->url                  = $supplier->addhttp(request('url'));\n        $supplier->user_id              = Auth::id();\n        $supplier = $request->handleImages($supplier);\n\n\n        if ($supplier->save()) {\n            return redirect()->route('suppliers.index')->with('success', trans('admin/suppliers/message.create.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($supplier->getErrors());\n    }\n\n    /**\n     * Supplier update.\n     *\n     * @param  int $supplierId\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function edit($supplierId = null)\n    {\n        $this->authorize('update', Supplier::class);\n        // Check if the supplier exists\n        if (is_null($item = Supplier::find($supplierId))) {\n            // Redirect to the supplier  page\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.does_not_exist'));\n        }\n\n        // Show the page\n        return view('suppliers/edit', compact('item'));\n    }\n\n\n    /**\n     * Supplier update form processing page.\n     *\n     * @param  int $supplierId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function update($supplierId, ImageUploadRequest $request)\n    {\n        $this->authorize('update', Supplier::class);\n        // Check if the supplier exists\n        if (is_null($supplier = Supplier::find($supplierId))) {\n            // Redirect to the supplier  page\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.does_not_exist'));\n        }\n\n        // Save the  data\n        $supplier->name                 = request('name');\n        $supplier->address              = request('address');\n        $supplier->address2             = request('address2');\n        $supplier->city                 = request('city');\n        $supplier->state                = request('state');\n        $supplier->country              = request('country');\n        $supplier->zip                  = request('zip');\n        $supplier->contact              = request('contact');\n        $supplier->phone                = request('phone');\n        $supplier->fax                  = request('fax');\n        $supplier->email                = request('email');\n        $supplier->url                  = $supplier->addhttp(request('url'));\n        $supplier->notes                = request('notes');\n        $supplier = $request->handleImages($supplier);\n\n        if ($supplier->save()) {\n            return redirect()->route('suppliers.index')->with('success', trans('admin/suppliers/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($supplier->getErrors());\n\n    }\n\n    /**\n     * Delete the given supplier.\n     *\n     * @param  int $supplierId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function destroy($supplierId)\n    {\n        $this->authorize('delete', Supplier::class);\n        if (is_null($supplier = Supplier::with('asset_maintenances', 'assets', 'licenses')->withCount('asset_maintenances as asset_maintenances_count','assets as assets_count','licenses as licenses_count')->find($supplierId))) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.not_found'));\n        }\n\n\n        if ($supplier->assets_count > 0) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.delete.assoc_assets', ['asset_count' => (int) $supplier->assets_count]));\n        }\n\n        if ($supplier->asset_maintenances_count > 0) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.delete.assoc_maintenances', ['asset_maintenances_count' => $supplier->asset_maintenances_count]));\n        }\n\n        if ($supplier->licenses_count > 0) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.delete.assoc_licenses', ['licenses_count' => (int) $supplier->licenses_count]));\n        }\n\n        $supplier->delete();\n        return redirect()->route('suppliers.index')->with('success',\n            trans('admin/suppliers/message.delete.success')\n        );\n\n\n    }\n\n\n    /**\n     *  Get the asset information to present to the supplier view page\n     *\n     * @param null $supplierId\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @internal param int $assetId\n     */\n    public function show($supplierId = null)\n    {\n        $supplier = Supplier::find($supplierId);\n\n        if (isset($supplier->id)) {\n                return view('suppliers/view', compact('supplier'));\n        }\n\n        return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.does_not_exist'));\n    }\n\n}\n"], "fixing_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Models\\Supplier;\nuse Illuminate\\Support\\Facades\\Auth;\n\n/**\n * This controller handles all actions related to Suppliers for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass SuppliersController extends Controller\n{\n    /**\n     * Show a list of all suppliers\n     *\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function index()\n    {\n        // Grab all the suppliers\n        $this->authorize('view', Supplier::class);\n\n        // Show the page\n        return view('suppliers/index');\n    }\n\n\n    /**\n     * Supplier create.\n     *\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function create()\n    {\n        $this->authorize('create', Supplier::class);\n        return view('suppliers/edit')->with('item', new Supplier);\n    }\n\n\n    /**\n     * Supplier create form processing.\n     *\n     * @param ImageUploadRequest $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function store(ImageUploadRequest $request)\n    {\n        $this->authorize('create', Supplier::class);\n        // Create a new supplier\n        $supplier = new Supplier;\n        // Save the location data\n        $supplier->name                 = request('name');\n        $supplier->address              = request('address');\n        $supplier->address2             = request('address2');\n        $supplier->city                 = request('city');\n        $supplier->state                = request('state');\n        $supplier->country              = request('country');\n        $supplier->zip                  = request('zip');\n        $supplier->contact              = request('contact');\n        $supplier->phone                = request('phone');\n        $supplier->fax                  = request('fax');\n        $supplier->email                = request('email');\n        $supplier->notes                = request('notes');\n        $supplier->url                  = $supplier->addhttp(request('url'));\n        $supplier->user_id              = Auth::id();\n        $supplier = $request->handleImages($supplier);\n\n\n        if ($supplier->save()) {\n            return redirect()->route('suppliers.index')->with('success', trans('admin/suppliers/message.create.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($supplier->getErrors());\n    }\n\n    /**\n     * Supplier update.\n     *\n     * @param  int $supplierId\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function edit($supplierId = null)\n    {\n        $this->authorize('update', Supplier::class);\n        // Check if the supplier exists\n        if (is_null($item = Supplier::find($supplierId))) {\n            // Redirect to the supplier  page\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.does_not_exist'));\n        }\n\n        // Show the page\n        return view('suppliers/edit', compact('item'));\n    }\n\n\n    /**\n     * Supplier update form processing page.\n     *\n     * @param  int $supplierId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function update($supplierId, ImageUploadRequest $request)\n    {\n        $this->authorize('update', Supplier::class);\n        // Check if the supplier exists\n        if (is_null($supplier = Supplier::find($supplierId))) {\n            // Redirect to the supplier  page\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.does_not_exist'));\n        }\n\n        // Save the  data\n        $supplier->name                 = request('name');\n        $supplier->address              = request('address');\n        $supplier->address2             = request('address2');\n        $supplier->city                 = request('city');\n        $supplier->state                = request('state');\n        $supplier->country              = request('country');\n        $supplier->zip                  = request('zip');\n        $supplier->contact              = request('contact');\n        $supplier->phone                = request('phone');\n        $supplier->fax                  = request('fax');\n        $supplier->email                = request('email');\n        $supplier->url                  = $supplier->addhttp(request('url'));\n        $supplier->notes                = request('notes');\n        $supplier = $request->handleImages($supplier);\n\n        if ($supplier->save()) {\n            return redirect()->route('suppliers.index')->with('success', trans('admin/suppliers/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($supplier->getErrors());\n\n    }\n\n    /**\n     * Delete the given supplier.\n     *\n     * @param  int $supplierId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function destroy($supplierId)\n    {\n        $this->authorize('delete', Supplier::class);\n        if (is_null($supplier = Supplier::with('asset_maintenances', 'assets', 'licenses')->withCount('asset_maintenances as asset_maintenances_count','assets as assets_count','licenses as licenses_count')->find($supplierId))) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.not_found'));\n        }\n\n\n        if ($supplier->assets_count > 0) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.delete.assoc_assets', ['asset_count' => (int) $supplier->assets_count]));\n        }\n\n        if ($supplier->asset_maintenances_count > 0) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.delete.assoc_maintenances', ['asset_maintenances_count' => $supplier->asset_maintenances_count]));\n        }\n\n        if ($supplier->licenses_count > 0) {\n            return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.delete.assoc_licenses', ['licenses_count' => (int) $supplier->licenses_count]));\n        }\n\n        $supplier->delete();\n        return redirect()->route('suppliers.index')->with('success',\n            trans('admin/suppliers/message.delete.success')\n        );\n\n\n    }\n\n\n    /**\n     *  Get the asset information to present to the supplier view page\n     *\n     * @param null $supplierId\n     * @return \\Illuminate\\Contracts\\View\\View\n     * @internal param int $assetId\n     */\n    public function show($supplierId = null)\n    {\n        $this->authorize('view', Supplier::class);\n        $supplier = Supplier::find($supplierId);\n\n        if (isset($supplier->id)) {\n                return view('suppliers/view', compact('supplier'));\n        }\n\n        return redirect()->route('suppliers.index')->with('error', trans('admin/suppliers/message.does_not_exist'));\n    }\n\n}\n"], "filenames": ["app/Http/Controllers/SuppliersController.php"], "buggy_code_start_loc": [186], "buggy_code_end_loc": [186], "fixing_code_start_loc": [187], "fixing_code_end_loc": [188], "type": "CWE-269", "message": "Improper Privilege Management in Packagist snipe/snipe-it prior to 5.3.9.", "other": {"cve": {"id": "CVE-2022-0579", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-14T19:15:07.917", "lastModified": "2022-02-23T14:47:56.590", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Privilege Management in Packagist snipe/snipe-it prior to 5.3.9."}, {"lang": "es", "value": "Una Administraci\u00f3n Inapropiada de privilegios en Packagist snipe/snipe-it versiones anteriores a 5.3.9"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.9", "matchCriteriaId": "24425AC5-AD26-43FE-9807-10E0FA8E8F8A"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/db0c0e790892db874573d95f8ae4268b8a011ab1", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/70a99cf4-3241-4ffc-b9ed-5c54932f3849", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/db0c0e790892db874573d95f8ae4268b8a011ab1"}}