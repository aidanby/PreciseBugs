{"buggy_code": ["'use strict'\n\nconst path = require('node:path')\nconst yaml = require('yaml')\nconst fastifyStatic = require('@fastify/static')\nconst rfdc = require('rfdc')()\nconst swaggerInitializer = require('./swagger-initializer')\nconst indexHtml = require('./index-html')\n\n// URI prefix to separate static assets for swagger UI\nconst staticPrefix = '/static'\n\nfunction getRedirectPathForTheRootRoute (url) {\n  let redirectPath\n\n  if (url.length !== 0 && url[url.length - 1] === '/') {\n    redirectPath = `.${staticPrefix}/index.html`\n  } else {\n    const urlPathParts = url.split('/')\n    redirectPath = `./${urlPathParts[urlPathParts.length - 1]}${staticPrefix}/index.html`\n  }\n\n  return redirectPath\n}\n\nfunction fastifySwagger (fastify, opts, done) {\n  let staticCSP = false\n  if (opts.staticCSP === true) {\n    const csp = fastify.swaggerCSP\n    staticCSP = `default-src 'self'; base-uri 'self'; font-src 'self' https: data:; frame-ancestors 'self'; img-src 'self' data: validator.swagger.io; object-src 'none'; script-src 'self' ${csp.script.join(' ')}; script-src-attr 'none'; style-src 'self' https: ${csp.style.join(' ')}; upgrade-insecure-requests;`\n  }\n  if (typeof opts.staticCSP === 'string') {\n    staticCSP = opts.staticCSP\n  }\n  if (typeof opts.staticCSP === 'object' && opts.staticCSP !== null) {\n    staticCSP = ''\n    Object.keys(opts.staticCSP).forEach(function (key) {\n      const value = Array.isArray(opts.staticCSP[key]) ? opts.staticCSP[key].join(' ') : opts.staticCSP[key]\n      staticCSP += `${key.toLowerCase()} ${value}; `\n    })\n  }\n\n  if (typeof staticCSP === 'string' || typeof opts.transformStaticCSP === 'function') {\n    fastify.addHook('onSend', function (request, reply, payload, done) {\n      // set static csp when it is passed\n      if (typeof staticCSP === 'string') {\n        reply.header('content-security-policy', staticCSP.trim())\n      }\n      // mutate the header when it is passed\n      const header = reply.getHeader('content-security-policy')\n      if (header && typeof opts.transformStaticCSP === 'function') {\n        reply.header('content-security-policy', opts.transformStaticCSP(header))\n      }\n      done()\n    })\n  }\n\n  const hooks = Object.create(null)\n  if (opts.hooks) {\n    const additionalHooks = [\n      'onRequest',\n      'preHandler'\n    ]\n    for (const hook of additionalHooks) {\n      hooks[hook] = opts.hooks[hook]\n    }\n  }\n\n  fastify.route({\n    url: '/',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: (req, reply) => {\n      reply.redirect(getRedirectPathForTheRootRoute(req.raw.url))\n    }\n  })\n\n  if (opts.theme) {\n    const themePrefix = `${staticPrefix}/theme`\n    if (opts.theme.css) {\n      for (const cssFile of opts.theme.css) {\n        fastify.route({\n          url: `${themePrefix}/${cssFile.filename}`,\n          method: 'GET',\n          schema: { hide: true },\n          ...hooks,\n          handler: (req, reply) => {\n            reply\n              .header('content-type', 'text/css; charset=UTF-8')\n              .send(cssFile.content)\n          }\n        })\n      }\n    }\n\n    if (opts.theme.js) {\n      for (const jsFile of opts.theme.js) {\n        fastify.route({\n          url: `${themePrefix}/${jsFile.filename}`,\n          method: 'GET',\n          schema: { hide: true },\n          ...hooks,\n          handler: (req, reply) => {\n            reply\n              .header('content-type', 'application/javascript; charset=utf-8')\n              .send(jsFile.content)\n          }\n        })\n      }\n    }\n\n    if (opts.theme.favicon) {\n      for (const favicon of opts.theme.favicon) {\n        fastify.route({\n          url: `${themePrefix}/${favicon.filename}`,\n          method: 'GET',\n          schema: { hide: true },\n          ...hooks,\n          handler: (req, reply) => {\n            reply\n              .header('content-type', favicon.type)\n              .send(favicon.content)\n          }\n        })\n      }\n    }\n  }\n\n  const indexHtmlContent = indexHtml(opts)\n\n  fastify.route({\n    url: `${staticPrefix}/index.html`,\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: (req, reply) => {\n      reply\n        .header('content-type', 'text/html; charset=utf-8')\n        .send(indexHtmlContent)\n    }\n  })\n\n  const swaggerInitializerContent = swaggerInitializer(opts)\n\n  fastify.route({\n    url: `${staticPrefix}/swagger-initializer.js`,\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: (req, reply) => {\n      reply\n        .header('content-type', 'application/javascript; charset=utf-8')\n        .send(swaggerInitializerContent)\n    }\n  })\n\n  const hasTransformSpecificationFn = typeof opts.transformSpecification === 'function'\n  const shouldCloneSwaggerObject = opts.transformSpecificationClone ?? true\n  const transformSpecification = opts.transformSpecification\n  fastify.route({\n    url: '/json',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: hasTransformSpecificationFn\n      ? shouldCloneSwaggerObject\n        ? function (req, reply) {\n          reply.send(transformSpecification(rfdc(fastify.swagger()), req, reply))\n        }\n        : function (req, reply) {\n          reply.send(transformSpecification(fastify.swagger(), req, reply))\n        }\n      : function (req, reply) {\n        reply.send(fastify.swagger())\n      }\n  })\n\n  fastify.route({\n    url: '/yaml',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: hasTransformSpecificationFn\n      ? shouldCloneSwaggerObject\n        ? function (req, reply) {\n          reply\n            .type('application/x-yaml')\n            .send(yaml.stringify(transformSpecification(rfdc(fastify.swagger()), req, reply)))\n        }\n        : function (req, reply) {\n          reply\n            .type('application/x-yaml')\n            .send(yaml.stringify(transformSpecification(fastify.swagger(), req, reply)))\n        }\n      : function (req, reply) {\n        reply\n          .type('application/x-yaml')\n          .send(fastify.swagger({ yaml: true }))\n      }\n  })\n\n  // serve swagger-ui with the help of @fastify/static\n  fastify.register(fastifyStatic, {\n    root: opts.baseDir || path.join(__dirname, '..', 'static'),\n    prefix: staticPrefix,\n    decorateReply: false\n  })\n\n  fastify.register(fastifyStatic, {\n    root: opts.baseDir || path.join(__dirname, '..'),\n    serve: false\n  })\n\n  // Handler for external documentation files passed via $ref\n  fastify.route({\n    url: '/*',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: function (req, reply) {\n      const file = req.params['*']\n      reply.sendFile(file)\n    }\n  })\n\n  done()\n}\n\nmodule.exports = fastifySwagger\n", "'use strict'\n\nconst t = require('tap')\nconst test = t.test\nconst Fastify = require('fastify')\nconst Swagger = require('@apidevtools/swagger-parser')\nconst yaml = require('yaml')\nconst fastifySwagger = require('@fastify/swagger')\nconst fastifySwaggerUi = require('../index')\nconst {\n  schemaQuerystring,\n  schemaBody,\n  schemaParams,\n  schemaSecurity,\n  swaggerOption\n} = require('../examples/options')\n\nconst resolve = require('node:path').resolve\nconst readFileSync = require('node:fs').readFileSync\n\nconst schemaParamsWithoutDesc = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n\nconst schemaParamsWithKey = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'user id'\n        },\n        key: {\n          type: 'string',\n          description: 'just some random key'\n        }\n      }\n    }\n  }\n}\n\ntest('/documentation/json route', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/json'\n  })\n\n  const payload = JSON.parse(res.payload)\n\n  await Swagger.validate(payload)\n  t.pass('valid swagger object')\n})\n\ntest('fastify.swagger should return a valid swagger yaml', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n  fastify.all('/parametersWithoutDesc/:id', schemaParamsWithoutDesc, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/yaml'\n  })\n\n  t.equal(typeof res.payload, 'string')\n  t.equal(res.headers['content-type'], 'application/x-yaml')\n  yaml.parse(res.payload)\n  t.pass('valid swagger yaml')\n})\n\ntest('/documentation should redirect to ./documentation/static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './documentation/static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/documentation/ should redirect to ./static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/documentation should redirect to ./documentation/static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/v1/documentation' })\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/documentation'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './documentation/static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/documentation/ should redirect to ./static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/v1/documentation' })\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/foobar should redirect to ./foobar/static/index.html - in plugin', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  fastify.register(async function (fastify, options) {\n    await fastify.register(fastifySwagger, swaggerOption)\n    await fastify.register(fastifySwaggerUi, { routePrefix: '/foobar' })\n\n    fastify.get('/', () => {})\n    fastify.post('/', () => {})\n    fastify.get('/example', schemaQuerystring, () => {})\n    fastify.post('/example', schemaBody, () => {})\n    fastify.get('/parameters/:id', schemaParams, () => {})\n    fastify.get('/example1', schemaSecurity, () => {})\n  }, { prefix: '/v1' })\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/foobar'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './foobar/static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/foobar/ should redirect to ./static/index.html - in plugin', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  fastify.register(async function (fastify, options) {\n    await fastify.register(fastifySwagger, swaggerOption)\n    await fastify.register(fastifySwaggerUi, { routePrefix: '/foobar' })\n\n    fastify.get('/', () => {})\n    fastify.post('/', () => {})\n    fastify.get('/example', schemaQuerystring, () => {})\n    fastify.post('/example', schemaBody, () => {})\n    fastify.get('/parameters/:id', schemaParams, () => {})\n    fastify.get('/example1', schemaSecurity, () => {})\n  }, { prefix: '/v1' })\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/foobar/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('with routePrefix: \\'/\\' should redirect to ./static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/' })\n\n  fastify.get('/foo', () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/documentation/static/:file should send back the correct file', async (t) => {\n  t.plan(21)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  await fastify.ready()\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/'\n    })\n    t.equal(res.statusCode, 302)\n    t.equal(res.headers.location, './static/index.html')\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'text/html; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'index.html'),\n        'utf8'\n      ),\n      res.payload\n    )\n    t.ok(res.payload.indexOf('swagger-initializer.js') !== -1)\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-initializer.js'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'application/javascript; charset=utf-8')\n    t.ok(res.payload.indexOf('resolveUrl') !== -1)\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/oauth2-redirect.html'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'text/html; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'oauth2-redirect.html'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-ui.css'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'text/css; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'swagger-ui.css'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-ui-bundle.js'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'application/javascript; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'swagger-ui-bundle.js'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-ui-standalone-preset.js'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'application/javascript; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'swagger-ui-standalone-preset.js'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n})\n\ntest('/documentation/static/:file should send back file from baseDir', async (t) => {\n  t.plan(2)\n  const fastify = Fastify()\n\n  const uiConfig = {\n    baseDir: resolve(__dirname, '..', 'examples', 'static')\n  }\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, uiConfig)\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/example-logo.svg'\n    })\n    t.equal(res.statusCode, 200)\n    t.equal(\n      res.payload,\n      readFileSync(\n        resolve(__dirname, '..', 'examples', 'static', 'example-logo.svg'),\n        'utf8'\n      )\n    )\n  }\n})\n\ntest('/documentation/static/:file 404', async (t) => {\n  t.plan(2)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/static/stuff.css'\n  })\n  const payload = JSON.parse(res.payload)\n  t.equal(res.statusCode, 404)\n  t.match(payload, {\n    error: 'Not Found',\n    statusCode: 404\n  })\n})\n\ntest('/documentation2/json route (overwrite)', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/documentation2' })\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n  fastify.get('/parameters/:id/:key', schemaParamsWithKey, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation2/json'\n  })\n\n  const payload = JSON.parse(res.payload)\n\n  await Swagger.validate(payload)\n  t.pass('valid swagger object')\n})\n\ntest('/documentation/:myfile should return 404 in dynamic mode', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/swagger-ui.js'\n  })\n  t.equal(res.statusCode, 404)\n})\n\ntest('/documentation/:myfile should run custom NotFoundHandler in dynamic mode', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  const notFoundHandler = function (req, reply) {\n    reply.code(410).send()\n  }\n  fastify.setNotFoundHandler(notFoundHandler)\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/swagger-ui.js'\n  })\n  t.equal(res.statusCode, 410)\n})\n\ntest('/documentation/ should redirect to ./static/index.html', async (t) => {\n  t.plan(2)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n})\n\ntest('should return silent log level of route /documentation', async (t) => {\n  const fastify = Fastify()\n\n  fastify.addHook('onRoute', function (route) {\n    t.equal(route.logLevel, 'silent')\n  })\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { logLevel: 'silent' })\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n})\n\ntest('should return empty log level of route /documentation', async (t) => {\n  const fastify = Fastify()\n\n  fastify.addHook('onRoute', function (route) {\n    t.equal(route.logLevel, '')\n  })\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n})\n"], "fixing_code": ["'use strict'\n\nconst path = require('node:path')\nconst yaml = require('yaml')\nconst fastifyStatic = require('@fastify/static')\nconst rfdc = require('rfdc')()\nconst swaggerInitializer = require('./swagger-initializer')\nconst indexHtml = require('./index-html')\n\n// URI prefix to separate static assets for swagger UI\nconst staticPrefix = '/static'\n\nfunction getRedirectPathForTheRootRoute (url) {\n  let redirectPath\n\n  if (url.length !== 0 && url[url.length - 1] === '/') {\n    redirectPath = `.${staticPrefix}/index.html`\n  } else {\n    const urlPathParts = url.split('/')\n    redirectPath = `./${urlPathParts[urlPathParts.length - 1]}${staticPrefix}/index.html`\n  }\n\n  return redirectPath\n}\n\nfunction fastifySwagger (fastify, opts, done) {\n  let staticCSP = false\n  if (opts.staticCSP === true) {\n    const csp = fastify.swaggerCSP\n    staticCSP = `default-src 'self'; base-uri 'self'; font-src 'self' https: data:; frame-ancestors 'self'; img-src 'self' data: validator.swagger.io; object-src 'none'; script-src 'self' ${csp.script.join(' ')}; script-src-attr 'none'; style-src 'self' https: ${csp.style.join(' ')}; upgrade-insecure-requests;`\n  }\n  if (typeof opts.staticCSP === 'string') {\n    staticCSP = opts.staticCSP\n  }\n  if (typeof opts.staticCSP === 'object' && opts.staticCSP !== null) {\n    staticCSP = ''\n    Object.keys(opts.staticCSP).forEach(function (key) {\n      const value = Array.isArray(opts.staticCSP[key]) ? opts.staticCSP[key].join(' ') : opts.staticCSP[key]\n      staticCSP += `${key.toLowerCase()} ${value}; `\n    })\n  }\n\n  if (typeof staticCSP === 'string' || typeof opts.transformStaticCSP === 'function') {\n    fastify.addHook('onSend', function (request, reply, payload, done) {\n      // set static csp when it is passed\n      if (typeof staticCSP === 'string') {\n        reply.header('content-security-policy', staticCSP.trim())\n      }\n      // mutate the header when it is passed\n      const header = reply.getHeader('content-security-policy')\n      if (header && typeof opts.transformStaticCSP === 'function') {\n        reply.header('content-security-policy', opts.transformStaticCSP(header))\n      }\n      done()\n    })\n  }\n\n  const hooks = Object.create(null)\n  if (opts.hooks) {\n    const additionalHooks = [\n      'onRequest',\n      'preHandler'\n    ]\n    for (const hook of additionalHooks) {\n      hooks[hook] = opts.hooks[hook]\n    }\n  }\n\n  fastify.route({\n    url: '/',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: (req, reply) => {\n      reply.redirect(getRedirectPathForTheRootRoute(req.raw.url))\n    }\n  })\n\n  if (opts.theme) {\n    const themePrefix = `${staticPrefix}/theme`\n    if (opts.theme.css) {\n      for (const cssFile of opts.theme.css) {\n        fastify.route({\n          url: `${themePrefix}/${cssFile.filename}`,\n          method: 'GET',\n          schema: { hide: true },\n          ...hooks,\n          handler: (req, reply) => {\n            reply\n              .header('content-type', 'text/css; charset=UTF-8')\n              .send(cssFile.content)\n          }\n        })\n      }\n    }\n\n    if (opts.theme.js) {\n      for (const jsFile of opts.theme.js) {\n        fastify.route({\n          url: `${themePrefix}/${jsFile.filename}`,\n          method: 'GET',\n          schema: { hide: true },\n          ...hooks,\n          handler: (req, reply) => {\n            reply\n              .header('content-type', 'application/javascript; charset=utf-8')\n              .send(jsFile.content)\n          }\n        })\n      }\n    }\n\n    if (opts.theme.favicon) {\n      for (const favicon of opts.theme.favicon) {\n        fastify.route({\n          url: `${themePrefix}/${favicon.filename}`,\n          method: 'GET',\n          schema: { hide: true },\n          ...hooks,\n          handler: (req, reply) => {\n            reply\n              .header('content-type', favicon.type)\n              .send(favicon.content)\n          }\n        })\n      }\n    }\n  }\n\n  const indexHtmlContent = indexHtml(opts)\n\n  fastify.route({\n    url: `${staticPrefix}/index.html`,\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: (req, reply) => {\n      reply\n        .header('content-type', 'text/html; charset=utf-8')\n        .send(indexHtmlContent)\n    }\n  })\n\n  const swaggerInitializerContent = swaggerInitializer(opts)\n\n  fastify.route({\n    url: `${staticPrefix}/swagger-initializer.js`,\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: (req, reply) => {\n      reply\n        .header('content-type', 'application/javascript; charset=utf-8')\n        .send(swaggerInitializerContent)\n    }\n  })\n\n  const hasTransformSpecificationFn = typeof opts.transformSpecification === 'function'\n  const shouldCloneSwaggerObject = opts.transformSpecificationClone ?? true\n  const transformSpecification = opts.transformSpecification\n  fastify.route({\n    url: '/json',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: hasTransformSpecificationFn\n      ? shouldCloneSwaggerObject\n        ? function (req, reply) {\n          reply.send(transformSpecification(rfdc(fastify.swagger()), req, reply))\n        }\n        : function (req, reply) {\n          reply.send(transformSpecification(fastify.swagger(), req, reply))\n        }\n      : function (req, reply) {\n        reply.send(fastify.swagger())\n      }\n  })\n\n  fastify.route({\n    url: '/yaml',\n    method: 'GET',\n    schema: { hide: true },\n    ...hooks,\n    handler: hasTransformSpecificationFn\n      ? shouldCloneSwaggerObject\n        ? function (req, reply) {\n          reply\n            .type('application/x-yaml')\n            .send(yaml.stringify(transformSpecification(rfdc(fastify.swagger()), req, reply)))\n        }\n        : function (req, reply) {\n          reply\n            .type('application/x-yaml')\n            .send(yaml.stringify(transformSpecification(fastify.swagger(), req, reply)))\n        }\n      : function (req, reply) {\n        reply\n          .type('application/x-yaml')\n          .send(fastify.swagger({ yaml: true }))\n      }\n  })\n\n  // serve swagger-ui with the help of @fastify/static\n  fastify.register(fastifyStatic, {\n    root: opts.baseDir || path.join(__dirname, '..', 'static'),\n    prefix: staticPrefix,\n    decorateReply: false\n  })\n\n  if (opts.baseDir) {\n    fastify.register(fastifyStatic, {\n      root: opts.baseDir,\n      serve: false\n    })\n\n    // Handler for external documentation files passed via $ref\n    fastify.route({\n      url: '/*',\n      method: 'GET',\n      schema: { hide: true },\n      ...hooks,\n      handler: function (req, reply) {\n        const file = req.params['*']\n        reply.sendFile(file)\n      }\n    })\n  }\n\n  done()\n}\n\nmodule.exports = fastifySwagger\n", "'use strict'\n\nconst t = require('tap')\nconst test = t.test\nconst Fastify = require('fastify')\nconst Swagger = require('@apidevtools/swagger-parser')\nconst yaml = require('yaml')\nconst fastifySwagger = require('@fastify/swagger')\nconst fastifySwaggerUi = require('../index')\nconst {\n  schemaQuerystring,\n  schemaBody,\n  schemaParams,\n  schemaSecurity,\n  swaggerOption\n} = require('../examples/options')\n\nconst resolve = require('node:path').resolve\nconst readFileSync = require('node:fs').readFileSync\n\nconst schemaParamsWithoutDesc = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n\nconst schemaParamsWithKey = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'user id'\n        },\n        key: {\n          type: 'string',\n          description: 'just some random key'\n        }\n      }\n    }\n  }\n}\n\ntest('/documentation/json route', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/json'\n  })\n\n  const payload = JSON.parse(res.payload)\n\n  await Swagger.validate(payload)\n  t.pass('valid swagger object')\n})\n\ntest('fastify.swagger should return a valid swagger yaml', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n  fastify.all('/parametersWithoutDesc/:id', schemaParamsWithoutDesc, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/yaml'\n  })\n\n  t.equal(typeof res.payload, 'string')\n  t.equal(res.headers['content-type'], 'application/x-yaml')\n  yaml.parse(res.payload)\n  t.pass('valid swagger yaml')\n})\n\ntest('/documentation should redirect to ./documentation/static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './documentation/static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/documentation/ should redirect to ./static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/documentation should redirect to ./documentation/static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/v1/documentation' })\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/documentation'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './documentation/static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/documentation/ should redirect to ./static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/v1/documentation' })\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/foobar should redirect to ./foobar/static/index.html - in plugin', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  fastify.register(async function (fastify, options) {\n    await fastify.register(fastifySwagger, swaggerOption)\n    await fastify.register(fastifySwaggerUi, { routePrefix: '/foobar' })\n\n    fastify.get('/', () => {})\n    fastify.post('/', () => {})\n    fastify.get('/example', schemaQuerystring, () => {})\n    fastify.post('/example', schemaBody, () => {})\n    fastify.get('/parameters/:id', schemaParams, () => {})\n    fastify.get('/example1', schemaSecurity, () => {})\n  }, { prefix: '/v1' })\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/foobar'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './foobar/static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/v1/foobar/ should redirect to ./static/index.html - in plugin', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  fastify.register(async function (fastify, options) {\n    await fastify.register(fastifySwagger, swaggerOption)\n    await fastify.register(fastifySwaggerUi, { routePrefix: '/foobar' })\n\n    fastify.get('/', () => {})\n    fastify.post('/', () => {})\n    fastify.get('/example', schemaQuerystring, () => {})\n    fastify.post('/example', schemaBody, () => {})\n    fastify.get('/parameters/:id', schemaParams, () => {})\n    fastify.get('/example1', schemaSecurity, () => {})\n  }, { prefix: '/v1' })\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/v1/foobar/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('with routePrefix: \\'/\\' should redirect to ./static/index.html', async (t) => {\n  t.plan(3)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/' })\n\n  fastify.get('/foo', () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n  t.equal(typeof res.payload, 'string')\n})\n\ntest('/documentation/static/:file should send back the correct file', async (t) => {\n  t.plan(21)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  await fastify.ready()\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/'\n    })\n    t.equal(res.statusCode, 302)\n    t.equal(res.headers.location, './static/index.html')\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'text/html; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'index.html'),\n        'utf8'\n      ),\n      res.payload\n    )\n    t.ok(res.payload.indexOf('swagger-initializer.js') !== -1)\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-initializer.js'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'application/javascript; charset=utf-8')\n    t.ok(res.payload.indexOf('resolveUrl') !== -1)\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/oauth2-redirect.html'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'text/html; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'oauth2-redirect.html'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-ui.css'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'text/css; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'swagger-ui.css'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-ui-bundle.js'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'application/javascript; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'swagger-ui-bundle.js'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/swagger-ui-standalone-preset.js'\n    })\n    t.equal(typeof res.payload, 'string')\n    t.equal(res.headers['content-type'], 'application/javascript; charset=UTF-8')\n    t.equal(\n      readFileSync(\n        resolve(__dirname, '..', 'static', 'swagger-ui-standalone-preset.js'),\n        'utf8'\n      ),\n      res.payload\n    )\n  }\n})\n\ntest('/documentation/static/:file should send back file from baseDir', async (t) => {\n  t.plan(2)\n  const fastify = Fastify()\n\n  const uiConfig = {\n    baseDir: resolve(__dirname, '..', 'examples', 'static')\n  }\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, uiConfig)\n\n  {\n    const res = await fastify.inject({\n      method: 'GET',\n      url: '/documentation/static/example-logo.svg'\n    })\n    t.equal(res.statusCode, 200)\n    t.equal(\n      res.payload,\n      readFileSync(\n        resolve(__dirname, '..', 'examples', 'static', 'example-logo.svg'),\n        'utf8'\n      )\n    )\n  }\n})\n\ntest('/documentation/static/:file 404', async (t) => {\n  t.plan(2)\n  const fastify = Fastify()\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/static/stuff.css'\n  })\n  const payload = JSON.parse(res.payload)\n  t.equal(res.statusCode, 404)\n  t.match(payload, {\n    error: 'Not Found',\n    statusCode: 404\n  })\n})\n\ntest('/documentation2/json route (overwrite)', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { routePrefix: '/documentation2' })\n\n  fastify.get('/', () => {})\n  fastify.post('/', () => {})\n  fastify.get('/example', schemaQuerystring, () => {})\n  fastify.post('/example', schemaBody, () => {})\n  fastify.get('/parameters/:id', schemaParams, () => {})\n  fastify.get('/example1', schemaSecurity, () => {})\n  fastify.get('/parameters/:id/:key', schemaParamsWithKey, () => {})\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation2/json'\n  })\n\n  const payload = JSON.parse(res.payload)\n\n  await Swagger.validate(payload)\n  t.pass('valid swagger object')\n})\n\ntest('/documentation/:myfile should return 404 in dynamic mode', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/swagger-ui.js'\n  })\n  t.equal(res.statusCode, 404)\n})\n\ntest('/documentation/:myfile should run custom NotFoundHandler in dynamic mode', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  const notFoundHandler = function (req, reply) {\n    reply.code(410).send()\n  }\n  fastify.setNotFoundHandler(notFoundHandler)\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/swagger-ui.js'\n  })\n  t.equal(res.statusCode, 410)\n})\n\ntest('/documentation/ should redirect to ./static/index.html', async (t) => {\n  t.plan(2)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n})\n\ntest('/documentation/* should not return module files when baseDir not set', async (t) => {\n  t.plan(1)\n  const fastify = Fastify()\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/README.md'\n  })\n  t.equal(res.statusCode, 404)\n})\n\ntest('should return silent log level of route /documentation', async (t) => {\n  const fastify = Fastify()\n\n  fastify.addHook('onRoute', function (route) {\n    t.equal(route.logLevel, 'silent')\n  })\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi, { logLevel: 'silent' })\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n})\n\ntest('should return empty log level of route /documentation', async (t) => {\n  const fastify = Fastify()\n\n  fastify.addHook('onRoute', function (route) {\n    t.equal(route.logLevel, '')\n  })\n\n  await fastify.register(fastifySwagger, swaggerOption)\n  await fastify.register(fastifySwaggerUi)\n\n  const res = await fastify.inject({\n    method: 'GET',\n    url: '/documentation/'\n  })\n  t.equal(res.statusCode, 302)\n  t.equal(res.headers.location, './static/index.html')\n})\n"], "filenames": ["lib/routes.js", "test/route.test.js"], "buggy_code_start_loc": [210, 497], "buggy_code_end_loc": [226, 497], "fixing_code_start_loc": [210, 498], "fixing_code_end_loc": [228, 511], "type": "CWE-1188", "message": "fastify-swagger-ui is a Fastify plugin for serving Swagger UI.  Prior to 2.1.0, the default configuration of `@fastify/swagger-ui` without `baseDir` set will lead to all files in the module's directory being exposed via http routes served by the module.  The vulnerability is fixed in v2.1.0. Setting the `baseDir` option can also work around this vulnerability.", "other": {"cve": {"id": "CVE-2024-22207", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-15T16:15:13.437", "lastModified": "2024-02-16T13:15:10.320", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "fastify-swagger-ui is a Fastify plugin for serving Swagger UI.  Prior to 2.1.0, the default configuration of `@fastify/swagger-ui` without `baseDir` set will lead to all files in the module's directory being exposed via http routes served by the module.  The vulnerability is fixed in v2.1.0. Setting the `baseDir` option can also work around this vulnerability."}, {"lang": "es", "value": "fastify-swagger-ui es un complemento de Fastify para servir la interfaz de usuario de Swagger. Antes de 2.1.0, la configuraci\u00f3n predeterminada de `@fastify/swagger-ui` sin `baseDir` configurado har\u00e1 que todos los archivos en el directorio del m\u00f3dulo queden expuestos a trav\u00e9s de rutas http servidas por el m\u00f3dulo. La vulnerabilidad se solucion\u00f3 en v2.1.0. Configurar la opci\u00f3n `baseDir` tambi\u00e9n puede solucionar esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1188"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:smartbear:swagger_ui:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.1.0", "matchCriteriaId": "1B7560CB-4508-4059-AB35-DA1482ECC357"}]}]}], "references": [{"url": "https://github.com/fastify/fastify-swagger-ui/commit/13d799a2c5f14d3dd5b15892e03bbcbae63ee6f7", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/fastify/fastify-swagger-ui/security/advisories/GHSA-62jr-84gf-wmg4", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20240216-0002/", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/fastify/fastify-swagger-ui/commit/13d799a2c5f14d3dd5b15892e03bbcbae63ee6f7"}}