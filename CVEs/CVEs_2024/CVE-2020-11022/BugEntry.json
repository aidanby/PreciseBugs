{"buggy_code": ["define( [\n\t\"./core\",\n\t\"./core/isAttached\",\n\t\"./var/flat\",\n\t\"./var/isFunction\",\n\t\"./var/push\",\n\t\"./var/rcheckableType\",\n\t\"./core/access\",\n\t\"./manipulation/var/rtagName\",\n\t\"./manipulation/var/rscriptType\",\n\t\"./manipulation/wrapMap\",\n\t\"./manipulation/getAll\",\n\t\"./manipulation/setGlobalEval\",\n\t\"./manipulation/buildFragment\",\n\t\"./manipulation/support\",\n\n\t\"./data/var/dataPriv\",\n\t\"./data/var/dataUser\",\n\t\"./data/var/acceptData\",\n\t\"./core/DOMEval\",\n\t\"./core/nodeName\",\n\n\t\"./core/init\",\n\t\"./traversing\",\n\t\"./selector\",\n\t\"./event\"\n], function( jQuery, isAttached, flat, isFunction, push, rcheckableType,\n\taccess, rtagName, rscriptType,\n\twrapMap, getAll, setGlobalEval, buildFragment, support,\n\tdataPriv, dataUser, acceptData, DOMEval, nodeName ) {\n\n\"use strict\";\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\nreturn jQuery;\n} );\n", "/* eslint no-multi-str: \"off\" */\n\nvar FILEPATH = \"/test/data/testinit.js\",\n\tactiveScript = [].slice.call( document.getElementsByTagName( \"script\" ), -1 )[ 0 ],\n\tparentUrl = activeScript && activeScript.src ?\n\t\tactiveScript.src.replace( /[?#].*/, \"\" ) + FILEPATH.replace( /[^/]+/g, \"..\" ) + \"/\" :\n\t\t\"../\",\n\n\t// baseURL is intentionally set to \"data/\" instead of \"\".\n\t// This is not just for convenience (since most files are in data/)\n\t// but also to ensure that urls without prefix fail.\n\t// Otherwise it's easy to write tests that pass on test/index.html\n\t// but fail in Karma runner (where the baseURL is different).\n\tbaseURL = parentUrl + \"test/data/\",\n\tsupportjQuery = this.jQuery,\n\n\t// see RFC 2606\n\texternalHost = \"example.com\";\n\nthis.hasPHP = true;\nthis.isLocal = window.location.protocol === \"file:\";\n\n// Setup global variables before loading jQuery for testing .noConflict()\nsupportjQuery.noConflict( true );\nwindow.originaljQuery = this.jQuery = undefined;\nwindow.original$ = this.$ = \"replaced\";\n\n/**\n * Returns an array of elements with the given IDs\n * @example q( \"main\", \"foo\", \"bar\" )\n * @result [<div id=\"main\">, <span id=\"foo\">, <input id=\"bar\">]\n */\nthis.q = function() {\n\tvar r = [],\n\t\ti = 0;\n\n\tfor ( ; i < arguments.length; i++ ) {\n\t\tr.push( document.getElementById( arguments[ i ] ) );\n\t}\n\treturn r;\n};\n\n/**\n * Asserts that a select matches the given IDs\n * @param {String} message - Assertion name\n * @param {String} selector - Sizzle selector\n * @param {String} expectedIds - Array of ids to construct what is expected\n * @param {(String|Node)=document} context - Selector context\n * @example match(\"Check for something\", \"p\", [\"foo\", \"bar\"]);\n */\nfunction match( message, selector, expectedIds, context, assert ) {\n\tvar f = jQuery( selector, context ).get(),\n\t\ts = \"\",\n\t\ti = 0;\n\n\tfor ( ; i < f.length; i++ ) {\n\t\ts += ( s && \",\" ) + \"\\\"\" + f[ i ].id + \"\\\"\";\n\t}\n\n\tassert.deepEqual( f, q.apply( q, expectedIds ), message + \" (\" + selector + \")\" );\n}\n\n/**\n * Asserts that a select matches the given IDs.\n * The select is not bound by a context.\n * @param {String} message - Assertion name\n * @param {String} selector - Sizzle selector\n * @param {String} expectedIds - Array of ids to construct what is expected\n * @example t(\"Check for something\", \"p\", [\"foo\", \"bar\"]);\n */\nQUnit.assert.t = function( message, selector, expectedIds ) {\n\tmatch( message, selector, expectedIds, undefined, QUnit.assert );\n};\n\n/**\n * Asserts that a select matches the given IDs.\n * The select is performed within the `#qunit-fixture` context.\n * @param {String} message - Assertion name\n * @param {String} selector - Sizzle selector\n * @param {String} expectedIds - Array of ids to construct what is expected\n * @example selectInFixture(\"Check for something\", \"p\", [\"foo\", \"bar\"]);\n */\nQUnit.assert.selectInFixture = function( message, selector, expectedIds ) {\n\tmatch( message, selector, expectedIds, \"#qunit-fixture\", QUnit.assert );\n};\n\nthis.createDashboardXML = function() {\n\tvar string = \"<?xml version='1.0' encoding='UTF-8'?> \\\n\t<dashboard> \\\n\t\t<locations class='foo'> \\\n\t\t\t<location for='bar' checked='different'> \\\n\t\t\t\t<infowindowtab normal='ab' mixedCase='yes'> \\\n\t\t\t\t\t<tab title='Location'><![CDATA[blabla]]></tab> \\\n\t\t\t\t\t<tab title='Users'><![CDATA[blublu]]></tab> \\\n\t\t\t\t</infowindowtab> \\\n\t\t\t</location> \\\n\t\t</locations> \\\n\t</dashboard>\";\n\n\treturn jQuery.parseXML( string );\n};\n\nthis.createWithFriesXML = function() {\n\tvar string = \"<?xml version='1.0' encoding='UTF-8'?> \\\n\t<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' \\\n\t\txmlns:xsd='http://www.w3.org/2001/XMLSchema' \\\n\t\txmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'> \\\n\t\t<soap:Body> \\\n\t\t\t<jsconf xmlns='http://{{ externalHost }}/ns1'> \\\n\t\t\t\t<response xmlns:ab='http://{{ externalHost }}/ns2'> \\\n\t\t\t\t\t<meta> \\\n\t\t\t\t\t\t<component id='seite1' class='component'> \\\n\t\t\t\t\t\t\t<properties xmlns:cd='http://{{ externalHost }}/ns3'> \\\n\t\t\t\t\t\t\t\t<property name='prop1'> \\\n\t\t\t\t\t\t\t\t\t<thing /> \\\n\t\t\t\t\t\t\t\t\t<value>1</value> \\\n\t\t\t\t\t\t\t\t</property> \\\n\t\t\t\t\t\t\t\t<property name='prop2'> \\\n\t\t\t\t\t\t\t\t\t<thing att='something' /> \\\n\t\t\t\t\t\t\t\t</property> \\\n\t\t\t\t\t\t\t\t<foo_bar>foo</foo_bar> \\\n\t\t\t\t\t\t\t</properties> \\\n\t\t\t\t\t\t</component> \\\n\t\t\t\t\t</meta> \\\n\t\t\t\t</response> \\\n\t\t\t</jsconf> \\\n\t\t</soap:Body> \\\n\t</soap:Envelope>\";\n\n\treturn jQuery.parseXML( string.replace( /\\{\\{\\s*externalHost\\s*\\}\\}/g, externalHost ) );\n};\n\nthis.createXMLFragment = function() {\n\tvar xml, frag;\n\tif ( window.ActiveXObject ) {\n\t\txml = new window.ActiveXObject( \"msxml2.domdocument\" );\n\t} else {\n\t\txml = document.implementation.createDocument( \"\", \"\", null );\n\t}\n\n\tif ( xml ) {\n\t\tfrag = xml.createElement( \"data\" );\n\t}\n\n\treturn frag;\n};\n\nwindow.fireNative = document.createEvent ?\n\tfunction( node, type ) {\n\t\tvar event = document.createEvent( \"HTMLEvents\" );\n\n\t\tevent.initEvent( type, true, true );\n\t\tnode.dispatchEvent( event );\n\t} :\n\tfunction( node, type ) {\n\t\tnode.fireEvent( \"on\" + type, document.createEventObject() );\n\t};\n\n/**\n * Add random number to url to stop caching\n *\n * Also prefixes with baseURL automatically.\n *\n * @example url(\"index.html\")\n * @result \"data/index.html?10538358428943\"\n *\n * @example url(\"mock.php?foo=bar\")\n * @result \"data/mock.php?foo=bar&10538358345554\"\n */\nfunction url( value ) {\n\treturn baseURL + value + ( /\\?/.test( value ) ? \"&\" : \"?\" ) +\n\t\tnew Date().getTime() + \"\" + parseInt( Math.random() * 100000, 10 );\n}\n\n// Ajax testing helper\nthis.ajaxTest = function( title, expect, options ) {\n\tQUnit.test( title, function( assert ) {\n\t\tassert.expect( expect );\n\t\tvar requestOptions;\n\n\t\tif ( typeof options === \"function\" ) {\n\t\t\toptions = options( assert );\n\t\t}\n\t\toptions = options || [];\n\t\trequestOptions = options.requests || options.request || options;\n\t\tif ( !Array.isArray( requestOptions ) ) {\n\t\t\trequestOptions = [ requestOptions ];\n\t\t}\n\n\t\tvar done = assert.async();\n\n\t\tif ( options.setup ) {\n\t\t\toptions.setup();\n\t\t}\n\n\t\tvar completed = false,\n\t\t\tremaining = requestOptions.length,\n\t\t\tcomplete = function() {\n\t\t\t\tif ( !completed && --remaining === 0 ) {\n\t\t\t\t\tcompleted = true;\n\t\t\t\t\tdelete ajaxTest.abort;\n\t\t\t\t\tif ( options.teardown ) {\n\t\t\t\t\t\toptions.teardown();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure all events will be called before done()\n\t\t\t\t\tsetTimeout( done );\n\t\t\t\t}\n\t\t\t},\n\t\t\trequests = jQuery.map( requestOptions, function( options ) {\n\t\t\t\tvar request = ( options.create || jQuery.ajax )( options ),\n\t\t\t\t\tcallIfDefined = function( deferType, optionType ) {\n\t\t\t\t\t\tvar handler = options[ deferType ] || !!options[ optionType ];\n\t\t\t\t\t\treturn function( _, status ) {\n\t\t\t\t\t\t\tif ( !completed ) {\n\t\t\t\t\t\t\t\tif ( !handler ) {\n\t\t\t\t\t\t\t\t\tassert.ok( false, \"unexpected \" + status );\n\t\t\t\t\t\t\t\t} else if ( typeof handler === \"function\" ) {\n\t\t\t\t\t\t\t\t\thandler.apply( this, arguments );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\tif ( options.afterSend ) {\n\t\t\t\t\toptions.afterSend( request, assert );\n\t\t\t\t}\n\n\t\t\t\treturn request\n\t\t\t\t\t.done( callIfDefined( \"done\", \"success\" ) )\n\t\t\t\t\t.fail( callIfDefined( \"fail\", \"error\" ) )\n\t\t\t\t\t.always( complete );\n\t\t\t} );\n\n\t\tajaxTest.abort = function( reason ) {\n\t\t\tif ( !completed ) {\n\t\t\t\tcompleted = true;\n\t\t\t\tdelete ajaxTest.abort;\n\t\t\t\tassert.ok( false, \"aborted \" + reason );\n\t\t\t\tjQuery.each( requests, function( i, request ) {\n\t\t\t\t\trequest.abort();\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n};\n\nthis.testIframe = function( title, fileName, func, wrapper ) {\n\tif ( !wrapper ) {\n\t\twrapper = QUnit.test;\n\t}\n\twrapper.call( QUnit, title, function( assert ) {\n\t\tvar done = assert.async(),\n\t\t\t$iframe = supportjQuery( \"<iframe/>\" )\n\t\t\t\t.css( { position: \"absolute\", top: \"0\", left: \"-600px\", width: \"500px\" } )\n\t\t\t\t.attr( { id: \"qunit-fixture-iframe\", src: url( fileName ) } );\n\n\t\t// Test iframes are expected to invoke this via startIframeTest (cf. iframeTest.js)\n\t\twindow.iframeCallback = function() {\n\t\t\tvar args = Array.prototype.slice.call( arguments );\n\n\t\t\targs.unshift( assert );\n\n\t\t\tsetTimeout( function() {\n\t\t\t\tvar result;\n\n\t\t\t\tthis.iframeCallback = undefined;\n\n\t\t\t\tresult = func.apply( this, args );\n\n\t\t\t\tfunction finish() {\n\t\t\t\t\tfunc = function() {};\n\t\t\t\t\t$iframe.remove();\n\t\t\t\t\tdone();\n\t\t\t\t}\n\n\t\t\t\t// Wait for promises returned by `func`.\n\t\t\t\tif ( result && result.then ) {\n\t\t\t\t\tresult.then( finish );\n\t\t\t\t} else {\n\t\t\t\t\tfinish();\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\t// Attach iframe to the body for visibility-dependent code\n\t\t// It will be removed by either the above code, or the testDone callback in testrunner.js\n\t\t$iframe.prependTo( document.body );\n\t} );\n};\nthis.iframeCallback = undefined;\n\n// Tests are always loaded async\n// except when running tests in Karma (See Gruntfile)\nif ( !window.__karma__ ) {\n\tQUnit.config.autostart = false;\n}\n\n// Leverage QUnit URL parsing to detect testSwarm environment and \"basic\" testing mode\nQUnit.isSwarm = ( QUnit.urlParams.swarmURL + \"\" ).indexOf( \"http\" ) === 0;\nQUnit.basicTests = ( QUnit.urlParams.module + \"\" ) === \"basic\";\n\n// Async test for module script type support\nfunction moduleTypeSupported() {\n\tvar script = document.createElement( \"script\" );\n\tscript.type = \"module\";\n\tscript.text = \"QUnit.moduleTypeSupported = true\";\n\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n}\nmoduleTypeSupported();\n\nthis.loadTests = function() {\n\n\t// QUnit.config is populated from QUnit.urlParams but only at the beginning\n\t// of the test run. We need to read both.\n\tvar amd = QUnit.config.amd || QUnit.urlParams.amd;\n\n\t// Directly load tests that need evaluation before DOMContentLoaded.\n\tif ( !amd || document.readyState === \"loading\" ) {\n\t\tdocument.write( \"<script src='\" + parentUrl + \"test/unit/ready.js'><\\x2Fscript>\" );\n\t} else {\n\t\tQUnit.module( \"ready\", function() {\n\t\t\tQUnit.skip( \"jQuery ready tests skipped in async mode\", function() {} );\n\t\t} );\n\t}\n\n\t// Get testSubproject from testrunner first\n\trequire( [ parentUrl + \"test/data/testrunner.js\" ], function() {\n\t\tvar i = 0,\n\t\t\ttests = [\n\t\t\t\t// A special module with basic tests, meant for\n\t\t\t\t// not fully supported environments like Android 2.3,\n\t\t\t\t// jsdom or PhantomJS. We run it everywhere, though,\n\t\t\t\t// to make sure tests are not broken.\n\t\t\t\t\"unit/basic.js\",\n\n\t\t\t\t\"unit/core.js\",\n\t\t\t\t\"unit/callbacks.js\",\n\t\t\t\t\"unit/deferred.js\",\n\t\t\t\t\"unit/deprecated.js\",\n\t\t\t\t\"unit/support.js\",\n\t\t\t\t\"unit/data.js\",\n\t\t\t\t\"unit/queue.js\",\n\t\t\t\t\"unit/attributes.js\",\n\t\t\t\t\"unit/event.js\",\n\t\t\t\t\"unit/selector.js\",\n\t\t\t\t\"unit/traversing.js\",\n\t\t\t\t\"unit/manipulation.js\",\n\t\t\t\t\"unit/wrap.js\",\n\t\t\t\t\"unit/css.js\",\n\t\t\t\t\"unit/serialize.js\",\n\t\t\t\t\"unit/ajax.js\",\n\t\t\t\t\"unit/effects.js\",\n\t\t\t\t\"unit/offset.js\",\n\t\t\t\t\"unit/dimensions.js\",\n\t\t\t\t\"unit/animation.js\",\n\t\t\t\t\"unit/tween.js\"\n\t\t\t];\n\n\t\t// Ensure load order (to preserve test numbers)\n\t\t( function loadDep() {\n\t\t\tvar dep = tests[ i++ ];\n\n\t\t\tif ( dep ) {\n\t\t\t\tif ( !QUnit.basicTests || i === 1 ) {\n\t\t\t\t\trequire( [ parentUrl + \"test/\" + dep ], loadDep );\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// When running basic tests, replace other modules with dummies to avoid overloading\n\t\t\t\t// impaired clients.\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.module( dep.replace( /^.*\\/|\\.js$/g, \"\" ) );\n\t\t\t\t\tloadDep();\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif ( window.__karma__ && window.__karma__.start ) {\n\t\t\t\t\twindow.__karma__.start();\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.load();\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Run in noConflict mode\n\t\t\t\t */\n\t\t\t\tjQuery.noConflict();\n\n\t\t\t\t// Load the TestSwarm listener if swarmURL is in the address.\n\t\t\t\tif ( QUnit.isSwarm ) {\n\t\t\t\t\trequire( [ \"http://swarm.jquery.org/js/inject.js?\" + ( new Date() ).getTime() ],\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t}\n\t\t} )();\n\t} );\n};\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\" id=\"html\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title>jQuery Local File Test</title>\n\t<!-- Includes -->\n\t<script src=\"jquery.js\"></script>\n\t<style>\n\t\t.error { color: red; }\n\t\t.success { color: green; }\n\t</style>\n</head>\n<body>\n\t<h1>jQuery Local File Test</h1>\n\t<h2>\n\t\tIntroduction\n\t</h2>\n\t<ul>\n\t\t<li>\n\t\t\tAccess this file using the \"file:\" protocol,\n\t\t</li>\n\t\t<li>\n\t\t\ttwo green \"OK\" strings must appear below,\n\t\t</li>\n\t\t<li>\n\t\t\tEmpty local files will issue errors, it's a known limitation.\n\t\t</li>\n\t</ul>\n\t<h2>\n\t\tResults\n\t</h2>\n\t<ul>\n\t\t<li>\n\t\t\tSuccess:\n\t\t\t<span id=\"success\">\n\t\t\t</span>\n\t\t</li>\n\t\t<li>\n\t\t\tError:\n\t\t\t<span id=\"error\">\n\t\t\t</span>\n\t\t</li>\n\t</ul>\n\t<h2>\n\t\tLogs:\n\t</h2>\n\t<ul id=\"log\">\n\t</ul>\n\t<script>\n\t\tvar logUL = jQuery( \"#log\" );\n\t\tfunction doLog( message, args ) {\n\t\t\tjQuery( \"<li />\").appendTo( logUL ).text( message + ': \"' + Array.prototype.join.call( args, '\" - \"' ) + '\"' );\n\t\t}\n\t\tjQuery.ajax( \"./data/badjson.js\" , {\n\t\t\tcontext: jQuery( \"#success\" ),\n\t\t\tdataType: \"text\"\n\t\t}).success(function( data, _, xhr ) {\n\t\t\tdoLog( \"Success (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( data ? \"success\" : \"error\" ).text( \"OK\" );\n\t\t}).error(function( xhr ) {\n\t\t\tdoLog( \"Success (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( \"error\" ).text( \"FAIL\" );\n\t\t});\n\t\tjQuery.ajax( \"./data/doesnotexist.ext\" , {\n\t\t\tcontext: jQuery( \"#error\" ),\n\t\t\tdataType: \"text\"\n\t\t}).error(function( xhr ) {\n\t\t\tdoLog( \"Error (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( \"success\" ).text( \"OK\" );\n\t\t}).success(function( data, _, xhr ) {\n\t\t\tdoLog( \"Error (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( \"error\" ).text( \"FAIL\" );\n\t\t});\n\t</script>\n</body>\n", "QUnit.module( \"ajax\", {\n\tafterEach: function() {\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\" );\n\t\tmoduleTeardown.apply( this, arguments );\n\t}\n} );\n\n( function() {\n\tQUnit.test( \"Unit Testing Environment\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tassert.ok( hasPHP, \"Running in an environment with PHP support. The AJAX tests only run if the environment supports PHP!\" );\n\t\tassert.ok( !isLocal, \"Unit tests are not ran from file:// (especially in Chrome. If you must test from file:// with Chrome, run it with the --allow-file-access-from-files flag!)\" );\n\t} );\n\n\tif ( !jQuery.ajax || ( isLocal && !hasPHP ) ) {\n\t\treturn;\n\t}\n\n\tfunction addGlobalEvents( expected, assert ) {\n\t\treturn function() {\n\t\t\texpected = expected || \"\";\n\t\t\tjQuery( document ).on( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\", function( e ) {\n\t\t\t\tassert.ok( expected.indexOf( e.type ) !== -1, e.type );\n\t\t\t} );\n\t\t};\n\t}\n\n//----------- jQuery.ajax()\n\n\ttestIframe(\n\t\t\"XMLHttpRequest - Attempt to block tests because of dangling XHR requests (IE)\",\n\t\t\"ajax/unreleasedXHR.html\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"done\" );\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - success callbacks\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks - (url, options) syntax\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\tcreate: function( options ) {\n\t\t\t\treturn jQuery.ajax( url( \"name.html\" ), options );\n\t\t\t},\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - execute js for crossOrigin when dataType option is provided\", 3,\n\t\tfunction( assert ) {\n\t\t\treturn {\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\toptions.crossDomain = true;\n\t\t\t\t\toptions.dataType = \"script\";\n\t\t\t\t\treturn jQuery.ajax( url( \"mock.php?action=script&header=ecma\" ), options );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - custom attributes for script tag\", 4,\n\t\tfunction( assert ) {\n\t\t\treturn {\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\tvar xhr;\n\t\t\t\t\toptions.dataType = \"script\";\n\t\t\t\t\toptions.scriptAttrs = { id: \"jquery-ajax-test\", async: \"async\" };\n\t\t\t\t\txhr = jQuery.ajax( url( \"mock.php?action=script\" ), options );\n\t\t\t\t\tassert.equal( jQuery( \"#jquery-ajax-test\" ).attr( \"async\" ), \"async\", \"attr value\" );\n\t\t\t\t\treturn xhr;\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - do not execute js (crossOrigin)\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function( options ) {\n\t\t\t\toptions.crossDomain = true;\n\t\t\t\treturn jQuery.ajax( url( \"mock.php?action=script\" ), options );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tfail: function() {\n\t\t\t\tif ( jQuery.support.cors === false ) {\n\t\t\t\t\tassert.ok( true, \"fail\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (late binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (oncomplete binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tcomplete: function( xhr ) {\n\t\t\t\txhr.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - error callbacks\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert ),\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tassert.ok( true, \"error\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - textStatus and errorThrown values\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"abort\", \"textStatus is 'abort' for abort\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"abort\", \"errorThrown is 'abort' for abort\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"mystatus\", \"textStatus is 'mystatus' for abort('mystatus')\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"mystatus\", \"errorThrown is 'mystatus' for abort('mystatus')\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort( \"mystatus\" );\n\t\t\t}\n\t\t} ];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - responseText on error\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=error\" ),\n\t\t\terror: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.responseText, \"plain text message\", \"Test jqXHR.responseText is filled for HTTP errors\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"jQuery.ajax() - retry with jQuery.ajax( this )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar previousUrl,\n\t\t\tfirstTime = true,\n\t\t\tdone = assert.async();\n\t\tjQuery.ajax( {\n\t\t\turl: url( \"mock.php?action=error\" ),\n\t\t\terror: function() {\n\t\t\t\tif ( firstTime ) {\n\t\t\t\t\tfirstTime = false;\n\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t} else {\n\t\t\t\t\tassert.ok( true, \"Test retrying with jQuery.ajax(this) works\" );\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: url( \"mock.php?action=error&x=2\" ),\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tif ( !previousUrl ) {\n\t\t\t\t\t\t\t\tpreviousUrl = this.url;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tassert.strictEqual( this.url, previousUrl, \"url parameters are not re-appended\" );\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - headers\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).on( \"ajaxSend\", function( evt, xhr ) {\n\t\t\t\t\txhr.setRequestHeader( \"ajax-send\", \"test\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=headers&keys=siMPle|SometHing-elsE|OthEr|Nullable|undefined|Empty|ajax-send\" ),\n\t\t\theaders: {\n\t\t\t\t\"siMPle\": \"value\",\n\t\t\t\t\"SometHing-elsE\": \"other value\",\n\t\t\t\t\"OthEr\": \"something else\",\n\t\t\t\t\"Nullable\": null,\n\t\t\t\t\"undefined\": undefined\n\n\t\t\t\t// Support: IE 9 - 11, Edge 12 - 14 only\n\t\t\t\t// Not all browsers allow empty-string headers\n\t\t\t\t//\"Empty\": \"\"\n\t\t\t},\n\t\t\tsuccess: function( data, _, xhr ) {\n\t\t\t\tvar i, emptyHeader,\n\t\t\t\t\tisAndroid = /android 4\\.[0-3]/i.test( navigator.userAgent ),\n\t\t\t\t\trequestHeaders = jQuery.extend( this.headers, {\n\t\t\t\t\t\t\"ajax-send\": \"test\"\n\t\t\t\t\t} ),\n\t\t\t\t\ttmp = [];\n\t\t\t\tfor ( i in requestHeaders ) {\n\t\t\t\t\ttmp.push( i, \": \", requestHeaders[ i ] + \"\", \"\\n\" );\n\t\t\t\t}\n\t\t\t\ttmp = tmp.join( \"\" );\n\n\t\t\t\tassert.strictEqual( data, tmp, \"Headers were sent\" );\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header\" ), \"Hello World\", \"Sample header received\" );\n\t\t\t\tassert.ok( data.indexOf( \"undefined\" ) < 0, \"Undefined header value was not sent\" );\n\n\t\t\t\temptyHeader = xhr.getResponseHeader( \"Empty-Header\" );\n\t\t\t\tif ( emptyHeader === null ) {\n\t\t\t\t\tassert.ok( true, \"Firefox doesn't support empty headers\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( emptyHeader, \"\", \"Empty header received\" );\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header2\" ), \"Hello World 2\", \"Second sample header received\" );\n\n\t\t\t\tif ( isAndroid ) {\n\t\t\t\t\t// Support: Android 4.0-4.3 only\n\t\t\t\t\t// Android Browser only returns the last value for each header\n\t\t\t\t\t// so there's no way for jQuery get all parts.\n\t\t\t\t\tassert.ok( true, \"Android doesn't support repeated header names\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"List-Header\" ), \"Item 1, Item 2\", \"List header received\" );\n\t\t\t\t}\n\n\t\t\t\tif ( isAndroid && QUnit.isSwarm ) {\n\t\t\t\t\t// Support: Android 4.0-4.3 on BrowserStack only\n\t\t\t\t\t// Android Browser versions provided by BrowserStack fail this test\n\t\t\t\t\t// while locally fired emulators don't, even when they connect\n\t\t\t\t\t// to TestSwarm. Just skip the test there to avoid a red build.\n\t\t\t\t\tassert.ok( true, \"BrowserStack's Android fails the \\\"prototype collision (constructor)\\\" test\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"constructor\" ), \"prototype collision (constructor)\", \"constructor header received\" );\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"__proto__\" ), null, \"Undefined __proto__ header not received\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - Accept header\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=headers&keys=accept\" ),\n\t\t\theaders: {\n\t\t\t\tAccept: \"very wrong accept value\"\n\t\t\t},\n\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\txhr.setRequestHeader( \"Accept\", \"*/*\" );\n\t\t\t},\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.strictEqual( data, \"accept: */*\\n\", \"Test Accept header is set to last value provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - contentType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=headers&keys=content-type\" ),\n\t\t\t\tcontentType: \"test\",\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"content-type: test\\n\", \"Test content-type is sent when options.contentType is set\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=headers&keys=content-type\" ),\n\t\t\t\tcontentType: false,\n\t\t\t\tsuccess: function( data ) {\n\n\t\t\t\t\t// Some server/interpreter combinations always supply a Content-Type to scripts\n\t\t\t\t\tdata = data || \"content-type: \\n\";\n\t\t\t\t\tassert.strictEqual( data, \"content-type: \\n\", \"Test content-type is not set when options.contentType===false\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - protocol-less urls\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"//somedomain.com\",\n\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\tassert.equal( settings.url, location.protocol + \"//somedomain.com\", \"Make sure that the protocol is added.\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - URL fragment component preservation\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, baseURL + \"name.html#foo\",\n\t\t\t\t\t\t\"hash preserved for request with no query component.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html?abc#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, baseURL + \"name.html?abc#foo\",\n\t\t\t\t\t\t\"hash preserved for request with query component.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html?abc#foo\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": 123\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, baseURL + \"name.html?abc&test=123#foo\",\n\t\t\t\t\t\t\"hash preserved for request with query component and data.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html?abc#brownies\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"devo\": \"hat\"\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\t// Clear the cache-buster param value\n\t\t\t\t\tvar url = settings.url.replace( /_=[^&#]+/, \"_=\" );\n\t\t\t\t\tassert.equal( url, baseURL + \"name.html?abc&devo=hat&_=#brownies\",\n\t\t\t\t\t\t\"hash preserved for cache-busting request with query component and data.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - traditional param encoding\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"devo\": \"hat\",\n\t\t\t\t\t\"answer\": 42,\n\t\t\t\t\t\"quux\": \"a space\"\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"/?devo=hat&answer=42&quux=a%20space\", \"Simple case\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"a\": [ 1, 2, 3 ],\n\t\t\t\t\t\"b[]\": [ \"b1\", \"b2\" ]\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"/?a=1&a=2&a=3&b%5B%5D=b1&b%5B%5D=b2\", \"Arrays\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"a\": [ [ 1, 2 ], [ 3, 4 ], 5 ]\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"/?a=1%2C2&a=3%2C4&a=5\", \"Nested arrays\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"a\": [ \"w\", [ [ \"x\", \"y\" ], \"z\" ] ]\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tvar url = settings.url.replace( /\\d{3,}/, \"\" );\n\t\t\t\t\tassert.equal( url, \"/?a=w&a=x%2Cy%2Cz&_=\", \"Cache-buster\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cross-domain detection\", 8, function( assert ) {\n\t\tfunction request( url, title, crossDomainOrOptions ) {\n\t\t\treturn jQuery.extend( {\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\turl: url,\n\t\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\t\tassert.ok( crossDomainOrOptions === false ? !s.crossDomain : s.crossDomain, title );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}, crossDomainOrOptions );\n\t\t}\n\n\t\tvar loc = document.location,\n\t\t\tsamePort = loc.port || ( loc.protocol === \"http:\" ? 80 : 443 ),\n\t\t\totherPort = loc.port === 666 ? 667 : 666,\n\t\t\totherProtocol = loc.protocol === \"http:\" ? \"https:\" : \"http:\";\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + samePort,\n\t\t\t\t\"Test matching ports are not detected as cross-domain\",\n\t\t\t\tfalse\n\t\t\t),\n\t\t\trequest(\n\t\t\t\totherProtocol + \"//\" + loc.host,\n\t\t\t\t\"Test different protocols are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"app:/path\",\n\t\t\t\t\"Adobe AIR app:/ URL detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//example.invalid:\" + ( loc.port || 80 ),\n\t\t\t\t\"Test different hostnames are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + otherPort,\n\t\t\t\t\"Test different ports are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"about:blank\",\n\t\t\t\t\"Test about:blank is detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.host,\n\t\t\t\t\"Test forced crossDomain is detected as cross-domain\",\n\t\t\t\t{\n\t\t\t\t\tcrossDomain: true\n\t\t\t\t}\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\" http://otherdomain.com\",\n\t\t\t\t\"Cross-domain url with leading space is detected as cross-domain\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - abort\", 9, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxError ajaxComplete\", assert ),\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.readyState, 1, \"XHR readyState indicates successful dispatch\" );\n\t\t\t\txhr.abort();\n\t\t\t\tassert.strictEqual( xhr.readyState, 0, \"XHR readyState indicates successful abortion\" );\n\t\t\t},\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tif ( !/android 4\\.0/i.test( navigator.userAgent ) ) {\n\t\tajaxTest( \"jQuery.ajax() - native abort\", 2, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: url( \"mock.php?action=wait&wait=1\" ),\n\t\t\t\txhr: function() {\n\t\t\t\t\tvar xhr = new window.XMLHttpRequest();\n\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t}, 100 );\n\t\t\t\t\treturn xhr;\n\t\t\t\t},\n\t\t\t\terror: function( xhr, msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"error\", \"Native abort triggers error callback\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n\n\t// Support: Android <= 4.0 - 4.3 only\n\t// Android 4.0-4.3 does not have ontimeout on an xhr\n\tif ( \"ontimeout\" in new window.XMLHttpRequest() ) {\n\t\tajaxTest( \"jQuery.ajax() - native timeout\", 2, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: url( \"mock.php?action=wait&wait=1\" ),\n\t\t\t\txhr: function() {\n\t\t\t\t\tvar xhr = new window.XMLHttpRequest();\n\t\t\t\t\txhr.timeout = 1;\n\t\t\t\t\treturn xhr;\n\t\t\t\t},\n\t\t\t\terror: function( xhr, msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"error\", \"Native timeout triggers error callback\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n\n\tajaxTest( \"jQuery.ajax() - events with context\", 12, function( assert ) {\n\t\tvar context = document.createElement( \"div\" );\n\n\t\tfunction event( e ) {\n\t\t\tassert.equal( this, context, e.type );\n\t\t}\n\n\t\tfunction callback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( this, context, \"context is preserved on callback \" + msg );\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( context ).appendTo( \"#foo\" )\n\t\t\t\t\t.on( \"ajaxSend\", event )\n\t\t\t\t\t.on( \"ajaxComplete\", event )\n\t\t\t\t\t.on( \"ajaxError\", event )\n\t\t\t\t\t.on( \"ajaxSuccess\", event );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\tsuccess: callback( \"success\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t}, {\n\t\t\t\turl: url( \"404.txt\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\terror: callback( \"error\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - events without context\", 3, function( assert ) {\n\t\tfunction nocallback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( typeof this.url, \"string\", \"context is settings on callback \" + msg );\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\turl: url( \"404.txt\" ),\n\t\t\tbeforeSend: nocallback( \"beforeSend\" ),\n\t\t\terror: nocallback( \"error\" ),\n\t\t\tcomplete:  nocallback( \"complete\" )\n\t\t};\n\t} );\n\n\tajaxTest( \"#15118 - jQuery.ajax() - function without jQuery.event\", 1, function( assert ) {\n\t\tvar holder;\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\tsetup: function() {\n\t\t\t\tholder = jQuery.event;\n\t\t\t\tdelete jQuery.event;\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Call can be made without jQuery.event\" );\n\t\t\t\tjQuery.event = holder;\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"#15160 - jQuery.ajax() - request manually aborted in ajaxSend\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).on( \"ajaxSend\", function( e, jqXHR ) {\n\t\t\t\t\tjqXHR.abort();\n\t\t\t\t} );\n\n\t\t\t\tjQuery( document ).on( \"ajaxError ajaxComplete\", function( e, jqXHR ) {\n\t\t\t\t\tassert.equal( jqXHR.statusText, \"abort\", \"jqXHR.statusText equals abort on global ajaxComplete and ajaxError events\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"name.html\" ),\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"name.html\" ),\n\t\t\tcontext: {},\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.test = \"foo\";\n\t\t\t},\n\t\t\tafterSend: function() {\n\t\t\t\tassert.strictEqual( this.context.test, \"foo\", \"Make sure the original object is maintained.\" );\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification through ajaxSetup\", 3, function( assert ) {\n\t\tvar obj = {};\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery.ajaxSetup( {\n\t\t\t\t\tcontext: obj\n\t\t\t\t} );\n\t\t\t\tassert.strictEqual( jQuery.ajaxSettings.context, obj, \"Make sure the context is properly set in ajaxSettings.\" );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.strictEqual( this, obj, \"Make sure the original object is maintained.\" );\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tcontext: {},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( this !== obj, \"Make sure overriding context is possible.\" );\n\t\t\t\t}\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - disabled globals\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"\", assert ),\n\t\t\tglobal: false,\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements (over JSONP)\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=xmlOverJsonp\" ),\n\t\t\tdataType: \"jsonp xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - HEAD requests\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tdata: {\n\t\t\t\t\t\"whip_it\": \"good\"\n\t\t\t\t},\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response with data\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.check = true;\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( this.check, \"check beforeSend was executed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend, cancel request manually\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - dataType html\", 5, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testFoo\" );\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\tdataType: \"html\",\n\t\t\turl: url( \"mock.php?action=testHTML&baseURL=\" + baseURL ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data.match( /^html text/ ), \"Check content for datatype html\" );\n\t\t\t\tjQuery( \"#ap\" ).html( data );\n\t\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated for datatype html\" );\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated for datatype html\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"json_obj.js\" ),\n\t\t\tdataType: \"text\",\n\t\t\tasync: false,\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( xhr.responseText ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request with callbacks\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"json_obj.js\" ),\n\t\t\tasync: false,\n\t\t\tdataType: \"text\",\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tvar result;\n\t\t\t\txhr.done( function( data ) {\n\t\t\t\t\tassert.ok( true, \"success callback executed\" );\n\t\t\t\t\tresult = data;\n\t\t\t\t} );\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( result ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object\", function( assert ) {\n\t\tassert.expect( 8 );\n\t\tvar done = assert.async();\n\t\tvar target = \"name.html\",\n\t\t\tsuccessCount = 0,\n\t\t\terrorCount = 0,\n\t\t\terrorEx = \"\",\n\t\t\tsuccess = function() {\n\t\t\t\tsuccessCount++;\n\t\t\t};\n\t\tjQuery( document ).on( \"ajaxError.passthru\", function( e, xml ) {\n\t\t\terrorCount++;\n\t\t\terrorEx += \": \" + xml.status;\n\t\t} );\n\t\tjQuery( document ).one( \"ajaxStop\", function() {\n\t\t\tassert.equal( successCount, 5, \"Check all ajax calls successful\" );\n\t\t\tassert.equal( errorCount, 0, \"Check no ajax errors (status\" + errorEx + \")\" );\n\t\t\tjQuery( document ).off( \"ajaxError.passthru\" );\n\t\t\tdone();\n\t\t} );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tassert.ok( jQuery.get( url( target ), success ), \"get\" );\n\t\tassert.ok( jQuery.post( url( target ), success ), \"post\" );\n\t\tassert.ok( jQuery.getScript( url( \"mock.php?action=testbar\" ), success ), \"script\" );\n\t\tassert.ok( jQuery.getJSON( url( \"json_obj.js\" ), success ), \"json\" );\n\t\tassert.ok( jQuery.ajax( {\n\t\t\turl: url( target ),\n\t\t\tsuccess: success\n\t\t} ), \"generic\" );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cache\", 28, function( assert ) {\n\t\tvar re = /_=(.*?)(&|$)/g,\n\t\t\trootUrl = baseURL + \"text.txt\";\n\n\t\tfunction request( url, title ) {\n\t\t\treturn {\n\t\t\t\turl: url,\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tvar parameter, tmp;\n\n\t\t\t\t\t// URL sanity check\n\t\t\t\t\tassert.equal( this.url.indexOf( rootUrl ), 0, \"root url not mangled: \" + this.url );\n\t\t\t\t\tassert.equal( /\\&.*\\?/.test( this.url ), false, \"parameter delimiters in order\" );\n\n\t\t\t\t\twhile ( ( tmp = re.exec( this.url ) ) ) {\n\t\t\t\t\t\tassert.strictEqual( parameter, undefined, title + \": only one 'no-cache' parameter\" );\n\t\t\t\t\t\tparameter = tmp[ 1 ];\n\t\t\t\t\t\tassert.notStrictEqual( parameter, \"tobereplaced555\", title + \": parameter (if it was there) was replaced\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t}\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\trootUrl,\n\t\t\t\t\"no query\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?\",\n\t\t\t\t\"empty query\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?pizza=true\",\n\t\t\t\t\"1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?_=tobereplaced555\",\n\t\t\t\t\"_= parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?pizza=true&_=tobereplaced555\",\n\t\t\t\t\"1 parameter and _=\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?_=tobereplaced555&tv=false\",\n\t\t\t\t\"_= and 1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?name=David&_=tobereplaced555&washere=true\",\n\t\t\t\t\"2 parameters surrounding _=\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - Query String (?n)\" + label, 4, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp&callback=?\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, url callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp&callback=??\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, url context-free callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php/???action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, REST-like)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php/???action=jsonp&array=1\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( Array.isArray( data ), \"JSON results returned (GET, REST-like with param)\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - Explicit callback param\" + label, 10, function( assert ) {\n\t\t\treturn {\n\t\t\t\tsetup: function() {\n\t\t\t\t\tGlobals.register( \"functionToCleanUp\" );\n\t\t\t\t\tGlobals.register( \"XXX\" );\n\t\t\t\t\tGlobals.register( \"jsonpResults\" );\n\t\t\t\t\twindow[ \"jsonpResults\" ] = function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, custom callback function)\" );\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\trequests: [ {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tjsonp: \"callback\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, data obj callback)\" );\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tjsonpCallback: \"jsonpResults\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\ttypeof window[ \"jsonpResults\" ],\n\t\t\t\t\t\t\t\"function\",\n\t\t\t\t\t\t\t\"should not rewrite original function\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, custom callback name)\" );\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tjsonpCallback: \"functionToCleanUp\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\tassert.strictEqual( window[ \"functionToCleanUp\" ], true, \"Callback was removed (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\tvar xhr;\n\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\t\t\tjsonpCallback: \"functionToCleanUp\",\n\t\t\t\t\t\t\tbeforeSend: function( jqXHR ) {\n\t\t\t\t\t\t\t\txhr = jqXHR;\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t\txhr.fail( function() {\n\t\t\t\t\t\t\tassert.ok( true, \"Ajax error JSON (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\t\tassert.strictEqual( window[ \"functionToCleanUp\" ], true, \"Callback was removed after early abort (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp&callback=XXX\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tjsonp: false,\n\t\t\t\t\tjsonpCallback: \"XXX\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\tassert.ok( /action=jsonp&callback=XXX&_=\\d+$/.test( this.url ), \"The URL wasn't messed with (GET, custom callback name with no url manipulation)\" );\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, custom callback name with no url manipulation)\" );\n\t\t\t\t\t}\n\t\t\t\t} ]\n\t\t\t};\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - Callback in data\" + label, 2, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tdata: \"callback=?\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, data callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tdata: \"callback=??\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, data context-free callback)\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - POST\" + label, 3, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (POST, no callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdata: \"callback=?\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (POST, data callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tjsonp: \"callback\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (POST, data obj callback)\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP\" + label, 3, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, no callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcreate: function( options ) {\n\t\t\t\t\t\tvar request = jQuery.ajax( options ),\n\t\t\t\t\t\t\tpromise = request.then( function( data ) {\n\t\t\t\t\t\t\t\tassert.ok( data.data, \"first request: JSON results returned (GET, no callback)\" );\n\t\t\t\t\t\t\t\trequest = jQuery.ajax( this ).done( function( data ) {\n\t\t\t\t\t\t\t\t\tassert.ok( data.data, \"this re-used: JSON results returned (GET, no callback)\" );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\tpromise.abort = request.abort;\n\t\t\t\t\t\t\t\treturn request;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\tpromise.abort = request.abort;\n\t\t\t\t\t\treturn promise;\n\t\t\t\t\t},\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: true\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with POST\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\ttype: \"POST\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (POST, no callback)\" );\n\t\t\t\tassert.strictEqual( status, \"success\", \"Script results returned (POST, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with scheme-less URL\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - malformed JSON\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"badjson.js\",\n\t\t\tdataType: \"json\",\n\t\t\terror: function( xhr, msg, detailedMsg ) {\n\t\t\t\tassert.strictEqual( msg, \"parsererror\", \"A parse error occurred.\" );\n\t\t\t\tassert.ok( /(invalid|error|exception)/i.test( detailedMsg ), \"Detailed parsererror message provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script by content-type\", 2, function() {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: baseURL + \"mock.php?action=script\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"script\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"mock.php?action=script\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"ecma\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type\", 5, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=json\",\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"array\": \"1\"\n\t\t\t},\n\t\t\tsuccess: function( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type disabled with options\", 6, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"array\": \"1\"\n\t\t\t},\n\t\t\tcontents: {\n\t\t\t\t\"json\": false\n\t\t\t},\n\t\t\tsuccess: function( text ) {\n\t\t\t\tassert.strictEqual( typeof text, \"string\", \"json wasn't auto-determined\" );\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple get\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"mock.php?action=name&name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple post\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"POST\",\n\t\t\turl: url( \"mock.php?action=name\" ),\n\t\t\tdata: \"name=peter\",\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"pan\", \"Check for POST\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data option - empty bodies for non-GET requests\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=echoData\",\n\t\t\tdata: undefined,\n\t\t\ttype: \"post\",\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - x-www-form-urlencoded (gh-2658)\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"post\",\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.strictEqual( s.data, \"devo=A+Beautiful+World\", \"data is '+'-encoded\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - text/plain (gh-2658)\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"post\",\n\t\t\tcontentType: \"text/plain\",\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.strictEqual( s.data, \"devo=A%20Beautiful%20World\", \"data is %20-encoded\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - no processing POST\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"post\",\n\t\t\tcontentType: \"x-special-sauce\",\n\t\t\tprocessData: false,\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.deepEqual( s.data, { devo: \"A Beautiful World\" }, \"data is not processed\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - no processing GET\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"get\",\n\t\t\tcontentType: \"x-something-else\",\n\t\t\tprocessData: false,\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.deepEqual( s.data, { devo: \"A Beautiful World\" }, \"data is not processed\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - data - process string with GET\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: \"a=1&b=2\",\n\t\t\ttype: \"get\",\n\t\t\tcontentType: \"x-something-else\",\n\t\t\tprocessData: false,\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.equal( s.url, \"bogus.html?a=1&b=2\", \"added data to url\" );\n\t\t\t\tassert.equal( s.data, undefined, \"removed data from settings\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tvar ifModifiedNow = new Date();\n\n\tjQuery.each(\n\t\t/* jQuery.each arguments start */\n\t\t{\n\t\t\t\" (cache)\": true,\n\t\t\t\" (no cache)\": false\n\t\t},\n\t\tfunction( label, cache ) {\n\t\t\tjQuery.each(\n\t\t\t\t{\n\t\t\t\t\t\"If-Modified-Since\": \"mock.php?action=ims\",\n\t\t\t\t\t\"Etag\": \"mock.php?action=etag\"\n\t\t\t\t},\n\t\t\t\tfunction( type, url ) {\n\t\t\t\t\turl = baseURL + url + \"&ts=\" + ifModifiedNow++;\n\t\t\t\t\tQUnit.test( \"jQuery.ajax() - \" + type + \" support\" + label, function( assert ) {\n\t\t\t\t\t\tassert.expect( 4 );\n\t\t\t\t\t\tvar done = assert.async();\n\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\tsuccess: function( _, status ) {\n\t\t\t\t\t\t\t\tassert.strictEqual( status, \"success\", \"Initial status is 'success'\" );\n\t\t\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( status, \"notmodified\", \"Following status is 'notmodified'\" );\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( jqXHR.status, 304, \"XHR status is 304\" );\n\t\t\t\t\t\t\t\t\t\tassert.equal( data, null, \"no response body is given\" );\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\t/* jQuery.each arguments end */\n\t);\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain (non-existing)\", 1, function( assert ) {\n\t\treturn {\n\n\t\t\t// see RFC 2606\n\t\t\turl: \"http://example.invalid\",\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"file not found: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"http://\" + externalHost,\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"access denied: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - atom+xml\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=atom\" ),\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"jQuery.ajax() - statusText\", function( assert ) {\n\t\tassert.expect( 3 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajax( url( \"mock.php?action=status&code=200&text=Hello\" ) ).done( function( _, statusText, jqXHR ) {\n\t\t\tassert.strictEqual( statusText, \"success\", \"callback status text ok for success\" );\n\t\t\tassert.ok( jqXHR.statusText === \"Hello\" || jqXHR.statusText === \"OK\", \"jqXHR status text ok for success (\" + jqXHR.statusText + \")\" );\n\t\t\tjQuery.ajax( url( \"mock.php?action=status&code=404&text=World\" ) ).fail( function( jqXHR, statusText ) {\n\t\t\t\tassert.strictEqual( statusText, \"error\", \"callback status text ok for error\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.ajax() - statusCode\", function( assert ) {\n\t\tassert.expect( 20 );\n\t\tvar done = assert.async(),\n\t\t\tcount = 12;\n\n\t\tfunction countComplete() {\n\t\t\tif ( !--count ) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\n\t\tfunction createStatusCodes( name, isSuccess ) {\n\t\t\tname = \"Test \" + name + \" \" + ( isSuccess ? \"success\" : \"error\" );\n\t\t\treturn {\n\t\t\t\t200: function() {\n\t\t\t\t\tassert.ok( isSuccess, name );\n\t\t\t\t},\n\t\t\t\t404: function() {\n\t\t\t\t\tassert.ok( !isSuccess, name );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tjQuery.each(\n\t\t\t/* jQuery.each arguments start */\n\t\t\t{\n\t\t\t\t\"name.html\": true,\n\t\t\t\t\"404.txt\": false\n\t\t\t},\n\t\t\tfunction( uri, isSuccess ) {\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"in options\", isSuccess ),\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} ).statusCode( createStatusCodes( \"immediately with method\", isSuccess ) );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"on complete\", isSuccess ) );\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"very late binding\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"all (options)\", isSuccess ),\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (on complete)\", isSuccess ) );\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (very late binding)\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} ).statusCode( createStatusCodes( \"all (immediately with method)\", isSuccess ) );\n\n\t\t\t\tvar testString = \"\";\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tsuccess: function( a, b, jqXHR ) {\n\t\t\t\t\t\tassert.ok( isSuccess, \"success\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\terror: function( jqXHR ) {\n\t\t\t\t\t\tassert.ok( !isSuccess, \"error\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\ttestString,\n\t\t\t\t\t\t\t\"AB\",\n\t\t\t\t\t\t\t\"Test statusCode callbacks are ordered like \" + ( isSuccess ? \"success\" :  \"error\" ) + \" callbacks\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t}\n\t\t\t/* jQuery.each arguments end*/\n\t\t);\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - transitive conversions\", 8, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdataType: \"myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called (*)\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontents: false, /* headers are wrong so we ignore them */\n\t\t\t\tdataType: \"* myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType (*)\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - overrideMimeType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\txhr.overrideMimeType( \"application/json\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using beforeSend\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tmimeType: \"application/json\",\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using mimeType option\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - empty json gets to error callback instead of success callback.\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=echoData\" ),\n\t\t\terror: function( _, __, error ) {\n\t\t\t\tassert.equal( typeof error === \"object\", true,  \"Didn't get back error object for empty json response\" );\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t};\n\t} );\n\n\tajaxTest( \"#2688 - jQuery.ajax() - beforeSend, cancel request\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#2806 - jQuery.ajax() - data option - evaluate function values\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=echoQuery\",\n\t\t\tdata: {\n\t\t\t\tkey: function() {\n\t\t\t\t\treturn \"value\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"action=echoQuery&key=value\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"#7531 - jQuery.ajax() - Location object as url\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar xhr,\n\t\t\tsuccess = false;\n\t\ttry {\n\t\t\txhr = jQuery.ajax( {\n\t\t\t\turl: window.location\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t\txhr.abort();\n\t\t} catch ( e ) {\n\n\t\t}\n\t\tassert.ok( success, \"document.location did not generate exception\" );\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#7578 - jQuery.ajax() - JSONP - default for cache option\" + label, 1, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.strictEqual( this.cache, false, \"cache must be false on JSON request\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t} );\n\t} );\n\n\tajaxTest( \"#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax();\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With no arguments\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( baseURL + \"name.html\" );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With only string URL argument\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( baseURL + \"name.html\", {} );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With string URL param and map\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\treturn jQuery.ajax( options );\n\t\t\t\t},\n\t\t\t\turl: baseURL + \"name.html\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"With only map\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#8205 - jQuery.ajax() - JSONP - re-use callbacks name\" + label, 4, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function( jqXHR, s ) {\n\t\t\t\t\ts.callback = s.jsonpCallback;\n\n\t\t\t\t\tassert.ok( this.callback in window, \"JSONP callback name is in the window\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tvar previous = this;\n\n\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\tprevious.jsonpCallback,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\"jsonpCallback option is set back to default in callbacks\"\n\t\t\t\t\t);\n\n\t\t\t\t\tassert.ok(\n\t\t\t\t\t\t!( this.callback in window ),\n\t\t\t\t\t\t\"JSONP callback name was removed from the window\"\n\t\t\t\t\t);\n\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tassert.strictEqual( this.jsonpCallback, previous.callback, \"JSONP callback name is re-used\" );\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t} );\n\n\tQUnit.test( \"#9887 - jQuery.ajax() - Context with circular references (#9887)\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar success = false,\n\t\t\tcontext = {};\n\t\tcontext.field = context;\n\t\ttry {\n\t\t\tjQuery.ajax( \"non-existing\", {\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.ok( this === context, \"context was not deep extended\" );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t} catch ( e ) {\n\t\t\tconsole.log( e );\n\t\t}\n\t\tassert.ok( success, \"context with circular reference did not generate an exception\" );\n\t} );\n\n\tjQuery.each( [ \"as argument\", \"in settings object\" ], function( inSetting, title ) {\n\n\t\tfunction request( assert, url, test ) {\n\t\t\treturn {\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( inSetting ? { url: url } : url );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, ( test || url ) + \" \" + title );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tajaxTest( \"#10093 - jQuery.ajax() - falsy url \" + title, 4, function( assert ) {\n\t\t\treturn [\n\t\t\t\trequest( assert, \"\", \"empty string\" ),\n\t\t\t\trequest( assert, false ),\n\t\t\t\trequest( assert, null ),\n\t\t\t\trequest( assert, undefined )\n\t\t\t];\n\t\t} );\n\t} );\n\n\tajaxTest( \"#11151 - jQuery.ajax() - parse error body\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=error&json=1\" ),\n\t\t\tdataFilter: function( string ) {\n\t\t\t\tassert.ok( false, \"dataFilter called\" );\n\t\t\t\treturn string;\n\t\t\t},\n\t\t\terror: function( jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.responseText, \"{ \\\"code\\\": 40, \\\"message\\\": \\\"Bad Request\\\" }\", \"Error body properly set\" );\n\t\t\t\tassert.deepEqual( jqXHR.responseJSON, { code: 40, message: \"Bad Request\" }, \"Error body properly parsed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"1x1.jpg\" ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data === undefined || /JFIF/.test( data ), \"success callback reached\" );\n\t\t\t}\n\t\t};\n\t} );\n\nif ( typeof window.ArrayBuffer === \"undefined\" || typeof new XMLHttpRequest().responseType !== \"string\" ) {\n\n\tQUnit.skip( \"No ArrayBuffer support in XHR\", jQuery.noop );\n} else {\n\n\t// No built-in support for binary data, but it's easy to add via a prefilter\n\tjQuery.ajaxPrefilter( \"arraybuffer\", function( s ) {\n\t\ts.xhrFields = { responseType: \"arraybuffer\" };\n\t\ts.responseFields.arraybuffer = \"response\";\n\t\ts.converters[ \"binary arraybuffer\" ] = true;\n\t} );\n\n\tajaxTest( \"gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"1x1.jpg\" ),\n\t\t\tdataType: \"arraybuffer\",\n\t\t\tsuccess: function( data, s, jqxhr ) {\n\t\t\t\tassert.ok( data instanceof window.ArrayBuffer, \"correct data type\" );\n\t\t\t\tassert.ok( jqxhr.response instanceof window.ArrayBuffer, \"data in jQXHR\" );\n\t\t\t}\n\t\t};\n\t} );\n}\n\n\tQUnit.test( \"#11743 - jQuery.ajax() - script, throws exception\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tvar onerror = window.onerror;\n\t\twindow.onerror = function() {\n\t\t\tassert.ok( true, \"Exception thrown\" );\n\t\t\twindow.onerror = onerror;\n\t\t\tdone();\n\t\t};\n\t\tjQuery.ajax( {\n\t\t\turl: baseURL + \"badjson.js\",\n\t\t\tdataType: \"script\",\n\t\t\tthrows: true\n\t\t} );\n\t} );\n\n\tjQuery.each( [ \"method\", \"type\" ], function( _, globalOption ) {\n\t\tfunction request( assert, option ) {\n\t\t\tvar options = {\n\t\t\t\t\turl: url( \"mock.php?action=echoData\" ),\n\t\t\t\t\tdata: \"hello\",\n\t\t\t\t\tsuccess: function( msg ) {\n\t\t\t\t\t\tassert.strictEqual( msg, \"hello\", \"Check for POST (no override)\" );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tif ( option ) {\n\t\t\t\toptions[ option ] = \"GET\";\n\t\t\t\toptions.success = function( msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"\", \"Check for no POST (overriding with \" + option + \")\" );\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn options;\n\t\t}\n\n\t\tajaxTest(\n\t\t\t\"#12004 - jQuery.ajax() - method is an alias of type - \" +\n\t\t\tglobalOption + \" set globally\", 3,\n\t\t\tfunction( assert ) {\n\t\t\t\treturn {\n\t\t\t\t\tsetup: function() {\n\t\t\t\t\t\tvar options = {};\n\t\t\t\t\t\toptions[ globalOption ] = \"POST\";\n\t\t\t\t\t\tjQuery.ajaxSetup( options );\n\t\t\t\t\t},\n\t\t\t\t\trequests: [\n\t\t\t\t\t\trequest( assert, \"type\" ),\n\t\t\t\t\t\trequest( assert, \"method\" ),\n\t\t\t\t\t\trequest( assert )\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t} );\n\n\tajaxTest( \"#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"dashboard.xml\",\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( ajaxXML ) {\n\t\t\t\tvar parsedXML = jQuery( jQuery.parseXML( \"<tab title=\\\"Added\\\">blibli</tab>\" ) ).find( \"tab\" );\n\t\t\t\tajaxXML = jQuery( ajaxXML );\n\t\t\t\ttry {\n\t\t\t\t\tajaxXML.find( \"infowindowtab\" ).append( parsedXML );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tassert.strictEqual( e, undefined, \"error\" );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( ajaxXML.find( \"tab\" ).length, 3, \"Parsed node was added properly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13292 - jQuery.ajax() - converter is bypassed for 204 requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=status&code=204&text=No+Content\",\n\t\t\tdataType: \"testing\",\n\t\t\tconverters: {\n\t\t\t\t\"* testing\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.status, 204, \"status code is 204\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"status text is 'nocontent'\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13388 - jQuery.ajax() - responseXML\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp, _, jqXHR ) {\n\t\t\t\tassert.notStrictEqual( resp, undefined, \"XML document exists\" );\n\t\t\t\tassert.ok( \"responseXML\" in jqXHR, \"jqXHR.responseXML exists\" );\n\t\t\t\tassert.strictEqual( resp, jqXHR.responseXML, \"jqXHR.responseXML is set correctly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13922 - jQuery.ajax() - converter is bypassed for HEAD requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=json\",\n\t\t\tmethod: \"HEAD\",\n\t\t\tdata: {\n\t\t\t\theader: \"yes\"\n\t\t\t},\n\t\t\tconverters: {\n\t\t\t\t\"text json\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"data is undefined\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\t// Chrome 78 dropped support for synchronous XHR requests inside of\n\t// beforeunload, unload, pagehide, and visibilitychange event handlers.\n\t// See https://bugs.chromium.org/p/chromium/issues/detail?id=952452\n\tif ( !/chrome/i.test( navigator.userAgent ) ) {\n\t\ttestIframe(\n\t\t\t\"#14379 - jQuery.ajax() on unload\",\n\t\t\t\"ajax/onunload.html\",\n\t\t\tfunction( assert, jQuery, window, document, status ) {\n\t\t\t\tassert.expect( 1 );\n\t\t\t\tassert.strictEqual( status, \"success\", \"Request completed\" );\n\t\t\t}\n\t\t);\n\t}\n\n\tajaxTest( \"#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: baseURL + \"mock.php?action=echoData\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttoString: function() {\n\t\t\t\t\tthrow \"Can't parse\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tprocessData: false,\n\t\t\tdone: function( data ) {\n\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t},\n\t\t\tfail: function( jqXHR, status, error ) {\n\t\t\t\tassert.ok( true, \"exception caught: \" + error );\n\t\t\t\tassert.strictEqual( jqXHR.status, 0, \"proper status code\" );\n\t\t\t\tassert.strictEqual( status, \"error\", \"proper status\" );\n\t\t\t}\n\t\t}, {\n\t\t\turl: \"http://\" + externalHost + \":80q\",\n\t\t\tdone: function( data ) {\n\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t},\n\t\t\tfail: function( _, status, error ) {\n\t\t\t\tassert.ok( true, \"fail: \" + status + \" - \" + error );\n\t\t\t}\n\t\t} ];\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not xml, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n\t\t\t\t\"response\": \"<test/>\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not xml\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not xml, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n\t\t\t\t\"response\": \"<test/>\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not xml\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not json, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/jsontest\",\n\t\t\t\t\"response\": JSON.stringify( { test: \"test\" } )\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not json\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not html, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/htmltest\",\n\t\t\t\t\"response\": \"<p>test</p>\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not html\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not javascript, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/testjavascript\",\n\t\t\t\t\"response\": \"alert(1)\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not javascript\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not ecmascript, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/testjavascript\",\n\t\t\t\t\"response\": \"alert(1)\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not ecmascript\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n//----------- jQuery.ajaxPrefilter()\n\n\tajaxTest( \"jQuery.ajaxPrefilter() - abort\", 1, function( assert ) {\n\t\treturn {\n\t\t\tdataType: \"prefix\",\n\t\t\tsetup: function() {\n\n\t\t\t\t// Ensure prefix does not throw an error\n\t\t\t\tjQuery.ajaxPrefilter( \"+prefix\", function( options, _, jqXHR ) {\n\t\t\t\t\tif ( options.abortInPrefilter ) {\n\t\t\t\t\t\tjqXHR.abort();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tabortInPrefilter: true,\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"error callback called\" );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"Request aborted by the prefilter must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n//----------- jQuery.ajaxSetup()\n\n\tQUnit.test( \"jQuery.ajaxSetup()\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\turl: url( \"mock.php?action=name&name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t\tjQuery.ajax();\n\t} );\n\n\tQUnit.test( \"jQuery.ajaxSetup({ timeout: Number }) - with global timeout\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tvar passed = 0,\n\t\t\tpass = function() {\n\t\t\t\tassert.ok( passed++ < 2, \"Error callback executed\" );\n\t\t\t\tif ( passed === 2 ) {\n\t\t\t\t\tjQuery( document ).off( \"ajaxError.setupTest\" );\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail = function( a, b ) {\n\t\t\t\tassert.ok( false, \"Check for timeout failed \" + a + \" \" + b );\n\t\t\t\tdone();\n\t\t\t};\n\n\t\tjQuery( document ).on( \"ajaxError.setupTest\", pass );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 1000\n\t\t} );\n\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\terror: pass,\n\t\t\tsuccess: fail\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.ajaxSetup({ timeout: Number }) with localtimeout\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 50\n\t\t} );\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\ttimeout: 15000,\n\t\t\turl: url( \"mock.php?action=wait&wait=1\" ),\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"Check for local timeout failed\" );\n\t\t\t\tdone();\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"Check for local timeout\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t} );\n\n//----------- jQuery.domManip()\n\n\tQUnit.test( \"#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttype: \"POST\"\n\t\t} );\n\n\t\tjQuery( document ).on( \"ajaxStart ajaxStop\", function() {\n\t\t\tassert.ok( false, \"Global event triggered\" );\n\t\t} );\n\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<script src='\" + baseURL + \"mock.php?action=script'></script>\" );\n\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop\" );\n\t} );\n\n\tQUnit.test(\n\t\t\"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tvar done = assert.async();\n\n\t\t\tjQuery.ajaxSetup( {\n\t\t\t\ttype: \"POST\"\n\t\t\t} );\n\n\t\t\tjQuery( \"#qunit-fixture\" ).load( baseURL + \"mock.php?action=echoMethod\", function( method ) {\n\t\t\t\tassert.equal( method, \"GET\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test(\n\t\t\"jQuery#load() - should resolve with correct context\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 2 );\n\t\t\tvar done = assert.async();\n\t\t\tvar ps = jQuery( \"<p></p><p></p>\" );\n\t\t\tvar i = 0;\n\n\t\t\tps.appendTo( \"#qunit-fixture\" );\n\n\t\t\tps.load( baseURL + \"mock.php?action=echoMethod\", function() {\n\t\t\t\tassert.strictEqual( this, ps[ i++ ] );\n\n\t\t\t\tif ( i === 2 ) {\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test(\n\t\t\"#11402 - jQuery.domManip() - script in comments are properly evaluated\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 2 );\n\t\t\tjQuery( \"#qunit-fixture\" ).load( baseURL + \"cleanScript.html\", assert.async() );\n\t\t}\n\t);\n\n//----------- jQuery.get()\n\n\tQUnit.test( \"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery.get( url( \"dashboard.xml\" ), function( xml ) {\n\t\t\tvar content = [];\n\t\t\tjQuery( \"tab\", xml ).each( function() {\n\t\t\t\tcontent.push( jQuery( this ).text() );\n\t\t\t} );\n\t\t\tassert.strictEqual( content[ 0 ], \"blabla\", \"Check first tab\" );\n\t\t\tassert.strictEqual( content[ 1 ], \"blublu\", \"Check second tab\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"#8277 - jQuery.get( String, Function ) - data in ajaxSettings\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: \"helloworld\"\n\t\t} );\n\t\tjQuery.get( url( \"mock.php?action=echoQuery\" ), function( data ) {\n\t\t\tassert.ok( /helloworld$/.test( data ), \"Data from ajaxSettings was used\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.getJSON()\n\n\tQUnit.test( \"jQuery.getJSON( String, Hash, Function ) - JSON array\", function( assert ) {\n\t\tassert.expect( 5 );\n\t\tvar done = assert.async();\n\t\tjQuery.getJSON(\n\t\t\turl( \"mock.php?action=json\" ),\n\t\t\t{\n\t\t\t\t\"array\": \"1\"\n\t\t\t},\n\t\t\tfunction( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t);\n\t} );\n\n\tQUnit.test( \"jQuery.getJSON( String, Function ) - JSON object\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery.getJSON( url( \"mock.php?action=json\" ), function( json ) {\n\t\t\tif ( json && json[ \"data\" ] ) {\n\t\t\t\tassert.strictEqual( json[ \"data\" ][ \"lang\" ], \"en\", \"Check JSON: lang\" );\n\t\t\t\tassert.strictEqual( json[ \"data\" ].length, 25, \"Check JSON: length\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tvar absoluteUrl = url( \"mock.php?action=json\" );\n\n\t\t// Make a relative URL absolute relative to the document location\n\t\tif ( !/^[a-z][a-z0-9+.-]*:/i.test( absoluteUrl ) ) {\n\n\t\t\t// An absolute path replaces everything after the host\n\t\t\tif ( absoluteUrl.charAt( 0 ) === \"/\" ) {\n\t\t\t\tabsoluteUrl = window.location.href.replace( /(:\\/*[^/]*).*$/, \"$1\" ) + absoluteUrl;\n\n\t\t\t// A relative path replaces the last slash-separated path segment\n\t\t\t} else {\n\t\t\t\tabsoluteUrl = window.location.href.replace( /[^/]*$/, \"\" ) + absoluteUrl;\n\t\t\t}\n\t\t}\n\n\t\tjQuery.getJSON( absoluteUrl, function( json ) {\n\t\t\tassert.strictEqual( json.data.lang, \"en\", \"Check JSON: lang\" );\n\t\t\tassert.strictEqual( json.data.length, 25, \"Check JSON: length\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.getScript()\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - with callback\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 2 );\n\t\t\tvar done = assert.async();\n\n\t\t\tGlobals.register( \"testBar\" );\n\t\t\tjQuery.getScript( url( \"mock.php?action=testbar\" ), function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script was evaluated\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - no callback\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"mock.php?action=testbar\" ) ).done( assert.async() );\n\t} );\n\n\tQUnit.test( \"#8082 - jQuery.getScript( String, Function ) - source as responseText\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"mock.php?action=testbar\" ), function( data, _, jqXHR ) {\n\t\t\tassert.strictEqual( data, jqXHR.responseText, \"Same-domain script requests returns the source of the script\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.getScript( Object ) - with callback\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( {\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script was evaluated\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.getScript( Object ) - no callback\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( { url: url( \"mock.php?action=testbar\" ) } ).done( assert.async() );\n\t} );\n\n// //----------- jQuery.fn.load()\n\n\t// check if load can be called with only url\n\tQUnit.test( \"jQuery.fn.load( String )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"name.html\", assert.async() );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - 404 error callbacks\", function( assert ) {\n\t\tassert.expect( 6 );\n\t\tvar done = assert.async();\n\n\t\taddGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert )();\n\t\tjQuery( document ).on( \"ajaxStop\", done );\n\t\tjQuery( \"<div/>\" ).load( baseURL + \"404.txt\", function() {\n\t\t\tassert.ok( true, \"complete\" );\n\t\t} );\n\t} );\n\n\t// check if load can be called with url and null data\n\tQUnit.test( \"jQuery.fn.load( String, null )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"name.html\", null, assert.async() );\n\t} );\n\n\t// check if load can be called with url and undefined data\n\tQUnit.test( \"jQuery.fn.load( String, undefined )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"name.html\", undefined, assert.async() );\n\t} );\n\n\t// check if load can be called with only url\n\tQUnit.test( \"jQuery.fn.load( URL_SELECTOR )\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html div.user\", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 2, \"Verify that specific elements were injected\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\t// Selector should be trimmed to avoid leading spaces (#14773)\n\tQUnit.test( \"jQuery.fn.load( URL_SELECTOR with spaces )\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html   #superuser \", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 1, \"Verify that specific elements were injected\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\t// Selector should be trimmed to avoid leading spaces (#14773)\n\t// Selector should include any valid non-HTML whitespace (#3003)\n\tQUnit.test( \"jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html   #whitespace\\\\\\\\xA0 \", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 1, \"Verify that specific elements were injected\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - simple: inject text into DOM\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( url( \"name.html\" ), function() {\n\t\t\tassert.ok( /^ERROR/.test( jQuery( \"#first\" ).text() ), \"Check if content was injected into the DOM\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - check scripts\", function( assert ) {\n\t\tassert.expect( 7 );\n\t\tvar done = assert.async();\n\t\tvar verifyEvaluation = function() {\n\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated after load\" );\n\t\t\tassert.strictEqual( jQuery( \"#ap\" ).html(), \"bar\", \"Check if script evaluation has modified DOM\" );\n\t\t\tdone();\n\t\t};\n\n\t\tGlobals.register( \"testFoo\" );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"mock.php?action=testHTML&baseURL=\" + baseURL ), function() {\n\t\t\tassert.ok( jQuery( \"#first\" ).html().match( /^html text/ ), \"Check content after loading html\" );\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tsetTimeout( verifyEvaluation, 600 );\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - check file with only a script tag\", function( assert ) {\n\t\tassert.expect( 3 );\n\t\tvar done = assert.async();\n\t\tGlobals.register( \"testFoo\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"test2.html\" ), function() {\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataFilter: function() {\n\t\t\t\treturn \"Hello World\";\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"<div/>\" ).load( url( \"name.html\" ), function( responseText ) {\n\t\t\tassert.strictEqual( jQuery( this ).html(), \"Hello World\", \"Test div was filled with filtered data\" );\n\t\t\tassert.strictEqual( responseText, \"Hello World\", \"Test callback receives filtered data\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Object, Function )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"<div />\" ).load( url( \"mock.php?action=echoHtml\" ), {\n\t\t\t\"bar\": \"ok\"\n\t\t}, function() {\n\t\t\tvar $node = jQuery( this );\n\t\t\tassert.strictEqual( $node.find( \"#method\" ).text(), \"POST\", \"Check method\" );\n\t\t\tassert.strictEqual( $node.find( \"#data\" ).text(), \"bar=ok\", \"Check if data is passed correctly\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, String, Function )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tjQuery( \"<div />\" ).load( url( \"mock.php?action=echoHtml\" ), \"foo=3&bar=ok\", function() {\n\t\t\tvar $node = jQuery( this );\n\t\t\tassert.strictEqual( $node.find( \"#method\" ).text(), \"GET\", \"Check method\" );\n\t\t\tassert.ok( $node.find( \"#query\" ).text().match( /foo=3&bar=ok/ ), \"Check if a string of data is passed correctly\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - callbacks get the correct parameters\", function( assert ) {\n\t\tassert.expect( 8 );\n\t\tvar completeArgs = {},\n\t\t\tdone = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tsuccess: function( _, status, jqXHR ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t},\n\t\t\terror: function( jqXHR, status ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t}\n\t\t} );\n\n\t\tjQuery.when.apply(\n\t\t\tjQuery,\n\t\t\tjQuery.map( [\n\t\t\t\t{\n\t\t\t\t\ttype: \"success\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=echoQuery&arg=pop\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"error\",\n\t\t\t\t\turl: baseURL + \"404.txt\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tfunction( options ) {\n\t\t\t\treturn jQuery.Deferred( function( defer ) {\n\t\t\t\t\tjQuery( \"#foo\" ).load( options.url, function() {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\tassert.strictEqual( completeArgs[ options.url ].length, args.length, \"same number of arguments (\" + options.type + \")\" );\n\t\t\t\t\t\tjQuery.each( completeArgs[ options.url ], function( i, value ) {\n\t\t\t\t\t\t\tassert.strictEqual( args[ i ], value, \"argument #\" + i + \" is the same (\" + options.type + \")\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdefer.resolve();\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( done );\n\t} );\n\n\tQUnit.test( \"#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataType: \"json\"\n\t\t} );\n\t\tjQuery( document ).on( \"ajaxComplete\", function( e, xml, s ) {\n\t\t\tassert.strictEqual( s.dataType, \"html\", \"Verify the load() dataType was html\" );\n\t\t\tjQuery( document ).off( \"ajaxComplete\" );\n\t\t\tdone();\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html\" );\n\t} );\n\n\tQUnit.test( \"#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\n\t\tvar data = {\n\t\t\t\"baz\": 1\n\t\t};\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: {\n\t\t\t\t\"foo\": \"bar\"\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#foo\" ).load( baseURL + \"mock.php?action=echoQuery\", data );\n\t\tjQuery( document ).on( \"ajaxComplete\", function( event, jqXHR, options ) {\n\t\t\tassert.ok( ~options.data.indexOf( \"foo=bar\" ), \"Data from ajaxSettings was used\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n// //----------- jQuery.post()\n\n\tQUnit.test( \"jQuery.post() - data\", function( assert ) {\n\t\tassert.expect( 3 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"mock.php?action=xml\" ),\n\t\t\t\t{\n\t\t\t\t\tcal: \"5-2\"\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.ajax( {\n\t\t\t\turl: url( \"mock.php?action=echoData\" ),\n\t\t\t\ttype: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": {\n\t\t\t\t\t\t\"length\": 7,\n\t\t\t\t\t\t\"foo\": \"bar\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"test%5Blength%5D=7&test%5Bfoo%5D=bar\", \"Check if a sub-object with a length param is serialized correctly\" );\n\t\t\t\t}\n\t\t\t} )\n\t\t).always( done );\n\t} );\n\n\tQUnit.test( \"jQuery.post( String, Hash, Function ) - simple with xml\", function( assert ) {\n\t\tassert.expect( 4 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"mock.php?action=xml\" ),\n\t\t\t\t{\n\t\t\t\t\tcal: \"5-2\"\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.post( url( \"mock.php?action=xml&cal=5-2\" ), {}, function( xml ) {\n\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery[get|post]( options ) - simple with xml\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.when.apply( jQuery,\n\t\t\tjQuery.map( [ \"get\", \"post\" ], function( method ) {\n\t\t\t\treturn jQuery[ method ]( {\n\t\t\t\t\turl: url( \"mock.php?action=xml\" ),\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcal: \"5-2\"\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function( xml ) {\n\t\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.active\n\n\tQUnit.test( \"jQuery.active\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( jQuery.active === 0, \"ajax active counter should be zero: \" + jQuery.active );\n\t} );\n\n} )();\n", "QUnit.module( \"attributes\", {\n\tafterEach: moduleTeardown\n} );\n\nfunction bareObj( value ) {\n\treturn value;\n}\n\nfunction functionReturningObj( value ) {\n\treturn function() {\n\t\treturn value;\n\t};\n}\n\nfunction arrayFromString( value ) {\n\treturn value ? value.split( \" \" ) : [];\n}\n\n/*\n\t======== local reference =======\n\tbareObj and functionReturningObj can be used to test passing functions to setters\n\tSee testVal below for an example\n\n\tbareObj( value );\n\t\tThis function returns whatever value is passed in\n\n\tfunctionReturningObj( value );\n\t\tReturns a function that returns the value\n*/\n\nQUnit.test( \"jQuery.propFix integrity test\", function( assert ) {\n\tassert.expect( 1 );\n\n\t//  This must be maintained and equal jQuery.attrFix when appropriate\n\t//  Ensure that accidental or erroneous property\n\t//  overwrites don't occur\n\t//  This is simply for better code coverage and future proofing.\n\tvar props = {\n\t\t\"tabindex\": \"tabIndex\",\n\t\t\"readonly\": \"readOnly\",\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\",\n\t\t\"maxlength\": \"maxLength\",\n\t\t\"cellspacing\": \"cellSpacing\",\n\t\t\"cellpadding\": \"cellPadding\",\n\t\t\"rowspan\": \"rowSpan\",\n\t\t\"colspan\": \"colSpan\",\n\t\t\"usemap\": \"useMap\",\n\t\t\"frameborder\": \"frameBorder\",\n\t\t\"contenteditable\": \"contentEditable\"\n\t};\n\n\tassert.deepEqual( props, jQuery.propFix, \"jQuery.propFix passes integrity check\" );\n} );\n\nQUnit.test( \"attr(String)\", function( assert ) {\n\tassert.expect( 50 );\n\n\tvar extras, body, $body,\n\t\tselect, optgroup, option, $img, styleElem,\n\t\t$button, $form, $a;\n\n\tassert.equal( jQuery( \"#text1\" ).attr( \"type\" ), \"text\", \"Check for type attribute\" );\n\tassert.equal( jQuery( \"#radio1\" ).attr( \"type\" ), \"radio\", \"Check for type attribute\" );\n\tassert.equal( jQuery( \"#check1\" ).attr( \"type\" ), \"checkbox\", \"Check for type attribute\" );\n\tassert.equal( jQuery( \"#simon1\" ).attr( \"rel\" ), \"bookmark\", \"Check for rel attribute\" );\n\tassert.equal( jQuery( \"#google\" ).attr( \"title\" ), \"Google!\", \"Check for title attribute\" );\n\tassert.equal( jQuery( \"#mark\" ).attr( \"hreflang\" ), \"en\", \"Check for hreflang attribute\" );\n\tassert.equal( jQuery( \"#en\" ).attr( \"lang\" ), \"en\", \"Check for lang attribute\" );\n\tassert.equal( jQuery( \"#simon\" ).attr( \"class\" ), \"blog link\", \"Check for class attribute\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"name\" ), \"name\", \"Check for name attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"name\" ), \"action\", \"Check for name attribute\" );\n\tassert.ok( jQuery( \"#form\" ).attr( \"action\" ).indexOf( \"formaction\" ) >= 0, \"Check for action attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"value\", \"t\" ).attr( \"value\" ), \"t\", \"Check setting the value attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"value\", \"\" ).attr( \"value\" ), \"\", \"Check setting the value attribute to empty string\" );\n\tassert.equal( jQuery( \"<div value='t'></div>\" ).attr( \"value\" ), \"t\", \"Check setting custom attr named 'value' on a div\" );\n\tassert.equal( jQuery( \"#form\" ).attr( \"blah\", \"blah\" ).attr( \"blah\" ), \"blah\", \"Set non-existent attribute on a form\" );\n\tassert.equal( jQuery( \"#foo\" ).attr( \"height\" ), undefined, \"Non existent height attribute should return undefined\" );\n\n\t// [7472] & [3113] (form contains an input with name=\"action\" or name=\"id\")\n\textras = jQuery( \"<input id='id' name='id' /><input id='name' name='name' /><input id='target' name='target' />\" ).appendTo( \"#testForm\" );\n\tassert.equal( jQuery( \"#form\" ).attr( \"action\", \"newformaction\" ).attr( \"action\" ), \"newformaction\", \"Check that action attribute was changed\" );\n\tassert.equal( jQuery( \"#testForm\" ).attr( \"target\" ), undefined, \"Retrieving target does not equal the input with name=target\" );\n\tassert.equal( jQuery( \"#testForm\" ).attr( \"target\", \"newTarget\" ).attr( \"target\" ), \"newTarget\", \"Set target successfully on a form\" );\n\tassert.equal( jQuery( \"#testForm\" ).removeAttr( \"id\" ).attr( \"id\" ), undefined, \"Retrieving id does not equal the input with name=id after id is removed [#7472]\" );\n\n\t// Bug #3685 (form contains input with name=\"name\")\n\tassert.equal( jQuery( \"#testForm\" ).attr( \"name\" ), undefined, \"Retrieving name does not retrieve input with name=name\" );\n\textras.remove();\n\n\tassert.equal( jQuery( \"#text1\" ).attr( \"maxlength\" ), \"30\", \"Check for maxlength attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"maxLength\" ), \"30\", \"Check for maxLength attribute\" );\n\tassert.equal( jQuery( \"#area1\" ).attr( \"maxLength\" ), \"30\", \"Check for maxLength attribute\" );\n\n\t// using innerHTML in IE causes href attribute to be serialized to the full path\n\tjQuery( \"<a/>\" ).attr( {\n\t\t\"id\": \"tAnchor5\",\n\t\t\"href\": \"#5\"\n\t} ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( jQuery( \"#tAnchor5\" ).attr( \"href\" ), \"#5\", \"Check for non-absolute href (an anchor)\" );\n\tjQuery( \"<a id='tAnchor6' href='#5' />\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( jQuery( \"#tAnchor5\" ).prop( \"href\" ), jQuery( \"#tAnchor6\" ).prop( \"href\" ), \"Check for absolute href prop on an anchor\" );\n\n\tjQuery( \"<script type='jquery/test' src='#5' id='scriptSrc'></script>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( jQuery( \"#tAnchor5\" ).prop( \"href\" ), jQuery( \"#scriptSrc\" ).prop( \"src\" ), \"Check for absolute src prop on a script\" );\n\n\t// list attribute is readonly by default in browsers that support it\n\tjQuery( \"#list-test\" ).attr( \"list\", \"datalist\" );\n\tassert.equal( jQuery( \"#list-test\" ).attr( \"list\" ), \"datalist\", \"Check setting list attribute\" );\n\n\t// Related to [5574] and [5683]\n\tbody = document.body;\n\t$body = jQuery( body );\n\n\tassert.strictEqual( $body.attr( \"foo\" ), undefined, \"Make sure that a non existent attribute returns undefined\" );\n\n\tbody.setAttribute( \"foo\", \"baz\" );\n\tassert.equal( $body.attr( \"foo\" ), \"baz\", \"Make sure the dom attribute is retrieved when no expando is found\" );\n\n\t$body.attr( \"foo\", \"cool\" );\n\tassert.equal( $body.attr( \"foo\" ), \"cool\", \"Make sure that setting works well when both expando and dom attribute are available\" );\n\n\tbody.removeAttribute( \"foo\" ); // Cleanup\n\n\tselect = document.createElement( \"select\" );\n\toptgroup = document.createElement( \"optgroup\" );\n\toption = document.createElement( \"option\" );\n\n\toptgroup.appendChild( option );\n\tselect.appendChild( optgroup );\n\n\tassert.equal( jQuery( option ).prop( \"selected\" ), true, \"Make sure that a single option is selected, even when in an optgroup.\" );\n\n\t$img = jQuery( \"<img style='display:none' width='215' height='53' src='\" + baseURL + \"1x1.jpg'/>\" ).appendTo( \"body\" );\n\tassert.equal( $img.attr( \"width\" ), \"215\", \"Retrieve width attribute on an element with display:none.\" );\n\tassert.equal( $img.attr( \"height\" ), \"53\", \"Retrieve height attribute on an element with display:none.\" );\n\n\t// Check for style support\n\tstyleElem = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).css( {\n\t\tbackground: \"url(UPPERlower.gif)\"\n\t} );\n\tassert.ok( !!~styleElem.attr( \"style\" ).indexOf( \"UPPERlower.gif\" ), \"Check style attribute getter\" );\n\tassert.ok( !!~styleElem.attr( \"style\", \"position:absolute;\" ).attr( \"style\" ).indexOf( \"absolute\" ), \"Check style setter\" );\n\n\t// Check value on button element (#1954)\n\t$button = jQuery( \"<button>text</button>\" ).insertAfter( \"#button\" );\n\tassert.strictEqual( $button.attr( \"value\" ), undefined, \"Absence of value attribute on a button\" );\n\tassert.equal( $button.attr( \"value\", \"foobar\" ).attr( \"value\" ), \"foobar\", \"Value attribute on a button does not return innerHTML\" );\n\tassert.equal( $button.attr( \"value\", \"baz\" ).html(), \"text\", \"Setting the value attribute does not change innerHTML\" );\n\n\t// Attributes with a colon on a table element (#1591)\n\tassert.equal( jQuery( \"#table\" ).attr( \"test:attrib\" ), undefined, \"Retrieving a non-existent attribute on a table with a colon does not throw an error.\" );\n\tassert.equal( jQuery( \"#table\" ).attr( \"test:attrib\", \"foobar\" ).attr( \"test:attrib\" ), \"foobar\", \"Setting an attribute on a table with a colon does not throw an error.\" );\n\n\t$form = jQuery( \"<form class='something'></form>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $form.attr( \"class\" ), \"something\", \"Retrieve the class attribute on a form.\" );\n\n\t$a = jQuery( \"<a href='#' onclick='something()'>Click</a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $a.attr( \"onclick\" ), \"something()\", \"Retrieve ^on attribute without anonymous function wrapper.\" );\n\n\tassert.ok( jQuery( \"<div/>\" ).attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );\n\tassert.ok( jQuery( \"<div/>\" ).attr( \"title\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );\n\tassert.equal( jQuery( \"<div/>\" ).attr( \"title\", \"something\" ).attr( \"title\" ), \"something\", \"Set the title attribute.\" );\n\tassert.ok( jQuery().attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no element is there.\" );\n\tassert.equal( jQuery( \"<div/>\" ).attr( \"value\" ), undefined, \"An unset value on a div returns undefined.\" );\n\tassert.strictEqual( jQuery( \"<select><option value='property'></option></select>\" ).attr( \"value\" ), undefined, \"An unset value on a select returns undefined.\" );\n\n\t$form = jQuery( \"#form\" ).attr( \"enctype\", \"multipart/form-data\" );\n\tassert.equal( $form.prop( \"enctype\" ), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 #6743)\" );\n\n} );\n\nQUnit.test( \"attr(String) on cloned elements, #9646\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar div,\n\t\tinput = jQuery( \"<input name='tester' />\" );\n\n\tinput.attr( \"name\" );\n\n\tassert.strictEqual( input.clone( true ).attr( \"name\", \"test\" )[ 0 ].name, \"test\", \"Name attribute should be changed on cloned element\" );\n\n\tdiv = jQuery( \"<div id='tester' />\" );\n\tdiv.attr( \"id\" );\n\n\tassert.strictEqual( div.clone( true ).attr( \"id\", \"test\" )[ 0 ].id, \"test\", \"Id attribute should be changed on cloned element\" );\n\n\tinput = jQuery( \"<input value='tester' />\" );\n\tinput.attr( \"value\" );\n\n\tassert.strictEqual( input.clone( true ).attr( \"value\", \"test\" )[ 0 ].value, \"test\", \"Value attribute should be changed on cloned element\" );\n\n\tassert.strictEqual( input.clone( true ).attr( \"value\", 42 )[ 0 ].value, \"42\", \"Value attribute should be changed on cloned element\" );\n} );\n\nQUnit.test( \"attr(String) in XML Files\", function( assert ) {\n\tassert.expect( 3 );\n\tvar xml = createDashboardXML();\n\tassert.equal( jQuery( \"locations\", xml ).attr( \"class\" ), \"foo\", \"Check class attribute in XML document\" );\n\tassert.equal( jQuery( \"location\", xml ).attr( \"for\" ), \"bar\", \"Check for attribute in XML document\" );\n\tassert.equal( jQuery( \"location\", xml ).attr( \"checked\" ), \"different\", \"Check that hooks are not attached in XML document\" );\n} );\n\nQUnit.test( \"attr(String, Function)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( \"value\", function() {\n\t\t\treturn this.id;\n\t\t} ).attr( \"value\" ),\n\t\t\"text1\",\n\t\t\"Set value from id\"\n\t);\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( \"title\", function( i ) {\n\t\t\treturn i;\n\t\t} ).attr( \"title\" ),\n\t\t\"0\",\n\t\t\"Set value with an index\"\n\t);\n} );\n\nQUnit.test( \"attr(Hash)\", function( assert ) {\n\tassert.expect( 3 );\n\tvar pass = true;\n\n\tjQuery( \"#qunit-fixture div\" ).attr( {\n\t\t\"foo\": \"baz\",\n\t\t\"zoo\": \"ping\"\n\t} ).each( function() {\n\t\tif ( this.getAttribute( \"foo\" ) !== \"baz\" && this.getAttribute( \"zoo\" ) !== \"ping\" ) {\n\t\t\tpass = false;\n\t\t}\n\t} );\n\n\tassert.ok( pass, \"Set Multiple Attributes\" );\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( {\n\t\t\t\"value\": function() {\n\t\t\t\treturn this[ \"id\" ];\n\t\t\t} } ).attr( \"value\" ),\n\t\t\"text1\",\n\t\t\"Set attribute to computed value #1\"\n\t);\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( {\n\t\t\t\"title\": function( i ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} ).attr( \"title\" ),\n\t\t\"0\",\n\t\t\"Set attribute to computed value #2\"\n\t);\n} );\n\nQUnit.test( \"attr(String, Object)\", function( assert ) {\n\tassert.expect( 71 );\n\n\tvar $input, $text, $details,\n\t\tattributeNode, commentNode, textNode, obj,\n\t\ttable, td, j, type,\n\t\tcheck, thrown, button, $radio, $radios, $svg,\n\t\tdiv = jQuery( \"#qunit-fixture div\" ).attr( \"foo\", \"bar\" ),\n\t\ti = 0,\n\t\tfail = false;\n\n\tfor ( ; i < div.length; i++ ) {\n\t\tif ( div[ i ].getAttribute( \"foo\" ) !== \"bar\" ) {\n\t\t\tfail = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tassert.equal( fail, false, \"Set Attribute, the #\" + fail + \" element didn't get the attribute 'foo'\" );\n\n\tassert.ok(\n\t\tjQuery( \"#foo\" ).attr( {\n\t\t\t\"width\": null\n\t\t} ),\n\t\t\"Try to set an attribute to nothing\"\n\t);\n\n\tjQuery( \"#name\" ).attr( \"name\", \"something\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"name\" ), \"something\", \"Set name attribute\" );\n\tjQuery( \"#name\" ).attr( \"name\", null );\n\tassert.equal( jQuery( \"#name\" ).attr( \"name\" ), undefined, \"Remove name attribute\" );\n\n\t$input = jQuery( \"<input>\", {\n\t\tname: \"something\",\n\t\tid: \"specified\"\n\t} );\n\tassert.equal( $input.attr( \"name\" ), \"something\", \"Check element creation gets/sets the name attribute.\" );\n\tassert.equal( $input.attr( \"id\" ), \"specified\", \"Check element creation gets/sets the id attribute.\" );\n\n\t// As of fixing #11115, we only guarantee boolean property update for checked and selected\n\t$input = jQuery( \"<input type='checkbox'/>\" ).attr( \"checked\", true );\n\tassert.equal( $input.prop( \"checked\" ), true, \"Setting checked updates property (verified by .prop)\" );\n\tassert.equal( $input[ 0 ].checked, true, \"Setting checked updates property (verified by native property)\" );\n\t$input = jQuery( \"<option/>\" ).attr( \"selected\", true );\n\tassert.equal( $input.prop( \"selected\" ), true, \"Setting selected updates property (verified by .prop)\" );\n\tassert.equal( $input[ 0 ].selected, true, \"Setting selected updates property (verified by native property)\" );\n\n\t$input = jQuery( \"#check2\" );\n\t$input.prop( \"checked\", true ).prop( \"checked\", false ).attr( \"checked\", true );\n\tassert.equal( $input.attr( \"checked\" ), \"checked\", \"Set checked (verified by .attr)\" );\n\t$input.prop( \"checked\", false ).prop( \"checked\", true ).attr( \"checked\", false );\n\tassert.equal( $input.attr( \"checked\" ), undefined, \"Remove checked (verified by .attr)\" );\n\n\t$input = jQuery( \"#text1\" ).prop( \"readOnly\", true ).prop( \"readOnly\", false ).attr( \"readonly\", true );\n\tassert.equal( $input.attr( \"readonly\" ), \"readonly\", \"Set readonly (verified by .attr)\" );\n\t$input.prop( \"readOnly\", false ).prop( \"readOnly\", true ).attr( \"readonly\", false );\n\tassert.equal( $input.attr( \"readonly\" ), undefined, \"Remove readonly (verified by .attr)\" );\n\n\t$input = jQuery( \"#check2\" ).attr( \"checked\", true ).attr( \"checked\", false ).prop( \"checked\", true );\n\tassert.equal( $input[ 0 ].checked, true, \"Set checked property (verified by native property)\" );\n\tassert.equal( $input.prop( \"checked\" ), true, \"Set checked property (verified by .prop)\" );\n\tassert.equal( $input.attr( \"checked\" ), undefined, \"Setting checked property doesn't affect checked attribute\" );\n\t$input.attr( \"checked\", false ).attr( \"checked\", true ).prop( \"checked\", false );\n\tassert.equal( $input[ 0 ].checked, false, \"Clear checked property (verified by native property)\" );\n\tassert.equal( $input.prop( \"checked\" ), false, \"Clear checked property (verified by .prop)\" );\n\tassert.equal( $input.attr( \"checked\" ), \"checked\", \"Clearing checked property doesn't affect checked attribute\" );\n\n\t$input = jQuery( \"#check2\" ).attr( \"checked\", false ).attr( \"checked\", \"checked\" );\n\tassert.equal( $input.attr( \"checked\" ), \"checked\", \"Set checked to 'checked' (verified by .attr)\" );\n\n\t$radios = jQuery( \"#checkedtest\" ).find( \"input[type='radio']\" );\n\t$radios.eq( 1 ).trigger( \"click\" );\n\tassert.equal( $radios.eq( 1 ).prop( \"checked\" ), true, \"Second radio was checked when clicked\" );\n\tassert.equal( $radios.eq( 0 ).attr( \"checked\" ), \"checked\", \"First radio is still [checked]\" );\n\n\t$input = jQuery( \"#text1\" ).attr( \"readonly\", false ).prop( \"readOnly\", true );\n\tassert.equal( $input[ 0 ].readOnly, true, \"Set readonly property (verified by native property)\" );\n\tassert.equal( $input.prop( \"readOnly\" ), true, \"Set readonly property (verified by .prop)\" );\n\t$input.attr( \"readonly\", true ).prop( \"readOnly\", false );\n\tassert.equal( $input[ 0 ].readOnly, false, \"Clear readonly property (verified by native property)\" );\n\tassert.equal( $input.prop( \"readOnly\" ), false, \"Clear readonly property (verified by .prop)\" );\n\n\t$input = jQuery( \"#name\" ).attr( \"maxlength\", \"5\" );\n\tassert.equal( $input[ 0 ].maxLength, 5, \"Set maxlength (verified by native property)\" );\n\t$input.attr( \"maxLength\", \"10\" );\n\tassert.equal( $input[ 0 ].maxLength, 10, \"Set maxlength (verified by native property)\" );\n\n\t// HTML5 boolean attributes\n\t$text = jQuery( \"#text1\" ).attr( {\n\t\t\"autofocus\": true,\n\t\t\"required\": true\n\t} );\n\tassert.equal( $text.attr( \"autofocus\" ), \"autofocus\", \"Reading autofocus attribute yields 'autofocus'\" );\n\tassert.equal( $text.attr( \"autofocus\", false ).attr( \"autofocus\" ), undefined, \"Setting autofocus to false removes it\" );\n\tassert.equal( $text.attr( \"required\" ), \"required\", \"Reading required attribute yields 'required'\" );\n\tassert.equal( $text.attr( \"required\", false ).attr( \"required\" ), undefined, \"Setting required attribute to false removes it\" );\n\n\t$details = jQuery( \"<details open></details>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $details.attr( \"open\" ), \"open\", \"open attribute presence indicates true\" );\n\tassert.equal( $details.attr( \"open\", false ).attr( \"open\" ), undefined, \"Setting open attribute to false removes it\" );\n\n\t$text.attr( \"data-something\", true );\n\tassert.equal( $text.attr( \"data-something\" ), \"true\", \"Set data attributes\" );\n\tassert.equal( $text.data( \"something\" ), true, \"Setting data attributes are not affected by boolean settings\" );\n\t$text.attr( \"data-another\", false );\n\tassert.equal( $text.attr( \"data-another\" ), \"false\", \"Set data attributes\" );\n\tassert.equal( $text.data( \"another\" ), false, \"Setting data attributes are not affected by boolean settings\" );\n\tassert.equal( $text.attr( \"aria-disabled\", false ).attr( \"aria-disabled\" ), \"false\", \"Setting aria attributes are not affected by boolean settings\" );\n\t$text.removeData( \"something\" ).removeData( \"another\" ).removeAttr( \"aria-disabled\" );\n\n\tjQuery( \"#foo\" ).attr( \"contenteditable\", true );\n\tassert.equal( jQuery( \"#foo\" ).attr( \"contenteditable\" ), \"true\", \"Enumerated attributes are set properly\" );\n\n\tattributeNode = document.createAttribute( \"irrelevant\" );\n\tcommentNode = document.createComment( \"some comment\" );\n\ttextNode = document.createTextNode( \"some text\" );\n\tobj = {};\n\n\tjQuery.each( [ commentNode, textNode, attributeNode ], function( i, elem ) {\n\t\tvar $elem = jQuery( elem );\n\t\t$elem.attr( \"nonexisting\", \"foo\" );\n\t\tassert.strictEqual( $elem.attr( \"nonexisting\" ), undefined, \"attr(name, value) works correctly on comment and text nodes (bug #7500).\" );\n\t} );\n\n\tjQuery.each( [ window, document, obj, \"#firstp\" ], function( i, elem ) {\n\t\tvar oldVal = elem.nonexisting,\n\t\t\t$elem = jQuery( elem );\n\t\tassert.strictEqual( $elem.attr( \"nonexisting\" ), undefined, \"attr works correctly for non existing attributes (bug #7500).\" );\n\t\tassert.equal( $elem.attr( \"nonexisting\", \"foo\" ).attr( \"nonexisting\" ), \"foo\", \"attr falls back to prop on unsupported arguments\" );\n\t\telem.nonexisting = oldVal;\n\t} );\n\n\t// Register the property on the window for the previous assertion so it will be clean up\n\tGlobals.register( \"nonexisting\" );\n\n\ttable = jQuery( \"#table\" ).append( \"<tr><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr>\" );\n\ttd = table.find( \"td\" ).eq( 0 );\n\ttd.attr( \"rowspan\", \"2\" );\n\tassert.equal( td[ 0 ][ \"rowSpan\" ], 2, \"Check rowspan is correctly set\" );\n\ttd.attr( \"colspan\", \"2\" );\n\tassert.equal( td[ 0 ][ \"colSpan\" ], 2, \"Check colspan is correctly set\" );\n\ttable.attr( \"cellspacing\", \"2\" );\n\tassert.equal( table[ 0 ][ \"cellSpacing\" ], \"2\", \"Check cellspacing is correctly set\" );\n\n\tassert.equal( jQuery( \"#area1\" ).attr( \"value\" ), undefined, \"Value attribute is distinct from value property.\" );\n\n\t// for #1070\n\tjQuery( \"#name\" ).attr( \"someAttr\", \"0\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"someAttr\" ), \"0\", \"Set attribute to a string of '0'\" );\n\tjQuery( \"#name\" ).attr( \"someAttr\", 0 );\n\tassert.equal( jQuery( \"#name\" ).attr( \"someAttr\" ), \"0\", \"Set attribute to the number 0\" );\n\tjQuery( \"#name\" ).attr( \"someAttr\", 1 );\n\tassert.equal( jQuery( \"#name\" ).attr( \"someAttr\" ), \"1\", \"Set attribute to the number 1\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\n\tj.attr( \"name\", \"attrvalue\" );\n\tassert.equal( j.attr( \"name\" ), \"attrvalue\", \"Check node,textnode,comment for attr\" );\n\tj.removeAttr( \"name\" );\n\n\t// Type\n\ttype = jQuery( \"#check2\" ).attr( \"type\" );\n\ttry {\n\t\tjQuery( \"#check2\" ).attr( \"type\", \"hidden\" );\n\t\tassert.ok( true, \"No exception thrown on input type change\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Exception thrown on input type change: \" + e );\n\t}\n\n\tcheck = document.createElement( \"input\" );\n\tthrown = true;\n\ttry {\n\t\tjQuery( check ).attr( \"type\", \"checkbox\" );\n\t} catch ( e ) {\n\t\tthrown = false;\n\t}\n\tassert.ok( thrown, \"Exception thrown when trying to change type property\" );\n\tassert.equal( \"checkbox\", jQuery( check ).attr( \"type\" ), \"Verify that you can change the type of an input element that isn't in the DOM\" );\n\n\tcheck = jQuery( \"<input />\" );\n\tthrown = true;\n\ttry {\n\t\tcheck.attr( \"type\", \"checkbox\" );\n\t} catch ( e ) {\n\t\tthrown = false;\n\t}\n\tassert.ok( thrown, \"Exception thrown when trying to change type property\" );\n\tassert.equal( \"checkbox\", check.attr( \"type\" ), \"Verify that you can change the type of an input element that isn't in the DOM\" );\n\n\tbutton = jQuery( \"#button\" );\n\ttry {\n\t\tbutton.attr( \"type\", \"submit\" );\n\t\tassert.ok( true, \"No exception thrown on button type change\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Exception thrown on button type change: \" + e );\n\t}\n\n\t$radio = jQuery( \"<input>\", {\n\t\t\"value\": \"sup\",\n\t\t// Use uppercase here to ensure the type\n\t\t// attrHook is still used\n\t\t\"TYPE\": \"radio\"\n\t} ).appendTo( \"#testForm\" );\n\tassert.equal( $radio.val(), \"sup\", \"Value is not reset when type is set after value on a radio\" );\n\n\t// Setting attributes on svg elements (bug #3116)\n\t$svg = jQuery(\n\t\t\"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' width='200' height='200'>\" +\n\n\t\t\t\"<circle cx='200' cy='200' r='150' />\" +\n\t\t\t\"</svg>\"\n\t\t).appendTo( \"body\" );\n\tassert.equal( $svg.attr( \"cx\", 100 ).attr( \"cx\" ), \"100\", \"Set attribute on svg element\" );\n\t$svg.remove();\n\n\t// undefined values are chainable\n\tjQuery( \"#name\" ).attr( \"maxlength\", \"5\" ).removeAttr( \"nonexisting\" );\n\tassert.equal( typeof jQuery( \"#name\" ).attr( \"maxlength\", undefined ), \"object\", \".attr('attribute', undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"maxlength\", undefined ).attr( \"maxlength\" ), \"5\", \".attr('attribute', undefined) does not change value (#5571)\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"nonexisting\", undefined ).attr( \"nonexisting\" ), undefined, \".attr('attribute', undefined) does not create attribute (#5571)\" );\n} );\n\nQUnit.test( \"attr(non-ASCII)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"<div \u03a9='omega' a\u00d8c='alpha'></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( $div.attr( \"\u03a9\" ), \"omega\", \".attr() exclusively lowercases characters in the range A-Z (gh-2730)\" );\n\tassert.equal( $div.attr( \"A\u00d8C\" ), \"alpha\", \".attr() exclusively lowercases characters in the range A-Z (gh-2730)\" );\n} );\n\nQUnit.test( \"attr - extending the boolean attrHandle\", function( assert ) {\n\tassert.expect( 1 );\n\tvar called = false,\n\t\torigAttrHandleHadChecked = \"checked\" in jQuery.expr.attrHandle,\n\t\torigAttrHandleChecked = jQuery.expr.attrHandle.checked,\n\t\t_handle = origAttrHandleChecked || $.noop;\n\tjQuery.expr.attrHandle.checked = function() {\n\t\tcalled = true;\n\t\t_handle.apply( this, arguments );\n\t};\n\tjQuery( \"#qunit-fixture input\" ).attr( \"checked\" );\n\tcalled = false;\n\tjQuery( \"#qunit-fixture input\" ).attr( \"checked\" );\n\tassert.ok( called, \"The boolean attrHandle does not drop custom attrHandles\" );\n\n\tif ( origAttrHandleHadChecked ) {\n\t\tjQuery.expr.attrHandle.checked = origAttrHandleChecked;\n\t} else {\n\t\tdelete jQuery.expr.attrHandle.checked;\n\t}\n\n} );\n\nQUnit.test( \"attr(String, Object) - Loaded via XML document\", function( assert ) {\n\tassert.expect( 2 );\n\tvar xml = createDashboardXML(),\n\t\ttitles = [];\n\tjQuery( \"tab\", xml ).each( function() {\n\t\ttitles.push( jQuery( this ).attr( \"title\" ) );\n\t} );\n\tassert.equal( titles[ 0 ], \"Location\", \"attr() in XML context: Check first title\" );\n\tassert.equal( titles[ 1 ], \"Users\", \"attr() in XML context: Check second title\" );\n} );\n\nQUnit.test( \"attr(String, Object) - Loaded via XML fragment\", function( assert ) {\n\tassert.expect( 2 );\n\tvar frag = createXMLFragment(),\n\t\t$frag = jQuery( frag );\n\n\t$frag.attr( \"test\", \"some value\" );\n\tassert.equal( $frag.attr( \"test\" ), \"some value\", \"set attribute\" );\n\t$frag.attr( \"test\", null );\n\tassert.equal( $frag.attr( \"test\" ), undefined, \"remove attribute\" );\n} );\n\nQUnit.test( \"attr('tabindex')\", function( assert ) {\n\tassert.expect( 8 );\n\n\t// elements not natively tabbable\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).attr( \"tabindex\" ), \"5\", \"not natively tabbable, with tabindex set to 0\" );\n\tassert.equal( jQuery( \"#divWithNoTabIndex\" ).attr( \"tabindex\" ), undefined, \"not natively tabbable, no tabindex set\" );\n\n\t// anchor with href\n\tassert.equal( jQuery( \"#linkWithNoTabIndex\" ).attr( \"tabindex\" ), undefined, \"anchor with href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithTabIndex\" ).attr( \"tabindex\" ), \"2\", \"anchor with href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNegativeTabIndex\" ).attr( \"tabindex\" ), \"-1\", \"anchor with href, tabindex set to -1\" );\n\n\t// anchor without href\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNoTabIndex\" ).attr( \"tabindex\" ), undefined, \"anchor without href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithTabIndex\" ).attr( \"tabindex\" ), \"1\", \"anchor without href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNegativeTabIndex\" ).attr( \"tabindex\" ), \"-1\", \"anchor without href, no tabindex set\" );\n} );\n\nQUnit.test( \"attr('tabindex', value)\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar element = jQuery( \"#divWithNoTabIndex\" );\n\tassert.equal( element.attr( \"tabindex\" ), undefined, \"start with no tabindex\" );\n\n\t// set a positive string\n\telement.attr( \"tabindex\", \"1\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"1\", \"set tabindex to 1 (string)\" );\n\n\t// set a zero string\n\telement.attr( \"tabindex\", \"0\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"0\", \"set tabindex to 0 (string)\" );\n\n\t// set a negative string\n\telement.attr( \"tabindex\", \"-1\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"-1\", \"set tabindex to -1 (string)\" );\n\n\t// set a positive number\n\telement.attr( \"tabindex\", 1 );\n\tassert.equal( element.attr( \"tabindex\" ), \"1\", \"set tabindex to 1 (number)\" );\n\n\t// set a zero number\n\telement.attr( \"tabindex\", 0 );\n\tassert.equal( element.attr( \"tabindex\" ), \"0\", \"set tabindex to 0 (number)\" );\n\n\t// set a negative number\n\telement.attr( \"tabindex\", -1 );\n\tassert.equal( element.attr( \"tabindex\" ), \"-1\", \"set tabindex to -1 (number)\" );\n\n\telement = jQuery( \"#linkWithTabIndex\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"2\", \"start with tabindex 2\" );\n\n\telement.attr( \"tabindex\", -1 );\n\tassert.equal( element.attr( \"tabindex\" ), \"-1\", \"set negative tabindex\" );\n} );\n\nQUnit.test( \"removeAttr(String)\", function( assert ) {\n\tassert.expect( 12 );\n\tvar $first;\n\n\tassert.equal( jQuery( \"<div class='hello' />\" ).removeAttr( \"class\" ).attr( \"class\" ), undefined, \"remove class\" );\n\tassert.equal( jQuery( \"#form\" ).removeAttr( \"id\" ).attr( \"id\" ), undefined, \"Remove id\" );\n\tassert.equal( jQuery( \"#foo\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute\" );\n\tassert.equal( jQuery( \"#form\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute on a form\" );\n\tassert.equal( jQuery( \"<div style='position: absolute'></div>\" ).appendTo( \"#foo\" ).removeAttr( \"style\" ).prop( \"style\" ).cssText, \"\", \"Check removing style attribute (#9699 Webkit)\" );\n\tassert.equal( jQuery( \"#fx-test-group\" ).attr( \"height\", \"3px\" ).removeAttr( \"height\" ).get( 0 ).style.height, \"1px\", \"Removing height attribute has no effect on height set with style attribute\" );\n\n\tjQuery( \"#check1\" ).removeAttr( \"checked\" ).prop( \"checked\", true ).removeAttr( \"checked\" );\n\tassert.equal( document.getElementById( \"check1\" ).checked, true, \"removeAttr should not set checked to false, since the checked attribute does NOT mirror the checked property\" );\n\tjQuery( \"#text1\" ).prop( \"readOnly\", true ).removeAttr( \"readonly\" );\n\tassert.equal( document.getElementById( \"text1\" ).readOnly, false, \"removeAttr sets boolean properties to false\" );\n\n\tjQuery( \"#option2c\" ).removeAttr( \"selected\" );\n\tassert.equal( jQuery( \"#option2d\" ).attr( \"selected\" ), \"selected\", \"Removing `selected` from an option that is not selected does not remove selected from the currently selected option (#10870)\" );\n\n\ttry {\n\t\t$first = jQuery( \"#first\" ).attr( \"contenteditable\", \"true\" ).removeAttr( \"contenteditable\" );\n\t\tassert.equal( $first.attr( \"contenteditable\" ), undefined, \"Remove the contenteditable attribute\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"Removing contenteditable threw an error (#10429)\" );\n\t}\n\n\t$first = jQuery( \"<div Case='mixed'></div>\" );\n\tassert.equal( $first.attr( \"Case\" ), \"mixed\", \"case of attribute doesn't matter\" );\n\t$first.removeAttr( \"Case\" );\n\tassert.equal( $first.attr( \"Case\" ), undefined, \"mixed-case attribute was removed\" );\n} );\n\nQUnit.test( \"removeAttr(String) in XML\", function( assert ) {\n\tassert.expect( 7 );\n\tvar xml = createDashboardXML(),\n\t\tiwt = jQuery( \"infowindowtab\", xml );\n\n\tassert.equal( iwt.attr( \"normal\" ), \"ab\", \"Check initial value\" );\n\tiwt.removeAttr( \"Normal\" );\n\tassert.equal( iwt.attr( \"normal\" ), \"ab\", \"Should still be there\" );\n\tiwt.removeAttr( \"normal\" );\n\tassert.equal( iwt.attr( \"normal\" ), undefined, \"Removed\" );\n\n\tassert.equal( iwt.attr( \"mixedCase\" ), \"yes\", \"Check initial value\" );\n\tassert.equal( iwt.attr( \"mixedcase\" ), undefined, \"toLowerCase not work good\" );\n\tiwt.removeAttr( \"mixedcase\" );\n\tassert.equal( iwt.attr( \"mixedCase\" ), \"yes\", \"Should still be there\" );\n\tiwt.removeAttr( \"mixedCase\" );\n\tassert.equal( iwt.attr( \"mixedCase\" ), undefined, \"Removed\" );\n} );\n\nQUnit.test( \"removeAttr(Multi String, variable space width)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar div = jQuery( \"<div id='a' alt='b' title='c' rel='d'></div>\" ),\n\t\ttests = {\n\t\t\tid: \"a\",\n\t\t\talt: \"b\",\n\t\t\ttitle: \"c\",\n\t\t\trel: \"d\"\n\t\t};\n\n\tjQuery.each( tests, function( key, val ) {\n\t\tassert.equal( div.attr( key ), val, \"Attribute `\" + key + \"` exists, and has a value of `\" + val + \"`\" );\n\t} );\n\n\tdiv.removeAttr( \"id   alt title  rel  \" );\n\n\tjQuery.each( tests, function( key ) {\n\t\tassert.equal( div.attr( key ), undefined, \"Attribute `\" + key + \"` was removed\" );\n\t} );\n} );\n\nQUnit.test( \"removeAttr(Multi String, non-HTML whitespace is valid in attribute names (gh-3003)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar div = jQuery( \"<div id='a' data-\\xA0='b' title='c' rel='d'></div>\" );\n\tvar tests = {\n\t\tid: \"a\",\n\t\t\"data-\\xA0\": \"b\",\n\t\ttitle: \"c\",\n\t\trel: \"d\"\n\t};\n\n\tjQuery.each( tests, function( key, val ) {\n\t\tassert.equal( div.attr( key ), val, \"Attribute \\\"\" + key + \"\\\" exists, and has a value of \\\"\" + val + \"\\\"\" );\n\t} );\n\n\tdiv.removeAttr( \"id   data-\\xA0 title  rel  \" );\n\n\tjQuery.each( tests, function( key ) {\n\t\tassert.equal( div.attr( key ), undefined, \"Attribute \\\"\" + key + \"\\\" was removed\" );\n\t} );\n} );\n\nQUnit.test( \"prop(String, Object)\", function( assert ) {\n\n\tassert.expect( 17 );\n\n\tassert.equal( jQuery( \"#text1\" ).prop( \"value\" ), \"Test\", \"Check for value attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).prop( \"value\", \"Test2\" ).prop( \"defaultValue\" ), \"Test\", \"Check for defaultValue attribute\" );\n\tassert.equal( jQuery( \"#select2\" ).prop( \"selectedIndex\" ), 3, \"Check for selectedIndex attribute\" );\n\tassert.equal( jQuery( \"#foo\" ).prop( \"nodeName\" ).toUpperCase(), \"DIV\", \"Check for nodeName attribute\" );\n\tassert.equal( jQuery( \"#foo\" ).prop( \"tagName\" ).toUpperCase(), \"DIV\", \"Check for tagName attribute\" );\n\tassert.equal( jQuery( \"<option/>\" ).prop( \"selected\" ), false, \"Check selected attribute on disconnected element.\" );\n\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).prop( \"tabindex\" ), 5, \"Check retrieving tabindex\" );\n\tjQuery( \"#text1\" ).prop( \"readonly\", true );\n\tassert.equal( document.getElementById( \"text1\" ).readOnly, true, \"Check setting readOnly property with 'readonly'\" );\n\tassert.equal( jQuery( \"#label-for\" ).prop( \"for\" ), \"action\", \"Check retrieving htmlFor\" );\n\tjQuery( \"#text1\" ).prop( \"class\", \"test\" );\n\tassert.equal( document.getElementById( \"text1\" ).className, \"test\", \"Check setting className with 'class'\" );\n\tassert.equal( jQuery( \"#text1\" ).prop( \"maxlength\" ), 30, \"Check retrieving maxLength\" );\n\tjQuery( \"#table\" ).prop( \"cellspacing\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"cellSpacing\" ), \"1\", \"Check setting and retrieving cellSpacing\" );\n\tjQuery( \"#table\" ).prop( \"cellpadding\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"cellPadding\" ), \"1\", \"Check setting and retrieving cellPadding\" );\n\tjQuery( \"#table\" ).prop( \"rowspan\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"rowSpan\" ), 1, \"Check setting and retrieving rowSpan\" );\n\tjQuery( \"#table\" ).prop( \"colspan\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"colSpan\" ), 1, \"Check setting and retrieving colSpan\" );\n\tjQuery( \"#table\" ).prop( \"usemap\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"useMap\" ), 1, \"Check setting and retrieving useMap\" );\n\tjQuery( \"#table\" ).prop( \"frameborder\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"frameBorder\" ), 1, \"Check setting and retrieving frameBorder\" );\n} );\n\nQUnit.test( \"prop(String, Object) on null/undefined\", function( assert ) {\n\n  assert.expect( 14 );\n\n\tvar select, optgroup, option, attributeNode, commentNode, textNode, obj, $form,\n\t\tbody = document.body,\n\t\t$body = jQuery( body );\n\n\tassert.ok( $body.prop( \"nextSibling\" ) === null, \"Make sure a null expando returns null\" );\n\tbody[ \"foo\" ] = \"bar\";\n\tassert.equal( $body.prop( \"foo\" ), \"bar\", \"Make sure the expando is preferred over the dom attribute\" );\n\tbody[ \"foo\" ] = undefined;\n\tassert.ok( $body.prop( \"foo\" ) === undefined, \"Make sure the expando is preferred over the dom attribute, even if undefined\" );\n\n\tselect = document.createElement( \"select\" );\n\toptgroup = document.createElement( \"optgroup\" );\n\toption = document.createElement( \"option\" );\n\n\toptgroup.appendChild( option );\n\tselect.appendChild( optgroup );\n\n\tassert.equal( jQuery( option ).prop( \"selected\" ), true, \"Make sure that a single option is selected, even when in an optgroup.\" );\n\tassert.equal( jQuery( document ).prop( \"nodeName\" ), \"#document\", \"prop works correctly on document nodes (bug #7451).\" );\n\n\tattributeNode = document.createAttribute( \"irrelevant\" );\n\tcommentNode = document.createComment( \"some comment\" );\n\ttextNode = document.createTextNode( \"some text\" );\n\tobj = {};\n\tjQuery.each( [ document, attributeNode, commentNode, textNode, obj, \"#firstp\" ], function( i, ele ) {\n\t\tassert.strictEqual( jQuery( ele ).prop( \"nonexisting\" ), undefined, \"prop works correctly for non existing attributes (bug #7500).\" );\n\t} );\n\n\tobj = {};\n\tjQuery.each( [ document, obj ], function( i, ele ) {\n\t\tvar $ele = jQuery( ele );\n\t\t$ele.prop( \"nonexisting\", \"foo\" );\n\t\tassert.equal( $ele.prop( \"nonexisting\" ), \"foo\", \"prop(name, value) works correctly for non existing attributes (bug #7500).\" );\n\t} );\n\tjQuery( document ).removeProp( \"nonexisting\" );\n\n\t$form = jQuery( \"#form\" ).prop( \"enctype\", \"multipart/form-data\" );\n\tassert.equal( $form.prop( \"enctype\" ), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 #6743)\" );\n} );\n\nQUnit.test( \"prop('tabindex')\", function( assert ) {\n\tassert.expect( 11 );\n\n\t// inputs without tabIndex attribute\n\tassert.equal( jQuery( \"#inputWithoutTabIndex\" ).prop( \"tabindex\" ), 0, \"input without tabindex\" );\n\tassert.equal( jQuery( \"#buttonWithoutTabIndex\" ).prop( \"tabindex\" ), 0, \"button without tabindex\" );\n\tassert.equal( jQuery( \"#textareaWithoutTabIndex\" ).prop( \"tabindex\" ), 0, \"textarea without tabindex\" );\n\n\t// elements not natively tabbable\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).prop( \"tabindex\" ), 5, \"not natively tabbable, with tabindex set to 0\" );\n\tassert.equal( jQuery( \"#divWithNoTabIndex\" ).prop( \"tabindex\" ), -1, \"not natively tabbable, no tabindex set\" );\n\n\t// anchor with href\n\tassert.equal( jQuery( \"#linkWithNoTabIndex\" ).prop( \"tabindex\" ), 0, \"anchor with href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithTabIndex\" ).prop( \"tabindex\" ), 2, \"anchor with href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNegativeTabIndex\" ).prop( \"tabindex\" ), -1, \"anchor with href, tabindex set to -1\" );\n\n\t// anchor without href\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNoTabIndex\" ).prop( \"tabindex\" ), -1, \"anchor without href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithTabIndex\" ).prop( \"tabindex\" ), 1, \"anchor without href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNegativeTabIndex\" ).prop( \"tabindex\" ), -1, \"anchor without href, no tabindex set\" );\n} );\n\nQUnit.test( \"image.prop( 'tabIndex' )\", function( assert ) {\n\tassert.expect( 1 );\n\tvar image = jQuery( \"<img src='\" + baseURL + \"1x1.jpg' />\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\tassert.equal( image.prop( \"tabIndex\" ), -1, \"tabIndex on image\" );\n} );\n\nQUnit.test( \"prop('tabindex', value)\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar clone,\n\t\telement = jQuery( \"#divWithNoTabIndex\" );\n\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"start with no tabindex\" );\n\n\t// set a positive string\n\telement.prop( \"tabindex\", \"1\" );\n\tassert.equal( element.prop( \"tabindex\" ), 1, \"set tabindex to 1 (string)\" );\n\n\t// set a zero string\n\telement.prop( \"tabindex\", \"0\" );\n\tassert.equal( element.prop( \"tabindex\" ), 0, \"set tabindex to 0 (string)\" );\n\n\t// set a negative string\n\telement.prop( \"tabindex\", \"-1\" );\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"set tabindex to -1 (string)\" );\n\n\t// set a positive number\n\telement.prop( \"tabindex\", 1 );\n\tassert.equal( element.prop( \"tabindex\" ), 1, \"set tabindex to 1 (number)\" );\n\n\t// set a zero number\n\telement.prop( \"tabindex\", 0 );\n\tassert.equal( element.prop( \"tabindex\" ), 0, \"set tabindex to 0 (number)\" );\n\n\t// set a negative number\n\telement.prop( \"tabindex\", -1 );\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"set tabindex to -1 (number)\" );\n\n\telement = jQuery( \"#linkWithTabIndex\" );\n\tassert.equal( element.prop( \"tabindex\" ), 2, \"start with tabindex 2\" );\n\n\telement.prop( \"tabindex\", -1 );\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"set negative tabindex\" );\n\n\tclone = element.clone();\n\tclone.prop( \"tabindex\", 1 );\n\tassert.equal( clone[ 0 ].getAttribute( \"tabindex\" ), \"1\", \"set tabindex on cloned element\" );\n} );\n\nQUnit.test( \"option.prop('selected', true) affects select.selectedIndex (gh-2732)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tfunction addOptions( $elem ) {\n\t\treturn $elem.append(\n\t\t\tjQuery( \"<option/>\" ).val( \"a\" ).text( \"One\" ),\n\t\t\tjQuery( \"<option/>\" ).val( \"b\" ).text( \"Two\" ),\n\t\t\tjQuery( \"<option/>\" ).val( \"c\" ).text( \"Three\" )\n\t\t)\n\t\t.find( \"[value=a]\" ).prop( \"selected\", true ).end()\n\t\t.find( \"[value=c]\" ).prop( \"selected\", true ).end();\n\t}\n\n\tvar $optgroup,\n\t\t$select = jQuery( \"<select/>\" );\n\n\t// Check select with options\n\taddOptions( $select ).appendTo( \"#qunit-fixture\" );\n\t$select.find( \"[value=b]\" ).prop( \"selected\", true );\n\tassert.equal( $select[ 0 ].selectedIndex, 1, \"Setting option selected affects selectedIndex\" );\n\n\t$select.empty();\n\n\t// Check select with optgroup\n\t$optgroup = jQuery( \"<optgroup/>\" );\n\taddOptions( $optgroup ).appendTo( $select );\n\t$select.find( \"[value=b]\" ).prop( \"selected\", true );\n\n\tassert.equal( $select[ 0 ].selectedIndex, 1, \"Setting option in optgroup selected affects selectedIndex\" );\n} );\n\nQUnit.test( \"removeProp(String)\", function( assert ) {\n\tassert.expect( 6 );\n\tvar attributeNode = document.createAttribute( \"irrelevant\" ),\n\t\tcommentNode = document.createComment( \"some comment\" ),\n\t\ttextNode = document.createTextNode( \"some text\" ),\n\t\tobj = {};\n\n\tassert.strictEqual(\n\t\tjQuery( \"#firstp\" ).prop( \"nonexisting\", \"foo\" ).removeProp( \"nonexisting\" )[ 0 ][ \"nonexisting\" ],\n\t\tundefined,\n\t\t\"removeprop works correctly on DOM element nodes\"\n\t);\n\n\tjQuery.each( [ document, obj ], function( i, ele ) {\n\t\tvar $ele = jQuery( ele );\n\t\t$ele.prop( \"nonexisting\", \"foo\" ).removeProp( \"nonexisting\" );\n\t\tassert.strictEqual( ele[ \"nonexisting\" ], undefined, \"removeProp works correctly on non DOM element nodes (bug #7500).\" );\n\t} );\n\tjQuery.each( [ commentNode, textNode, attributeNode ], function( i, ele ) {\n\t\tvar $ele = jQuery( ele );\n\t\t$ele.prop( \"nonexisting\", \"foo\" ).removeProp( \"nonexisting\" );\n\t\tassert.strictEqual( ele[ \"nonexisting\" ], undefined, \"removeProp works correctly on non DOM element nodes (bug #7500).\" );\n\t} );\n} );\n\nQUnit.test( \"val() after modification\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tdocument.getElementById( \"text1\" ).value = \"bla\";\n\tassert.equal( jQuery( \"#text1\" ).val(), \"bla\", \"Check for modified value of input element\" );\n} );\n\nQUnit.test( \"val()\", function( assert ) {\n\n\tassert.expect( 20 + ( jQuery.fn.serialize ? 6 : 0 ) );\n\n\tvar checks, $button;\n\tassert.equal( jQuery( \"#text1\" ).val(), \"Test\", \"Check for value of input element\" );\n\n\t// ticket #1714 this caused a JS error in IE\n\tassert.equal( jQuery( \"#first\" ).val(), \"\", \"Check a paragraph element to see if it has a value\" );\n\tassert.ok( jQuery( [] ).val() === undefined, \"Check an empty jQuery object will return undefined from val\" );\n\n\tassert.equal( jQuery( \"#select2\" ).val(), \"3\", \"Call val() on a single='single' select\" );\n\n\tassert.deepEqual( jQuery( \"#select3\" ).val(), [ \"1\", \"2\" ], \"Call val() on a multiple='multiple' select\" );\n\n\tassert.equal( jQuery( \"#option3c\" ).val(), \"2\", \"Call val() on a option element with value\" );\n\n\tassert.equal( jQuery( \"#option3a\" ).val(), \"\", \"Call val() on a option element with empty value\" );\n\n\tassert.equal( jQuery( \"#option3e\" ).val(), \"no value\", \"Call val() on a option element with no value attribute\" );\n\n\tassert.equal( jQuery( \"#option3a\" ).val(), \"\", \"Call val() on a option element with no value attribute\" );\n\n\tjQuery( \"#select3\" ).val( \"\" );\n\tassert.deepEqual( jQuery( \"#select3\" ).val(), [ \"\" ], \"Call val() on a multiple='multiple' select\" );\n\n\tassert.deepEqual( jQuery( \"#select4\" ).val(), [], \"Call val() on multiple='multiple' select with all disabled options\" );\n\n\tjQuery( \"#select4 optgroup\" ).add( \"#select4 > [disabled]\" ).attr( \"disabled\", false );\n\tassert.deepEqual( jQuery( \"#select4\" ).val(), [ \"2\", \"3\" ], \"Call val() on multiple='multiple' select with some disabled options\" );\n\n\tjQuery( \"#select4\" ).attr( \"disabled\", true );\n\tassert.deepEqual( jQuery( \"#select4\" ).val(), [ \"2\", \"3\" ], \"Call val() on disabled multiple='multiple' select\" );\n\n\tassert.equal( jQuery( \"#select5\" ).val(), \"3\", \"Check value on ambiguous select.\" );\n\n\tjQuery( \"#select5\" ).val( 1 );\n\tassert.equal( jQuery( \"#select5\" ).val(), \"1\", \"Check value on ambiguous select.\" );\n\n\tjQuery( \"#select5\" ).val( 3 );\n\tassert.equal( jQuery( \"#select5\" ).val(), \"3\", \"Check value on ambiguous select.\" );\n\n\tassert.strictEqual(\n\t\tjQuery( \"<select name='select12584' id='select12584'><option value='1' disabled='disabled'>1</option></select>\" ).val(),\n\t\tnull,\n\t\t\"Select-one with only option disabled (#12584)\"\n\t);\n\n\tif ( jQuery.fn.serialize ) {\n\t\tchecks = jQuery( \"<input type='checkbox' name='test' value='1'/><input type='checkbox' name='test' value='2'/><input type='checkbox' name='test' value=''/><input type='checkbox' name='test'/>\" ).appendTo( \"#form\" );\n\n\t\tassert.deepEqual( checks.serialize(), \"\", \"Get unchecked values.\" );\n\n\t\tassert.equal( checks.eq( 3 ).val(), \"on\", \"Make sure a value of 'on' is provided if none is specified.\" );\n\n\t\tchecks.val( [ \"2\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=2\", \"Get a single checked value.\" );\n\n\t\tchecks.val( [ \"1\", \"\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=1&test=\", \"Get multiple checked values.\" );\n\n\t\tchecks.val( [ \"\", \"2\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=2&test=\", \"Get multiple checked values.\" );\n\n\t\tchecks.val( [ \"1\", \"on\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=1&test=on\", \"Get multiple checked values.\" );\n\n\t\tchecks.remove();\n\t}\n\n\t$button = jQuery( \"<button value='foobar'>text</button>\" ).insertAfter( \"#button\" );\n\tassert.equal( $button.val(), \"foobar\", \"Value retrieval on a button does not return innerHTML\" );\n\tassert.equal( $button.val( \"baz\" ).html(), \"text\", \"Setting the value does not change innerHTML\" );\n\n\tassert.equal( jQuery( \"<option/>\" ).val( \"test\" ).attr( \"value\" ), \"test\", \"Setting value sets the value attribute\" );\n} );\n\nQUnit.test( \"val() with non-matching values on dropdown list\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"#select5\" ).val( \"\" );\n\tassert.equal( jQuery( \"#select5\" ).val(), null, \"Non-matching set on select-one\" );\n\n\tvar select6 = jQuery( \"<select multiple id=\\\"select6\\\"><option value=\\\"1\\\">A</option><option value=\\\"2\\\">B</option></select>\" ).appendTo( \"#form\" );\n\tjQuery( select6 ).val( \"nothing\" );\n\tassert.deepEqual( jQuery( select6 ).val(), [], \"Non-matching set (single value) on select-multiple\" );\n\n\tjQuery( select6 ).val( [ \"nothing1\", \"nothing2\" ] );\n\tassert.deepEqual( jQuery( select6 ).val(), [], \"Non-matching set (array of values) on select-multiple\" );\n\n\tselect6.remove();\n} );\n\nif ( \"value\" in document.createElement( \"meter\" ) &&\n\t\t\t\"value\" in document.createElement( \"progress\" ) ) {\n\n\tQUnit.test( \"val() respects numbers without exception (Bug #9319)\", function( assert ) {\n\n\t\tassert.expect( 4 );\n\n\t\tvar $meter = jQuery( \"<meter min='0' max='10' value='5.6'></meter>\" ),\n\t\t\t$progress = jQuery( \"<progress max='10' value='1.5'></progress>\" );\n\n\t\ttry {\n\t\t\tassert.equal( typeof $meter.val(), \"number\", \"meter, returns a number and does not throw exception\" );\n\t\t\tassert.equal( $meter.val(), $meter[ 0 ].value, \"meter, api matches host and does not throw exception\" );\n\n\t\t\tassert.equal( typeof $progress.val(), \"number\", \"progress, returns a number and does not throw exception\" );\n\t\t\tassert.equal( $progress.val(), $progress[ 0 ].value, \"progress, api matches host and does not throw exception\" );\n\n\t\t} catch ( e ) {}\n\n\t\t$meter.remove();\n\t\t$progress.remove();\n\t} );\n}\n\nvar testVal = function( valueObj, assert ) {\n\tassert.expect( 9 );\n\n\tjQuery( \"#text1\" ).val( valueObj( \"test\" ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"test\", \"Check for modified (via val(String)) value of input element\" );\n\n\tjQuery( \"#text1\" ).val( valueObj( undefined ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"\", \"Check for modified (via val(undefined)) value of input element\" );\n\n\tjQuery( \"#text1\" ).val( valueObj( 67 ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"67\", \"Check for modified (via val(Number)) value of input element\" );\n\n\tjQuery( \"#text1\" ).val( valueObj( null ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"\", \"Check for modified (via val(null)) value of input element\" );\n\n\tvar j,\n\t\t$select = jQuery( \"<select multiple><option value='1'/><option value='2'/></select>\" ),\n\t\t$select1 = jQuery( \"#select1\" );\n\n\t$select1.val( valueObj( \"3\" ) );\n\tassert.equal( $select1.val(), \"3\", \"Check for modified (via val(String)) value of select element\" );\n\n\t$select1.val( valueObj( 2 ) );\n\tassert.equal( $select1.val(), \"2\", \"Check for modified (via val(Number)) value of select element\" );\n\n\t$select1.append( \"<option value='4'>four</option>\" );\n\t$select1.val( valueObj( 4 ) );\n\tassert.equal( $select1.val(), \"4\", \"Should be possible to set the val() to a newly created option\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.val( valueObj( \"asdf\" ) );\n\tassert.equal( j.val(), \"asdf\", \"Check node,textnode,comment with val()\" );\n\tj.removeAttr( \"value\" );\n\n\t$select.val( valueObj( [ \"1\", \"2\" ] ) );\n\tassert.deepEqual( $select.val(), [ \"1\", \"2\" ], \"Should set array of values\" );\n};\n\nQUnit.test( \"val(String/Number)\", function( assert ) {\n\ttestVal( bareObj, assert );\n} );\n\nQUnit.test( \"val(Function)\", function( assert ) {\n\ttestVal( functionReturningObj, assert );\n} );\n\nQUnit.test( \"val(Array of Numbers) (Bug #7123)\", function( assert ) {\n\tassert.expect( 4 );\n\tjQuery( \"#form\" ).append( \"<input type='checkbox' name='arrayTest' value='1' /><input type='checkbox' name='arrayTest' value='2' /><input type='checkbox' name='arrayTest' value='3' checked='checked' /><input type='checkbox' name='arrayTest' value='4' />\" );\n\tvar elements = jQuery( \"#form input[name=arrayTest]\" ).val( [ 1, 2 ] );\n\tassert.ok( elements[ 0 ].checked, \"First element was checked\" );\n\tassert.ok( elements[ 1 ].checked, \"Second element was checked\" );\n\tassert.ok( !elements[ 2 ].checked, \"Third element was unchecked\" );\n\tassert.ok( !elements[ 3 ].checked, \"Fourth element remained unchecked\" );\n\n\telements.remove();\n} );\n\nQUnit.test( \"val(Function) with incoming value\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar oldVal = jQuery( \"#text1\" ).val();\n\n\tjQuery( \"#text1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn \"test\";\n\t} );\n\n\tassert.equal( document.getElementById( \"text1\" ).value, \"test\", \"Check for modified (via val(String)) value of input element\" );\n\n\toldVal = jQuery( \"#text1\" ).val();\n\n\tjQuery( \"#text1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn 67;\n\t} );\n\n\tassert.equal( document.getElementById( \"text1\" ).value, \"67\", \"Check for modified (via val(Number)) value of input element\" );\n\n\toldVal = jQuery( \"#select1\" ).val();\n\n\tjQuery( \"#select1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn \"3\";\n\t} );\n\n\tassert.equal( jQuery( \"#select1\" ).val(), \"3\", \"Check for modified (via val(String)) value of select element\" );\n\n\toldVal = jQuery( \"#select1\" ).val();\n\n\tjQuery( \"#select1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn 2;\n\t} );\n\n\tassert.equal( jQuery( \"#select1\" ).val(), \"2\", \"Check for modified (via val(Number)) value of select element\" );\n\n\tjQuery( \"#select1\" ).append( \"<option value='4'>four</option>\" );\n\n\toldVal = jQuery( \"#select1\" ).val();\n\n\tjQuery( \"#select1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn 4;\n\t} );\n\n\tassert.equal( jQuery( \"#select1\" ).val(), \"4\", \"Should be possible to set the val() to a newly created option\" );\n} );\n\n// testing if a form.reset() breaks a subsequent call to a select element's .val() (in IE only)\nQUnit.test( \"val(select) after form.reset() (Bug #2551)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"<form id='kk' name='kk'><select id='kkk'><option value='cf'>cf</option><option value='gf'>gf</option></select></form>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( \"#kkk\" ).val( \"gf\" );\n\n\tdocument[ \"kk\" ].reset();\n\n\tassert.equal( jQuery( \"#kkk\" )[ 0 ].value, \"cf\", \"Check value of select after form reset.\" );\n\tassert.equal( jQuery( \"#kkk\" ).val(), \"cf\", \"Check value of select after form reset.\" );\n\n\t// re-verify the multi-select is not broken (after form.reset) by our fix for single-select\n\tassert.deepEqual( jQuery( \"#select3\" ).val(), [ \"1\", \"2\" ], \"Call val() on a multiple='multiple' select\" );\n\n\tjQuery( \"#kk\" ).remove();\n} );\n\nQUnit.test( \"select.val(space characters) (gh-2978)\", function( assert ) {\n\tassert.expect( 37 );\n\n\tvar $select = jQuery( \"<select/>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tspaces = {\n\t\t\t\"\\\\t\": {\n\t\t\t\thtml: \"&#09;\",\n\t\t\t\tval: \"\\t\"\n\t\t\t},\n\t\t\t\"\\\\n\": {\n\t\t\t\thtml: \"&#10;\",\n\t\t\t\tval: \"\\n\"\n\t\t\t},\n\t\t\t\"\\\\r\": {\n\t\t\t\thtml: \"&#13;\",\n\t\t\t\tval: \"\\r\"\n\t\t\t},\n\t\t\t\"\\\\f\": \"\\f\",\n\t\t\t\"space\": \" \",\n\t\t\t\"\\\\u00a0\": \"\\u00a0\",\n\t\t\t\"\\\\u1680\": \"\\u1680\"\n\t\t},\n\t\thtml = \"\";\n\tjQuery.each( spaces, function( key, obj ) {\n\t\tvar value = obj.html || obj;\n\t\thtml += \"<option value='attr\" + value + \"'></option>\";\n\t\thtml += \"<option value='at\" + value + \"tr'></option>\";\n\t\thtml += \"<option value='\" + value + \"attr'></option>\";\n\t} );\n\t$select.html( html );\n\n\tjQuery.each( spaces, function( key, obj ) {\n\t\tvar val = obj.val || obj;\n\t\t$select.val( \"attr\" + val );\n\t\tassert.equal( $select.val(), \"attr\" + val, \"Value ending with space character (\" + key + \") selected (attr)\" );\n\n\t\t$select.val( \"at\" + val + \"tr\" );\n\t\tassert.equal( $select.val(), \"at\" + val + \"tr\", \"Value with space character (\" + key + \") in the middle selected (attr)\" );\n\n\t\t$select.val( val + \"attr\" );\n\t\tassert.equal( $select.val(), val + \"attr\", \"Value starting with space character (\" + key + \") selected (attr)\" );\n\t} );\n\n\tjQuery.each( spaces, function( key, obj ) {\n\t\tvar value = obj.html || obj,\n\t\t\tval = obj.val || obj;\n\t\thtml = \"\";\n\t\thtml += \"<option>text\" + value + \"</option>\";\n\t\thtml += \"<option>te\" + value + \"xt</option>\";\n\t\thtml += \"<option>\" + value + \"text</option>\";\n\t\t$select.html( html );\n\n\n\t\tif ( /^\\\\u/.test( key ) ) {\n\t\t\t$select.val( val + \"text\" );\n\t\t\tassert.equal( $select.val(), val + \"text\", \"Value with non-HTML space character at beginning is not stripped (\" + key + \") selected (\" + key + \"text)\" );\n\t\t\t$select.val( \"te\" + val + \"xt\" );\n\t\t\tassert.equal( $select.val(), \"te\" + val + \"xt\", \"Value with non-space whitespace character (\" + key + \") in the middle selected (text)\" );\n\t\t\t$select.val( \"text\" + val );\n\t\t\tassert.equal( $select.val(), \"text\" + val, \"Value with non-HTML space character at end is not stripped (\" + key + \") selected (text\" + key + \")\" );\n\t\t} else {\n\t\t\t$select.val( \"text\" );\n\t\t\tassert.equal( $select.val(), \"text\", \"Value with HTML space character at beginning or end is stripped (\" + key + \") selected (text)\" );\n\t\t\t$select.val( \"te xt\" );\n\t\t\tassert.equal( $select.val(), \"te xt\", \"Value with space character (\" + key + \") in the middle selected (text)\" );\n\t\t}\n\t} );\n} );\n\nvar testAddClass = function( valueObj, assert ) {\n\tassert.expect( 9 );\n\n\tvar pass, j, i,\n\t\tdiv = jQuery( \"#qunit-fixture div\" );\n\tdiv.addClass( valueObj( \"test\" ) );\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( !~div.get( i ).className.indexOf( \"test\" ) ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Add Class\" );\n\n\t// using contents will get regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.addClass( valueObj( \"asdf\" ) );\n\tassert.ok( j.hasClass( \"asdf\" ), \"Check node,textnode,comment for addClass\" );\n\n\tdiv = jQuery( \"<div/>\" );\n\n\tdiv.addClass( valueObj( \"test\" ) );\n\tassert.equal( div.attr( \"class\" ), \"test\", \"Make sure there's no extra whitespace.\" );\n\n\tdiv.attr( \"class\", \" foo\" );\n\tdiv.addClass( valueObj( \"test\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo test\", \"Make sure there's no extra whitespace.\" );\n\n\tdiv.attr( \"class\", \"foo\" );\n\tdiv.addClass( valueObj( \"bar baz\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo bar baz\", \"Make sure there isn't too much trimming.\" );\n\n\tdiv.removeClass();\n\tdiv.addClass( valueObj( \"foo\" ) ).addClass( valueObj( \"foo\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo\", \"Do not add the same class twice in separate calls.\" );\n\n\tdiv.addClass( valueObj( \"fo\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo fo\", \"Adding a similar class does not get interrupted.\" );\n\tdiv.removeClass().addClass( \"wrap2\" );\n\tassert.ok( div.addClass( \"wrap\" ).hasClass( \"wrap\" ), \"Can add similarly named classes\" );\n\n\tdiv.removeClass();\n\tdiv.addClass( valueObj( \"bar bar\" ) );\n\tassert.equal( div.attr( \"class\" ), \"bar\", \"Do not add the same class twice in the same call.\" );\n};\n\nQUnit.test( \"addClass(String)\", function( assert ) {\n\ttestAddClass( bareObj, assert );\n} );\n\nQUnit.test( \"addClass(Function)\", function( assert ) {\n\ttestAddClass( functionReturningObj, assert );\n} );\n\nQUnit.test( \"addClass(Array)\", function( assert ) {\n\ttestAddClass( arrayFromString, assert );\n} );\n\nQUnit.test( \"addClass(Function) with incoming value\", function( assert ) {\n\tassert.expect( 52 );\n\tvar pass, i,\n\t\tdiv = jQuery( \"#qunit-fixture div\" ),\n\t\told = div.map( function() {\n\t\t\treturn jQuery( this ).attr( \"class\" ) || \"\";\n\t\t} );\n\n\tdiv.addClass( function( i, val ) {\n\t\tif ( this.id !== \"_firebugConsole\" ) {\n\t\t\tassert.equal( val, old[ i ], \"Make sure the incoming value is correct.\" );\n\t\t\treturn \"test\";\n\t\t}\n\t} );\n\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( div.get( i ).className.indexOf( \"test\" ) === -1 ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Add Class\" );\n} );\n\nvar testRemoveClass = function( valueObj, assert ) {\n\tassert.expect( 8 );\n\n\tvar $set = jQuery( \"#qunit-fixture div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t$set.addClass( \"test\" ).removeClass( valueObj( \"test\" ) );\n\n\tassert.ok( !$set.is( \".test\" ), \"Remove Class\" );\n\n\t$set.addClass( \"test\" ).addClass( \"foo\" ).addClass( \"bar\" );\n\t$set.removeClass( valueObj( \"test\" ) ).removeClass( valueObj( \"bar\" ) ).removeClass( valueObj( \"foo\" ) );\n\n\tassert.ok( !$set.is( \".test,.bar,.foo\" ), \"Remove multiple classes\" );\n\n\t// Make sure that a null value doesn't cause problems\n\t$set.eq( 0 ).addClass( \"expected\" ).removeClass( valueObj( null ) );\n\tassert.ok( $set.eq( 0 ).is( \".expected\" ), \"Null value passed to removeClass\" );\n\n\t$set.eq( 0 ).addClass( \"expected\" ).removeClass( valueObj( \"\" ) );\n\tassert.ok( $set.eq( 0 ).is( \".expected\" ), \"Empty string passed to removeClass\" );\n\n\t// using contents will get regular, text, and comment nodes\n\t$set = jQuery( \"#nonnodes\" ).contents();\n\t$set.removeClass( valueObj( \"asdf\" ) );\n\tassert.ok( !$set.hasClass( \"asdf\" ), \"Check node,textnode,comment for removeClass\" );\n\n\tjQuery( div ).removeClass( valueObj( \"foo\" ) );\n\tassert.strictEqual( jQuery( div ).attr( \"class\" ), undefined, \"removeClass doesn't create a class attribute\" );\n\n\tdiv.className = \" test foo \";\n\n\tjQuery( div ).removeClass( valueObj( \"foo\" ) );\n\tassert.equal( div.className, \"test\", \"Make sure remaining className is trimmed.\" );\n\n\tdiv.className = \" test \";\n\n\tjQuery( div ).removeClass( valueObj( \"test\" ) );\n\tassert.equal( div.className, \"\", \"Make sure there is nothing left after everything is removed.\" );\n};\n\nQUnit.test( \"removeClass(String) - simple\", function( assert ) {\n\ttestRemoveClass( bareObj, assert );\n} );\n\nQUnit.test( \"removeClass(Function) - simple\", function( assert ) {\n\ttestRemoveClass( functionReturningObj, assert );\n} );\n\nQUnit.test( \"removeClass(Array) - simple\", function( assert ) {\n\ttestRemoveClass( arrayFromString, assert );\n} );\n\nQUnit.test( \"removeClass(Function) with incoming value\", function( assert ) {\n\tassert.expect( 52 );\n\n\tvar $divs = jQuery( \"#qunit-fixture div\" ).addClass( \"test\" ), old = $divs.map( function() {\n\t\treturn jQuery( this ).attr( \"class\" );\n\t} );\n\n\t$divs.removeClass( function( i, val ) {\n\t\tif ( this.id !== \"_firebugConsole\" ) {\n\t\t\tassert.equal( val, old[ i ], \"Make sure the incoming value is correct.\" );\n\t\t\treturn \"test\";\n\t\t}\n\t} );\n\n\tassert.ok( !$divs.is( \".test\" ), \"Remove Class\" );\n} );\n\nQUnit.test( \"removeClass() removes duplicates\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( jQuery.parseHTML( \"<div class='x x x'></div>\" ) );\n\n\t$div.removeClass( \"x\" );\n\n\tassert.ok( !$div.hasClass( \"x\" ), \"Element with multiple same classes does not escape the wrath of removeClass()\" );\n} );\n\nQUnit.test( \"removeClass(undefined) is a no-op\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div class='base second'></div>\" );\n\t$div.removeClass( undefined );\n\n\tassert.ok( $div.hasClass( \"base\" ) && $div.hasClass( \"second\" ), \"Element still has classes after removeClass(undefined)\" );\n} );\n\nvar testToggleClass = function( valueObj, assert ) {\n\tassert.expect( 19 );\n\n\tvar e = jQuery( \"#firstp\" );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\te.toggleClass( valueObj( \"test\" ) );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\te.toggleClass( valueObj( \"test\" ) );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\t// class name with a boolean\n\te.toggleClass( valueObj( \"test\" ), false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\te.toggleClass( valueObj( \"test\" ), false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class still not present\" );\n\te.toggleClass( valueObj( \"test\" ), true );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\te.toggleClass( valueObj( \"test\" ), true );\n\tassert.ok( e.is( \".test\" ), \"Assert class still present\" );\n\te.toggleClass( valueObj( \"test\" ), false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\t// multiple class names\n\te.addClass( \"testA testB\" );\n\tassert.ok( e.is( \".testA.testB\" ), \"Assert 2 different classes present\" );\n\te.toggleClass( valueObj( \"testB testC\" ) );\n\tassert.ok( ( e.is( \".testA.testC\" ) && !e.is( \".testB\" ) ), \"Assert 1 class added, 1 class removed, and 1 class kept\" );\n\te.toggleClass( valueObj( \"testA testC\" ) );\n\tassert.ok( ( !e.is( \".testA\" ) && !e.is( \".testB\" ) && !e.is( \".testC\" ) ), \"Assert no class present\" );\n\n\t// toggleClass storage\n\te.toggleClass( true );\n\tassert.ok( e[ 0 ].className === \"\", \"Assert class is empty (data was empty)\" );\n\te.addClass( \"testD testE\" );\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present\" );\n\te.toggleClass();\n\tassert.ok( !e.is( \".testD.testE\" ), \"Assert class not present\" );\n\tassert.ok( jQuery._data( e[ 0 ], \"__className__\" ) === \"testD testE\", \"Assert data was stored\" );\n\te.toggleClass();\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present (restored from data)\" );\n\te.toggleClass( false );\n\tassert.ok( !e.is( \".testD.testE\" ), \"Assert class not present\" );\n\te.toggleClass( true );\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present (restored from data)\" );\n\te.toggleClass();\n\te.toggleClass( false );\n\te.toggleClass();\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present (restored from data)\" );\n\n\t// Cleanup\n\te.removeClass( \"testD\" );\n\tassert.expectJqData( this, e[ 0 ], \"__className__\" );\n};\n\nQUnit.test( \"toggleClass(String|boolean|undefined[, boolean])\", function( assert ) {\n\ttestToggleClass( bareObj, assert );\n} );\n\nQUnit.test( \"toggleClass(Function[, boolean])\", function( assert ) {\n\ttestToggleClass( functionReturningObj, assert );\n} );\n\nQUnit.test( \"toggleClass(Array[, boolean])\", function( assert ) {\n\ttestToggleClass( arrayFromString, assert );\n} );\n\nQUnit.test( \"toggleClass(Function[, boolean]) with incoming value\", function( assert ) {\n\tassert.expect( 14 );\n\n\tvar e = jQuery( \"#firstp\" ),\n\t\told = e.attr( \"class\" ) || \"\";\n\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\te.toggleClass( function( i, val ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\treturn \"test\";\n\t} );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\n\told = e.attr( \"class\" );\n\n\te.toggleClass( function( i, val ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\treturn \"test\";\n\t} );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\told = e.attr( \"class\" ) || \"\";\n\n\t// class name with a boolean\n\te.toggleClass( function( i, val, state ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\tassert.equal( state, false, \"Make sure that the state is passed in.\" );\n\t\treturn \"test\";\n\t}, false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\told = e.attr( \"class\" ) || \"\";\n\n\te.toggleClass( function( i, val, state ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\tassert.equal( state, true, \"Make sure that the state is passed in.\" );\n\t\treturn \"test\";\n\t}, true );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\n\told = e.attr( \"class\" );\n\n\te.toggleClass( function( i, val, state ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\tassert.equal( state, false, \"Make sure that the state is passed in.\" );\n\t\treturn \"test\";\n\t}, false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar jq = jQuery( \"<p>Hi</p>\" ), x = jq[ 0 ];\n\n\tjq.addClass( \"hi\" );\n\tassert.equal( x.className, \"hi\", \"Check single added class\" );\n\n\tjq.addClass( \"foo bar\" );\n\tassert.equal( x.className, \"hi foo bar\", \"Check more added classes\" );\n\n\tjq.removeClass();\n\tassert.equal( x.className, \"\", \"Remove all classes\" );\n\n\tjq.addClass( \"hi foo bar\" );\n\tjq.removeClass( \"foo\" );\n\tassert.equal( x.className, \"hi bar\", \"Check removal of one class\" );\n\n\tassert.ok( jq.hasClass( \"hi\" ), \"Check has1\" );\n\tassert.ok( jq.hasClass( \"bar\" ), \"Check has2\" );\n\n\tjq = jQuery( \"<p class='class1\\nclass2\\tcla.ss3\\n\\rclass4'></p>\" );\n\n\tassert.ok( jq.hasClass( \"class1\" ), \"Check hasClass with line feed\" );\n\tassert.ok( jq.is( \".class1\" ), \"Check is with line feed\" );\n\tassert.ok( jq.hasClass( \"class2\" ), \"Check hasClass with tab\" );\n\tassert.ok( jq.is( \".class2\" ), \"Check is with tab\" );\n\tassert.ok( jq.hasClass( \"cla.ss3\" ), \"Check hasClass with dot\" );\n\tassert.ok( jq.hasClass( \"class4\" ), \"Check hasClass with carriage return\" );\n\tassert.ok( jq.is( \".class4\" ), \"Check is with carriage return\" );\n\n\tjq.removeClass( \"class2\" );\n\tassert.ok( jq.hasClass( \"class2\" ) === false, \"Check the class has been properly removed\" );\n\tjq.removeClass( \"cla\" );\n\tassert.ok( jq.hasClass( \"cla.ss3\" ), \"Check the dotted class has not been removed\" );\n\tjq.removeClass( \"cla.ss3\" );\n\tassert.ok( jq.hasClass( \"cla.ss3\" ) === false, \"Check the dotted class has been removed\" );\n\tjq.removeClass( \"class4\" );\n\tassert.ok( jq.hasClass( \"class4\" ) === false, \"Check the class has been properly removed\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass on many elements\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar elem = jQuery( \"<p>p0</p><p>p1</p><p>p2</p>\" );\n\n\telem.addClass( \"hi\" );\n\tassert.equal( elem[ 0 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 1 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 2 ].className, \"hi\", \"Check single added class\" );\n\n\telem.addClass( \"foo bar\" );\n\tassert.equal( elem[ 0 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 1 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 2 ].className, \"hi foo bar\", \"Check more added classes\" );\n\n\telem.removeClass();\n\tassert.equal( elem[ 0 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 1 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 2 ].className, \"\", \"Remove all classes\" );\n\n\telem.addClass( \"hi foo bar\" );\n\telem.removeClass( \"foo\" );\n\tassert.equal( elem[ 0 ].className, \"hi bar\", \"Check removal of one class\" );\n\tassert.equal( elem[ 1 ].className, \"hi bar\", \"Check removal of one class\" );\n\tassert.equal( elem[ 2 ].className, \"hi bar\", \"Check removal of one class\" );\n\n\tassert.ok( elem.hasClass( \"hi\" ), \"Check has1\" );\n\tassert.ok( elem.hasClass( \"bar\" ), \"Check has2\" );\n\n\tassert.ok( jQuery( \"<p class='hi'>p0</p><p>p1</p><p>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class in the first element\" );\n\tassert.ok( jQuery( \"<p>p0</p><p class='hi'>p1</p><p>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class in the second element\" );\n\tassert.ok( jQuery( \"<p>p0</p><p>p1</p><p class='hi'>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class in the last element\" );\n\n\tassert.ok( jQuery( \"<p class='hi'>p0</p><p class='hi'>p1</p><p class='hi'>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class when present in all elements\" );\n\n\tassert.ok( !jQuery( \"<p class='hi0'>p0</p><p class='hi1'>p1</p><p class='hi2'>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did not find a class when not present\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass on many elements - Array\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar elem = jQuery( \"<p>p0</p><p>p1</p><p>p2</p>\" );\n\n\telem.addClass( [ \"hi\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 1 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 2 ].className, \"hi\", \"Check single added class\" );\n\n\telem.addClass( [ \"foo\",  \"bar\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 1 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 2 ].className, \"hi foo bar\", \"Check more added classes\" );\n\n\telem.removeClass();\n\tassert.equal( elem[ 0 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 1 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 2 ].className, \"\", \"Remove all classes\" );\n\n\telem.addClass( [ \"hi\", \"foo\", \"bar\", \"baz\" ] );\n\telem.removeClass( [ \"foo\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi bar baz\", \"Check removal of one class\" );\n\tassert.equal( elem[ 1 ].className, \"hi bar baz\", \"Check removal of one class\" );\n\tassert.equal( elem[ 2 ].className, \"hi bar baz\", \"Check removal of one class\" );\n\n\telem.removeClass( [ \"bar baz\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi\", \"Check removal of two classes\" );\n\tassert.equal( elem[ 1 ].className, \"hi\", \"Check removal of two classes\" );\n\tassert.equal( elem[ 2 ].className, \"hi\", \"Check removal of two classes\" );\n\n\tassert.ok( elem.hasClass( \"hi\" ), \"Check has1\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass on elements with classes with non-HTML whitespace (gh-3072, gh-3003)\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar $elem = jQuery( \"<div class='&#xA0;test'></div>\" );\n\n\tfunction testMatches() {\n\t\tassert.ok( $elem.is( \".\\\\A0 test\" ), \"Element matches with collapsed space\" );\n\t\tassert.ok( $elem.is( \".\\\\A0test\" ), \"Element matches with non-breaking space\" );\n\t\tassert.ok( $elem.hasClass( \"\\xA0test\" ), \"Element has class with non-breaking space\" );\n\t}\n\n\ttestMatches();\n\t$elem.addClass( \"foo\" );\n\ttestMatches();\n\t$elem.removeClass( \"foo\" );\n\ttestMatches();\n} );\n\nQUnit.test( \"contents().hasClass() returns correct values\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"<div><span class='foo'></span><!-- comment -->text</div>\" ),\n\t$contents = $div.contents();\n\n\tassert.ok( $contents.hasClass( \"foo\" ), \"Found 'foo' in $contents\" );\n\tassert.ok( !$contents.hasClass( \"undefined\" ), \"Did not find 'undefined' in $contents (correctly)\" );\n} );\n\nQUnit.test( \"hasClass correctly interprets non-space separators (#13835)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar\n\t\tmap = {\n\t\t\ttab: \"&#9;\",\n\t\t\t\"line-feed\": \"&#10;\",\n\t\t\t\"form-feed\": \"&#12;\",\n\t\t\t\"carriage-return\": \"&#13;\"\n\t\t},\n\t\tclasses = jQuery.map( map, function( separator, label ) {\n\t\t\treturn \" \" + separator + label + separator + \" \";\n\t\t} ),\n\t\t$div = jQuery( \"<div class='\" + classes + \"'></div>\" );\n\n\tjQuery.each( map, function( label ) {\n\t\tassert.ok( $div.hasClass( label ), label.replace( \"-\", \" \" ) );\n\t} );\n} );\n\nQUnit.test( \"coords returns correct values in IE6/IE7, see #10828\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar area,\n\t\tmap = jQuery( \"<map />\" );\n\n\tarea = map.html( \"<area shape='rect' coords='0,0,0,0' href='#' alt='a' />\" ).find( \"area\" );\n\tassert.equal( area.attr( \"coords\" ), \"0,0,0,0\", \"did not retrieve coords correctly\" );\n} );\n\nQUnit.test( \"should not throw at $(option).val() (#14686)\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery( \"<option/>\" ).val();\n\t\tassert.ok( true );\n\t} catch ( _ ) {\n\t\tassert.ok( false );\n\t}\n} );\n\nQUnit.test( \"option value not trimmed when setting via parent select\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"<select><option> 2</option></select>\" ).val( \"2\" ).val(), \"2\" );\n} );\n\nQUnit.test( \"Insignificant white space returned for $(option).val() (#14858, gh-2978)\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar val = jQuery( \"<option></option>\" ).val();\n\tassert.equal( val.length, 0, \"Empty option should have no value\" );\n\n\tjQuery.each( [ \" \", \"\\n\", \"\\t\", \"\\f\", \"\\r\" ], function( i, character ) {\n\t\tvar val = jQuery( \"<option>\" + character + \"</option>\" ).val();\n\t\tassert.equal( val.length, 0, \"insignificant white-space returned for value\" );\n\n\t\tval = jQuery( \"<option>\" + character + \"test\" + character + \"</option>\" ).val();\n\t\tassert.equal( val.length, 4, \"insignificant white-space returned for value\" );\n\n\t\tval = jQuery( \"<option>te\" + character + \"st</option>\" ).val();\n\t\tassert.equal( val, \"te st\", \"Whitespace is collapsed in values\" );\n\t} );\n} );\n\nQUnit.test( \"SVG class manipulation (gh-2199)\", function( assert ) {\n\tassert.expect( 12 );\n\n\tfunction createSVGElement( nodeName ) {\n\t\treturn document.createElementNS( \"http://www.w3.org/2000/svg\", nodeName );\n\t}\n\n\tjQuery.each( [\n\t\t\"svg\",\n\t\t\"rect\",\n\t\t\"g\"\n\t], function() {\n\t\tvar elem = jQuery( createSVGElement( this ) );\n\n\t\telem.addClass( \"awesome\" );\n\t\tassert.ok( elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") has added class\" );\n\n\t\telem.removeClass( \"awesome\" );\n\t\tassert.ok( !elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") removes the class\" );\n\n\t\telem.toggleClass( \"awesome\" );\n\t\tassert.ok( elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") toggles the class on\" );\n\n\t\telem.toggleClass( \"awesome\" );\n\t\tassert.ok( !elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") toggles the class off\" );\n\t} );\n} );\n\nQUnit.test( \"non-lowercase boolean attribute getters should not crash\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elem = jQuery( \"<input checked required autofocus type='checkbox'>\" );\n\n\tjQuery.each( {\n\t\tchecked: \"Checked\",\n\t\trequired: \"requiRed\",\n\t\tautofocus: \"AUTOFOCUS\"\n\t}, function( lowercased, original ) {\n\t\ttry {\n\t\t\tassert.strictEqual( elem.attr( original ), lowercased,\n\t\t\t\t\"The '\" + this + \"' attribute getter should return the lowercased name\" );\n\t\t} catch ( e ) {\n\t\t\tassert.ok( false, \"The '\" + this + \"' attribute getter threw\" );\n\t\t}\n\t} );\n} );\n", "QUnit.module( \"basic\", { afterEach: moduleTeardown } );\n\nif ( jQuery.ajax ) {\nQUnit.test( \"ajax\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar done = assert.async( 3 );\n\n\tjQuery.ajax( {\n\t\ttype: \"GET\",\n\t\turl: url( \"mock.php?action=name&name=foo\" ),\n\t\tsuccess: function( msg ) {\n\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\tdone();\n\t\t}\n\t} );\n\n\tjQuery.ajax( {\n\t\ttype: \"POST\",\n\t\turl: url( \"mock.php?action=name\" ),\n\t\tdata: \"name=peter\",\n\t\tsuccess: function( msg ) {\n\t\t\tassert.strictEqual( msg, \"pan\", \"Check for POST\" );\n\t\t\tdone();\n\t\t}\n\t} );\n\n\tjQuery( \"#first\" ).load( url( \"name.html\" ), function() {\n\t\tassert.ok( /^ERROR/.test( jQuery( \"#first\" ).text() ),\n\t\t\t\"Check if content was injected into the DOM\" );\n\t\tdone();\n\t} );\n} );\n}\n\nQUnit.test( \"attributes\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar a = jQuery( \"<a/>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tinput = jQuery( \"<input/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( a.attr( \"foo\", \"bar\" ).attr( \"foo\" ), \"bar\", \".attr getter/setter\" );\n\tassert.strictEqual( a.removeAttr( \"foo\" ).attr( \"foo\" ), undefined, \".removeAttr\" );\n\tassert.strictEqual( a.prop( \"href\", \"#5\" ).prop( \"href\" ),\n\t\tlocation.href.replace( /\\#.*$/, \"\" ) + \"#5\",\n\t\t\".prop getter/setter\" );\n\n\ta.addClass( \"abc def ghj\" ).removeClass( \"def ghj\" );\n\tassert.strictEqual( a.hasClass( \"abc\" ), true, \".(add|remove|has)Class, class present\" );\n\tassert.strictEqual( a.hasClass( \"def\" ), false, \".(add|remove|has)Class, class missing\" );\n\n\tassert.strictEqual( input.val( \"xyz\" ).val(), \"xyz\", \".val getter/setter\" );\n} );\n\nif ( jQuery.css ) {\nQUnit.test( \"css\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( div.css( \"width\", \"50px\" ).css( \"width\" ), \"50px\", \".css getter/setter\" );\n} );\n}\n\nif ( jQuery.fn.show && jQuery.fn.hide ) {\nQUnit.test( \"show/hide\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tdiv.hide();\n\tassert.strictEqual( div.css( \"display\" ), \"none\", \"div hidden\" );\n\tdiv.show();\n\tassert.strictEqual( div.css( \"display\" ), \"block\", \"div shown\" );\n} );\n}\n\nQUnit.test( \"core\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar elem = jQuery( \"<div></div><span></span>\" );\n\n\tassert.strictEqual( elem.length, 2, \"Correct number of elements\" );\n\n\tassert.ok( jQuery.isPlainObject( { \"a\": 2 } ), \"jQuery.isPlainObject(object)\" );\n\tassert.ok( !jQuery.isPlainObject( \"foo\" ), \"jQuery.isPlainObject(String)\" );\n\n\tassert.ok( jQuery.isXMLDoc( jQuery.parseXML(\n\t\t\"<?xml version='1.0' encoding='UTF-8'?><foo bar='baz'></foo>\"\n\t) ), \"jQuery.isXMLDoc\" );\n\n\tassert.strictEqual( jQuery.inArray( 3, [ \"a\", 6, false, 3, {} ] ), 3, \"jQuery.inArray - true\" );\n\tassert.strictEqual(\n\t\tjQuery.inArray( 3, [ \"a\", 6, false, \"3\", {} ] ),\n\t\t-1,\n\t\t\"jQuery.inArray - false\"\n\t);\n\n\tassert.strictEqual( elem.get( 1 ), elem[ 1 ], \".get\" );\n\tassert.strictEqual( elem.first()[ 0 ], elem[ 0 ], \".first\" );\n\tassert.strictEqual( elem.last()[ 0 ], elem[ 1 ], \".last\" );\n\n\tassert.deepEqual( jQuery.map( [ \"a\", \"b\", \"c\" ], function( v, k ) {\n\t\treturn k + v;\n\t} ), [ \"0a\", \"1b\", \"2c\" ], \"jQuery.map\" );\n\n\tassert.deepEqual( jQuery.merge( [ 1, 2 ], [ \"a\", \"b\" ] ), [ 1, 2, \"a\", \"b\" ], \"jQuery.merge\" );\n\n\tassert.deepEqual( jQuery.grep( [ 1, 2, 3 ], function( value ) {\n\t\treturn value % 2 !== 0;\n\t} ), [ 1, 3 ], \"jQuery.grep\" );\n\n\tassert.deepEqual( jQuery.extend( { a: 2 }, { b: 3 } ), { a: 2, b: 3 }, \"jQuery.extend\" );\n\n\tjQuery.each( [ 0, 2 ], function( k, v ) {\n\t\tassert.strictEqual( k * 2, v, \"jQuery.each\" );\n\t} );\n\n\tassert.deepEqual( jQuery.makeArray( { 0: \"a\", 1: \"b\", 2: \"c\", length: 3 } ),\n\t\t[ \"a\", \"b\", \"c\" ], \"jQuery.makeArray\" );\n\n\tassert.strictEqual( jQuery.parseHTML( \"<div></div><span></span>\" ).length,\n\t\t2, \"jQuery.parseHTML\" );\n} );\n\nQUnit.test( \"data\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar elem = jQuery( \"<div data-c='d'/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.ok( !jQuery.hasData( elem[ 0 ] ), \"jQuery.hasData - false\" );\n\tassert.strictEqual( elem.data( \"a\", \"b\" ).data( \"a\" ), \"b\", \".data getter/setter\" );\n\tassert.strictEqual( elem.data( \"c\" ), \"d\", \".data from data-* attributes\" );\n\tassert.ok( jQuery.hasData( elem[ 0 ] ), \"jQuery.hasData - true\" );\n} );\n\nQUnit.test( \"dimensions\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elem = jQuery(\n\t\t\"<div style='margin: 10px; padding: 7px; border: 2px solid black;' /> \"\n\t).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem.width( 50 ).width(), 50, \".width getter/setter\" );\n\tassert.strictEqual( elem.innerWidth(), 64, \".innerWidth getter\" );\n\tassert.strictEqual( elem.outerWidth(), 68, \".outerWidth getter\" );\n} );\n\nQUnit.test( \"event\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\telem\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( false, \"click should not fire\" );\n\t\t} )\n\t\t.off( \"click\" )\n\t\t.trigger( \"click\" )\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( true, \"click should fire\" );\n\t\t} )\n\t\t.trigger( \"click\" );\n} );\n\nQUnit.test( \"manipulation\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar child,\n\t\telem1 = jQuery( \"<div><span></span></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\telem2 = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem1.text( \"foo\" ).text(), \"foo\", \".html getter/setter\" );\n\n\tassert.strictEqual(\n\t\telem1.html( \"<span/>\" ).html(),\n\t\t\"<span></span>\",\n\t\t\".html getter/setter\"\n\t);\n\n\tassert.strictEqual( elem1.append( elem2 )[ 0 ].childNodes[ 1 ], elem2[ 0 ], \".append\" );\n\tassert.strictEqual( elem1.prepend( elem2 )[ 0 ].childNodes[ 0 ], elem2[ 0 ], \".prepend\" );\n\n\tchild = elem1.find( \"span\" );\n\tchild.after( \"<a/>\" );\n\tchild.before( \"<b/>\" );\n\n\tassert.strictEqual(\n\t\telem1.html(),\n\t\t\"<div></div><b></b><span></span><a></a>\",\n\t\t\".after/.before\"\n\t);\n} );\n\n// Support: jsdom 13.2+\n// jsdom returns 0 for offset-related properties\nQUnit[ /jsdom\\//.test( navigator.userAgent ) ? \"skip\" : \"test\" ]( \"offset\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar parent = jQuery( \"<div style='position:fixed;top:20px;'/>\" ).appendTo( \"#qunit-fixture\" ),\n\t\telem = jQuery( \"<div style='position:absolute;top:5px;'/>\" ).appendTo( parent );\n\n\tassert.strictEqual( elem.offset().top, 25, \".offset getter\" );\n\tassert.strictEqual( elem.position().top, 5, \".position getter\" );\n\tassert.strictEqual( elem.offsetParent()[ 0 ], parent[ 0 ], \".offsetParent\" );\n} );\n\nQUnit.test( \"selector\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar elem = jQuery( \"<div><span class='a'></span><span class='b'><a></a></span></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem.find( \".a a\" ).length, 0, \".find - no result\" );\n\tassert.strictEqual( elem.find( \"span.b a\" )[ 0 ].nodeName, \"A\", \".find - one result\" );\n} );\n\nQUnit.test( \"serialize\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar params = { \"someName\": [ 1, 2, 3 ], \"regularThing\": \"blah\" };\n\tassert.strictEqual( jQuery.param( params ),\n\t\t\"someName%5B%5D=1&someName%5B%5D=2&someName%5B%5D=3&regularThing=blah\",\n\t\t\"jQuery.param\" );\n\n\tassert.strictEqual( jQuery( \"#form\" ).serialize(),\n\t\t\"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search\" +\n\t\t\"&select1=&select2=3&select3=1&select3=2&select5=3\",\n\t\t\"form serialization as query string\" );\n} );\n\nQUnit.test( \"traversing\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar elem = jQuery( \"<div><a><b><em></em></b></a><i></i><span></span>foo</div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem.find( \"em\" ).parent()[ 0 ].nodeName, \"B\", \".parent\" );\n\tassert.strictEqual( elem.find( \"em\" ).parents()[ 1 ].nodeName, \"A\", \".parents\" );\n\tassert.strictEqual( elem.find( \"em\" ).parentsUntil( \"div\" ).length, 2, \".parentsUntil\" );\n\tassert.strictEqual( elem.find( \"i\" ).next()[ 0 ].nodeName, \"SPAN\", \".next\" );\n\tassert.strictEqual( elem.find( \"i\" ).prev()[ 0 ].nodeName, \"A\", \".prev\" );\n\tassert.strictEqual( elem.find( \"a\" ).nextAll()[ 1 ].nodeName, \"SPAN\", \".nextAll\" );\n\tassert.strictEqual( elem.find( \"span\" ).prevAll()[ 1 ].nodeName, \"A\", \".prevAll\" );\n\tassert.strictEqual( elem.find( \"a\" ).nextUntil( \"span\" ).length, 1, \".nextUntil\" );\n\tassert.strictEqual( elem.find( \"span\" ).prevUntil( \"a\" ).length, 1, \".prevUntil\" );\n\tassert.strictEqual( elem.find( \"i\" ).siblings().length, 2, \".siblings\" );\n\tassert.strictEqual( elem.children()[ 2 ].nodeName, \"SPAN\", \".children\" );\n\tassert.strictEqual( elem.contents()[ 3 ].nodeType, 3, \".contents\" );\n} );\n\nQUnit.test( \"wrap\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elem = jQuery( \"<div><a><b></b></a><a></a></div>\" );\n\n\telem.find( \"b\" ).wrap( \"<span>\" );\n\n\tassert.strictEqual(\n\t\telem.html(),\n\t\t\"<a><span><b></b></span></a><a></a>\",\n\t\t\".wrap\"\n\t);\n\n\telem.find( \"span\" ).wrapInner( \"<em>\" );\n\n\tassert.strictEqual(\n\t\telem.html(),\n\t\t\"<a><span><em><b></b></em></span></a><a></a>\",\n\t\t\".wrapInner\"\n\t);\n\n\telem.find( \"a\" ).wrapAll( \"<i>\" );\n\n\tassert.strictEqual(\n\t\telem.html(),\n\t\t\"<i><a><span><em><b></b></em></span></a><a></a></i>\",\n\t\t\".wrapAll\"\n\t);\n\n} );\n", "QUnit.module( \"core\", {\n\tbeforeEach: function() {\n\t\tthis.sandbox = sinon.sandbox.create();\n\t},\n\tafterEach: function() {\n\t\tthis.sandbox.restore();\n\t\treturn moduleTeardown.apply( this, arguments );\n\t}\n} );\n\nQUnit.test( \"Basic requirements\", function( assert ) {\n\tassert.expect( 7 );\n\tassert.ok( Array.prototype.push, \"Array.push()\" );\n\tassert.ok( Function.prototype.apply, \"Function.apply()\" );\n\tassert.ok( document.getElementById, \"getElementById\" );\n\tassert.ok( document.getElementsByTagName, \"getElementsByTagName\" );\n\tassert.ok( RegExp, \"RegExp\" );\n\tassert.ok( jQuery, \"jQuery\" );\n\tassert.ok( $, \"$\" );\n} );\n\nQUnit.test( \"jQuery()\", function( assert ) {\n\n\tvar elem, i,\n\t\tobj = jQuery( \"div\" ),\n\t\tcode = jQuery( \"<code/>\" ),\n\t\timg = jQuery( \"<img/>\" ),\n\t\tdiv = jQuery( \"<div/><hr/><code/><b/>\" ),\n\t\texec = false,\n\t\texpected = 23,\n\t\tattrObj = {\n\t\t\t\"text\": \"test\",\n\t\t\t\"class\": \"test2\",\n\t\t\t\"id\": \"test3\"\n\t\t};\n\n\t// The $(html, props) signature can stealth-call any $.fn method, check for a\n\t// few here but beware of modular builds where these methods may be excluded.\n\tif ( jQuery.fn.click ) {\n\t\texpected++;\n\t\tattrObj[ \"click\" ] = function() { assert.ok( exec, \"Click executed.\" ); };\n\t}\n\tif ( jQuery.fn.width ) {\n\t\texpected++;\n\t\tattrObj[ \"width\" ] = 10;\n\t}\n\tif ( jQuery.fn.offset ) {\n\t\texpected++;\n\t\tattrObj[ \"offset\" ] = { \"top\": 1, \"left\": 1 };\n\t}\n\tif ( jQuery.fn.css ) {\n\t\texpected += 2;\n\t\tattrObj[ \"css\" ] = { \"paddingLeft\": 1, \"paddingRight\": 1 };\n\t}\n\tif ( jQuery.fn.attr ) {\n\t\texpected++;\n\t\tattrObj.attr = { \"desired\": \"very\" };\n\t}\n\n\tassert.expect( expected );\n\n\t// Basic constructor's behavior\n\tassert.equal( jQuery().length, 0, \"jQuery() === jQuery([])\" );\n\tassert.equal( jQuery( undefined ).length, 0, \"jQuery(undefined) === jQuery([])\" );\n\tassert.equal( jQuery( null ).length, 0, \"jQuery(null) === jQuery([])\" );\n\tassert.equal( jQuery( \"\" ).length, 0, \"jQuery('') === jQuery([])\" );\n\tassert.deepEqual( jQuery( obj ).get(), obj.get(), \"jQuery(jQueryObj) == jQueryObj\" );\n\n\t// Invalid #id goes to Sizzle which will throw an error (gh-1682)\n\ttry {\n\t\tjQuery( \"#\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Threw an error on #id with no id\" );\n\t}\n\n\t// can actually yield more than one, when iframes are included, the window is an array as well\n\tassert.equal( jQuery( window ).length, 1, \"Correct number of elements generated for jQuery(window)\" );\n\n/*\n\t// disabled since this test was doing nothing. i tried to fix it but i'm not sure\n\t// what the expected behavior should even be. FF returns \"\\n\" for the text node\n\t// make sure this is handled\n\tvar crlfContainer = jQuery('<p>\\r\\n</p>');\n\tvar x = crlfContainer.contents().get(0).nodeValue;\n\tassert.equal( x, what???, \"Check for \\\\r and \\\\n in jQuery()\" );\n*/\n\n\t/* // Disabled until we add this functionality in\n\tvar pass = true;\n\ttry {\n\t\tjQuery(\"<div>Testing</div>\").appendTo(document.getElementById(\"iframe\").contentDocument.body);\n\t} catch(e){\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968\" );*/\n\n\tassert.equal( code.length, 1, \"Correct number of elements generated for code\" );\n\tassert.equal( code.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( img.length, 1, \"Correct number of elements generated for img\" );\n\tassert.equal( img.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( div.length, 4, \"Correct number of elements generated for div hr code b\" );\n\tassert.equal( div.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( jQuery( [ 1, 2, 3 ] ).get( 1 ), 2, \"Test passing an array to the factory\" );\n\n\tassert.equal( jQuery( document.body ).get( 0 ), jQuery( \"body\" ).get( 0 ), \"Test passing an html node to the factory\" );\n\n\telem = jQuery( \"  <em>hello</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading space\" );\n\n\telem = jQuery( \"\\n\\n<em>world</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading newlines\" );\n\n\telem = jQuery( \"<div/>\", attrObj );\n\n\tif ( jQuery.fn.width ) {\n\t\tassert.equal( elem[ 0 ].style.width, \"10px\", \"jQuery() quick setter width\" );\n\t}\n\n\tif ( jQuery.fn.offset ) {\n\t\tassert.equal( elem[ 0 ].style.top, \"1px\", \"jQuery() quick setter offset\" );\n\t}\n\n\tif ( jQuery.fn.css ) {\n\t\tassert.equal( elem[ 0 ].style.paddingLeft, \"1px\", \"jQuery quick setter css\" );\n\t\tassert.equal( elem[ 0 ].style.paddingRight, \"1px\", \"jQuery quick setter css\" );\n\t}\n\n\tif ( jQuery.fn.attr ) {\n\t\tassert.equal( elem[ 0 ].getAttribute( \"desired\" ), \"very\", \"jQuery quick setter attr\" );\n\t}\n\n\tassert.equal( elem[ 0 ].childNodes.length, 1, \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].firstChild.nodeValue, \"test\", \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].className, \"test2\", \"jQuery() quick setter class\" );\n\tassert.equal( elem[ 0 ].id, \"test3\", \"jQuery() quick setter id\" );\n\n\texec = true;\n\telem.trigger( \"click\" );\n\n\t// manually clean up detached elements\n\telem.remove();\n\n\tfor ( i = 0; i < 3; ++i ) {\n\t\telem = jQuery( \"<input type='text' value='TEST' />\" );\n\t}\n\tassert.equal( elem[ 0 ].defaultValue, \"TEST\", \"Ensure cached nodes are cloned properly (Bug #6655)\" );\n\n\telem = jQuery( \"<input type='hidden'>\", {} );\n\tassert.strictEqual( elem[ 0 ].ownerDocument, document,\n\t\t\"Empty attributes object is not interpreted as a document (trac-8950)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"jQuery(selector, context)\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.deepEqual( jQuery( \"div p\", \"#qunit-fixture\" ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with string as context\" );\n\tassert.deepEqual( jQuery( \"div p\", q( \"qunit-fixture\" )[ 0 ] ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with element as context\" );\n\tassert.deepEqual( jQuery( \"div p\", jQuery( \"#qunit-fixture\" ) ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with jQuery object as context\" );\n} );\n\nQUnit.test( \"globalEval\", function( assert ) {\n\tassert.expect( 3 );\n\tGlobals.register( \"globalEvalTest\" );\n\n\tjQuery.globalEval( \"globalEvalTest = 1;\" );\n\tassert.equal( window.globalEvalTest, 1, \"Test variable assignments are global\" );\n\n\tjQuery.globalEval( \"var globalEvalTest = 2;\" );\n\tassert.equal( window.globalEvalTest, 2, \"Test variable declarations are global\" );\n\n\tjQuery.globalEval( \"this.globalEvalTest = 3;\" );\n\tassert.equal( window.globalEvalTest, 3, \"Test context (this) is the window object\" );\n} );\n\nQUnit.test( \"globalEval with 'use strict'\", function( assert ) {\n\tassert.expect( 1 );\n\tGlobals.register( \"strictEvalTest\" );\n\n\tjQuery.globalEval( \"'use strict'; var strictEvalTest = 1;\" );\n\tassert.equal( window.strictEvalTest, 1, \"Test variable declarations are global (strict mode)\" );\n} );\n\nQUnit.test( \"globalEval execution after script injection (#7862)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar now,\n\t\tscript = document.createElement( \"script\" );\n\n\tscript.src = baseURL + \"mock.php?action=wait&wait=2&script=1\";\n\n\tnow = Date.now();\n\tdocument.body.appendChild( script );\n\n\tjQuery.globalEval( \"var strictEvalTest = \" + Date.now() + \";\" );\n\tassert.ok( window.strictEvalTest - now < 500, \"Code executed synchronously\" );\n} );\n\ntestIframe(\n\t\"globalEval with custom document context\",\n\t\"core/globaleval-context.html\",\n\tfunction( assert, framejQuery, frameWindow, frameDocument ) {\n\t\tassert.expect( 2 );\n\n\t\tjQuery.globalEval( \"window.scriptTest = true;\", {}, frameDocument );\n\t\tassert.ok( !window.scriptTest, \"script executed in iframe context\" );\n\t\tassert.ok( frameWindow.scriptTest, \"script executed in iframe context\" );\n\t}\n);\n\n\nQUnit.test( \"noConflict\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $$ = jQuery;\n\n\tassert.strictEqual( jQuery, jQuery.noConflict(), \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], $$, \"Make sure jQuery wasn't touched.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\n\tjQuery = $ = $$;\n\n\tassert.strictEqual( jQuery.noConflict( true ), $$, \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], originaljQuery, \"Make sure jQuery was reverted.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\tassert.ok( $$().pushStack( [] ), \"Make sure that jQuery still works.\" );\n\n\twindow[ \"jQuery\" ] = jQuery = $$;\n} );\n\nQUnit.test( \"isPlainObject\", function( assert ) {\n\tvar done = assert.async();\n\n\tassert.expect( 23 );\n\n\tvar pass, iframe, doc, parentObj, childObj, deep,\n\t\tfn = function() {};\n\n\t// The use case that we want to match\n\tassert.ok( jQuery.isPlainObject( {} ), \"{}\" );\n\tassert.ok( jQuery.isPlainObject( new window.Object() ), \"new Object\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: fn } ),\n\t\t\"plain object with constructor property\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: \"foo\" } ),\n\t\t\"plain object with primitive constructor property\" );\n\n\tparentObj = {};\n\tchildObj = Object.create( parentObj );\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({})\" );\n\tparentObj.foo = \"bar\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({...})\" );\n\tchildObj.bar = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"extend(Object.create({...}), ...)\" );\n\n\t// Not objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( \"\" ), \"string\" );\n\tassert.ok( !jQuery.isPlainObject( 0 ) && !jQuery.isPlainObject( 1 ), \"number\" );\n\tassert.ok( !jQuery.isPlainObject( true ) && !jQuery.isPlainObject( false ), \"boolean\" );\n\tassert.ok( !jQuery.isPlainObject( null ), \"null\" );\n\tassert.ok( !jQuery.isPlainObject( undefined ), \"undefined\" );\n\n\t// Arrays shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( [] ), \"array\" );\n\n\t// Instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new Date() ), \"new Date\" );\n\n\t// Functions shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( fn ), \"fn\" );\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn (no methods)\" );\n\n\t// Makes the function a little more realistic\n\t// (and harder to detect, incidentally)\n\tfn.prototype[ \"someMethod\" ] = function() {};\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn\" );\n\n\t// Instantiated objects with primitive constructors shouldn't be matched\n\tfn.prototype.constructor = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn with primitive constructor\" );\n\n\t// Deep object\n\tdeep = { \"foo\": { \"baz\": true }, \"foo2\": document };\n\tassert.ok( jQuery.isPlainObject( deep ), \"Object with objects is still plain\" );\n\n\t// DOM Element\n\tassert.ok( !jQuery.isPlainObject( document.createElement( \"div\" ) ), \"DOM Element\" );\n\n\t// Window\n\tassert.ok( !jQuery.isPlainObject( window ), \"window\" );\n\n\tpass = false;\n\ttry {\n\t\tjQuery.isPlainObject( window.location );\n\t\tpass = true;\n\t} catch ( e ) {}\n\tassert.ok( pass, \"Does not throw exceptions on host objects\" );\n\n\t// Objects from other windows should be matched\n\tGlobals.register( \"iframeDone\" );\n\twindow.iframeDone = function( otherObject, detail ) {\n\t\twindow.iframeDone = undefined;\n\t\tiframe.parentNode.removeChild( iframe );\n\t\tassert.ok( jQuery.isPlainObject( new otherObject() ), \"new otherObject\" + ( detail ? \" - \" + detail : \"\" ) );\n\t\tdone();\n\t};\n\n\ttry {\n\t\tiframe = jQuery( \"#qunit-fixture\" )[ 0 ].appendChild( document.createElement( \"iframe\" ) );\n\t\tdoc = iframe.contentDocument || iframe.contentWindow.document;\n\t\tdoc.open();\n\t\tdoc.write( \"<body onload='window.parent.iframeDone(Object);'>\" );\n\t\tdoc.close();\n\t} catch ( e ) {\n\t\twindow.iframeDone( Object, \"iframes not supported\" );\n\t}\n} );\n\nQUnit[ typeof Symbol === \"function\" ? \"test\" : \"skip\" ]( \"isPlainObject(Symbol)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.isPlainObject( Symbol() ), false, \"Symbol\" );\n\tassert.equal( jQuery.isPlainObject( Object( Symbol() ) ), false, \"Symbol inside an object\" );\n} );\n\nQUnit.test( \"isPlainObject(localStorage)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.isPlainObject( localStorage ), false );\n} );\n\nQUnit[ \"assign\" in Object ? \"test\" : \"skip\" ]( \"isPlainObject(Object.assign(...))\",\n\tfunction( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar parentObj = { foo: \"bar\" };\n\t\tvar childObj = Object.assign( Object.create( parentObj ), { bar: \"foo\" } );\n\n\t\tassert.ok( !jQuery.isPlainObject( childObj ), \"isPlainObject(Object.assign(...))\" );\n\t}\n);\n\nQUnit.test( \"isXMLDoc - HTML\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.ok( !jQuery.isXMLDoc( document ), \"HTML document\" );\n\tassert.ok( !jQuery.isXMLDoc( document.documentElement ), \"HTML documentElement\" );\n\tassert.ok( !jQuery.isXMLDoc( document.body ), \"HTML Body Element\" );\n\n\tvar body,\n\t\tiframe = document.createElement( \"iframe\" );\n\tdocument.body.appendChild( iframe );\n\n\ttry {\n\t\tbody = jQuery( iframe ).contents()[ 0 ];\n\n\t\ttry {\n\t\t\tassert.ok( !jQuery.isXMLDoc( body ), \"Iframe body element\" );\n\t\t} catch ( e ) {\n\t\t\tassert.ok( false, \"Iframe body element exception\" );\n\t\t}\n\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Iframe body element - iframe not working correctly\" );\n\t}\n\n\tdocument.body.removeChild( iframe );\n} );\n\nQUnit.test( \"isXMLDoc - embedded SVG\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar htmlTree = jQuery( \"<div>\" +\n\t\t\"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='1' width='1'>\" +\n\t\t\"<desc></desc>\" +\n\t\t\"</svg>\" +\n\t\t\"</div>\"\n\t)[ 0 ];\n\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree ), false, \"disconnected div element\" );\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild ), true,\n\t\t\"disconnected HTML-embedded SVG root element\" );\n\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild.firstChild ), true,\n\t\t\"disconnected HTML-embedded SVG child element\" );\n\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( htmlTree );\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree ), false, \"connected div element\" );\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild ), true,\n\t\t\"connected HTML-embedded SVG root element\" );\n\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild.firstChild ), true,\n\t\t\"disconnected HTML-embedded SVG child element\" );\n} );\n\nQUnit.test( \"isXMLDoc - XML\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar xml = createDashboardXML();\n\tvar svg = jQuery.parseXML(\n\t\t\"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \" +\n\t\t\"\\\"http://www.w3.org/Gaphics/SVG/1.1/DTD/svg11.dtd\\\">\" +\n\t\t\"<svg version='1.1' xmlns='http://www.w3.org/2000/svg'><desc/></svg>\"\n\t);\n\tassert.ok( jQuery.isXMLDoc( xml ), \"XML document\" );\n\tassert.ok( jQuery.isXMLDoc( xml.documentElement ), \"XML documentElement\" );\n\tassert.ok( jQuery.isXMLDoc( xml.documentElement.firstChild ), \"XML child element\" );\n\tassert.ok( jQuery.isXMLDoc( jQuery( \"tab\", xml )[ 0 ] ), \"XML tab Element\" );\n\n\tassert.ok( jQuery.isXMLDoc( svg ), \"SVG document\" );\n\tassert.ok( jQuery.isXMLDoc( svg.documentElement ), \"SVG documentElement\" );\n\tassert.ok( jQuery.isXMLDoc( svg.documentElement.firstChild ), \"SVG child element\" );\n\tassert.ok( jQuery.isXMLDoc( jQuery( \"desc\", svg )[ 0 ] ), \"XML desc Element\" );\n} );\n\nQUnit.test( \"XSS via location.hash\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect( 1 );\n\n\tjQuery[ \"_check9521\" ] = function( x ) {\n\t\tassert.ok( x, \"script called from #id-like selector with inline handler\" );\n\t\tjQuery( \"#check9521\" ).remove();\n\t\tdelete jQuery[ \"_check9521\" ];\n\t\tdone();\n\t};\n\ttry {\n\n\t\t// This throws an error because it's processed like an id\n\t\tjQuery( \"#<img id='check9521' src='no-such-.gif' onerror='jQuery._check9521(false)'>\" ).appendTo( \"#qunit-fixture\" );\n\t} catch ( err ) {\n\t\tjQuery[ \"_check9521\" ]( true );\n\t}\n} );\n\nQUnit.test( \"jQuery('html')\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar s, div, j;\n\n\tjQuery[ \"foo\" ] = false;\n\ts = jQuery( \"<script>jQuery.foo='test';</script>\" )[ 0 ];\n\tassert.ok( s, \"Creating a script\" );\n\tassert.ok( !jQuery[ \"foo\" ], \"Make sure the script wasn't executed prematurely\" );\n\tjQuery( \"body\" ).append( \"<script>jQuery.foo='test';</script>\" );\n\tassert.ok( jQuery[ \"foo\" ], \"Executing a script's contents in the right context\" );\n\n\t// Test multi-line HTML\n\tdiv = jQuery( \"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\" )[ 0 ];\n\tassert.equal( div.nodeName.toUpperCase(), \"DIV\", \"Make sure we're getting a div.\" );\n\tassert.equal( div.firstChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.lastChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.childNodes[ 1 ].nodeType, 1, \"Paragraph.\" );\n\tassert.equal( div.childNodes[ 1 ].firstChild.nodeType, 3, \"Paragraph text.\" );\n\n\tassert.ok( jQuery( \"<link rel='stylesheet'/>\" )[ 0 ], \"Creating a link\" );\n\n\tassert.ok( !jQuery( \"<script/>\" )[ 0 ].parentNode, \"Create a script\" );\n\n\tassert.ok( jQuery( \"<input/>\" ).attr( \"type\", \"hidden\" ), \"Create an input and set the type.\" );\n\n\tj = jQuery( \"<span>hi</span> there <!-- mon ami -->\" );\n\tassert.ok( j.length >= 2, \"Check node,textnode,comment creation (some browsers delete comments)\" );\n\n\tassert.ok( !jQuery( \"<option>test</option>\" )[ 0 ].selected, \"Make sure that options are auto-selected #2050\" );\n\n\tassert.ok( jQuery( \"<div></div>\" )[ 0 ], \"Create a div with closing tag.\" );\n\tassert.ok( jQuery( \"<table></table>\" )[ 0 ], \"Create a table with closing tag.\" );\n\n\tassert.equal( jQuery( \"element[attribute='<div></div>']\" ).length, 0,\n\t\t\"When html is within brackets, do not recognize as html.\" );\n\n\t//equal( jQuery( \"element[attribute=<div></div>]\" ).length, 0,\n\t//\t\"When html is within brackets, do not recognize as html.\" );\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( jQuery( \"element:not(<div></div>)\" ).length, 0,\n\t\t\t\"When html is within parens, do not recognize as html.\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Complex :not not supported in selector-native\" );\n\t}\n\tassert.equal( jQuery( \"\\\\<div\\\\>\" ).length, 0, \"Ignore escaped html characters\" );\n} );\n\nQUnit.test( \"jQuery(element with non-alphanumeric name)\", function( assert ) {\n\tassert.expect( 36 );\n\n\tjQuery.each( [ \"-\", \":\" ], function( i, symbol ) {\n\t\tjQuery.each( [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"caption\", \"tr\", \"th\", \"td\" ],\n\t\t\tfunction( j, tag ) {\n\t\t\t\tvar tagName = tag + symbol + \"test\";\n\t\t\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\t\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\t\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\t\t\ttagName + \" element has expected node name\" );\n\t\t\t}\n\t\t);\n\n\t\tvar tagName = [ \"tr\", \"multiple\", \"symbol\" ].join( symbol );\n\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\ttagName + \" element has expected node name\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery('massive html #7990')\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar i,\n\t\tli = \"<li>very very very very large html string</li>\",\n\t\thtml = [ \"<ul>\" ];\n\n\tfor ( i = 0; i < 30000; i += 1 ) {\n\t\thtml[ html.length ] = li;\n\t}\n\thtml[ html.length ] = \"</ul>\";\n\thtml = jQuery( html.join( \"\" ) )[ 0 ];\n\tassert.equal( html.nodeName.toLowerCase(), \"ul\" );\n\tassert.equal( html.firstChild.nodeName.toLowerCase(), \"li\" );\n\tassert.equal( html.childNodes.length, 30000 );\n} );\n\nQUnit.test( \"jQuery('html', context)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div/>\" )[ 0 ],\n\t\t$span = jQuery( \"<span/>\", $div );\n\tassert.equal( $span.length, 1, \"verify a span created with a div context works, #1763\" );\n} );\n\nQUnit.test( \"jQuery(selector, xml).text(str) - loaded via xml document\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar xml = createDashboardXML(),\n\n\t// tests for #1419 where ie was a problem\n\t\ttab = jQuery( \"tab\", xml ).eq( 0 );\n\tassert.equal( tab.text(), \"blabla\", \"verify initial text correct\" );\n\ttab.text( \"newtext\" );\n\tassert.equal( tab.text(), \"newtext\", \"verify new text correct\" );\n} );\n\nQUnit.test( \"end()\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).parent().end().text(), \"check for end\" );\n\tassert.ok( jQuery( \"#yahoo\" ).end(), \"check for end with nothing to end\" );\n\n\tvar x = jQuery( \"#yahoo\" );\n\tx.parent();\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).text(), \"check for non-destructive behavior\" );\n} );\n\nQUnit.test( \"length\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).length, 6, \"Get Number of Elements Found\" );\n} );\n\nQUnit.test( \"get()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Get All Elements\" );\n} );\n\nQUnit.test( \"toArray()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).toArray(),\n\t\tq( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ),\n\t\t\"Convert jQuery object to an Array\" );\n} );\n\nQUnit.test( \"inArray()\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar selections = {\n\t\tp:   q( \"firstp\", \"sap\", \"ap\", \"first\" ),\n\t\tem:  q( \"siblingnext\", \"siblingfirst\" ),\n\t\tdiv: q( \"qunit-testrunner-toolbar\", \"nothiddendiv\", \"nothiddendivchild\", \"foo\" ),\n\t\ta:   q( \"mark\", \"groups\", \"google\", \"simon1\" ),\n\t\tempty: []\n\t},\n\ttests = {\n\t\tp:    { elem: jQuery( \"#ap\" )[ 0 ],           index: 2 },\n\t\tem:   { elem: jQuery( \"#siblingfirst\" )[ 0 ], index: 1 },\n\t\tdiv:  { elem: jQuery( \"#nothiddendiv\" )[ 0 ], index: 1 },\n\t\ta:    { elem: jQuery( \"#simon1\" )[ 0 ],       index: 3 }\n\t},\n\tfalseTests = {\n\t\tp:  jQuery( \"#liveSpan1\" )[ 0 ],\n\t\tem: jQuery( \"#nothiddendiv\" )[ 0 ],\n\t\tempty: \"\"\n\t};\n\n\tjQuery.each( tests, function( key, obj ) {\n\t\tassert.equal( jQuery.inArray( obj.elem, selections[ key ] ), obj.index, \"elem is in the array of selections of its tag\" );\n\n\t\t// Third argument (fromIndex)\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 5 ), false, \"elem is NOT in the array of selections given a starting index greater than its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 1 ), true, \"elem is in the array of selections given a starting index less than or equal to its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], -3 ), true, \"elem is in the array of selections given a negative index\" );\n\t} );\n\n\tjQuery.each( falseTests, function( key, elem ) {\n\t\tassert.equal( !!~jQuery.inArray( elem, selections[ key ] ), false, \"elem is NOT in the array of selections\" );\n\t} );\n\n} );\n\nQUnit.test( \"get(Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).get( 0 ), document.getElementById( \"firstp\" ), \"Get A Single Element\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( 1 ), undefined, \"Try get with index larger elements count\" );\n} );\n\nQUnit.test( \"get(-Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"p\" ).get( -1 ), document.getElementById( \"first\" ), \"Get a single element with negative index\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( -2 ), undefined, \"Try get with index negative index larger then elements count\" );\n} );\n\nQUnit.test( \"each(Function)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar div, pass, i;\n\n\tdiv = jQuery( \"div\" );\n\tdiv.each( function() {this.foo = \"zoo\";} );\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( div.get( i ).foo !== \"zoo\" ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Execute a function, Relative\" );\n} );\n\nQUnit.test( \"slice()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $links = jQuery( \"#ap a\" );\n\n\tassert.deepEqual( $links.slice( 1, 2 ).get(), q( \"groups\" ), \"slice(1,2)\" );\n\tassert.deepEqual( $links.slice( 1 ).get(), q( \"groups\", \"anchor1\", \"mark\" ), \"slice(1)\" );\n\tassert.deepEqual( $links.slice( 0, 3 ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"slice(0,3)\" );\n\tassert.deepEqual( $links.slice( -1 ).get(), q( \"mark\" ), \"slice(-1)\" );\n\n\tassert.deepEqual( $links.eq( 1 ).get(), q( \"groups\" ), \"eq(1)\" );\n\tassert.deepEqual( $links.eq( \"2\" ).get(), q( \"anchor1\" ), \"eq('2')\" );\n\tassert.deepEqual( $links.eq( -1 ).get(), q( \"mark\" ), \"eq(-1)\" );\n} );\n\nQUnit.test( \"first()/last()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $links = jQuery( \"#ap a\" ), $none = jQuery( \"asdf\" );\n\n\tassert.deepEqual( $links.first().get(), q( \"google\" ), \"first()\" );\n\tassert.deepEqual( $links.last().get(), q( \"mark\" ), \"last()\" );\n\n\tassert.deepEqual( $none.first().get(), [], \"first() none\" );\n\tassert.deepEqual( $none.last().get(), [], \"last() none\" );\n} );\n\nQUnit.test( \"even()/odd()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $links = jQuery( \"#ap a\" ), $none = jQuery( \"asdf\" );\n\n\tassert.deepEqual( $links.even().get(), q( \"google\", \"anchor1\" ), \"even()\" );\n\tassert.deepEqual( $links.odd().get(), q( \"groups\", \"mark\" ), \"odd()\" );\n\n\tassert.deepEqual( $none.even().get(), [], \"even() none\" );\n\tassert.deepEqual( $none.odd().get(), [], \"odd() none\" );\n} );\n\nQUnit.test( \"map()\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap\" ).map( function() {\n\t\t\treturn jQuery( this ).find( \"a\" ).get();\n\t\t} ).get(),\n\t\tq( \"google\", \"groups\", \"anchor1\", \"mark\" ),\n\t\t\"Array Map\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap > a\" ).map( function() {\n\t\t\treturn this.parentNode;\n\t\t} ).get(),\n\t\tq( \"ap\", \"ap\", \"ap\" ),\n\t\t\"Single Map\"\n\t);\n} );\n\nQUnit.test( \"jQuery.map\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar i, label, result, callback;\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"012\", \"Map the keys from an array\" );\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"345\", \"Map the values from an array\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Map the keys from an object\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"12\", \"Map the values from an object\" );\n\n\tresult = jQuery.map( [ \"a\", undefined, null, \"b\" ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Array iteration does not include undefined/null results\" );\n\n\tresult = jQuery.map( { a: \"a\", b: undefined, c: null, d: \"b\" }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Object iteration does not include undefined/null results\" );\n\n\tresult = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tresult[ i ].foo = \"bar\";\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( { length: result[ i ] }, callback );\n\t}\n\n\tresult = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( v, k ) {\n\t\tif ( result[ label ] ) {\n\t\t\tdelete result[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t}\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = false;\n\tjQuery.map( { length: 0 }, function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"length: 0 plain object treated like array\" );\n\n\tresult = false;\n\tjQuery.map( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"empty NodeList treated like array\" );\n\n\tresult = jQuery.map( Array( 4 ), function( v, k ) {\n\t\treturn k % 2 ? k : [ k, k, k ];\n\t} );\n\tassert.equal( result.join( \"\" ), \"00012223\", \"Array results flattened (#2616)\" );\n\n\tresult = jQuery.map( [ [ [ 1, 2 ], 3 ], 4 ], function( v, k ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.length, 3, \"Array flatten only one level down\" );\n\tassert.ok( Array.isArray( result[ 0 ] ), \"Array flatten only one level down\" );\n\n\t// Support: IE 9 - 11+, Edge 18+, Android Browser 4.0 - 4.3 only, iOS 7 - 11 only,\n\t// Safari 11 only, Firefox <= 61 only\n\t// Skip the test in browsers without Array#flat.\n\tif ( Array.prototype.flat ) {\n\t\tresult = jQuery.map( Array( 300000 ), function( v, k ) {\n\t\t\treturn k;\n\t\t} );\n\t\tassert.equal( result.length, 300000, \"Able to map 300000 records without any problems (#4320)\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Array#flat doesn't supported on all browsers\" );\n\t}\n} );\n\nQUnit.test( \"jQuery.merge()\", function( assert ) {\n\tassert.expect( 10 );\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [] ),\n\t\t[],\n\t\t\"Empty arrays\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1 ], [ 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"Basic (single-element)\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [ 3, 4 ] ),\n\t\t[ 1, 2, 3, 4 ],\n\t\t\"Basic (multiple-element)\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [] ),\n\t\t[ 1, 2 ],\n\t\t\"Second empty\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ 1, 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"First empty\"\n\t);\n\n\t// Fixed at [5998], #3641\n\tassert.deepEqual(\n\t\tjQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),\n\t\t[ -2, -1, 0, 1, 2 ],\n\t\t\"Second array including a zero (falsy)\"\n\t);\n\n\t// After fixing #5527\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ null, undefined ] ),\n\t\t[ null, undefined ],\n\t\t\"Second array including null and undefined values\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( { length: 0 }, [ 1, 2 ] ),\n\t\t{ length: 2, 0: 1, 1: 2 },\n\t\t\"First array like\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], { length: 1, 0: 3 } ),\n\t\t[ 1, 2, 3 ],\n\t\t\"Second array like\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], document.getElementById( \"lengthtest\" ).getElementsByTagName( \"input\" ) ),\n\t\t[ document.getElementById( \"length\" ), document.getElementById( \"idTest\" ) ],\n\t\t\"Second NodeList\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep()\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( [], searchCriterion ), [], \"Empty array\" );\n\tassert.deepEqual( jQuery.grep( new Array( 4 ), searchCriterion ), [], \"Sparse array\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep(Array-like)\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( { length: 0 }, searchCriterion ), [], \"Empty array-like\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present and array-like object used\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent and Array-like object used\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present, array-like object used, and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent, array-like object used, and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present, Array-like object used, but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent, Array-like object used, and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object)\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar empty, optionsWithLength, optionsWithDate, myKlass,\n\t\tcustomObject, optionsWithCustomObject, MyNumber, ret,\n\t\tnullUndef, target, recursive, obj,\n\t\tdefaults, defaultsCopy, options1, options1Copy, options2, options2Copy, merged2,\n\t\tsettings = { \"xnumber1\": 5, \"xnumber2\": 7, \"xstring1\": \"peter\", \"xstring2\": \"pan\" },\n\t\toptions = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\toptionsCopy = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tmerged = { \"xnumber1\": 5, \"xnumber2\": 1, \"xstring1\": \"peter\", \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tdeep1 = { \"foo\": { \"bar\": true } },\n\t\tdeep2 = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeep2copy = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeepmerged = { \"foo\": { \"bar\": true, \"baz\": true }, \"foo2\": document },\n\t\tarr = [ 1, 2, 3 ],\n\t\tnestedarray = { \"arr\": arr };\n\n\tjQuery.extend( settings, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( settings, null, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( true, deep1, deep2 );\n\tassert.deepEqual( deep1[ \"foo\" ], deepmerged[ \"foo\" ], \"Check if foo: settings must be extended\" );\n\tassert.deepEqual( deep2[ \"foo\" ], deep2copy[ \"foo\" ], \"Check if not deep2: options must not be modified\" );\n\tassert.equal( deep1[ \"foo2\" ], document, \"Make sure that a deep clone was not attempted on the document\" );\n\n\tassert.ok( jQuery.extend( true, {}, nestedarray )[ \"arr\" ] !== arr, \"Deep extend of object must clone child array\" );\n\n\t// #5991\n\tassert.ok( Array.isArray( jQuery.extend( true, { \"arr\": {} }, nestedarray )[ \"arr\" ] ), \"Cloned array have to be an Array\" );\n\tassert.ok( jQuery.isPlainObject( jQuery.extend( true, { \"arr\": arr }, { \"arr\": {} } )[ \"arr\" ] ), \"Cloned object have to be an plain object\" );\n\n\tempty = {};\n\toptionsWithLength = { \"foo\": { \"length\": -1 } };\n\tjQuery.extend( true, empty, optionsWithLength );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithLength[ \"foo\" ], \"The length property must copy correctly\" );\n\n\tempty = {};\n\toptionsWithDate = { \"foo\": { \"date\": new Date() } };\n\tjQuery.extend( true, empty, optionsWithDate );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithDate[ \"foo\" ], \"Dates copy correctly\" );\n\n\t/** @constructor */\n\tmyKlass = function() {};\n\tcustomObject = new myKlass();\n\toptionsWithCustomObject = { \"foo\": { \"date\": customObject } };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly (no methods)\" );\n\n\t// Makes the class a little more realistic\n\tmyKlass.prototype = { \"someMethod\": function() {} };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly\" );\n\n\tMyNumber = Number;\n\n\tret = jQuery.extend( true, { \"foo\": 4 }, { \"foo\": new MyNumber( 5 ) } );\n\tassert.ok( parseInt( ret.foo, 10 ) === 5, \"Wrapped numbers copy correctly\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": null } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === null, \"Check to make sure null values are copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": undefined } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === options[ \"xnumber2\" ], \"Check to make sure undefined values are not copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber0\": null } );\n\tassert.ok( nullUndef[ \"xnumber0\" ] === null, \"Check to make sure null values are inserted\" );\n\n\ttarget = {};\n\trecursive = { foo:target, bar:5 };\n\tjQuery.extend( true, target, recursive );\n\tassert.deepEqual( target, { bar:5 }, \"Check to make sure a recursive obj doesn't go never-ending loop by not copying it over\" );\n\n\tret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907\n\tassert.equal( ret.foo.length, 1, \"Check to make sure a value with coercion 'false' copies over when necessary to fix #1907\" );\n\n\tret = jQuery.extend( true, { foo: \"1,2,3\" }, { foo: [ 1, 2, 3 ] } );\n\tassert.ok( typeof ret.foo !== \"string\", \"Check to make sure values equal with coercion (but not actually equal) overwrite correctly\" );\n\n\tret = jQuery.extend( true, { foo:\"bar\" }, { foo:null } );\n\tassert.ok( typeof ret.foo !== \"undefined\", \"Make sure a null value doesn't crash with deep extend, for #1908\" );\n\n\tobj = { foo:null };\n\tjQuery.extend( true, obj, { foo:\"notnull\" } );\n\tassert.equal( obj.foo, \"notnull\", \"Make sure a null value can be overwritten\" );\n\n\tfunction func() {}\n\tjQuery.extend( func, { key: \"value\" } );\n\tassert.equal( func.key, \"value\", \"Verify a function can be extended\" );\n\n\tdefaults = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\tdefaultsCopy = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\toptions1 = { xnumber2: 1, xstring2: \"x\" };\n\toptions1Copy = { xnumber2: 1, xstring2: \"x\" };\n\toptions2 = { xstring2: \"xx\", xxx: \"newstringx\" };\n\toptions2Copy = { xstring2: \"xx\", xxx: \"newstringx\" };\n\tmerged2 = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"xx\", xxx: \"newstringx\" };\n\n\tsettings = jQuery.extend( {}, defaults, options1, options2 );\n\tassert.deepEqual( settings, merged2, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( defaults, defaultsCopy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options1, options1Copy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options2, options2Copy, \"Check if not modified: options2 must not be modified\" );\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object {created with \\\"defineProperties\\\"})\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar definedObj = Object.defineProperties( {}, {\n        \"enumerableProp\": {\n          get: function() {\n            return true;\n          },\n          enumerable: true\n        },\n        \"nonenumerableProp\": {\n          get: function() {\n            return true;\n          }\n        }\n      } ),\n      accessorObj = {};\n\n\tjQuery.extend( accessorObj, definedObj );\n\tassert.equal( accessorObj.enumerableProp, true, \"Verify that getters are transferred\" );\n\tassert.equal( accessorObj.nonenumerableProp, undefined, \"Verify that non-enumerable getters are ignored\" );\n} );\n\nQUnit.test( \"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar result, initial = {\n\n\t\t// This will make \"copyIsArray\" true\n\t\tarray: [ 1, 2, 3, 4 ],\n\n\t\t// If \"copyIsArray\" doesn't get reset to false, the check\n\t\t// will evaluate true and enter the array copy block\n\t\t// instead of the object copy block. Since the ternary in the\n\t\t// \"copyIsArray\" block will evaluate to false\n\t\t// (check if operating on an array with ), this will be\n\t\t// replaced by an empty array.\n\t\tobject: {}\n\t};\n\n\tresult = jQuery.extend( true, {}, initial );\n\n\tassert.deepEqual( result, initial, \"The [result] and [initial] have equal shape and values\" );\n\tassert.ok( !Array.isArray( result.object ), \"result.object wasn't paved with an empty array\" );\n} );\n\nQUnit.test( \"jQuery.extend( true, ... ) Object.prototype pollution\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery.extend( true, {}, JSON.parse( \"{\\\"__proto__\\\": {\\\"devMode\\\": true}}\" ) );\n\tassert.ok( !( \"devMode\" in {} ), \"Object.prototype not polluted\" );\n} );\n\nQUnit.test( \"jQuery.each(Object,Function)\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar i, label, seen, callback;\n\n\tseen = {};\n\tjQuery.each( [ 3, 4, 5 ], function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { \"0\": 3, \"1\": 4, \"2\": 5 }, \"Array iteration\" );\n\n\tseen = {};\n\tjQuery.each( { name: \"name\", lang: \"lang\" }, function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { name: \"name\", lang: \"lang\" }, \"Object iteration\" );\n\n\tseen = [];\n\tjQuery.each( [ 1, 2, 3 ], function( k, v ) {\n\t\tseen.push( v );\n\t\tif ( k === 1 ) {\n\t\t\treturn false;\n\t\t}\n\t} );\n\tassert.deepEqual( seen, [ 1, 2 ], \"Broken array iteration\" );\n\n\tseen = [];\n\tjQuery.each( { \"a\": 1, \"b\": 2, \"c\": 3 }, function( k, v ) {\n\t\tseen.push( v );\n\t\treturn false;\n\t} );\n\tassert.deepEqual( seen, [ 1 ], \"Broken object iteration\" );\n\n\tseen = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tseen[ i ].foo = \"bar\";\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( { length: seen[ i ] }, callback );\n\t}\n\n\tseen = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( k ) {\n\t\tif ( seen[ label ] ) {\n\t\t\tdelete seen[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t\treturn false;\n\t\t}\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = false;\n\tjQuery.each( { length: 0 }, function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"length: 0 plain object treated like array\" );\n\n\tseen = false;\n\tjQuery.each( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"empty NodeList treated like array\" );\n\n\ti = 0;\n\tjQuery.each( document.styleSheets, function() {\n\t\ti++;\n\t} );\n\tassert.equal( i, document.styleSheets.length, \"Iteration over document.styleSheets\" );\n} );\n\nQUnit.test( \"jQuery.each/map(undefined/null,Function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery.each( undefined, jQuery.noop );\n\t\tjQuery.each( null, jQuery.noop );\n\t\tjQuery.map( undefined, jQuery.noop );\n\t\tjQuery.map( null, jQuery.noop );\n\t\tassert.ok( true, \"jQuery.each/map( undefined/null, function() {} );\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"each/map must accept null and undefined values\" );\n\t}\n} );\n\nQUnit.test( \"JIT compilation does not interfere with length retrieval (gh-2145)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar i;\n\n\t// Trigger JIT compilation of jQuery.each \u2013 and therefore isArraylike \u2013 in iOS.\n\t// Convince JSC to use one of its optimizing compilers\n\t// by providing code which can be LICM'd into nothing.\n\tfor ( i = 0; i < 1000; i++ ) {\n\t\tjQuery.each( [] );\n\t}\n\n\ti = 0;\n\tjQuery.each( { 1: \"1\", 2: \"2\", 3: \"3\" }, function( index ) {\n\t\tassert.equal( ++i, index, \"Iteration over object with solely \" +\n\t\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n\t} );\n\tassert.equal( i, 3, \"Iteration over object with solely \" +\n\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n} );\n\nQUnit.test( \"jQuery.makeArray\", function( assert ) {\n\tassert.expect( 15 );\n\n\tassert.equal( jQuery.makeArray( jQuery( \"html>*\" ) )[ 0 ].nodeName.toUpperCase(), \"HEAD\", \"Pass makeArray a jQuery object\" );\n\n\tassert.equal( jQuery.makeArray( document.getElementsByName( \"PWD\" ) ).slice( 0, 1 )[ 0 ].name, \"PWD\", \"Pass makeArray a nodelist\" );\n\n\tassert.equal( ( function() { return jQuery.makeArray( arguments ); } )( 1, 2 ).join( \"\" ), \"12\", \"Pass makeArray an arguments array\" );\n\n\tassert.equal( jQuery.makeArray( [ 1, 2, 3 ] ).join( \"\" ), \"123\", \"Pass makeArray a real array\" );\n\n\tassert.equal( jQuery.makeArray().length, 0, \"Pass nothing to makeArray and expect an empty array\" );\n\n\tassert.equal( jQuery.makeArray( 0 )[ 0 ], 0, \"Pass makeArray a number\" );\n\n\tassert.equal( jQuery.makeArray( \"foo\" )[ 0 ], \"foo\", \"Pass makeArray a string\" );\n\n\tassert.equal( jQuery.makeArray( true )[ 0 ].constructor, Boolean, \"Pass makeArray a boolean\" );\n\n\tassert.equal( jQuery.makeArray( document.createElement( \"div\" ) )[ 0 ].nodeName.toUpperCase(), \"DIV\", \"Pass makeArray a single node\" );\n\n\tassert.equal( jQuery.makeArray( { length:2, 0:\"a\", 1:\"b\" } ).join( \"\" ), \"ab\", \"Pass makeArray an array like map (with length)\" );\n\n\tassert.ok( !!jQuery.makeArray( document.documentElement.childNodes ).slice( 0, 1 )[ 0 ].nodeName, \"Pass makeArray a childNodes array\" );\n\n\t// function, is tricky as it has length\n\tassert.equal( jQuery.makeArray( function() { return 1;} )[ 0 ](), 1, \"Pass makeArray a function\" );\n\n\t//window, also has length\n\tassert.equal( jQuery.makeArray( window )[ 0 ], window, \"Pass makeArray the window\" );\n\n\tassert.equal( jQuery.makeArray( /a/ )[ 0 ].constructor, RegExp, \"Pass makeArray a regex\" );\n\n\t// Some nodes inherit traits of nodelists\n\tassert.ok( jQuery.makeArray( document.getElementById( \"form\" ) ).length >= 13,\n\t\t\"Pass makeArray a form (treat as elements)\" );\n} );\n\nQUnit.test( \"jQuery.inArray\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery.inArray( 0, false ), -1, \"Search in 'false' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, null ), -1, \"Search in 'null' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, undefined ), -1, \"Search in 'undefined' as array returns -1 and doesn't throw exception\" );\n} );\n\nQUnit.test( \"jQuery.isEmptyObject\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( true, jQuery.isEmptyObject( {} ), \"isEmptyObject on empty object literal\" );\n\tassert.equal( false, jQuery.isEmptyObject( { a:1 } ), \"isEmptyObject on non-empty object literal\" );\n\n\t// What about this ?\n\t// equal(true, jQuery.isEmptyObject(null), \"isEmptyObject on null\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar html, nodes;\n\n\tassert.deepEqual( jQuery.parseHTML(), [], \"Without arguments\" );\n\tassert.deepEqual( jQuery.parseHTML( undefined ), [], \"Undefined\" );\n\tassert.deepEqual( jQuery.parseHTML( null ), [], \"Null\" );\n\tassert.deepEqual( jQuery.parseHTML( false ), [], \"Boolean false\" );\n\tassert.deepEqual( jQuery.parseHTML( 0 ), [], \"Zero\" );\n\tassert.deepEqual( jQuery.parseHTML( true ), [], \"Boolean true\" );\n\tassert.deepEqual( jQuery.parseHTML( 42 ), [], \"Positive number\" );\n\tassert.deepEqual( jQuery.parseHTML( \"\" ), [], \"Empty string\" );\n\tassert.throws( function() {\n\t\tjQuery.parseHTML( \"<div></div>\", document.getElementById( \"form\" ) );\n\t}, \"Passing an element as the context raises an exception (context should be a document)\" );\n\n\tnodes = jQuery.parseHTML( jQuery( \"body\" )[ 0 ].innerHTML );\n\tassert.ok( nodes.length > 4, \"Parse a large html string\" );\n\tassert.ok( Array.isArray( nodes ), \"parseHTML returns an array rather than a nodelist\" );\n\n\thtml = \"<script>undefined()</script>\";\n\tassert.equal( jQuery.parseHTML( html ).length, 0, \"Ignore scripts by default\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve scripts when requested\" );\n\n\thtml += \"<div></div>\";\n\tassert.equal( jQuery.parseHTML( html )[ 0 ].nodeName.toLowerCase(), \"div\", \"Preserve non-script nodes\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve script position\" );\n\n\tassert.equal( jQuery.parseHTML( \"text\" )[ 0 ].nodeType, 3, \"Parsing text returns a text node\" );\n\tassert.equal( jQuery.parseHTML( \"\\t<div></div>\" )[ 0 ].nodeValue, \"\\t\", \"Preserve leading whitespace\" );\n\n\tassert.equal( jQuery.parseHTML( \" <div/> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );\n\n\thtml = jQuery.parseHTML( \"<div>test div</div>\" );\n\n\tassert.equal( html[ 0 ].parentNode.nodeType, 11, \"parentNode should be documentFragment\" );\n\tassert.equal( html[ 0 ].innerHTML, \"test div\", \"Content should be preserved\" );\n\n\tassert.equal( jQuery.parseHTML( \"<span><span>\" ).length, 1, \"Incorrect html-strings should not break anything\" );\n\tassert.equal( jQuery.parseHTML( \"<td><td>\" )[ 1 ].parentNode.nodeType, 11,\n\t\t\"parentNode should be documentFragment for wrapMap (variable in manipulation module) elements too\" );\n\tassert.ok( jQuery.parseHTML( \"<#if><tr><p>This is a test.</p></tr><#/if>\" ) || true, \"Garbage input should not cause error\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML(<a href>) - gh-2965\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html = \"<a href='example.html'></a>\",\n\t\thref = jQuery.parseHTML( html )[ 0 ].href;\n\n\tassert.ok( /\\/example\\.html$/.test( href ), \"href is not lost after parsing anchor\" );\n} );\n\nif ( jQuery.support.createHTMLDocument ) {\n\tQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\t\tvar done = assert.async();\n\t\tassert.expect( 1 );\n\n\t\tGlobals.register( \"parseHTMLError\" );\n\n\t\tjQuery.globalEval( \"parseHTMLError = false;\" );\n\t\tjQuery.parseHTML( \"<img src=x onerror='parseHTMLError = true'>\" );\n\n\t\twindow.setTimeout( function() {\n\t\t\tassert.equal( window.parseHTMLError, false, \"onerror eventhandler has not been called.\" );\n\t\t\tdone();\n\t\t}, 2000 );\n\t} );\n}\n\nQUnit.test( \"jQuery.parseXML\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar xml, tmp;\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>A <b>well-formed</b> xml string</p>\" );\n\t\ttmp = xml.getElementsByTagName( \"p\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<p> present in document\" );\n\t\ttmp = tmp.getElementsByTagName( \"b\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<b> present in document\" );\n\t\tassert.strictEqual( tmp.childNodes[ 0 ].nodeValue, \"well-formed\", \"<b> text is as expected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e, undefined, \"unexpected error\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>Not a <<b>well-formed</b> xml string</p>\" );\n\t\tassert.ok( false, \"invalid xml not detected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e.message, \"Invalid XML: <p>Not a <<b>well-formed</b> xml string</p>\", \"invalid xml detected\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"\" );\n\t\tassert.strictEqual( xml, null, \"empty string => null document\" );\n\t\txml = jQuery.parseXML();\n\t\tassert.strictEqual( xml, null, \"undefined string => null document\" );\n\t\txml = jQuery.parseXML( null );\n\t\tassert.strictEqual( xml, null, \"null string => null document\" );\n\t\txml = jQuery.parseXML( true );\n\t\tassert.strictEqual( xml, null, \"non-string => null document\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"empty input throws exception\" );\n\t}\n} );\n\ntestIframe(\n\t\"Conditional compilation compatibility (#13274)\",\n\t\"core/cc_on.html\",\n\tfunction( assert, jQuery, window, document, cc_on, errors ) {\n\t\tassert.expect( 3 );\n\t\tassert.ok( true, \"JScript conditional compilation \" + ( cc_on ? \"supported\" : \"not supported\" ) );\n\t\tassert.deepEqual( errors, [], \"No errors\" );\n\t\tassert.ok( jQuery(), \"jQuery executes\" );\n\t}\n);\n\n// iOS7 doesn't fire the load event if the long-loading iframe gets its source reset to about:blank.\n// This makes this test fail but it doesn't seem to cause any real-life problems so blacklisting\n// this test there is preferred to complicating the hard-to-test core/ready code further.\nif ( !/iphone os 7_/i.test( navigator.userAgent ) ) {\n\ttestIframe(\n\t\t\"document ready when jQuery loaded asynchronously (#13655)\",\n\t\t\"core/dynamic_ready.html\",\n\t\tfunction( assert, jQuery, window, document, ready ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.equal( true, ready, \"document ready correctly fired when jQuery is loaded after DOMContentLoaded\" );\n\t\t}\n\t);\n}\n\ntestIframe(\n\t\"Tolerating alias-masked DOM properties (#14074)\",\n\t\"core/aliased.html\",\n\tfunction( assert, jQuery, window, document, errors ) {\n\t\tassert.expect( 1 );\n\t\tassert.deepEqual( errors, [], \"jQuery loaded\" );\n\t}\n);\n\ntestIframe(\n\t\"Don't call window.onready (#14802)\",\n\t\"core/onready.html\",\n\tfunction( assert, jQuery, window, document, error ) {\n\t\tassert.expect( 1 );\n\t\tassert.equal( error, false, \"no call to user-defined onready\" );\n\t}\n);\n\nQUnit.test( \"Iterability of jQuery objects (gh-1693)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar i, elem, result;\n\n\tif ( typeof Symbol === \"function\" ) {\n\n\t\telem = jQuery( \"<div></div><span></span><a></a>\" );\n\t\tresult = \"\";\n\n\t\ttry {\n\t\t\teval( \"for ( i of elem ) { result += i.nodeName; }\" );\n\t\t} catch ( e ) {}\n\t\tassert.equal( result, \"DIVSPANA\", \"for-of works on jQuery objects\" );\n\t} else {\n\t\tassert.ok( true, \"The browser doesn't support Symbols\" );\n\t}\n} );\n\ntestIframe(\n\t\"Iterability of jQuery objects with Symbol polyfill (gh-1693)\",\n\t\"core/jquery-iterability-transpiled.html\",\n\tfunction( assert, jQuery, window, document, testString ) {\n\t\tassert.expect( 1 );\n\n\t\tassert.strictEqual( testString, \"DIVSPANA\",\n\t\t\t\"for-of works on jQuery objects with Symbol polyfilled\" );\n\t}\n);\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (original)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar message;\n\n\tthis.sandbox.stub( window, \"setTimeout\", function( fn ) {\n\t\ttry {\n\t\t\tfn();\n\t\t} catch ( error ) {\n\t\t\tmessage = error.message;\n\t\t}\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n\tassert.strictEqual(\n\t\tmessage,\n\t\t\"Error in jQuery ready\",\n\t\t\"The error should have been thrown in a timeout\"\n\t);\n} );\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (custom)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar done = assert.async();\n\n\tthis.sandbox.stub( jQuery, \"readyException\", function( error ) {\n\t\tassert.strictEqual(\n\t\t\terror.message,\n\t\t\t\"Error in jQuery ready\",\n\t\t\t\"The custom jQuery.readyException should have been called\"\n\t\t);\n\t\tdone();\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n} );\n", "if ( jQuery.css ) {\n\nQUnit.module( \"css\", { afterEach: moduleTeardown } );\n\nQUnit.test( \"css(String|Hash)\", function( assert ) {\n\tassert.expect( 42 );\n\n\tassert.equal( jQuery( \"#qunit-fixture\" ).css( \"display\" ), \"block\", \"Check for css property \\\"display\\\"\" );\n\n\tvar $child, div, div2, width, height, child, prctval, checkval, old;\n\n\t$child = jQuery( \"#nothiddendivchild\" ).css( { \"width\": \"20%\", \"height\": \"20%\" } );\n\tassert.notEqual( $child.css( \"width\" ), \"20px\", \"Retrieving a width percentage on the child of a hidden div returns percentage\" );\n\tassert.notEqual( $child.css( \"height\" ), \"20px\", \"Retrieving a height percentage on the child of a hidden div returns percentage\" );\n\n\tdiv = jQuery( \"<div/>\" );\n\n\t// These should be \"auto\" (or some better value)\n\t// temporarily provide \"0px\" for backwards compat\n\tassert.equal( div.css( \"width\" ), \"0px\", \"Width on disconnected node.\" );\n\tassert.equal( div.css( \"height\" ), \"0px\", \"Height on disconnected node.\" );\n\n\tdiv.css( { \"width\": 4, \"height\": 4 } );\n\n\tassert.equal( div.css( \"width\" ), \"4px\", \"Width on disconnected node.\" );\n\tassert.equal( div.css( \"height\" ), \"4px\", \"Height on disconnected node.\" );\n\n\tdiv2 = jQuery( \"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'/><div style='height:20px;'></div></div>\" ).appendTo( \"body\" );\n\n\tassert.equal( div2.find( \"input\" ).css( \"height\" ), \"20px\", \"Height on hidden input.\" );\n\tassert.equal( div2.find( \"textarea\" ).css( \"height\" ), \"20px\", \"Height on hidden textarea.\" );\n\tassert.equal( div2.find( \"div\" ).css( \"height\" ), \"20px\", \"Height on hidden div.\" );\n\n\tdiv2.remove();\n\n\t// handle negative numbers by setting to zero #11604\n\tjQuery( \"#nothiddendiv\" ).css( { \"width\": 1, \"height\": 1 } );\n\n\twidth = parseFloat( jQuery( \"#nothiddendiv\" ).css( \"width\" ) );\n\theight = parseFloat( jQuery( \"#nothiddendiv\" ).css( \"height\" ) );\n\tjQuery( \"#nothiddendiv\" ).css( { \"overflow\":\"hidden\", \"width\": -1, \"height\": -1 } );\n\tassert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"width\" ) ), 0, \"Test negative width set to 0\" );\n\tassert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"height\" ) ), 0, \"Test negative height set to 0\" );\n\n\tassert.equal( jQuery( \"<div style='display: none;'/>\" ).css( \"display\" ), \"none\", \"Styles on disconnected nodes\" );\n\n\tjQuery( \"#floatTest\" ).css( { \"float\": \"right\" } );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"float\" ), \"right\", \"Modified CSS float using \\\"float\\\": Assert float is right\" );\n\tjQuery( \"#floatTest\" ).css( { \"font-size\": \"30px\" } );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"font-size\" ), \"30px\", \"Modified CSS font-size: Assert font-size is 30px\" );\n\tjQuery.each( \"0,0.25,0.5,0.75,1\".split( \",\" ), function( i, n ) {\n\t\tjQuery( \"#foo\" ).css( { \"opacity\": n } );\n\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a String\" );\n\t\tjQuery( \"#foo\" ).css( { \"opacity\": parseFloat( n ) } );\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a Number\" );\n\t} );\n\tjQuery( \"#foo\" ).css( { \"opacity\": \"\" } );\n\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), \"1\", \"Assert opacity is 1 when set to an empty String\" );\n\n\tassert.equal( jQuery( \"#empty\" ).css( \"opacity\" ), \"0\", \"Assert opacity is accessible\" );\n\tjQuery( \"#empty\" ).css( { \"opacity\": \"1\" } );\n\tassert.equal( jQuery( \"#empty\" ).css( \"opacity\" ), \"1\", \"Assert opacity is taken from style attribute when set\" );\n\n\tdiv = jQuery( \"#nothiddendiv\" );\n\tchild = jQuery( \"#nothiddendivchild\" );\n\n\tassert.equal( parseInt( div.css( \"fontSize\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\tassert.equal( parseInt( div.css( \"font-size\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\tassert.equal( parseInt( child.css( \"fontSize\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\tassert.equal( parseInt( child.css( \"font-size\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\n\tchild.css( \"height\", \"100%\" );\n\tassert.equal( child[ 0 ].style.height, \"100%\", \"Make sure the height is being set correctly.\" );\n\n\tchild.attr( \"class\", \"em\" );\n\tassert.equal( parseInt( child.css( \"fontSize\" ), 10 ), 32, \"Verify fontSize em set.\" );\n\n\t// Have to verify this as the result depends upon the browser's CSS\n\t// support for font-size percentages\n\tchild.attr( \"class\", \"prct\" );\n\tprctval = parseInt( child.css( \"fontSize\" ), 10 );\n\tcheckval = 0;\n\tif ( prctval === 16 || prctval === 24 ) {\n\t\tcheckval = prctval;\n\t}\n\n\tassert.equal( prctval, checkval, \"Verify fontSize % set.\" );\n\n\tassert.equal( typeof child.css( \"width\" ), \"string\", \"Make sure that a string width is returned from css('width').\" );\n\n\told = child[ 0 ].style.height;\n\n\t// Test NaN\n\tchild.css( \"height\", parseFloat( \"zoo\" ) );\n\tassert.equal( child[ 0 ].style.height, old, \"Make sure height isn't changed on NaN.\" );\n\n\t// Test null\n\tchild.css( \"height\", null );\n\tassert.equal( child[ 0 ].style.height, old, \"Make sure height isn't changed on null.\" );\n\n\told = child[ 0 ].style.fontSize;\n\n\t// Test NaN\n\tchild.css( \"font-size\", parseFloat( \"zoo\" ) );\n\tassert.equal( child[ 0 ].style.fontSize, old, \"Make sure font-size isn't changed on NaN.\" );\n\n\t// Test null\n\tchild.css( \"font-size\", null );\n\tassert.equal( child[ 0 ].style.fontSize, old, \"Make sure font-size isn't changed on null.\" );\n\n\tassert.strictEqual( child.css( \"x-fake\" ), undefined, \"Make sure undefined is returned from css(nonexistent).\" );\n\n\tdiv = jQuery( \"<div/>\" ).css( { position: \"absolute\", \"z-index\": 1000 } ).appendTo( \"#qunit-fixture\" );\n\tassert.strictEqual( div.css( \"z-index\" ), \"1000\",\n\t\t\"Make sure that a string z-index is returned from css('z-index') (#14432).\" );\n} );\n\nQUnit.test( \"css() explicit and relative values\", function( assert ) {\n\tassert.expect( 29 );\n\n\tvar $elem = jQuery( \"#nothiddendiv\" );\n\n\t$elem.css( { \"width\": 1, \"height\": 1, \"paddingLeft\": \"1px\", \"opacity\": 1 } );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"Initial css set or width/height works (hash)\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"Initial css set of paddingLeft works (hash)\" );\n\tassert.equal( $elem.css( \"opacity\" ), \"1\", \"Initial css set of opacity works (hash)\" );\n\n\t$elem.css( { width: \"+=9\" } );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9' on width (hash)\" );\n\n\t$elem.css( { \"width\": \"-=9\" } );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9' on width (hash)\" );\n\n\t$elem.css( { \"width\": \"+=9px\" } );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9px' on width (hash)\" );\n\n\t$elem.css( { \"width\": \"-=9px\" } );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9px' on width (hash)\" );\n\n\t$elem.css( \"width\", \"+=9\" );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9' on width (params)\" );\n\n\t$elem.css( \"width\", \"-=9\" );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9' on width (params)\" );\n\n\t$elem.css( \"width\", \"+=9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9px' on width (params)\" );\n\n\t$elem.css( \"width\", \"-=9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9px' on width (params)\" );\n\n\t$elem.css( \"width\", \"-=-9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'-=-9px' on width (params)\" );\n\n\t$elem.css( \"width\", \"+=-9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'+=-9px' on width (params)\" );\n\n\t$elem.css( { \"paddingLeft\": \"+=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"paddingLeft\": \"-=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"paddingLeft\": \"+=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4px' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"paddingLeft\": \"-=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4px' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"+=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4' on padding-left (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"-=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4' on padding-left (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"+=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4px' on padding-left (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"-=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4px' on padding-left (hash)\" );\n\n\t$elem.css( \"paddingLeft\", \"+=4\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4' on paddingLeft (params)\" );\n\n\t$elem.css( \"paddingLeft\", \"-=4\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4' on paddingLeft (params)\" );\n\n\t$elem.css( \"padding-left\", \"+=4px\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4px' on padding-left (params)\" );\n\n\t$elem.css( \"padding-left\", \"-=4px\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4px' on padding-left (params)\" );\n\n\t$elem.css( { \"opacity\": \"-=0.5\" } );\n\tassert.equal( $elem.css( \"opacity\" ), \"0.5\", \"'-=0.5' on opacity (hash)\" );\n\n\t$elem.css( { \"opacity\": \"+=0.5\" } );\n\tassert.equal( $elem.css( \"opacity\" ), \"1\", \"'+=0.5' on opacity (hash)\" );\n\n\t$elem.css( \"opacity\", \"-=0.5\" );\n\tassert.equal( $elem.css( \"opacity\" ), \"0.5\", \"'-=0.5' on opacity (params)\" );\n\n\t$elem.css( \"opacity\", \"+=0.5\" );\n\tassert.equal( $elem.css( \"opacity\" ), \"1\", \"'+=0.5' on opacity (params)\" );\n} );\n\nQUnit.test( \"css() non-px relative values (gh-1711)\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar cssCurrent,\n\t\tunits = {},\n\t\t$child = jQuery( \"#nothiddendivchild\" ),\n\t\tadd = function( prop, val, unit ) {\n\t\t\tvar difference,\n\t\t\t\tadjustment = ( val < 0 ? \"-=\" : \"+=\" ) + Math.abs( val ) + unit,\n\t\t\t\tmessage = prop + \": \" + adjustment,\n\t\t\t\tcssOld = cssCurrent,\n\t\t\t\texpected = cssOld + val * units[ prop ][ unit ];\n\n\t\t\t// Apply change\n\t\t\t$child.css( prop, adjustment );\n\t\t\tcssCurrent = parseFloat( $child.css( prop ) );\n\t\t\tmessage += \" (actual \" + round( cssCurrent, 2 ) + \"px, expected \" +\n\t\t\t\tround( expected, 2 ) + \"px)\";\n\n\t\t\t// Require a difference of no more than one pixel\n\t\t\tdifference = Math.abs( cssCurrent - expected );\n\t\t\tassert.ok( difference <= 1, message );\n\t\t},\n\t\tgetUnits = function( prop ) {\n\t\t\tunits[ prop ] = {\n\t\t\t\t\"px\": 1,\n\t\t\t\t\"em\": parseFloat( $child.css( prop, \"100em\" ).css( prop ) ) / 100,\n\t\t\t\t\"pt\": parseFloat( $child.css( prop, \"100pt\" ).css( prop ) ) / 100,\n\t\t\t\t\"pc\": parseFloat( $child.css( prop, \"100pc\" ).css( prop ) ) / 100,\n\t\t\t\t\"cm\": parseFloat( $child.css( prop, \"100cm\" ).css( prop ) ) / 100,\n\t\t\t\t\"mm\": parseFloat( $child.css( prop, \"100mm\" ).css( prop ) ) / 100,\n\t\t\t\t\"%\": parseFloat( $child.css( prop, \"500%\"  ).css( prop ) ) / 500\n\t\t\t};\n\t\t},\n\t\tround = function( num, fractionDigits ) {\n\t\t\tvar base = Math.pow( 10, fractionDigits );\n\t\t\treturn Math.round( num * base ) / base;\n\t\t};\n\n\tjQuery( \"#nothiddendiv\" ).css( { height: 1, padding: 0, width: 400 } );\n\t$child.css( { height: 1, padding: 0 } );\n\n\tgetUnits( \"width\" );\n\tcssCurrent = parseFloat( $child.css( \"width\", \"50%\" ).css( \"width\" ) );\n\tadd( \"width\",  25,    \"%\" );\n\tadd( \"width\", -50,    \"%\" );\n\tadd( \"width\",  10,   \"em\" );\n\tadd( \"width\",  10,   \"pt\" );\n\tadd( \"width\",  -2.3, \"pt\" );\n\tadd( \"width\",   5,   \"pc\" );\n\tadd( \"width\",  -5,   \"em\" );\n\tadd( \"width\",  +2,   \"cm\" );\n\tadd( \"width\", -15,   \"mm\" );\n\tadd( \"width\",  21,   \"px\" );\n\n\tgetUnits( \"lineHeight\" );\n\tcssCurrent = parseFloat( $child.css( \"lineHeight\", \"1em\" ).css( \"lineHeight\" ) );\n\tadd( \"lineHeight\",  50,  \"%\" );\n\tadd( \"lineHeight\",   2, \"em\" );\n\tadd( \"lineHeight\", -10, \"px\" );\n\tadd( \"lineHeight\",  20, \"pt\" );\n\tadd( \"lineHeight\",  30, \"pc\" );\n\tadd( \"lineHeight\",   1, \"cm\" );\n\tadd( \"lineHeight\", -44, \"mm\" );\n} );\n\nQUnit.test( \"css() mismatched relative values with bounded styles (gh-2144)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar right,\n\t\t$container = jQuery( \"<div/>\" )\n\t\t\t.css( { position: \"absolute\", width: \"400px\", fontSize: \"4px\" } )\n\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\t$el = jQuery( \"<div/>\" )\n\t\t\t.css( { position: \"absolute\", left: \"50%\", right: \"50%\" } )\n\t\t\t.appendTo( $container );\n\n\t$el.css( \"right\", \"-=25em\" );\n\tassert.equal( Math.round( parseFloat( $el.css( \"right\" ) ) ), 100,\n\t\t\"Constraints do not interfere with unit conversion\" );\n} );\n\nQUnit.test( \"css(String, Object)\", function( assert ) {\n\tassert.expect( 19 );\n\tvar j, div, display, ret, success;\n\n\tjQuery( \"#floatTest\" ).css( \"float\", \"left\" );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"float\" ), \"left\", \"Modified CSS float using \\\"float\\\": Assert float is left\" );\n\tjQuery( \"#floatTest\" ).css( \"font-size\", \"20px\" );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"font-size\" ), \"20px\", \"Modified CSS font-size: Assert font-size is 20px\" );\n\n\tjQuery.each( \"0,0.25,0.5,0.75,1\".split( \",\" ), function( i, n ) {\n\t\tjQuery( \"#foo\" ).css( \"opacity\", n );\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a String\" );\n\t\tjQuery( \"#foo\" ).css( \"opacity\", parseFloat( n ) );\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a Number\" );\n\t} );\n\tjQuery( \"#foo\" ).css( \"opacity\", \"\" );\n\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), \"1\", \"Assert opacity is 1 when set to an empty String\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.css( \"overflow\", \"visible\" );\n\tassert.equal( j.css( \"overflow\" ), \"visible\", \"Check node,textnode,comment css works\" );\n\tassert.equal( jQuery( \"#t2037 .hidden\" ).css( \"display\" ), \"none\", \"Make sure browser thinks it is hidden\" );\n\n\tdiv = jQuery( \"#nothiddendiv\" );\n\tdisplay = div.css( \"display\" );\n\tret = div.css( \"display\", undefined );\n\n\tassert.equal( ret, div, \"Make sure setting undefined returns the original set.\" );\n\tassert.equal( div.css( \"display\" ), display, \"Make sure that the display wasn't changed.\" );\n\n\tsuccess = true;\n\ttry {\n\t\tjQuery( \"#foo\" ).css( \"backgroundColor\", \"rgba(0, 0, 0, 0.1)\" );\n\t}\n\tcatch ( e ) {\n\t\tsuccess = false;\n\t}\n\tassert.ok( success, \"Setting RGBA values does not throw Error (#5509)\" );\n\n\tjQuery( \"#foo\" ).css( \"font\", \"7px/21px sans-serif\" );\n\tassert.strictEqual( jQuery( \"#foo\" ).css( \"line-height\" ), \"21px\",\n\t\t\"Set font shorthand property (#14759)\" );\n} );\n\nQUnit.test( \"css(String, Object) with negative values\", function( assert ) {\n\tassert.expect( 4 );\n\n\tjQuery( \"#nothiddendiv\" ).css( \"margin-top\", \"-10px\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"margin-left\", \"-10px\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"margin-top\" ), \"-10px\", \"Ensure negative top margins work.\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"margin-left\" ), \"-10px\", \"Ensure negative left margins work.\" );\n\n\tjQuery( \"#nothiddendiv\" ).css( \"position\", \"absolute\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"top\", \"-20px\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"left\", \"-20px\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"top\" ), \"-20px\", \"Ensure negative top values work.\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"left\" ), \"-20px\", \"Ensure negative left values work.\" );\n} );\n\nQUnit.test( \"css(Array)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar expectedMany = {\n\t\t\t\"overflow\": \"visible\",\n\t\t\t\"width\": \"16px\"\n\t\t},\n\t\texpectedSingle = {\n\t\t\t\"width\": \"16px\"\n\t\t},\n\t\telem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.deepEqual( elem.css( expectedMany ).css( [ \"overflow\", \"width\" ] ), expectedMany, \"Getting multiple element array\" );\n\tassert.deepEqual( elem.css( expectedSingle ).css( [ \"width\" ] ), expectedSingle, \"Getting single element array\" );\n} );\n\nQUnit.test( \"css(String, Function)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( \"font-size\", function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).each( function() {\n\t\tvar computedSize = jQuery( this ).css( \"font-size\" ),\n\t\t\texpectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t} );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\nQUnit.test( \"css(String, Function) with incoming value\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( \"font-size\", function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( \"font-size\", function( i, computedSize ) {\n\t\tvar expectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t\treturn computedSize;\n\t} );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\nQUnit.test( \"css(Object) where values are Functions\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( { \"fontSize\": function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} } );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).each( function() {\n\t\tvar computedSize = jQuery( this ).css( \"font-size\" ),\n\t\t\texpectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t} );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\nQUnit.test( \"css(Object) where values are Functions with incoming values\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( { \"fontSize\": function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} } );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( { \"font-size\": function( i, computedSize ) {\n\t\tvar expectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t\treturn computedSize;\n\t} } );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\n// .show(), .hide(), can be excluded from the build\nif ( jQuery.fn.show && jQuery.fn.hide ) {\n\nQUnit.test( \"show()\", function( assert ) {\n\n\tassert.expect( 18 );\n\n\tvar hiddendiv, div, pass, test;\n\t\thiddendiv = jQuery( \"div.hidden\" );\n\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"none\", \"hiddendiv is display: none\" );\n\n\thiddendiv.css( \"display\", \"block\" );\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.show();\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.css( \"display\", \"\" );\n\n\tpass = true;\n\tdiv = jQuery( \"#qunit-fixture div\" );\n\tdiv.show().each( function() {\n\t\tif ( this.style.display === \"none\" ) {\n\t\t\tpass = false;\n\t\t}\n\t} );\n\tassert.ok( pass, \"Show\" );\n\n\tjQuery(\n\t\t\"<div id='show-tests'>\" +\n\t\t\"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" +\n\t\t\"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>\" +\n\t\t\"<ul><li></li></ul></div>\"\n\t).appendTo( \"#qunit-fixture\" ).find( \"*\" ).css( \"display\", \"none\" );\n\n\ttest = {\n\t\t\"div\": \"block\",\n\t\t\"p\": \"block\",\n\t\t\"a\": \"inline\",\n\t\t\"code\": \"inline\",\n\t\t\"pre\": \"block\",\n\t\t\"span\": \"inline\",\n\t\t\"table\": \"table\",\n\t\t\"thead\": \"table-header-group\",\n\t\t\"tbody\": \"table-row-group\",\n\t\t\"tr\": \"table-row\",\n\t\t\"th\": \"table-cell\",\n\t\t\"td\": \"table-cell\",\n\t\t\"ul\": \"block\",\n\t\t\"li\": \"list-item\"\n\t};\n\n\tjQuery.each( test, function( selector, expected ) {\n\t\tvar elem = jQuery( selector, \"#show-tests\" ).show();\n\t\tassert.equal( elem.css( \"display\" ), expected, \"Show using correct display type for \" + selector );\n\t} );\n\n\t// Make sure that showing or hiding a text node doesn't cause an error\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).show().remove();\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).hide().remove();\n} );\n\nQUnit.test( \"show/hide detached nodes\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar div, span, tr;\n\n\tdiv = jQuery( \"<div>\" ).hide();\n\tassert.equal( div.css( \"display\" ), \"none\", \"hide() updates inline style of a detached div\" );\n\tdiv.appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A hidden-while-detached div is hidden after attachment\" );\n\tdiv.show();\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A hidden-while-detached div can be shown after attachment\" );\n\n\tdiv = jQuery( \"<div class='hidden'>\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached div can be hidden by the CSS cascade\" );\n\n\tdiv = jQuery( \"<div><div class='hidden'></div></div>\" ).children( \"div\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached div inside a visible div can be hidden by the CSS cascade\" );\n\n\tspan = jQuery( \"<span class='hidden'/>\" );\n\tspan.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( span.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached span can be hidden by the CSS cascade\" );\n\n\tdiv = jQuery( \"div.hidden\" );\n\tdiv.detach().show();\n\tassert.ok( !div[ 0 ].style.display,\n\t\t\"show() does not update inline style of a cascade-hidden-before-detach div\" );\n\tdiv.appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached cascade-hidden div is hidden after attachment\" );\n\tdiv.remove();\n\n\tspan = jQuery( \"<span class='hidden'/>\" );\n\tspan.appendTo( \"#qunit-fixture\" ).detach().show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( span.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached cascade-hidden span is hidden after attachment\" );\n\tspan.remove();\n\n\tdiv = jQuery( document.createElement( \"div\" ) );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.ok( !div[ 0 ].style.display, \"A shown-while-detached div has no inline style\" );\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A shown-while-detached div has default display after attachment\" );\n\tdiv.remove();\n\n\tdiv = jQuery( \"<div style='display: none'>\" );\n\tdiv.show();\n\tassert.equal( div[ 0 ].style.display, \"\",\n\t\t\"show() updates inline style of a detached inline-hidden div\" );\n\tdiv.appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A shown-while-detached inline-hidden div has default display after attachment\" );\n\n\tdiv = jQuery( \"<div><div style='display: none'></div></div>\" ).children( \"div\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A shown-while-detached inline-hidden div inside a visible div has default display \" +\n\t\t\"after attachment\" );\n\n\tspan = jQuery( \"<span style='display: none'/>\" );\n\tspan.show();\n\tassert.equal( span[ 0 ].style.display, \"\",\n\t\t\"show() updates inline style of a detached inline-hidden span\" );\n\tspan.appendTo( \"#qunit-fixture\" );\n\tassert.equal( span.css( \"display\" ), \"inline\",\n\t\t\"A shown-while-detached inline-hidden span has default display after attachment\" );\n\n\tdiv = jQuery( \"<div style='display: inline'/>\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"inline\",\n\t\t\"show() does not update inline style of a detached inline-visible div\" );\n\tdiv.remove();\n\n\ttr = jQuery( \"<tr/>\" );\n\tjQuery( \"#table\" ).append( tr );\n\ttr.detach().hide().show();\n\n\tassert.ok( !tr[ 0 ].style.display, \"Not-hidden detached tr elements have no inline style\" );\n\ttr.remove();\n\n\tspan = jQuery( \"<span/>\" ).hide().show();\n\tassert.ok( !span[ 0 ].style.display, \"Not-hidden detached span elements have no inline style\" );\n\tspan.remove();\n} );\n\nQUnit[\n\tdocument.body.attachShadow && document.body.getRootNode ?\n\t\t\"test\" :\n\t\t\"skip\"\n\t]( \"show/hide shadow child nodes\", function( assert ) {\n\tassert.expect( 28 );\n\tjQuery( \"<div id='shadowHost'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tvar shadowHost = document.querySelector( \"#shadowHost\" );\n\tvar shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );\n\tshadowRoot.innerHTML = \"\" +\n\t\t\"<style>.hidden{display: none;}</style>\" +\n\t\t\"<div class='hidden' id='shadowdiv'>\" +\n\t\t\"\t<p class='hidden' id='shadowp'>\" +\n\t\t\"\t\t<a href='#' class='hidden' id='shadowa'></a>\" +\n\t\t\"\t</p>\" +\n\t\t\"\t<code class='hidden' id='shadowcode'></code>\" +\n\t\t\"\t<pre class='hidden' id='shadowpre'></pre>\" +\n\t\t\"\t<span class='hidden' id='shadowspan'></span>\" +\n\t\t\"</div>\" +\n\t\t\"<table class='hidden' id='shadowtable'>\" +\n\t\t\"\t<thead class='hidden' id='shadowthead'>\" +\n\t\t\"\t\t<tr class='hidden' id='shadowtr'>\" +\n\t\t\"\t\t\t<th class='hidden' id='shadowth'></th>\" +\n\t\t\"\t\t</tr>\" +\n\t\t\"\t</thead>\" +\n\t\t\"\t<tbody class='hidden' id='shadowtbody'>\" +\n\t\t\"\t\t<tr class='hidden'>\" +\n\t\t\"\t\t\t<td class='hidden' id='shadowtd'></td>\" +\n\t\t\"\t\t</tr>\" +\n\t\t\"\t</tbody>\" +\n\t\t\"</table>\" +\n\t\t\"<ul class='hidden' id='shadowul'>\" +\n\t\t\"\t<li class='hidden' id='shadowli'></li>\" +\n\t\t\"</ul>\";\n\n\tvar test = {\n\t\t\"div\": \"block\",\n\t\t\"p\": \"block\",\n\t\t\"a\": \"inline\",\n\t\t\"code\": \"inline\",\n\t\t\"pre\": \"block\",\n\t\t\"span\": \"inline\",\n\t\t\"table\": \"table\",\n\t\t\"thead\": \"table-header-group\",\n\t\t\"tbody\": \"table-row-group\",\n\t\t\"tr\": \"table-row\",\n\t\t\"th\": \"table-cell\",\n\t\t\"td\": \"table-cell\",\n\t\t\"ul\": \"block\",\n\t\t\"li\": \"list-item\"\n\t};\n\n\tjQuery.each( test, function( selector, expected ) {\n\t\tvar shadowChild = shadowRoot.querySelector( \"#shadow\" + selector );\n\t\tvar $shadowChild = jQuery( shadowChild );\n\t\tassert.strictEqual( $shadowChild.css( \"display\" ), \"none\", \"is hidden\" );\n\t\t$shadowChild.show();\n\t\tassert.strictEqual( $shadowChild.css( \"display\" ), expected, \"Show using correct display type for \" + selector );\n\t} );\n} );\n\nQUnit.test( \"hide hidden elements (bug #7141)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar div = jQuery( \"<div style='display:none'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\", \"Element is hidden by default\" );\n\tdiv.hide();\n\tassert.ok( !jQuery._data( div, \"olddisplay\" ), \"olddisplay is undefined after hiding an already-hidden element\" );\n\tdiv.show();\n\tassert.equal( div.css( \"display\" ), \"block\", \"Show a double-hidden element\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"show() after hide() should always set display to initial value (#14750)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div />\" ),\n\t\tfixture = jQuery( \"#qunit-fixture\" );\n\n\tfixture.append( div );\n\n\tdiv.css( \"display\", \"inline\" ).hide().show().css( \"display\", \"list-item\" ).hide().show();\n\tassert.equal( div.css( \"display\" ), \"list-item\", \"should get last set display value\" );\n} );\n\nQUnit.test( \"show/hide 3.0, default display\", function( assert ) {\n\n\tassert.expect( 36 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div/>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<div data-expected-display='block'/>\" +\n\t\t\t\t\"<span data-expected-display='inline'/>\" +\n\t\t\t\t\"<ul><li data-expected-display='list-item'/></ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, default body display\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar hideBody = supportjQuery( \"<style>body{display:none}</style>\" ).appendTo( document.head ),\n\t\tbody = jQuery( document.body );\n\n\tassert.equal( body.css( \"display\" ), \"none\", \"Correct initial display\" );\n\n\tbody.show();\n\n\tassert.equal( body.css( \"display\" ), \"block\", \"Correct display after .show()\" );\n\n\thideBody.remove();\n} );\n\nQUnit.test( \"show/hide 3.0, cascade display\", function( assert ) {\n\n\tassert.expect( 36 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div/>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<span class='block'/><div class='inline'/><div class='list-item'/>\" )\n\t\t\t.children();\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), this.className,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, inline display\", function( assert ) {\n\n\tassert.expect( 96 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div/>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<span data-expected-display='block' style='display:block'/>\" +\n\t\t\t\t\"<span class='list-item' data-expected-display='block' style='display:block'/>\" +\n\t\t\t\t\"<div data-expected-display='inline' style='display:inline'/>\" +\n\t\t\t\t\"<div class='list-item' data-expected-display='inline' style='display:inline'/>\" +\n\t\t\t\t\"<ul>\" +\n\t\t\t\t\t\"<li data-expected-display='block' style='display:block'/>\" +\n\t\t\t\t\t\"<li class='inline' data-expected-display='block' style='display:block'/>\" +\n\t\t\t\t\t\"<li data-expected-display='inline' style='display:inline'/>\" +\n\t\t\t\t\t\"<li class='block' data-expected-display='inline' style='display:inline'/>\" +\n\t\t\t\t\"</ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, expected, name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, cascade hidden\", function( assert ) {\n\n\tassert.expect( 72 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div/>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<div class='hidden' data-expected-display='block'/>\" +\n\t\t\t\t\"<div class='hidden' data-expected-display='block' style='display:none'/>\" +\n\t\t\t\t\"<span class='hidden' data-expected-display='inline'/>\" +\n\t\t\t\t\"<span class='hidden' data-expected-display='inline' style='display:none'/>\" +\n\t\t\t\t\"<ul>\" +\n\t\t\t\t\t\"<li class='hidden' data-expected-display='list-item'/>\" +\n\t\t\t\t\t\"<li class='hidden' data-expected-display='list-item' style='display:none'/>\" +\n\t\t\t\t\"</ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, expected, name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, inline hidden\", function( assert ) {\n\n\tassert.expect( 84 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div/>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<span data-expected-display='inline' style='display:none'/>\" +\n\t\t\t\t\"<span class='list-item' data-expected-display='list-item' style='display:none'/>\" +\n\t\t\t\t\"<div data-expected-display='block' style='display:none'/>\" +\n\t\t\t\t\"<div class='list-item' data-expected-display='list-item' style='display:none'/>\" +\n\t\t\t\t\"<ul>\" +\n\t\t\t\t\t\"<li data-expected-display='list-item' style='display:none'/>\" +\n\t\t\t\t\t\"<li class='block' data-expected-display='block' style='display:none'/>\" +\n\t\t\t\t\t\"<li class='inline' data-expected-display='inline' style='display:none'/>\" +\n\t\t\t\t\"</ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\n}\n\nQUnit[ jQuery.find.compile && jQuery.fn.toggle ? \"test\" : \"skip\" ]( \"toggle()\", function( assert ) {\n\tassert.expect( 9 );\n\tvar div, oldHide,\n\t\tx = jQuery( \"#foo\" );\n\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle();\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle();\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle( false );\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n\n\tdiv = jQuery( \"<div style='display:none'><div></div></div>\" ).appendTo( \"#qunit-fixture\" );\n\tx = div.find( \"div\" );\n\tassert.strictEqual( x.toggle().css( \"display\" ), \"none\", \"is hidden\" );\n\tassert.strictEqual( x.toggle().css( \"display\" ), \"block\", \"is visible\" );\n\n\t// Ensure hide() is called when toggled (#12148)\n\toldHide = jQuery.fn.hide;\n\tjQuery.fn.hide = function() {\n\t\tassert.ok( true, name + \" method called on toggle\" );\n\t\treturn oldHide.apply( this, arguments );\n\t};\n\tx.toggle( name === \"show\" );\n\tjQuery.fn.hide = oldHide;\n} );\n\nQUnit[ jQuery.find.compile && jQuery.fn.toggle ? \"test\" : \"skip\" ]( \"detached toggle()\", function( assert ) {\n\tassert.expect( 6 );\n\tvar detached = jQuery( \"<p><a/><p>\" ).find( \"*\" ).addBack(),\n\t\thiddenDetached = jQuery( \"<p><a/></p>\" ).find( \"*\" ).addBack().css( \"display\", \"none\" ),\n\t\tcascadeHiddenDetached = jQuery( \"<p><a/></p>\" ).find( \"*\" ).addBack().addClass( \"hidden\" );\n\n\tdetached.toggle();\n\tdetached.appendTo( \"#qunit-fixture\" );\n\tassert.equal( detached[ 0 ].style.display, \"none\", \"detached element\" );\n\tassert.equal( detached[ 1 ].style.display, \"none\", \"element in detached tree\" );\n\n\thiddenDetached.toggle();\n\thiddenDetached.appendTo( \"#qunit-fixture\" );\n\tassert.equal( hiddenDetached[ 0 ].style.display, \"\", \"detached, hidden element\" );\n\tassert.equal( hiddenDetached[ 1 ].style.display, \"\", \"hidden element in detached tree\" );\n\n\tcascadeHiddenDetached.toggle();\n\tcascadeHiddenDetached.appendTo( \"#qunit-fixture\" );\n\tassert.equal( cascadeHiddenDetached[ 0 ].style.display, \"none\",\n\t\t\"detached, cascade-hidden element\" );\n\tassert.equal( cascadeHiddenDetached[ 1 ].style.display, \"none\",\n\t\t\"cascade-hidden element in detached tree\" );\n} );\n\nQUnit[ jQuery.find.compile && jQuery.fn.toggle &&\n\tdocument.body.attachShadow && document.body.getRootNode ?\n\t\t\"test\" :\n\t\t\"skip\"\n]( \"shadow toggle()\", function( assert ) {\n\tassert.expect( 4 );\n\tjQuery( \"<div id='shadowHost'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tvar shadowHost = document.querySelector( \"#shadowHost\" );\n\tvar shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );\n\tshadowRoot.innerHTML = \"\" +\n\t\t\"<style>.hidden{display: none;}</style>\" +\n\t\t\"<div id='shadowHiddenChild' class='hidden'></div>\" +\n\t\t\"<div id='shadowChild'></div>\";\n\tvar shadowChild = shadowRoot.querySelector( \"#shadowChild\" );\n\tvar shadowHiddenChild = shadowRoot.querySelector( \"#shadowHiddenChild\" );\n\n\tvar $shadowChild = jQuery( shadowChild );\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"block\", \"is visible\" );\n\t$shadowChild.toggle();\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"none\", \"is hidden\" );\n\n\t$shadowChild = jQuery( shadowHiddenChild );\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"none\", \"is hidden\" );\n\t$shadowChild.toggle();\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"block\", \"is visible\" );\n} );\n\nQUnit.test( \"jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $checkedtest = jQuery( \"#checkedtest\" );\n\tjQuery.css( $checkedtest[ 0 ], \"height\" );\n\n\tassert.ok( jQuery( \"input[type='radio']\", $checkedtest ).first().attr( \"checked\" ), \"Check first radio still checked.\" );\n\tassert.ok( !jQuery( \"input[type='radio']\", $checkedtest ).last().attr( \"checked\" ), \"Check last radio still NOT checked.\" );\n\tassert.ok( jQuery( \"input[type='checkbox']\", $checkedtest ).first().attr( \"checked\" ), \"Check first checkbox still checked.\" );\n\tassert.ok( !jQuery( \"input[type='checkbox']\", $checkedtest ).last().attr( \"checked\" ), \"Check last checkbox still NOT checked.\" );\n} );\n\nQUnit.test( \"internal ref to elem.runtimeStyle (bug #7608)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar result = true;\n\n\ttry {\n\t\tjQuery( \"#foo\" ).css( { \"width\": \"0%\" } ).css( \"width\" );\n\t} catch ( e ) {\n\t\tresult = false;\n\t}\n\n\tassert.ok( result, \"elem.runtimeStyle does not throw exception\" );\n} );\n\nQUnit.test( \"computed margins (trac-3333; gh-2237)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"#foo\" ),\n\t\t$child = jQuery( \"#en\" );\n\n\t$div.css( {\n\t\t\"width\": \"1px\",\n\t\t\"marginRight\": 0\n\t} );\n\tassert.equal( $div.css( \"marginRight\" ), \"0px\",\n\t\t\"marginRight correctly calculated with a width and display block\" );\n\n\t$div.css( {\n\t\tposition: \"absolute\",\n\t\ttop: 0,\n\t\tleft: 0,\n\t\twidth: \"100px\"\n\t} );\n\t$child.css( {\n\t\twidth: \"50px\",\n\t\tmargin: \"auto\"\n\t} );\n\tassert.equal( $child.css( \"marginLeft\" ), \"25px\", \"auto margins are computed to pixels\" );\n} );\n\nQUnit.test( \"box model properties incorrectly returning % instead of px, see #10639 and #12088\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar container = jQuery( \"<div/>\" ).width( 400 ).appendTo( \"#qunit-fixture\" ),\n\t\tel = jQuery( \"<div/>\" ).css( { \"width\": \"50%\", \"marginRight\": \"50%\" } ).appendTo( container ),\n\t\tel2 = jQuery( \"<div/>\" ).css( { \"width\": \"50%\", \"minWidth\": \"300px\", \"marginLeft\": \"25%\" } ).appendTo( container );\n\n\tassert.equal( el.css( \"marginRight\" ), \"200px\", \"css('marginRight') returning % instead of px, see #10639\" );\n\tassert.equal( el2.css( \"marginLeft\" ), \"100px\", \"css('marginLeft') returning incorrect pixel value, see #12088\" );\n} );\n\nQUnit.test( \"jQuery.cssProps behavior, (bug #8402)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div>\" ).appendTo( document.body ).css( {\n\t\t\"position\": \"absolute\",\n\t\t\"top\": 0,\n\t\t\"left\": 10\n\t} );\n\tjQuery.cssProps.top = \"left\";\n\tassert.equal( div.css( \"top\" ), \"10px\", \"the fixed property is used when accessing the computed style\" );\n\tdiv.css( \"top\", \"100px\" );\n\tassert.equal( div[ 0 ].style.left, \"100px\", \"the fixed property is used when setting the style\" );\n\n\t// cleanup jQuery.cssProps\n\tjQuery.cssProps.top = undefined;\n} );\n\nQUnit.test( \"widows & orphans #8936\", function( assert ) {\n\n\tvar $p = jQuery( \"<p>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.expect( 2 );\n\n\t$p.css( {\n\t\t\"widows\": 3,\n\t\t\"orphans\": 3\n\t} );\n\n\tassert.equal( $p.css( \"widows\" ) || jQuery.style( $p[ 0 ], \"widows\" ), 3, \"widows correctly set to 3\" );\n\tassert.equal( $p.css( \"orphans\" ) || jQuery.style( $p[ 0 ], \"orphans\" ), 3, \"orphans correctly set to 3\" );\n\n\t$p.remove();\n} );\n\nQUnit.test( \"can't get css for disconnected in IE<9, see #10254 and #8388\", function( assert ) {\n\tassert.expect( 2 );\n\tvar span, div;\n\n\tspan = jQuery( \"<span/>\" ).css( \"background-image\", \"url(\" + baseURL + \"1x1.jpg)\" );\n\tassert.notEqual( span.css( \"background-image\" ), null, \"can't get background-image in IE<9, see #10254\" );\n\n\tdiv = jQuery( \"<div/>\" ).css( \"top\", 10 );\n\tassert.equal( div.css( \"top\" ), \"10px\", \"can't get top in IE<9, see #8388\" );\n} );\n\nQUnit.test( \"Ensure styles are retrieving from parsed html on document fragments\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $span = jQuery(\n\t\tjQuery.parseHTML( \"<span style=\\\"font-family: Cuprum,sans-serif; font-size: 14px; color: #999999;\\\">some text</span>\" )\n\t);\n\n\tassert.equal( $span.css( \"font-size\" ), \"14px\", \"Font-size retrievable on parsed HTML node\" );\n} );\n\nQUnit.test( \"can't get background-position in IE<9, see #10796\", function( assert ) {\n\tvar div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tunits = [\n\t\t\t\"0 0\",\n\t\t\t\"12px 12px\",\n\t\t\t\"13px 12em\",\n\t\t\t\"12em 13px\",\n\t\t\t\"12em center\",\n\t\t\t\"+12em center\",\n\t\t\t\"12.2em center\",\n\t\t\t\"center center\"\n\t\t],\n\t\tl = units.length,\n\t\ti = 0;\n\n\tassert.expect( l );\n\n\tfor ( ; i < l; i++ ) {\n\t\tdiv.css( \"background-position\", units [ i ] );\n\t\tassert.ok( div.css( \"background-position\" ), \"can't get background-position in IE<9, see #10796\" );\n\t}\n} );\n\nif ( jQuery.fn.offset ) {\n\tQUnit.test( \"percentage properties for left and top should be transformed to pixels, see #9505\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar parent = jQuery( \"<div style='position:relative;width:200px;height:200px;margin:0;padding:0;border-width:0'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t\tdiv = jQuery( \"<div style='position: absolute; width: 20px; height: 20px; top:50%; left:50%'></div>\" ).appendTo( parent );\n\n\t\tassert.equal( div.css( \"top\" ), \"100px\", \"position properties not transformed to pixels, see #9505\" );\n\t\tassert.equal( div.css( \"left\" ), \"100px\", \"position properties not transformed to pixels, see #9505\" );\n\t} );\n}\n\nQUnit.test( \"Do not append px (#9548, #12990, #2792)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$div.css( \"fill-opacity\", 1 );\n\n\tassert.equal( $div.css( \"fill-opacity\" ), 1, \"Do not append px to 'fill-opacity'\" );\n\n\t$div.css( \"column-count\", 1 );\n\tif ( $div.css( \"column-count\" ) !== undefined ) {\n\t\tassert.equal( $div.css( \"column-count\" ), 1, \"Do not append px to 'column-count'\" );\n\t} else {\n\t\tassert.ok( true, \"No support for column-count CSS property\" );\n\t}\n\n\t$div.css( \"animation-iteration-count\", 2 );\n\tif ( $div.css( \"animation-iteration-count\" ) !== undefined ) {\n\t\t// if $div.css( \"animation-iteration-count\" ) return \"1\",\n\t\t// it actually return the default value of animation-iteration-count\n\t\tassert.equal( $div.css( \"animation-iteration-count\" ), 2, \"Do not append px to 'animation-iteration-count'\" );\n\t} else {\n\t\tassert.ok( true, \"No support for animation-iteration-count CSS property\" );\n\t}\n} );\n\n\nQUnit[\n\tjQuery( \"<div/>\" )[ 0 ].style.gridArea === \"\" ?\n\t\"test\" :\n\t\"skip\"\n]( \"Do not append px to CSS Grid-related properties (gh-4007)\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar prop, value, subProp, subValue, $div,\n\t\tgridProps = {\n\t\t\t\"grid-area\": {\n\t\t\t\t\"grid-row-start\": \"2\",\n\t\t\t\t\"grid-row-end\": \"auto\",\n\t\t\t\t\"grid-column-start\": \"auto\",\n\t\t\t\t\"grid-column-end\": \"auto\"\n\t\t\t},\n\t\t\t\"grid-column\": {\n\t\t\t\t\"grid-column-start\": \"2\",\n\t\t\t\t\"grid-column-end\": \"auto\"\n\t\t\t},\n\t\t\t\"grid-column-end\": true,\n\t\t\t\"grid-column-start\": true,\n\t\t\t\"grid-row\": {\n\t\t\t\t\"grid-row-start\": \"2\",\n\t\t\t\t\"grid-row-end\": \"auto\"\n\t\t\t},\n\t\t\t\"grid-row-end\": true,\n\t\t\t\"grid-row-start\": true\n\t\t};\n\n\tfor ( prop in gridProps ) {\n\t\t$div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\t\t$div.css( prop, 2 );\n\n\t\tvalue = gridProps[ prop ];\n\n\t\tif ( typeof value === \"object\" ) {\n\t\t\tfor ( subProp in value ) {\n\t\t\t\tsubValue = value[ subProp ];\n\t\t\t\tassert.equal( $div.css( subProp ), subValue,\n\t\t\t\t\t\"Do not append px to '\" + prop + \"' (retrieved \" + subProp + \")\" );\n\t\t\t}\n\t\t} else {\n\t\t\tassert.equal( $div.css( prop ), \"2\", \"Do not append px to '\" + prop + \"'\" );\n\t\t}\n\n\t\t$div.remove();\n\t}\n} );\n\nQUnit.test( \"css('width') and css('height') should respect box-sizing, see #11004\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar el_dis = jQuery( \"<div style='width:300px;height:300px;margin:2px;padding:2px;box-sizing:border-box;'>test</div>\" ),\n\t\tel = el_dis.clone().appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( el.css( \"width\" ), el.css( \"width\", el.css( \"width\" ) ).css( \"width\" ), \"css('width') is not respecting box-sizing, see #11004\" );\n\tassert.equal( el_dis.css( \"width\" ), el_dis.css( \"width\", el_dis.css( \"width\" ) ).css( \"width\" ), \"css('width') is not respecting box-sizing for disconnected element, see #11004\" );\n\tassert.equal( el.css( \"height\" ), el.css( \"height\", el.css( \"height\" ) ).css( \"height\" ), \"css('height') is not respecting box-sizing, see #11004\" );\n\tassert.equal( el_dis.css( \"height\" ), el_dis.css( \"height\", el_dis.css( \"height\" ) ).css( \"height\" ), \"css('height') is not respecting box-sizing for disconnected element, see #11004\" );\n} );\n\nQUnit.test( \"table rows width/height should be unaffected by inline styles\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar table = jQuery(\n\t\t\"<table>\\n\" +\n\t\t\"  <tr id=\\\"row\\\" style=\\\"height: 1px; width: 1px;\\\">\\n\" +\n\t\t\"    <td>\\n\" +\n\t\t\"      <div style=\\\"height: 100px; width: 100px;\\\"></div>\\n\" +\n\t\t\"    </div>\\n\" +\n\t\t\"  </tr>\\n\" +\n\t\t\"</table>\"\n\t);\n\tvar tr = table.find( \"tr\" );\n\n\ttable.appendTo( \"#qunit-fixture\" );\n\n\tassert.ok( parseInt( tr.css( \"width\" ) ) > 10, \"tr width unaffected by inline style\" );\n\tassert.ok( parseInt( tr.css( \"height\" ) ) > 10, \"tr height unaffected by inline style\" );\n} );\n\ntestIframe(\n\t\"css('width') should work correctly before document ready (#14084)\",\n\t\"css/cssWidthBeforeDocReady.html\",\n\tfunction( assert, jQuery, window, document, cssWidthBeforeDocReady ) {\n\t\tassert.expect( 1 );\n\t\tassert.strictEqual( cssWidthBeforeDocReady, \"100px\", \"elem.css('width') works correctly before document ready\" );\n\t}\n);\n\ntestIframe(\n\t\"css('width') should work correctly with browser zooming\",\n\t\"css/cssWidthBrowserZoom.html\",\n\tfunction( assert, jQuery, window, document, widthBeforeSet, widthAfterSet ) {\n\t\tassert.expect( 2 );\n\t\tassert.strictEqual( widthBeforeSet, \"100px\", \"elem.css('width') works correctly with browser zoom\" );\n\t\tassert.strictEqual( widthAfterSet, \"100px\", \"elem.css('width', val) works correctly with browser zoom\" );\n\t}\n);\n\n( function() {\n\tvar supportsFractionalGBCR,\n\t\tqunitFixture = document.getElementById( \"qunit-fixture\" ),\n\t\tdiv = document.createElement( \"div\" );\n\tdiv.style.width = \"3.3px\";\n\tqunitFixture.appendChild( div );\n\tsupportsFractionalGBCR = div.getBoundingClientRect().width.toFixed( 1 ) === \"3.3\";\n\tqunitFixture.removeChild( div );\n\n\tQUnit.test( \"css('width') and css('height') should return fractional values for nodes in the document\", function( assert ) {\n\t\tif ( !supportsFractionalGBCR ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"This browser doesn't support fractional values in getBoundingClientRect()\" );\n\t\t\treturn;\n\t\t}\n\n\t\tassert.expect( 2 );\n\n\t\tvar el = jQuery( \"<div class='test-div'></div>\" ).appendTo( \"#qunit-fixture\" );\n\t\tjQuery( \"<style>.test-div { width: 33.3px; height: 88.8px; }</style>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\tassert.equal( Number( el.css( \"width\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"33.3\",\n\t\t\t\"css('width') should return fractional values\" );\n\t\tassert.equal( Number( el.css( \"height\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"88.8\",\n\t\t\t\"css('height') should return fractional values\" );\n\t} );\n\n\tQUnit.test( \"css('width') and css('height') should return fractional values for disconnected nodes\", function( assert ) {\n\t\tif ( !supportsFractionalGBCR ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"This browser doesn't support fractional values in getBoundingClientRect()\" );\n\t\t\treturn;\n\t\t}\n\n\t\tassert.expect( 2 );\n\n\t\tvar el = jQuery( \"<div style='width: 33.3px; height: 88.8px;'></div>\" );\n\n\t\tassert.equal( Number( el.css( \"width\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"33.3\",\n\t\t\t\"css('width') should return fractional values\" );\n\t\tassert.equal( Number( el.css( \"height\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"88.8\",\n\t\t\t\"css('height') should return fractional values\" );\n\t} );\n} )();\n\nQUnit.test( \"certain css values of 'normal' should be convertable to a number, see #8627\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar el = jQuery( \"<div style='letter-spacing:normal;font-weight:normal;'>test</div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.ok( !isNaN( parseFloat( el.css( \"letterSpacing\" ) ) ), \"css('letterSpacing') not convertable to number, see #8627\" );\n\tassert.ok( !isNaN( parseFloat( el.css( \"fontWeight\" ) ) ), \"css('fontWeight') not convertable to number, see #8627\" );\n\tassert.equal( typeof el.css( \"fontWeight\" ), \"string\", \".css() returns a string\" );\n} );\n\n// Support: IE 9 only\n// Only run this test in IE9\nif ( document.documentMode === 9 ) {\n\tQUnit.test( \".css('filter') returns a string in IE9, see #12537\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tassert.equal( jQuery( \"<div style='-ms-filter:\\\"progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#ECECEC)\\\";'></div>\" ).css( \"filter\" ), \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#ECECEC)\", \"IE9 returns the correct value from css('filter').\" );\n\t} );\n}\n\nQUnit.test( \"cssHooks - expand\", function( assert ) {\n\tassert.expect( 15 );\n\tvar result,\n\t\tproperties = {\n\t\t\tmargin: [ \"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\" ],\n\t\t\tborderWidth: [ \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\" ],\n\t\t\tpadding: [ \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\" ]\n\t\t};\n\n\tjQuery.each( properties, function( property, keys ) {\n\t\tvar hook = jQuery.cssHooks[ property ],\n\t\t\texpected = {};\n\t\tjQuery.each( keys, function( _, key ) {\n\t\t\texpected[ key ] = 10;\n\t\t} );\n\t\tresult = hook.expand( 10 );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with a number\" );\n\n\t\tjQuery.each( keys, function( _, key ) {\n\t\t\texpected[ key ] = \"10px\";\n\t\t} );\n\t\tresult = hook.expand( \"10px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px'\" );\n\n\t\texpected[ keys[ 1 ] ] = expected[ keys[ 3 ] ] = \"20px\";\n\t\tresult = hook.expand( \"10px 20px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px 20px'\" );\n\n\t\texpected[ keys[ 2 ] ] = \"30px\";\n\t\tresult = hook.expand( \"10px 20px 30px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px 20px 30px'\" );\n\n\t\texpected[ keys[ 3 ] ] = \"40px\";\n\t\tresult = hook.expand( \"10px 20px 30px 40px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px 20px 30px 40px'\" );\n\n\t} );\n\n} );\n\nQUnit.test( \"css opacity consistency across browsers (#12685)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar el,\n\t\tfixture = jQuery( \"#qunit-fixture\" );\n\n\t// Append style element\n\tjQuery( \"<style>.opacity_t12685 { opacity: 0.1; }</style>\" ).appendTo( fixture );\n\n\tel = jQuery( \"<div class='opacity_t12685'></div>\" ).appendTo( fixture );\n\n\tassert.equal( Math.round( el.css( \"opacity\" ) * 100 ), 10, \"opacity from style sheet\" );\n\tel.css( \"opacity\", 0.3 );\n\tassert.equal( Math.round( el.css( \"opacity\" ) * 100 ), 30, \"override opacity\" );\n\tel.css( \"opacity\", \"\" );\n\tassert.equal( Math.round( el.css( \"opacity\" ) * 100 ), 10, \"remove opacity override\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \":visible/:hidden selectors\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar $div, $table, $a;\n\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modifying CSS display: Assert element is visible\" );\n\tjQuery( \"#nothiddendiv\" ).css( { display: \"none\" } );\n\tassert.ok( !jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is hidden\" );\n\tjQuery( \"#nothiddendiv\" ).css( { \"display\": \"block\" } );\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is visible\" );\n\tassert.ok( !jQuery( window ).is( \":visible\" ), \"Calling is(':visible') on window does not throw an exception (#10267).\" );\n\tassert.ok( !jQuery( document ).is( \":visible\" ), \"Calling is(':visible') on document does not throw an exception (#10267).\" );\n\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modifying CSS display: Assert element is visible\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"display\", \"none\" );\n\tassert.ok( !jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is hidden\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"display\", \"block\" );\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is visible\" );\n\n\tassert.ok( jQuery( \"#siblingspan\" ).is( \":visible\" ), \"Span with no content is visible\" );\n\t$div = jQuery( \"<div><span></span></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $div.find( \":visible\" ).length, 1, \"Span with no content is visible\" );\n\t$div.css( { width: 0, height: 0, overflow: \"hidden\" } );\n\tassert.ok( $div.is( \":visible\" ), \"Div with width and height of 0 is still visible (gh-2227)\" );\n\n\t// Safari 6-7 and iOS 6-7 report 0 width for br elements\n\t// When newer browsers propagate, re-enable this test\n\t// $br = jQuery( \"<br/>\" ).appendTo( \"#qunit-fixture\" );\n\t// assert.ok( $br.is( \":visible\" ), \"br element is visible\" );\n\n\t$table = jQuery( \"#table\" );\n\t$table.html( \"<tr><td style='display:none'>cell</td><td>cell</td></tr>\" );\n\tassert.equal( jQuery( \"#table td:visible\" ).length, 1, \"hidden cell is not perceived as visible (#4512). Works on table elements\" );\n\t$table.css( \"display\", \"none\" ).html( \"<tr><td>cell</td><td>cell</td></tr>\" );\n\tassert.equal( jQuery( \"#table td:visible\" ).length, 0, \"hidden cell children not perceived as visible (#4512)\" );\n\n\tassert.t( \"Is Visible\", \"#qunit-fixture div:visible:lt(2)\", [ \"foo\", \"nothiddendiv\" ] );\n\tassert.t( \"Is Not Hidden\", \"#qunit-fixture:hidden\", [] );\n\tassert.t( \"Is Hidden\", \"#form input:hidden\", [ \"hidden1\", \"hidden2\" ] );\n\n\t$a = jQuery( \"<a href='#'><h1>Header</h1></a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.ok( $a.is( \":visible\" ), \"Anchor tag with flow content is visible (gh-2227)\" );\n} );\n\nQUnit.test( \"Keep the last style if the new one isn't recognized by the browser (#14836)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar el = jQuery( \"<div></div>\" ).css( \"position\", \"absolute\" ).css( \"position\", \"fake value\" );\n\tassert.equal( el.css( \"position\" ), \"absolute\", \"The old style is kept when setting an unrecognized value\" );\n} );\n\n// Support: Edge 14 - 16 only\n// Edge collapses whitespace-only values when setting a style property and\n// there is no easy way for us to work around it. Just skip the test there\n// and hope for the better future.\nQUnit[ /\\bedge\\/16\\./i.test( navigator.userAgent ) ? \"skip\" : \"test\" ](\n\t\"Keep the last style if the new one is a non-empty whitespace (gh-3204)\",\n\tfunction( assert ) {\n\tassert.expect( 1 );\n\n\tvar el = jQuery( \"<div></div>\" ).css( \"position\", \"absolute\" ).css( \"position\", \" \" );\n\tassert.equal( el.css( \"position\" ), \"absolute\", \"The old style is kept when setting to a space\" );\n} );\n\nQUnit.test( \"Reset the style if set to an empty string\", function( assert ) {\n\tassert.expect( 1 );\n\tvar el = jQuery( \"<div></div>\" ).css( \"position\", \"absolute\" ).css( \"position\", \"\" );\n\n\t// Some browsers return an empty string; others \"static\". Both those cases mean the style\n\t// was reset successfully so accept them both.\n\tassert.equal( el.css( \"position\" ) || \"static\", \"static\",\n\t\t\"The style can be reset by setting to an empty string\" );\n} );\n\nQUnit.test(\n\t\"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)\",\n\tfunction( assert ) {\n\t\tassert.expect( 24 );\n\t\tvar done = assert.async();\n\t\tvar styles = [ {\n\t\t\t\tname: \"backgroundAttachment\",\n\t\t\t\tvalue: [ \"fixed\" ],\n\t\t\t\texpected: [ \"scroll\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundColor\",\n\t\t\t\tvalue: [ \"rgb(255, 0, 0)\", \"rgb(255,0,0)\", \"#ff0000\" ],\n\t\t\t\texpected: [ \"transparent\" ]\n\t\t\t}, {\n\n\t\t\t\t// Firefox returns auto's value\n\t\t\t\tname: \"backgroundImage\",\n\t\t\t\tvalue: [ \"url('test.png')\", \"url(\" + baseURL + \"test.png)\", \"url(\\\"\" + baseURL + \"test.png\\\")\" ],\n\t\t\t\texpected: [ \"none\", \"url(\\\"http://static.jquery.com/files/rocker/images/logo_jquery_215x53.gif\\\")\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundPosition\",\n\t\t\t\tvalue: [ \"5% 5%\" ],\n\t\t\t\texpected: [ \"0% 0%\", \"-1000px 0px\", \"-1000px 0%\" ]\n\t\t\t}, {\n\n\t\t\t\t// Firefox returns no-repeat\n\t\t\t\tname: \"backgroundRepeat\",\n\t\t\t\tvalue: [ \"repeat-y\" ],\n\t\t\t\texpected: [ \"repeat\", \"no-repeat\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundClip\",\n\t\t\t\tvalue: [ \"padding-box\" ],\n\t\t\t\texpected: [ \"border-box\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundOrigin\",\n\t\t\t\tvalue: [ \"content-box\" ],\n\t\t\t\texpected: [ \"padding-box\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundSize\",\n\t\t\t\tvalue: [ \"80px 60px\" ],\n\t\t\t\texpected: [ \"auto auto\" ]\n\t\t} ];\n\n\t\tjQuery.each( styles, function( index, style ) {\n\t\t\tvar $clone, $clonedChildren,\n\t\t\t\t$source = jQuery( \"#firstp\" ),\n\t\t\t\tsource = $source[ 0 ],\n\t\t\t\t$children = $source.children();\n\n\t\t\tstyle.expected = style.expected.concat( [ \"\", \"auto\" ] );\n\n\t\t\tif ( source.style[ style.name ] === undefined ) {\n\t\t\t\tassert.ok( true, style.name +  \": style isn't supported and therefore not an issue\" );\n\t\t\t\tassert.ok( true );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$source.css( style.name, style.value[ 0 ] );\n\t\t\t$children.css( style.name, style.value[ 0 ] );\n\n\t\t\t$clone = $source.clone();\n\t\t\t$clonedChildren = $clone.children();\n\n\t\t\t$clone.css( style.name, \"\" );\n\t\t\t$clonedChildren.css( style.name, \"\" );\n\n\t\t\twindow.setTimeout( function() {\n\t\t\t\tassert.notEqual( $clone.css( style.name ), style.value[ 0 ], \"Cloned css was changed\" );\n\n\t\t\t\tassert.ok( jQuery.inArray( $source.css( style.name ) !== -1, style.value ),\n\t\t\t\t\t\"Clearing clone.css() doesn't affect source.css(): \" + style.name +\n\t\t\t\t\t\"; result: \" + $source.css( style.name ) +\n\t\t\t\t\t\"; expected: \" + style.value.join( \",\" ) );\n\n\t\t\t\tassert.ok( jQuery.inArray( $children.css( style.name ) !== -1, style.value ),\n\t\t\t\t\t\"Clearing clonedChildren.css() doesn't affect children.css(): \" + style.name +\n\t\t\t\t\t\"; result: \" + $children.css( style.name ) +\n\t\t\t\t\t\"; expected: \" + style.value.join( \",\" ) );\n\t\t\t}, 100 );\n\t\t} );\n\n\t\twindow.setTimeout( done, 1000 );\n\t}\n);\n\n// Support: IE <=10 only\n// We have to jump through the hoops here in order to test work with \"order\" CSS property,\n// that some browsers do not support. This test is not, strictly speaking, correct,\n// but it's the best that we can do.\n( function() {\n\tvar style = document.createElement( \"div\" ).style,\n\t\texist = \"order\" in style || \"WebkitOrder\" in style;\n\n\tif ( exist ) {\n\t\tQUnit.test( \"Don't append px to CSS \\\"order\\\" value (#14049)\", function( assert ) {\n\t\t\tassert.expect( 1 );\n\n\t\t\tvar $elem = jQuery( \"<div/>\" );\n\n\t\t\t$elem.css( \"order\", 2 );\n\t\t\tassert.equal( $elem.css( \"order\" ), \"2\", \"2 on order\" );\n\t\t} );\n\t}\n} )();\n\nQUnit.test( \"Do not throw on frame elements from css method (#15098)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar frameWin, frameDoc,\n\t\tframeElement = document.createElement( \"iframe\" ),\n\t\tframeWrapDiv = document.createElement( \"div\" );\n\n\tframeWrapDiv.appendChild( frameElement );\n\tdocument.body.appendChild( frameWrapDiv );\n\tframeWin = frameElement.contentWindow;\n\tframeDoc = frameWin.document;\n\tframeDoc.open();\n\tframeDoc.write( \"<!doctype html><html><body><div>Hi</div></body></html>\" );\n\tframeDoc.close();\n\n\tframeWrapDiv.style.display = \"none\";\n\n\ttry {\n\t\tjQuery( frameDoc.body ).css( \"direction\" );\n\t\tassert.ok( true, \"It didn't throw\" );\n\t} catch ( _ ) {\n\t\tassert.ok( false, \"It did throw\" );\n\t}\n} );\n\n( function() {\n\tvar vendorPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ];\n\n\tfunction resetCssPropsFor( name ) {\n\t\tdelete jQuery.cssProps[ name ];\n\t\tjQuery.each( vendorPrefixes, function( index, prefix ) {\n\t\t\tdelete jQuery.cssProps[ prefix + name[ 0 ].toUpperCase() + name.slice( 1 ) ];\n\t\t} );\n\t}\n\n\tQUnit.test( \"Don't default to a cached previously used wrong prefixed name (gh-2015)\", function( assert ) {\n\n\t\t// Note: this test needs a property we know is only supported in a prefixed version\n\t\t// by at least one of our main supported browsers. This may get out of date so let's\n\t\t// use -(webkit|moz)-appearance as well as those two are not on a standards track.\n\t\tvar appearanceName, transformName, elem, elemStyle,\n\t\t\ttransformVal = \"translate(5px, 2px)\",\n\t\t\temptyStyle = document.createElement( \"div\" ).style;\n\n\t\tif ( \"appearance\" in emptyStyle ) {\n\t\t\tappearanceName = \"appearance\";\n\t\t} else {\n\t\t\tjQuery.each( vendorPrefixes, function( index, prefix ) {\n\t\t\t\tvar prefixedProp = prefix + \"Appearance\";\n\t\t\t\tif ( prefixedProp in emptyStyle ) {\n\t\t\t\t\tappearanceName = prefixedProp;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tif ( \"transform\" in emptyStyle ) {\n\t\t\ttransformName = \"transform\";\n\t\t} else {\n\t\t\tjQuery.each( vendorPrefixes, function( index, prefix ) {\n\t\t\t\tvar prefixedProp = prefix + \"Transform\";\n\t\t\t\tif ( prefixedProp in emptyStyle ) {\n\t\t\t\t\ttransformName = prefixedProp;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tassert.expect( !!appearanceName + !!transformName + 1 );\n\n\t\tresetCssPropsFor( \"appearance\" );\n\t\tresetCssPropsFor( \"transform\" );\n\n\t\telem = jQuery( \"<div/>\" )\n\t\t\t.css( {\n\t\t\t\tmsAppearance: \"none\",\n\t\t\t\tappearance: \"none\",\n\n\t\t\t\t// Only the ms prefix is used to make sure we haven't e.g. set\n\t\t\t\t// webkitTransform ourselves in the test.\n\t\t\t\tmsTransform: transformVal,\n\t\t\t\ttransform: transformVal\n\t\t\t} );\n\t\telemStyle = elem[ 0 ].style;\n\n\t\tif ( appearanceName ) {\n\t\t\tassert.equal( elemStyle[ appearanceName ], \"none\", \"setting properly-prefixed appearance\" );\n\t\t}\n\t\tif ( transformName ) {\n\t\t\tassert.equal( elemStyle[ transformName ], transformVal, \"setting properly-prefixed transform\" );\n\t\t}\n\t\tassert.equal( elemStyle[ \"undefined\" ], undefined, \"Nothing writes to node.style.undefined\" );\n\t} );\n\n\tQUnit.test( \"Don't detect fake set properties on a node when caching the prefixed version\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar elem = jQuery( \"<div/>\" ),\n\t\t\tstyle = elem[ 0 ].style;\n\t\tstyle.MozFakeProperty = \"old value\";\n\t\telem.css( \"fakeProperty\", \"new value\" );\n\n\t\tassert.equal( style.MozFakeProperty, \"old value\", \"Fake prefixed property is not cached\" );\n\t} );\n\n} )();\n\n( function() {\n\tvar supportsCssVars,\n\t\telem = jQuery( \"<div>\" ).appendTo( document.body ),\n\t\tdiv = elem[ 0 ];\n\n\tdiv.style.setProperty( \"--prop\", \"value\" );\n\tsupportsCssVars = !!getComputedStyle( div ).getPropertyValue( \"--prop\" );\n\telem.remove();\n\n\tQUnit[ supportsCssVars ? \"test\" : \"skip\" ]( \"css(--customProperty)\", function( assert ) {\n\t\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\t\"<style>\\n\" +\n\t\t\t\"    .test__customProperties {\\n\" +\n\t\t\t\"        --prop1:val1;\\n\" +\n\t\t\t\"        --prop2: val2;\\n\" +\n\t\t\t\"        --prop3:val3 ;\\n\" +\n\t\t\t\"        --prop4:\\\"val4\\\";\\n\" +\n\t\t\t\"        --prop5:'val5';\\n\" +\n\t\t\t\"    }\\n\" +\n\t\t\t\"</style>\"\n\t\t);\n\n\t\tvar div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t\t$elem = jQuery( \"<div>\" ).addClass( \"test__customProperties\" )\n\t\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\t\twebkit = /\\bsafari\\b/i.test( navigator.userAgent ) &&\n\t\t\t\t!/\\firefox\\b/i.test( navigator.userAgent ) &&\n\t\t\t\t!/\\edge\\b/i.test( navigator.userAgent ),\n\t\t\toldSafari = webkit && ( /\\b9\\.\\d(\\.\\d+)* safari/i.test( navigator.userAgent ) ||\n\t\t\t\t/\\b10\\.0(\\.\\d+)* safari/i.test( navigator.userAgent ) ||\n\t\t\t\t/iphone os (?:9|10)_/i.test( navigator.userAgent ) ),\n\t\t\texpected = 10;\n\n\t\tif ( webkit ) {\n\t\t\texpected -= 2;\n\t\t}\n\t\tif ( oldSafari ) {\n\t\t\texpected -= 2;\n\t\t}\n\t\tassert.expect( expected );\n\n\t\tdiv.css( \"--color\", \"blue\" );\n\t\tassert.equal( div.css( \"--color\" ), \"blue\", \"Modified CSS custom property using string\" );\n\n\t\tdiv.css( \"--color\", \"yellow\" );\n\t\tassert.equal( div.css( \"--color\" ), \"yellow\", \"Overwrite CSS custom property\" );\n\n\t\tdiv.css( { \"--color\": \"red\" } );\n\t\tassert.equal( div.css( \"--color\" ), \"red\", \"Modified CSS custom property using object\" );\n\n\t\tdiv.css( { \"--mixedCase\": \"green\" } );\n\t\tdiv.css( { \"--mixed-case\": \"red\" } );\n\t\tassert.equal( div.css( \"--mixedCase\" ), \"green\",\n\t\t\t\"Modified CSS custom property with mixed case\" );\n\n\t\tdiv.css( { \"--theme-dark\": \"purple\" } );\n\t\tdiv.css( { \"--themeDark\": \"red\" } );\n\t\tassert.equal( div.css( \"--theme-dark\" ), \"purple\",\n\t\t\t\"Modified CSS custom property with dashed name\" );\n\n\t\tassert.equal( $elem.css( \"--prop1\" ), \"val1\", \"Basic CSS custom property\" );\n\n\t\t// Support: Safari 9.1-10.0 only\n\t\t// Safari collapses whitespaces & quotes. Ignore it.\n\t\tif ( !oldSafari ) {\n\t\t\tassert.equal( $elem.css( \"--prop2\" ), \" val2\", \"Preceding whitespace maintained\" );\n\t\t\tassert.equal( $elem.css( \"--prop3\" ), \"val3 \", \"Following whitespace maintained\" );\n\t\t}\n\n\t\t// Support: Chrome 49-55, Safari 9.1-10.0\n\t\t// Chrome treats single quotes as double ones.\n\t\t// Safari treats double quotes as single ones.\n\t\tif ( !webkit ) {\n\t\t\tassert.equal( $elem.css( \"--prop4\" ), \"\\\"val4\\\"\", \"Works with double quotes\" );\n\t\t\tassert.equal( $elem.css( \"--prop5\" ), \"'val5'\", \"Works with single quotes\" );\n\t\t}\n\t} );\n\n\tQUnit[ supportsCssVars ? \"test\" : \"skip\" ]( \"Don't append px to CSS vars\", function( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\t$div\n\t\t\t.css( \"--a\", 3 )\n\t\t\t.css( \"--line-height\", 4 )\n\t\t\t.css( \"--lineHeight\", 5 );\n\n\t\tassert.equal( $div.css( \"--a\" ), \"3\", \"--a: 3\" );\n\t\tassert.equal( $div.css( \"--line-height\" ), \"4\", \"--line-height: 4\" );\n\t\tassert.equal( $div.css( \"--lineHeight\" ), \"5\", \"--lineHeight: 5\" );\n\t} );\n} )();\n\n}\n", "QUnit.module( \"data\", { afterEach: moduleTeardown } );\n\nQUnit.test( \"expando\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.expando !== undefined, true, \"jQuery is exposing the expando\" );\n} );\n\nQUnit.test( \"jQuery.data & removeData, expected returns\", function( assert ) {\n\tassert.expect( 4 );\n\tvar elem = document.body;\n\n\tassert.equal(\n\t\tjQuery.data( elem, \"hello\", \"world\" ), \"world\",\n\t\t\"jQuery.data( elem, key, value ) returns value\"\n\t);\n\tassert.equal(\n\t\tjQuery.data( elem, \"hello\" ), \"world\",\n\t\t\"jQuery.data( elem, key ) returns value\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.data( elem, { goodnight: \"moon\" } ), { goodnight: \"moon\" },\n\t\t\"jQuery.data( elem, obj ) returns obj\"\n\t);\n\tassert.equal(\n\t\tjQuery.removeData( elem, \"hello\" ), undefined,\n\t\t\"jQuery.removeData( elem, key, value ) returns undefined\"\n\t);\n\n} );\n\nQUnit.test( \"jQuery._data & _removeData, expected returns\", function( assert ) {\n\tassert.expect( 4 );\n\tvar elem = document.body;\n\n\tassert.equal(\n\t\tjQuery._data( elem, \"hello\", \"world\" ), \"world\",\n\t\t\"jQuery._data( elem, key, value ) returns value\"\n\t);\n\tassert.equal(\n\t\tjQuery._data( elem, \"hello\" ), \"world\",\n\t\t\"jQuery._data( elem, key ) returns value\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery._data( elem, { goodnight: \"moon\" } ), { goodnight: \"moon\" },\n\t\t\"jQuery._data( elem, obj ) returns obj\"\n\t);\n\tassert.equal(\n\t\tjQuery._removeData( elem, \"hello\" ), undefined,\n\t\t\"jQuery._removeData( elem, key, value ) returns undefined\"\n\t);\n} );\n\nQUnit.test( \"jQuery.hasData no side effects\", function( assert ) {\n\tassert.expect( 1 );\n\tvar obj = {};\n\n\tjQuery.hasData( obj );\n\n\tassert.equal( Object.getOwnPropertyNames( obj ).length, 0,\n\t\t\"No data expandos where added when calling jQuery.hasData(o)\"\n\t);\n} );\n\nfunction dataTests( elem, assert ) {\n\tvar dataObj, internalDataObj;\n\n\tassert.equal( jQuery.data( elem, \"foo\" ), undefined, \"No data exists initially\" );\n\tassert.strictEqual( jQuery.hasData( elem ), false, \"jQuery.hasData agrees no data exists initially\" );\n\n\tdataObj = jQuery.data( elem );\n\tassert.equal( typeof dataObj, \"object\", \"Calling data with no args gives us a data object reference\" );\n\tassert.strictEqual( jQuery.data( elem ), dataObj, \"Calling jQuery.data returns the same data object when called multiple times\" );\n\n\tassert.strictEqual( jQuery.hasData( elem ), false, \"jQuery.hasData agrees no data exists even when an empty data obj exists\" );\n\n\tdataObj[ \"foo\" ] = \"bar\";\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"bar\", \"Data is readable by jQuery.data when set directly on a returned data object\" );\n\n\tassert.strictEqual( jQuery.hasData( elem ), true, \"jQuery.hasData agrees data exists when data exists\" );\n\n\tjQuery.data( elem, \"foo\", \"baz\" );\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"baz\", \"Data can be changed by jQuery.data\" );\n\tassert.equal( dataObj[ \"foo\" ], \"baz\", \"Changes made through jQuery.data propagate to referenced data object\" );\n\n\tjQuery.data( elem, \"foo\", undefined );\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"baz\", \"Data is not unset by passing undefined to jQuery.data\" );\n\n\tjQuery.data( elem, \"foo\", null );\n\tassert.strictEqual( jQuery.data( elem, \"foo\" ), null, \"Setting null using jQuery.data works OK\" );\n\n\tjQuery.data( elem, \"foo\", \"foo1\" );\n\n\tjQuery.data( elem, { \"bar\": \"baz\", \"boom\": \"bloz\" } );\n\tassert.strictEqual( jQuery.data( elem, \"foo\" ), \"foo1\", \"Passing an object extends the data object instead of replacing it\" );\n\tassert.equal( jQuery.data( elem, \"boom\" ), \"bloz\", \"Extending the data object works\" );\n\n\tjQuery._data( elem, \"foo\", \"foo2\", true );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"Setting internal data works\" );\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"foo1\", \"Setting internal data does not override user data\" );\n\n\tinternalDataObj = jQuery._data( elem );\n\tassert.ok( internalDataObj, \"Internal data object exists\" );\n\tassert.notStrictEqual( dataObj, internalDataObj, \"Internal data object is not the same as user data object\" );\n\n\tassert.strictEqual( elem.boom, undefined, \"Data is never stored directly on the object\" );\n\n\tjQuery.removeData( elem, \"foo\" );\n\tassert.strictEqual( jQuery.data( elem, \"foo\" ), undefined, \"jQuery.removeData removes single properties\" );\n\n\tjQuery.removeData( elem );\n\tassert.strictEqual( jQuery._data( elem ), internalDataObj, \"jQuery.removeData does not remove internal data if it exists\" );\n\n\tjQuery.data( elem, \"foo\", \"foo1\" );\n\tjQuery._data( elem, \"foo\", \"foo2\" );\n\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"foo1\", \"(sanity check) Ensure data is set in user data object\" );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"(sanity check) Ensure data is set in internal data object\" );\n\n\tassert.strictEqual( jQuery._data( elem, jQuery.expando ), undefined, \"Removing the last item in internal data destroys the internal data object\" );\n\n\tjQuery._data( elem, \"foo\", \"foo2\" );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"(sanity check) Ensure data is set in internal data object\" );\n\n\tjQuery.removeData( elem, \"foo\" );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"(sanity check) jQuery.removeData for user data does not remove internal data\" );\n}\n\nQUnit.test( \"jQuery.data(div)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tvar div = document.createElement( \"div\" );\n\n\tdataTests( div, assert );\n\n\t// We stored one key in the private data\n\t// assert that nothing else was put in there, and that that\n\t// one stayed there.\n\tassert.expectJqData( this, div, \"foo\" );\n} );\n\nQUnit.test( \"jQuery.data({})\", function( assert ) {\n\tassert.expect( 25 );\n\n\tdataTests( {}, assert );\n} );\n\nQUnit.test( \"jQuery.data(window)\", function( assert ) {\n\tassert.expect( 25 );\n\n\t// remove bound handlers from window object to stop potential false positives caused by fix for #5280 in\n\t// transports/xhr.js\n\tjQuery( window ).off( \"unload\" );\n\n\tdataTests( window, assert );\n} );\n\nQUnit.test( \"jQuery.data(document)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tdataTests( document, assert );\n\n\tassert.expectJqData( this, document, \"foo\" );\n} );\n\nQUnit.test( \"jQuery.data(<embed>)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tdataTests( document.createElement( \"embed\" ), assert );\n} );\n\nQUnit.test( \"jQuery.data(object/flash)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tvar flash = document.createElement( \"object\" );\n\tflash.setAttribute( \"classid\", \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" );\n\n\tdataTests( flash, assert );\n} );\n\n// attempting to access the data of an undefined jQuery element should be undefined\nQUnit.test( \"jQuery().data() === undefined (#14101)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.strictEqual( jQuery().data(), undefined );\n\tassert.strictEqual( jQuery().data( \"key\" ), undefined );\n} );\n\nQUnit.test( \".data()\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar div, dataObj, nodiv, obj;\n\n\tdiv = jQuery( \"#foo\" );\n\tassert.strictEqual( div.data( \"foo\" ), undefined, \"Make sure that missing result is undefined\" );\n\tdiv.data( \"test\", \"success\" );\n\n\tdataObj = div.data();\n\n\tassert.deepEqual( dataObj, { test: \"success\" }, \"data() returns entire data object with expected properties\" );\n\tassert.strictEqual( div.data( \"foo\" ), undefined, \"Make sure that missing result is still undefined\" );\n\n\tnodiv = jQuery( \"#unfound\" );\n\tassert.equal( nodiv.data(), null, \"data() on empty set returns null\" );\n\n\tobj = { foo: \"bar\" };\n\tjQuery( obj ).data( \"foo\", \"baz\" );\n\n\tdataObj = jQuery.extend( true, {}, jQuery( obj ).data() );\n\n\tassert.deepEqual( dataObj, { \"foo\": \"baz\" }, \"Retrieve data object from a wrapped JS object (#7524)\" );\n} );\n\nfunction testDataTypes( $obj, assert ) {\n\tjQuery.each( {\n\t\t\"null\": null,\n\t\t\"true\": true,\n\t\t\"false\": false,\n\t\t\"zero\": 0,\n\t\t\"one\": 1,\n\t\t\"empty string\": \"\",\n\t\t\"empty array\": [],\n\t\t\"array\": [ 1 ],\n\t\t\"empty object\": {},\n\t\t\"object\": { foo: \"bar\" },\n\t\t\"date\": new Date(),\n\t\t\"regex\": /test/,\n\t\t\"function\": function() {}\n\t}, function( type, value ) {\n\t\tassert.strictEqual( $obj.data( \"test\", value ).data( \"test\" ), value, \"Data set to \" + type );\n\t} );\n}\n\nQUnit.test( \"jQuery(Element).data(String, Object).data(String)\", function( assert ) {\n\tassert.expect( 18 );\n\tvar parent = jQuery( \"<div><div></div></div>\" ),\n\t\tdiv = parent.children();\n\n\tassert.strictEqual( div.data( \"test\" ), undefined, \"No data exists initially\" );\n\tassert.strictEqual( div.data( \"test\", \"success\" ).data( \"test\" ), \"success\", \"Data added\" );\n\tassert.strictEqual( div.data( \"test\", \"overwritten\" ).data( \"test\" ), \"overwritten\", \"Data overwritten\" );\n\tassert.strictEqual( div.data( \"test\", undefined ).data( \"test\" ), \"overwritten\", \".data(key,undefined) does nothing but is chainable (#5571)\" );\n\tassert.strictEqual( div.data( \"notexist\" ), undefined, \"No data exists for unset key\" );\n\ttestDataTypes( div, assert );\n\n\tparent.remove();\n} );\n\nQUnit.test( \"jQuery(plain Object).data(String, Object).data(String)\", function( assert ) {\n\tassert.expect( 16 );\n\n\t// #3748\n\tvar $obj = jQuery( { exists: true } );\n\tassert.strictEqual( $obj.data( \"nothing\" ), undefined, \"Non-existent data returns undefined\" );\n\tassert.strictEqual( $obj.data( \"exists\" ), undefined, \"Object properties are not returned as data\" );\n\ttestDataTypes( $obj, assert );\n\n\t// Clean up\n\t$obj.removeData();\n\tassert.deepEqual( $obj[ 0 ], { exists: true }, \"removeData does not clear the object\" );\n} );\n\nQUnit.test( \".data(object) does not retain references. #13815\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $divs = jQuery( \"<div></div><div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$divs.data( { \"type\": \"foo\" } );\n\t$divs.eq( 0 ).data( \"type\", \"bar\" );\n\n\tassert.equal( $divs.eq( 0 ).data( \"type\" ), \"bar\", \"Correct updated value\" );\n\tassert.equal( $divs.eq( 1 ).data( \"type\" ), \"foo\", \"Original value retained\" );\n} );\n\nQUnit.test( \"data-* attributes\", function( assert ) {\n\tassert.expect( 46 );\n\n\tvar prop, i, l, metadata, elem,\n\t\tobj, obj2, check, num, num2,\n\t\tparseJSON = JSON.parse,\n\t\tdiv = jQuery( \"<div>\" ),\n\t\tchild = jQuery( \"<div data-myobj='old data' data-ignored=\\\"DOM\\\" data-other='test' data-foo-42='boosh'></div>\" ),\n\t\tdummy = jQuery( \"<div data-myobj='old data' data-ignored=\\\"DOM\\\" data-other='test' data-foo-42='boosh'></div>\" );\n\n\tassert.equal( div.data( \"attr\" ), undefined, \"Check for non-existing data-attr attribute\" );\n\n\tdiv.attr( \"data-attr\", \"exists\" );\n\tassert.equal( div.data( \"attr\" ), \"exists\", \"Check for existing data-attr attribute\" );\n\n\tdiv.attr( \"data-attr\", \"exists2\" );\n\tassert.equal( div.data( \"attr\" ), \"exists\", \"Check that updates to data- don't update .data()\" );\n\n\tdiv.data( \"attr\", \"internal\" ).attr( \"data-attr\", \"external\" );\n\tassert.equal( div.data( \"attr\" ), \"internal\", \"Check for .data('attr') precedence (internal > external data-* attribute)\" );\n\n\tdiv.remove();\n\n\tchild.appendTo( \"#qunit-fixture\" );\n\tassert.equal( child.data( \"myobj\" ), \"old data\", \"Value accessed from data-* attribute\" );\n\tassert.equal( child.data( \"foo-42\" ), \"boosh\", \"camelCasing does not affect numbers (#1751)\" );\n\n\tchild.data( \"myobj\", \"replaced\" );\n\tassert.equal( child.data( \"myobj\" ), \"replaced\", \"Original data overwritten\" );\n\n\tchild.data( \"ignored\", \"cache\" );\n\tassert.equal( child.data( \"ignored\" ), \"cache\", \"Cached data used before DOM data-* fallback\" );\n\n\tobj = child.data();\n\tobj2 = dummy.data();\n\tcheck = [ \"myobj\", \"ignored\", \"other\", \"foo-42\" ];\n\tnum = 0;\n\tnum2 = 0;\n\n\tdummy.remove();\n\n\tfor ( i = 0, l = check.length; i < l; i++ ) {\n\t\tassert.ok( obj[ check[ i ] ], \"Make sure data- property exists when calling data-.\" );\n\t\tassert.ok( obj2[ check[ i ] ], \"Make sure data- property exists when calling data-.\" );\n\t}\n\n\tfor ( prop in obj ) {\n\t\tnum++;\n\t}\n\n\tassert.equal( num, check.length, \"Make sure that the right number of properties came through.\" );\n\n\tfor ( prop in obj2 ) {\n\t\tnum2++;\n\t}\n\n\tassert.equal( num2, check.length, \"Make sure that the right number of properties came through.\" );\n\n\tchild.attr( \"data-other\", \"newvalue\" );\n\n\tassert.equal( child.data( \"other\" ), \"test\", \"Make sure value was pulled in properly from a .data().\" );\n\n\t// attribute parsing\n\ti = 0;\n\tJSON.parse = function() {\n\t\ti++;\n\t\treturn parseJSON.apply( this, arguments );\n\t};\n\n\tchild\n\t\t.attr( \"data-true\", \"true\" )\n\t\t.attr( \"data-false\", \"false\" )\n\t\t.attr( \"data-five\", \"5\" )\n\t\t.attr( \"data-point\", \"5.5\" )\n\t\t.attr( \"data-pointe\", \"5.5E3\" )\n\t\t.attr( \"data-grande\", \"5.574E9\" )\n\t\t.attr( \"data-hexadecimal\", \"0x42\" )\n\t\t.attr( \"data-pointbad\", \"5..5\" )\n\t\t.attr( \"data-pointbad2\", \"-.\" )\n\t\t.attr( \"data-bigassnum\", \"123456789123456789123456789\" )\n\t\t.attr( \"data-badjson\", \"{123}\" )\n\t\t.attr( \"data-badjson2\", \"[abc]\" )\n\t\t.attr( \"data-notjson\", \" {}\" )\n\t\t.attr( \"data-notjson2\", \"[] \" )\n\t\t.attr( \"data-empty\", \"\" )\n\t\t.attr( \"data-space\", \" \" )\n\t\t.attr( \"data-null\", \"null\" )\n\t\t.attr( \"data-string\", \"test\" );\n\n\tassert.strictEqual( child.data( \"true\" ), true, \"Primitive true read from attribute\" );\n\tassert.strictEqual( child.data( \"false\" ), false, \"Primitive false read from attribute\" );\n\tassert.strictEqual( child.data( \"five\" ), 5, \"Integer read from attribute\" );\n\tassert.strictEqual( child.data( \"point\" ), 5.5, \"Floating-point number read from attribute\" );\n\tassert.strictEqual( child.data( \"pointe\" ), \"5.5E3\",\n\t\t\"Exponential-notation number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"grande\" ), \"5.574E9\",\n\t\t\"Big exponential-notation number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"hexadecimal\" ), \"0x42\",\n\t\t\"Hexadecimal number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"pointbad\" ), \"5..5\",\n\t\t\"Extra-point non-number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"pointbad2\" ), \"-.\",\n\t\t\"No-digit non-number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"bigassnum\" ), \"123456789123456789123456789\",\n\t\t\"Bad bigass number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"badjson\" ), \"{123}\", \"Bad JSON object read from attribute as string\" );\n\tassert.strictEqual( child.data( \"badjson2\" ), \"[abc]\", \"Bad JSON array read from attribute as string\" );\n\tassert.strictEqual( child.data( \"notjson\" ), \" {}\",\n\t\t\"JSON object with leading non-JSON read from attribute as string\" );\n\tassert.strictEqual( child.data( \"notjson2\" ), \"[] \",\n\t\t\"JSON array with trailing non-JSON read from attribute as string\" );\n\tassert.strictEqual( child.data( \"empty\" ), \"\", \"Empty string read from attribute\" );\n\tassert.strictEqual( child.data( \"space\" ), \" \", \"Whitespace string read from attribute\" );\n\tassert.strictEqual( child.data( \"null\" ), null, \"Primitive null read from attribute\" );\n\tassert.strictEqual( child.data( \"string\" ), \"test\", \"Typical string read from attribute\" );\n\tassert.equal( i, 2, \"Correct number of JSON parse attempts when reading from attributes\" );\n\n\tJSON.parse = parseJSON;\n\tchild.remove();\n\n\t// tests from metadata plugin\n\tfunction testData( index, elem ) {\n\t\tswitch ( index ) {\n\t\tcase 0:\n\t\t\tassert.equal( jQuery( elem ).data( \"foo\" ), \"bar\", \"Check foo property\" );\n\t\t\tassert.equal( jQuery( elem ).data( \"bar\" ), \"baz\", \"Check baz property\" );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tassert.equal( jQuery( elem ).data( \"test\" ), \"bar\", \"Check test property\" );\n\t\t\tassert.equal( jQuery( elem ).data( \"bar\" ), \"baz\", \"Check bar property\" );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tassert.equal( jQuery( elem ).data( \"zoooo\" ), \"bar\", \"Check zoooo property\" );\n\t\t\tassert.deepEqual( jQuery( elem ).data( \"bar\" ), { \"test\":\"baz\" }, \"Check bar property\" );\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tassert.equal( jQuery( elem ).data( \"number\" ), true, \"Check number property\" );\n\t\t\tassert.deepEqual( jQuery( elem ).data( \"stuff\" ), [ 2, 8 ], \"Check stuff property\" );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassert.ok( false, [ \"Assertion failed on index \", index, \", with data\" ].join( \"\" ) );\n\t\t}\n\t}\n\n\tmetadata = \"<ol><li class='test test2' data-foo='bar' data-bar='baz' data-arr='[1,2]'>Some stuff</li><li class='test test2' data-test='bar' data-bar='baz'>Some stuff</li><li class='test test2' data-zoooo='bar' data-bar='{\\\"test\\\":\\\"baz\\\"}'>Some stuff</li><li class='test test2' data-number=true data-stuff='[2,8]'>Some stuff</li></ol>\";\n\telem = jQuery( metadata ).appendTo( \"#qunit-fixture\" );\n\n\telem.find( \"li\" ).each( testData );\n\telem.remove();\n} );\n\nQUnit.test( \".data(Object)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar obj, jqobj,\n\t\tdiv = jQuery( \"<div/>\" );\n\n\tdiv.data( { \"test\": \"in\", \"test2\": \"in2\" } );\n\tassert.equal( div.data( \"test\" ), \"in\", \"Verify setting an object in data\" );\n\tassert.equal( div.data( \"test2\" ), \"in2\", \"Verify setting an object in data\" );\n\n\tobj = { test:\"unset\" };\n\tjqobj = jQuery( obj );\n\n\tjqobj.data( \"test\", \"unset\" );\n\tjqobj.data( { \"test\": \"in\", \"test2\": \"in2\" } );\n\tassert.equal( jQuery.data( obj )[ \"test\" ], \"in\", \"Verify setting an object on an object extends the data object\" );\n\tassert.equal( obj[ \"test2\" ], undefined, \"Verify setting an object on an object does not extend the object\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n} );\n\nQUnit.test( \"jQuery.removeData\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar obj,\n\t\tdiv = jQuery( \"#foo\" )[ 0 ];\n\tjQuery.data( div, \"test\", \"testing\" );\n\tjQuery.removeData( div, \"test\" );\n\tassert.equal( jQuery.data( div, \"test\" ), undefined, \"Check removal of data\" );\n\n\tjQuery.data( div, \"test2\", \"testing\" );\n\tjQuery.removeData( div );\n\tassert.ok( !jQuery.data( div, \"test2\" ), \"Make sure that the data property no longer exists.\" );\n\tassert.ok( !div[ jQuery.expando ], \"Make sure the expando no longer exists, as well.\" );\n\n\tjQuery.data( div, {\n\t\ttest3: \"testing\",\n\t\ttest4: \"testing\"\n\t} );\n\tjQuery.removeData( div, \"test3 test4\" );\n\tassert.ok( !jQuery.data( div, \"test3\" ) || jQuery.data( div, \"test4\" ), \"Multiple delete with spaces.\" );\n\n\tjQuery.data( div, {\n\t\ttest3: \"testing\",\n\t\ttest4: \"testing\"\n\t} );\n\tjQuery.removeData( div, [ \"test3\", \"test4\" ] );\n\tassert.ok( !jQuery.data( div, \"test3\" ) || jQuery.data( div, \"test4\" ), \"Multiple delete by array.\" );\n\n\tjQuery.data( div, {\n\t\t\"test3 test4\": \"testing\",\n\t\t\"test3\": \"testing\"\n\t} );\n\tjQuery.removeData( div, \"test3 test4\" );\n\tassert.ok( !jQuery.data( div, \"test3 test4\" ), \"Multiple delete with spaces deleted key with exact name\" );\n\tassert.ok( jQuery.data( div, \"test3\" ), \"Left the partial matched key alone\" );\n\n\tobj = {};\n\tjQuery.data( obj, \"test\", \"testing\" );\n\tassert.equal( jQuery( obj ).data( \"test\" ), \"testing\", \"verify data on plain object\" );\n\tjQuery.removeData( obj, \"test\" );\n\tassert.equal( jQuery.data( obj, \"test\" ), undefined, \"Check removal of data on plain object\" );\n\n\tjQuery.data( window, \"BAD\", true );\n\tjQuery.removeData( window, \"BAD\" );\n\tassert.ok( !jQuery.data( window, \"BAD\" ), \"Make sure that the value was not still set.\" );\n} );\n\nQUnit.test( \".removeData()\", function( assert ) {\n\tassert.expect( 6 );\n\tvar div = jQuery( \"#foo\" );\n\tdiv.data( \"test\", \"testing\" );\n\tdiv.removeData( \"test\" );\n\tassert.equal( div.data( \"test\" ), undefined, \"Check removal of data\" );\n\n\tdiv.data( \"test\", \"testing\" );\n\tdiv.data( \"test.foo\", \"testing2\" );\n\tdiv.removeData( \"test.bar\" );\n\tassert.equal( div.data( \"test.foo\" ), \"testing2\", \"Make sure data is intact\" );\n\tassert.equal( div.data( \"test\" ), \"testing\", \"Make sure data is intact\" );\n\n\tdiv.removeData( \"test\" );\n\tassert.equal( div.data( \"test.foo\" ), \"testing2\", \"Make sure data is intact\" );\n\tassert.equal( div.data( \"test\" ), undefined, \"Make sure data is intact\" );\n\n\tdiv.removeData( \"test.foo\" );\n\tassert.equal( div.data( \"test.foo\" ), undefined, \"Make sure data is intact\" );\n} );\n\nif ( window.JSON && window.JSON.stringify ) {\n\tQUnit.test( \"JSON serialization (#8108)\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar obj = { \"foo\": \"bar\" };\n\t\tjQuery.data( obj, \"hidden\", true );\n\n\t\tassert.equal( JSON.stringify( obj ), \"{\\\"foo\\\":\\\"bar\\\"}\", \"Expando is hidden from JSON.stringify\" );\n\t} );\n}\n\nQUnit.test( \".data should follow html5 specification regarding camel casing\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar div = jQuery( \"<div id='myObject' data-w-t-f='ftw' data-big-a-little-a='bouncing-b' data-foo='a' data-foo-bar='b' data-foo-bar-baz='c'></div>\" )\n\t\t.prependTo( \"body\" );\n\n\tassert.equal( div.data()[ \"wTF\" ], \"ftw\", \"Verify single letter data-* key\" );\n\tassert.equal( div.data()[ \"bigALittleA\" ], \"bouncing-b\", \"Verify single letter mixed data-* key\" );\n\n\tassert.equal( div.data()[ \"foo\" ], \"a\", \"Verify single word data-* key\" );\n\tassert.equal( div.data()[ \"fooBar\" ], \"b\", \"Verify multiple word data-* key\" );\n\tassert.equal( div.data()[ \"fooBarBaz\" ], \"c\", \"Verify multiple word data-* key\" );\n\n\tassert.equal( div.data( \"foo\" ), \"a\", \"Verify single word data-* key\" );\n\tassert.equal( div.data( \"fooBar\" ), \"b\", \"Verify multiple word data-* key\" );\n\tassert.equal( div.data( \"fooBarBaz\" ), \"c\", \"Verify multiple word data-* key\" );\n\n\tdiv.data( \"foo-bar\", \"d\" );\n\n\tassert.equal( div.data( \"fooBar\" ), \"d\", \"Verify updated data-* key\" );\n\tassert.equal( div.data( \"foo-bar\" ), \"d\", \"Verify updated data-* key\" );\n\n\tassert.equal( div.data( \"fooBar\" ), \"d\", \"Verify updated data-* key (fooBar)\" );\n\tassert.equal( div.data( \"foo-bar\" ), \"d\", \"Verify updated data-* key (foo-bar)\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \".data should not miss preset data-* w/ hyphenated property names\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),\n\t\ttest = {\n\t\t\t\"camelBar\": \"camelBar\",\n\t\t\t\"hyphen-foo\": \"hyphen-foo\"\n\t\t};\n\n\tdiv.data( test );\n\n\tjQuery.each( test, function( i, k ) {\n\t\tassert.equal( div.data( k ), k, \"data with property '\" + k + \"' was correctly found\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery.data should not miss data-* w/ hyphenated property names #14047\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div/>\" );\n\n\tdiv.data( \"foo-bar\", \"baz\" );\n\n\tassert.equal( jQuery.data( div[ 0 ], \"foo-bar\" ), \"baz\", \"data with property 'foo-bar' was correctly found\" );\n} );\n\nQUnit.test( \".data should not miss attr() set data-* with hyphenated property names\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar a, b;\n\n\ta = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\ta.attr( \"data-long-param\", \"test\" );\n\ta.data( \"long-param\", { a: 2 } );\n\n\tassert.deepEqual( a.data( \"long-param\" ), { a: 2 }, \"data with property long-param was found, 1\" );\n\n\tb = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tb.attr( \"data-long-param\", \"test\" );\n\tb.data( \"long-param\" );\n\tb.data( \"long-param\", { a: 2 } );\n\n\tassert.deepEqual( b.data( \"long-param\" ), { a: 2 }, \"data with property long-param was found, 2\" );\n} );\n\nQUnit.test( \".data always sets data with the camelCased key (gh-2257)\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tdatas = {\n\t\t\t\"non-empty\": {\n\t\t\t\tkey: \"nonEmpty\",\n\t\t\t\tvalue: \"a string\"\n\t\t\t},\n\t\t\t\"empty-string\": {\n\t\t\t\tkey: \"emptyString\",\n\t\t\t\tvalue: \"\"\n\t\t\t},\n\t\t\t\"one-value\": {\n\t\t\t\tkey: \"oneValue\",\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\t\"zero-value\": {\n\t\t\t\tkey: \"zeroValue\",\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\t\"an-array\": {\n\t\t\t\tkey: \"anArray\",\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\t\"an-object\": {\n\t\t\t\tkey: \"anObject\",\n\t\t\t\tvalue: {}\n\t\t\t},\n\t\t\t\"bool-true\": {\n\t\t\t\tkey: \"boolTrue\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"bool-false\": {\n\t\t\t\tkey: \"boolFalse\",\n\t\t\t\tvalue: false\n\t\t\t},\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": {\n\t\t\t\tkey: \"someJson\",\n\t\t\t\tvalue: \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t\t}\n\t\t};\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val.value );\n\t\tvar allData = div.data();\n\t\tassert.equal( allData[ key ], undefined, \".data does not store with hyphenated keys\" );\n\t\tassert.equal( allData[ val.key ], val.value, \".data stores the camelCased key\" );\n\t} );\n} );\n\nQUnit.test( \".data should not strip more than one hyphen when camelCasing (gh-2070)\", function( assert ) {\n\tassert.expect( 3 );\n\tvar div = jQuery( \"<div data-nested-single='single' data-nested--double='double' data-nested---triple='triple'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tallData = div.data();\n\n\tassert.equal( allData.nestedSingle, \"single\", \"Key is correctly camelCased\" );\n\tassert.equal( allData[ \"nested-Double\" ], \"double\", \"Key with double hyphens is correctly camelCased\" );\n\tassert.equal( allData[ \"nested--Triple\" ], \"triple\", \"Key with triple hyphens is correctly camelCased\" );\n} );\n\nQUnit.test( \".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values\", function( assert ) {\n\n\tvar div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),\n\t\tdatas = {\n\t\t\t\"non-empty\": {\n\t\t\t\tkey: \"nonEmpty\",\n\t\t\t\tvalue: \"a string\"\n\t\t\t},\n\t\t\t\"empty-string\": {\n\t\t\t\tkey: \"emptyString\",\n\t\t\t\tvalue: \"\"\n\t\t\t},\n\t\t\t\"one-value\": {\n\t\t\t\tkey: \"oneValue\",\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\t\"zero-value\": {\n\t\t\t\tkey: \"zeroValue\",\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\t\"an-array\": {\n\t\t\t\tkey: \"anArray\",\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\t\"an-object\": {\n\t\t\t\tkey: \"anObject\",\n\t\t\t\tvalue: {}\n\t\t\t},\n\t\t\t\"bool-true\": {\n\t\t\t\tkey: \"boolTrue\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"bool-false\": {\n\t\t\t\tkey: \"boolFalse\",\n\t\t\t\tvalue: false\n\t\t\t},\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": {\n\t\t\t\tkey: \"someJson\",\n\t\t\t\tvalue: \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t\t},\n\n\t\t\t\"num-1-middle\": {\n\t\t\t\tkey: \"num-1Middle\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"num-end-2\": {\n\t\t\t\tkey: \"numEnd-2\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"2-num-start\": {\n\t\t\t\tkey: \"2NumStart\",\n\t\t\t\tvalue: true\n\t\t\t}\n\t\t};\n\n\tassert.expect( 24 );\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val.value );\n\n\t\tassert.deepEqual( div.data( key ), val.value, \"get: \" + key );\n\t\tassert.deepEqual( div.data( val.key ), val.value, \"get: \" + val.key );\n\t} );\n} );\n\nQUnit.test( \".data supports interoperable removal of hyphenated/camelCase properties\", function( assert ) {\n\tvar div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),\n\t\trdashAlpha = /-([a-z])/g,\n\t\tdatas = {\n\t\t\t\"non-empty\": \"a string\",\n\t\t\t\"empty-string\": \"\",\n\t\t\t\"one-value\": 1,\n\t\t\t\"zero-value\": 0,\n\t\t\t\"an-array\": [],\n\t\t\t\"an-object\": {},\n\t\t\t\"bool-true\": true,\n\t\t\t\"bool-false\": false,\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t};\n\n\tassert.expect( 27 );\n\n\tfunction fcamelCase( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t}\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val );\n\n\t\tassert.deepEqual( div.data( key ), val, \"get: \" + key );\n\t\tassert.deepEqual(\n\t\t\tdiv.data( key.replace( rdashAlpha, fcamelCase ) ),\n\t\t\tval,\n\t\t\t\"get: \" + key.replace( rdashAlpha, fcamelCase )\n\t\t);\n\n\t\tdiv.removeData( key );\n\n\t\tassert.equal( div.data( key ), undefined, \"get: \" + key );\n\n\t} );\n} );\n\nQUnit.test( \".data supports interoperable removal of properties SET TWICE #13850\", function( assert ) {\n\tvar div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tdatas = {\n\t\t\t\"non-empty\": \"a string\",\n\t\t\t\"empty-string\": \"\",\n\t\t\t\"one-value\": 1,\n\t\t\t\"zero-value\": 0,\n\t\t\t\"an-array\": [],\n\t\t\t\"an-object\": {},\n\t\t\t\"bool-true\": true,\n\t\t\t\"bool-false\": false,\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t};\n\n\tassert.expect( 9 );\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val );\n\t\tdiv.data( key, val );\n\n\t\tdiv.removeData( key );\n\n\t\tassert.equal( div.data( key ), undefined, \"removal: \" + key );\n\t} );\n} );\n\nQUnit.test( \".removeData supports removal of hyphenated properties via array (#12786, gh-2257)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar div, plain, compare;\n\n\tdiv = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\tplain = jQuery( {} );\n\n\t// Properties should always be camelCased\n\tcompare = {\n\n\t\t// From batch assignment .data({ \"a-a\": 1 })\n\t\t\"aA\": 1,\n\n\t\t// From property, value assignment .data( \"b-b\", 1 )\n\t\t\"bB\": 1\n\t};\n\n\t// Mixed assignment\n\tdiv.data( { \"a-a\": 1 } ).data( \"b-b\", 1 );\n\tplain.data( { \"a-a\": 1 } ).data( \"b-b\", 1 );\n\n\tassert.deepEqual( div.data(), compare, \"Data appears as expected. (div)\" );\n\tassert.deepEqual( plain.data(), compare, \"Data appears as expected. (plain)\" );\n\n\tdiv.removeData( [ \"a-a\", \"b-b\" ] );\n\tplain.removeData( [ \"a-a\", \"b-b\" ] );\n\n\tassert.deepEqual( div.data(), {}, \"Data is empty. (div)\" );\n\tassert.deepEqual( plain.data(), {}, \"Data is empty. (plain)\" );\n} );\n\n// Test originally by Moschel\nQUnit.test( \".removeData should not throw exceptions. (#10080)\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect( 1 );\n\tvar frame = jQuery( \"#loadediframe\" );\n\tjQuery( frame[ 0 ].contentWindow ).on( \"unload\", function() {\n\t\tassert.ok( true, \"called unload\" );\n\t\tdone();\n\t} );\n\n\t// change the url to trigger unload\n\tframe.attr( \"src\", baseURL + \"iframe.html?param=true\" );\n} );\n\nQUnit.test( \".data only checks element attributes once. #8909\", function( assert ) {\n\tassert.expect( 2 );\n\tvar testing = {\n\t\t\t\"test\": \"testing\",\n\t\t\t\"test2\": \"testing\"\n\t\t},\n\t\telement = jQuery( \"<div data-test='testing'>\" ),\n\t\tnode = element[ 0 ];\n\n\t// set an attribute using attr to ensure it\n\tnode.setAttribute( \"data-test2\", \"testing\" );\n\tassert.deepEqual( element.data(), testing, \"Sanity Check\" );\n\n\tnode.setAttribute( \"data-test3\", \"testing\" );\n\tassert.deepEqual( element.data(), testing, \"The data didn't change even though the data-* attrs did\" );\n\n\t// clean up data cache\n\telement.remove();\n} );\n\nQUnit.test( \"data-* with JSON value can have newlines\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar x = jQuery( \"<div data-some='{\\n\\\"foo\\\":\\n\\t\\\"bar\\\"\\n}'></div>\" );\n\tassert.equal( x.data( \"some\" ).foo, \"bar\", \"got a JSON data- attribute with spaces\" );\n\tx.remove();\n} );\n\nQUnit.test( \".data doesn't throw when calling selection is empty. #13551\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery( null ).data( \"prop\" );\n\t\tassert.ok( true, \"jQuery(null).data('prop') does not throw\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, e.message );\n\t}\n} );\n\nQUnit.test( \"acceptData\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar flash, pdf, form;\n\n\tassert.equal( jQuery( document ).data( \"test\", 42 ).data( \"test\" ), 42, \"document\" );\n\tassert.equal( jQuery( document.documentElement ).data( \"test\", 42 ).data( \"test\" ), 42, \"documentElement\" );\n\tassert.equal( jQuery( {} ).data( \"test\", 42 ).data( \"test\" ), 42, \"object\" );\n\tassert.equal( jQuery( document.createElement( \"embed\" ) ).data( \"test\", 42 ).data( \"test\" ), 42, \"embed\" );\n\n\tflash = document.createElement( \"object\" );\n\tflash.setAttribute( \"classid\", \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" );\n\tassert.equal( jQuery( flash ).data( \"test\", 42 ).data( \"test\" ), 42, \"flash\" );\n\n\tpdf = document.createElement( \"object\" );\n\tpdf.setAttribute( \"classid\", \"clsid:CA8A9780-280D-11CF-A24D-444553540000\" );\n\tassert.equal( jQuery( pdf ).data( \"test\", 42 ).data( \"test\" ), 42, \"pdf\" );\n\n\tassert.strictEqual( jQuery( document.createComment( \"\" ) ).data( \"test\", 42 ).data( \"test\" ), undefined, \"comment\" );\n\tassert.strictEqual( jQuery( document.createTextNode( \"\" ) ).data( \"test\", 42 ).data( \"test\" ), undefined, \"text\" );\n\tassert.strictEqual( jQuery( document.createDocumentFragment() ).data( \"test\", 42 ).data( \"test\" ), undefined, \"documentFragment\" );\n\n\tform = jQuery( \"#form\" ).append( \"<input id='nodeType'/><input id='nodeName'/>\" )[ 0 ];\n\tassert.equal( jQuery( form ) .data( \"test\", 42 ).data( \"test\" ), 42, \"form with aliased DOM properties\" );\n} );\n\nQUnit.test( \"Check proper data removal of non-element descendants nodes (#8335)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div>text</div>\" ),\n\t\ttext = div.contents();\n\n\ttext.data( \"test\", \"test\" ); // This should be a noop.\n\tdiv.remove();\n\n\tassert.ok( !text.data( \"test\" ), \"Be sure data is not stored in non-element\" );\n} );\n\ntestIframe(\n\t\"enumerate data attrs on body (#14894)\",\n\t\"data/dataAttrs.html\",\n\tfunction( assert, jQuery, window, document, result ) {\n\t\tassert.expect( 1 );\n\t\tassert.equal( result, \"ok\", \"enumeration of data- attrs on body\" );\n\t}\n);\n\nQUnit.test( \"Check that the expando is removed when there's no more data\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div/>\" );\n\tdiv.data( \"some\", \"data\" );\n\tassert.equal( div.data( \"some\" ), \"data\", \"Data is added\" );\n\tdiv.removeData( \"some\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.strictEqual( div[ 0 ][ key ], undefined, \"Expando was not removed when there was no more data\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"Check that the expando is removed when there's no more data on non-nodes\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar key,\n\t\tobj = jQuery( { key: 42 } );\n\tobj.data( \"some\", \"data\" );\n\tassert.equal( obj.data( \"some\" ), \"data\", \"Data is added\" );\n\tobj.removeData( \"some\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in obj[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.ok( false, \"Expando was not removed when there was no more data\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \".data(prop) does not create expando\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div/>\" );\n\n\tdiv.data( \"foo\" );\n\tassert.equal( jQuery.hasData( div[ 0 ] ), false, \"No data exists after access\" );\n\n\t// Make sure no expando has been added\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.ok( false, \"Expando was created on access\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"keys matching Object.prototype properties  (gh-3256)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div/>\" );\n\n\tassert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,\n\t\t\"hasOwnProperty not matched (before forced data creation)\" );\n\n\t// Force the creation of a data object for this element.\n\tdiv.data( { foo: \"bar\" } );\n\n\tassert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,\n\t\t\"hasOwnProperty not matched (after forced data creation)\" );\n} );\n", "QUnit.module( \"deprecated\", { afterEach: moduleTeardown } );\n\n\nQUnit[ jQuery.fn.bind ? \"test\" : \"skip\" ]( \"bind/unbind\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar markup = jQuery(\n\t\t\"<div><p><span><b>b</b></span></p></div>\"\n\t);\n\n\tmarkup\n\t\t.find( \"b\" )\n\t\t.bind( \"click\", { bindData: 19 }, function( e, trig ) {\n\t\t\tassert.equal( e.type, \"click\", \"correct event type\" );\n\t\t\tassert.equal( e.data.bindData, 19, \"correct trigger data\" );\n\t\t\tassert.equal( trig, 42, \"correct bind data\" );\n\t\t\tassert.equal( e.target.nodeName.toLowerCase(), \"b\", \"correct element\" );\n\t\t} )\n\t\t.trigger( \"click\", [ 42 ] )\n\t\t.unbind( \"click\" )\n\t\t.trigger( \"click\" )\n\t\t.remove();\n} );\n\nQUnit[ jQuery.fn.delegate ? \"test\" : \"skip\" ]( \"delegate/undelegate\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar markup = jQuery(\n\t\t\"<div><p><span><b>b</b></span></p></div>\"\n\t);\n\n\tmarkup\n\t\t.delegate( \"b\", \"click\", function( e ) {\n\t\t\tassert.equal( e.type, \"click\", \"correct event type\" );\n\t\t\tassert.equal( e.target.nodeName.toLowerCase(), \"b\", \"correct element\" );\n\t\t} )\n\t\t.find( \"b\" )\n\t\t\t.trigger( \"click\" )\n\t\t\t.end()\n\t\t.undelegate( \"b\", \"click\" )\n\t\t.remove();\n} );\n\nQUnit[ jQuery.fn.hover ? \"test\" : \"skip\" ]( \"hover() mouseenter mouseleave\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar times = 0,\n\t\thandler1 = function() { ++times; },\n\t\thandler2 = function() { ++times; };\n\n\tjQuery( \"#firstp\" )\n\t\t.hover( handler1, handler2 )\n\t\t.mouseenter().mouseleave()\n\t\t.off( \"mouseenter\", handler1 )\n\t\t.off( \"mouseleave\", handler2 )\n\t\t.hover( handler1 )\n\t\t.mouseenter().mouseleave()\n\t\t.off( \"mouseenter mouseleave\", handler1 )\n\t\t.mouseenter().mouseleave();\n\n\tassert.equal( times, 4, \"hover handlers fired\" );\n} );\n\n\nQUnit[ jQuery.fn.click ? \"test\" : \"skip\" ]( \"trigger() shortcuts\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar counter, clickCounter,\n\t\telem = jQuery( \"<li><a href='#'>Change location</a></li>\" ).prependTo( \"#firstUL\" );\n\telem.find( \"a\" ).on( \"click\", function() {\n\t\tvar close = jQuery( \"spanx\", this ); // same with jQuery(this).find(\"span\");\n\t\tassert.equal( close.length, 0, \"Context element does not exist, length must be zero\" );\n\t\tassert.ok( !close[ 0 ], \"Context element does not exist, direct access to element must return undefined\" );\n\t\treturn false;\n\t} ).click();\n\n\t// manually clean up detached elements\n\telem.remove();\n\n\tjQuery( \"#check1\" ).click( function() {\n\t\tassert.ok( true, \"click event handler for checkbox gets fired twice, see #815\" );\n\t} ).click();\n\n\tcounter = 0;\n\tjQuery( \"#firstp\" )[ 0 ].onclick = function() {\n\t\tcounter++;\n\t};\n\tjQuery( \"#firstp\" ).click();\n\tassert.equal( counter, 1, \"Check that click, triggers onclick event handler also\" );\n\n\tclickCounter = 0;\n\tjQuery( \"#simon1\" )[ 0 ].onclick = function() {\n\t\tclickCounter++;\n\t};\n\tjQuery( \"#simon1\" ).click();\n\tassert.equal( clickCounter, 1, \"Check that click, triggers onclick event handler on an a tag also\" );\n} );\n\nif ( jQuery.ajax && jQuery.fn.ajaxSend ) {\n\tajaxTest( \"jQuery.ajax() - events with context\", 12, function( assert ) {\n\t\tvar context = document.createElement( \"div\" );\n\n\t\tfunction event( e ) {\n\t\t\tassert.equal( this, context, e.type );\n\t\t}\n\n\t\tfunction callback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( this, context, \"context is preserved on callback \" + msg );\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( context ).appendTo( \"#foo\" )\n\t\t\t\t\t.ajaxSend( event )\n\t\t\t\t\t.ajaxComplete( event )\n\t\t\t\t\t.ajaxError( event )\n\t\t\t\t\t.ajaxSuccess( event );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\tsuccess: callback( \"success\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t}, {\n\t\t\t\turl: url( \"404.txt\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\terror: callback( \"error\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t} ]\n\t\t};\n\t} );\n}\n\nQUnit[ jQuery.fn.click ? \"test\" : \"skip\" ]( \"Event aliases\", function( assert ) {\n\n\t// Explicitly skipping focus/blur events due to their flakiness\n\tvar\t$elem = jQuery( \"<div />\" ).appendTo( \"#qunit-fixture\" ),\n\t\taliases = ( \"resize scroll click dblclick mousedown mouseup \" +\n\t\t\t\"mousemove mouseover mouseout mouseenter mouseleave change \" +\n\t\t\t\"select submit keydown keypress keyup contextmenu\" ).split( \" \" );\n\tassert.expect( aliases.length );\n\n\tjQuery.each( aliases, function( i, name ) {\n\n\t\t// e.g. $(elem).click(...).click();\n\t\t$elem[ name ]( function( event ) {\n\t\t\tassert.equal( event.type, name, \"triggered \" + name );\n\t\t} )[ name ]().off( name );\n\t} );\n} );\n\nQUnit[ jQuery.parseJSON ? \"test\" : \"skip\" ]( \"jQuery.parseJSON\", function( assert ) {\n\tassert.expect( 20 );\n\n\tassert.strictEqual( jQuery.parseJSON( null ), null, \"primitive null\" );\n\tassert.strictEqual( jQuery.parseJSON( \"0.88\" ), 0.88, \"Number\" );\n\tassert.strictEqual(\n\t\tjQuery.parseJSON( \"\\\" \\\\\\\" \\\\\\\\ \\\\/ \\\\b \\\\f \\\\n \\\\r \\\\t \\\\u007E \\\\u263a \\\"\" ),\n\t\t\" \\\" \\\\ / \\b \\f \\n \\r \\t ~ \\u263A \",\n\t\t\"String escapes\"\n\t);\n\tassert.deepEqual( jQuery.parseJSON( \"{}\" ), {}, \"Empty object\" );\n\tassert.deepEqual( jQuery.parseJSON( \"{\\\"test\\\":1}\" ), { \"test\": 1 }, \"Plain object\" );\n\tassert.deepEqual( jQuery.parseJSON( \"[0]\" ), [ 0 ], \"Simple array\" );\n\n\tassert.deepEqual(\n\t\tjQuery.parseJSON( \"[ \\\"string\\\", -4.2, 2.7180e0, 3.14E-1, {}, [], true, false, null ]\" ),\n\t\t[ \"string\", -4.2, 2.718, 0.314, {}, [], true, false, null ],\n\t\t\"Array of all data types\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.parseJSON( \"{ \\\"string\\\": \\\"\\\", \\\"number\\\": 4.2e+1, \\\"object\\\": {},\" +\n\t\t\t\"\\\"array\\\": [[]], \\\"boolean\\\": [ true, false ], \\\"null\\\": null }\" ),\n\t\t{ string: \"\", number: 42, object: {}, array: [ [] ], \"boolean\": [ true, false ], \"null\": null },\n\t\t\"Dictionary of all data types\"\n\t);\n\n\tassert.deepEqual( jQuery.parseJSON( \"\\n{\\\"test\\\":1}\\t\" ), { \"test\": 1 },\n\t\t\"Leading and trailing whitespace are ignored\" );\n\n\tassert.throws( function() {\n\t\tjQuery.parseJSON();\n\t}, null, \"Undefined raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"\" );\n\t}, null, \"Empty string raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"''\" );\n\t}, null, \"Single-quoted string raises an error\" );\n\n\tassert.throws( function() {\n\t\tvar result = jQuery.parseJSON( \"0101\" );\n\n\t\t// Support: IE <=9 only\n\t\t// Ensure base-10 interpretation on browsers that erroneously accept leading-zero numbers\n\t\tif ( result === 101 ) {\n\t\t\tthrow new Error( \"close enough\" );\n\t\t}\n\t}, null, \"Leading-zero number raises an error or is parsed as decimal\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"{a:1}\" );\n\t}, null, \"Unquoted property raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"{'a':1}\" );\n\t}, null, \"Single-quoted property raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"[,]\" );\n\t}, null, \"Array element elision raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"{},[]\" );\n\t}, null, \"Comma expression raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"[]\\n,{}\" );\n\t}, null, \"Newline-containing comma expression raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"\\\"\\\"\\n\\\"\\\"\" );\n\t}, null, \"Automatic semicolon insertion raises an error\" );\n\n\tassert.strictEqual( jQuery.parseJSON( [ 0 ] ), 0, \"Input cast to string\" );\n} );\n\nQUnit[ jQuery.isArray ? \"test\" : \"skip\" ]( \"jQuery.isArray\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.strictEqual( jQuery.isArray, Array.isArray, \"Array.isArray equals jQuery.isArray\" );\n} );\n\nQUnit[ jQuery.nodeName ? \"test\" : \"skip\" ]( \"jQuery.nodeName\", function( assert ) {\n\tassert.expect( 8 );\n\n\tassert.strictEqual( typeof jQuery.nodeName, \"function\", \"jQuery.nodeName is a function\" );\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"div\" ), \"div\" ),\n\t\ttrue,\n\t\t\"Basic usage (true)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"div\" ), \"span\" ),\n\t\tfalse,\n\t\t\"Basic usage (false)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"div\" ), \"DIV\" ),\n\t\ttrue,\n\t\t\"Ignores case in the name parameter\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"section\" ), \"section\" ),\n\t\ttrue,\n\t\t\"Works on HTML5 tags (true)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"section\" ), \"article\" ),\n\t\tfalse,\n\t\t\"Works on HTML5 tags (false)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"custom-element\" ), \"custom-element\" ),\n\t\ttrue,\n\t\t\"Works on custom elements (true)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"custom-element\" ), \"my-element\" ),\n\t\tfalse,\n\t\t\"Works on custom elements (true)\"\n\t);\n} );\n\n\nQUnit[ jQuery.type ? \"test\" : \"skip\" ]( \"type\", function( assert ) {\n\tassert.expect( 28 );\n\n\tassert.equal( jQuery.type( null ), \"null\", \"null\" );\n\tassert.equal( jQuery.type( undefined ), \"undefined\", \"undefined\" );\n\tassert.equal( jQuery.type( true ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( false ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( Boolean( true ) ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( 0 ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( 1 ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( Number( 1 ) ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( \"\" ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( \"a\" ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( String( \"a\" ) ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( {} ), \"object\", \"Object\" );\n\tassert.equal( jQuery.type( /foo/ ), \"regexp\", \"RegExp\" );\n\tassert.equal( jQuery.type( new RegExp( \"asdf\" ) ), \"regexp\", \"RegExp\" );\n\tassert.equal( jQuery.type( [ 1 ] ), \"array\", \"Array\" );\n\tassert.equal( jQuery.type( new Date() ), \"date\", \"Date\" );\n\tassert.equal( jQuery.type( new Function( \"return;\" ) ), \"function\", \"Function\" );\n\tassert.equal( jQuery.type( function() {} ), \"function\", \"Function\" );\n\tassert.equal( jQuery.type( new Error() ), \"error\", \"Error\" );\n\tassert.equal( jQuery.type( window ), \"object\", \"Window\" );\n\tassert.equal( jQuery.type( document ), \"object\", \"Document\" );\n\tassert.equal( jQuery.type( document.body ), \"object\", \"Element\" );\n\tassert.equal( jQuery.type( document.createTextNode( \"foo\" ) ), \"object\", \"TextNode\" );\n\tassert.equal( jQuery.type( document.getElementsByTagName( \"*\" ) ), \"object\", \"NodeList\" );\n\n\t// Avoid Lint complaints\n\tvar MyString = String,\n\t\tMyNumber = Number,\n\t\tMyBoolean = Boolean,\n\t\tMyObject = Object;\n\tassert.equal( jQuery.type( new MyBoolean( true ) ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( new MyNumber( 1 ) ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( new MyString( \"a\" ) ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( new MyObject() ), \"object\", \"Object\" );\n} );\n\nQUnit[ jQuery.type && typeof Symbol === \"function\" ? \"test\" : \"skip\" ](\n\t\"type for `Symbol`\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.type( Symbol() ), \"symbol\", \"Symbol\" );\n\tassert.equal( jQuery.type( Object( Symbol() ) ), \"symbol\", \"Symbol\" );\n} );\n\nQUnit[ jQuery.isFunction ? \"test\" : \"skip\" ]( \"isFunction\", function( assert ) {\n\tassert.expect( 20 );\n\n\tvar mystr, myarr, myfunction, fn, obj, nodes, first, input, a;\n\n\t// Make sure that false values return false\n\tassert.ok( !jQuery.isFunction(), \"No Value\" );\n\tassert.ok( !jQuery.isFunction( null ), \"null Value\" );\n\tassert.ok( !jQuery.isFunction( undefined ), \"undefined Value\" );\n\tassert.ok( !jQuery.isFunction( \"\" ), \"Empty String Value\" );\n\tassert.ok( !jQuery.isFunction( 0 ), \"0 Value\" );\n\n\t// Check built-ins\n\tassert.ok( jQuery.isFunction( String ), \"String Function(\" + String + \")\" );\n\tassert.ok( jQuery.isFunction( Array ), \"Array Function(\" + Array + \")\" );\n\tassert.ok( jQuery.isFunction( Object ), \"Object Function(\" + Object + \")\" );\n\tassert.ok( jQuery.isFunction( Function ), \"Function Function(\" + Function + \")\" );\n\n\t// When stringified, this could be misinterpreted\n\tmystr = \"function\";\n\tassert.ok( !jQuery.isFunction( mystr ), \"Function String\" );\n\n\t// When stringified, this could be misinterpreted\n\tmyarr = [ \"function\" ];\n\tassert.ok( !jQuery.isFunction( myarr ), \"Function Array\" );\n\n\t// When stringified, this could be misinterpreted\n\tmyfunction = { \"function\": \"test\" };\n\tassert.ok( !jQuery.isFunction( myfunction ), \"Function Object\" );\n\n\t// Make sure normal functions still work\n\tfn = function() {};\n\tassert.ok( jQuery.isFunction( fn ), \"Normal Function\" );\n\n\tassert.notOk( jQuery.isFunction( Object.create( fn ) ), \"custom Function subclass\" );\n\n\tobj = document.createElement( \"object\" );\n\n\t// Some versions of Firefox and Chrome say this is a function\n\tassert.ok( !jQuery.isFunction( obj ), \"Object Element\" );\n\n\t// Since 1.3, this isn't supported (#2968)\n\t//assert.ok( jQuery.isFunction(obj.getAttribute), \"getAttribute Function\" );\n\n\tnodes = document.body.childNodes;\n\n\t// Safari says this is a function\n\tassert.ok( !jQuery.isFunction( nodes ), \"childNodes Property\" );\n\n\tfirst = document.body.firstChild;\n\n\t// Normal elements are reported ok everywhere\n\tassert.ok( !jQuery.isFunction( first ), \"A normal DOM Element\" );\n\n\tinput = document.createElement( \"input\" );\n\tinput.type = \"text\";\n\tdocument.body.appendChild( input );\n\n\t// Since 1.3, this isn't supported (#2968)\n\t//assert.ok( jQuery.isFunction(input.focus), \"A default function property\" );\n\n\tdocument.body.removeChild( input );\n\n\ta = document.createElement( \"a\" );\n\ta.href = \"some-function\";\n\tdocument.body.appendChild( a );\n\n\t// This serializes with the word 'function' in it\n\tassert.ok( !jQuery.isFunction( a ), \"Anchor Element\" );\n\n\tdocument.body.removeChild( a );\n\n\t// Recursive function calls have lengths and array-like properties\n\tfunction callme( callback ) {\n\t\tfunction fn( response ) {\n\t\t\tcallback( response );\n\t\t}\n\n\t\tassert.ok( jQuery.isFunction( fn ), \"Recursive Function Call\" );\n\n\t\tfn( { some: \"data\" } );\n\t}\n\n\tcallme( function() {\n\t\tcallme( function() {} );\n\t} );\n} );\n\nQUnit[ jQuery.isFunction ? \"test\" : \"skip\" ]( \"isFunction(cross-realm function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar iframe, doc,\n\t\tdone = assert.async();\n\n\t// Functions from other windows should be matched\n\tGlobals.register( \"iframeDone\" );\n\twindow.iframeDone = function( fn, detail ) {\n\t\twindow.iframeDone = undefined;\n\t\tassert.ok( jQuery.isFunction( fn ), \"cross-realm function\" +\n\t\t\t( detail ? \" - \" + detail : \"\" ) );\n\t\tdone();\n\t};\n\n\tiframe = jQuery( \"#qunit-fixture\" )[ 0 ].appendChild( document.createElement( \"iframe\" ) );\n\tdoc = iframe.contentDocument || iframe.contentWindow.document;\n\tdoc.open();\n\tdoc.write( \"<body onload='window.parent.iframeDone( function() {} );'>\" );\n\tdoc.close();\n} );\n\nsupportjQuery.each(\n\t{\n\t\tGeneratorFunction: \"function*() {}\",\n\t\tAsyncFunction: \"async function() {}\"\n\t},\n\tfunction( subclass, source ) {\n\t\tvar fn;\n\t\ttry {\n\t\t\tfn = Function( \"return \" + source )();\n\t\t} catch ( e ) {}\n\n\t\tQUnit[ jQuery.isFunction && fn ? \"test\" : \"skip\" ]( \"isFunction(\" + subclass + \")\",\n\t\t\tfunction( assert ) {\n\t\t\t\tassert.expect( 1 );\n\n\t\t\t\tassert.equal( jQuery.isFunction( fn ), true, source );\n\t\t\t}\n\t\t);\n\t}\n);\n\nQUnit[ jQuery.isFunction && typeof Symbol === \"function\" && Symbol.toStringTag ? \"test\" : \"skip\" ](\n\t\"isFunction(custom @@toStringTag)\",\n\tfunction( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar obj = {},\n\t\t\tfn = function() {};\n\t\tobj[ Symbol.toStringTag ] = \"Function\";\n\t\tfn[ Symbol.toStringTag ] = \"Object\";\n\n\t\tassert.equal( jQuery.isFunction( obj ), false, \"function-mimicking object\" );\n\t\tassert.equal( jQuery.isFunction( fn ), true, \"object-mimicking function\" );\n\t}\n);\n\nQUnit[ jQuery.isWindow ? \"test\" : \"skip\" ]( \"jQuery.isWindow\", function( assert ) {\n\tassert.expect( 14 );\n\n\tassert.ok( jQuery.isWindow( window ), \"window\" );\n\tassert.ok( jQuery.isWindow( document.getElementsByTagName( \"iframe\" )[ 0 ].contentWindow ), \"iframe.contentWindow\" );\n\tassert.ok( !jQuery.isWindow(), \"empty\" );\n\tassert.ok( !jQuery.isWindow( null ), \"null\" );\n\tassert.ok( !jQuery.isWindow( undefined ), \"undefined\" );\n\tassert.ok( !jQuery.isWindow( document ), \"document\" );\n\tassert.ok( !jQuery.isWindow( document.documentElement ), \"documentElement\" );\n\tassert.ok( !jQuery.isWindow( \"\" ), \"string\" );\n\tassert.ok( !jQuery.isWindow( 1 ), \"number\" );\n\tassert.ok( !jQuery.isWindow( true ), \"boolean\" );\n\tassert.ok( !jQuery.isWindow( {} ), \"object\" );\n\tassert.ok( !jQuery.isWindow( { setInterval: function() {} } ), \"fake window\" );\n\tassert.ok( !jQuery.isWindow( /window/ ), \"regexp\" );\n\tassert.ok( !jQuery.isWindow( function() {} ), \"function\" );\n} );\n\nQUnit[ jQuery.camelCase ? \"test\" : \"skip\" ]( \"jQuery.camelCase()\", function( assert ) {\n\n\tvar tests = {\n\t\t\"foo-bar\": \"fooBar\",\n\t\t\"foo-bar-baz\": \"fooBarBaz\",\n\t\t\"girl-u-want\": \"girlUWant\",\n\t\t\"the-4th-dimension\": \"the-4thDimension\",\n\t\t\"-o-tannenbaum\": \"OTannenbaum\",\n\t\t\"-moz-illa\": \"MozIlla\",\n\t\t\"-ms-take\": \"msTake\"\n\t};\n\n\tassert.expect( 7 );\n\n\tjQuery.each( tests, function( key, val ) {\n\t\tassert.equal( jQuery.camelCase( key ), val, \"Converts: \" + key + \" => \" + val );\n\t} );\n} );\n\nQUnit[ jQuery.now ? \"test\" : \"skip\" ]( \"jQuery.now\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.ok( typeof jQuery.now() === \"number\", \"jQuery.now is a function\" );\n} );\n\nQUnit[ jQuery.proxy ? \"test\" : \"skip\" ]( \"jQuery.proxy\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar test2, test3, test4, fn, cb,\n\t\ttest = function() {\n\t\t\tassert.equal( this, thisObject, \"Make sure that scope is set properly.\" );\n\t\t},\n\t\tthisObject = { foo: \"bar\", method: test };\n\n\t// Make sure normal works\n\ttest.call( thisObject );\n\n\t// Basic scoping\n\tjQuery.proxy( test, thisObject )();\n\n\t// Another take on it\n\tjQuery.proxy( thisObject, \"method\" )();\n\n\t// Make sure it doesn't freak out\n\tassert.equal( jQuery.proxy( null, thisObject ), undefined, \"Make sure no function was returned.\" );\n\n\t// Partial application\n\ttest2 = function( a ) {\n\t\tassert.equal( a, \"pre-applied\", \"Ensure arguments can be pre-applied.\" );\n\t};\n\tjQuery.proxy( test2, null, \"pre-applied\" )();\n\n\t// Partial application w/ normal arguments\n\ttest3 = function( a, b ) {\n\t\tassert.equal( b, \"normal\", \"Ensure arguments can be pre-applied and passed as usual.\" );\n\t};\n\tjQuery.proxy( test3, null, \"pre-applied\" )( \"normal\" );\n\n\t// Test old syntax\n\ttest4 = { \"meth\": function( a ) {\n\t\t\tassert.equal( a, \"boom\", \"Ensure old syntax works.\" );\n\t\t} };\n\tjQuery.proxy( test4, \"meth\" )( \"boom\" );\n\n\t// jQuery 1.9 improved currying with `this` object\n\tfn = function() {\n\t\tassert.equal( Array.prototype.join.call( arguments, \",\" ), \"arg1,arg2,arg3\", \"args passed\" );\n\t\tassert.equal( this.foo, \"bar\", \"this-object passed\" );\n\t};\n\tcb = jQuery.proxy( fn, null, \"arg1\", \"arg2\" );\n\tcb.call( thisObject, \"arg3\" );\n} );\n\nQUnit[ jQuery.isNumeric ? \"test\" : \"skip\" ]( \"isNumeric\", function( assert ) {\n\tassert.expect( 43 );\n\n\tvar t = jQuery.isNumeric,\n\t\tToString = function( value ) {\n\t\t\tthis.toString = function() {\n\t\t\t\treturn String( value );\n\t\t\t};\n\t\t};\n\n\tassert.ok( t( \"-10\" ), \"Negative integer string\" );\n\tassert.ok( t( \"0\" ), \"Zero string\" );\n\tassert.ok( t( \"5\" ), \"Positive integer string\" );\n\tassert.ok( t( -16 ), \"Negative integer number\" );\n\tassert.ok( t( 0 ), \"Zero integer number\" );\n\tassert.ok( t( 32 ), \"Positive integer number\" );\n\tassert.ok( t( \"-1.6\" ), \"Negative floating point string\" );\n\tassert.ok( t( \"4.536\" ), \"Positive floating point string\" );\n\tassert.ok( t( -2.6 ), \"Negative floating point number\" );\n\tassert.ok( t( 3.1415 ), \"Positive floating point number\" );\n\tassert.ok( t( 1.5999999999999999 ), \"Very precise floating point number\" );\n\tassert.ok( t( 8e5 ), \"Exponential notation\" );\n\tassert.ok( t( \"123e-2\" ), \"Exponential notation string\" );\n\tassert.ok( t( \"040\" ), \"Legacy octal integer literal string\" );\n\tassert.ok( t( \"0xFF\" ), \"Hexadecimal integer literal string (0x...)\" );\n\tassert.ok( t( \"0Xba\" ), \"Hexadecimal integer literal string (0X...)\" );\n\tassert.ok( t( 0xFFF ), \"Hexadecimal integer literal\" );\n\n\tif ( +\"0b1\" === 1 ) {\n\t\tassert.ok( t( \"0b111110\" ), \"Binary integer literal string (0b...)\" );\n\t\tassert.ok( t( \"0B111110\" ), \"Binary integer literal string (0B...)\" );\n\t} else {\n\t\tassert.ok( true, \"Browser does not support binary integer literal (0b...)\" );\n\t\tassert.ok( true, \"Browser does not support binary integer literal (0B...)\" );\n\t}\n\n\tif ( +\"0o1\" === 1 ) {\n\t\tassert.ok( t( \"0o76\" ), \"Octal integer literal string (0o...)\" );\n\t\tassert.ok( t( \"0O76\" ), \"Octal integer literal string (0O...)\" );\n\t} else {\n\t\tassert.ok( true, \"Browser does not support octal integer literal (0o...)\" );\n\t\tassert.ok( true, \"Browser does not support octal integer literal (0O...)\" );\n\t}\n\n\tassert.equal( t( new ToString( \"42\" ) ), false, \"Only limited to strings and numbers\" );\n\tassert.equal( t( \"\" ), false, \"Empty string\" );\n\tassert.equal( t( \"        \" ), false, \"Whitespace characters string\" );\n\tassert.equal( t( \"\\t\\t\" ), false, \"Tab characters string\" );\n\tassert.equal( t( \"abcdefghijklm1234567890\" ), false, \"Alphanumeric character string\" );\n\tassert.equal( t( \"xabcdefx\" ), false, \"Non-numeric character string\" );\n\tassert.equal( t( true ), false, \"Boolean true literal\" );\n\tassert.equal( t( false ), false, \"Boolean false literal\" );\n\tassert.equal( t( \"bcfed5.2\" ), false, \"Number with preceding non-numeric characters\" );\n\tassert.equal( t( \"7.2acdgs\" ), false, \"Number with trailing non-numeric characters\" );\n\tassert.equal( t( undefined ), false, \"Undefined value\" );\n\tassert.equal( t( null ), false, \"Null value\" );\n\tassert.equal( t( NaN ), false, \"NaN value\" );\n\tassert.equal( t( Infinity ), false, \"Infinity primitive\" );\n\tassert.equal( t( Number.POSITIVE_INFINITY ), false, \"Positive Infinity\" );\n\tassert.equal( t( Number.NEGATIVE_INFINITY ), false, \"Negative Infinity\" );\n\tassert.equal( t( new ToString( \"Devo\" ) ), false, \"Custom .toString returning non-number\" );\n\tassert.equal( t( {} ), false, \"Empty object\" );\n\tassert.equal( t( [] ), false, \"Empty array\" );\n\tassert.equal( t( [ 42 ] ), false, \"Array with one number\" );\n\tassert.equal( t( function() {} ), false, \"Instance of a function\" );\n\tassert.equal( t( new Date() ), false, \"Instance of a Date\" );\n} );\n\nQUnit[ jQuery.isNumeric && typeof Symbol === \"function\" ? \"test\" : \"skip\" ](\n\t\"isNumeric(Symbol)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.isNumeric( Symbol() ), false, \"Symbol\" );\n\tassert.equal( jQuery.isNumeric( Object( Symbol() ) ), false, \"Symbol inside an object\" );\n} );\n\nQUnit[ jQuery.trim ? \"test\" : \"skip\" ]( \"trim\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar nbsp = String.fromCharCode( 160 );\n\n\tassert.equal( jQuery.trim( \"hello  \" ), \"hello\", \"trailing space\" );\n\tassert.equal( jQuery.trim( \"  hello\" ), \"hello\", \"leading space\" );\n\tassert.equal( jQuery.trim( \"  hello   \" ), \"hello\", \"space on both sides\" );\n\tassert.equal( jQuery.trim( \"  \" + nbsp + \"hello  \" + nbsp + \" \" ), \"hello\", \"&nbsp;\" );\n\n\tassert.equal( jQuery.trim(), \"\", \"Nothing in.\" );\n\tassert.equal( jQuery.trim( undefined ), \"\", \"Undefined\" );\n\tassert.equal( jQuery.trim( null ), \"\", \"Null\" );\n\tassert.equal( jQuery.trim( 5 ), \"5\", \"Number\" );\n\tassert.equal( jQuery.trim( false ), \"false\", \"Boolean\" );\n\n\tassert.equal( jQuery.trim( \" \" ), \"\", \"space should be trimmed\" );\n\tassert.equal( jQuery.trim( \"ipad\\xA0\" ), \"ipad\", \"nbsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF\" ), \"\", \"zwsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF \\xA0! | \\uFEFF\" ), \"! |\", \"leading/trailing should be trimmed\" );\n} );\n", "( function() {\n\nif ( !jQuery.fn.width ) {\n\treturn;\n}\n\nQUnit.module( \"dimensions\", { afterEach: moduleTeardown } );\n\nfunction pass( val ) {\n\treturn val;\n}\n\nfunction fn( val ) {\n\treturn function() {\n\t\treturn val;\n\t};\n}\n\n/*\n\t======== local reference =======\n\tpass and fn can be used to test passing functions to setters\n\tSee testWidth below for an example\n\n\tpass( value, assert );\n\t\tThis function returns whatever value is passed in\n\n\tfn( value, assert );\n\t\tReturns a function that returns the value\n*/\n\nfunction testWidth( val, assert ) {\n\tassert.expect( 9 );\n\tvar $div, $empty;\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.width( val( 30 ) );\n\tassert.equal( $div.width(), 30, \"Test set to 30 correctly\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.width(), 30, \"Test hidden div\" );\n\t$div.css( \"display\", \"\" );\n\t$div.width( val( -1 ) ); // handle negative numbers by setting to 0 #11604\n\tassert.equal( $div.width(), 0, \"Test negative width normalized to 0\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.width(), 0, \"Test padding specified with pixels\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.width(), 0, \"Test border specified with pixels\" );\n\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\" } );\n\n\tjQuery( \"#nothiddendivchild\" ).css( { \"width\": 20, \"padding\": \"3px\", \"border\": \"2px solid #fff\" } );\n\tassert.equal( jQuery( \"#nothiddendivchild\" ).width(), 20, \"Test child width with border and padding\" );\n\tjQuery( \"#nothiddendiv, #nothiddendivchild\" ).css( { \"border\": \"\", \"padding\": \"\", \"width\": \"\" } );\n\n\t$empty = jQuery();\n\tassert.equal( $empty.width( val( 10 ) ), $empty, \"Make sure that setting a width on an empty set returns the set.\" );\n\tassert.strictEqual( $empty.width(), undefined, \"Make sure 'undefined' is returned on an empty set\" );\n\n\tassert.equal( jQuery( window ).width(), document.documentElement.clientWidth, \"Window width is equal to width reported by window/document.\" );\n}\n\nQUnit.test( \"width()\", function( assert ) {\n\ttestWidth( pass, assert );\n} );\n\nQUnit.test( \"width(Function)\", function( assert ) {\n\ttestWidth( fn, assert );\n} );\n\nQUnit.test( \"width(Function(args))\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"#nothiddendiv\" );\n\t$div.width( 30 ).width( function( i, width ) {\n\t\tassert.equal( width, 30, \"Make sure previous value is correct.\" );\n\t\treturn width + 1;\n\t} );\n\n\tassert.equal( $div.width(), 31, \"Make sure value was modified correctly.\" );\n} );\n\nfunction testHeight( val, assert ) {\n\tassert.expect( 9 );\n\n\tvar $div, blah;\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.height( val( 30 ) );\n\tassert.equal( $div.height(), 30, \"Test set to 30 correctly\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.height(), 30, \"Test hidden div\" );\n\t$div.css( \"display\", \"\" );\n\t$div.height( val( -1 ) ); // handle negative numbers by setting to 0 #11604\n\tassert.equal( $div.height(), 0, \"Test negative height normalized to 0\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.height(), 0, \"Test padding specified with pixels\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.height(), 0, \"Test border specified with pixels\" );\n\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"height\": \"1px\" } );\n\n\tjQuery( \"#nothiddendivchild\" ).css( { \"height\": 20, \"padding\": \"3px\", \"border\": \"2px solid #fff\" } );\n\tassert.equal( jQuery( \"#nothiddendivchild\" ).height(), 20, \"Test child height with border and padding\" );\n\tjQuery( \"#nothiddendiv, #nothiddendivchild\" ).css( { \"border\": \"\", \"padding\": \"\", \"height\": \"\" } );\n\n\tblah = jQuery( \"blah\" );\n\tassert.equal( blah.height( val( 10 ) ), blah, \"Make sure that setting a height on an empty set returns the set.\" );\n\tassert.strictEqual( blah.height(), undefined, \"Make sure 'undefined' is returned on an empty set\" );\n\n\tassert.equal( jQuery( window ).height(), document.documentElement.clientHeight, \"Window width is equal to width reported by window/document.\" );\n}\n\nQUnit.test( \"height()\", function( assert ) {\n\ttestHeight( pass, assert );\n} );\n\nQUnit.test( \"height(Function)\", function( assert ) {\n\ttestHeight( fn, assert );\n} );\n\nQUnit.test( \"height(Function(args))\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"#nothiddendiv\" );\n\t$div.height( 30 ).height( function( i, height ) {\n\t\tassert.equal( height, 30, \"Make sure previous value is correct.\" );\n\t\treturn height + 1;\n\t} );\n\n\tassert.equal( $div.height(), 31, \"Make sure value was modified correctly.\" );\n} );\n\nQUnit.test( \"innerWidth()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document );\n\n\tassert.equal( jQuery( window ).innerWidth(), $win.width(), \"Test on window\" );\n\tassert.equal( jQuery( document ).innerWidth(), $doc.width(), \"Test on document\" );\n\tassert.strictEqual( jQuery().innerWidth(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( {\n\t\t\"margin\": 10,\n\t\t\"border\": \"2px solid #fff\",\n\t\t\"width\": 30\n\t} );\n\n\tassert.equal( $div.innerWidth(), 30, \"Test with margin and border\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.innerWidth(), 70, \"Test with margin, border and padding\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.innerWidth(), 70, \"Test hidden div\" );\n\n\t// reset styles\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.innerWidth(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"innerHeight()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document );\n\n\tassert.equal( jQuery( window ).innerHeight(), $win.height(), \"Test on window\" );\n\tassert.equal( jQuery( document ).innerHeight(), $doc.height(), \"Test on document\" );\n\tassert.strictEqual( jQuery().innerHeight(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( {\n\t\t\"margin\": 10,\n\t\t\"border\": \"2px solid #fff\",\n\t\t\"height\": 30\n\t} );\n\n\tassert.equal( $div.innerHeight(), 30, \"Test with margin and border\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.innerHeight(), 70, \"Test with margin, border and padding\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.innerHeight(), 70, \"Test hidden div\" );\n\n\t// reset styles\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.innerHeight(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"outerWidth()\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document ),\n\t\twinwidth = $win.prop( \"innerWidth\" );\n\n\tassert.equal( jQuery( window ).outerWidth(), winwidth, \"Test on window without margin option\" );\n\tassert.equal( jQuery( window ).outerWidth( true ), winwidth, \"Test on window with margin option\" );\n\tassert.equal( jQuery( document ).outerWidth(), $doc.width(), \"Test on document without margin option\" );\n\tassert.equal( jQuery( document ).outerWidth( true ), $doc.width(), \"Test on document with margin option\" );\n\tassert.strictEqual( jQuery().outerWidth(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( \"width\", 30 );\n\n\tassert.equal( $div.outerWidth(), 30, \"Test with only width set\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.outerWidth(), 70, \"Test with padding\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.outerWidth(), 74, \"Test with padding and border\" );\n\t$div.css( \"margin\", \"10px\" );\n\tassert.equal( $div.outerWidth(), 74, \"Test with padding, border and margin without margin option\" );\n\t$div.css( \"position\", \"absolute\" );\n\tassert.equal( $div.outerWidth( true ), 94, \"Test with padding, border and margin with margin option\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.outerWidth( true ), 94, \"Test hidden div with padding, border and margin with margin option\" );\n\n\t// reset styles\n\t$div.css( { \"position\": \"\", \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.outerWidth(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"outerHeight()\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document ),\n\t\twinheight = $win.prop( \"innerHeight\" );\n\n\tassert.equal( jQuery( window ).outerHeight(), winheight, \"Test on window without margin option\" );\n\tassert.equal( jQuery( window ).outerHeight( true ), winheight, \"Test on window with margin option\" );\n\tassert.equal( jQuery( document ).outerHeight(), $doc.height(), \"Test on document without margin option\" );\n\tassert.equal( jQuery( document ).outerHeight( true ), $doc.height(), \"Test on document with margin option\" );\n\tassert.strictEqual( jQuery().outerHeight(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( \"height\", 30 );\n\n\tassert.equal( $div.outerHeight(), 30, \"Test with only height set\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.outerHeight(), 70, \"Test with padding\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.outerHeight(), 74, \"Test with padding and border\" );\n\t$div.css( \"margin\", \"10px\" );\n\tassert.equal( $div.outerHeight(), 74, \"Test with padding, border and margin without margin option\" );\n\t$div.css( \"position\", \"absolute\" );\n\tassert.equal( $div.outerHeight( true ), 94, \"Test with padding, border and margin with margin option\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.outerHeight( true ), 94, \"Test hidden div with padding, border and margin with margin option\" );\n\n\t// reset styles\n\t$div.css( { \"position\": \"\", \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.outerWidth(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #9441 #9300\", function( assert ) {\n\tassert.expect( 16 );\n\n\t// setup html\n\tvar $divNormal = jQuery( \"<div>\" ).css( { \"width\": \"100px\", \"height\": \"100px\", \"border\": \"10px solid white\", \"padding\": \"2px\", \"margin\": \"3px\" } ),\n\t\t$divChild = $divNormal.clone(),\n\t\t$divUnconnected = $divNormal.clone(),\n\t\t$divHiddenParent = jQuery( \"<div>\" ).css( \"display\", \"none\" ).append( $divChild ).appendTo( \"body\" );\n\t$divNormal.appendTo( \"body\" );\n\n\t// tests that child div of a hidden div works the same as a normal div\n\tassert.equal( $divChild.width(), $divNormal.width(), \"child of a hidden element width() is wrong see #9441\" );\n\tassert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), \"child of a hidden element innerWidth() is wrong see #9441\" );\n\tassert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), \"child of a hidden element outerWidth() is wrong see #9441\" );\n\tassert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), \"child of a hidden element outerWidth( true ) is wrong see #9300\" );\n\n\tassert.equal( $divChild.height(), $divNormal.height(), \"child of a hidden element height() is wrong see #9441\" );\n\tassert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), \"child of a hidden element innerHeight() is wrong see #9441\" );\n\tassert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), \"child of a hidden element outerHeight() is wrong see #9441\" );\n\tassert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), \"child of a hidden element outerHeight( true ) is wrong see #9300\" );\n\n\t// tests that child div of an unconnected div works the same as a normal div\n\tassert.equal( $divUnconnected.width(), $divNormal.width(), \"unconnected element width() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), \"unconnected element innerWidth() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), \"unconnected element outerWidth() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), \"unconnected element outerWidth( true ) is wrong see #9300\" );\n\n\tassert.equal( $divUnconnected.height(), $divNormal.height(), \"unconnected element height() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), \"unconnected element innerHeight() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), \"unconnected element outerHeight() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), \"unconnected element outerHeight( true ) is wrong see #9300\" );\n\n\t// teardown html\n\t$divHiddenParent.remove();\n\t$divNormal.remove();\n} );\n\nQUnit.test( \"getting dimensions shouldn't modify runtimeStyle see #9233\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tdiv = $div.get( 0 ),\n\t\truntimeStyle = div.runtimeStyle;\n\n\tif ( runtimeStyle ) {\n\t\tdiv.runtimeStyle.marginLeft = \"12em\";\n\t\tdiv.runtimeStyle.left = \"11em\";\n\t}\n\n\t$div.outerWidth( true );\n\n\tif ( runtimeStyle ) {\n\t\tassert.equal( div.runtimeStyle.left, \"11em\", \"getting dimensions modifies runtimeStyle, see #9233\" );\n\t} else {\n\t\tassert.ok( true, \"this browser doesn't support runtimeStyle, see #9233\" );\n\t}\n\n\t$div.remove();\n} );\n\nQUnit.test( \"table dimensions\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar table = jQuery( \"<table><colgroup><col/><col/></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\" ).appendTo( \"#qunit-fixture\" ),\n\t\ttdElem = table.find( \"td\" ).first(),\n\t\tcolElem = table.find( \"col\" ).first().width( 300 );\n\n\ttable.find( \"td\" ).css( { \"margin\": 0, \"padding\": 0 } );\n\n\tassert.equal( tdElem.width(), tdElem.width(), \"width() doesn't alter dimension values of empty cells, see #11293\" );\n\tassert.equal( colElem.width(), 300, \"col elements have width(), see #12243\" );\n} );\n\nQUnit.test( \"SVG dimensions (basic content-box)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar svg = jQuery( \"<svg style='width: 100px; height: 100px;'></svg>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( svg.width(), 100 );\n\tassert.equal( svg.height(), 100 );\n\n\tassert.equal( svg.innerWidth(), 100 );\n\tassert.equal( svg.innerHeight(), 100 );\n\n\tassert.equal( svg.outerWidth(), 100 );\n\tassert.equal( svg.outerHeight(), 100 );\n\n\tassert.equal( svg.outerWidth( true ), 100 );\n\tassert.equal( svg.outerHeight( true ), 100 );\n\n\tsvg.remove();\n} );\n\nQUnit.test( \"SVG dimensions (content-box)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar svg = jQuery( \"<svg style='width: 100px; height: 100px; box-sizing: content-box; border: 1px solid white; padding: 2px; margin: 3px'></svg>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( svg.width(), 100 );\n\tassert.equal( svg.height(), 100 );\n\n\tassert.equal( svg.innerWidth(), 104 );\n\tassert.equal( svg.innerHeight(), 104 );\n\n\tassert.equal( svg.outerWidth(), 106 );\n\tassert.equal( svg.outerHeight(), 106 );\n\n\tassert.equal( svg.outerWidth( true ), 112 );\n\tassert.equal( svg.outerHeight( true ), 112 );\n\n\tsvg.remove();\n} );\n\nQUnit.test( \"SVG dimensions (border-box)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar svg = jQuery( \"<svg style='width: 100px; height: 100px; box-sizing: border-box; border: 1px solid white; padding: 2px; margin: 3px'></svg>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( svg.width(), 94, \"width\" );\n\tassert.equal( svg.height(), 94, \"height\" );\n\n\tassert.equal( svg.innerWidth(), 98, \"innerWidth\" );\n\tassert.equal( svg.innerHeight(), 98, \"innerHeight\" );\n\n\tassert.equal( svg.outerWidth(), 100, \"outerWidth\" );\n\tassert.equal( svg.outerHeight(), 100, \"outerHeight\" );\n\n\tassert.equal( svg.outerWidth( true ), 106, \"outerWidth( true )\" );\n\tassert.equal( svg.outerHeight( true ), 106, \"outerHeight( true )\" );\n\n\tsvg.remove();\n} );\n\nQUnit.test( \"box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #10413\", function( assert ) {\n\tassert.expect( 16 );\n\n\t// setup html\n\tvar $divNormal = jQuery( \"<div>\" ).css( { \"boxSizing\": \"border-box\", \"width\": \"100px\", \"height\": \"100px\", \"border\": \"10px solid white\", \"padding\": \"2px\", \"margin\": \"3px\" } ),\n\t\t$divChild = $divNormal.clone(),\n\t\t$divUnconnected = $divNormal.clone(),\n\t\t$divHiddenParent = jQuery( \"<div>\" ).css( \"display\", \"none\" ).append( $divChild ).appendTo( \"body\" );\n\t$divNormal.appendTo( \"body\" );\n\n\t// tests that child div of a hidden div works the same as a normal div\n\tassert.equal( $divChild.width(), $divNormal.width(), \"child of a hidden element width() is wrong see #10413\" );\n\tassert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), \"child of a hidden element innerWidth() is wrong see #10413\" );\n\tassert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), \"child of a hidden element outerWidth() is wrong see #10413\" );\n\tassert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), \"child of a hidden element outerWidth( true ) is wrong see #10413\" );\n\n\tassert.equal( $divChild.height(), $divNormal.height(), \"child of a hidden element height() is wrong see #10413\" );\n\tassert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), \"child of a hidden element innerHeight() is wrong see #10413\" );\n\tassert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), \"child of a hidden element outerHeight() is wrong see #10413\" );\n\tassert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), \"child of a hidden element outerHeight( true ) is wrong see #10413\" );\n\n\t// tests that child div of an unconnected div works the same as a normal div\n\tassert.equal( $divUnconnected.width(), $divNormal.width(), \"unconnected element width() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), \"unconnected element innerWidth() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), \"unconnected element outerWidth() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), \"unconnected element outerWidth( true ) is wrong see #10413\" );\n\n\tassert.equal( $divUnconnected.height(), $divNormal.height(), \"unconnected element height() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), \"unconnected element innerHeight() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), \"unconnected element outerHeight() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), \"unconnected element outerHeight( true ) is wrong see #10413\" );\n\n\t// teardown html\n\t$divHiddenParent.remove();\n\t$divNormal.remove();\n} );\n\nQUnit.test( \"passing undefined is a setter #5571\", function( assert ) {\n\tassert.expect( 4 );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).height( 30 ).height( undefined ).height(), 30, \".height(undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).height( 30 ).innerHeight( undefined ).height(), 30, \".innerHeight(undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).height( 30 ).outerHeight( undefined ).height(), 30, \".outerHeight(undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).width( 30 ).width( undefined ).width(), 30, \".width(undefined) is chainable (#5571)\" );\n} );\n\nQUnit.test( \"setters with and without box-sizing:border-box\", function( assert ) {\n\tassert.expect( 120 );\n\n\tvar parent = jQuery( \"#foo\" ).css( { width: \"200px\", height: \"200px\", \"font-size\": \"16px\" } ),\n\t\tel_bb = jQuery( \"<div style='margin:5px;padding:1px;border:2px solid black;box-sizing:border-box;'></div>\" ).appendTo( parent ),\n\t\tel = jQuery( \"<div style='margin:5px;padding:1px;border:2px solid black;'></div>\" ).appendTo( parent ),\n\t\tel_bb_np = jQuery( \"<div style='margin:5px; padding:0px; border:0px solid green;box-sizing:border-box;'></div>\" ).appendTo( parent ),\n\t\tel_np = jQuery( \"<div style='margin:5px; padding:0px; border:0px solid green;'></div>\" ).appendTo( parent );\n\n\tjQuery.each( {\n\t\t\"number\": { set: 100, expected: 100 },\n\t\t\"em\": { set: \"10em\", expected: 160 },\n\t\t\"percentage\": { set: \"50%\", expected: 100 }\n\t}, function( units, values ) {\n\t\tassert.equal( el_bb.width( values.set ).width(), values.expected, \"test border-box width(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.innerWidth( values.set ).width(), values.expected - 2, \"test border-box innerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerWidth( values.set ).width(), values.expected - 6, \"test border-box outerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerWidth( values.set, false ).width(), values.expected - 6, \"test border-box outerWidth(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb.outerWidth( values.set, true ).width(), values.expected - 16, \"test border-box outerWidth(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_bb.height( values.set ).height(), values.expected, \"test border-box height(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.innerHeight( values.set ).height(), values.expected - 2, \"test border-box innerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerHeight( values.set ).height(), values.expected - 6, \"test border-box outerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerHeight( values.set, false ).height(), values.expected - 6, \"test border-box outerHeight(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb.outerHeight( values.set, true ).height(), values.expected - 16, \"test border-box outerHeight(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el.width( values.set ).width(), values.expected, \"test non-border-box width(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.innerWidth( values.set ).width(), values.expected - 2, \"test non-border-box innerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerWidth( values.set ).width(), values.expected - 6, \"test non-border-box outerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerWidth( values.set, false ).width(), values.expected - 6, \"test non-border-box outerWidth(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el.outerWidth( values.set, true ).width(), values.expected - 16, \"test non-border-box outerWidth(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el.height( values.set ).height(), values.expected, \"test non-border-box height(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.innerHeight( values.set ).height(), values.expected - 2, \"test non-border-box innerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerHeight( values.set ).height(), values.expected - 6, \"test non-border-box outerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerHeight( values.set, false ).height(), values.expected - 6, \"test non-border-box outerHeight(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el.outerHeight( values.set, true ).height(), values.expected - 16, \"test non-border-box outerHeight(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_bb_np.width( values.set ).width(), values.expected, \"test border-box width and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.innerWidth( values.set ).width(), values.expected, \"test border-box innerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerWidth( values.set ).width(), values.expected, \"test border-box outerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerWidth( values.set, false ).width(), values.expected, \"test border-box outerWidth and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerWidth( values.set, true ).width(), values.expected - 10, \"test border-box outerWidth and negative padding(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_bb_np.height( values.set ).height(), values.expected, \"test border-box height  and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.innerHeight( values.set ).height(), values.expected, \"test border-box innerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerHeight( values.set ).height(), values.expected, \"test border-box outerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerHeight( values.set, false ).height(), values.expected, \"test border-box outerHeight and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerHeight( values.set, true ).height(), values.expected - 10, \"test border-box outerHeight and negative padding(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_np.width( values.set ).width(), values.expected, \"test non-border-box width  and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.innerWidth( values.set ).width(), values.expected, \"test non-border-box innerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerWidth( values.set ).width(), values.expected, \"test non-border-box outerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerWidth( values.set, false ).width(), values.expected, \"test non-border-box outerWidth and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_np.outerWidth( values.set, true ).width(), values.expected - 10, \"test non-border-box outerWidth and negative padding(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_np.height( values.set ).height(), values.expected, \"test non-border-box height and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.innerHeight( values.set ).height(), values.expected, \"test non-border-box innerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerHeight( values.set ).height(), values.expected, \"test non-border-box outerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerHeight( values.set, false ).height(), values.expected, \"test non-border-box outerHeight and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_np.outerHeight( values.set, true ).height(), values.expected - 10, \"test non-border-box outerHeight and negative padding(\" + units + \", true) by roundtripping\" );\n\t} );\n} );\n\ntestIframe(\n\t\"window vs. large document\",\n\t\"dimensions/documentLarge.html\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tassert.expect( 2 );\n\n\t\tassert.ok( jQuery( document ).height() > jQuery( window ).height(), \"document height is larger than window height\" );\n\t\tassert.ok( jQuery( document ).width() > jQuery( window ).width(), \"document width is larger than window width\" );\n\t}\n);\n\nQUnit.test( \"allow modification of coordinates argument (gh-1848)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar offsetTop,\n\t\telement = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\telement.offset( function( index, coords ) {\n\t\tcoords.top = 100;\n\n\t\treturn coords;\n\t} );\n\n\toffsetTop = element.offset().top;\n\tassert.ok( Math.abs( offsetTop - 100 ) < 0.02,\n\t\t\"coordinates are modified (got offset.top: \" +  offsetTop + \")\" );\n} );\n\nQUnit.test( \"outside view position (gh-2836)\", function( assert ) {\n\n\t// This test ported from gh-2836 example\n\tassert.expect( 1 );\n\n\tvar parent,\n\t\thtml = [\n\t\t\"<div id=div-gh-2836>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\"</div>\"\n\t].join( \"\" ),\n\tstop = assert.async();\n\n\tparent = jQuery( html );\n\tparent.appendTo( \"#qunit-fixture\" );\n\n\tparent.one( \"scroll\", function() {\n\t\tvar pos = parent.find( \"div\" ).eq( 3 ).position();\n\n\t\tassert.strictEqual( pos.top, -100 );\n\t\tstop();\n\t} );\n\n\tparent.scrollTop( 400 );\n} );\n\nQUnit.test( \"width/height on element with transform (gh-3193)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $elem = jQuery( \"<div style='width: 200px; height: 200px; transform: scale(2);' />\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( $elem.width(), 200, \"Width ignores transforms\" );\n\tassert.equal( $elem.height(), 200, \"Height ignores transforms\" );\n} );\n\nQUnit.test( \"width/height on an inline element with no explicitly-set dimensions (gh-3571)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar $elem = jQuery( \"<span style='border: 2px solid black;padding: 1px;margin: 3px;'>Hello, I'm some text.</span>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery.each( [ \"Width\", \"Height\" ], function( i, method ) {\n\t\tvar val = $elem[ method.toLowerCase() ]();\n\t\tassert.notEqual( val, 0, method + \" should not be zero on inline element.\" );\n\t\tassert.equal( $elem[ \"inner\" + method ](), val + 2, \"inner\" + method + \" should include padding\" );\n\t\tassert.equal( $elem[ \"outer\" + method ](), val + 6, \"outer\" + method + \" should include padding and border\" );\n\t\tassert.equal( $elem[ \"outer\" + method ]( true ), val + 12, \"outer\" + method + \"(true) should include padding, border, and margin\" );\n\t} );\n} );\n\nQUnit.test( \"width/height on an inline element with percentage dimensions (gh-3611)\",\n\tfunction( assert ) {\n\t\tassert.expect( 4 );\n\n\t\tjQuery( \"<div id='gh3611' style='width: 100px;'>\" +\n\t\t\t\"<span style='width: 100%; padding: 0 5px'>text</span>\" +\n\t\t\"</div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\tvar $elem = jQuery( \"#gh3611 span\" ),\n\t\t\tactualWidth = $elem[ 0 ].getBoundingClientRect().width,\n\t\t\tmarginWidth = $elem.outerWidth( true ),\n\t\t\tborderWidth = $elem.outerWidth(),\n\t\t\tpaddingWidth = $elem.innerWidth(),\n\t\t\tcontentWidth = $elem.width();\n\n\t\tassert.equal( Math.round( borderWidth ), Math.round( actualWidth ),\n\t\t\t\".outerWidth(): \" + borderWidth + \" approximates \" + actualWidth );\n\t\tassert.equal( marginWidth, borderWidth, \".outerWidth(true) matches .outerWidth()\" );\n\t\tassert.equal( paddingWidth, borderWidth, \".innerWidth() matches .outerWidth()\" );\n\t\tassert.equal( contentWidth, borderWidth - 10, \".width() excludes padding\" );\n\t}\n);\n\n// Support: Firefox 70+\n// Firefox 70 & newer fail this test but the issue there is more profound - Firefox doesn't\n// subtract borders from table row computed widths.\n// See https://github.com/jquery/jquery/issues/4529\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=1590837\n// See https://github.com/w3c/csswg-drafts/issues/4444\nQUnit[ /firefox/i.test( navigator.userAgent ) ? \"skip\" : \"test\" ](\n\t\"width/height on a table row with phantom borders (gh-3698)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tjQuery( \"<table id='gh3698' style='border-collapse: separate; border-spacing: 0;'><tbody>\" +\n\t\t\"<tr style='margin: 0; border: 10px solid black; padding: 0'>\" +\n\t\t\t\"<td style='margin: 0; border: 0; padding: 0; height: 42px; width: 42px;'></td>\" +\n\t\t\"</tr>\" +\n\t\"</tbody></table>\" ).appendTo( \"#qunit-fixture\" );\n\n\tvar $elem = jQuery( \"#gh3698 tr\" );\n\n\tjQuery.each( [ \"Width\", \"Height\" ], function( i, method ) {\n\t\tassert.equal( $elem[ \"outer\" + method ](), 42,\n\t\t\t\"outer\" + method + \" should match content dimensions\" );\n\t\tassert.equal( $elem[ \"outer\" + method ]( true ), 42,\n\t\t\t\"outer\" + method + \"(true) should match content dimensions\" );\n\t} );\n} );\n\nQUnit.test( \"interaction with scrollbars (gh-3589)\", function( assert ) {\n\tassert.expect( 48 );\n\n\tvar i,\n\t\tsuffix = \"\",\n\t\tupdater = function( adjustment ) {\n\t\t\treturn function( i, old ) {\n\t\t\t\treturn old + adjustment;\n\t\t\t};\n\t\t},\n\t\tparent = jQuery( \"<div/>\" )\n\t\t\t.css( { position: \"absolute\", width: \"1000px\", height: \"1000px\" } )\n\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\tfraction = jQuery.support.boxSizingReliable() ?\n\t\t\tjQuery( \"<div style='width:4.5px;'/>\" ).appendTo( parent ).width() % 1 :\n\t\t\t0,\n\t\tborderWidth = 1,\n\t\tpadding = 2,\n\t\tsize = 100 + fraction,\n\t\tplainBox = jQuery( \"<div />\" )\n\t\t\t.css( {\n\t\t\t\t\"box-sizing\": \"content-box\",\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"scroll\",\n\t\t\t\twidth: size + \"px\",\n\t\t\t\theight: size + \"px\"\n\t\t\t} ),\n\t\tcontentBox = plainBox\n\t\t\t.clone()\n\t\t\t.css( {\n\t\t\t\tborder: borderWidth + \"px solid blue\",\n\t\t\t\tpadding: padding + \"px\"\n\t\t\t} ),\n\t\tborderBox = contentBox\n\t\t\t.clone()\n\t\t\t.css( { \"box-sizing\": \"border-box\" } ),\n\t\trelativeBorderBox = borderBox\n\t\t\t.clone()\n\t\t\t.css( { position: \"relative\" } ),\n\t\t$boxes = jQuery(\n\t\t\t[ plainBox[ 0 ], contentBox[ 0 ], borderBox[ 0 ], relativeBorderBox[ 0 ] ]\n\t\t).appendTo( parent ),\n\n\t\t// Support: IE 9 only\n\t\t// Computed width seems to report content width even with \"box-sizing: border-box\", and\n\t\t// \"overflow: scroll\" actually _shrinks_ the element (gh-3699).\n\t\tborderBoxLoss =\n\t\t\tborderBox.clone().css( { overflow: \"auto\" } ).appendTo( parent )[ 0 ].offsetWidth -\n\t\t\tborderBox[ 0 ].offsetWidth;\n\n\tif ( borderBoxLoss > 0 ) {\n\t\tborderBox[ 0 ].style.width = ( size + borderBoxLoss ) + \"px\";\n\t\tborderBox[ 0 ].style.height = ( size + borderBoxLoss ) + \"px\";\n\t}\n\n\tfor ( i = 0; i < 3; i++ ) {\n\t\tif ( i === 1 ) {\n\t\t\tsuffix = \" after increasing inner* by \" + i;\n\t\t\tsize += i;\n\t\t\t$boxes.innerWidth( updater( i ) ).innerHeight( updater( i ) );\n\t\t} else if ( i === 2 ) {\n\t\t\tsuffix = \" after increasing outer* by \" + i;\n\t\t\tsize += i;\n\t\t\t$boxes.outerWidth( updater( i ) ).outerHeight( updater( i ) );\n\t\t}\n\n\t\tassert.equal( plainBox.innerWidth(), size,\n\t\t\t\"plain content-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( plainBox.innerHeight(), size,\n\t\t\t\"plain content-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( plainBox.outerWidth(), size,\n\t\t\t\"plain content-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( plainBox.outerHeight(), size,\n\t\t\t\"plain content-box outerHeight includes scroll gutter\" + suffix );\n\n\t\tassert.equal( contentBox.innerWidth(), size + 2 * padding,\n\t\t\t\"content-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( contentBox.innerHeight(), size + 2 * padding,\n\t\t\t\"content-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( contentBox.outerWidth(), size + 2 * padding + 2 * borderWidth,\n\t\t\t\"content-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( contentBox.outerHeight(), size + 2 * padding + 2 * borderWidth,\n\t\t\t\"content-box outerHeight includes scroll gutter\" + suffix );\n\n\t\tassert.equal( borderBox.innerWidth(), size - 2 * borderWidth,\n\t\t\t\"border-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( borderBox.innerHeight(), size - 2 * borderWidth,\n\t\t\t\"border-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( borderBox.outerWidth(), size,\n\t\t\t\"border-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( borderBox.outerHeight(), size,\n\t\t\t\"border-box outerHeight includes scroll gutter\" + suffix );\n\n\t\tassert.equal( relativeBorderBox.innerWidth(), size - 2 * borderWidth,\n\t\t\t\"relative border-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( relativeBorderBox.innerHeight(), size - 2 * borderWidth,\n\t\t\t\"relative border-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( relativeBorderBox.outerWidth(), size,\n\t\t\t\"relative border-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( relativeBorderBox.outerHeight(), size,\n\t\t\t\"relative border-box outerHeight includes scroll gutter\" + suffix );\n\t}\n} );\n\nQUnit.test( \"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)\", function( assert ) {\n\tassert.expect( 5 );\n\tvar $table = jQuery( \"<table class='border-box' style='border-collapse: separate' />\" ).appendTo( \"#qunit-fixture\" ),\n\t\t$thead = jQuery( \"<thead />\" ).appendTo( $table ),\n\t\t$firstTh = jQuery( \"<th style='width: 200px;padding: 5px' />\" ),\n\t\t$secondTh = jQuery( \"<th style='width: 190px;padding: 5px' />\" ),\n\t\t$thirdTh = jQuery( \"<th style='width: 180px;padding: 5px' />\" ),\n\n\t\t// Support: Firefox 63, Edge 16-17, Android 8, iOS 7-11\n\t\t// These browsers completely ignore the border-box and height settings\n\t\t// The computed height is instead just line-height + border\n\t\t// Either way, what we're doing in css.js is correct\n\t\t$td = jQuery( \"<td style='height: 20px;padding: 5px;border: 1px solid;line-height:18px'>text</td>\" ),\n\n\t\t$tbody = jQuery( \"<tbody />\" ).appendTo( $table ),\n\t\t$textarea = jQuery( \"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box' />\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( \"<tr />\" ).appendTo( $thead ).append( $firstTh );\n\tjQuery( \"<tr />\" ).appendTo( $thead ).append( $secondTh );\n\tjQuery( \"<tr />\" ).appendTo( $thead ).append( $thirdTh );\n\tjQuery( \"<tr><td></td></tr>\" ).appendTo( $tbody ).append( $td );\n\n\tassert.strictEqual( $firstTh.outerWidth(), 200, \"First th has outerWidth 200.\" );\n\tassert.strictEqual( $secondTh.outerWidth(), 200, \"Second th has outerWidth 200.\" );\n\tassert.strictEqual( $thirdTh.outerWidth(), 200, \"Third th has outerWidth 200.\" );\n\n\t// Support: Android 4.0-4.3 only\n\t// Android Browser disregards td's box-sizing, treating it like it was content-box.\n\t// Unlike in IE, offsetHeight shares the same issue so there's no easy way to workaround\n\t// the issue without incurring high size penalty. Let's at least check we get the size\n\t// as the browser sees it.\n\tif ( /android 4\\.[0-3]/i.test( navigator.userAgent ) ) {\n\t\tassert.ok( [ 30, 32 ].indexOf( $td.outerHeight() ) > -1,\n\t\t\t\"outerHeight of td with border-box should include padding.\" );\n\t} else {\n\t\tassert.strictEqual( $td.outerHeight(), 30, \"outerHeight of td with border-box should include padding.\" );\n\t}\n\tassert.strictEqual( $textarea.outerHeight(), 6, \"outerHeight of textarea with border-box should include padding and border.\" );\n} );\n\n} )();\n", "( function() {\n\n// Can't test what ain't there\nif ( !jQuery.fx ) {\n\treturn;\n}\n\nvar oldRaf = window.requestAnimationFrame,\n\thideOptions = {\n\t\tinline: function() { jQuery.style( this, \"display\", \"none\" ); },\n\t\tcascade: function() { this.className = \"hidden\"; }\n\t};\n\nQUnit.module( \"effects\", {\n\tbeforeEach: function() {\n\t\twindow.requestAnimationFrame = null;\n\t\tthis.sandbox = sinon.sandbox.create();\n\t\tthis.clock = this.sandbox.useFakeTimers( 505877050 );\n\t\tthis._oldInterval = jQuery.fx.interval;\n\t\tjQuery.fx.step = {};\n\t\tjQuery.fx.interval = 10;\n\t},\n\tafterEach: function() {\n\t\tthis.sandbox.restore();\n\t\tjQuery.fx.stop();\n\t\tjQuery.fx.interval = this._oldInterval;\n\t\twindow.requestAnimationFrame = oldRaf;\n\t\treturn moduleTeardown.apply( this, arguments );\n\t}\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"sanity check\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#qunit-fixture:visible, #foo:visible\" ).length, 2, \"QUnit state is correct for testing effects\" );\n} );\n\nQUnit.test( \"show() basic\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div>\" ).hide().appendTo( \"#qunit-fixture\" ).show();\n\n\tassert.equal( div.css( \"display\" ), \"block\", \"Make sure pre-hidden divs show\" );\n\n\t// Clean up the detached node\n\tdiv.remove();\n} );\n\nQUnit.test( \"show()\", function( assert ) {\n\tassert.expect( 27 );\n\n\tvar div, speeds, test,\n\t\thiddendiv = jQuery( \"div.hidden\" );\n\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"none\", \"hiddendiv is display: none\" );\n\n\thiddendiv.css( \"display\", \"block\" );\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.show();\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.css( \"display\", \"\" );\n\n\tdiv = jQuery( \"#fx-queue div\" ).slice( 0, 4 );\n\tdiv.show().each( function() {\n\t\tassert.notEqual( this.style.display, \"none\", \"don't change any <div> with display block\" );\n\t} );\n\n\tspeeds = {\n\t\t\"null speed\": null,\n\t\t\"undefined speed\": undefined,\n\t\t\"false speed\": false\n\t};\n\n\tjQuery.each( speeds, function( name, speed ) {\n\t\tvar pass = true;\n\t\tdiv.hide().show( speed ).each( function() {\n\t\t\tif ( this.style.display === \"none\" ) {\n\t\t\t\tpass = false;\n\t\t\t}\n\t\t} );\n\t\tassert.ok( pass, \"Show with \" + name );\n\t} );\n\n\tjQuery.each( speeds, function( name, speed ) {\n\t\tvar pass = true;\n\t\tdiv.hide().show( speed, function() {\n\t\t\tpass = false;\n\t\t} );\n\t\tassert.ok( pass, \"Show with \" + name + \" does not call animate callback\" );\n\t} );\n\n\t// Tolerate data from show()/hide()\n\tassert.expectJqData( this, div, \"olddisplay\" );\n\n\tjQuery(\n\t\t\"<div id='show-tests'>\" +\n\t\t\"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" +\n\t\t\"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>\" +\n\t\t\"<ul><li></li></ul></div>\"\n\t).appendTo( \"#qunit-fixture\" ).find( \"*\" ).css( \"display\", \"none\" );\n\n\ttest = {\n\t\t\"div\": \"block\",\n\t\t\"p\": \"block\",\n\t\t\"a\": \"inline\",\n\t\t\"code\": \"inline\",\n\t\t\"pre\": \"block\",\n\t\t\"span\": \"inline\",\n\t\t\"table\": \"table\",\n\t\t\"thead\": \"table-header-group\",\n\t\t\"tbody\": \"table-row-group\",\n\t\t\"tr\": \"table-row\",\n\t\t\"th\": \"table-cell\",\n\t\t\"td\": \"table-cell\",\n\t\t\"ul\": \"block\",\n\t\t\"li\": \"list-item\"\n\t};\n\n\tjQuery.each( test, function( selector, expected ) {\n\t\tvar elem = jQuery( selector, \"#show-tests\" ).show();\n\t\tassert.equal( elem.css( \"display\" ), expected, \"Show using correct display type for \" + selector );\n\t} );\n\n\tjQuery( \"#show-tests\" ).remove();\n\n\t// Make sure that showing or hiding a text node doesn't cause an error\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).show().remove();\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).hide().remove();\n} );\n\nsupportjQuery.each( hideOptions, function( type, setup ) {\n\tQUnit.test( \"show(Number) - \" + type + \" hidden\", function( assert ) {\n\t\tassert.expect( 30 );\n\n\t\tjQuery(\n\t\t\t\"<div id='show-tests'>\" +\n\t\t\t\"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" +\n\t\t\t\"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody>\" +\n\t\t\t\t\"</table>\" +\n\t\t\t\"<ul><li></li></ul></div>\"\n\t\t).appendTo( \"#qunit-fixture\" ).find( \"*\" ).each( setup );\n\n\t\t// Note: inline elements are expected to be inline-block\n\t\t// because we're showing width/height\n\t\t// Can't animate width/height inline\n\t\t// See #14344\n\t\tvar test = {\n\t\t\t\"div\": \"block\",\n\t\t\t\"p\": \"block\",\n\t\t\t\"a\": \"inline\",\n\t\t\t\"code\": \"inline\",\n\t\t\t\"pre\": \"block\",\n\t\t\t\"span\": \"inline\",\n\t\t\t\"table\": \"table\",\n\t\t\t\"thead\": \"table-header-group\",\n\t\t\t\"tbody\": \"table-row-group\",\n\t\t\t\"tr\": \"table-row\",\n\t\t\t\"th\": \"table-cell\",\n\t\t\t\"td\": \"table-cell\",\n\t\t\t\"ul\": \"block\",\n\t\t\t\"li\": \"list-item\"\n\t\t};\n\n\t\tjQuery.each( test, function( selector ) {\n\t\t\tjQuery( selector, \"#show-tests\" ).show( 100 );\n\t\t} );\n\t\tthis.clock.tick( 50 );\n\t\tjQuery.each( test, function( selector, expected ) {\n\t\t\tjQuery( selector, \"#show-tests\" ).each( function() {\n\t\t\t\tassert.equal(\n\t\t\t\t\tjQuery( this ).css( \"display\" ),\n\t\t\t\t\texpected === \"inline\" ? \"inline-block\" : expected,\n\t\t\t\t\t\"Correct display type during animation for \" + selector\n\t\t\t\t);\n\t\t\t} );\n\t\t} );\n\t\tthis.clock.tick( 50 );\n\t\tjQuery.each( test, function( selector, expected ) {\n\t\t\tjQuery( selector, \"#show-tests\" ).each( function() {\n\t\t\t\tassert.equal( jQuery( this ).css( \"display\" ), expected,\n\t\t\t\t\t\"Correct display type after animation for \" + selector );\n\t\t\t} );\n\t\t} );\n\n\t\tjQuery( \"#show-tests\" ).remove();\n\t} );\n} );\n\n// Supports #7397\nsupportjQuery.each( hideOptions, function( type, setup ) {\n\tQUnit.test( \"Persist correct display value - \" + type + \" hidden\", function( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tjQuery( \"<div id='show-tests'><span style='position:absolute;'>foo</span></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" ).find( \"*\" ).each( setup );\n\n\t\tvar $span = jQuery( \"#show-tests span\" ),\n\t\t\tdisplayNone = $span.css( \"display\" ),\n\t\t\tdisplay = \"\",\n\t\t\tclock = this.clock;\n\n\t\t$span.show();\n\n\t\tdisplay = $span.css( \"display\" );\n\n\t\t$span.hide();\n\n\t\t$span.fadeIn( 100, function() {\n\t\t\tassert.equal( $span.css( \"display\" ), display, \"Expecting display: \" + display );\n\t\t\t$span.fadeOut( 100, function() {\n\t\t\t\tassert.equal( $span.css( \"display\" ), displayNone, \"Expecting display: \" + displayNone );\n\t\t\t\t$span.fadeIn( 100, function() {\n\t\t\t\t\tassert.equal( $span.css( \"display\" ), display, \"Expecting display: \" + display );\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\tclock.tick( 300 );\n\n\t\tassert.expectJqData( this, $span, \"olddisplay\" );\n\t} );\n\n\tQUnit[\n\t\tdocument.body.attachShadow && document.body.getRootNode ?\n\t\t\t\"test\" :\n\t\t\t\"skip\"\n\t\t]( \"Persist correct display value - \" + type + \" hidden, shadow child\", function( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tjQuery( \"<div id='shadowHost'></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\tvar shadowHost = document.querySelector( \"#shadowHost\" );\n\t\tvar shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );\n\t\tshadowRoot.innerHTML = \"<style>.hidden{display: none;}</style>\" +\n\t\t\t\"<span id='shadowChild' class='hidden'></span>\";\n\t\tvar shadowChild = shadowRoot.querySelector( \"#shadowChild\" );\n\n\t\tvar $shadowChild = jQuery( shadowChild );\n\t\tvar displayNone = \"none\";\n\t\tvar display = \"inline\";\n\t\tvar clock = this.clock;\n\n\t\t$shadowChild.fadeIn( 100, function() {\n\t\t\tassert.equal( $shadowChild.css( \"display\" ), display, \"Expecting shadow display: \" + display );\n\t\t\t$shadowChild.fadeOut( 100, function() {\n\t\t\t\tassert.equal( $shadowChild.css( \"display\" ), displayNone, \"Expecting shadow display: \" + displayNone );\n\t\t\t\t$shadowChild.fadeIn( 100, function() {\n\t\t\t\t\tassert.equal( $shadowChild.css( \"display\" ), display, \"Expecting shadow display: \" + display );\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\tclock.tick( 300 );\n\n\t\tassert.expectJqData( this, $shadowChild, \"olddisplay\" );\n\t} );\n} );\n\nQUnit.test( \"animate(Hash, Object, Function)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar hash = { opacity: \"show\" },\n\t\thashCopy = jQuery.extend( {}, hash );\n\tjQuery( \"#foo\" ).animate( hash, 0, function() {\n\t\tassert.equal( hash.opacity, hashCopy.opacity, \"Check if animate changed the hash parameter\" );\n\t} );\n} );\n\nQUnit.test( \"animate relative values\", function( assert ) {\n\n\tvar value = 40,\n\t\tclock = this.clock,\n\t\tbases = [ \"%\", \"px\", \"em\" ],\n\t\tadjustments = [ \"px\", \"em\" ],\n\t\tcontainer = jQuery( \"<div></div>\" )\n\t\t\t.css( { position: \"absolute\", height: \"50em\", width: \"50em\" } ),\n\t\tanimations = bases.length * adjustments.length;\n\n\tassert.expect( 2 * animations );\n\n\tjQuery.each( bases, function( _, baseUnit ) {\n\t\tjQuery.each( adjustments, function( _, adjustUnit ) {\n\t\t\tvar base = value + baseUnit,\n\t\t\t\tadjust = { height: \"+=2\" + adjustUnit, width: \"-=2\" + adjustUnit },\n\t\t\t\telem = jQuery( \"<div></div>\" )\n\t\t\t\t\t.appendTo( container.clone().appendTo( \"#qunit-fixture\" ) )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\theight: base,\n\t\t\t\t\t\twidth: value + adjustUnit\n\t\t\t\t\t} ),\n\t\t\t\tbaseScale = elem[ 0 ].offsetHeight / value,\n\t\t\t\tadjustScale = elem[ 0 ].offsetWidth / value;\n\n\t\t\telem.css( \"width\", base ).animate( adjust, 100, function() {\n\t\t\t\tassert.equal( this.offsetHeight, value * baseScale + 2 * adjustScale,\n\t\t\t\t\tbaseUnit + \"+=\" + adjustUnit );\n\t\t\t\tassert.equal( this.offsetWidth, value * baseScale - 2 * adjustScale,\n\t\t\t\t\tbaseUnit + \"-=\" + adjustUnit );\n\n\t\t\t} );\n\n\t\t\tclock.tick( 100 );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"animate negative height\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { height: -100 }, 100, function() {\n\t\tassert.equal( this.offsetHeight, 0, \"Verify height.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate negative margin\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { \"marginTop\": -100 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"marginTop\" ), \"-100px\", \"Verify margin.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate negative margin with px\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { marginTop: \"-100px\" }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"marginTop\" ), \"-100px\", \"Verify margin.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate negative padding\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { \"paddingBottom\": -100 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"paddingBottom\" ), \"0px\", \"Verify paddingBottom.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate block as inline width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"#foo\" ).css( { display: \"inline\", width: \"\", height: \"\" } ).animate( { width: 42, height: 42 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"inline-block\", \"inline-block was set on non-floated inline element when animating width/height\" );\n\t\tassert.equal( this.offsetWidth, 42, \"width was animated\" );\n\t\tassert.equal( this.offsetHeight, 42, \"height was animated\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate native inline width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"#foo\" ).css( { display: \"\", width: \"\", height: \"\" } )\n\t\t.append( \"<span>text</span>\" )\n\t\t.children( \"span\" )\n\t\t\t.animate( { width: 42, height: 42 }, 100, function() {\n\t\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"inline-block\", \"inline-block was set on non-floated inline element when animating width/height\" );\n\t\t\t\tassert.equal( this.offsetWidth, 42, \"width was animated\" );\n\t\t\t\tassert.equal( this.offsetHeight, 42, \"height was animated\" );\n\t\t\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate block width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ).css( {\n\t\tdisplay: \"block\",\n\t\twidth: 20,\n\t\theight: 20,\n\t\tpaddingLeft: 60\n\t} ).animate( {\n\t\twidth: 42,\n\t\theight: 42\n\t}, {\n\t\tduration: 100,\n\t\tstep: function() {\n\t\t\tif ( jQuery( this ).width() > 42 ) {\n\t\t\t\tassert.ok( false, \"width was incorrectly augmented during animation\" );\n\t\t\t}\n\t\t},\n\t\tcomplete: function() {\n\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"block\", \"inline-block was not set on block element when animating width/height\" );\n\t\t\tassert.equal( jQuery( this ).width(), 42, \"width was animated\" );\n\t\t\tassert.equal( jQuery( this ).height(), 42, \"height was animated\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate table width/height\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#table\" ).animate( { width: 42, height: 42 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"table\", \"display mode is correct\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate table-row width/height\", function( assert ) {\n\tassert.expect( 3 );\n\tvar tr = jQuery( \"#table\" )\n\t\t\t.attr( { \"cellspacing\": 0, \"cellpadding\": 0, \"border\": 0 } )\n\t\t\t.html( \"<tr style='height:42px;'><td style='padding:0;'><div style='width:20px;height:20px;'></div></td></tr>\" )\n\t\t\t.find( \"tr\" );\n\n\ttr.animate( { width: 10, height: 10 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"table-row\", \"display mode is correct\" );\n\t\tassert.equal( this.offsetWidth, 20, \"width animated to shrink wrap point\" );\n\t\tassert.equal( this.offsetHeight, 20, \"height animated to shrink wrap point\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate table-cell width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar td = jQuery( \"#table\" )\n\t\t\t.attr( { \"cellspacing\": 0, \"cellpadding\": 0, \"border\": 0 } )\n\t\t\t.html( \"<tr><td style='width:42px;height:42px;padding:0;'><div style='width:20px;height:20px;'></div></td></tr>\" )\n\t\t\t.find( \"td\" );\n\n\ttd.animate( { width: 10, height: 10 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"table-cell\", \"display mode is correct\" );\n\t\tassert.equal( this.offsetWidth, 20, \"width animated to shrink wrap point\" );\n\t\tassert.equal( this.offsetHeight, 20, \"height animated to shrink wrap point\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate percentage(%) on width/height\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"<div style='position:absolute;top:-999px;left:-999px;width:60px;height:60px;'><div style='width:50%;height:50%;'></div></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" ).children( \"div\" );\n\n\t$div.animate( { width: \"25%\", height: \"25%\" }, 13, function() {\n\t\tvar $this = jQuery( this );\n\t\tassert.equal( $this.css( \"width\" ), \"15px\", \"Width was animated to 15px rather than 25px\" );\n\t\tassert.equal( $this.css( \"height\" ), \"15px\", \"Height was animated to 15px rather than 25px\" );\n\t} );\n\tthis.clock.tick( 20 );\n} );\n\nQUnit.test( \"animate resets overflow-x and overflow-y when finished\", function( assert ) {\n\tassert.expect( 2 );\n\tjQuery( \"#foo\" )\n\t\t.css( { display: \"block\", width: 20, height: 20, overflowX: \"visible\", overflowY: \"auto\" } )\n\t\t.animate( { width: 42, height: 42 }, 100, function() {\n\t\t\tassert.equal( this.style.overflowX, \"visible\", \"overflow-x is visible\" );\n\t\t\tassert.equal( this.style.overflowY, \"auto\", \"overflow-y is auto\" );\n\t\t} );\n\tthis.clock.tick( 100 );\n} );\n\n/* // This test ends up being flaky depending upon the CPU load\nQUnit.test(\"animate option (queue === false)\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect(1);\n\n\tvar order = [];\n\n\tvar $foo = jQuery(\"#foo\");\n\t$foo.animate({width:\"100px\"}, 3000, function () {\n\t\t// should finish after unqueued animation so second\n\t\torder.push(2);\n\t\tassert.deepEqual( order, [ 1, 2 ], \"Animations finished in the correct order\" );\n\t\tdone();\n\t});\n\t$foo.animate({fontSize:\"2em\"}, {queue:false, duration:10, complete:function () {\n\t\t// short duration and out of queue so should finish first\n\t\torder.push(1);\n\t}});\n});\n*/\n\nQUnit.test( \"animate option { queue: false }\", function( assert ) {\n\tassert.expect( 2 );\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\tfontSize: \"2em\"\n\t}, {\n\t\tqueue: false,\n\t\tduration: 10,\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Animation Completed\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 10 );\n\n\tassert.equal( foo.queue().length, 0, \"Queue is empty\" );\n} );\n\nQUnit.test( \"animate option { queue: true }\", function( assert ) {\n\tassert.expect( 2 );\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\tfontSize: \"2em\"\n\t}, {\n\t\tqueue: true,\n\t\tduration: 10,\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Animation Completed\" );\n\t\t}\n\t} );\n\n\tassert.notEqual( foo.queue().length, 0, \"Default queue is not empty\" );\n\n\t//clear out existing timers before next test\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"animate option { queue: 'name' }\", function( assert ) {\n\tassert.expect( 5 );\n\tvar foo = jQuery( \"#foo\" ),\n\t\torigWidth = parseFloat( foo.css( \"width\" ) ),\n\t\torder = [];\n\n\tfoo.animate( { width: origWidth + 100 }, {\n\t\tqueue: \"name\",\n\t\tduration: 1,\n\t\tcomplete: function() {\n\n\t\t\t// second callback function\n\t\t\torder.push( 2 );\n\t\t\tassert.equal( parseFloat( foo.css( \"width\" ) ), origWidth + 100, \"Animation ended\" );\n\t\t\tassert.equal( foo.queue( \"name\" ).length, 1, \"Queue length of 'name' queue\" );\n\t\t}\n\t} ).queue( \"name\", function() {\n\n\t\t// last callback function\n\t\tassert.deepEqual( order, [ 1, 2 ], \"Callbacks in expected order\" );\n\t} );\n\n\t// this is the first callback function that should be called\n\torder.push( 1 );\n\tassert.equal( parseFloat( foo.css( \"width\" ) ), origWidth, \"Animation does not start on its own.\" );\n\tassert.equal( foo.queue( \"name\" ).length, 2, \"Queue length of 'name' queue\" );\n\n\tfoo.dequeue( \"name\" );\n\tthis.clock.tick( 10 );\n\n} );\n\nQUnit.test( \"animate with no properties\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo,\n\t\tdivs = jQuery( \"div\" ),\n\t\tcount = 0;\n\n\tdivs.animate( {}, function() {\n\t\tcount++;\n\t} );\n\n\tassert.equal( divs.length, count, \"Make sure that callback is called for each element in the set.\" );\n\n\tfoo = jQuery( \"#foo\" );\n\n\tfoo.animate( {} );\n\tfoo.animate( { top: 10 }, 100, function() {\n\t\tassert.ok( true, \"Animation was properly dequeued.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate duration 0\", function( assert ) {\n\tassert.expect( 11 );\n\n\tvar $elem,\n\t\t$elems = jQuery( [ { a:0 }, { a:0 } ] ),\n\t\tcounter = 0;\n\n\tassert.equal( jQuery.timers.length, 0, \"Make sure no animation was running from another test\" );\n\n\t$elems.eq( 0 ).animate( { a:1 }, 0, function() {\n\t\tassert.ok( true, \"Animate a simple property.\" );\n\t\tcounter++;\n\t} );\n\n\t// Failed until [6115]\n\tassert.equal( jQuery.timers.length, 0, \"Make sure synchronic animations are not left on jQuery.timers\" );\n\n\tassert.equal( counter, 1, \"One synchronic animations\" );\n\n\t$elems.animate( { a:2 }, 0, function() {\n\t\tassert.ok( true, \"Animate a second simple property.\" );\n\t\tcounter++;\n\t} );\n\n\tassert.equal( counter, 3, \"Multiple synchronic animations\" );\n\n\t$elems.eq( 0 ).animate( { a:3 }, 0, function() {\n\t\tassert.ok( true, \"Animate a third simple property.\" );\n\t\tcounter++;\n\t} );\n\t$elems.eq( 1 ).animate( { a:3 }, 200, function() {\n\t\tcounter++;\n\n\t\t// Failed until [6115]\n\t\tassert.equal( counter, 5, \"One synchronic and one asynchronic\" );\n\t} );\n\tthis.clock.tick( 200 );\n\n\t$elem = jQuery( \"<div />\" );\n\t$elem.show( 0, function() {\n\t\tassert.ok( true, \"Show callback with no duration\" );\n\t} );\n\t$elem.hide( 0, function() {\n\t\tassert.ok( true, \"Hide callback with no duration\" );\n\t} );\n\n\t// manually clean up detached elements\n\t$elem.remove();\n} );\n\nQUnit.test( \"animate hyphenated properties\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#foo\" )\n\t\t.css( \"font-size\", 10 )\n\t\t.animate( { \"font-size\": 20 }, 200, function() {\n\t\t\tassert.equal( this.style.fontSize, \"20px\", \"The font-size property was animated.\" );\n\t\t} );\n\n\t// FIXME why is this double only when run with other tests\n\tthis.clock.tick( 400 );\n\n} );\n\nQUnit.test( \"animate non-element\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar obj = { test: 0 };\n\n\tjQuery( obj ).animate( { test: 200 }, 200, function() {\n\t\tassert.equal( obj.test, 200, \"The custom property should be modified.\" );\n\t} );\n\tthis.clock.tick( 200 );\n} );\n\nQUnit.test( \"animate non-element's zIndex without appending \\\"px\\\"\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar obj = { zIndex: 0 };\n\n\tjQuery( obj ).animate( { zIndex: 200 }, 200, function() {\n\t\tassert.equal( obj.zIndex, 200, \"The custom property should be modified without appending \\\"px\\\".\" );\n\t} );\n\tthis.clock.tick( 200 );\n} );\n\nQUnit.test( \"stop()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $one, $two,\n\t\t$foo = jQuery( \"#foo\" ),\n\t\tw = 0,\n\t\tnw;\n\n\t$foo.hide().css( \"width\", 200 )\n\t\t.animate( { \"width\": \"show\" }, 1500 );\n\n\tthis.clock.tick( 100 );\n\tnw = $foo.css( \"width\" );\n\tassert.notEqual( parseFloat( nw ), w, \"An animation occurred \" + nw + \" \" + w + \"px\" );\n\t$foo.stop();\n\n\tnw = $foo.css( \"width\" );\n\tassert.notEqual( parseFloat( nw ), w, \"Stop didn't reset the animation \" + nw + \" \" + w + \"px\" );\n\n\tthis.clock.tick( 100 );\n\n\t$foo.removeData();\n\t$foo.removeData( undefined, true );\n\tassert.equal( nw, $foo.css( \"width\" ), \"The animation didn't continue\" );\n\n\t$one = jQuery( \"#fadein\" );\n\t$two = jQuery( \"#show\" );\n\t$one.fadeTo( 100, 0, function() {\n\t\t$one.stop();\n\t} );\n\tthis.clock.tick( 100 );\n\t$two.fadeTo( 100, 0, function() {\n\t\tassert.equal( $two.css( \"opacity\" ), \"0\", \"Stop does not interfere with animations on other elements (#6641)\" );\n\n\t\t// Reset styles\n\t\t$one.add( $two ).css( \"opacity\", \"\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\n// In IE9 inside testswarm this test doesn't work properly\n( function() {\n\tvar type = \"test\";\n\n\tif ( QUnit.isSwarm && /msie 9\\.0/i.test( window.navigator.userAgent ) ) {\n\t\ttype = \"skip\";\n\t}\n\n\tQUnit[ type ]( \"stop() - several in queue\", function( assert ) {\n\t\tassert.expect( 5 );\n\n\t\tvar nw, $foo = jQuery( \"#foo\" );\n\n\t\t// default duration is 400ms, so 800px ensures we aren't 0 or 1 after 1ms\n\t\t$foo.hide().css( \"width\", 800 );\n\n\t\t$foo.animate( { \"width\": \"show\" }, 400, \"linear\" );\n\t\t$foo.animate( { \"width\": \"hide\" } );\n\t\t$foo.animate( { \"width\": \"show\" } );\n\n\t\tthis.clock.tick( 1 );\n\n\t\tjQuery.fx.tick();\n\t\tassert.equal( $foo.queue().length, 3, \"3 in the queue\" );\n\n\t\tnw = $foo.css( \"width\" );\n\t\tassert.notEqual( parseFloat( nw ), 1, \"An animation occurred \" + nw );\n\t\t$foo.stop();\n\n\t\tassert.equal( $foo.queue().length, 2, \"2 in the queue\" );\n\t\tnw = $foo.css( \"width\" );\n\t\tassert.notEqual( parseFloat( nw ), 1, \"Stop didn't reset the animation \" + nw );\n\n\t\t$foo.stop( true );\n\n\t\tassert.equal( $foo.queue().length, 0, \"0 in the queue\" );\n\t} );\n} )();\n\nQUnit.test( \"stop(clearQueue)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $foo = jQuery( \"#foo\" ),\n\t\tw = 0,\n\t\tnw;\n\t$foo.hide().css( \"width\", 200 ).css( \"width\" );\n\n\t$foo.animate( { \"width\": \"show\" }, 1000 );\n\t$foo.animate( { \"width\": \"hide\" }, 1000 );\n\t$foo.animate( { \"width\": \"show\" }, 1000 );\n\tthis.clock.tick( 100 );\n\tnw = $foo.css( \"width\" );\n\tassert.ok( parseFloat( nw ) !== w, \"An animation occurred \" + nw + \" \" + w + \"px\" );\n\t$foo.stop( true );\n\n\tnw = $foo.css( \"width\" );\n\tassert.ok( parseFloat( nw ) !== w, \"Stop didn't reset the animation \" + nw + \" \" + w + \"px\" );\n\n\tassert.equal( $foo.queue().length, 0, \"The animation queue was cleared\" );\n\tthis.clock.tick( 100 );\n\tassert.equal( nw, $foo.css( \"width\" ), \"The animation didn't continue\" );\n} );\n\nQUnit.test( \"stop(clearQueue, gotoEnd)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $foo = jQuery( \"#foo\" ),\n\t\tw = 0,\n\t\tnw;\n\t$foo.hide().css( \"width\", 200 ).css( \"width\" );\n\n\t$foo.animate( { width: \"show\" }, 1000 );\n\t$foo.animate( { width: \"hide\" }, 1000 );\n\t$foo.animate( { width: \"show\" }, 1000 );\n\t$foo.animate( { width: \"hide\" }, 1000 );\n\tthis.clock.tick( 100 );\n\tnw = $foo.css( \"width\" );\n\tassert.ok( parseFloat( nw ) !== w, \"An animation occurred \" + nw + \" \" + w + \"px\" );\n\t$foo.stop( false, true );\n\n\tnw = $foo.css( \"width\" );\n\n\t// Disabled, being flaky\n\t//equal( nw, 1, \"Stop() reset the animation\" );\n\n\tthis.clock.tick( 100 );\n\n\t// Disabled, being flaky\n\t//equal( $foo.queue().length, 2, \"The next animation continued\" );\n\t$foo.stop( true );\n} );\n\nQUnit.test( \"stop( queue, ..., ... ) - Stop single queues\", function( assert ) {\n\tassert.expect( 3 );\n\tvar saved,\n\t\tfoo = jQuery( \"#foo\" ).css( { width: 200, height: 200 } );\n\n\tfoo.animate( {\n\t\twidth: 400\n\t}, {\n\t\tduration: 500,\n\t\tcomplete: function() {\n\t\t\tassert.equal( parseFloat( foo.css( \"width\" ) ), 400, \"Animation completed for standard queue\" );\n\t\t\tassert.equal( parseFloat( foo.css( \"height\" ) ), saved, \"Height was not changed after the second stop\" );\n\t\t}\n\t} );\n\n\tfoo.animate( {\n\t\theight: 400\n\t}, {\n\t\tduration: 1000,\n\t\tqueue: \"height\"\n\t} ).dequeue( \"height\" ).stop( \"height\", false, true );\n\n\tassert.equal( parseFloat( foo.css( \"height\" ) ), 400, \"Height was stopped with gotoEnd\" );\n\n\tfoo.animate( {\n\t\theight: 200\n\t}, {\n\t\tduration: 1000,\n\t\tqueue: \"height\"\n\t} ).dequeue( \"height\" ).stop( \"height\", false, false );\n\tsaved = parseFloat( foo.css( \"height\" ) );\n        this.clock.tick( 500 );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"toggle()\", function( assert ) {\n\tassert.expect( 6 );\n\tvar x = jQuery( \"#foo\" );\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle();\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle();\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle( false );\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n} );\n\nQUnit.test( \"jQuery.fx.prototype.cur() - <1.8 Back Compat\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).css( {\n\t\t\tcolor: \"#ABC\",\n\t\t\tborder: \"5px solid black\",\n\t\t\tleft: \"auto\",\n\t\t\tmarginBottom: \"-11000px\"\n\t\t} )[ 0 ];\n\n\tassert.equal(\n\t\t( new jQuery.fx( div, {}, \"color\" ) ).cur(),\n\t\tjQuery.css( div, \"color\" ),\n\t\t\"Return the same value as jQuery.css for complex properties (bug #7912)\"\n\t);\n\n\tassert.strictEqual(\n\t\t( new jQuery.fx( div, {}, \"borderLeftWidth\" ) ).cur(),\n\t\t5,\n\t\t\"Return simple values parsed as Float\"\n\t);\n\n\t// backgroundPosition actually returns 0% 0% in most browser\n\t// this fakes a \"\" return\n\t// hook now gets called twice because Tween will grab the current\n\t// value as it is being newed\n\tjQuery.cssHooks.backgroundPosition = {\n\t\tget: function() {\n\t\t\tassert.ok( true, \"hook used\" );\n\t\t\treturn \"\";\n\t\t}\n\t};\n\n\tassert.strictEqual(\n\t\t( new jQuery.fx( div, {}, \"backgroundPosition\" ) ).cur(),\n\t\t0,\n\t\t\"Return 0 when jQuery.css returns an empty string\"\n\t);\n\n\tdelete jQuery.cssHooks.backgroundPosition;\n\n\tassert.strictEqual(\n\t\t( new jQuery.fx( div, {}, \"left\" ) ).cur(),\n\t\t0,\n\t\t\"Return 0 when jQuery.css returns 'auto'\"\n\t);\n\n\tassert.equal(\n\t\t( new jQuery.fx( div, {}, \"marginBottom\" ) ).cur(),\n\t\t-11000,\n\t\t\"support negative values < -10000 (bug #7193)\"\n\t);\n\n\tjQuery( div ).remove();\n} );\n\nQUnit.test( \"Overflow and Display\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar\n\t\ttestClass = jQuery.makeTest( \"Overflow and Display\" )\n\t\t\t.addClass( \"overflow inline\" ),\n\t\ttestStyle = jQuery.makeTest( \"Overflow and Display (inline style)\" )\n\t\t\t.css( { overflow: \"visible\", display: \"inline\" } ),\n\t\tdone = function() {\n\t\t\tassert.equal( jQuery.css( this, \"overflow\" ), \"visible\", \"Overflow should be 'visible'\" );\n\t\t\tassert.equal( jQuery.css( this, \"display\" ), \"inline\", \"Display should be 'inline'\" );\n\t\t};\n\n\ttestClass.add( testStyle )\n\t\t.addClass( \"widewidth\" )\n\t\t.text( \"Some sample text.\" )\n\t\t.before( \"text before\" )\n\t\t.after( \"text after\" )\n\t\t.animate( { opacity: 0.5 }, \"slow\", done );\n\tthis.clock.tick( 600 );\n} );\n\njQuery.each( {\n\t\"CSS Auto\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"auto\" + prop )\n\t\t\t.text( \"This is a long string of text.\" );\n\t\treturn \"\";\n\t},\n\t\"JS Auto\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, \"\" )\n\t\t\t.text( \"This is a long string of text.\" );\n\t\treturn \"\";\n\t},\n\t\"CSS 100\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"large\" + prop );\n\t\treturn \"\";\n\t},\n\t\"JS 100\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, prop === \"opacity\" ? 1 : \"100px\" );\n\t\treturn prop === \"opacity\" ? 1 : 100;\n\t},\n\t\"CSS 50\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"med\" + prop );\n\t\treturn \"\";\n\t},\n\t\"JS 50\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, prop === \"opacity\" ? 0.50 : \"50px\" );\n\t\treturn prop === \"opacity\" ? 0.5 : 50;\n\t},\n\t\"CSS 0\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"no\" + prop );\n\t\treturn \"\";\n\t},\n\t\"JS 0\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, prop === \"opacity\" ? 0 : \"0px\" );\n\t\treturn 0;\n\t}\n}, function( fn, f ) {\n\tjQuery.each( {\n\t\t\"show\": function( elem, prop ) {\n\t\t\tjQuery( elem ).hide().addClass( \"wide\" + prop );\n\t\t\treturn \"show\";\n\t\t},\n\t\t\"hide\": function( elem, prop ) {\n\t\t\tjQuery( elem ).addClass( \"wide\" + prop );\n\t\t\treturn \"hide\";\n\t\t},\n\t\t\"100\": function( elem, prop ) {\n\t\t\tjQuery( elem ).addClass( \"wide\" + prop );\n\t\t\treturn prop === \"opacity\" ? 1 : 100;\n\t\t},\n\t\t\"50\": function( elem, prop ) {\n\t\t\treturn prop === \"opacity\" ? 0.50 : 50;\n\t\t},\n\t\t\"0\": function( elem ) {\n\t\t\tjQuery( elem ).addClass( \"noback\" );\n\t\t\treturn 0;\n\t\t}\n\t}, function( tn, t ) {\n\t\tQUnit.test( fn + \" to \" + tn, function( assert ) {\n\t\t\tvar num, anim,\n\t\t\t\telem = jQuery.makeTest( fn + \" to \" + tn ),\n\t\t\t\tt_w = t( elem, \"width\" ),\n\t\t\t\tf_w = f( elem, \"width\" ),\n\t\t\t\tt_h = t( elem, \"height\" ),\n\t\t\t\tf_h = f( elem, \"height\" ),\n\t\t\t\tt_o = t( elem, \"opacity\" ),\n\t\t\t\tf_o = f( elem, \"opacity\" );\n\n\t\t\tif ( f_o === \"\" ) {\n\t\t\t\tf_o = 1;\n\t\t\t}\n\n\t\t\tnum = 0;\n\n\t\t\t// TODO: uncrowd this\n\t\t\tif ( t_h === \"show\" ) { num++; }\n\t\t\tif ( t_w === \"show\" ) { num++; }\n\t\t\tif ( t_w === \"hide\" || t_w === \"show\" ) { num++; }\n\t\t\tif ( t_h === \"hide\" || t_h === \"show\" ) { num++; }\n\t\t\tif ( t_o === \"hide\" || t_o === \"show\" ) { num++; }\n\t\t\tif ( t_w === \"hide\" ) { num++; }\n\t\t\tif ( t_o.constructor === Number ) { num += 2; }\n\t\t\tif ( t_w.constructor === Number ) { num += 2; }\n\t\t\tif ( t_h.constructor === Number ) { num += 2; }\n\n\t\t\tassert.expect( num );\n\n\t\t\tanim = { width: t_w, height: t_h, opacity: t_o };\n\n\t\t\telem.animate( anim, 50 );\n\n\t\t\tjQuery.when( elem ).done( function( $elem ) {\n\t\t\t\tvar cur_o, cur_w, cur_h, old_h,\n\t\t\t\t\telem = $elem[ 0 ];\n\n\t\t\t\tif ( t_w === \"show\" ) {\n\t\t\t\t\tassert.equal( $elem.css( \"display\" ), \"block\",\n\t\t\t\t\t\t\"Showing, display should block: \" + elem.style.display );\n\t\t\t\t}\n\n\t\t\t\tif ( t_w === \"hide\" || t_w === \"show\" ) {\n\t\t\t\t\tassert.ok( f_w === \"\" ? elem.style.width === f_w : elem.style.width.indexOf( f_w ) === 0, \"Width must be reset to \" + f_w + \": \" + elem.style.width );\n\t\t\t\t}\n\n\t\t\t\tif ( t_h === \"hide\" || t_h === \"show\" ) {\n\t\t\t\t\tassert.ok( f_h === \"\" ? elem.style.height === f_h : elem.style.height.indexOf( f_h ) === 0, \"Height must be reset to \" + f_h + \": \" + elem.style.height );\n\t\t\t\t}\n\n\t\t\t\tcur_o = jQuery.style( elem, \"opacity\" );\n\n\t\t\t\tif ( f_o !== jQuery.css( elem, \"opacity\" ) ) {\n\t\t\t\t\tf_o = f( elem, \"opacity\" );\n\t\t\t\t}\n\n\t\t\t\tif ( t_o === \"hide\" || t_o === \"show\" ) {\n\t\t\t\t\tassert.equal( cur_o, f_o, \"Opacity must be reset to \" + f_o + \": \" + cur_o );\n\t\t\t\t}\n\n\t\t\t\tif ( t_w === \"hide\" ) {\n\t\t\t\t\tassert.equal( elem.style.display, \"none\", \"Hiding, display should be none: \" + elem.style.display );\n\t\t\t\t}\n\n\t\t\t\tif ( t_o.constructor === Number ) {\n\t\t\t\t\tassert.equal( cur_o, t_o, \"Final opacity should be \" + t_o + \": \" + cur_o );\n\n\t\t\t\t\tassert.ok( jQuery.css( elem, \"opacity\" ) !== \"\" || cur_o === t_o, \"Opacity should be explicitly set to \" + t_o + \", is instead: \" + cur_o );\n\t\t\t\t}\n\n\t\t\t\tif ( t_w.constructor === Number ) {\n\t\t\t\t\tassert.equal( elem.style.width, t_w + \"px\", \"Final width should be \" + t_w + \": \" + elem.style.width );\n\n\t\t\t\t\tcur_w = jQuery.css( elem, \"width\" );\n\n\t\t\t\t\tassert.ok( elem.style.width !== \"\" || cur_w === t_w, \"Width should be explicitly set to \" + t_w + \", is instead: \" + cur_w );\n\t\t\t\t}\n\n\t\t\t\tif ( t_h.constructor === Number ) {\n\t\t\t\t\tassert.equal( elem.style.height, t_h + \"px\", \"Final height should be \" + t_h + \": \" + elem.style.height );\n\n\t\t\t\t\tcur_h = jQuery.css( elem, \"height\" );\n\n\t\t\t\t\tassert.ok( elem.style.height !== \"\" || cur_h === t_h, \"Height should be explicitly set to \" + t_h + \", is instead: \" + cur_h );\n\t\t\t\t}\n\n\t\t\t\tif ( t_h === \"show\" ) {\n\t\t\t\t\told_h = jQuery.css( elem, \"height\" );\n\t\t\t\t\tjQuery( elem ).append( \"<br/>Some more text<br/>and some more...\" );\n\n\t\t\t\t\tif ( /Auto/.test( fn ) ) {\n\t\t\t\t\t\tassert.notEqual( jQuery.css( elem, \"height\" ), old_h, \"Make sure height is auto.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.equal( jQuery.css( elem, \"height\" ), old_h, \"Make sure height is not auto.\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// manually remove generated element\n\t\t\t\tjQuery( elem ).remove();\n\n\t\t\t} );\n\t\t\tthis.clock.tick( 100 );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"Effects chaining\", function( assert ) {\n\tvar remaining = 16,\n\t\tprops = [ \"opacity\", \"height\", \"width\", \"display\", \"overflow\" ],\n\t\tsetup = function( name, selector ) {\n\t\t\tvar $el = jQuery( selector );\n\t\t\treturn $el.data( getProps( $el[ 0 ] ) ).data( \"name\", name );\n\t\t},\n\t\tcheck = function() {\n\t\t\tvar data = jQuery.data( this ),\n\t\t\t\tname = data.name;\n\t\t\tdelete data.name;\n\n\t\t\tassert.deepEqual( getProps( this ), data, name );\n\n\t\t\tjQuery.removeData( this );\n\t\t},\n\t\tgetProps = function( el ) {\n\t\t\tvar obj = {};\n\t\t\tjQuery.each( props, function( i, prop ) {\n\t\t\t\tobj[ prop ] = prop === \"overflow\" && el.style[ prop ] || jQuery.css( el, prop );\n\t\t\t} );\n\t\t\treturn obj;\n\t\t};\n\n\tassert.expect( remaining );\n\n\tsetup( \".fadeOut().fadeIn()\", \"#fadein div\" ).fadeOut( \"fast\" ).fadeIn( \"fast\", check );\n\tsetup( \".fadeIn().fadeOut()\", \"#fadeout div\" ).fadeIn( \"fast\" ).fadeOut( \"fast\", check );\n\tsetup( \".hide().show()\", \"#show div\" ).hide( \"fast\" ).show( \"fast\", check );\n\tsetup( \".show().hide()\", \"#hide div\" ).show( \"fast\" ).hide( \"fast\", check );\n\tsetup( \".show().hide(easing)\", \"#easehide div\" ).show( \"fast\" ).hide( \"fast\", \"linear\", check );\n\tsetup( \".toggle().toggle() - in\", \"#togglein div\" ).toggle( \"fast\" ).toggle( \"fast\", check );\n\tsetup( \".toggle().toggle() - out\", \"#toggleout div\" ).toggle( \"fast\" ).toggle( \"fast\", check );\n\tsetup( \".toggle().toggle(easing) - out\", \"#easetoggleout div\" ).toggle( \"fast\" ).toggle( \"fast\", \"linear\", check );\n\tsetup( \".slideDown().slideUp()\", \"#slidedown div\" ).slideDown( \"fast\" ).slideUp( \"fast\", check );\n\tsetup( \".slideUp().slideDown()\", \"#slideup div\" ).slideUp( \"fast\" ).slideDown( \"fast\", check );\n\tsetup( \".slideUp().slideDown(easing)\", \"#easeslideup div\" ).slideUp( \"fast\" ).slideDown( \"fast\", \"linear\", check );\n\tsetup( \".slideToggle().slideToggle() - in\", \"#slidetogglein div\" ).slideToggle( \"fast\" ).slideToggle( \"fast\", check );\n\tsetup( \".slideToggle().slideToggle() - out\", \"#slidetoggleout div\" ).slideToggle( \"fast\" ).slideToggle( \"fast\", check );\n\tsetup( \".fadeToggle().fadeToggle() - in\", \"#fadetogglein div\" ).fadeToggle( \"fast\" ).fadeToggle( \"fast\", check );\n\tsetup( \".fadeToggle().fadeToggle() - out\", \"#fadetoggleout div\" ).fadeToggle( \"fast\" ).fadeToggle( \"fast\", check );\n\tsetup( \".fadeTo(0.5).fadeTo(1.0, easing)\", \"#fadeto div\" ).fadeTo( \"fast\", 0.5 ).fadeTo( \"fast\", 1.0, \"linear\", check );\n\n    this.clock.tick( 400 );\n} );\n\njQuery.makeTest = function( text ) {\n        var elem = jQuery( \"<div></div>\" )\n                .attr( \"id\", \"test\" + jQuery.makeTest.id++ )\n                .addClass( \"box\" );\n\n        jQuery( \"<h4></h4>\" )\n                .text( text )\n                .appendTo( \"#fx-tests\" )\n                .after( elem );\n\n        return elem;\n};\n\njQuery.makeTest.id = 1;\n\nQUnit.test( \"jQuery.show('fast') doesn't clear radio buttons (bug #1095)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $checkedtest = jQuery( \"#checkedtest\" );\n\t$checkedtest.hide().show( \"fast\", function() {\n\t\tassert.ok( jQuery( \"input[type='radio']\", $checkedtest ).first().attr( \"checked\" ), \"Check first radio still checked.\" );\n\t\tassert.ok( !jQuery( \"input[type='radio']\", $checkedtest ).last().attr( \"checked\" ), \"Check last radio still NOT checked.\" );\n\t\tassert.ok( jQuery( \"input[type='checkbox']\", $checkedtest ).first().attr( \"checked\" ), \"Check first checkbox still checked.\" );\n\t\tassert.ok( !jQuery( \"input[type='checkbox']\", $checkedtest ).last().attr( \"checked\" ), \"Check last checkbox still NOT checked.\" );\n\t} );\n\tthis.clock.tick( 200 );\n} );\n\nQUnit.test( \"interrupt toggle\", function( assert ) {\n\tassert.expect( 24 );\n\n\tvar env = this,\n\t\tlongDuration = 2000,\n\t\tshortDuration = 500,\n\t\tremaining = 0,\n\t\t$elems = jQuery( \".chain-test\" ),\n\t\tclock = this.clock,\n\t\tfinish = function() {\n\t\t};\n\n\tjQuery.each( { slideToggle: \"height\", fadeToggle: \"opacity\", toggle: \"width\" }, function( method, prop ) {\n\t\tvar $methodElems = $elems.filter( \"[id^='\" + method.toLowerCase() + \"']\" ).each( function() {\n\n\t\t\t// Don't end test until we're done with this element\n\t\t\tremaining++;\n\n\t\t\t// Save original property value for comparison\n\t\t\tjQuery.data( this, \"startVal\", jQuery( this ).css( prop ) );\n\n\t\t\t// Expect olddisplay data from our .hide() call below\n\t\t\tassert.expectJqData( env, this, \"olddisplay\" );\n\t\t} );\n\n\t\t// Interrupt a hiding toggle\n\t\t$methodElems[ method ]( longDuration );\n\t\tsetTimeout( function() {\n\t\t\t$methodElems.stop().each( function() {\n\t\t\t\tassert.notEqual( jQuery( this ).css( prop ), jQuery.data( this, \"startVal\" ), \".stop() before completion of hiding .\" + method + \"() - #\" + this.id );\n\t\t\t} );\n\n\t\t\t// Restore\n\t\t\t$methodElems[ method ]( shortDuration, function() {\n\t\t\t\tvar id = this.id,\n\t\t\t\t\t$elem = jQuery( this ),\n\t\t\t\t\tstartVal = $elem.data( \"startVal\" );\n\n\t\t\t\t$elem.removeData( \"startVal\" );\n\n\t\t\t\tassert.equal( $elem.css( prop ), startVal, \"original value restored by .\" + method + \"() - #\" + id );\n\n\t\t\t\t// Interrupt a showing toggle\n\t\t\t\t$elem.hide()[ method ]( longDuration );\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t$elem.stop();\n\t\t\t\t\tassert.notEqual( $elem.css( prop ), startVal, \".stop() before completion of showing .\" + method + \"() - #\" + id );\n\n\t\t\t\t\t// Restore\n\t\t\t\t\t$elem[ method ]( shortDuration, function() {\n\t\t\t\t\t\tassert.equal( $elem.css( prop ), startVal, \"original value restored by .\" + method + \"() - #\" + id );\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t} );\n\t\t\t\t}, shortDuration );\n\t\t\t} );\n\t\t}, shortDuration );\n\t} );\n\tclock.tick( longDuration );\n\n\t// FIXME untangle the set timeouts\n} );\n\nQUnit.test( \"animate with per-property easing\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar data = { a: 0, b: 0, c: 0 },\n\t\ttest1Called = false,\n\t\ttest2Called = false,\n\t\tdefaultTestCalled = false,\n\t\tprops = {\n\t\t\ta: [ 100, \"_test1\" ],\n\t\t\tb: [ 100, \"_test2\" ],\n\t\t\tc: 100\n\t\t};\n\n\tjQuery.easing._test1 = function( p ) {\n\t\ttest1Called = true;\n\t\treturn p;\n\t};\n\n\tjQuery.easing._test2 = function( p ) {\n\t\ttest2Called = true;\n\t\treturn p;\n\t};\n\n\tjQuery.easing._defaultTest = function( p ) {\n\t\tdefaultTestCalled = true;\n\t\treturn p;\n\t};\n\n\tjQuery( data ).animate( props, 400, \"_defaultTest\", function() {\n\t\tassert.ok( test1Called, \"Easing function (_test1) called\" );\n\t\tassert.ok( test2Called, \"Easing function (_test2) called\" );\n\t\tassert.ok( defaultTestCalled, \"Easing function (_default) called\" );\n\t\tassert.equal( props.a[ 1 ], \"_test1\", \"animate does not change original props (per-property easing would be lost)\" );\n\t\tassert.equal( props.b[ 1 ], \"_test2\", \"animate does not change original props (per-property easing would be lost)\" );\n\t} );\n\n\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"animate with CSS shorthand properties\", function( assert ) {\n\tassert.expect( 11 );\n\n\tvar easeAnimation_count = 0,\n\t\teaseProperty_count = 0,\n\t\tpropsBasic = { \"padding\": \"10 20 30\" },\n\t\tpropsSpecial = { \"padding\": [ \"1 2 3\", \"propertyScope\" ] };\n\n\tjQuery.easing.animationScope = function( p ) {\n\t\tif ( p >= 1 ) {\n\t\t\teaseAnimation_count++;\n\t\t}\n\t\treturn p;\n\t};\n\n\tjQuery.easing.propertyScope = function( p ) {\n\t\tif ( p >= 1 ) {\n\t\t\teaseProperty_count++;\n\t\t}\n\t\treturn p;\n\t};\n\n\tjQuery( \"#foo\" )\n\t\t.animate( propsBasic, 200, \"animationScope\", function() {\n\t\t\tassert.equal( this.style.paddingTop, \"10px\", \"padding-top was animated\" );\n\t\t\tassert.equal( this.style.paddingLeft, \"20px\", \"padding-left was animated\" );\n\t\t\tassert.equal( this.style.paddingRight, \"20px\", \"padding-right was animated\" );\n\t\t\tassert.equal( this.style.paddingBottom, \"30px\", \"padding-bottom was animated\" );\n\t\t\tassert.equal( easeAnimation_count, 4, \"per-animation default easing called for each property\" );\n\t\t\teaseAnimation_count = 0;\n\t\t} )\n\t\t.animate( propsSpecial, 200, \"animationScope\", function() {\n\t\t\tassert.equal( this.style.paddingTop, \"1px\", \"padding-top was animated again\" );\n\t\t\tassert.equal( this.style.paddingLeft, \"2px\", \"padding-left was animated again\" );\n\t\t\tassert.equal( this.style.paddingRight, \"2px\", \"padding-right was animated again\" );\n\t\t\tassert.equal( this.style.paddingBottom, \"3px\", \"padding-bottom was animated again\" );\n\t\t\tassert.equal( easeAnimation_count, 0, \"per-animation default easing not called\" );\n\t\t\tassert.equal( easeProperty_count, 4, \"special easing called for each property\" );\n\n\t\t\tjQuery( this ).css( \"padding\", \"0\" );\n\t\t\tdelete jQuery.easing.animationScope;\n\t\t\tdelete jQuery.easing.propertyScope;\n\t\t} );\n\t\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"hide hidden elements, with animation (bug #7141)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar div = jQuery( \"<div id='bug7141' style='display:none'/>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\", \"Element is initially hidden\" );\n\tdiv.hide( 10, function() {\n\t\tassert.equal( div.css( \"display\" ), \"none\", \"Element is hidden in .hide() callback\" );\n\t\tdiv.show( 11, function() {\n\t\t\tassert.equal( div.css( \"display\" ), \"block\", \"Element is visible in .show() callback\" );\n\t\t} );\n\t} );\n\tthis.clock.tick( 50 );\n\tassert.equal( div.css( \"display\" ), \"block\", \"Element is visible after animations\" );\n} );\n\nQUnit.test( \"animate unit-less properties (#4966)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div style='z-index: 0; position: absolute;'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"z-index\" ), \"0\", \"z-index is 0\" );\n\tdiv.animate( { zIndex: 2 }, function() {\n\t\tassert.equal( div.css( \"z-index\" ), \"2\", \"z-index is 2\" );\n\t} );\n\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"animate properties missing px w/ opacity as last (#9074)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar ml, l,\n\t\tdiv = jQuery( \"<div style='position: absolute; margin-left: 0; left: 0px;'></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\tfunction cssInt( prop ) {\n\t\treturn parseInt( div.css( prop ), 10 );\n\t}\n\tassert.equal( cssInt( \"marginLeft\" ), 0, \"Margin left is 0\" );\n\tassert.equal( cssInt( \"left\" ), 0, \"Left is 0\" );\n\tdiv.animate( {\n\t\tleft: 200,\n\t\tmarginLeft: 200,\n\t\topacity: 0\n\t}, 2000 );\n\n\tthis.clock.tick( 500 );\n\n\tml = cssInt( \"marginLeft\" );\n\tl = cssInt( \"left\" );\n\tassert.notEqual( ml, 0, \"Margin left is not 0 after partial animate\" );\n\tassert.notEqual( ml, 200, \"Margin left is not 200 after partial animate\" );\n\tassert.notEqual( l, 0, \"Left is not 0 after partial animate\" );\n\tassert.notEqual( l, 200, \"Left is not 200 after partial animate\" );\n\tdiv.stop().remove();\n} );\n\nQUnit.test( \"callbacks should fire in correct order (#9100)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar a = 1,\n\t\tcb = 0;\n\n\tjQuery( \"<p data-operation='*2'></p><p data-operation='^2'></p>\" ).appendTo( \"#qunit-fixture\" )\n\n\t\t// The test will always pass if no properties are animated or if the duration is 0\n\t\t.animate( { fontSize: 12 }, 13, function() {\n\t\t\ta *= jQuery( this ).data( \"operation\" ) === \"*2\" ? 2 : a;\n\t\t\tcb++;\n\t\t\tif ( cb === 2 ) {\n\t\t\t\tassert.equal( a, 4, \"test value has been *2 and _then_ ^2\" );\n\t\t\t}\n\t\t} );\n\tthis.clock.tick( 20 );\n} );\n\nQUnit.test( \"callbacks that throw exceptions will be removed (#5684)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" );\n\n\tfunction TestException() {\n\t}\n\n\tfoo.animate( { height: 1 }, 1, function() {\n\t\tthrow new TestException();\n\t} );\n\n\t// this test thoroughly abuses undocumented methods - please feel free to update\n\t// with any changes internally to these functions.\n\n\t// make sure that the standard timer loop will NOT run.\n\tjQuery.fx.stop();\n\n        this.clock.tick( 1 );\n\tassert.throws( jQuery.fx.tick, TestException, \"Exception was thrown\" );\n\n\t// the second call shouldn't\n\tjQuery.fx.tick();\n\n\tassert.ok( true, \"Test completed without throwing a second exception\" );\n\n} );\n\nQUnit.test( \"animate will scale margin properties individually\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" ).css( {\n\t\t\"margin\": 0,\n\t\t\"marginLeft\": 100\n\t} );\n\n\tassert.ok( foo.css( \"marginLeft\" ) !== foo.css( \"marginRight\" ), \"Sanity Check\" );\n\n\tfoo.animate( {\n\t\t\"margin\": 200\n\t} ).stop();\n\n\tassert.ok( foo.css( \"marginLeft\" ) !== foo.css( \"marginRight\" ), \"The margin properties are different\" );\n\n\t// clean up for next test\n\tfoo.css( {\n\t\t\"marginLeft\": \"\",\n\t\t\"marginRight\": \"\",\n\t\t\"marginTop\": \"\",\n\t\t\"marginBottom\": \"\"\n\t} );\n} );\n\nQUnit.test( \"Do not append px to 'fill-opacity' #9548\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$div.css( \"fill-opacity\", 0 ).animate( { \"fill-opacity\": 1.0 }, 0, function() {\n\t\tassert.equal( jQuery( this ).css( \"fill-opacity\" ), 1, \"Do not append px to 'fill-opacity'\" );\n\t\t$div.remove();\n\t} );\n} );\n\nQUnit.test( \"line-height animates correctly (#13855)\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar t0,\n\t\tclock = this.clock,\n\t\tlongDuration = 2000,\n\t\tshortDuration = 500,\n\t\tanimated = jQuery(\n\t\t\t\"<p style='line-height: 100;'>unitless</p>\" +\n\t\t\t\"<p style='line-height: 5000px;'>px</p>\" +\n\t\t\t\"<p style='line-height: 5000%;'>percent</p>\" +\n\t\t\t\"<p style='line-height: 100em;'>em</p>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tinitialHeight = jQuery.map( animated, function( el ) {\n\t\t\treturn jQuery( el ).height();\n\t\t} ),\n\t\ttolerance = 1.5;\n\n\t// Delay start to improve test stability\n\tsetTimeout( function() {\n\n\t\tt0 = +( new Date() );\n\t\tanimated.animate( { \"line-height\": \"hide\" }, longDuration, \"linear\" );\n\n\t\tsetTimeout( function() {\n\t\t\tvar progress = ( ( new Date() ) - t0 ) / longDuration;\n\n\t\t\tanimated.each( function( i ) {\n\t\t\t\tvar label = jQuery.text( this ),\n\t\t\t\t\tinitial = initialHeight[ i ],\n\t\t\t\t\theight = jQuery( this ).height(),\n\t\t\t\t\tlower = initial * ( 1 - progress ) / tolerance;\n\t\t\t\tassert.ok( height < initial, \"hide \" + label + \": upper bound; \" +\n\t\t\t\t\theight + \" < \" + initial + \" @ \" + ( progress * 100 ) + \"%\" );\n\t\t\t\tassert.ok( height > lower, \"hide \" + label + \": lower bound; \"  +\n\t\t\t\t\theight + \" > \" + lower + \" @ \" + ( progress * 100 ) + \"%\" );\n\t\t\t} );\n\n\t\t\tt0 = +( new Date() );\n\t\t\tanimated.stop( true, true ).hide()\n\t\t\t\t\t.animate( { \"line-height\": \"show\" }, longDuration, \"linear\" );\n\n\t\t\tsetTimeout( function() {\n\t\t\t\tvar progress = ( ( new Date() ) - t0 ) / longDuration;\n\n\t\t\t\tanimated.each( function( i ) {\n\t\t\t\t\tvar label = jQuery.text( this ),\n\t\t\t\t\t\tinitial = initialHeight[ i ],\n\t\t\t\t\t\theight = jQuery( this ).height(),\n\t\t\t\t\t\tupper = initial * progress * tolerance;\n\t\t\t\t\tassert.ok( height < upper, \"show \" + label + \": upper bound; \" +\n\t\t\t\t\t\theight + \" < \" + upper + \" @ \" + ( progress * 100 ) + \"%\" );\n\t\t\t\t} );\n\n\t\t\t\tanimated.stop( true, true );\n\t\t\t}, shortDuration );\nclock.tick( shortDuration );\n\t\t}, shortDuration );\nclock.tick( shortDuration );\n\t}, 50 );\nclock.tick( 50 );\n} );\n\n// Start 1.8 Animation tests\nQUnit.test( \"jQuery.Animation( object, props, opts )\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar animation,\n\t\ttestObject = {\n\t\t\t\"foo\": 0,\n\t\t\t\"bar\": 1,\n\t\t\t\"width\": 100\n\t\t},\n\t\ttestDest = {\n\t\t\t\"foo\": 1,\n\t\t\t\"bar\": 0,\n\t\t\t\"width\": 200\n\t\t};\n\n\tanimation = jQuery.Animation( testObject, testDest, { \"duration\": 1 } );\n\tanimation.done( function() {\n\t\tfor ( var prop in testDest ) {\n\t\t\tassert.equal( testObject[ prop ], testDest[ prop ], \"Animated: \" + prop );\n\t\t}\n\t\tanimation.done( function() {\n\t\t\tassert.deepEqual( testObject, testDest, \"No unexpected properties\" );\n\t\t} );\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animate Option: step: function( percent, tween )\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar counter = {};\n\tjQuery( \"#foo\" ).animate( {\n\t\tprop1: 1,\n\t\tprop2: 2,\n\t\tprop3: 3\n\t}, {\n\t\tduration: 1,\n\t\tstep: function( value, tween ) {\n\t\t\tvar calls = counter[ tween.prop ] = counter[ tween.prop ] || [];\n\n\t\t\t// in case this is called multiple times for either, lets store it in\n\t\t\t// 0 or 1 in the array\n\t\t\tcalls[ value === 0 ? 0 : 1 ] = value;\n\t\t}\n\t} ).queue( function( next ) {\n\t\tassert.deepEqual( counter, {\n\t\t\tprop1: [ 0, 1 ],\n\t\t\tprop2: [ 0, 2 ],\n\t\t\tprop3: [ 0, 3 ]\n\t\t}, \"Step function was called once at 0% and once at 100% for each property\" );\n\t\tnext();\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animate callbacks have correct context\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" );\n\tfoo.animate( {\n\t\theight: 10\n\t}, 10, function() {\n\t\tassert.equal( foo[ 0 ], this, \"Complete callback after stop(true) `this` is element\" );\n\t} ).stop( true, true );\n\tfoo.animate( {\n\t\theight: 100\n\t}, 10, function() {\n\t\tassert.equal( foo[ 0 ], this, \"Complete callback `this` is element\" );\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"User supplied callback called after show when fx off (#8892)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" );\n\tjQuery.fx.off = true;\n\tfoo.hide();\n\tfoo.fadeIn( 500, function() {\n\t\tassert.ok( supportjQuery( this ).is( \":visible\" ), \"Element is visible in callback\" );\n\t\tfoo.fadeOut( 500, function() {\n\t\t\tassert.ok( supportjQuery( this ).is( \":hidden\" ), \"Element is hidden in callback\" );\n\t\t\tjQuery.fx.off = false;\n\t\t} );\n\t} );\n\tthis.clock.tick( 1000 );\n} );\n\nQUnit.test( \"animate should set display for disconnected nodes\", function( assert ) {\n\tassert.expect( 20 );\n\n\tvar env = this,\n\t\tshowMethods = {\n\t\t\tfadeIn: [],\n\t\t\tfadeTo: [ \"fast\", 0.5 ],\n\t\t\tslideDown: [ \"fast\" ],\n\t\t\tshow: [ 1 ],\n\t\t\tanimate: [ { width: \"show\" } ]\n\t\t},\n\t\ttoggleMethods = {\n\t\t\ttoggle: [ 1 ],\n\t\t\tslideToggle: []\n\t\t},\n\t\t$divEmpty = jQuery( \"<div/>\" ),\n\t\t$divTest = jQuery( \"<div>test</div>\" ),\n\t\t$divNone = jQuery( \"<div style='display: none;'/>\" ),\n\t\t$divInline = jQuery( \"<div style='display: inline;'/>\" ),\n\t\tnullParentDisplay = $divEmpty.css( \"display\" ),\n\t\tunderFragmentDisplay = $divTest.css( \"display\" ),\n\t\tclock = this.clock;\n\n\tassert.strictEqual( $divEmpty[ 0 ].parentNode, null, \"Setup: element with null parentNode\" );\n\tassert.strictEqual( ( $divTest[ 0 ].parentNode || {} ).nodeType, 11, \"Setup: element under fragment\" );\n\n\tassert.strictEqual( $divEmpty.show()[ 0 ].style.display, \"\",\n\t\t\"set display with show() for element with null parentNode\" );\n\tassert.strictEqual( $divTest.show()[ 0 ].style.display, \"\",\n\t\t\"set display with show() for element under fragment\" );\n\tassert.strictEqual( $divNone.show()[ 0 ].style.display, \"\",\n\t\t\"show() should change display if it already set to none\" );\n\tassert.strictEqual( $divInline.show()[ 0 ].style.display, \"inline\",\n\t\t\"show() should not change display if it already set\" );\n\n\tassert.expectJqData( env, $divNone[ 0 ], \"olddisplay\" );\n\n\tjQuery.each( showMethods, function( name, opt ) {\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div/>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), nullParentDisplay,\n\t\t\t\t\".\" + name + \" block with null parentNode\" );\n\t\t} ] ) );\n\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div>test</div>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), underFragmentDisplay,\n\t\t\t\t\".\" + name + \" block under fragment\" );\n\t\t} ] ) );\n\t} );\n\tjQuery.each( toggleMethods, function( name, opt ) {\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div/>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), \"none\",\n\t\t\t\t\".\" + name + \" block with null parentNode\" );\n\t\t} ] ) );\n\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div>test</div>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), \"none\",\n\t\t\t\t\".\" + name + \" block under fragment\" );\n\t\t} ] ) );\n\t} );\n\tclock.tick( 400 );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"Animation callback should not show animated element as :animated (#7157)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\topacity: 0\n\t}, 100, function() {\n\t\tassert.ok( !foo.is( \":animated\" ), \"The element is not animated\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"Initial step callback should show element as :animated (#14623)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\topacity: 0\n\t}, {\n\t\tduration: 100,\n\t\tstep: function() {\n\t\t\tassert.ok( foo.is( \":animated\" ), \"The element matches :animated inside step function\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 1 );\n\tfoo.stop();\n} );\n\nQUnit.test( \"hide called on element within hidden parent should set display to none (#10045)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar hidden = jQuery( \".hidden\" ),\n\t\telems = jQuery( \"<div>hide</div><div>hide0</div><div>hide1</div>\" );\n\n\thidden.append( elems );\n\n\tjQuery.when(\n\t\telems.eq( 0 ).hide(),\n\t\telems.eq( 1 ).hide( 0 ),\n\t\telems.eq( 2 ).hide( 1 )\n\t).done( function() {\n\t\tassert.strictEqual( elems.get( 0 ).style.display, \"none\", \"hide() called on element within hidden parent should set display to none\" );\n\t\tassert.strictEqual( elems.get( 1 ).style.display, \"none\", \"hide( 0 ) called on element within hidden parent should set display to none\" );\n\t\tassert.strictEqual( elems.get( 2 ).style.display, \"none\", \"hide( 1 ) called on element within hidden parent should set display to none\" );\n\n\t\telems.remove();\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"hide, fadeOut and slideUp called on element width height and width = 0 should set display to none\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar foo = jQuery( \"#foo\" ),\n\t\ti = 0,\n\t\telems = jQuery();\n\n\tfor ( ; i < 5; i++ ) {\n\t\telems = elems.add( \"<div style='width:0;height:0;'></div>\" );\n\t}\n\n\tfoo.append( elems );\n\n\tjQuery.when(\n\t\telems.eq( 0 ).hide(),\n\t\telems.eq( 1 ).hide( jQuery.noop ),\n\t\telems.eq( 2 ).hide( 1 ),\n\t\telems.eq( 3 ).fadeOut(),\n\t\telems.eq( 4 ).slideUp()\n\t).done( function() {\n\t\tassert.strictEqual( elems.get( 0 ).style.display, \"none\", \"hide() called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 1 ).style.display, \"none\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"hide( jQuery.noop ) called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 2 ).style.display, \"none\", \"hide( 1 ) called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 3 ).style.display, \"none\", \"fadeOut() called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 4 ).style.display, \"none\", \"slideUp() called on element width height and width = 0 should set display to none\" );\n\n\t} );\n\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"hide should not leave hidden inline elements visible (#14848)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar el = jQuery( \"#simon1\" );\n\n\tel.hide( 1, function() {\n\t\tassert.equal( el.css( \"display\" ), \"none\", \"hidden\" );\n\t\tel.hide( 1, function() {\n\t\t\tassert.equal( el.css( \"display\" ), \"none\", \"still hidden\" );\n\t\t} );\n\t} );\n\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"Handle queue:false promises\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar foo = jQuery( \"#foo\" ).clone().addBack(),\n\t\tstep = 1;\n\n\tfoo.animate( {\n\t\ttop: 1\n\t}, {\n\t\tduration: 10,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\t\t\tassert.ok( step++ <= 2, \"Step one or two\" );\n\t\t}\n\t} ).animate( {\n\t\tbottom: 1\n\t}, {\n\t\tduration: 10,\n\t\tcomplete: function() {\n\t\t\tassert.ok( step > 2 && step < 5, \"Step three or four\" );\n\t\t\tstep++;\n\t\t}\n\t} );\n\n\tthis.clock.tick( 10 );\n\n\tfoo.promise().done( function() {\n\t\tassert.equal( step++, 5, \"steps 1-5: queue:false then queue:fx done\" );\n\t\tfoo.animate( {\n\t\t\ttop: 10\n\t\t}, {\n\t\t\tduration: 10,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( step > 5 && step < 8, \"Step six or seven\" );\n\t\t\t\tstep++;\n\t\t\t}\n\t\t} ).animate( {\n\t\t\tbottom: 10\n\t\t}, {\n\t\t\tduration: 10,\n\t\t\tqueue: false,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( step > 7 && step < 10, \"Step eight or nine\" );\n\t\t\t\tstep++;\n\t\t\t}\n\t\t} ).promise().done( function() {\n\t\t\tassert.equal( step++, 10, \"steps 6-10: queue:fx then queue:false\" );\n\t\t} );\n\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"multiple unqueued and promise\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar foo = jQuery( \"#foo\" ),\n\t\tstep = 1;\n\tfoo.animate( {\n\t\tmarginLeft: 300\n\t}, {\n\t\tduration: 500,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\t\t\tassert.strictEqual( step++, 2, \"Step 2\" );\n\t\t}\n\t} ).animate( {\n\t\ttop: 100\n\t}, {\n\t\tduration: 1000,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\t\t\tassert.strictEqual( step++, 3, \"Step 3\" );\n\t\t}\n\t} ).animate( {}, {\n\t\tduration: 2000,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\n\t\t\t// no properties is a non-op and finishes immediately\n\t\t\tassert.strictEqual( step++, 1, \"Step 1\" );\n\t\t}\n\t} ).promise().done( function() {\n\t\tassert.strictEqual( step++, 4, \"Step 4\" );\n\t} );\n\tthis.clock.tick( 1000 );\n} );\n\nQUnit.test( \"animate does not change start value for non-px animation (#7109)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar parent = jQuery( \"<div><div></div></div>\" ).css( { width: 284, height: 1 } ).appendTo( \"#qunit-fixture\" ),\n\t\tchild = parent.children().css( { fontSize: \"98.6in\", width: \"0.01em\", height: 1 } ),\n\t\tactual = parseFloat( child.css( \"width\" ) ),\n\t\tcomputed = [];\n\n\tchild.animate( { width: \"0%\" }, {\n\t\tduration: 1,\n\t\tstep: function() {\n\t\t\tcomputed.push( parseFloat( child.css( \"width\" ) ) );\n\t\t}\n\t} ).queue( function( next ) {\n\t\tvar ratio = computed[ 0 ] / actual;\n\t\tassert.ok( ratio > 0.9 && ratio < 1.1,\n\t\t\t\"Starting width was close enough (\" + computed[ 0 ] + \" approximates \" + actual + \")\" );\n\t\tnext();\n\t\tparent.remove();\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"non-px animation handles non-numeric start (#11971)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" ),\n\t\tinitial = foo.css( \"backgroundPositionX\" );\n\n\tif ( !initial ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( true, \"Style property not understood\" );\n\t\treturn;\n\t}\n\n\tfoo.animate( { backgroundPositionX: \"42%\" }, {\n\t\tduration: 1,\n\t\tprogress: function( anim, percent ) {\n\t\t\tif ( percent ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( parseFloat( initial ) ) {\n\t\t\t\tassert.equal( jQuery.style( this, \"backgroundPositionX\" ), initial, \"Numeric start preserved\" );\n\t\t\t} else {\n\t\t\t\tassert.equal( jQuery.style( this, \"backgroundPositionX\" ), \"0%\", \"Non-numeric start zeroed\" );\n\t\t\t}\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.equal( jQuery.style( this, \"backgroundPositionX\" ), \"42%\", \"End reached\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animation callbacks (#11797)\", function( assert ) {\n\tassert.expect( 15 );\n\n\tvar prog = 0,\n\t\ttargets = jQuery( \"#foo\" ).children(),\n\t\tdone = false,\n\t\texpectedProgress = 1;\n\n\ttargets.eq( 0 ).animate( {}, {\n\t\tduration: 1,\n\t\tstart: function() {\n\t\t\tassert.ok( true, \"empty: start\" );\n\t\t},\n\t\tprogress: function( anim, percent ) {\n\t\t\tassert.equal( percent, prog, \"empty: progress \" + prog );\n\t\t\tprog = 1;\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.ok( true, \"empty: done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( false, \"empty: fail\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.ok( true, \"empty: always\" );\n\t\t\tdone = true;\n\t\t}\n\t} );\n\n\tassert.ok( done, \"empty: done immediately\" );\n\n\tdone = false;\n\ttargets.eq( 1 ).animate( {\n\t\topacity: 0\n\t}, {\n\t\tduration: 1,\n\t\tstart: function() {\n\t\t\tassert.ok( true, \"stopped: start\" );\n\t\t},\n\t\tprogress: function( anim, percent ) {\n\t\t\tassert.equal( percent, 0, \"stopped: progress 0\" );\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.ok( false, \"stopped: done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( true, \"stopped: fail\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.ok( true, \"stopped: always\" );\n\t\t\tdone = true;\n\t\t}\n\t} ).stop();\n\n\tassert.ok( done, \"stopped: stopped immediately\" );\n\n\ttargets.eq( 2 ).animate( {\n\t\topacity: 0\n\t}, {\n\t\tduration: 1,\n\t\tstart: function() {\n\t\t\tassert.ok( true, \"async: start\" );\n\t\t},\n\t\tprogress: function( anim, percent ) {\n\t\t\tassert.equal( percent, expectedProgress, \"async: progress \" + expectedProgress );\n\t\t\texpectedProgress++;\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.ok( true, \"async: done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( false, \"async: fail\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.ok( true, \"async: always\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animation callbacks in order (#2292)\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar done = assert.async(),\n\t\tstep = 0,\n\t\tdur = 50;\n\n\tjQuery( \"#foo\" ).animate( {\n\t\twidth: \"5px\"\n\t}, {\n\t\tduration: dur,\n\t\tstart: function() {\n\t\t\tassert.step( \"start\" );\n\t\t},\n\t\tprogress: function( anim, p, ms ) {\n\t\t\tif ( !( step++ ) ) {\n\t\t\t\tassert.step( \"progress\" );\n\t\t\t\tassert.strictEqual( p, 0, \"first progress callback: progress ratio\" );\n\t\t\t\tassert.strictEqual( ms, dur, \"first progress callback: remaining ms\" );\n\t\t\t} else {\n\t\t\t\tassert.step( \"last progress\" );\n\t\t\t\tassert.strictEqual( p, 1, \"last progress callback: progress ratio\" );\n\t\t\t\tassert.strictEqual( ms, 0, \"last progress callback: remaining ms\" );\n\t\t\t}\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.step( \"done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( false, \"Animation failed\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.verifySteps( [ \"start\", \"progress\", \"last progress\", \"done\" ] );\n\t\t\tdone();\n\t\t}\n\t} ).finish();\n\n\tthis.clock.tick( dur + 10 );\n} );\n\nQUnit.test( \"Animate properly sets overflow hidden when animating width/height (#12117)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tjQuery.each( [ \"height\", \"width\" ], function( _, prop ) {\n\t\tjQuery.each( [ 100, 0 ], function( _, value ) {\n\t\t\tvar div = jQuery( \"<div>\" ).css( \"overflow\", \"auto\" ),\n\t\t\t\tprops = {};\n\t\t\tprops[ prop ] = value;\n\t\t\tdiv.animate( props, 1 );\n\t\t\tassert.equal( div.css( \"overflow\" ), \"hidden\",\n\t\t\t\t\"overflow: hidden set when animating \" + prop + \" to \" + value );\n\t\t\tdiv.stop();\n\t\t\tassert.equal( div.css( \"overflow\" ), \"auto\",\n\t\t\t\t\"overflow: auto restored after animating \" + prop + \" to \" + value );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"Each tick of the timer loop uses a fresh time (#12837)\", function( assert ) {\n\tvar lastVal,\n\t\ttmp = jQuery( {\n\t\t\ttest: 0\n\t\t} );\n\tassert.expect( 3 );\n\ttmp.animate( {\n\t\ttest: 100\n\t}, {\n\t\tstep: function( p, fx ) {\n\t\t\tassert.ok( fx.now !== lastVal, \"Current value is not the last value: \" + lastVal + \" - \" + fx.now );\n\t\t\tlastVal = fx.now;\n\t\t}\n\t} );\n\tthis.clock.tick( 1 );\n\n\t// now that we have a new time, run another tick\n\tjQuery.fx.tick();\n\n\tthis.clock.tick( 1 );\n\n\tjQuery.fx.tick();\n\ttmp.stop();\n} );\n\nQUnit.test( \"Animations with 0 duration don't ease (#12273)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery.easing.test = function() {\n\t\tassert.ok( false, \"Called easing\" );\n\t};\n\n\tjQuery( \"#foo\" ).animate( {\n\t\theight: 100\n\t}, {\n\t\tduration: 0,\n\t\teasing: \"test\",\n\t\tcomplete: function() {\n\t\t\tassert.equal( jQuery( this ).height(), 100, \"Height is 100\" );\n\t\t}\n\t} );\n\n\tdelete jQuery.easing.test;\n} );\n\njQuery.map( [ \"toggle\", \"slideToggle\", \"fadeToggle\" ], function( method ) {\n\n\t// this test would look a lot better if we were using something to override\n\t// the default timers\n\tvar duration = 1500;\n\tQUnit.test( \"toggle state tests: \" + method + \" (#8685)\", function( assert ) {\n\t\tfunction secondToggle() {\n\t\t\tvar stopped = parseFloat( element.css( check ) );\n\t\t\ttested = false;\n\t\t\telement[ method ]( {\n\t\t\t\tduration: duration,\n\t\t\t\tstep: function( p, fx ) {\n\t\t\t\t\tif ( fx.pos > 0.1 && fx.prop === check && !tested ) {\n\t\t\t\t\t\ttested = true;\n\t\t\t\t\t\tassert.equal( fx.start, stopped, check + \" starts at \" + stopped + \" where it stopped\" );\n\t\t\t\t\t\tassert.equal( fx.end, original, check + \" ending value is \" + original );\n\t\t\t\t\t\telement.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tvar tested,\n\t\t\toriginal,\n\t\t\tcheck = method === \"slideToggle\" ? \"height\" : \"opacity\",\n\t\t\telement = jQuery( \"#foo\" ).height( 200 );\n\n\t\tassert.expect( 4 );\n\n\t\telement[ method ]( {\n\t\t\tduration: duration,\n\t\t\teasing: \"linear\",\n\t\t\tstep: function( p, fx ) {\n\t\t\t\tif ( fx.pos > 0.1 && fx.prop === check && !tested ) {\n\t\t\t\t\ttested = true;\n\t\t\t\t\toriginal = fx.start;\n\t\t\t\t\tassert.ok( fx.start !== 0, check + \" is starting at \" + original + \" on first toggle (non-zero)\" );\n\t\t\t\t\tassert.equal( fx.end, 0, check + \" is ending at 0 on first toggle\" );\n\t\t\t\t\telement.stop();\n\t\t\t\t}\n\t\t\t},\n\t\t\talways: secondToggle\n\t\t} );\n\n                //FIXME figure out why 470\n\t\tthis.clock.tick( 470 );\n\t} );\n} );\n\nQUnit.test( \"jQuery.fx.start & jQuery.fx.stop hook points\", function( assert ) {\n\tvar oldStart = jQuery.fx.start,\n\t\toldStop = jQuery.fx.stop,\n\t\tfoo = jQuery( { foo: 0 } );\n\n\tassert.expect( 3 );\n\n\tjQuery.fx.start = function() {\n\t\tassert.ok( true, \"start called\" );\n\t};\n\tjQuery.fx.stop = function() {\n\t\tassert.ok( true, \"stop called\" );\n\t};\n\n\t// calls start\n\tfoo.animate( { foo: 1 }, { queue: false } );\n\n\t// calls start\n\tfoo.animate( { foo: 2 }, { queue: false } );\n\tfoo.stop();\n\n\t// calls stop\n\tjQuery.fx.tick();\n\n\t// cleanup\n\tjQuery.fx.start = oldStart;\n\tjQuery.fx.stop = oldStop;\n} );\n\nQUnit.test( \".finish() completes all queued animations\", function( assert ) {\n\tvar animations = {\n\t\t\ttop: 100,\n\t\t\tleft: 100,\n\t\t\theight: 100,\n\t\t\twidth: 100\n\t\t},\n\t\tdiv = jQuery( \"<div>\" );\n\n\tassert.expect( 11 );\n\n\tjQuery.each( animations, function( prop, value ) {\n\t\tvar anim = {};\n\t\tanim[ prop ] = value;\n\n\t\t// the delay shouldn't matter at all!\n\t\tdiv.css( prop, 1 ).animate( anim, function() {\n\t\t\tassert.ok( true, \"Called animation callback for \" + prop );\n\t\t} ).delay( 100 );\n\t} );\n\tassert.equal( div.queue().length, 8, \"8 animations in the queue\" );\n\tdiv.finish();\n\tjQuery.each( animations, function( prop, value ) {\n\t\tassert.equal( parseFloat( div.css( prop ) ), value, prop + \" finished at correct value\" );\n\t} );\n\tassert.equal( div.queue().length, 0, \"empty queue when done\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), false, \":animated doesn't match\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\t// cleanup\n\tdiv.remove();\n\n\t// leaves a \"shadow timer\" which does nothing around, need to force a tick\n\tjQuery.fx.tick();\n} );\n\nQUnit.test( \".finish( false ) - unqueued animations\", function( assert ) {\n\tvar animations = {\n\t\t\ttop: 100,\n\t\t\tleft: 100,\n\t\t\theight: 100,\n\t\t\twidth: 100\n\t\t},\n\t\tdiv = jQuery( \"<div>\" );\n\n\tassert.expect( 10 );\n\n\tjQuery.each( animations, function( prop, value ) {\n\t\tvar anim = {};\n\t\tanim[ prop ] = value;\n\t\tdiv.css( prop, 1 ).animate( anim, {\n\t\t\tqueue: false,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Called animation callback for \" + prop );\n\t\t\t}\n\t\t} );\n\t} );\n\tassert.equal( div.queue().length, 0, \"0 animations in the queue\" );\n\tdiv.finish( false );\n\tjQuery.each( animations, function( prop, value ) {\n\t\tassert.equal( parseFloat( div.css( prop ) ), value, prop + \" finished at correct value\" );\n\t} );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), false, \":animated doesn't match\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\t// cleanup\n\tdiv.remove();\n\n\t// leaves a \"shadow timer\" which does nothing around, need to force a tick\n\tjQuery.fx.tick();\n} );\n\nQUnit.test( \".finish( \\\"custom\\\" ) - custom queue animations\", function( assert ) {\n\tvar animations = {\n\t\t\ttop: 100,\n\t\t\tleft: 100,\n\t\t\theight: 100,\n\t\t\twidth: 100\n\t\t},\n\t\tdiv = jQuery( \"<div>\" );\n\n\tassert.expect( 11 );\n\n\tjQuery.each( animations, function( prop, value ) {\n\t\tvar anim = {};\n\t\tanim[ prop ] = value;\n\t\tdiv.css( prop, 1 ).animate( anim, {\n\t\t\tqueue: \"custom\",\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Called animation callback for \" + prop );\n\t\t\t}\n\t\t} );\n\t} );\n\tassert.equal( div.queue( \"custom\" ).length, 4, \"4 animations in the queue\" );\n\n\t// start the first animation\n\tdiv.dequeue( \"custom\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), true, \":animated matches\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\tdiv.finish( \"custom\" );\n\tjQuery.each( animations, function( prop, value ) {\n\t\tassert.equal( parseFloat( div.css( prop ) ), value, prop + \" finished at correct value\" );\n\t} );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), false, \":animated doesn't match\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\t// cleanup\n\tdiv.remove();\n\n\t// leaves a \"shadow timer\" which does nothing around, need to force a tick\n\tjQuery.fx.tick();\n} );\n\nQUnit.test( \".finish() calls finish of custom queue functions\", function( assert ) {\n\tfunction queueTester( next, hooks ) {\n\t\thooks.stop = function( gotoEnd ) {\n\t\t\tinside++;\n\t\t\tassert.equal( this, div[ 0 ] );\n\t\t\tassert.ok( gotoEnd, \"hooks.stop(true) called\" );\n\t\t};\n\t}\n\tvar div = jQuery( \"<div>\" ),\n\t\tinside = 0,\n\t\toutside = 0;\n\n\tassert.expect( 6 );\n\tqueueTester.finish = function() {\n\t\toutside++;\n\t\tassert.ok( true, \"Finish called on custom queue function\" );\n\t};\n\n\tdiv.queue( queueTester ).queue( queueTester ).queue( queueTester ).finish();\n\n\tassert.equal( inside, 1, \"1 stop(true) callback\" );\n\tassert.equal( outside, 2, \"2 finish callbacks\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \".finish() is applied correctly when multiple elements were animated (#13937)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elems = jQuery( \"<a>0</a><a>1</a><a>2</a>\" );\n\n\telems.animate( { opacity: 0 }, 1500 ).animate( { opacity: 1 }, 1500 );\n\tsetTimeout( function() {\n\t\telems.eq( 1 ).finish();\n\t\tassert.ok( !elems.eq( 1 ).queue().length, \"empty queue for .finish()ed element\" );\n\t\tassert.ok( elems.eq( 0 ).queue().length, \"non-empty queue for preceding element\" );\n\t\tassert.ok( elems.eq( 2 ).queue().length, \"non-empty queue for following element\" );\n\t\telems.stop( true );\n\n\t}, 100 );\n\tthis.clock.tick( 1500 );\n} );\n\nQUnit.test( \"slideDown() after stop() (#13483)\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar ul = jQuery( \"<ul style='height: 100px; display: block;'></ul>\" )\n\t\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\t\torigHeight = ul.height(),\n\t\t\tclock = this.clock;\n\n        // First test. slideUp() -> stop() in the middle -> slideDown() until the end\n\t\tul.slideUp( 1000 );\n\t\tclock.tick( 500 );\n\t\tul.stop( true );\n\t\tul.slideDown( 1, function() {\n\t\t\t\tassert.equal( ul.height(), origHeight, \"slideDown() after interrupting slideUp() with stop(). Height must be in original value\" );\n\n\t\t\t\t// Second test. slideDown() -> stop() in the middle -> slideDown() until the end\n\t\t\t\tul.slideUp( 1 );\n\t\t\t\tclock.tick( 10 );\n\t\t\t\tul.slideDown( 1000 );\n\t\t\t\tclock.tick( 500 );\n\t\t\t\tul.stop( true );\n\t\t\t\tul.slideDown( 1 );\n\t\t\t\tassert.equal( ul.height(), origHeight, \"slideDown() after interrupting slideDown() with stop(). Height must be in original value\" );\n\n\t\t\t\t// Cleanup\n\t\t\t\tul.remove();\n\t\t\t\tclock.tick( 10 );\n\n\t\t} );\n\n\t\tclock.tick( 10 );\n} );\n\nQUnit.test( \"Respect display value on inline elements (#14824)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar clock = this.clock,\n\t\tfromStyleSheet = jQuery( \"<span id='span-14824' />\" ),\n\t\tfromStyleAttr = jQuery( \"<span style='display: block;' />\" );\n\n\tjQuery( \"#qunit-fixture\" ).append( fromStyleSheet, fromStyleAttr );\n\n\tfromStyleSheet.slideUp( function() {\n\t\tjQuery( this ).slideDown( function() {\n\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"block\",\n\t\t\t\t\"Respect previous display value (from stylesheet) on span element\" );\n\t\t} );\n\t} );\n\n\tfromStyleAttr.slideUp( function() {\n\t\tjQuery( this ).slideDown( function() {\n\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"block\",\n\t\t\t\t\"Respect previous display value (from style attribute) on span element\" );\n\t\t} );\n\t} );\n\n\tclock.tick( 800 );\n} );\n\nQUnit.test( \"jQuery.easing._default (gh-2218)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( \"#foo\" )\n\t\t.animate( { width: \"5px\" }, {\n\t\t\tduration: 5,\n\t\t\tstart: function( anim ) {\n\t\t\t\tassert.equal( anim.opts.easing, jQuery.easing._default,\n\t\t\t\t\t\"anim.opts.easing should be equal to jQuery.easing._default when the easing argument is not given\" );\n\t\t\t}\n\t\t} )\n\t\t.animate( { height: \"5px\" }, {\n\t\t\tduration: 5,\n\t\t\teasing: \"linear\",\n\t\t\tstart: function( anim ) {\n\t\t\t\tassert.equal( anim.opts.easing, \"linear\",\n\t\t\t\t\t\"anim.opts.easing should be equal to the easing argument\" );\n\t\t\t}\n\t\t} )\n\t\t.stop();\n\n\tthis.clock.tick( 25 );\n} );\n\nQUnit.test( \"jQuery.easing._default in Animation (gh-2218\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar animation,\n\t\tdefaultEasing = jQuery.easing._default,\n\t\tcalled = false,\n\t\ttestObject = { \"width\": 100 },\n\t\ttestDest = { \"width\": 200 };\n\n\tjQuery.easing.custom = function( p ) {\n\t\tcalled = true;\n\t\treturn p;\n\t};\n\tjQuery.easing._default = \"custom\";\n\n\tanimation = jQuery.Animation( testObject, testDest, { \"duration\": 1 } );\n\tanimation.done( function() {\n\t\tassert.equal( testObject.width, testDest.width, \"Animated width\" );\n\t\tassert.ok( called, \"Custom jQuery.easing._default called\" );\n\t\tassert.strictEqual( animation.opts.easing, \"custom\",\n\t\t\t\"Animation used custom jQuery.easing._default\" );\n\t\tjQuery.easing._default = defaultEasing;\n\t\tdelete jQuery.easing.custom;\n\t} );\n\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"jQuery.easing._default in Tween (gh-2218)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar tween,\n\t\tdefaultEasing = jQuery.easing._default,\n\t\tcalled = false,\n\t\ttestObject = { \"width\": 100 };\n\n\tjQuery.easing.custom = function( p ) {\n\t\tcalled = true;\n\t\treturn p;\n\t};\n\tjQuery.easing._default = \"custom\";\n\n\ttween = jQuery.Tween( testObject, { \"duration\": 1 }, \"width\", 200 );\n\ttween.run( 1 );\n\tassert.equal( testObject.width, 200, \"Animated width\" );\n\tassert.ok( called, \"Custom jQuery.easing._default called\" );\n\tassert.strictEqual( tween.easing, \"custom\",\n\t\t\"Animation used custom jQuery.easing._default\" );\n\tjQuery.easing._default = defaultEasing;\n\tdelete jQuery.easing.custom;\n} );\n\nQUnit.test( \"Display value is correct for disconnected nodes (trac-13310)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar div = jQuery( \"<div/>\" );\n\n\tassert.equal( div.css( \"display\", \"inline\" ).hide().show().appendTo( \"body\" ).css( \"display\" ), \"inline\", \"Initialized display value has returned\" );\n\tdiv.remove();\n\n\tdiv.css( \"display\", \"none\" ).hide();\n\tassert.equal( jQuery._data( div[ 0 ], \"olddisplay\" ), undefined, \"olddisplay is undefined after hiding a detached and hidden element\" );\n\tdiv.remove();\n\n\tdiv.css( \"display\", \"inline-block\" ).hide().appendTo( \"body\" ).fadeIn( function() {\n\t\tassert.equal( div.css( \"display\" ), \"inline-block\", \"Initialized display value has returned\" );\n\t\tdiv.remove();\n\t} );\n\tthis.clock.tick( 1000 );\n} );\n\nQUnit.test( \"Show/hide/toggle and display: inline\", function( assert ) {\n\tassert.expect( 40 );\n\n\tvar clock = this.clock;\n\n\tjQuery( \"<span/><div style='display:inline' title='inline div'/>\" ).each( function() {\n\t\tvar completed, interrupted,\n\t\t\tN = 100,\n\t\t\tfixture = jQuery( \"#qunit-fixture\" ),\n\t\t\t$el = jQuery( this ),\n\t\t\tkind = this.title || this.nodeName.toLowerCase();\n\n\t\t// Animations allowed to complete\n\t\tcompleted = jQuery.map( [\n\t\t\t$el.clone().data( { call: \"hide\", done: \"none\" } ).appendTo( fixture ).hide( N ),\n\t\t\t$el.clone().data( { call: \"toggle\", done: \"none\" } ).appendTo( fixture ).toggle( N ),\n\t\t\t$el.clone().data( { call: \"hide+show\", done: \"inline\" } ).appendTo( fixture )\n\t\t\t\t.hide().show( N ),\n\t\t\t$el.clone().data( { call: \"hide+toggle\", done: \"inline\" } ).appendTo( fixture )\n\t\t\t\t.hide().toggle( N )\n\t\t], function( $clone ) { return $clone[ 0 ]; } );\n\n\t\t// Animations not allowed to complete\n\t\tinterrupted = jQuery.map( [\n\t\t\t$el.clone().data( { call: \"hide+stop\" } ).appendTo( fixture ).hide( N ),\n\t\t\t$el.clone().data( { call: \"toggle+stop\" } ).appendTo( fixture ).toggle( N ),\n\t\t\t$el.clone().data( { call: \"hide+show+stop\" } ).appendTo( fixture ).hide().show( N ),\n\t\t\t$el.clone().data( { call: \"hide+toggle+stop\" } ).appendTo( fixture ).hide().toggle( N )\n\t\t], function( $clone ) { return $clone[ 0 ]; } );\n\n\t\t// All elements should be inline-block during the animation\n\t\tclock.tick( N / 2 );\n\t\tjQuery( completed ).each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" );\n\t\t\tassert.strictEqual( $el.css( \"display\" ), \"inline-block\", kind + \" display during \" + call );\n\t\t} );\n\n\t\t// Interrupted elements should remain inline-block\n\t\tjQuery( interrupted ).stop();\n\t\tclock.tick( N / 2 );\n\t\tjQuery( interrupted ).each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" );\n\t\t\tassert.strictEqual( $el.css( \"display\" ), \"inline-block\", kind + \" display after \" + call );\n\t\t} );\n\n\t\t// Completed elements should not remain inline-block\n\t\tclock.tick( N / 2 );\n\t\tjQuery( completed ).each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" ),\n\t\t\t\tdisplay = $el.data( \"done\" );\n\t\t\tassert.strictEqual( $el.css( \"display\" ), display, kind + \" display after \" + call );\n\t\t} );\n\n\t\t// A post-animation toggle should not make any element inline-block\n\t\tcompleted = jQuery( completed.concat( interrupted ) );\n\t\tcompleted.toggle( N / 2 );\n\t\tclock.tick( N );\n\t\tcompleted.each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" );\n\t\t\tassert.ok( $el.css( \"display\" ) !== \"inline-block\",\n\t\t\t\tkind + \" display is not inline-block after \" + call + \"+toggle\" );\n\t\t} );\n\t} );\n} );\n\nfunction testEasing( assert, speed, easing, complete ) {\n\tassert.expect( 4 );\n\tvar options = jQuery.speed( speed, easing, complete );\n\n\tassert.equal( options.duration, 10, \"Duration set properly\" );\n\tassert.equal(\n\t\ttypeof options.easing === \"function\" ? options.easing() : options.easing,\n\t\t\"linear\",\n\t\t\"Easing set properly\"\n\t);\n\tassert.equal( options.queue, \"fx\", \"Queue defaults to fx\" );\n\toptions.complete();\n}\n\nQUnit.test( \"jQuery.speed( speed, easing, complete )\", function( assert ) {\n\ttestEasing( assert, 10, \"linear\", function() {\n\t\tassert.ok( true, \"Complete called\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery.speed( speed, easing, complete ) - with easing function\", function( assert ) {\n\ttestEasing(\n\t\tassert,\n\t\t10,\n\t\tfunction() {\n\t\t\treturn \"linear\";\n\t\t},\n\t\tfunction() {\n\t\t\tassert.ok( true, \"Complete called\" );\n\t\t}\n\t);\n} );\n\nQUnit.test( \"jQuery.speed( options )\", function( assert ) {\n\ttestEasing( assert, {\n\t\tduration: 10,\n\t\teasing: \"linear\",\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Complete called\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"jQuery.speed( options ) - with easing function\", function( assert ) {\n\ttestEasing( assert, {\n\t\tduration: 10,\n\t\teasing: function() {\n\t\t\treturn \"linear\";\n\t\t},\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Complete called\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"jQuery.speed( options ) - queue values\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar get = function( queue ) {\n\t\treturn jQuery.speed( { queue: queue } ).queue;\n\t};\n\n\tassert.equal( get( null ), \"fx\", \"null defaults to 'fx'\" );\n\tassert.equal( get( undefined ), \"fx\", \"undefined defaults to 'fx'\" );\n\tassert.equal( get( true ), \"fx\", \"true defaults to 'fx'\" );\n\tassert.equal( get( \"fx\" ), \"fx\", \"'fx' passed through\" );\n\tassert.equal( get( \"custom\" ), \"custom\", \"'custom' passed through\" );\n} );\n\nQUnit.test( \"jQuery.speed() - durations\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar get = function( duration ) {\n\t\treturn jQuery.speed( duration ).duration;\n\t};\n\n\tassert.equal( get( 100 ), 100, \"jQuery.speed sets number duration\" );\n\tassert.equal( get(), jQuery.fx.speeds._default, \"jQuery.speed falls back default duration\" );\n\tassert.equal( get( \"slow\" ), jQuery.fx.speeds.slow, \"jQuery.speed uses preset speeds\" );\n\tassert.equal( get( \"fast\" ), jQuery.fx.speeds.fast, \"jQuery.speed uses preset speeds\" );\n\tjQuery.fx.off = true;\n\tassert.equal( get( 100 ), 0, \"jQuery.speed defaults duration to zero if fx is off\" );\n\tjQuery.fx.off = false;\n} );\n\n} )();\n", "QUnit.module( \"event\", {\n\tbeforeEach: function() {\n\t\tdocument.body.focus();\n\t},\n\tafterEach: moduleTeardown\n} );\n\nQUnit.test( \"null or undefined handler\", function( assert ) {\n\tassert.expect( 4 );\n\n\t// Supports Fixes bug #7229\n\ttry {\n\t\tjQuery( \"#firstp\" ).on( \"click\", null );\n\t\tassert.ok( true, \"Passing a null handler will not throw an exception\" );\n\t} catch ( e ) {}\n\n\ttry {\n\t\tjQuery( \"#firstp\" ).on( \"click\", undefined );\n\t\tassert.ok( true, \"Passing an undefined handler will not throw an exception\" );\n\t} catch ( e ) {}\n\n\tvar expectedElem = jQuery( \"#firstp\" );\n\tvar actualElem = expectedElem.on( \"click\", null );\n\tassert.equal( actualElem, expectedElem, \"Passing a null handler should return the original element\" );\n\n\tactualElem = expectedElem.on( \"click\", undefined );\n\tassert.equal( actualElem, expectedElem, \"Passing a null handler should return the original element\" );\n} );\n\nQUnit.test( \"on() with non-null,defined data\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar handler = function( event, data ) {\n\t\tassert.equal( data, 0, \"non-null, defined data (zero) is correctly passed\" );\n\t};\n\n\tjQuery( \"#foo\" ).on( \"foo.on\", handler );\n\tjQuery( \"div\" ).on( \"foo.delegate\", \"#foo\", handler );\n\n\tjQuery( \"#foo\" ).trigger( \"foo\", 0 );\n\n\tjQuery( \"#foo\" ).off( \"foo.on\", handler );\n\tjQuery( \"div\" ).off( \"foo.delegate\", \"#foo\" );\n\n} );\n\nQUnit.test( \"Handler changes and .trigger() order\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery(\n\t\t\"<div><div><p><span><b class=\\\"a\\\">b</b></span></p></div></div>\"\n\t),\n\tpath = \"\";\n\n\tmarkup\n\t\t.find( \"*\" ).addBack().on( \"click\", function() {\n\t\t\tpath += this.nodeName.toLowerCase() + \" \";\n\t\t} )\n\t\t.filter( \"b\" ).on( \"click\", function( e ) {\n\n\t\t\t// Removing span should not stop propagation to original parents\n\t\t\tif ( e.target === this ) {\n\t\t\t\tjQuery( this ).parent().remove();\n\t\t\t}\n\t\t} );\n\n\tmarkup.find( \"b\" ).trigger( \"click\" );\n\n\tassert.equal( path, \"b p div div \", \"Delivered all events\" );\n\n\tmarkup.remove();\n} );\n\nQUnit.test( \"on(), with data\", function( assert ) {\n\tassert.expect( 4 );\n\tvar test, handler, handler2;\n\n\thandler = function( event ) {\n\t\tassert.ok( event.data, \"on() with data, check passed data exists\" );\n\t\tassert.equal( event.data.foo, \"bar\", \"on() with data, Check value of passed data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", { \"foo\": \"bar\" }, handler ).trigger( \"click\" ).off( \"click\", handler );\n\n\tassert.ok( !jQuery._data( jQuery( \"#firstp\" )[ 0 ], \"events\" ), \"Event handler unbound when using data.\" );\n\n\ttest = function() {};\n\thandler2 = function( event ) {\n\t\tassert.equal( event.data, test, \"on() with function data, Check value of passed data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", test, handler2 ).trigger( \"click\" ).off( \"click\", handler2 );\n} );\n\nQUnit.test( \"click(), with data\", function( assert ) {\n\tassert.expect( 3 );\n\tvar handler = function( event ) {\n\t\tassert.ok( event.data, \"on() with data, check passed data exists\" );\n\t\tassert.equal( event.data.foo, \"bar\", \"on() with data, Check value of passed data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", { \"foo\": \"bar\" }, handler ).trigger( \"click\" ).off( \"click\", handler );\n\n\tassert.ok( !jQuery._data( jQuery( \"#firstp\" )[ 0 ], \"events\" ), \"Event handler unbound when using data.\" );\n} );\n\nQUnit.test( \"on(), with data, trigger with data\", function( assert ) {\n\tassert.expect( 4 );\n\tvar handler = function( event, data ) {\n\t\tassert.ok( event.data, \"check passed data exists\" );\n\t\tassert.equal( event.data.foo, \"bar\", \"Check value of passed data\" );\n\t\tassert.ok( data, \"Check trigger data\" );\n\t\tassert.equal( data.bar, \"foo\", \"Check value of trigger data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", { foo: \"bar\" }, handler ).trigger( \"click\", [ { bar: \"foo\" } ] ).off( \"click\", handler );\n} );\n\nQUnit.test( \"on(), multiple events at once\", function( assert ) {\n\tassert.expect( 2 );\n\tvar handler,\n\t\tclickCounter = 0,\n\t\tmouseoverCounter = 0;\n\thandler = function( event ) {\n\t\tif ( event.type === \"click\" ) {\n\t\t\tclickCounter += 1;\n\t\t} else if ( event.type === \"mouseover\" ) {\n\t\t\tmouseoverCounter += 1;\n\t\t}\n\t};\n\n\tjQuery( \"#firstp\" ).on( \"click mouseover\", handler ).trigger( \"click\" ).trigger( \"mouseover\" );\n\tassert.equal( clickCounter, 1, \"on() with multiple events at once\" );\n\tassert.equal( mouseoverCounter, 1, \"on() with multiple events at once\" );\n} );\n\nQUnit.test( \"on(), five events at once\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\thandler = function() {\n\t\t\tcount++;\n\t\t};\n\n\tjQuery( \"#firstp\" ).on( \"click mouseover foo bar baz\", handler )\n\t.trigger( \"click\" ).trigger( \"mouseover\" )\n\t\t.trigger( \"foo\" ).trigger( \"bar\" )\n\t\t.trigger( \"baz\" );\n\n\tassert.equal( count, 5, \"on() five events at once\" );\n} );\n\nQUnit.test( \"on(), multiple events at once and namespaces\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar cur, div,\n\t\tobj = {};\n\n\tdiv = jQuery( \"<div/>\" ).on( \"focusin.a\", function( e ) {\n\t\tassert.equal( e.type, cur, \"Verify right single event was fired.\" );\n\t} );\n\n\tcur = \"focusin\";\n\tdiv.trigger( \"focusin.a\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n\n\tdiv = jQuery( \"<div/>\" ).on( \"click mouseover\", obj, function( e ) {\n\t\tassert.equal( e.type, cur, \"Verify right multi event was fired.\" );\n\t\tassert.equal( e.data, obj, \"Make sure the data came in correctly.\" );\n\t} );\n\n\tcur = \"click\";\n\tdiv.trigger( \"click\" );\n\n\tcur = \"mouseover\";\n\tdiv.trigger( \"mouseover\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n\n\tdiv = jQuery( \"<div/>\" ).on( \"focusin.a focusout.b\", function( e ) {\n\t\tassert.equal( e.type, cur, \"Verify right multi event was fired.\" );\n\t} );\n\n\tcur = \"focusin\";\n\tdiv.trigger( \"focusin.a\" );\n\n\tcur = \"focusout\";\n\tdiv.trigger( \"focusout.b\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n} );\n\nQUnit.test( \"on(), namespace with special add\", function( assert ) {\n\tassert.expect( 27 );\n\n\tvar i = 0,\n\t\tdiv = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"test\", function() {\n\t\t\tassert.ok( true, \"Test event fired.\" );\n\t\t} );\n\n\tjQuery.event.special.test = {\n\t\t_default: function( e, data ) {\n\t\t\tassert.equal( e.type, \"test\", \"Make sure we're dealing with a test event.\" );\n\t\t\tassert.ok( data, \"And that trigger data was passed.\" );\n\t\t\tassert.strictEqual( e.target, div[ 0 ], \"And that the target is correct.\" );\n\t\t\tassert.equal( this, window, \"And that the context is correct.\" );\n\t\t},\n\t\tsetup: function() {},\n\t\tteardown: function() {\n\t\t\tassert.ok( true, \"Teardown called.\" );\n\t\t},\n\t\tadd: function( handleObj ) {\n\t\t\tvar handler = handleObj.handler;\n\t\t\thandleObj.handler = function( e ) {\n\t\t\t\te.xyz = ++i;\n\t\t\t\thandler.apply( this, arguments );\n\t\t\t};\n\t\t},\n\t\tremove: function() {\n\t\t\tassert.ok( true, \"Remove called.\" );\n\t\t}\n\t};\n\n\tdiv.on( \"test.a\", { x: 1 }, function( e ) {\n\t\tassert.ok( !!e.xyz, \"Make sure that the data is getting passed through.\" );\n\t\tassert.equal( e.data[ \"x\" ], 1, \"Make sure data is attached properly.\" );\n\t} );\n\n\tdiv.on( \"test.b\", { x: 2 }, function( e ) {\n\t\tassert.ok( !!e.xyz, \"Make sure that the data is getting passed through.\" );\n\t\tassert.equal( e.data[ \"x\" ], 2, \"Make sure data is attached properly.\" );\n\t} );\n\n\t// Should trigger 5\n\tdiv.trigger( \"test\", 33.33 );\n\n\t// Should trigger 2\n\tdiv.trigger( \"test.a\", \"George Harrison\" );\n\n\t// Should trigger 2\n\tdiv.trigger( \"test.b\", { year: 1982 } );\n\n\t// Should trigger 4\n\tdiv.off( \"test\" );\n\n\tdiv = jQuery( \"<div/>\" ).on( \"test\", function() {\n\t\tassert.ok( true, \"Test event fired.\" );\n\t} );\n\n\t// Should trigger 2\n\tdiv.appendTo( \"#qunit-fixture\" ).remove();\n\n\tdelete jQuery.event.special.test;\n} );\n\nQUnit.test( \"on(), no data\", function( assert ) {\n\tassert.expect( 1 );\n\tvar handler = function( event ) {\n\t\tassert.ok( !event.data, \"Check that no data is added to the event object\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", handler ).trigger( \"click\" );\n} );\n\nQUnit.test( \"on/one/off(Object)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar $elem,\n\t\tclickCounter = 0,\n\t\tmouseoverCounter = 0;\n\n\tfunction handler( event ) {\n\t\tif ( event.type === \"click\" ) {\n\t\t\tclickCounter++;\n\t\t} else if ( event.type === \"mouseover\" ) {\n\t\t\tmouseoverCounter++;\n\t\t}\n\t}\n\n\tfunction handlerWithData( event ) {\n\t\tif ( event.type === \"click\" ) {\n\t\t\tclickCounter += event.data;\n\t\t} else if ( event.type === \"mouseover\" ) {\n\t\t\tmouseoverCounter += event.data;\n\t\t}\n\t}\n\n\tfunction trigger() {\n\t\t$elem.trigger( \"click\" ).trigger( \"mouseover\" );\n\t}\n\n\t$elem = jQuery( \"#firstp\" )\n\n\t\t// Regular bind\n\t\t.on( {\n\t\t\t\"click\":handler,\n\t\t\t\"mouseover\":handler\n\t\t} )\n\n\t\t// Bind with data\n\t\t.one( {\n\t\t\t\"click\":handlerWithData,\n\t\t\t\"mouseover\":handlerWithData\n\t\t}, 2 );\n\n\ttrigger();\n\n\tassert.equal( clickCounter, 3, \"on(Object)\" );\n\tassert.equal( mouseoverCounter, 3, \"on(Object)\" );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"on(Object)\" );\n\tassert.equal( mouseoverCounter, 4, \"on(Object)\" );\n\n\tjQuery( \"#firstp\" ).off( {\n\t\t\"click\":handler,\n\t\t\"mouseover\":handler\n\t} );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"on(Object)\" );\n\tassert.equal( mouseoverCounter, 4, \"on(Object)\" );\n} );\n\nQUnit.test( \"on/off(Object), on/off(Object, String)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar events,\n\t\tclickCounter = 0,\n\t\tmouseoverCounter = 0,\n\t\t$p = jQuery( \"#firstp\" ),\n\t\t$a = $p.find( \"a\" ).eq( 0 );\n\n\tevents = {\n\t\t\"click\": function( event ) {\n\t\t\tclickCounter += ( event.data || 1 );\n\t\t},\n\t\t\"mouseover\": function( event ) {\n\t\t\tmouseoverCounter += ( event.data || 1 );\n\t\t}\n\t};\n\n\tfunction trigger() {\n\t\t$a.trigger( \"click\" ).trigger( \"mouseover\" );\n\t}\n\n\tjQuery( document ).on( events, \"#firstp a\" );\n\t$p.on( events, \"a\", 2 );\n\n\ttrigger();\n\tassert.equal( clickCounter, 3, \"on\" );\n\tassert.equal( mouseoverCounter, 3, \"on\" );\n\n\t$p.off( events, \"a\" );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"off\" );\n\tassert.equal( mouseoverCounter, 4, \"off\" );\n\n\tjQuery( document ).off( events, \"#firstp a\" );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"off\" );\n\tassert.equal( mouseoverCounter, 4, \"off\" );\n} );\n\nQUnit.test( \"on immediate propagation\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar lastClick,\n\t\t$p = jQuery( \"#firstp\" ),\n\t\t$a = $p.find( \"a\" ).eq( 0 );\n\n\tlastClick = \"\";\n\tjQuery( document ).on( \"click\", \"#firstp a\", function( e ) {\n\t\tlastClick = \"click1\";\n\t\te.stopImmediatePropagation();\n\t} );\n\tjQuery( document ).on( \"click\", \"#firstp a\", function() {\n\t\tlastClick = \"click2\";\n\t} );\n\t$a.trigger( \"click\" );\n\tassert.equal( lastClick, \"click1\", \"on stopImmediatePropagation\" );\n\tjQuery( document ).off( \"click\", \"#firstp a\" );\n\n\tlastClick = \"\";\n\t$p.on( \"click\", \"a\", function( e ) {\n\t\tlastClick = \"click1\";\n\t\te.stopImmediatePropagation();\n\t} );\n\t$p.on( \"click\", \"a\", function() {\n\t\tlastClick = \"click2\";\n\t} );\n\t$a.trigger( \"click\" );\n\tassert.equal( lastClick, \"click1\", \"on stopImmediatePropagation\" );\n\t$p.off( \"click\", \"**\" );\n} );\n\nQUnit.test( \"on bubbling, isDefaultPrevented, stopImmediatePropagation\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $anchor2 = jQuery( \"#anchor2\" ),\n\t\t$main = jQuery( \"#qunit-fixture\" ),\n\t\tneverCallMe = function() {\n\t\t\tassert.ok( false, \"immediate propagation should have been stopped\" );\n\t\t},\n\t\tfakeClick = function( $jq ) {\n\n\t\t\t// Use a native click so we don't get jQuery simulated bubbling\n\t\t\tvar e = document.createEvent( \"MouseEvents\" );\n\t\t\te.initEvent( \"click\", true, true );\n\t\t\t$jq[ 0 ].dispatchEvent( e );\n\t\t};\n\t$anchor2.on( \"click\", function( e ) {\n\t\te.preventDefault();\n\t} );\n\t$main.on( \"click\", \"#foo\", function( e ) {\n\t\tassert.equal( e.isDefaultPrevented(), true, \"isDefaultPrevented true passed to bubbled event\" );\n\t} );\n\tfakeClick( $anchor2 );\n\t$anchor2.off( \"click\" );\n\t$main.off( \"click\", \"**\" );\n\t$anchor2.on( \"click\", function() {\n\n\t\t// Let the default action occur\n\t} );\n\t$main.on( \"click\", \"#foo\", function( e ) {\n\t\tassert.equal( e.isDefaultPrevented(), false, \"isDefaultPrevented false passed to bubbled event\" );\n\t} );\n\tfakeClick( $anchor2 );\n\t$anchor2.off( \"click\" );\n\t$main.off( \"click\", \"**\" );\n\n\t$anchor2.on( \"click\", function( e ) {\n\t\te.stopImmediatePropagation();\n\t\tassert.ok( true, \"anchor was clicked and prop stopped\" );\n\t} );\n\t$anchor2[ 0 ].addEventListener( \"click\", neverCallMe, false );\n\tfakeClick( $anchor2 );\n\t$anchor2[ 0 ].removeEventListener( \"click\", neverCallMe );\n} );\n\nQUnit.test( \"triggered events stopPropagation() for natively-bound events\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $button = jQuery( \"#button\" ),\n\t\t$parent = $button.parent(),\n\t\tneverCallMe = function() {\n\t\t\tassert.ok( false, \"propagation should have been stopped\" );\n\t\t},\n\t\tstopPropagationCallback = function( e ) {\n\t\t\tassert.ok( true, \"propagation is stopped\" );\n\t\t\te.stopPropagation();\n\t\t};\n\n\t$parent[ 0 ].addEventListener( \"click\", neverCallMe );\n\t$button.on( \"click\", stopPropagationCallback );\n\t$button.trigger( \"click\" );\n\t$parent[ 0 ].removeEventListener( \"click\", neverCallMe );\n\t$button.off( \"click\", stopPropagationCallback );\n} );\n\nQUnit.test( \"trigger() works with events that were previously stopped\", function( assert ) {\n\tassert.expect( 0 );\n\n\tvar $button = jQuery( \"#button\" ),\n\t\t$parent = $button.parent(),\n\t\tneverCallMe = function() {\n\t\t\tassert.ok( false, \"propagation should have been stopped\" );\n\t\t};\n\n\t$parent[ 0 ].addEventListener( \"click\", neverCallMe );\n\t$button.on( \"click\", neverCallMe );\n\n\tvar clickEvent =  jQuery.Event( \"click\" );\n\tclickEvent.stopPropagation();\n\t$button.trigger( clickEvent );\n\n\t$parent[ 0 ].removeEventListener( \"click\", neverCallMe );\n\t$button.off( \"click\", neverCallMe );\n} );\n\n\nQUnit.test( \"on(), iframes\", function( assert ) {\n\tassert.expect( 1 );\n\n\t// events don't work with iframes, see #939 - this test fails in IE because of contentDocument\n\tvar doc = jQuery( \"#loadediframe\" ).contents();\n\n\tjQuery( \"div\", doc ).on( \"click\", function() {\n\t\tassert.ok( true, \"Binding to element inside iframe\" );\n\t} ).trigger( \"click\" ).off( \"click\" );\n} );\n\nQUnit.test( \"on(), trigger change on select\", function( assert ) {\n\tassert.expect( 5 );\n\tvar counter = 0;\n\tfunction selectOnChange( event ) {\n\t\tassert.equal( event.data, counter++, \"Event.data is not a global event object\" );\n\t}\n\tjQuery( \"#form select\" ).each( function( i ) {\n\t\tjQuery( this ).on( \"change\", i, selectOnChange );\n\t} ).trigger( \"change\" );\n} );\n\nQUnit.test( \"on(), namespaced events, cloned events\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar firstp = jQuery( \"#firstp\" );\n\n\tfirstp.on( \"custom.test\", function() {\n\t\tassert.ok( false, \"Custom event triggered\" );\n\t} );\n\n\tfirstp.on( \"click\", function( e ) {\n\t\tassert.ok( true, \"Normal click triggered\" );\n\t\tassert.equal( e.type + e.namespace, \"click\", \"Check that only click events trigger this fn\" );\n\t} );\n\n\tfirstp.on( \"click.test\", function( e ) {\n\t\tvar check = \"click\";\n\t\tassert.ok( true, \"Namespaced click triggered\" );\n\t\tif ( e.namespace ) {\n\t\t\tcheck += \"test\";\n\t\t}\n\t\tassert.equal( e.type + e.namespace, check, \"Check that only click/click.test events trigger this fn\" );\n\t} );\n\n\t//clone(true) element to verify events are cloned correctly\n\tfirstp = firstp.add( firstp.clone( true ).attr( \"id\", \"firstp2\" ).insertBefore( firstp ) );\n\n\t// Trigger both bound fn (8)\n\tfirstp.trigger( \"click\" );\n\n\t// Trigger one bound fn (4)\n\tfirstp.trigger( \"click.test\" );\n\n\t// Remove only the one fn\n\tfirstp.off( \"click.test\" );\n\n\t// Trigger the remaining fn (4)\n\tfirstp.trigger( \"click\" );\n\n\t// Remove the remaining namespaced fn\n\tfirstp.off( \".test\" );\n\n\t// Try triggering the custom event (0)\n\tfirstp.trigger( \"custom\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tjQuery( \"#nonnodes\" ).contents().on( \"tester\", function() {\n\t\tassert.equal( this.nodeType, 1, \"Check node,textnode,comment on just does real nodes\" );\n\t} ).trigger( \"tester\" );\n\n\t// Make sure events stick with appendTo'd elements (which are cloned) #2027\n\tjQuery( \"<a href='#fail' class='test'>test</a>\" ).on( \"click\", function() { return false; } ).appendTo( \"#qunit-fixture\" );\n\tassert.ok( jQuery( \"a.test\" ).eq( 0 ).triggerHandler( \"click\" ) === false, \"Handler is bound to appendTo'd elements\" );\n} );\n\nQUnit.test( \"on(), multi-namespaced events\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar order = [\n\t\t\"click.test.abc\",\n\t\t\"click.test.abc\",\n\t\t\"click.test\",\n\t\t\"click.test.abc\",\n\t\t\"click.test\",\n\t\t\"custom.test2\"\n\t];\n\n\tfunction check( name, msg ) {\n\t\tassert.deepEqual( name, order.shift(), msg );\n\t}\n\n\tjQuery( \"#firstp\" ).on( \"custom.test\", function() {\n\t\tcheck( \"custom.test\", \"Custom event triggered\" );\n\t} );\n\n\tjQuery( \"#firstp\" ).on( \"custom.test2\", function() {\n\t\tcheck( \"custom.test2\", \"Custom event triggered\" );\n\t} );\n\n\tjQuery( \"#firstp\" ).on( \"click.test\", function() {\n\t\tcheck( \"click.test\", \"Normal click triggered\" );\n\t} );\n\n\tjQuery( \"#firstp\" ).on( \"click.test.abc\", function() {\n\t\tcheck( \"click.test.abc\", \"Namespaced click triggered\" );\n\t} );\n\n\t// Those would not trigger/off (#5303)\n\tjQuery( \"#firstp\" ).trigger( \"click.a.test\" );\n\tjQuery( \"#firstp\" ).off( \"click.a.test\" );\n\n\t// Trigger both bound fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"click.test.abc\" );\n\n\t// Trigger one bound fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"click.abc\" );\n\n\t// Trigger two bound fn (2)\n\tjQuery( \"#firstp\" ).trigger( \"click.test\" );\n\n\t// Remove only the one fn\n\tjQuery( \"#firstp\" ).off( \"click.abc\" );\n\n\t// Trigger the remaining fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"click\" );\n\n\t// Remove the remaining fn\n\tjQuery( \"#firstp\" ).off( \".test\" );\n\n\t// Trigger the remaining fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"custom\" );\n} );\n\nQUnit.test( \"namespace-only event binding is a no-op\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( \"#firstp\" )\n\t\t.on( \".whoops\", function() {\n\t\t\tassert.ok( false, \"called a namespace-only event\" );\n\t\t} )\n\t\t.on( \"whoops\", function() {\n\t\t\tassert.ok( true, \"called whoops\" );\n\t\t} )\n\t\t.trigger( \"whoops\" )\t// 1\n\t\t.off( \".whoops\" )\n\t\t.trigger( \"whoops\" )\t// 2\n\t\t.off( \"whoops\" );\n} );\n\nQUnit.test( \"Empty namespace is ignored\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#firstp\" )\n\t\t.on( \"meow.\", function( e ) {\n\t\t\tassert.equal( e.namespace, \"\", \"triggered a namespace-less meow event\" );\n\t\t} )\n\t\t.trigger( \"meow.\" )\n\t\t.off( \"meow.\" );\n} );\n\nQUnit.test( \"on(), with same function\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar count = 0, func = function() {\n\t\tcount++;\n\t};\n\n\tjQuery( \"#liveHandlerOrder\" ).on( \"foo.bar\", func ).on( \"foo.zar\", func );\n\tjQuery( \"#liveHandlerOrder\" ).trigger( \"foo.bar\" );\n\n\tassert.equal( count, 1, \"Verify binding function with multiple namespaces.\" );\n\n\tjQuery( \"#liveHandlerOrder\" ).off( \"foo.bar\", func ).off( \"foo.zar\", func );\n\tjQuery( \"#liveHandlerOrder\" ).trigger( \"foo.bar\" );\n\n\tassert.equal( count, 1, \"Verify that removing events still work.\" );\n} );\n\nQUnit.test( \"on(), make sure order is maintained\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"#firstp\" ), log = [], check = [];\n\n\tjQuery.each( new Array( 100 ), function( i ) {\n\t\telem.on( \"click\", function() {\n\t\t\tlog.push( i );\n\t\t} );\n\n\t\tcheck.push( i );\n\n\t} );\n\n\telem.trigger( \"click\" );\n\n\tassert.equal( log.join( \",\" ), check.join( \",\" ), \"Make sure order was maintained.\" );\n\n\telem.off( \"click\" );\n} );\n\nQUnit.test( \"on(), with different this object\", function( assert ) {\n\tassert.expect( 4 );\n\tvar thisObject = { myThis: true },\n\t\tdata = { myData: true },\n\t\thandler1 = function() {\n\t\t\tassert.equal( this, thisObject, \"on() with different this object\" );\n\t\t}.bind( thisObject ),\n\t\thandler2 = function( event ) {\n\t\t\tassert.equal( this, thisObject, \"on() with different this object and data\" );\n\t\t\tassert.equal( event.data, data, \"on() with different this object and data\" );\n\t\t}.bind( thisObject );\n\n\tjQuery( \"#firstp\" )\n\t\t.on( \"click\", handler1 ).trigger( \"click\" ).off( \"click\", handler1 )\n\t\t.on( \"click\", data, handler2 ).trigger( \"click\" ).off( \"click\", handler2 );\n\n\tassert.ok( !jQuery._data( jQuery( \"#firstp\" )[ 0 ], \"events\" ), \"Event handler unbound when using different this object and data.\" );\n} );\n\nQUnit.test( \"on(name, false), off(name, false)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar main = 0;\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", function() { main++; } );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).on( \"click\", false );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 0, \"Verify that no bubble happened.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).off( \"click\", false );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\n\t// manually clean up events from elements outside the fixture\n\tjQuery( \"#qunit-fixture\" ).off( \"click\" );\n} );\n\nQUnit.test( \"on(name, selector, false), off(name, selector, false)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar main = 0;\n\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", \"#ap\", function() { main++; } );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).on( \"click\", \"#groups\", false );\n\tjQuery( \"#groups\" ).trigger( \"click\" );\n\tassert.equal( main, 0, \"Verify that no bubble happened.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).off( \"click\", \"#groups\", false );\n\tjQuery( \"#groups\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\tjQuery( \"#qunit-fixture\" ).off( \"click\", \"#ap\" );\n} );\n\nQUnit.test( \"on()/trigger()/off() on plain object\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar events,\n\t\tobj = {};\n\n\t// Make sure it doesn't complain when no events are found\n\tjQuery( obj ).trigger( \"test\" );\n\n\t// Make sure it doesn't complain when no events are found\n\tjQuery( obj ).off( \"test\" );\n\n\tjQuery( obj ).on( {\n\t\t\"test\": function() {\n\t\t\tassert.ok( true, \"Custom event run.\" );\n\t\t},\n\t\t\"submit\": function() {\n\t\t\tassert.ok( true, \"Custom submit event run.\" );\n\t\t}\n\t} );\n\n\tevents = jQuery._data( obj, \"events\" );\n\tassert.ok( events, \"Object has events bound.\" );\n\tassert.equal( obj[ \"events\" ], undefined, \"Events object on plain objects is not events\" );\n\tassert.equal( obj.test, undefined, \"Make sure that test event is not on the plain object.\" );\n\tassert.equal( obj.handle, undefined, \"Make sure that the event handler is not on the plain object.\" );\n\n\t// Should trigger 1\n\tjQuery( obj ).trigger( \"test\" );\n\tjQuery( obj ).trigger( \"submit\" );\n\n\tjQuery( obj ).off( \"test\" );\n\tjQuery( obj ).off( \"submit\" );\n\n\t// Should trigger 0\n\tjQuery( obj ).trigger( \"test\" );\n\n\t// Make sure it doesn't complain when no events are found\n\tjQuery( obj ).off( \"test\" );\n\n\tassert.equal( obj && obj[ jQuery.expando ] &&\n\t\t\tobj[ jQuery.expando ][ jQuery.expando ] &&\n\t\t\tobj[ jQuery.expando ][ jQuery.expando ][ \"events\" ], undefined, \"Make sure events object is removed\" );\n} );\n\nQUnit.test( \"off(type)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar message, func,\n\t\t$elem = jQuery( \"#firstp\" );\n\n\tfunction error() {\n\t\tassert.ok( false, message );\n\t}\n\n\tmessage = \"unbind passing function\";\n\t$elem.on( \"error1\", error ).off( \"error1\", error ).triggerHandler( \"error1\" );\n\n\tmessage = \"unbind all from event\";\n\t$elem.on( \"error1\", error ).off( \"error1\" ).triggerHandler( \"error1\" );\n\n\tmessage = \"unbind all\";\n\t$elem.on( \"error1\", error ).off().triggerHandler( \"error1\" );\n\n\tmessage = \"unbind many with function\";\n\t$elem.on( \"error1 error2\", error )\n\t\t.off( \"error1 error2\", error )\n\t\t.trigger( \"error1\" ).triggerHandler( \"error2\" );\n\n\tmessage = \"unbind many\"; // #3538\n\t$elem.on( \"error1 error2\", error )\n\t\t.off( \"error1 error2\" )\n\t\t.trigger( \"error1\" ).triggerHandler( \"error2\" );\n\n\tmessage = \"unbind without a type or handler\";\n\t$elem.on( \"error1 error2.test\", error )\n\t\t.off()\n\t\t.trigger( \"error1\" ).triggerHandler( \"error2\" );\n\n\t// Should only unbind the specified function\n\tjQuery( document ).on( \"click\", function() {\n\t\tassert.ok( true, \"called handler after selective removal\" );\n\t} );\n\tfunc = function() {};\n\tjQuery( document )\n\t\t.on( \"click\", func )\n\t\t.off( \"click\", func )\n\t\t.trigger( \"click\" )\n\t\t.off( \"click\" );\n} );\n\nQUnit.test( \"off(eventObject)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $elem = jQuery( \"#firstp\" ),\n\t\tnum;\n\n\tfunction check( expected ) {\n\t\tnum = 0;\n\t\t$elem.trigger( \"foo\" ).triggerHandler( \"bar\" );\n\t\tassert.equal( num, expected, \"Check the right handlers are triggered\" );\n\t}\n\n\t$elem\n\n\t\t// This handler shouldn't be unbound\n\t\t.on( \"foo\", function() {\n\t\t\tnum += 1;\n\t\t} )\n\t\t.on( \"foo\", function( e ) {\n\t\t\t$elem.off( e );\n\t\t\tnum += 2;\n\t\t} )\n\n\t\t// Neither this one\n\t\t.on( \"bar\", function() {\n\t\t\tnum += 4;\n\t\t} );\n\n\tcheck( 7 );\n\tcheck( 5 );\n\n\t$elem.off( \"bar\" );\n\tcheck( 1 );\n\n\t$elem.off();\n\tcheck( 0 );\n} );\n\nQUnit.test( \"mouseover triggers mouseenter\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\telem = jQuery( \"<a />\" );\n\telem.on( \"mouseenter\", function() {\n\t\tcount++;\n\t} );\n\telem.trigger( \"mouseover\" );\n\tassert.equal( count, 1, \"make sure mouseover triggers a mouseenter\" );\n\n\telem.remove();\n} );\n\nQUnit.test( \"pointerover triggers pointerenter\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\telem = jQuery( \"<a />\" );\n\telem.on( \"pointerenter\", function() {\n\t\tcount++;\n\t} );\n\telem.trigger( \"pointerover\" );\n\tassert.equal( count, 1, \"make sure pointerover triggers a pointerenter\" );\n\n\telem.remove();\n} );\n\nQUnit.test( \"withinElement implemented with jQuery.contains()\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<div id='jc-outer'><div id='jc-inner'></div></div>\" );\n\n\tjQuery( \"#jc-outer\" ).on( \"mouseenter mouseleave\", function( event ) {\n\t\tassert.equal( this.id, \"jc-outer\", this.id + \" \" + event.type );\n\t} );\n\n\tjQuery( \"#jc-inner\" ).trigger( \"mouseenter\" );\n} );\n\nQUnit.test( \"mouseenter, mouseleave don't catch exceptions\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar elem = jQuery( \"#firstp\" ).on( \"mouseenter mouseleave\", function() {\n\t\t\tthrow \"an Exception\";\n\t\t} );\n\n\ttry {\n\t\telem.trigger( \"mouseenter\" );\n\t} catch ( e ) {\n\t\tassert.equal( e, \"an Exception\", \"mouseenter doesn't catch exceptions\" );\n\t}\n\n\ttry {\n\t\telem.trigger( \"mouseleave\" );\n\t} catch ( e ) {\n\t\tassert.equal( e, \"an Exception\", \"mouseleave doesn't catch exceptions\" );\n\t}\n} );\n\nQUnit.test( \"trigger() bubbling\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar win = 0, doc = 0, html = 0, body = 0, main = 0, ap = 0;\n\n\tjQuery( window ).on( \"click\", function() { win++; } );\n\tjQuery( document ).on( \"click\", function( e ) { if ( e.target !== document ) { doc++; } } );\n\tjQuery( \"html\" ).on( \"click\", function() { html++; } );\n\tjQuery( \"body\" ).on( \"click\", function() { body++; } );\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", function() { main++; } );\n\tjQuery( \"#ap\" ).on( \"click\", function() { ap++; return false; } );\n\n\tjQuery( \"html\" ).trigger( \"click\" );\n\tassert.equal( win, 1, \"HTML bubble\" );\n\tassert.equal( doc, 1, \"HTML bubble\" );\n\tassert.equal( html, 1, \"HTML bubble\" );\n\n\tjQuery( \"body\" ).trigger( \"click\" );\n\tassert.equal( win, 2, \"Body bubble\" );\n\tassert.equal( doc, 2, \"Body bubble\" );\n\tassert.equal( html, 2, \"Body bubble\" );\n\tassert.equal( body, 1, \"Body bubble\" );\n\n\tjQuery( \"#qunit-fixture\" ).trigger( \"click\" );\n\tassert.equal( win, 3, \"Main bubble\" );\n\tassert.equal( doc, 3, \"Main bubble\" );\n\tassert.equal( html, 3, \"Main bubble\" );\n\tassert.equal( body, 2, \"Main bubble\" );\n\tassert.equal( main, 1, \"Main bubble\" );\n\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( doc, 3, \"ap bubble\" );\n\tassert.equal( html, 3, \"ap bubble\" );\n\tassert.equal( body, 2, \"ap bubble\" );\n\tassert.equal( main, 1, \"ap bubble\" );\n\tassert.equal( ap, 1, \"ap bubble\" );\n\n\tjQuery( document ).trigger( \"click\" );\n\tassert.equal( win, 4, \"doc bubble\" );\n\n\t// manually clean up events from elements outside the fixture\n\tjQuery( window ).off( \"click\" );\n\tjQuery( document ).off( \"click\" );\n\tjQuery( \"html, body, #qunit-fixture\" ).off( \"click\" );\n} );\n\nQUnit.test( \"trigger(type, [data], [fn])\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar $elem, pass, form, elem2,\n\t\thandler = function( event, a, b, c ) {\n\t\tassert.equal( event.type, \"click\", \"check passed data\" );\n\t\tassert.equal( a, 1, \"check passed data\" );\n\t\tassert.equal( b, \"2\", \"check passed data\" );\n\t\tassert.equal( c, \"abc\", \"check passed data\" );\n\t\treturn \"test\";\n\t};\n\n\t$elem = jQuery( \"#firstp\" );\n\n\t// Simulate a \"native\" click\n\t$elem[ 0 ].click = function() {\n\t\tassert.ok( true, \"Native call was triggered\" );\n\t};\n\n\tjQuery( document ).on( \"mouseenter\", \"#firstp\", function() {\n\t\tassert.ok( true, \"Trigger mouseenter bound by on\" );\n\t} );\n\n\tjQuery( document ).on( \"mouseleave\", \"#firstp\", function() {\n\t\tassert.ok( true, \"Trigger mouseleave bound by on\" );\n\t} );\n\n\t$elem.trigger( \"mouseenter\" );\n\n\t$elem.trigger( \"mouseleave\" );\n\n\tjQuery( document ).off( \"mouseenter mouseleave\", \"#firstp\" );\n\n\t// Triggers handlers and native\n\t// Trigger 5\n\t$elem.on( \"click\", handler ).trigger( \"click\", [ 1, \"2\", \"abc\" ] );\n\n\t// Simulate a \"native\" click\n\t$elem[ 0 ].click = function() {\n\t\tassert.ok( false, \"Native call was triggered\" );\n\t};\n\n\t// Trigger only the handlers (no native)\n\t// Triggers 5\n\tassert.equal( $elem.triggerHandler( \"click\", [ 1, \"2\", \"abc\" ] ), \"test\", \"Verify handler response\" );\n\n\tpass = true;\n\ttry {\n\t\telem2 = jQuery( \"#form input\" ).eq( 0 );\n\t\telem2.get( 0 ).style.display = \"none\";\n\t\telem2.trigger( \"focus\" );\n\t} catch ( e ) {\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"Trigger focus on hidden element\" );\n\n\tpass = true;\n\ttry {\n\t\tjQuery( \"#qunit-fixture table\" ).eq( 0 ).on( \"test:test\", function() {} ).trigger( \"test:test\" );\n\t} catch ( e ) {\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"Trigger on a table with a colon in the even type, see #3533\" );\n\n\tform = jQuery( \"<form action=''></form>\" ).appendTo( \"body\" );\n\n\t// Make sure it can be prevented locally\n\tform.on( \"submit\", function() {\n\t\tassert.ok( true, \"Local `on` still works.\" );\n\t\treturn false;\n\t} );\n\n\t// Trigger 1\n\tform.trigger( \"submit\" );\n\n\tform.off( \"submit\" );\n\n\tjQuery( document ).on( \"submit\", function() {\n\t\tassert.ok( true, \"Make sure bubble works up to document.\" );\n\t\treturn false;\n\t} );\n\n\t// Trigger 1\n\tform.trigger( \"submit\" );\n\n\tjQuery( document ).off( \"submit\" );\n\n\tform.remove();\n} );\n\nQUnit.test( \"submit event bubbles on copied forms (#11649)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $formByClone, $formByHTML,\n\t\t$testForm = jQuery( \"#testForm\" ),\n\t\t$fixture = jQuery( \"#qunit-fixture\" ),\n\t\t$wrapperDiv = jQuery( \"<div/>\" ).appendTo( $fixture );\n\n\tfunction noSubmit( e ) {\n\t\te.preventDefault();\n\t}\n\tfunction delegatedSubmit() {\n\t\tassert.ok( true, \"Make sure submit event bubbles up.\" );\n\t\treturn false;\n\t}\n\n\t// Attach a delegated submit handler to the parent element\n\t$fixture.on( \"submit\", \"form\", delegatedSubmit );\n\n\t// Trigger form submission to introduce the _submit_attached property\n\t$testForm.on( \"submit\", noSubmit ).find( \"input[name=sub1]\" ).trigger( \"click\" );\n\n\t// Copy the form via .clone() and .html()\n\t$formByClone = $testForm.clone( true, true ).removeAttr( \"id\" );\n\t$formByHTML = jQuery( jQuery.parseHTML( $fixture.html() ) ).filter( \"#testForm\" ).removeAttr( \"id\" );\n\t$wrapperDiv.append( $formByClone, $formByHTML );\n\n\t// Check submit bubbling on the copied forms\n\t$wrapperDiv.find( \"form\" ).on( \"submit\", noSubmit ).find( \"input[name=sub1]\" ).trigger( \"click\" );\n\n\t// Clean up\n\t$wrapperDiv.remove();\n\t$fixture.off( \"submit\", \"form\", delegatedSubmit );\n\t$testForm.off( \"submit\", noSubmit );\n} );\n\nQUnit.test( \"change event bubbles on copied forms (#11796)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $formByClone, $formByHTML,\n\t\t$form = jQuery( \"#form\" ),\n\t\t$fixture = jQuery( \"#qunit-fixture\" ),\n\t\t$wrapperDiv = jQuery( \"<div/>\" ).appendTo( $fixture );\n\n\tfunction delegatedChange() {\n\t\tassert.ok( true, \"Make sure change event bubbles up.\" );\n\t\treturn false;\n\t}\n\n\t// Attach a delegated change handler to the form\n\t$fixture.on( \"change\", \"form\", delegatedChange );\n\n\t// Trigger change event to introduce the _change_attached property\n\t$form.find( \"select[name=select1]\" ).val( \"1\" ).trigger( \"change\" );\n\n\t// Copy the form via .clone() and .html()\n\t$formByClone = $form.clone( true, true ).removeAttr( \"id\" );\n\t$formByHTML = jQuery( jQuery.parseHTML( $fixture.html() ) ).filter( \"#form\" ).removeAttr( \"id\" );\n\t$wrapperDiv.append( $formByClone, $formByHTML );\n\n\t// Check change bubbling on the copied forms\n\t$wrapperDiv.find( \"form select[name=select1]\" ).val( \"2\" ).trigger( \"change\" );\n\n\t// Clean up\n\t$wrapperDiv.remove();\n\t$fixture.off( \"change\", \"form\", delegatedChange );\n} );\n\nQUnit.test( \"trigger(eventObject, [data], [fn])\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar event,\n\t\t$parent = jQuery( \"<div id='par' />\" ).appendTo( \"body\" ),\n\t\t$child = jQuery( \"<p id='child'>foo</p>\" ).appendTo( $parent );\n\n\t$parent.get( 0 ).style.display = \"none\";\n\n\tevent = jQuery.Event( \"noNew\" );\n\tassert.ok( event !== window, \"Instantiate jQuery.Event without the 'new' keyword\" );\n\tassert.equal( event.type, \"noNew\", \"Verify its type\" );\n\n\tassert.equal( event.isDefaultPrevented(), false, \"Verify isDefaultPrevented\" );\n\tassert.equal( event.isPropagationStopped(), false, \"Verify isPropagationStopped\" );\n\tassert.equal( event.isImmediatePropagationStopped(), false, \"Verify isImmediatePropagationStopped\" );\n\n\tevent.preventDefault();\n\tassert.equal( event.isDefaultPrevented(), true, \"Verify isDefaultPrevented\" );\n\tevent.stopPropagation();\n\tassert.equal( event.isPropagationStopped(), true, \"Verify isPropagationStopped\" );\n\n\tevent.isPropagationStopped = function() { return false; };\n\tevent.stopImmediatePropagation();\n\tassert.equal( event.isPropagationStopped(), true, \"Verify isPropagationStopped\" );\n\tassert.equal( event.isImmediatePropagationStopped(), true, \"Verify isPropagationStopped\" );\n\n\t$parent.on( \"foo\", function( e ) {\n\n\t\t// Tries bubbling\n\t\tassert.equal( e.type, \"foo\", \"Verify event type when passed passing an event object\" );\n\t\tassert.equal( e.target.id, \"child\", \"Verify event.target when passed passing an event object\" );\n\t\tassert.equal( e.currentTarget.id, \"par\", \"Verify event.currentTarget when passed passing an event object\" );\n\t\tassert.equal( e.secret, \"boo!\", \"Verify event object's custom attribute when passed passing an event object\" );\n\t} );\n\n\t// test with an event object\n\tevent = new jQuery.Event( \"foo\" );\n\tevent.secret = \"boo!\";\n\t$child.trigger( event );\n\n\t// test with a literal object\n\t$child.trigger( { \"type\": \"foo\", \"secret\": \"boo!\" } );\n\n\t$parent.off();\n\n\tfunction error() {\n\t\tassert.ok( false, \"This assertion shouldn't be reached\" );\n\t}\n\n\t$parent.on( \"foo\", error );\n\n\t$child.on( \"foo\", function( e, a, b, c ) {\n\t\tassert.equal( arguments.length, 4, \"Check arguments length\" );\n\t\tassert.equal( a, 1, \"Check first custom argument\" );\n\t\tassert.equal( b, 2, \"Check second custom argument\" );\n\t\tassert.equal( c, 3, \"Check third custom argument\" );\n\n\t\tassert.equal( e.isDefaultPrevented(), false, \"Verify isDefaultPrevented\" );\n\t\tassert.equal( e.isPropagationStopped(), false, \"Verify isPropagationStopped\" );\n\t\tassert.equal( e.isImmediatePropagationStopped(), false, \"Verify isImmediatePropagationStopped\" );\n\n\t\t// Skips both errors\n\t\te.stopImmediatePropagation();\n\n\t\treturn \"result\";\n\t} );\n\n\t// We should add this back in when we want to test the order\n\t// in which event handlers are iterated.\n\t//$child.on(\"foo\", error );\n\n\tevent = new jQuery.Event( \"foo\" );\n\t$child.trigger( event, [ 1, 2, 3 ] ).off();\n\tassert.equal( event.result, \"result\", \"Check event.result attribute\" );\n\n\t// Will error if it bubbles\n\t$child.triggerHandler( \"foo\" );\n\n\t$child.off();\n\t$parent.off().remove();\n\n\t// Ensure triggerHandler doesn't molest its event object (#xxx)\n\tevent = jQuery.Event( \"zowie\" );\n\tjQuery( document ).triggerHandler( event );\n\tassert.equal( event.type, \"zowie\", \"Verify its type\" );\n\tassert.equal( event.isPropagationStopped(), false, \"propagation not stopped\" );\n\tassert.equal( event.isDefaultPrevented(), false, \"default not prevented\" );\n} );\n\nQUnit.test( \".trigger() bubbling on disconnected elements (#10489)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( window ).on( \"click\", function() {\n\t\tassert.ok( false, \"click fired on window\" );\n\t} );\n\n\tjQuery( \"<div><p>hi</p></div>\" )\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( true, \"click fired on div\" );\n\t\t} )\n\t\t.find( \"p\" )\n\t\t\t.on( \"click\", function() {\n\t\t\t\tassert.ok( true, \"click fired on p\" );\n\t\t\t} )\n\t\t\t.trigger( \"click\" )\n\t\t\t.off( \"click\" )\n\t\t.end()\n\t\t.off( \"click\" )\n\t\t.remove();\n\n\tjQuery( window ).off( \"click\" );\n} );\n\nQUnit.test( \".trigger() doesn't bubble load event (#10717)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( window ).on( \"load\", function() {\n\t\tassert.ok( false, \"load fired on window\" );\n\t} );\n\n\tjQuery( \"<img src='\" + baseURL + \"1x1.jpg' />\" )\n\t\t.appendTo( \"body\" )\n\t\t.on( \"load\", function() {\n\t\t\tassert.ok( true, \"load fired on img\" );\n\t\t} )\n\t\t.trigger( \"load\" )\n\t\t.remove();\n\n\tjQuery( window ).off( \"load\" );\n} );\n\nQUnit.test( \"Delegated events in SVG (#10791; #13180)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar useElem, e,\n\t\tsvg = jQuery(\n\t\t\t\"<svg height='1' version='1.1' width='1' xmlns='http://www.w3.org/2000/svg'>\" +\n\t\t\t\"<defs><rect id='ref' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect></defs>\" +\n\t\t\t\"<rect class='svg-by-class' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect>\" +\n\t\t\t\"<rect id='svg-by-id' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect>\" +\n\t\t\t\"<use id='use' xlink:href='#ref'></use>\" +\n\t\t\t\"</svg>\"\n\t\t);\n\n\tjQuery( \"#qunit-fixture\" )\n\t\t.append( svg )\n\t\t.on( \"click\", \"#svg-by-id\", function() {\n\t\t\tassert.ok( true, \"delegated id selector\" );\n\t\t} )\n\t\t.on( \"click\", \"[class~='svg-by-class']\", function() {\n\t\t\tassert.ok( true, \"delegated class selector\" );\n\t\t} )\n\t\t.find( \"#svg-by-id, [class~='svg-by-class']\" )\n\t\t\t.trigger( \"click\" )\n\t\t.end();\n\n\t// Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)\n\t// to confirm that it doesn't break our event delegation handling (#13180)\n\tuseElem = svg.find( \"#use\" )[ 0 ];\n\tif ( document.createEvent && useElem && useElem.instanceRoot ) {\n\t\te = document.createEvent( \"MouseEvents\" );\n\t\te.initEvent( \"click\", true, true );\n\t\tuseElem.instanceRoot.dispatchEvent( e );\n\t}\n\n\tjQuery( \"#qunit-fixture\" ).off( \"click\" );\n} );\n\nQUnit.test( \"Delegated events with malformed selectors (gh-3071)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.throws( function() {\n\t\tjQuery( \"#foo\" ).on( \"click\", \":not\", function() {} );\n\t}, \"malformed selector throws on attach\" );\n\n\tassert.throws( function() {\n\t\tjQuery( \"#foo\" ).on( \"click\", \"nonexistent:not\", function() {} );\n\t}, \"short-circuitable malformed selector throws on attach\" );\n\n\tjQuery( \"#foo > :first-child\" ).trigger( \"click\" );\n\tassert.ok( true, \"malformed selector does not throw on event\" );\n} );\n\nQUnit.test( \"Delegated events in forms (#10844; #11145; #8165; #11382, #11764)\", function( assert ) {\n\tassert.expect( 5 );\n\n\t// Alias names like \"id\" cause havoc\n\tvar form = jQuery(\n\t\t\t\"<form id='myform'>\" +\n\t\t\t\t\"<input type='text' name='id' value='secret agent man' />\" +\n\t\t\t\"</form>\"\n\t\t)\n\t\t.on( \"submit\", function( event ) {\n\t\t\tevent.preventDefault();\n\t\t} )\n\t\t.appendTo( \"body\" );\n\n\tjQuery( \"body\" )\n\t\t.on( \"submit\", \"#myform\", function() {\n\t\t\tassert.ok( true, \"delegated id selector with aliased id\" );\n\t\t} )\n\t\t.find( \"#myform\" )\n\t\t\t.trigger( \"submit\" )\n\t\t.end()\n\t\t.off( \"submit\" );\n\n\tform.append( \"<input type='text' name='disabled' value='differently abled' />\" );\n\tjQuery( \"body\" )\n\t\t.on( \"submit\", \"#myform\", function() {\n\t\t\tassert.ok( true, \"delegated id selector with aliased disabled\" );\n\t\t} )\n\t\t.find( \"#myform\" )\n\t\t\t.trigger( \"submit\" )\n\t\t.end()\n\t\t.off( \"submit\" );\n\n\tform\n\t\t.append( \"<button id='nestyDisabledBtn'><span>Zing</span></button>\" )\n\t\t.on( \"click\", \"#nestyDisabledBtn\", function() {\n\t\t\tassert.ok( true, \"click on enabled/disabled button with nesty elements\" );\n\t\t} )\n\t\t.on( \"mouseover\", \"#nestyDisabledBtn\", function() {\n\t\t\tassert.ok( true, \"mouse on enabled/disabled button with nesty elements\" );\n\t\t} )\n\t\t.find( \"span\" )\n\t\t\t.trigger( \"click\" )\t\t// yep\n\t\t\t.trigger( \"mouseover\" )\t// yep\n\t\t.end()\n\t\t.find( \"#nestyDisabledBtn\" ).prop( \"disabled\", true ).end()\n\t\t.find( \"span\" )\n\t\t\t.trigger( \"click\" )\t\t// nope\n\t\t\t.trigger( \"mouseover\" )\t// yep\n\t\t.end()\n\t\t.off( \"click\" );\n\n\tform.remove();\n} );\n\nQUnit.test( \"Submit event can be stopped (#11049)\", function( assert ) {\n\tassert.expect( 1 );\n\n\t// Since we manually bubble in IE, make sure inner handlers get a chance to cancel\n\tvar form = jQuery(\n\t\t\t\"<form id='myform'>\" +\n\t\t\t\t\"<input type='text' name='sue' value='bawls' />\" +\n\t\t\t\t\"<input type='submit' />\" +\n\t\t\t\"</form>\"\n\t\t)\n\t\t.appendTo( \"body\" );\n\n\tjQuery( \"body\" )\n\t\t.on( \"submit\", function() {\n\t\t\tassert.ok( true, \"submit bubbled on first handler\" );\n\t\t\treturn false;\n\t\t} )\n\t\t.find( \"#myform input[type=submit]\" )\n\t\t\t.each( function() { this.click(); } )\n\t\t.end()\n\t\t.on( \"submit\", function() {\n\t\t\tassert.ok( false, \"submit bubbled on second handler\" );\n\t\t\treturn false;\n\t\t} )\n\t\t.find( \"#myform input[type=submit]\" )\n\t\t\t.each( function() {\n\t\t\t\tjQuery( this.form ).on( \"submit\", function( e ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t} );\n\t\t\t\tthis.click();\n\t\t\t} )\n\t\t.end()\n\t\t.off( \"submit\" );\n\n\tform.remove();\n} );\n\n// Support: iOS 7 - 9\n// iOS has the window.onbeforeunload field but doesn't support the beforeunload\n// handler making it impossible to feature-detect the support.\nQUnit[ /(ipad|iphone|ipod)/i.test( navigator.userAgent ) ? \"skip\" : \"test\" ](\n\t\"on(beforeunload)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar iframe = jQuery( jQuery.parseHTML( \"<iframe src='\" + baseURL + \"event/onbeforeunload.html'><iframe>\" ) );\n\tvar done = assert.async();\n\n\twindow.onmessage = function( event ) {\n\t\tvar payload = JSON.parse( event.data );\n\n\t\tassert.ok( payload.event, \"beforeunload\", \"beforeunload event\" );\n\n\t\tiframe.remove();\n\t\twindow.onmessage = null;\n\t\tdone();\n\t};\n\n\tiframe.appendTo( \"#qunit-fixture\" );\n} );\n\nQUnit.test( \"jQuery.Event( type, props )\", function( assert ) {\n\n\tassert.expect( 6 );\n\n\tvar event = jQuery.Event( \"keydown\", { keyCode: 64 } ),\n\t\t\thandler = function( event ) {\n\t\t\t\tassert.ok( \"keyCode\" in event, \"Special property 'keyCode' exists\" );\n\t\t\t\tassert.equal( event.keyCode, 64, \"event.keyCode has explicit value '64'\" );\n\t\t\t};\n\n\t// Supports jQuery.Event implementation\n\tassert.equal( event.type, \"keydown\", \"Verify type\" );\n\n\t// ensure \"type\" in props won't clobber the one set by constructor\n\tassert.equal( jQuery.inArray( \"type\", jQuery.event.props ), -1, \"'type' property not in props (#10375)\" );\n\n\tassert.ok( \"keyCode\" in event, \"Special 'keyCode' property exists\" );\n\n\tassert.strictEqual( jQuery.isPlainObject( event ), false, \"Instances of $.Event should not be identified as a plain object.\" );\n\n\tjQuery( \"body\" ).on( \"keydown\", handler ).trigger( event );\n\n\tjQuery( \"body\" ).off( \"keydown\" );\n\n} );\n\nQUnit.test( \"jQuery.Event properties\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar handler,\n\t\t$structure = jQuery( \"<div id='ancestor'><p id='delegate'><span id='target'>shiny</span></p></div>\" ),\n\t\t$target = $structure.find( \"#target\" );\n\n\thandler = function( e ) {\n\t\tassert.strictEqual( e.currentTarget, this, \"currentTarget at \" + this.id );\n\t\tassert.equal( e.isTrigger, 3, \"trigger at \" + this.id );\n\t};\n\t$structure.one( \"click\", handler );\n\t$structure.one( \"click\", \"p\", handler );\n\t$target.one( \"click\", handler );\n\t$target[ 0 ].onclick = function( e ) {\n\t\tassert.strictEqual( e.currentTarget, this, \"currentTarget at target (native handler)\" );\n\t\tassert.equal( e.isTrigger, 3, \"trigger at target (native handler)\" );\n\t};\n\t$target.trigger( \"click\" );\n\n\t$target.one( \"click\", function( e ) {\n\t\tassert.equal( e.isTrigger, 2, \"triggerHandler at target\" );\n\t} );\n\t$target[ 0 ].onclick = function( e ) {\n\t\tassert.equal( e.isTrigger, 2, \"triggerHandler at target (native handler)\" );\n\t};\n\t$target.triggerHandler( \"click\" );\n\n\thandler = function( e ) {\n\t\tassert.strictEqual( e.isTrigger, undefined, \"native event at \" + this.id );\n\t};\n\t$target.one( \"click\", handler );\n\t$target[ 0 ].onclick = function( e ) {\n\t\tassert.strictEqual( e.isTrigger, undefined, \"native event at target (native handler)\" );\n\t};\n\tfireNative( $target[ 0 ], \"click\" );\n} );\n\nQUnit.test( \".on()/.off()\", function( assert ) {\n\tassert.expect( 65 );\n\n\tvar event, clicked, hash, called, livec, lived, livee,\n\t\tsubmit = 0, div = 0, livea = 0, liveb = 0;\n\n\tjQuery( \"#body\" ).on( \"submit\", \"#qunit-fixture div\", function() { submit++; return false; } );\n\tjQuery( \"#body\" ).on( \"click\", \"#qunit-fixture div\", function() { div++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"div#nothiddendiv\", function() { livea++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"div#nothiddendivchild\", function() { liveb++; } );\n\n\t// Nothing should trigger on the body\n\tjQuery( \"body\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"Click on body\" );\n\tassert.equal( div, 0, \"Click on body\" );\n\tassert.equal( livea, 0, \"Click on body\" );\n\tassert.equal( liveb, 0, \"Click on body\" );\n\n\t// This should trigger two events\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"Click on div\" );\n\tassert.equal( div, 1, \"Click on div\" );\n\tassert.equal( livea, 1, \"Click on div\" );\n\tassert.equal( liveb, 0, \"Click on div\" );\n\n\t// This should trigger three events (w/ bubbling)\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"Click on inner div\" );\n\tassert.equal( div, 2, \"Click on inner div\" );\n\tassert.equal( livea, 1, \"Click on inner div\" );\n\tassert.equal( liveb, 1, \"Click on inner div\" );\n\n\t// This should trigger one submit\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"submit\" );\n\tassert.equal( submit, 1, \"Submit on div\" );\n\tassert.equal( div, 0, \"Submit on div\" );\n\tassert.equal( livea, 0, \"Submit on div\" );\n\tassert.equal( liveb, 0, \"Submit on div\" );\n\n\t// Make sure no other events were removed in the process\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"off Click on inner div\" );\n\tassert.equal( div, 2, \"off Click on inner div\" );\n\tassert.equal( livea, 1, \"off Click on inner div\" );\n\tassert.equal( liveb, 1, \"off Click on inner div\" );\n\n\t// Now make sure that the removal works\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"#body\" ).off( \"click\", \"div#nothiddendivchild\" );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"off Click on inner div\" );\n\tassert.equal( div, 2, \"off Click on inner div\" );\n\tassert.equal( livea, 1, \"off Click on inner div\" );\n\tassert.equal( liveb, 0, \"off Click on inner div\" );\n\n\t// Make sure that the click wasn't removed too early\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"off Click on inner div\" );\n\tassert.equal( div, 1, \"off Click on inner div\" );\n\tassert.equal( livea, 1, \"off Click on inner div\" );\n\tassert.equal( liveb, 0, \"off Click on inner div\" );\n\n\t// Make sure that stopPropagation doesn't stop live events\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"#body\" ).on( \"click\", \"div#nothiddendivchild\", function( e ) { liveb++; e.stopPropagation(); } );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"stopPropagation Click on inner div\" );\n\tassert.equal( div, 1, \"stopPropagation Click on inner div\" );\n\tassert.equal( livea, 0, \"stopPropagation Click on inner div\" );\n\tassert.equal( liveb, 1, \"stopPropagation Click on inner div\" );\n\n\t// Make sure click events only fire with primary click\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tevent = jQuery.Event( \"click\" );\n\tevent.button = 1;\n\tjQuery( \"div#nothiddendiv\" ).trigger( event );\n\n\tassert.equal( livea, 0, \"on secondary click\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"div#nothiddendivchild\" );\n\tjQuery( \"#body\" ).off( \"click\", \"div#nothiddendiv\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#qunit-fixture div\" );\n\tjQuery( \"#body\" ).off( \"submit\", \"#qunit-fixture div\" );\n\n\t// Test binding with a different context\n\tclicked = 0;\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", \"#foo\", function() { clicked++; } );\n\tjQuery( \"#qunit-fixture div\" ).trigger( \"click\" );\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tjQuery( \"#qunit-fixture\" ).trigger( \"click\" );\n\tjQuery( \"body\" ).trigger( \"click\" );\n\tassert.equal( clicked, 2, \"on with a context\" );\n\n\t// Test unbinding with a different context\n\tjQuery( \"#qunit-fixture\" ).off( \"click\", \"#foo\" );\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tassert.equal( clicked, 2, \"off with a context\" );\n\n\t// Test binding with event data\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", true, function( e ) {\n\t\tassert.equal( e.data, true, \"on with event data\" );\n\t} );\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Test binding with trigger data\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", function( e, data ) {\n\t\tassert.equal( data, true, \"on with trigger data\" );\n\t} );\n\tjQuery( \"#foo\" ).trigger( \"click\", true );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Test binding with different this object\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", function() {\n\t\t\tassert.equal( this.foo, \"bar\", \"on with event scope\" );\n\t}.bind( { \"foo\": \"bar\" } ) );\n\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Test binding with different this object, event data, and trigger data\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", true, function( e, data ) {\n\t\tassert.equal( e.data, true, \"on with with different this object, event data, and trigger data\" );\n\t\tassert.equal( this.foo, \"bar\", \"on with with different this object, event data, and trigger data\" );\n\t\tassert.equal( data, true, \"on with with different this object, event data, and trigger data\" );\n\t}.bind( { \"foo\": \"bar\" } ) );\n\tjQuery( \"#foo\" ).trigger( \"click\", true );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Verify that return false prevents default action\n\tjQuery( \"#body\" ).on( \"click\", \"#anchor2\", function() { return false; } );\n\thash = window.location.hash;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( window.location.hash, hash, \"return false worked\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#anchor2\" );\n\n\t// Verify that .preventDefault() prevents default action\n\tjQuery( \"#body\" ).on( \"click\", \"#anchor2\", function( e ) { e.preventDefault(); } );\n\thash = window.location.hash;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( window.location.hash, hash, \"e.preventDefault() worked\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#anchor2\" );\n\n\t// Test binding the same handler to multiple points\n\tcalled = 0;\n\tfunction callback() { called++; return false; }\n\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendiv\", callback );\n\tjQuery( \"#body\" ).on( \"click\", \"#anchor2\", callback );\n\n\tjQuery( \"#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( called, 1, \"Verify that only one click occurred.\" );\n\n\tcalled = 0;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( called, 1, \"Verify that only one click occurred.\" );\n\n\t// Make sure that only one callback is removed\n\tjQuery( \"#body\" ).off( \"click\", \"#anchor2\", callback );\n\n\tcalled = 0;\n\tjQuery( \"#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( called, 1, \"Verify that only one click occurred.\" );\n\n\tcalled = 0;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( called, 0, \"Verify that no click occurred.\" );\n\n\t// Make sure that it still works if the selector is the same,\n\t// but the event type is different\n\tjQuery( \"#body\" ).on( \"foo\", \"#nothiddendiv\", callback );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendiv\", callback );\n\n\tcalled = 0;\n\tjQuery( \"#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( called, 0, \"Verify that no click occurred.\" );\n\n\tcalled = 0;\n\tjQuery( \"#nothiddendiv\" ).trigger( \"foo\" );\n\tassert.equal( called, 1, \"Verify that one foo occurred.\" );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"foo\", \"#nothiddendiv\", callback );\n\n\t// Make sure we don't loose the target by DOM modifications\n\t// after the bubble already reached the liveHandler\n\tlivec = 0;\n\tjQuery( \"#nothiddendivchild\" ).html( \"<span></span>\" );\n\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendivchild\", function() { jQuery( \"#nothiddendivchild\" ).html( \"\" ); } );\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendivchild\", function( e ) { if ( e.target ) {livec++;} } );\n\n\tjQuery( \"#nothiddendiv span\" ).trigger( \"click\" );\n\tassert.equal( jQuery( \"#nothiddendiv span\" ).length, 0, \"Verify that first handler occurred and modified the DOM.\" );\n\tassert.equal( livec, 1, \"Verify that second handler occurred even with nuked target.\" );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendivchild\" );\n\n\t// Verify that .live() occurs and cancel bubble in the same order as\n\t// we would expect .on() and .click() without delegation\n\tlived = 0;\n\tlivee = 0;\n\n\t// bind one pair in one order\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan1 a\", function() { lived++; return false; } );\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan1\", function() { livee++; } );\n\n\tjQuery( \"span#liveSpan1 a\" ).trigger( \"click\" );\n\tassert.equal( lived, 1, \"Verify that only one first handler occurred.\" );\n\tassert.equal( livee, 0, \"Verify that second handler doesn't.\" );\n\n\t// and one pair in inverse\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan2\", function() { livee++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan2 a\", function() { lived++; return false; } );\n\n\tlived = 0;\n\tlivee = 0;\n\tjQuery( \"span#liveSpan2 a\" ).trigger( \"click\" );\n\tassert.equal( lived, 1, \"Verify that only one first handler occurred.\" );\n\tassert.equal( livee, 0, \"Verify that second handler doesn't.\" );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"click\", \"**\" );\n\n\t// Test this, target and currentTarget are correct\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan1\", function( e ) {\n\t\tassert.equal( this.id, \"liveSpan1\", \"Check the this within a on handler\" );\n\t\tassert.equal( e.currentTarget.id, \"liveSpan1\", \"Check the event.currentTarget within a on handler\" );\n\t\tassert.equal( e.delegateTarget, document.body, \"Check the event.delegateTarget within a on handler\" );\n\t\tassert.equal( e.target.nodeName.toUpperCase(), \"A\", \"Check the event.target within a on handler\" );\n\t} );\n\n\tjQuery( \"span#liveSpan1 a\" ).trigger( \"click\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"span#liveSpan1\" );\n\n\t// Work with deep selectors\n\tlivee = 0;\n\n\tfunction clickB() { livee++; }\n\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendiv div\", function() { livee++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendiv div\", clickB );\n\tjQuery( \"#body\" ).on( \"mouseover\", \"#nothiddendiv div\", function() { livee++; } );\n\n\tassert.equal( livee, 0, \"No clicks, deep selector.\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( livee, 2, \"Click, deep selector.\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"mouseover\" );\n\tassert.equal( livee, 1, \"Mouseover, deep selector.\" );\n\n\tjQuery( \"#body\" ).off( \"mouseover\", \"#nothiddendiv div\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( livee, 2, \"Click, deep selector.\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"mouseover\" );\n\tassert.equal( livee, 0, \"Mouseover, deep selector.\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendiv div\", clickB );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( livee, 1, \"Click, deep selector.\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendiv div\" );\n} );\n\nQUnit.test( \"jQuery.off using dispatched jQuery.Event\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery( \"<p><a href='#'>target</a></p>\" ),\n\t\tcount = 0;\n\tmarkup\n\t\t.on( \"click.name\", \"a\", function( event ) {\n\t\t\tassert.equal( ++count, 1, \"event called once before removal\" );\n\t\t\tjQuery().off( event );\n\t\t} )\n\t\t.find( \"a\" ).trigger( \"click\" ).trigger( \"click\" ).end()\n\t\t.remove();\n} );\n\nQUnit.test( \"events with type matching an Object.prototype property (gh-3256)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"<div/>\" ),\n\t\teventFired = false;\n\n\telem.appendTo( \"#qunit-fixture\" );\n\n\ttry {\n\t\telem\n\t\t\t.one( \"hasOwnProperty\", function() {\n\t\t\t\teventFired = true;\n\t\t\t} )\n\t\t\t.trigger( \"hasOwnProperty\" );\n\t} finally {\n\t\tassert.strictEqual( eventFired, true, \"trigger fired without crashing\" );\n\t}\n} );\n\nQUnit.test( \"events with type matching an Object.prototype property, cloned element (gh-3256)\",\n\tfunction( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"<div/>\" ),\n\t\teventFired = false;\n\n\telem.appendTo( \"#qunit-fixture\" );\n\n\ttry {\n\t\t// Make sure the original element has some event data.\n\t\telem.on( \"click\", function() {} );\n\n\t\telem\n\t\t\t.clone( true )\n\t\t\t.one( \"hasOwnProperty\", function() {\n\t\t\t\teventFired = true;\n\t\t\t} )\n\t\t\t.trigger( \"hasOwnProperty\" );\n\t} finally {\n\t\tassert.strictEqual( eventFired, true, \"trigger fired without crashing\" );\n\t}\n} );\n\n// selector-native does not support scope-fixing in delegation\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"delegated event with delegateTarget-relative selector\", function( assert ) {\n\tassert.expect( 3 );\n\tvar markup = jQuery( \"<div><ul><li><a id=\\\"a0\\\"></a><ul id=\\\"ul0\\\"><li class=test><a id=\\\"a0_0\\\"></a></li><li><a id=\\\"a0_1\\\"></a></li></ul></li></ul></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t// Non-positional selector (#12383)\n\tmarkup.find( \"#ul0\" )\n\t\t.on( \"click\", \"div li a\", function() {\n\t\t\tassert.ok( false, \"div is ABOVE the delegation point!\" );\n\t\t} )\n\t\t.on( \"click\", \"ul a\", function() {\n\t\t\tassert.ok( false, \"ul IS the delegation point!\" );\n\t\t} )\n\t\t.on( \"click\", \"li.test a\", function() {\n\t\t\tassert.ok( true, \"li.test is below the delegation point.\" );\n\t\t} )\n\t\t.find( \"#a0_0\" ).trigger( \"click\" ).end()\n\t\t.off( \"click\" );\n\n\t// Positional selector (#11315)\n\tmarkup.find( \"ul\" ).eq( 0 )\n\t\t.on( \"click\", \">li>a\", function() {\n\t\t\tassert.ok( this.id === \"a0\", \"child li was clicked\" );\n\t\t} )\n\t\t.find( \"#ul0\" )\n\t\t\t.on( \"click\", \"li:first>a\", function() {\n\t\t\t\tassert.ok( this.id === \"a0_0\", \"first li under #u10 was clicked\" );\n\t\t\t} )\n\t\t.end()\n\t\t.find( \"a\" ).trigger( \"click\" ).end()\n\t\t.find( \"#ul0\" ).off();\n\n\tmarkup.remove();\n} );\n\nQUnit.test( \"delegated event with selector matching Object.prototype property (#13203)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar matched = 0;\n\n\tjQuery( \"#foo\" ).on( \"click\", \"toString\", function() {\n\t\tmatched++;\n\t} );\n\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\n\tassert.equal( matched, 0, \"Nothing matched 'toString'\" );\n} );\n\nQUnit.test( \"delegated event with intermediate DOM manipulation (#13208)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#foo\" ).on( \"click\", \"[id=sap]\", function() {} );\n\tjQuery( \"#sap\" ).on( \"click\", \"[id=anchor2]\", function() {\n\t\tdocument.createDocumentFragment().appendChild( this.parentNode );\n\t\tassert.ok( true, \"Element removed\" );\n\t} );\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n} );\n\nQUnit.test( \"ignore comment nodes in event delegation (gh-2055)\", function( assert ) {\n\tassert.expect( 1 );\n\n\t// Test if DOMNodeInserted is supported\n\t// This is a back-up for when DOMNodeInserted support\n\t// is eventually removed from browsers\n\tfunction test() {\n\t\tvar ret = false;\n\t\tvar $fixture = jQuery( \"#qunit-fixture\" );\n\t\t$fixture.on( \"DOMNodeInserted\", function() {\n\t\t\tret = true;\n\t\t\t$fixture.off( \"DOMNodeInserted\" );\n\t\t} ).append( \"<div></div>\" );\n\t\treturn ret;\n\t}\n\n\tvar $foo = jQuery( \"#foo\" ).on( \"DOMNodeInserted\", \"[id]\", function() {\n\t\tassert.ok( true, \"No error thrown on comment node\" );\n\t} ),\n\t\t$comment = jQuery( document.createComment( \"comment\" ) )\n\t\t\t.appendTo( $foo.find( \"#sap\" ) );\n\n\tif ( !test() ) {\n\t\tfireNative( $comment[ 0 ], \"DOMNodeInserted\" );\n\t}\n} );\n\nQUnit.test( \"stopPropagation() stops directly-bound events on delegated target\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery( \"<div><p><a href=\\\"#\\\">target</a></p></div>\" );\n\tmarkup\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( false, \"directly-bound event on delegate target was called\" );\n\t\t} )\n\t\t.on( \"click\", \"a\", function( e ) {\n\t\t\te.stopPropagation();\n\t\t\tassert.ok( true, \"delegated handler was called\" );\n\t\t} )\n\t\t.find( \"a\" ).trigger( \"click\" ).end()\n\t\t.remove();\n} );\n\nQUnit.test( \"off all bound delegated events\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar count = 0,\n\t\tclicks = 0,\n\t\tdiv = jQuery( \"#body\" );\n\n\tdiv.on( \"click submit\", \"div#nothiddendivchild\", function() { count++; } );\n\tdiv.on( \"click\", function() { clicks++; } );\n\tdiv.off( undefined, \"**\" );\n\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"submit\" );\n\n\tassert.equal( count, 0, \"Make sure no events were triggered.\" );\n\n\tdiv.trigger( \"click\" );\n\tassert.equal( clicks, 2, \"Make sure delegated and directly bound event occurred.\" );\n\tdiv.off( \"click\" );\n} );\n\nQUnit.test( \"on with multiple delegated events\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\tdiv = jQuery( \"#body\" );\n\n\tdiv.on( \"click submit\", \"div#nothiddendivchild\", function() { count++; } );\n\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"submit\" );\n\n\tassert.equal( count, 2, \"Make sure both the click and submit were triggered.\" );\n\n\tjQuery( \"#body\" ).off( undefined, \"**\" );\n} );\n\nQUnit.test( \"delegated on with change\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar select, checkbox, checkboxFunction,\n\t\ttext, textChange, oldTextVal,\n\t\tpassword, passwordChange, oldPasswordVal,\n\t\tselectChange = 0,\n\t\tcheckboxChange = 0;\n\n\tselect = jQuery( \"select[name='S1']\" );\n\tjQuery( \"#body\" ).on( \"change\", \"select[name='S1']\", function() {\n\t\tselectChange++;\n\t} );\n\n\tcheckbox = jQuery( \"#check2\" );\n\tcheckboxFunction = function() {\n\t\tcheckboxChange++;\n\t};\n\tjQuery( \"#body\" ).on( \"change\", \"#check2\", checkboxFunction );\n\n\t// test click on select\n\n\t// second click that changed it\n\tselectChange = 0;\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 1, \"Change on click.\" );\n\n\t// test keys on select\n\tselectChange = 0;\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 1, \"Change on keyup.\" );\n\n\t// test click on checkbox\n\tcheckbox.trigger( \"change\" );\n\tassert.equal( checkboxChange, 1, \"Change on checkbox.\" );\n\n\t// test blur/focus on text\n\ttext = jQuery( \"#name\" );\n\ttextChange = 0;\n\toldTextVal = text.val();\n\n\tjQuery( \"#body\" ).on( \"change\", \"#name\", function() {\n\t\ttextChange++;\n\t} );\n\n\ttext.val( oldTextVal + \"foo\" );\n\ttext.trigger( \"change\" );\n\tassert.equal( textChange, 1, \"Change on text input.\" );\n\n\ttext.val( oldTextVal );\n\tjQuery( \"#body\" ).off( \"change\", \"#name\" );\n\n\t// test blur/focus on password\n\tpassword = jQuery( \"#name\" );\n\tpasswordChange = 0;\n\toldPasswordVal = password.val();\n\tjQuery( \"#body\" ).on( \"change\", \"#name\", function() {\n\t\tpasswordChange++;\n\t} );\n\n\tpassword.val( oldPasswordVal + \"foo\" );\n\tpassword.trigger( \"change\" );\n\tassert.equal( passwordChange, 1, \"Change on password input.\" );\n\n\tpassword.val( oldPasswordVal );\n\tjQuery( \"#body\" ).off( \"change\", \"#name\" );\n\n\t// make sure die works\n\n\t// die all changes\n\tselectChange = 0;\n\tjQuery( \"#body\" ).off( \"change\", \"select[name='S1']\" );\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 0, \"Die on click works.\" );\n\n\tselectChange = 0;\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 0, \"Die on keyup works.\" );\n\n\t// die specific checkbox\n\tjQuery( \"#body\" ).off( \"change\", \"#check2\", checkboxFunction );\n\tcheckbox.trigger( \"change\" );\n\tassert.equal( checkboxChange, 1, \"Die on checkbox.\" );\n} );\n\nQUnit.test( \"delegated on with submit\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar count1 = 0, count2 = 0;\n\n\tjQuery( \"#body\" ).on( \"submit\", \"#testForm\", function( ev ) {\n\t\tcount1++;\n\t\tev.preventDefault();\n\t} );\n\n\tjQuery( document ).on( \"submit\", \"body\", function( ev ) {\n\t\tcount2++;\n\t\tev.preventDefault();\n\t} );\n\n\tjQuery( \"#testForm input[name=sub1]\" ).trigger( \"submit\" );\n\tassert.equal( count1, 1, \"Verify form submit.\" );\n\tassert.equal( count2, 1, \"Verify body submit.\" );\n\n\tjQuery( \"#body\" ).off( undefined, \"**\" );\n\tjQuery( document ).off( undefined, \"**\" );\n} );\n\nQUnit.test( \"delegated off() with only namespaces\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $delegate = jQuery( \"#liveHandlerOrder\" ),\n\t\tcount = 0;\n\n\t$delegate.on( \"click.ns\", \"a\", function() {\n\t\tcount++;\n\t} );\n\n\tjQuery( \"a\", $delegate ).eq( 0 ).trigger( \"click.ns\" );\n\n\tassert.equal( count, 1, \"delegated click.ns\" );\n\n\t$delegate.off( \".ns\", \"**\" );\n\n\tjQuery( \"a\", $delegate ).eq( 1 ).trigger( \"click.ns\" );\n\n\tassert.equal( count, 1, \"no more .ns after off\" );\n} );\n\nQUnit.test( \"Non DOM element events\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar o = {};\n\n\tjQuery( o ).on( \"nonelementobj\", function() {\n\t\tassert.ok( true, \"Event on non-DOM object triggered\" );\n\t} );\n\n\tjQuery( o ).trigger( \"nonelementobj\" ).off( \"nonelementobj\" );\n} );\n\nQUnit.test( \"inline handler returning false stops default\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery( \"<div><a href=\\\"#\\\" onclick=\\\"return false\\\">x</a></div>\" );\n\tmarkup.on( \"click\", function( e ) {\n\t\tassert.ok( e.isDefaultPrevented(), \"inline handler prevented default\" );\n\t\treturn false;\n\t} );\n\tmarkup.find( \"a\" ).trigger( \"click\" );\n\tmarkup.off( \"click\" );\n} );\n\nQUnit.test( \"window resize\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( window ).off();\n\n\tjQuery( window ).on( \"resize\", function() {\n\t\tassert.ok( true, \"Resize event fired.\" );\n\t} ).trigger( \"resize\" ).off( \"resize\" );\n\n\tassert.ok( !jQuery._data( window, \"events\" ), \"Make sure all the events are gone.\" );\n} );\n\nQUnit.test( \"focusin bubbles\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar input = jQuery( \"<input type='text' />\" ).prependTo( \"body\" ),\n\t\torder = 0;\n\n\t// focus the element so DOM focus won't fire\n\tinput[ 0 ].focus();\n\n\tjQuery( \"body\" ).on( \"focusin.focusinBubblesTest\", function() {\n\t\tassert.equal( 1, order++, \"focusin on the body second\" );\n\t} );\n\n\tinput.on( \"focusin.focusinBubblesTest\", function() {\n\t\tassert.equal( 0, order++, \"focusin on the element first\" );\n\t} );\n\n// Removed since DOM focus is unreliable on test swarm\n\t// DOM focus method\n//\tinput[0].focus();\n\n\t// To make the next focus test work, we need to take focus off the input.\n\t// This will fire another focusin event, so set order to reflect that.\n//\torder = 1;\n//\tjQuery(\"#text1\")[0].focus();\n\n\t// jQuery trigger, which calls DOM focus\n\torder = 0;\n\tinput.trigger( \"focus\" );\n\n\tinput.remove();\n\tjQuery( \"body\" ).off( \"focusin.focusinBubblesTest\" );\n} );\n\nQUnit.test( \"custom events with colons (#3533, #8272)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar tab = jQuery( \"<table><tr><td>trigger</td></tr></table>\" ).appendTo( \"body\" );\n\ttry {\n\t\ttab.trigger( \"back:forth\" );\n\t\tassert.ok( true, \"colon events don't throw\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"colon events die\" );\n\t}\n\ttab.remove();\n\n} );\n\nQUnit.test( \".on and .off\", function( assert ) {\n\tassert.expect( 9 );\n\tvar counter, mixfn, data,\n\t\t$onandoff = jQuery( \"<div id=\\\"onandoff\\\"><p>on<b>and</b>off</p><div>worked<em>or</em>borked?</div></div>\" ).appendTo( \"body\" );\n\n\t// Simple case\n\tjQuery( \"#onandoff\" )\n\t\t.on( \"whip\", function() {\n\t\t\tassert.ok( true, \"whipped it good\" );\n\t\t} )\n\t\t.trigger( \"whip\" )\n\t\t.off();\n\n\t// Direct events only\n\tcounter = 0;\n\tjQuery( \"#onandoff b\" )\n\t\t.on( \"click\", 5, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 9 );\t// twice, 5+9+5+17=36\n\t\t} )\n\t\t.one( \"click\", 7, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 11 );\t// once, 7+11=18\n\t\t} )\n\t\t.trigger( \"click\" )\n\t\t.trigger( \"click\", 17 )\n\t\t.off( \"click\" );\n\tassert.equal( counter, 54, \"direct event bindings with data\" );\n\n\t// Delegated events only\n\tcounter = 0;\n\tjQuery( \"#onandoff\" )\n\t\t.on( \"click\", \"em\", 5, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 9 );\t// twice, 5+9+5+17=36\n\t\t} )\n\t\t.one( \"click\", \"em\", 7, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 11 );\t// once, 7+11=18\n\t\t} )\n\t\t.find( \"em\" )\n\t\t\t.trigger( \"click\" )\n\t\t\t.trigger( \"click\", 17 )\n\t\t.end()\n\t\t.off( \"click\", \"em\" );\n\tassert.equal( counter, 54, \"delegated event bindings with data\" );\n\n\t// Mixed event bindings and types\n\tcounter = 0;\n\tmixfn = function( e, trig ) {\n\t\tcounter += ( e.data || 0 ) + ( trig || 1 );\n\t};\n\tjQuery( \"#onandoff\" )\n\t\t.on( \" click  clack cluck \", \"em\", 2, mixfn )\n\t\t.on( \"cluck\", \"b\", 7, mixfn )\n\t\t.on( \"cluck\", mixfn )\n\t\t.trigger( \"what!\" )\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 0, \"nothing triggered yet\" );\n\t\t} )\n\t\t.find( \"em\" )\n\t\t\t.one( \"cluck\", 3, mixfn )\n\t\t\t.trigger( \"cluck\", 8 )\t\t\t// 3+8 2+8 + 0+8 = 29\n\t\t\t.off()\n\t\t\t.trigger( \"cluck\", 9 )\t\t\t// 2+9 + 0+9 = 20\n\t\t.end()\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 49, \"after triggering em element\" );\n\t\t} )\n\t\t.off( \"cluck\", function() {} )\t\t// shouldn't remove anything\n\t\t.trigger( \"cluck\", 2 )\t\t\t\t// 0+2 = 2\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 51, \"after triggering #onandoff cluck\" );\n\t\t} )\n\t\t.find( \"b\" )\n\t\t\t.on( \"click\", 95, mixfn )\n\t\t\t.on( \"clack\", \"p\", 97, mixfn )\n\t\t\t.one( \"cluck\", 3, mixfn )\n\t\t\t.trigger( \"quack\", 19 )\t\t\t// 0\n\t\t\t.off( \"click clack cluck\" )\n\t\t.end()\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 51, \"after triggering b\" );\n\t\t} )\n\t\t.trigger( \"cluck\", 3 )\t\t\t\t// 0+3 = 3\n\t\t.off( \"clack\", \"em\", mixfn )\n\t\t.find( \"em\" )\n\t\t\t.trigger( \"clack\" )\t\t\t\t// 0\n\t\t.end()\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 54, \"final triggers\" );\n\t\t} )\n\t\t.off( \"click cluck\" );\n\n\t// We should have removed all the event handlers ... kinda hacky way to check this\n\tdata = jQuery.data[ jQuery( \"#onandoff\" )[ 0 ].expando ] || {};\n\tassert.equal( data[ \"events\" ], undefined, \"no events left\" );\n\n\t$onandoff.remove();\n} );\n\nQUnit.test( \"special on name mapping\", function( assert ) {\n\tassert.expect( 7 );\n\n\tjQuery.event.special.slap = {\n\t\tbindType: \"click\",\n\t\tdelegateType: \"swing\",\n\t\thandle: function( event ) {\n\t\t\tassert.equal( event.handleObj.origType, \"slap\", \"slapped your mammy, \" + event.type );\n\t\t}\n\t};\n\n\tvar comeback = function( event ) {\n\t\tassert.ok( true, \"event \" + event.type + \" triggered\" );\n\t};\n\n\tjQuery( \"<div><button id=\\\"mammy\\\">Are We Not Men?</button></div>\" )\n\t\t.on( \"slap\", \"button\", jQuery.noop )\n\t\t.on( \"swing\", \"button\", comeback )\n\t\t.find( \"button\" )\n\t\t\t.on( \"slap\", jQuery.noop )\n\t\t\t.on( \"click\", comeback )\n\t\t\t.trigger( \"click\" )\t\t// bindType-slap and click\n\t\t\t.off( \"slap\" )\n\t\t\t.trigger( \"click\" )\t\t// click\n\t\t\t.off( \"click\" )\n\t\t\t.trigger( \"swing\" )\t\t// delegateType-slap and swing\n\t\t.end()\n\t\t.off( \"slap swing\", \"button\" )\n\t\t.find( \"button\" )\t\t\t// everything should be gone\n\t\t\t.trigger( \"slap\" )\n\t\t\t.trigger( \"click\" )\n\t\t\t.trigger( \"swing\" )\n\t\t.end()\n\t\t.remove();\n\tdelete jQuery.event.special.slap;\n\n\tjQuery.event.special.gutfeeling = {\n\t\tbindType: \"click\",\n\t\tdelegateType: \"click\",\n\t\thandle: function( event ) {\n\t\t\tassert.equal( event.handleObj.origType, \"gutfeeling\", \"got a gutfeeling\" );\n\n\t\t\t// Need to call the handler since .one() uses it to unbind\n\t\t\treturn event.handleObj.handler.call( this, event );\n\t\t}\n\t};\n\n\t// Ensure a special event isn't removed by its mapped type\n\tjQuery( \"<p>Gut Feeling</p>\" )\n\t\t.on( \"click\", jQuery.noop )\n\t\t.on( \"gutfeeling\", jQuery.noop )\n\t\t.off( \"click\" )\n\t\t.trigger( \"gutfeeling\" )\n\t\t.remove();\n\n\t// Ensure special events are removed when only a namespace is provided\n\tjQuery( \"<p>Gut Feeling</p>\" )\n\t\t.on( \"gutfeeling.Devo\", jQuery.noop )\n\t\t.off( \".Devo\" )\n\t\t.trigger( \"gutfeeling\" )\n\t\t.remove();\n\n\t// Ensure .one() events are removed after their maiden voyage\n\tjQuery( \"<p>Gut Feeling</p>\" )\n\t\t.one( \"gutfeeling\", jQuery.noop )\n\t\t.trigger( \"gutfeeling\" )\t// This one should\n\t\t.trigger( \"gutfeeling\" )\t// This one should not\n\t\t.remove();\n\n\tdelete jQuery.event.special[ \"gutfeeling\" ];\n} );\n\nQUnit.test( \".on and .off, selective mixed removal (#10705)\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar timingx = function( e ) {\n\t\tassert.ok( true, \"triggered \" + e.type );\n\t};\n\n\tjQuery( \"<p>Strange Pursuit</p>\" )\n\t\t.on( \"click\", timingx )\n\t\t.on( \"click.duty\", timingx )\n\t\t.on( \"click.now\", timingx )\n\t\t.on( \"devo\", timingx )\n\t\t.on( \"future\", timingx )\n\t\t.trigger( \"click\" )\t\t// 3\n\t\t.trigger( \"devo\" )\t\t// 1\n\t\t.off( \".duty devo \" )\t// trailing space\n\t\t.trigger( \"future\" )\t// 1\n\t\t.trigger( \"click\" )\t\t// 2\n\t\t.off( \"future click\" )\n\t\t.trigger( \"click\" );\t// 0\n} );\n\nQUnit.test( \".on( event-map, null-selector, data ) #11130\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar $p = jQuery( \"<p>Strange Pursuit</p>\" ),\n\t\tdata = \"bar\",\n\t\tmap = {\n\t\t\t\"foo\": function( event ) {\n\t\t\t\tassert.equal( event.data, \"bar\", \"event.data correctly relayed with null selector\" );\n\t\t\t\t$p.remove();\n\t\t\t}\n\t\t};\n\n\t$p.on( map, null, data ).trigger( \"foo\" );\n} );\n\nQUnit.test( \"clone() delegated events (#11076)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar counter = { \"center\": 0, \"fold\": 0, \"centerfold\": 0 },\n\t\tclicked = function() {\n\t\t\tcounter[ jQuery( this ).text().replace( /\\s+/, \"\" ) ]++;\n\t\t},\n\t\ttable =\n\t\t\tjQuery( \"<table><tr><td>center</td><td>fold</td></tr></table>\" )\n\t\t\t.on( \"click\", \"tr\", clicked )\n\t\t\t.on( \"click\", \"td:first-child\", clicked )\n\t\t\t.on( \"click\", \"td:last-child\", clicked ),\n\t\tclone = table.clone( true );\n\n\tclone.find( \"td\" ).trigger( \"click\" );\n\tassert.equal( counter.center, 1, \"first child\" );\n\tassert.equal( counter.fold, 1, \"last child\" );\n\tassert.equal( counter.centerfold, 2, \"all children\" );\n\n\ttable.remove();\n\tclone.remove();\n} );\n\nQUnit.test( \"checkbox state (trac-3827)\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar markup = jQuery( \"<div class='parent'><input type=checkbox><div>\" ),\n\t\tcb = markup.find( \"input\" )[ 0 ];\n\n\tmarkup.appendTo( \"#qunit-fixture\" );\n\n\tjQuery( cb ).on( \"click\", function() {\n\t\tassert.equal( this.checked, false, \"just-clicked checkbox is not checked\" );\n\t} );\n\tmarkup.on( \"click\", function() {\n\t\tassert.equal( cb.checked, false, \"checkbox is not checked in bubbled event\" );\n\t} );\n\n\t// Native click\n\tcb.checked = true;\n\tassert.equal( cb.checked, true, \"native event - checkbox is initially checked\" );\n\tcb.click();\n\tassert.equal( cb.checked, false, \"native event - checkbox is no longer checked\" );\n\n\t// jQuery click\n\tcb.checked = true;\n\tassert.equal( cb.checked, true, \"jQuery event - checkbox is initially checked\" );\n\tjQuery( cb ).trigger( \"click\" );\n\tassert.equal( cb.checked, false, \"jQuery event - checkbox is no longer checked\" );\n\n\t// Handlers only; checkbox state remains false\n\tjQuery( cb ).triggerHandler( \"click\" );\n\tassert.equal( cb.checked, false, \"handlers only - checkbox is still unchecked\" );\n\n\t// Trigger parameters are preserved (trac-13353, gh-4139)\n\tcb.checked = true;\n\tassert.equal( cb.checked, true, \"jQuery event with data - checkbox is initially checked\" );\n\tjQuery( cb ).on( \"click\", function( e, data ) {\n\t\tassert.equal( data, \"clicked\", \"trigger data passed to handler\" );\n\t} );\n\tmarkup.on( \"click\", function( e, data ) {\n\t\tassert.equal( data, \"clicked\", \"trigger data passed to bubbled handler\" );\n\t} );\n\tjQuery( cb ).trigger( \"click\", [ \"clicked\" ] );\n\tassert.equal( cb.checked, false, \"jQuery event with data - checkbox is no longer checked\" );\n} );\n\nQUnit.test( \"event object properties on natively-triggered event\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar link = document.createElement( \"a\" ),\n\t\t$link = jQuery( link ),\n\t\tevt = document.createEvent( \"MouseEvents\" );\n\n\t// Support: IE <=9 - 11 only\n\t// IE requires element to be in the body before it will dispatch\n\t$link.appendTo( \"body\" ).on( \"click\", function( e ) {\n\n\t\t// Not trying to assert specific values here, just ensure the property exists\n\t\tassert.equal( \"detail\" in e, true, \"has .detail\" );\n\t\tassert.equal( \"cancelable\" in e, true, \"has .cancelable\" );\n\t\tassert.equal( \"bubbles\" in e, true, \"has .bubbles\" );\n\t} );\n\tevt.initEvent( \"click\", true, true );\n\tlink.dispatchEvent( evt );\n\t$link.off( \"click\" ).remove();\n} );\n\nQUnit.test( \"addProp extensions\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $fixture = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t// Ensure the property doesn't exist\n\t$fixture.on( \"click\", function( event ) {\n\t\tassert.ok( !( \"testProperty\" in event ), \"event.testProperty does not exist\" );\n\t} );\n\tfireNative( $fixture[ 0 ], \"click\" );\n\t$fixture.off( \"click\" );\n\n\tjQuery.event.addProp( \"testProperty\", function() { return 42; } );\n\n\t// Trigger a native click and ensure the property is set\n\t$fixture.on( \"click\", function( event ) {\n\t\tassert.equal( event.testProperty, 42, \"event.testProperty getter was invoked\" );\n\t} );\n\tfireNative( $fixture[ 0 ], \"click\" );\n\t$fixture.off( \"click\" );\n\n\t$fixture.remove();\n} );\n\nQUnit.test( \"drag/drop events copy mouse-related event properties (gh-1925, gh-2009)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $fixture = jQuery( \"<div id='drag-fixture'></div>\" ).appendTo( \"body\" );\n\n\t$fixture.on( \"dragmove\", function( evt ) {\n\t\tassert.ok( \"pageX\" in evt, \"checking for pageX property on dragmove\" );\n\t\tassert.ok( \"pageY\" in evt, \"checking for pageY property on dragmove\" );\n\t} );\n\tfireNative( $fixture[ 0 ], \"dragmove\" );\n\n\t$fixture.on( \"drop\", function( evt ) {\n\t\tassert.ok( \"pageX\" in evt, \"checking for pageX property on drop\" );\n\t\tassert.ok( \"pageY\" in evt, \"checking for pageY property on drop\" );\n\t} );\n\n\tfireNative( $fixture[ 0 ], \"drop\" );\n\n\t$fixture.off( \"dragmove drop\" ).remove();\n} );\n\nQUnit.test( \"focusin using non-element targets\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( document ).on( \"focusin\", function( e ) {\n\t\tassert.ok( e.type === \"focusin\", \"got a focusin event on a document\" );\n\t} ).trigger( \"focusin\" ).off( \"focusin\" );\n\n\tjQuery( window ).on( \"focusin\", function( e ) {\n\t\tassert.ok( e.type === \"focusin\", \"got a focusin event on a window\" );\n\t} ).trigger( \"focusin\" ).off( \"focusin\" );\n\n} );\n\ntestIframe(\n\t\"focusin from an iframe\",\n\t\"event/focusinCrossFrame.html\",\n\tfunction( assert, framejQuery, frameWin, frameDoc ) {\n\t\tassert.expect( 1 );\n\n\t\tvar input = jQuery( frameDoc ).find( \"#frame-input\" );\n\n\t\t// Create a focusin handler on the parent; shouldn't affect the iframe's fate\n\t\tjQuery( \"body\" ).on( \"focusin.iframeTest\", function() {\n\t\t\tassert.ok( false, \"fired a focusin event in the parent document\" );\n\t\t} );\n\n\t\tinput.on( \"focusin\", function() {\n\t\t\tassert.ok( true, \"fired a focusin event in the iframe\" );\n\t\t} );\n\n\t\t// Avoid a native event; Chrome can't force focus to another frame\n\t\tinput.trigger( \"focusin\" );\n\n\t\t// Must manually remove handler to avoid leaks in our data store\n\t\tinput.remove();\n\n\t\t// Be sure it was removed; nothing should happen\n\t\tinput.trigger( \"focusin\" );\n\n\t\t// Remove body handler manually since it's outside the fixture\n\t\tjQuery( \"body\" ).off( \"focusin.iframeTest\" );\n\t}\n);\n\ntestIframe(\n\t\"jQuery.ready promise\",\n\t\"event/promiseReady.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( isOk, \"$.when( $.ready ) works\" );\n\t},\n\tjQuery.when ? QUnit.test : QUnit.skip\n);\n\n// need PHP here to make the incepted IFRAME hang\nif ( hasPHP ) {\n\ttestIframe(\n\t\t\"jQuery.ready uses interactive\",\n\t\t\"event/interactiveReady.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( isOk, \"jQuery fires ready when the DOM can truly be interacted with\" );\n\t\t}\n\t);\n}\n\ntestIframe(\n\t\"Focusing iframe element\",\n\t\"event/focusElem.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( isOk, \"Focused an element in an iframe\" );\n\t}\n);\n\ntestIframe(\n\t\"triggerHandler(onbeforeunload)\",\n\t\"event/triggerunload.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( isOk, \"Triggered onbeforeunload without an error\" );\n\t}\n);\n\n// need PHP here to make the incepted IFRAME hang\nif ( hasPHP ) {\n\ttestIframe(\n\t\t\"jQuery.ready synchronous load with long loading subresources\",\n\t\t\"event/syncReady.html\",\n\t\tfunction( assert, jQuery, window, document, isOk ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( isOk, \"jQuery loaded synchronously fires ready when the DOM can truly be interacted with\" );\n\t\t}\n\t);\n}\n\nQUnit.test( \"change handler should be detached from element\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $fixture = jQuery( \"<input type='text' id='change-ie-leak' />\" ).appendTo( \"body\" ),\n\t\toriginRemoveEvent = jQuery.removeEvent,\n\t\twrapperRemoveEvent =  function( elem, type, handle ) {\n\t\t\tassert.equal( \"change\", type, \"Event handler for 'change' event should be removed\" );\n\t\t\tassert.equal( \"change-ie-leak\", jQuery( elem ).attr( \"id\" ), \"Event handler for 'change' event should be removed from appropriate element\" );\n\t\t\toriginRemoveEvent( elem, type, handle );\n\t\t};\n\n\tjQuery.removeEvent = wrapperRemoveEvent;\n\n\t$fixture.on( \"change\", function() {} );\n\t$fixture.off( \"change\" );\n\n\t$fixture.remove();\n\n\tjQuery.removeEvent = originRemoveEvent;\n} );\n\nQUnit.test( \"trigger click on checkbox, fires change event\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar check = jQuery( \"#check2\" );\n\tvar done = assert.async();\n\n\tcheck.on( \"change\", function() {\n\n\t\t// get it?\n\t\tcheck.off( \"change\" );\n\t\tassert.ok( true, \"Change event fired as a result of triggered click\" );\n\t\tdone();\n\t} ).trigger( \"click\" );\n} );\n\nQUnit.test( \"Namespace preserved when passed an Event (#12739)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar markup = jQuery(\n\t\t\t\"<div id='parent'><div id='child'></div></div>\"\n\t\t),\n\t\ttriggered = 0,\n\t\tfooEvent;\n\n\tmarkup.find( \"div\" )\n\t\t.addBack()\n\t\t.on( \"foo.bar\", function( e ) {\n\t\t\tif ( !e.handled ) {\n\t\t\t\ttriggered++;\n\t\t\t\te.handled = true;\n\t\t\t\tassert.equal( e.namespace, \"bar\", \"namespace is bar\" );\n\t\t\t\tjQuery( e.target ).find( \"div\" ).each( function() {\n\t\t\t\t\tjQuery( this ).triggerHandler( e );\n\t\t\t\t} );\n\t\t\t}\n\t\t} )\n\t\t.on( \"foo.bar2\", function() {\n\t\t\tassert.ok( false, \"foo.bar2 called on trigger \" + triggered + \" id \" + this.id );\n\t\t} );\n\n\tmarkup.trigger( \"foo.bar\" );\n\tmarkup.trigger( jQuery.Event( \"foo.bar\" ) );\n\tfooEvent = jQuery.Event( \"foo\" );\n\tfooEvent.namespace = \"bar\";\n\tmarkup.trigger( fooEvent );\n\tmarkup.remove();\n\n\tassert.equal( triggered, 3, \"foo.bar triggered\" );\n} );\n\nQUnit.test( \"make sure events cloned correctly\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar clone,\n\t\tfixture = jQuery( \"#qunit-fixture\" ),\n\t\tcheckbox = jQuery( \"#check1\" ),\n\t\tp = jQuery( \"#firstp\" );\n\n\tfixture.on( \"click change\", function( event, result ) {\n\t\tassert.ok( result,  event.type + \" on original element is fired\" );\n\n\t} ).on( \"click\", \"#firstp\", function( event, result ) {\n\t\tassert.ok( result, \"Click on original child element though delegation is fired\" );\n\n\t} ).on( \"change\", \"#check1\", function( event, result ) {\n\t\tassert.ok( result, \"Change on original child element though delegation is fired\" );\n\t} );\n\n\tp.on( \"click\", function() {\n\t\tassert.ok( true, \"Click on original child element is fired\" );\n\t} );\n\n\tcheckbox.on( \"change\", function() {\n\t\tassert.ok( true, \"Change on original child element is fired\" );\n\t} );\n\n\tfixture.clone().trigger( \"click\" ).trigger( \"change\" ); // 0 events should be fired\n\n\tclone = fixture.clone( true );\n\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\", true ); // 3 events should fire\n\tclone.find( \"#check1\" ).trigger( \"change\", true ); // 3 events should fire\n\tclone.remove();\n\n\tclone = fixture.clone( true, true );\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\", true ); // 3 events should fire\n\tclone.find( \"#check1\" ).trigger( \"change\", true ); // 3 events should fire\n\n\tfixture.off();\n\tp.off();\n\tcheckbox.off();\n\n\tp.trigger( \"click\" ); // 0 should be fired\n\tcheckbox.trigger( \"change\" ); // 0 should be fired\n\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\", true );  // 3 events should fire\n\tclone.find( \"#check1\" ).trigger( \"change\", true ); // 3 events should fire\n\tclone.remove();\n\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\" );  // 0 should be fired\n\tclone.find( \"#check1\" ).trigger( \"change\" ); // 0 events should fire\n} );\n\nQUnit.test( \"String.prototype.namespace does not cause trigger() to throw (#13360)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar errored = false;\n\n\tString.prototype.namespace = function() {};\n\n\ttry {\n\t\tjQuery( \"<p>\" ).trigger( \"foo.bar\" );\n\t} catch ( e ) {\n\t\terrored = true;\n\t}\n\tassert.equal( errored, false, \"trigger() did not throw exception\" );\n\tdelete String.prototype.namespace;\n} );\n\nQUnit.test( \"Inline event result is returned (#13993)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar result = jQuery( \"<p onclick='return 42'>hello</p>\" ).triggerHandler( \"click\" );\n\n\tassert.equal( result, 42, \"inline handler returned value\" );\n} );\n\nQUnit.test( \".off() removes the expando when there's no more data\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tdiv.on( \"click\", false );\n\tdiv.on( \"custom\", function() {\n\t\tassert.ok( true, \"Custom event triggered\" );\n\t} );\n\tdiv.trigger( \"custom\" );\n\tdiv.off( \"click custom\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.strictEqual(\n\t\t\t\tdiv[ 0 ][ key ], undefined,\n\t\t\t\t\"Expando was not removed when there was no more data\"\n\t\t\t);\n\t\t}\n\t}\n} );\n\nQUnit.test( \"jQuery.Event( src ) does not require a target property\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar event = jQuery.Event( { type: \"offtarget\" } );\n\n\tassert.equal( event.type, \"offtarget\", \"correct type\" );\n\tassert.equal( event.target, undefined, \"no target\" );\n} );\n\nQUnit.test( \"preventDefault() on focusin does not throw exception\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar done = assert.async(),\n\t\tinput = jQuery( \"<input/>\" ).appendTo( \"#form\" );\n\n\tinput.on( \"focusin\", function( event ) {\n\t\tif ( !done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar exceptionCaught;\n\t\ttry {\n\t\t\tevent.preventDefault();\n\t\t} catch ( theException ) {\n\t\t\texceptionCaught = theException;\n\t\t}\n\n\t\tassert.strictEqual( exceptionCaught, undefined,\n\t\t\t\"Preventing default on focusin throws no exception\" );\n\n\t\tdone();\n\t\tdone = null;\n\t} );\n\tinput.trigger( \"focus\" );\n\n\t// DOM focus is unreliable in TestSwarm; set a simulated event workaround timeout\n\tsetTimeout( function() {\n\t\tif ( !done ) {\n\t\t\treturn;\n\t\t}\n\t\tinput[ 0 ].addEventListener( \"click\", function( nativeEvent ) {\n\t\t\tjQuery.event.simulate( \"focusin\", this, jQuery.event.fix( nativeEvent ) );\n\t\t} );\n\t\tinput[ 0 ].click();\n\t}, QUnit.config.testTimeout / 4 || 1000 );\n} );\n\nQUnit.test( \".on('focus', fn) on a text node doesn't throw\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( document.createTextNode( \"text\" ) )\n\t\t.on( \"focus\", function() {} );\n\n\tassert.ok( true, \"No crash\" );\n} );\n\nQUnit.test( \"Donor event interference\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar outer = jQuery(\n\t\t\t\"<div id='donor-outer'>\" +\n\t\t\t\t\"<form id='donor-form'>\" +\n\t\t\t\t\t\"<input id='donor-input' type='checkbox' />\" +\n\t\t\t\t\"</form>\" +\n\t\t\t\"</div>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tinput = jQuery( \"#donor-input\" );\n\n\tinput.on( \"click\", function( event ) {\n\t\tassert.equal( event.type, \"click\", \"click event at input\" );\n\t\tassert.ok( !event.isPropagationStopped(), \"click event at input is still propagating\" );\n\t\tassert.equal( typeof event.originalEvent, \"object\",\n\t\t\t\"click event at input has originalEvent property\" );\n\t} );\n\touter.on( \"click\", function( event ) {\n\t\tassert.equal( event.type, \"click\", \"click event at ancestor\" );\n\t\tassert.ok( !event.isPropagationStopped(), \"click event at ancestor is still propagating\" );\n\t\tassert.equal( typeof event.originalEvent, \"object\",\n\t\t\t\"click event at ancestor has originalEvent property\" );\n\t} );\n\tinput.on( \"change\", function( event ) {\n\t\tassert.equal( event.type, \"change\", \"change event at input\" );\n\t\tassert.equal( typeof event.originalEvent, \"object\",\n\t\t\t\"change event at input has originalEvent property\" );\n\t\tevent.stopPropagation();\n\t} );\n\tinput[ 0 ].click();\n} );\n\nQUnit.test(\n\t\"simulated events shouldn't forward stopPropagation/preventDefault methods\",\n\tfunction( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tvar outer = jQuery(\n\t\t\t\t\"<div id='donor-outer'>\" +\n\t\t\t\t\t\"<form id='donor-form'>\" +\n\t\t\t\t\t\t\"<input id='donor-input' type='checkbox' />\" +\n\t\t\t\t\t\"</form>\" +\n\t\t\t\t\"</div>\"\n\t\t\t).appendTo( \"#qunit-fixture\" ),\n\t\t\tinput = jQuery( \"#donor-input\" ),\n\t\t\tspy = {};\n\n\t\tjQuery( \"#donor-form\" )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tspy.prevent = sinon.stub( event.originalEvent, \"preventDefault\" );\n\t\t\t\tevent.preventDefault();\n\t\t\t} )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tspy.stop = sinon.stub( event.originalEvent, \"stopPropagation\" );\n\t\t\t\tevent.stopPropagation();\n\t\t\t} )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tspy.immediate = sinon.stub( event.originalEvent, \"stopImmediatePropagation\" );\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tassert.ok( false, \"simulated event immediate propagation stopped\" );\n\t\t\t} );\n\t\touter\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tassert.ok( false, \"simulated event propagation stopped\" );\n\t\t\t} );\n\n\t\t// Force a simulated event\n\t\tinput[ 0 ].addEventListener( \"click\", function( nativeEvent ) {\n\t\t\tjQuery.event.simulate( \"simulated\", this, jQuery.event.fix( nativeEvent ) );\n\t\t} );\n\t\tinput[ 0 ].click();\n\n\t\tassert.strictEqual( spy.prevent.called, false, \"Native preventDefault not called\" );\n\t\tassert.strictEqual( spy.stop.called, false, \"Native stopPropagation not called\" );\n\t\tassert.strictEqual( spy.immediate.called, false,\n\t\t\t\"Native stopImmediatePropagation not called\" );\n\t}\n);\n\nQUnit.test( \"originalEvent type of simulated event\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar outer = jQuery(\n\t\t\t\"<div id='donor-outer'>\" +\n\t\t\t\t\"<form id='donor-form'>\" +\n\t\t\t\t\t\"<input id='donor-input' type='text' />\" +\n\t\t\t\t\"</form>\" +\n\t\t\t\"</div>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tinput = jQuery( \"#donor-input\" ),\n\t\tdone = assert.async(),\n\t\tfinish = function() {\n\n\t\t\t// Remove jQuery handlers to ensure removal of capturing handlers on the document\n\t\t\touter.off( \"focusin\" );\n\n\t\t\tdone();\n\t\t};\n\n\touter.on( \"focusin\", function( event ) {\n\t\tassert.equal( event.type, \"focusin\", \"focusin event at ancestor\" );\n\t\tassert.equal( event.originalEvent.type, \"click\",\n\t\t\t\"focus event at ancestor has correct originalEvent type\" );\n\t\tsetTimeout( finish );\n\t} );\n\n\tinput[ 0 ].addEventListener( \"click\", function( nativeEvent ) {\n\t\tjQuery.event.simulate( \"focusin\", this, jQuery.event.fix( nativeEvent ) );\n\t} );\n\tinput[ 0 ].click();\n} );\n\nQUnit.test( \"trigger('click') on radio passes extra params\", function( assert ) {\n\tassert.expect( 1 );\n\tvar $radio = jQuery( \"<input type='radio' />\" ).appendTo( \"#qunit-fixture\" )\n\t\t.on( \"click\", function( e, data ) {\n\t\t\tassert.ok( data, \"Trigger data is passed to radio click handler\" );\n\t\t} );\n\n\t$radio.trigger( \"click\", [ true ] );\n} );\n\n// Support: IE <=9 only\n// https://msdn.microsoft.com/en-us/library/hh801223(v=vs.85).aspx\nQUnit.test( \"VML with special event handlers (trac-7071)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar ns = jQuery( \"<xml:namespace ns='urn:schemas-microsoft-com:vml' prefix='v' />\" ).appendTo( \"head\" );\n\n\tjQuery( \"<v:oval id='oval' style='width:100pt;height:75pt;' fillcolor='red'> </v:oval>\" ).appendTo( \"#form\" );\n\tjQuery( \"#form\" ).on( \"keydown\", function() {\n\t\tassert.ok( true, \"no error was thrown\" );\n\t} );\n\tjQuery( \"#oval\" ).trigger( \"click\" ).trigger( \"keydown\" );\n\tns.remove();\n} );\n\nQUnit.test( \"Check order of focusin/focusout events\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar focus, blur,\n\t\tinput = jQuery( \"#name\" );\n\n\tinput\n\t\t.on( \"focus\", function() {\n\t\t\tfocus = true;\n\t\t} )\n\t\t.on( \"focusin\", function() {\n\t\t\tassert.ok( !focus, \"Focusin event should fire before focus does\" );\n\t\t\tfocus = true;\n\t\t} )\n\t\t.on( \"blur\", function() {\n\t\t\tblur = true;\n\t\t} )\n\t\t.on( \"focusout\", function() {\n\t\t\tassert.ok( !blur, \"Focusout event should fire before blur does\" );\n\t\t\tblur = true;\n\t\t} );\n\n\t// gain focus\n\tinput.trigger( \"focus\" );\n\n\t// then lose it\n\tjQuery( \"#search\" ).trigger( \"focus\" );\n\n\t// cleanup\n\tinput.off();\n\n\t// DOM focus is unreliable in TestSwarm\n\tif ( !focus ) {\n\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t}\n} );\n\nQUnit.test( \"focus-blur order (#12868)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar order,\n\t\t$text = jQuery( \"#text1\" ),\n\t\t$radio = jQuery( \"#radio1\" ),\n\n\t\t// Support: IE <=9 - 11+\n\t\t// focus and blur events are asynchronous; this is the resulting mess.\n\t\t// The browser window must be topmost for this to work properly!!\n\t\tdone = assert.async();\n\n\t$radio[ 0 ].focus();\n\n\tsetTimeout( function() {\n\n\t\t$text\n\t\t\t.on( \"focus\", function() {\n\t\t\t\tassert.equal( order++, 1, \"text focus\" );\n\t\t\t} )\n\t\t\t.on( \"blur\", function() {\n\t\t\t\tassert.equal( order++, 0, \"text blur\" );\n\t\t\t} );\n\t\t$radio\n\t\t\t.on( \"focus\", function() {\n\t\t\t\tassert.equal( order++, 1, \"radio focus\" );\n\t\t\t} )\n\t\t\t.on( \"blur\", function() {\n\t\t\t\tassert.equal( order++, 0, \"radio blur\" );\n\t\t\t} );\n\n\t\t// Enabled input getting focus\n\t\torder = 0;\n\t\tassert.equal( document.activeElement, $radio[ 0 ], \"radio has focus\" );\n\t\t$text.trigger( \"focus\" );\n\t\tsetTimeout( function() {\n\n\t\t\t// DOM focus is unreliable in TestSwarm\n\t\t\tif ( order === 0 ) {\n\t\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\t}\n\n\t\t\tassert.equal( document.activeElement, $text[ 0 ], \"text has focus\" );\n\n\t\t\t// Run handlers without native method on an input\n\t\t\torder = 1;\n\t\t\t$radio.triggerHandler( \"focus\" );\n\n\t\t\t// Clean up\n\t\t\t$text.off();\n\t\t\t$radio.off();\n\t\t\tdone();\n\t\t}, 50 );\n\t}, 50 );\n} );\n\nQUnit.test( \"Event handling works with multiple async focus events (gh-4350)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar remaining = 3,\n\t\tinput = jQuery( \"#name\" ),\n\n\t\t// Support: IE <=9 - 11+\n\t\t// focus and blur events are asynchronous; this is the resulting mess.\n\t\t// The browser window must be topmost for this to work properly!!\n\t\tdone = assert.async();\n\n\tinput\n\t\t.on( \"focus\", function() {\n\t\t\tremaining--;\n\t\t\tassert.ok( true, \"received focus event, expecting \" + remaining + \" more\" );\n\t\t\tif ( remaining > 0 ) {\n\t\t\t\tinput.trigger( \"blur\" );\n\t\t\t} else {\n\t\t\t\tdone();\n\t\t\t}\n\t\t} )\n\t\t.on( \"blur\", function() {\n\t\t\tsetTimeout( function() {\n\t\t\t\tinput.trigger( \"focus\" );\n\t\t\t} );\n\t\t} );\n\n\t// gain focus\n\tinput.trigger( \"focus\" );\n\n\t// DOM focus is unreliable in TestSwarm\n\tsetTimeout( function() {\n\t\tif ( QUnit.isSwarm && remaining === 3 ) {\n\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\tsetTimeout( function() {\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"native-backed events preserve trigger data (gh-1741, gh-4139)\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar parent = supportjQuery(\n\t\t\t\"<div class='parent'><input type='checkbox'><input type='radio'></div>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\ttargets = jQuery( parent[ 0 ].childNodes ),\n\t\tcheckbox = jQuery( targets[ 0 ] ),\n\t\tdata = [ \"arg1\", \"arg2\" ],\n\t\tslice = data.slice,\n\n\t\t// Support: IE <=9 - 11+\n\t\t// focus and blur events are asynchronous; this is the resulting mess.\n\t\t// The browser window must be topmost for this to work properly!!\n\t\tdone = assert.async();\n\n\t// click (gh-4139)\n\tassert.strictEqual( targets[ 0 ].checked, false, \"checkbox unchecked before click\" );\n\tassert.strictEqual( targets[ 1 ].checked, false, \"radio unchecked before click\" );\n\ttargets.add( parent ).on( \"click\", function( event ) {\n\t\tvar type = event.target.type,\n\t\t\tlevel = event.currentTarget === parent[ 0 ] ? \"parent\" : \"\";\n\t\tassert.strictEqual( event.target.checked, true,\n\t\t\ttype + \" toggled before invoking \" + level + \" handler\" );\n\t\tassert.deepEqual( slice.call( arguments, 1 ), data,\n\t\t\ttype + \" \" + level + \" handler received correct data\" );\n\t} );\n\ttargets.trigger( \"click\", data );\n\tassert.strictEqual( targets[ 0 ].checked, true,\n\t\t\"checkbox toggled after click (default action)\" );\n\tassert.strictEqual( targets[ 1 ].checked, true,\n\t\t\"radio toggled after event (default action)\" );\n\n\t// focus (gh-1741)\n\tassert.notEqual( document.activeElement, checkbox[ 0 ],\n\t\t\"element not focused before focus event\" );\n\tcheckbox.on( \"focus blur\", function( event ) {\n\t\tvar type = event.type;\n\t\tassert.deepEqual( slice.call( arguments, 1 ), data,\n\t\t\ttype + \" handler received correct data\" );\n\t} );\n\tcheckbox.trigger( \"focus\", data );\n\tsetTimeout( function() {\n\t\tassert.strictEqual( document.activeElement, checkbox[ 0 ],\n\t\t\t\"element focused after focus event (default action)\" );\n\t\tcheckbox.trigger( \"blur\", data );\n\t\tsetTimeout( function() {\n\t\t\tassert.notEqual( document.activeElement, checkbox[ 0 ],\n\t\t\t\t\"element not focused after blur event (default action)\" );\n\t\t\tdone();\n\t\t}, 50 );\n\t}, 50 );\n} );\n\n// TODO replace with an adaptation of\n// https://github.com/jquery/jquery/pull/1367/files#diff-a215316abbaabdf71857809e8673ea28R2464\n( function() {\n\tsupportjQuery.each(\n\t\t{\n\t\t\tcheckbox: \"<input type='checkbox'>\",\n\t\t\tradio: \"<input type='radio'>\"\n\t\t},\n\t\tmakeTestFor3751\n\t);\n\n\tfunction makeTestFor3751( type, html ) {\n\t\tvar testName = \"native-backed namespaced clicks are handled correctly (gh-3751) - \" + type;\n\t\tQUnit.test( testName, function( assert ) {\n\t\t\tassert.expect( 2 );\n\n\t\t\tvar parent = supportjQuery( \"<div class='parent'>\" + html + \"</div>\" ),\n\t\t\t\ttarget = jQuery( parent[ 0 ].firstChild );\n\n\t\t\tparent.appendTo( \"#qunit-fixture\" );\n\n\t\t\ttarget.add( parent )\n\t\t\t\t.on( \"click.notFired\", function( event ) {\n\t\t\t\t\tassert.ok( false, \"namespaced event should not be received\" +\n\t\t\t\t\t\t\" by wrong-namespace listener at \" + event.currentTarget.nodeName );\n\t\t\t\t} )\n\t\t\t\t.on( \"click.fired\", function( event ) {\n\t\t\t\t\tassert.equal( event.target.checked, true,\n\t\t\t\t\t\t\"toggled before invoking handler at \" + event.currentTarget.nodeName );\n\t\t\t\t} )\n\t\t\t\t.on( \"click\", function( event ) {\n\t\t\t\t\tassert.ok( false, \"namespaced event should not be received\" +\n\t\t\t\t\t\t\" by non-namespaced listener at \" + event.currentTarget.nodeName );\n\t\t\t\t} );\n\n\t\t\ttarget.trigger( \"click.fired\" );\n\t\t} );\n\t}\n} )();\n", "QUnit.module( \"manipulation\", {\n\tafterEach: moduleTeardown\n} );\n\n// Ensure that an extended Array prototype doesn't break jQuery\nArray.prototype.arrayProtoFn = function() {\n};\n\nfunction manipulationBareObj( value ) {\n\treturn value;\n}\n\nfunction manipulationFunctionReturningObj( value ) {\n\treturn function() {\n\t\treturn value;\n\t};\n}\n\n/*\n\t======== local reference =======\n\tmanipulationBareObj and manipulationFunctionReturningObj can be used to test passing functions to setters\n\tSee testVal below for an example\n\n\tbareObj( value );\n\t\tThis function returns whatever value is passed in\n\n\tfunctionReturningObj( value );\n\t\tReturns a function that returns the value\n*/\n\nQUnit.test( \"text()\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar expected, frag, $newLineTest;\n\n\texpected = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for merged text of more then one element.\" );\n\n\t// Check serialization of text values\n\tassert.equal( jQuery( document.createTextNode( \"foo\" ) ).text(), \"foo\", \"Text node was retrieved from .text().\" );\n\tassert.notEqual( jQuery( document ).text(), \"\", \"Retrieving text for the document retrieves all text (#10724).\" );\n\n\t// Retrieve from document fragments #10864\n\tfrag = document.createDocumentFragment();\n\tfrag.appendChild( document.createTextNode( \"foo\" ) );\n\n\tassert.equal( jQuery( frag ).text(), \"foo\", \"Document Fragment Text node was retrieved from .text().\" );\n\n\t$newLineTest = jQuery( \"<div>test<br/>testy</div>\" ).appendTo( \"#moretests\" );\n\t$newLineTest.find( \"br\" ).replaceWith( \"\\n\" );\n\tassert.equal( $newLineTest.text(), \"test\\ntesty\", \"text() does not remove new lines (#11153)\" );\n\n\t$newLineTest.remove();\n} );\n\nQUnit.test( \"text(undefined)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery( \"#foo\" ).text( \"<div\" ).text( undefined )[ 0 ].innerHTML, \"&lt;div\", \".text(undefined) is chainable (#5571)\" );\n} );\n\nfunction testText( valueObj, assert ) {\n\n\tassert.expect( 6 );\n\n\tvar val, j, expected, $multipleElements, $parentDiv, $childDiv;\n\n\tval = valueObj( \"<div><b>Hello</b> cruel world!</div>\" );\n\tassert.equal( jQuery( \"#foo\" ).text( val )[ 0 ].innerHTML.replace( />/g, \"&gt;\" ), \"&lt;div&gt;&lt;b&gt;Hello&lt;/b&gt; cruel world!&lt;/div&gt;\", \"Check escaped text\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.text( valueObj( \"hi!\" ) );\n\tassert.equal( jQuery( j[ 0 ] ).text(), \"hi!\", \"Check node,textnode,comment with text()\" );\n\tassert.equal( j[ 1 ].nodeValue, \" there \", \"Check node,textnode,comment with text()\" );\n\n\tassert.equal( j[ 2 ].nodeType, 8, \"Check node,textnode,comment with text()\" );\n\n\t// Update multiple elements #11809\n\texpected = \"New\";\n\n\t$multipleElements = jQuery( \"<div>Hello</div>\" ).add( \"<div>World</div>\" );\n\t$multipleElements.text( expected );\n\n\tassert.equal( $multipleElements.eq( 0 ).text(), expected, \"text() updates multiple elements (#11809)\" );\n\tassert.equal( $multipleElements.eq( 1 ).text(), expected, \"text() updates multiple elements (#11809)\" );\n\n\t// Prevent memory leaks #11809\n\t$childDiv = jQuery( \"<div/>\" );\n\t$childDiv.data( \"leak\", true );\n\t$parentDiv = jQuery( \"<div/>\" );\n\t$parentDiv.append( $childDiv );\n\t$parentDiv.text( \"Dry off\" );\n}\n\nQUnit.test( \"text(String)\", function( assert ) {\n\ttestText( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"text(Function)\", function( assert ) {\n\ttestText( manipulationFunctionReturningObj, assert );\n} );\n\nQUnit.test( \"text(Function) with incoming value\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\n\tjQuery( \"#sap\" ).text( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"foobar\";\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), \"foobar\", \"Check for merged text of more then one element.\" );\n} );\n\nfunction testAppendForObject( valueObj, isFragment, assert ) {\n\tvar $base,\n\t\ttype = isFragment ? \" (DocumentFragment)\" : \" (Element)\",\n\t\ttext = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\",\n\t\tel = document.getElementById( \"sap\" ).cloneNode( true ),\n\t\tfirst = document.getElementById( \"first\" ),\n\t\tyahoo = document.getElementById( \"yahoo\" );\n\n\tif ( isFragment ) {\n\t\t$base = document.createDocumentFragment();\n\t\tjQuery( el ).contents().each( function() {\n\t\t\t$base.appendChild( this );\n\t\t} );\n\t\t$base = jQuery( $base );\n\t} else {\n\t\t$base = jQuery( el );\n\t}\n\n\tassert.equal( $base.clone().append( valueObj( first.cloneNode( true ) ) ).text(),\n\t\ttext + \"Try them out:\",\n\t\t\"Check for appending of element\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( [ first.cloneNode( true ), yahoo.cloneNode( true ) ] ) ).text(),\n\t\ttext + \"Try them out:Yahoo\",\n\t\t\"Check for appending of array of elements\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( jQuery( \"#yahoo, #first\" ).clone() ) ).text(),\n\t\ttext + \"YahooTry them out:\",\n\t\t\"Check for appending of jQuery object\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( 5 ) ).text(),\n\t\ttext + \"5\",\n\t\t\"Check for appending a number\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( [ jQuery( \"#first\" ).clone(), jQuery( \"#yahoo, #google\" ).clone() ] ) ).text(),\n\t\ttext + \"Try them out:GoogleYahoo\",\n\t\t\"Check for appending of array of jQuery objects\"\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( \" text with spaces \" ) ).text(),\n\t\ttext + \" text with spaces \",\n\t\t\"Check for appending text with spaces\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( [] ) ).text(),\n\t\ttext,\n\t\t\"Check for appending an empty array\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( \"\" ) ).text(),\n\t\ttext,\n\t\t\"Check for appending an empty string\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( document.getElementsByTagName( \"foo\" ) ) ).text(),\n\t\ttext,\n\t\t\"Check for appending an empty nodelist\" + type\n\t);\n\n\tassert.equal( $base.clone().append( \"<span></span>\", \"<span></span>\", \"<span></span>\" ).children().length,\n\t\t$base.children().length + 3,\n\t\t\"Make sure that multiple arguments works.\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( document.getElementById( \"form\" ).cloneNode( true ) ) ).children( \"form\" ).length,\n\t\t1,\n\t\t\"Check for appending a form (#910)\" + type\n\t);\n}\n\nfunction testAppend( valueObj, assert ) {\n\n\tassert.expect( 78 );\n\n\ttestAppendForObject( valueObj, false, assert );\n\ttestAppendForObject( valueObj, true, assert );\n\n\tvar defaultText, result, message, iframe, iframeDoc, j, d,\n\t\t$input, $radioChecked, $radioUnchecked, $radioParent, $map, $table;\n\n\tdefaultText = \"Try them out:\";\n\tresult = jQuery( \"#first\" ).append( valueObj( \"<b>buga</b>\" ) );\n\n\tassert.equal( result.text(), defaultText + \"buga\", \"Check if text appending works\" );\n\tassert.equal( jQuery( \"#select3\" ).append( valueObj( \"<option value='appendTest'>Append Test</option>\" ) ).find( \"option:last-child\" ).attr( \"value\" ), \"appendTest\", \"Appending html options to select element\" );\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input name='radiotest' type='radio' checked='checked' />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append checked radio\" );\n\t} ).remove();\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input name='radiotest2' type='radio' checked    =   'checked' />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest2]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append alternately formated checked radio\" );\n\t} ).remove();\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input name='radiotest3' type='radio' checked />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest3]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append HTML5-formated checked radio\" );\n\t} ).remove();\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input type='radio' checked='checked' name='radiotest4' />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest4]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append with name attribute after checked attribute\" );\n\t} ).remove();\n\n\tmessage = \"Test for appending a DOM node to the contents of an iframe\";\n\tiframe = jQuery( \"#iframe\" )[ 0 ];\n\tiframeDoc = iframe.contentDocument || iframe.contentWindow && iframe.contentWindow.document;\n\n\ttry {\n\t\tif ( iframeDoc && iframeDoc.body ) {\n\t\t\tassert.equal( jQuery( iframeDoc.body ).append( valueObj( \"<div id='success'>test</div>\" ) )[ 0 ].lastChild.id, \"success\", message );\n\t\t} else {\n\t\t\tassert.ok( true, message + \" - can't test\" );\n\t\t}\n\t} catch ( e ) {\n\t\tassert.strictEqual( e.message || e, undefined, message );\n\t}\n\n\tjQuery( \"<fieldset/>\" ).appendTo( \"#form\" ).append( valueObj( \"<legend id='legend'>test</legend>\" ) );\n\tassert.t( \"Append legend\", \"#legend\", [ \"legend\" ] );\n\n\t$map = jQuery( \"<map/>\" ).append( valueObj( \"<area id='map01' shape='rect' coords='50,50,150,150' href='http://www.jquery.com/' alt='jQuery'>\" ) );\n\n\tassert.equal( $map[ 0 ].childNodes.length, 1, \"The area was inserted.\" );\n\tassert.equal( $map[ 0 ].firstChild.nodeName.toLowerCase(), \"area\", \"The area was inserted.\" );\n\n\tjQuery( \"#select1\" ).append( valueObj( \"<OPTION>Test</OPTION>\" ) );\n\tassert.equal( jQuery( \"#select1 option:last-child\" ).text(), \"Test\", \"Appending OPTION (all caps)\" );\n\n\tjQuery( \"#select1\" ).append( valueObj( \"<optgroup label='optgroup'><option>optgroup</option></optgroup>\" ) );\n\tassert.equal( jQuery( \"#select1 optgroup\" ).attr( \"label\" ), \"optgroup\", \"Label attribute in newly inserted optgroup is correct\" );\n\tassert.equal( jQuery( \"#select1 option\" ).last().text(), \"optgroup\", \"Appending optgroup\" );\n\n\t$table = jQuery( \"#table\" );\n\n\tjQuery.each( \"thead tbody tfoot colgroup caption tr th td\".split( \" \" ), function( i, name ) {\n\t\t$table.append( valueObj( \"<\" + name + \"/>\" ) );\n\t\tassert.equal( $table.find( name ).length, 1, \"Append \" + name );\n\t\tassert.ok( jQuery.parseHTML( \"<\" + name + \"/>\" ).length, name + \" wrapped correctly\" );\n\t} );\n\n\tjQuery( \"#table colgroup\" ).append( valueObj( \"<col/>\" ) );\n\tassert.equal( jQuery( \"#table colgroup col\" ).length, 1, \"Append col\" );\n\n\tjQuery( \"#form\" )\n\t\t.append( valueObj( \"<select id='appendSelect1'></select>\" ) )\n\t\t.append( valueObj( \"<select id='appendSelect2'><option>Test</option></select>\" ) );\n\tassert.t( \"Append Select\", \"#appendSelect1, #appendSelect2\", [ \"appendSelect1\", \"appendSelect2\" ] );\n\n\tassert.equal( \"Two nodes\", jQuery( \"<div />\" ).append( \"Two\", \" nodes\" ).text(), \"Appending two text nodes (#4011)\" );\n\tassert.equal( jQuery( \"<div />\" ).append( \"1\", \"\", 3 ).text(), \"13\", \"If median is false-like value, subsequent arguments should not be ignored\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\td = jQuery( \"<div/>\" ).appendTo( \"#nonnodes\" ).append( j );\n\n\tassert.equal( jQuery( \"#nonnodes\" ).length, 1, \"Check node,textnode,comment append moved leaving just the div\" );\n\tassert.equal( d.contents().length, 3, \"Check node,textnode,comment append works\" );\n\td.contents().appendTo( \"#nonnodes\" );\n\td.remove();\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().length, 3, \"Check node,textnode,comment append cleanup worked\" );\n\n\t$input = jQuery( \"<input type='checkbox'/>\" ).prop( \"checked\", true ).appendTo( \"#testForm\" );\n\tassert.equal( $input[ 0 ].checked, true, \"A checked checkbox that is appended stays checked\" );\n\n\t$radioChecked = jQuery( \"input[type='radio'][name='R1']\" ).eq( 1 );\n\t$radioParent = $radioChecked.parent();\n\t$radioUnchecked = jQuery( \"<input type='radio' name='R1' checked='checked'/>\" ).appendTo( $radioParent );\n\t$radioChecked.trigger( \"click\" );\n\t$radioUnchecked[ 0 ].checked = false;\n\n\tjQuery( \"<div/>\" ).insertBefore( $radioParent ).append( $radioParent );\n\n\tassert.equal( $radioChecked[ 0 ].checked, true, \"Reappending radios uphold which radio is checked\" );\n\tassert.equal( $radioUnchecked[ 0 ].checked, false, \"Reappending radios uphold not being checked\" );\n\n\tassert.equal( jQuery( \"<div/>\" ).append( valueObj( \"option<area/>\" ) )[ 0 ].childNodes.length, 2, \"HTML-string with leading text should be processed correctly\" );\n}\n\nQUnit.test( \"append(String|Element|Array<Element>|jQuery)\", function( assert ) {\n\ttestAppend( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"append(Function)\", function( assert ) {\n\ttestAppend( manipulationFunctionReturningObj, assert );\n} );\n\nQUnit.test( \"append(param) to object, see #11280\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar object = jQuery( document.createElement( \"object\" ) ).appendTo( document.body );\n\n\tassert.equal( object.children().length, 0, \"object does not start with children\" );\n\n\tobject.append( jQuery( \"<param type='wmode' name='foo'>\" ) );\n\tassert.equal( object.children().length, 1, \"appended param\" );\n\tassert.equal( object.children().eq( 0 ).attr( \"name\" ), \"foo\", \"param has name=foo\" );\n\n\tobject = jQuery( \"<object><param type='baz' name='bar'></object>\" );\n\tassert.equal( object.children().length, 1, \"object created with child param\" );\n\tassert.equal( object.children().eq( 0 ).attr( \"name\" ), \"bar\", \"param has name=bar\" );\n} );\n\nQUnit.test( \"append(Function) returns String\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar defaultText, result, select, old;\n\n\tdefaultText = \"Try them out:\";\n\told = jQuery( \"#first\" ).html();\n\n\tresult = jQuery( \"#first\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>buga</b>\";\n\t} );\n\tassert.equal( result.text(), defaultText + \"buga\", \"Check if text appending works\" );\n\n\tselect = jQuery( \"#select3\" );\n\told = select.html();\n\n\tassert.equal( select.append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<option value='appendTest'>Append Test</option>\";\n\t} ).find( \"option:last-child\" ).attr( \"value\" ), \"appendTest\", \"Appending html options to select element\" );\n} );\n\nQUnit.test( \"append(Function) returns Element\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\",\n\t\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn document.getElementById( \"first\" );\n\t} );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of element\" );\n} );\n\nQUnit.test( \"append(Function) returns Array<Element>\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:Yahoo\",\n\t\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ];\n\t} );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of array of elements\" );\n} );\n\nQUnit.test( \"append(Function) returns jQuery\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogYahooTry them out:\",\n\t\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn jQuery( \"#yahoo, #first\" );\n\t} );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of jQuery object\" );\n} );\n\nQUnit.test( \"append(Function) returns Number\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar old = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn 5;\n\t} );\n\tassert.ok( jQuery( \"#sap\" )[ 0 ].innerHTML.match( /5$/ ), \"Check for appending a number\" );\n} );\n\nQUnit.test( \"XML DOM manipulation (#9960)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar xmlDoc1 = jQuery.parseXML( \"<scxml xmlns='http://www.w3.org/2005/07/scxml' version='1.0'><state x='100' y='100' initial='actions' id='provisioning'></state><state x='100' y='100' id='error'></state><state x='100' y='100' id='finished' final='true'></state></scxml>\" ),\n\t\txmlDoc2 = jQuery.parseXML( \"<scxml xmlns='http://www.w3.org/2005/07/scxml' version='1.0'><state id='provisioning3'></state></scxml>\" ),\n\t\txml1 = jQuery( xmlDoc1 ),\n\t\txml2 = jQuery( xmlDoc2 ),\n\t\tscxml1 = jQuery( \"scxml\", xml1 ),\n\t\tscxml2 = jQuery( \"scxml\", xml2 ),\n\t\tstate = scxml2.find( \"state\" );\n\n\tscxml1.append( state );\n\tassert.strictEqual( scxml1[ 0 ].lastChild, state[ 0 ], \"append\" );\n\n\tscxml1.prepend( state );\n\tassert.strictEqual( scxml1[ 0 ].firstChild, state[ 0 ], \"prepend\" );\n\n\tscxml1.find( \"#finished\" ).after( state );\n\tassert.strictEqual( scxml1[ 0 ].lastChild, state[ 0 ], \"after\" );\n\n\tscxml1.find( \"#provisioning\" ).before( state );\n\tassert.strictEqual( scxml1[ 0 ].firstChild, state[ 0 ], \"before\" );\n\n\tscxml2.replaceWith( scxml1 );\n\tassert.deepEqual( jQuery( \"state\", xml2 ).get(), scxml1.find( \"state\" ).get(), \"replaceWith\" );\n} );\n\nQUnit.test( \"append HTML5 sectioning elements (Bug #6485)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar article, aside;\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<article style='font-size:10px'><section><aside>HTML5 elements</aside></section></article>\" );\n\n\tarticle = jQuery( \"article\" );\n\taside = jQuery( \"aside\" );\n\n\tassert.equal( article.get( 0 ).style.fontSize, \"10px\", \"HTML5 elements are styleable\" );\n\tassert.equal( aside.length, 1, \"HTML5 elements do not collapse their children\" );\n} );\n\nif ( jQuery.css ) {\n\tQUnit.test( \"HTML5 Elements inherit styles from style rules (Bug #10501)\", function( assert ) {\n\n\t\tassert.expect( 1 );\n\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<article id='article'></article>\" );\n\t\tjQuery( \"#article\" ).append( \"<section>This section should have a pink background.</section>\" );\n\n\t\t// In IE, the missing background color will claim its value is \"transparent\"\n\t\tassert.notEqual( jQuery( \"section\" ).css( \"background-color\" ), \"transparent\", \"HTML5 elements inherit styles\" );\n\t} );\n}\n\nQUnit.test( \"html(String) with HTML5 (Bug #6485)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tjQuery( \"#qunit-fixture\" ).html( \"<article><section><aside>HTML5 elements</aside></section></article>\" );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).children().children().length, 1, \"Make sure HTML5 article elements can hold children. innerHTML shortcut path\" );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).children().children().children().length, 1, \"Make sure nested HTML5 elements can hold children.\" );\n} );\n\nQUnit.test( \"html(String) tag-hyphenated elements (Bug #1987)\", function( assert ) {\n\n\tassert.expect( 27 );\n\n\tjQuery.each( \"thead tbody tfoot colgroup caption tr th td\".split( \" \" ), function( i, name ) {\n\t\tvar j = jQuery( \"<\" + name + \"-d></\" + name + \"-d><\" + name + \"-d></\" + name + \"-d>\" );\n\t\tassert.ok( j[ 0 ], \"Create a tag-hyphenated element\" );\n\t\tassert.ok( j[ 0 ].nodeName === name.toUpperCase() + \"-D\", \"Hyphenated node name\" );\n\t\tassert.ok( j[ 1 ].nodeName === name.toUpperCase() + \"-D\", \"Hyphenated node name\" );\n\t} );\n\n\tvar j = jQuery( \"<tr-multiple-hyphens><td-with-hyphen>text</td-with-hyphen></tr-multiple-hyphens>\" );\n\tassert.ok( j[ 0 ].nodeName === \"TR-MULTIPLE-HYPHENS\", \"Tags with multiple hyphens\" );\n\tassert.ok( j.children()[ 0 ].nodeName === \"TD-WITH-HYPHEN\", \"Tags with multiple hyphens\" );\n\tassert.equal( j.children().text(), \"text\", \"Tags with multiple hyphens behave normally\" );\n} );\n\nQUnit.test( \"Tag name processing respects the HTML Standard (gh-2005)\", function( assert ) {\n\n\tassert.expect( 240 );\n\n\tvar wrapper = jQuery( \"<div></div>\" ),\n\t\tnameTerminatingChars = \"\\x20\\t\\r\\n\\f\".split( \"\" ),\n\t\tspecialChars = \"[ ] { } _ - = + \\\\ ( ) * & ^ % $ # @ ! ~ ` ' ; ? \u00a5 \u00ab \u00b5 \u03bb \u2295 \u2248 \u03be \u211c \u2663 \u20ac\"\n\t\t\t.split( \" \" );\n\n\tspecialChars.push( specialChars.join( \"\" ) );\n\n\tjQuery.each( specialChars, function( i, characters ) {\n\t\tassertSpecialCharsSupport( \"html\", characters );\n\t\tassertSpecialCharsSupport( \"append\", characters );\n\t} );\n\n\tjQuery.each( nameTerminatingChars, function( i, character ) {\n\t\tassertNameTerminatingCharsHandling( \"html\", character );\n\t\tassertNameTerminatingCharsHandling( \"append\", character );\n\t} );\n\n\tfunction buildChild( method, html ) {\n\t\twrapper[ method ]( html );\n\t\treturn wrapper.children()[ 0 ];\n\t}\n\n\tfunction assertSpecialCharsSupport( method, characters ) {\n\t\t// Support: Android 4.4 only\n\t\t// Chromium < 35 incorrectly upper-cases \u00b5; Android 4.4 uses such a version by default\n\t\t// (and its WebView, being un-updatable, will use it for eternity) so we need to blacklist\n\t\t// that one for the tests to pass.\n\t\tif ( characters === \"\u00b5\" && /chrome/i.test( navigator.userAgent ) &&\n\t\t\tnavigator.userAgent.match( /chrome\\/(\\d+)/i )[ 1 ] < 35 ) {\n\t\t\tassert.ok( true, \"This Chromium version upper-cases \u00b5 incorrectly; skip test\" );\n\t\t\tassert.ok( true, \"This Chromium version upper-cases \u00b5 incorrectly; skip test\" );\n\t\t\tassert.ok( true, \"This Chromium version upper-cases \u00b5 incorrectly; skip test\" );\n\t\t\treturn;\n\t\t}\n\n\t\tvar child,\n\t\t\tcodepoint = characters.charCodeAt( 0 ).toString( 16 ).toUpperCase(),\n\t\t\tdescription = characters.length === 1 ?\n\t\t\t\t\"U+\" + ( \"000\" + codepoint ).slice( -4 ) + \" \" + characters :\n\t\t\t\t\"all special characters\",\n\t\t\tnodeName = \"valid\" + characters + \"tagname\";\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"></\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), nodeName.toUpperCase(),\n\t\t\tmethod + \"(): Paired tag name includes \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), nodeName.toUpperCase(),\n\t\t\tmethod + \"(): Unpaired tag name includes \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"/>\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), nodeName.toUpperCase(),\n\t\t\tmethod + \"(): Self-closing tag name includes \" + description );\n\t}\n\n\tfunction assertNameTerminatingCharsHandling( method, character ) {\n\t\tvar child,\n\t\t\tcodepoint = character.charCodeAt( 0 ).toString( 16 ).toUpperCase(),\n\t\t\tdescription = \"U+\" + ( \"000\" + codepoint ).slice( -4 ) + \" \" + character,\n\t\t\tnodeName = \"div\" + character + \"this-will-be-discarded\";\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"></\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), \"DIV\",\n\t\t\tmethod + \"(): Paired tag name terminated by \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), \"DIV\",\n\t\t\tmethod + \"(): Unpaired open tag name terminated by \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"/>\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), \"DIV\",\n\t\t\tmethod + \"(): Self-closing tag name terminated by \" + description );\n\t}\n} );\n\nQUnit.test( \"IE8 serialization bug\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar wrapper = jQuery( \"<div></div>\" );\n\n\twrapper.html( \"<div></div><article></article>\" );\n\tassert.equal( wrapper.children( \"article\" ).length, 1, \"HTML5 elements are insertable with .html()\" );\n\n\twrapper.html( \"<div></div><link></link>\" );\n\tassert.equal( wrapper.children( \"link\" ).length, 1, \"Link elements are insertable with .html()\" );\n} );\n\nQUnit.test( \"html() object element #10324\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar object = jQuery( \"<object id='object2'><param name='object2test' value='test'></param></object>?\" ).appendTo( \"#qunit-fixture\" ),\n\t\tclone = object.clone();\n\n\tassert.equal( clone.html(), object.html(), \"html() returns correct innerhtml of cloned object elements\" );\n} );\n\nQUnit.test( \"append(xml)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar xmlDoc, xml1, xml2;\n\n\tfunction createXMLDoc() {\n\n\t\t// Initialize DOM based upon latest installed MSXML or Netscape\n\t\tvar elem, n, len,\n\t\t\taActiveX =\n\t\t\t\t[ \"MSXML6.DomDocument\",\n\t\t\t\t\"MSXML3.DomDocument\",\n\t\t\t\t\"MSXML2.DomDocument\",\n\t\t\t\t\"MSXML.DomDocument\",\n\t\t\t\t\"Microsoft.XmlDom\" ];\n\n\t\tif ( document.implementation && \"createDocument\" in document.implementation ) {\n\t\t\treturn document.implementation.createDocument( \"\", \"\", null );\n\t\t} else {\n\n\t\t\t// IE\n\t\t\tfor ( n = 0, len = aActiveX.length; n < len; n++ ) {\n\t\t\t\ttry {\n\t\t\t\t\telem = new window.ActiveXObject( aActiveX[ n ] );\n\t\t\t\t\treturn elem;\n\t\t\t\t} catch ( _ ) {}\n\t\t\t}\n\t\t}\n\t}\n\n\txmlDoc = createXMLDoc();\n\txml1 = xmlDoc.createElement( \"head\" );\n\txml2 = xmlDoc.createElement( \"test\" );\n\n\tassert.ok( jQuery( xml1 ).append( xml2 ), \"Append an xml element to another without raising an exception.\" );\n\n} );\n\nQUnit.test( \"appendTo(String)\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar l, defaultText;\n\n\tdefaultText = \"Try them out:\";\n\tjQuery( \"<b>buga</b>\" ).appendTo( \"#first\" );\n\tassert.equal( jQuery( \"#first\" ).text(), defaultText + \"buga\", \"Check if text appending works\" );\n\tassert.equal( jQuery( \"<option value='appendTest'>Append Test</option>\" ).appendTo( \"#select3\" ).parent().find( \"option:last-child\" ).attr( \"value\" ), \"appendTest\", \"Appending html options to select element\" );\n\n\tl = jQuery( \"#first\" ).children().length + 2;\n\tjQuery( \"<strong>test</strong>\" );\n\tjQuery( \"<strong>test</strong>\" );\n\tjQuery( [ jQuery( \"<strong>test</strong>\" )[ 0 ], jQuery( \"<strong>test</strong>\" )[ 0 ] ] )\n\t\t.appendTo( \"#first\" );\n\tassert.equal( jQuery( \"#first\" ).children().length, l, \"Make sure the elements were inserted.\" );\n\tassert.equal( jQuery( \"#first\" ).children().last()[ 0 ].nodeName.toLowerCase(), \"strong\", \"Verify the last element.\" );\n} );\n\nQUnit.test( \"appendTo(Element|Array<Element>)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\";\n\tjQuery( document.getElementById( \"first\" ) ).appendTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of element\" );\n\n\texpected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:Yahoo\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ] ).appendTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of array of elements\" );\n\n} );\n\nQUnit.test( \"appendTo(jQuery)\", function( assert ) {\n\n\tassert.expect( 10 );\n\n\tvar expected, num, div;\n\tassert.ok( jQuery( document.createElement( \"script\" ) ).appendTo( \"body\" ).length, \"Make sure a disconnected script can be appended.\" );\n\n\texpected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogYahooTry them out:\";\n\tjQuery( \"#yahoo, #first\" ).appendTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of jQuery object\" );\n\n\tjQuery( \"#select1\" ).appendTo( \"#foo\" );\n\tassert.t( \"Append select\", \"#foo select\", [ \"select1\" ] );\n\n\tdiv = jQuery( \"<div/>\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Running a cloned click.\" );\n\t} );\n\tdiv.appendTo( \"#qunit-fixture, #moretests\" );\n\n\tjQuery( \"#qunit-fixture div\" ).last().trigger( \"click\" );\n\tjQuery( \"#moretests div\" ).last().trigger( \"click\" );\n\n\tdiv = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture, #moretests\" );\n\n\tassert.equal( div.length, 2, \"appendTo returns the inserted elements\" );\n\n\tdiv.addClass( \"test\" );\n\n\tassert.ok( jQuery( \"#qunit-fixture div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );\n\tassert.ok( jQuery( \"#moretests div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );\n\n\tdiv = jQuery( \"<div/>\" );\n\tjQuery( \"<span>a</span><b>b</b>\" ).filter( \"span\" ).appendTo( div );\n\n\tassert.equal( div.children().length, 1, \"Make sure the right number of children were inserted.\" );\n\n\tdiv = jQuery( \"#moretests div\" );\n\n\tnum = jQuery( \"#qunit-fixture div\" ).length;\n\tdiv.remove().appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( jQuery( \"#qunit-fixture div\" ).length, num, \"Make sure all the removed divs were inserted.\" );\n} );\n\nQUnit.test( \"prepend(String)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar result, expected;\n\texpected = \"Try them out:\";\n\tresult = jQuery( \"#first\" ).prepend( \"<b>buga</b>\" );\n\tassert.equal( result.text(), \"buga\" + expected, \"Check if text prepending works\" );\n\tassert.equal( jQuery( \"#select3\" ).prepend( \"<option value='prependTest'>Prepend Test</option>\"  ).find( \"option:first-child\" ).attr( \"value\" ), \"prependTest\", \"Prepending html options to select element\" );\n} );\n\nQUnit.test( \"prepend(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( document.getElementById( \"first\" ) );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of element\" );\n} );\n\nQUnit.test( \"prepend(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ] );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of elements\" );\n} );\n\nQUnit.test( \"prepend(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( jQuery( \"#yahoo, #first\" ) );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of jQuery object\" );\n} );\n\nQUnit.test( \"prepend(Array<jQuery>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"Try them out:GoogleYahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( [ jQuery( \"#first\" ), jQuery( \"#yahoo, #google\" ) ] );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of jQuery objects\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- String\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar defaultText, old, result;\n\n\tdefaultText = \"Try them out:\";\n\told = jQuery( \"#first\" ).html();\n\tresult = jQuery( \"#first\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>buga</b>\";\n\t} );\n\n\tassert.equal( result.text(), \"buga\" + defaultText, \"Check if text prepending works\" );\n\n\told = jQuery( \"#select3\" ).html();\n\n\tassert.equal( jQuery( \"#select3\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<option value='prependTest'>Prepend Test</option>\";\n\t} ).find( \"option:first-child\" ).attr( \"value\" ), \"prependTest\", \"Prepending html options to select element\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- Element\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old, expected;\n\texpected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn document.getElementById( \"first\" );\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of element\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- Array<Element>\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old, expected;\n\texpected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ];\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of elements\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- jQuery\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old, expected;\n\texpected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn jQuery( \"#yahoo, #first\" );\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of jQuery object\" );\n} );\n\nQUnit.test( \"prependTo(String)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar defaultText;\n\n\tdefaultText = \"Try them out:\";\n\tjQuery( \"<b>buga</b>\" ).prependTo( \"#first\" );\n\tassert.equal( jQuery( \"#first\" ).text(), \"buga\" + defaultText, \"Check if text prepending works\" );\n\tassert.equal( jQuery( \"<option value='prependTest'>Prepend Test</option>\" ).prependTo( \"#select3\" ).parent().find( \"option:first-child\" ).attr( \"value\" ), \"prependTest\", \"Prepending html options to select element\" );\n\n} );\n\nQUnit.test( \"prependTo(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( document.getElementById( \"first\" ) ).prependTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of element\" );\n} );\n\nQUnit.test( \"prependTo(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ] ).prependTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of elements\" );\n} );\n\nQUnit.test( \"prependTo(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#yahoo, #first\" ).prependTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of jQuery object\" );\n} );\n\nQUnit.test( \"prependTo(Array<jQuery>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tjQuery( \"<select id='prependSelect1'></select>\" ).prependTo( \"#form\" );\n\tjQuery( \"<select id='prependSelect2'><option>Test</option></select>\" ).prependTo( \"#form\" );\n\n\tassert.t( \"Prepend Select\", \"#prependSelect2, #prependSelect1\", [ \"prependSelect2\", \"prependSelect1\" ] );\n} );\n\nQUnit.test( \"before(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: bugaYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( \"<b>buga</b>\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String before\" );\n} );\n\nQUnit.test( \"before(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( document.getElementById( \"first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element before\" );\n} );\n\nQUnit.test( \"before(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements before\" );\n} );\n\nQUnit.test( \"before(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( jQuery( \"#mark, #first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery before\" );\n} );\n\nQUnit.test( \"before(Array<jQuery>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:GooglediveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns String\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: bugaYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( \"<b>buga</b>\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns Element\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( document.getElementById( \"first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns Array<Element>\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns jQuery\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( jQuery( \"#mark, #first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns Array<jQuery>\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:GooglediveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects before\" );\n} );\n\nQUnit.test( \"before(no-op)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar set;\n\tset = jQuery( \"<div/>\" ).before( \"<span>test</span>\" );\n\tassert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert before a disconnected node should be a no-op\" );\n\tassert.equal( set.length, 1, \"Insert the element before the disconnected node. should be a no-op\" );\n} );\n\nQUnit.test( \"before and after w/ empty object (#10812)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar res;\n\n\tres = jQuery( \"#notInTheDocument\" ).before( \"(\" ).after( \")\" );\n\tassert.equal( res.length, 0, \"didn't choke on empty object\" );\n} );\n\nQUnit.test( \".before() and .after() disconnected node\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery( \"<input type='checkbox'/>\" ).before( \"<div/>\" ).length, 1, \"before() on disconnected node is no-op\" );\n\tassert.equal( jQuery( \"<input type='checkbox'/>\" ).after( \"<div/>\" ).length, 1, \"after() on disconnected node is no-op\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedBefore = \"This is a normal link: bugaYahoo\";\n\n\tjQuery( \"#yahoo\" ).add( \"<span/>\" ).before( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node last\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node first\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedBefore = \"This is a normal link: bugaYahoo\";\n\n\tjQuery( \"<span/>\" ).add( \"#yahoo\" ).before( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node first\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedAfter = \"This is a normal link: Yahoobuga\";\n\n\tjQuery( \"#yahoo\" ).add( \"<span/>\" ).after( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node last\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedAfter = \"This is a normal link: Yahoobuga\";\n\n\tjQuery( \"<span/>\" ).add( \"#yahoo\" ).after( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node first\" );\n} );\n\nQUnit.test( \"insertBefore(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: bugaYahoo\";\n\tjQuery( \"<b>buga</b>\" ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String before\" );\n} );\n\nQUnit.test( \"insertBefore(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Try them out:Yahoo\";\n\tjQuery( document.getElementById( \"first\" ) ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element before\" );\n} );\n\nQUnit.test( \"insertBefore(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements before\" );\n} );\n\nQUnit.test( \"insertBefore(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n\tjQuery( \"#mark, #first\" ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery before\" );\n} );\n\nQUnit.test( \".after(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Yahoobuga\";\n\tjQuery( \"#yahoo\" ).after( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String after\" );\n} );\n\nQUnit.test( \".after(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:\";\n\tjQuery( \"#yahoo\" ).after( document.getElementById( \"first\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element after\" );\n} );\n\nQUnit.test( \".after(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:diveintomark\";\n\tjQuery( \"#yahoo\" ).after( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements after\" );\n} );\n\nQUnit.test( \".after(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:Googlediveintomark\";\n\tjQuery( \"#yahoo\" ).after( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects after\" );\n} );\n\nQUnit.test( \".after(Function) returns String\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Yahoobuga\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( \"<b>buga</b>\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String after\" );\n} );\n\nQUnit.test( \".after(Function) returns Element\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( document.getElementById( \"first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element after\" );\n} );\n\nQUnit.test( \".after(Function) returns Array<Element>\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:diveintomark\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements after\" );\n} );\n\nQUnit.test( \".after(Function) returns jQuery\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:Googlediveintomark\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects after\" );\n} );\n\nQUnit.test( \".after(disconnected node)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar set = jQuery( \"<div/>\" ).before( \"<span>test</span>\" );\n\tassert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert after a disconnected node should be a no-op\" );\n\tassert.equal( set.length, 1, \"Insert the element after the disconnected node should be a no-op\" );\n} );\n\nQUnit.test( \"insertAfter(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Yahoobuga\";\n\tjQuery( \"<b>buga</b>\" ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String after\" );\n} );\n\nQUnit.test( \"insertAfter(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:\";\n\tjQuery( document.getElementById( \"first\" ) ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element after\" );\n} );\n\nQUnit.test( \"insertAfter(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:diveintomark\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements after\" );\n} );\n\nQUnit.test( \"insertAfter(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahoodiveintomarkTry them out:\";\n\tjQuery( \"#mark, #first\" ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery after\" );\n} );\n\nfunction testReplaceWith( val, assert ) {\n\n\tvar tmp, y, child, child2, set, nonExistent, $div,\n\t\texpected = 29;\n\n\tassert.expect( expected );\n\n\tjQuery( \"#yahoo\" ).replaceWith( val( \"<b id='replace'>buga</b>\" ) );\n\tassert.ok( jQuery( \"#replace\" )[ 0 ], \"Replace element with element from string\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after string\" );\n\n\tjQuery( \"#anchor2\" ).replaceWith( val( document.getElementById( \"first\" ) ) );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with element\" );\n\tassert.ok( !jQuery( \"#anchor2\" )[ 0 ], \"Verify that original element is gone, after element\" );\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<div id='bar'><div id='baz'></div></div>\" );\n\tjQuery( \"#baz\" ).replaceWith( val( \"Baz\" ) );\n\tassert.equal( jQuery( \"#bar\" ).text(), \"Baz\", \"Replace element with text\" );\n\tassert.ok( !jQuery( \"#baz\" )[ 0 ], \"Verify that original element is gone, after element\" );\n\n\tjQuery( \"#bar\" ).replaceWith( \"<div id='yahoo'></div>\", \"...\", \"<div id='baz'></div>\" );\n\tassert.deepEqual( jQuery( \"#yahoo, #baz\" ).get(), q( \"yahoo\", \"baz\" ),  \"Replace element with multiple arguments (#13722)\" );\n\tassert.strictEqual( jQuery( \"#yahoo\" )[ 0 ].nextSibling, jQuery( \"#baz\" )[ 0 ].previousSibling, \"Argument order preserved\" );\n\tassert.deepEqual( jQuery( \"#bar\" ).get(), [], \"Verify that original element is gone, after multiple arguments\" );\n\n\tjQuery( \"#google\" ).replaceWith( val( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.deepEqual( jQuery( \"#mark, #first\" ).get(), q( \"first\", \"mark\" ),  \"Replace element with array of elements\" );\n\tassert.ok( !jQuery( \"#google\" )[ 0 ], \"Verify that original element is gone, after array of elements\" );\n\n\tjQuery( \"#groups\" ).replaceWith( val( jQuery( \"#mark, #first\" ) ) );\n\tassert.deepEqual( jQuery( \"#mark, #first\" ).get(), q( \"first\", \"mark\" ),  \"Replace element with jQuery collection\" );\n\tassert.ok( !jQuery( \"#groups\" )[ 0 ], \"Verify that original element is gone, after jQuery collection\" );\n\n\tjQuery( \"#mark, #first\" ).replaceWith( val( \"<span class='replacement'></span><span class='replacement'></span>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture .replacement\" ).length, 4, \"Replace multiple elements (#12449)\" );\n\tassert.deepEqual( jQuery( \"#mark, #first\" ).get(), [], \"Verify that original elements are gone, after replace multiple\" );\n\n\ttmp = jQuery( \"<b>content</b>\" )[ 0 ];\n\tjQuery( \"#anchor1\" ).contents().replaceWith( val( tmp ) );\n\tassert.deepEqual( jQuery( \"#anchor1\" ).contents().get(), [ tmp ], \"Replace text node with element\" );\n\n\ttmp = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Newly bound click run.\" );\n\t} );\n\ty = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {\n\t\tassert.ok( false, \"Previously bound click run.\" );\n\t} );\n\tchild = y.append( \"<b>test</b>\" ).find( \"b\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Child bound click run.\" );\n\t\treturn false;\n\t} );\n\n\ty.replaceWith( val( tmp ) );\n\n\ttmp.trigger( \"click\" );\n\ty.trigger( \"click\" ); // Shouldn't be run\n\tchild.trigger( \"click\" ); // Shouldn't be run\n\n\ty = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {\n\t\tassert.ok( false, \"Previously bound click run.\" );\n\t} );\n\tchild2 = y.append( \"<u>test</u>\" ).find( \"u\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Child 2 bound click run.\" );\n\t\treturn false;\n\t} );\n\n\ty.replaceWith( val( child2 ) );\n\n\tchild2.trigger( \"click\" );\n\n\tset = jQuery( \"<div/>\" ).replaceWith( val( \"<span>test</span>\" ) );\n\tassert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"No effect on a disconnected node.\" );\n\tassert.equal( set.length, 1, \"No effect on a disconnected node.\" );\n\tassert.equal( set[ 0 ].childNodes.length, 0, \"No effect on a disconnected node.\" );\n\n\tchild = jQuery( \"#qunit-fixture\" ).children().first();\n\t$div = jQuery( \"<div class='pathological'/>\" ).insertBefore( child );\n\t$div.replaceWith( $div );\n\tassert.deepEqual( jQuery( \".pathological\", \"#qunit-fixture\" ).get(), $div.get(),\n\t\t\"Self-replacement\" );\n\t$div.replaceWith( child );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).children().first().get(), child.get(),\n\t\t\"Replacement with following sibling (#13810)\" );\n\tassert.deepEqual( jQuery( \".pathological\", \"#qunit-fixture\" ).get(), [],\n\t\t\"Replacement with following sibling (context removed)\" );\n\n\tnonExistent = jQuery( \"#does-not-exist\" ).replaceWith( val( \"<b>should not throw an error</b>\" ) );\n\tassert.equal( nonExistent.length, 0, \"Length of non existent element.\" );\n\n\t$div = jQuery( \"<div class='replacewith'></div>\" ).appendTo( \"#qunit-fixture\" );\n\t$div.replaceWith( val( \"<div class='replacewith'></div><script>\" +\n\t\t\"QUnit.assert.equal( jQuery('.replacewith').length, 1, 'Check number of elements in page.' );\" +\n\t\t\"</script>\" ) );\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<div id='replaceWith'></div>\" );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).find( \"div[id=replaceWith]\" ).length, 1, \"Make sure only one div exists.\" );\n\tjQuery( \"#replaceWith\" ).replaceWith( val( \"<div id='replaceWith'></div>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).find( \"div[id=replaceWith]\" ).length, 1, \"Make sure only one div exists after replacement.\" );\n\tjQuery( \"#replaceWith\" ).replaceWith( val( \"<div id='replaceWith'></div>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).find( \"div[id=replaceWith]\" ).length, 1, \"Make sure only one div exists after subsequent replacement.\" );\n\n\treturn expected;\n}\n\nQUnit.test( \"replaceWith(String|Element|Array<Element>|jQuery)\", function( assert ) {\n\ttestReplaceWith( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"replaceWith(Function)\", function( assert ) {\n\tassert.expect( testReplaceWith( manipulationFunctionReturningObj, assert ) + 1 );\n\n\tvar y = jQuery( \"#foo\" )[ 0 ];\n\n\tjQuery( y ).replaceWith( function() {\n\t\tassert.equal( this, y, \"Make sure the context is coming in correctly.\" );\n\t} );\n} );\n\nQUnit.test( \"replaceWith(string) for more than one element\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery( \"#foo p\" ).length, 3, \"ensuring that test data has not changed\" );\n\n\tjQuery( \"#foo p\" ).replaceWith( \"<span>bar</span>\" );\n\tassert.equal( jQuery( \"#foo span\" ).length, 3, \"verify that all the three original element have been replaced\" );\n\tassert.equal( jQuery( \"#foo p\" ).length, 0, \"verify that all the three original element have been replaced\" );\n} );\n\nQUnit.test( \"Empty replaceWith (trac-13401; trac-13596; gh-2204)\", function( assert ) {\n\n\tassert.expect( 25 );\n\n\tvar $el = jQuery( \"<div/><div/>\" ).html( \"<p>0</p>\" ),\n\t\texpectedHTML = $el.html(),\n\t\ttests = {\n\t\t\t\"empty string\": \"\",\n\t\t\t\"empty array\": [],\n\t\t\t\"array of empty string\": [ \"\" ],\n\t\t\t\"empty collection\": jQuery( \"#nonexistent\" ),\n\n\t\t\t// in case of jQuery(...).replaceWith();\n\t\t\t\"undefined\": undefined\n\t\t};\n\n\tjQuery.each( tests, function( label, input ) {\n\t\t$el.html( \"<a/>\" ).children().replaceWith( input );\n\t\tassert.strictEqual( $el.html(), \"\", \"replaceWith(\" + label + \")\" );\n\t\t$el.html( \"<b/>\" ).children().replaceWith( function() { return input; } );\n\t\tassert.strictEqual( $el.html(), \"\", \"replaceWith(function returning \" + label + \")\" );\n\t\t$el.html( \"<i/>\" ).children().replaceWith( function( i ) { return input; } );\n\t\tassert.strictEqual( $el.html(), \"\", \"replaceWith(other function returning \" + label + \")\" );\n\t\t$el.html( \"<p/>\" ).children().replaceWith( function( i ) {\n\t\t\treturn i ?\n\t\t\t\tinput :\n\t\t\t\tjQuery( this ).html( i + \"\" );\n\t\t} );\n\t\tassert.strictEqual( $el.eq( 0 ).html(), expectedHTML,\n\t\t\t\"replaceWith(function conditionally returning context)\" );\n\t\tassert.strictEqual( $el.eq( 1 ).html(), \"\",\n\t\t\t\"replaceWith(function conditionally returning \" + label + \")\" );\n\t} );\n} );\n\nQUnit.test( \"replaceAll(String)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tjQuery( \"<b id='replace'>buga</b>\" ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#replace\" )[ 0 ], \"Replace element with string\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after string\" );\n} );\n\nQUnit.test( \"replaceAll(Element)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tjQuery( document.getElementById( \"first\" ) ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with element\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after element\" );\n} );\n\nQUnit.test( \"replaceAll(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with array of elements\" );\n\tassert.ok( jQuery( \"#mark\" )[ 0 ], \"Replace element with array of elements\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after array of elements\" );\n} );\n\nQUnit.test( \"replaceAll(jQuery)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tjQuery( \"#mark, #first\" ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with set of elements\" );\n\tassert.ok( jQuery( \"#mark\" )[ 0 ], \"Replace element with set of elements\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after set of elements\" );\n} );\n\nQUnit.test( \"jQuery.clone() (#8017)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tassert.ok( jQuery.clone && typeof jQuery.clone === \"function\", \"jQuery.clone() utility exists and is a function.\" );\n\n\tvar main = jQuery( \"#qunit-fixture\" )[ 0 ],\n\t\tclone = jQuery.clone( main );\n\n\tassert.equal( main.childNodes.length, clone.childNodes.length, \"Simple child length to ensure a large dom tree copies correctly\" );\n} );\n\nQUnit.test( \"append to multiple elements (#8070)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar selects = jQuery( \"<select class='test8070'></select><select class='test8070'></select>\" ).appendTo( \"#qunit-fixture\" );\n\tselects.append( \"<OPTION>1</OPTION><OPTION>2</OPTION>\" );\n\n\tassert.equal( selects[ 0 ].childNodes.length, 2, \"First select got two nodes\" );\n\tassert.equal( selects[ 1 ].childNodes.length, 2, \"Second select got two nodes\" );\n} );\n\nQUnit.test( \"table manipulation\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar table = jQuery( \"<table style='font-size:16px'></table>\" ).appendTo( \"#qunit-fixture\" ).empty(),\n\t\theight = table[ 0 ].offsetHeight;\n\n\ttable.append( \"<tr><td>DATA</td></tr>\" );\n\tassert.ok( table[ 0 ].offsetHeight - height >= 15, \"appended rows are visible\" );\n\n\ttable.empty();\n\theight = table[ 0 ].offsetHeight;\n\ttable.prepend( \"<tr><td>DATA</td></tr>\" );\n\tassert.ok( table[ 0 ].offsetHeight - height >= 15, \"prepended rows are visible\" );\n} );\n\nQUnit.test( \"clone()\", function( assert ) {\n\n\tassert.expect( 45 );\n\n\tvar div, clone, form, body;\n\n\tassert.equal( jQuery( \"#en\" ).text(), \"This is a normal link: Yahoo\", \"Assert text for #en\" );\n\tassert.equal( jQuery( \"#first\" ).append( jQuery( \"#yahoo\" ).clone() ).text(), \"Try them out:Yahoo\", \"Check for clone\" );\n\tassert.equal( jQuery( \"#en\" ).text(), \"This is a normal link: Yahoo\", \"Reassert text for #en\" );\n\n\tjQuery.each( \"table thead tbody tfoot tr td div button ul ol li select option textarea iframe\".split( \" \" ), function( i, nodeName ) {\n\t\tassert.equal( jQuery( \"<\" + nodeName + \"/>\" ).clone()[ 0 ].nodeName.toLowerCase(), nodeName, \"Clone a \" + nodeName );\n\t} );\n\tassert.equal( jQuery( \"<input type='checkbox' />\" ).clone()[ 0 ].nodeName.toLowerCase(), \"input\", \"Clone a <input type='checkbox' />\" );\n\n\t// Check cloning non-elements\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().clone().length, 3, \"Check node,textnode,comment clone works (some browsers delete comments on clone)\" );\n\n\t// Verify that clones of clones can keep event listeners\n\tdiv = jQuery( \"<div><ul><li>test</li></ul></div>\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Bound event still exists.\" );\n\t} );\n\tclone = div.clone( true ); div.remove();\n\tdiv = clone.clone( true ); clone.remove();\n\n\tassert.equal( div.length, 1, \"One element cloned\" );\n\tassert.equal( div[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\tdiv.trigger( \"click\" );\n\n\t// Manually clean up detached elements\n\tdiv.remove();\n\n\t// Verify that cloned children can keep event listeners\n\tdiv = jQuery( \"<div/>\" ).append( [ document.createElement( \"table\" ), document.createElement( \"table\" ) ] );\n\tdiv.find( \"table\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Bound event still exists.\" );\n\t} );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\tclone.find( \"table\" ).trigger( \"click\" );\n\n\t// Manually clean up detached elements\n\tdiv.remove();\n\tclone.remove();\n\n\t// Make sure that doing .clone() doesn't clone event listeners\n\tdiv = jQuery( \"<div><ul><li>test</li></ul></div>\" ).on( \"click\", function() {\n\t\tassert.ok( false, \"Bound event still exists after .clone().\" );\n\t} );\n\tclone = div.clone();\n\n\tclone.trigger( \"click\" );\n\n\t// Manually clean up detached elements\n\tclone.remove();\n\tdiv.remove();\n\n\t// Test both html() and clone() for <embed> and <object> types\n\tdiv = jQuery( \"<div/>\" ).html( \"<embed height='355' width='425' src='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\" );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone.html(), div.html(), \"Element contents cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\n\t// this is technically an invalid object, but because of the special\n\t// classid instantiation it is the only kind that IE has trouble with,\n\t// so let's test with it too.\n\tdiv = jQuery( \"<div/>\" ).html( \"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\tdiv = div.find( \"object\" );\n\tclone = clone.find( \"object\" );\n\n\t// oldIE adds extra attributes and <param> elements, so just test for existence of the defined set\n\tjQuery.each( [ \"height\", \"width\", \"classid\" ], function( i, attr ) {\n\t\tassert.equal( clone.attr( attr ), div.attr( attr ), \"<object> attribute cloned: \" + attr );\n\t} );\n\t( function() {\n\t\tvar params = {};\n\n\t\tclone.find( \"param\" ).each( function( index, param ) {\n\t\t\tparams[ param.attributes.name.nodeValue.toLowerCase() ] =\n\t\t\t\tparam.attributes.value.nodeValue.toLowerCase();\n\t\t} );\n\n\t\tdiv.find( \"param\" ).each( function( index, param ) {\n\t\t\tvar key = param.attributes.name.nodeValue.toLowerCase();\n\t\t\tassert.equal( params[ key ], param.attributes.value.nodeValue.toLowerCase(), \"<param> cloned: \" + key );\n\t\t} );\n\t} )();\n\n\t// and here's a valid one.\n\tdiv = jQuery( \"<div/>\" ).html( \"<object height='355' width='425' type='application/x-shockwave-flash' data='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone.html(), div.html(), \"Element contents cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\n\tdiv = jQuery( \"<div/>\" ).data( { \"a\": true } );\n\tclone = div.clone( true );\n\tassert.equal( clone.data( \"a\" ), true, \"Data cloned.\" );\n\tclone.data( \"a\", false );\n\tassert.equal( clone.data( \"a\" ), false, \"Ensure cloned element data object was correctly modified\" );\n\tassert.equal( div.data( \"a\" ), true, \"Ensure cloned element data object is copied, not referenced\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n\tclone.remove();\n\n\tform = document.createElement( \"form\" );\n\tform.action = \"/test/\";\n\n\tdiv = document.createElement( \"div\" );\n\tdiv.appendChild( document.createTextNode( \"test\" ) );\n\tform.appendChild( div );\n\n\tassert.equal( jQuery( form ).clone().children().length, 1, \"Make sure we just get the form back.\" );\n\n\tbody = jQuery( \"body\" ).clone();\n\tassert.equal( body.children()[ 0 ].id, \"qunit\", \"Make sure cloning body works\" );\n\tbody.remove();\n} );\n\nQUnit.test( \"clone(script type=non-javascript) (#11359)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tvar src = jQuery( \"<script type='text/filler'>Lorem ipsum dolor sit amet</script><q><script type='text/filler'>consectetur adipiscing elit</script></q>\" ),\n\t\tdest = src.clone();\n\n\tassert.equal( dest[ 0 ].text, \"Lorem ipsum dolor sit amet\", \"Cloning preserves script text\" );\n\tassert.equal( dest.last().html(), src.last().html(), \"Cloning preserves nested script text\" );\n\tassert.ok( /^\\s*<scr.pt\\s+type=['\"]?text\\/filler['\"]?\\s*>consectetur adipiscing elit<\\/scr.pt>\\s*$/i.test( dest.last().html() ), \"Cloning preserves nested script text\" );\n\tdest.remove();\n} );\n\nQUnit.test( \"clone(form element) (Bug #3879, #6655)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar clone, element;\n\n\telement = jQuery( \"<select><option>Foo</option><option value='selected' selected>Bar</option></select>\" );\n\n\tassert.equal( element.clone().find( \"option\" ).filter( function() { return this.selected; } ).val(), \"selected\", \"Selected option cloned correctly\" );\n\n\telement = jQuery( \"<input type='checkbox' value='foo'>\" ).attr( \"checked\", \"checked\" );\n\tclone = element.clone();\n\n\tassert.equal( clone.is( \":checked\" ), element.is( \":checked\" ), \"Checked input cloned correctly\" );\n\tassert.equal( clone[ 0 ].defaultValue, \"foo\", \"Checked input defaultValue cloned correctly\" );\n\n\telement = jQuery( \"<input type='text' value='foo'>\" );\n\tclone = element.clone();\n\tassert.equal( clone[ 0 ].defaultValue, \"foo\", \"Text input defaultValue cloned correctly\" );\n\n\telement = jQuery( \"<textarea>foo</textarea>\" );\n\tclone = element.clone();\n\tassert.equal( clone[ 0 ].defaultValue, \"foo\", \"Textarea defaultValue cloned correctly\" );\n} );\n\nQUnit.test( \"clone(multiple selected options) (Bug #8129)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar element = jQuery( \"<select><option>Foo</option><option selected>Bar</option><option selected>Baz</option></select>\" );\n\n\tfunction getSelectedOptions( collection ) {\n\t\treturn collection.find( \"option\" ).filter( function( option ) {\n\t\t\treturn option.selected;\n\t\t} );\n\t}\n\n\tassert.equal(\n\t\tgetSelectedOptions( element.clone() ).length,\n\t\tgetSelectedOptions( element ).length,\n\t\t\"Multiple selected options cloned correctly\"\n\t);\n} );\n\nQUnit.test( \"clone() on XML nodes\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar xml = createDashboardXML(),\n\t\troot = jQuery( xml.documentElement ).clone(),\n\t\torigTab = jQuery( \"tab\", xml ).eq( 0 ),\n\t\tcloneTab = jQuery( \"tab\", root ).eq( 0 );\n\n\torigTab.text( \"origval\" );\n\tcloneTab.text( \"cloneval\" );\n\tassert.equal( origTab.text(), \"origval\", \"Check original XML node was correctly set\" );\n\tassert.equal( cloneTab.text(), \"cloneval\", \"Check cloned XML node was correctly set\" );\n} );\n\nQUnit.test( \"clone() on local XML nodes with html5 nodename\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $xmlDoc = jQuery( jQuery.parseXML( \"<root><meter /></root>\" ) ),\n\t\t$meter = $xmlDoc.find( \"meter\" ).clone();\n\n\tassert.equal( $meter[ 0 ].nodeName, \"meter\", \"Check if nodeName was not changed due to cloning\" );\n\tassert.equal( $meter[ 0 ].nodeType, 1, \"Check if nodeType is not changed due to cloning\" );\n} );\n\nQUnit.test( \"html(undefined)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery( \"#foo\" ).html( \"<i>test</i>\" ).html( undefined ).html().toLowerCase(), \"<i>test</i>\", \".html(undefined) is chainable (#5571)\" );\n} );\n\nQUnit.test( \"html() on empty set\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tassert.strictEqual( jQuery().html(), undefined, \".html() returns undefined for empty sets (#11962)\" );\n} );\n\nfunction childNodeNames( node ) {\n\treturn jQuery.map( node.childNodes, function( child ) {\n\t\treturn child.nodeName.toUpperCase();\n\t} ).join( \" \" );\n}\n\nfunction testHtml( valueObj, assert ) {\n\tassert.expect( 40 );\n\n\tvar actual, expected, tmp,\n\t\tdiv = jQuery( \"<div></div>\" ),\n\t\tfixture = jQuery( \"#qunit-fixture\" );\n\n\tdiv.html( valueObj( \"<div id='parent_1'><div id='child_1'/></div><div id='parent_2'/>\" ) );\n\tassert.equal( div.children().length, 2, \"Found children\" );\n\tassert.equal( div.children().children().length, 1, \"Found grandchild\" );\n\n\tactual = []; expected = [];\n\ttmp = jQuery( \"<map/>\" ).html( valueObj( \"<area alt='area'/>\" ) ).each( function() {\n\t\texpected.push( \"AREA\" );\n\t\tactual.push( childNodeNames( this ) );\n\t} );\n\tassert.equal( expected.length, 1, \"Expecting one parent\" );\n\tassert.deepEqual( actual, expected, \"Found the inserted area element\" );\n\n\tassert.equal( div.html( valueObj( 5 ) ).html(), \"5\", \"Setting a number as html\" );\n\tassert.equal( div.html( valueObj( 0 ) ).html(), \"0\", \"Setting a zero as html\" );\n\tassert.equal( div.html( valueObj( Infinity ) ).html(), \"Infinity\", \"Setting Infinity as html\" );\n\tassert.equal( div.html( valueObj( NaN ) ).html(), \"\", \"Setting NaN as html\" );\n\tassert.equal( div.html( valueObj( 1e2 ) ).html(), \"100\", \"Setting exponential number notation as html\" );\n\n\tdiv.html( valueObj( \"&#160;&amp;\" ) );\n\tassert.equal(\n\t\tdiv[ 0 ].innerHTML.replace( /\\xA0/, \"&nbsp;\" ),\n\t\t\"&nbsp;&amp;\",\n\t\t\"Entities are passed through correctly\"\n\t);\n\n\ttmp = \"&lt;div&gt;hello1&lt;/div&gt;\";\n\tassert.equal( div.html( valueObj( tmp ) ).html().replace( />/g, \"&gt;\" ), tmp, \"Escaped html\" );\n\ttmp = \"x\" + tmp;\n\tassert.equal( div.html( valueObj( tmp ) ).html().replace( />/g, \"&gt;\" ), tmp, \"Escaped html, leading x\" );\n\ttmp = \" \" + tmp.slice( 1 );\n\tassert.equal( div.html( valueObj( tmp ) ).html().replace( />/g, \"&gt;\" ), tmp, \"Escaped html, leading space\" );\n\n\tactual = []; expected = []; tmp = {};\n\tjQuery( \"#nonnodes\" ).contents().html( valueObj( \"<b>bold</b>\" ) ).each( function() {\n\t\tvar html = jQuery( this ).html();\n\t\ttmp[ this.nodeType ] = true;\n\t\texpected.push( this.nodeType === 1 ? \"<b>bold</b>\" : undefined );\n\t\tactual.push( html ? html.toLowerCase() : html );\n\t} );\n\tassert.deepEqual( actual, expected, \"Set containing element, text node, comment\" );\n\tassert.ok( tmp[ 1 ], \"element\" );\n\tassert.ok( tmp[ 3 ], \"text node\" );\n\tassert.ok( tmp[ 8 ], \"comment\" );\n\n\tactual = []; expected = [];\n\tfixture.children( \"div\" ).html( valueObj( \"<b>test</b>\" ) ).each( function() {\n\t\texpected.push( \"B\" );\n\t\tactual.push( childNodeNames( this ) );\n\t} );\n\tassert.equal( expected.length, 7, \"Expecting many parents\" );\n\tassert.deepEqual( actual, expected, \"Correct childNodes after setting HTML\" );\n\n\tactual = []; expected = [];\n\tfixture.html( valueObj( \"<style>.foobar{color:green;}</style>\" ) ).each( function() {\n\t\texpected.push( \"STYLE\" );\n\t\tactual.push( childNodeNames( this ) );\n\t} );\n\tassert.equal( expected.length, 1, \"Expecting one parent\" );\n\tassert.deepEqual( actual, expected, \"Found the inserted style element\" );\n\n\tfixture.html( valueObj( \"<select/>\" ) );\n\tjQuery( \"#qunit-fixture select\" ).html( valueObj( \"<option>O1</option><option selected='selected'>O2</option><option>O3</option>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture select\" ).val(), \"O2\", \"Selected option correct\" );\n\n\ttmp = fixture.html(\n\t\tvalueObj( [\n\t\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: non-script' );</script>\",\n\t\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: text/javascript' );</script>\",\n\t\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: text/ecmascript' );</script>\",\n\t\t\t\"<script>QUnit.assert.ok( true, 'evaluated: no type' );</script>\",\n\t\t\t\"<div>\",\n\t\t\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: inner non-script' );</script>\",\n\t\t\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: inner text/javascript' );</script>\",\n\t\t\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: inner text/ecmascript' );</script>\",\n\t\t\t\t\"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\",\n\t\t\t\"</div>\"\n\t\t].join( \"\" ) )\n\t).find( \"script\" );\n\tassert.equal( tmp.length, 8, \"All script tags remain.\" );\n\tassert.equal( tmp[ 0 ].type, \"something/else\", \"Non-evaluated type.\" );\n\tassert.equal( tmp[ 1 ].type, \"text/javascript\", \"Evaluated type.\" );\n\n\tfixture.html( valueObj( \"<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>\" ) );\n\tfixture.html( valueObj( \"<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>\" ) );\n\tfixture.html( valueObj( \"<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>\" ) );\n\tfixture.html( valueObj( \"foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (#975)' );</script></form>\" ) );\n\n\tjQuery.scriptorder = 0;\n\tfixture.html( valueObj( [\n\t\t\"<script>\",\n\t\t\t\"QUnit.assert.equal( jQuery('#scriptorder').length, 1,'Execute after html' );\",\n\t\t\t\"QUnit.assert.equal( jQuery.scriptorder++, 0, 'Script is executed in order' );\",\n\t\t\"</script>\",\n\t\t\"<span id='scriptorder'><script>QUnit.assert.equal( jQuery.scriptorder++, 1, 'Script (nested) is executed in order');</script></span>\",\n\t\t\"<script>QUnit.assert.equal( jQuery.scriptorder++, 2, 'Script (unnested) is executed in order' );</script>\"\n\t].join( \"\" ) ) );\n\n\tfixture.html( valueObj( fixture.text() ) );\n\tassert.ok( /^[^<]*[^<\\s][^<]*$/.test( fixture.html() ), \"Replace html with text\" );\n}\n\nQUnit.test( \"html(String|Number)\", function( assert ) {\n\ttestHtml( manipulationBareObj, assert  );\n} );\n\nQUnit.test( \"html(Function)\", function( assert ) {\n\ttestHtml( manipulationFunctionReturningObj, assert  );\n} );\n\nQUnit[\n\t// Support: Edge 16-18+\n\t// Edge sometimes doesn't execute module scripts so skip the test there.\n\t( QUnit.moduleTypeSupported && !/edge\\//i.test( navigator.userAgent ) ) ?\n\t\t\"test\" :\n\t\t\"skip\"\n]( \"html(script type module)\", function( assert ) {\n\tassert.expect( 4 );\n\tvar done = assert.async(),\n\t\t$fixture = jQuery( \"#qunit-fixture\" );\n\n\t$fixture.html(\n\t\t[\n\t\t\t\"<script type='module'>QUnit.assert.ok( true, 'evaluated: module' );</script>\",\n\t\t\t\"<script type='module' src='\" + url( \"module.js\" ) + \"'></script>\",\n\t\t\t\"<div>\",\n\t\t\t\t\"<script type='module'>QUnit.assert.ok( true, 'evaluated: inner module' );</script>\",\n\t\t\t\t\"<script type='module' src='\" + url( \"inner_module.js\" ) + \"'></script>\",\n\t\t\t\"</div>\"\n\t\t].join( \"\" )\n\t);\n\n\t// Allow asynchronous script execution to generate assertions\n\tsetTimeout( function() {\n\t\tdone();\n\t}, 1000 );\n} );\n\nQUnit[\n\t// Support: IE 9-11 only, Android 4.0-4.4 only, iOS 7-10 only\n\t// `nomodule` scripts should be executed by legacy browsers only.\n\t// iOS 10 supports `<script type=\"module\">` but doesn't support the nomodule attribute\n\t// so let's skip it here; sites supporting it must handle `nomodule` in a custom way anyway.\n\t!/iphone os 10_/i.test( navigator.userAgent ) ?\n\t\t\"test\" :\n\t\t\"skip\"\n]( \"html(script nomodule)\", function( assert ) {\n\tassert.expect( QUnit.moduleTypeSupported ? 0 : 4 );\n\tvar done = assert.async(),\n\t\t$fixture = jQuery( \"#qunit-fixture\" );\n\n\t$fixture.html(\n\t\t[\n\t\t\t\"<script nomodule>QUnit.assert.ok( !QUnit.moduleTypeSupported, 'evaluated: nomodule script' );</script>\",\n\t\t\t\"<script nomodule src='\" + url( \"nomodule.js\" ) + \"'></script>\",\n\t\t\t\"<div>\",\n\t\t\t\t\"<script nomodule>QUnit.assert.ok( !QUnit.moduleTypeSupported, 'evaluated: inner nomodule script' );</script>\",\n\t\t\t\t\"<script nomodule src='\" + url( \"inner_nomodule.js\" ) + \"'></script>\",\n\t\t\t\"</div>\"\n\t\t].join( \"\" )\n\t);\n\n\t// Allow asynchronous script execution to generate assertions\n\tsetTimeout( function() {\n\t\tdone();\n\t}, 1000 );\n} );\n\nQUnit.test( \"html(Function) with incoming value -- direct selection\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar els, actualhtml, pass;\n\n\tels = jQuery( \"#foo > p\" );\n\tactualhtml = els.map( function() {\n\t\treturn jQuery( this ).html();\n\t} );\n\n\tels.html( function( i, val ) {\n\t\tassert.equal( val, actualhtml[ i ], \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>test</b>\";\n\t} );\n\n\tpass = true;\n\tels.each( function() {\n\t\tif ( this.childNodes.length !== 1 ) {\n\t\t\tpass = false;\n\t\t}\n\t} );\n\tassert.ok( pass, \"Set HTML\" );\n} );\n\nQUnit.test( \"html(Function) with incoming value -- jQuery.contents()\", function( assert ) {\n\n\tassert.expect( 14 );\n\n\tvar actualhtml, j, $div, $div2, insert;\n\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tactualhtml = j.map( function() {\n\t\treturn jQuery( this ).html();\n\t} );\n\n\tj.html( function( i, val ) {\n\t\tassert.equal( val, actualhtml[ i ], \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>bold</b>\";\n\t} );\n\n\t// Handle the case where no comment is in the document\n\tif ( j.length === 2 ) {\n\t\tassert.equal( null, null, \"Make sure the incoming value is correct.\" );\n\t}\n\n\tassert.equal( j.html().replace( / xmlns=\"[^\"]+\"/g, \"\" ).toLowerCase(), \"<b>bold</b>\", \"Check node,textnode,comment with html()\" );\n\n\t$div = jQuery( \"<div />\" );\n\n\tassert.equal( $div.html( function( i, val ) {\n\t\tassert.equal( val, \"\", \"Make sure the incoming value is correct.\" );\n\t\treturn 5;\n\t} ).html(), \"5\", \"Setting a number as html\" );\n\n\tassert.equal( $div.html( function( i, val ) {\n\t\tassert.equal( val, \"5\", \"Make sure the incoming value is correct.\" );\n\t\treturn 0;\n\t} ).html(), \"0\", \"Setting a zero as html\" );\n\n\t$div2 = jQuery( \"<div/>\" );\n\tinsert = \"&lt;div&gt;hello1&lt;/div&gt;\";\n\tassert.equal( $div2.html( function( i, val ) {\n\t\tassert.equal( val, \"\", \"Make sure the incoming value is correct.\" );\n\t\treturn insert;\n\t} ).html().replace( />/g, \"&gt;\" ), insert, \"Verify escaped insertion.\" );\n\n\tassert.equal( $div2.html( function( i, val ) {\n\t\tassert.equal( val.replace( />/g, \"&gt;\" ), insert, \"Make sure the incoming value is correct.\" );\n\t\treturn \"x\" + insert;\n\t} ).html().replace( />/g, \"&gt;\" ), \"x\" + insert, \"Verify escaped insertion.\" );\n\n\tassert.equal( $div2.html( function( i, val ) {\n\t\tassert.equal( val.replace( />/g, \"&gt;\" ), \"x\" + insert, \"Make sure the incoming value is correct.\" );\n\t\treturn \" \" + insert;\n\t} ).html().replace( />/g, \"&gt;\" ), \" \" + insert, \"Verify escaped insertion.\" );\n} );\n\nQUnit.test( \"clone()/html() don't expose jQuery/Sizzle expandos (#12858)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $content = jQuery( \"<div><b><i>text</i></b></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\texpected = /^<b><i>text<\\/i><\\/b>$/i;\n\n\t// Attach jQuery and Sizzle data (the latter with a non-qSA nth-child)\n\ttry {\n\t\t$content.find( \":nth-child(1):lt(4)\" ).data( \"test\", true );\n\n\t// But don't break on a non-Sizzle build\n\t} catch ( e ) {\n\t\t$content.find( \"*\" ).data( \"test\", true );\n\t}\n\n\tassert.ok( expected.test( $content.clone( false )[ 0 ].innerHTML ), \"clone()\" );\n\tassert.ok( expected.test( $content.html() ), \"html()\" );\n} );\n\nQUnit.test( \"remove() no filters\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar first = jQuery( \"#ap\" ).children().first();\n\n\tfirst.data( \"foo\", \"bar\" );\n\n\tjQuery( \"#ap\" ).children().remove();\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check remove\" );\n} );\n\nQUnit.test( \"remove() with filters\", function( assert ) {\n\n\tassert.expect( 8 );\n\n\tvar markup, div;\n\tjQuery( \"#ap\" ).children().remove( \"a\" );\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 1, \"Check filtered remove\" );\n\n\tjQuery( \"#ap\" ).children().remove( \"a, code\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check multi-filtered remove\" );\n\n\t// Positional and relative selectors\n\tmarkup = \"<div><span>1</span><span>2</span><span>3</span><span>4</span></div>\";\n\tdiv = jQuery( markup );\n\tdiv.children().remove( \"span:nth-child(2n)\" );\n\tassert.equal( div.text(), \"13\", \"relative selector in remove\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().remove( \"span:first\" );\n\t\tassert.equal( div.text(), \"234\", \"positional selector in remove\" );\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().remove( \"span:last\" );\n\t\tassert.equal( div.text(), \"123\", \"positional selector in remove\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Positional selectors not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \"Positional selectors not supported in selector-native\" );\n\t}\n\n\t// using contents will get comments regular, text, and comment nodes\n\t// Handle the case where no comment is in the document\n\tassert.ok( jQuery( \"#nonnodes\" ).contents().length >= 2, \"Check node,textnode,comment remove works\" );\n\tjQuery( \"#nonnodes\" ).contents().remove();\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().length, 0, \"Check node,textnode,comment remove works\" );\n} );\n\nQUnit.test( \"remove() event cleaning \", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count, first, cleanUp;\n\n\tcount = 0;\n\tfirst = jQuery( \"#ap\" ).children().first();\n\tcleanUp = first.on( \"click\", function() {\n\t\tcount++;\n\t} ).remove().appendTo( \"#qunit-fixture\" ).trigger( \"click\" );\n\n\tassert.strictEqual( 0, count, \"Event handler has been removed\" );\n\n\t// Clean up detached data\n\tcleanUp.remove();\n} );\n\nQUnit.test( \"remove() in document order #13779\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar last,\n\t\tcleanData = jQuery.cleanData;\n\n\tjQuery.cleanData = function( nodes ) {\n\t\tlast = jQuery.text( nodes[ 0 ] );\n\t\tcleanData.call( this, nodes );\n\t};\n\n\tjQuery( \"#qunit-fixture\" ).append(\n\t\tjQuery.parseHTML(\n\t\t\t\"<div class='removal-fixture'>1</div>\" +\n\t\t\t\"<div class='removal-fixture'>2</div>\" +\n\t\t\t\"<div class='removal-fixture'>3</div>\"\n\t\t)\n\t);\n\n\tjQuery( \".removal-fixture\" ).remove();\n\n\tassert.equal( last, 3, \"The removal fixtures were removed in document order\" );\n\n\tjQuery.cleanData = cleanData;\n} );\n\nQUnit.test( \"detach() no filters\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tvar first = jQuery( \"#ap\" ).children().first();\n\n\tfirst.data( \"foo\", \"bar\" );\n\n\tjQuery( \"#ap\" ).children().detach();\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check remove\" );\n\n\tassert.equal( first.data( \"foo\" ), \"bar\" );\n\tfirst.remove();\n\n} );\n\nQUnit.test( \"detach() with filters\", function( assert ) {\n\n\tassert.expect( 8 );\n\n\tvar markup, div;\n\tjQuery( \"#ap\" ).children().detach( \"a\" );\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 1, \"Check filtered remove\" );\n\n\tjQuery( \"#ap\" ).children().detach( \"a, code\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check multi-filtered remove\" );\n\n\t// Positional and relative selectors\n\tmarkup = \"<div><span>1</span><span>2</span><span>3</span><span>4</span></div>\";\n\tdiv = jQuery( markup );\n\tdiv.children().detach( \"span:nth-child(2n)\" );\n\tassert.equal( div.text(), \"13\", \"relative selector in detach\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().detach( \"span:first\" );\n\t\tassert.equal( div.text(), \"234\", \"positional selector in detach\" );\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().detach( \"span:last\" );\n\t\tassert.equal( div.text(), \"123\", \"positional selector in detach\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"positional selectors not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \"positional selectors not supported in selector-native\" );\n\t}\n\n\t// using contents will get comments regular, text, and comment nodes\n\t// Handle the case where no comment is in the document\n\tassert.ok( jQuery( \"#nonnodes\" ).contents().length >= 2, \"Check node,textnode,comment remove works\" );\n\tjQuery( \"#nonnodes\" ).contents().detach();\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().length, 0, \"Check node,textnode,comment remove works\" );\n} );\n\nQUnit.test( \"detach() event cleaning \", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count, first, cleanUp;\n\n\tcount = 0;\n\tfirst = jQuery( \"#ap\" ).children().first();\n\tcleanUp = first.on( \"click\", function() {\n\t\tcount++;\n\t} ).detach().appendTo( \"#qunit-fixture\" ).trigger( \"click\" );\n\n\tassert.strictEqual( 1, count, \"Event handler has not been removed\" );\n\n\t// Clean up detached data\n\tcleanUp.remove();\n} );\n\nQUnit.test( \"empty()\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery( \"#ap\" ).children().empty().text().length, 0, \"Check text is removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 4, \"Check elements are not removed\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tvar j = jQuery( \"#nonnodes\" ).contents();\n\tj.empty();\n\tassert.equal( j.html(), \"\", \"Check node,textnode,comment empty works\" );\n} );\n\nQUnit.test( \"jQuery.cleanData\", function( assert ) {\n\n\tassert.expect( 14 );\n\n\tvar type, pos, div, child;\n\n\ttype = \"remove\";\n\n\t// Should trigger 4 remove event\n\tdiv = getDiv().remove();\n\n\t// Should both do nothing\n\tpos = \"Outer\";\n\tdiv.trigger( \"click\" );\n\n\tpos = \"Inner\";\n\tdiv.children().trigger( \"click\" );\n\n\ttype = \"empty\";\n\tdiv = getDiv();\n\tchild = div.children();\n\n\t// Should trigger 2 remove event\n\tdiv.empty();\n\n\t// Should trigger 1\n\tpos = \"Outer\";\n\tdiv.trigger( \"click\" );\n\n\t// Should do nothing\n\tpos = \"Inner\";\n\tchild.trigger( \"click\" );\n\n\t// Should trigger 2\n\tdiv.remove();\n\n\ttype = \"html\";\n\n\tdiv = getDiv();\n\tchild = div.children();\n\n\t// Should trigger 2 remove event\n\tdiv.html( \"<div></div>\" );\n\n\t// Should trigger 1\n\tpos = \"Outer\";\n\tdiv.trigger( \"click\" );\n\n\t// Should do nothing\n\tpos = \"Inner\";\n\tchild.trigger( \"click\" );\n\n\t// Should trigger 2\n\tdiv.remove();\n\n\tfunction getDiv() {\n\t\tvar div = jQuery( \"<div class='outer'><div class='inner'></div></div>\" ).on( \"click\", function() {\n\t\t\tassert.ok( true, type + \" \" + pos + \" Click event fired.\" );\n\t\t} ).on( \"focus\", function() {\n\t\t\tassert.ok( true, type + \" \" + pos + \" Focus event fired.\" );\n\t\t} ).find( \"div\" ).on( \"click\", function() {\n\t\t\tassert.ok( false, type + \" \" + pos + \" Click event fired.\" );\n\t\t} ).on( \"focus\", function() {\n\t\t\tassert.ok( false, type + \" \" + pos + \" Focus event fired.\" );\n\t\t} ).end().appendTo( \"body\" );\n\n\t\tdiv[ 0 ].detachEvent = div[ 0 ].removeEventListener = function( t ) {\n\t\t\tassert.ok( true, type + \" Outer \" + t + \" event unbound\" );\n\t\t};\n\n\t\tdiv[ 0 ].firstChild.detachEvent = div[ 0 ].firstChild.removeEventListener = function( t ) {\n\t\t\tassert.ok( true, type + \" Inner \" + t + \" event unbound\" );\n\t\t};\n\n\t\treturn div;\n\t}\n} );\n\nQUnit.test( \"jQuery.cleanData eliminates all private data (gh-2127)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery._data( div[ 0 ], \"gh-2127\", \"testing\" );\n\n\tassert.ok( !jQuery.isEmptyObject( jQuery._data( div[ 0 ] ) ),  \"Ensure some private data exists\" );\n\n\tdiv.remove();\n\n\tassert.ok( !jQuery.hasData( div[ 0 ] ), \"Removed element hasData should return false\" );\n\n\tassert.ok( jQuery.isEmptyObject( jQuery._data( div[ 0 ] ) ),\n\t\t\"Private data is empty after node is removed\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"jQuery.cleanData eliminates all public data\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div/>\" );\n\tdiv.data( \"some\", \"data\" );\n\tassert.ok( !jQuery.isEmptyObject( jQuery.data( div[ 0 ] ) ),  \"Ensure some public data exists\" );\n\n\tdiv.remove();\n\n\tassert.ok( !jQuery.hasData( div[ 0 ] ), \"Removed element hasData should return false\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.strictEqual( div[ 0 ][ key ], undefined, \"Expando was not removed when there was no more data\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"domManip plain-text caching (trac-6779)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\t// DOM manipulation fails if added text matches an Object method\n\tvar i,\n\t\t$f = jQuery( \"<div />\" ).appendTo( \"#qunit-fixture\" ),\n\t\tbad = [ \"start-\", \"toString\", \"hasOwnProperty\", \"append\", \"here&there!\", \"-end\" ];\n\n\tfor ( i = 0; i < bad.length; i++ ) {\n\t\ttry {\n\t\t\t$f.append( bad[ i ] );\n\t\t}\n\t\tcatch ( e ) {}\n\t}\n\tassert.equal( $f.text(), bad.join( \"\" ), \"Cached strings that match Object properties\" );\n\t$f.remove();\n} );\n\nQUnit.test( \"domManip executes scripts containing html comments or CDATA (trac-9221)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tjQuery( [\n\t\t\"<script type='text/javascript'>\",\n\t\t\"<!--\",\n\t\t\"QUnit.assert.ok( true, '<!-- handled' );\",\n\t\t\"//-->\",\n\t\t\"</script>\"\n\t].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( [\n\t\t\"<script type='text/javascript'>\",\n\t\t\"<![CDATA[\",\n\t\t\"QUnit.assert.ok( true, '<![CDATA[ handled' );\",\n\t\t\"//]]>\",\n\t\t\"</script>\"\n\t].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( [\n\t\t\"<script type='text/javascript'>\",\n\t\t\"<!--//--><![CDATA[//><!--\",\n\t\t\"QUnit.assert.ok( true, '<!--//--><![CDATA[//><!-- (Drupal case) handled' );\",\n\t\t\"//--><!]]>\",\n\t\t\"</script>\"\n\t].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n} );\n\ntestIframe(\n\t\"domManip tolerates window-valued document[0] in IE9/10 (trac-12266)\",\n\t\"manipulation/iframe-denied.html\",\n\tfunction( assert, jQuery, window, document, test ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( test.status, test.description );\n\t}\n);\n\ntestIframe(\n\t\"domManip executes scripts in iframes in the iframes' context\",\n\t\"manipulation/scripts-context.html\",\n\tfunction( assert, framejQuery, frameWindow, frameDocument ) {\n\t\tassert.expect( 2 );\n\t\tjQuery( frameDocument.body ).append( \"<script>window.scriptTest = true;<\\x2fscript>\" );\n\t\tassert.ok( !window.scriptTest, \"script executed in iframe context\" );\n\t\tassert.ok( frameWindow.scriptTest, \"script executed in iframe context\" );\n\t}\n);\n\ntestIframe(\n\t\"domManip executes external scripts in iframes in the iframes' context\",\n\t\"manipulation/scripts-context.html\",\n\tfunction( assert, framejQuery, frameWindow, frameDocument ) {\n\t\tassert.expect( 2 );\n\n\t\tGlobals.register( \"finishTest\" );\n\n\t\treturn new Promise( function( resolve ) {\n\t\t\twindow.finishTest = resolve;\n\t\t\tjQuery( frameDocument.body ).append(\n\t\t\t\t\"<script src='\" + url( \"manipulation/set-global-scripttest.js\" ) + \"'></script>\" );\n\t\t\tassert.ok( !window.scriptTest, \"script executed in iframe context\" );\n\t\t\tassert.ok( frameWindow.scriptTest, \"script executed in iframe context\" );\n\t\t} );\n\t},\n\n\t// The AJAX module is needed for jQuery._evalUrl.\n\tQUnit[ jQuery.ajax ? \"test\" : \"skip\" ]\n);\n\nQUnit.test( \"jQuery.clone - no exceptions for object elements #9587\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery( \"#no-clone-exception\" ).clone();\n\t\tassert.ok( true, \"cloned with no exceptions\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, e.message );\n\t}\n} );\n\nQUnit.test( \"Cloned, detached HTML5 elems (#10667,10670)\", function( assert ) {\n\n\tassert.expect( 7 );\n\n\tvar $clone,\n\t\t$section = jQuery( \"<section>\" ).appendTo( \"#qunit-fixture\" );\n\n\t// First clone\n\t$clone = $section.clone();\n\n\t// This branch tests a known behavior in modern browsers that should never fail.\n\t// Included for expected test count symmetry (expecting 1)\n\tassert.equal( $clone[ 0 ].nodeName, \"SECTION\", \"detached clone nodeName matches 'SECTION'\" );\n\n\t// Bind an event\n\t$section.on( \"click\", function() {\n\t\tassert.ok( true, \"clone fired event\" );\n\t} );\n\n\t// Second clone (will have an event bound)\n\t$clone = $section.clone( true );\n\n\t// Trigger an event from the first clone\n\t$clone.trigger( \"click\" );\n\t$clone.off( \"click\" );\n\n\t// Add a child node with text to the original\n\t$section.append( \"<p>Hello</p>\" );\n\n\t// Third clone (will have child node and text)\n\t$clone = $section.clone( true );\n\n\tassert.equal( $clone.find( \"p\" ).text(), \"Hello\", \"Assert text in child of clone\" );\n\n\t// Trigger an event from the third clone\n\t$clone.trigger( \"click\" );\n\t$clone.off( \"click\" );\n\n\t// Add attributes to copy\n\t$section.attr( {\n\t\t\"class\": \"foo bar baz\",\n\t\t\"title\": \"This is a title\"\n\t} );\n\n\t// Fourth clone (will have newly added attributes)\n\t$clone = $section.clone( true );\n\n\tassert.equal( $clone.attr( \"class\" ), $section.attr( \"class\" ), \"clone and element have same class attribute\" );\n\tassert.equal( $clone.attr( \"title\" ), $section.attr( \"title\" ), \"clone and element have same title attribute\" );\n\n\t// Remove the original\n\t$section.remove();\n\n\t// Clone the clone\n\t$section = $clone.clone( true );\n\n\t// Remove the clone\n\t$clone.remove();\n\n\t// Trigger an event from the clone of the clone\n\t$section.trigger( \"click\" );\n\n\t// Unbind any remaining events\n\t$section.off( \"click\" );\n\t$clone.off( \"click\" );\n} );\n\nQUnit.test( \"Guard against exceptions when clearing safeChildNodes\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar div;\n\n\ttry {\n\t\tdiv = jQuery( \"<div/><hr/><code/><b/>\" );\n\t} catch ( e ) {}\n\n\tassert.ok( div && div.jquery, \"Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]\" );\n} );\n\nQUnit.test( \"Ensure oldIE creates a new set on appendTo (#8894)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tassert.strictEqual( jQuery( \"<div/>\" ).clone().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.clone\" );\n\tassert.strictEqual( jQuery( \"<div/>\" ).find( \"p\" ).end().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\" );\n\tassert.strictEqual( jQuery( \"<div/>\" ).text( \"test\" ).addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\" );\n\tassert.strictEqual( jQuery( \"<bdi/>\" ).clone().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after clone html5 element\" );\n\tassert.strictEqual( jQuery( \"<p/>\" ).appendTo( \"<div/>\" ).end().length, jQuery( \"<p>test</p>\" ).appendTo( \"<div/>\" ).end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\" );\n} );\n\nQUnit.test( \"html() - script exceptions bubble (#11743)\", function( assert ) {\n\tassert.expect( 2 );\n\tvar done = assert.async(),\n\t\tonerror = window.onerror;\n\n\tsetTimeout( function() {\n\t\twindow.onerror = onerror;\n\n\t\tdone();\n\t}, 1000 );\n\n\twindow.onerror = function() {\n\t\tassert.ok( true, \"Exception thrown\" );\n\n\t\tif ( jQuery.ajax ) {\n\t\t\twindow.onerror = function() {\n\t\t\t\tassert.ok( true, \"Exception thrown in remote script\" );\n\t\t\t};\n\n\t\t\tjQuery( \"#qunit-fixture\" ).html( \"<script src='\" + baseURL + \"badcall.js'></script>\" );\n\t\t\tassert.ok( true, \"Exception ignored\" );\n\t\t} else {\n\t\t\tassert.ok( true, \"No jQuery.ajax\" );\n\t\t}\n\t};\n\n\tjQuery( \"#qunit-fixture\" ).html( \"<script>undefined();</script>\" );\n} );\n\nQUnit.test( \"checked state is cloned with clone()\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar elem = jQuery.parseHTML( \"<input type='checkbox' checked='checked'/>\" )[ 0 ];\n\telem.checked = false;\n\tassert.equal( jQuery( elem ).clone().attr( \"id\", \"clone\" )[ 0 ].checked, false, \"Checked false state correctly cloned\" );\n\n\telem = jQuery.parseHTML( \"<input type='checkbox'/>\" )[ 0 ];\n\telem.checked = true;\n\tassert.equal( jQuery( elem ).clone().attr( \"id\", \"clone\" )[ 0 ].checked, true, \"Checked true state correctly cloned\" );\n} );\n\nQUnit.test( \"manipulate mixed jQuery and text (#12384, #12346)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div>a</div>\" ).append( \"&nbsp;\", jQuery( \"<span>b</span>\" ), \"&nbsp;\", jQuery( \"<span>c</span>\" ) ),\n\t\tnbsp = String.fromCharCode( 160 );\n\n\tassert.equal( div.text(), \"a\" + nbsp + \"b\" + nbsp + \"c\", \"Appending mixed jQuery with text nodes\" );\n\n\tdiv = jQuery( \"<div><div></div></div>\" )\n\t\t.find( \"div\" )\n\t\t.after( \"<p>a</p>\", \"<p>b</p>\" )\n\t\t.parent();\n\tassert.equal( div.find( \"*\" ).length, 3, \"added 2 paragraphs after inner div\" );\n} );\n\nQUnit.test( \"script evaluation (#11795)\", function( assert ) {\n\n\tassert.expect( 13 );\n\n\tvar scriptsIn, scriptsOut,\n\t\tfixture = jQuery( \"#qunit-fixture\" ).empty(),\n\t\tobjGlobal = ( function() {\n\t\t\treturn this;\n\t\t} )(),\n\t\tisOk = objGlobal.ok,\n\t\tnotOk = function() {\n\t\t\tvar args = arguments;\n\t\t\targs[ 0 ] = !args[ 0 ];\n\t\t\treturn isOk.apply( this, args );\n\t\t};\n\n\tobjGlobal.ok = notOk;\n\tscriptsIn = jQuery( [\n\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: non-script' );</script>\",\n\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: text/javascript' );</script>\",\n\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: text/ecmascript' );</script>\",\n\t\t\"<script>QUnit.assert.ok( true, 'evaluated: no type' );</script>\",\n\t\t\"<div>\",\n\t\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: inner non-script' );</script>\",\n\t\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: inner text/javascript' );</script>\",\n\t\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: inner text/ecmascript' );</script>\",\n\t\t\t\"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\",\n\t\t\"</div>\"\n\t].join( \"\" ) );\n\tscriptsIn.appendTo( jQuery( \"<div class='detached'/>\" ) );\n\tobjGlobal.ok = isOk;\n\n\tscriptsOut = fixture.append( scriptsIn ).find( \"script\" );\n\tassert.equal( scriptsOut[ 0 ].type, \"something/else\", \"Non-evaluated type.\" );\n\tassert.equal( scriptsOut[ 1 ].type, \"text/javascript\", \"Evaluated type.\" );\n\tassert.deepEqual( scriptsOut.get(), fixture.find( \"script\" ).get(), \"All script tags remain.\" );\n\n\tobjGlobal.ok = notOk;\n\tscriptsOut = scriptsOut.add( scriptsOut.clone() ).appendTo( fixture.find( \"div\" ) );\n\tassert.deepEqual( fixture.find( \"div script\" ).get(), scriptsOut.get(), \"Scripts cloned without reevaluation\" );\n\tfixture.append( scriptsOut.detach() );\n\tassert.deepEqual( fixture.children( \"script\" ).get(), scriptsOut.get(), \"Scripts detached without reevaluation\" );\n\tobjGlobal.ok = isOk;\n\n\tif ( jQuery.ajax ) {\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<script src='\" + url( \"mock.php?action=testbar\" ) + \"'/>\" );\n\t\tassert.strictEqual( window.testBar, \"bar\", \"Global script evaluation\" );\n\t} else {\n\t\tassert.ok( true, \"No jQuery.ajax\" );\n\t\tassert.ok( true, \"No jQuery.ajax\" );\n\t}\n} );\n\nQUnit[ jQuery.ajax ? \"test\" : \"skip\" ]( \"jQuery._evalUrl (#12838)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar message, expectedArgument,\n\t\tajax = jQuery.ajax,\n\t\tevalUrl = jQuery._evalUrl;\n\n\tmessage = \"jQuery.ajax implementation\";\n\texpectedArgument = 1;\n\tjQuery.ajax = function( input ) {\n\t\tassert.equal( ( input.url || input ).slice( -1 ), expectedArgument, message );\n\t\texpectedArgument++;\n\t};\n\tjQuery( \"#qunit-fixture\" ).append( \"<script src='1'/><script src='2'/>\" );\n\tassert.equal( expectedArgument, 3, \"synchronous execution\" );\n\n\tmessage = \"custom implementation\";\n\texpectedArgument = 3;\n\tjQuery._evalUrl = jQuery.ajax;\n\tjQuery.ajax = function( options ) {\n\t\tassert.strictEqual( options, {}, \"Unexpected call to jQuery.ajax\" );\n\t};\n\tjQuery( \"#qunit-fixture\" ).append( \"<script src='3'/><script src='4'/>\" );\n\n\tjQuery.ajax = ajax;\n\tjQuery._evalUrl = evalUrl;\n} );\n\nQUnit.test( \"jQuery.htmlPrefilter (gh-1747)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar expectedArgument,\n\t\tinvocations = 0,\n\t\tdone = assert.async(),\n\t\thtmlPrefilter = jQuery.htmlPrefilter,\n\t\tfixture = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tpoison = \"<script>jQuery.htmlPrefilter.assert.ok( false, 'script not executed' );</script>\";\n\n\tjQuery.htmlPrefilter = function( html ) {\n\t\tinvocations++;\n\t\tassert.equal( html, expectedArgument, \"Expected input\" );\n\n\t\t// Remove <script> and <del> elements\n\t\treturn htmlPrefilter.apply( this, arguments )\n\t\t\t.replace( /<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig, \"\" );\n\t};\n\tjQuery.htmlPrefilter.assert = assert;\n\n\texpectedArgument = \"A-\" + poison + \"B-\" + poison + poison + \"C-\";\n\tfixture.html( expectedArgument );\n\n\texpectedArgument = \"D-\" + poison + \"E-\" + \"<del/><div>\" + poison + poison + \"</div>\" + \"F-\";\n\tfixture.append( expectedArgument );\n\n\texpectedArgument = poison;\n\tfixture.find( \"div\" ).replaceWith( expectedArgument );\n\n\tassert.equal( invocations, 3, \"htmlPrefilter invoked for all DOM manipulations\" );\n\tassert.equal( fixture.html(), \"A-B-C-D-E-F-\", \"htmlPrefilter modified HTML\" );\n\n\t// Allow asynchronous script execution to generate assertions\n\tsetTimeout( function() {\n\t\tjQuery.htmlPrefilter = htmlPrefilter;\n\t\tdone();\n\t}, 100 );\n} );\n\nQUnit.test( \"insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)\", function( assert ) {\n\n\tassert.expect( 10 );\n\n\tvar elems;\n\n\tjQuery.each( [\n\t\t\"appendTo\",\n\t\t\"prependTo\",\n\t\t\"insertBefore\",\n\t\t\"insertAfter\",\n\t\t\"replaceAll\"\n\t], function( index, name ) {\n\t\telems = jQuery( [\n\t\t\t\"<ul id='test4087-complex'><li class='test4087'><div>c1</div>h1</li><li><div>c2</div>h2</li></ul>\",\n\t\t\t\"<div id='test4087-simple'><div class='test4087-1'>1<div class='test4087-2'>2</div><div class='test4087-3'>3</div></div></div>\",\n\t\t\t\"<div id='test4087-multiple'><div class='test4087-multiple'>1</div><div class='test4087-multiple'>2</div></div>\"\n\t\t].join( \"\" ) ).appendTo( \"#qunit-fixture\" );\n\n\t\t// complex case based on https://jsfiddle.net/pbramos/gZ7vB/\n\t\tjQuery( \"#test4087-complex div\" )[ name ]( \"#test4087-complex li:last-child div:last-child\" );\n\t\tassert.equal( jQuery( \"#test4087-complex li:last-child div\" ).length, name === \"replaceAll\" ? 1 : 2, name + \" a node to itself, complex case.\" );\n\n\t\t// simple case\n\t\tjQuery( \".test4087-1\" )[ name ]( \".test4087-1\" );\n\t\tassert.equal( jQuery( \".test4087-1\" ).length, 1, name + \" a node to itself, simple case.\" );\n\n\t\t// clean for next test\n\t\tjQuery( \"#test4087-complex\" ).remove();\n\t\tjQuery( \"#test4087-simple\" ).remove();\n\t\tjQuery( \"#test4087-multiple\" ).remove();\n\t} );\n} );\n\nQUnit.test( \"Index for function argument should be received (#13094)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar i = 0;\n\n\tjQuery( \"<div/><div/>\" ).before( function( index ) {\n\t\tassert.equal( index, i++, \"Index should be correct\" );\n\t} );\n\n} );\n\nQUnit.test( \"Make sure jQuery.fn.remove can work on elements in documentFragment\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) );\n\n\tjQuery( div ).remove();\n\n\tassert.equal( fragment.childNodes.length, 0, \"div element was removed from documentFragment\" );\n} );\n\nQUnit.test( \"Make sure specific elements with content created correctly (#13232)\", function( assert ) {\n\tassert.expect( 20 );\n\n\tvar results = [],\n\t\targs = [],\n\t\telems = {\n\t\t\tthead: \"<tr><td>thead</td></tr>\",\n\t\t\ttbody: \"<tr><td>tbody</td></tr>\",\n\t\t\ttfoot: \"<tr><td>tfoot</td></tr>\",\n\t\t\tcolgroup: \"<col span='5' />\",\n\t\t\tcaption: \"caption\",\n\t\t\ttr: \"<td>tr</td>\",\n\t\t\tth: \"th\",\n\t\t\ttd: \"<div>td</div>\",\n\t\t\toptgroup: \"<option>optgroup</option>\",\n\t\t\toption: \"option\"\n\t\t};\n\n\tjQuery.each( elems, function( name, value ) {\n\t\tvar html = \"<\" + name + \">\" + value + \"</\" + name + \">\";\n\t\tassert.ok( jQuery.parseHTML( \"<\" + name + \">\" + value + \"</\" + name + \">\" )[ 0 ].nodeName.toLowerCase() === name, name + \" is created correctly\" );\n\n\t\tresults.push( name );\n\t\targs.push( html );\n\t} );\n\n\tjQuery.fn.append.apply( jQuery( \"<div/>\" ), args ).children().each( function( i ) {\n\t\tassert.ok( this.nodeName.toLowerCase() === results[ i ] );\n\t} );\n} );\n\nQUnit.test( \"Validate creation of multiple quantities of certain elements (#13818)\", function( assert ) {\n\tassert.expect( 44 );\n\n\tvar tags = [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"col\", \"caption\", \"tr\", \"th\", \"td\", \"optgroup\", \"option\" ];\n\n\tjQuery.each( tags, function( index, tag ) {\n\t\tjQuery( \"<\" + tag + \"/><\" + tag + \"/>\" ).each( function() {\n\t\t\tassert.ok( this.nodeName.toLowerCase() === tag, tag + \" empty elements created correctly\" );\n\t\t} );\n\n\t\tjQuery( \"<\" + this + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\" ).each( function() {\n\t\t\tassert.ok( this.nodeName.toLowerCase() === tag, tag + \" elements with closing tag created correctly\" );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"Make sure tr element will be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\ttable = document.createElement( \"table\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tjQuery( table ).append( \"<tr><td>test</td></tr>\" );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody><tr><td>test</td></tr></tbody>\" );\n} );\n\nQUnit.test( \"Make sure tr elements will be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\ttable = document.createElement( \"table\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tjQuery( table ).append( \"<tr><td>1</td></tr><tr><td>2</td></tr>\" );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody>\" );\n} );\n\nQUnit.test( \"Make sure tfoot element will not be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\ttable = document.createElement( \"table\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tjQuery( table ).append( \"<tfoot/>\" );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody></tbody><tfoot></tfoot>\" );\n} );\n\nQUnit.test( \"Make sure document fragment will be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\tfragment = document.createDocumentFragment(),\n\t\ttable = document.createElement( \"table\" ),\n\t\ttr = document.createElement( \"tr\" ),\n\t\ttd = document.createElement( \"td\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tfragment.appendChild( tr );\n\ttr.appendChild( td );\n\ttd.innerHTML = \"test\";\n\n\tjQuery( table ).append( fragment );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody><tr><td>test</td></tr></tbody>\" );\n} );\n\nQUnit.test( \"Make sure col element is appended correctly\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar table = jQuery( \"<table cellpadding='0'><tr><td>test</td></tr></table>\" );\n\n\tjQuery( table ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( \"<col width='150'/>\" ).prependTo( table );\n\n\tassert.strictEqual( table.find( \"td\" ).width(), 150 );\n} );\n\nQUnit.test( \"Make sure tr is not appended to the wrong tbody (gh-3439)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar htmlOut,\n\t\thtmlIn =\n\t\t\t\"<thead><tr><td>\" +\n\t\t\t\t\"<table><tbody><tr><td>nested</td></tr></tbody></table>\" +\n\t\t\t\"</td></tr></thead>\",\n\t\tnewRow = \"<tr><td>added</td></tr>\",\n\t\thtmlExpected = htmlIn.replace( \"</thead>\", \"</thead>\" + newRow ),\n\t\ttable = supportjQuery( \"<table/>\" ).html( htmlIn ).appendTo( \"#qunit-fixture\" )[ 0 ];\n\n\tjQuery( table ).append( newRow );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtmlOut = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( htmlOut, htmlExpected );\n} );\n\nQUnit.test( \"Make sure tags with single-character names are found (gh-4124)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar htmlOut,\n\t\thtmlIn = \"<p>foo<!--<td>--></p>\",\n\t\t$el = jQuery( \"<div/>\" );\n\n\t$el.html( htmlIn );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtmlOut = $el[ 0 ].innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( htmlOut, htmlIn );\n} );\n\n// The AJAX module is needed for jQuery._evalUrl.\nQUnit[ jQuery.ajax ? \"test\" : \"skip\" ]( \"Insert script with data-URI (gh-1887)\", function( assert ) {\n\tassert.expect( 1 );\n\tGlobals.register( \"testFoo\" );\n\tGlobals.register( \"testSrcFoo\" );\n\n\tvar script = document.createElement( \"script\" ),\n\t\tfixture = document.getElementById( \"qunit-fixture\" ),\n\t\tdone = assert.async();\n\n\tscript.src = \"data:text/javascript,testSrcFoo = 'foo';\";\n\n\tfixture.appendChild( script );\n\n\tjQuery( fixture ).append( \"<script src=\\\"data:text/javascript,testFoo = 'foo';\\\"></script>\" );\n\n\tsetTimeout( function() {\n\t\tif ( window.testSrcFoo === \"foo\" ) {\n\t\t\tassert.strictEqual( window.testFoo, window.testSrcFoo, \"data-URI script executed\" );\n\n\t\t} else {\n\t\t\tassert.ok( true, \"data-URI script is not supported by this environment\" );\n\t\t}\n\n\t\tdone();\n\t}, 100 );\n} );\n\nQUnit.test( \"Ignore content from unsuccessful responses (gh-4126)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar globalEval = jQuery.globalEval;\n\tjQuery.globalEval = function( code ) {\n\t\tassert.ok( false, \"no attempt to evaluate code from an unsuccessful response\" );\n\t};\n\n\ttry {\n\t\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\t\"<script src='\" + url( \"mock.php?action=error\" ) + \"'/>\" );\n\t\tassert.ok( true, \"no error thrown from embedding script with unsuccessful-response src\" );\n\t} catch ( e ) {\n\t\tthrow e;\n\t} finally {\n\t\tjQuery.globalEval = globalEval;\n\t}\n} );\n\ntestIframe(\n\t\"Check if CSP nonce is preserved\",\n\t\"mock.php?action=cspNonce\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar done = assert.async();\n\n\t\tassert.expect( 1 );\n\n\t\tsupportjQuery.get( baseURL + \"support/csp.log\" ).done( function( data ) {\n\t\t\tassert.equal( data, \"\", \"No log request should be sent\" );\n\t\t\tsupportjQuery.get( baseURL + \"mock.php?action=cspClean\" ).done( done );\n\t\t} );\n\t},\n\n\t// Support: Edge 18+, iOS 7-9 only, Android 4.0-4.4 only\n\t// Edge doesn't support nonce in non-inline scripts.\n\t// See https://web.archive.org/web/20171203124125/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13246371/\n\t// Old iOS & Android Browser versions support script-src but not nonce, making this test\n\t// impossible to run. Browsers not supporting CSP at all are not a problem as they'll skip\n\t// script-src restrictions completely.\n\tQUnit[ /\\bedge\\/|iphone os [789]|android 4\\./i.test( navigator.userAgent ) ? \"skip\" : \"test\" ]\n);\n\ntestIframe(\n\t\"Check if CSP nonce is preserved for external scripts with src attribute\",\n\t\"mock.php?action=cspNonce&test=external\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar done = assert.async();\n\n\t\tassert.expect( 1 );\n\n\t\tsupportjQuery.get( baseURL + \"support/csp.log\" ).done( function( data ) {\n\t\t\tassert.equal( data, \"\", \"No log request should be sent\" );\n\t\t\tsupportjQuery.get( baseURL + \"mock.php?action=cspClean\" ).done( done );\n\t\t} );\n\t},\n\n\t// The AJAX module is needed for jQuery._evalUrl.\n\t// Support: Edge 18+, iOS 7-9 only, Android 4.0-4.4 only\n\t// Edge doesn't support nonce in non-inline scripts.\n\t// See https://web.archive.org/web/20171203124125/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13246371/\n\t// Old iOS & Android Browser versions support script-src but not nonce, making this test\n\t// impossible to run. Browsers not supporting CSP at all are not a problem as they'll skip\n\t// script-src restrictions completely.\n\tQUnit[ jQuery.ajax && !/\\bedge\\/|iphone os [789]|android 4\\./i.test( navigator.userAgent ) ? \"test\" : \"skip\" ]\n);\n\ntestIframe(\n\t\"jQuery.globalEval supports nonce\",\n\t\"mock.php?action=cspNonce&test=globaleval\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar done = assert.async();\n\n\t\tassert.expect( 1 );\n\n\t\tsupportjQuery.get( baseURL + \"support/csp.log\" ).done( function( data ) {\n\t\t\tassert.equal( data, \"\", \"No log request should be sent\" );\n\t\t\tsupportjQuery.get( baseURL + \"mock.php?action=cspClean\" ).done( done );\n\t\t} );\n\t},\n\n\t// Support: Edge 18+, iOS 7-9 only, Android 4.0-4.4 only\n\t// Edge doesn't support nonce in non-inline scripts.\n\t// See https://web.archive.org/web/20171203124125/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13246371/\n\t// Old iOS & Android Browser versions support script-src but not nonce, making this test\n\t// impossible to run. Browsers not supporting CSP at all are not a problem as they'll skip\n\t// script-src restrictions completely.\n\tQUnit[ /\\bedge\\/|iphone os [789]|android 4\\./i.test( navigator.userAgent ) ? \"skip\" : \"test\" ]\n);\n", "( function() {\n\nif ( !jQuery.fn.offset ) {\n\treturn;\n}\n\nvar supportsFixedPosition, supportsScroll, alwaysScrollable,\n\tforceScroll = supportjQuery( \"<div/>\" ).css( { width: 2000, height: 2000 } ),\n\tcheckSupport = function( assert ) {\n\n\t\t// Only run once\n\t\tcheckSupport = false;\n\n\t\tvar checkFixed = supportjQuery( \"<div/>\" )\n\t\t\t.css( { position: \"fixed\", top: \"20px\" } )\n\t\t\t.appendTo( \"#qunit-fixture\" );\n\t\tsupportsFixedPosition = checkFixed[ 0 ].offsetTop === 20;\n\t\tcheckFixed.remove();\n\n\t\t// Append forceScroll to the body instead of #qunit-fixture because the latter is hidden\n\t\tforceScroll.appendTo( \"body\" );\n\t\twindow.scrollTo( 200, 200 );\n\t\tsupportsScroll = document.documentElement.scrollTop || document.body.scrollTop;\n\t\tforceScroll.detach();\n\n\t\t// Support: iOS <=7\n\t\t// Hijack the iframe test infrastructure to detect viewport scrollability\n\t\t// for pages with position:fixed document element\n\t\tvar done = assert.async();\n\t\ttestIframe(\n\t\t\tnull,\n\t\t\t\"offset/boxes.html\",\n\t\t\tfunction( assert, $, win, doc ) {\n\t\t\t\tvar scrollTop = win.pageYOffset,\n\t\t\t\t\tscrollLeft = win.pageXOffset;\n\t\t\t\tdoc.documentElement.style.position = \"fixed\";\n\t\t\t\twin.scrollTo( scrollLeft, scrollTop );\n\t\t\t\talwaysScrollable = win.pageXOffset !== 0;\n\t\t\t\tdone();\n\t\t\t},\n\t\t\tfunction mockQUnit_test( _, testCallback ) {\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\ttestCallback( assert );\n\t\t\t\t} );\n\t\t\t}\n\t\t);\n\t};\n\nQUnit.module( \"offset\", { beforeEach: function( assert ) {\n\tif ( typeof checkSupport === \"function\" ) {\n\t\tcheckSupport( assert );\n\t}\n\n\t// Force a scroll value on the main window to ensure incorrect results\n\t// if offset is using the scroll offset of the parent window\n\tforceScroll.appendTo( \"body\" );\n\twindow.scrollTo( 1, 1 );\n\tforceScroll.detach();\n}, afterEach: moduleTeardown } );\n\nQUnit.test( \"empty set\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.strictEqual( jQuery().offset(), undefined, \"offset() returns undefined for empty set (#11962)\" );\n\tassert.strictEqual( jQuery().position(), undefined, \"position() returns undefined for empty set (#11962)\" );\n} );\n\nQUnit.test( \"disconnected element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar result = jQuery( document.createElement( \"div\" ) ).offset();\n\n\t// These tests are solely for master/compat consistency\n\t// Retrieving offset on disconnected/hidden elements is not officially\n\t// valid input, but will return zeros for back-compat\n\tassert.equal( result.top, 0, \"Retrieving offset on disconnected elements returns zeros (gh-2310)\" );\n\tassert.equal( result.left, 0, \"Retrieving offset on disconnected elements returns zeros (gh-2310)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on disconnected elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on disconnected elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"hidden (display: none) element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div style='display: none' />\" ).appendTo( \"#qunit-fixture\" ),\n\t\tresult = node.offset();\n\n\tnode.remove();\n\n\t// These tests are solely for master/compat consistency\n\t// Retrieving offset on disconnected/hidden elements is not officially\n\t// valid input, but will return zeros for back-compat\n\tassert.equal( result.top, 0, \"Retrieving offset on hidden elements returns zeros (gh-2310)\" );\n\tassert.equal( result.left, 0, \"Retrieving offset on hidden elements returns zeros (gh-2310)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on hidden elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on hidden elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"0 sized element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div style='margin: 5px; width: 0; height: 0' />\" ).appendTo( \"#qunit-fixture\" ),\n\t\tresult = node.offset();\n\n\tnode.remove();\n\n\tassert.notEqual( result.top, 0, \"Retrieving offset on 0 sized elements (gh-3167)\" );\n\tassert.notEqual( result.left, 0, \"Retrieving offset on 0 sized elements (gh-3167)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on 0 sized elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on 0 sized elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"hidden (visibility: hidden) element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div style='margin: 5px; visibility: hidden' />\" ).appendTo( \"#qunit-fixture\" ),\n\t\tresult = node.offset();\n\n\tnode.remove();\n\n\tassert.notEqual( result.top, 0, \"Retrieving offset on visibility:hidden elements (gh-3167)\" );\n\tassert.notEqual( result.left, 0, \"Retrieving offset on visibility:hidden elements (gh-3167)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on visibility:hidden elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on visibility:hidden elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"normal element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\toffset = node.offset(),\n\t\tposition = node.position();\n\n\tnode.remove();\n\n\tassert.equal( Object.keys( offset ).length, 2, \"Retrieving offset on normal elements returns offset object (gh-3612)\" );\n\tassert.equal( jQuery.isPlainObject( offset ), true, \"Retrieving offset on normal elements returns plain object (gh-3612)\" );\n\n\tassert.equal( Object.keys( position ).length, 2, \"Retrieving position on normal elements returns offset object (gh-3612)\" );\n\tassert.equal( jQuery.isPlainObject( position ), true, \"Retrieving position on normal elements returns plain object (gh-3612)\" );\n} );\n\ntestIframe( \"absolute\", \"offset/absolute.html\", function( assert, $, iframe ) {\n\tassert.expect( 4 );\n\n\tvar doc = iframe.document,\n\t\t\ttests;\n\n\t// get offset\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\", \"top\": 1, \"left\": 1 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( jQuery( this.id, doc ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( jQuery( this.id, doc ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\", \"top\": 0, \"left\": 0 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( jQuery( this.id, doc ).position().top,  this.top,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\tassert.equal( jQuery( this.id, doc ).position().left, this.left, \"jQuery('\" + this.id + \"').position().left\" );\n\t} );\n} );\n\ntestIframe( \"absolute\", \"offset/absolute.html\", function( assert, $ ) {\n\tassert.expect( 178 );\n\n\tvar tests, offset;\n\n\t// get offset tests\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  1, \"left\":  1 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  5, \"left\":  5 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  9, \"left\":  9 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 20, \"left\": 20 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  0, \"left\":  0 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  1, \"left\":  1 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  1, \"left\":  1 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 19, \"left\": 19 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).position().top,  this.top,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\tassert.equal( $( this.id ).position().left, this.left, \"jQuery('\" + this.id + \"').position().left\" );\n\t} );\n\n\t// test #5781\n\toffset = $( \"#positionTest\" ).offset( { \"top\": 10, \"left\": 10 } ).offset();\n\tassert.equal( offset.top,  10, \"Setting offset on element with position absolute but 'auto' values.\" );\n\tassert.equal( offset.left, 10, \"Setting offset on element with position absolute but 'auto' values.\" );\n\n\t// set offset\n\ttests = [\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 30, \"left\": 30 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 10, \"left\": 10 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 19, \"left\": 19 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\": 15, \"left\": 15 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  5, \"left\":  5 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  9, \"left\":  9 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\": 10, \"left\": 10 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  0, \"left\":  0 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  5, \"left\":  5 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  2, \"left\":  2 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  0, \"left\":  0 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  1, \"left\":  1 }\n\t];\n\tjQuery.each( tests, function() {\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\tvar top = this.top, left = this.left;\n\n\t\t$( this.id ).offset( function( i, val ) {\n\t\t\tassert.equal( val.top, top, \"Verify incoming top position.\" );\n\t\t\tassert.equal( val.left, left, \"Verify incoming top position.\" );\n\t\t\treturn { \"top\": top + 1, \"left\": left + 1 };\n\t\t} );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \" })\" );\n\n\t\t$( this.id )\n\t\t\t.offset( { \"left\": this.left + 2 } )\n\t\t\t.offset( { \"top\":  this.top  + 2 } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 2, \"Setting one property at a time.\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 2, \"Setting one property at a time.\" );\n\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t$( this ).css( {\n\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\"left\": props.left + 1\n\t\t\t} );\n\t\t} } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t} );\n} );\n\ntestIframe( \"relative\", \"offset/relative.html\", function( assert, $ ) {\n\tassert.expect( 64 );\n\n\t// get offset\n\tvar tests = [\n\t\t{ \"id\": \"#relative-1\",   \"top\":   7, \"left\":  7 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":  15, \"left\": 15 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 142, \"left\": 27 },\n\t\t{ \"id\": \"#relative-2-1\",   \"top\": 149, \"left\": 52 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#relative-1\",   \"top\":   6, \"left\":  6 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":   5, \"left\":  5 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 141, \"left\": 26 },\n\t\t{ \"id\": \"#relative-2-1\",   \"top\": 5, \"left\": 5 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).position().top,  this.top,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\tassert.equal( $( this.id ).position().left, this.left, \"jQuery('\" + this.id + \"').position().left\" );\n\t} );\n\n\t// set offset\n\ttests = [\n\t\t{ \"id\": \"#relative-2\",   \"top\": 200, \"left\":  50 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 100, \"left\":  10 },\n\t\t{ \"id\": \"#relative-2\",   \"top\":  -5, \"left\":  -5 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 142, \"left\":  27 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":   5, \"left\":   5 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":  -1, \"left\":  -1 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":  15, \"left\":  15 },\n\t\t{ \"id\": \"#relative-1\",   \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#relative-1\",   \"top\":   0, \"left\":   0 },\n\t\t{ \"id\": \"#relative-1\",   \"top\":  -1, \"left\":  -1 },\n\t\t{ \"id\": \"#relative-1\",   \"top\":   7, \"left\":   7 }\n\t];\n\tjQuery.each( tests, function() {\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t$( this ).css( {\n\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\"left\": props.left + 1\n\t\t\t} );\n\t\t} } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t} );\n} );\n\ntestIframe( \"static\", \"offset/static.html\", function( assert, $ ) {\n\tassert.expect( 80 );\n\n\t// get offset\n\tvar tests = [\n\t\t{ \"id\": \"#static-1\",     \"top\":   7, \"left\":  7 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  15, \"left\": 15 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  23, \"left\": 23 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 122, left: 7 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#static-1\",     \"top\":   6, \"left\":  6 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  14, \"left\": 14 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  22, \"left\": 22 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 121, \"left\": 6 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).position().top,  this.top,  \"jQuery('\" + this.top  + \"').position().top\" );\n\t\tassert.equal( $( this.id ).position().left, this.left, \"jQuery('\" + this.left + \"').position().left\" );\n\t} );\n\n\t// set offset\n\ttests = [\n\t\t{ \"id\": \"#static-2\",     \"top\": 200, \"left\": 200 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#static-2\",     \"top\":  -2, \"left\":  -2 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 121, \"left\":   6 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  50, \"left\":  50 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  10, \"left\":  10 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  -1, \"left\":  -1 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  22, \"left\":  22 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  25, \"left\":  25 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  10, \"left\":  10 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  -3, \"left\":  -3 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  14, \"left\":  14 },\n\t\t{ \"id\": \"#static-1\",     \"top\":  30, \"left\":  30 },\n\t\t{ \"id\": \"#static-1\",     \"top\":   2, \"left\":   2 },\n\t\t{ \"id\": \"#static-1\",     \"top\":  -2, \"left\":  -2 },\n\t\t{ \"id\": \"#static-1\",     \"top\":   7, \"left\":   7 }\n\t];\n\tjQuery.each( tests, function() {\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t$( this ).css( {\n\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\"left\": props.left + 1\n\t\t\t} );\n\t\t} } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t} );\n} );\n\ntestIframe( \"fixed\", \"offset/fixed.html\", function( assert, $, window ) {\n\tassert.expect( 38 );\n\n\tvar tests, $noTopLeft;\n\n\ttests = [\n\t\t{\n\t\t\t\"id\": \"#fixed-1\",\n\t\t\t\"offsetTop\": 1001,\n\t\t\t\"offsetLeft\": 1001,\n\t\t\t\"positionTop\": 0,\n\t\t\t\"positionLeft\": 0\n\t\t},\n\t\t{\n\t\t\t\"id\": \"#fixed-2\",\n\t\t\t\"offsetTop\": 1021,\n\t\t\t\"offsetLeft\": 1021,\n\t\t\t\"positionTop\": 20,\n\t\t\t\"positionLeft\": 20\n\t\t}\n\t];\n\n\tjQuery.each( tests, function() {\n\t\tif ( !window.supportsScroll ) {\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\n\t\t} else if ( window.supportsFixedPosition ) {\n\t\t\tassert.equal( jQuery.isPlainObject( $( this.id ).offset() ), true, \"jQuery('\" + this.id + \"').offset() is plain object\" );\n\t\t\tassert.equal( jQuery.isPlainObject( $( this.id ).position() ), true, \"jQuery('\" + this.id + \"').position() is plain object\" );\n\t\t\tassert.equal( $( this.id ).offset().top,  this.offsetTop,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\t\tassert.equal( $( this.id ).position().top,  this.positionTop,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\t\tassert.equal( $( this.id ).offset().left, this.offsetLeft, \"jQuery('\" + this.id + \"').offset().left\" );\n\t\t\tassert.equal( $( this.id ).position().left,  this.positionLeft,  \"jQuery('\" + this.id + \"').position().left\" );\n\t\t} else {\n\n\t\t\t// need to have same number of assertions\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t}\n\t} );\n\n\ttests = [\n\t\t{ \"id\": \"#fixed-1\", \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#fixed-1\", \"top\":   0, \"left\":   0 },\n\t\t{ \"id\": \"#fixed-1\", \"top\":  -4, \"left\":  -4 },\n\t\t{ \"id\": \"#fixed-2\", \"top\": 200, \"left\": 200 },\n\t\t{ \"id\": \"#fixed-2\", \"top\":   0, \"left\":   0 },\n\t\t{ \"id\": \"#fixed-2\", \"top\":  -5, \"left\":  -5 }\n\t];\n\n\tjQuery.each( tests, function() {\n\t\tif ( window.supportsFixedPosition ) {\n\t\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t\t$( this ).css( {\n\t\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\t\"left\": props.left + 1\n\t\t\t\t} );\n\t\t\t} } );\n\t\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t\t} else {\n\n\t\t\t// need to have same number of assertions\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t}\n\t} );\n\n\t// Bug 8316\n\t$noTopLeft = $( \"#fixed-no-top-left\" );\n\tif ( window.supportsFixedPosition ) {\n\t\tassert.equal( $noTopLeft.offset().top,  1007,  \"Check offset top for fixed element with no top set\" );\n\t\tassert.equal( $noTopLeft.offset().left, 1007, \"Check offset left for fixed element with no left set\" );\n\t} else {\n\n\t\t// need to have same number of assertions\n\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t}\n} );\n\ntestIframe( \"table\", \"offset/table.html\", function( assert, $ ) {\n\tassert.expect( 4 );\n\n\tassert.equal( $( \"#table-1\" ).offset().top, 6, \"jQuery('#table-1').offset().top\" );\n\tassert.equal( $( \"#table-1\" ).offset().left, 6, \"jQuery('#table-1').offset().left\" );\n\n\tassert.equal( $( \"#th-1\" ).offset().top, 10, \"jQuery('#th-1').offset().top\" );\n\tassert.equal( $( \"#th-1\" ).offset().left, 10, \"jQuery('#th-1').offset().left\" );\n} );\n\ntestIframe( \"scroll\", \"offset/scroll.html\", function( assert, $, win ) {\n\tassert.expect( 26 );\n\n\tassert.equal( $( \"#scroll-1\" ).offset().top, 7, \"jQuery('#scroll-1').offset().top\" );\n\tassert.equal( $( \"#scroll-1\" ).offset().left, 7, \"jQuery('#scroll-1').offset().left\" );\n\n\tassert.equal( $( \"#scroll-1-1\" ).offset().top, 11, \"jQuery('#scroll-1-1').offset().top\" );\n\tassert.equal( $( \"#scroll-1-1\" ).offset().left, 11, \"jQuery('#scroll-1-1').offset().left\" );\n\n\t// These tests are solely for master/compat consistency\n\t// Retrieving offset on disconnected/hidden elements is not officially\n\t// valid input, but will return zeros for back-compat\n\tassert.equal( $( \"#hidden\" ).offset().top, 0, \"Hidden elements do not subtract scroll\" );\n\tassert.equal( $( \"#hidden\" ).offset().left, 0, \"Hidden elements do not subtract scroll\" );\n\n\t// scroll offset tests .scrollTop/Left\n\tassert.equal( $( \"#scroll-1\" ).scrollTop(), 5, \"jQuery('#scroll-1').scrollTop()\" );\n\tassert.equal( $( \"#scroll-1\" ).scrollLeft(), 5, \"jQuery('#scroll-1').scrollLeft()\" );\n\n\tassert.equal( $( \"#scroll-1-1\" ).scrollTop(), 0, \"jQuery('#scroll-1-1').scrollTop()\" );\n\tassert.equal( $( \"#scroll-1-1\" ).scrollLeft(), 0, \"jQuery('#scroll-1-1').scrollLeft()\" );\n\n\t// scroll method chaining\n\tassert.equal( $( \"#scroll-1\" ).scrollTop( undefined ).scrollTop(), 5, \".scrollTop(undefined) is chainable (#5571)\" );\n\tassert.equal( $( \"#scroll-1\" ).scrollLeft( undefined ).scrollLeft(), 5, \".scrollLeft(undefined) is chainable (#5571)\" );\n\n\twin.name = \"test\";\n\n\tif ( !window.supportsScroll ) {\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t} else {\n\t\tassert.equal( $( win ).scrollTop(), 1000, \"jQuery(window).scrollTop()\" );\n\t\tassert.equal( $( win ).scrollLeft(), 1000, \"jQuery(window).scrollLeft()\" );\n\n\t\tassert.equal( $( win.document ).scrollTop(), 1000, \"jQuery(document).scrollTop()\" );\n\t\tassert.equal( $( win.document ).scrollLeft(), 1000, \"jQuery(document).scrollLeft()\" );\n\t}\n\n\t// test jQuery using parent window/document\n\t// jQuery reference here is in the iframe\n\twindow.scrollTo( 0, 0 );\n\tassert.equal( $( window ).scrollTop(), 0, \"jQuery(window).scrollTop() other window\" );\n\tassert.equal( $( window ).scrollLeft(), 0, \"jQuery(window).scrollLeft() other window\" );\n\tassert.equal( $( document ).scrollTop(), 0, \"jQuery(window).scrollTop() other document\" );\n\tassert.equal( $( document ).scrollLeft(), 0, \"jQuery(window).scrollLeft() other document\" );\n\n\t// Tests scrollTop/Left with empty jquery objects\n\tassert.notEqual( $().scrollTop( 100 ), null, \"jQuery().scrollTop(100) testing setter on empty jquery object\" );\n\tassert.notEqual( $().scrollLeft( 100 ), null, \"jQuery().scrollLeft(100) testing setter on empty jquery object\" );\n\tassert.notEqual( $().scrollTop( null ), null, \"jQuery().scrollTop(null) testing setter on empty jquery object\" );\n\tassert.notEqual( $().scrollLeft( null ), null, \"jQuery().scrollLeft(null) testing setter on empty jquery object\" );\n\tassert.strictEqual( $().scrollTop(), undefined, \"jQuery().scrollTop() testing getter on empty jquery object\" );\n\tassert.strictEqual( $().scrollLeft(), undefined, \"jQuery().scrollLeft() testing getter on empty jquery object\" );\n} );\n\ntestIframe( \"body\", \"offset/body.html\", function( assert, $ ) {\n\tassert.expect( 4 );\n\n\tassert.equal( $( \"body\" ).offset().top, 1, \"jQuery('#body').offset().top\" );\n\tassert.equal( $( \"body\" ).offset().left, 1, \"jQuery('#body').offset().left\" );\n\tassert.equal( $( \"#firstElement\" ).position().left, 5, \"$('#firstElement').position().left\" );\n\tassert.equal( $( \"#firstElement\" ).position().top, 5, \"$('#firstElement').position().top\" );\n} );\n\nQUnit.test( \"chaining\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar coords = { \"top\":  1, \"left\":  1 };\n\tassert.equal( jQuery( \"#absolute-1\" ).offset( coords ).jquery, jQuery.fn.jquery, \"offset(coords) returns jQuery object\" );\n\tassert.equal( jQuery( \"#non-existent\" ).offset( coords ).jquery, jQuery.fn.jquery, \"offset(coords) with empty jQuery set returns jQuery object\" );\n\tassert.equal( jQuery( \"#absolute-1\" ).offset( undefined ).jquery, jQuery.fn.jquery, \"offset(undefined) returns jQuery object (#5571)\" );\n} );\n\n// Test complex content under a variety of <html>/<body> positioning styles\n( function() {\n\tvar POSITION_VALUES = [ \"static\", \"relative\", \"absolute\", \"fixed\" ],\n\n\t\t// Use shorthands for describing an element's relevant properties\n\t\tBOX_PROPS =\n\t\t\t( \"top left  marginTop marginLeft  borderTop borderLeft  paddingTop paddingLeft\" +\n\t\t\t\"  style  parent\" ).split( /\\s+/g ),\n\t\tprops = function() {\n\t\t\tvar propObj = {};\n\t\t\tsupportjQuery.each( arguments, function( i, value ) {\n\t\t\t\tpropObj[ BOX_PROPS[ i ] ] = value;\n\t\t\t} );\n\t\t\treturn propObj;\n\t\t},\n\n\t\t// Values must stay synchronized with test/data/offset/boxes.html\n\t\tdivProps = function( position, parentId ) {\n\t\t\treturn props( 8, 4,  16, 8,  4, 2,  32, 16,  position, parentId );\n\t\t},\n\t\thtmlProps = function( position ) {\n\t\t\treturn props( position === \"static\" ? 0 : 4096, position === \"static\" ? 0 : 2048,\n\t\t\t\t64, 32,  128, 64,  256, 128,  position );\n\t\t},\n\t\tbodyProps = function( position ) {\n\t\t\treturn props( position === \"static\" ? 0 : 8192, position === \"static\" ? 0 : 4096,\n\t\t\t\t512, 256,  1024, 512,  2048, 1024,  position,\n\t\t\t\tposition !== \"fixed\" && \"documentElement\" );\n\t\t};\n\n\tfunction getExpectations( htmlPos, bodyPos, scrollTop, scrollLeft ) {\n\n\t\t// Initialize data about page elements\n\t\tvar expectations = {\n\t\t\t\t\"documentElement\":   htmlProps( htmlPos ),\n\t\t\t\t\"body\":              bodyProps( bodyPos ),\n\t\t\t\t\"relative\":          divProps( \"relative\", \"body\" ),\n\t\t\t\t\"relative-relative\": divProps( \"relative\", \"relative\" ),\n\t\t\t\t\"relative-absolute\": divProps( \"absolute\", \"relative\" ),\n\t\t\t\t\"absolute\":          divProps( \"absolute\", \"body\" ),\n\t\t\t\t\"absolute-relative\": divProps( \"relative\", \"absolute\" ),\n\t\t\t\t\"absolute-absolute\": divProps( \"absolute\", \"absolute\" ),\n\t\t\t\t\"fixed\":             divProps( \"fixed\" ),\n\t\t\t\t\"fixed-relative\":    divProps( \"relative\", \"fixed\" ),\n\t\t\t\t\"fixed-absolute\":    divProps( \"absolute\", \"fixed\" )\n\t\t\t};\n\n\t\t// Define position and offset expectations for page elements\n\t\tsupportjQuery.each( expectations, function( id, props ) {\n\t\t\tvar parent = expectations[ props.parent ],\n\n\t\t\t\t// position() relates an element's margin box to its offset parent's padding box\n\t\t\t\tpos = props.pos = {\n\t\t\t\t\ttop: props.top,\n\t\t\t\t\tleft: props.left\n\t\t\t\t},\n\n\t\t\t\t// offset() relates an element's border box to the document origin\n\t\t\t\toffset = props.offset = {\n\t\t\t\t\ttop: pos.top + props.marginTop,\n\t\t\t\t\tleft: pos.left + props.marginLeft\n\t\t\t\t};\n\n\t\t\t// Account for ancestors differently by element position\n\t\t\t// fixed: ignore them\n\t\t\t// absolute: offset includes offsetParent offset+border\n\t\t\t// relative: position includes parent padding (and also position+margin+border when\n\t\t\t//   parent is not offsetParent); offset includes parent offset+border+padding\n\t\t\t// static: same as relative\n\t\t\tfor ( ; parent; parent = expectations[ parent.parent ] ) {\n\t\t\t\t// position:fixed\n\t\t\t\tif ( props.style === \"fixed\" ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// position:absolute bypass\n\t\t\t\tif ( props.style === \"absolute\" && parent.style === \"static\" ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Offset update\n\t\t\t\toffset.top += parent.offset.top + parent.borderTop;\n\t\t\t\toffset.left += parent.offset.left + parent.borderLeft;\n\t\t\t\tif ( props.style !== \"absolute\" ) {\n\t\t\t\t\toffset.top += parent.paddingTop;\n\t\t\t\t\toffset.left += parent.paddingLeft;\n\n\t\t\t\t\t// position:relative or position:static position update\n\t\t\t\t\tpos.top += parent.paddingTop;\n\t\t\t\t\tpos.left += parent.paddingLeft;\n\t\t\t\t\tif ( parent.style === \"static\" ) {\n\t\t\t\t\t\tpos.top += parent.pos.top + parent.marginTop + parent.borderTop;\n\t\t\t\t\t\tpos.left += parent.pos.left + parent.marginLeft + parent.borderLeft;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Viewport scroll affects position:fixed elements, except when the page is\n\t\t\t// unscrollable.\n\t\t\tif ( props.style === \"fixed\" &&\n\t\t\t\t( alwaysScrollable || expectations.documentElement.style !== \"fixed\" ) ) {\n\n\t\t\t\toffset.top += scrollTop;\n\t\t\t\toffset.left += scrollLeft;\n\t\t\t}\n\t\t} );\n\n\t\t// Support: IE<=10 only\n\t\t// Fudge the tests to work around <html>.gBCR() erroneously including margins\n\t\tif ( /MSIE (?:9|10)\\./.test( navigator.userAgent ) ) {\n\t\t\texpectations.documentElement.pos.top -= expectations.documentElement.marginTop -\n\t\t\t\tscrollTop;\n\t\t\texpectations.documentElement.offset.top -= expectations.documentElement.marginTop -\n\t\t\t\tscrollTop;\n\t\t\texpectations.documentElement.pos.left -= expectations.documentElement.marginLeft -\n\t\t\t\tscrollLeft;\n\t\t\texpectations.documentElement.offset.left -= expectations.documentElement.marginLeft -\n\t\t\t\tscrollLeft;\n\t\t\tif ( htmlPos !== \"static\" ) {\n\t\t\t\tdelete expectations.documentElement;\n\t\t\t\tdelete expectations.body;\n\t\t\t\tdelete expectations.relative;\n\t\t\t\tdelete expectations.absolute;\n\t\t\t}\n\t\t}\n\n\t\treturn expectations;\n\t}\n\n\t// Cover each combination of <html> position and <body> position\n\tsupportjQuery.each( POSITION_VALUES, function( _, htmlPos ) {\n\t\tsupportjQuery.each( POSITION_VALUES, function( _, bodyPos ) {\n\t\t\tvar label = \"nonzero box properties - html.\" + htmlPos + \" body.\" + bodyPos;\n\t\t\ttestIframe( label, \"offset/boxes.html\", function( assert, $, win, doc ) {\n\n\t\t\t\t// Define expectations at runtime to properly account for scrolling\n\t\t\t\tvar scrollTop = win.pageYOffset,\n\t\t\t\t\tscrollLeft = win.pageXOffset,\n\t\t\t\t\texpectations = getExpectations( htmlPos, bodyPos, scrollTop, scrollLeft );\n\n\t\t\t\tassert.expect( 3 * Object.keys( expectations ).length );\n\n\t\t\t\t// Setup documentElement and body styles, preserving scroll position\n\t\t\t\tdoc.documentElement.style.position = htmlPos;\n\t\t\t\tdoc.body.style.position = bodyPos;\n\t\t\t\twin.scrollTo( scrollLeft, scrollTop );\n\n\t\t\t\t// Verify expected document offset\n\t\t\t\tsupportjQuery.each( expectations, function( id, descriptor ) {\n\t\t\t\t\tassert.deepEqual(\n\t\t\t\t\t\tsupportjQuery.extend( {}, $( \"#\" + id ).offset() ),\n\t\t\t\t\t\tdescriptor.offset,\n\t\t\t\t\t\t\"jQuery('#\" + id + \"').offset(): top \" + descriptor.offset.top +\n\t\t\t\t\t\t\t\", left \" + descriptor.offset.left );\n\t\t\t\t} );\n\n\t\t\t\t// Verify expected relative position\n\t\t\t\tsupportjQuery.each( expectations, function( id, descriptor ) {\n\t\t\t\t\tassert.deepEqual(\n\t\t\t\t\t\tsupportjQuery.extend( {}, $( \"#\" + id ).position() ),\n\t\t\t\t\t\tdescriptor.pos,\n\t\t\t\t\t\t\"jQuery('#\" + id + \"').position(): top \" + descriptor.pos.top +\n\t\t\t\t\t\t\t\", left \" + descriptor.pos.left );\n\t\t\t\t} );\n\n\t\t\t\t// Verify that values round-trip\n\t\t\t\tsupportjQuery.each( Object.keys( expectations ).reverse(), function( _, id ) {\n\t\t\t\t\tvar $el = $( \"#\" + id ),\n\t\t\t\t\t\tpos = supportjQuery.extend( {}, $el.position() );\n\n\t\t\t\t\t$el.css( { top: pos.top, left: pos.left } );\n\t\t\t\t\tif ( $el.css( \"position\" ) === \"relative\" ) {\n\n\t\t\t\t\t\t// $relative.position() includes parent padding; switch to absolute\n\t\t\t\t\t\t// positioning so we don't double its effects.\n\t\t\t\t\t\t$el.css( { position: \"absolute\" } );\n\t\t\t\t\t}\n\t\t\t\t\tassert.deepEqual( supportjQuery.extend( {}, $el.position() ), pos,\n\t\t\t\t\t\t\"jQuery('#\" + id + \"').position() round-trips\" );\n\n\t\t\t\t\t// TODO Verify .offset(...)\n\t\t\t\t\t// assert.deepEqual( $el.offset( offset ).offset(), offset )\n\t\t\t\t\t// assert.deepEqual( $el.offset( adjustedOffset ).offset(), adjustedOffset )\n\t\t\t\t\t// assert.deepEqual( $new.offset( offset ).offset(), offset )\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\t} );\n} )();\n\nQUnit.test( \"offsetParent\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar body, header, div, area;\n\n\tbody = jQuery( \"body\" ).offsetParent();\n\tassert.equal( body.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( body[ 0 ], document.documentElement, \"The html element is the offsetParent of the body.\" );\n\n\theader = jQuery( \"#qunit\" ).offsetParent();\n\tassert.equal( header.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( header[ 0 ], document.documentElement, \"The html element is the offsetParent of #qunit.\" );\n\n\tjQuery( \"#qunit-fixture\" ).css( \"position\", \"absolute\" );\n\tdiv = jQuery( \"#nothiddendivchild\" ).offsetParent();\n\tassert.equal( div.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( div[ 0 ], document.getElementById( \"qunit-fixture\" ), \"The #qunit-fixture is the offsetParent of #nothiddendivchild.\" );\n\tjQuery( \"#qunit-fixture\" ).css( \"position\", \"\" );\n\n\tjQuery( \"#nothiddendiv\" ).css( \"position\", \"relative\" );\n\n\tdiv = jQuery( \"#nothiddendivchild\" ).offsetParent();\n\tassert.equal( div.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( div[ 0 ], jQuery( \"#nothiddendiv\" )[ 0 ], \"The div is the offsetParent.\" );\n\n\tdiv = jQuery( \"body, #nothiddendivchild\" ).offsetParent();\n\tassert.equal( div.length, 2, \"Two offsetParent found.\" );\n\tassert.equal( div[ 0 ], document.documentElement, \"The html element is the offsetParent of the body.\" );\n\tassert.equal( div[ 1 ], jQuery( \"#nothiddendiv\" )[ 0 ], \"The div is the offsetParent.\" );\n\n\tarea = jQuery( \"<map name=\\\"imgmap\\\"><area shape=\\\"rect\\\" coords=\\\"0,0,200,50\\\"></map>\" ).appendTo( \"body\" ).find( \"area\" );\n\tassert.equal( area.offsetParent()[ 0 ], document.documentElement, \"The html element is the offsetParent of a map area.\" );\n\tarea.remove();\n\n\tdiv = jQuery( \"<div>\" ).css( { \"position\": \"absolute\" } ).appendTo( \"body\" );\n\tassert.equal( div.offsetParent()[ 0 ], document.documentElement, \"Absolutely positioned div returns html as offset parent, see #12139\" );\n\tdiv.remove();\n} );\n\nQUnit.test( \"fractions (see #7730 and #7885)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( \"body\" ).append( \"<div id='fractions'/>\" );\n\n\tvar result,\n\t\texpected = { \"top\": 1000, \"left\": 1000 },\n\t\tdiv = jQuery( \"#fractions\" );\n\n\tdiv.css( {\n\t\t\"position\": \"absolute\",\n\t\t\"left\": \"1000.7432222px\",\n\t\t\"top\": \"1000.532325px\",\n\t\t\"width\": 100,\n\t\t\"height\": 100\n\t} );\n\n\tdiv.offset( expected );\n\n\tresult = div.offset();\n\n\t// Support: Chrome <=45 - 46\n\t// In recent Chrome these values differ a little.\n\tassert.ok( Math.abs( result.top - expected.top ) < 0.25, \"Check top within 0.25 of expected\" );\n\tassert.ok( Math.abs( result.left - expected.left ) < 0.25, \"Check left within 0.25 of expected\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"iframe scrollTop/Left (see gh-1945)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar ifDoc = jQuery( \"#iframe\" )[ 0 ].contentDocument;\n\n\t// Mobile Safari resize the iframe by its content meaning it's not possible to scroll\n\t// the iframe but only its parent element.\n\t// It seems (not confirmed) in android 4.0 it's not possible to scroll iframes from the code.\n\tif (\n\t\t/iphone os|ipad/i.test( navigator.userAgent ) ||\n\t\t/android 4\\.0/i.test( navigator.userAgent )\n\t) {\n\t\tassert.equal( true, true, \"Can't scroll iframes in this environment\" );\n\t\tassert.equal( true, true, \"Can't scroll iframes in this environment\" );\n\n\t} else {\n\n\t\t// Tests scrollTop/Left with iframes\n\t\tjQuery( \"#iframe\" ).css( \"width\", \"50px\" ).css( \"height\", \"50px\" );\n\t\tifDoc.write( \"<div style='width: 1000px; height: 1000px;'></div>\" );\n\n\t\tjQuery( ifDoc ).scrollTop( 200 );\n\t\tjQuery( ifDoc ).scrollLeft( 500 );\n\n\t\tassert.equal( jQuery( ifDoc ).scrollTop(), 200, \"$($('#iframe')[0].contentDocument).scrollTop()\" );\n\t\tassert.equal( jQuery( ifDoc ).scrollLeft(), 500, \"$($('#iframe')[0].contentDocument).scrollLeft()\" );\n\t}\n} );\n\n} )();\n", "QUnit.module( \"selector\", { afterEach: moduleTeardown } );\n\n/**\n * This test page is for selector tests that require jQuery in order to do the selection\n */\n\nQUnit.test( \"element\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar fixture = document.getElementById( \"qunit-fixture\" );\n\n\tassert.deepEqual( jQuery( \"p\", fixture ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a Node context.\" );\n\tassert.deepEqual( jQuery( \"p\", \"#qunit-fixture\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a selector context.\" );\n\tassert.deepEqual( jQuery( \"p\", jQuery( \"#qunit-fixture\" ) ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a jQuery object context.\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"p\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a context via .find().\" );\n\n\tassert.ok( jQuery( \"#length\" ).length, \"<input name=\\\"length\\\"> cannot be found under IE, see #945\" );\n\tassert.ok( jQuery( \"#lengthtest input\" ).length, \"<input name=\\\"length\\\"> cannot be found under IE, see #945\" );\n\n\t// #7533\n\tassert.equal( jQuery( \"<div id=\\\"A'B~C.D[E]\\\"><p>foo</p></div>\" ).find( \"p\" ).length, 1, \"Find where context root is a node and has an ID with CSS3 meta characters\" );\n} );\n\nQUnit.test( \"id\", function( assert ) {\n\tassert.expect( 26 );\n\n\tvar a;\n\n\tassert.t( \"ID Selector\", \"#body\", [ \"body\" ] );\n\tassert.t( \"ID Selector w/ Element\", \"body#body\", [ \"body\" ] );\n\tassert.t( \"ID Selector w/ Element\", \"ul#first\", [] );\n\tassert.t( \"ID selector with existing ID descendant\", \"#firstp #simon1\", [ \"simon1\" ] );\n\tassert.t( \"ID selector with non-existent descendant\", \"#firstp #foobar\", [] );\n\tassert.t( \"ID selector using UTF8\", \"#\u53f0\u5317Ta\u0301ibe\u030ci\", [ \"\u53f0\u5317Ta\u0301ibe\u030ci\" ] );\n\tassert.t( \"Multiple ID selectors using UTF8\", \"#\u53f0\u5317Ta\u0301ibe\u030ci, #\u53f0\u5317\", [ \"\u53f0\u5317Ta\u0301ibe\u030ci\", \"\u53f0\u5317\" ] );\n\tassert.t( \"Descendant ID selector using UTF8\", \"div #\u53f0\u5317\", [ \"\u53f0\u5317\" ] );\n\tassert.t( \"Child ID selector using UTF8\", \"form > #\u53f0\u5317\", [ \"\u53f0\u5317\" ] );\n\n\tassert.t( \"Escaped ID\", \"#foo\\\\:bar\", [ \"foo:bar\" ] );\n\tassert.t( \"Escaped ID\", \"#test\\\\.foo\\\\[5\\\\]bar\", [ \"test.foo[5]bar\" ] );\n\tassert.t( \"Descendant escaped ID\", \"div #foo\\\\:bar\", [ \"foo:bar\" ] );\n\tassert.t( \"Descendant escaped ID\", \"div #test\\\\.foo\\\\[5\\\\]bar\", [ \"test.foo[5]bar\" ] );\n\tassert.t( \"Child escaped ID\", \"form > #foo\\\\:bar\", [ \"foo:bar\" ] );\n\tassert.t( \"Child escaped ID\", \"form > #test\\\\.foo\\\\[5\\\\]bar\", [ \"test.foo[5]bar\" ] );\n\n\tassert.t( \"ID Selector, child ID present\", \"#form > #radio1\", [ \"radio1\" ] ); // bug #267\n\tassert.t( \"ID Selector, not an ancestor ID\", \"#form #first\", [] );\n\tassert.t( \"ID Selector, not a child ID\", \"#form > #option1a\", [] );\n\n\tassert.t( \"All Children of ID\", \"#foo > *\", [ \"sndp\", \"en\", \"sap\" ] );\n\tassert.t( \"All Children of ID with no children\", \"#firstUL > *\", [] );\n\n\ta = jQuery( \"<a id='backslash\\\\foo'></a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.t( \"ID Selector contains backslash\", \"#backslash\\\\\\\\foo\", [ \"backslash\\\\foo\" ] );\n\n\tassert.t( \"ID Selector on Form with an input that has a name of 'id'\", \"#lengthtest\", [ \"lengthtest\" ] );\n\n\tassert.t( \"ID selector with non-existent ancestor\", \"#asdfasdf #foobar\", [] ); // bug #986\n\n\tassert.t( \"Underscore ID\", \"#types_all\", [ \"types_all\" ] );\n\tassert.t( \"Dash ID\", \"#qunit-fixture\", [ \"qunit-fixture\" ] );\n\n\tassert.t( \"ID with weird characters in it\", \"#name\\\\+value\", [ \"name+value\" ] );\n} );\n\nQUnit.test( \"class\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.deepEqual( jQuery( \".blog\", document.getElementsByTagName( \"p\" ) ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n\tassert.deepEqual( jQuery( \".blog\", \"p\" ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n\tassert.deepEqual( jQuery( \".blog\", jQuery( \"p\" ) ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n\tassert.deepEqual( jQuery( \"p\" ).find( \".blog\" ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n} );\n\nQUnit.test( \"name\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar form;\n\n\tassert.t( \"Name selector\", \"input[name=action]\", [ \"text1\" ] );\n\tassert.t( \"Name selector with single quotes\", \"input[name='action']\", [ \"text1\" ] );\n\tassert.t( \"Name selector with double quotes\", \"input[name=\\\"action\\\"]\", [ \"text1\" ] );\n\n\tassert.t( \"Name selector for grouped input\", \"input[name='types[]']\", [ \"types_all\", \"types_anime\", \"types_movie\" ] );\n\n\tform = jQuery( \"<form><input name='id'/></form>\" ).appendTo( \"body\" );\n\tassert.equal( jQuery( \"input\", form[ 0 ] ).length, 1, \"Make sure that rooted queries on forms (with possible expandos) work.\" );\n\n\tform.remove();\n} );\n\nQUnit.test( \"selectors with comma\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar fixture = jQuery( \"<div><h2><span/></h2><div><p><span/></p><p/></div></div>\" );\n\n\tassert.equal( fixture.find( \"h2, div p\" ).filter( \"p\" ).length, 2, \"has to find two <p>\" );\n\tassert.equal( fixture.find( \"h2, div p\" ).filter( \"h2\" ).length, 1, \"has to find one <h2>\" );\n\tassert.equal( fixture.find( \"h2 , div p\" ).filter( \"p\" ).length, 2, \"has to find two <p>\" );\n\tassert.equal( fixture.find( \"h2 , div p\" ).filter( \"h2\" ).length, 1, \"has to find one <h2>\" );\n} );\n\nQUnit.test( \"child and adjacent\", function( assert ) {\n\tassert.expect( 27 );\n\n\tassert.t( \"Child\", \"p > a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child\", \"p> a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child\", \"p >a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child\", \"p>a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child w/ Class\", \"p > a.blog\", [ \"mark\", \"simon\" ] );\n\tassert.t( \"All Children\", \"code > *\", [ \"anchor1\", \"anchor2\" ] );\n\tassert.selectInFixture( \"All Grandchildren\", \"p > * > *\", [ \"anchor1\", \"anchor2\" ] );\n\tassert.t( \"Adjacent\", \"p + p\", [ \"ap\", \"en\", \"sap\" ] );\n\tassert.t( \"Adjacent\", \"p#firstp + p\", [ \"ap\" ] );\n\tassert.t( \"Adjacent\", \"p[lang=en] + p\", [ \"sap\" ] );\n\tassert.t( \"Adjacent\", \"a.GROUPS + code + a\", [ \"mark\" ] );\n\tassert.t( \"Element Preceded By\", \"#groups ~ a\", [ \"mark\" ] );\n\tassert.t( \"Element Preceded By\", \"#length ~ input\", [ \"idTest\" ] );\n\tassert.t( \"Element Preceded By\", \"#siblingfirst ~ em\", [ \"siblingnext\", \"siblingthird\" ] );\n\tassert.t( \"Element Preceded By (multiple)\", \"#siblingTest em ~ em ~ em ~ span\", [ \"siblingspan\" ] );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.t( \"Element Preceded By, Containing\", \"#liveHandlerOrder ~ div em:contains('1')\", [ \"siblingfirst\" ] );\n\t\tassert.t( \"Combinators are not skipped when mixing general and specific\", \"#siblingTest > em:contains('x') + em ~ span\", [] );\n\t\tassert.equal( jQuery( \"#listWithTabIndex li:eq(2) ~ li\" ).length, 1, \"Find by general sibling combinator (#8310)\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":contains not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":contains not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":eq not supported in selector-native\" );\n\t}\n\n\tassert.t( \"Multiple combinators selects all levels\", \"#siblingTest em *\", [ \"siblingchild\", \"siblinggrandchild\", \"siblinggreatgrandchild\" ] );\n\tassert.t( \"Multiple combinators selects all levels\", \"#siblingTest > em *\", [ \"siblingchild\", \"siblinggrandchild\", \"siblinggreatgrandchild\" ] );\n\tassert.t( \"Multiple sibling combinators doesn't miss general siblings\", \"#siblingTest > em:first-child + em ~ span\", [ \"siblingspan\" ] );\n\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).length, 1, \"Parent div for next test is found via ID (#8310)\" );\n\tassert.equal( jQuery( \"#__sizzle__\" ).length, 0, \"Make sure the temporary id assigned by sizzle is cleared out (#8310)\" );\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).length, 1, \"Parent div for previous test is still found via ID (#8310)\" );\n\n\tassert.t( \"Verify deep class selector\", \"div.blah > p > a\", [] );\n\tassert.t( \"No element deep selector\", \"div.foo > span > a\", [] );\n\tassert.t( \"Non-existent ancestors\", \".fototab > .thumbnails > a\", [] );\n} );\n\nQUnit.test( \"attributes\", function( assert ) {\n\tassert.expect( 54 );\n\n\tvar attrbad, div, withScript;\n\n\tassert.t( \"Find elements with a tabindex attribute\", \"[tabindex]\", [ \"listWithTabIndex\", \"foodWithNegativeTabIndex\", \"linkWithTabIndex\", \"linkWithNegativeTabIndex\", \"linkWithNoHrefWithTabIndex\", \"linkWithNoHrefWithNegativeTabIndex\" ] );\n\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture a[title]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists (case-insensitive)\", \"#qunit-fixture a[TITLE]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture *[title]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture [title]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture a[ title ]\", [ \"google\" ] );\n\n\tassert.t( \"Boolean attribute exists\", \"#select2 option[selected]\", [ \"option2d\" ] );\n\tassert.t( \"Boolean attribute equals\", \"#select2 option[selected='selected']\", [ \"option2d\" ] );\n\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[rel='bookmark']\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[rel='bookmark']\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[rel=bookmark]\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[href='http://www.google.com/']\", [ \"google\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[ rel = 'bookmark' ]\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals Number\", \"#qunit-fixture option[value='1']\", [ \"option1b\", \"option2b\", \"option3b\", \"option4b\", \"option5c\" ] );\n\tassert.t( \"Attribute Equals Number\", \"#qunit-fixture li[tabIndex='-1']\", [ \"foodWithNegativeTabIndex\" ] );\n\n\tdocument.getElementById( \"anchor2\" ).href = \"#2\";\n\tassert.t( \"href Attribute\", \"p a[href^='#']\", [ \"anchor2\" ] );\n\tassert.t( \"href Attribute\", \"p a[href*='#']\", [ \"simon1\", \"anchor2\" ] );\n\n\tassert.t( \"for Attribute\", \"form label[for]\", [ \"label-for\" ] );\n\tassert.t( \"for Attribute in form\", \"#form [for=action]\", [ \"label-for\" ] );\n\n\tassert.t( \"Attribute containing []\", \"input[name^='foo[']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name^='foo[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name*='[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name$='bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name$='[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name$='foo[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name*='foo[bar]']\", [ \"hidden2\" ] );\n\n\tassert.t( \"Multiple Attribute Equals\", \"#form input[type='radio'], #form input[type='hidden']\", [ \"radio1\", \"radio2\", \"hidden1\" ] );\n\tassert.t( \"Multiple Attribute Equals\", \"#form input[type='radio'], #form input[type=\\\"hidden\\\"]\", [ \"radio1\", \"radio2\", \"hidden1\" ] );\n\tassert.t( \"Multiple Attribute Equals\", \"#form input[type='radio'], #form input[type=hidden]\", [ \"radio1\", \"radio2\", \"hidden1\" ] );\n\n\tassert.t( \"Attribute selector using UTF8\", \"span[lang=\u4e2d\u6587]\", [ \"\u53f0\u5317\" ] );\n\n\tassert.t( \"Attribute Begins With\", \"a[href ^= 'http://www']\", [ \"google\", \"yahoo\" ] );\n\tassert.t( \"Attribute Ends With\", \"a[href $= 'org/']\", [ \"mark\" ] );\n\tassert.t( \"Attribute Contains\", \"a[href *= 'google']\", [ \"google\", \"groups\" ] );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.t( \"Empty values\", \"#select1 option[value!='']\", [ \"option1b\", \"option1c\", \"option1d\" ] );\n\t\tassert.t( \"Attribute Is Not Equal\", \"#ap a[hreflang!='en']\", [ \"google\", \"groups\", \"anchor1\" ] );\n\t\tassert.t( \"Select options via :selected\", \"#select1 option:selected\", [ \"option1a\" ] );\n\t\tassert.t( \"Select options via :selected\", \"#select2 option:selected\", [ \"option2d\" ] );\n\t\tassert.t( \"Select options via :selected\", \"#select3 option:selected\", [ \"option3b\", \"option3c\" ] );\n\t\tassert.t( \"Select options via :selected\", \"select[name='select2'] option:selected\", [ \"option2d\" ] );\n\t} else {\n\t\tassert.ok( \"skip\", \"!= not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \"!= not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t}\n\n\tassert.t( \"Empty values\", \"#select1 option[value='']\", [ \"option1a\" ] );\n\n\n\tassert.t( \"Grouped Form Elements\", \"input[name='foo[bar]']\", [ \"hidden2\" ] );\n\n\t// Make sure attribute value quoting works correctly. See jQuery #6093; #6428; #13894\n\t// Use seeded results to bypass querySelectorAll optimizations\n\tattrbad = jQuery(\n\t\t\"<input type='hidden' id='attrbad_space' name='foo bar'/>\" +\n\t\t\"<input type='hidden' id='attrbad_dot' value='2' name='foo.baz'/>\" +\n\t\t\"<input type='hidden' id='attrbad_brackets' value='2' name='foo[baz]'/>\" +\n\t\t\"<input type='hidden' id='attrbad_injection' data-attr='foo_baz&#39;]'/>\" +\n\t\t\"<input type='hidden' id='attrbad_quote' data-attr='&#39;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_backslash' data-attr='&#92;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_backslash_quote' data-attr='&#92;&#39;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_backslash_backslash' data-attr='&#92;&#92;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_unicode' data-attr='&#x4e00;'/>\"\n\t).appendTo( \"#qunit-fixture\" ).get();\n\n\tassert.t( \"Underscores don't need escaping\", \"input[id=types_all]\", [ \"types_all\" ] );\n\n\tassert.t( \"input[type=text]\", \"#form input[type=text]\", [ \"text1\", \"text2\", \"hidden2\", \"name\" ] );\n\tassert.t( \"input[type=search]\", \"#form input[type=search]\", [ \"search\" ] );\n\n\twithScript = supportjQuery( \"<div><span><script src=''/></span></div>\" );\n\tassert.ok( withScript.find( \"#moretests script[src]\" ).has( \"script\" ), \"script[src] (jQuery #13777)\" );\n\n\tdiv = document.getElementById( \"foo\" );\n\tassert.t( \"Object.prototype property \\\"constructor\\\" (negative)\", \"[constructor]\", [] );\n\tassert.t( \"Gecko Object.prototype property \\\"watch\\\" (negative)\", \"[watch]\", [] );\n\tdiv.setAttribute( \"constructor\", \"foo\" );\n\tdiv.setAttribute( \"watch\", \"bar\" );\n\tassert.t( \"Object.prototype property \\\"constructor\\\"\", \"[constructor='foo']\", [ \"foo\" ] );\n\tassert.t( \"Gecko Object.prototype property \\\"watch\\\"\", \"[watch='bar']\", [ \"foo\" ] );\n\n\tassert.t( \"Value attribute is retrieved correctly\", \"input[value=Test]\", [ \"text1\", \"text2\" ] );\n\n\tif ( jQuery.find.compile ) {\n\n\t\t// #12600\n\t\tassert.ok(\n\t\t\tjQuery( \"<select value='12600'><option value='option' selected='selected'></option><option value=''></option></select>\" )\n\t\t\t.prop( \"value\", \"option\" )\n\t\t\t.is( \":input[value='12600']\" ),\n\n\t\t\t\":input[value=foo] selects select by attribute\"\n\t\t);\n\t\tassert.ok( jQuery( \"<input type='text' value='12600'/>\" ).prop( \"value\", \"option\" ).is( \":input[value='12600']\" ),\n\t\t\t\":input[value=foo] selects text input by attribute\"\n\t\t);\n\t} else {\n\t\tassert.ok( \"skip\", \":input not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":input not supported in selector-native\" );\n\t}\n\n\n\t// #11115\n\tassert.ok( jQuery( \"<input type='checkbox' checked='checked'/>\" ).prop( \"checked\", false ).is( \"[checked]\" ),\n\t\t\"[checked] selects by attribute (positive)\"\n\t);\n\tassert.ok( !jQuery( \"<input type='checkbox'/>\" ).prop( \"checked\", true ).is( \"[checked]\" ),\n\t\t\"[checked] selects by attribute (negative)\"\n\t);\n} );\n\nQUnit.test( \"disconnected nodes\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div/>\" );\n\tassert.equal( $div.is( \"div\" ), true, \"Make sure .is('nodeName') works on disconnected nodes.\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"disconnected nodes\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $opt = jQuery( \"<option></option>\" ).attr( \"value\", \"whipit\" ).appendTo( \"#qunit-fixture\" ).detach();\n\tassert.equal( $opt.val(), \"whipit\", \"option value\" );\n\tassert.equal( $opt.is( \":selected\" ), false, \"unselected option\" );\n\t$opt.prop( \"selected\", true );\n\tassert.equal( $opt.is( \":selected\" ), true, \"selected option\" );\n} );\n\ntestIframe(\n\t\"attributes - jQuery.attr\",\n\t\"selector/html5_selector.html\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tassert.expect( 38 );\n\n\t\t/**\n\t\t * Returns an array of elements with the given IDs\n\t\t * q & t are added here for the iFrame's context\n\t\t */\n\t\tfunction q() {\n\t\t\tvar r = [],\n\t\t\t\ti = 0;\n\n\t\t\tfor ( ; i < arguments.length; i++ ) {\n\t\t\t\tr.push( document.getElementById( arguments[ i ] ) );\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\n\t\t/**\n\t\t * Asserts that a select matches the given IDs\n\t\t * @example t(\"Check for something\", \"//[a]\", [\"foo\", \"bar\"]);\n\t\t * @param {String} a - Assertion name\n\t\t * @param {String} b - Sizzle selector\n\t\t * @param {Array} c - Array of ids to construct what is expected\n\t\t */\n\t\tfunction t( a, b, c ) {\n\t\t\tvar f = jQuery( b ).get(),\n\t\t\t\ts = \"\",\n\t\t\t\ti = 0;\n\n\t\t\tfor ( ; i < f.length; i++ ) {\n\t\t\t\ts += ( s && \",\" ) + \"'\" + f[ i ].id + \"'\";\n\t\t\t}\n\n\t\t\tassert.deepEqual( f, q.apply( q, c ), a + \" (\" + b + \")\" );\n\t\t}\n\n\t\t// ====== All known boolean attributes, including html5 booleans ======\n\t\t// autobuffer, autofocus, autoplay, async, checked,\n\t\t// compact, controls, declare, defer, disabled,\n\t\t// formnovalidate, hidden, indeterminate (property only),\n\t\t// ismap, itemscope, loop, multiple, muted, nohref, noresize,\n\t\t// noshade, nowrap, novalidate, open, pubdate, readonly, required,\n\t\t// reversed, scoped, seamless, selected, truespeed, visible (skipping visible attribute, which is on a barprop object)\n\n\t\tt( \"Attribute Exists\", \"[autobuffer]\",     [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[autofocus]\",      [ \"text1\" ] );\n\t\tt( \"Attribute Exists\", \"[autoplay]\",       [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[async]\",          [ \"script1\" ] );\n\t\tt( \"Attribute Exists\", \"[checked]\",        [ \"check1\" ] );\n\t\tt( \"Attribute Exists\", \"[compact]\",        [ \"dl\" ] );\n\t\tt( \"Attribute Exists\", \"[controls]\",       [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[declare]\",        [ \"object1\" ] );\n\t\tt( \"Attribute Exists\", \"[defer]\",          [ \"script1\" ] );\n\t\tt( \"Attribute Exists\", \"[disabled]\",       [ \"check1\" ] );\n\t\tt( \"Attribute Exists\", \"[formnovalidate]\", [ \"form1\" ] );\n\t\tt( \"Attribute Exists\", \"[hidden]\",         [ \"div1\" ] );\n\t\tt( \"Attribute Exists\", \"[indeterminate]\",  [] );\n\t\tt( \"Attribute Exists\", \"[ismap]\",          [ \"img1\" ] );\n\t\tt( \"Attribute Exists\", \"[itemscope]\",      [ \"div1\" ] );\n\t\tt( \"Attribute Exists\", \"[loop]\",           [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[multiple]\",       [ \"select1\" ] );\n\t\tt( \"Attribute Exists\", \"[muted]\",          [ \"audio1\" ] );\n\t\tt( \"Attribute Exists\", \"[nohref]\",         [ \"area1\" ] );\n\t\tt( \"Attribute Exists\", \"[noresize]\",       [ \"textarea1\" ] );\n\t\tt( \"Attribute Exists\", \"[noshade]\",        [ \"hr1\" ] );\n\t\tt( \"Attribute Exists\", \"[nowrap]\",         [ \"td1\", \"div1\" ] );\n\t\tt( \"Attribute Exists\", \"[novalidate]\",     [ \"form1\" ] );\n\t\tt( \"Attribute Exists\", \"[open]\",           [ \"details1\" ] );\n\t\tt( \"Attribute Exists\", \"[pubdate]\",        [ \"article1\" ] );\n\t\tt( \"Attribute Exists\", \"[readonly]\",       [ \"text1\" ] );\n\t\tt( \"Attribute Exists\", \"[required]\",       [ \"text1\" ] );\n\t\tt( \"Attribute Exists\", \"[reversed]\",       [ \"ol1\" ] );\n\t\tt( \"Attribute Exists\", \"[scoped]\",         [ \"style1\" ] );\n\t\tt( \"Attribute Exists\", \"[seamless]\",       [ \"iframe1\" ] );\n\t\tt( \"Attribute Exists\", \"[selected]\",       [ \"option1\" ] );\n\t\tt( \"Attribute Exists\", \"[truespeed]\",      [ \"marquee1\" ] );\n\n\t\t// Enumerated attributes (these are not boolean content attributes)\n\t\tjQuery.expandedEach = jQuery.each;\n\t\tjQuery.expandedEach( [ \"draggable\", \"contenteditable\", \"aria-disabled\" ], function( i, val ) {\n\t\t\tt( \"Enumerated attribute\", \"[\" + val + \"]\", [ \"div1\" ] );\n\t\t} );\n\t\tt( \"Enumerated attribute\", \"[spellcheck]\", [ \"span1\" ] );\n\n\t\tt( \"tabindex selector does not retrieve all elements in IE6/7 (#8473)\",\n\t\t\t\"form, [tabindex]\", [ \"form1\", \"text1\" ] );\n\t\tt( \"Improperly named form elements do not interfere with form selections (#9570)\", \"form[name='formName']\", [ \"form1\" ] );\n\t}\n);\n\nQUnit.test( \"jQuery.contains\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar container = document.getElementById( \"nonnodes\" ),\n\t\telement = container.firstChild,\n\t\ttext = element.nextSibling,\n\t\tnonContained = container.nextSibling,\n\t\tdetached = document.createElement( \"a\" );\n\tassert.ok( element && element.nodeType === 1, \"preliminary: found element\" );\n\tassert.ok( text && text.nodeType === 3, \"preliminary: found text\" );\n\tassert.ok( nonContained, \"preliminary: found non-descendant\" );\n\tassert.ok( jQuery.contains( container, element ), \"child\" );\n\tassert.ok( jQuery.contains( container.parentNode, element ), \"grandchild\" );\n\tassert.ok( jQuery.contains( container, text ), \"text child\" );\n\tassert.ok( jQuery.contains( container.parentNode, text ), \"text grandchild\" );\n\tassert.ok( !jQuery.contains( container, container ), \"self\" );\n\tassert.ok( !jQuery.contains( element, container ), \"parent\" );\n\tassert.ok( !jQuery.contains( container, nonContained ), \"non-descendant\" );\n\tassert.ok( !jQuery.contains( container, document ), \"document\" );\n\tassert.ok( !jQuery.contains( container, document.documentElement ), \"documentElement (negative)\" );\n\tassert.ok( !jQuery.contains( container, null ), \"Passing null does not throw an error\" );\n\tassert.ok( jQuery.contains( document, document.documentElement ), \"documentElement (positive)\" );\n\tassert.ok( jQuery.contains( document, element ), \"document container (positive)\" );\n\tassert.ok( !jQuery.contains( document, detached ), \"document container (negative)\" );\n} );\n\nQUnit.test( \"jQuery.uniqueSort\", function( assert ) {\n\tassert.expect( 15 );\n\n\tfunction Arrayish( arr ) {\n\t\tvar i = this.length = arr.length;\n\t\twhile ( i-- ) {\n\t\t\tthis[ i ] = arr[ i ];\n\t\t}\n\t}\n\tArrayish.prototype = {\n\t\tslice: [].slice,\n\t\tsort: [].sort,\n\t\tsplice: [].splice\n\t};\n\n\tvar i, tests,\n\t\tdetached = [],\n\t\tbody = document.body,\n\t\tfixture = document.getElementById( \"qunit-fixture\" ),\n\t\tdetached1 = document.createElement( \"p\" ),\n\t\tdetached2 = document.createElement( \"ul\" ),\n\t\tdetachedChild = detached1.appendChild( document.createElement( \"a\" ) ),\n\t\tdetachedGrandchild = detachedChild.appendChild( document.createElement( \"b\" ) );\n\n\tfor ( i = 0; i < 12; i++ ) {\n\t\tdetached.push( document.createElement( \"li\" ) );\n\t\tdetached[ i ].id = \"detached\" + i;\n\t\tdetached2.appendChild( document.createElement( \"li\" ) ).id = \"detachedChild\" + i;\n\t}\n\n\ttests = {\n\t\t\"Empty\": {\n\t\t\tinput: [],\n\t\t\texpected: []\n\t\t},\n\t\t\"Single-element\": {\n\t\t\tinput: [ fixture ],\n\t\t\texpected: [ fixture ]\n\t\t},\n\t\t\"No duplicates\": {\n\t\t\tinput: [ fixture, body ],\n\t\t\texpected: [ body, fixture ]\n\t\t},\n\t\t\"Duplicates\": {\n\t\t\tinput: [ body, fixture, fixture, body ],\n\t\t\texpected: [ body, fixture ]\n\t\t},\n\t\t\"Detached\": {\n\t\t\tinput: detached.slice( 0 ),\n\t\t\texpected: detached.slice( 0 )\n\t\t},\n\t\t\"Detached children\": {\n\t\t\tinput: [\n\t\t\t\tdetached2.childNodes[ 0 ],\n\t\t\t\tdetached2.childNodes[ 1 ],\n\t\t\t\tdetached2.childNodes[ 2 ],\n\t\t\t\tdetached2.childNodes[ 3 ]\n\t\t\t],\n\t\t\texpected: [\n\t\t\t\tdetached2.childNodes[ 0 ],\n\t\t\t\tdetached2.childNodes[ 1 ],\n\t\t\t\tdetached2.childNodes[ 2 ],\n\t\t\t\tdetached2.childNodes[ 3 ]\n\t\t\t]\n\t\t},\n\t\t\"Attached/detached mixture\": {\n\t\t\tinput: [ detached1, fixture, detached2, document, detachedChild, body, detachedGrandchild ],\n\t\t\texpected: [ document, body, fixture ],\n\t\t\tlength: 3\n\t\t}\n\t};\n\n\tjQuery.each( tests, function( label, test ) {\n\t\tvar length = test.length || test.input.length;\n\t\tassert.deepEqual( jQuery.uniqueSort( test.input ).slice( 0, length ), test.expected, label + \" (array)\" );\n\t\tassert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).slice( 0, length ), test.expected, label + \" (quasi-array)\" );\n\t} );\n\n\tassert.strictEqual( jQuery.unique, jQuery.uniqueSort, \"jQuery.unique() is an alias for jQuery.uniqueSort()\" );\n} );\n\ntestIframe(\n\t\"Sizzle cache collides with multiple Sizzles on a page\",\n\t\"selector/sizzle_cache.html\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar $cached = window.$cached;\n\n\t\tassert.expect( 4 );\n\t\tassert.notStrictEqual( jQuery, $cached, \"Loaded two engines\" );\n\t\tassert.deepEqual( $cached( \".test a\" ).get(), [ document.getElementById( \"collision\" ) ], \"Select collision anchor with first sizzle\" );\n\t\tassert.equal( jQuery( \".evil a\" ).length, 0, \"Select nothing with second sizzle\" );\n\t\tassert.equal( jQuery( \".evil a\" ).length, 0, \"Select nothing again with second sizzle\" );\n\t}\n);\n\nQUnit.test( \"Iframe dispatch should not affect jQuery (#13936)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar loaded = false,\n\t\tthrown = false,\n\t\tiframe = document.getElementById( \"iframe\" ),\n\t\tiframeDoc = iframe.contentDocument || iframe.contentWindow.document,\n\t\tdone = assert.async();\n\n\tjQuery( iframe ).on( \"load\", function() {\n\t\tvar form;\n\n\t\ttry {\n\t\t\tiframeDoc = this.contentDocument || this.contentWindow.document;\n\t\t\tform = jQuery( \"#navigate\", iframeDoc )[ 0 ];\n\t\t} catch ( e ) {\n\t\t\tthrown = e;\n\t\t}\n\n\t\tif ( loaded ) {\n\t\t\tassert.strictEqual( thrown, false, \"No error thrown from post-reload jQuery call\" );\n\n\t\t\t// clean up\n\t\t\tjQuery( iframe ).off();\n\n\t\t\tdone();\n\t\t} else {\n\t\t\tloaded = true;\n\t\t\tform.submit();\n\t\t}\n\t} );\n\n\tiframeDoc.open();\n\tiframeDoc.write( \"<body><form id='navigate' action='?'></form></body>\" );\n\tiframeDoc.close();\n} );\n\nQUnit.test( \"Ensure escapeSelector exists (escape tests in Sizzle)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.escapeSelector( \"#foo.bar\" ), \"\\\\#foo\\\\.bar\", \"escapeSelector present\" );\n} );\n", "QUnit.module( \"traversing\", { afterEach: moduleTeardown } );\n\nQUnit.test( \"find(String)\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#foo\" ).find( \".blogTest\" ).text(), \"Yahoo\", \"Basic selector\" );\n} );\n\nQUnit.test( \"find(String) under non-elements\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar j = jQuery( \"#nonnodes\" ).contents();\n\tassert.equal( j.find( \"div\" ).length, 0, \"Check node,textnode,comment to find zero divs\" );\n\tassert.equal( j.find( \"div\" ).addBack().length, 3, \"Check node,textnode,comment to find zero divs, but preserves pushStack\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"find(leading combinator)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"> div\" ).get(), q( \"foo\", \"nothiddendiv\", \"moretests\", \"tabindex-tests\", \"liveHandlerOrder\", \"siblingTest\", \"fx-test-group\" ), \"find child elements\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"> #foo, > #moretests\" ).get(), q( \"foo\", \"moretests\" ), \"find child elements\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"> #foo > p\" ).get(), q( \"sndp\", \"en\", \"sap\" ), \"find child elements\" );\n\n\tassert.deepEqual( jQuery( \"#siblingTest, #siblingfirst\" ).find( \"+ *\" ).get(), q( \"siblingnext\", \"fx-test-group\" ), \"ensure document order\" );\n} );\n\nQUnit.test( \"find(node|jQuery object)\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar $foo = jQuery( \"#foo\" ),\n\t\t$blog = jQuery( \".blogTest\" ),\n\t\t$first = jQuery( \"#first\" ),\n\t\t$two = $blog.add( $first ),\n\t\t$twoMore = jQuery( \"#ap\" ).add( $blog ),\n\t\t$fooTwo = $foo.add( $blog );\n\n\tassert.equal( $foo.find( $blog ).text(), \"Yahoo\", \"Find with blog jQuery object\" );\n\tassert.equal( $foo.find( $blog[ 0 ] ).text(), \"Yahoo\", \"Find with blog node\" );\n\tassert.equal( $foo.find( $first ).length, 0, \"#first is not in #foo\" );\n\tassert.equal( $foo.find( $first[ 0 ] ).length, 0, \"#first not in #foo (node)\" );\n\tassert.deepEqual( $foo.find( $two ).get(), $blog.get(), \"Find returns only nodes within #foo\" );\n\tassert.deepEqual( $foo.find( $twoMore ).get(), $blog.get(), \"...regardless of order\" );\n\tassert.ok( $fooTwo.find( $blog ).is( \".blogTest\" ), \"Blog is part of the collection, but also within foo\" );\n\tassert.ok( $fooTwo.find( $blog[ 0 ] ).is( \".blogTest\" ), \"Blog is part of the collection, but also within foo(node)\" );\n\n\tassert.equal( $two.find( $foo ).length, 0, \"Foo is not in two elements\" );\n\tassert.equal( $two.find( $foo[ 0 ] ).length, 0, \"Foo is not in two elements(node)\" );\n\tassert.equal( $two.find( $first ).length, 0, \"first is in the collection and not within two\" );\n\tassert.equal( $two.find( $first ).length, 0, \"first is in the collection and not within two(node)\" );\n\n\tassert.equal( $two.find( $foo[ 0 ] ).addBack().length, 2, \"find preserves the pushStack, see #12009\" );\n} );\n\nQUnit.test( \"is(String|undefined)\", function( assert ) {\n\tassert.expect( 23 );\n\tassert.ok( jQuery( \"#form\" ).is( \"form\" ), \"Check for element: A form must be a form\" );\n\tassert.ok( !jQuery( \"#form\" ).is( \"div\" ), \"Check for element: A form is not a div\" );\n\tassert.ok( jQuery( \"#mark\" ).is( \".blog\" ), \"Check for class: Expected class 'blog'\" );\n\tassert.ok( !jQuery( \"#mark\" ).is( \".link\" ), \"Check for class: Did not expect class 'link'\" );\n\tassert.ok( jQuery( \"#simon\" ).is( \".blog.link\" ), \"Check for multiple classes: Expected classes 'blog' and 'link'\" );\n\tassert.ok( !jQuery( \"#simon\" ).is( \".blogTest\" ), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"en\\\"]\" ), \"Check for attribute: Expected attribute lang to be 'en'\" );\n\tassert.ok( !jQuery( \"#en\" ).is( \"[lang=\\\"de\\\"]\" ), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\" );\n\tassert.ok( jQuery( \"#text1\" ).is( \"[type=\\\"text\\\"]\" ), \"Check for attribute: Expected attribute type to be 'text'\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( \"[type=\\\"radio\\\"]\" ), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\" );\n\tassert.ok( jQuery( \"#text2\" ).is( \":disabled\" ), \"Check for pseudoclass: Expected to be disabled\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( \":disabled\" ), \"Check for pseudoclass: Expected not disabled\" );\n\tassert.ok( jQuery( \"#radio2\" ).is( \":checked\" ), \"Check for pseudoclass: Expected to be checked\" );\n\tassert.ok( !jQuery( \"#radio1\" ).is( \":checked\" ), \"Check for pseudoclass: Expected not checked\" );\n\n\tassert.ok( !jQuery( \"#foo\" ).is( 0 ), \"Expected false for an invalid expression - 0\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( null ), \"Expected false for an invalid expression - null\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( \"\" ), \"Expected false for an invalid expression - \\\"\\\"\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( undefined ), \"Expected false for an invalid expression - undefined\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( { plain: \"object\" } ), \"Check passing invalid object\" );\n\n\t// test is() with comma-separated expressions\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"en\\\"],[lang=\\\"de\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"de\\\"],[lang=\\\"en\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"en\\\"] , [lang=\\\"de\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"de\\\"] , [lang=\\\"en\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n} );\n\nQUnit.test( \"is() against non-elements (#10178)\", function( assert ) {\n\tassert.expect( 14 );\n\n\tvar label, i, test,\n\t\tcollection = jQuery( document ),\n\t\ttests = [ \"a\", \"*\" ],\n\t\tnonelements = {\n\t\t\ttext: document.createTextNode( \"\" ),\n\t\t\tcomment: document.createComment( \"\" ),\n\t\t\tdocument: document,\n\t\t\twindow: window,\n\t\t\tarray: [],\n\t\t\t\"plain object\": {},\n\t\t\t\"function\": function() {}\n\t\t};\n\n\tfor ( label in nonelements ) {\n\t\tcollection[ 0 ] = nonelements[ label ];\n\t\tfor ( i = 0; i < tests.length; i++ ) {\n\t\t\ttest = tests[ i ];\n\t\t\tassert.ok( !collection.is( test ), label + \" does not match \\\"\" + test + \"\\\"\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"is(jQuery)\", function( assert ) {\n\tassert.expect( 19 );\n\tassert.ok( jQuery( \"#form\" ).is( jQuery( \"form\" ) ), \"Check for element: A form is a form\" );\n\tassert.ok( !jQuery( \"#form\" ).is( jQuery( \"div\" ) ), \"Check for element: A form is not a div\" );\n\tassert.ok( jQuery( \"#mark\" ).is( jQuery( \".blog\" ) ), \"Check for class: Expected class 'blog'\" );\n\tassert.ok( !jQuery( \"#mark\" ).is( jQuery( \".link\" ) ), \"Check for class: Did not expect class 'link'\" );\n\tassert.ok( jQuery( \"#simon\" ).is( jQuery( \".blog.link\" ) ), \"Check for multiple classes: Expected classes 'blog' and 'link'\" );\n\tassert.ok( !jQuery( \"#simon\" ).is( jQuery( \".blogTest\" ) ), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\" );\n\tassert.ok( jQuery( \"#en\" ).is( jQuery( \"[lang=\\\"en\\\"]\" ) ), \"Check for attribute: Expected attribute lang to be 'en'\" );\n\tassert.ok( !jQuery( \"#en\" ).is( jQuery( \"[lang=\\\"de\\\"]\" ) ), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\" );\n\tassert.ok( jQuery( \"#text1\" ).is( jQuery( \"[type=\\\"text\\\"]\" ) ), \"Check for attribute: Expected attribute type to be 'text'\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( jQuery( \"[type=\\\"radio\\\"]\" ) ), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( jQuery( \"input:disabled\" ) ), \"Check for pseudoclass: Expected not disabled\" );\n\tassert.ok( jQuery( \"#radio2\" ).is( jQuery( \"input:checked\" ) ), \"Check for pseudoclass: Expected to be checked\" );\n\tassert.ok( !jQuery( \"#radio1\" ).is( jQuery( \"input:checked\" ) ), \"Check for pseudoclass: Expected not checked\" );\n\n\t// Some raw elements\n\tassert.ok( jQuery( \"#form\" ).is( jQuery( \"#qunit-fixture form\" )[ 0 ] ), \"Check for element: A form is a form\" );\n\tassert.ok( !jQuery( \"#form\" ).is( jQuery( \"div\" )[ 0 ] ), \"Check for element: A form is not a div\" );\n\tassert.ok( jQuery( \"#mark\" ).is( jQuery( \".blog\" )[ 0 ] ), \"Check for class: Expected class 'blog'\" );\n\tassert.ok( !jQuery( \"#mark\" ).is( jQuery( \".link\" )[ 0 ] ), \"Check for class: Did not expect class 'link'\" );\n\tassert.ok( jQuery( \"#simon\" ).is( jQuery( \".blog.link\" )[ 0 ] ), \"Check for multiple classes: Expected classes 'blog' and 'link'\" );\n\tassert.ok( !jQuery( \"#simon\" ).is( jQuery( \".blogTest\" )[ 0 ] ), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"is() with :has() selectors\", function( assert ) {\n\tassert.expect( 6 );\n\n\tassert.ok( jQuery( \"#foo\" ).is( \":has(p)\" ), \"Check for child: Expected a child 'p' element\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( \":has(ul)\" ), \"Check for child: Did not expect 'ul' element\" );\n\tassert.ok( jQuery( \"#foo\" ).is( \":has(p):has(a):has(code)\" ), \"Check for childs: Expected 'p', 'a' and 'code' child elements\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( \":has(p):has(a):has(code):has(ol)\" ), \"Check for childs: Expected 'p', 'a' and 'code' child elements, but no 'ol'\" );\n\n\tassert.ok( jQuery( \"#foo\" ).is( jQuery( \"div:has(p)\" ) ), \"Check for child: Expected a child 'p' element\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( jQuery( \"div:has(ul)\" ) ), \"Check for child: Did not expect 'ul' element\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"is() with positional selectors\", function( assert ) {\n\tassert.expect( 27 );\n\n\tvar\n\t\tposp = jQuery(\n\t\t\t\"<p id='posp'><a class='firsta' href='#'><em>first</em></a>\" +\n\t\t\t\"<a class='seconda' href='#'><b>test</b></a><em></em></p>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tisit = function( sel, match, expect ) {\n\t\t\tassert.equal(\n\t\t\t\tjQuery( sel ).is( match ),\n\t\t\t\texpect,\n\t\t\t\t\"jQuery('\" + sel + \"').is('\" + match + \"')\"\n\t\t\t);\n\t\t};\n\n\tisit( \"#posp\", \"p:last\", true );\n\tisit( \"#posp\", \"#posp:first\", true );\n\tisit( \"#posp\", \"#posp:eq(2)\", false );\n\tisit( \"#posp\", \"#posp a:first\", false );\n\n\tisit( \"#posp .firsta\", \"#posp a:first\", true );\n\tisit( \"#posp .firsta\", \"#posp a:last\", false );\n\tisit( \"#posp .firsta\", \"#posp a:even\", true );\n\tisit( \"#posp .firsta\", \"#posp a:odd\", false );\n\tisit( \"#posp .firsta\", \"#posp a:eq(0)\", true );\n\tisit( \"#posp .firsta\", \"#posp a:eq(9)\", false );\n\tisit( \"#posp .firsta\", \"#posp em:eq(0)\", false );\n\tisit( \"#posp .firsta\", \"#posp em:first\", false );\n\tisit( \"#posp .firsta\", \"#posp:first\", false );\n\n\tisit( \"#posp .seconda\", \"#posp a:first\", false );\n\tisit( \"#posp .seconda\", \"#posp a:last\", true );\n\tisit( \"#posp .seconda\", \"#posp a:gt(0)\", true );\n\tisit( \"#posp .seconda\", \"#posp a:lt(5)\", true );\n\tisit( \"#posp .seconda\", \"#posp a:lt(1)\", false );\n\n\tisit( \"#posp em\", \"#posp a:eq(0) em\", true );\n\tisit( \"#posp em\", \"#posp a:lt(1) em\", true );\n\tisit( \"#posp em\", \"#posp a:gt(1) em\", false );\n\tisit( \"#posp em\", \"#posp a:first em\", true );\n\tisit( \"#posp em\", \"#posp a em:last\", true );\n\tisit( \"#posp em\", \"#posp a em:eq(2)\", false );\n\n\tassert.ok( jQuery( \"#option1b\" ).is( \"#select1 option:not(:first)\" ), \"POS inside of :not() (#10970)\" );\n\n\tassert.ok( jQuery( posp[ 0 ] ).is( \"p:last\" ), \"context constructed from a single node (#13797)\" );\n\tassert.ok( !jQuery( posp[ 0 ] ).find( \"#firsta\" ).is( \"a:first\" ), \"context derived from a single node (#13797)\" );\n} );\n\nQUnit.test( \"index()\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery( \"#text2\" ).index(), 2, \"Returns the index of a child amongst its siblings\" );\n\n\tassert.equal( jQuery( \"<div/>\" ).index(), -1, \"Node without parent returns -1\" );\n} );\n\nQUnit.test( \"index(Object|String|undefined)\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar elements = jQuery( [ window, document ] ),\n\t\tinputElements = jQuery( \"#radio1,#radio2,#check1,#check2\" );\n\n\t// Passing a node\n\tassert.equal( elements.index( window ), 0, \"Check for index of elements\" );\n\tassert.equal( elements.index( document ), 1, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"radio1\" ) ), 0, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"radio2\" ) ), 1, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"check1\" ) ), 2, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"check2\" ) ), 3, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( window ), -1, \"Check for not found index\" );\n\tassert.equal( inputElements.index( document ), -1, \"Check for not found index\" );\n\n\t// Passing a jQuery object\n\t// enabled since [5500]\n\tassert.equal( elements.index( elements ), 0, \"Pass in a jQuery object\" );\n\tassert.equal( elements.index( elements.eq( 1 ) ), 1, \"Pass in a jQuery object\" );\n\tassert.equal( jQuery( \"#form input[type='radio']\" ).index( jQuery( \"#radio2\" ) ), 1, \"Pass in a jQuery object\" );\n\n\t// Passing a selector or nothing\n\t// enabled since [6330]\n\tassert.equal( jQuery( \"#text2\" ).index(), 2, \"Check for index amongst siblings\" );\n\tassert.equal( jQuery( \"#form\" ).children().eq( 4 ).index(), 4, \"Check for index amongst siblings\" );\n\tassert.equal( jQuery( \"#radio2\" ).index( \"#form input[type='radio']\" ), 1, \"Check for index within a selector\" );\n\tassert.equal( jQuery( \"#form input[type='radio']\" ).index( jQuery( \"#radio2\" ) ), 1, \"Check for index within a selector\" );\n\tassert.equal( jQuery( \"#radio2\" ).index( \"#form input[type='text']\" ), -1, \"Check for index not found within a selector\" );\n} );\n\nQUnit.test( \"filter(Selector|undefined)\", function( assert ) {\n\tassert.expect( 9 );\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( \":checked\" ).get(), q( \"radio2\", \"check1\" ), \"filter(String)\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( \"#ap, #sndp\" ).get(), q( \"ap\", \"sndp\" ), \"filter('String, String')\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( \"#ap,#sndp\" ).get(), q( \"ap\", \"sndp\" ), \"filter('String,String')\" );\n\n\tassert.deepEqual( jQuery( \"p\" ).filter( null ).get(),      [], \"filter(null) should return an empty jQuery object\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( undefined ).get(), [], \"filter(undefined) should return an empty jQuery object\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( 0 ).get(),         [], \"filter(0) should return an empty jQuery object\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( \"\" ).get(),        [], \"filter('') should return an empty jQuery object\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tvar j = jQuery( \"#nonnodes\" ).contents();\n\tassert.equal( j.filter( \"span\" ).length, 1, \"Check node,textnode,comment to filter the one span\" );\n\tassert.equal( j.filter( \"[name]\" ).length, 0, \"Check node,textnode,comment to filter the one span\" );\n} );\n\nQUnit.test( \"filter(Function)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).filter( function() {\n\t\treturn !jQuery( \"a\", this ).length;\n\t} ).get(), q( \"sndp\", \"first\" ), \"filter(Function)\" );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).filter( function( i, elem ) { return !jQuery( \"a\", elem ).length; } ).get(), q( \"sndp\", \"first\" ), \"filter(Function) using arg\" );\n} );\n\nQUnit.test( \"filter(Element)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar element = document.getElementById( \"text1\" );\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( element ).get(), q( \"text1\" ), \"filter(Element)\" );\n} );\n\nQUnit.test( \"filter(Array)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elements = [ document.getElementById( \"text1\" ) ];\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( elements ).get(), q( \"text1\" ), \"filter(Element)\" );\n} );\n\nQUnit.test( \"filter(jQuery)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elements = jQuery( \"#text1\" );\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( elements ).get(), q( \"text1\" ), \"filter(Element)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"filter() with positional selectors\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar filterit = function( sel, filter, length ) {\n\t\tassert.equal( jQuery( sel ).filter( filter ).length, length, \"jQuery( \" + sel + \" ).filter( \" + filter + \" )\" );\n\t};\n\n\tjQuery( \"\" +\n\t\t\"<p id='posp'>\" +\n\t\t\t\"<a class='firsta' href='#'>\" +\n\t\t\t\t\"<em>first</em>\" +\n\t\t\t\"</a>\" +\n\t\t\t\"<a class='seconda' href='#'>\" +\n\t\t\t\t\"<b>test</b>\" +\n\t\t\t\"</a>\" +\n\t\t\t\"<em></em>\" +\n\t\t\"</p>\" ).appendTo( \"#qunit-fixture\" );\n\n\tfilterit( \"#posp\", \"#posp:first\", 1 );\n\tfilterit( \"#posp\", \"#posp:eq(2)\", 0 );\n\tfilterit( \"#posp\", \"#posp a:first\", 0 );\n\n\t// Keep in mind this is within the selection and\n\t// not in relation to other elements (.is() is a different story)\n\tfilterit( \"#posp .firsta\", \"#posp a:first\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:last\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:last-child\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp a:even\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:odd\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp a:eq(0)\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:eq(9)\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp em:eq(0)\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp em:first\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp:first\", 0 );\n\n\tfilterit( \"#posp .seconda\", \"#posp a:first\", 1 );\n\tfilterit( \"#posp .seconda\", \"#posp em:first\", 0 );\n\tfilterit( \"#posp .seconda\", \"#posp a:last\", 1 );\n\tfilterit( \"#posp .seconda\", \"#posp a:gt(0)\", 0 );\n\tfilterit( \"#posp .seconda\", \"#posp a:lt(5)\", 1 );\n\tfilterit( \"#posp .seconda\", \"#posp a:lt(1)\", 1 );\n} );\n\nQUnit.test( \"closest()\", function( assert ) {\n\tassert.expect( 14 );\n\n\tvar jq;\n\n\tassert.deepEqual( jQuery( \"body\" ).closest( \"body\" ).get(), q( \"body\" ), \"closest(body)\" );\n\tassert.deepEqual( jQuery( \"body\" ).closest( \"html\" ).get(), q( \"html\" ), \"closest(html)\" );\n\tassert.deepEqual( jQuery( \"body\" ).closest( \"div\" ).get(), [], \"closest(div)\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).closest( \"span,#html\" ).get(), q( \"html\" ), \"closest(span,#html)\" );\n\n\t// Test .closest() limited by the context\n\tjq = jQuery( \"#nothiddendivchild\" );\n\tassert.deepEqual( jq.closest( \"html\", document.body ).get(), [], \"Context limited.\" );\n\tassert.deepEqual( jq.closest( \"body\", document.body ).get(), [], \"Context limited.\" );\n\tassert.deepEqual( jq.closest( \"#nothiddendiv\", document.body ).get(), q( \"nothiddendiv\" ), \"Context not reached.\" );\n\n\t//Test that .closest() returns unique'd set\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).closest( \"#qunit-fixture\" ).length, 1, \"Closest should return a unique set\" );\n\n\t// Test on disconnected node\n\tassert.equal( jQuery( \"<div><p></p></div>\" ).find( \"p\" ).closest( \"table\" ).length, 0, \"Make sure disconnected closest work.\" );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#firstp\" ).closest( q( \"qunit-fixture\" ) ).get(),\n\t\tq( \"qunit-fixture\" ),\n\t\t\"Non-string match target\"\n\t);\n\n\t// Bug #7369\n\tassert.equal( jQuery( \"<div foo='bar'></div>\" ).closest( \"[foo]\" ).length, 1, \"Disconnected nodes with attribute selector\" );\n\tassert.equal( jQuery( \"<div>text</div>\" ).closest( \"[lang]\" ).length, 0, \"Disconnected nodes with text and non-existent attribute selector\" );\n\n\tassert.ok( !jQuery( document ).closest( \"#foo\" ).length, \"Calling closest on a document fails silently\" );\n\n\tjq = jQuery( \"<div>text</div>\" );\n\tassert.deepEqual( jq.contents().closest( \"*\" ).get(), jq.get(), \"Text node input (#13332)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"closest() with positional selectors\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).closest( \"div:first\" ).get(), [],\n\t\t\"closest(div:first)\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture div\" ).closest( \"body:first div:last\" ).get(), [],\n\t\t\"closest(body:first div:last)\" );\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture div\" ).closest( \"body:first div:last\", document ).get(),\n\t\t[],\n\t\t\"closest(body:first div:last, document)\"\n\t);\n} );\n\nQUnit.test( \"closest(jQuery)\", function( assert ) {\n\tassert.expect( 8 );\n\tvar $child = jQuery( \"#nothiddendivchild\" ),\n\t\t$parent = jQuery( \"#nothiddendiv\" ),\n\t\t$sibling = jQuery( \"#foo\" ),\n\t\t$body = jQuery( \"body\" );\n\tassert.ok( $child.closest( $parent ).is( \"#nothiddendiv\" ), \"closest( jQuery('#nothiddendiv') )\" );\n\tassert.ok( $child.closest( $parent[ 0 ] ).is( \"#nothiddendiv\" ), \"closest( jQuery('#nothiddendiv') ) :: node\" );\n\tassert.ok( $child.closest( $child ).is( \"#nothiddendivchild\" ), \"child is included\" );\n\tassert.ok( $child.closest( $child[ 0 ] ).is( \"#nothiddendivchild\" ), \"child is included  :: node\" );\n\tassert.equal( $child.closest( document.createElement( \"div\" ) ).length, 0, \"created element is not related\" );\n\tassert.equal( $child.closest( $sibling ).length, 0, \"Sibling not a parent of child\" );\n\tassert.equal( $child.closest( $sibling[ 0 ] ).length, 0, \"Sibling not a parent of child :: node\" );\n\tassert.ok( $child.closest( $body.add( $parent ) ).is( \"#nothiddendiv\" ), \"Closest ancestor retrieved.\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"not(Selector)\", function( assert ) {\n\tassert.expect( 7 );\n\tassert.equal( jQuery( \"#qunit-fixture > p#ap > a\" ).not( \"#google\" ).length, 2, \"not('selector')\" );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture p\" ).not( \".result\" ).get(),\n\t\tq(\n\t\t\t\"firstp\",\n\t\t\t\"ap\",\n\t\t\t\"sndp\",\n\t\t\t\"en\",\n\t\t\t\"sap\",\n\t\t\t\"first\"\n\t\t),\n\t\t\"not('.class')\"\n\t);\n\n\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture p\" ).not( \"#ap, #sndp, .result\" ).get(),\n\t\tq(\n\t\t\t\"firstp\",\n\t\t\t\"en\",\n\t\t\t\"sap\",\n\t\t\t\"first\"\n\t\t),\n\t\t\"not('selector, selector')\"\n\t);\n\n\tassert.deepEqual( jQuery( \"#ap *\" ).not( \"code\" ).get(), q( \"google\", \"groups\", \"anchor1\", \"mark\" ), \"not('tag selector')\" );\n\tassert.deepEqual( jQuery( \"#ap *\" ).not( \"code, #mark\" ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"not('tag, ID selector')\" );\n\tassert.deepEqual( jQuery( \"#ap *\" ).not( \"#mark, code\" ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"not('ID, tag selector')\" );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#form option\" ).not( \"option.emptyopt:contains('Nothing'),optgroup *,[value='1']\" ).get(),\n\t\tq( \"option1c\", \"option1d\", \"option2c\", \"option2d\", \"option3c\", \"option3d\", \"option3e\", \"option4d\", \"option4e\", \"option5a\", \"option5b\" ),\n\t\t\"not('complex selector')\"\n\t);\n} );\n\nQUnit.test( \"not(undefined)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar all = jQuery( \"p\" ).get();\n\tassert.deepEqual( jQuery( \"p\" ).not( null ).get(),      all, \"not(null) should have no effect\" );\n\tassert.deepEqual( jQuery( \"p\" ).not( undefined ).get(), all, \"not(undefined) should have no effect\" );\n\tassert.deepEqual( jQuery( \"p\" ).not( 0 ).get(),         all, \"not(0) should have no effect\" );\n\tassert.deepEqual( jQuery( \"p\" ).not( \"\" ).get(),        all, \"not('') should have no effect\" );\n} );\n\nQUnit.test( \"not(Element)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar selects = jQuery( \"#form select\" );\n\tassert.deepEqual( selects.not( selects[ 1 ] ).get(), q( \"select1\", \"select3\", \"select4\", \"select5\" ), \"filter out DOM element\" );\n} );\n\nQUnit.test( \"not(Function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).not( function() { return jQuery( \"a\", this ).length; } ).get(), q( \"sndp\", \"first\" ), \"not(Function)\" );\n} );\n\nQUnit.test( \"not(Array)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery( \"#qunit-fixture > p#ap > a\" ).not( document.getElementById( \"google\" ) ).length, 2, \"not(DOMElement)\" );\n\tassert.equal( jQuery( \"p\" ).not( document.getElementsByTagName( \"p\" ) ).length, 0, \"not(Array-like DOM collection)\" );\n} );\n\nQUnit.test( \"not(jQuery)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture p\" ).not( jQuery( \"#ap, #sndp, .result\" ) ).get(),\n\t\tq( \"firstp\", \"en\", \"sap\", \"first\" ),\n\t\t\"not(jQuery)\"\n\t);\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"not(Selector) excludes non-element nodes (gh-2808)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar mixedContents = jQuery( \"#nonnodes\" ).contents(),\n\t\tchildElements = q( \"nonnodesElement\" );\n\n\tassert.deepEqual( mixedContents.not( \"*\" ).get(), [], \"not *\" );\n\tassert.deepEqual( mixedContents.not( \"[id=a],[id=b]\" ).get(), childElements, \"not [id=a],[id=b]\" );\n\tassert.deepEqual( mixedContents.not( \"[id=a],*,[id=b]\" ).get(), [], \"not [id=a],*,[id=b]\" );\n} );\n\nQUnit.test( \"not(arraylike) passes non-element nodes (gh-3226)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar mixedContents = jQuery( \"<span id='nonnodesElement'>hi</span> there <!-- mon ami -->\" ),\n\t\tmixedLength = mixedContents.length,\n\t\tfirstElement = mixedContents.first();\n\n\tassert.deepEqual( mixedContents.not( mixedContents ).get(), [], \"not everything\" );\n\tassert.deepEqual( mixedContents.not( firstElement ).length, mixedLength - 1, \"not firstElement\" );\n\tassert.deepEqual( mixedContents.not( [ firstElement[ 0 ].nextSibling ] ).length, mixedLength - 1, \"not textnode array\" );\n\tassert.deepEqual( mixedContents.not( firstElement[ 0 ].nextSibling ).length, mixedLength - 1, \"not textnode\" );\n\tassert.deepEqual( mixedContents.not( document.body ).get(), mixedContents.get(), \"not with unmatched element\" );\n} );\n\nQUnit.test( \"has(Element)\", function( assert ) {\n\tassert.expect( 3 );\n\tvar obj, detached, multipleParent;\n\n\tobj = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" )[ 0 ] );\n\tassert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have the element as a descendant\" );\n\n\tdetached = jQuery( \"<a><b><i/></b></a>\" );\n\tassert.deepEqual( detached.has( detached.find( \"i\" )[ 0 ] ).get(), detached.get(), \"...Even when detached\" );\n\n\tmultipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" )[ 0 ] );\n\tassert.deepEqual( multipleParent.get(), q( \"qunit-fixture\" ), \"Does not include elements that do not have the element as a descendant\" );\n} );\n\nQUnit.test( \"has(Selector)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar obj, detached, multipleParent, multipleHas;\n\n\tobj = jQuery( \"#qunit-fixture\" ).has( \"#sndp\" );\n\tassert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element matching the selector as a descendant\" );\n\n\tdetached = jQuery( \"<a><b><i/></b></a>\" );\n\tassert.deepEqual( detached.has( \"i\" ).get(), detached.get(), \"...Even when detached\" );\n\n\tmultipleParent = jQuery( \"#qunit-fixture, #header\" ).has( \"#sndp\" );\n\tassert.deepEqual( multipleParent.get(), q( \"qunit-fixture\" ), \"Does not include elements that do not have the element as a descendant\" );\n\n\tmultipleParent = jQuery( \"#select1, #select2, #select3\" ).has( \"#option1a, #option3a\" );\n\tassert.deepEqual( multipleParent.get(), q( \"select1\", \"select3\" ), \"Multiple contexts are checks correctly\" );\n\n\tmultipleHas = jQuery( \"#qunit-fixture\" ).has( \"#sndp, #first\" );\n\tassert.deepEqual( multipleHas.get(), q( \"qunit-fixture\" ), \"Only adds elements once\" );\n} );\n\nQUnit.test( \"has(Arrayish)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar simple, detached, multipleParent, multipleHas;\n\n\tsimple = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" ) );\n\tassert.deepEqual( simple.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element in the jQuery list as a descendant\" );\n\n\tdetached = jQuery( \"<a><b><i/></b></a>\" );\n\tassert.deepEqual( detached.has( detached.find( \"i\" ) ).get(), detached.get(), \"...Even when detached\" );\n\n\tmultipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" ) );\n\tassert.deepEqual( multipleParent.get(), q( \"qunit-fixture\" ), \"Does not include elements that do not have an element in the jQuery list as a descendant\" );\n\n\tmultipleHas = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp, #first\" ) );\n\tassert.deepEqual( multipleHas.get(), q( \"qunit-fixture\" ), \"Only adds elements once\" );\n} );\n\nQUnit.test( \"addBack()\", function( assert ) {\n\tassert.expect( 5 );\n\tassert.deepEqual( jQuery( \"#en\" ).siblings().addBack().get(), q( \"sndp\", \"en\", \"sap\" ), \"Check for siblings and self\" );\n\tassert.deepEqual( jQuery( \"#foo\" ).children().addBack().get(), q( \"foo\", \"sndp\", \"en\", \"sap\" ), \"Check for children and self\" );\n\tassert.deepEqual( jQuery( \"#sndp, #en\" ).parent().addBack().get(), q( \"foo\", \"sndp\", \"en\" ), \"Check for parent and self\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parents( \"p, div\" ).addBack().get(), q( \"qunit-fixture\", \"ap\", \"groups\" ), \"Check for parents and self\" );\n\tassert.deepEqual( jQuery( \"#select1 > option\" ).filter( \":first-child\" ).addBack( \":last-child\" ).get(), q( \"option1a\", \"option1d\" ), \"Should contain the last elems plus the *filtered* prior set elements\" );\n} );\n\nQUnit.test( \"siblings([String])\", function( assert ) {\n\tassert.expect( 6 );\n\tassert.deepEqual( jQuery( \"#en\" ).siblings().get(), q( \"sndp\", \"sap\" ), \"Check for siblings\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).siblings().get(), q( \"nonnodesElement\" ), \"Check for text node siblings\" );\n\tassert.deepEqual( jQuery( \"#foo\" ).siblings( \"form, b\" ).get(), q( \"form\", \"floatTest\", \"lengthtest\", \"name-tests\", \"testForm\" ), \"Check for multiple filters\" );\n\n\tvar set = q( \"sndp\", \"en\", \"sap\" );\n\tassert.deepEqual( jQuery( \"#en, #sndp\" ).siblings().get(), set, \"Check for unique results from siblings\" );\n\tassert.deepEqual( jQuery( \"#option5a\" ).siblings( \"option[data-attr]\" ).get(), q( \"option5c\" ), \"Has attribute selector in siblings (#9261)\" );\n\tassert.equal( jQuery( \"<a/>\" ).siblings().length, 0, \"Detached elements have no siblings (#11370)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"siblings([String])\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.deepEqual( jQuery( \"#sndp\" ).siblings( \":has(code)\" ).get(), q( \"sap\" ), \"Check for filtered siblings (has code child element)\" );\n\tassert.deepEqual( jQuery( \"#sndp\" ).siblings( \":has(a)\" ).get(), q( \"en\", \"sap\" ), \"Check for filtered siblings (has anchor child element)\" );\n} );\n\nQUnit.test( \"children([String])\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.deepEqual( jQuery( \"#foo\" ).children().get(), q( \"sndp\", \"en\", \"sap\" ), \"Check for children\" );\n\tassert.deepEqual( jQuery( \"#foo\" ).children( \"#en, #sap\" ).get(), q( \"en\", \"sap\" ), \"Check for multiple filters\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"children([String])\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#foo\" ).children( \":has(code)\" ).get(), q( \"sndp\", \"sap\" ), \"Check for filtered children\" );\n} );\n\nQUnit.test( \"parent([String])\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar $el;\n\n\tassert.equal( jQuery( \"#groups\" ).parent()[ 0 ].id, \"ap\", \"Simple parent check\" );\n\tassert.equal( jQuery( \"#groups\" ).parent( \"p\" )[ 0 ].id, \"ap\", \"Filtered parent check\" );\n\tassert.equal( jQuery( \"#groups\" ).parent( \"div\" ).length, 0, \"Filtered parent check, no match\" );\n\tassert.equal( jQuery( \"#groups\" ).parent( \"div, p\" )[ 0 ].id, \"ap\", \"Check for multiple filters\" );\n\tassert.deepEqual( jQuery( \"#en, #sndp\" ).parent().get(), q( \"foo\" ), \"Check for unique results from parent\" );\n\n\t$el = jQuery( \"<div>text</div>\" );\n\tassert.deepEqual( $el.contents().parent().get(), $el.get(), \"Check for parent of text node (#13265)\" );\n} );\n\nQUnit.test( \"parents([String])\", function( assert ) {\n\tassert.expect( 6 );\n\tassert.equal( jQuery( \"#groups\" ).parents()[ 0 ].id, \"ap\", \"Simple parents check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).parents().eq( 0 ).get(), q( \"nonnodes\" ), \"Text node parents check\" );\n\tassert.equal( jQuery( \"#groups\" ).parents( \"p\" )[ 0 ].id, \"ap\", \"Filtered parents check\" );\n\tassert.equal( jQuery( \"#groups\" ).parents( \"div\" )[ 0 ].id, \"qunit-fixture\", \"Filtered parents check2\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parents( \"p, div\" ).get(), q( \"ap\", \"qunit-fixture\" ), \"Check for multiple filters\" );\n\tassert.deepEqual( jQuery( \"#en, #sndp\" ).parents().get(), q( \"foo\", \"qunit-fixture\", \"body\", \"html\" ), \"Check for unique results from parents\" );\n} );\n\nQUnit.test( \"parentsUntil([String])\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar parents = jQuery( \"#groups\" ).parents();\n\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil().get(), parents.get(), \"parentsUntil with no selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \".foo\" ).get(), parents.get(), \"parentsUntil with invalid selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html\" ).get(), parents.slice( 0, -1 ).get(), \"Simple parentsUntil check\" );\n\tassert.equal( jQuery( \"#groups\" ).parentsUntil( \"#ap\" ).length, 0, \"Simple parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).parentsUntil( \"#html\" ).eq( 0 ).get(), q( \"nonnodes\" ), \"Text node parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html, #body\" ).get(), parents.slice( 0, 2 ).get(), \"Less simple parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html\", \"div\" ).get(), jQuery( \"#qunit-fixture\" ).get(), \"Filtered parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html\", \"p,div\" ).get(), parents.slice( 0, 2 ).get(), \"Multiple-filtered parentsUntil check\" );\n\tassert.equal( jQuery( \"#groups\" ).parentsUntil( \"#html\", \"span\" ).length, 0, \"Filtered parentsUntil check, no match\" );\n\tassert.deepEqual( jQuery( \"#groups, #ap\" ).parentsUntil( \"#html\", \"p,div\" ).get(), parents.slice( 0, 2 ).get(), \"Multi-source, multiple-filtered parentsUntil check\" );\n} );\n\nQUnit.test( \"next([String])\", function( assert ) {\n\tassert.expect( 6 );\n\tassert.equal( jQuery( \"#ap\" ).next()[ 0 ].id, \"foo\", \"Simple next check\" );\n\tassert.equal( jQuery( \"<div>text<a id='element'></a></div>\" ).contents().eq( 0 ).next().attr( \"id\" ), \"element\", \"Text node next check\" );\n\tassert.equal( jQuery( \"#ap\" ).next( \"div\" )[ 0 ].id, \"foo\", \"Filtered next check\" );\n\tassert.equal( jQuery( \"#ap\" ).next( \"p\" ).length, 0, \"Filtered next check, no match\" );\n\tassert.equal( jQuery( \"#ap\" ).next( \"div, p\" )[ 0 ].id, \"foo\", \"Multiple filters\" );\n\tassert.equal( jQuery( \"body\" ).next().length, 0, \"Simple next check, no match\" );\n} );\n\nQUnit.test( \"prev([String])\", function( assert ) {\n\tassert.expect( 5 );\n\tassert.equal( jQuery( \"#foo\" ).prev()[ 0 ].id, \"ap\", \"Simple prev check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).prev().get(), q( \"nonnodesElement\" ), \"Text node prev check\" );\n\tassert.equal( jQuery( \"#foo\" ).prev( \"p\" )[ 0 ].id, \"ap\", \"Filtered prev check\" );\n\tassert.equal( jQuery( \"#foo\" ).prev( \"div\" ).length, 0, \"Filtered prev check, no match\" );\n\tassert.equal( jQuery( \"#foo\" ).prev( \"p, div\" )[ 0 ].id, \"ap\", \"Multiple filters\" );\n} );\n\nQUnit.test( \"nextAll([String])\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar elems = jQuery( \"#form\" ).children();\n\n\tassert.deepEqual( jQuery( \"#label-for\" ).nextAll().get(), elems.slice( 1 ).get(), \"Simple nextAll check\" );\n\tassert.equal( jQuery( \"<div>text<a id='element'></a></div>\" ).contents().eq( 0 ).nextAll().attr( \"id\" ), \"element\", \"Text node nextAll check\" );\n\tassert.deepEqual( jQuery( \"#label-for\" ).nextAll( \"input\" ).get(), elems.slice( 1 ).filter( \"input\" ).get(), \"Filtered nextAll check\" );\n\tassert.deepEqual( jQuery( \"#label-for\" ).nextAll( \"input,select\" ).get(), elems.slice( 1 ).filter( \"input,select\" ).get(), \"Multiple-filtered nextAll check\" );\n\tassert.deepEqual( jQuery( \"#label-for, #hidden1\" ).nextAll( \"input,select\" ).get(), elems.slice( 1 ).filter( \"input,select\" ).get(), \"Multi-source, multiple-filtered nextAll check\" );\n} );\n\nQUnit.test( \"prevAll([String])\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar elems = jQuery( jQuery( \"#form\" ).children().slice( 0, 12 ).get().reverse() );\n\n\tassert.deepEqual( jQuery( \"#area1\" ).prevAll().get(), elems.get(), \"Simple prevAll check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).prevAll().get(), q( \"nonnodesElement\" ), \"Text node prevAll check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevAll( \"input\" ).get(), elems.filter( \"input\" ).get(), \"Filtered prevAll check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevAll( \"input,select\" ).get(), elems.filter( \"input,select\" ).get(), \"Multiple-filtered prevAll check\" );\n\tassert.deepEqual( jQuery( \"#area1, #hidden1\" ).prevAll( \"input,select\" ).get(), elems.filter( \"input,select\" ).get(), \"Multi-source, multiple-filtered prevAll check\" );\n} );\n\nQUnit.test( \"nextUntil([String])\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar elems = jQuery( \"#form\" ).children().slice( 2, 12 );\n\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil().get(), jQuery( \"#text1\" ).nextAll().get(), \"nextUntil with no selector (nextAll)\" );\n\tassert.equal( jQuery( \"<div>text<a id='element'></a></div>\" ).contents().eq( 0 ).nextUntil().attr( \"id\" ), \"element\", \"Text node nextUntil with no selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \".foo\" ).get(), jQuery( \"#text1\" ).nextAll().get(), \"nextUntil with invalid selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\" ).get(), elems.get(), \"Simple nextUntil check\" );\n\tassert.equal( jQuery( \"#text1\" ).nextUntil( \"#text2\" ).length, 0, \"Simple nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1, #radio1\" ).get(), jQuery( \"#text1\" ).next().get(), \"Less simple nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"input\" ).get(), elems.not( \"button\" ).get(), \"Filtered nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"button\" ).get(), elems.not( \"input\" ).get(), \"Filtered nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"button,input\" ).get(), elems.get(), \"Multiple-filtered nextUntil check\" );\n\tassert.equal( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"div\" ).length, 0, \"Filtered nextUntil check, no match\" );\n\tassert.deepEqual( jQuery( \"#text1, #hidden1\" ).nextUntil( \"#area1\", \"button,input\" ).get(), elems.get(), \"Multi-source, multiple-filtered nextUntil check\" );\n\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"[class=foo]\" ).get(), jQuery( \"#text1\" ).nextAll().get(), \"Non-element nodes must be skipped, since they have no attributes\" );\n} );\n\nQUnit.test( \"prevUntil([String])\", function( assert ) {\n\tassert.expect( 11 );\n\n\tvar elems = jQuery( \"#area1\" ).prevAll();\n\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil().get(), elems.get(), \"prevUntil with no selector (prevAll)\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).prevUntil().get(), q( \"nonnodesElement\" ), \"Text node prevUntil with no selector (prevAll)\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \".foo\" ).get(), elems.get(), \"prevUntil with invalid selector (prevAll)\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\" ).get(), elems.slice( 0, -1 ).get(), \"Simple prevUntil check\" );\n\tassert.equal( jQuery( \"#area1\" ).prevUntil( \"#button\" ).length, 0, \"Simple prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label, #search\" ).get(), jQuery( \"#area1\" ).prev().get(), \"Less simple prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\", \"input\" ).get(), elems.slice( 0, -1 ).not( \"button\" ).get(), \"Filtered prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\", \"button\" ).get(), elems.slice( 0, -1 ).not( \"input\" ).get(), \"Filtered prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\", \"button,input\" ).get(), elems.slice( 0, -1 ).get(), \"Multiple-filtered prevUntil check\" );\n\tassert.equal( jQuery( \"#area1\" ).prevUntil( \"label\", \"div\" ).length, 0, \"Filtered prevUntil check, no match\" );\n\tassert.deepEqual( jQuery( \"#area1, #hidden1\" ).prevUntil( \"label\", \"button,input\" ).get(), elems.slice( 0, -1 ).get(), \"Multi-source, multiple-filtered prevUntil check\" );\n} );\n\nQUnit.test( \"contents()\", function( assert ) {\n\tassert.expect( 12 );\n\tvar ibody, c;\n\n\tassert.equal( jQuery( \"#ap\" ).contents().length, 9, \"Check element contents\" );\n\tassert.ok( jQuery( \"#iframe\" ).contents()[ 0 ], \"Check existence of IFrame document\" );\n\tibody = jQuery( \"#loadediframe\" ).contents()[ 0 ].body;\n\tassert.ok( ibody, \"Check existence of IFrame body\" );\n\n\tassert.equal( jQuery( \"span\", ibody ).text(), \"span text\", \"Find span in IFrame and check its text\" );\n\n\tjQuery( ibody ).append( \"<div>init text</div>\" );\n\tassert.equal( jQuery( \"div\", ibody ).length, 2, \"Check the original div and the new div are in IFrame\" );\n\n\tassert.equal( jQuery( \"div\", ibody ).last().text(), \"init text\", \"Add text to div in IFrame\" );\n\n\tjQuery( \"div\", ibody ).last().text( \"div text\" );\n\tassert.equal( jQuery( \"div\", ibody ).last().text(), \"div text\", \"Add text to div in IFrame\" );\n\n\tjQuery( \"div\", ibody ).last().remove();\n\tassert.equal( jQuery( \"div\", ibody ).length, 1, \"Delete the div and check only one div left in IFrame\" );\n\n\tassert.equal( jQuery( \"div\", ibody ).text(), \"span text\", \"Make sure the correct div is still left after deletion in IFrame\" );\n\n\tjQuery( \"<table/>\", ibody ).append( \"<tr><td>cell</td></tr>\" ).appendTo( ibody );\n\tjQuery( \"table\", ibody ).remove();\n\tassert.equal( jQuery( \"div\", ibody ).length, 1, \"Check for JS error on add and delete of a table in IFrame\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tc = jQuery( \"#nonnodes\" ).contents().contents();\n\tassert.equal( c.length, 1, \"Check node,textnode,comment contents is just one\" );\n\tassert.equal( c[ 0 ].nodeValue, \"hi\", \"Check node,textnode,comment contents is just the one from span\" );\n} );\n\nQUnit.test( \"contents() for <template />\", function( assert ) {\n\tassert.expect( 4 );\n\n\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\"<template id='template'>\" +\n\t\t\"    <div id='template-div0'>\" +\n\t\t\"        <span>Hello, Web Component!</span>\" +\n\t\t\"    </div>\" +\n\t\t\"    <div id='template-div1'></div>\" +\n\t\t\"    <div id='template-div2'></div>\" +\n\t\t\"</template>\"\n\t);\n\n\tvar contents = jQuery( \"#template\" ).contents();\n\tassert.equal( contents.length, 6, \"Check template element contents\" );\n\n\tassert.equal( contents.find( \"span\" ).text(), \"Hello, Web Component!\", \"Find span in template and check its text\" );\n\n\tjQuery( \"<div id='templateTest' />\" ).append(\n\t\t\tjQuery( jQuery.map( contents, function( node ) {\n\t\t\t\t\treturn document.importNode( node, true );\n\t\t\t} ) )\n\t).appendTo( \"#qunit-fixture\" );\n\n\tcontents = jQuery( \"#templateTest\" ).contents();\n\tassert.equal( contents.length, 6, \"Check cloned nodes of template element contents\" );\n\n\tassert.equal( contents.filter( \"div\" ).length, 3, \"Count cloned elements from template\" );\n} );\n\nQUnit[ \"content\" in document.createElement( \"template\" ) ? \"test\" : \"skip\" ]( \"contents() for <template /> remains inert\", function( assert ) {\n\tassert.expect( 2 );\n\n\tGlobals.register( \"testScript\" );\n\tGlobals.register( \"testImgOnload\" );\n\n\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\"<template id='template'>\" +\n\t\t\"    <script>testScript = 1;</script>\" +\n\t\t\"    <img src='\" + baseURL + \"1x1.jpg' onload='testImgOnload = 1' >\" +\n\t\t\"</template>\"\n\t);\n\n\tvar content = jQuery( \"#template\" ).contents();\n\n\tassert.strictEqual( window.testScript, true, \"script in template isn't executed\" );\n\tassert.strictEqual( window.testImgOnload, true, \"onload of image in template isn't executed\" );\n} );\n\nQUnit.test( \"contents() for <object />\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar svgObject = jQuery( \"<object id='svg-object' data='\" + baseURL + \"1x1.svg'></object>\" );\n\tvar done = assert.async();\n\n\tsvgObject.on( \"load\", function() {\n\t\tvar contents = jQuery( \"#svg-object\" ).contents();\n\t\tassert.equal( contents.length, 1, \"Check object contents\" );\n\t\tassert.equal( contents.find( \"svg\" ).length, 1, \"Find svg within object\" );\n\t\tdone();\n\t} );\n\n\tjQuery( \"#qunit-fixture\" ).append( svgObject );\n} );\n\nQUnit.test( \"contents() for <object /> with children\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar object = \"<object type='application/x-shockwave-flash' width='200' height='300' id='penguin'>\" +\n\t\t\"<param name='movie' value='flash/penguin.swf'>\" +\n\t\t\"<param name='quality' value='high'>\" +\n\t\t\"<img src='images/penguin.jpg' width='200' height='300' alt='Penguin'>\" +\n\t\"</object>\";\n\n\tvar contents = jQuery( object ).contents();\n\tassert.equal( contents.length, 3, \"Check object contents children are correct\" );\n} );\n\nQUnit.test( \"contents() for <frame />\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar iframe = jQuery( \"<iframe id='frame-contents' src='\" + baseURL + \"frame.html'></iframe>\" );\n\tvar done = assert.async();\n\n\tiframe.on( \"load\", function() {\n\t\tvar container = jQuery( \"#frame-contents\" ).contents();\n\t\tvar contents = container.find( \"#test-frame\" ).contents();\n\t\tassert.equal( contents.length, 1, \"Check frame contents\" );\n\t\tassert.equal( contents.find( \"body\" ).length, 1, \"Find body within frame\" );\n\t\tdone();\n\t} );\n\n\tjQuery( \"#qunit-fixture\" ).append( iframe );\n} );\n\nQUnit.test( \"sort direction\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar elems = jQuery( \"#ap, #select1 > *, #moretests > form\" ),\n\t\tmethodDirections = {\n\t\t\tparent: false,\n\t\t\tparents: true,\n\t\t\tparentsUntil: true,\n\t\t\tnext: false,\n\t\t\tprev: false,\n\t\t\tnextAll: false,\n\t\t\tprevAll: true,\n\t\t\tnextUntil: false,\n\t\t\tprevUntil: true,\n\t\t\tsiblings: false,\n\t\t\tchildren: false,\n\t\t\tcontents: false\n\t\t};\n\n\tjQuery.each( methodDirections, function( method, reversed ) {\n\t\tvar actual = elems[ method ]().get(),\n\t\t\tforward = jQuery.uniqueSort( [].concat( actual ) );\n\t\tassert.deepEqual( actual, reversed ? forward.reverse() : forward, \"Correct sort direction for \" + method );\n\t} );\n} );\n\nQUnit.test( \"add(String selector)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar divs;\n\n\tassert.deepEqual(\n\t\tjQuery( \"#sndp\" ).add( \"#en\" ).add( \"#sap\" ).toArray(),\n\t\tq( \"sndp\", \"en\", \"sap\" ),\n\t\t\"Check elements from document\"\n\t);\n\n\tdivs = jQuery( \"<div/>\" ).add( \"#sndp\" );\n\tassert.ok( divs[ 0 ].parentNode, \"Sort with the disconnected node last (started with disconnected first).\" );\n} );\n\nQUnit.test( \"add(String selector, String context)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual(\n\t\tjQuery( [] ).add( \"div\", \"#nothiddendiv\" ).toArray(),\n\t\tq( \"nothiddendivchild\" ),\n\t\t\"Check elements from document\"\n\t);\n} );\n\nQUnit.test( \"add(String html)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar x,\n\t\tdivs = jQuery( \"#sndp\" ).add( \"<div/>\" );\n\n\tassert.ok( !divs[ 1 ].parentNode, \"Sort with the disconnected node last.\" );\n\n\tx = jQuery( [] ).add( \"<p id='x1'>xxx</p>\" ).add( \"<p id='x2'>xxx</p>\" );\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check detached element1\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check detached element2\" );\n} );\n\nQUnit.test( \"add(jQuery)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar x,\n\t\ttmp = jQuery( \"<div/>\" );\n\n\tx = jQuery( [] )\n\t.add(\n\t\tjQuery( \"<p id='x1'>xxx</p>\" ).appendTo( tmp )\n\t)\n\t.add(\n\t\tjQuery( \"<p id='x2'>xxx</p>\" ).appendTo( tmp )\n\t);\n\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check element1 in detached parent\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check element2 in detached parent\" );\n\n\tx = jQuery( [] )\n\t.add(\n\t\tjQuery( \"<p id='x1'>xxx</p>\" )\n\t)\n\t.add(\n\t\tjQuery( \"<p id='x2'>xxx</p>\" )\n\t);\n\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check detached element1\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check detached element2\" );\n} );\n\nQUnit.test( \"add(Element)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar x,\n\t\ttmp = jQuery( \"<div/>\" );\n\n\tx = jQuery( [] ).add( jQuery( \"<p id='x1'>xxx</p>\" ).appendTo( tmp )[ 0 ] ).add( jQuery( \"<p id='x2'>xxx</p>\" ).appendTo( tmp )[ 0 ] );\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check on-the-fly element1\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check on-the-fly element2\" );\n} );\n\nQUnit.test( \"add(Array elements)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#sndp\" ).add( jQuery( \"#en\" )[ 0 ] ).add( jQuery( \"#sap\" ) ).toArray(),\n\t\tq( \"sndp\", \"en\", \"sap\" ),\n\t\t\"Check elements from document\"\n\t);\n} );\n\nQUnit.test( \"add(Window)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar frame1 = document.createElement( \"iframe\" ),\n\t\tframe2 = document.createElement( \"iframe\" );\n\n\t// This increases window.length and sets window[i] available\n\tdocument.body.appendChild( frame1 );\n\tdocument.body.appendChild( frame2 );\n\n\t// Window is tricky because it is a lot like an array, even Array#slice will\n\t// turn it into a multi-item array.\n\tassert.equal( jQuery( [] ).add( window ).length, 1, \"Add a window\" );\n\n\tdocument.body.removeChild( frame1 );\n\tdocument.body.removeChild( frame2 );\n} );\n\nQUnit.test( \"add(NodeList|undefined|HTMLFormElement|HTMLSelectElement)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar ps, notDefined;\n\n\tps = document.getElementsByTagName( \"p\" );\n\n\tassert.equal( jQuery( [] ).add( ps ).length, ps.length, \"Add a NodeList\" );\n\n\tassert.equal( jQuery( [] ).add( notDefined ).length, 0, \"Adding undefined adds nothing\" );\n\n\tassert.equal( jQuery( [] ).add( document.getElementById( \"form\" ) ).length, 1, \"Add a form\" );\n\tassert.equal( jQuery( [] ).add( document.getElementById( \"select1\" ) ).length, 1, \"Add a select\" );\n\n\t// We no longer support .add(form.elements), unfortunately.\n\t// There is no way, in browsers, to reliably determine the difference\n\t// between form.elements and form - and doing .add(form) and having it\n\t// add the form elements is way to unexpected, so this gets the boot.\n\t//ok( jQuery([]).add(jQuery(\"#form\")[0].elements).length >= 13, \"Check elements from array\" );\n\n\t// For the time being, we're discontinuing support for jQuery(form.elements) since it's ambiguous in IE\n\t// use jQuery([]).add(form.elements) instead.\n\t//equal( jQuery([]).add(jQuery(\"#form\")[0].elements).length, jQuery(jQuery(\"#form\")[0].elements).length, \"Array in constructor must equals array in add()\" );\n} );\n\nQUnit.test( \"add(String, Context)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tassert.deepEqual( jQuery( \"#firstp\" ).add( \"#ap\" ).get(), q( \"firstp\", \"ap\" ), \"Add selector to selector \" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( \"#ap\" ).get(), q( \"firstp\", \"ap\" ), \"Add gEBId to selector\" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( document.getElementById( \"ap\" ) ).get(), q( \"firstp\", \"ap\" ), \"Add gEBId to gEBId\" );\n\n\tvar ctx = document.getElementById( \"firstp\" );\n\tassert.deepEqual( jQuery( \"#firstp\" ).add( \"#ap\", ctx ).get(), q( \"firstp\" ), \"Add selector to selector \" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( \"#ap\", ctx ).get(), q( \"firstp\" ), \"Add gEBId to selector, not in context\" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( \"#ap\", document.getElementsByTagName( \"body\" )[ 0 ] ).get(), q( \"firstp\", \"ap\" ), \"Add gEBId to selector, in context\" );\n} );\n\nQUnit.test( \"eq('-1') #10616\", function( assert ) {\n\tassert.expect( 3 );\n\tvar $divs = jQuery( \"div\" );\n\n\tassert.equal( $divs.eq( -1 ).length, 1, \"The number -1 returns a selection that has length 1\" );\n\tassert.equal( $divs.eq( \"-1\" ).length, 1, \"The string '-1' returns a selection that has length 1\" );\n\tassert.deepEqual( $divs.eq( \"-1\" ), $divs.eq( -1 ), \"String and number -1 match\" );\n} );\n\nQUnit.test( \"index(no arg) #10977\", function( assert ) {\n\tassert.expect( 2 );\n\tvar $list, fragment, div;\n\n\t$list = jQuery( \"<ul id='indextest'><li class='zero'>THIS ONE</li><li class='one'>a</li><li class='two'>b</li><li class='three'>c</li></ul>\" );\n\tjQuery( \"#qunit-fixture\" ).append( $list );\n\tassert.strictEqual( jQuery( \"#indextest li.zero\" ).first().index(), 0, \"No Argument Index Check\" );\n\t$list.remove();\n\n\tfragment = document.createDocumentFragment();\n\tdiv = fragment.appendChild( document.createElement( \"div\" ) );\n\n\tassert.equal( jQuery( div ).index(), 0, \"If jQuery#index called on element whose parent is fragment, it still should work correctly\" );\n} );\n\nQUnit.test( \"traversing non-elements with attribute filters (#12523)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar nonnodes = jQuery( \"#nonnodes\" ).contents();\n\n\tassert.equal( nonnodes.filter( \"[id]\" ).length, 1, \".filter\" );\n\tassert.equal( nonnodes.find( \"[id]\" ).length, 0, \".find\" );\n\tassert.strictEqual( nonnodes.is( \"[id]\" ), true, \".is\" );\n\tassert.deepEqual( nonnodes.closest( \"[id='nonnodes']\" ).get(), q( \"nonnodes\" ), \".closest\" );\n\tassert.deepEqual( nonnodes.parents( \"[id='nonnodes']\" ).get(), q( \"nonnodes\" ), \".parents\" );\n} );\n", "( function() {\n\nif ( !jQuery.fn.wrap ) { // no wrap module\n\treturn;\n}\n\nQUnit.module( \"wrap\", {\n\tafterEach: moduleTeardown\n} );\n\n// See test/unit/manipulation.js for explanation about these 2 functions\nfunction manipulationBareObj( value ) {\n\treturn value;\n}\n\nfunction manipulationFunctionReturningObj( value ) {\n\treturn function() {\n\t\treturn value;\n\t};\n}\n\nfunction testWrap( val, assert ) {\n\n\tassert.expect( 19 );\n\n\tvar defaultText, result, j, i, cacheLength;\n\n\tdefaultText = \"Try them out:\";\n\tresult = jQuery( \"#first\" ).wrap( val( \"<div class='red'><span></span></div>\" ) ).text();\n\n\tassert.equal(\n\t\tdefaultText, result, \"Check for wrapping of on-the-fly html\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\n\tresult = jQuery( \"#first\" ).wrap( val( document.getElementById( \"empty\" ) ) ).parent();\n\tassert.ok(\n\t\tresult.is( \"ol\" ), \"Check for element wrapping\"\n\t);\n\tassert.equal(\n\t\tresult.text(), defaultText, \"Check for element wrapping\"\n\t);\n\n\tjQuery( \"#check1\" ).on( \"click\", function() {\n\t\tvar checkbox = this;\n\n\t\tassert.ok(\n\t\tcheckbox.checked, \"Checkbox's state is erased after wrap() action, see #769\"\n\t);\n\t\tjQuery( checkbox ).wrap( val( \"<div id='c1' style='display:none;'></div>\" ) );\n\t\tassert.ok(\n\t\tcheckbox.checked, \"Checkbox's state is erased after wrap() action, see #769\"\n\t);\n\t} ).prop( \"checked\", false )[ 0 ].click();\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.wrap( val( \"<i></i>\" ) );\n\n\tassert.equal(\n\t\tjQuery( \"#nonnodes > i\" ).length, 3,\n\t\t\"Check node,textnode,comment wraps ok\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#nonnodes > i\" ).text(), j.text(),\n\t\t\"Check node,textnode,comment wraps doesn't hurt text\"\n\t);\n\n\t// Try wrapping a disconnected node\n\tcacheLength = 0;\n\tfor ( i in jQuery.cache ) {\n\t\tcacheLength++;\n\t}\n\n\tj = jQuery( \"<label/>\" ).wrap( val( \"<li/>\" ) );\n\tassert.equal(\n\t\tj[ 0 ] .nodeName.toUpperCase(), \"LABEL\", \"Element is a label\"\n\t);\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toUpperCase(), \"LI\", \"Element has been wrapped\"\n\t);\n\n\tfor ( i in jQuery.cache ) {\n\t\tcacheLength--;\n\t}\n\tassert.equal(\n\t\tcacheLength, 0, \"No memory leak in jQuery.cache (bug #7165)\"\n\t);\n\n\t// Wrap an element containing a text node\n\tj = jQuery( \"<span/>\" ).wrap( \"<div>test</div>\" );\n\tassert.equal(\n\t\tj[ 0 ].previousSibling.nodeType, 3, \"Make sure the previous node is a text element\"\n\t);\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toUpperCase(), \"DIV\", \"And that we're in the div element.\"\n\t);\n\n\t// Try to wrap an element with multiple elements (should fail)\n\tj = jQuery( \"<div><span></span></div>\" ).children().wrap( \"<p></p><div></div>\" );\n\tassert.equal(\n\t\tj[ 0 ].parentNode.parentNode.childNodes.length, 1,\n\t\t\"There should only be one element wrapping.\"\n\t);\n\tassert.equal(\n\t\tj.length, 1, \"There should only be one element (no cloning).\"\n\t);\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toUpperCase(), \"P\", \"The span should be in the paragraph.\"\n\t);\n\n\t// Wrap an element with a jQuery set\n\tj = jQuery( \"<span/>\" ).wrap( jQuery( \"<div></div>\" ) );\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"\n\t);\n\n\t// Wrap an element with a jQuery set and event\n\tresult = jQuery( \"<div></div>\" ).on( \"click\", function() {\n\t\tassert.ok(\n\t\ttrue, \"Event triggered.\"\n\t);\n\n\t\t// Remove handlers on detached elements\n\t\tresult.off();\n\t\tjQuery( this ).off();\n\t} );\n\n\tj = jQuery( \"<span/>\" ).wrap( result );\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"\n\t);\n\n\tj.parent().trigger( \"click\" );\n}\n\nQUnit.test( \"wrap(String|Element)\", function( assert ) {\n\ttestWrap( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"wrap(Function)\", function( assert ) {\n\ttestWrap( manipulationFunctionReturningObj, assert );\n} );\n\nQUnit.test( \"wrap(Function) with index (#10177)\", function( assert ) {\n\tvar expectedIndex = 0,\n\t\ttargets = jQuery( \"#qunit-fixture p\" );\n\n\tassert.expect( targets.length );\n\ttargets.wrap( function( i ) {\n\t\tassert.equal(\n\t\ti, expectedIndex,\n\t\t\"Check if the provided index (\" + i + \") is as expected (\" + expectedIndex + \")\"\n\t);\n\t\texpectedIndex++;\n\n\t\treturn \"<div id='wrap_index_'\" + i + \"'></div>\";\n\t} );\n} );\n\nQUnit.test( \"wrap(String) consecutive elements (#10177)\", function( assert ) {\n\tvar targets = jQuery( \"#qunit-fixture p\" );\n\n\tassert.expect( targets.length * 2 );\n\ttargets.wrap( \"<div class='wrapper'></div>\" );\n\n\ttargets.each( function() {\n\t\tvar $this = jQuery( this );\n\n\t\tassert.ok(\n\t\t$this.parent().is( \".wrapper\" ), \"Check each elements parent is correct (.wrapper)\"\n\t);\n\t\tassert.equal(\n\t\t$this.siblings().length, 0, \"Each element should be wrapped individually\"\n\t);\n\t} );\n} );\n\nQUnit.test( \"wrapAll(String)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar prev, p, result;\n\n\tprev = jQuery( \"#firstp\" )[ 0 ].previousSibling;\n\tp = jQuery( \"#firstp,#first\" )[ 0 ].parentNode;\n\tresult = jQuery( \"#firstp,#first\" ).wrapAll( \"<div class='red'><div class='tmp'></div></div>\" );\n\n\tassert.equal(\n\t\tresult.parent().length, 1, \"Check for wrapping of on-the-fly html\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#firstp\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent().parent()[ 0 ].previousSibling, prev, \"Correct Previous Sibling\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent().parent()[ 0 ].parentNode, p, \"Correct Parent\"\n\t);\n\n} );\n\nQUnit.test( \"wrapAll(Function)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar prev = jQuery( \"#firstp\" )[ 0 ].previousSibling,\n\t\tp = jQuery( \"#firstp,#first\" )[ 0 ].parentNode,\n\t\tresult = jQuery( \"#firstp,#first\" ).wrapAll( function() {\n\t\t\treturn \"<div class='red'><div class='tmp'></div></div>\";\n\t\t} );\n\n\tassert.equal(\n\t\tresult.parent().length, 1, \"Check for wrapping of on-the-fly html\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#firstp\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().parent().is( p ), \"Correct Parent\"\n\t);\n\tassert.strictEqual(\n\t\tjQuery( \"#first\" ).parent().parent()[ 0 ].previousSibling, prev, \"Correct Previous Sibling\"\n\t);\n} );\n\nQUnit.test( \"wrapAll(Function) check execution characteristics\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar i = 0;\n\n\tjQuery( \"non-existent\" ).wrapAll( function() {\n\t\ti++;\n\t\treturn \"\";\n\t} );\n\n\tassert.ok(\n\t\t!i, \"should not execute function argument if target element does not exist\"\n\t);\n\n\tjQuery( \"#firstp\" ).wrapAll( function( index ) {\n\t\tassert.strictEqual(\n\t\tthis, jQuery( \"#firstp\" )[ 0 ], \"context must be the first found element\"\n\t);\n\t\tassert.strictEqual(\n\t\tindex, undefined, \"index argument should not be included in function execution\"\n\t);\n\t} );\n} );\n\nQUnit.test( \"wrapAll(Element)\", function( assert ) {\n\n  assert.expect( 3 );\n\n  var prev, p;\n\tprev = jQuery( \"#firstp\" )[ 0 ].previousSibling;\n\tp = jQuery( \"#first\" )[ 0 ].parentNode;\n\tjQuery( \"#firstp,#first\" ).wrapAll( document.getElementById( \"empty\" ) );\n\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent()[ 0 ], jQuery( \"#firstp\" ).parent()[ 0 ], \"Same Parent\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent()[ 0 ].previousSibling, prev, \"Correct Previous Sibling\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent()[ 0 ].parentNode, p, \"Correct Parent\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(String)\", function( assert ) {\n\n\tassert.expect( 6 );\n\n\tvar num;\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( \"<div class='red'><div id='tmp'></div></div>\" );\n\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tnum = jQuery( \"#first\" ).html( \"foo<div>test</div><div>test2</div>\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( \"<div class='red'><div id='tmp'></div></div>\" );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(Element)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar num,\n\t\tdiv = jQuery( \"<div/>\" );\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( document.getElementById( \"empty\" ) );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \"#empty\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tdiv.wrapInner( \"<span></span>\" );\n\tassert.equal(\n\t\tdiv.children().length, 1, \"The contents were wrapped.\"\n\t);\n\tassert.equal(\n\t\tdiv.children()[ 0 ].nodeName.toLowerCase(), \"span\", \"A span was inserted.\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(Function) returns String\", function( assert ) {\n\n\tassert.expect( 6 );\n\n\tvar num,\n    val = manipulationFunctionReturningObj;\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( val( \"<div class='red'><div id='tmp'></div></div>\" ) );\n\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tnum = jQuery( \"#first\" ).html( \"foo<div>test</div><div>test2</div>\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( val( \"<div class='red'><div id='tmp'></div></div>\" ) );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(Function) returns Element\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar num,\n    val = manipulationFunctionReturningObj,\n\t\tdiv = jQuery( \"<div/>\" );\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( val( document.getElementById( \"empty\" ) ) );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \"#empty\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tdiv.wrapInner( val( \"<span></span>\" ) );\n\tassert.equal(\n\t\tdiv.children().length, 1, \"The contents were wrapped.\"\n\t);\n\tassert.equal(\n\t\tdiv.children()[ 0 ].nodeName.toLowerCase(), \"span\", \"A span was inserted.\"\n\t);\n} );\n\nQUnit.test( \"unwrap()\", function( assert ) {\n\n\tassert.expect( 9 );\n\n\tjQuery( \"body\" ).append(\n\t\t\"  <div id='unwrap' style='display: none;'> <div id='unwrap1'>\" +\n\t\t\" <span class='unwrap'>a</span> <span class='unwrap'>b</span> </div> <div id='unwrap2'>\" +\n\t\t\" <span class='unwrap'>c</span> <span class='unwrap'>d</span> </div> <div id='unwrap3'>\" +\n\t\t\" <b><span class='unwrap unwrap3'>e</span></b>\" +\n\t\t\" <b><span class='unwrap unwrap3'>f</span></b> </div> </div>\"\n\t);\n\n\tvar abcd = jQuery( \"#unwrap1 > span, #unwrap2 > span\" ).get(),\n\t\tabcdef = jQuery( \"#unwrap span\" ).get();\n\n\tassert.equal(\n\t\tjQuery( \"#unwrap1 span\" ).add( \"#unwrap2 span:first-child\" ).unwrap().length, 3,\n\t\t\"make #unwrap1 and #unwrap2 go away\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap > span\" ).get(), abcd, \"all four spans should still exist\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap3 span\" ).unwrap().get(), jQuery( \"#unwrap3 > span\" ).get(),\n\t\t\"make all b in #unwrap3 go away\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap3 span\" ).unwrap().get(), jQuery( \"#unwrap > span.unwrap3\" ).get(),\n\t\t\"make #unwrap3 go away\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap\" ).children().get(), abcdef, \"#unwrap only contains 6 child spans\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap > span\" ).unwrap().get(), jQuery( \"body > span.unwrap\" ).get(),\n\t\t\"make the 6 spans become children of body\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"body > span.unwrap\" ).unwrap().get(), jQuery( \"body > span.unwrap\" ).get(),\n\t\t\"can't unwrap children of body\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery( \"body > span.unwrap\" ).unwrap().get(), abcdef, \"can't unwrap children of body\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"body > span.unwrap\" ).get(), abcdef, \"body contains 6 .unwrap child spans\"\n\t);\n\n\tjQuery( \"body > span.unwrap\" ).remove();\n} );\n\nQUnit.test( \"unwrap( selector )\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tjQuery( \"body\" ).append(\n\t\t\"  <div id='unwrap' style='display: none;'> <div id='unwrap1'>\" +\n\t\t\"<span class='unwrap'>a</span> <span class='unwrap'>b</span> </div>\" +\n\t\t\" <div id='unwrap2'> <span class='unwrap'>c</span> <span class='unwrap'>d</span>\" +\n\t\t\" </div> </div>\"\n\t);\n\n\t// Shouldn't unwrap, no match\n\tjQuery( \"#unwrap1 span\" ) .unwrap( \"#unwrap2\" );\n\tassert.equal(\n\t\tjQuery( \"#unwrap1\" ).length, 1, \"still wrapped\"\n\t);\n\n\t// Shouldn't unwrap, no match\n\tjQuery( \"#unwrap1 span\" ) .unwrap( \"span\" );\n\tassert.equal(\n\t\tjQuery( \"#unwrap1\" ).length, 1, \"still wrapped\"\n\t);\n\n\t// Unwraps\n\tjQuery( \"#unwrap1 span\" ) .unwrap( \"#unwrap1\" );\n\tassert.equal(\n\t\tjQuery( \"#unwrap1\" ).length, 0, \"unwrapped match\"\n\t);\n\n\t// Check return values\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap2 span\" ).get(), jQuery( \"#unwrap2 span\" ).unwrap( \"quote\" ).get(),\n\t\t\"return on unmatched unwrap\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap2 span\" ).get(), jQuery( \"#unwrap2 span\" ).unwrap( \"#unwrap2\" ).get(),\n\t\t\"return on matched unwrap\"\n\t);\n\n\tjQuery( \"body > span.unwrap\" ).remove();\n} );\n\nQUnit.test( \"jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $wraptarget = jQuery( \"<div id='wrap-target'>Target</div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t$section = jQuery( \"<section>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$wraptarget.wrapAll( \"<aside style='background-color:green'></aside>\" );\n\n\tassert.notEqual(\n\t\t$wraptarget.parent( \"aside\" ).get( 0 ).style.backgroundColor, \"transparent\",\n\t\t\"HTML5 elements created with wrapAll inherit styles\"\n\t);\n\tassert.notEqual(\n\t\t$section.get( 0 ).style.backgroundColor, \"transparent\",\n\t\t\"HTML5 elements create with jQuery( string ) inherit styles\"\n\t);\n} );\n\nQUnit.test( \"wrapping scripts (#10470)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar script = document.createElement( \"script\" );\n\tscript.text = script.textContent =\n\t\t\"QUnit.assert.ok( !document.eval10470, 'script evaluated once' ); document.eval10470 = true;\";\n\n\tdocument.eval10470 = false;\n\tjQuery( \"#qunit-fixture\" ).empty()[ 0 ].appendChild( script );\n\tjQuery( \"#qunit-fixture script\" ).wrap( \"<b></b>\" );\n\tassert.strictEqual(\n\t\tscript.parentNode, jQuery( \"#qunit-fixture > b\" )[ 0 ], \"correctly wrapped\"\n\t);\n\tjQuery( script ).remove();\n} );\n\n} )();\n"], "fixing_code": ["define( [\n\t\"./core\",\n\t\"./core/isAttached\",\n\t\"./var/flat\",\n\t\"./var/isFunction\",\n\t\"./var/push\",\n\t\"./var/rcheckableType\",\n\t\"./core/access\",\n\t\"./manipulation/var/rtagName\",\n\t\"./manipulation/var/rscriptType\",\n\t\"./manipulation/wrapMap\",\n\t\"./manipulation/getAll\",\n\t\"./manipulation/setGlobalEval\",\n\t\"./manipulation/buildFragment\",\n\t\"./manipulation/support\",\n\n\t\"./data/var/dataPriv\",\n\t\"./data/var/dataUser\",\n\t\"./data/var/acceptData\",\n\t\"./core/DOMEval\",\n\t\"./core/nodeName\",\n\n\t\"./core/init\",\n\t\"./traversing\",\n\t\"./selector\",\n\t\"./event\"\n], function( jQuery, isAttached, flat, isFunction, push, rcheckableType,\n\taccess, rtagName, rscriptType,\n\twrapMap, getAll, setGlobalEval, buildFragment, support,\n\tdataPriv, dataUser, acceptData, DOMEval, nodeName ) {\n\n\"use strict\";\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\nreturn jQuery;\n} );\n", "/* eslint no-multi-str: \"off\" */\n\nvar FILEPATH = \"/test/data/testinit.js\",\n\tactiveScript = [].slice.call( document.getElementsByTagName( \"script\" ), -1 )[ 0 ],\n\tparentUrl = activeScript && activeScript.src ?\n\t\tactiveScript.src.replace( /[?#].*/, \"\" ) + FILEPATH.replace( /[^/]+/g, \"..\" ) + \"/\" :\n\t\t\"../\",\n\n\t// baseURL is intentionally set to \"data/\" instead of \"\".\n\t// This is not just for convenience (since most files are in data/)\n\t// but also to ensure that urls without prefix fail.\n\t// Otherwise it's easy to write tests that pass on test/index.html\n\t// but fail in Karma runner (where the baseURL is different).\n\tbaseURL = parentUrl + \"test/data/\",\n\tsupportjQuery = this.jQuery,\n\n\t// see RFC 2606\n\texternalHost = \"example.com\";\n\nthis.hasPHP = true;\nthis.isLocal = window.location.protocol === \"file:\";\n\n// Setup global variables before loading jQuery for testing .noConflict()\nsupportjQuery.noConflict( true );\nwindow.originaljQuery = this.jQuery = undefined;\nwindow.original$ = this.$ = \"replaced\";\n\n/**\n * Returns an array of elements with the given IDs\n * @example q( \"main\", \"foo\", \"bar\" )\n * @result [<div id=\"main\">, <span id=\"foo\">, <input id=\"bar\">]\n */\nthis.q = function() {\n\tvar r = [],\n\t\ti = 0;\n\n\tfor ( ; i < arguments.length; i++ ) {\n\t\tr.push( document.getElementById( arguments[ i ] ) );\n\t}\n\treturn r;\n};\n\n/**\n * Asserts that a select matches the given IDs\n * @param {String} message - Assertion name\n * @param {String} selector - Sizzle selector\n * @param {String} expectedIds - Array of ids to construct what is expected\n * @param {(String|Node)=document} context - Selector context\n * @example match(\"Check for something\", \"p\", [\"foo\", \"bar\"]);\n */\nfunction match( message, selector, expectedIds, context, assert ) {\n\tvar f = jQuery( selector, context ).get(),\n\t\ts = \"\",\n\t\ti = 0;\n\n\tfor ( ; i < f.length; i++ ) {\n\t\ts += ( s && \",\" ) + \"\\\"\" + f[ i ].id + \"\\\"\";\n\t}\n\n\tassert.deepEqual( f, q.apply( q, expectedIds ), message + \" (\" + selector + \")\" );\n}\n\n/**\n * Asserts that a select matches the given IDs.\n * The select is not bound by a context.\n * @param {String} message - Assertion name\n * @param {String} selector - Sizzle selector\n * @param {String} expectedIds - Array of ids to construct what is expected\n * @example t(\"Check for something\", \"p\", [\"foo\", \"bar\"]);\n */\nQUnit.assert.t = function( message, selector, expectedIds ) {\n\tmatch( message, selector, expectedIds, undefined, QUnit.assert );\n};\n\n/**\n * Asserts that a select matches the given IDs.\n * The select is performed within the `#qunit-fixture` context.\n * @param {String} message - Assertion name\n * @param {String} selector - Sizzle selector\n * @param {String} expectedIds - Array of ids to construct what is expected\n * @example selectInFixture(\"Check for something\", \"p\", [\"foo\", \"bar\"]);\n */\nQUnit.assert.selectInFixture = function( message, selector, expectedIds ) {\n\tmatch( message, selector, expectedIds, \"#qunit-fixture\", QUnit.assert );\n};\n\nthis.createDashboardXML = function() {\n\tvar string = \"<?xml version='1.0' encoding='UTF-8'?> \\\n\t<dashboard> \\\n\t\t<locations class='foo'> \\\n\t\t\t<location for='bar' checked='different'> \\\n\t\t\t\t<infowindowtab normal='ab' mixedCase='yes'> \\\n\t\t\t\t\t<tab title='Location'><![CDATA[blabla]]></tab> \\\n\t\t\t\t\t<tab title='Users'><![CDATA[blublu]]></tab> \\\n\t\t\t\t</infowindowtab> \\\n\t\t\t</location> \\\n\t\t</locations> \\\n\t</dashboard>\";\n\n\treturn jQuery.parseXML( string );\n};\n\nthis.createWithFriesXML = function() {\n\tvar string = \"<?xml version='1.0' encoding='UTF-8'?> \\\n\t<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' \\\n\t\txmlns:xsd='http://www.w3.org/2001/XMLSchema' \\\n\t\txmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'> \\\n\t\t<soap:Body> \\\n\t\t\t<jsconf xmlns='http://{{ externalHost }}/ns1'> \\\n\t\t\t\t<response xmlns:ab='http://{{ externalHost }}/ns2'> \\\n\t\t\t\t\t<meta> \\\n\t\t\t\t\t\t<component id='seite1' class='component'> \\\n\t\t\t\t\t\t\t<properties xmlns:cd='http://{{ externalHost }}/ns3'> \\\n\t\t\t\t\t\t\t\t<property name='prop1'> \\\n\t\t\t\t\t\t\t\t\t<thing /> \\\n\t\t\t\t\t\t\t\t\t<value>1</value> \\\n\t\t\t\t\t\t\t\t</property> \\\n\t\t\t\t\t\t\t\t<property name='prop2'> \\\n\t\t\t\t\t\t\t\t\t<thing att='something' /> \\\n\t\t\t\t\t\t\t\t</property> \\\n\t\t\t\t\t\t\t\t<foo_bar>foo</foo_bar> \\\n\t\t\t\t\t\t\t</properties> \\\n\t\t\t\t\t\t</component> \\\n\t\t\t\t\t</meta> \\\n\t\t\t\t</response> \\\n\t\t\t</jsconf> \\\n\t\t</soap:Body> \\\n\t</soap:Envelope>\";\n\n\treturn jQuery.parseXML( string.replace( /\\{\\{\\s*externalHost\\s*\\}\\}/g, externalHost ) );\n};\n\nthis.createXMLFragment = function() {\n\tvar xml, frag;\n\tif ( window.ActiveXObject ) {\n\t\txml = new window.ActiveXObject( \"msxml2.domdocument\" );\n\t} else {\n\t\txml = document.implementation.createDocument( \"\", \"\", null );\n\t}\n\n\tif ( xml ) {\n\t\tfrag = xml.createElement( \"data\" );\n\t}\n\n\treturn frag;\n};\n\nwindow.fireNative = document.createEvent ?\n\tfunction( node, type ) {\n\t\tvar event = document.createEvent( \"HTMLEvents\" );\n\n\t\tevent.initEvent( type, true, true );\n\t\tnode.dispatchEvent( event );\n\t} :\n\tfunction( node, type ) {\n\t\tnode.fireEvent( \"on\" + type, document.createEventObject() );\n\t};\n\n/**\n * Add random number to url to stop caching\n *\n * Also prefixes with baseURL automatically.\n *\n * @example url(\"index.html\")\n * @result \"data/index.html?10538358428943\"\n *\n * @example url(\"mock.php?foo=bar\")\n * @result \"data/mock.php?foo=bar&10538358345554\"\n */\nfunction url( value ) {\n\treturn baseURL + value + ( /\\?/.test( value ) ? \"&\" : \"?\" ) +\n\t\tnew Date().getTime() + \"\" + parseInt( Math.random() * 100000, 10 );\n}\n\n// Ajax testing helper\nthis.ajaxTest = function( title, expect, options ) {\n\tQUnit.test( title, function( assert ) {\n\t\tassert.expect( expect );\n\t\tvar requestOptions;\n\n\t\tif ( typeof options === \"function\" ) {\n\t\t\toptions = options( assert );\n\t\t}\n\t\toptions = options || [];\n\t\trequestOptions = options.requests || options.request || options;\n\t\tif ( !Array.isArray( requestOptions ) ) {\n\t\t\trequestOptions = [ requestOptions ];\n\t\t}\n\n\t\tvar done = assert.async();\n\n\t\tif ( options.setup ) {\n\t\t\toptions.setup();\n\t\t}\n\n\t\tvar completed = false,\n\t\t\tremaining = requestOptions.length,\n\t\t\tcomplete = function() {\n\t\t\t\tif ( !completed && --remaining === 0 ) {\n\t\t\t\t\tcompleted = true;\n\t\t\t\t\tdelete ajaxTest.abort;\n\t\t\t\t\tif ( options.teardown ) {\n\t\t\t\t\t\toptions.teardown();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure all events will be called before done()\n\t\t\t\t\tsetTimeout( done );\n\t\t\t\t}\n\t\t\t},\n\t\t\trequests = jQuery.map( requestOptions, function( options ) {\n\t\t\t\tvar request = ( options.create || jQuery.ajax )( options ),\n\t\t\t\t\tcallIfDefined = function( deferType, optionType ) {\n\t\t\t\t\t\tvar handler = options[ deferType ] || !!options[ optionType ];\n\t\t\t\t\t\treturn function( _, status ) {\n\t\t\t\t\t\t\tif ( !completed ) {\n\t\t\t\t\t\t\t\tif ( !handler ) {\n\t\t\t\t\t\t\t\t\tassert.ok( false, \"unexpected \" + status );\n\t\t\t\t\t\t\t\t} else if ( typeof handler === \"function\" ) {\n\t\t\t\t\t\t\t\t\thandler.apply( this, arguments );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\tif ( options.afterSend ) {\n\t\t\t\t\toptions.afterSend( request, assert );\n\t\t\t\t}\n\n\t\t\t\treturn request\n\t\t\t\t\t.done( callIfDefined( \"done\", \"success\" ) )\n\t\t\t\t\t.fail( callIfDefined( \"fail\", \"error\" ) )\n\t\t\t\t\t.always( complete );\n\t\t\t} );\n\n\t\tajaxTest.abort = function( reason ) {\n\t\t\tif ( !completed ) {\n\t\t\t\tcompleted = true;\n\t\t\t\tdelete ajaxTest.abort;\n\t\t\t\tassert.ok( false, \"aborted \" + reason );\n\t\t\t\tjQuery.each( requests, function( i, request ) {\n\t\t\t\t\trequest.abort();\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n};\n\nthis.testIframe = function( title, fileName, func, wrapper ) {\n\tif ( !wrapper ) {\n\t\twrapper = QUnit.test;\n\t}\n\twrapper.call( QUnit, title, function( assert ) {\n\t\tvar done = assert.async(),\n\t\t\t$iframe = supportjQuery( \"<iframe></iframe>\" )\n\t\t\t\t.css( { position: \"absolute\", top: \"0\", left: \"-600px\", width: \"500px\" } )\n\t\t\t\t.attr( { id: \"qunit-fixture-iframe\", src: url( fileName ) } );\n\n\t\t// Test iframes are expected to invoke this via startIframeTest (cf. iframeTest.js)\n\t\twindow.iframeCallback = function() {\n\t\t\tvar args = Array.prototype.slice.call( arguments );\n\n\t\t\targs.unshift( assert );\n\n\t\t\tsetTimeout( function() {\n\t\t\t\tvar result;\n\n\t\t\t\tthis.iframeCallback = undefined;\n\n\t\t\t\tresult = func.apply( this, args );\n\n\t\t\t\tfunction finish() {\n\t\t\t\t\tfunc = function() {};\n\t\t\t\t\t$iframe.remove();\n\t\t\t\t\tdone();\n\t\t\t\t}\n\n\t\t\t\t// Wait for promises returned by `func`.\n\t\t\t\tif ( result && result.then ) {\n\t\t\t\t\tresult.then( finish );\n\t\t\t\t} else {\n\t\t\t\t\tfinish();\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\n\t\t// Attach iframe to the body for visibility-dependent code\n\t\t// It will be removed by either the above code, or the testDone callback in testrunner.js\n\t\t$iframe.prependTo( document.body );\n\t} );\n};\nthis.iframeCallback = undefined;\n\n// Tests are always loaded async\n// except when running tests in Karma (See Gruntfile)\nif ( !window.__karma__ ) {\n\tQUnit.config.autostart = false;\n}\n\n// Leverage QUnit URL parsing to detect testSwarm environment and \"basic\" testing mode\nQUnit.isSwarm = ( QUnit.urlParams.swarmURL + \"\" ).indexOf( \"http\" ) === 0;\nQUnit.basicTests = ( QUnit.urlParams.module + \"\" ) === \"basic\";\n\n// Async test for module script type support\nfunction moduleTypeSupported() {\n\tvar script = document.createElement( \"script\" );\n\tscript.type = \"module\";\n\tscript.text = \"QUnit.moduleTypeSupported = true\";\n\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n}\nmoduleTypeSupported();\n\nthis.loadTests = function() {\n\n\t// QUnit.config is populated from QUnit.urlParams but only at the beginning\n\t// of the test run. We need to read both.\n\tvar amd = QUnit.config.amd || QUnit.urlParams.amd;\n\n\t// Directly load tests that need evaluation before DOMContentLoaded.\n\tif ( !amd || document.readyState === \"loading\" ) {\n\t\tdocument.write( \"<script src='\" + parentUrl + \"test/unit/ready.js'><\\x2Fscript>\" );\n\t} else {\n\t\tQUnit.module( \"ready\", function() {\n\t\t\tQUnit.skip( \"jQuery ready tests skipped in async mode\", function() {} );\n\t\t} );\n\t}\n\n\t// Get testSubproject from testrunner first\n\trequire( [ parentUrl + \"test/data/testrunner.js\" ], function() {\n\t\tvar i = 0,\n\t\t\ttests = [\n\t\t\t\t// A special module with basic tests, meant for\n\t\t\t\t// not fully supported environments like Android 2.3,\n\t\t\t\t// jsdom or PhantomJS. We run it everywhere, though,\n\t\t\t\t// to make sure tests are not broken.\n\t\t\t\t\"unit/basic.js\",\n\n\t\t\t\t\"unit/core.js\",\n\t\t\t\t\"unit/callbacks.js\",\n\t\t\t\t\"unit/deferred.js\",\n\t\t\t\t\"unit/deprecated.js\",\n\t\t\t\t\"unit/support.js\",\n\t\t\t\t\"unit/data.js\",\n\t\t\t\t\"unit/queue.js\",\n\t\t\t\t\"unit/attributes.js\",\n\t\t\t\t\"unit/event.js\",\n\t\t\t\t\"unit/selector.js\",\n\t\t\t\t\"unit/traversing.js\",\n\t\t\t\t\"unit/manipulation.js\",\n\t\t\t\t\"unit/wrap.js\",\n\t\t\t\t\"unit/css.js\",\n\t\t\t\t\"unit/serialize.js\",\n\t\t\t\t\"unit/ajax.js\",\n\t\t\t\t\"unit/effects.js\",\n\t\t\t\t\"unit/offset.js\",\n\t\t\t\t\"unit/dimensions.js\",\n\t\t\t\t\"unit/animation.js\",\n\t\t\t\t\"unit/tween.js\"\n\t\t\t];\n\n\t\t// Ensure load order (to preserve test numbers)\n\t\t( function loadDep() {\n\t\t\tvar dep = tests[ i++ ];\n\n\t\t\tif ( dep ) {\n\t\t\t\tif ( !QUnit.basicTests || i === 1 ) {\n\t\t\t\t\trequire( [ parentUrl + \"test/\" + dep ], loadDep );\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// When running basic tests, replace other modules with dummies to avoid overloading\n\t\t\t\t// impaired clients.\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.module( dep.replace( /^.*\\/|\\.js$/g, \"\" ) );\n\t\t\t\t\tloadDep();\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif ( window.__karma__ && window.__karma__.start ) {\n\t\t\t\t\twindow.__karma__.start();\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.load();\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Run in noConflict mode\n\t\t\t\t */\n\t\t\t\tjQuery.noConflict();\n\n\t\t\t\t// Load the TestSwarm listener if swarmURL is in the address.\n\t\t\t\tif ( QUnit.isSwarm ) {\n\t\t\t\t\trequire( [ \"http://swarm.jquery.org/js/inject.js?\" + ( new Date() ).getTime() ],\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t}\n\t\t} )();\n\t} );\n};\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\" id=\"html\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title>jQuery Local File Test</title>\n\t<!-- Includes -->\n\t<script src=\"jquery.js\"></script>\n\t<style>\n\t\t.error { color: red; }\n\t\t.success { color: green; }\n\t</style>\n</head>\n<body>\n\t<h1>jQuery Local File Test</h1>\n\t<h2>\n\t\tIntroduction\n\t</h2>\n\t<ul>\n\t\t<li>\n\t\t\tAccess this file using the \"file:\" protocol,\n\t\t</li>\n\t\t<li>\n\t\t\ttwo green \"OK\" strings must appear below,\n\t\t</li>\n\t\t<li>\n\t\t\tEmpty local files will issue errors, it's a known limitation.\n\t\t</li>\n\t</ul>\n\t<h2>\n\t\tResults\n\t</h2>\n\t<ul>\n\t\t<li>\n\t\t\tSuccess:\n\t\t\t<span id=\"success\">\n\t\t\t</span>\n\t\t</li>\n\t\t<li>\n\t\t\tError:\n\t\t\t<span id=\"error\">\n\t\t\t</span>\n\t\t</li>\n\t</ul>\n\t<h2>\n\t\tLogs:\n\t</h2>\n\t<ul id=\"log\">\n\t</ul>\n\t<script>\n\t\tvar logUL = jQuery( \"#log\" );\n\t\tfunction doLog( message, args ) {\n\t\t\tjQuery( \"<li></li>\" ).appendTo( logUL ).text( message + ': \"' + Array.prototype.join.call( args, '\" - \"' ) + '\"' );\n\t\t}\n\t\tjQuery.ajax( \"./data/badjson.js\" , {\n\t\t\tcontext: jQuery( \"#success\" ),\n\t\t\tdataType: \"text\"\n\t\t}).success(function( data, _, xhr ) {\n\t\t\tdoLog( \"Success (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( data ? \"success\" : \"error\" ).text( \"OK\" );\n\t\t}).error(function( xhr ) {\n\t\t\tdoLog( \"Success (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( \"error\" ).text( \"FAIL\" );\n\t\t});\n\t\tjQuery.ajax( \"./data/doesnotexist.ext\" , {\n\t\t\tcontext: jQuery( \"#error\" ),\n\t\t\tdataType: \"text\"\n\t\t}).error(function( xhr ) {\n\t\t\tdoLog( \"Error (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( \"success\" ).text( \"OK\" );\n\t\t}).success(function( data, _, xhr ) {\n\t\t\tdoLog( \"Error (\" + xhr.status + \")\" , arguments );\n\t\t\tthis.addClass( \"error\" ).text( \"FAIL\" );\n\t\t});\n\t</script>\n</body>\n", "QUnit.module( \"ajax\", {\n\tafterEach: function() {\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\" );\n\t\tmoduleTeardown.apply( this, arguments );\n\t}\n} );\n\n( function() {\n\tQUnit.test( \"Unit Testing Environment\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tassert.ok( hasPHP, \"Running in an environment with PHP support. The AJAX tests only run if the environment supports PHP!\" );\n\t\tassert.ok( !isLocal, \"Unit tests are not ran from file:// (especially in Chrome. If you must test from file:// with Chrome, run it with the --allow-file-access-from-files flag!)\" );\n\t} );\n\n\tif ( !jQuery.ajax || ( isLocal && !hasPHP ) ) {\n\t\treturn;\n\t}\n\n\tfunction addGlobalEvents( expected, assert ) {\n\t\treturn function() {\n\t\t\texpected = expected || \"\";\n\t\t\tjQuery( document ).on( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\", function( e ) {\n\t\t\t\tassert.ok( expected.indexOf( e.type ) !== -1, e.type );\n\t\t\t} );\n\t\t};\n\t}\n\n//----------- jQuery.ajax()\n\n\ttestIframe(\n\t\t\"XMLHttpRequest - Attempt to block tests because of dangling XHR requests (IE)\",\n\t\t\"ajax/unreleasedXHR.html\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"done\" );\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - success callbacks\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks - (url, options) syntax\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\tcreate: function( options ) {\n\t\t\t\treturn jQuery.ajax( url( \"name.html\" ), options );\n\t\t\t},\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - execute js for crossOrigin when dataType option is provided\", 3,\n\t\tfunction( assert ) {\n\t\t\treturn {\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\toptions.crossDomain = true;\n\t\t\t\t\toptions.dataType = \"script\";\n\t\t\t\t\treturn jQuery.ajax( url( \"mock.php?action=script&header=ecma\" ), options );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - custom attributes for script tag\", 4,\n\t\tfunction( assert ) {\n\t\t\treturn {\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\tvar xhr;\n\t\t\t\t\toptions.dataType = \"script\";\n\t\t\t\t\toptions.scriptAttrs = { id: \"jquery-ajax-test\", async: \"async\" };\n\t\t\t\t\txhr = jQuery.ajax( url( \"mock.php?action=script\" ), options );\n\t\t\t\t\tassert.equal( jQuery( \"#jquery-ajax-test\" ).attr( \"async\" ), \"async\", \"attr value\" );\n\t\t\t\t\treturn xhr;\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - do not execute js (crossOrigin)\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function( options ) {\n\t\t\t\toptions.crossDomain = true;\n\t\t\t\treturn jQuery.ajax( url( \"mock.php?action=script\" ), options );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tfail: function() {\n\t\t\t\tif ( jQuery.support.cors === false ) {\n\t\t\t\t\tassert.ok( true, \"fail\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (late binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (oncomplete binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tcomplete: function( xhr ) {\n\t\t\t\txhr.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - error callbacks\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert ),\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tassert.ok( true, \"error\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - textStatus and errorThrown values\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"abort\", \"textStatus is 'abort' for abort\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"abort\", \"errorThrown is 'abort' for abort\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"mystatus\", \"textStatus is 'mystatus' for abort('mystatus')\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"mystatus\", \"errorThrown is 'mystatus' for abort('mystatus')\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort( \"mystatus\" );\n\t\t\t}\n\t\t} ];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - responseText on error\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=error\" ),\n\t\t\terror: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.responseText, \"plain text message\", \"Test jqXHR.responseText is filled for HTTP errors\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"jQuery.ajax() - retry with jQuery.ajax( this )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar previousUrl,\n\t\t\tfirstTime = true,\n\t\t\tdone = assert.async();\n\t\tjQuery.ajax( {\n\t\t\turl: url( \"mock.php?action=error\" ),\n\t\t\terror: function() {\n\t\t\t\tif ( firstTime ) {\n\t\t\t\t\tfirstTime = false;\n\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t} else {\n\t\t\t\t\tassert.ok( true, \"Test retrying with jQuery.ajax(this) works\" );\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: url( \"mock.php?action=error&x=2\" ),\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tif ( !previousUrl ) {\n\t\t\t\t\t\t\t\tpreviousUrl = this.url;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tassert.strictEqual( this.url, previousUrl, \"url parameters are not re-appended\" );\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - headers\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).on( \"ajaxSend\", function( evt, xhr ) {\n\t\t\t\t\txhr.setRequestHeader( \"ajax-send\", \"test\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=headers&keys=siMPle|SometHing-elsE|OthEr|Nullable|undefined|Empty|ajax-send\" ),\n\t\t\theaders: {\n\t\t\t\t\"siMPle\": \"value\",\n\t\t\t\t\"SometHing-elsE\": \"other value\",\n\t\t\t\t\"OthEr\": \"something else\",\n\t\t\t\t\"Nullable\": null,\n\t\t\t\t\"undefined\": undefined\n\n\t\t\t\t// Support: IE 9 - 11, Edge 12 - 14 only\n\t\t\t\t// Not all browsers allow empty-string headers\n\t\t\t\t//\"Empty\": \"\"\n\t\t\t},\n\t\t\tsuccess: function( data, _, xhr ) {\n\t\t\t\tvar i, emptyHeader,\n\t\t\t\t\tisAndroid = /android 4\\.[0-3]/i.test( navigator.userAgent ),\n\t\t\t\t\trequestHeaders = jQuery.extend( this.headers, {\n\t\t\t\t\t\t\"ajax-send\": \"test\"\n\t\t\t\t\t} ),\n\t\t\t\t\ttmp = [];\n\t\t\t\tfor ( i in requestHeaders ) {\n\t\t\t\t\ttmp.push( i, \": \", requestHeaders[ i ] + \"\", \"\\n\" );\n\t\t\t\t}\n\t\t\t\ttmp = tmp.join( \"\" );\n\n\t\t\t\tassert.strictEqual( data, tmp, \"Headers were sent\" );\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header\" ), \"Hello World\", \"Sample header received\" );\n\t\t\t\tassert.ok( data.indexOf( \"undefined\" ) < 0, \"Undefined header value was not sent\" );\n\n\t\t\t\temptyHeader = xhr.getResponseHeader( \"Empty-Header\" );\n\t\t\t\tif ( emptyHeader === null ) {\n\t\t\t\t\tassert.ok( true, \"Firefox doesn't support empty headers\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( emptyHeader, \"\", \"Empty header received\" );\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header2\" ), \"Hello World 2\", \"Second sample header received\" );\n\n\t\t\t\tif ( isAndroid ) {\n\t\t\t\t\t// Support: Android 4.0-4.3 only\n\t\t\t\t\t// Android Browser only returns the last value for each header\n\t\t\t\t\t// so there's no way for jQuery get all parts.\n\t\t\t\t\tassert.ok( true, \"Android doesn't support repeated header names\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"List-Header\" ), \"Item 1, Item 2\", \"List header received\" );\n\t\t\t\t}\n\n\t\t\t\tif ( isAndroid && QUnit.isSwarm ) {\n\t\t\t\t\t// Support: Android 4.0-4.3 on BrowserStack only\n\t\t\t\t\t// Android Browser versions provided by BrowserStack fail this test\n\t\t\t\t\t// while locally fired emulators don't, even when they connect\n\t\t\t\t\t// to TestSwarm. Just skip the test there to avoid a red build.\n\t\t\t\t\tassert.ok( true, \"BrowserStack's Android fails the \\\"prototype collision (constructor)\\\" test\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"constructor\" ), \"prototype collision (constructor)\", \"constructor header received\" );\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"__proto__\" ), null, \"Undefined __proto__ header not received\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - Accept header\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=headers&keys=accept\" ),\n\t\t\theaders: {\n\t\t\t\tAccept: \"very wrong accept value\"\n\t\t\t},\n\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\txhr.setRequestHeader( \"Accept\", \"*/*\" );\n\t\t\t},\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.strictEqual( data, \"accept: */*\\n\", \"Test Accept header is set to last value provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - contentType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=headers&keys=content-type\" ),\n\t\t\t\tcontentType: \"test\",\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"content-type: test\\n\", \"Test content-type is sent when options.contentType is set\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=headers&keys=content-type\" ),\n\t\t\t\tcontentType: false,\n\t\t\t\tsuccess: function( data ) {\n\n\t\t\t\t\t// Some server/interpreter combinations always supply a Content-Type to scripts\n\t\t\t\t\tdata = data || \"content-type: \\n\";\n\t\t\t\t\tassert.strictEqual( data, \"content-type: \\n\", \"Test content-type is not set when options.contentType===false\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - protocol-less urls\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"//somedomain.com\",\n\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\tassert.equal( settings.url, location.protocol + \"//somedomain.com\", \"Make sure that the protocol is added.\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - URL fragment component preservation\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, baseURL + \"name.html#foo\",\n\t\t\t\t\t\t\"hash preserved for request with no query component.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html?abc#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, baseURL + \"name.html?abc#foo\",\n\t\t\t\t\t\t\"hash preserved for request with query component.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html?abc#foo\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": 123\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, baseURL + \"name.html?abc&test=123#foo\",\n\t\t\t\t\t\t\"hash preserved for request with query component and data.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"name.html?abc#brownies\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"devo\": \"hat\"\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\t// Clear the cache-buster param value\n\t\t\t\t\tvar url = settings.url.replace( /_=[^&#]+/, \"_=\" );\n\t\t\t\t\tassert.equal( url, baseURL + \"name.html?abc&devo=hat&_=#brownies\",\n\t\t\t\t\t\t\"hash preserved for cache-busting request with query component and data.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - traditional param encoding\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"devo\": \"hat\",\n\t\t\t\t\t\"answer\": 42,\n\t\t\t\t\t\"quux\": \"a space\"\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"/?devo=hat&answer=42&quux=a%20space\", \"Simple case\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"a\": [ 1, 2, 3 ],\n\t\t\t\t\t\"b[]\": [ \"b1\", \"b2\" ]\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"/?a=1&a=2&a=3&b%5B%5D=b1&b%5B%5D=b2\", \"Arrays\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"a\": [ [ 1, 2 ], [ 3, 4 ], 5 ]\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"/?a=1%2C2&a=3%2C4&a=5\", \"Nested arrays\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"/\",\n\t\t\t\ttraditional: true,\n\t\t\t\tdata: {\n\t\t\t\t\t\"a\": [ \"w\", [ [ \"x\", \"y\" ], \"z\" ] ]\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tvar url = settings.url.replace( /\\d{3,}/, \"\" );\n\t\t\t\t\tassert.equal( url, \"/?a=w&a=x%2Cy%2Cz&_=\", \"Cache-buster\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cross-domain detection\", 8, function( assert ) {\n\t\tfunction request( url, title, crossDomainOrOptions ) {\n\t\t\treturn jQuery.extend( {\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\turl: url,\n\t\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\t\tassert.ok( crossDomainOrOptions === false ? !s.crossDomain : s.crossDomain, title );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}, crossDomainOrOptions );\n\t\t}\n\n\t\tvar loc = document.location,\n\t\t\tsamePort = loc.port || ( loc.protocol === \"http:\" ? 80 : 443 ),\n\t\t\totherPort = loc.port === 666 ? 667 : 666,\n\t\t\totherProtocol = loc.protocol === \"http:\" ? \"https:\" : \"http:\";\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + samePort,\n\t\t\t\t\"Test matching ports are not detected as cross-domain\",\n\t\t\t\tfalse\n\t\t\t),\n\t\t\trequest(\n\t\t\t\totherProtocol + \"//\" + loc.host,\n\t\t\t\t\"Test different protocols are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"app:/path\",\n\t\t\t\t\"Adobe AIR app:/ URL detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//example.invalid:\" + ( loc.port || 80 ),\n\t\t\t\t\"Test different hostnames are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + otherPort,\n\t\t\t\t\"Test different ports are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"about:blank\",\n\t\t\t\t\"Test about:blank is detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.host,\n\t\t\t\t\"Test forced crossDomain is detected as cross-domain\",\n\t\t\t\t{\n\t\t\t\t\tcrossDomain: true\n\t\t\t\t}\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\" http://otherdomain.com\",\n\t\t\t\t\"Cross-domain url with leading space is detected as cross-domain\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - abort\", 9, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxError ajaxComplete\", assert ),\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.readyState, 1, \"XHR readyState indicates successful dispatch\" );\n\t\t\t\txhr.abort();\n\t\t\t\tassert.strictEqual( xhr.readyState, 0, \"XHR readyState indicates successful abortion\" );\n\t\t\t},\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tif ( !/android 4\\.0/i.test( navigator.userAgent ) ) {\n\t\tajaxTest( \"jQuery.ajax() - native abort\", 2, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: url( \"mock.php?action=wait&wait=1\" ),\n\t\t\t\txhr: function() {\n\t\t\t\t\tvar xhr = new window.XMLHttpRequest();\n\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t}, 100 );\n\t\t\t\t\treturn xhr;\n\t\t\t\t},\n\t\t\t\terror: function( xhr, msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"error\", \"Native abort triggers error callback\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n\n\t// Support: Android <= 4.0 - 4.3 only\n\t// Android 4.0-4.3 does not have ontimeout on an xhr\n\tif ( \"ontimeout\" in new window.XMLHttpRequest() ) {\n\t\tajaxTest( \"jQuery.ajax() - native timeout\", 2, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: url( \"mock.php?action=wait&wait=1\" ),\n\t\t\t\txhr: function() {\n\t\t\t\t\tvar xhr = new window.XMLHttpRequest();\n\t\t\t\t\txhr.timeout = 1;\n\t\t\t\t\treturn xhr;\n\t\t\t\t},\n\t\t\t\terror: function( xhr, msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"error\", \"Native timeout triggers error callback\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n\n\tajaxTest( \"jQuery.ajax() - events with context\", 12, function( assert ) {\n\t\tvar context = document.createElement( \"div\" );\n\n\t\tfunction event( e ) {\n\t\t\tassert.equal( this, context, e.type );\n\t\t}\n\n\t\tfunction callback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( this, context, \"context is preserved on callback \" + msg );\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( context ).appendTo( \"#foo\" )\n\t\t\t\t\t.on( \"ajaxSend\", event )\n\t\t\t\t\t.on( \"ajaxComplete\", event )\n\t\t\t\t\t.on( \"ajaxError\", event )\n\t\t\t\t\t.on( \"ajaxSuccess\", event );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\tsuccess: callback( \"success\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t}, {\n\t\t\t\turl: url( \"404.txt\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\terror: callback( \"error\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - events without context\", 3, function( assert ) {\n\t\tfunction nocallback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( typeof this.url, \"string\", \"context is settings on callback \" + msg );\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\turl: url( \"404.txt\" ),\n\t\t\tbeforeSend: nocallback( \"beforeSend\" ),\n\t\t\terror: nocallback( \"error\" ),\n\t\t\tcomplete:  nocallback( \"complete\" )\n\t\t};\n\t} );\n\n\tajaxTest( \"#15118 - jQuery.ajax() - function without jQuery.event\", 1, function( assert ) {\n\t\tvar holder;\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\tsetup: function() {\n\t\t\t\tholder = jQuery.event;\n\t\t\t\tdelete jQuery.event;\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Call can be made without jQuery.event\" );\n\t\t\t\tjQuery.event = holder;\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"#15160 - jQuery.ajax() - request manually aborted in ajaxSend\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).on( \"ajaxSend\", function( e, jqXHR ) {\n\t\t\t\t\tjqXHR.abort();\n\t\t\t\t} );\n\n\t\t\t\tjQuery( document ).on( \"ajaxError ajaxComplete\", function( e, jqXHR ) {\n\t\t\t\t\tassert.equal( jqXHR.statusText, \"abort\", \"jqXHR.statusText equals abort on global ajaxComplete and ajaxError events\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"name.html\" ),\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"name.html\" ),\n\t\t\tcontext: {},\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.test = \"foo\";\n\t\t\t},\n\t\t\tafterSend: function() {\n\t\t\t\tassert.strictEqual( this.context.test, \"foo\", \"Make sure the original object is maintained.\" );\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification through ajaxSetup\", 3, function( assert ) {\n\t\tvar obj = {};\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery.ajaxSetup( {\n\t\t\t\t\tcontext: obj\n\t\t\t\t} );\n\t\t\t\tassert.strictEqual( jQuery.ajaxSettings.context, obj, \"Make sure the context is properly set in ajaxSettings.\" );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.strictEqual( this, obj, \"Make sure the original object is maintained.\" );\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tcontext: {},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( this !== obj, \"Make sure overriding context is possible.\" );\n\t\t\t\t}\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - disabled globals\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"\", assert ),\n\t\t\tglobal: false,\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements (over JSONP)\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=xmlOverJsonp\" ),\n\t\t\tdataType: \"jsonp xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - HEAD requests\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tdata: {\n\t\t\t\t\t\"whip_it\": \"good\"\n\t\t\t\t},\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response with data\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.check = true;\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( this.check, \"check beforeSend was executed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend, cancel request manually\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - dataType html\", 5, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testFoo\" );\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\tdataType: \"html\",\n\t\t\turl: url( \"mock.php?action=testHTML&baseURL=\" + baseURL ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data.match( /^html text/ ), \"Check content for datatype html\" );\n\t\t\t\tjQuery( \"#ap\" ).html( data );\n\t\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated for datatype html\" );\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated for datatype html\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"json_obj.js\" ),\n\t\t\tdataType: \"text\",\n\t\t\tasync: false,\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( xhr.responseText ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request with callbacks\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"json_obj.js\" ),\n\t\t\tasync: false,\n\t\t\tdataType: \"text\",\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tvar result;\n\t\t\t\txhr.done( function( data ) {\n\t\t\t\t\tassert.ok( true, \"success callback executed\" );\n\t\t\t\t\tresult = data;\n\t\t\t\t} );\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( result ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object\", function( assert ) {\n\t\tassert.expect( 8 );\n\t\tvar done = assert.async();\n\t\tvar target = \"name.html\",\n\t\t\tsuccessCount = 0,\n\t\t\terrorCount = 0,\n\t\t\terrorEx = \"\",\n\t\t\tsuccess = function() {\n\t\t\t\tsuccessCount++;\n\t\t\t};\n\t\tjQuery( document ).on( \"ajaxError.passthru\", function( e, xml ) {\n\t\t\terrorCount++;\n\t\t\terrorEx += \": \" + xml.status;\n\t\t} );\n\t\tjQuery( document ).one( \"ajaxStop\", function() {\n\t\t\tassert.equal( successCount, 5, \"Check all ajax calls successful\" );\n\t\t\tassert.equal( errorCount, 0, \"Check no ajax errors (status\" + errorEx + \")\" );\n\t\t\tjQuery( document ).off( \"ajaxError.passthru\" );\n\t\t\tdone();\n\t\t} );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tassert.ok( jQuery.get( url( target ), success ), \"get\" );\n\t\tassert.ok( jQuery.post( url( target ), success ), \"post\" );\n\t\tassert.ok( jQuery.getScript( url( \"mock.php?action=testbar\" ), success ), \"script\" );\n\t\tassert.ok( jQuery.getJSON( url( \"json_obj.js\" ), success ), \"json\" );\n\t\tassert.ok( jQuery.ajax( {\n\t\t\turl: url( target ),\n\t\t\tsuccess: success\n\t\t} ), \"generic\" );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cache\", 28, function( assert ) {\n\t\tvar re = /_=(.*?)(&|$)/g,\n\t\t\trootUrl = baseURL + \"text.txt\";\n\n\t\tfunction request( url, title ) {\n\t\t\treturn {\n\t\t\t\turl: url,\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tvar parameter, tmp;\n\n\t\t\t\t\t// URL sanity check\n\t\t\t\t\tassert.equal( this.url.indexOf( rootUrl ), 0, \"root url not mangled: \" + this.url );\n\t\t\t\t\tassert.equal( /\\&.*\\?/.test( this.url ), false, \"parameter delimiters in order\" );\n\n\t\t\t\t\twhile ( ( tmp = re.exec( this.url ) ) ) {\n\t\t\t\t\t\tassert.strictEqual( parameter, undefined, title + \": only one 'no-cache' parameter\" );\n\t\t\t\t\t\tparameter = tmp[ 1 ];\n\t\t\t\t\t\tassert.notStrictEqual( parameter, \"tobereplaced555\", title + \": parameter (if it was there) was replaced\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t}\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\trootUrl,\n\t\t\t\t\"no query\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?\",\n\t\t\t\t\"empty query\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?pizza=true\",\n\t\t\t\t\"1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?_=tobereplaced555\",\n\t\t\t\t\"_= parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?pizza=true&_=tobereplaced555\",\n\t\t\t\t\"1 parameter and _=\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?_=tobereplaced555&tv=false\",\n\t\t\t\t\"_= and 1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\trootUrl + \"?name=David&_=tobereplaced555&washere=true\",\n\t\t\t\t\"2 parameters surrounding _=\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - Query String (?n)\" + label, 4, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp&callback=?\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, url callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp&callback=??\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, url context-free callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php/???action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, REST-like)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php/???action=jsonp&array=1\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( Array.isArray( data ), \"JSON results returned (GET, REST-like with param)\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - Explicit callback param\" + label, 10, function( assert ) {\n\t\t\treturn {\n\t\t\t\tsetup: function() {\n\t\t\t\t\tGlobals.register( \"functionToCleanUp\" );\n\t\t\t\t\tGlobals.register( \"XXX\" );\n\t\t\t\t\tGlobals.register( \"jsonpResults\" );\n\t\t\t\t\twindow[ \"jsonpResults\" ] = function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, custom callback function)\" );\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\trequests: [ {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tjsonp: \"callback\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, data obj callback)\" );\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tjsonpCallback: \"jsonpResults\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\ttypeof window[ \"jsonpResults\" ],\n\t\t\t\t\t\t\t\"function\",\n\t\t\t\t\t\t\t\"should not rewrite original function\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, custom callback name)\" );\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tjsonpCallback: \"functionToCleanUp\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\tassert.strictEqual( window[ \"functionToCleanUp\" ], true, \"Callback was removed (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\tvar xhr;\n\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\t\t\tjsonpCallback: \"functionToCleanUp\",\n\t\t\t\t\t\t\tbeforeSend: function( jqXHR ) {\n\t\t\t\t\t\t\t\txhr = jqXHR;\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t\txhr.fail( function() {\n\t\t\t\t\t\t\tassert.ok( true, \"Ajax error JSON (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\t\tassert.strictEqual( window[ \"functionToCleanUp\" ], true, \"Callback was removed after early abort (GET, custom callback name to be cleaned up)\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp&callback=XXX\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tjsonp: false,\n\t\t\t\t\tjsonpCallback: \"XXX\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\tassert.ok( /action=jsonp&callback=XXX&_=\\d+$/.test( this.url ), \"The URL wasn't messed with (GET, custom callback name with no url manipulation)\" );\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (GET, custom callback name with no url manipulation)\" );\n\t\t\t\t\t}\n\t\t\t\t} ]\n\t\t\t};\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - Callback in data\" + label, 2, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tdata: \"callback=?\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, data callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tdata: \"callback=??\",\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, data context-free callback)\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP - POST\" + label, 3, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (POST, no callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdata: \"callback=?\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (POST, data callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tjsonp: \"callback\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data[ \"data\" ], \"JSON results returned (POST, data obj callback)\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - JSONP\" + label, 3, function( assert ) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\t\tassert.ok( data.data, \"JSON results returned (GET, no callback)\" );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcreate: function( options ) {\n\t\t\t\t\t\tvar request = jQuery.ajax( options ),\n\t\t\t\t\t\t\tpromise = request.then( function( data ) {\n\t\t\t\t\t\t\t\tassert.ok( data.data, \"first request: JSON results returned (GET, no callback)\" );\n\t\t\t\t\t\t\t\trequest = jQuery.ajax( this ).done( function( data ) {\n\t\t\t\t\t\t\t\t\tassert.ok( data.data, \"this re-used: JSON results returned (GET, no callback)\" );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\tpromise.abort = request.abort;\n\t\t\t\t\t\t\t\treturn request;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\tpromise.abort = request.abort;\n\t\t\t\t\t\treturn promise;\n\t\t\t\t\t},\n\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\tsuccess: true\n\t\t\t\t}\n\t\t\t];\n\t\t} );\n\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with POST\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\ttype: \"POST\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (POST, no callback)\" );\n\t\t\t\tassert.strictEqual( status, \"success\", \"Script results returned (POST, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with scheme-less URL\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - malformed JSON\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"badjson.js\",\n\t\t\tdataType: \"json\",\n\t\t\terror: function( xhr, msg, detailedMsg ) {\n\t\t\t\tassert.strictEqual( msg, \"parsererror\", \"A parse error occurred.\" );\n\t\t\t\tassert.ok( /(invalid|error|exception)/i.test( detailedMsg ), \"Detailed parsererror message provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script by content-type\", 2, function() {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: baseURL + \"mock.php?action=script\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"script\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: baseURL + \"mock.php?action=script\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"ecma\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type\", 5, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=json\",\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"array\": \"1\"\n\t\t\t},\n\t\t\tsuccess: function( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type disabled with options\", 6, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"array\": \"1\"\n\t\t\t},\n\t\t\tcontents: {\n\t\t\t\t\"json\": false\n\t\t\t},\n\t\t\tsuccess: function( text ) {\n\t\t\t\tassert.strictEqual( typeof text, \"string\", \"json wasn't auto-determined\" );\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple get\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"mock.php?action=name&name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple post\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"POST\",\n\t\t\turl: url( \"mock.php?action=name\" ),\n\t\t\tdata: \"name=peter\",\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"pan\", \"Check for POST\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data option - empty bodies for non-GET requests\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=echoData\",\n\t\t\tdata: undefined,\n\t\t\ttype: \"post\",\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - x-www-form-urlencoded (gh-2658)\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"post\",\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.strictEqual( s.data, \"devo=A+Beautiful+World\", \"data is '+'-encoded\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - text/plain (gh-2658)\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"post\",\n\t\t\tcontentType: \"text/plain\",\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.strictEqual( s.data, \"devo=A%20Beautiful%20World\", \"data is %20-encoded\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - no processing POST\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"post\",\n\t\t\tcontentType: \"x-special-sauce\",\n\t\t\tprocessData: false,\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.deepEqual( s.data, { devo: \"A Beautiful World\" }, \"data is not processed\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data - no processing GET\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: { devo: \"A Beautiful World\" },\n\t\t\ttype: \"get\",\n\t\t\tcontentType: \"x-something-else\",\n\t\t\tprocessData: false,\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.deepEqual( s.data, { devo: \"A Beautiful World\" }, \"data is not processed\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\t\tajaxTest( \"jQuery.ajax() - data - process string with GET\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: \"bogus.html\",\n\t\t\tdata: \"a=1&b=2\",\n\t\t\ttype: \"get\",\n\t\t\tcontentType: \"x-something-else\",\n\t\t\tprocessData: false,\n\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\tassert.equal( s.url, \"bogus.html?a=1&b=2\", \"added data to url\" );\n\t\t\t\tassert.equal( s.data, undefined, \"removed data from settings\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tvar ifModifiedNow = new Date();\n\n\tjQuery.each(\n\t\t/* jQuery.each arguments start */\n\t\t{\n\t\t\t\" (cache)\": true,\n\t\t\t\" (no cache)\": false\n\t\t},\n\t\tfunction( label, cache ) {\n\t\t\tjQuery.each(\n\t\t\t\t{\n\t\t\t\t\t\"If-Modified-Since\": \"mock.php?action=ims\",\n\t\t\t\t\t\"Etag\": \"mock.php?action=etag\"\n\t\t\t\t},\n\t\t\t\tfunction( type, url ) {\n\t\t\t\t\turl = baseURL + url + \"&ts=\" + ifModifiedNow++;\n\t\t\t\t\tQUnit.test( \"jQuery.ajax() - \" + type + \" support\" + label, function( assert ) {\n\t\t\t\t\t\tassert.expect( 4 );\n\t\t\t\t\t\tvar done = assert.async();\n\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\tsuccess: function( _, status ) {\n\t\t\t\t\t\t\t\tassert.strictEqual( status, \"success\", \"Initial status is 'success'\" );\n\t\t\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( status, \"notmodified\", \"Following status is 'notmodified'\" );\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( jqXHR.status, 304, \"XHR status is 304\" );\n\t\t\t\t\t\t\t\t\t\tassert.equal( data, null, \"no response body is given\" );\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\t/* jQuery.each arguments end */\n\t);\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain (non-existing)\", 1, function( assert ) {\n\t\treturn {\n\n\t\t\t// see RFC 2606\n\t\t\turl: \"http://example.invalid\",\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"file not found: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"http://\" + externalHost,\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"access denied: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - atom+xml\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=atom\" ),\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"jQuery.ajax() - statusText\", function( assert ) {\n\t\tassert.expect( 3 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajax( url( \"mock.php?action=status&code=200&text=Hello\" ) ).done( function( _, statusText, jqXHR ) {\n\t\t\tassert.strictEqual( statusText, \"success\", \"callback status text ok for success\" );\n\t\t\tassert.ok( jqXHR.statusText === \"Hello\" || jqXHR.statusText === \"OK\", \"jqXHR status text ok for success (\" + jqXHR.statusText + \")\" );\n\t\t\tjQuery.ajax( url( \"mock.php?action=status&code=404&text=World\" ) ).fail( function( jqXHR, statusText ) {\n\t\t\t\tassert.strictEqual( statusText, \"error\", \"callback status text ok for error\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.ajax() - statusCode\", function( assert ) {\n\t\tassert.expect( 20 );\n\t\tvar done = assert.async(),\n\t\t\tcount = 12;\n\n\t\tfunction countComplete() {\n\t\t\tif ( !--count ) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\n\t\tfunction createStatusCodes( name, isSuccess ) {\n\t\t\tname = \"Test \" + name + \" \" + ( isSuccess ? \"success\" : \"error\" );\n\t\t\treturn {\n\t\t\t\t200: function() {\n\t\t\t\t\tassert.ok( isSuccess, name );\n\t\t\t\t},\n\t\t\t\t404: function() {\n\t\t\t\t\tassert.ok( !isSuccess, name );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tjQuery.each(\n\t\t\t/* jQuery.each arguments start */\n\t\t\t{\n\t\t\t\t\"name.html\": true,\n\t\t\t\t\"404.txt\": false\n\t\t\t},\n\t\t\tfunction( uri, isSuccess ) {\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"in options\", isSuccess ),\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} ).statusCode( createStatusCodes( \"immediately with method\", isSuccess ) );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"on complete\", isSuccess ) );\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"very late binding\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"all (options)\", isSuccess ),\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (on complete)\", isSuccess ) );\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (very late binding)\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} ).statusCode( createStatusCodes( \"all (immediately with method)\", isSuccess ) );\n\n\t\t\t\tvar testString = \"\";\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tsuccess: function( a, b, jqXHR ) {\n\t\t\t\t\t\tassert.ok( isSuccess, \"success\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\terror: function( jqXHR ) {\n\t\t\t\t\t\tassert.ok( !isSuccess, \"error\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\ttestString,\n\t\t\t\t\t\t\t\"AB\",\n\t\t\t\t\t\t\t\"Test statusCode callbacks are ordered like \" + ( isSuccess ? \"success\" :  \"error\" ) + \" callbacks\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t}\n\t\t\t/* jQuery.each arguments end*/\n\t\t);\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - transitive conversions\", 8, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdataType: \"myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called (*)\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontents: false, /* headers are wrong so we ignore them */\n\t\t\t\tdataType: \"* myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType (*)\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - overrideMimeType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\txhr.overrideMimeType( \"application/json\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using beforeSend\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"mock.php?action=json\" ),\n\t\t\t\tmimeType: \"application/json\",\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using mimeType option\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - empty json gets to error callback instead of success callback.\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=echoData\" ),\n\t\t\terror: function( _, __, error ) {\n\t\t\t\tassert.equal( typeof error === \"object\", true,  \"Didn't get back error object for empty json response\" );\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t};\n\t} );\n\n\tajaxTest( \"#2688 - jQuery.ajax() - beforeSend, cancel request\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#2806 - jQuery.ajax() - data option - evaluate function values\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=echoQuery\",\n\t\t\tdata: {\n\t\t\t\tkey: function() {\n\t\t\t\t\treturn \"value\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"action=echoQuery&key=value\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"#7531 - jQuery.ajax() - Location object as url\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar xhr,\n\t\t\tsuccess = false;\n\t\ttry {\n\t\t\txhr = jQuery.ajax( {\n\t\t\t\turl: window.location\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t\txhr.abort();\n\t\t} catch ( e ) {\n\n\t\t}\n\t\tassert.ok( success, \"document.location did not generate exception\" );\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#7578 - jQuery.ajax() - JSONP - default for cache option\" + label, 1, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.strictEqual( this.cache, false, \"cache must be false on JSON request\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t} );\n\t} );\n\n\tajaxTest( \"#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax();\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With no arguments\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( baseURL + \"name.html\" );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With only string URL argument\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( baseURL + \"name.html\", {} );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With string URL param and map\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\treturn jQuery.ajax( options );\n\t\t\t\t},\n\t\t\t\turl: baseURL + \"name.html\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"With only map\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#8205 - jQuery.ajax() - JSONP - re-use callbacks name\" + label, 4, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function( jqXHR, s ) {\n\t\t\t\t\ts.callback = s.jsonpCallback;\n\n\t\t\t\t\tassert.ok( this.callback in window, \"JSONP callback name is in the window\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tvar previous = this;\n\n\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\tprevious.jsonpCallback,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\"jsonpCallback option is set back to default in callbacks\"\n\t\t\t\t\t);\n\n\t\t\t\t\tassert.ok(\n\t\t\t\t\t\t!( this.callback in window ),\n\t\t\t\t\t\t\"JSONP callback name was removed from the window\"\n\t\t\t\t\t);\n\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: baseURL + \"mock.php?action=jsonp\",\n\t\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tassert.strictEqual( this.jsonpCallback, previous.callback, \"JSONP callback name is re-used\" );\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t} );\n\n\tQUnit.test( \"#9887 - jQuery.ajax() - Context with circular references (#9887)\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar success = false,\n\t\t\tcontext = {};\n\t\tcontext.field = context;\n\t\ttry {\n\t\t\tjQuery.ajax( \"non-existing\", {\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.ok( this === context, \"context was not deep extended\" );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t} catch ( e ) {\n\t\t\tconsole.log( e );\n\t\t}\n\t\tassert.ok( success, \"context with circular reference did not generate an exception\" );\n\t} );\n\n\tjQuery.each( [ \"as argument\", \"in settings object\" ], function( inSetting, title ) {\n\n\t\tfunction request( assert, url, test ) {\n\t\t\treturn {\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( inSetting ? { url: url } : url );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, ( test || url ) + \" \" + title );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tajaxTest( \"#10093 - jQuery.ajax() - falsy url \" + title, 4, function( assert ) {\n\t\t\treturn [\n\t\t\t\trequest( assert, \"\", \"empty string\" ),\n\t\t\t\trequest( assert, false ),\n\t\t\t\trequest( assert, null ),\n\t\t\t\trequest( assert, undefined )\n\t\t\t];\n\t\t} );\n\t} );\n\n\tajaxTest( \"#11151 - jQuery.ajax() - parse error body\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=error&json=1\" ),\n\t\t\tdataFilter: function( string ) {\n\t\t\t\tassert.ok( false, \"dataFilter called\" );\n\t\t\t\treturn string;\n\t\t\t},\n\t\t\terror: function( jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.responseText, \"{ \\\"code\\\": 40, \\\"message\\\": \\\"Bad Request\\\" }\", \"Error body properly set\" );\n\t\t\t\tassert.deepEqual( jqXHR.responseJSON, { code: 40, message: \"Bad Request\" }, \"Error body properly parsed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"1x1.jpg\" ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data === undefined || /JFIF/.test( data ), \"success callback reached\" );\n\t\t\t}\n\t\t};\n\t} );\n\nif ( typeof window.ArrayBuffer === \"undefined\" || typeof new XMLHttpRequest().responseType !== \"string\" ) {\n\n\tQUnit.skip( \"No ArrayBuffer support in XHR\", jQuery.noop );\n} else {\n\n\t// No built-in support for binary data, but it's easy to add via a prefilter\n\tjQuery.ajaxPrefilter( \"arraybuffer\", function( s ) {\n\t\ts.xhrFields = { responseType: \"arraybuffer\" };\n\t\ts.responseFields.arraybuffer = \"response\";\n\t\ts.converters[ \"binary arraybuffer\" ] = true;\n\t} );\n\n\tajaxTest( \"gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"1x1.jpg\" ),\n\t\t\tdataType: \"arraybuffer\",\n\t\t\tsuccess: function( data, s, jqxhr ) {\n\t\t\t\tassert.ok( data instanceof window.ArrayBuffer, \"correct data type\" );\n\t\t\t\tassert.ok( jqxhr.response instanceof window.ArrayBuffer, \"data in jQXHR\" );\n\t\t\t}\n\t\t};\n\t} );\n}\n\n\tQUnit.test( \"#11743 - jQuery.ajax() - script, throws exception\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tvar onerror = window.onerror;\n\t\twindow.onerror = function() {\n\t\t\tassert.ok( true, \"Exception thrown\" );\n\t\t\twindow.onerror = onerror;\n\t\t\tdone();\n\t\t};\n\t\tjQuery.ajax( {\n\t\t\turl: baseURL + \"badjson.js\",\n\t\t\tdataType: \"script\",\n\t\t\tthrows: true\n\t\t} );\n\t} );\n\n\tjQuery.each( [ \"method\", \"type\" ], function( _, globalOption ) {\n\t\tfunction request( assert, option ) {\n\t\t\tvar options = {\n\t\t\t\t\turl: url( \"mock.php?action=echoData\" ),\n\t\t\t\t\tdata: \"hello\",\n\t\t\t\t\tsuccess: function( msg ) {\n\t\t\t\t\t\tassert.strictEqual( msg, \"hello\", \"Check for POST (no override)\" );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tif ( option ) {\n\t\t\t\toptions[ option ] = \"GET\";\n\t\t\t\toptions.success = function( msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"\", \"Check for no POST (overriding with \" + option + \")\" );\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn options;\n\t\t}\n\n\t\tajaxTest(\n\t\t\t\"#12004 - jQuery.ajax() - method is an alias of type - \" +\n\t\t\tglobalOption + \" set globally\", 3,\n\t\t\tfunction( assert ) {\n\t\t\t\treturn {\n\t\t\t\t\tsetup: function() {\n\t\t\t\t\t\tvar options = {};\n\t\t\t\t\t\toptions[ globalOption ] = \"POST\";\n\t\t\t\t\t\tjQuery.ajaxSetup( options );\n\t\t\t\t\t},\n\t\t\t\t\trequests: [\n\t\t\t\t\t\trequest( assert, \"type\" ),\n\t\t\t\t\t\trequest( assert, \"method\" ),\n\t\t\t\t\t\trequest( assert )\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t} );\n\n\tajaxTest( \"#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"dashboard.xml\",\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( ajaxXML ) {\n\t\t\t\tvar parsedXML = jQuery( jQuery.parseXML( \"<tab title=\\\"Added\\\">blibli</tab>\" ) ).find( \"tab\" );\n\t\t\t\tajaxXML = jQuery( ajaxXML );\n\t\t\t\ttry {\n\t\t\t\t\tajaxXML.find( \"infowindowtab\" ).append( parsedXML );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tassert.strictEqual( e, undefined, \"error\" );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( ajaxXML.find( \"tab\" ).length, 3, \"Parsed node was added properly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13292 - jQuery.ajax() - converter is bypassed for 204 requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=status&code=204&text=No+Content\",\n\t\t\tdataType: \"testing\",\n\t\t\tconverters: {\n\t\t\t\t\"* testing\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.status, 204, \"status code is 204\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"status text is 'nocontent'\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13388 - jQuery.ajax() - responseXML\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp, _, jqXHR ) {\n\t\t\t\tassert.notStrictEqual( resp, undefined, \"XML document exists\" );\n\t\t\t\tassert.ok( \"responseXML\" in jqXHR, \"jqXHR.responseXML exists\" );\n\t\t\t\tassert.strictEqual( resp, jqXHR.responseXML, \"jqXHR.responseXML is set correctly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13922 - jQuery.ajax() - converter is bypassed for HEAD requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: baseURL + \"mock.php?action=json\",\n\t\t\tmethod: \"HEAD\",\n\t\t\tdata: {\n\t\t\t\theader: \"yes\"\n\t\t\t},\n\t\t\tconverters: {\n\t\t\t\t\"text json\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"data is undefined\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\t// Chrome 78 dropped support for synchronous XHR requests inside of\n\t// beforeunload, unload, pagehide, and visibilitychange event handlers.\n\t// See https://bugs.chromium.org/p/chromium/issues/detail?id=952452\n\tif ( !/chrome/i.test( navigator.userAgent ) ) {\n\t\ttestIframe(\n\t\t\t\"#14379 - jQuery.ajax() on unload\",\n\t\t\t\"ajax/onunload.html\",\n\t\t\tfunction( assert, jQuery, window, document, status ) {\n\t\t\t\tassert.expect( 1 );\n\t\t\t\tassert.strictEqual( status, \"success\", \"Request completed\" );\n\t\t\t}\n\t\t);\n\t}\n\n\tajaxTest( \"#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: baseURL + \"mock.php?action=echoData\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttoString: function() {\n\t\t\t\t\tthrow \"Can't parse\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tprocessData: false,\n\t\t\tdone: function( data ) {\n\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t},\n\t\t\tfail: function( jqXHR, status, error ) {\n\t\t\t\tassert.ok( true, \"exception caught: \" + error );\n\t\t\t\tassert.strictEqual( jqXHR.status, 0, \"proper status code\" );\n\t\t\t\tassert.strictEqual( status, \"error\", \"proper status\" );\n\t\t\t}\n\t\t}, {\n\t\t\turl: \"http://\" + externalHost + \":80q\",\n\t\t\tdone: function( data ) {\n\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t},\n\t\t\tfail: function( _, status, error ) {\n\t\t\t\tassert.ok( true, \"fail: \" + status + \" - \" + error );\n\t\t\t}\n\t\t} ];\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not xml, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n\t\t\t\t\"response\": \"<test/>\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not xml\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not xml, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n\t\t\t\t\"response\": \"<test/>\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not xml\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not json, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/jsontest\",\n\t\t\t\t\"response\": JSON.stringify( { test: \"test\" } )\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not json\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not html, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/htmltest\",\n\t\t\t\t\"response\": \"<p>test</p>\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not html\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not javascript, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/testjavascript\",\n\t\t\t\t\"response\": \"alert(1)\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not javascript\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"gh-2587 - when content-type not ecmascript, but looks like one\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"mock.php?action=contentType\" ),\n\t\t\tdata: {\n\t\t\t\tcontentType: \"test/testjavascript\",\n\t\t\t\t\"response\": \"alert(1)\"\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\ttypeof result,\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"Should handle it as a string, not ecmascript\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t} );\n\n//----------- jQuery.ajaxPrefilter()\n\n\tajaxTest( \"jQuery.ajaxPrefilter() - abort\", 1, function( assert ) {\n\t\treturn {\n\t\t\tdataType: \"prefix\",\n\t\t\tsetup: function() {\n\n\t\t\t\t// Ensure prefix does not throw an error\n\t\t\t\tjQuery.ajaxPrefilter( \"+prefix\", function( options, _, jqXHR ) {\n\t\t\t\t\tif ( options.abortInPrefilter ) {\n\t\t\t\t\t\tjqXHR.abort();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tabortInPrefilter: true,\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"error callback called\" );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"Request aborted by the prefilter must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n//----------- jQuery.ajaxSetup()\n\n\tQUnit.test( \"jQuery.ajaxSetup()\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\turl: url( \"mock.php?action=name&name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t\tjQuery.ajax();\n\t} );\n\n\tQUnit.test( \"jQuery.ajaxSetup({ timeout: Number }) - with global timeout\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tvar passed = 0,\n\t\t\tpass = function() {\n\t\t\t\tassert.ok( passed++ < 2, \"Error callback executed\" );\n\t\t\t\tif ( passed === 2 ) {\n\t\t\t\t\tjQuery( document ).off( \"ajaxError.setupTest\" );\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail = function( a, b ) {\n\t\t\t\tassert.ok( false, \"Check for timeout failed \" + a + \" \" + b );\n\t\t\t\tdone();\n\t\t\t};\n\n\t\tjQuery( document ).on( \"ajaxError.setupTest\", pass );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 1000\n\t\t} );\n\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"mock.php?action=wait&wait=5\" ),\n\t\t\terror: pass,\n\t\t\tsuccess: fail\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.ajaxSetup({ timeout: Number }) with localtimeout\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 50\n\t\t} );\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\ttimeout: 15000,\n\t\t\turl: url( \"mock.php?action=wait&wait=1\" ),\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"Check for local timeout failed\" );\n\t\t\t\tdone();\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"Check for local timeout\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t} );\n\n//----------- jQuery.domManip()\n\n\tQUnit.test( \"#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttype: \"POST\"\n\t\t} );\n\n\t\tjQuery( document ).on( \"ajaxStart ajaxStop\", function() {\n\t\t\tassert.ok( false, \"Global event triggered\" );\n\t\t} );\n\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<script src='\" + baseURL + \"mock.php?action=script'></script>\" );\n\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop\" );\n\t} );\n\n\tQUnit.test(\n\t\t\"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tvar done = assert.async();\n\n\t\t\tjQuery.ajaxSetup( {\n\t\t\t\ttype: \"POST\"\n\t\t\t} );\n\n\t\t\tjQuery( \"#qunit-fixture\" ).load( baseURL + \"mock.php?action=echoMethod\", function( method ) {\n\t\t\t\tassert.equal( method, \"GET\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test(\n\t\t\"jQuery#load() - should resolve with correct context\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 2 );\n\t\t\tvar done = assert.async();\n\t\t\tvar ps = jQuery( \"<p></p><p></p>\" );\n\t\t\tvar i = 0;\n\n\t\t\tps.appendTo( \"#qunit-fixture\" );\n\n\t\t\tps.load( baseURL + \"mock.php?action=echoMethod\", function() {\n\t\t\t\tassert.strictEqual( this, ps[ i++ ] );\n\n\t\t\t\tif ( i === 2 ) {\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test(\n\t\t\"#11402 - jQuery.domManip() - script in comments are properly evaluated\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 2 );\n\t\t\tjQuery( \"#qunit-fixture\" ).load( baseURL + \"cleanScript.html\", assert.async() );\n\t\t}\n\t);\n\n//----------- jQuery.get()\n\n\tQUnit.test( \"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery.get( url( \"dashboard.xml\" ), function( xml ) {\n\t\t\tvar content = [];\n\t\t\tjQuery( \"tab\", xml ).each( function() {\n\t\t\t\tcontent.push( jQuery( this ).text() );\n\t\t\t} );\n\t\t\tassert.strictEqual( content[ 0 ], \"blabla\", \"Check first tab\" );\n\t\t\tassert.strictEqual( content[ 1 ], \"blublu\", \"Check second tab\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"#8277 - jQuery.get( String, Function ) - data in ajaxSettings\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: \"helloworld\"\n\t\t} );\n\t\tjQuery.get( url( \"mock.php?action=echoQuery\" ), function( data ) {\n\t\t\tassert.ok( /helloworld$/.test( data ), \"Data from ajaxSettings was used\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.getJSON()\n\n\tQUnit.test( \"jQuery.getJSON( String, Hash, Function ) - JSON array\", function( assert ) {\n\t\tassert.expect( 5 );\n\t\tvar done = assert.async();\n\t\tjQuery.getJSON(\n\t\t\turl( \"mock.php?action=json\" ),\n\t\t\t{\n\t\t\t\t\"array\": \"1\"\n\t\t\t},\n\t\t\tfunction( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t);\n\t} );\n\n\tQUnit.test( \"jQuery.getJSON( String, Function ) - JSON object\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery.getJSON( url( \"mock.php?action=json\" ), function( json ) {\n\t\t\tif ( json && json[ \"data\" ] ) {\n\t\t\t\tassert.strictEqual( json[ \"data\" ][ \"lang\" ], \"en\", \"Check JSON: lang\" );\n\t\t\t\tassert.strictEqual( json[ \"data\" ].length, 25, \"Check JSON: length\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tvar absoluteUrl = url( \"mock.php?action=json\" );\n\n\t\t// Make a relative URL absolute relative to the document location\n\t\tif ( !/^[a-z][a-z0-9+.-]*:/i.test( absoluteUrl ) ) {\n\n\t\t\t// An absolute path replaces everything after the host\n\t\t\tif ( absoluteUrl.charAt( 0 ) === \"/\" ) {\n\t\t\t\tabsoluteUrl = window.location.href.replace( /(:\\/*[^/]*).*$/, \"$1\" ) + absoluteUrl;\n\n\t\t\t// A relative path replaces the last slash-separated path segment\n\t\t\t} else {\n\t\t\t\tabsoluteUrl = window.location.href.replace( /[^/]*$/, \"\" ) + absoluteUrl;\n\t\t\t}\n\t\t}\n\n\t\tjQuery.getJSON( absoluteUrl, function( json ) {\n\t\t\tassert.strictEqual( json.data.lang, \"en\", \"Check JSON: lang\" );\n\t\t\tassert.strictEqual( json.data.length, 25, \"Check JSON: length\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.getScript()\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - with callback\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 2 );\n\t\t\tvar done = assert.async();\n\n\t\t\tGlobals.register( \"testBar\" );\n\t\t\tjQuery.getScript( url( \"mock.php?action=testbar\" ), function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script was evaluated\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - no callback\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"mock.php?action=testbar\" ) ).done( assert.async() );\n\t} );\n\n\tQUnit.test( \"#8082 - jQuery.getScript( String, Function ) - source as responseText\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"mock.php?action=testbar\" ), function( data, _, jqXHR ) {\n\t\t\tassert.strictEqual( data, jqXHR.responseText, \"Same-domain script requests returns the source of the script\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.getScript( Object ) - with callback\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( {\n\t\t\turl: url( \"mock.php?action=testbar\" ),\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script was evaluated\" );\n\t\t\t\tdone();\n\t\t\t}\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.getScript( Object ) - no callback\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( { url: url( \"mock.php?action=testbar\" ) } ).done( assert.async() );\n\t} );\n\n// //----------- jQuery.fn.load()\n\n\t// check if load can be called with only url\n\tQUnit.test( \"jQuery.fn.load( String )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"name.html\", assert.async() );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - 404 error callbacks\", function( assert ) {\n\t\tassert.expect( 6 );\n\t\tvar done = assert.async();\n\n\t\taddGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert )();\n\t\tjQuery( document ).on( \"ajaxStop\", done );\n\t\tjQuery( \"<div></div>\" ).load( baseURL + \"404.txt\", function() {\n\t\t\tassert.ok( true, \"complete\" );\n\t\t} );\n\t} );\n\n\t// check if load can be called with url and null data\n\tQUnit.test( \"jQuery.fn.load( String, null )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"name.html\", null, assert.async() );\n\t} );\n\n\t// check if load can be called with url and undefined data\n\tQUnit.test( \"jQuery.fn.load( String, undefined )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"name.html\", undefined, assert.async() );\n\t} );\n\n\t// check if load can be called with only url\n\tQUnit.test( \"jQuery.fn.load( URL_SELECTOR )\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html div.user\", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 2, \"Verify that specific elements were injected\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\t// Selector should be trimmed to avoid leading spaces (#14773)\n\tQUnit.test( \"jQuery.fn.load( URL_SELECTOR with spaces )\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html   #superuser \", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 1, \"Verify that specific elements were injected\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\t// Selector should be trimmed to avoid leading spaces (#14773)\n\t// Selector should include any valid non-HTML whitespace (#3003)\n\tQUnit.test( \"jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html   #whitespace\\\\\\\\xA0 \", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 1, \"Verify that specific elements were injected\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - simple: inject text into DOM\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"#first\" ).load( url( \"name.html\" ), function() {\n\t\t\tassert.ok( /^ERROR/.test( jQuery( \"#first\" ).text() ), \"Check if content was injected into the DOM\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - check scripts\", function( assert ) {\n\t\tassert.expect( 7 );\n\t\tvar done = assert.async();\n\t\tvar verifyEvaluation = function() {\n\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated after load\" );\n\t\t\tassert.strictEqual( jQuery( \"#ap\" ).html(), \"bar\", \"Check if script evaluation has modified DOM\" );\n\t\t\tdone();\n\t\t};\n\n\t\tGlobals.register( \"testFoo\" );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"mock.php?action=testHTML&baseURL=\" + baseURL ), function() {\n\t\t\tassert.ok( jQuery( \"#first\" ).html().match( /^html text/ ), \"Check content after loading html\" );\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tsetTimeout( verifyEvaluation, 600 );\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - check file with only a script tag\", function( assert ) {\n\t\tassert.expect( 3 );\n\t\tvar done = assert.async();\n\t\tGlobals.register( \"testFoo\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"test2.html\" ), function() {\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataFilter: function() {\n\t\t\t\treturn \"Hello World\";\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"<div></div>\" ).load( url( \"name.html\" ), function( responseText ) {\n\t\t\tassert.strictEqual( jQuery( this ).html(), \"Hello World\", \"Test div was filled with filtered data\" );\n\t\t\tassert.strictEqual( responseText, \"Hello World\", \"Test callback receives filtered data\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, Object, Function )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\t\tjQuery( \"<div></div>\" ).load( url( \"mock.php?action=echoHtml\" ), {\n\t\t\t\"bar\": \"ok\"\n\t\t}, function() {\n\t\t\tvar $node = jQuery( this );\n\t\t\tassert.strictEqual( $node.find( \"#method\" ).text(), \"POST\", \"Check method\" );\n\t\t\tassert.strictEqual( $node.find( \"#data\" ).text(), \"bar=ok\", \"Check if data is passed correctly\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, String, Function )\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tjQuery( \"<div></div>\" ).load( url( \"mock.php?action=echoHtml\" ), \"foo=3&bar=ok\", function() {\n\t\t\tvar $node = jQuery( this );\n\t\t\tassert.strictEqual( $node.find( \"#method\" ).text(), \"GET\", \"Check method\" );\n\t\t\tassert.ok( $node.find( \"#query\" ).text().match( /foo=3&bar=ok/ ), \"Check if a string of data is passed correctly\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - callbacks get the correct parameters\", function( assert ) {\n\t\tassert.expect( 8 );\n\t\tvar completeArgs = {},\n\t\t\tdone = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tsuccess: function( _, status, jqXHR ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t},\n\t\t\terror: function( jqXHR, status ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t}\n\t\t} );\n\n\t\tjQuery.when.apply(\n\t\t\tjQuery,\n\t\t\tjQuery.map( [\n\t\t\t\t{\n\t\t\t\t\ttype: \"success\",\n\t\t\t\t\turl: baseURL + \"mock.php?action=echoQuery&arg=pop\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"error\",\n\t\t\t\t\turl: baseURL + \"404.txt\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tfunction( options ) {\n\t\t\t\treturn jQuery.Deferred( function( defer ) {\n\t\t\t\t\tjQuery( \"#foo\" ).load( options.url, function() {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\tassert.strictEqual( completeArgs[ options.url ].length, args.length, \"same number of arguments (\" + options.type + \")\" );\n\t\t\t\t\t\tjQuery.each( completeArgs[ options.url ], function( i, value ) {\n\t\t\t\t\t\t\tassert.strictEqual( args[ i ], value, \"argument #\" + i + \" is the same (\" + options.type + \")\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdefer.resolve();\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( done );\n\t} );\n\n\tQUnit.test( \"#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataType: \"json\"\n\t\t} );\n\t\tjQuery( document ).on( \"ajaxComplete\", function( e, xml, s ) {\n\t\t\tassert.strictEqual( s.dataType, \"html\", \"Verify the load() dataType was html\" );\n\t\t\tjQuery( document ).off( \"ajaxComplete\" );\n\t\t\tdone();\n\t\t} );\n\t\tjQuery( \"#first\" ).load( baseURL + \"test3.html\" );\n\t} );\n\n\tQUnit.test( \"#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tvar done = assert.async();\n\n\t\tvar data = {\n\t\t\t\"baz\": 1\n\t\t};\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: {\n\t\t\t\t\"foo\": \"bar\"\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#foo\" ).load( baseURL + \"mock.php?action=echoQuery\", data );\n\t\tjQuery( document ).on( \"ajaxComplete\", function( event, jqXHR, options ) {\n\t\t\tassert.ok( ~options.data.indexOf( \"foo=bar\" ), \"Data from ajaxSettings was used\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n// //----------- jQuery.post()\n\n\tQUnit.test( \"jQuery.post() - data\", function( assert ) {\n\t\tassert.expect( 3 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"mock.php?action=xml\" ),\n\t\t\t\t{\n\t\t\t\t\tcal: \"5-2\"\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.ajax( {\n\t\t\t\turl: url( \"mock.php?action=echoData\" ),\n\t\t\t\ttype: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": {\n\t\t\t\t\t\t\"length\": 7,\n\t\t\t\t\t\t\"foo\": \"bar\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"test%5Blength%5D=7&test%5Bfoo%5D=bar\", \"Check if a sub-object with a length param is serialized correctly\" );\n\t\t\t\t}\n\t\t\t} )\n\t\t).always( done );\n\t} );\n\n\tQUnit.test( \"jQuery.post( String, Hash, Function ) - simple with xml\", function( assert ) {\n\t\tassert.expect( 4 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"mock.php?action=xml\" ),\n\t\t\t\t{\n\t\t\t\t\tcal: \"5-2\"\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.post( url( \"mock.php?action=xml&cal=5-2\" ), {}, function( xml ) {\n\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery[get|post]( options ) - simple with xml\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar done = assert.async();\n\n\t\tjQuery.when.apply( jQuery,\n\t\t\tjQuery.map( [ \"get\", \"post\" ], function( method ) {\n\t\t\t\treturn jQuery[ method ]( {\n\t\t\t\t\turl: url( \"mock.php?action=xml\" ),\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcal: \"5-2\"\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function( xml ) {\n\t\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.active\n\n\tQUnit.test( \"jQuery.active\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( jQuery.active === 0, \"ajax active counter should be zero: \" + jQuery.active );\n\t} );\n\n} )();\n", "QUnit.module( \"attributes\", {\n\tafterEach: moduleTeardown\n} );\n\nfunction bareObj( value ) {\n\treturn value;\n}\n\nfunction functionReturningObj( value ) {\n\treturn function() {\n\t\treturn value;\n\t};\n}\n\nfunction arrayFromString( value ) {\n\treturn value ? value.split( \" \" ) : [];\n}\n\n/*\n\t======== local reference =======\n\tbareObj and functionReturningObj can be used to test passing functions to setters\n\tSee testVal below for an example\n\n\tbareObj( value );\n\t\tThis function returns whatever value is passed in\n\n\tfunctionReturningObj( value );\n\t\tReturns a function that returns the value\n*/\n\nQUnit.test( \"jQuery.propFix integrity test\", function( assert ) {\n\tassert.expect( 1 );\n\n\t//  This must be maintained and equal jQuery.attrFix when appropriate\n\t//  Ensure that accidental or erroneous property\n\t//  overwrites don't occur\n\t//  This is simply for better code coverage and future proofing.\n\tvar props = {\n\t\t\"tabindex\": \"tabIndex\",\n\t\t\"readonly\": \"readOnly\",\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\",\n\t\t\"maxlength\": \"maxLength\",\n\t\t\"cellspacing\": \"cellSpacing\",\n\t\t\"cellpadding\": \"cellPadding\",\n\t\t\"rowspan\": \"rowSpan\",\n\t\t\"colspan\": \"colSpan\",\n\t\t\"usemap\": \"useMap\",\n\t\t\"frameborder\": \"frameBorder\",\n\t\t\"contenteditable\": \"contentEditable\"\n\t};\n\n\tassert.deepEqual( props, jQuery.propFix, \"jQuery.propFix passes integrity check\" );\n} );\n\nQUnit.test( \"attr(String)\", function( assert ) {\n\tassert.expect( 50 );\n\n\tvar extras, body, $body,\n\t\tselect, optgroup, option, $img, styleElem,\n\t\t$button, $form, $a;\n\n\tassert.equal( jQuery( \"#text1\" ).attr( \"type\" ), \"text\", \"Check for type attribute\" );\n\tassert.equal( jQuery( \"#radio1\" ).attr( \"type\" ), \"radio\", \"Check for type attribute\" );\n\tassert.equal( jQuery( \"#check1\" ).attr( \"type\" ), \"checkbox\", \"Check for type attribute\" );\n\tassert.equal( jQuery( \"#simon1\" ).attr( \"rel\" ), \"bookmark\", \"Check for rel attribute\" );\n\tassert.equal( jQuery( \"#google\" ).attr( \"title\" ), \"Google!\", \"Check for title attribute\" );\n\tassert.equal( jQuery( \"#mark\" ).attr( \"hreflang\" ), \"en\", \"Check for hreflang attribute\" );\n\tassert.equal( jQuery( \"#en\" ).attr( \"lang\" ), \"en\", \"Check for lang attribute\" );\n\tassert.equal( jQuery( \"#simon\" ).attr( \"class\" ), \"blog link\", \"Check for class attribute\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"name\" ), \"name\", \"Check for name attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"name\" ), \"action\", \"Check for name attribute\" );\n\tassert.ok( jQuery( \"#form\" ).attr( \"action\" ).indexOf( \"formaction\" ) >= 0, \"Check for action attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"value\", \"t\" ).attr( \"value\" ), \"t\", \"Check setting the value attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"value\", \"\" ).attr( \"value\" ), \"\", \"Check setting the value attribute to empty string\" );\n\tassert.equal( jQuery( \"<div value='t'></div>\" ).attr( \"value\" ), \"t\", \"Check setting custom attr named 'value' on a div\" );\n\tassert.equal( jQuery( \"#form\" ).attr( \"blah\", \"blah\" ).attr( \"blah\" ), \"blah\", \"Set non-existent attribute on a form\" );\n\tassert.equal( jQuery( \"#foo\" ).attr( \"height\" ), undefined, \"Non existent height attribute should return undefined\" );\n\n\t// [7472] & [3113] (form contains an input with name=\"action\" or name=\"id\")\n\textras = jQuery( \"<input id='id' name='id' /><input id='name' name='name' /><input id='target' name='target' />\" ).appendTo( \"#testForm\" );\n\tassert.equal( jQuery( \"#form\" ).attr( \"action\", \"newformaction\" ).attr( \"action\" ), \"newformaction\", \"Check that action attribute was changed\" );\n\tassert.equal( jQuery( \"#testForm\" ).attr( \"target\" ), undefined, \"Retrieving target does not equal the input with name=target\" );\n\tassert.equal( jQuery( \"#testForm\" ).attr( \"target\", \"newTarget\" ).attr( \"target\" ), \"newTarget\", \"Set target successfully on a form\" );\n\tassert.equal( jQuery( \"#testForm\" ).removeAttr( \"id\" ).attr( \"id\" ), undefined, \"Retrieving id does not equal the input with name=id after id is removed [#7472]\" );\n\n\t// Bug #3685 (form contains input with name=\"name\")\n\tassert.equal( jQuery( \"#testForm\" ).attr( \"name\" ), undefined, \"Retrieving name does not retrieve input with name=name\" );\n\textras.remove();\n\n\tassert.equal( jQuery( \"#text1\" ).attr( \"maxlength\" ), \"30\", \"Check for maxlength attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).attr( \"maxLength\" ), \"30\", \"Check for maxLength attribute\" );\n\tassert.equal( jQuery( \"#area1\" ).attr( \"maxLength\" ), \"30\", \"Check for maxLength attribute\" );\n\n\t// using innerHTML in IE causes href attribute to be serialized to the full path\n\tjQuery( \"<a></a>\" ).attr( {\n\t\t\"id\": \"tAnchor5\",\n\t\t\"href\": \"#5\"\n\t} ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( jQuery( \"#tAnchor5\" ).attr( \"href\" ), \"#5\", \"Check for non-absolute href (an anchor)\" );\n\tjQuery( \"<a id='tAnchor6' href='#5'></a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( jQuery( \"#tAnchor5\" ).prop( \"href\" ), jQuery( \"#tAnchor6\" ).prop( \"href\" ), \"Check for absolute href prop on an anchor\" );\n\n\tjQuery( \"<script type='jquery/test' src='#5' id='scriptSrc'></script>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( jQuery( \"#tAnchor5\" ).prop( \"href\" ), jQuery( \"#scriptSrc\" ).prop( \"src\" ), \"Check for absolute src prop on a script\" );\n\n\t// list attribute is readonly by default in browsers that support it\n\tjQuery( \"#list-test\" ).attr( \"list\", \"datalist\" );\n\tassert.equal( jQuery( \"#list-test\" ).attr( \"list\" ), \"datalist\", \"Check setting list attribute\" );\n\n\t// Related to [5574] and [5683]\n\tbody = document.body;\n\t$body = jQuery( body );\n\n\tassert.strictEqual( $body.attr( \"foo\" ), undefined, \"Make sure that a non existent attribute returns undefined\" );\n\n\tbody.setAttribute( \"foo\", \"baz\" );\n\tassert.equal( $body.attr( \"foo\" ), \"baz\", \"Make sure the dom attribute is retrieved when no expando is found\" );\n\n\t$body.attr( \"foo\", \"cool\" );\n\tassert.equal( $body.attr( \"foo\" ), \"cool\", \"Make sure that setting works well when both expando and dom attribute are available\" );\n\n\tbody.removeAttribute( \"foo\" ); // Cleanup\n\n\tselect = document.createElement( \"select\" );\n\toptgroup = document.createElement( \"optgroup\" );\n\toption = document.createElement( \"option\" );\n\n\toptgroup.appendChild( option );\n\tselect.appendChild( optgroup );\n\n\tassert.equal( jQuery( option ).prop( \"selected\" ), true, \"Make sure that a single option is selected, even when in an optgroup.\" );\n\n\t$img = jQuery( \"<img style='display:none' width='215' height='53' src='\" + baseURL + \"1x1.jpg'/>\" ).appendTo( \"body\" );\n\tassert.equal( $img.attr( \"width\" ), \"215\", \"Retrieve width attribute on an element with display:none.\" );\n\tassert.equal( $img.attr( \"height\" ), \"53\", \"Retrieve height attribute on an element with display:none.\" );\n\n\t// Check for style support\n\tstyleElem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).css( {\n\t\tbackground: \"url(UPPERlower.gif)\"\n\t} );\n\tassert.ok( !!~styleElem.attr( \"style\" ).indexOf( \"UPPERlower.gif\" ), \"Check style attribute getter\" );\n\tassert.ok( !!~styleElem.attr( \"style\", \"position:absolute;\" ).attr( \"style\" ).indexOf( \"absolute\" ), \"Check style setter\" );\n\n\t// Check value on button element (#1954)\n\t$button = jQuery( \"<button>text</button>\" ).insertAfter( \"#button\" );\n\tassert.strictEqual( $button.attr( \"value\" ), undefined, \"Absence of value attribute on a button\" );\n\tassert.equal( $button.attr( \"value\", \"foobar\" ).attr( \"value\" ), \"foobar\", \"Value attribute on a button does not return innerHTML\" );\n\tassert.equal( $button.attr( \"value\", \"baz\" ).html(), \"text\", \"Setting the value attribute does not change innerHTML\" );\n\n\t// Attributes with a colon on a table element (#1591)\n\tassert.equal( jQuery( \"#table\" ).attr( \"test:attrib\" ), undefined, \"Retrieving a non-existent attribute on a table with a colon does not throw an error.\" );\n\tassert.equal( jQuery( \"#table\" ).attr( \"test:attrib\", \"foobar\" ).attr( \"test:attrib\" ), \"foobar\", \"Setting an attribute on a table with a colon does not throw an error.\" );\n\n\t$form = jQuery( \"<form class='something'></form>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $form.attr( \"class\" ), \"something\", \"Retrieve the class attribute on a form.\" );\n\n\t$a = jQuery( \"<a href='#' onclick='something()'>Click</a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $a.attr( \"onclick\" ), \"something()\", \"Retrieve ^on attribute without anonymous function wrapper.\" );\n\n\tassert.ok( jQuery( \"<div></div>\" ).attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );\n\tassert.ok( jQuery( \"<div></div>\" ).attr( \"title\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );\n\tassert.equal( jQuery( \"<div></div>\" ).attr( \"title\", \"something\" ).attr( \"title\" ), \"something\", \"Set the title attribute.\" );\n\tassert.ok( jQuery().attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no element is there.\" );\n\tassert.equal( jQuery( \"<div></div>\" ).attr( \"value\" ), undefined, \"An unset value on a div returns undefined.\" );\n\tassert.strictEqual( jQuery( \"<select><option value='property'></option></select>\" ).attr( \"value\" ), undefined, \"An unset value on a select returns undefined.\" );\n\n\t$form = jQuery( \"#form\" ).attr( \"enctype\", \"multipart/form-data\" );\n\tassert.equal( $form.prop( \"enctype\" ), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 #6743)\" );\n\n} );\n\nQUnit.test( \"attr(String) on cloned elements, #9646\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar div,\n\t\tinput = jQuery( \"<input name='tester' />\" );\n\n\tinput.attr( \"name\" );\n\n\tassert.strictEqual( input.clone( true ).attr( \"name\", \"test\" )[ 0 ].name, \"test\", \"Name attribute should be changed on cloned element\" );\n\n\tdiv = jQuery( \"<div id='tester'></div>\" );\n\tdiv.attr( \"id\" );\n\n\tassert.strictEqual( div.clone( true ).attr( \"id\", \"test\" )[ 0 ].id, \"test\", \"Id attribute should be changed on cloned element\" );\n\n\tinput = jQuery( \"<input value='tester' />\" );\n\tinput.attr( \"value\" );\n\n\tassert.strictEqual( input.clone( true ).attr( \"value\", \"test\" )[ 0 ].value, \"test\", \"Value attribute should be changed on cloned element\" );\n\n\tassert.strictEqual( input.clone( true ).attr( \"value\", 42 )[ 0 ].value, \"42\", \"Value attribute should be changed on cloned element\" );\n} );\n\nQUnit.test( \"attr(String) in XML Files\", function( assert ) {\n\tassert.expect( 3 );\n\tvar xml = createDashboardXML();\n\tassert.equal( jQuery( \"locations\", xml ).attr( \"class\" ), \"foo\", \"Check class attribute in XML document\" );\n\tassert.equal( jQuery( \"location\", xml ).attr( \"for\" ), \"bar\", \"Check for attribute in XML document\" );\n\tassert.equal( jQuery( \"location\", xml ).attr( \"checked\" ), \"different\", \"Check that hooks are not attached in XML document\" );\n} );\n\nQUnit.test( \"attr(String, Function)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( \"value\", function() {\n\t\t\treturn this.id;\n\t\t} ).attr( \"value\" ),\n\t\t\"text1\",\n\t\t\"Set value from id\"\n\t);\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( \"title\", function( i ) {\n\t\t\treturn i;\n\t\t} ).attr( \"title\" ),\n\t\t\"0\",\n\t\t\"Set value with an index\"\n\t);\n} );\n\nQUnit.test( \"attr(Hash)\", function( assert ) {\n\tassert.expect( 3 );\n\tvar pass = true;\n\n\tjQuery( \"#qunit-fixture div\" ).attr( {\n\t\t\"foo\": \"baz\",\n\t\t\"zoo\": \"ping\"\n\t} ).each( function() {\n\t\tif ( this.getAttribute( \"foo\" ) !== \"baz\" && this.getAttribute( \"zoo\" ) !== \"ping\" ) {\n\t\t\tpass = false;\n\t\t}\n\t} );\n\n\tassert.ok( pass, \"Set Multiple Attributes\" );\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( {\n\t\t\t\"value\": function() {\n\t\t\t\treturn this[ \"id\" ];\n\t\t\t} } ).attr( \"value\" ),\n\t\t\"text1\",\n\t\t\"Set attribute to computed value #1\"\n\t);\n\n\tassert.equal(\n\t\tjQuery( \"#text1\" ).attr( {\n\t\t\t\"title\": function( i ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} ).attr( \"title\" ),\n\t\t\"0\",\n\t\t\"Set attribute to computed value #2\"\n\t);\n} );\n\nQUnit.test( \"attr(String, Object)\", function( assert ) {\n\tassert.expect( 71 );\n\n\tvar $input, $text, $details,\n\t\tattributeNode, commentNode, textNode, obj,\n\t\ttable, td, j, type,\n\t\tcheck, thrown, button, $radio, $radios, $svg,\n\t\tdiv = jQuery( \"#qunit-fixture div\" ).attr( \"foo\", \"bar\" ),\n\t\ti = 0,\n\t\tfail = false;\n\n\tfor ( ; i < div.length; i++ ) {\n\t\tif ( div[ i ].getAttribute( \"foo\" ) !== \"bar\" ) {\n\t\t\tfail = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tassert.equal( fail, false, \"Set Attribute, the #\" + fail + \" element didn't get the attribute 'foo'\" );\n\n\tassert.ok(\n\t\tjQuery( \"#foo\" ).attr( {\n\t\t\t\"width\": null\n\t\t} ),\n\t\t\"Try to set an attribute to nothing\"\n\t);\n\n\tjQuery( \"#name\" ).attr( \"name\", \"something\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"name\" ), \"something\", \"Set name attribute\" );\n\tjQuery( \"#name\" ).attr( \"name\", null );\n\tassert.equal( jQuery( \"#name\" ).attr( \"name\" ), undefined, \"Remove name attribute\" );\n\n\t$input = jQuery( \"<input>\", {\n\t\tname: \"something\",\n\t\tid: \"specified\"\n\t} );\n\tassert.equal( $input.attr( \"name\" ), \"something\", \"Check element creation gets/sets the name attribute.\" );\n\tassert.equal( $input.attr( \"id\" ), \"specified\", \"Check element creation gets/sets the id attribute.\" );\n\n\t// As of fixing #11115, we only guarantee boolean property update for checked and selected\n\t$input = jQuery( \"<input type='checkbox'/>\" ).attr( \"checked\", true );\n\tassert.equal( $input.prop( \"checked\" ), true, \"Setting checked updates property (verified by .prop)\" );\n\tassert.equal( $input[ 0 ].checked, true, \"Setting checked updates property (verified by native property)\" );\n\t$input = jQuery( \"<option></option>\" ).attr( \"selected\", true );\n\tassert.equal( $input.prop( \"selected\" ), true, \"Setting selected updates property (verified by .prop)\" );\n\tassert.equal( $input[ 0 ].selected, true, \"Setting selected updates property (verified by native property)\" );\n\n\t$input = jQuery( \"#check2\" );\n\t$input.prop( \"checked\", true ).prop( \"checked\", false ).attr( \"checked\", true );\n\tassert.equal( $input.attr( \"checked\" ), \"checked\", \"Set checked (verified by .attr)\" );\n\t$input.prop( \"checked\", false ).prop( \"checked\", true ).attr( \"checked\", false );\n\tassert.equal( $input.attr( \"checked\" ), undefined, \"Remove checked (verified by .attr)\" );\n\n\t$input = jQuery( \"#text1\" ).prop( \"readOnly\", true ).prop( \"readOnly\", false ).attr( \"readonly\", true );\n\tassert.equal( $input.attr( \"readonly\" ), \"readonly\", \"Set readonly (verified by .attr)\" );\n\t$input.prop( \"readOnly\", false ).prop( \"readOnly\", true ).attr( \"readonly\", false );\n\tassert.equal( $input.attr( \"readonly\" ), undefined, \"Remove readonly (verified by .attr)\" );\n\n\t$input = jQuery( \"#check2\" ).attr( \"checked\", true ).attr( \"checked\", false ).prop( \"checked\", true );\n\tassert.equal( $input[ 0 ].checked, true, \"Set checked property (verified by native property)\" );\n\tassert.equal( $input.prop( \"checked\" ), true, \"Set checked property (verified by .prop)\" );\n\tassert.equal( $input.attr( \"checked\" ), undefined, \"Setting checked property doesn't affect checked attribute\" );\n\t$input.attr( \"checked\", false ).attr( \"checked\", true ).prop( \"checked\", false );\n\tassert.equal( $input[ 0 ].checked, false, \"Clear checked property (verified by native property)\" );\n\tassert.equal( $input.prop( \"checked\" ), false, \"Clear checked property (verified by .prop)\" );\n\tassert.equal( $input.attr( \"checked\" ), \"checked\", \"Clearing checked property doesn't affect checked attribute\" );\n\n\t$input = jQuery( \"#check2\" ).attr( \"checked\", false ).attr( \"checked\", \"checked\" );\n\tassert.equal( $input.attr( \"checked\" ), \"checked\", \"Set checked to 'checked' (verified by .attr)\" );\n\n\t$radios = jQuery( \"#checkedtest\" ).find( \"input[type='radio']\" );\n\t$radios.eq( 1 ).trigger( \"click\" );\n\tassert.equal( $radios.eq( 1 ).prop( \"checked\" ), true, \"Second radio was checked when clicked\" );\n\tassert.equal( $radios.eq( 0 ).attr( \"checked\" ), \"checked\", \"First radio is still [checked]\" );\n\n\t$input = jQuery( \"#text1\" ).attr( \"readonly\", false ).prop( \"readOnly\", true );\n\tassert.equal( $input[ 0 ].readOnly, true, \"Set readonly property (verified by native property)\" );\n\tassert.equal( $input.prop( \"readOnly\" ), true, \"Set readonly property (verified by .prop)\" );\n\t$input.attr( \"readonly\", true ).prop( \"readOnly\", false );\n\tassert.equal( $input[ 0 ].readOnly, false, \"Clear readonly property (verified by native property)\" );\n\tassert.equal( $input.prop( \"readOnly\" ), false, \"Clear readonly property (verified by .prop)\" );\n\n\t$input = jQuery( \"#name\" ).attr( \"maxlength\", \"5\" );\n\tassert.equal( $input[ 0 ].maxLength, 5, \"Set maxlength (verified by native property)\" );\n\t$input.attr( \"maxLength\", \"10\" );\n\tassert.equal( $input[ 0 ].maxLength, 10, \"Set maxlength (verified by native property)\" );\n\n\t// HTML5 boolean attributes\n\t$text = jQuery( \"#text1\" ).attr( {\n\t\t\"autofocus\": true,\n\t\t\"required\": true\n\t} );\n\tassert.equal( $text.attr( \"autofocus\" ), \"autofocus\", \"Reading autofocus attribute yields 'autofocus'\" );\n\tassert.equal( $text.attr( \"autofocus\", false ).attr( \"autofocus\" ), undefined, \"Setting autofocus to false removes it\" );\n\tassert.equal( $text.attr( \"required\" ), \"required\", \"Reading required attribute yields 'required'\" );\n\tassert.equal( $text.attr( \"required\", false ).attr( \"required\" ), undefined, \"Setting required attribute to false removes it\" );\n\n\t$details = jQuery( \"<details open></details>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $details.attr( \"open\" ), \"open\", \"open attribute presence indicates true\" );\n\tassert.equal( $details.attr( \"open\", false ).attr( \"open\" ), undefined, \"Setting open attribute to false removes it\" );\n\n\t$text.attr( \"data-something\", true );\n\tassert.equal( $text.attr( \"data-something\" ), \"true\", \"Set data attributes\" );\n\tassert.equal( $text.data( \"something\" ), true, \"Setting data attributes are not affected by boolean settings\" );\n\t$text.attr( \"data-another\", false );\n\tassert.equal( $text.attr( \"data-another\" ), \"false\", \"Set data attributes\" );\n\tassert.equal( $text.data( \"another\" ), false, \"Setting data attributes are not affected by boolean settings\" );\n\tassert.equal( $text.attr( \"aria-disabled\", false ).attr( \"aria-disabled\" ), \"false\", \"Setting aria attributes are not affected by boolean settings\" );\n\t$text.removeData( \"something\" ).removeData( \"another\" ).removeAttr( \"aria-disabled\" );\n\n\tjQuery( \"#foo\" ).attr( \"contenteditable\", true );\n\tassert.equal( jQuery( \"#foo\" ).attr( \"contenteditable\" ), \"true\", \"Enumerated attributes are set properly\" );\n\n\tattributeNode = document.createAttribute( \"irrelevant\" );\n\tcommentNode = document.createComment( \"some comment\" );\n\ttextNode = document.createTextNode( \"some text\" );\n\tobj = {};\n\n\tjQuery.each( [ commentNode, textNode, attributeNode ], function( i, elem ) {\n\t\tvar $elem = jQuery( elem );\n\t\t$elem.attr( \"nonexisting\", \"foo\" );\n\t\tassert.strictEqual( $elem.attr( \"nonexisting\" ), undefined, \"attr(name, value) works correctly on comment and text nodes (bug #7500).\" );\n\t} );\n\n\tjQuery.each( [ window, document, obj, \"#firstp\" ], function( i, elem ) {\n\t\tvar oldVal = elem.nonexisting,\n\t\t\t$elem = jQuery( elem );\n\t\tassert.strictEqual( $elem.attr( \"nonexisting\" ), undefined, \"attr works correctly for non existing attributes (bug #7500).\" );\n\t\tassert.equal( $elem.attr( \"nonexisting\", \"foo\" ).attr( \"nonexisting\" ), \"foo\", \"attr falls back to prop on unsupported arguments\" );\n\t\telem.nonexisting = oldVal;\n\t} );\n\n\t// Register the property on the window for the previous assertion so it will be clean up\n\tGlobals.register( \"nonexisting\" );\n\n\ttable = jQuery( \"#table\" ).append( \"<tr><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr>\" );\n\ttd = table.find( \"td\" ).eq( 0 );\n\ttd.attr( \"rowspan\", \"2\" );\n\tassert.equal( td[ 0 ][ \"rowSpan\" ], 2, \"Check rowspan is correctly set\" );\n\ttd.attr( \"colspan\", \"2\" );\n\tassert.equal( td[ 0 ][ \"colSpan\" ], 2, \"Check colspan is correctly set\" );\n\ttable.attr( \"cellspacing\", \"2\" );\n\tassert.equal( table[ 0 ][ \"cellSpacing\" ], \"2\", \"Check cellspacing is correctly set\" );\n\n\tassert.equal( jQuery( \"#area1\" ).attr( \"value\" ), undefined, \"Value attribute is distinct from value property.\" );\n\n\t// for #1070\n\tjQuery( \"#name\" ).attr( \"someAttr\", \"0\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"someAttr\" ), \"0\", \"Set attribute to a string of '0'\" );\n\tjQuery( \"#name\" ).attr( \"someAttr\", 0 );\n\tassert.equal( jQuery( \"#name\" ).attr( \"someAttr\" ), \"0\", \"Set attribute to the number 0\" );\n\tjQuery( \"#name\" ).attr( \"someAttr\", 1 );\n\tassert.equal( jQuery( \"#name\" ).attr( \"someAttr\" ), \"1\", \"Set attribute to the number 1\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\n\tj.attr( \"name\", \"attrvalue\" );\n\tassert.equal( j.attr( \"name\" ), \"attrvalue\", \"Check node,textnode,comment for attr\" );\n\tj.removeAttr( \"name\" );\n\n\t// Type\n\ttype = jQuery( \"#check2\" ).attr( \"type\" );\n\ttry {\n\t\tjQuery( \"#check2\" ).attr( \"type\", \"hidden\" );\n\t\tassert.ok( true, \"No exception thrown on input type change\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Exception thrown on input type change: \" + e );\n\t}\n\n\tcheck = document.createElement( \"input\" );\n\tthrown = true;\n\ttry {\n\t\tjQuery( check ).attr( \"type\", \"checkbox\" );\n\t} catch ( e ) {\n\t\tthrown = false;\n\t}\n\tassert.ok( thrown, \"Exception thrown when trying to change type property\" );\n\tassert.equal( \"checkbox\", jQuery( check ).attr( \"type\" ), \"Verify that you can change the type of an input element that isn't in the DOM\" );\n\n\tcheck = jQuery( \"<input />\" );\n\tthrown = true;\n\ttry {\n\t\tcheck.attr( \"type\", \"checkbox\" );\n\t} catch ( e ) {\n\t\tthrown = false;\n\t}\n\tassert.ok( thrown, \"Exception thrown when trying to change type property\" );\n\tassert.equal( \"checkbox\", check.attr( \"type\" ), \"Verify that you can change the type of an input element that isn't in the DOM\" );\n\n\tbutton = jQuery( \"#button\" );\n\ttry {\n\t\tbutton.attr( \"type\", \"submit\" );\n\t\tassert.ok( true, \"No exception thrown on button type change\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Exception thrown on button type change: \" + e );\n\t}\n\n\t$radio = jQuery( \"<input>\", {\n\t\t\"value\": \"sup\",\n\t\t// Use uppercase here to ensure the type\n\t\t// attrHook is still used\n\t\t\"TYPE\": \"radio\"\n\t} ).appendTo( \"#testForm\" );\n\tassert.equal( $radio.val(), \"sup\", \"Value is not reset when type is set after value on a radio\" );\n\n\t// Setting attributes on svg elements (bug #3116)\n\t$svg = jQuery(\n\t\t\"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' width='200' height='200'>\" +\n\n\t\t\t\"<circle cx='200' cy='200' r='150' />\" +\n\t\t\t\"</svg>\"\n\t\t).appendTo( \"body\" );\n\tassert.equal( $svg.attr( \"cx\", 100 ).attr( \"cx\" ), \"100\", \"Set attribute on svg element\" );\n\t$svg.remove();\n\n\t// undefined values are chainable\n\tjQuery( \"#name\" ).attr( \"maxlength\", \"5\" ).removeAttr( \"nonexisting\" );\n\tassert.equal( typeof jQuery( \"#name\" ).attr( \"maxlength\", undefined ), \"object\", \".attr('attribute', undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"maxlength\", undefined ).attr( \"maxlength\" ), \"5\", \".attr('attribute', undefined) does not change value (#5571)\" );\n\tassert.equal( jQuery( \"#name\" ).attr( \"nonexisting\", undefined ).attr( \"nonexisting\" ), undefined, \".attr('attribute', undefined) does not create attribute (#5571)\" );\n} );\n\nQUnit.test( \"attr(non-ASCII)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"<div \u03a9='omega' a\u00d8c='alpha'></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( $div.attr( \"\u03a9\" ), \"omega\", \".attr() exclusively lowercases characters in the range A-Z (gh-2730)\" );\n\tassert.equal( $div.attr( \"A\u00d8C\" ), \"alpha\", \".attr() exclusively lowercases characters in the range A-Z (gh-2730)\" );\n} );\n\nQUnit.test( \"attr - extending the boolean attrHandle\", function( assert ) {\n\tassert.expect( 1 );\n\tvar called = false,\n\t\torigAttrHandleHadChecked = \"checked\" in jQuery.expr.attrHandle,\n\t\torigAttrHandleChecked = jQuery.expr.attrHandle.checked,\n\t\t_handle = origAttrHandleChecked || $.noop;\n\tjQuery.expr.attrHandle.checked = function() {\n\t\tcalled = true;\n\t\t_handle.apply( this, arguments );\n\t};\n\tjQuery( \"#qunit-fixture input\" ).attr( \"checked\" );\n\tcalled = false;\n\tjQuery( \"#qunit-fixture input\" ).attr( \"checked\" );\n\tassert.ok( called, \"The boolean attrHandle does not drop custom attrHandles\" );\n\n\tif ( origAttrHandleHadChecked ) {\n\t\tjQuery.expr.attrHandle.checked = origAttrHandleChecked;\n\t} else {\n\t\tdelete jQuery.expr.attrHandle.checked;\n\t}\n\n} );\n\nQUnit.test( \"attr(String, Object) - Loaded via XML document\", function( assert ) {\n\tassert.expect( 2 );\n\tvar xml = createDashboardXML(),\n\t\ttitles = [];\n\tjQuery( \"tab\", xml ).each( function() {\n\t\ttitles.push( jQuery( this ).attr( \"title\" ) );\n\t} );\n\tassert.equal( titles[ 0 ], \"Location\", \"attr() in XML context: Check first title\" );\n\tassert.equal( titles[ 1 ], \"Users\", \"attr() in XML context: Check second title\" );\n} );\n\nQUnit.test( \"attr(String, Object) - Loaded via XML fragment\", function( assert ) {\n\tassert.expect( 2 );\n\tvar frag = createXMLFragment(),\n\t\t$frag = jQuery( frag );\n\n\t$frag.attr( \"test\", \"some value\" );\n\tassert.equal( $frag.attr( \"test\" ), \"some value\", \"set attribute\" );\n\t$frag.attr( \"test\", null );\n\tassert.equal( $frag.attr( \"test\" ), undefined, \"remove attribute\" );\n} );\n\nQUnit.test( \"attr('tabindex')\", function( assert ) {\n\tassert.expect( 8 );\n\n\t// elements not natively tabbable\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).attr( \"tabindex\" ), \"5\", \"not natively tabbable, with tabindex set to 0\" );\n\tassert.equal( jQuery( \"#divWithNoTabIndex\" ).attr( \"tabindex\" ), undefined, \"not natively tabbable, no tabindex set\" );\n\n\t// anchor with href\n\tassert.equal( jQuery( \"#linkWithNoTabIndex\" ).attr( \"tabindex\" ), undefined, \"anchor with href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithTabIndex\" ).attr( \"tabindex\" ), \"2\", \"anchor with href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNegativeTabIndex\" ).attr( \"tabindex\" ), \"-1\", \"anchor with href, tabindex set to -1\" );\n\n\t// anchor without href\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNoTabIndex\" ).attr( \"tabindex\" ), undefined, \"anchor without href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithTabIndex\" ).attr( \"tabindex\" ), \"1\", \"anchor without href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNegativeTabIndex\" ).attr( \"tabindex\" ), \"-1\", \"anchor without href, no tabindex set\" );\n} );\n\nQUnit.test( \"attr('tabindex', value)\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar element = jQuery( \"#divWithNoTabIndex\" );\n\tassert.equal( element.attr( \"tabindex\" ), undefined, \"start with no tabindex\" );\n\n\t// set a positive string\n\telement.attr( \"tabindex\", \"1\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"1\", \"set tabindex to 1 (string)\" );\n\n\t// set a zero string\n\telement.attr( \"tabindex\", \"0\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"0\", \"set tabindex to 0 (string)\" );\n\n\t// set a negative string\n\telement.attr( \"tabindex\", \"-1\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"-1\", \"set tabindex to -1 (string)\" );\n\n\t// set a positive number\n\telement.attr( \"tabindex\", 1 );\n\tassert.equal( element.attr( \"tabindex\" ), \"1\", \"set tabindex to 1 (number)\" );\n\n\t// set a zero number\n\telement.attr( \"tabindex\", 0 );\n\tassert.equal( element.attr( \"tabindex\" ), \"0\", \"set tabindex to 0 (number)\" );\n\n\t// set a negative number\n\telement.attr( \"tabindex\", -1 );\n\tassert.equal( element.attr( \"tabindex\" ), \"-1\", \"set tabindex to -1 (number)\" );\n\n\telement = jQuery( \"#linkWithTabIndex\" );\n\tassert.equal( element.attr( \"tabindex\" ), \"2\", \"start with tabindex 2\" );\n\n\telement.attr( \"tabindex\", -1 );\n\tassert.equal( element.attr( \"tabindex\" ), \"-1\", \"set negative tabindex\" );\n} );\n\nQUnit.test( \"removeAttr(String)\", function( assert ) {\n\tassert.expect( 12 );\n\tvar $first;\n\n\tassert.equal( jQuery( \"<div class='hello'></div>\" ).removeAttr( \"class\" ).attr( \"class\" ), undefined, \"remove class\" );\n\tassert.equal( jQuery( \"#form\" ).removeAttr( \"id\" ).attr( \"id\" ), undefined, \"Remove id\" );\n\tassert.equal( jQuery( \"#foo\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute\" );\n\tassert.equal( jQuery( \"#form\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute on a form\" );\n\tassert.equal( jQuery( \"<div style='position: absolute'></div>\" ).appendTo( \"#foo\" ).removeAttr( \"style\" ).prop( \"style\" ).cssText, \"\", \"Check removing style attribute (#9699 Webkit)\" );\n\tassert.equal( jQuery( \"#fx-test-group\" ).attr( \"height\", \"3px\" ).removeAttr( \"height\" ).get( 0 ).style.height, \"1px\", \"Removing height attribute has no effect on height set with style attribute\" );\n\n\tjQuery( \"#check1\" ).removeAttr( \"checked\" ).prop( \"checked\", true ).removeAttr( \"checked\" );\n\tassert.equal( document.getElementById( \"check1\" ).checked, true, \"removeAttr should not set checked to false, since the checked attribute does NOT mirror the checked property\" );\n\tjQuery( \"#text1\" ).prop( \"readOnly\", true ).removeAttr( \"readonly\" );\n\tassert.equal( document.getElementById( \"text1\" ).readOnly, false, \"removeAttr sets boolean properties to false\" );\n\n\tjQuery( \"#option2c\" ).removeAttr( \"selected\" );\n\tassert.equal( jQuery( \"#option2d\" ).attr( \"selected\" ), \"selected\", \"Removing `selected` from an option that is not selected does not remove selected from the currently selected option (#10870)\" );\n\n\ttry {\n\t\t$first = jQuery( \"#first\" ).attr( \"contenteditable\", \"true\" ).removeAttr( \"contenteditable\" );\n\t\tassert.equal( $first.attr( \"contenteditable\" ), undefined, \"Remove the contenteditable attribute\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"Removing contenteditable threw an error (#10429)\" );\n\t}\n\n\t$first = jQuery( \"<div Case='mixed'></div>\" );\n\tassert.equal( $first.attr( \"Case\" ), \"mixed\", \"case of attribute doesn't matter\" );\n\t$first.removeAttr( \"Case\" );\n\tassert.equal( $first.attr( \"Case\" ), undefined, \"mixed-case attribute was removed\" );\n} );\n\nQUnit.test( \"removeAttr(String) in XML\", function( assert ) {\n\tassert.expect( 7 );\n\tvar xml = createDashboardXML(),\n\t\tiwt = jQuery( \"infowindowtab\", xml );\n\n\tassert.equal( iwt.attr( \"normal\" ), \"ab\", \"Check initial value\" );\n\tiwt.removeAttr( \"Normal\" );\n\tassert.equal( iwt.attr( \"normal\" ), \"ab\", \"Should still be there\" );\n\tiwt.removeAttr( \"normal\" );\n\tassert.equal( iwt.attr( \"normal\" ), undefined, \"Removed\" );\n\n\tassert.equal( iwt.attr( \"mixedCase\" ), \"yes\", \"Check initial value\" );\n\tassert.equal( iwt.attr( \"mixedcase\" ), undefined, \"toLowerCase not work good\" );\n\tiwt.removeAttr( \"mixedcase\" );\n\tassert.equal( iwt.attr( \"mixedCase\" ), \"yes\", \"Should still be there\" );\n\tiwt.removeAttr( \"mixedCase\" );\n\tassert.equal( iwt.attr( \"mixedCase\" ), undefined, \"Removed\" );\n} );\n\nQUnit.test( \"removeAttr(Multi String, variable space width)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar div = jQuery( \"<div id='a' alt='b' title='c' rel='d'></div>\" ),\n\t\ttests = {\n\t\t\tid: \"a\",\n\t\t\talt: \"b\",\n\t\t\ttitle: \"c\",\n\t\t\trel: \"d\"\n\t\t};\n\n\tjQuery.each( tests, function( key, val ) {\n\t\tassert.equal( div.attr( key ), val, \"Attribute `\" + key + \"` exists, and has a value of `\" + val + \"`\" );\n\t} );\n\n\tdiv.removeAttr( \"id   alt title  rel  \" );\n\n\tjQuery.each( tests, function( key ) {\n\t\tassert.equal( div.attr( key ), undefined, \"Attribute `\" + key + \"` was removed\" );\n\t} );\n} );\n\nQUnit.test( \"removeAttr(Multi String, non-HTML whitespace is valid in attribute names (gh-3003)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar div = jQuery( \"<div id='a' data-\\xA0='b' title='c' rel='d'></div>\" );\n\tvar tests = {\n\t\tid: \"a\",\n\t\t\"data-\\xA0\": \"b\",\n\t\ttitle: \"c\",\n\t\trel: \"d\"\n\t};\n\n\tjQuery.each( tests, function( key, val ) {\n\t\tassert.equal( div.attr( key ), val, \"Attribute \\\"\" + key + \"\\\" exists, and has a value of \\\"\" + val + \"\\\"\" );\n\t} );\n\n\tdiv.removeAttr( \"id   data-\\xA0 title  rel  \" );\n\n\tjQuery.each( tests, function( key ) {\n\t\tassert.equal( div.attr( key ), undefined, \"Attribute \\\"\" + key + \"\\\" was removed\" );\n\t} );\n} );\n\nQUnit.test( \"prop(String, Object)\", function( assert ) {\n\n\tassert.expect( 17 );\n\n\tassert.equal( jQuery( \"#text1\" ).prop( \"value\" ), \"Test\", \"Check for value attribute\" );\n\tassert.equal( jQuery( \"#text1\" ).prop( \"value\", \"Test2\" ).prop( \"defaultValue\" ), \"Test\", \"Check for defaultValue attribute\" );\n\tassert.equal( jQuery( \"#select2\" ).prop( \"selectedIndex\" ), 3, \"Check for selectedIndex attribute\" );\n\tassert.equal( jQuery( \"#foo\" ).prop( \"nodeName\" ).toUpperCase(), \"DIV\", \"Check for nodeName attribute\" );\n\tassert.equal( jQuery( \"#foo\" ).prop( \"tagName\" ).toUpperCase(), \"DIV\", \"Check for tagName attribute\" );\n\tassert.equal( jQuery( \"<option></option>\" ).prop( \"selected\" ), false, \"Check selected attribute on disconnected element.\" );\n\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).prop( \"tabindex\" ), 5, \"Check retrieving tabindex\" );\n\tjQuery( \"#text1\" ).prop( \"readonly\", true );\n\tassert.equal( document.getElementById( \"text1\" ).readOnly, true, \"Check setting readOnly property with 'readonly'\" );\n\tassert.equal( jQuery( \"#label-for\" ).prop( \"for\" ), \"action\", \"Check retrieving htmlFor\" );\n\tjQuery( \"#text1\" ).prop( \"class\", \"test\" );\n\tassert.equal( document.getElementById( \"text1\" ).className, \"test\", \"Check setting className with 'class'\" );\n\tassert.equal( jQuery( \"#text1\" ).prop( \"maxlength\" ), 30, \"Check retrieving maxLength\" );\n\tjQuery( \"#table\" ).prop( \"cellspacing\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"cellSpacing\" ), \"1\", \"Check setting and retrieving cellSpacing\" );\n\tjQuery( \"#table\" ).prop( \"cellpadding\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"cellPadding\" ), \"1\", \"Check setting and retrieving cellPadding\" );\n\tjQuery( \"#table\" ).prop( \"rowspan\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"rowSpan\" ), 1, \"Check setting and retrieving rowSpan\" );\n\tjQuery( \"#table\" ).prop( \"colspan\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"colSpan\" ), 1, \"Check setting and retrieving colSpan\" );\n\tjQuery( \"#table\" ).prop( \"usemap\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"useMap\" ), 1, \"Check setting and retrieving useMap\" );\n\tjQuery( \"#table\" ).prop( \"frameborder\", 1 );\n\tassert.equal( jQuery( \"#table\" ).prop( \"frameBorder\" ), 1, \"Check setting and retrieving frameBorder\" );\n} );\n\nQUnit.test( \"prop(String, Object) on null/undefined\", function( assert ) {\n\n  assert.expect( 14 );\n\n\tvar select, optgroup, option, attributeNode, commentNode, textNode, obj, $form,\n\t\tbody = document.body,\n\t\t$body = jQuery( body );\n\n\tassert.ok( $body.prop( \"nextSibling\" ) === null, \"Make sure a null expando returns null\" );\n\tbody[ \"foo\" ] = \"bar\";\n\tassert.equal( $body.prop( \"foo\" ), \"bar\", \"Make sure the expando is preferred over the dom attribute\" );\n\tbody[ \"foo\" ] = undefined;\n\tassert.ok( $body.prop( \"foo\" ) === undefined, \"Make sure the expando is preferred over the dom attribute, even if undefined\" );\n\n\tselect = document.createElement( \"select\" );\n\toptgroup = document.createElement( \"optgroup\" );\n\toption = document.createElement( \"option\" );\n\n\toptgroup.appendChild( option );\n\tselect.appendChild( optgroup );\n\n\tassert.equal( jQuery( option ).prop( \"selected\" ), true, \"Make sure that a single option is selected, even when in an optgroup.\" );\n\tassert.equal( jQuery( document ).prop( \"nodeName\" ), \"#document\", \"prop works correctly on document nodes (bug #7451).\" );\n\n\tattributeNode = document.createAttribute( \"irrelevant\" );\n\tcommentNode = document.createComment( \"some comment\" );\n\ttextNode = document.createTextNode( \"some text\" );\n\tobj = {};\n\tjQuery.each( [ document, attributeNode, commentNode, textNode, obj, \"#firstp\" ], function( i, ele ) {\n\t\tassert.strictEqual( jQuery( ele ).prop( \"nonexisting\" ), undefined, \"prop works correctly for non existing attributes (bug #7500).\" );\n\t} );\n\n\tobj = {};\n\tjQuery.each( [ document, obj ], function( i, ele ) {\n\t\tvar $ele = jQuery( ele );\n\t\t$ele.prop( \"nonexisting\", \"foo\" );\n\t\tassert.equal( $ele.prop( \"nonexisting\" ), \"foo\", \"prop(name, value) works correctly for non existing attributes (bug #7500).\" );\n\t} );\n\tjQuery( document ).removeProp( \"nonexisting\" );\n\n\t$form = jQuery( \"#form\" ).prop( \"enctype\", \"multipart/form-data\" );\n\tassert.equal( $form.prop( \"enctype\" ), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 #6743)\" );\n} );\n\nQUnit.test( \"prop('tabindex')\", function( assert ) {\n\tassert.expect( 11 );\n\n\t// inputs without tabIndex attribute\n\tassert.equal( jQuery( \"#inputWithoutTabIndex\" ).prop( \"tabindex\" ), 0, \"input without tabindex\" );\n\tassert.equal( jQuery( \"#buttonWithoutTabIndex\" ).prop( \"tabindex\" ), 0, \"button without tabindex\" );\n\tassert.equal( jQuery( \"#textareaWithoutTabIndex\" ).prop( \"tabindex\" ), 0, \"textarea without tabindex\" );\n\n\t// elements not natively tabbable\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).prop( \"tabindex\" ), 5, \"not natively tabbable, with tabindex set to 0\" );\n\tassert.equal( jQuery( \"#divWithNoTabIndex\" ).prop( \"tabindex\" ), -1, \"not natively tabbable, no tabindex set\" );\n\n\t// anchor with href\n\tassert.equal( jQuery( \"#linkWithNoTabIndex\" ).prop( \"tabindex\" ), 0, \"anchor with href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithTabIndex\" ).prop( \"tabindex\" ), 2, \"anchor with href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNegativeTabIndex\" ).prop( \"tabindex\" ), -1, \"anchor with href, tabindex set to -1\" );\n\n\t// anchor without href\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNoTabIndex\" ).prop( \"tabindex\" ), -1, \"anchor without href, no tabindex set\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithTabIndex\" ).prop( \"tabindex\" ), 1, \"anchor without href, tabindex set to 2\" );\n\tassert.equal( jQuery( \"#linkWithNoHrefWithNegativeTabIndex\" ).prop( \"tabindex\" ), -1, \"anchor without href, no tabindex set\" );\n} );\n\nQUnit.test( \"image.prop( 'tabIndex' )\", function( assert ) {\n\tassert.expect( 1 );\n\tvar image = jQuery( \"<img src='\" + baseURL + \"1x1.jpg' />\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\tassert.equal( image.prop( \"tabIndex\" ), -1, \"tabIndex on image\" );\n} );\n\nQUnit.test( \"prop('tabindex', value)\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar clone,\n\t\telement = jQuery( \"#divWithNoTabIndex\" );\n\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"start with no tabindex\" );\n\n\t// set a positive string\n\telement.prop( \"tabindex\", \"1\" );\n\tassert.equal( element.prop( \"tabindex\" ), 1, \"set tabindex to 1 (string)\" );\n\n\t// set a zero string\n\telement.prop( \"tabindex\", \"0\" );\n\tassert.equal( element.prop( \"tabindex\" ), 0, \"set tabindex to 0 (string)\" );\n\n\t// set a negative string\n\telement.prop( \"tabindex\", \"-1\" );\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"set tabindex to -1 (string)\" );\n\n\t// set a positive number\n\telement.prop( \"tabindex\", 1 );\n\tassert.equal( element.prop( \"tabindex\" ), 1, \"set tabindex to 1 (number)\" );\n\n\t// set a zero number\n\telement.prop( \"tabindex\", 0 );\n\tassert.equal( element.prop( \"tabindex\" ), 0, \"set tabindex to 0 (number)\" );\n\n\t// set a negative number\n\telement.prop( \"tabindex\", -1 );\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"set tabindex to -1 (number)\" );\n\n\telement = jQuery( \"#linkWithTabIndex\" );\n\tassert.equal( element.prop( \"tabindex\" ), 2, \"start with tabindex 2\" );\n\n\telement.prop( \"tabindex\", -1 );\n\tassert.equal( element.prop( \"tabindex\" ), -1, \"set negative tabindex\" );\n\n\tclone = element.clone();\n\tclone.prop( \"tabindex\", 1 );\n\tassert.equal( clone[ 0 ].getAttribute( \"tabindex\" ), \"1\", \"set tabindex on cloned element\" );\n} );\n\nQUnit.test( \"option.prop('selected', true) affects select.selectedIndex (gh-2732)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tfunction addOptions( $elem ) {\n\t\treturn $elem.append(\n\t\t\tjQuery( \"<option></option>\" ).val( \"a\" ).text( \"One\" ),\n\t\t\tjQuery( \"<option></option>\" ).val( \"b\" ).text( \"Two\" ),\n\t\t\tjQuery( \"<option></option>\" ).val( \"c\" ).text( \"Three\" )\n\t\t)\n\t\t.find( \"[value=a]\" ).prop( \"selected\", true ).end()\n\t\t.find( \"[value=c]\" ).prop( \"selected\", true ).end();\n\t}\n\n\tvar $optgroup,\n\t\t$select = jQuery( \"<select></select>\" );\n\n\t// Check select with options\n\taddOptions( $select ).appendTo( \"#qunit-fixture\" );\n\t$select.find( \"[value=b]\" ).prop( \"selected\", true );\n\tassert.equal( $select[ 0 ].selectedIndex, 1, \"Setting option selected affects selectedIndex\" );\n\n\t$select.empty();\n\n\t// Check select with optgroup\n\t$optgroup = jQuery( \"<optgroup></optgroup>\" );\n\taddOptions( $optgroup ).appendTo( $select );\n\t$select.find( \"[value=b]\" ).prop( \"selected\", true );\n\n\tassert.equal( $select[ 0 ].selectedIndex, 1, \"Setting option in optgroup selected affects selectedIndex\" );\n} );\n\nQUnit.test( \"removeProp(String)\", function( assert ) {\n\tassert.expect( 6 );\n\tvar attributeNode = document.createAttribute( \"irrelevant\" ),\n\t\tcommentNode = document.createComment( \"some comment\" ),\n\t\ttextNode = document.createTextNode( \"some text\" ),\n\t\tobj = {};\n\n\tassert.strictEqual(\n\t\tjQuery( \"#firstp\" ).prop( \"nonexisting\", \"foo\" ).removeProp( \"nonexisting\" )[ 0 ][ \"nonexisting\" ],\n\t\tundefined,\n\t\t\"removeprop works correctly on DOM element nodes\"\n\t);\n\n\tjQuery.each( [ document, obj ], function( i, ele ) {\n\t\tvar $ele = jQuery( ele );\n\t\t$ele.prop( \"nonexisting\", \"foo\" ).removeProp( \"nonexisting\" );\n\t\tassert.strictEqual( ele[ \"nonexisting\" ], undefined, \"removeProp works correctly on non DOM element nodes (bug #7500).\" );\n\t} );\n\tjQuery.each( [ commentNode, textNode, attributeNode ], function( i, ele ) {\n\t\tvar $ele = jQuery( ele );\n\t\t$ele.prop( \"nonexisting\", \"foo\" ).removeProp( \"nonexisting\" );\n\t\tassert.strictEqual( ele[ \"nonexisting\" ], undefined, \"removeProp works correctly on non DOM element nodes (bug #7500).\" );\n\t} );\n} );\n\nQUnit.test( \"val() after modification\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tdocument.getElementById( \"text1\" ).value = \"bla\";\n\tassert.equal( jQuery( \"#text1\" ).val(), \"bla\", \"Check for modified value of input element\" );\n} );\n\nQUnit.test( \"val()\", function( assert ) {\n\n\tassert.expect( 20 + ( jQuery.fn.serialize ? 6 : 0 ) );\n\n\tvar checks, $button;\n\tassert.equal( jQuery( \"#text1\" ).val(), \"Test\", \"Check for value of input element\" );\n\n\t// ticket #1714 this caused a JS error in IE\n\tassert.equal( jQuery( \"#first\" ).val(), \"\", \"Check a paragraph element to see if it has a value\" );\n\tassert.ok( jQuery( [] ).val() === undefined, \"Check an empty jQuery object will return undefined from val\" );\n\n\tassert.equal( jQuery( \"#select2\" ).val(), \"3\", \"Call val() on a single='single' select\" );\n\n\tassert.deepEqual( jQuery( \"#select3\" ).val(), [ \"1\", \"2\" ], \"Call val() on a multiple='multiple' select\" );\n\n\tassert.equal( jQuery( \"#option3c\" ).val(), \"2\", \"Call val() on a option element with value\" );\n\n\tassert.equal( jQuery( \"#option3a\" ).val(), \"\", \"Call val() on a option element with empty value\" );\n\n\tassert.equal( jQuery( \"#option3e\" ).val(), \"no value\", \"Call val() on a option element with no value attribute\" );\n\n\tassert.equal( jQuery( \"#option3a\" ).val(), \"\", \"Call val() on a option element with no value attribute\" );\n\n\tjQuery( \"#select3\" ).val( \"\" );\n\tassert.deepEqual( jQuery( \"#select3\" ).val(), [ \"\" ], \"Call val() on a multiple='multiple' select\" );\n\n\tassert.deepEqual( jQuery( \"#select4\" ).val(), [], \"Call val() on multiple='multiple' select with all disabled options\" );\n\n\tjQuery( \"#select4 optgroup\" ).add( \"#select4 > [disabled]\" ).attr( \"disabled\", false );\n\tassert.deepEqual( jQuery( \"#select4\" ).val(), [ \"2\", \"3\" ], \"Call val() on multiple='multiple' select with some disabled options\" );\n\n\tjQuery( \"#select4\" ).attr( \"disabled\", true );\n\tassert.deepEqual( jQuery( \"#select4\" ).val(), [ \"2\", \"3\" ], \"Call val() on disabled multiple='multiple' select\" );\n\n\tassert.equal( jQuery( \"#select5\" ).val(), \"3\", \"Check value on ambiguous select.\" );\n\n\tjQuery( \"#select5\" ).val( 1 );\n\tassert.equal( jQuery( \"#select5\" ).val(), \"1\", \"Check value on ambiguous select.\" );\n\n\tjQuery( \"#select5\" ).val( 3 );\n\tassert.equal( jQuery( \"#select5\" ).val(), \"3\", \"Check value on ambiguous select.\" );\n\n\tassert.strictEqual(\n\t\tjQuery( \"<select name='select12584' id='select12584'><option value='1' disabled='disabled'>1</option></select>\" ).val(),\n\t\tnull,\n\t\t\"Select-one with only option disabled (#12584)\"\n\t);\n\n\tif ( jQuery.fn.serialize ) {\n\t\tchecks = jQuery( \"<input type='checkbox' name='test' value='1'/><input type='checkbox' name='test' value='2'/><input type='checkbox' name='test' value=''/><input type='checkbox' name='test'/>\" ).appendTo( \"#form\" );\n\n\t\tassert.deepEqual( checks.serialize(), \"\", \"Get unchecked values.\" );\n\n\t\tassert.equal( checks.eq( 3 ).val(), \"on\", \"Make sure a value of 'on' is provided if none is specified.\" );\n\n\t\tchecks.val( [ \"2\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=2\", \"Get a single checked value.\" );\n\n\t\tchecks.val( [ \"1\", \"\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=1&test=\", \"Get multiple checked values.\" );\n\n\t\tchecks.val( [ \"\", \"2\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=2&test=\", \"Get multiple checked values.\" );\n\n\t\tchecks.val( [ \"1\", \"on\" ] );\n\t\tassert.deepEqual( checks.serialize(), \"test=1&test=on\", \"Get multiple checked values.\" );\n\n\t\tchecks.remove();\n\t}\n\n\t$button = jQuery( \"<button value='foobar'>text</button>\" ).insertAfter( \"#button\" );\n\tassert.equal( $button.val(), \"foobar\", \"Value retrieval on a button does not return innerHTML\" );\n\tassert.equal( $button.val( \"baz\" ).html(), \"text\", \"Setting the value does not change innerHTML\" );\n\n\tassert.equal( jQuery( \"<option></option>\" ).val( \"test\" ).attr( \"value\" ), \"test\", \"Setting value sets the value attribute\" );\n} );\n\nQUnit.test( \"val() with non-matching values on dropdown list\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"#select5\" ).val( \"\" );\n\tassert.equal( jQuery( \"#select5\" ).val(), null, \"Non-matching set on select-one\" );\n\n\tvar select6 = jQuery( \"<select multiple id=\\\"select6\\\"><option value=\\\"1\\\">A</option><option value=\\\"2\\\">B</option></select>\" ).appendTo( \"#form\" );\n\tjQuery( select6 ).val( \"nothing\" );\n\tassert.deepEqual( jQuery( select6 ).val(), [], \"Non-matching set (single value) on select-multiple\" );\n\n\tjQuery( select6 ).val( [ \"nothing1\", \"nothing2\" ] );\n\tassert.deepEqual( jQuery( select6 ).val(), [], \"Non-matching set (array of values) on select-multiple\" );\n\n\tselect6.remove();\n} );\n\nif ( \"value\" in document.createElement( \"meter\" ) &&\n\t\t\t\"value\" in document.createElement( \"progress\" ) ) {\n\n\tQUnit.test( \"val() respects numbers without exception (Bug #9319)\", function( assert ) {\n\n\t\tassert.expect( 4 );\n\n\t\tvar $meter = jQuery( \"<meter min='0' max='10' value='5.6'></meter>\" ),\n\t\t\t$progress = jQuery( \"<progress max='10' value='1.5'></progress>\" );\n\n\t\ttry {\n\t\t\tassert.equal( typeof $meter.val(), \"number\", \"meter, returns a number and does not throw exception\" );\n\t\t\tassert.equal( $meter.val(), $meter[ 0 ].value, \"meter, api matches host and does not throw exception\" );\n\n\t\t\tassert.equal( typeof $progress.val(), \"number\", \"progress, returns a number and does not throw exception\" );\n\t\t\tassert.equal( $progress.val(), $progress[ 0 ].value, \"progress, api matches host and does not throw exception\" );\n\n\t\t} catch ( e ) {}\n\n\t\t$meter.remove();\n\t\t$progress.remove();\n\t} );\n}\n\nvar testVal = function( valueObj, assert ) {\n\tassert.expect( 9 );\n\n\tjQuery( \"#text1\" ).val( valueObj( \"test\" ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"test\", \"Check for modified (via val(String)) value of input element\" );\n\n\tjQuery( \"#text1\" ).val( valueObj( undefined ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"\", \"Check for modified (via val(undefined)) value of input element\" );\n\n\tjQuery( \"#text1\" ).val( valueObj( 67 ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"67\", \"Check for modified (via val(Number)) value of input element\" );\n\n\tjQuery( \"#text1\" ).val( valueObj( null ) );\n\tassert.equal( document.getElementById( \"text1\" ).value, \"\", \"Check for modified (via val(null)) value of input element\" );\n\n\tvar j,\n\t\t$select = jQuery( \"<select multiple><option value='1'></option><option value='2'></option></select>\" ),\n\t\t$select1 = jQuery( \"#select1\" );\n\n\t$select1.val( valueObj( \"3\" ) );\n\tassert.equal( $select1.val(), \"3\", \"Check for modified (via val(String)) value of select element\" );\n\n\t$select1.val( valueObj( 2 ) );\n\tassert.equal( $select1.val(), \"2\", \"Check for modified (via val(Number)) value of select element\" );\n\n\t$select1.append( \"<option value='4'>four</option>\" );\n\t$select1.val( valueObj( 4 ) );\n\tassert.equal( $select1.val(), \"4\", \"Should be possible to set the val() to a newly created option\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.val( valueObj( \"asdf\" ) );\n\tassert.equal( j.val(), \"asdf\", \"Check node,textnode,comment with val()\" );\n\tj.removeAttr( \"value\" );\n\n\t$select.val( valueObj( [ \"1\", \"2\" ] ) );\n\tassert.deepEqual( $select.val(), [ \"1\", \"2\" ], \"Should set array of values\" );\n};\n\nQUnit.test( \"val(String/Number)\", function( assert ) {\n\ttestVal( bareObj, assert );\n} );\n\nQUnit.test( \"val(Function)\", function( assert ) {\n\ttestVal( functionReturningObj, assert );\n} );\n\nQUnit.test( \"val(Array of Numbers) (Bug #7123)\", function( assert ) {\n\tassert.expect( 4 );\n\tjQuery( \"#form\" ).append( \"<input type='checkbox' name='arrayTest' value='1' /><input type='checkbox' name='arrayTest' value='2' /><input type='checkbox' name='arrayTest' value='3' checked='checked' /><input type='checkbox' name='arrayTest' value='4' />\" );\n\tvar elements = jQuery( \"#form input[name=arrayTest]\" ).val( [ 1, 2 ] );\n\tassert.ok( elements[ 0 ].checked, \"First element was checked\" );\n\tassert.ok( elements[ 1 ].checked, \"Second element was checked\" );\n\tassert.ok( !elements[ 2 ].checked, \"Third element was unchecked\" );\n\tassert.ok( !elements[ 3 ].checked, \"Fourth element remained unchecked\" );\n\n\telements.remove();\n} );\n\nQUnit.test( \"val(Function) with incoming value\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar oldVal = jQuery( \"#text1\" ).val();\n\n\tjQuery( \"#text1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn \"test\";\n\t} );\n\n\tassert.equal( document.getElementById( \"text1\" ).value, \"test\", \"Check for modified (via val(String)) value of input element\" );\n\n\toldVal = jQuery( \"#text1\" ).val();\n\n\tjQuery( \"#text1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn 67;\n\t} );\n\n\tassert.equal( document.getElementById( \"text1\" ).value, \"67\", \"Check for modified (via val(Number)) value of input element\" );\n\n\toldVal = jQuery( \"#select1\" ).val();\n\n\tjQuery( \"#select1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn \"3\";\n\t} );\n\n\tassert.equal( jQuery( \"#select1\" ).val(), \"3\", \"Check for modified (via val(String)) value of select element\" );\n\n\toldVal = jQuery( \"#select1\" ).val();\n\n\tjQuery( \"#select1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn 2;\n\t} );\n\n\tassert.equal( jQuery( \"#select1\" ).val(), \"2\", \"Check for modified (via val(Number)) value of select element\" );\n\n\tjQuery( \"#select1\" ).append( \"<option value='4'>four</option>\" );\n\n\toldVal = jQuery( \"#select1\" ).val();\n\n\tjQuery( \"#select1\" ).val( function( i, val ) {\n\t\tassert.equal( val, oldVal, \"Make sure the incoming value is correct.\" );\n\t\treturn 4;\n\t} );\n\n\tassert.equal( jQuery( \"#select1\" ).val(), \"4\", \"Should be possible to set the val() to a newly created option\" );\n} );\n\n// testing if a form.reset() breaks a subsequent call to a select element's .val() (in IE only)\nQUnit.test( \"val(select) after form.reset() (Bug #2551)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"<form id='kk' name='kk'><select id='kkk'><option value='cf'>cf</option><option value='gf'>gf</option></select></form>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( \"#kkk\" ).val( \"gf\" );\n\n\tdocument[ \"kk\" ].reset();\n\n\tassert.equal( jQuery( \"#kkk\" )[ 0 ].value, \"cf\", \"Check value of select after form reset.\" );\n\tassert.equal( jQuery( \"#kkk\" ).val(), \"cf\", \"Check value of select after form reset.\" );\n\n\t// re-verify the multi-select is not broken (after form.reset) by our fix for single-select\n\tassert.deepEqual( jQuery( \"#select3\" ).val(), [ \"1\", \"2\" ], \"Call val() on a multiple='multiple' select\" );\n\n\tjQuery( \"#kk\" ).remove();\n} );\n\nQUnit.test( \"select.val(space characters) (gh-2978)\", function( assert ) {\n\tassert.expect( 37 );\n\n\tvar $select = jQuery( \"<select></select>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tspaces = {\n\t\t\t\"\\\\t\": {\n\t\t\t\thtml: \"&#09;\",\n\t\t\t\tval: \"\\t\"\n\t\t\t},\n\t\t\t\"\\\\n\": {\n\t\t\t\thtml: \"&#10;\",\n\t\t\t\tval: \"\\n\"\n\t\t\t},\n\t\t\t\"\\\\r\": {\n\t\t\t\thtml: \"&#13;\",\n\t\t\t\tval: \"\\r\"\n\t\t\t},\n\t\t\t\"\\\\f\": \"\\f\",\n\t\t\t\"space\": \" \",\n\t\t\t\"\\\\u00a0\": \"\\u00a0\",\n\t\t\t\"\\\\u1680\": \"\\u1680\"\n\t\t},\n\t\thtml = \"\";\n\tjQuery.each( spaces, function( key, obj ) {\n\t\tvar value = obj.html || obj;\n\t\thtml += \"<option value='attr\" + value + \"'></option>\";\n\t\thtml += \"<option value='at\" + value + \"tr'></option>\";\n\t\thtml += \"<option value='\" + value + \"attr'></option>\";\n\t} );\n\t$select.html( html );\n\n\tjQuery.each( spaces, function( key, obj ) {\n\t\tvar val = obj.val || obj;\n\t\t$select.val( \"attr\" + val );\n\t\tassert.equal( $select.val(), \"attr\" + val, \"Value ending with space character (\" + key + \") selected (attr)\" );\n\n\t\t$select.val( \"at\" + val + \"tr\" );\n\t\tassert.equal( $select.val(), \"at\" + val + \"tr\", \"Value with space character (\" + key + \") in the middle selected (attr)\" );\n\n\t\t$select.val( val + \"attr\" );\n\t\tassert.equal( $select.val(), val + \"attr\", \"Value starting with space character (\" + key + \") selected (attr)\" );\n\t} );\n\n\tjQuery.each( spaces, function( key, obj ) {\n\t\tvar value = obj.html || obj,\n\t\t\tval = obj.val || obj;\n\t\thtml = \"\";\n\t\thtml += \"<option>text\" + value + \"</option>\";\n\t\thtml += \"<option>te\" + value + \"xt</option>\";\n\t\thtml += \"<option>\" + value + \"text</option>\";\n\t\t$select.html( html );\n\n\n\t\tif ( /^\\\\u/.test( key ) ) {\n\t\t\t$select.val( val + \"text\" );\n\t\t\tassert.equal( $select.val(), val + \"text\", \"Value with non-HTML space character at beginning is not stripped (\" + key + \") selected (\" + key + \"text)\" );\n\t\t\t$select.val( \"te\" + val + \"xt\" );\n\t\t\tassert.equal( $select.val(), \"te\" + val + \"xt\", \"Value with non-space whitespace character (\" + key + \") in the middle selected (text)\" );\n\t\t\t$select.val( \"text\" + val );\n\t\t\tassert.equal( $select.val(), \"text\" + val, \"Value with non-HTML space character at end is not stripped (\" + key + \") selected (text\" + key + \")\" );\n\t\t} else {\n\t\t\t$select.val( \"text\" );\n\t\t\tassert.equal( $select.val(), \"text\", \"Value with HTML space character at beginning or end is stripped (\" + key + \") selected (text)\" );\n\t\t\t$select.val( \"te xt\" );\n\t\t\tassert.equal( $select.val(), \"te xt\", \"Value with space character (\" + key + \") in the middle selected (text)\" );\n\t\t}\n\t} );\n} );\n\nvar testAddClass = function( valueObj, assert ) {\n\tassert.expect( 9 );\n\n\tvar pass, j, i,\n\t\tdiv = jQuery( \"#qunit-fixture div\" );\n\tdiv.addClass( valueObj( \"test\" ) );\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( !~div.get( i ).className.indexOf( \"test\" ) ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Add Class\" );\n\n\t// using contents will get regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.addClass( valueObj( \"asdf\" ) );\n\tassert.ok( j.hasClass( \"asdf\" ), \"Check node,textnode,comment for addClass\" );\n\n\tdiv = jQuery( \"<div></div>\" );\n\n\tdiv.addClass( valueObj( \"test\" ) );\n\tassert.equal( div.attr( \"class\" ), \"test\", \"Make sure there's no extra whitespace.\" );\n\n\tdiv.attr( \"class\", \" foo\" );\n\tdiv.addClass( valueObj( \"test\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo test\", \"Make sure there's no extra whitespace.\" );\n\n\tdiv.attr( \"class\", \"foo\" );\n\tdiv.addClass( valueObj( \"bar baz\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo bar baz\", \"Make sure there isn't too much trimming.\" );\n\n\tdiv.removeClass();\n\tdiv.addClass( valueObj( \"foo\" ) ).addClass( valueObj( \"foo\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo\", \"Do not add the same class twice in separate calls.\" );\n\n\tdiv.addClass( valueObj( \"fo\" ) );\n\tassert.equal( div.attr( \"class\" ), \"foo fo\", \"Adding a similar class does not get interrupted.\" );\n\tdiv.removeClass().addClass( \"wrap2\" );\n\tassert.ok( div.addClass( \"wrap\" ).hasClass( \"wrap\" ), \"Can add similarly named classes\" );\n\n\tdiv.removeClass();\n\tdiv.addClass( valueObj( \"bar bar\" ) );\n\tassert.equal( div.attr( \"class\" ), \"bar\", \"Do not add the same class twice in the same call.\" );\n};\n\nQUnit.test( \"addClass(String)\", function( assert ) {\n\ttestAddClass( bareObj, assert );\n} );\n\nQUnit.test( \"addClass(Function)\", function( assert ) {\n\ttestAddClass( functionReturningObj, assert );\n} );\n\nQUnit.test( \"addClass(Array)\", function( assert ) {\n\ttestAddClass( arrayFromString, assert );\n} );\n\nQUnit.test( \"addClass(Function) with incoming value\", function( assert ) {\n\tassert.expect( 52 );\n\tvar pass, i,\n\t\tdiv = jQuery( \"#qunit-fixture div\" ),\n\t\told = div.map( function() {\n\t\t\treturn jQuery( this ).attr( \"class\" ) || \"\";\n\t\t} );\n\n\tdiv.addClass( function( i, val ) {\n\t\tif ( this.id !== \"_firebugConsole\" ) {\n\t\t\tassert.equal( val, old[ i ], \"Make sure the incoming value is correct.\" );\n\t\t\treturn \"test\";\n\t\t}\n\t} );\n\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( div.get( i ).className.indexOf( \"test\" ) === -1 ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Add Class\" );\n} );\n\nvar testRemoveClass = function( valueObj, assert ) {\n\tassert.expect( 8 );\n\n\tvar $set = jQuery( \"#qunit-fixture div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t$set.addClass( \"test\" ).removeClass( valueObj( \"test\" ) );\n\n\tassert.ok( !$set.is( \".test\" ), \"Remove Class\" );\n\n\t$set.addClass( \"test\" ).addClass( \"foo\" ).addClass( \"bar\" );\n\t$set.removeClass( valueObj( \"test\" ) ).removeClass( valueObj( \"bar\" ) ).removeClass( valueObj( \"foo\" ) );\n\n\tassert.ok( !$set.is( \".test,.bar,.foo\" ), \"Remove multiple classes\" );\n\n\t// Make sure that a null value doesn't cause problems\n\t$set.eq( 0 ).addClass( \"expected\" ).removeClass( valueObj( null ) );\n\tassert.ok( $set.eq( 0 ).is( \".expected\" ), \"Null value passed to removeClass\" );\n\n\t$set.eq( 0 ).addClass( \"expected\" ).removeClass( valueObj( \"\" ) );\n\tassert.ok( $set.eq( 0 ).is( \".expected\" ), \"Empty string passed to removeClass\" );\n\n\t// using contents will get regular, text, and comment nodes\n\t$set = jQuery( \"#nonnodes\" ).contents();\n\t$set.removeClass( valueObj( \"asdf\" ) );\n\tassert.ok( !$set.hasClass( \"asdf\" ), \"Check node,textnode,comment for removeClass\" );\n\n\tjQuery( div ).removeClass( valueObj( \"foo\" ) );\n\tassert.strictEqual( jQuery( div ).attr( \"class\" ), undefined, \"removeClass doesn't create a class attribute\" );\n\n\tdiv.className = \" test foo \";\n\n\tjQuery( div ).removeClass( valueObj( \"foo\" ) );\n\tassert.equal( div.className, \"test\", \"Make sure remaining className is trimmed.\" );\n\n\tdiv.className = \" test \";\n\n\tjQuery( div ).removeClass( valueObj( \"test\" ) );\n\tassert.equal( div.className, \"\", \"Make sure there is nothing left after everything is removed.\" );\n};\n\nQUnit.test( \"removeClass(String) - simple\", function( assert ) {\n\ttestRemoveClass( bareObj, assert );\n} );\n\nQUnit.test( \"removeClass(Function) - simple\", function( assert ) {\n\ttestRemoveClass( functionReturningObj, assert );\n} );\n\nQUnit.test( \"removeClass(Array) - simple\", function( assert ) {\n\ttestRemoveClass( arrayFromString, assert );\n} );\n\nQUnit.test( \"removeClass(Function) with incoming value\", function( assert ) {\n\tassert.expect( 52 );\n\n\tvar $divs = jQuery( \"#qunit-fixture div\" ).addClass( \"test\" ), old = $divs.map( function() {\n\t\treturn jQuery( this ).attr( \"class\" );\n\t} );\n\n\t$divs.removeClass( function( i, val ) {\n\t\tif ( this.id !== \"_firebugConsole\" ) {\n\t\t\tassert.equal( val, old[ i ], \"Make sure the incoming value is correct.\" );\n\t\t\treturn \"test\";\n\t\t}\n\t} );\n\n\tassert.ok( !$divs.is( \".test\" ), \"Remove Class\" );\n} );\n\nQUnit.test( \"removeClass() removes duplicates\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( jQuery.parseHTML( \"<div class='x x x'></div>\" ) );\n\n\t$div.removeClass( \"x\" );\n\n\tassert.ok( !$div.hasClass( \"x\" ), \"Element with multiple same classes does not escape the wrath of removeClass()\" );\n} );\n\nQUnit.test( \"removeClass(undefined) is a no-op\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div class='base second'></div>\" );\n\t$div.removeClass( undefined );\n\n\tassert.ok( $div.hasClass( \"base\" ) && $div.hasClass( \"second\" ), \"Element still has classes after removeClass(undefined)\" );\n} );\n\nvar testToggleClass = function( valueObj, assert ) {\n\tassert.expect( 19 );\n\n\tvar e = jQuery( \"#firstp\" );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\te.toggleClass( valueObj( \"test\" ) );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\te.toggleClass( valueObj( \"test\" ) );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\t// class name with a boolean\n\te.toggleClass( valueObj( \"test\" ), false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\te.toggleClass( valueObj( \"test\" ), false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class still not present\" );\n\te.toggleClass( valueObj( \"test\" ), true );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\te.toggleClass( valueObj( \"test\" ), true );\n\tassert.ok( e.is( \".test\" ), \"Assert class still present\" );\n\te.toggleClass( valueObj( \"test\" ), false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\t// multiple class names\n\te.addClass( \"testA testB\" );\n\tassert.ok( e.is( \".testA.testB\" ), \"Assert 2 different classes present\" );\n\te.toggleClass( valueObj( \"testB testC\" ) );\n\tassert.ok( ( e.is( \".testA.testC\" ) && !e.is( \".testB\" ) ), \"Assert 1 class added, 1 class removed, and 1 class kept\" );\n\te.toggleClass( valueObj( \"testA testC\" ) );\n\tassert.ok( ( !e.is( \".testA\" ) && !e.is( \".testB\" ) && !e.is( \".testC\" ) ), \"Assert no class present\" );\n\n\t// toggleClass storage\n\te.toggleClass( true );\n\tassert.ok( e[ 0 ].className === \"\", \"Assert class is empty (data was empty)\" );\n\te.addClass( \"testD testE\" );\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present\" );\n\te.toggleClass();\n\tassert.ok( !e.is( \".testD.testE\" ), \"Assert class not present\" );\n\tassert.ok( jQuery._data( e[ 0 ], \"__className__\" ) === \"testD testE\", \"Assert data was stored\" );\n\te.toggleClass();\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present (restored from data)\" );\n\te.toggleClass( false );\n\tassert.ok( !e.is( \".testD.testE\" ), \"Assert class not present\" );\n\te.toggleClass( true );\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present (restored from data)\" );\n\te.toggleClass();\n\te.toggleClass( false );\n\te.toggleClass();\n\tassert.ok( e.is( \".testD.testE\" ), \"Assert class present (restored from data)\" );\n\n\t// Cleanup\n\te.removeClass( \"testD\" );\n\tassert.expectJqData( this, e[ 0 ], \"__className__\" );\n};\n\nQUnit.test( \"toggleClass(String|boolean|undefined[, boolean])\", function( assert ) {\n\ttestToggleClass( bareObj, assert );\n} );\n\nQUnit.test( \"toggleClass(Function[, boolean])\", function( assert ) {\n\ttestToggleClass( functionReturningObj, assert );\n} );\n\nQUnit.test( \"toggleClass(Array[, boolean])\", function( assert ) {\n\ttestToggleClass( arrayFromString, assert );\n} );\n\nQUnit.test( \"toggleClass(Function[, boolean]) with incoming value\", function( assert ) {\n\tassert.expect( 14 );\n\n\tvar e = jQuery( \"#firstp\" ),\n\t\told = e.attr( \"class\" ) || \"\";\n\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\te.toggleClass( function( i, val ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\treturn \"test\";\n\t} );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\n\told = e.attr( \"class\" );\n\n\te.toggleClass( function( i, val ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\treturn \"test\";\n\t} );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\told = e.attr( \"class\" ) || \"\";\n\n\t// class name with a boolean\n\te.toggleClass( function( i, val, state ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\tassert.equal( state, false, \"Make sure that the state is passed in.\" );\n\t\treturn \"test\";\n\t}, false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n\n\told = e.attr( \"class\" ) || \"\";\n\n\te.toggleClass( function( i, val, state ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\tassert.equal( state, true, \"Make sure that the state is passed in.\" );\n\t\treturn \"test\";\n\t}, true );\n\tassert.ok( e.is( \".test\" ), \"Assert class present\" );\n\n\told = e.attr( \"class\" );\n\n\te.toggleClass( function( i, val, state ) {\n\t\tassert.equal( old, val, \"Make sure the incoming value is correct.\" );\n\t\tassert.equal( state, false, \"Make sure that the state is passed in.\" );\n\t\treturn \"test\";\n\t}, false );\n\tassert.ok( !e.is( \".test\" ), \"Assert class not present\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar jq = jQuery( \"<p>Hi</p>\" ), x = jq[ 0 ];\n\n\tjq.addClass( \"hi\" );\n\tassert.equal( x.className, \"hi\", \"Check single added class\" );\n\n\tjq.addClass( \"foo bar\" );\n\tassert.equal( x.className, \"hi foo bar\", \"Check more added classes\" );\n\n\tjq.removeClass();\n\tassert.equal( x.className, \"\", \"Remove all classes\" );\n\n\tjq.addClass( \"hi foo bar\" );\n\tjq.removeClass( \"foo\" );\n\tassert.equal( x.className, \"hi bar\", \"Check removal of one class\" );\n\n\tassert.ok( jq.hasClass( \"hi\" ), \"Check has1\" );\n\tassert.ok( jq.hasClass( \"bar\" ), \"Check has2\" );\n\n\tjq = jQuery( \"<p class='class1\\nclass2\\tcla.ss3\\n\\rclass4'></p>\" );\n\n\tassert.ok( jq.hasClass( \"class1\" ), \"Check hasClass with line feed\" );\n\tassert.ok( jq.is( \".class1\" ), \"Check is with line feed\" );\n\tassert.ok( jq.hasClass( \"class2\" ), \"Check hasClass with tab\" );\n\tassert.ok( jq.is( \".class2\" ), \"Check is with tab\" );\n\tassert.ok( jq.hasClass( \"cla.ss3\" ), \"Check hasClass with dot\" );\n\tassert.ok( jq.hasClass( \"class4\" ), \"Check hasClass with carriage return\" );\n\tassert.ok( jq.is( \".class4\" ), \"Check is with carriage return\" );\n\n\tjq.removeClass( \"class2\" );\n\tassert.ok( jq.hasClass( \"class2\" ) === false, \"Check the class has been properly removed\" );\n\tjq.removeClass( \"cla\" );\n\tassert.ok( jq.hasClass( \"cla.ss3\" ), \"Check the dotted class has not been removed\" );\n\tjq.removeClass( \"cla.ss3\" );\n\tassert.ok( jq.hasClass( \"cla.ss3\" ) === false, \"Check the dotted class has been removed\" );\n\tjq.removeClass( \"class4\" );\n\tassert.ok( jq.hasClass( \"class4\" ) === false, \"Check the class has been properly removed\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass on many elements\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar elem = jQuery( \"<p>p0</p><p>p1</p><p>p2</p>\" );\n\n\telem.addClass( \"hi\" );\n\tassert.equal( elem[ 0 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 1 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 2 ].className, \"hi\", \"Check single added class\" );\n\n\telem.addClass( \"foo bar\" );\n\tassert.equal( elem[ 0 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 1 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 2 ].className, \"hi foo bar\", \"Check more added classes\" );\n\n\telem.removeClass();\n\tassert.equal( elem[ 0 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 1 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 2 ].className, \"\", \"Remove all classes\" );\n\n\telem.addClass( \"hi foo bar\" );\n\telem.removeClass( \"foo\" );\n\tassert.equal( elem[ 0 ].className, \"hi bar\", \"Check removal of one class\" );\n\tassert.equal( elem[ 1 ].className, \"hi bar\", \"Check removal of one class\" );\n\tassert.equal( elem[ 2 ].className, \"hi bar\", \"Check removal of one class\" );\n\n\tassert.ok( elem.hasClass( \"hi\" ), \"Check has1\" );\n\tassert.ok( elem.hasClass( \"bar\" ), \"Check has2\" );\n\n\tassert.ok( jQuery( \"<p class='hi'>p0</p><p>p1</p><p>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class in the first element\" );\n\tassert.ok( jQuery( \"<p>p0</p><p class='hi'>p1</p><p>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class in the second element\" );\n\tassert.ok( jQuery( \"<p>p0</p><p>p1</p><p class='hi'>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class in the last element\" );\n\n\tassert.ok( jQuery( \"<p class='hi'>p0</p><p class='hi'>p1</p><p class='hi'>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did find a class when present in all elements\" );\n\n\tassert.ok( !jQuery( \"<p class='hi0'>p0</p><p class='hi1'>p1</p><p class='hi2'>p2</p>\" ).hasClass( \"hi\" ),\n\t\t\"Did not find a class when not present\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass on many elements - Array\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar elem = jQuery( \"<p>p0</p><p>p1</p><p>p2</p>\" );\n\n\telem.addClass( [ \"hi\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 1 ].className, \"hi\", \"Check single added class\" );\n\tassert.equal( elem[ 2 ].className, \"hi\", \"Check single added class\" );\n\n\telem.addClass( [ \"foo\",  \"bar\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 1 ].className, \"hi foo bar\", \"Check more added classes\" );\n\tassert.equal( elem[ 2 ].className, \"hi foo bar\", \"Check more added classes\" );\n\n\telem.removeClass();\n\tassert.equal( elem[ 0 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 1 ].className, \"\", \"Remove all classes\" );\n\tassert.equal( elem[ 2 ].className, \"\", \"Remove all classes\" );\n\n\telem.addClass( [ \"hi\", \"foo\", \"bar\", \"baz\" ] );\n\telem.removeClass( [ \"foo\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi bar baz\", \"Check removal of one class\" );\n\tassert.equal( elem[ 1 ].className, \"hi bar baz\", \"Check removal of one class\" );\n\tassert.equal( elem[ 2 ].className, \"hi bar baz\", \"Check removal of one class\" );\n\n\telem.removeClass( [ \"bar baz\" ] );\n\tassert.equal( elem[ 0 ].className, \"hi\", \"Check removal of two classes\" );\n\tassert.equal( elem[ 1 ].className, \"hi\", \"Check removal of two classes\" );\n\tassert.equal( elem[ 2 ].className, \"hi\", \"Check removal of two classes\" );\n\n\tassert.ok( elem.hasClass( \"hi\" ), \"Check has1\" );\n} );\n\nQUnit.test( \"addClass, removeClass, hasClass on elements with classes with non-HTML whitespace (gh-3072, gh-3003)\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar $elem = jQuery( \"<div class='&#xA0;test'></div>\" );\n\n\tfunction testMatches() {\n\t\tassert.ok( $elem.is( \".\\\\A0 test\" ), \"Element matches with collapsed space\" );\n\t\tassert.ok( $elem.is( \".\\\\A0test\" ), \"Element matches with non-breaking space\" );\n\t\tassert.ok( $elem.hasClass( \"\\xA0test\" ), \"Element has class with non-breaking space\" );\n\t}\n\n\ttestMatches();\n\t$elem.addClass( \"foo\" );\n\ttestMatches();\n\t$elem.removeClass( \"foo\" );\n\ttestMatches();\n} );\n\nQUnit.test( \"contents().hasClass() returns correct values\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"<div><span class='foo'></span><!-- comment -->text</div>\" ),\n\t$contents = $div.contents();\n\n\tassert.ok( $contents.hasClass( \"foo\" ), \"Found 'foo' in $contents\" );\n\tassert.ok( !$contents.hasClass( \"undefined\" ), \"Did not find 'undefined' in $contents (correctly)\" );\n} );\n\nQUnit.test( \"hasClass correctly interprets non-space separators (#13835)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar\n\t\tmap = {\n\t\t\ttab: \"&#9;\",\n\t\t\t\"line-feed\": \"&#10;\",\n\t\t\t\"form-feed\": \"&#12;\",\n\t\t\t\"carriage-return\": \"&#13;\"\n\t\t},\n\t\tclasses = jQuery.map( map, function( separator, label ) {\n\t\t\treturn \" \" + separator + label + separator + \" \";\n\t\t} ),\n\t\t$div = jQuery( \"<div class='\" + classes + \"'></div>\" );\n\n\tjQuery.each( map, function( label ) {\n\t\tassert.ok( $div.hasClass( label ), label.replace( \"-\", \" \" ) );\n\t} );\n} );\n\nQUnit.test( \"coords returns correct values in IE6/IE7, see #10828\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar area,\n\t\tmap = jQuery( \"<map></map>\" );\n\n\tarea = map.html( \"<area shape='rect' coords='0,0,0,0' href='#' alt='a'></area>\" ).find( \"area\" );\n\tassert.equal( area.attr( \"coords\" ), \"0,0,0,0\", \"did not retrieve coords correctly\" );\n} );\n\nQUnit.test( \"should not throw at $(option).val() (#14686)\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery( \"<option></option>\" ).val();\n\t\tassert.ok( true );\n\t} catch ( _ ) {\n\t\tassert.ok( false );\n\t}\n} );\n\nQUnit.test( \"option value not trimmed when setting via parent select\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"<select><option> 2</option></select>\" ).val( \"2\" ).val(), \"2\" );\n} );\n\nQUnit.test( \"Insignificant white space returned for $(option).val() (#14858, gh-2978)\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar val = jQuery( \"<option></option>\" ).val();\n\tassert.equal( val.length, 0, \"Empty option should have no value\" );\n\n\tjQuery.each( [ \" \", \"\\n\", \"\\t\", \"\\f\", \"\\r\" ], function( i, character ) {\n\t\tvar val = jQuery( \"<option>\" + character + \"</option>\" ).val();\n\t\tassert.equal( val.length, 0, \"insignificant white-space returned for value\" );\n\n\t\tval = jQuery( \"<option>\" + character + \"test\" + character + \"</option>\" ).val();\n\t\tassert.equal( val.length, 4, \"insignificant white-space returned for value\" );\n\n\t\tval = jQuery( \"<option>te\" + character + \"st</option>\" ).val();\n\t\tassert.equal( val, \"te st\", \"Whitespace is collapsed in values\" );\n\t} );\n} );\n\nQUnit.test( \"SVG class manipulation (gh-2199)\", function( assert ) {\n\tassert.expect( 12 );\n\n\tfunction createSVGElement( nodeName ) {\n\t\treturn document.createElementNS( \"http://www.w3.org/2000/svg\", nodeName );\n\t}\n\n\tjQuery.each( [\n\t\t\"svg\",\n\t\t\"rect\",\n\t\t\"g\"\n\t], function() {\n\t\tvar elem = jQuery( createSVGElement( this ) );\n\n\t\telem.addClass( \"awesome\" );\n\t\tassert.ok( elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") has added class\" );\n\n\t\telem.removeClass( \"awesome\" );\n\t\tassert.ok( !elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") removes the class\" );\n\n\t\telem.toggleClass( \"awesome\" );\n\t\tassert.ok( elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") toggles the class on\" );\n\n\t\telem.toggleClass( \"awesome\" );\n\t\tassert.ok( !elem.hasClass( \"awesome\" ), \"SVG element (\" + this + \") toggles the class off\" );\n\t} );\n} );\n\nQUnit.test( \"non-lowercase boolean attribute getters should not crash\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elem = jQuery( \"<input checked required autofocus type='checkbox'>\" );\n\n\tjQuery.each( {\n\t\tchecked: \"Checked\",\n\t\trequired: \"requiRed\",\n\t\tautofocus: \"AUTOFOCUS\"\n\t}, function( lowercased, original ) {\n\t\ttry {\n\t\t\tassert.strictEqual( elem.attr( original ), lowercased,\n\t\t\t\t\"The '\" + this + \"' attribute getter should return the lowercased name\" );\n\t\t} catch ( e ) {\n\t\t\tassert.ok( false, \"The '\" + this + \"' attribute getter threw\" );\n\t\t}\n\t} );\n} );\n", "QUnit.module( \"basic\", { afterEach: moduleTeardown } );\n\nif ( jQuery.ajax ) {\nQUnit.test( \"ajax\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar done = assert.async( 3 );\n\n\tjQuery.ajax( {\n\t\ttype: \"GET\",\n\t\turl: url( \"mock.php?action=name&name=foo\" ),\n\t\tsuccess: function( msg ) {\n\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\tdone();\n\t\t}\n\t} );\n\n\tjQuery.ajax( {\n\t\ttype: \"POST\",\n\t\turl: url( \"mock.php?action=name\" ),\n\t\tdata: \"name=peter\",\n\t\tsuccess: function( msg ) {\n\t\t\tassert.strictEqual( msg, \"pan\", \"Check for POST\" );\n\t\t\tdone();\n\t\t}\n\t} );\n\n\tjQuery( \"#first\" ).load( url( \"name.html\" ), function() {\n\t\tassert.ok( /^ERROR/.test( jQuery( \"#first\" ).text() ),\n\t\t\t\"Check if content was injected into the DOM\" );\n\t\tdone();\n\t} );\n} );\n}\n\nQUnit.test( \"attributes\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar a = jQuery( \"<a></a>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tinput = jQuery( \"<input/>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( a.attr( \"foo\", \"bar\" ).attr( \"foo\" ), \"bar\", \".attr getter/setter\" );\n\tassert.strictEqual( a.removeAttr( \"foo\" ).attr( \"foo\" ), undefined, \".removeAttr\" );\n\tassert.strictEqual( a.prop( \"href\", \"#5\" ).prop( \"href\" ),\n\t\tlocation.href.replace( /\\#.*$/, \"\" ) + \"#5\",\n\t\t\".prop getter/setter\" );\n\n\ta.addClass( \"abc def ghj\" ).removeClass( \"def ghj\" );\n\tassert.strictEqual( a.hasClass( \"abc\" ), true, \".(add|remove|has)Class, class present\" );\n\tassert.strictEqual( a.hasClass( \"def\" ), false, \".(add|remove|has)Class, class missing\" );\n\n\tassert.strictEqual( input.val( \"xyz\" ).val(), \"xyz\", \".val getter/setter\" );\n} );\n\nif ( jQuery.css ) {\nQUnit.test( \"css\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( div.css( \"width\", \"50px\" ).css( \"width\" ), \"50px\", \".css getter/setter\" );\n} );\n}\n\nif ( jQuery.fn.show && jQuery.fn.hide ) {\nQUnit.test( \"show/hide\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tdiv.hide();\n\tassert.strictEqual( div.css( \"display\" ), \"none\", \"div hidden\" );\n\tdiv.show();\n\tassert.strictEqual( div.css( \"display\" ), \"block\", \"div shown\" );\n} );\n}\n\nQUnit.test( \"core\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar elem = jQuery( \"<div></div><span></span>\" );\n\n\tassert.strictEqual( elem.length, 2, \"Correct number of elements\" );\n\n\tassert.ok( jQuery.isPlainObject( { \"a\": 2 } ), \"jQuery.isPlainObject(object)\" );\n\tassert.ok( !jQuery.isPlainObject( \"foo\" ), \"jQuery.isPlainObject(String)\" );\n\n\tassert.ok( jQuery.isXMLDoc( jQuery.parseXML(\n\t\t\"<?xml version='1.0' encoding='UTF-8'?><foo bar='baz'></foo>\"\n\t) ), \"jQuery.isXMLDoc\" );\n\n\tassert.strictEqual( jQuery.inArray( 3, [ \"a\", 6, false, 3, {} ] ), 3, \"jQuery.inArray - true\" );\n\tassert.strictEqual(\n\t\tjQuery.inArray( 3, [ \"a\", 6, false, \"3\", {} ] ),\n\t\t-1,\n\t\t\"jQuery.inArray - false\"\n\t);\n\n\tassert.strictEqual( elem.get( 1 ), elem[ 1 ], \".get\" );\n\tassert.strictEqual( elem.first()[ 0 ], elem[ 0 ], \".first\" );\n\tassert.strictEqual( elem.last()[ 0 ], elem[ 1 ], \".last\" );\n\n\tassert.deepEqual( jQuery.map( [ \"a\", \"b\", \"c\" ], function( v, k ) {\n\t\treturn k + v;\n\t} ), [ \"0a\", \"1b\", \"2c\" ], \"jQuery.map\" );\n\n\tassert.deepEqual( jQuery.merge( [ 1, 2 ], [ \"a\", \"b\" ] ), [ 1, 2, \"a\", \"b\" ], \"jQuery.merge\" );\n\n\tassert.deepEqual( jQuery.grep( [ 1, 2, 3 ], function( value ) {\n\t\treturn value % 2 !== 0;\n\t} ), [ 1, 3 ], \"jQuery.grep\" );\n\n\tassert.deepEqual( jQuery.extend( { a: 2 }, { b: 3 } ), { a: 2, b: 3 }, \"jQuery.extend\" );\n\n\tjQuery.each( [ 0, 2 ], function( k, v ) {\n\t\tassert.strictEqual( k * 2, v, \"jQuery.each\" );\n\t} );\n\n\tassert.deepEqual( jQuery.makeArray( { 0: \"a\", 1: \"b\", 2: \"c\", length: 3 } ),\n\t\t[ \"a\", \"b\", \"c\" ], \"jQuery.makeArray\" );\n\n\tassert.strictEqual( jQuery.parseHTML( \"<div></div><span></span>\" ).length,\n\t\t2, \"jQuery.parseHTML\" );\n} );\n\nQUnit.test( \"data\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar elem = jQuery( \"<div data-c='d'></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.ok( !jQuery.hasData( elem[ 0 ] ), \"jQuery.hasData - false\" );\n\tassert.strictEqual( elem.data( \"a\", \"b\" ).data( \"a\" ), \"b\", \".data getter/setter\" );\n\tassert.strictEqual( elem.data( \"c\" ), \"d\", \".data from data-* attributes\" );\n\tassert.ok( jQuery.hasData( elem[ 0 ] ), \"jQuery.hasData - true\" );\n} );\n\nQUnit.test( \"dimensions\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elem = jQuery(\n\t\t\"<div style='margin: 10px; padding: 7px; border: 2px solid black;'></div> \"\n\t).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem.width( 50 ).width(), 50, \".width getter/setter\" );\n\tassert.strictEqual( elem.innerWidth(), 64, \".innerWidth getter\" );\n\tassert.strictEqual( elem.outerWidth(), 68, \".outerWidth getter\" );\n} );\n\nQUnit.test( \"event\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\telem\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( false, \"click should not fire\" );\n\t\t} )\n\t\t.off( \"click\" )\n\t\t.trigger( \"click\" )\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( true, \"click should fire\" );\n\t\t} )\n\t\t.trigger( \"click\" );\n} );\n\nQUnit.test( \"manipulation\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar child,\n\t\telem1 = jQuery( \"<div><span></span></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\telem2 = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem1.text( \"foo\" ).text(), \"foo\", \".html getter/setter\" );\n\n\tassert.strictEqual(\n\t\telem1.html( \"<span></span>\" ).html(),\n\t\t\"<span></span>\",\n\t\t\".html getter/setter\"\n\t);\n\n\tassert.strictEqual( elem1.append( elem2 )[ 0 ].childNodes[ 1 ], elem2[ 0 ], \".append\" );\n\tassert.strictEqual( elem1.prepend( elem2 )[ 0 ].childNodes[ 0 ], elem2[ 0 ], \".prepend\" );\n\n\tchild = elem1.find( \"span\" );\n\tchild.after( \"<a></a>\" );\n\tchild.before( \"<b></b>\" );\n\n\tassert.strictEqual(\n\t\telem1.html(),\n\t\t\"<div></div><b></b><span></span><a></a>\",\n\t\t\".after/.before\"\n\t);\n} );\n\n// Support: jsdom 13.2+\n// jsdom returns 0 for offset-related properties\nQUnit[ /jsdom\\//.test( navigator.userAgent ) ? \"skip\" : \"test\" ]( \"offset\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar parent = jQuery( \"<div style='position:fixed;top:20px;'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\telem = jQuery( \"<div style='position:absolute;top:5px;'></div>\" ).appendTo( parent );\n\n\tassert.strictEqual( elem.offset().top, 25, \".offset getter\" );\n\tassert.strictEqual( elem.position().top, 5, \".position getter\" );\n\tassert.strictEqual( elem.offsetParent()[ 0 ], parent[ 0 ], \".offsetParent\" );\n} );\n\nQUnit.test( \"selector\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar elem = jQuery( \"<div><span class='a'></span><span class='b'><a></a></span></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem.find( \".a a\" ).length, 0, \".find - no result\" );\n\tassert.strictEqual( elem.find( \"span.b a\" )[ 0 ].nodeName, \"A\", \".find - one result\" );\n} );\n\nQUnit.test( \"serialize\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar params = { \"someName\": [ 1, 2, 3 ], \"regularThing\": \"blah\" };\n\tassert.strictEqual( jQuery.param( params ),\n\t\t\"someName%5B%5D=1&someName%5B%5D=2&someName%5B%5D=3&regularThing=blah\",\n\t\t\"jQuery.param\" );\n\n\tassert.strictEqual( jQuery( \"#form\" ).serialize(),\n\t\t\"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search\" +\n\t\t\"&select1=&select2=3&select3=1&select3=2&select5=3\",\n\t\t\"form serialization as query string\" );\n} );\n\nQUnit.test( \"traversing\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar elem = jQuery( \"<div><a><b><em></em></b></a><i></i><span></span>foo</div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\n\tassert.strictEqual( elem.find( \"em\" ).parent()[ 0 ].nodeName, \"B\", \".parent\" );\n\tassert.strictEqual( elem.find( \"em\" ).parents()[ 1 ].nodeName, \"A\", \".parents\" );\n\tassert.strictEqual( elem.find( \"em\" ).parentsUntil( \"div\" ).length, 2, \".parentsUntil\" );\n\tassert.strictEqual( elem.find( \"i\" ).next()[ 0 ].nodeName, \"SPAN\", \".next\" );\n\tassert.strictEqual( elem.find( \"i\" ).prev()[ 0 ].nodeName, \"A\", \".prev\" );\n\tassert.strictEqual( elem.find( \"a\" ).nextAll()[ 1 ].nodeName, \"SPAN\", \".nextAll\" );\n\tassert.strictEqual( elem.find( \"span\" ).prevAll()[ 1 ].nodeName, \"A\", \".prevAll\" );\n\tassert.strictEqual( elem.find( \"a\" ).nextUntil( \"span\" ).length, 1, \".nextUntil\" );\n\tassert.strictEqual( elem.find( \"span\" ).prevUntil( \"a\" ).length, 1, \".prevUntil\" );\n\tassert.strictEqual( elem.find( \"i\" ).siblings().length, 2, \".siblings\" );\n\tassert.strictEqual( elem.children()[ 2 ].nodeName, \"SPAN\", \".children\" );\n\tassert.strictEqual( elem.contents()[ 3 ].nodeType, 3, \".contents\" );\n} );\n\nQUnit.test( \"wrap\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elem = jQuery( \"<div><a><b></b></a><a></a></div>\" );\n\n\telem.find( \"b\" ).wrap( \"<span>\" );\n\n\tassert.strictEqual(\n\t\telem.html(),\n\t\t\"<a><span><b></b></span></a><a></a>\",\n\t\t\".wrap\"\n\t);\n\n\telem.find( \"span\" ).wrapInner( \"<em>\" );\n\n\tassert.strictEqual(\n\t\telem.html(),\n\t\t\"<a><span><em><b></b></em></span></a><a></a>\",\n\t\t\".wrapInner\"\n\t);\n\n\telem.find( \"a\" ).wrapAll( \"<i>\" );\n\n\tassert.strictEqual(\n\t\telem.html(),\n\t\t\"<i><a><span><em><b></b></em></span></a><a></a></i>\",\n\t\t\".wrapAll\"\n\t);\n\n} );\n", "QUnit.module( \"core\", {\n\tbeforeEach: function() {\n\t\tthis.sandbox = sinon.sandbox.create();\n\t},\n\tafterEach: function() {\n\t\tthis.sandbox.restore();\n\t\treturn moduleTeardown.apply( this, arguments );\n\t}\n} );\n\nQUnit.test( \"Basic requirements\", function( assert ) {\n\tassert.expect( 7 );\n\tassert.ok( Array.prototype.push, \"Array.push()\" );\n\tassert.ok( Function.prototype.apply, \"Function.apply()\" );\n\tassert.ok( document.getElementById, \"getElementById\" );\n\tassert.ok( document.getElementsByTagName, \"getElementsByTagName\" );\n\tassert.ok( RegExp, \"RegExp\" );\n\tassert.ok( jQuery, \"jQuery\" );\n\tassert.ok( $, \"$\" );\n} );\n\nQUnit.test( \"jQuery()\", function( assert ) {\n\n\tvar elem, i,\n\t\tobj = jQuery( \"div\" ),\n\t\tcode = jQuery( \"<code></code>\" ),\n\t\timg = jQuery( \"<img/>\" ),\n\t\tdiv = jQuery( \"<div></div><hr/><code></code><b/>\" ),\n\t\texec = false,\n\t\texpected = 23,\n\t\tattrObj = {\n\t\t\t\"text\": \"test\",\n\t\t\t\"class\": \"test2\",\n\t\t\t\"id\": \"test3\"\n\t\t};\n\n\t// The $(html, props) signature can stealth-call any $.fn method, check for a\n\t// few here but beware of modular builds where these methods may be excluded.\n\tif ( jQuery.fn.click ) {\n\t\texpected++;\n\t\tattrObj[ \"click\" ] = function() { assert.ok( exec, \"Click executed.\" ); };\n\t}\n\tif ( jQuery.fn.width ) {\n\t\texpected++;\n\t\tattrObj[ \"width\" ] = 10;\n\t}\n\tif ( jQuery.fn.offset ) {\n\t\texpected++;\n\t\tattrObj[ \"offset\" ] = { \"top\": 1, \"left\": 1 };\n\t}\n\tif ( jQuery.fn.css ) {\n\t\texpected += 2;\n\t\tattrObj[ \"css\" ] = { \"paddingLeft\": 1, \"paddingRight\": 1 };\n\t}\n\tif ( jQuery.fn.attr ) {\n\t\texpected++;\n\t\tattrObj.attr = { \"desired\": \"very\" };\n\t}\n\n\tassert.expect( expected );\n\n\t// Basic constructor's behavior\n\tassert.equal( jQuery().length, 0, \"jQuery() === jQuery([])\" );\n\tassert.equal( jQuery( undefined ).length, 0, \"jQuery(undefined) === jQuery([])\" );\n\tassert.equal( jQuery( null ).length, 0, \"jQuery(null) === jQuery([])\" );\n\tassert.equal( jQuery( \"\" ).length, 0, \"jQuery('') === jQuery([])\" );\n\tassert.deepEqual( jQuery( obj ).get(), obj.get(), \"jQuery(jQueryObj) == jQueryObj\" );\n\n\t// Invalid #id goes to Sizzle which will throw an error (gh-1682)\n\ttry {\n\t\tjQuery( \"#\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Threw an error on #id with no id\" );\n\t}\n\n\t// can actually yield more than one, when iframes are included, the window is an array as well\n\tassert.equal( jQuery( window ).length, 1, \"Correct number of elements generated for jQuery(window)\" );\n\n/*\n\t// disabled since this test was doing nothing. i tried to fix it but i'm not sure\n\t// what the expected behavior should even be. FF returns \"\\n\" for the text node\n\t// make sure this is handled\n\tvar crlfContainer = jQuery('<p>\\r\\n</p>');\n\tvar x = crlfContainer.contents().get(0).nodeValue;\n\tassert.equal( x, what???, \"Check for \\\\r and \\\\n in jQuery()\" );\n*/\n\n\t/* // Disabled until we add this functionality in\n\tvar pass = true;\n\ttry {\n\t\tjQuery(\"<div>Testing</div>\").appendTo(document.getElementById(\"iframe\").contentDocument.body);\n\t} catch(e){\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968\" );*/\n\n\tassert.equal( code.length, 1, \"Correct number of elements generated for code\" );\n\tassert.equal( code.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( img.length, 1, \"Correct number of elements generated for img\" );\n\tassert.equal( img.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( div.length, 4, \"Correct number of elements generated for div hr code b\" );\n\tassert.equal( div.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( jQuery( [ 1, 2, 3 ] ).get( 1 ), 2, \"Test passing an array to the factory\" );\n\n\tassert.equal( jQuery( document.body ).get( 0 ), jQuery( \"body\" ).get( 0 ), \"Test passing an html node to the factory\" );\n\n\telem = jQuery( \"  <em>hello</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading space\" );\n\n\telem = jQuery( \"\\n\\n<em>world</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading newlines\" );\n\n\telem = jQuery( \"<div></div>\", attrObj );\n\n\tif ( jQuery.fn.width ) {\n\t\tassert.equal( elem[ 0 ].style.width, \"10px\", \"jQuery() quick setter width\" );\n\t}\n\n\tif ( jQuery.fn.offset ) {\n\t\tassert.equal( elem[ 0 ].style.top, \"1px\", \"jQuery() quick setter offset\" );\n\t}\n\n\tif ( jQuery.fn.css ) {\n\t\tassert.equal( elem[ 0 ].style.paddingLeft, \"1px\", \"jQuery quick setter css\" );\n\t\tassert.equal( elem[ 0 ].style.paddingRight, \"1px\", \"jQuery quick setter css\" );\n\t}\n\n\tif ( jQuery.fn.attr ) {\n\t\tassert.equal( elem[ 0 ].getAttribute( \"desired\" ), \"very\", \"jQuery quick setter attr\" );\n\t}\n\n\tassert.equal( elem[ 0 ].childNodes.length, 1, \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].firstChild.nodeValue, \"test\", \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].className, \"test2\", \"jQuery() quick setter class\" );\n\tassert.equal( elem[ 0 ].id, \"test3\", \"jQuery() quick setter id\" );\n\n\texec = true;\n\telem.trigger( \"click\" );\n\n\t// manually clean up detached elements\n\telem.remove();\n\n\tfor ( i = 0; i < 3; ++i ) {\n\t\telem = jQuery( \"<input type='text' value='TEST' />\" );\n\t}\n\tassert.equal( elem[ 0 ].defaultValue, \"TEST\", \"Ensure cached nodes are cloned properly (Bug #6655)\" );\n\n\telem = jQuery( \"<input type='hidden'>\", {} );\n\tassert.strictEqual( elem[ 0 ].ownerDocument, document,\n\t\t\"Empty attributes object is not interpreted as a document (trac-8950)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"jQuery(selector, context)\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.deepEqual( jQuery( \"div p\", \"#qunit-fixture\" ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with string as context\" );\n\tassert.deepEqual( jQuery( \"div p\", q( \"qunit-fixture\" )[ 0 ] ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with element as context\" );\n\tassert.deepEqual( jQuery( \"div p\", jQuery( \"#qunit-fixture\" ) ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with jQuery object as context\" );\n} );\n\nQUnit.test( \"globalEval\", function( assert ) {\n\tassert.expect( 3 );\n\tGlobals.register( \"globalEvalTest\" );\n\n\tjQuery.globalEval( \"globalEvalTest = 1;\" );\n\tassert.equal( window.globalEvalTest, 1, \"Test variable assignments are global\" );\n\n\tjQuery.globalEval( \"var globalEvalTest = 2;\" );\n\tassert.equal( window.globalEvalTest, 2, \"Test variable declarations are global\" );\n\n\tjQuery.globalEval( \"this.globalEvalTest = 3;\" );\n\tassert.equal( window.globalEvalTest, 3, \"Test context (this) is the window object\" );\n} );\n\nQUnit.test( \"globalEval with 'use strict'\", function( assert ) {\n\tassert.expect( 1 );\n\tGlobals.register( \"strictEvalTest\" );\n\n\tjQuery.globalEval( \"'use strict'; var strictEvalTest = 1;\" );\n\tassert.equal( window.strictEvalTest, 1, \"Test variable declarations are global (strict mode)\" );\n} );\n\nQUnit.test( \"globalEval execution after script injection (#7862)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar now,\n\t\tscript = document.createElement( \"script\" );\n\n\tscript.src = baseURL + \"mock.php?action=wait&wait=2&script=1\";\n\n\tnow = Date.now();\n\tdocument.body.appendChild( script );\n\n\tjQuery.globalEval( \"var strictEvalTest = \" + Date.now() + \";\" );\n\tassert.ok( window.strictEvalTest - now < 500, \"Code executed synchronously\" );\n} );\n\ntestIframe(\n\t\"globalEval with custom document context\",\n\t\"core/globaleval-context.html\",\n\tfunction( assert, framejQuery, frameWindow, frameDocument ) {\n\t\tassert.expect( 2 );\n\n\t\tjQuery.globalEval( \"window.scriptTest = true;\", {}, frameDocument );\n\t\tassert.ok( !window.scriptTest, \"script executed in iframe context\" );\n\t\tassert.ok( frameWindow.scriptTest, \"script executed in iframe context\" );\n\t}\n);\n\n\nQUnit.test( \"noConflict\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $$ = jQuery;\n\n\tassert.strictEqual( jQuery, jQuery.noConflict(), \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], $$, \"Make sure jQuery wasn't touched.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\n\tjQuery = $ = $$;\n\n\tassert.strictEqual( jQuery.noConflict( true ), $$, \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], originaljQuery, \"Make sure jQuery was reverted.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\tassert.ok( $$().pushStack( [] ), \"Make sure that jQuery still works.\" );\n\n\twindow[ \"jQuery\" ] = jQuery = $$;\n} );\n\nQUnit.test( \"isPlainObject\", function( assert ) {\n\tvar done = assert.async();\n\n\tassert.expect( 23 );\n\n\tvar pass, iframe, doc, parentObj, childObj, deep,\n\t\tfn = function() {};\n\n\t// The use case that we want to match\n\tassert.ok( jQuery.isPlainObject( {} ), \"{}\" );\n\tassert.ok( jQuery.isPlainObject( new window.Object() ), \"new Object\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: fn } ),\n\t\t\"plain object with constructor property\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: \"foo\" } ),\n\t\t\"plain object with primitive constructor property\" );\n\n\tparentObj = {};\n\tchildObj = Object.create( parentObj );\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({})\" );\n\tparentObj.foo = \"bar\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({...})\" );\n\tchildObj.bar = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"extend(Object.create({...}), ...)\" );\n\n\t// Not objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( \"\" ), \"string\" );\n\tassert.ok( !jQuery.isPlainObject( 0 ) && !jQuery.isPlainObject( 1 ), \"number\" );\n\tassert.ok( !jQuery.isPlainObject( true ) && !jQuery.isPlainObject( false ), \"boolean\" );\n\tassert.ok( !jQuery.isPlainObject( null ), \"null\" );\n\tassert.ok( !jQuery.isPlainObject( undefined ), \"undefined\" );\n\n\t// Arrays shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( [] ), \"array\" );\n\n\t// Instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new Date() ), \"new Date\" );\n\n\t// Functions shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( fn ), \"fn\" );\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn (no methods)\" );\n\n\t// Makes the function a little more realistic\n\t// (and harder to detect, incidentally)\n\tfn.prototype[ \"someMethod\" ] = function() {};\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn\" );\n\n\t// Instantiated objects with primitive constructors shouldn't be matched\n\tfn.prototype.constructor = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn with primitive constructor\" );\n\n\t// Deep object\n\tdeep = { \"foo\": { \"baz\": true }, \"foo2\": document };\n\tassert.ok( jQuery.isPlainObject( deep ), \"Object with objects is still plain\" );\n\n\t// DOM Element\n\tassert.ok( !jQuery.isPlainObject( document.createElement( \"div\" ) ), \"DOM Element\" );\n\n\t// Window\n\tassert.ok( !jQuery.isPlainObject( window ), \"window\" );\n\n\tpass = false;\n\ttry {\n\t\tjQuery.isPlainObject( window.location );\n\t\tpass = true;\n\t} catch ( e ) {}\n\tassert.ok( pass, \"Does not throw exceptions on host objects\" );\n\n\t// Objects from other windows should be matched\n\tGlobals.register( \"iframeDone\" );\n\twindow.iframeDone = function( otherObject, detail ) {\n\t\twindow.iframeDone = undefined;\n\t\tiframe.parentNode.removeChild( iframe );\n\t\tassert.ok( jQuery.isPlainObject( new otherObject() ), \"new otherObject\" + ( detail ? \" - \" + detail : \"\" ) );\n\t\tdone();\n\t};\n\n\ttry {\n\t\tiframe = jQuery( \"#qunit-fixture\" )[ 0 ].appendChild( document.createElement( \"iframe\" ) );\n\t\tdoc = iframe.contentDocument || iframe.contentWindow.document;\n\t\tdoc.open();\n\t\tdoc.write( \"<body onload='window.parent.iframeDone(Object);'>\" );\n\t\tdoc.close();\n\t} catch ( e ) {\n\t\twindow.iframeDone( Object, \"iframes not supported\" );\n\t}\n} );\n\nQUnit[ typeof Symbol === \"function\" ? \"test\" : \"skip\" ]( \"isPlainObject(Symbol)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.isPlainObject( Symbol() ), false, \"Symbol\" );\n\tassert.equal( jQuery.isPlainObject( Object( Symbol() ) ), false, \"Symbol inside an object\" );\n} );\n\nQUnit.test( \"isPlainObject(localStorage)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.isPlainObject( localStorage ), false );\n} );\n\nQUnit[ \"assign\" in Object ? \"test\" : \"skip\" ]( \"isPlainObject(Object.assign(...))\",\n\tfunction( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar parentObj = { foo: \"bar\" };\n\t\tvar childObj = Object.assign( Object.create( parentObj ), { bar: \"foo\" } );\n\n\t\tassert.ok( !jQuery.isPlainObject( childObj ), \"isPlainObject(Object.assign(...))\" );\n\t}\n);\n\nQUnit.test( \"isXMLDoc - HTML\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.ok( !jQuery.isXMLDoc( document ), \"HTML document\" );\n\tassert.ok( !jQuery.isXMLDoc( document.documentElement ), \"HTML documentElement\" );\n\tassert.ok( !jQuery.isXMLDoc( document.body ), \"HTML Body Element\" );\n\n\tvar body,\n\t\tiframe = document.createElement( \"iframe\" );\n\tdocument.body.appendChild( iframe );\n\n\ttry {\n\t\tbody = jQuery( iframe ).contents()[ 0 ];\n\n\t\ttry {\n\t\t\tassert.ok( !jQuery.isXMLDoc( body ), \"Iframe body element\" );\n\t\t} catch ( e ) {\n\t\t\tassert.ok( false, \"Iframe body element exception\" );\n\t\t}\n\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Iframe body element - iframe not working correctly\" );\n\t}\n\n\tdocument.body.removeChild( iframe );\n} );\n\nQUnit.test( \"isXMLDoc - embedded SVG\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar htmlTree = jQuery( \"<div>\" +\n\t\t\"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='1' width='1'>\" +\n\t\t\"<desc></desc>\" +\n\t\t\"</svg>\" +\n\t\t\"</div>\"\n\t)[ 0 ];\n\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree ), false, \"disconnected div element\" );\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild ), true,\n\t\t\"disconnected HTML-embedded SVG root element\" );\n\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild.firstChild ), true,\n\t\t\"disconnected HTML-embedded SVG child element\" );\n\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( htmlTree );\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree ), false, \"connected div element\" );\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild ), true,\n\t\t\"connected HTML-embedded SVG root element\" );\n\n\tassert.strictEqual( jQuery.isXMLDoc( htmlTree.firstChild.firstChild ), true,\n\t\t\"disconnected HTML-embedded SVG child element\" );\n} );\n\nQUnit.test( \"isXMLDoc - XML\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar xml = createDashboardXML();\n\tvar svg = jQuery.parseXML(\n\t\t\"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \" +\n\t\t\"\\\"http://www.w3.org/Gaphics/SVG/1.1/DTD/svg11.dtd\\\">\" +\n\t\t\"<svg version='1.1' xmlns='http://www.w3.org/2000/svg'><desc/></svg>\"\n\t);\n\tassert.ok( jQuery.isXMLDoc( xml ), \"XML document\" );\n\tassert.ok( jQuery.isXMLDoc( xml.documentElement ), \"XML documentElement\" );\n\tassert.ok( jQuery.isXMLDoc( xml.documentElement.firstChild ), \"XML child element\" );\n\tassert.ok( jQuery.isXMLDoc( jQuery( \"tab\", xml )[ 0 ] ), \"XML tab Element\" );\n\n\tassert.ok( jQuery.isXMLDoc( svg ), \"SVG document\" );\n\tassert.ok( jQuery.isXMLDoc( svg.documentElement ), \"SVG documentElement\" );\n\tassert.ok( jQuery.isXMLDoc( svg.documentElement.firstChild ), \"SVG child element\" );\n\tassert.ok( jQuery.isXMLDoc( jQuery( \"desc\", svg )[ 0 ] ), \"XML desc Element\" );\n} );\n\nQUnit.test( \"XSS via location.hash\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect( 1 );\n\n\tjQuery[ \"_check9521\" ] = function( x ) {\n\t\tassert.ok( x, \"script called from #id-like selector with inline handler\" );\n\t\tjQuery( \"#check9521\" ).remove();\n\t\tdelete jQuery[ \"_check9521\" ];\n\t\tdone();\n\t};\n\ttry {\n\n\t\t// This throws an error because it's processed like an id\n\t\tjQuery( \"#<img id='check9521' src='no-such-.gif' onerror='jQuery._check9521(false)'>\" ).appendTo( \"#qunit-fixture\" );\n\t} catch ( err ) {\n\t\tjQuery[ \"_check9521\" ]( true );\n\t}\n} );\n\nQUnit.test( \"jQuery('html')\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar s, div, j;\n\n\tjQuery[ \"foo\" ] = false;\n\ts = jQuery( \"<script>jQuery.foo='test';</script>\" )[ 0 ];\n\tassert.ok( s, \"Creating a script\" );\n\tassert.ok( !jQuery[ \"foo\" ], \"Make sure the script wasn't executed prematurely\" );\n\tjQuery( \"body\" ).append( \"<script>jQuery.foo='test';</script>\" );\n\tassert.ok( jQuery[ \"foo\" ], \"Executing a script's contents in the right context\" );\n\n\t// Test multi-line HTML\n\tdiv = jQuery( \"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\" )[ 0 ];\n\tassert.equal( div.nodeName.toUpperCase(), \"DIV\", \"Make sure we're getting a div.\" );\n\tassert.equal( div.firstChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.lastChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.childNodes[ 1 ].nodeType, 1, \"Paragraph.\" );\n\tassert.equal( div.childNodes[ 1 ].firstChild.nodeType, 3, \"Paragraph text.\" );\n\n\tassert.ok( jQuery( \"<link rel='stylesheet'/>\" )[ 0 ], \"Creating a link\" );\n\n\tassert.ok( !jQuery( \"<script></script>\" )[ 0 ].parentNode, \"Create a script\" );\n\n\tassert.ok( jQuery( \"<input/>\" ).attr( \"type\", \"hidden\" ), \"Create an input and set the type.\" );\n\n\tj = jQuery( \"<span>hi</span> there <!-- mon ami -->\" );\n\tassert.ok( j.length >= 2, \"Check node,textnode,comment creation (some browsers delete comments)\" );\n\n\tassert.ok( !jQuery( \"<option>test</option>\" )[ 0 ].selected, \"Make sure that options are auto-selected #2050\" );\n\n\tassert.ok( jQuery( \"<div></div>\" )[ 0 ], \"Create a div with closing tag.\" );\n\tassert.ok( jQuery( \"<table></table>\" )[ 0 ], \"Create a table with closing tag.\" );\n\n\tassert.equal( jQuery( \"element[attribute='<div></div>']\" ).length, 0,\n\t\t\"When html is within brackets, do not recognize as html.\" );\n\n\t//equal( jQuery( \"element[attribute=<div></div>]\" ).length, 0,\n\t//\t\"When html is within brackets, do not recognize as html.\" );\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( jQuery( \"element:not(<div></div>)\" ).length, 0,\n\t\t\t\"When html is within parens, do not recognize as html.\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Complex :not not supported in selector-native\" );\n\t}\n\tassert.equal( jQuery( \"\\\\<div\\\\>\" ).length, 0, \"Ignore escaped html characters\" );\n} );\n\nQUnit.test( \"jQuery(element with non-alphanumeric name)\", function( assert ) {\n\tassert.expect( 36 );\n\n\tjQuery.each( [ \"-\", \":\" ], function( i, symbol ) {\n\t\tjQuery.each( [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"caption\", \"tr\", \"th\", \"td\" ],\n\t\t\tfunction( j, tag ) {\n\t\t\t\tvar tagName = tag + symbol + \"test\";\n\t\t\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\t\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\t\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\t\t\ttagName + \" element has expected node name\" );\n\t\t\t}\n\t\t);\n\n\t\tvar tagName = [ \"tr\", \"multiple\", \"symbol\" ].join( symbol );\n\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\ttagName + \" element has expected node name\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery('massive html #7990')\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar i,\n\t\tli = \"<li>very very very very large html string</li>\",\n\t\thtml = [ \"<ul>\" ];\n\n\tfor ( i = 0; i < 30000; i += 1 ) {\n\t\thtml[ html.length ] = li;\n\t}\n\thtml[ html.length ] = \"</ul>\";\n\thtml = jQuery( html.join( \"\" ) )[ 0 ];\n\tassert.equal( html.nodeName.toLowerCase(), \"ul\" );\n\tassert.equal( html.firstChild.nodeName.toLowerCase(), \"li\" );\n\tassert.equal( html.childNodes.length, 30000 );\n} );\n\nQUnit.test( \"jQuery('html', context)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div></div>\" )[ 0 ],\n\t\t$span = jQuery( \"<span></span>\", $div );\n\tassert.equal( $span.length, 1, \"verify a span created with a div context works, #1763\" );\n} );\n\nQUnit.test( \"jQuery(selector, xml).text(str) - loaded via xml document\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar xml = createDashboardXML(),\n\n\t// tests for #1419 where ie was a problem\n\t\ttab = jQuery( \"tab\", xml ).eq( 0 );\n\tassert.equal( tab.text(), \"blabla\", \"verify initial text correct\" );\n\ttab.text( \"newtext\" );\n\tassert.equal( tab.text(), \"newtext\", \"verify new text correct\" );\n} );\n\nQUnit.test( \"end()\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).parent().end().text(), \"check for end\" );\n\tassert.ok( jQuery( \"#yahoo\" ).end(), \"check for end with nothing to end\" );\n\n\tvar x = jQuery( \"#yahoo\" );\n\tx.parent();\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).text(), \"check for non-destructive behavior\" );\n} );\n\nQUnit.test( \"length\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).length, 6, \"Get Number of Elements Found\" );\n} );\n\nQUnit.test( \"get()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Get All Elements\" );\n} );\n\nQUnit.test( \"toArray()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).toArray(),\n\t\tq( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ),\n\t\t\"Convert jQuery object to an Array\" );\n} );\n\nQUnit.test( \"inArray()\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar selections = {\n\t\tp:   q( \"firstp\", \"sap\", \"ap\", \"first\" ),\n\t\tem:  q( \"siblingnext\", \"siblingfirst\" ),\n\t\tdiv: q( \"qunit-testrunner-toolbar\", \"nothiddendiv\", \"nothiddendivchild\", \"foo\" ),\n\t\ta:   q( \"mark\", \"groups\", \"google\", \"simon1\" ),\n\t\tempty: []\n\t},\n\ttests = {\n\t\tp:    { elem: jQuery( \"#ap\" )[ 0 ],           index: 2 },\n\t\tem:   { elem: jQuery( \"#siblingfirst\" )[ 0 ], index: 1 },\n\t\tdiv:  { elem: jQuery( \"#nothiddendiv\" )[ 0 ], index: 1 },\n\t\ta:    { elem: jQuery( \"#simon1\" )[ 0 ],       index: 3 }\n\t},\n\tfalseTests = {\n\t\tp:  jQuery( \"#liveSpan1\" )[ 0 ],\n\t\tem: jQuery( \"#nothiddendiv\" )[ 0 ],\n\t\tempty: \"\"\n\t};\n\n\tjQuery.each( tests, function( key, obj ) {\n\t\tassert.equal( jQuery.inArray( obj.elem, selections[ key ] ), obj.index, \"elem is in the array of selections of its tag\" );\n\n\t\t// Third argument (fromIndex)\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 5 ), false, \"elem is NOT in the array of selections given a starting index greater than its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 1 ), true, \"elem is in the array of selections given a starting index less than or equal to its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], -3 ), true, \"elem is in the array of selections given a negative index\" );\n\t} );\n\n\tjQuery.each( falseTests, function( key, elem ) {\n\t\tassert.equal( !!~jQuery.inArray( elem, selections[ key ] ), false, \"elem is NOT in the array of selections\" );\n\t} );\n\n} );\n\nQUnit.test( \"get(Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).get( 0 ), document.getElementById( \"firstp\" ), \"Get A Single Element\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( 1 ), undefined, \"Try get with index larger elements count\" );\n} );\n\nQUnit.test( \"get(-Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"p\" ).get( -1 ), document.getElementById( \"first\" ), \"Get a single element with negative index\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( -2 ), undefined, \"Try get with index negative index larger then elements count\" );\n} );\n\nQUnit.test( \"each(Function)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar div, pass, i;\n\n\tdiv = jQuery( \"div\" );\n\tdiv.each( function() {this.foo = \"zoo\";} );\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( div.get( i ).foo !== \"zoo\" ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Execute a function, Relative\" );\n} );\n\nQUnit.test( \"slice()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $links = jQuery( \"#ap a\" );\n\n\tassert.deepEqual( $links.slice( 1, 2 ).get(), q( \"groups\" ), \"slice(1,2)\" );\n\tassert.deepEqual( $links.slice( 1 ).get(), q( \"groups\", \"anchor1\", \"mark\" ), \"slice(1)\" );\n\tassert.deepEqual( $links.slice( 0, 3 ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"slice(0,3)\" );\n\tassert.deepEqual( $links.slice( -1 ).get(), q( \"mark\" ), \"slice(-1)\" );\n\n\tassert.deepEqual( $links.eq( 1 ).get(), q( \"groups\" ), \"eq(1)\" );\n\tassert.deepEqual( $links.eq( \"2\" ).get(), q( \"anchor1\" ), \"eq('2')\" );\n\tassert.deepEqual( $links.eq( -1 ).get(), q( \"mark\" ), \"eq(-1)\" );\n} );\n\nQUnit.test( \"first()/last()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $links = jQuery( \"#ap a\" ), $none = jQuery( \"asdf\" );\n\n\tassert.deepEqual( $links.first().get(), q( \"google\" ), \"first()\" );\n\tassert.deepEqual( $links.last().get(), q( \"mark\" ), \"last()\" );\n\n\tassert.deepEqual( $none.first().get(), [], \"first() none\" );\n\tassert.deepEqual( $none.last().get(), [], \"last() none\" );\n} );\n\nQUnit.test( \"even()/odd()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $links = jQuery( \"#ap a\" ), $none = jQuery( \"asdf\" );\n\n\tassert.deepEqual( $links.even().get(), q( \"google\", \"anchor1\" ), \"even()\" );\n\tassert.deepEqual( $links.odd().get(), q( \"groups\", \"mark\" ), \"odd()\" );\n\n\tassert.deepEqual( $none.even().get(), [], \"even() none\" );\n\tassert.deepEqual( $none.odd().get(), [], \"odd() none\" );\n} );\n\nQUnit.test( \"map()\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap\" ).map( function() {\n\t\t\treturn jQuery( this ).find( \"a\" ).get();\n\t\t} ).get(),\n\t\tq( \"google\", \"groups\", \"anchor1\", \"mark\" ),\n\t\t\"Array Map\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap > a\" ).map( function() {\n\t\t\treturn this.parentNode;\n\t\t} ).get(),\n\t\tq( \"ap\", \"ap\", \"ap\" ),\n\t\t\"Single Map\"\n\t);\n} );\n\nQUnit.test( \"jQuery.map\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar i, label, result, callback;\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"012\", \"Map the keys from an array\" );\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"345\", \"Map the values from an array\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Map the keys from an object\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"12\", \"Map the values from an object\" );\n\n\tresult = jQuery.map( [ \"a\", undefined, null, \"b\" ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Array iteration does not include undefined/null results\" );\n\n\tresult = jQuery.map( { a: \"a\", b: undefined, c: null, d: \"b\" }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Object iteration does not include undefined/null results\" );\n\n\tresult = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tresult[ i ].foo = \"bar\";\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( { length: result[ i ] }, callback );\n\t}\n\n\tresult = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( v, k ) {\n\t\tif ( result[ label ] ) {\n\t\t\tdelete result[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t}\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = false;\n\tjQuery.map( { length: 0 }, function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"length: 0 plain object treated like array\" );\n\n\tresult = false;\n\tjQuery.map( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"empty NodeList treated like array\" );\n\n\tresult = jQuery.map( Array( 4 ), function( v, k ) {\n\t\treturn k % 2 ? k : [ k, k, k ];\n\t} );\n\tassert.equal( result.join( \"\" ), \"00012223\", \"Array results flattened (#2616)\" );\n\n\tresult = jQuery.map( [ [ [ 1, 2 ], 3 ], 4 ], function( v, k ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.length, 3, \"Array flatten only one level down\" );\n\tassert.ok( Array.isArray( result[ 0 ] ), \"Array flatten only one level down\" );\n\n\t// Support: IE 9 - 11+, Edge 18+, Android Browser 4.0 - 4.3 only, iOS 7 - 11 only,\n\t// Safari 11 only, Firefox <= 61 only\n\t// Skip the test in browsers without Array#flat.\n\tif ( Array.prototype.flat ) {\n\t\tresult = jQuery.map( Array( 300000 ), function( v, k ) {\n\t\t\treturn k;\n\t\t} );\n\t\tassert.equal( result.length, 300000, \"Able to map 300000 records without any problems (#4320)\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Array#flat doesn't supported on all browsers\" );\n\t}\n} );\n\nQUnit.test( \"jQuery.merge()\", function( assert ) {\n\tassert.expect( 10 );\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [] ),\n\t\t[],\n\t\t\"Empty arrays\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1 ], [ 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"Basic (single-element)\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [ 3, 4 ] ),\n\t\t[ 1, 2, 3, 4 ],\n\t\t\"Basic (multiple-element)\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [] ),\n\t\t[ 1, 2 ],\n\t\t\"Second empty\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ 1, 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"First empty\"\n\t);\n\n\t// Fixed at [5998], #3641\n\tassert.deepEqual(\n\t\tjQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),\n\t\t[ -2, -1, 0, 1, 2 ],\n\t\t\"Second array including a zero (falsy)\"\n\t);\n\n\t// After fixing #5527\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ null, undefined ] ),\n\t\t[ null, undefined ],\n\t\t\"Second array including null and undefined values\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( { length: 0 }, [ 1, 2 ] ),\n\t\t{ length: 2, 0: 1, 1: 2 },\n\t\t\"First array like\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], { length: 1, 0: 3 } ),\n\t\t[ 1, 2, 3 ],\n\t\t\"Second array like\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], document.getElementById( \"lengthtest\" ).getElementsByTagName( \"input\" ) ),\n\t\t[ document.getElementById( \"length\" ), document.getElementById( \"idTest\" ) ],\n\t\t\"Second NodeList\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep()\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( [], searchCriterion ), [], \"Empty array\" );\n\tassert.deepEqual( jQuery.grep( new Array( 4 ), searchCriterion ), [], \"Sparse array\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep(Array-like)\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( { length: 0 }, searchCriterion ), [], \"Empty array-like\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present and array-like object used\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent and Array-like object used\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present, array-like object used, and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent, array-like object used, and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present, Array-like object used, but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent, Array-like object used, and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object)\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar empty, optionsWithLength, optionsWithDate, myKlass,\n\t\tcustomObject, optionsWithCustomObject, MyNumber, ret,\n\t\tnullUndef, target, recursive, obj,\n\t\tdefaults, defaultsCopy, options1, options1Copy, options2, options2Copy, merged2,\n\t\tsettings = { \"xnumber1\": 5, \"xnumber2\": 7, \"xstring1\": \"peter\", \"xstring2\": \"pan\" },\n\t\toptions = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\toptionsCopy = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tmerged = { \"xnumber1\": 5, \"xnumber2\": 1, \"xstring1\": \"peter\", \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tdeep1 = { \"foo\": { \"bar\": true } },\n\t\tdeep2 = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeep2copy = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeepmerged = { \"foo\": { \"bar\": true, \"baz\": true }, \"foo2\": document },\n\t\tarr = [ 1, 2, 3 ],\n\t\tnestedarray = { \"arr\": arr };\n\n\tjQuery.extend( settings, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( settings, null, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( true, deep1, deep2 );\n\tassert.deepEqual( deep1[ \"foo\" ], deepmerged[ \"foo\" ], \"Check if foo: settings must be extended\" );\n\tassert.deepEqual( deep2[ \"foo\" ], deep2copy[ \"foo\" ], \"Check if not deep2: options must not be modified\" );\n\tassert.equal( deep1[ \"foo2\" ], document, \"Make sure that a deep clone was not attempted on the document\" );\n\n\tassert.ok( jQuery.extend( true, {}, nestedarray )[ \"arr\" ] !== arr, \"Deep extend of object must clone child array\" );\n\n\t// #5991\n\tassert.ok( Array.isArray( jQuery.extend( true, { \"arr\": {} }, nestedarray )[ \"arr\" ] ), \"Cloned array have to be an Array\" );\n\tassert.ok( jQuery.isPlainObject( jQuery.extend( true, { \"arr\": arr }, { \"arr\": {} } )[ \"arr\" ] ), \"Cloned object have to be an plain object\" );\n\n\tempty = {};\n\toptionsWithLength = { \"foo\": { \"length\": -1 } };\n\tjQuery.extend( true, empty, optionsWithLength );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithLength[ \"foo\" ], \"The length property must copy correctly\" );\n\n\tempty = {};\n\toptionsWithDate = { \"foo\": { \"date\": new Date() } };\n\tjQuery.extend( true, empty, optionsWithDate );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithDate[ \"foo\" ], \"Dates copy correctly\" );\n\n\t/** @constructor */\n\tmyKlass = function() {};\n\tcustomObject = new myKlass();\n\toptionsWithCustomObject = { \"foo\": { \"date\": customObject } };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly (no methods)\" );\n\n\t// Makes the class a little more realistic\n\tmyKlass.prototype = { \"someMethod\": function() {} };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly\" );\n\n\tMyNumber = Number;\n\n\tret = jQuery.extend( true, { \"foo\": 4 }, { \"foo\": new MyNumber( 5 ) } );\n\tassert.ok( parseInt( ret.foo, 10 ) === 5, \"Wrapped numbers copy correctly\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": null } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === null, \"Check to make sure null values are copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": undefined } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === options[ \"xnumber2\" ], \"Check to make sure undefined values are not copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber0\": null } );\n\tassert.ok( nullUndef[ \"xnumber0\" ] === null, \"Check to make sure null values are inserted\" );\n\n\ttarget = {};\n\trecursive = { foo:target, bar:5 };\n\tjQuery.extend( true, target, recursive );\n\tassert.deepEqual( target, { bar:5 }, \"Check to make sure a recursive obj doesn't go never-ending loop by not copying it over\" );\n\n\tret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907\n\tassert.equal( ret.foo.length, 1, \"Check to make sure a value with coercion 'false' copies over when necessary to fix #1907\" );\n\n\tret = jQuery.extend( true, { foo: \"1,2,3\" }, { foo: [ 1, 2, 3 ] } );\n\tassert.ok( typeof ret.foo !== \"string\", \"Check to make sure values equal with coercion (but not actually equal) overwrite correctly\" );\n\n\tret = jQuery.extend( true, { foo:\"bar\" }, { foo:null } );\n\tassert.ok( typeof ret.foo !== \"undefined\", \"Make sure a null value doesn't crash with deep extend, for #1908\" );\n\n\tobj = { foo:null };\n\tjQuery.extend( true, obj, { foo:\"notnull\" } );\n\tassert.equal( obj.foo, \"notnull\", \"Make sure a null value can be overwritten\" );\n\n\tfunction func() {}\n\tjQuery.extend( func, { key: \"value\" } );\n\tassert.equal( func.key, \"value\", \"Verify a function can be extended\" );\n\n\tdefaults = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\tdefaultsCopy = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\toptions1 = { xnumber2: 1, xstring2: \"x\" };\n\toptions1Copy = { xnumber2: 1, xstring2: \"x\" };\n\toptions2 = { xstring2: \"xx\", xxx: \"newstringx\" };\n\toptions2Copy = { xstring2: \"xx\", xxx: \"newstringx\" };\n\tmerged2 = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"xx\", xxx: \"newstringx\" };\n\n\tsettings = jQuery.extend( {}, defaults, options1, options2 );\n\tassert.deepEqual( settings, merged2, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( defaults, defaultsCopy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options1, options1Copy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options2, options2Copy, \"Check if not modified: options2 must not be modified\" );\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object {created with \\\"defineProperties\\\"})\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar definedObj = Object.defineProperties( {}, {\n        \"enumerableProp\": {\n          get: function() {\n            return true;\n          },\n          enumerable: true\n        },\n        \"nonenumerableProp\": {\n          get: function() {\n            return true;\n          }\n        }\n      } ),\n      accessorObj = {};\n\n\tjQuery.extend( accessorObj, definedObj );\n\tassert.equal( accessorObj.enumerableProp, true, \"Verify that getters are transferred\" );\n\tassert.equal( accessorObj.nonenumerableProp, undefined, \"Verify that non-enumerable getters are ignored\" );\n} );\n\nQUnit.test( \"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar result, initial = {\n\n\t\t// This will make \"copyIsArray\" true\n\t\tarray: [ 1, 2, 3, 4 ],\n\n\t\t// If \"copyIsArray\" doesn't get reset to false, the check\n\t\t// will evaluate true and enter the array copy block\n\t\t// instead of the object copy block. Since the ternary in the\n\t\t// \"copyIsArray\" block will evaluate to false\n\t\t// (check if operating on an array with ), this will be\n\t\t// replaced by an empty array.\n\t\tobject: {}\n\t};\n\n\tresult = jQuery.extend( true, {}, initial );\n\n\tassert.deepEqual( result, initial, \"The [result] and [initial] have equal shape and values\" );\n\tassert.ok( !Array.isArray( result.object ), \"result.object wasn't paved with an empty array\" );\n} );\n\nQUnit.test( \"jQuery.extend( true, ... ) Object.prototype pollution\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery.extend( true, {}, JSON.parse( \"{\\\"__proto__\\\": {\\\"devMode\\\": true}}\" ) );\n\tassert.ok( !( \"devMode\" in {} ), \"Object.prototype not polluted\" );\n} );\n\nQUnit.test( \"jQuery.each(Object,Function)\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar i, label, seen, callback;\n\n\tseen = {};\n\tjQuery.each( [ 3, 4, 5 ], function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { \"0\": 3, \"1\": 4, \"2\": 5 }, \"Array iteration\" );\n\n\tseen = {};\n\tjQuery.each( { name: \"name\", lang: \"lang\" }, function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { name: \"name\", lang: \"lang\" }, \"Object iteration\" );\n\n\tseen = [];\n\tjQuery.each( [ 1, 2, 3 ], function( k, v ) {\n\t\tseen.push( v );\n\t\tif ( k === 1 ) {\n\t\t\treturn false;\n\t\t}\n\t} );\n\tassert.deepEqual( seen, [ 1, 2 ], \"Broken array iteration\" );\n\n\tseen = [];\n\tjQuery.each( { \"a\": 1, \"b\": 2, \"c\": 3 }, function( k, v ) {\n\t\tseen.push( v );\n\t\treturn false;\n\t} );\n\tassert.deepEqual( seen, [ 1 ], \"Broken object iteration\" );\n\n\tseen = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tseen[ i ].foo = \"bar\";\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( { length: seen[ i ] }, callback );\n\t}\n\n\tseen = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( k ) {\n\t\tif ( seen[ label ] ) {\n\t\t\tdelete seen[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t\treturn false;\n\t\t}\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = false;\n\tjQuery.each( { length: 0 }, function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"length: 0 plain object treated like array\" );\n\n\tseen = false;\n\tjQuery.each( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"empty NodeList treated like array\" );\n\n\ti = 0;\n\tjQuery.each( document.styleSheets, function() {\n\t\ti++;\n\t} );\n\tassert.equal( i, document.styleSheets.length, \"Iteration over document.styleSheets\" );\n} );\n\nQUnit.test( \"jQuery.each/map(undefined/null,Function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery.each( undefined, jQuery.noop );\n\t\tjQuery.each( null, jQuery.noop );\n\t\tjQuery.map( undefined, jQuery.noop );\n\t\tjQuery.map( null, jQuery.noop );\n\t\tassert.ok( true, \"jQuery.each/map( undefined/null, function() {} );\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"each/map must accept null and undefined values\" );\n\t}\n} );\n\nQUnit.test( \"JIT compilation does not interfere with length retrieval (gh-2145)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar i;\n\n\t// Trigger JIT compilation of jQuery.each \u2013 and therefore isArraylike \u2013 in iOS.\n\t// Convince JSC to use one of its optimizing compilers\n\t// by providing code which can be LICM'd into nothing.\n\tfor ( i = 0; i < 1000; i++ ) {\n\t\tjQuery.each( [] );\n\t}\n\n\ti = 0;\n\tjQuery.each( { 1: \"1\", 2: \"2\", 3: \"3\" }, function( index ) {\n\t\tassert.equal( ++i, index, \"Iteration over object with solely \" +\n\t\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n\t} );\n\tassert.equal( i, 3, \"Iteration over object with solely \" +\n\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n} );\n\nQUnit.test( \"jQuery.makeArray\", function( assert ) {\n\tassert.expect( 15 );\n\n\tassert.equal( jQuery.makeArray( jQuery( \"html>*\" ) )[ 0 ].nodeName.toUpperCase(), \"HEAD\", \"Pass makeArray a jQuery object\" );\n\n\tassert.equal( jQuery.makeArray( document.getElementsByName( \"PWD\" ) ).slice( 0, 1 )[ 0 ].name, \"PWD\", \"Pass makeArray a nodelist\" );\n\n\tassert.equal( ( function() { return jQuery.makeArray( arguments ); } )( 1, 2 ).join( \"\" ), \"12\", \"Pass makeArray an arguments array\" );\n\n\tassert.equal( jQuery.makeArray( [ 1, 2, 3 ] ).join( \"\" ), \"123\", \"Pass makeArray a real array\" );\n\n\tassert.equal( jQuery.makeArray().length, 0, \"Pass nothing to makeArray and expect an empty array\" );\n\n\tassert.equal( jQuery.makeArray( 0 )[ 0 ], 0, \"Pass makeArray a number\" );\n\n\tassert.equal( jQuery.makeArray( \"foo\" )[ 0 ], \"foo\", \"Pass makeArray a string\" );\n\n\tassert.equal( jQuery.makeArray( true )[ 0 ].constructor, Boolean, \"Pass makeArray a boolean\" );\n\n\tassert.equal( jQuery.makeArray( document.createElement( \"div\" ) )[ 0 ].nodeName.toUpperCase(), \"DIV\", \"Pass makeArray a single node\" );\n\n\tassert.equal( jQuery.makeArray( { length:2, 0:\"a\", 1:\"b\" } ).join( \"\" ), \"ab\", \"Pass makeArray an array like map (with length)\" );\n\n\tassert.ok( !!jQuery.makeArray( document.documentElement.childNodes ).slice( 0, 1 )[ 0 ].nodeName, \"Pass makeArray a childNodes array\" );\n\n\t// function, is tricky as it has length\n\tassert.equal( jQuery.makeArray( function() { return 1;} )[ 0 ](), 1, \"Pass makeArray a function\" );\n\n\t//window, also has length\n\tassert.equal( jQuery.makeArray( window )[ 0 ], window, \"Pass makeArray the window\" );\n\n\tassert.equal( jQuery.makeArray( /a/ )[ 0 ].constructor, RegExp, \"Pass makeArray a regex\" );\n\n\t// Some nodes inherit traits of nodelists\n\tassert.ok( jQuery.makeArray( document.getElementById( \"form\" ) ).length >= 13,\n\t\t\"Pass makeArray a form (treat as elements)\" );\n} );\n\nQUnit.test( \"jQuery.inArray\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery.inArray( 0, false ), -1, \"Search in 'false' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, null ), -1, \"Search in 'null' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, undefined ), -1, \"Search in 'undefined' as array returns -1 and doesn't throw exception\" );\n} );\n\nQUnit.test( \"jQuery.isEmptyObject\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( true, jQuery.isEmptyObject( {} ), \"isEmptyObject on empty object literal\" );\n\tassert.equal( false, jQuery.isEmptyObject( { a:1 } ), \"isEmptyObject on non-empty object literal\" );\n\n\t// What about this ?\n\t// equal(true, jQuery.isEmptyObject(null), \"isEmptyObject on null\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar html, nodes;\n\n\tassert.deepEqual( jQuery.parseHTML(), [], \"Without arguments\" );\n\tassert.deepEqual( jQuery.parseHTML( undefined ), [], \"Undefined\" );\n\tassert.deepEqual( jQuery.parseHTML( null ), [], \"Null\" );\n\tassert.deepEqual( jQuery.parseHTML( false ), [], \"Boolean false\" );\n\tassert.deepEqual( jQuery.parseHTML( 0 ), [], \"Zero\" );\n\tassert.deepEqual( jQuery.parseHTML( true ), [], \"Boolean true\" );\n\tassert.deepEqual( jQuery.parseHTML( 42 ), [], \"Positive number\" );\n\tassert.deepEqual( jQuery.parseHTML( \"\" ), [], \"Empty string\" );\n\tassert.throws( function() {\n\t\tjQuery.parseHTML( \"<div></div>\", document.getElementById( \"form\" ) );\n\t}, \"Passing an element as the context raises an exception (context should be a document)\" );\n\n\tnodes = jQuery.parseHTML( jQuery( \"body\" )[ 0 ].innerHTML );\n\tassert.ok( nodes.length > 4, \"Parse a large html string\" );\n\tassert.ok( Array.isArray( nodes ), \"parseHTML returns an array rather than a nodelist\" );\n\n\thtml = \"<script>undefined()</script>\";\n\tassert.equal( jQuery.parseHTML( html ).length, 0, \"Ignore scripts by default\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve scripts when requested\" );\n\n\thtml += \"<div></div>\";\n\tassert.equal( jQuery.parseHTML( html )[ 0 ].nodeName.toLowerCase(), \"div\", \"Preserve non-script nodes\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve script position\" );\n\n\tassert.equal( jQuery.parseHTML( \"text\" )[ 0 ].nodeType, 3, \"Parsing text returns a text node\" );\n\tassert.equal( jQuery.parseHTML( \"\\t<div></div>\" )[ 0 ].nodeValue, \"\\t\", \"Preserve leading whitespace\" );\n\n\tassert.equal( jQuery.parseHTML( \" <div></div> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );\n\n\thtml = jQuery.parseHTML( \"<div>test div</div>\" );\n\n\tassert.equal( html[ 0 ].parentNode.nodeType, 11, \"parentNode should be documentFragment\" );\n\tassert.equal( html[ 0 ].innerHTML, \"test div\", \"Content should be preserved\" );\n\n\tassert.equal( jQuery.parseHTML( \"<span><span>\" ).length, 1, \"Incorrect html-strings should not break anything\" );\n\tassert.equal( jQuery.parseHTML( \"<td><td>\" )[ 1 ].parentNode.nodeType, 11,\n\t\t\"parentNode should be documentFragment for wrapMap (variable in manipulation module) elements too\" );\n\tassert.ok( jQuery.parseHTML( \"<#if><tr><p>This is a test.</p></tr><#/if>\" ) || true, \"Garbage input should not cause error\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML(<a href>) - gh-2965\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html = \"<a href='example.html'></a>\",\n\t\thref = jQuery.parseHTML( html )[ 0 ].href;\n\n\tassert.ok( /\\/example\\.html$/.test( href ), \"href is not lost after parsing anchor\" );\n} );\n\nif ( jQuery.support.createHTMLDocument ) {\n\tQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\t\tvar done = assert.async();\n\t\tassert.expect( 1 );\n\n\t\tGlobals.register( \"parseHTMLError\" );\n\n\t\tjQuery.globalEval( \"parseHTMLError = false;\" );\n\t\tjQuery.parseHTML( \"<img src=x onerror='parseHTMLError = true'>\" );\n\n\t\twindow.setTimeout( function() {\n\t\t\tassert.equal( window.parseHTMLError, false, \"onerror eventhandler has not been called.\" );\n\t\t\tdone();\n\t\t}, 2000 );\n\t} );\n}\n\nQUnit.test( \"jQuery.parseXML\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar xml, tmp;\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>A <b>well-formed</b> xml string</p>\" );\n\t\ttmp = xml.getElementsByTagName( \"p\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<p> present in document\" );\n\t\ttmp = tmp.getElementsByTagName( \"b\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<b> present in document\" );\n\t\tassert.strictEqual( tmp.childNodes[ 0 ].nodeValue, \"well-formed\", \"<b> text is as expected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e, undefined, \"unexpected error\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>Not a <<b>well-formed</b> xml string</p>\" );\n\t\tassert.ok( false, \"invalid xml not detected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e.message, \"Invalid XML: <p>Not a <<b>well-formed</b> xml string</p>\", \"invalid xml detected\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"\" );\n\t\tassert.strictEqual( xml, null, \"empty string => null document\" );\n\t\txml = jQuery.parseXML();\n\t\tassert.strictEqual( xml, null, \"undefined string => null document\" );\n\t\txml = jQuery.parseXML( null );\n\t\tassert.strictEqual( xml, null, \"null string => null document\" );\n\t\txml = jQuery.parseXML( true );\n\t\tassert.strictEqual( xml, null, \"non-string => null document\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"empty input throws exception\" );\n\t}\n} );\n\ntestIframe(\n\t\"Conditional compilation compatibility (#13274)\",\n\t\"core/cc_on.html\",\n\tfunction( assert, jQuery, window, document, cc_on, errors ) {\n\t\tassert.expect( 3 );\n\t\tassert.ok( true, \"JScript conditional compilation \" + ( cc_on ? \"supported\" : \"not supported\" ) );\n\t\tassert.deepEqual( errors, [], \"No errors\" );\n\t\tassert.ok( jQuery(), \"jQuery executes\" );\n\t}\n);\n\n// iOS7 doesn't fire the load event if the long-loading iframe gets its source reset to about:blank.\n// This makes this test fail but it doesn't seem to cause any real-life problems so blacklisting\n// this test there is preferred to complicating the hard-to-test core/ready code further.\nif ( !/iphone os 7_/i.test( navigator.userAgent ) ) {\n\ttestIframe(\n\t\t\"document ready when jQuery loaded asynchronously (#13655)\",\n\t\t\"core/dynamic_ready.html\",\n\t\tfunction( assert, jQuery, window, document, ready ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.equal( true, ready, \"document ready correctly fired when jQuery is loaded after DOMContentLoaded\" );\n\t\t}\n\t);\n}\n\ntestIframe(\n\t\"Tolerating alias-masked DOM properties (#14074)\",\n\t\"core/aliased.html\",\n\tfunction( assert, jQuery, window, document, errors ) {\n\t\tassert.expect( 1 );\n\t\tassert.deepEqual( errors, [], \"jQuery loaded\" );\n\t}\n);\n\ntestIframe(\n\t\"Don't call window.onready (#14802)\",\n\t\"core/onready.html\",\n\tfunction( assert, jQuery, window, document, error ) {\n\t\tassert.expect( 1 );\n\t\tassert.equal( error, false, \"no call to user-defined onready\" );\n\t}\n);\n\nQUnit.test( \"Iterability of jQuery objects (gh-1693)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar i, elem, result;\n\n\tif ( typeof Symbol === \"function\" ) {\n\n\t\telem = jQuery( \"<div></div><span></span><a></a>\" );\n\t\tresult = \"\";\n\n\t\ttry {\n\t\t\teval( \"for ( i of elem ) { result += i.nodeName; }\" );\n\t\t} catch ( e ) {}\n\t\tassert.equal( result, \"DIVSPANA\", \"for-of works on jQuery objects\" );\n\t} else {\n\t\tassert.ok( true, \"The browser doesn't support Symbols\" );\n\t}\n} );\n\ntestIframe(\n\t\"Iterability of jQuery objects with Symbol polyfill (gh-1693)\",\n\t\"core/jquery-iterability-transpiled.html\",\n\tfunction( assert, jQuery, window, document, testString ) {\n\t\tassert.expect( 1 );\n\n\t\tassert.strictEqual( testString, \"DIVSPANA\",\n\t\t\t\"for-of works on jQuery objects with Symbol polyfilled\" );\n\t}\n);\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (original)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar message;\n\n\tthis.sandbox.stub( window, \"setTimeout\", function( fn ) {\n\t\ttry {\n\t\t\tfn();\n\t\t} catch ( error ) {\n\t\t\tmessage = error.message;\n\t\t}\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n\tassert.strictEqual(\n\t\tmessage,\n\t\t\"Error in jQuery ready\",\n\t\t\"The error should have been thrown in a timeout\"\n\t);\n} );\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (custom)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar done = assert.async();\n\n\tthis.sandbox.stub( jQuery, \"readyException\", function( error ) {\n\t\tassert.strictEqual(\n\t\t\terror.message,\n\t\t\t\"Error in jQuery ready\",\n\t\t\t\"The custom jQuery.readyException should have been called\"\n\t\t);\n\t\tdone();\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n} );\n", "if ( jQuery.css ) {\n\nQUnit.module( \"css\", { afterEach: moduleTeardown } );\n\nQUnit.test( \"css(String|Hash)\", function( assert ) {\n\tassert.expect( 42 );\n\n\tassert.equal( jQuery( \"#qunit-fixture\" ).css( \"display\" ), \"block\", \"Check for css property \\\"display\\\"\" );\n\n\tvar $child, div, div2, width, height, child, prctval, checkval, old;\n\n\t$child = jQuery( \"#nothiddendivchild\" ).css( { \"width\": \"20%\", \"height\": \"20%\" } );\n\tassert.notEqual( $child.css( \"width\" ), \"20px\", \"Retrieving a width percentage on the child of a hidden div returns percentage\" );\n\tassert.notEqual( $child.css( \"height\" ), \"20px\", \"Retrieving a height percentage on the child of a hidden div returns percentage\" );\n\n\tdiv = jQuery( \"<div></div>\" );\n\n\t// These should be \"auto\" (or some better value)\n\t// temporarily provide \"0px\" for backwards compat\n\tassert.equal( div.css( \"width\" ), \"0px\", \"Width on disconnected node.\" );\n\tassert.equal( div.css( \"height\" ), \"0px\", \"Height on disconnected node.\" );\n\n\tdiv.css( { \"width\": 4, \"height\": 4 } );\n\n\tassert.equal( div.css( \"width\" ), \"4px\", \"Width on disconnected node.\" );\n\tassert.equal( div.css( \"height\" ), \"4px\", \"Height on disconnected node.\" );\n\n\tdiv2 = jQuery( \"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'></textarea><div style='height:20px;'></div></div>\" ).appendTo( \"body\" );\n\n\tassert.equal( div2.find( \"input\" ).css( \"height\" ), \"20px\", \"Height on hidden input.\" );\n\tassert.equal( div2.find( \"textarea\" ).css( \"height\" ), \"20px\", \"Height on hidden textarea.\" );\n\tassert.equal( div2.find( \"div\" ).css( \"height\" ), \"20px\", \"Height on hidden div.\" );\n\n\tdiv2.remove();\n\n\t// handle negative numbers by setting to zero #11604\n\tjQuery( \"#nothiddendiv\" ).css( { \"width\": 1, \"height\": 1 } );\n\n\twidth = parseFloat( jQuery( \"#nothiddendiv\" ).css( \"width\" ) );\n\theight = parseFloat( jQuery( \"#nothiddendiv\" ).css( \"height\" ) );\n\tjQuery( \"#nothiddendiv\" ).css( { \"overflow\":\"hidden\", \"width\": -1, \"height\": -1 } );\n\tassert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"width\" ) ), 0, \"Test negative width set to 0\" );\n\tassert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"height\" ) ), 0, \"Test negative height set to 0\" );\n\n\tassert.equal( jQuery( \"<div style='display: none;'></div>\" ).css( \"display\" ), \"none\", \"Styles on disconnected nodes\" );\n\n\tjQuery( \"#floatTest\" ).css( { \"float\": \"right\" } );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"float\" ), \"right\", \"Modified CSS float using \\\"float\\\": Assert float is right\" );\n\tjQuery( \"#floatTest\" ).css( { \"font-size\": \"30px\" } );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"font-size\" ), \"30px\", \"Modified CSS font-size: Assert font-size is 30px\" );\n\tjQuery.each( \"0,0.25,0.5,0.75,1\".split( \",\" ), function( i, n ) {\n\t\tjQuery( \"#foo\" ).css( { \"opacity\": n } );\n\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a String\" );\n\t\tjQuery( \"#foo\" ).css( { \"opacity\": parseFloat( n ) } );\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a Number\" );\n\t} );\n\tjQuery( \"#foo\" ).css( { \"opacity\": \"\" } );\n\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), \"1\", \"Assert opacity is 1 when set to an empty String\" );\n\n\tassert.equal( jQuery( \"#empty\" ).css( \"opacity\" ), \"0\", \"Assert opacity is accessible\" );\n\tjQuery( \"#empty\" ).css( { \"opacity\": \"1\" } );\n\tassert.equal( jQuery( \"#empty\" ).css( \"opacity\" ), \"1\", \"Assert opacity is taken from style attribute when set\" );\n\n\tdiv = jQuery( \"#nothiddendiv\" );\n\tchild = jQuery( \"#nothiddendivchild\" );\n\n\tassert.equal( parseInt( div.css( \"fontSize\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\tassert.equal( parseInt( div.css( \"font-size\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\tassert.equal( parseInt( child.css( \"fontSize\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\tassert.equal( parseInt( child.css( \"font-size\" ), 10 ), 16, \"Verify fontSize px set.\" );\n\n\tchild.css( \"height\", \"100%\" );\n\tassert.equal( child[ 0 ].style.height, \"100%\", \"Make sure the height is being set correctly.\" );\n\n\tchild.attr( \"class\", \"em\" );\n\tassert.equal( parseInt( child.css( \"fontSize\" ), 10 ), 32, \"Verify fontSize em set.\" );\n\n\t// Have to verify this as the result depends upon the browser's CSS\n\t// support for font-size percentages\n\tchild.attr( \"class\", \"prct\" );\n\tprctval = parseInt( child.css( \"fontSize\" ), 10 );\n\tcheckval = 0;\n\tif ( prctval === 16 || prctval === 24 ) {\n\t\tcheckval = prctval;\n\t}\n\n\tassert.equal( prctval, checkval, \"Verify fontSize % set.\" );\n\n\tassert.equal( typeof child.css( \"width\" ), \"string\", \"Make sure that a string width is returned from css('width').\" );\n\n\told = child[ 0 ].style.height;\n\n\t// Test NaN\n\tchild.css( \"height\", parseFloat( \"zoo\" ) );\n\tassert.equal( child[ 0 ].style.height, old, \"Make sure height isn't changed on NaN.\" );\n\n\t// Test null\n\tchild.css( \"height\", null );\n\tassert.equal( child[ 0 ].style.height, old, \"Make sure height isn't changed on null.\" );\n\n\told = child[ 0 ].style.fontSize;\n\n\t// Test NaN\n\tchild.css( \"font-size\", parseFloat( \"zoo\" ) );\n\tassert.equal( child[ 0 ].style.fontSize, old, \"Make sure font-size isn't changed on NaN.\" );\n\n\t// Test null\n\tchild.css( \"font-size\", null );\n\tassert.equal( child[ 0 ].style.fontSize, old, \"Make sure font-size isn't changed on null.\" );\n\n\tassert.strictEqual( child.css( \"x-fake\" ), undefined, \"Make sure undefined is returned from css(nonexistent).\" );\n\n\tdiv = jQuery( \"<div></div>\" ).css( { position: \"absolute\", \"z-index\": 1000 } ).appendTo( \"#qunit-fixture\" );\n\tassert.strictEqual( div.css( \"z-index\" ), \"1000\",\n\t\t\"Make sure that a string z-index is returned from css('z-index') (#14432).\" );\n} );\n\nQUnit.test( \"css() explicit and relative values\", function( assert ) {\n\tassert.expect( 29 );\n\n\tvar $elem = jQuery( \"#nothiddendiv\" );\n\n\t$elem.css( { \"width\": 1, \"height\": 1, \"paddingLeft\": \"1px\", \"opacity\": 1 } );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"Initial css set or width/height works (hash)\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"Initial css set of paddingLeft works (hash)\" );\n\tassert.equal( $elem.css( \"opacity\" ), \"1\", \"Initial css set of opacity works (hash)\" );\n\n\t$elem.css( { width: \"+=9\" } );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9' on width (hash)\" );\n\n\t$elem.css( { \"width\": \"-=9\" } );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9' on width (hash)\" );\n\n\t$elem.css( { \"width\": \"+=9px\" } );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9px' on width (hash)\" );\n\n\t$elem.css( { \"width\": \"-=9px\" } );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9px' on width (hash)\" );\n\n\t$elem.css( \"width\", \"+=9\" );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9' on width (params)\" );\n\n\t$elem.css( \"width\", \"-=9\" );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9' on width (params)\" );\n\n\t$elem.css( \"width\", \"+=9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'+=9px' on width (params)\" );\n\n\t$elem.css( \"width\", \"-=9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'-=9px' on width (params)\" );\n\n\t$elem.css( \"width\", \"-=-9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"10px\", \"'-=-9px' on width (params)\" );\n\n\t$elem.css( \"width\", \"+=-9px\" );\n\tassert.equal( $elem.css( \"width\" ), \"1px\", \"'+=-9px' on width (params)\" );\n\n\t$elem.css( { \"paddingLeft\": \"+=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"paddingLeft\": \"-=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"paddingLeft\": \"+=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4px' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"paddingLeft\": \"-=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4px' on paddingLeft (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"+=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4' on padding-left (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"-=4\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4' on padding-left (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"+=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4px' on padding-left (hash)\" );\n\n\t$elem.css( { \"padding-left\": \"-=4px\" } );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4px' on padding-left (hash)\" );\n\n\t$elem.css( \"paddingLeft\", \"+=4\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4' on paddingLeft (params)\" );\n\n\t$elem.css( \"paddingLeft\", \"-=4\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4' on paddingLeft (params)\" );\n\n\t$elem.css( \"padding-left\", \"+=4px\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"5px\", \"'+=4px' on padding-left (params)\" );\n\n\t$elem.css( \"padding-left\", \"-=4px\" );\n\tassert.equal( $elem.css( \"paddingLeft\" ), \"1px\", \"'-=4px' on padding-left (params)\" );\n\n\t$elem.css( { \"opacity\": \"-=0.5\" } );\n\tassert.equal( $elem.css( \"opacity\" ), \"0.5\", \"'-=0.5' on opacity (hash)\" );\n\n\t$elem.css( { \"opacity\": \"+=0.5\" } );\n\tassert.equal( $elem.css( \"opacity\" ), \"1\", \"'+=0.5' on opacity (hash)\" );\n\n\t$elem.css( \"opacity\", \"-=0.5\" );\n\tassert.equal( $elem.css( \"opacity\" ), \"0.5\", \"'-=0.5' on opacity (params)\" );\n\n\t$elem.css( \"opacity\", \"+=0.5\" );\n\tassert.equal( $elem.css( \"opacity\" ), \"1\", \"'+=0.5' on opacity (params)\" );\n} );\n\nQUnit.test( \"css() non-px relative values (gh-1711)\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar cssCurrent,\n\t\tunits = {},\n\t\t$child = jQuery( \"#nothiddendivchild\" ),\n\t\tadd = function( prop, val, unit ) {\n\t\t\tvar difference,\n\t\t\t\tadjustment = ( val < 0 ? \"-=\" : \"+=\" ) + Math.abs( val ) + unit,\n\t\t\t\tmessage = prop + \": \" + adjustment,\n\t\t\t\tcssOld = cssCurrent,\n\t\t\t\texpected = cssOld + val * units[ prop ][ unit ];\n\n\t\t\t// Apply change\n\t\t\t$child.css( prop, adjustment );\n\t\t\tcssCurrent = parseFloat( $child.css( prop ) );\n\t\t\tmessage += \" (actual \" + round( cssCurrent, 2 ) + \"px, expected \" +\n\t\t\t\tround( expected, 2 ) + \"px)\";\n\n\t\t\t// Require a difference of no more than one pixel\n\t\t\tdifference = Math.abs( cssCurrent - expected );\n\t\t\tassert.ok( difference <= 1, message );\n\t\t},\n\t\tgetUnits = function( prop ) {\n\t\t\tunits[ prop ] = {\n\t\t\t\t\"px\": 1,\n\t\t\t\t\"em\": parseFloat( $child.css( prop, \"100em\" ).css( prop ) ) / 100,\n\t\t\t\t\"pt\": parseFloat( $child.css( prop, \"100pt\" ).css( prop ) ) / 100,\n\t\t\t\t\"pc\": parseFloat( $child.css( prop, \"100pc\" ).css( prop ) ) / 100,\n\t\t\t\t\"cm\": parseFloat( $child.css( prop, \"100cm\" ).css( prop ) ) / 100,\n\t\t\t\t\"mm\": parseFloat( $child.css( prop, \"100mm\" ).css( prop ) ) / 100,\n\t\t\t\t\"%\": parseFloat( $child.css( prop, \"500%\"  ).css( prop ) ) / 500\n\t\t\t};\n\t\t},\n\t\tround = function( num, fractionDigits ) {\n\t\t\tvar base = Math.pow( 10, fractionDigits );\n\t\t\treturn Math.round( num * base ) / base;\n\t\t};\n\n\tjQuery( \"#nothiddendiv\" ).css( { height: 1, padding: 0, width: 400 } );\n\t$child.css( { height: 1, padding: 0 } );\n\n\tgetUnits( \"width\" );\n\tcssCurrent = parseFloat( $child.css( \"width\", \"50%\" ).css( \"width\" ) );\n\tadd( \"width\",  25,    \"%\" );\n\tadd( \"width\", -50,    \"%\" );\n\tadd( \"width\",  10,   \"em\" );\n\tadd( \"width\",  10,   \"pt\" );\n\tadd( \"width\",  -2.3, \"pt\" );\n\tadd( \"width\",   5,   \"pc\" );\n\tadd( \"width\",  -5,   \"em\" );\n\tadd( \"width\",  +2,   \"cm\" );\n\tadd( \"width\", -15,   \"mm\" );\n\tadd( \"width\",  21,   \"px\" );\n\n\tgetUnits( \"lineHeight\" );\n\tcssCurrent = parseFloat( $child.css( \"lineHeight\", \"1em\" ).css( \"lineHeight\" ) );\n\tadd( \"lineHeight\",  50,  \"%\" );\n\tadd( \"lineHeight\",   2, \"em\" );\n\tadd( \"lineHeight\", -10, \"px\" );\n\tadd( \"lineHeight\",  20, \"pt\" );\n\tadd( \"lineHeight\",  30, \"pc\" );\n\tadd( \"lineHeight\",   1, \"cm\" );\n\tadd( \"lineHeight\", -44, \"mm\" );\n} );\n\nQUnit.test( \"css() mismatched relative values with bounded styles (gh-2144)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar right,\n\t\t$container = jQuery( \"<div></div>\" )\n\t\t\t.css( { position: \"absolute\", width: \"400px\", fontSize: \"4px\" } )\n\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\t$el = jQuery( \"<div></div>\" )\n\t\t\t.css( { position: \"absolute\", left: \"50%\", right: \"50%\" } )\n\t\t\t.appendTo( $container );\n\n\t$el.css( \"right\", \"-=25em\" );\n\tassert.equal( Math.round( parseFloat( $el.css( \"right\" ) ) ), 100,\n\t\t\"Constraints do not interfere with unit conversion\" );\n} );\n\nQUnit.test( \"css(String, Object)\", function( assert ) {\n\tassert.expect( 19 );\n\tvar j, div, display, ret, success;\n\n\tjQuery( \"#floatTest\" ).css( \"float\", \"left\" );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"float\" ), \"left\", \"Modified CSS float using \\\"float\\\": Assert float is left\" );\n\tjQuery( \"#floatTest\" ).css( \"font-size\", \"20px\" );\n\tassert.equal( jQuery( \"#floatTest\" ).css( \"font-size\" ), \"20px\", \"Modified CSS font-size: Assert font-size is 20px\" );\n\n\tjQuery.each( \"0,0.25,0.5,0.75,1\".split( \",\" ), function( i, n ) {\n\t\tjQuery( \"#foo\" ).css( \"opacity\", n );\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a String\" );\n\t\tjQuery( \"#foo\" ).css( \"opacity\", parseFloat( n ) );\n\t\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), parseFloat( n ), \"Assert opacity is \" + parseFloat( n ) + \" as a Number\" );\n\t} );\n\tjQuery( \"#foo\" ).css( \"opacity\", \"\" );\n\tassert.equal( jQuery( \"#foo\" ).css( \"opacity\" ), \"1\", \"Assert opacity is 1 when set to an empty String\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.css( \"overflow\", \"visible\" );\n\tassert.equal( j.css( \"overflow\" ), \"visible\", \"Check node,textnode,comment css works\" );\n\tassert.equal( jQuery( \"#t2037 .hidden\" ).css( \"display\" ), \"none\", \"Make sure browser thinks it is hidden\" );\n\n\tdiv = jQuery( \"#nothiddendiv\" );\n\tdisplay = div.css( \"display\" );\n\tret = div.css( \"display\", undefined );\n\n\tassert.equal( ret, div, \"Make sure setting undefined returns the original set.\" );\n\tassert.equal( div.css( \"display\" ), display, \"Make sure that the display wasn't changed.\" );\n\n\tsuccess = true;\n\ttry {\n\t\tjQuery( \"#foo\" ).css( \"backgroundColor\", \"rgba(0, 0, 0, 0.1)\" );\n\t}\n\tcatch ( e ) {\n\t\tsuccess = false;\n\t}\n\tassert.ok( success, \"Setting RGBA values does not throw Error (#5509)\" );\n\n\tjQuery( \"#foo\" ).css( \"font\", \"7px/21px sans-serif\" );\n\tassert.strictEqual( jQuery( \"#foo\" ).css( \"line-height\" ), \"21px\",\n\t\t\"Set font shorthand property (#14759)\" );\n} );\n\nQUnit.test( \"css(String, Object) with negative values\", function( assert ) {\n\tassert.expect( 4 );\n\n\tjQuery( \"#nothiddendiv\" ).css( \"margin-top\", \"-10px\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"margin-left\", \"-10px\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"margin-top\" ), \"-10px\", \"Ensure negative top margins work.\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"margin-left\" ), \"-10px\", \"Ensure negative left margins work.\" );\n\n\tjQuery( \"#nothiddendiv\" ).css( \"position\", \"absolute\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"top\", \"-20px\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"left\", \"-20px\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"top\" ), \"-20px\", \"Ensure negative top values work.\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).css( \"left\" ), \"-20px\", \"Ensure negative left values work.\" );\n} );\n\nQUnit.test( \"css(Array)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar expectedMany = {\n\t\t\t\"overflow\": \"visible\",\n\t\t\t\"width\": \"16px\"\n\t\t},\n\t\texpectedSingle = {\n\t\t\t\"width\": \"16px\"\n\t\t},\n\t\telem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.deepEqual( elem.css( expectedMany ).css( [ \"overflow\", \"width\" ] ), expectedMany, \"Getting multiple element array\" );\n\tassert.deepEqual( elem.css( expectedSingle ).css( [ \"width\" ] ), expectedSingle, \"Getting single element array\" );\n} );\n\nQUnit.test( \"css(String, Function)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( \"font-size\", function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).each( function() {\n\t\tvar computedSize = jQuery( this ).css( \"font-size\" ),\n\t\t\texpectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t} );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\nQUnit.test( \"css(String, Function) with incoming value\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( \"font-size\", function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( \"font-size\", function( i, computedSize ) {\n\t\tvar expectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t\treturn computedSize;\n\t} );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\nQUnit.test( \"css(Object) where values are Functions\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( { \"fontSize\": function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} } );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).each( function() {\n\t\tvar computedSize = jQuery( this ).css( \"font-size\" ),\n\t\t\texpectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t} );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\nQUnit.test( \"css(Object) where values are Functions with incoming values\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar index,\n\t\tsizes = [ \"10px\", \"20px\", \"30px\" ];\n\n\tjQuery( \"<div id='cssFunctionTest'><div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div>\" +\n\t\t\t\t\"<div class='cssFunction'></div></div>\" )\n\t\t.appendTo( \"body\" );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( { \"fontSize\": function() {\n\t\tvar size = sizes[ index ];\n\t\tindex++;\n\t\treturn size;\n\t} } );\n\n\tindex = 0;\n\n\tjQuery( \"#cssFunctionTest div\" ).css( { \"font-size\": function( i, computedSize ) {\n\t\tvar expectedSize = sizes[ index ];\n\t\tassert.equal( computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize );\n\t\tindex++;\n\t\treturn computedSize;\n\t} } );\n\n\tjQuery( \"#cssFunctionTest\" ).remove();\n} );\n\n// .show(), .hide(), can be excluded from the build\nif ( jQuery.fn.show && jQuery.fn.hide ) {\n\nQUnit.test( \"show()\", function( assert ) {\n\n\tassert.expect( 18 );\n\n\tvar hiddendiv, div, pass, test;\n\t\thiddendiv = jQuery( \"div.hidden\" );\n\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"none\", \"hiddendiv is display: none\" );\n\n\thiddendiv.css( \"display\", \"block\" );\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.show();\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.css( \"display\", \"\" );\n\n\tpass = true;\n\tdiv = jQuery( \"#qunit-fixture div\" );\n\tdiv.show().each( function() {\n\t\tif ( this.style.display === \"none\" ) {\n\t\t\tpass = false;\n\t\t}\n\t} );\n\tassert.ok( pass, \"Show\" );\n\n\tjQuery(\n\t\t\"<div id='show-tests'>\" +\n\t\t\"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" +\n\t\t\"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>\" +\n\t\t\"<ul><li></li></ul></div>\"\n\t).appendTo( \"#qunit-fixture\" ).find( \"*\" ).css( \"display\", \"none\" );\n\n\ttest = {\n\t\t\"div\": \"block\",\n\t\t\"p\": \"block\",\n\t\t\"a\": \"inline\",\n\t\t\"code\": \"inline\",\n\t\t\"pre\": \"block\",\n\t\t\"span\": \"inline\",\n\t\t\"table\": \"table\",\n\t\t\"thead\": \"table-header-group\",\n\t\t\"tbody\": \"table-row-group\",\n\t\t\"tr\": \"table-row\",\n\t\t\"th\": \"table-cell\",\n\t\t\"td\": \"table-cell\",\n\t\t\"ul\": \"block\",\n\t\t\"li\": \"list-item\"\n\t};\n\n\tjQuery.each( test, function( selector, expected ) {\n\t\tvar elem = jQuery( selector, \"#show-tests\" ).show();\n\t\tassert.equal( elem.css( \"display\" ), expected, \"Show using correct display type for \" + selector );\n\t} );\n\n\t// Make sure that showing or hiding a text node doesn't cause an error\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).show().remove();\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).hide().remove();\n} );\n\nQUnit.test( \"show/hide detached nodes\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar div, span, tr;\n\n\tdiv = jQuery( \"<div>\" ).hide();\n\tassert.equal( div.css( \"display\" ), \"none\", \"hide() updates inline style of a detached div\" );\n\tdiv.appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A hidden-while-detached div is hidden after attachment\" );\n\tdiv.show();\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A hidden-while-detached div can be shown after attachment\" );\n\n\tdiv = jQuery( \"<div class='hidden'>\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached div can be hidden by the CSS cascade\" );\n\n\tdiv = jQuery( \"<div><div class='hidden'></div></div>\" ).children( \"div\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached div inside a visible div can be hidden by the CSS cascade\" );\n\n\tspan = jQuery( \"<span class='hidden'></span>\" );\n\tspan.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( span.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached span can be hidden by the CSS cascade\" );\n\n\tdiv = jQuery( \"div.hidden\" );\n\tdiv.detach().show();\n\tassert.ok( !div[ 0 ].style.display,\n\t\t\"show() does not update inline style of a cascade-hidden-before-detach div\" );\n\tdiv.appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached cascade-hidden div is hidden after attachment\" );\n\tdiv.remove();\n\n\tspan = jQuery( \"<span class='hidden'></span>\" );\n\tspan.appendTo( \"#qunit-fixture\" ).detach().show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( span.css( \"display\" ), \"none\",\n\t\t\"A shown-while-detached cascade-hidden span is hidden after attachment\" );\n\tspan.remove();\n\n\tdiv = jQuery( document.createElement( \"div\" ) );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.ok( !div[ 0 ].style.display, \"A shown-while-detached div has no inline style\" );\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A shown-while-detached div has default display after attachment\" );\n\tdiv.remove();\n\n\tdiv = jQuery( \"<div style='display: none'>\" );\n\tdiv.show();\n\tassert.equal( div[ 0 ].style.display, \"\",\n\t\t\"show() updates inline style of a detached inline-hidden div\" );\n\tdiv.appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A shown-while-detached inline-hidden div has default display after attachment\" );\n\n\tdiv = jQuery( \"<div><div style='display: none'></div></div>\" ).children( \"div\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"block\",\n\t\t\"A shown-while-detached inline-hidden div inside a visible div has default display \" +\n\t\t\"after attachment\" );\n\n\tspan = jQuery( \"<span style='display: none'></span>\" );\n\tspan.show();\n\tassert.equal( span[ 0 ].style.display, \"\",\n\t\t\"show() updates inline style of a detached inline-hidden span\" );\n\tspan.appendTo( \"#qunit-fixture\" );\n\tassert.equal( span.css( \"display\" ), \"inline\",\n\t\t\"A shown-while-detached inline-hidden span has default display after attachment\" );\n\n\tdiv = jQuery( \"<div style='display: inline'></div>\" );\n\tdiv.show().appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"inline\",\n\t\t\"show() does not update inline style of a detached inline-visible div\" );\n\tdiv.remove();\n\n\ttr = jQuery( \"<tr></tr>\" );\n\tjQuery( \"#table\" ).append( tr );\n\ttr.detach().hide().show();\n\n\tassert.ok( !tr[ 0 ].style.display, \"Not-hidden detached tr elements have no inline style\" );\n\ttr.remove();\n\n\tspan = jQuery( \"<span></span>\" ).hide().show();\n\tassert.ok( !span[ 0 ].style.display, \"Not-hidden detached span elements have no inline style\" );\n\tspan.remove();\n} );\n\nQUnit[\n\tdocument.body.attachShadow && document.body.getRootNode ?\n\t\t\"test\" :\n\t\t\"skip\"\n\t]( \"show/hide shadow child nodes\", function( assert ) {\n\tassert.expect( 28 );\n\tjQuery( \"<div id='shadowHost'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tvar shadowHost = document.querySelector( \"#shadowHost\" );\n\tvar shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );\n\tshadowRoot.innerHTML = \"\" +\n\t\t\"<style>.hidden{display: none;}</style>\" +\n\t\t\"<div class='hidden' id='shadowdiv'>\" +\n\t\t\"\t<p class='hidden' id='shadowp'>\" +\n\t\t\"\t\t<a href='#' class='hidden' id='shadowa'></a>\" +\n\t\t\"\t</p>\" +\n\t\t\"\t<code class='hidden' id='shadowcode'></code>\" +\n\t\t\"\t<pre class='hidden' id='shadowpre'></pre>\" +\n\t\t\"\t<span class='hidden' id='shadowspan'></span>\" +\n\t\t\"</div>\" +\n\t\t\"<table class='hidden' id='shadowtable'>\" +\n\t\t\"\t<thead class='hidden' id='shadowthead'>\" +\n\t\t\"\t\t<tr class='hidden' id='shadowtr'>\" +\n\t\t\"\t\t\t<th class='hidden' id='shadowth'></th>\" +\n\t\t\"\t\t</tr>\" +\n\t\t\"\t</thead>\" +\n\t\t\"\t<tbody class='hidden' id='shadowtbody'>\" +\n\t\t\"\t\t<tr class='hidden'>\" +\n\t\t\"\t\t\t<td class='hidden' id='shadowtd'></td>\" +\n\t\t\"\t\t</tr>\" +\n\t\t\"\t</tbody>\" +\n\t\t\"</table>\" +\n\t\t\"<ul class='hidden' id='shadowul'>\" +\n\t\t\"\t<li class='hidden' id='shadowli'></li>\" +\n\t\t\"</ul>\";\n\n\tvar test = {\n\t\t\"div\": \"block\",\n\t\t\"p\": \"block\",\n\t\t\"a\": \"inline\",\n\t\t\"code\": \"inline\",\n\t\t\"pre\": \"block\",\n\t\t\"span\": \"inline\",\n\t\t\"table\": \"table\",\n\t\t\"thead\": \"table-header-group\",\n\t\t\"tbody\": \"table-row-group\",\n\t\t\"tr\": \"table-row\",\n\t\t\"th\": \"table-cell\",\n\t\t\"td\": \"table-cell\",\n\t\t\"ul\": \"block\",\n\t\t\"li\": \"list-item\"\n\t};\n\n\tjQuery.each( test, function( selector, expected ) {\n\t\tvar shadowChild = shadowRoot.querySelector( \"#shadow\" + selector );\n\t\tvar $shadowChild = jQuery( shadowChild );\n\t\tassert.strictEqual( $shadowChild.css( \"display\" ), \"none\", \"is hidden\" );\n\t\t$shadowChild.show();\n\t\tassert.strictEqual( $shadowChild.css( \"display\" ), expected, \"Show using correct display type for \" + selector );\n\t} );\n} );\n\nQUnit.test( \"hide hidden elements (bug #7141)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar div = jQuery( \"<div style='display:none'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\", \"Element is hidden by default\" );\n\tdiv.hide();\n\tassert.ok( !jQuery._data( div, \"olddisplay\" ), \"olddisplay is undefined after hiding an already-hidden element\" );\n\tdiv.show();\n\tassert.equal( div.css( \"display\" ), \"block\", \"Show a double-hidden element\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"show() after hide() should always set display to initial value (#14750)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div></div>\" ),\n\t\tfixture = jQuery( \"#qunit-fixture\" );\n\n\tfixture.append( div );\n\n\tdiv.css( \"display\", \"inline\" ).hide().show().css( \"display\", \"list-item\" ).hide().show();\n\tassert.equal( div.css( \"display\" ), \"list-item\", \"should get last set display value\" );\n} );\n\nQUnit.test( \"show/hide 3.0, default display\", function( assert ) {\n\n\tassert.expect( 36 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<div data-expected-display='block'></div>\" +\n\t\t\t\t\"<span data-expected-display='inline'></span>\" +\n\t\t\t\t\"<ul><li data-expected-display='list-item'></li></ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, default body display\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar hideBody = supportjQuery( \"<style>body{display:none}</style>\" ).appendTo( document.head ),\n\t\tbody = jQuery( document.body );\n\n\tassert.equal( body.css( \"display\" ), \"none\", \"Correct initial display\" );\n\n\tbody.show();\n\n\tassert.equal( body.css( \"display\" ), \"block\", \"Correct display after .show()\" );\n\n\thideBody.remove();\n} );\n\nQUnit.test( \"show/hide 3.0, cascade display\", function( assert ) {\n\n\tassert.expect( 36 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<span class='block'></span><div class='inline'></div><div class='list-item'></div>\" )\n\t\t\t.children();\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), this.className,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, inline display\", function( assert ) {\n\n\tassert.expect( 96 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<span data-expected-display='block' style='display:block'></span>\" +\n\t\t\t\t\"<span class='list-item' data-expected-display='block' style='display:block'></span>\" +\n\t\t\t\t\"<div data-expected-display='inline' style='display:inline'></div>\" +\n\t\t\t\t\"<div class='list-item' data-expected-display='inline' style='display:inline'></div>\" +\n\t\t\t\t\"<ul>\" +\n\t\t\t\t\t\"<li data-expected-display='block' style='display:block'></li>\" +\n\t\t\t\t\t\"<li class='inline' data-expected-display='block' style='display:block'></li>\" +\n\t\t\t\t\t\"<li data-expected-display='inline' style='display:inline'></li>\" +\n\t\t\t\t\t\"<li class='block' data-expected-display='inline' style='display:inline'></li>\" +\n\t\t\t\t\"</ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, expected, name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, cascade hidden\", function( assert ) {\n\n\tassert.expect( 72 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<div class='hidden' data-expected-display='block'></div>\" +\n\t\t\t\t\"<div class='hidden' data-expected-display='block' style='display:none'></div>\" +\n\t\t\t\t\"<span class='hidden' data-expected-display='inline'></span>\" +\n\t\t\t\t\"<span class='hidden' data-expected-display='inline' style='display:none'></span>\" +\n\t\t\t\t\"<ul>\" +\n\t\t\t\t\t\"<li class='hidden' data-expected-display='list-item'></li>\" +\n\t\t\t\t\t\"<li class='hidden' data-expected-display='list-item' style='display:none'></li>\" +\n\t\t\t\t\"</ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, expected, name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"show/hide 3.0, inline hidden\", function( assert ) {\n\n\tassert.expect( 84 );\n\n\tvar i,\n\t\t$elems = jQuery( \"<div></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" )\n\t\t\t.html( \"<span data-expected-display='inline' style='display:none'></span>\" +\n\t\t\t\t\"<span class='list-item' data-expected-display='list-item' style='display:none'></span>\" +\n\t\t\t\t\"<div data-expected-display='block' style='display:none'></div>\" +\n\t\t\t\t\"<div class='list-item' data-expected-display='list-item' style='display:none'></div>\" +\n\t\t\t\t\"<ul>\" +\n\t\t\t\t\t\"<li data-expected-display='list-item' style='display:none'></li>\" +\n\t\t\t\t\t\"<li class='block' data-expected-display='block' style='display:none'></li>\" +\n\t\t\t\t\t\"<li class='inline' data-expected-display='inline' style='display:none'></li>\" +\n\t\t\t\t\"</ul>\" )\n\t\t\t.find( \"[data-expected-display]\" );\n\n\t$elems.each( function() {\n\t\tvar $elem = jQuery( this ),\n\t\t\tname = this.nodeName,\n\t\t\texpected = this.getAttribute( \"data-expected-display\" ),\n\t\t\tsequence = [];\n\n\t\tif ( this.className ) {\n\t\t\tname += \".\" + this.className;\n\t\t}\n\t\tif ( this.getAttribute( \"style\" ) ) {\n\t\t\tname += \"[style='\" + this.getAttribute( \"style\" ) + \"']\";\n\t\t}\n\t\tname += \" \";\n\n\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\tsequence.push( \".hide()\" );\n\t\t\t$elem.hide();\n\t\t\tassert.equal( $elem.css( \"display\" ), \"none\",\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"none\", name + sequence.join( \"\" ) + \" inline\" );\n\n\t\t\tsequence.push( \".show()\" );\n\t\t\t$elem.show();\n\t\t\tassert.equal( $elem.css( \"display\" ), expected,\n\t\t\t\tname + sequence.join( \"\" ) + \" computed\" );\n\t\t\tassert.equal( this.style.display, \"\", name + sequence.join( \"\" ) + \" inline\" );\n\t\t}\n\t} );\n} );\n\n}\n\nQUnit[ jQuery.find.compile && jQuery.fn.toggle ? \"test\" : \"skip\" ]( \"toggle()\", function( assert ) {\n\tassert.expect( 9 );\n\tvar div, oldHide,\n\t\tx = jQuery( \"#foo\" );\n\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle();\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle();\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle( false );\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n\n\tdiv = jQuery( \"<div style='display:none'><div></div></div>\" ).appendTo( \"#qunit-fixture\" );\n\tx = div.find( \"div\" );\n\tassert.strictEqual( x.toggle().css( \"display\" ), \"none\", \"is hidden\" );\n\tassert.strictEqual( x.toggle().css( \"display\" ), \"block\", \"is visible\" );\n\n\t// Ensure hide() is called when toggled (#12148)\n\toldHide = jQuery.fn.hide;\n\tjQuery.fn.hide = function() {\n\t\tassert.ok( true, name + \" method called on toggle\" );\n\t\treturn oldHide.apply( this, arguments );\n\t};\n\tx.toggle( name === \"show\" );\n\tjQuery.fn.hide = oldHide;\n} );\n\nQUnit[ jQuery.find.compile && jQuery.fn.toggle ? \"test\" : \"skip\" ]( \"detached toggle()\", function( assert ) {\n\tassert.expect( 6 );\n\tvar detached = jQuery( \"<p><a></a><p>\" ).find( \"*\" ).addBack(),\n\t\thiddenDetached = jQuery( \"<p><a></a></p>\" ).find( \"*\" ).addBack().css( \"display\", \"none\" ),\n\t\tcascadeHiddenDetached = jQuery( \"<p><a></a></p>\" ).find( \"*\" ).addBack().addClass( \"hidden\" );\n\n\tdetached.toggle();\n\tdetached.appendTo( \"#qunit-fixture\" );\n\tassert.equal( detached[ 0 ].style.display, \"none\", \"detached element\" );\n\tassert.equal( detached[ 1 ].style.display, \"none\", \"element in detached tree\" );\n\n\thiddenDetached.toggle();\n\thiddenDetached.appendTo( \"#qunit-fixture\" );\n\tassert.equal( hiddenDetached[ 0 ].style.display, \"\", \"detached, hidden element\" );\n\tassert.equal( hiddenDetached[ 1 ].style.display, \"\", \"hidden element in detached tree\" );\n\n\tcascadeHiddenDetached.toggle();\n\tcascadeHiddenDetached.appendTo( \"#qunit-fixture\" );\n\tassert.equal( cascadeHiddenDetached[ 0 ].style.display, \"none\",\n\t\t\"detached, cascade-hidden element\" );\n\tassert.equal( cascadeHiddenDetached[ 1 ].style.display, \"none\",\n\t\t\"cascade-hidden element in detached tree\" );\n} );\n\nQUnit[ jQuery.find.compile && jQuery.fn.toggle &&\n\tdocument.body.attachShadow && document.body.getRootNode ?\n\t\t\"test\" :\n\t\t\"skip\"\n]( \"shadow toggle()\", function( assert ) {\n\tassert.expect( 4 );\n\tjQuery( \"<div id='shadowHost'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tvar shadowHost = document.querySelector( \"#shadowHost\" );\n\tvar shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );\n\tshadowRoot.innerHTML = \"\" +\n\t\t\"<style>.hidden{display: none;}</style>\" +\n\t\t\"<div id='shadowHiddenChild' class='hidden'></div>\" +\n\t\t\"<div id='shadowChild'></div>\";\n\tvar shadowChild = shadowRoot.querySelector( \"#shadowChild\" );\n\tvar shadowHiddenChild = shadowRoot.querySelector( \"#shadowHiddenChild\" );\n\n\tvar $shadowChild = jQuery( shadowChild );\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"block\", \"is visible\" );\n\t$shadowChild.toggle();\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"none\", \"is hidden\" );\n\n\t$shadowChild = jQuery( shadowHiddenChild );\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"none\", \"is hidden\" );\n\t$shadowChild.toggle();\n\tassert.strictEqual( $shadowChild.css( \"display\" ), \"block\", \"is visible\" );\n} );\n\nQUnit.test( \"jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $checkedtest = jQuery( \"#checkedtest\" );\n\tjQuery.css( $checkedtest[ 0 ], \"height\" );\n\n\tassert.ok( jQuery( \"input[type='radio']\", $checkedtest ).first().attr( \"checked\" ), \"Check first radio still checked.\" );\n\tassert.ok( !jQuery( \"input[type='radio']\", $checkedtest ).last().attr( \"checked\" ), \"Check last radio still NOT checked.\" );\n\tassert.ok( jQuery( \"input[type='checkbox']\", $checkedtest ).first().attr( \"checked\" ), \"Check first checkbox still checked.\" );\n\tassert.ok( !jQuery( \"input[type='checkbox']\", $checkedtest ).last().attr( \"checked\" ), \"Check last checkbox still NOT checked.\" );\n} );\n\nQUnit.test( \"internal ref to elem.runtimeStyle (bug #7608)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar result = true;\n\n\ttry {\n\t\tjQuery( \"#foo\" ).css( { \"width\": \"0%\" } ).css( \"width\" );\n\t} catch ( e ) {\n\t\tresult = false;\n\t}\n\n\tassert.ok( result, \"elem.runtimeStyle does not throw exception\" );\n} );\n\nQUnit.test( \"computed margins (trac-3333; gh-2237)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"#foo\" ),\n\t\t$child = jQuery( \"#en\" );\n\n\t$div.css( {\n\t\t\"width\": \"1px\",\n\t\t\"marginRight\": 0\n\t} );\n\tassert.equal( $div.css( \"marginRight\" ), \"0px\",\n\t\t\"marginRight correctly calculated with a width and display block\" );\n\n\t$div.css( {\n\t\tposition: \"absolute\",\n\t\ttop: 0,\n\t\tleft: 0,\n\t\twidth: \"100px\"\n\t} );\n\t$child.css( {\n\t\twidth: \"50px\",\n\t\tmargin: \"auto\"\n\t} );\n\tassert.equal( $child.css( \"marginLeft\" ), \"25px\", \"auto margins are computed to pixels\" );\n} );\n\nQUnit.test( \"box model properties incorrectly returning % instead of px, see #10639 and #12088\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar container = jQuery( \"<div></div>\" ).width( 400 ).appendTo( \"#qunit-fixture\" ),\n\t\tel = jQuery( \"<div></div>\" ).css( { \"width\": \"50%\", \"marginRight\": \"50%\" } ).appendTo( container ),\n\t\tel2 = jQuery( \"<div></div>\" ).css( { \"width\": \"50%\", \"minWidth\": \"300px\", \"marginLeft\": \"25%\" } ).appendTo( container );\n\n\tassert.equal( el.css( \"marginRight\" ), \"200px\", \"css('marginRight') returning % instead of px, see #10639\" );\n\tassert.equal( el2.css( \"marginLeft\" ), \"100px\", \"css('marginLeft') returning incorrect pixel value, see #12088\" );\n} );\n\nQUnit.test( \"jQuery.cssProps behavior, (bug #8402)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div>\" ).appendTo( document.body ).css( {\n\t\t\"position\": \"absolute\",\n\t\t\"top\": 0,\n\t\t\"left\": 10\n\t} );\n\tjQuery.cssProps.top = \"left\";\n\tassert.equal( div.css( \"top\" ), \"10px\", \"the fixed property is used when accessing the computed style\" );\n\tdiv.css( \"top\", \"100px\" );\n\tassert.equal( div[ 0 ].style.left, \"100px\", \"the fixed property is used when setting the style\" );\n\n\t// cleanup jQuery.cssProps\n\tjQuery.cssProps.top = undefined;\n} );\n\nQUnit.test( \"widows & orphans #8936\", function( assert ) {\n\n\tvar $p = jQuery( \"<p>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.expect( 2 );\n\n\t$p.css( {\n\t\t\"widows\": 3,\n\t\t\"orphans\": 3\n\t} );\n\n\tassert.equal( $p.css( \"widows\" ) || jQuery.style( $p[ 0 ], \"widows\" ), 3, \"widows correctly set to 3\" );\n\tassert.equal( $p.css( \"orphans\" ) || jQuery.style( $p[ 0 ], \"orphans\" ), 3, \"orphans correctly set to 3\" );\n\n\t$p.remove();\n} );\n\nQUnit.test( \"can't get css for disconnected in IE<9, see #10254 and #8388\", function( assert ) {\n\tassert.expect( 2 );\n\tvar span, div;\n\n\tspan = jQuery( \"<span></span>\" ).css( \"background-image\", \"url(\" + baseURL + \"1x1.jpg)\" );\n\tassert.notEqual( span.css( \"background-image\" ), null, \"can't get background-image in IE<9, see #10254\" );\n\n\tdiv = jQuery( \"<div></div>\" ).css( \"top\", 10 );\n\tassert.equal( div.css( \"top\" ), \"10px\", \"can't get top in IE<9, see #8388\" );\n} );\n\nQUnit.test( \"Ensure styles are retrieving from parsed html on document fragments\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $span = jQuery(\n\t\tjQuery.parseHTML( \"<span style=\\\"font-family: Cuprum,sans-serif; font-size: 14px; color: #999999;\\\">some text</span>\" )\n\t);\n\n\tassert.equal( $span.css( \"font-size\" ), \"14px\", \"Font-size retrievable on parsed HTML node\" );\n} );\n\nQUnit.test( \"can't get background-position in IE<9, see #10796\", function( assert ) {\n\tvar div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tunits = [\n\t\t\t\"0 0\",\n\t\t\t\"12px 12px\",\n\t\t\t\"13px 12em\",\n\t\t\t\"12em 13px\",\n\t\t\t\"12em center\",\n\t\t\t\"+12em center\",\n\t\t\t\"12.2em center\",\n\t\t\t\"center center\"\n\t\t],\n\t\tl = units.length,\n\t\ti = 0;\n\n\tassert.expect( l );\n\n\tfor ( ; i < l; i++ ) {\n\t\tdiv.css( \"background-position\", units [ i ] );\n\t\tassert.ok( div.css( \"background-position\" ), \"can't get background-position in IE<9, see #10796\" );\n\t}\n} );\n\nif ( jQuery.fn.offset ) {\n\tQUnit.test( \"percentage properties for left and top should be transformed to pixels, see #9505\", function( assert ) {\n\t\tassert.expect( 2 );\n\t\tvar parent = jQuery( \"<div style='position:relative;width:200px;height:200px;margin:0;padding:0;border-width:0'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t\tdiv = jQuery( \"<div style='position: absolute; width: 20px; height: 20px; top:50%; left:50%'></div>\" ).appendTo( parent );\n\n\t\tassert.equal( div.css( \"top\" ), \"100px\", \"position properties not transformed to pixels, see #9505\" );\n\t\tassert.equal( div.css( \"left\" ), \"100px\", \"position properties not transformed to pixels, see #9505\" );\n\t} );\n}\n\nQUnit.test( \"Do not append px (#9548, #12990, #2792)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$div.css( \"fill-opacity\", 1 );\n\n\tassert.equal( $div.css( \"fill-opacity\" ), 1, \"Do not append px to 'fill-opacity'\" );\n\n\t$div.css( \"column-count\", 1 );\n\tif ( $div.css( \"column-count\" ) !== undefined ) {\n\t\tassert.equal( $div.css( \"column-count\" ), 1, \"Do not append px to 'column-count'\" );\n\t} else {\n\t\tassert.ok( true, \"No support for column-count CSS property\" );\n\t}\n\n\t$div.css( \"animation-iteration-count\", 2 );\n\tif ( $div.css( \"animation-iteration-count\" ) !== undefined ) {\n\t\t// if $div.css( \"animation-iteration-count\" ) return \"1\",\n\t\t// it actually return the default value of animation-iteration-count\n\t\tassert.equal( $div.css( \"animation-iteration-count\" ), 2, \"Do not append px to 'animation-iteration-count'\" );\n\t} else {\n\t\tassert.ok( true, \"No support for animation-iteration-count CSS property\" );\n\t}\n} );\n\n\nQUnit[\n\tjQuery( \"<div/>\" )[ 0 ].style.gridArea === \"\" ?\n\t\"test\" :\n\t\"skip\"\n]( \"Do not append px to CSS Grid-related properties (gh-4007)\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar prop, value, subProp, subValue, $div,\n\t\tgridProps = {\n\t\t\t\"grid-area\": {\n\t\t\t\t\"grid-row-start\": \"2\",\n\t\t\t\t\"grid-row-end\": \"auto\",\n\t\t\t\t\"grid-column-start\": \"auto\",\n\t\t\t\t\"grid-column-end\": \"auto\"\n\t\t\t},\n\t\t\t\"grid-column\": {\n\t\t\t\t\"grid-column-start\": \"2\",\n\t\t\t\t\"grid-column-end\": \"auto\"\n\t\t\t},\n\t\t\t\"grid-column-end\": true,\n\t\t\t\"grid-column-start\": true,\n\t\t\t\"grid-row\": {\n\t\t\t\t\"grid-row-start\": \"2\",\n\t\t\t\t\"grid-row-end\": \"auto\"\n\t\t\t},\n\t\t\t\"grid-row-end\": true,\n\t\t\t\"grid-row-start\": true\n\t\t};\n\n\tfor ( prop in gridProps ) {\n\t\t$div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\t\t$div.css( prop, 2 );\n\n\t\tvalue = gridProps[ prop ];\n\n\t\tif ( typeof value === \"object\" ) {\n\t\t\tfor ( subProp in value ) {\n\t\t\t\tsubValue = value[ subProp ];\n\t\t\t\tassert.equal( $div.css( subProp ), subValue,\n\t\t\t\t\t\"Do not append px to '\" + prop + \"' (retrieved \" + subProp + \")\" );\n\t\t\t}\n\t\t} else {\n\t\t\tassert.equal( $div.css( prop ), \"2\", \"Do not append px to '\" + prop + \"'\" );\n\t\t}\n\n\t\t$div.remove();\n\t}\n} );\n\nQUnit.test( \"css('width') and css('height') should respect box-sizing, see #11004\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar el_dis = jQuery( \"<div style='width:300px;height:300px;margin:2px;padding:2px;box-sizing:border-box;'>test</div>\" ),\n\t\tel = el_dis.clone().appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( el.css( \"width\" ), el.css( \"width\", el.css( \"width\" ) ).css( \"width\" ), \"css('width') is not respecting box-sizing, see #11004\" );\n\tassert.equal( el_dis.css( \"width\" ), el_dis.css( \"width\", el_dis.css( \"width\" ) ).css( \"width\" ), \"css('width') is not respecting box-sizing for disconnected element, see #11004\" );\n\tassert.equal( el.css( \"height\" ), el.css( \"height\", el.css( \"height\" ) ).css( \"height\" ), \"css('height') is not respecting box-sizing, see #11004\" );\n\tassert.equal( el_dis.css( \"height\" ), el_dis.css( \"height\", el_dis.css( \"height\" ) ).css( \"height\" ), \"css('height') is not respecting box-sizing for disconnected element, see #11004\" );\n} );\n\nQUnit.test( \"table rows width/height should be unaffected by inline styles\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar table = jQuery(\n\t\t\"<table>\\n\" +\n\t\t\"  <tr id=\\\"row\\\" style=\\\"height: 1px; width: 1px;\\\">\\n\" +\n\t\t\"    <td>\\n\" +\n\t\t\"      <div style=\\\"height: 100px; width: 100px;\\\"></div>\\n\" +\n\t\t\"    </div>\\n\" +\n\t\t\"  </tr>\\n\" +\n\t\t\"</table>\"\n\t);\n\tvar tr = table.find( \"tr\" );\n\n\ttable.appendTo( \"#qunit-fixture\" );\n\n\tassert.ok( parseInt( tr.css( \"width\" ) ) > 10, \"tr width unaffected by inline style\" );\n\tassert.ok( parseInt( tr.css( \"height\" ) ) > 10, \"tr height unaffected by inline style\" );\n} );\n\ntestIframe(\n\t\"css('width') should work correctly before document ready (#14084)\",\n\t\"css/cssWidthBeforeDocReady.html\",\n\tfunction( assert, jQuery, window, document, cssWidthBeforeDocReady ) {\n\t\tassert.expect( 1 );\n\t\tassert.strictEqual( cssWidthBeforeDocReady, \"100px\", \"elem.css('width') works correctly before document ready\" );\n\t}\n);\n\ntestIframe(\n\t\"css('width') should work correctly with browser zooming\",\n\t\"css/cssWidthBrowserZoom.html\",\n\tfunction( assert, jQuery, window, document, widthBeforeSet, widthAfterSet ) {\n\t\tassert.expect( 2 );\n\t\tassert.strictEqual( widthBeforeSet, \"100px\", \"elem.css('width') works correctly with browser zoom\" );\n\t\tassert.strictEqual( widthAfterSet, \"100px\", \"elem.css('width', val) works correctly with browser zoom\" );\n\t}\n);\n\n( function() {\n\tvar supportsFractionalGBCR,\n\t\tqunitFixture = document.getElementById( \"qunit-fixture\" ),\n\t\tdiv = document.createElement( \"div\" );\n\tdiv.style.width = \"3.3px\";\n\tqunitFixture.appendChild( div );\n\tsupportsFractionalGBCR = div.getBoundingClientRect().width.toFixed( 1 ) === \"3.3\";\n\tqunitFixture.removeChild( div );\n\n\tQUnit.test( \"css('width') and css('height') should return fractional values for nodes in the document\", function( assert ) {\n\t\tif ( !supportsFractionalGBCR ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"This browser doesn't support fractional values in getBoundingClientRect()\" );\n\t\t\treturn;\n\t\t}\n\n\t\tassert.expect( 2 );\n\n\t\tvar el = jQuery( \"<div class='test-div'></div>\" ).appendTo( \"#qunit-fixture\" );\n\t\tjQuery( \"<style>.test-div { width: 33.3px; height: 88.8px; }</style>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\tassert.equal( Number( el.css( \"width\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"33.3\",\n\t\t\t\"css('width') should return fractional values\" );\n\t\tassert.equal( Number( el.css( \"height\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"88.8\",\n\t\t\t\"css('height') should return fractional values\" );\n\t} );\n\n\tQUnit.test( \"css('width') and css('height') should return fractional values for disconnected nodes\", function( assert ) {\n\t\tif ( !supportsFractionalGBCR ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"This browser doesn't support fractional values in getBoundingClientRect()\" );\n\t\t\treturn;\n\t\t}\n\n\t\tassert.expect( 2 );\n\n\t\tvar el = jQuery( \"<div style='width: 33.3px; height: 88.8px;'></div>\" );\n\n\t\tassert.equal( Number( el.css( \"width\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"33.3\",\n\t\t\t\"css('width') should return fractional values\" );\n\t\tassert.equal( Number( el.css( \"height\" ).replace( /px$/, \"\" ) ).toFixed( 1 ), \"88.8\",\n\t\t\t\"css('height') should return fractional values\" );\n\t} );\n} )();\n\nQUnit.test( \"certain css values of 'normal' should be convertable to a number, see #8627\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar el = jQuery( \"<div style='letter-spacing:normal;font-weight:normal;'>test</div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.ok( !isNaN( parseFloat( el.css( \"letterSpacing\" ) ) ), \"css('letterSpacing') not convertable to number, see #8627\" );\n\tassert.ok( !isNaN( parseFloat( el.css( \"fontWeight\" ) ) ), \"css('fontWeight') not convertable to number, see #8627\" );\n\tassert.equal( typeof el.css( \"fontWeight\" ), \"string\", \".css() returns a string\" );\n} );\n\n// Support: IE 9 only\n// Only run this test in IE9\nif ( document.documentMode === 9 ) {\n\tQUnit.test( \".css('filter') returns a string in IE9, see #12537\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tassert.equal( jQuery( \"<div style='-ms-filter:\\\"progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#ECECEC)\\\";'></div>\" ).css( \"filter\" ), \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#ECECEC)\", \"IE9 returns the correct value from css('filter').\" );\n\t} );\n}\n\nQUnit.test( \"cssHooks - expand\", function( assert ) {\n\tassert.expect( 15 );\n\tvar result,\n\t\tproperties = {\n\t\t\tmargin: [ \"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\" ],\n\t\t\tborderWidth: [ \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\" ],\n\t\t\tpadding: [ \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\" ]\n\t\t};\n\n\tjQuery.each( properties, function( property, keys ) {\n\t\tvar hook = jQuery.cssHooks[ property ],\n\t\t\texpected = {};\n\t\tjQuery.each( keys, function( _, key ) {\n\t\t\texpected[ key ] = 10;\n\t\t} );\n\t\tresult = hook.expand( 10 );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with a number\" );\n\n\t\tjQuery.each( keys, function( _, key ) {\n\t\t\texpected[ key ] = \"10px\";\n\t\t} );\n\t\tresult = hook.expand( \"10px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px'\" );\n\n\t\texpected[ keys[ 1 ] ] = expected[ keys[ 3 ] ] = \"20px\";\n\t\tresult = hook.expand( \"10px 20px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px 20px'\" );\n\n\t\texpected[ keys[ 2 ] ] = \"30px\";\n\t\tresult = hook.expand( \"10px 20px 30px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px 20px 30px'\" );\n\n\t\texpected[ keys[ 3 ] ] = \"40px\";\n\t\tresult = hook.expand( \"10px 20px 30px 40px\" );\n\t\tassert.deepEqual( result, expected, property + \" expands properly with '10px 20px 30px 40px'\" );\n\n\t} );\n\n} );\n\nQUnit.test( \"css opacity consistency across browsers (#12685)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar el,\n\t\tfixture = jQuery( \"#qunit-fixture\" );\n\n\t// Append style element\n\tjQuery( \"<style>.opacity_t12685 { opacity: 0.1; }</style>\" ).appendTo( fixture );\n\n\tel = jQuery( \"<div class='opacity_t12685'></div>\" ).appendTo( fixture );\n\n\tassert.equal( Math.round( el.css( \"opacity\" ) * 100 ), 10, \"opacity from style sheet\" );\n\tel.css( \"opacity\", 0.3 );\n\tassert.equal( Math.round( el.css( \"opacity\" ) * 100 ), 30, \"override opacity\" );\n\tel.css( \"opacity\", \"\" );\n\tassert.equal( Math.round( el.css( \"opacity\" ) * 100 ), 10, \"remove opacity override\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \":visible/:hidden selectors\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar $div, $table, $a;\n\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modifying CSS display: Assert element is visible\" );\n\tjQuery( \"#nothiddendiv\" ).css( { display: \"none\" } );\n\tassert.ok( !jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is hidden\" );\n\tjQuery( \"#nothiddendiv\" ).css( { \"display\": \"block\" } );\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is visible\" );\n\tassert.ok( !jQuery( window ).is( \":visible\" ), \"Calling is(':visible') on window does not throw an exception (#10267).\" );\n\tassert.ok( !jQuery( document ).is( \":visible\" ), \"Calling is(':visible') on document does not throw an exception (#10267).\" );\n\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modifying CSS display: Assert element is visible\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"display\", \"none\" );\n\tassert.ok( !jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is hidden\" );\n\tjQuery( \"#nothiddendiv\" ).css( \"display\", \"block\" );\n\tassert.ok( jQuery( \"#nothiddendiv\" ).is( \":visible\" ), \"Modified CSS display: Assert element is visible\" );\n\n\tassert.ok( jQuery( \"#siblingspan\" ).is( \":visible\" ), \"Span with no content is visible\" );\n\t$div = jQuery( \"<div><span></span></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( $div.find( \":visible\" ).length, 1, \"Span with no content is visible\" );\n\t$div.css( { width: 0, height: 0, overflow: \"hidden\" } );\n\tassert.ok( $div.is( \":visible\" ), \"Div with width and height of 0 is still visible (gh-2227)\" );\n\n\t// Safari 6-7 and iOS 6-7 report 0 width for br elements\n\t// When newer browsers propagate, re-enable this test\n\t// $br = jQuery( \"<br/>\" ).appendTo( \"#qunit-fixture\" );\n\t// assert.ok( $br.is( \":visible\" ), \"br element is visible\" );\n\n\t$table = jQuery( \"#table\" );\n\t$table.html( \"<tr><td style='display:none'>cell</td><td>cell</td></tr>\" );\n\tassert.equal( jQuery( \"#table td:visible\" ).length, 1, \"hidden cell is not perceived as visible (#4512). Works on table elements\" );\n\t$table.css( \"display\", \"none\" ).html( \"<tr><td>cell</td><td>cell</td></tr>\" );\n\tassert.equal( jQuery( \"#table td:visible\" ).length, 0, \"hidden cell children not perceived as visible (#4512)\" );\n\n\tassert.t( \"Is Visible\", \"#qunit-fixture div:visible:lt(2)\", [ \"foo\", \"nothiddendiv\" ] );\n\tassert.t( \"Is Not Hidden\", \"#qunit-fixture:hidden\", [] );\n\tassert.t( \"Is Hidden\", \"#form input:hidden\", [ \"hidden1\", \"hidden2\" ] );\n\n\t$a = jQuery( \"<a href='#'><h1>Header</h1></a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.ok( $a.is( \":visible\" ), \"Anchor tag with flow content is visible (gh-2227)\" );\n} );\n\nQUnit.test( \"Keep the last style if the new one isn't recognized by the browser (#14836)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar el = jQuery( \"<div></div>\" ).css( \"position\", \"absolute\" ).css( \"position\", \"fake value\" );\n\tassert.equal( el.css( \"position\" ), \"absolute\", \"The old style is kept when setting an unrecognized value\" );\n} );\n\n// Support: Edge 14 - 16 only\n// Edge collapses whitespace-only values when setting a style property and\n// there is no easy way for us to work around it. Just skip the test there\n// and hope for the better future.\nQUnit[ /\\bedge\\/16\\./i.test( navigator.userAgent ) ? \"skip\" : \"test\" ](\n\t\"Keep the last style if the new one is a non-empty whitespace (gh-3204)\",\n\tfunction( assert ) {\n\tassert.expect( 1 );\n\n\tvar el = jQuery( \"<div></div>\" ).css( \"position\", \"absolute\" ).css( \"position\", \" \" );\n\tassert.equal( el.css( \"position\" ), \"absolute\", \"The old style is kept when setting to a space\" );\n} );\n\nQUnit.test( \"Reset the style if set to an empty string\", function( assert ) {\n\tassert.expect( 1 );\n\tvar el = jQuery( \"<div></div>\" ).css( \"position\", \"absolute\" ).css( \"position\", \"\" );\n\n\t// Some browsers return an empty string; others \"static\". Both those cases mean the style\n\t// was reset successfully so accept them both.\n\tassert.equal( el.css( \"position\" ) || \"static\", \"static\",\n\t\t\"The style can be reset by setting to an empty string\" );\n} );\n\nQUnit.test(\n\t\"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)\",\n\tfunction( assert ) {\n\t\tassert.expect( 24 );\n\t\tvar done = assert.async();\n\t\tvar styles = [ {\n\t\t\t\tname: \"backgroundAttachment\",\n\t\t\t\tvalue: [ \"fixed\" ],\n\t\t\t\texpected: [ \"scroll\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundColor\",\n\t\t\t\tvalue: [ \"rgb(255, 0, 0)\", \"rgb(255,0,0)\", \"#ff0000\" ],\n\t\t\t\texpected: [ \"transparent\" ]\n\t\t\t}, {\n\n\t\t\t\t// Firefox returns auto's value\n\t\t\t\tname: \"backgroundImage\",\n\t\t\t\tvalue: [ \"url('test.png')\", \"url(\" + baseURL + \"test.png)\", \"url(\\\"\" + baseURL + \"test.png\\\")\" ],\n\t\t\t\texpected: [ \"none\", \"url(\\\"http://static.jquery.com/files/rocker/images/logo_jquery_215x53.gif\\\")\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundPosition\",\n\t\t\t\tvalue: [ \"5% 5%\" ],\n\t\t\t\texpected: [ \"0% 0%\", \"-1000px 0px\", \"-1000px 0%\" ]\n\t\t\t}, {\n\n\t\t\t\t// Firefox returns no-repeat\n\t\t\t\tname: \"backgroundRepeat\",\n\t\t\t\tvalue: [ \"repeat-y\" ],\n\t\t\t\texpected: [ \"repeat\", \"no-repeat\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundClip\",\n\t\t\t\tvalue: [ \"padding-box\" ],\n\t\t\t\texpected: [ \"border-box\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundOrigin\",\n\t\t\t\tvalue: [ \"content-box\" ],\n\t\t\t\texpected: [ \"padding-box\" ]\n\t\t\t}, {\n\t\t\t\tname: \"backgroundSize\",\n\t\t\t\tvalue: [ \"80px 60px\" ],\n\t\t\t\texpected: [ \"auto auto\" ]\n\t\t} ];\n\n\t\tjQuery.each( styles, function( index, style ) {\n\t\t\tvar $clone, $clonedChildren,\n\t\t\t\t$source = jQuery( \"#firstp\" ),\n\t\t\t\tsource = $source[ 0 ],\n\t\t\t\t$children = $source.children();\n\n\t\t\tstyle.expected = style.expected.concat( [ \"\", \"auto\" ] );\n\n\t\t\tif ( source.style[ style.name ] === undefined ) {\n\t\t\t\tassert.ok( true, style.name +  \": style isn't supported and therefore not an issue\" );\n\t\t\t\tassert.ok( true );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$source.css( style.name, style.value[ 0 ] );\n\t\t\t$children.css( style.name, style.value[ 0 ] );\n\n\t\t\t$clone = $source.clone();\n\t\t\t$clonedChildren = $clone.children();\n\n\t\t\t$clone.css( style.name, \"\" );\n\t\t\t$clonedChildren.css( style.name, \"\" );\n\n\t\t\twindow.setTimeout( function() {\n\t\t\t\tassert.notEqual( $clone.css( style.name ), style.value[ 0 ], \"Cloned css was changed\" );\n\n\t\t\t\tassert.ok( jQuery.inArray( $source.css( style.name ) !== -1, style.value ),\n\t\t\t\t\t\"Clearing clone.css() doesn't affect source.css(): \" + style.name +\n\t\t\t\t\t\"; result: \" + $source.css( style.name ) +\n\t\t\t\t\t\"; expected: \" + style.value.join( \",\" ) );\n\n\t\t\t\tassert.ok( jQuery.inArray( $children.css( style.name ) !== -1, style.value ),\n\t\t\t\t\t\"Clearing clonedChildren.css() doesn't affect children.css(): \" + style.name +\n\t\t\t\t\t\"; result: \" + $children.css( style.name ) +\n\t\t\t\t\t\"; expected: \" + style.value.join( \",\" ) );\n\t\t\t}, 100 );\n\t\t} );\n\n\t\twindow.setTimeout( done, 1000 );\n\t}\n);\n\n// Support: IE <=10 only\n// We have to jump through the hoops here in order to test work with \"order\" CSS property,\n// that some browsers do not support. This test is not, strictly speaking, correct,\n// but it's the best that we can do.\n( function() {\n\tvar style = document.createElement( \"div\" ).style,\n\t\texist = \"order\" in style || \"WebkitOrder\" in style;\n\n\tif ( exist ) {\n\t\tQUnit.test( \"Don't append px to CSS \\\"order\\\" value (#14049)\", function( assert ) {\n\t\t\tassert.expect( 1 );\n\n\t\t\tvar $elem = jQuery( \"<div></div>\" );\n\n\t\t\t$elem.css( \"order\", 2 );\n\t\t\tassert.equal( $elem.css( \"order\" ), \"2\", \"2 on order\" );\n\t\t} );\n\t}\n} )();\n\nQUnit.test( \"Do not throw on frame elements from css method (#15098)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar frameWin, frameDoc,\n\t\tframeElement = document.createElement( \"iframe\" ),\n\t\tframeWrapDiv = document.createElement( \"div\" );\n\n\tframeWrapDiv.appendChild( frameElement );\n\tdocument.body.appendChild( frameWrapDiv );\n\tframeWin = frameElement.contentWindow;\n\tframeDoc = frameWin.document;\n\tframeDoc.open();\n\tframeDoc.write( \"<!doctype html><html><body><div>Hi</div></body></html>\" );\n\tframeDoc.close();\n\n\tframeWrapDiv.style.display = \"none\";\n\n\ttry {\n\t\tjQuery( frameDoc.body ).css( \"direction\" );\n\t\tassert.ok( true, \"It didn't throw\" );\n\t} catch ( _ ) {\n\t\tassert.ok( false, \"It did throw\" );\n\t}\n} );\n\n( function() {\n\tvar vendorPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ];\n\n\tfunction resetCssPropsFor( name ) {\n\t\tdelete jQuery.cssProps[ name ];\n\t\tjQuery.each( vendorPrefixes, function( index, prefix ) {\n\t\t\tdelete jQuery.cssProps[ prefix + name[ 0 ].toUpperCase() + name.slice( 1 ) ];\n\t\t} );\n\t}\n\n\tQUnit.test( \"Don't default to a cached previously used wrong prefixed name (gh-2015)\", function( assert ) {\n\n\t\t// Note: this test needs a property we know is only supported in a prefixed version\n\t\t// by at least one of our main supported browsers. This may get out of date so let's\n\t\t// use -(webkit|moz)-appearance as well as those two are not on a standards track.\n\t\tvar appearanceName, transformName, elem, elemStyle,\n\t\t\ttransformVal = \"translate(5px, 2px)\",\n\t\t\temptyStyle = document.createElement( \"div\" ).style;\n\n\t\tif ( \"appearance\" in emptyStyle ) {\n\t\t\tappearanceName = \"appearance\";\n\t\t} else {\n\t\t\tjQuery.each( vendorPrefixes, function( index, prefix ) {\n\t\t\t\tvar prefixedProp = prefix + \"Appearance\";\n\t\t\t\tif ( prefixedProp in emptyStyle ) {\n\t\t\t\t\tappearanceName = prefixedProp;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tif ( \"transform\" in emptyStyle ) {\n\t\t\ttransformName = \"transform\";\n\t\t} else {\n\t\t\tjQuery.each( vendorPrefixes, function( index, prefix ) {\n\t\t\t\tvar prefixedProp = prefix + \"Transform\";\n\t\t\t\tif ( prefixedProp in emptyStyle ) {\n\t\t\t\t\ttransformName = prefixedProp;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tassert.expect( !!appearanceName + !!transformName + 1 );\n\n\t\tresetCssPropsFor( \"appearance\" );\n\t\tresetCssPropsFor( \"transform\" );\n\n\t\telem = jQuery( \"<div></div>\" )\n\t\t\t.css( {\n\t\t\t\tmsAppearance: \"none\",\n\t\t\t\tappearance: \"none\",\n\n\t\t\t\t// Only the ms prefix is used to make sure we haven't e.g. set\n\t\t\t\t// webkitTransform ourselves in the test.\n\t\t\t\tmsTransform: transformVal,\n\t\t\t\ttransform: transformVal\n\t\t\t} );\n\t\telemStyle = elem[ 0 ].style;\n\n\t\tif ( appearanceName ) {\n\t\t\tassert.equal( elemStyle[ appearanceName ], \"none\", \"setting properly-prefixed appearance\" );\n\t\t}\n\t\tif ( transformName ) {\n\t\t\tassert.equal( elemStyle[ transformName ], transformVal, \"setting properly-prefixed transform\" );\n\t\t}\n\t\tassert.equal( elemStyle[ \"undefined\" ], undefined, \"Nothing writes to node.style.undefined\" );\n\t} );\n\n\tQUnit.test( \"Don't detect fake set properties on a node when caching the prefixed version\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar elem = jQuery( \"<div></div>\" ),\n\t\t\tstyle = elem[ 0 ].style;\n\t\tstyle.MozFakeProperty = \"old value\";\n\t\telem.css( \"fakeProperty\", \"new value\" );\n\n\t\tassert.equal( style.MozFakeProperty, \"old value\", \"Fake prefixed property is not cached\" );\n\t} );\n\n} )();\n\n( function() {\n\tvar supportsCssVars,\n\t\telem = jQuery( \"<div>\" ).appendTo( document.body ),\n\t\tdiv = elem[ 0 ];\n\n\tdiv.style.setProperty( \"--prop\", \"value\" );\n\tsupportsCssVars = !!getComputedStyle( div ).getPropertyValue( \"--prop\" );\n\telem.remove();\n\n\tQUnit[ supportsCssVars ? \"test\" : \"skip\" ]( \"css(--customProperty)\", function( assert ) {\n\t\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\t\"<style>\\n\" +\n\t\t\t\"    .test__customProperties {\\n\" +\n\t\t\t\"        --prop1:val1;\\n\" +\n\t\t\t\"        --prop2: val2;\\n\" +\n\t\t\t\"        --prop3:val3 ;\\n\" +\n\t\t\t\"        --prop4:\\\"val4\\\";\\n\" +\n\t\t\t\"        --prop5:'val5';\\n\" +\n\t\t\t\"    }\\n\" +\n\t\t\t\"</style>\"\n\t\t);\n\n\t\tvar div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t\t$elem = jQuery( \"<div>\" ).addClass( \"test__customProperties\" )\n\t\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\t\twebkit = /\\bsafari\\b/i.test( navigator.userAgent ) &&\n\t\t\t\t!/\\firefox\\b/i.test( navigator.userAgent ) &&\n\t\t\t\t!/\\edge\\b/i.test( navigator.userAgent ),\n\t\t\toldSafari = webkit && ( /\\b9\\.\\d(\\.\\d+)* safari/i.test( navigator.userAgent ) ||\n\t\t\t\t/\\b10\\.0(\\.\\d+)* safari/i.test( navigator.userAgent ) ||\n\t\t\t\t/iphone os (?:9|10)_/i.test( navigator.userAgent ) ),\n\t\t\texpected = 10;\n\n\t\tif ( webkit ) {\n\t\t\texpected -= 2;\n\t\t}\n\t\tif ( oldSafari ) {\n\t\t\texpected -= 2;\n\t\t}\n\t\tassert.expect( expected );\n\n\t\tdiv.css( \"--color\", \"blue\" );\n\t\tassert.equal( div.css( \"--color\" ), \"blue\", \"Modified CSS custom property using string\" );\n\n\t\tdiv.css( \"--color\", \"yellow\" );\n\t\tassert.equal( div.css( \"--color\" ), \"yellow\", \"Overwrite CSS custom property\" );\n\n\t\tdiv.css( { \"--color\": \"red\" } );\n\t\tassert.equal( div.css( \"--color\" ), \"red\", \"Modified CSS custom property using object\" );\n\n\t\tdiv.css( { \"--mixedCase\": \"green\" } );\n\t\tdiv.css( { \"--mixed-case\": \"red\" } );\n\t\tassert.equal( div.css( \"--mixedCase\" ), \"green\",\n\t\t\t\"Modified CSS custom property with mixed case\" );\n\n\t\tdiv.css( { \"--theme-dark\": \"purple\" } );\n\t\tdiv.css( { \"--themeDark\": \"red\" } );\n\t\tassert.equal( div.css( \"--theme-dark\" ), \"purple\",\n\t\t\t\"Modified CSS custom property with dashed name\" );\n\n\t\tassert.equal( $elem.css( \"--prop1\" ), \"val1\", \"Basic CSS custom property\" );\n\n\t\t// Support: Safari 9.1-10.0 only\n\t\t// Safari collapses whitespaces & quotes. Ignore it.\n\t\tif ( !oldSafari ) {\n\t\t\tassert.equal( $elem.css( \"--prop2\" ), \" val2\", \"Preceding whitespace maintained\" );\n\t\t\tassert.equal( $elem.css( \"--prop3\" ), \"val3 \", \"Following whitespace maintained\" );\n\t\t}\n\n\t\t// Support: Chrome 49-55, Safari 9.1-10.0\n\t\t// Chrome treats single quotes as double ones.\n\t\t// Safari treats double quotes as single ones.\n\t\tif ( !webkit ) {\n\t\t\tassert.equal( $elem.css( \"--prop4\" ), \"\\\"val4\\\"\", \"Works with double quotes\" );\n\t\t\tassert.equal( $elem.css( \"--prop5\" ), \"'val5'\", \"Works with single quotes\" );\n\t\t}\n\t} );\n\n\tQUnit[ supportsCssVars ? \"test\" : \"skip\" ]( \"Don't append px to CSS vars\", function( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\t$div\n\t\t\t.css( \"--a\", 3 )\n\t\t\t.css( \"--line-height\", 4 )\n\t\t\t.css( \"--lineHeight\", 5 );\n\n\t\tassert.equal( $div.css( \"--a\" ), \"3\", \"--a: 3\" );\n\t\tassert.equal( $div.css( \"--line-height\" ), \"4\", \"--line-height: 4\" );\n\t\tassert.equal( $div.css( \"--lineHeight\" ), \"5\", \"--lineHeight: 5\" );\n\t} );\n} )();\n\n}\n", "QUnit.module( \"data\", { afterEach: moduleTeardown } );\n\nQUnit.test( \"expando\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.expando !== undefined, true, \"jQuery is exposing the expando\" );\n} );\n\nQUnit.test( \"jQuery.data & removeData, expected returns\", function( assert ) {\n\tassert.expect( 4 );\n\tvar elem = document.body;\n\n\tassert.equal(\n\t\tjQuery.data( elem, \"hello\", \"world\" ), \"world\",\n\t\t\"jQuery.data( elem, key, value ) returns value\"\n\t);\n\tassert.equal(\n\t\tjQuery.data( elem, \"hello\" ), \"world\",\n\t\t\"jQuery.data( elem, key ) returns value\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.data( elem, { goodnight: \"moon\" } ), { goodnight: \"moon\" },\n\t\t\"jQuery.data( elem, obj ) returns obj\"\n\t);\n\tassert.equal(\n\t\tjQuery.removeData( elem, \"hello\" ), undefined,\n\t\t\"jQuery.removeData( elem, key, value ) returns undefined\"\n\t);\n\n} );\n\nQUnit.test( \"jQuery._data & _removeData, expected returns\", function( assert ) {\n\tassert.expect( 4 );\n\tvar elem = document.body;\n\n\tassert.equal(\n\t\tjQuery._data( elem, \"hello\", \"world\" ), \"world\",\n\t\t\"jQuery._data( elem, key, value ) returns value\"\n\t);\n\tassert.equal(\n\t\tjQuery._data( elem, \"hello\" ), \"world\",\n\t\t\"jQuery._data( elem, key ) returns value\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery._data( elem, { goodnight: \"moon\" } ), { goodnight: \"moon\" },\n\t\t\"jQuery._data( elem, obj ) returns obj\"\n\t);\n\tassert.equal(\n\t\tjQuery._removeData( elem, \"hello\" ), undefined,\n\t\t\"jQuery._removeData( elem, key, value ) returns undefined\"\n\t);\n} );\n\nQUnit.test( \"jQuery.hasData no side effects\", function( assert ) {\n\tassert.expect( 1 );\n\tvar obj = {};\n\n\tjQuery.hasData( obj );\n\n\tassert.equal( Object.getOwnPropertyNames( obj ).length, 0,\n\t\t\"No data expandos where added when calling jQuery.hasData(o)\"\n\t);\n} );\n\nfunction dataTests( elem, assert ) {\n\tvar dataObj, internalDataObj;\n\n\tassert.equal( jQuery.data( elem, \"foo\" ), undefined, \"No data exists initially\" );\n\tassert.strictEqual( jQuery.hasData( elem ), false, \"jQuery.hasData agrees no data exists initially\" );\n\n\tdataObj = jQuery.data( elem );\n\tassert.equal( typeof dataObj, \"object\", \"Calling data with no args gives us a data object reference\" );\n\tassert.strictEqual( jQuery.data( elem ), dataObj, \"Calling jQuery.data returns the same data object when called multiple times\" );\n\n\tassert.strictEqual( jQuery.hasData( elem ), false, \"jQuery.hasData agrees no data exists even when an empty data obj exists\" );\n\n\tdataObj[ \"foo\" ] = \"bar\";\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"bar\", \"Data is readable by jQuery.data when set directly on a returned data object\" );\n\n\tassert.strictEqual( jQuery.hasData( elem ), true, \"jQuery.hasData agrees data exists when data exists\" );\n\n\tjQuery.data( elem, \"foo\", \"baz\" );\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"baz\", \"Data can be changed by jQuery.data\" );\n\tassert.equal( dataObj[ \"foo\" ], \"baz\", \"Changes made through jQuery.data propagate to referenced data object\" );\n\n\tjQuery.data( elem, \"foo\", undefined );\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"baz\", \"Data is not unset by passing undefined to jQuery.data\" );\n\n\tjQuery.data( elem, \"foo\", null );\n\tassert.strictEqual( jQuery.data( elem, \"foo\" ), null, \"Setting null using jQuery.data works OK\" );\n\n\tjQuery.data( elem, \"foo\", \"foo1\" );\n\n\tjQuery.data( elem, { \"bar\": \"baz\", \"boom\": \"bloz\" } );\n\tassert.strictEqual( jQuery.data( elem, \"foo\" ), \"foo1\", \"Passing an object extends the data object instead of replacing it\" );\n\tassert.equal( jQuery.data( elem, \"boom\" ), \"bloz\", \"Extending the data object works\" );\n\n\tjQuery._data( elem, \"foo\", \"foo2\", true );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"Setting internal data works\" );\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"foo1\", \"Setting internal data does not override user data\" );\n\n\tinternalDataObj = jQuery._data( elem );\n\tassert.ok( internalDataObj, \"Internal data object exists\" );\n\tassert.notStrictEqual( dataObj, internalDataObj, \"Internal data object is not the same as user data object\" );\n\n\tassert.strictEqual( elem.boom, undefined, \"Data is never stored directly on the object\" );\n\n\tjQuery.removeData( elem, \"foo\" );\n\tassert.strictEqual( jQuery.data( elem, \"foo\" ), undefined, \"jQuery.removeData removes single properties\" );\n\n\tjQuery.removeData( elem );\n\tassert.strictEqual( jQuery._data( elem ), internalDataObj, \"jQuery.removeData does not remove internal data if it exists\" );\n\n\tjQuery.data( elem, \"foo\", \"foo1\" );\n\tjQuery._data( elem, \"foo\", \"foo2\" );\n\n\tassert.equal( jQuery.data( elem, \"foo\" ), \"foo1\", \"(sanity check) Ensure data is set in user data object\" );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"(sanity check) Ensure data is set in internal data object\" );\n\n\tassert.strictEqual( jQuery._data( elem, jQuery.expando ), undefined, \"Removing the last item in internal data destroys the internal data object\" );\n\n\tjQuery._data( elem, \"foo\", \"foo2\" );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"(sanity check) Ensure data is set in internal data object\" );\n\n\tjQuery.removeData( elem, \"foo\" );\n\tassert.equal( jQuery._data( elem, \"foo\" ), \"foo2\", \"(sanity check) jQuery.removeData for user data does not remove internal data\" );\n}\n\nQUnit.test( \"jQuery.data(div)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tvar div = document.createElement( \"div\" );\n\n\tdataTests( div, assert );\n\n\t// We stored one key in the private data\n\t// assert that nothing else was put in there, and that that\n\t// one stayed there.\n\tassert.expectJqData( this, div, \"foo\" );\n} );\n\nQUnit.test( \"jQuery.data({})\", function( assert ) {\n\tassert.expect( 25 );\n\n\tdataTests( {}, assert );\n} );\n\nQUnit.test( \"jQuery.data(window)\", function( assert ) {\n\tassert.expect( 25 );\n\n\t// remove bound handlers from window object to stop potential false positives caused by fix for #5280 in\n\t// transports/xhr.js\n\tjQuery( window ).off( \"unload\" );\n\n\tdataTests( window, assert );\n} );\n\nQUnit.test( \"jQuery.data(document)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tdataTests( document, assert );\n\n\tassert.expectJqData( this, document, \"foo\" );\n} );\n\nQUnit.test( \"jQuery.data(<embed>)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tdataTests( document.createElement( \"embed\" ), assert );\n} );\n\nQUnit.test( \"jQuery.data(object/flash)\", function( assert ) {\n\tassert.expect( 25 );\n\n\tvar flash = document.createElement( \"object\" );\n\tflash.setAttribute( \"classid\", \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" );\n\n\tdataTests( flash, assert );\n} );\n\n// attempting to access the data of an undefined jQuery element should be undefined\nQUnit.test( \"jQuery().data() === undefined (#14101)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.strictEqual( jQuery().data(), undefined );\n\tassert.strictEqual( jQuery().data( \"key\" ), undefined );\n} );\n\nQUnit.test( \".data()\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar div, dataObj, nodiv, obj;\n\n\tdiv = jQuery( \"#foo\" );\n\tassert.strictEqual( div.data( \"foo\" ), undefined, \"Make sure that missing result is undefined\" );\n\tdiv.data( \"test\", \"success\" );\n\n\tdataObj = div.data();\n\n\tassert.deepEqual( dataObj, { test: \"success\" }, \"data() returns entire data object with expected properties\" );\n\tassert.strictEqual( div.data( \"foo\" ), undefined, \"Make sure that missing result is still undefined\" );\n\n\tnodiv = jQuery( \"#unfound\" );\n\tassert.equal( nodiv.data(), null, \"data() on empty set returns null\" );\n\n\tobj = { foo: \"bar\" };\n\tjQuery( obj ).data( \"foo\", \"baz\" );\n\n\tdataObj = jQuery.extend( true, {}, jQuery( obj ).data() );\n\n\tassert.deepEqual( dataObj, { \"foo\": \"baz\" }, \"Retrieve data object from a wrapped JS object (#7524)\" );\n} );\n\nfunction testDataTypes( $obj, assert ) {\n\tjQuery.each( {\n\t\t\"null\": null,\n\t\t\"true\": true,\n\t\t\"false\": false,\n\t\t\"zero\": 0,\n\t\t\"one\": 1,\n\t\t\"empty string\": \"\",\n\t\t\"empty array\": [],\n\t\t\"array\": [ 1 ],\n\t\t\"empty object\": {},\n\t\t\"object\": { foo: \"bar\" },\n\t\t\"date\": new Date(),\n\t\t\"regex\": /test/,\n\t\t\"function\": function() {}\n\t}, function( type, value ) {\n\t\tassert.strictEqual( $obj.data( \"test\", value ).data( \"test\" ), value, \"Data set to \" + type );\n\t} );\n}\n\nQUnit.test( \"jQuery(Element).data(String, Object).data(String)\", function( assert ) {\n\tassert.expect( 18 );\n\tvar parent = jQuery( \"<div><div></div></div>\" ),\n\t\tdiv = parent.children();\n\n\tassert.strictEqual( div.data( \"test\" ), undefined, \"No data exists initially\" );\n\tassert.strictEqual( div.data( \"test\", \"success\" ).data( \"test\" ), \"success\", \"Data added\" );\n\tassert.strictEqual( div.data( \"test\", \"overwritten\" ).data( \"test\" ), \"overwritten\", \"Data overwritten\" );\n\tassert.strictEqual( div.data( \"test\", undefined ).data( \"test\" ), \"overwritten\", \".data(key,undefined) does nothing but is chainable (#5571)\" );\n\tassert.strictEqual( div.data( \"notexist\" ), undefined, \"No data exists for unset key\" );\n\ttestDataTypes( div, assert );\n\n\tparent.remove();\n} );\n\nQUnit.test( \"jQuery(plain Object).data(String, Object).data(String)\", function( assert ) {\n\tassert.expect( 16 );\n\n\t// #3748\n\tvar $obj = jQuery( { exists: true } );\n\tassert.strictEqual( $obj.data( \"nothing\" ), undefined, \"Non-existent data returns undefined\" );\n\tassert.strictEqual( $obj.data( \"exists\" ), undefined, \"Object properties are not returned as data\" );\n\ttestDataTypes( $obj, assert );\n\n\t// Clean up\n\t$obj.removeData();\n\tassert.deepEqual( $obj[ 0 ], { exists: true }, \"removeData does not clear the object\" );\n} );\n\nQUnit.test( \".data(object) does not retain references. #13815\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $divs = jQuery( \"<div></div><div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$divs.data( { \"type\": \"foo\" } );\n\t$divs.eq( 0 ).data( \"type\", \"bar\" );\n\n\tassert.equal( $divs.eq( 0 ).data( \"type\" ), \"bar\", \"Correct updated value\" );\n\tassert.equal( $divs.eq( 1 ).data( \"type\" ), \"foo\", \"Original value retained\" );\n} );\n\nQUnit.test( \"data-* attributes\", function( assert ) {\n\tassert.expect( 46 );\n\n\tvar prop, i, l, metadata, elem,\n\t\tobj, obj2, check, num, num2,\n\t\tparseJSON = JSON.parse,\n\t\tdiv = jQuery( \"<div>\" ),\n\t\tchild = jQuery( \"<div data-myobj='old data' data-ignored=\\\"DOM\\\" data-other='test' data-foo-42='boosh'></div>\" ),\n\t\tdummy = jQuery( \"<div data-myobj='old data' data-ignored=\\\"DOM\\\" data-other='test' data-foo-42='boosh'></div>\" );\n\n\tassert.equal( div.data( \"attr\" ), undefined, \"Check for non-existing data-attr attribute\" );\n\n\tdiv.attr( \"data-attr\", \"exists\" );\n\tassert.equal( div.data( \"attr\" ), \"exists\", \"Check for existing data-attr attribute\" );\n\n\tdiv.attr( \"data-attr\", \"exists2\" );\n\tassert.equal( div.data( \"attr\" ), \"exists\", \"Check that updates to data- don't update .data()\" );\n\n\tdiv.data( \"attr\", \"internal\" ).attr( \"data-attr\", \"external\" );\n\tassert.equal( div.data( \"attr\" ), \"internal\", \"Check for .data('attr') precedence (internal > external data-* attribute)\" );\n\n\tdiv.remove();\n\n\tchild.appendTo( \"#qunit-fixture\" );\n\tassert.equal( child.data( \"myobj\" ), \"old data\", \"Value accessed from data-* attribute\" );\n\tassert.equal( child.data( \"foo-42\" ), \"boosh\", \"camelCasing does not affect numbers (#1751)\" );\n\n\tchild.data( \"myobj\", \"replaced\" );\n\tassert.equal( child.data( \"myobj\" ), \"replaced\", \"Original data overwritten\" );\n\n\tchild.data( \"ignored\", \"cache\" );\n\tassert.equal( child.data( \"ignored\" ), \"cache\", \"Cached data used before DOM data-* fallback\" );\n\n\tobj = child.data();\n\tobj2 = dummy.data();\n\tcheck = [ \"myobj\", \"ignored\", \"other\", \"foo-42\" ];\n\tnum = 0;\n\tnum2 = 0;\n\n\tdummy.remove();\n\n\tfor ( i = 0, l = check.length; i < l; i++ ) {\n\t\tassert.ok( obj[ check[ i ] ], \"Make sure data- property exists when calling data-.\" );\n\t\tassert.ok( obj2[ check[ i ] ], \"Make sure data- property exists when calling data-.\" );\n\t}\n\n\tfor ( prop in obj ) {\n\t\tnum++;\n\t}\n\n\tassert.equal( num, check.length, \"Make sure that the right number of properties came through.\" );\n\n\tfor ( prop in obj2 ) {\n\t\tnum2++;\n\t}\n\n\tassert.equal( num2, check.length, \"Make sure that the right number of properties came through.\" );\n\n\tchild.attr( \"data-other\", \"newvalue\" );\n\n\tassert.equal( child.data( \"other\" ), \"test\", \"Make sure value was pulled in properly from a .data().\" );\n\n\t// attribute parsing\n\ti = 0;\n\tJSON.parse = function() {\n\t\ti++;\n\t\treturn parseJSON.apply( this, arguments );\n\t};\n\n\tchild\n\t\t.attr( \"data-true\", \"true\" )\n\t\t.attr( \"data-false\", \"false\" )\n\t\t.attr( \"data-five\", \"5\" )\n\t\t.attr( \"data-point\", \"5.5\" )\n\t\t.attr( \"data-pointe\", \"5.5E3\" )\n\t\t.attr( \"data-grande\", \"5.574E9\" )\n\t\t.attr( \"data-hexadecimal\", \"0x42\" )\n\t\t.attr( \"data-pointbad\", \"5..5\" )\n\t\t.attr( \"data-pointbad2\", \"-.\" )\n\t\t.attr( \"data-bigassnum\", \"123456789123456789123456789\" )\n\t\t.attr( \"data-badjson\", \"{123}\" )\n\t\t.attr( \"data-badjson2\", \"[abc]\" )\n\t\t.attr( \"data-notjson\", \" {}\" )\n\t\t.attr( \"data-notjson2\", \"[] \" )\n\t\t.attr( \"data-empty\", \"\" )\n\t\t.attr( \"data-space\", \" \" )\n\t\t.attr( \"data-null\", \"null\" )\n\t\t.attr( \"data-string\", \"test\" );\n\n\tassert.strictEqual( child.data( \"true\" ), true, \"Primitive true read from attribute\" );\n\tassert.strictEqual( child.data( \"false\" ), false, \"Primitive false read from attribute\" );\n\tassert.strictEqual( child.data( \"five\" ), 5, \"Integer read from attribute\" );\n\tassert.strictEqual( child.data( \"point\" ), 5.5, \"Floating-point number read from attribute\" );\n\tassert.strictEqual( child.data( \"pointe\" ), \"5.5E3\",\n\t\t\"Exponential-notation number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"grande\" ), \"5.574E9\",\n\t\t\"Big exponential-notation number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"hexadecimal\" ), \"0x42\",\n\t\t\"Hexadecimal number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"pointbad\" ), \"5..5\",\n\t\t\"Extra-point non-number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"pointbad2\" ), \"-.\",\n\t\t\"No-digit non-number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"bigassnum\" ), \"123456789123456789123456789\",\n\t\t\"Bad bigass number read from attribute as string\" );\n\tassert.strictEqual( child.data( \"badjson\" ), \"{123}\", \"Bad JSON object read from attribute as string\" );\n\tassert.strictEqual( child.data( \"badjson2\" ), \"[abc]\", \"Bad JSON array read from attribute as string\" );\n\tassert.strictEqual( child.data( \"notjson\" ), \" {}\",\n\t\t\"JSON object with leading non-JSON read from attribute as string\" );\n\tassert.strictEqual( child.data( \"notjson2\" ), \"[] \",\n\t\t\"JSON array with trailing non-JSON read from attribute as string\" );\n\tassert.strictEqual( child.data( \"empty\" ), \"\", \"Empty string read from attribute\" );\n\tassert.strictEqual( child.data( \"space\" ), \" \", \"Whitespace string read from attribute\" );\n\tassert.strictEqual( child.data( \"null\" ), null, \"Primitive null read from attribute\" );\n\tassert.strictEqual( child.data( \"string\" ), \"test\", \"Typical string read from attribute\" );\n\tassert.equal( i, 2, \"Correct number of JSON parse attempts when reading from attributes\" );\n\n\tJSON.parse = parseJSON;\n\tchild.remove();\n\n\t// tests from metadata plugin\n\tfunction testData( index, elem ) {\n\t\tswitch ( index ) {\n\t\tcase 0:\n\t\t\tassert.equal( jQuery( elem ).data( \"foo\" ), \"bar\", \"Check foo property\" );\n\t\t\tassert.equal( jQuery( elem ).data( \"bar\" ), \"baz\", \"Check baz property\" );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tassert.equal( jQuery( elem ).data( \"test\" ), \"bar\", \"Check test property\" );\n\t\t\tassert.equal( jQuery( elem ).data( \"bar\" ), \"baz\", \"Check bar property\" );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tassert.equal( jQuery( elem ).data( \"zoooo\" ), \"bar\", \"Check zoooo property\" );\n\t\t\tassert.deepEqual( jQuery( elem ).data( \"bar\" ), { \"test\":\"baz\" }, \"Check bar property\" );\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tassert.equal( jQuery( elem ).data( \"number\" ), true, \"Check number property\" );\n\t\t\tassert.deepEqual( jQuery( elem ).data( \"stuff\" ), [ 2, 8 ], \"Check stuff property\" );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassert.ok( false, [ \"Assertion failed on index \", index, \", with data\" ].join( \"\" ) );\n\t\t}\n\t}\n\n\tmetadata = \"<ol><li class='test test2' data-foo='bar' data-bar='baz' data-arr='[1,2]'>Some stuff</li><li class='test test2' data-test='bar' data-bar='baz'>Some stuff</li><li class='test test2' data-zoooo='bar' data-bar='{\\\"test\\\":\\\"baz\\\"}'>Some stuff</li><li class='test test2' data-number=true data-stuff='[2,8]'>Some stuff</li></ol>\";\n\telem = jQuery( metadata ).appendTo( \"#qunit-fixture\" );\n\n\telem.find( \"li\" ).each( testData );\n\telem.remove();\n} );\n\nQUnit.test( \".data(Object)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar obj, jqobj,\n\t\tdiv = jQuery( \"<div></div>\" );\n\n\tdiv.data( { \"test\": \"in\", \"test2\": \"in2\" } );\n\tassert.equal( div.data( \"test\" ), \"in\", \"Verify setting an object in data\" );\n\tassert.equal( div.data( \"test2\" ), \"in2\", \"Verify setting an object in data\" );\n\n\tobj = { test:\"unset\" };\n\tjqobj = jQuery( obj );\n\n\tjqobj.data( \"test\", \"unset\" );\n\tjqobj.data( { \"test\": \"in\", \"test2\": \"in2\" } );\n\tassert.equal( jQuery.data( obj )[ \"test\" ], \"in\", \"Verify setting an object on an object extends the data object\" );\n\tassert.equal( obj[ \"test2\" ], undefined, \"Verify setting an object on an object does not extend the object\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n} );\n\nQUnit.test( \"jQuery.removeData\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar obj,\n\t\tdiv = jQuery( \"#foo\" )[ 0 ];\n\tjQuery.data( div, \"test\", \"testing\" );\n\tjQuery.removeData( div, \"test\" );\n\tassert.equal( jQuery.data( div, \"test\" ), undefined, \"Check removal of data\" );\n\n\tjQuery.data( div, \"test2\", \"testing\" );\n\tjQuery.removeData( div );\n\tassert.ok( !jQuery.data( div, \"test2\" ), \"Make sure that the data property no longer exists.\" );\n\tassert.ok( !div[ jQuery.expando ], \"Make sure the expando no longer exists, as well.\" );\n\n\tjQuery.data( div, {\n\t\ttest3: \"testing\",\n\t\ttest4: \"testing\"\n\t} );\n\tjQuery.removeData( div, \"test3 test4\" );\n\tassert.ok( !jQuery.data( div, \"test3\" ) || jQuery.data( div, \"test4\" ), \"Multiple delete with spaces.\" );\n\n\tjQuery.data( div, {\n\t\ttest3: \"testing\",\n\t\ttest4: \"testing\"\n\t} );\n\tjQuery.removeData( div, [ \"test3\", \"test4\" ] );\n\tassert.ok( !jQuery.data( div, \"test3\" ) || jQuery.data( div, \"test4\" ), \"Multiple delete by array.\" );\n\n\tjQuery.data( div, {\n\t\t\"test3 test4\": \"testing\",\n\t\t\"test3\": \"testing\"\n\t} );\n\tjQuery.removeData( div, \"test3 test4\" );\n\tassert.ok( !jQuery.data( div, \"test3 test4\" ), \"Multiple delete with spaces deleted key with exact name\" );\n\tassert.ok( jQuery.data( div, \"test3\" ), \"Left the partial matched key alone\" );\n\n\tobj = {};\n\tjQuery.data( obj, \"test\", \"testing\" );\n\tassert.equal( jQuery( obj ).data( \"test\" ), \"testing\", \"verify data on plain object\" );\n\tjQuery.removeData( obj, \"test\" );\n\tassert.equal( jQuery.data( obj, \"test\" ), undefined, \"Check removal of data on plain object\" );\n\n\tjQuery.data( window, \"BAD\", true );\n\tjQuery.removeData( window, \"BAD\" );\n\tassert.ok( !jQuery.data( window, \"BAD\" ), \"Make sure that the value was not still set.\" );\n} );\n\nQUnit.test( \".removeData()\", function( assert ) {\n\tassert.expect( 6 );\n\tvar div = jQuery( \"#foo\" );\n\tdiv.data( \"test\", \"testing\" );\n\tdiv.removeData( \"test\" );\n\tassert.equal( div.data( \"test\" ), undefined, \"Check removal of data\" );\n\n\tdiv.data( \"test\", \"testing\" );\n\tdiv.data( \"test.foo\", \"testing2\" );\n\tdiv.removeData( \"test.bar\" );\n\tassert.equal( div.data( \"test.foo\" ), \"testing2\", \"Make sure data is intact\" );\n\tassert.equal( div.data( \"test\" ), \"testing\", \"Make sure data is intact\" );\n\n\tdiv.removeData( \"test\" );\n\tassert.equal( div.data( \"test.foo\" ), \"testing2\", \"Make sure data is intact\" );\n\tassert.equal( div.data( \"test\" ), undefined, \"Make sure data is intact\" );\n\n\tdiv.removeData( \"test.foo\" );\n\tassert.equal( div.data( \"test.foo\" ), undefined, \"Make sure data is intact\" );\n} );\n\nif ( window.JSON && window.JSON.stringify ) {\n\tQUnit.test( \"JSON serialization (#8108)\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar obj = { \"foo\": \"bar\" };\n\t\tjQuery.data( obj, \"hidden\", true );\n\n\t\tassert.equal( JSON.stringify( obj ), \"{\\\"foo\\\":\\\"bar\\\"}\", \"Expando is hidden from JSON.stringify\" );\n\t} );\n}\n\nQUnit.test( \".data should follow html5 specification regarding camel casing\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar div = jQuery( \"<div id='myObject' data-w-t-f='ftw' data-big-a-little-a='bouncing-b' data-foo='a' data-foo-bar='b' data-foo-bar-baz='c'></div>\" )\n\t\t.prependTo( \"body\" );\n\n\tassert.equal( div.data()[ \"wTF\" ], \"ftw\", \"Verify single letter data-* key\" );\n\tassert.equal( div.data()[ \"bigALittleA\" ], \"bouncing-b\", \"Verify single letter mixed data-* key\" );\n\n\tassert.equal( div.data()[ \"foo\" ], \"a\", \"Verify single word data-* key\" );\n\tassert.equal( div.data()[ \"fooBar\" ], \"b\", \"Verify multiple word data-* key\" );\n\tassert.equal( div.data()[ \"fooBarBaz\" ], \"c\", \"Verify multiple word data-* key\" );\n\n\tassert.equal( div.data( \"foo\" ), \"a\", \"Verify single word data-* key\" );\n\tassert.equal( div.data( \"fooBar\" ), \"b\", \"Verify multiple word data-* key\" );\n\tassert.equal( div.data( \"fooBarBaz\" ), \"c\", \"Verify multiple word data-* key\" );\n\n\tdiv.data( \"foo-bar\", \"d\" );\n\n\tassert.equal( div.data( \"fooBar\" ), \"d\", \"Verify updated data-* key\" );\n\tassert.equal( div.data( \"foo-bar\" ), \"d\", \"Verify updated data-* key\" );\n\n\tassert.equal( div.data( \"fooBar\" ), \"d\", \"Verify updated data-* key (fooBar)\" );\n\tassert.equal( div.data( \"foo-bar\" ), \"d\", \"Verify updated data-* key (foo-bar)\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \".data should not miss preset data-* w/ hyphenated property names\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),\n\t\ttest = {\n\t\t\t\"camelBar\": \"camelBar\",\n\t\t\t\"hyphen-foo\": \"hyphen-foo\"\n\t\t};\n\n\tdiv.data( test );\n\n\tjQuery.each( test, function( i, k ) {\n\t\tassert.equal( div.data( k ), k, \"data with property '\" + k + \"' was correctly found\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery.data should not miss data-* w/ hyphenated property names #14047\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div></div>\" );\n\n\tdiv.data( \"foo-bar\", \"baz\" );\n\n\tassert.equal( jQuery.data( div[ 0 ], \"foo-bar\" ), \"baz\", \"data with property 'foo-bar' was correctly found\" );\n} );\n\nQUnit.test( \".data should not miss attr() set data-* with hyphenated property names\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar a, b;\n\n\ta = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\ta.attr( \"data-long-param\", \"test\" );\n\ta.data( \"long-param\", { a: 2 } );\n\n\tassert.deepEqual( a.data( \"long-param\" ), { a: 2 }, \"data with property long-param was found, 1\" );\n\n\tb = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tb.attr( \"data-long-param\", \"test\" );\n\tb.data( \"long-param\" );\n\tb.data( \"long-param\", { a: 2 } );\n\n\tassert.deepEqual( b.data( \"long-param\" ), { a: 2 }, \"data with property long-param was found, 2\" );\n} );\n\nQUnit.test( \".data always sets data with the camelCased key (gh-2257)\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tdatas = {\n\t\t\t\"non-empty\": {\n\t\t\t\tkey: \"nonEmpty\",\n\t\t\t\tvalue: \"a string\"\n\t\t\t},\n\t\t\t\"empty-string\": {\n\t\t\t\tkey: \"emptyString\",\n\t\t\t\tvalue: \"\"\n\t\t\t},\n\t\t\t\"one-value\": {\n\t\t\t\tkey: \"oneValue\",\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\t\"zero-value\": {\n\t\t\t\tkey: \"zeroValue\",\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\t\"an-array\": {\n\t\t\t\tkey: \"anArray\",\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\t\"an-object\": {\n\t\t\t\tkey: \"anObject\",\n\t\t\t\tvalue: {}\n\t\t\t},\n\t\t\t\"bool-true\": {\n\t\t\t\tkey: \"boolTrue\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"bool-false\": {\n\t\t\t\tkey: \"boolFalse\",\n\t\t\t\tvalue: false\n\t\t\t},\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": {\n\t\t\t\tkey: \"someJson\",\n\t\t\t\tvalue: \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t\t}\n\t\t};\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val.value );\n\t\tvar allData = div.data();\n\t\tassert.equal( allData[ key ], undefined, \".data does not store with hyphenated keys\" );\n\t\tassert.equal( allData[ val.key ], val.value, \".data stores the camelCased key\" );\n\t} );\n} );\n\nQUnit.test( \".data should not strip more than one hyphen when camelCasing (gh-2070)\", function( assert ) {\n\tassert.expect( 3 );\n\tvar div = jQuery( \"<div data-nested-single='single' data-nested--double='double' data-nested---triple='triple'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tallData = div.data();\n\n\tassert.equal( allData.nestedSingle, \"single\", \"Key is correctly camelCased\" );\n\tassert.equal( allData[ \"nested-Double\" ], \"double\", \"Key with double hyphens is correctly camelCased\" );\n\tassert.equal( allData[ \"nested--Triple\" ], \"triple\", \"Key with triple hyphens is correctly camelCased\" );\n} );\n\nQUnit.test( \".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values\", function( assert ) {\n\n\tvar div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),\n\t\tdatas = {\n\t\t\t\"non-empty\": {\n\t\t\t\tkey: \"nonEmpty\",\n\t\t\t\tvalue: \"a string\"\n\t\t\t},\n\t\t\t\"empty-string\": {\n\t\t\t\tkey: \"emptyString\",\n\t\t\t\tvalue: \"\"\n\t\t\t},\n\t\t\t\"one-value\": {\n\t\t\t\tkey: \"oneValue\",\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\t\"zero-value\": {\n\t\t\t\tkey: \"zeroValue\",\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\t\"an-array\": {\n\t\t\t\tkey: \"anArray\",\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\t\"an-object\": {\n\t\t\t\tkey: \"anObject\",\n\t\t\t\tvalue: {}\n\t\t\t},\n\t\t\t\"bool-true\": {\n\t\t\t\tkey: \"boolTrue\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"bool-false\": {\n\t\t\t\tkey: \"boolFalse\",\n\t\t\t\tvalue: false\n\t\t\t},\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": {\n\t\t\t\tkey: \"someJson\",\n\t\t\t\tvalue: \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t\t},\n\n\t\t\t\"num-1-middle\": {\n\t\t\t\tkey: \"num-1Middle\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"num-end-2\": {\n\t\t\t\tkey: \"numEnd-2\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t\"2-num-start\": {\n\t\t\t\tkey: \"2NumStart\",\n\t\t\t\tvalue: true\n\t\t\t}\n\t\t};\n\n\tassert.expect( 24 );\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val.value );\n\n\t\tassert.deepEqual( div.data( key ), val.value, \"get: \" + key );\n\t\tassert.deepEqual( div.data( val.key ), val.value, \"get: \" + val.key );\n\t} );\n} );\n\nQUnit.test( \".data supports interoperable removal of hyphenated/camelCase properties\", function( assert ) {\n\tvar div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),\n\t\trdashAlpha = /-([a-z])/g,\n\t\tdatas = {\n\t\t\t\"non-empty\": \"a string\",\n\t\t\t\"empty-string\": \"\",\n\t\t\t\"one-value\": 1,\n\t\t\t\"zero-value\": 0,\n\t\t\t\"an-array\": [],\n\t\t\t\"an-object\": {},\n\t\t\t\"bool-true\": true,\n\t\t\t\"bool-false\": false,\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t};\n\n\tassert.expect( 27 );\n\n\tfunction fcamelCase( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t}\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val );\n\n\t\tassert.deepEqual( div.data( key ), val, \"get: \" + key );\n\t\tassert.deepEqual(\n\t\t\tdiv.data( key.replace( rdashAlpha, fcamelCase ) ),\n\t\t\tval,\n\t\t\t\"get: \" + key.replace( rdashAlpha, fcamelCase )\n\t\t);\n\n\t\tdiv.removeData( key );\n\n\t\tassert.equal( div.data( key ), undefined, \"get: \" + key );\n\n\t} );\n} );\n\nQUnit.test( \".data supports interoperable removal of properties SET TWICE #13850\", function( assert ) {\n\tvar div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tdatas = {\n\t\t\t\"non-empty\": \"a string\",\n\t\t\t\"empty-string\": \"\",\n\t\t\t\"one-value\": 1,\n\t\t\t\"zero-value\": 0,\n\t\t\t\"an-array\": [],\n\t\t\t\"an-object\": {},\n\t\t\t\"bool-true\": true,\n\t\t\t\"bool-false\": false,\n\n\t\t\t// JSHint enforces double quotes,\n\t\t\t// but JSON strings need double quotes to parse\n\t\t\t// so we need escaped double quotes here\n\t\t\t\"some-json\": \"{ \\\"foo\\\": \\\"bar\\\" }\"\n\t\t};\n\n\tassert.expect( 9 );\n\n\tjQuery.each( datas, function( key, val ) {\n\t\tdiv.data( key, val );\n\t\tdiv.data( key, val );\n\n\t\tdiv.removeData( key );\n\n\t\tassert.equal( div.data( key ), undefined, \"removal: \" + key );\n\t} );\n} );\n\nQUnit.test( \".removeData supports removal of hyphenated properties via array (#12786, gh-2257)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar div, plain, compare;\n\n\tdiv = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\tplain = jQuery( {} );\n\n\t// Properties should always be camelCased\n\tcompare = {\n\n\t\t// From batch assignment .data({ \"a-a\": 1 })\n\t\t\"aA\": 1,\n\n\t\t// From property, value assignment .data( \"b-b\", 1 )\n\t\t\"bB\": 1\n\t};\n\n\t// Mixed assignment\n\tdiv.data( { \"a-a\": 1 } ).data( \"b-b\", 1 );\n\tplain.data( { \"a-a\": 1 } ).data( \"b-b\", 1 );\n\n\tassert.deepEqual( div.data(), compare, \"Data appears as expected. (div)\" );\n\tassert.deepEqual( plain.data(), compare, \"Data appears as expected. (plain)\" );\n\n\tdiv.removeData( [ \"a-a\", \"b-b\" ] );\n\tplain.removeData( [ \"a-a\", \"b-b\" ] );\n\n\tassert.deepEqual( div.data(), {}, \"Data is empty. (div)\" );\n\tassert.deepEqual( plain.data(), {}, \"Data is empty. (plain)\" );\n} );\n\n// Test originally by Moschel\nQUnit.test( \".removeData should not throw exceptions. (#10080)\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect( 1 );\n\tvar frame = jQuery( \"#loadediframe\" );\n\tjQuery( frame[ 0 ].contentWindow ).on( \"unload\", function() {\n\t\tassert.ok( true, \"called unload\" );\n\t\tdone();\n\t} );\n\n\t// change the url to trigger unload\n\tframe.attr( \"src\", baseURL + \"iframe.html?param=true\" );\n} );\n\nQUnit.test( \".data only checks element attributes once. #8909\", function( assert ) {\n\tassert.expect( 2 );\n\tvar testing = {\n\t\t\t\"test\": \"testing\",\n\t\t\t\"test2\": \"testing\"\n\t\t},\n\t\telement = jQuery( \"<div data-test='testing'>\" ),\n\t\tnode = element[ 0 ];\n\n\t// set an attribute using attr to ensure it\n\tnode.setAttribute( \"data-test2\", \"testing\" );\n\tassert.deepEqual( element.data(), testing, \"Sanity Check\" );\n\n\tnode.setAttribute( \"data-test3\", \"testing\" );\n\tassert.deepEqual( element.data(), testing, \"The data didn't change even though the data-* attrs did\" );\n\n\t// clean up data cache\n\telement.remove();\n} );\n\nQUnit.test( \"data-* with JSON value can have newlines\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar x = jQuery( \"<div data-some='{\\n\\\"foo\\\":\\n\\t\\\"bar\\\"\\n}'></div>\" );\n\tassert.equal( x.data( \"some\" ).foo, \"bar\", \"got a JSON data- attribute with spaces\" );\n\tx.remove();\n} );\n\nQUnit.test( \".data doesn't throw when calling selection is empty. #13551\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery( null ).data( \"prop\" );\n\t\tassert.ok( true, \"jQuery(null).data('prop') does not throw\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, e.message );\n\t}\n} );\n\nQUnit.test( \"acceptData\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar flash, pdf, form;\n\n\tassert.equal( jQuery( document ).data( \"test\", 42 ).data( \"test\" ), 42, \"document\" );\n\tassert.equal( jQuery( document.documentElement ).data( \"test\", 42 ).data( \"test\" ), 42, \"documentElement\" );\n\tassert.equal( jQuery( {} ).data( \"test\", 42 ).data( \"test\" ), 42, \"object\" );\n\tassert.equal( jQuery( document.createElement( \"embed\" ) ).data( \"test\", 42 ).data( \"test\" ), 42, \"embed\" );\n\n\tflash = document.createElement( \"object\" );\n\tflash.setAttribute( \"classid\", \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" );\n\tassert.equal( jQuery( flash ).data( \"test\", 42 ).data( \"test\" ), 42, \"flash\" );\n\n\tpdf = document.createElement( \"object\" );\n\tpdf.setAttribute( \"classid\", \"clsid:CA8A9780-280D-11CF-A24D-444553540000\" );\n\tassert.equal( jQuery( pdf ).data( \"test\", 42 ).data( \"test\" ), 42, \"pdf\" );\n\n\tassert.strictEqual( jQuery( document.createComment( \"\" ) ).data( \"test\", 42 ).data( \"test\" ), undefined, \"comment\" );\n\tassert.strictEqual( jQuery( document.createTextNode( \"\" ) ).data( \"test\", 42 ).data( \"test\" ), undefined, \"text\" );\n\tassert.strictEqual( jQuery( document.createDocumentFragment() ).data( \"test\", 42 ).data( \"test\" ), undefined, \"documentFragment\" );\n\n\tform = jQuery( \"#form\" ).append( \"<input id='nodeType'/><input id='nodeName'/>\" )[ 0 ];\n\tassert.equal( jQuery( form ) .data( \"test\", 42 ).data( \"test\" ), 42, \"form with aliased DOM properties\" );\n} );\n\nQUnit.test( \"Check proper data removal of non-element descendants nodes (#8335)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div>text</div>\" ),\n\t\ttext = div.contents();\n\n\ttext.data( \"test\", \"test\" ); // This should be a noop.\n\tdiv.remove();\n\n\tassert.ok( !text.data( \"test\" ), \"Be sure data is not stored in non-element\" );\n} );\n\ntestIframe(\n\t\"enumerate data attrs on body (#14894)\",\n\t\"data/dataAttrs.html\",\n\tfunction( assert, jQuery, window, document, result ) {\n\t\tassert.expect( 1 );\n\t\tassert.equal( result, \"ok\", \"enumeration of data- attrs on body\" );\n\t}\n);\n\nQUnit.test( \"Check that the expando is removed when there's no more data\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div></div>\" );\n\tdiv.data( \"some\", \"data\" );\n\tassert.equal( div.data( \"some\" ), \"data\", \"Data is added\" );\n\tdiv.removeData( \"some\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.strictEqual( div[ 0 ][ key ], undefined, \"Expando was not removed when there was no more data\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"Check that the expando is removed when there's no more data on non-nodes\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar key,\n\t\tobj = jQuery( { key: 42 } );\n\tobj.data( \"some\", \"data\" );\n\tassert.equal( obj.data( \"some\" ), \"data\", \"Data is added\" );\n\tobj.removeData( \"some\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in obj[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.ok( false, \"Expando was not removed when there was no more data\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \".data(prop) does not create expando\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div></div>\" );\n\n\tdiv.data( \"foo\" );\n\tassert.equal( jQuery.hasData( div[ 0 ] ), false, \"No data exists after access\" );\n\n\t// Make sure no expando has been added\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.ok( false, \"Expando was created on access\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"keys matching Object.prototype properties  (gh-3256)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div></div>\" );\n\n\tassert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,\n\t\t\"hasOwnProperty not matched (before forced data creation)\" );\n\n\t// Force the creation of a data object for this element.\n\tdiv.data( { foo: \"bar\" } );\n\n\tassert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,\n\t\t\"hasOwnProperty not matched (after forced data creation)\" );\n} );\n", "QUnit.module( \"deprecated\", { afterEach: moduleTeardown } );\n\n\nQUnit[ jQuery.fn.bind ? \"test\" : \"skip\" ]( \"bind/unbind\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar markup = jQuery(\n\t\t\"<div><p><span><b>b</b></span></p></div>\"\n\t);\n\n\tmarkup\n\t\t.find( \"b\" )\n\t\t.bind( \"click\", { bindData: 19 }, function( e, trig ) {\n\t\t\tassert.equal( e.type, \"click\", \"correct event type\" );\n\t\t\tassert.equal( e.data.bindData, 19, \"correct trigger data\" );\n\t\t\tassert.equal( trig, 42, \"correct bind data\" );\n\t\t\tassert.equal( e.target.nodeName.toLowerCase(), \"b\", \"correct element\" );\n\t\t} )\n\t\t.trigger( \"click\", [ 42 ] )\n\t\t.unbind( \"click\" )\n\t\t.trigger( \"click\" )\n\t\t.remove();\n} );\n\nQUnit[ jQuery.fn.delegate ? \"test\" : \"skip\" ]( \"delegate/undelegate\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar markup = jQuery(\n\t\t\"<div><p><span><b>b</b></span></p></div>\"\n\t);\n\n\tmarkup\n\t\t.delegate( \"b\", \"click\", function( e ) {\n\t\t\tassert.equal( e.type, \"click\", \"correct event type\" );\n\t\t\tassert.equal( e.target.nodeName.toLowerCase(), \"b\", \"correct element\" );\n\t\t} )\n\t\t.find( \"b\" )\n\t\t\t.trigger( \"click\" )\n\t\t\t.end()\n\t\t.undelegate( \"b\", \"click\" )\n\t\t.remove();\n} );\n\nQUnit[ jQuery.fn.hover ? \"test\" : \"skip\" ]( \"hover() mouseenter mouseleave\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar times = 0,\n\t\thandler1 = function() { ++times; },\n\t\thandler2 = function() { ++times; };\n\n\tjQuery( \"#firstp\" )\n\t\t.hover( handler1, handler2 )\n\t\t.mouseenter().mouseleave()\n\t\t.off( \"mouseenter\", handler1 )\n\t\t.off( \"mouseleave\", handler2 )\n\t\t.hover( handler1 )\n\t\t.mouseenter().mouseleave()\n\t\t.off( \"mouseenter mouseleave\", handler1 )\n\t\t.mouseenter().mouseleave();\n\n\tassert.equal( times, 4, \"hover handlers fired\" );\n} );\n\n\nQUnit[ jQuery.fn.click ? \"test\" : \"skip\" ]( \"trigger() shortcuts\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar counter, clickCounter,\n\t\telem = jQuery( \"<li><a href='#'>Change location</a></li>\" ).prependTo( \"#firstUL\" );\n\telem.find( \"a\" ).on( \"click\", function() {\n\t\tvar close = jQuery( \"spanx\", this ); // same with jQuery(this).find(\"span\");\n\t\tassert.equal( close.length, 0, \"Context element does not exist, length must be zero\" );\n\t\tassert.ok( !close[ 0 ], \"Context element does not exist, direct access to element must return undefined\" );\n\t\treturn false;\n\t} ).click();\n\n\t// manually clean up detached elements\n\telem.remove();\n\n\tjQuery( \"#check1\" ).click( function() {\n\t\tassert.ok( true, \"click event handler for checkbox gets fired twice, see #815\" );\n\t} ).click();\n\n\tcounter = 0;\n\tjQuery( \"#firstp\" )[ 0 ].onclick = function() {\n\t\tcounter++;\n\t};\n\tjQuery( \"#firstp\" ).click();\n\tassert.equal( counter, 1, \"Check that click, triggers onclick event handler also\" );\n\n\tclickCounter = 0;\n\tjQuery( \"#simon1\" )[ 0 ].onclick = function() {\n\t\tclickCounter++;\n\t};\n\tjQuery( \"#simon1\" ).click();\n\tassert.equal( clickCounter, 1, \"Check that click, triggers onclick event handler on an a tag also\" );\n} );\n\nif ( jQuery.ajax && jQuery.fn.ajaxSend ) {\n\tajaxTest( \"jQuery.ajax() - events with context\", 12, function( assert ) {\n\t\tvar context = document.createElement( \"div\" );\n\n\t\tfunction event( e ) {\n\t\t\tassert.equal( this, context, e.type );\n\t\t}\n\n\t\tfunction callback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( this, context, \"context is preserved on callback \" + msg );\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( context ).appendTo( \"#foo\" )\n\t\t\t\t\t.ajaxSend( event )\n\t\t\t\t\t.ajaxComplete( event )\n\t\t\t\t\t.ajaxError( event )\n\t\t\t\t\t.ajaxSuccess( event );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"name.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\tsuccess: callback( \"success\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t}, {\n\t\t\t\turl: url( \"404.txt\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\terror: callback( \"error\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t} ]\n\t\t};\n\t} );\n}\n\nQUnit[ jQuery.fn.click ? \"test\" : \"skip\" ]( \"Event aliases\", function( assert ) {\n\n\t// Explicitly skipping focus/blur events due to their flakiness\n\tvar\t$elem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\taliases = ( \"resize scroll click dblclick mousedown mouseup \" +\n\t\t\t\"mousemove mouseover mouseout mouseenter mouseleave change \" +\n\t\t\t\"select submit keydown keypress keyup contextmenu\" ).split( \" \" );\n\tassert.expect( aliases.length );\n\n\tjQuery.each( aliases, function( i, name ) {\n\n\t\t// e.g. $(elem).click(...).click();\n\t\t$elem[ name ]( function( event ) {\n\t\t\tassert.equal( event.type, name, \"triggered \" + name );\n\t\t} )[ name ]().off( name );\n\t} );\n} );\n\nQUnit[ jQuery.parseJSON ? \"test\" : \"skip\" ]( \"jQuery.parseJSON\", function( assert ) {\n\tassert.expect( 20 );\n\n\tassert.strictEqual( jQuery.parseJSON( null ), null, \"primitive null\" );\n\tassert.strictEqual( jQuery.parseJSON( \"0.88\" ), 0.88, \"Number\" );\n\tassert.strictEqual(\n\t\tjQuery.parseJSON( \"\\\" \\\\\\\" \\\\\\\\ \\\\/ \\\\b \\\\f \\\\n \\\\r \\\\t \\\\u007E \\\\u263a \\\"\" ),\n\t\t\" \\\" \\\\ / \\b \\f \\n \\r \\t ~ \\u263A \",\n\t\t\"String escapes\"\n\t);\n\tassert.deepEqual( jQuery.parseJSON( \"{}\" ), {}, \"Empty object\" );\n\tassert.deepEqual( jQuery.parseJSON( \"{\\\"test\\\":1}\" ), { \"test\": 1 }, \"Plain object\" );\n\tassert.deepEqual( jQuery.parseJSON( \"[0]\" ), [ 0 ], \"Simple array\" );\n\n\tassert.deepEqual(\n\t\tjQuery.parseJSON( \"[ \\\"string\\\", -4.2, 2.7180e0, 3.14E-1, {}, [], true, false, null ]\" ),\n\t\t[ \"string\", -4.2, 2.718, 0.314, {}, [], true, false, null ],\n\t\t\"Array of all data types\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.parseJSON( \"{ \\\"string\\\": \\\"\\\", \\\"number\\\": 4.2e+1, \\\"object\\\": {},\" +\n\t\t\t\"\\\"array\\\": [[]], \\\"boolean\\\": [ true, false ], \\\"null\\\": null }\" ),\n\t\t{ string: \"\", number: 42, object: {}, array: [ [] ], \"boolean\": [ true, false ], \"null\": null },\n\t\t\"Dictionary of all data types\"\n\t);\n\n\tassert.deepEqual( jQuery.parseJSON( \"\\n{\\\"test\\\":1}\\t\" ), { \"test\": 1 },\n\t\t\"Leading and trailing whitespace are ignored\" );\n\n\tassert.throws( function() {\n\t\tjQuery.parseJSON();\n\t}, null, \"Undefined raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"\" );\n\t}, null, \"Empty string raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"''\" );\n\t}, null, \"Single-quoted string raises an error\" );\n\n\tassert.throws( function() {\n\t\tvar result = jQuery.parseJSON( \"0101\" );\n\n\t\t// Support: IE <=9 only\n\t\t// Ensure base-10 interpretation on browsers that erroneously accept leading-zero numbers\n\t\tif ( result === 101 ) {\n\t\t\tthrow new Error( \"close enough\" );\n\t\t}\n\t}, null, \"Leading-zero number raises an error or is parsed as decimal\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"{a:1}\" );\n\t}, null, \"Unquoted property raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"{'a':1}\" );\n\t}, null, \"Single-quoted property raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"[,]\" );\n\t}, null, \"Array element elision raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"{},[]\" );\n\t}, null, \"Comma expression raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"[]\\n,{}\" );\n\t}, null, \"Newline-containing comma expression raises an error\" );\n\tassert.throws( function() {\n\t\tjQuery.parseJSON( \"\\\"\\\"\\n\\\"\\\"\" );\n\t}, null, \"Automatic semicolon insertion raises an error\" );\n\n\tassert.strictEqual( jQuery.parseJSON( [ 0 ] ), 0, \"Input cast to string\" );\n} );\n\nQUnit[ jQuery.isArray ? \"test\" : \"skip\" ]( \"jQuery.isArray\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.strictEqual( jQuery.isArray, Array.isArray, \"Array.isArray equals jQuery.isArray\" );\n} );\n\nQUnit[ jQuery.nodeName ? \"test\" : \"skip\" ]( \"jQuery.nodeName\", function( assert ) {\n\tassert.expect( 8 );\n\n\tassert.strictEqual( typeof jQuery.nodeName, \"function\", \"jQuery.nodeName is a function\" );\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"div\" ), \"div\" ),\n\t\ttrue,\n\t\t\"Basic usage (true)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"div\" ), \"span\" ),\n\t\tfalse,\n\t\t\"Basic usage (false)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"div\" ), \"DIV\" ),\n\t\ttrue,\n\t\t\"Ignores case in the name parameter\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"section\" ), \"section\" ),\n\t\ttrue,\n\t\t\"Works on HTML5 tags (true)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"section\" ), \"article\" ),\n\t\tfalse,\n\t\t\"Works on HTML5 tags (false)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"custom-element\" ), \"custom-element\" ),\n\t\ttrue,\n\t\t\"Works on custom elements (true)\"\n\t);\n\n\tassert.strictEqual(\n\t\tjQuery.nodeName( document.createElement( \"custom-element\" ), \"my-element\" ),\n\t\tfalse,\n\t\t\"Works on custom elements (true)\"\n\t);\n} );\n\n\nQUnit[ jQuery.type ? \"test\" : \"skip\" ]( \"type\", function( assert ) {\n\tassert.expect( 28 );\n\n\tassert.equal( jQuery.type( null ), \"null\", \"null\" );\n\tassert.equal( jQuery.type( undefined ), \"undefined\", \"undefined\" );\n\tassert.equal( jQuery.type( true ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( false ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( Boolean( true ) ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( 0 ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( 1 ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( Number( 1 ) ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( \"\" ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( \"a\" ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( String( \"a\" ) ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( {} ), \"object\", \"Object\" );\n\tassert.equal( jQuery.type( /foo/ ), \"regexp\", \"RegExp\" );\n\tassert.equal( jQuery.type( new RegExp( \"asdf\" ) ), \"regexp\", \"RegExp\" );\n\tassert.equal( jQuery.type( [ 1 ] ), \"array\", \"Array\" );\n\tassert.equal( jQuery.type( new Date() ), \"date\", \"Date\" );\n\tassert.equal( jQuery.type( new Function( \"return;\" ) ), \"function\", \"Function\" );\n\tassert.equal( jQuery.type( function() {} ), \"function\", \"Function\" );\n\tassert.equal( jQuery.type( new Error() ), \"error\", \"Error\" );\n\tassert.equal( jQuery.type( window ), \"object\", \"Window\" );\n\tassert.equal( jQuery.type( document ), \"object\", \"Document\" );\n\tassert.equal( jQuery.type( document.body ), \"object\", \"Element\" );\n\tassert.equal( jQuery.type( document.createTextNode( \"foo\" ) ), \"object\", \"TextNode\" );\n\tassert.equal( jQuery.type( document.getElementsByTagName( \"*\" ) ), \"object\", \"NodeList\" );\n\n\t// Avoid Lint complaints\n\tvar MyString = String,\n\t\tMyNumber = Number,\n\t\tMyBoolean = Boolean,\n\t\tMyObject = Object;\n\tassert.equal( jQuery.type( new MyBoolean( true ) ), \"boolean\", \"Boolean\" );\n\tassert.equal( jQuery.type( new MyNumber( 1 ) ), \"number\", \"Number\" );\n\tassert.equal( jQuery.type( new MyString( \"a\" ) ), \"string\", \"String\" );\n\tassert.equal( jQuery.type( new MyObject() ), \"object\", \"Object\" );\n} );\n\nQUnit[ jQuery.type && typeof Symbol === \"function\" ? \"test\" : \"skip\" ](\n\t\"type for `Symbol`\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.type( Symbol() ), \"symbol\", \"Symbol\" );\n\tassert.equal( jQuery.type( Object( Symbol() ) ), \"symbol\", \"Symbol\" );\n} );\n\nQUnit[ jQuery.isFunction ? \"test\" : \"skip\" ]( \"isFunction\", function( assert ) {\n\tassert.expect( 20 );\n\n\tvar mystr, myarr, myfunction, fn, obj, nodes, first, input, a;\n\n\t// Make sure that false values return false\n\tassert.ok( !jQuery.isFunction(), \"No Value\" );\n\tassert.ok( !jQuery.isFunction( null ), \"null Value\" );\n\tassert.ok( !jQuery.isFunction( undefined ), \"undefined Value\" );\n\tassert.ok( !jQuery.isFunction( \"\" ), \"Empty String Value\" );\n\tassert.ok( !jQuery.isFunction( 0 ), \"0 Value\" );\n\n\t// Check built-ins\n\tassert.ok( jQuery.isFunction( String ), \"String Function(\" + String + \")\" );\n\tassert.ok( jQuery.isFunction( Array ), \"Array Function(\" + Array + \")\" );\n\tassert.ok( jQuery.isFunction( Object ), \"Object Function(\" + Object + \")\" );\n\tassert.ok( jQuery.isFunction( Function ), \"Function Function(\" + Function + \")\" );\n\n\t// When stringified, this could be misinterpreted\n\tmystr = \"function\";\n\tassert.ok( !jQuery.isFunction( mystr ), \"Function String\" );\n\n\t// When stringified, this could be misinterpreted\n\tmyarr = [ \"function\" ];\n\tassert.ok( !jQuery.isFunction( myarr ), \"Function Array\" );\n\n\t// When stringified, this could be misinterpreted\n\tmyfunction = { \"function\": \"test\" };\n\tassert.ok( !jQuery.isFunction( myfunction ), \"Function Object\" );\n\n\t// Make sure normal functions still work\n\tfn = function() {};\n\tassert.ok( jQuery.isFunction( fn ), \"Normal Function\" );\n\n\tassert.notOk( jQuery.isFunction( Object.create( fn ) ), \"custom Function subclass\" );\n\n\tobj = document.createElement( \"object\" );\n\n\t// Some versions of Firefox and Chrome say this is a function\n\tassert.ok( !jQuery.isFunction( obj ), \"Object Element\" );\n\n\t// Since 1.3, this isn't supported (#2968)\n\t//assert.ok( jQuery.isFunction(obj.getAttribute), \"getAttribute Function\" );\n\n\tnodes = document.body.childNodes;\n\n\t// Safari says this is a function\n\tassert.ok( !jQuery.isFunction( nodes ), \"childNodes Property\" );\n\n\tfirst = document.body.firstChild;\n\n\t// Normal elements are reported ok everywhere\n\tassert.ok( !jQuery.isFunction( first ), \"A normal DOM Element\" );\n\n\tinput = document.createElement( \"input\" );\n\tinput.type = \"text\";\n\tdocument.body.appendChild( input );\n\n\t// Since 1.3, this isn't supported (#2968)\n\t//assert.ok( jQuery.isFunction(input.focus), \"A default function property\" );\n\n\tdocument.body.removeChild( input );\n\n\ta = document.createElement( \"a\" );\n\ta.href = \"some-function\";\n\tdocument.body.appendChild( a );\n\n\t// This serializes with the word 'function' in it\n\tassert.ok( !jQuery.isFunction( a ), \"Anchor Element\" );\n\n\tdocument.body.removeChild( a );\n\n\t// Recursive function calls have lengths and array-like properties\n\tfunction callme( callback ) {\n\t\tfunction fn( response ) {\n\t\t\tcallback( response );\n\t\t}\n\n\t\tassert.ok( jQuery.isFunction( fn ), \"Recursive Function Call\" );\n\n\t\tfn( { some: \"data\" } );\n\t}\n\n\tcallme( function() {\n\t\tcallme( function() {} );\n\t} );\n} );\n\nQUnit[ jQuery.isFunction ? \"test\" : \"skip\" ]( \"isFunction(cross-realm function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar iframe, doc,\n\t\tdone = assert.async();\n\n\t// Functions from other windows should be matched\n\tGlobals.register( \"iframeDone\" );\n\twindow.iframeDone = function( fn, detail ) {\n\t\twindow.iframeDone = undefined;\n\t\tassert.ok( jQuery.isFunction( fn ), \"cross-realm function\" +\n\t\t\t( detail ? \" - \" + detail : \"\" ) );\n\t\tdone();\n\t};\n\n\tiframe = jQuery( \"#qunit-fixture\" )[ 0 ].appendChild( document.createElement( \"iframe\" ) );\n\tdoc = iframe.contentDocument || iframe.contentWindow.document;\n\tdoc.open();\n\tdoc.write( \"<body onload='window.parent.iframeDone( function() {} );'>\" );\n\tdoc.close();\n} );\n\nsupportjQuery.each(\n\t{\n\t\tGeneratorFunction: \"function*() {}\",\n\t\tAsyncFunction: \"async function() {}\"\n\t},\n\tfunction( subclass, source ) {\n\t\tvar fn;\n\t\ttry {\n\t\t\tfn = Function( \"return \" + source )();\n\t\t} catch ( e ) {}\n\n\t\tQUnit[ jQuery.isFunction && fn ? \"test\" : \"skip\" ]( \"isFunction(\" + subclass + \")\",\n\t\t\tfunction( assert ) {\n\t\t\t\tassert.expect( 1 );\n\n\t\t\t\tassert.equal( jQuery.isFunction( fn ), true, source );\n\t\t\t}\n\t\t);\n\t}\n);\n\nQUnit[ jQuery.isFunction && typeof Symbol === \"function\" && Symbol.toStringTag ? \"test\" : \"skip\" ](\n\t\"isFunction(custom @@toStringTag)\",\n\tfunction( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar obj = {},\n\t\t\tfn = function() {};\n\t\tobj[ Symbol.toStringTag ] = \"Function\";\n\t\tfn[ Symbol.toStringTag ] = \"Object\";\n\n\t\tassert.equal( jQuery.isFunction( obj ), false, \"function-mimicking object\" );\n\t\tassert.equal( jQuery.isFunction( fn ), true, \"object-mimicking function\" );\n\t}\n);\n\nQUnit[ jQuery.isWindow ? \"test\" : \"skip\" ]( \"jQuery.isWindow\", function( assert ) {\n\tassert.expect( 14 );\n\n\tassert.ok( jQuery.isWindow( window ), \"window\" );\n\tassert.ok( jQuery.isWindow( document.getElementsByTagName( \"iframe\" )[ 0 ].contentWindow ), \"iframe.contentWindow\" );\n\tassert.ok( !jQuery.isWindow(), \"empty\" );\n\tassert.ok( !jQuery.isWindow( null ), \"null\" );\n\tassert.ok( !jQuery.isWindow( undefined ), \"undefined\" );\n\tassert.ok( !jQuery.isWindow( document ), \"document\" );\n\tassert.ok( !jQuery.isWindow( document.documentElement ), \"documentElement\" );\n\tassert.ok( !jQuery.isWindow( \"\" ), \"string\" );\n\tassert.ok( !jQuery.isWindow( 1 ), \"number\" );\n\tassert.ok( !jQuery.isWindow( true ), \"boolean\" );\n\tassert.ok( !jQuery.isWindow( {} ), \"object\" );\n\tassert.ok( !jQuery.isWindow( { setInterval: function() {} } ), \"fake window\" );\n\tassert.ok( !jQuery.isWindow( /window/ ), \"regexp\" );\n\tassert.ok( !jQuery.isWindow( function() {} ), \"function\" );\n} );\n\nQUnit[ jQuery.camelCase ? \"test\" : \"skip\" ]( \"jQuery.camelCase()\", function( assert ) {\n\n\tvar tests = {\n\t\t\"foo-bar\": \"fooBar\",\n\t\t\"foo-bar-baz\": \"fooBarBaz\",\n\t\t\"girl-u-want\": \"girlUWant\",\n\t\t\"the-4th-dimension\": \"the-4thDimension\",\n\t\t\"-o-tannenbaum\": \"OTannenbaum\",\n\t\t\"-moz-illa\": \"MozIlla\",\n\t\t\"-ms-take\": \"msTake\"\n\t};\n\n\tassert.expect( 7 );\n\n\tjQuery.each( tests, function( key, val ) {\n\t\tassert.equal( jQuery.camelCase( key ), val, \"Converts: \" + key + \" => \" + val );\n\t} );\n} );\n\nQUnit[ jQuery.now ? \"test\" : \"skip\" ]( \"jQuery.now\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.ok( typeof jQuery.now() === \"number\", \"jQuery.now is a function\" );\n} );\n\nQUnit[ jQuery.proxy ? \"test\" : \"skip\" ]( \"jQuery.proxy\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar test2, test3, test4, fn, cb,\n\t\ttest = function() {\n\t\t\tassert.equal( this, thisObject, \"Make sure that scope is set properly.\" );\n\t\t},\n\t\tthisObject = { foo: \"bar\", method: test };\n\n\t// Make sure normal works\n\ttest.call( thisObject );\n\n\t// Basic scoping\n\tjQuery.proxy( test, thisObject )();\n\n\t// Another take on it\n\tjQuery.proxy( thisObject, \"method\" )();\n\n\t// Make sure it doesn't freak out\n\tassert.equal( jQuery.proxy( null, thisObject ), undefined, \"Make sure no function was returned.\" );\n\n\t// Partial application\n\ttest2 = function( a ) {\n\t\tassert.equal( a, \"pre-applied\", \"Ensure arguments can be pre-applied.\" );\n\t};\n\tjQuery.proxy( test2, null, \"pre-applied\" )();\n\n\t// Partial application w/ normal arguments\n\ttest3 = function( a, b ) {\n\t\tassert.equal( b, \"normal\", \"Ensure arguments can be pre-applied and passed as usual.\" );\n\t};\n\tjQuery.proxy( test3, null, \"pre-applied\" )( \"normal\" );\n\n\t// Test old syntax\n\ttest4 = { \"meth\": function( a ) {\n\t\t\tassert.equal( a, \"boom\", \"Ensure old syntax works.\" );\n\t\t} };\n\tjQuery.proxy( test4, \"meth\" )( \"boom\" );\n\n\t// jQuery 1.9 improved currying with `this` object\n\tfn = function() {\n\t\tassert.equal( Array.prototype.join.call( arguments, \",\" ), \"arg1,arg2,arg3\", \"args passed\" );\n\t\tassert.equal( this.foo, \"bar\", \"this-object passed\" );\n\t};\n\tcb = jQuery.proxy( fn, null, \"arg1\", \"arg2\" );\n\tcb.call( thisObject, \"arg3\" );\n} );\n\nQUnit[ jQuery.isNumeric ? \"test\" : \"skip\" ]( \"isNumeric\", function( assert ) {\n\tassert.expect( 43 );\n\n\tvar t = jQuery.isNumeric,\n\t\tToString = function( value ) {\n\t\t\tthis.toString = function() {\n\t\t\t\treturn String( value );\n\t\t\t};\n\t\t};\n\n\tassert.ok( t( \"-10\" ), \"Negative integer string\" );\n\tassert.ok( t( \"0\" ), \"Zero string\" );\n\tassert.ok( t( \"5\" ), \"Positive integer string\" );\n\tassert.ok( t( -16 ), \"Negative integer number\" );\n\tassert.ok( t( 0 ), \"Zero integer number\" );\n\tassert.ok( t( 32 ), \"Positive integer number\" );\n\tassert.ok( t( \"-1.6\" ), \"Negative floating point string\" );\n\tassert.ok( t( \"4.536\" ), \"Positive floating point string\" );\n\tassert.ok( t( -2.6 ), \"Negative floating point number\" );\n\tassert.ok( t( 3.1415 ), \"Positive floating point number\" );\n\tassert.ok( t( 1.5999999999999999 ), \"Very precise floating point number\" );\n\tassert.ok( t( 8e5 ), \"Exponential notation\" );\n\tassert.ok( t( \"123e-2\" ), \"Exponential notation string\" );\n\tassert.ok( t( \"040\" ), \"Legacy octal integer literal string\" );\n\tassert.ok( t( \"0xFF\" ), \"Hexadecimal integer literal string (0x...)\" );\n\tassert.ok( t( \"0Xba\" ), \"Hexadecimal integer literal string (0X...)\" );\n\tassert.ok( t( 0xFFF ), \"Hexadecimal integer literal\" );\n\n\tif ( +\"0b1\" === 1 ) {\n\t\tassert.ok( t( \"0b111110\" ), \"Binary integer literal string (0b...)\" );\n\t\tassert.ok( t( \"0B111110\" ), \"Binary integer literal string (0B...)\" );\n\t} else {\n\t\tassert.ok( true, \"Browser does not support binary integer literal (0b...)\" );\n\t\tassert.ok( true, \"Browser does not support binary integer literal (0B...)\" );\n\t}\n\n\tif ( +\"0o1\" === 1 ) {\n\t\tassert.ok( t( \"0o76\" ), \"Octal integer literal string (0o...)\" );\n\t\tassert.ok( t( \"0O76\" ), \"Octal integer literal string (0O...)\" );\n\t} else {\n\t\tassert.ok( true, \"Browser does not support octal integer literal (0o...)\" );\n\t\tassert.ok( true, \"Browser does not support octal integer literal (0O...)\" );\n\t}\n\n\tassert.equal( t( new ToString( \"42\" ) ), false, \"Only limited to strings and numbers\" );\n\tassert.equal( t( \"\" ), false, \"Empty string\" );\n\tassert.equal( t( \"        \" ), false, \"Whitespace characters string\" );\n\tassert.equal( t( \"\\t\\t\" ), false, \"Tab characters string\" );\n\tassert.equal( t( \"abcdefghijklm1234567890\" ), false, \"Alphanumeric character string\" );\n\tassert.equal( t( \"xabcdefx\" ), false, \"Non-numeric character string\" );\n\tassert.equal( t( true ), false, \"Boolean true literal\" );\n\tassert.equal( t( false ), false, \"Boolean false literal\" );\n\tassert.equal( t( \"bcfed5.2\" ), false, \"Number with preceding non-numeric characters\" );\n\tassert.equal( t( \"7.2acdgs\" ), false, \"Number with trailing non-numeric characters\" );\n\tassert.equal( t( undefined ), false, \"Undefined value\" );\n\tassert.equal( t( null ), false, \"Null value\" );\n\tassert.equal( t( NaN ), false, \"NaN value\" );\n\tassert.equal( t( Infinity ), false, \"Infinity primitive\" );\n\tassert.equal( t( Number.POSITIVE_INFINITY ), false, \"Positive Infinity\" );\n\tassert.equal( t( Number.NEGATIVE_INFINITY ), false, \"Negative Infinity\" );\n\tassert.equal( t( new ToString( \"Devo\" ) ), false, \"Custom .toString returning non-number\" );\n\tassert.equal( t( {} ), false, \"Empty object\" );\n\tassert.equal( t( [] ), false, \"Empty array\" );\n\tassert.equal( t( [ 42 ] ), false, \"Array with one number\" );\n\tassert.equal( t( function() {} ), false, \"Instance of a function\" );\n\tassert.equal( t( new Date() ), false, \"Instance of a Date\" );\n} );\n\nQUnit[ jQuery.isNumeric && typeof Symbol === \"function\" ? \"test\" : \"skip\" ](\n\t\"isNumeric(Symbol)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.isNumeric( Symbol() ), false, \"Symbol\" );\n\tassert.equal( jQuery.isNumeric( Object( Symbol() ) ), false, \"Symbol inside an object\" );\n} );\n\nQUnit[ jQuery.trim ? \"test\" : \"skip\" ]( \"trim\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar nbsp = String.fromCharCode( 160 );\n\n\tassert.equal( jQuery.trim( \"hello  \" ), \"hello\", \"trailing space\" );\n\tassert.equal( jQuery.trim( \"  hello\" ), \"hello\", \"leading space\" );\n\tassert.equal( jQuery.trim( \"  hello   \" ), \"hello\", \"space on both sides\" );\n\tassert.equal( jQuery.trim( \"  \" + nbsp + \"hello  \" + nbsp + \" \" ), \"hello\", \"&nbsp;\" );\n\n\tassert.equal( jQuery.trim(), \"\", \"Nothing in.\" );\n\tassert.equal( jQuery.trim( undefined ), \"\", \"Undefined\" );\n\tassert.equal( jQuery.trim( null ), \"\", \"Null\" );\n\tassert.equal( jQuery.trim( 5 ), \"5\", \"Number\" );\n\tassert.equal( jQuery.trim( false ), \"false\", \"Boolean\" );\n\n\tassert.equal( jQuery.trim( \" \" ), \"\", \"space should be trimmed\" );\n\tassert.equal( jQuery.trim( \"ipad\\xA0\" ), \"ipad\", \"nbsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF\" ), \"\", \"zwsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF \\xA0! | \\uFEFF\" ), \"! |\", \"leading/trailing should be trimmed\" );\n} );\n", "( function() {\n\nif ( !jQuery.fn.width ) {\n\treturn;\n}\n\nQUnit.module( \"dimensions\", { afterEach: moduleTeardown } );\n\nfunction pass( val ) {\n\treturn val;\n}\n\nfunction fn( val ) {\n\treturn function() {\n\t\treturn val;\n\t};\n}\n\n/*\n\t======== local reference =======\n\tpass and fn can be used to test passing functions to setters\n\tSee testWidth below for an example\n\n\tpass( value, assert );\n\t\tThis function returns whatever value is passed in\n\n\tfn( value, assert );\n\t\tReturns a function that returns the value\n*/\n\nfunction testWidth( val, assert ) {\n\tassert.expect( 9 );\n\tvar $div, $empty;\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.width( val( 30 ) );\n\tassert.equal( $div.width(), 30, \"Test set to 30 correctly\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.width(), 30, \"Test hidden div\" );\n\t$div.css( \"display\", \"\" );\n\t$div.width( val( -1 ) ); // handle negative numbers by setting to 0 #11604\n\tassert.equal( $div.width(), 0, \"Test negative width normalized to 0\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.width(), 0, \"Test padding specified with pixels\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.width(), 0, \"Test border specified with pixels\" );\n\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\" } );\n\n\tjQuery( \"#nothiddendivchild\" ).css( { \"width\": 20, \"padding\": \"3px\", \"border\": \"2px solid #fff\" } );\n\tassert.equal( jQuery( \"#nothiddendivchild\" ).width(), 20, \"Test child width with border and padding\" );\n\tjQuery( \"#nothiddendiv, #nothiddendivchild\" ).css( { \"border\": \"\", \"padding\": \"\", \"width\": \"\" } );\n\n\t$empty = jQuery();\n\tassert.equal( $empty.width( val( 10 ) ), $empty, \"Make sure that setting a width on an empty set returns the set.\" );\n\tassert.strictEqual( $empty.width(), undefined, \"Make sure 'undefined' is returned on an empty set\" );\n\n\tassert.equal( jQuery( window ).width(), document.documentElement.clientWidth, \"Window width is equal to width reported by window/document.\" );\n}\n\nQUnit.test( \"width()\", function( assert ) {\n\ttestWidth( pass, assert );\n} );\n\nQUnit.test( \"width(Function)\", function( assert ) {\n\ttestWidth( fn, assert );\n} );\n\nQUnit.test( \"width(Function(args))\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"#nothiddendiv\" );\n\t$div.width( 30 ).width( function( i, width ) {\n\t\tassert.equal( width, 30, \"Make sure previous value is correct.\" );\n\t\treturn width + 1;\n\t} );\n\n\tassert.equal( $div.width(), 31, \"Make sure value was modified correctly.\" );\n} );\n\nfunction testHeight( val, assert ) {\n\tassert.expect( 9 );\n\n\tvar $div, blah;\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.height( val( 30 ) );\n\tassert.equal( $div.height(), 30, \"Test set to 30 correctly\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.height(), 30, \"Test hidden div\" );\n\t$div.css( \"display\", \"\" );\n\t$div.height( val( -1 ) ); // handle negative numbers by setting to 0 #11604\n\tassert.equal( $div.height(), 0, \"Test negative height normalized to 0\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.height(), 0, \"Test padding specified with pixels\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.height(), 0, \"Test border specified with pixels\" );\n\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"height\": \"1px\" } );\n\n\tjQuery( \"#nothiddendivchild\" ).css( { \"height\": 20, \"padding\": \"3px\", \"border\": \"2px solid #fff\" } );\n\tassert.equal( jQuery( \"#nothiddendivchild\" ).height(), 20, \"Test child height with border and padding\" );\n\tjQuery( \"#nothiddendiv, #nothiddendivchild\" ).css( { \"border\": \"\", \"padding\": \"\", \"height\": \"\" } );\n\n\tblah = jQuery( \"blah\" );\n\tassert.equal( blah.height( val( 10 ) ), blah, \"Make sure that setting a height on an empty set returns the set.\" );\n\tassert.strictEqual( blah.height(), undefined, \"Make sure 'undefined' is returned on an empty set\" );\n\n\tassert.equal( jQuery( window ).height(), document.documentElement.clientHeight, \"Window width is equal to width reported by window/document.\" );\n}\n\nQUnit.test( \"height()\", function( assert ) {\n\ttestHeight( pass, assert );\n} );\n\nQUnit.test( \"height(Function)\", function( assert ) {\n\ttestHeight( fn, assert );\n} );\n\nQUnit.test( \"height(Function(args))\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"#nothiddendiv\" );\n\t$div.height( 30 ).height( function( i, height ) {\n\t\tassert.equal( height, 30, \"Make sure previous value is correct.\" );\n\t\treturn height + 1;\n\t} );\n\n\tassert.equal( $div.height(), 31, \"Make sure value was modified correctly.\" );\n} );\n\nQUnit.test( \"innerWidth()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document );\n\n\tassert.equal( jQuery( window ).innerWidth(), $win.width(), \"Test on window\" );\n\tassert.equal( jQuery( document ).innerWidth(), $doc.width(), \"Test on document\" );\n\tassert.strictEqual( jQuery().innerWidth(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( {\n\t\t\"margin\": 10,\n\t\t\"border\": \"2px solid #fff\",\n\t\t\"width\": 30\n\t} );\n\n\tassert.equal( $div.innerWidth(), 30, \"Test with margin and border\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.innerWidth(), 70, \"Test with margin, border and padding\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.innerWidth(), 70, \"Test hidden div\" );\n\n\t// reset styles\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.innerWidth(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"innerHeight()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document );\n\n\tassert.equal( jQuery( window ).innerHeight(), $win.height(), \"Test on window\" );\n\tassert.equal( jQuery( document ).innerHeight(), $doc.height(), \"Test on document\" );\n\tassert.strictEqual( jQuery().innerHeight(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( {\n\t\t\"margin\": 10,\n\t\t\"border\": \"2px solid #fff\",\n\t\t\"height\": 30\n\t} );\n\n\tassert.equal( $div.innerHeight(), 30, \"Test with margin and border\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.innerHeight(), 70, \"Test with margin, border and padding\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.innerHeight(), 70, \"Test hidden div\" );\n\n\t// reset styles\n\t$div.css( { \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.innerHeight(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"outerWidth()\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document ),\n\t\twinwidth = $win.prop( \"innerWidth\" );\n\n\tassert.equal( jQuery( window ).outerWidth(), winwidth, \"Test on window without margin option\" );\n\tassert.equal( jQuery( window ).outerWidth( true ), winwidth, \"Test on window with margin option\" );\n\tassert.equal( jQuery( document ).outerWidth(), $doc.width(), \"Test on document without margin option\" );\n\tassert.equal( jQuery( document ).outerWidth( true ), $doc.width(), \"Test on document with margin option\" );\n\tassert.strictEqual( jQuery().outerWidth(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( \"width\", 30 );\n\n\tassert.equal( $div.outerWidth(), 30, \"Test with only width set\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.outerWidth(), 70, \"Test with padding\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.outerWidth(), 74, \"Test with padding and border\" );\n\t$div.css( \"margin\", \"10px\" );\n\tassert.equal( $div.outerWidth(), 74, \"Test with padding, border and margin without margin option\" );\n\t$div.css( \"position\", \"absolute\" );\n\tassert.equal( $div.outerWidth( true ), 94, \"Test with padding, border and margin with margin option\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.outerWidth( true ), 94, \"Test hidden div with padding, border and margin with margin option\" );\n\n\t// reset styles\n\t$div.css( { \"position\": \"\", \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.outerWidth(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"outerHeight()\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar $div, div,\n\t\t$win = jQuery( window ),\n\t\t$doc = jQuery( document ),\n\t\twinheight = $win.prop( \"innerHeight\" );\n\n\tassert.equal( jQuery( window ).outerHeight(), winheight, \"Test on window without margin option\" );\n\tassert.equal( jQuery( window ).outerHeight( true ), winheight, \"Test on window with margin option\" );\n\tassert.equal( jQuery( document ).outerHeight(), $doc.height(), \"Test on document without margin option\" );\n\tassert.equal( jQuery( document ).outerHeight( true ), $doc.height(), \"Test on document with margin option\" );\n\tassert.strictEqual( jQuery().outerHeight(), undefined, \"Test on empty set\" );\n\n\t$div = jQuery( \"#nothiddendiv\" );\n\t$div.css( \"height\", 30 );\n\n\tassert.equal( $div.outerHeight(), 30, \"Test with only height set\" );\n\t$div.css( \"padding\", \"20px\" );\n\tassert.equal( $div.outerHeight(), 70, \"Test with padding\" );\n\t$div.css( \"border\", \"2px solid #fff\" );\n\tassert.equal( $div.outerHeight(), 74, \"Test with padding and border\" );\n\t$div.css( \"margin\", \"10px\" );\n\tassert.equal( $div.outerHeight(), 74, \"Test with padding, border and margin without margin option\" );\n\t$div.css( \"position\", \"absolute\" );\n\tassert.equal( $div.outerHeight( true ), 94, \"Test with padding, border and margin with margin option\" );\n\t$div.css( \"display\", \"none\" );\n\tassert.equal( $div.outerHeight( true ), 94, \"Test hidden div with padding, border and margin with margin option\" );\n\n\t// reset styles\n\t$div.css( { \"position\": \"\", \"display\": \"\", \"border\": \"\", \"padding\": \"\", \"width\": \"\", \"height\": \"\" } );\n\n\tdiv = jQuery( \"<div>\" );\n\n\t// Temporarily require 0 for backwards compat - should be auto\n\tassert.equal( div.outerWidth(), 0, \"Make sure that disconnected nodes are handled.\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #9441 #9300\", function( assert ) {\n\tassert.expect( 16 );\n\n\t// setup html\n\tvar $divNormal = jQuery( \"<div>\" ).css( { \"width\": \"100px\", \"height\": \"100px\", \"border\": \"10px solid white\", \"padding\": \"2px\", \"margin\": \"3px\" } ),\n\t\t$divChild = $divNormal.clone(),\n\t\t$divUnconnected = $divNormal.clone(),\n\t\t$divHiddenParent = jQuery( \"<div>\" ).css( \"display\", \"none\" ).append( $divChild ).appendTo( \"body\" );\n\t$divNormal.appendTo( \"body\" );\n\n\t// tests that child div of a hidden div works the same as a normal div\n\tassert.equal( $divChild.width(), $divNormal.width(), \"child of a hidden element width() is wrong see #9441\" );\n\tassert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), \"child of a hidden element innerWidth() is wrong see #9441\" );\n\tassert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), \"child of a hidden element outerWidth() is wrong see #9441\" );\n\tassert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), \"child of a hidden element outerWidth( true ) is wrong see #9300\" );\n\n\tassert.equal( $divChild.height(), $divNormal.height(), \"child of a hidden element height() is wrong see #9441\" );\n\tassert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), \"child of a hidden element innerHeight() is wrong see #9441\" );\n\tassert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), \"child of a hidden element outerHeight() is wrong see #9441\" );\n\tassert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), \"child of a hidden element outerHeight( true ) is wrong see #9300\" );\n\n\t// tests that child div of an unconnected div works the same as a normal div\n\tassert.equal( $divUnconnected.width(), $divNormal.width(), \"unconnected element width() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), \"unconnected element innerWidth() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), \"unconnected element outerWidth() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), \"unconnected element outerWidth( true ) is wrong see #9300\" );\n\n\tassert.equal( $divUnconnected.height(), $divNormal.height(), \"unconnected element height() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), \"unconnected element innerHeight() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), \"unconnected element outerHeight() is wrong see #9441\" );\n\tassert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), \"unconnected element outerHeight( true ) is wrong see #9300\" );\n\n\t// teardown html\n\t$divHiddenParent.remove();\n\t$divNormal.remove();\n} );\n\nQUnit.test( \"getting dimensions shouldn't modify runtimeStyle see #9233\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tdiv = $div.get( 0 ),\n\t\truntimeStyle = div.runtimeStyle;\n\n\tif ( runtimeStyle ) {\n\t\tdiv.runtimeStyle.marginLeft = \"12em\";\n\t\tdiv.runtimeStyle.left = \"11em\";\n\t}\n\n\t$div.outerWidth( true );\n\n\tif ( runtimeStyle ) {\n\t\tassert.equal( div.runtimeStyle.left, \"11em\", \"getting dimensions modifies runtimeStyle, see #9233\" );\n\t} else {\n\t\tassert.ok( true, \"this browser doesn't support runtimeStyle, see #9233\" );\n\t}\n\n\t$div.remove();\n} );\n\nQUnit.test( \"table dimensions\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar table = jQuery( \"<table><colgroup><col></col><col></col></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\" ).appendTo( \"#qunit-fixture\" ),\n\t\ttdElem = table.find( \"td\" ).first(),\n\t\tcolElem = table.find( \"col\" ).first().width( 300 );\n\n\ttable.find( \"td\" ).css( { \"margin\": 0, \"padding\": 0 } );\n\n\tassert.equal( tdElem.width(), tdElem.width(), \"width() doesn't alter dimension values of empty cells, see #11293\" );\n\tassert.equal( colElem.width(), 300, \"col elements have width(), see #12243\" );\n} );\n\nQUnit.test( \"SVG dimensions (basic content-box)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar svg = jQuery( \"<svg style='width: 100px; height: 100px;'></svg>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( svg.width(), 100 );\n\tassert.equal( svg.height(), 100 );\n\n\tassert.equal( svg.innerWidth(), 100 );\n\tassert.equal( svg.innerHeight(), 100 );\n\n\tassert.equal( svg.outerWidth(), 100 );\n\tassert.equal( svg.outerHeight(), 100 );\n\n\tassert.equal( svg.outerWidth( true ), 100 );\n\tassert.equal( svg.outerHeight( true ), 100 );\n\n\tsvg.remove();\n} );\n\nQUnit.test( \"SVG dimensions (content-box)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar svg = jQuery( \"<svg style='width: 100px; height: 100px; box-sizing: content-box; border: 1px solid white; padding: 2px; margin: 3px'></svg>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( svg.width(), 100 );\n\tassert.equal( svg.height(), 100 );\n\n\tassert.equal( svg.innerWidth(), 104 );\n\tassert.equal( svg.innerHeight(), 104 );\n\n\tassert.equal( svg.outerWidth(), 106 );\n\tassert.equal( svg.outerHeight(), 106 );\n\n\tassert.equal( svg.outerWidth( true ), 112 );\n\tassert.equal( svg.outerHeight( true ), 112 );\n\n\tsvg.remove();\n} );\n\nQUnit.test( \"SVG dimensions (border-box)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar svg = jQuery( \"<svg style='width: 100px; height: 100px; box-sizing: border-box; border: 1px solid white; padding: 2px; margin: 3px'></svg>\" ).appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( svg.width(), 94, \"width\" );\n\tassert.equal( svg.height(), 94, \"height\" );\n\n\tassert.equal( svg.innerWidth(), 98, \"innerWidth\" );\n\tassert.equal( svg.innerHeight(), 98, \"innerHeight\" );\n\n\tassert.equal( svg.outerWidth(), 100, \"outerWidth\" );\n\tassert.equal( svg.outerHeight(), 100, \"outerHeight\" );\n\n\tassert.equal( svg.outerWidth( true ), 106, \"outerWidth( true )\" );\n\tassert.equal( svg.outerHeight( true ), 106, \"outerHeight( true )\" );\n\n\tsvg.remove();\n} );\n\nQUnit.test( \"box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #10413\", function( assert ) {\n\tassert.expect( 16 );\n\n\t// setup html\n\tvar $divNormal = jQuery( \"<div>\" ).css( { \"boxSizing\": \"border-box\", \"width\": \"100px\", \"height\": \"100px\", \"border\": \"10px solid white\", \"padding\": \"2px\", \"margin\": \"3px\" } ),\n\t\t$divChild = $divNormal.clone(),\n\t\t$divUnconnected = $divNormal.clone(),\n\t\t$divHiddenParent = jQuery( \"<div>\" ).css( \"display\", \"none\" ).append( $divChild ).appendTo( \"body\" );\n\t$divNormal.appendTo( \"body\" );\n\n\t// tests that child div of a hidden div works the same as a normal div\n\tassert.equal( $divChild.width(), $divNormal.width(), \"child of a hidden element width() is wrong see #10413\" );\n\tassert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), \"child of a hidden element innerWidth() is wrong see #10413\" );\n\tassert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), \"child of a hidden element outerWidth() is wrong see #10413\" );\n\tassert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), \"child of a hidden element outerWidth( true ) is wrong see #10413\" );\n\n\tassert.equal( $divChild.height(), $divNormal.height(), \"child of a hidden element height() is wrong see #10413\" );\n\tassert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), \"child of a hidden element innerHeight() is wrong see #10413\" );\n\tassert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), \"child of a hidden element outerHeight() is wrong see #10413\" );\n\tassert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), \"child of a hidden element outerHeight( true ) is wrong see #10413\" );\n\n\t// tests that child div of an unconnected div works the same as a normal div\n\tassert.equal( $divUnconnected.width(), $divNormal.width(), \"unconnected element width() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), \"unconnected element innerWidth() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), \"unconnected element outerWidth() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), \"unconnected element outerWidth( true ) is wrong see #10413\" );\n\n\tassert.equal( $divUnconnected.height(), $divNormal.height(), \"unconnected element height() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), \"unconnected element innerHeight() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), \"unconnected element outerHeight() is wrong see #10413\" );\n\tassert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), \"unconnected element outerHeight( true ) is wrong see #10413\" );\n\n\t// teardown html\n\t$divHiddenParent.remove();\n\t$divNormal.remove();\n} );\n\nQUnit.test( \"passing undefined is a setter #5571\", function( assert ) {\n\tassert.expect( 4 );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).height( 30 ).height( undefined ).height(), 30, \".height(undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).height( 30 ).innerHeight( undefined ).height(), 30, \".innerHeight(undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).height( 30 ).outerHeight( undefined ).height(), 30, \".outerHeight(undefined) is chainable (#5571)\" );\n\tassert.equal( jQuery( \"#nothiddendiv\" ).width( 30 ).width( undefined ).width(), 30, \".width(undefined) is chainable (#5571)\" );\n} );\n\nQUnit.test( \"setters with and without box-sizing:border-box\", function( assert ) {\n\tassert.expect( 120 );\n\n\tvar parent = jQuery( \"#foo\" ).css( { width: \"200px\", height: \"200px\", \"font-size\": \"16px\" } ),\n\t\tel_bb = jQuery( \"<div style='margin:5px;padding:1px;border:2px solid black;box-sizing:border-box;'></div>\" ).appendTo( parent ),\n\t\tel = jQuery( \"<div style='margin:5px;padding:1px;border:2px solid black;'></div>\" ).appendTo( parent ),\n\t\tel_bb_np = jQuery( \"<div style='margin:5px; padding:0px; border:0px solid green;box-sizing:border-box;'></div>\" ).appendTo( parent ),\n\t\tel_np = jQuery( \"<div style='margin:5px; padding:0px; border:0px solid green;'></div>\" ).appendTo( parent );\n\n\tjQuery.each( {\n\t\t\"number\": { set: 100, expected: 100 },\n\t\t\"em\": { set: \"10em\", expected: 160 },\n\t\t\"percentage\": { set: \"50%\", expected: 100 }\n\t}, function( units, values ) {\n\t\tassert.equal( el_bb.width( values.set ).width(), values.expected, \"test border-box width(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.innerWidth( values.set ).width(), values.expected - 2, \"test border-box innerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerWidth( values.set ).width(), values.expected - 6, \"test border-box outerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerWidth( values.set, false ).width(), values.expected - 6, \"test border-box outerWidth(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb.outerWidth( values.set, true ).width(), values.expected - 16, \"test border-box outerWidth(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_bb.height( values.set ).height(), values.expected, \"test border-box height(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.innerHeight( values.set ).height(), values.expected - 2, \"test border-box innerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerHeight( values.set ).height(), values.expected - 6, \"test border-box outerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb.outerHeight( values.set, false ).height(), values.expected - 6, \"test border-box outerHeight(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb.outerHeight( values.set, true ).height(), values.expected - 16, \"test border-box outerHeight(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el.width( values.set ).width(), values.expected, \"test non-border-box width(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.innerWidth( values.set ).width(), values.expected - 2, \"test non-border-box innerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerWidth( values.set ).width(), values.expected - 6, \"test non-border-box outerWidth(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerWidth( values.set, false ).width(), values.expected - 6, \"test non-border-box outerWidth(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el.outerWidth( values.set, true ).width(), values.expected - 16, \"test non-border-box outerWidth(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el.height( values.set ).height(), values.expected, \"test non-border-box height(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.innerHeight( values.set ).height(), values.expected - 2, \"test non-border-box innerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerHeight( values.set ).height(), values.expected - 6, \"test non-border-box outerHeight(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el.outerHeight( values.set, false ).height(), values.expected - 6, \"test non-border-box outerHeight(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el.outerHeight( values.set, true ).height(), values.expected - 16, \"test non-border-box outerHeight(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_bb_np.width( values.set ).width(), values.expected, \"test border-box width and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.innerWidth( values.set ).width(), values.expected, \"test border-box innerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerWidth( values.set ).width(), values.expected, \"test border-box outerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerWidth( values.set, false ).width(), values.expected, \"test border-box outerWidth and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerWidth( values.set, true ).width(), values.expected - 10, \"test border-box outerWidth and negative padding(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_bb_np.height( values.set ).height(), values.expected, \"test border-box height  and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.innerHeight( values.set ).height(), values.expected, \"test border-box innerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerHeight( values.set ).height(), values.expected, \"test border-box outerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerHeight( values.set, false ).height(), values.expected, \"test border-box outerHeight and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_bb_np.outerHeight( values.set, true ).height(), values.expected - 10, \"test border-box outerHeight and negative padding(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_np.width( values.set ).width(), values.expected, \"test non-border-box width  and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.innerWidth( values.set ).width(), values.expected, \"test non-border-box innerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerWidth( values.set ).width(), values.expected, \"test non-border-box outerWidth and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerWidth( values.set, false ).width(), values.expected, \"test non-border-box outerWidth and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_np.outerWidth( values.set, true ).width(), values.expected - 10, \"test non-border-box outerWidth and negative padding(\" + units + \", true) by roundtripping\" );\n\n\t\tassert.equal( el_np.height( values.set ).height(), values.expected, \"test non-border-box height and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.innerHeight( values.set ).height(), values.expected, \"test non-border-box innerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerHeight( values.set ).height(), values.expected, \"test non-border-box outerHeight and negative padding(\" + units + \") by roundtripping\" );\n\t\tassert.equal( el_np.outerHeight( values.set, false ).height(), values.expected, \"test non-border-box outerHeight and negative padding(\" + units + \", false) by roundtripping\" );\n\t\tassert.equal( el_np.outerHeight( values.set, true ).height(), values.expected - 10, \"test non-border-box outerHeight and negative padding(\" + units + \", true) by roundtripping\" );\n\t} );\n} );\n\ntestIframe(\n\t\"window vs. large document\",\n\t\"dimensions/documentLarge.html\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tassert.expect( 2 );\n\n\t\tassert.ok( jQuery( document ).height() > jQuery( window ).height(), \"document height is larger than window height\" );\n\t\tassert.ok( jQuery( document ).width() > jQuery( window ).width(), \"document width is larger than window width\" );\n\t}\n);\n\nQUnit.test( \"allow modification of coordinates argument (gh-1848)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar offsetTop,\n\t\telement = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\telement.offset( function( index, coords ) {\n\t\tcoords.top = 100;\n\n\t\treturn coords;\n\t} );\n\n\toffsetTop = element.offset().top;\n\tassert.ok( Math.abs( offsetTop - 100 ) < 0.02,\n\t\t\"coordinates are modified (got offset.top: \" +  offsetTop + \")\" );\n} );\n\nQUnit.test( \"outside view position (gh-2836)\", function( assert ) {\n\n\t// This test ported from gh-2836 example\n\tassert.expect( 1 );\n\n\tvar parent,\n\t\thtml = [\n\t\t\"<div id=div-gh-2836>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\t\"<div></div>\",\n\t\t\"</div>\"\n\t].join( \"\" ),\n\tstop = assert.async();\n\n\tparent = jQuery( html );\n\tparent.appendTo( \"#qunit-fixture\" );\n\n\tparent.one( \"scroll\", function() {\n\t\tvar pos = parent.find( \"div\" ).eq( 3 ).position();\n\n\t\tassert.strictEqual( pos.top, -100 );\n\t\tstop();\n\t} );\n\n\tparent.scrollTop( 400 );\n} );\n\nQUnit.test( \"width/height on element with transform (gh-3193)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $elem = jQuery( \"<div style='width: 200px; height: 200px; transform: scale(2);'></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( $elem.width(), 200, \"Width ignores transforms\" );\n\tassert.equal( $elem.height(), 200, \"Height ignores transforms\" );\n} );\n\nQUnit.test( \"width/height on an inline element with no explicitly-set dimensions (gh-3571)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar $elem = jQuery( \"<span style='border: 2px solid black;padding: 1px;margin: 3px;'>Hello, I'm some text.</span>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery.each( [ \"Width\", \"Height\" ], function( i, method ) {\n\t\tvar val = $elem[ method.toLowerCase() ]();\n\t\tassert.notEqual( val, 0, method + \" should not be zero on inline element.\" );\n\t\tassert.equal( $elem[ \"inner\" + method ](), val + 2, \"inner\" + method + \" should include padding\" );\n\t\tassert.equal( $elem[ \"outer\" + method ](), val + 6, \"outer\" + method + \" should include padding and border\" );\n\t\tassert.equal( $elem[ \"outer\" + method ]( true ), val + 12, \"outer\" + method + \"(true) should include padding, border, and margin\" );\n\t} );\n} );\n\nQUnit.test( \"width/height on an inline element with percentage dimensions (gh-3611)\",\n\tfunction( assert ) {\n\t\tassert.expect( 4 );\n\n\t\tjQuery( \"<div id='gh3611' style='width: 100px;'>\" +\n\t\t\t\"<span style='width: 100%; padding: 0 5px'>text</span>\" +\n\t\t\"</div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\tvar $elem = jQuery( \"#gh3611 span\" ),\n\t\t\tactualWidth = $elem[ 0 ].getBoundingClientRect().width,\n\t\t\tmarginWidth = $elem.outerWidth( true ),\n\t\t\tborderWidth = $elem.outerWidth(),\n\t\t\tpaddingWidth = $elem.innerWidth(),\n\t\t\tcontentWidth = $elem.width();\n\n\t\tassert.equal( Math.round( borderWidth ), Math.round( actualWidth ),\n\t\t\t\".outerWidth(): \" + borderWidth + \" approximates \" + actualWidth );\n\t\tassert.equal( marginWidth, borderWidth, \".outerWidth(true) matches .outerWidth()\" );\n\t\tassert.equal( paddingWidth, borderWidth, \".innerWidth() matches .outerWidth()\" );\n\t\tassert.equal( contentWidth, borderWidth - 10, \".width() excludes padding\" );\n\t}\n);\n\n// Support: Firefox 70+\n// Firefox 70 & newer fail this test but the issue there is more profound - Firefox doesn't\n// subtract borders from table row computed widths.\n// See https://github.com/jquery/jquery/issues/4529\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=1590837\n// See https://github.com/w3c/csswg-drafts/issues/4444\nQUnit[ /firefox/i.test( navigator.userAgent ) ? \"skip\" : \"test\" ](\n\t\"width/height on a table row with phantom borders (gh-3698)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tjQuery( \"<table id='gh3698' style='border-collapse: separate; border-spacing: 0;'><tbody>\" +\n\t\t\"<tr style='margin: 0; border: 10px solid black; padding: 0'>\" +\n\t\t\t\"<td style='margin: 0; border: 0; padding: 0; height: 42px; width: 42px;'></td>\" +\n\t\t\"</tr>\" +\n\t\"</tbody></table>\" ).appendTo( \"#qunit-fixture\" );\n\n\tvar $elem = jQuery( \"#gh3698 tr\" );\n\n\tjQuery.each( [ \"Width\", \"Height\" ], function( i, method ) {\n\t\tassert.equal( $elem[ \"outer\" + method ](), 42,\n\t\t\t\"outer\" + method + \" should match content dimensions\" );\n\t\tassert.equal( $elem[ \"outer\" + method ]( true ), 42,\n\t\t\t\"outer\" + method + \"(true) should match content dimensions\" );\n\t} );\n} );\n\nQUnit.test( \"interaction with scrollbars (gh-3589)\", function( assert ) {\n\tassert.expect( 48 );\n\n\tvar i,\n\t\tsuffix = \"\",\n\t\tupdater = function( adjustment ) {\n\t\t\treturn function( i, old ) {\n\t\t\t\treturn old + adjustment;\n\t\t\t};\n\t\t},\n\t\tparent = jQuery( \"<div></div>\" )\n\t\t\t.css( { position: \"absolute\", width: \"1000px\", height: \"1000px\" } )\n\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\tfraction = jQuery.support.boxSizingReliable() ?\n\t\t\tjQuery( \"<div style='width:4.5px;'/>\" ).appendTo( parent ).width() % 1 :\n\t\t\t0,\n\t\tborderWidth = 1,\n\t\tpadding = 2,\n\t\tsize = 100 + fraction,\n\t\tplainBox = jQuery( \"<div></div>\" )\n\t\t\t.css( {\n\t\t\t\t\"box-sizing\": \"content-box\",\n\t\t\t\tposition: \"absolute\",\n\t\t\t\toverflow: \"scroll\",\n\t\t\t\twidth: size + \"px\",\n\t\t\t\theight: size + \"px\"\n\t\t\t} ),\n\t\tcontentBox = plainBox\n\t\t\t.clone()\n\t\t\t.css( {\n\t\t\t\tborder: borderWidth + \"px solid blue\",\n\t\t\t\tpadding: padding + \"px\"\n\t\t\t} ),\n\t\tborderBox = contentBox\n\t\t\t.clone()\n\t\t\t.css( { \"box-sizing\": \"border-box\" } ),\n\t\trelativeBorderBox = borderBox\n\t\t\t.clone()\n\t\t\t.css( { position: \"relative\" } ),\n\t\t$boxes = jQuery(\n\t\t\t[ plainBox[ 0 ], contentBox[ 0 ], borderBox[ 0 ], relativeBorderBox[ 0 ] ]\n\t\t).appendTo( parent ),\n\n\t\t// Support: IE 9 only\n\t\t// Computed width seems to report content width even with \"box-sizing: border-box\", and\n\t\t// \"overflow: scroll\" actually _shrinks_ the element (gh-3699).\n\t\tborderBoxLoss =\n\t\t\tborderBox.clone().css( { overflow: \"auto\" } ).appendTo( parent )[ 0 ].offsetWidth -\n\t\t\tborderBox[ 0 ].offsetWidth;\n\n\tif ( borderBoxLoss > 0 ) {\n\t\tborderBox[ 0 ].style.width = ( size + borderBoxLoss ) + \"px\";\n\t\tborderBox[ 0 ].style.height = ( size + borderBoxLoss ) + \"px\";\n\t}\n\n\tfor ( i = 0; i < 3; i++ ) {\n\t\tif ( i === 1 ) {\n\t\t\tsuffix = \" after increasing inner* by \" + i;\n\t\t\tsize += i;\n\t\t\t$boxes.innerWidth( updater( i ) ).innerHeight( updater( i ) );\n\t\t} else if ( i === 2 ) {\n\t\t\tsuffix = \" after increasing outer* by \" + i;\n\t\t\tsize += i;\n\t\t\t$boxes.outerWidth( updater( i ) ).outerHeight( updater( i ) );\n\t\t}\n\n\t\tassert.equal( plainBox.innerWidth(), size,\n\t\t\t\"plain content-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( plainBox.innerHeight(), size,\n\t\t\t\"plain content-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( plainBox.outerWidth(), size,\n\t\t\t\"plain content-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( plainBox.outerHeight(), size,\n\t\t\t\"plain content-box outerHeight includes scroll gutter\" + suffix );\n\n\t\tassert.equal( contentBox.innerWidth(), size + 2 * padding,\n\t\t\t\"content-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( contentBox.innerHeight(), size + 2 * padding,\n\t\t\t\"content-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( contentBox.outerWidth(), size + 2 * padding + 2 * borderWidth,\n\t\t\t\"content-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( contentBox.outerHeight(), size + 2 * padding + 2 * borderWidth,\n\t\t\t\"content-box outerHeight includes scroll gutter\" + suffix );\n\n\t\tassert.equal( borderBox.innerWidth(), size - 2 * borderWidth,\n\t\t\t\"border-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( borderBox.innerHeight(), size - 2 * borderWidth,\n\t\t\t\"border-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( borderBox.outerWidth(), size,\n\t\t\t\"border-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( borderBox.outerHeight(), size,\n\t\t\t\"border-box outerHeight includes scroll gutter\" + suffix );\n\n\t\tassert.equal( relativeBorderBox.innerWidth(), size - 2 * borderWidth,\n\t\t\t\"relative border-box innerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( relativeBorderBox.innerHeight(), size - 2 * borderWidth,\n\t\t\t\"relative border-box innerHeight includes scroll gutter\" + suffix );\n\t\tassert.equal( relativeBorderBox.outerWidth(), size,\n\t\t\t\"relative border-box outerWidth includes scroll gutter\" + suffix );\n\t\tassert.equal( relativeBorderBox.outerHeight(), size,\n\t\t\t\"relative border-box outerHeight includes scroll gutter\" + suffix );\n\t}\n} );\n\nQUnit.test( \"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)\", function( assert ) {\n\tassert.expect( 5 );\n\tvar $table = jQuery( \"<table class='border-box' style='border-collapse: separate'></table>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t$thead = jQuery( \"<thead></thead>\" ).appendTo( $table ),\n\t\t$firstTh = jQuery( \"<th style='width: 200px;padding: 5px'></th>\" ),\n\t\t$secondTh = jQuery( \"<th style='width: 190px;padding: 5px'></th>\" ),\n\t\t$thirdTh = jQuery( \"<th style='width: 180px;padding: 5px'></th>\" ),\n\n\t\t// Support: Firefox 63, Edge 16-17, Android 8, iOS 7-11\n\t\t// These browsers completely ignore the border-box and height settings\n\t\t// The computed height is instead just line-height + border\n\t\t// Either way, what we're doing in css.js is correct\n\t\t$td = jQuery( \"<td style='height: 20px;padding: 5px;border: 1px solid;line-height:18px'>text</td>\" ),\n\n\t\t$tbody = jQuery( \"<tbody></tbody>\" ).appendTo( $table ),\n\t\t$textarea = jQuery( \"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box'></textarea>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $firstTh );\n\tjQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $secondTh );\n\tjQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $thirdTh );\n\tjQuery( \"<tr><td></td></tr>\" ).appendTo( $tbody ).append( $td );\n\n\tassert.strictEqual( $firstTh.outerWidth(), 200, \"First th has outerWidth 200.\" );\n\tassert.strictEqual( $secondTh.outerWidth(), 200, \"Second th has outerWidth 200.\" );\n\tassert.strictEqual( $thirdTh.outerWidth(), 200, \"Third th has outerWidth 200.\" );\n\n\t// Support: Android 4.0-4.3 only\n\t// Android Browser disregards td's box-sizing, treating it like it was content-box.\n\t// Unlike in IE, offsetHeight shares the same issue so there's no easy way to workaround\n\t// the issue without incurring high size penalty. Let's at least check we get the size\n\t// as the browser sees it.\n\tif ( /android 4\\.[0-3]/i.test( navigator.userAgent ) ) {\n\t\tassert.ok( [ 30, 32 ].indexOf( $td.outerHeight() ) > -1,\n\t\t\t\"outerHeight of td with border-box should include padding.\" );\n\t} else {\n\t\tassert.strictEqual( $td.outerHeight(), 30, \"outerHeight of td with border-box should include padding.\" );\n\t}\n\tassert.strictEqual( $textarea.outerHeight(), 6, \"outerHeight of textarea with border-box should include padding and border.\" );\n} );\n\n} )();\n", "( function() {\n\n// Can't test what ain't there\nif ( !jQuery.fx ) {\n\treturn;\n}\n\nvar oldRaf = window.requestAnimationFrame,\n\thideOptions = {\n\t\tinline: function() { jQuery.style( this, \"display\", \"none\" ); },\n\t\tcascade: function() { this.className = \"hidden\"; }\n\t};\n\nQUnit.module( \"effects\", {\n\tbeforeEach: function() {\n\t\twindow.requestAnimationFrame = null;\n\t\tthis.sandbox = sinon.sandbox.create();\n\t\tthis.clock = this.sandbox.useFakeTimers( 505877050 );\n\t\tthis._oldInterval = jQuery.fx.interval;\n\t\tjQuery.fx.step = {};\n\t\tjQuery.fx.interval = 10;\n\t},\n\tafterEach: function() {\n\t\tthis.sandbox.restore();\n\t\tjQuery.fx.stop();\n\t\tjQuery.fx.interval = this._oldInterval;\n\t\twindow.requestAnimationFrame = oldRaf;\n\t\treturn moduleTeardown.apply( this, arguments );\n\t}\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"sanity check\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#qunit-fixture:visible, #foo:visible\" ).length, 2, \"QUnit state is correct for testing effects\" );\n} );\n\nQUnit.test( \"show() basic\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar div = jQuery( \"<div>\" ).hide().appendTo( \"#qunit-fixture\" ).show();\n\n\tassert.equal( div.css( \"display\" ), \"block\", \"Make sure pre-hidden divs show\" );\n\n\t// Clean up the detached node\n\tdiv.remove();\n} );\n\nQUnit.test( \"show()\", function( assert ) {\n\tassert.expect( 27 );\n\n\tvar div, speeds, test,\n\t\thiddendiv = jQuery( \"div.hidden\" );\n\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"none\", \"hiddendiv is display: none\" );\n\n\thiddendiv.css( \"display\", \"block\" );\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.show();\n\tassert.equal( jQuery.css( hiddendiv[ 0 ], \"display\" ), \"block\", \"hiddendiv is display: block\" );\n\n\thiddendiv.css( \"display\", \"\" );\n\n\tdiv = jQuery( \"#fx-queue div\" ).slice( 0, 4 );\n\tdiv.show().each( function() {\n\t\tassert.notEqual( this.style.display, \"none\", \"don't change any <div> with display block\" );\n\t} );\n\n\tspeeds = {\n\t\t\"null speed\": null,\n\t\t\"undefined speed\": undefined,\n\t\t\"false speed\": false\n\t};\n\n\tjQuery.each( speeds, function( name, speed ) {\n\t\tvar pass = true;\n\t\tdiv.hide().show( speed ).each( function() {\n\t\t\tif ( this.style.display === \"none\" ) {\n\t\t\t\tpass = false;\n\t\t\t}\n\t\t} );\n\t\tassert.ok( pass, \"Show with \" + name );\n\t} );\n\n\tjQuery.each( speeds, function( name, speed ) {\n\t\tvar pass = true;\n\t\tdiv.hide().show( speed, function() {\n\t\t\tpass = false;\n\t\t} );\n\t\tassert.ok( pass, \"Show with \" + name + \" does not call animate callback\" );\n\t} );\n\n\t// Tolerate data from show()/hide()\n\tassert.expectJqData( this, div, \"olddisplay\" );\n\n\tjQuery(\n\t\t\"<div id='show-tests'>\" +\n\t\t\"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" +\n\t\t\"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>\" +\n\t\t\"<ul><li></li></ul></div>\"\n\t).appendTo( \"#qunit-fixture\" ).find( \"*\" ).css( \"display\", \"none\" );\n\n\ttest = {\n\t\t\"div\": \"block\",\n\t\t\"p\": \"block\",\n\t\t\"a\": \"inline\",\n\t\t\"code\": \"inline\",\n\t\t\"pre\": \"block\",\n\t\t\"span\": \"inline\",\n\t\t\"table\": \"table\",\n\t\t\"thead\": \"table-header-group\",\n\t\t\"tbody\": \"table-row-group\",\n\t\t\"tr\": \"table-row\",\n\t\t\"th\": \"table-cell\",\n\t\t\"td\": \"table-cell\",\n\t\t\"ul\": \"block\",\n\t\t\"li\": \"list-item\"\n\t};\n\n\tjQuery.each( test, function( selector, expected ) {\n\t\tvar elem = jQuery( selector, \"#show-tests\" ).show();\n\t\tassert.equal( elem.css( \"display\" ), expected, \"Show using correct display type for \" + selector );\n\t} );\n\n\tjQuery( \"#show-tests\" ).remove();\n\n\t// Make sure that showing or hiding a text node doesn't cause an error\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).show().remove();\n\tjQuery( \"<div>test</div> text <span>test</span>\" ).hide().remove();\n} );\n\nsupportjQuery.each( hideOptions, function( type, setup ) {\n\tQUnit.test( \"show(Number) - \" + type + \" hidden\", function( assert ) {\n\t\tassert.expect( 30 );\n\n\t\tjQuery(\n\t\t\t\"<div id='show-tests'>\" +\n\t\t\t\"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" +\n\t\t\t\"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody>\" +\n\t\t\t\t\"</table>\" +\n\t\t\t\"<ul><li></li></ul></div>\"\n\t\t).appendTo( \"#qunit-fixture\" ).find( \"*\" ).each( setup );\n\n\t\t// Note: inline elements are expected to be inline-block\n\t\t// because we're showing width/height\n\t\t// Can't animate width/height inline\n\t\t// See #14344\n\t\tvar test = {\n\t\t\t\"div\": \"block\",\n\t\t\t\"p\": \"block\",\n\t\t\t\"a\": \"inline\",\n\t\t\t\"code\": \"inline\",\n\t\t\t\"pre\": \"block\",\n\t\t\t\"span\": \"inline\",\n\t\t\t\"table\": \"table\",\n\t\t\t\"thead\": \"table-header-group\",\n\t\t\t\"tbody\": \"table-row-group\",\n\t\t\t\"tr\": \"table-row\",\n\t\t\t\"th\": \"table-cell\",\n\t\t\t\"td\": \"table-cell\",\n\t\t\t\"ul\": \"block\",\n\t\t\t\"li\": \"list-item\"\n\t\t};\n\n\t\tjQuery.each( test, function( selector ) {\n\t\t\tjQuery( selector, \"#show-tests\" ).show( 100 );\n\t\t} );\n\t\tthis.clock.tick( 50 );\n\t\tjQuery.each( test, function( selector, expected ) {\n\t\t\tjQuery( selector, \"#show-tests\" ).each( function() {\n\t\t\t\tassert.equal(\n\t\t\t\t\tjQuery( this ).css( \"display\" ),\n\t\t\t\t\texpected === \"inline\" ? \"inline-block\" : expected,\n\t\t\t\t\t\"Correct display type during animation for \" + selector\n\t\t\t\t);\n\t\t\t} );\n\t\t} );\n\t\tthis.clock.tick( 50 );\n\t\tjQuery.each( test, function( selector, expected ) {\n\t\t\tjQuery( selector, \"#show-tests\" ).each( function() {\n\t\t\t\tassert.equal( jQuery( this ).css( \"display\" ), expected,\n\t\t\t\t\t\"Correct display type after animation for \" + selector );\n\t\t\t} );\n\t\t} );\n\n\t\tjQuery( \"#show-tests\" ).remove();\n\t} );\n} );\n\n// Supports #7397\nsupportjQuery.each( hideOptions, function( type, setup ) {\n\tQUnit.test( \"Persist correct display value - \" + type + \" hidden\", function( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tjQuery( \"<div id='show-tests'><span style='position:absolute;'>foo</span></div>\" )\n\t\t\t.appendTo( \"#qunit-fixture\" ).find( \"*\" ).each( setup );\n\n\t\tvar $span = jQuery( \"#show-tests span\" ),\n\t\t\tdisplayNone = $span.css( \"display\" ),\n\t\t\tdisplay = \"\",\n\t\t\tclock = this.clock;\n\n\t\t$span.show();\n\n\t\tdisplay = $span.css( \"display\" );\n\n\t\t$span.hide();\n\n\t\t$span.fadeIn( 100, function() {\n\t\t\tassert.equal( $span.css( \"display\" ), display, \"Expecting display: \" + display );\n\t\t\t$span.fadeOut( 100, function() {\n\t\t\t\tassert.equal( $span.css( \"display\" ), displayNone, \"Expecting display: \" + displayNone );\n\t\t\t\t$span.fadeIn( 100, function() {\n\t\t\t\t\tassert.equal( $span.css( \"display\" ), display, \"Expecting display: \" + display );\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\tclock.tick( 300 );\n\n\t\tassert.expectJqData( this, $span, \"olddisplay\" );\n\t} );\n\n\tQUnit[\n\t\tdocument.body.attachShadow && document.body.getRootNode ?\n\t\t\t\"test\" :\n\t\t\t\"skip\"\n\t\t]( \"Persist correct display value - \" + type + \" hidden, shadow child\", function( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tjQuery( \"<div id='shadowHost'></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t\tvar shadowHost = document.querySelector( \"#shadowHost\" );\n\t\tvar shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );\n\t\tshadowRoot.innerHTML = \"<style>.hidden{display: none;}</style>\" +\n\t\t\t\"<span id='shadowChild' class='hidden'></span>\";\n\t\tvar shadowChild = shadowRoot.querySelector( \"#shadowChild\" );\n\n\t\tvar $shadowChild = jQuery( shadowChild );\n\t\tvar displayNone = \"none\";\n\t\tvar display = \"inline\";\n\t\tvar clock = this.clock;\n\n\t\t$shadowChild.fadeIn( 100, function() {\n\t\t\tassert.equal( $shadowChild.css( \"display\" ), display, \"Expecting shadow display: \" + display );\n\t\t\t$shadowChild.fadeOut( 100, function() {\n\t\t\t\tassert.equal( $shadowChild.css( \"display\" ), displayNone, \"Expecting shadow display: \" + displayNone );\n\t\t\t\t$shadowChild.fadeIn( 100, function() {\n\t\t\t\t\tassert.equal( $shadowChild.css( \"display\" ), display, \"Expecting shadow display: \" + display );\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\tclock.tick( 300 );\n\n\t\tassert.expectJqData( this, $shadowChild, \"olddisplay\" );\n\t} );\n} );\n\nQUnit.test( \"animate(Hash, Object, Function)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar hash = { opacity: \"show\" },\n\t\thashCopy = jQuery.extend( {}, hash );\n\tjQuery( \"#foo\" ).animate( hash, 0, function() {\n\t\tassert.equal( hash.opacity, hashCopy.opacity, \"Check if animate changed the hash parameter\" );\n\t} );\n} );\n\nQUnit.test( \"animate relative values\", function( assert ) {\n\n\tvar value = 40,\n\t\tclock = this.clock,\n\t\tbases = [ \"%\", \"px\", \"em\" ],\n\t\tadjustments = [ \"px\", \"em\" ],\n\t\tcontainer = jQuery( \"<div></div>\" )\n\t\t\t.css( { position: \"absolute\", height: \"50em\", width: \"50em\" } ),\n\t\tanimations = bases.length * adjustments.length;\n\n\tassert.expect( 2 * animations );\n\n\tjQuery.each( bases, function( _, baseUnit ) {\n\t\tjQuery.each( adjustments, function( _, adjustUnit ) {\n\t\t\tvar base = value + baseUnit,\n\t\t\t\tadjust = { height: \"+=2\" + adjustUnit, width: \"-=2\" + adjustUnit },\n\t\t\t\telem = jQuery( \"<div></div>\" )\n\t\t\t\t\t.appendTo( container.clone().appendTo( \"#qunit-fixture\" ) )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\theight: base,\n\t\t\t\t\t\twidth: value + adjustUnit\n\t\t\t\t\t} ),\n\t\t\t\tbaseScale = elem[ 0 ].offsetHeight / value,\n\t\t\t\tadjustScale = elem[ 0 ].offsetWidth / value;\n\n\t\t\telem.css( \"width\", base ).animate( adjust, 100, function() {\n\t\t\t\tassert.equal( this.offsetHeight, value * baseScale + 2 * adjustScale,\n\t\t\t\t\tbaseUnit + \"+=\" + adjustUnit );\n\t\t\t\tassert.equal( this.offsetWidth, value * baseScale - 2 * adjustScale,\n\t\t\t\t\tbaseUnit + \"-=\" + adjustUnit );\n\n\t\t\t} );\n\n\t\t\tclock.tick( 100 );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"animate negative height\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { height: -100 }, 100, function() {\n\t\tassert.equal( this.offsetHeight, 0, \"Verify height.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate negative margin\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { \"marginTop\": -100 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"marginTop\" ), \"-100px\", \"Verify margin.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate negative margin with px\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { marginTop: \"-100px\" }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"marginTop\" ), \"-100px\", \"Verify margin.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate negative padding\", function( assert ) {\n\tassert.expect( 1 );\n\tjQuery( \"#foo\" ).animate( { \"paddingBottom\": -100 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"paddingBottom\" ), \"0px\", \"Verify paddingBottom.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate block as inline width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"#foo\" ).css( { display: \"inline\", width: \"\", height: \"\" } ).animate( { width: 42, height: 42 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"inline-block\", \"inline-block was set on non-floated inline element when animating width/height\" );\n\t\tassert.equal( this.offsetWidth, 42, \"width was animated\" );\n\t\tassert.equal( this.offsetHeight, 42, \"height was animated\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate native inline width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"#foo\" ).css( { display: \"\", width: \"\", height: \"\" } )\n\t\t.append( \"<span>text</span>\" )\n\t\t.children( \"span\" )\n\t\t\t.animate( { width: 42, height: 42 }, 100, function() {\n\t\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"inline-block\", \"inline-block was set on non-floated inline element when animating width/height\" );\n\t\t\t\tassert.equal( this.offsetWidth, 42, \"width was animated\" );\n\t\t\t\tassert.equal( this.offsetHeight, 42, \"height was animated\" );\n\t\t\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate block width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tjQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ).css( {\n\t\tdisplay: \"block\",\n\t\twidth: 20,\n\t\theight: 20,\n\t\tpaddingLeft: 60\n\t} ).animate( {\n\t\twidth: 42,\n\t\theight: 42\n\t}, {\n\t\tduration: 100,\n\t\tstep: function() {\n\t\t\tif ( jQuery( this ).width() > 42 ) {\n\t\t\t\tassert.ok( false, \"width was incorrectly augmented during animation\" );\n\t\t\t}\n\t\t},\n\t\tcomplete: function() {\n\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"block\", \"inline-block was not set on block element when animating width/height\" );\n\t\t\tassert.equal( jQuery( this ).width(), 42, \"width was animated\" );\n\t\t\tassert.equal( jQuery( this ).height(), 42, \"height was animated\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate table width/height\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#table\" ).animate( { width: 42, height: 42 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"table\", \"display mode is correct\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate table-row width/height\", function( assert ) {\n\tassert.expect( 3 );\n\tvar tr = jQuery( \"#table\" )\n\t\t\t.attr( { \"cellspacing\": 0, \"cellpadding\": 0, \"border\": 0 } )\n\t\t\t.html( \"<tr style='height:42px;'><td style='padding:0;'><div style='width:20px;height:20px;'></div></td></tr>\" )\n\t\t\t.find( \"tr\" );\n\n\ttr.animate( { width: 10, height: 10 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"table-row\", \"display mode is correct\" );\n\t\tassert.equal( this.offsetWidth, 20, \"width animated to shrink wrap point\" );\n\t\tassert.equal( this.offsetHeight, 20, \"height animated to shrink wrap point\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate table-cell width/height\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar td = jQuery( \"#table\" )\n\t\t\t.attr( { \"cellspacing\": 0, \"cellpadding\": 0, \"border\": 0 } )\n\t\t\t.html( \"<tr><td style='width:42px;height:42px;padding:0;'><div style='width:20px;height:20px;'></div></td></tr>\" )\n\t\t\t.find( \"td\" );\n\n\ttd.animate( { width: 10, height: 10 }, 100, function() {\n\t\tassert.equal( jQuery( this ).css( \"display\" ), \"table-cell\", \"display mode is correct\" );\n\t\tassert.equal( this.offsetWidth, 20, \"width animated to shrink wrap point\" );\n\t\tassert.equal( this.offsetHeight, 20, \"height animated to shrink wrap point\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate percentage(%) on width/height\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $div = jQuery( \"<div style='position:absolute;top:-999px;left:-999px;width:60px;height:60px;'><div style='width:50%;height:50%;'></div></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" ).children( \"div\" );\n\n\t$div.animate( { width: \"25%\", height: \"25%\" }, 13, function() {\n\t\tvar $this = jQuery( this );\n\t\tassert.equal( $this.css( \"width\" ), \"15px\", \"Width was animated to 15px rather than 25px\" );\n\t\tassert.equal( $this.css( \"height\" ), \"15px\", \"Height was animated to 15px rather than 25px\" );\n\t} );\n\tthis.clock.tick( 20 );\n} );\n\nQUnit.test( \"animate resets overflow-x and overflow-y when finished\", function( assert ) {\n\tassert.expect( 2 );\n\tjQuery( \"#foo\" )\n\t\t.css( { display: \"block\", width: 20, height: 20, overflowX: \"visible\", overflowY: \"auto\" } )\n\t\t.animate( { width: 42, height: 42 }, 100, function() {\n\t\t\tassert.equal( this.style.overflowX, \"visible\", \"overflow-x is visible\" );\n\t\t\tassert.equal( this.style.overflowY, \"auto\", \"overflow-y is auto\" );\n\t\t} );\n\tthis.clock.tick( 100 );\n} );\n\n/* // This test ends up being flaky depending upon the CPU load\nQUnit.test(\"animate option (queue === false)\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect(1);\n\n\tvar order = [];\n\n\tvar $foo = jQuery(\"#foo\");\n\t$foo.animate({width:\"100px\"}, 3000, function () {\n\t\t// should finish after unqueued animation so second\n\t\torder.push(2);\n\t\tassert.deepEqual( order, [ 1, 2 ], \"Animations finished in the correct order\" );\n\t\tdone();\n\t});\n\t$foo.animate({fontSize:\"2em\"}, {queue:false, duration:10, complete:function () {\n\t\t// short duration and out of queue so should finish first\n\t\torder.push(1);\n\t}});\n});\n*/\n\nQUnit.test( \"animate option { queue: false }\", function( assert ) {\n\tassert.expect( 2 );\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\tfontSize: \"2em\"\n\t}, {\n\t\tqueue: false,\n\t\tduration: 10,\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Animation Completed\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 10 );\n\n\tassert.equal( foo.queue().length, 0, \"Queue is empty\" );\n} );\n\nQUnit.test( \"animate option { queue: true }\", function( assert ) {\n\tassert.expect( 2 );\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\tfontSize: \"2em\"\n\t}, {\n\t\tqueue: true,\n\t\tduration: 10,\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Animation Completed\" );\n\t\t}\n\t} );\n\n\tassert.notEqual( foo.queue().length, 0, \"Default queue is not empty\" );\n\n\t//clear out existing timers before next test\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"animate option { queue: 'name' }\", function( assert ) {\n\tassert.expect( 5 );\n\tvar foo = jQuery( \"#foo\" ),\n\t\torigWidth = parseFloat( foo.css( \"width\" ) ),\n\t\torder = [];\n\n\tfoo.animate( { width: origWidth + 100 }, {\n\t\tqueue: \"name\",\n\t\tduration: 1,\n\t\tcomplete: function() {\n\n\t\t\t// second callback function\n\t\t\torder.push( 2 );\n\t\t\tassert.equal( parseFloat( foo.css( \"width\" ) ), origWidth + 100, \"Animation ended\" );\n\t\t\tassert.equal( foo.queue( \"name\" ).length, 1, \"Queue length of 'name' queue\" );\n\t\t}\n\t} ).queue( \"name\", function() {\n\n\t\t// last callback function\n\t\tassert.deepEqual( order, [ 1, 2 ], \"Callbacks in expected order\" );\n\t} );\n\n\t// this is the first callback function that should be called\n\torder.push( 1 );\n\tassert.equal( parseFloat( foo.css( \"width\" ) ), origWidth, \"Animation does not start on its own.\" );\n\tassert.equal( foo.queue( \"name\" ).length, 2, \"Queue length of 'name' queue\" );\n\n\tfoo.dequeue( \"name\" );\n\tthis.clock.tick( 10 );\n\n} );\n\nQUnit.test( \"animate with no properties\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo,\n\t\tdivs = jQuery( \"div\" ),\n\t\tcount = 0;\n\n\tdivs.animate( {}, function() {\n\t\tcount++;\n\t} );\n\n\tassert.equal( divs.length, count, \"Make sure that callback is called for each element in the set.\" );\n\n\tfoo = jQuery( \"#foo\" );\n\n\tfoo.animate( {} );\n\tfoo.animate( { top: 10 }, 100, function() {\n\t\tassert.ok( true, \"Animation was properly dequeued.\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"animate duration 0\", function( assert ) {\n\tassert.expect( 11 );\n\n\tvar $elem,\n\t\t$elems = jQuery( [ { a:0 }, { a:0 } ] ),\n\t\tcounter = 0;\n\n\tassert.equal( jQuery.timers.length, 0, \"Make sure no animation was running from another test\" );\n\n\t$elems.eq( 0 ).animate( { a:1 }, 0, function() {\n\t\tassert.ok( true, \"Animate a simple property.\" );\n\t\tcounter++;\n\t} );\n\n\t// Failed until [6115]\n\tassert.equal( jQuery.timers.length, 0, \"Make sure synchronic animations are not left on jQuery.timers\" );\n\n\tassert.equal( counter, 1, \"One synchronic animations\" );\n\n\t$elems.animate( { a:2 }, 0, function() {\n\t\tassert.ok( true, \"Animate a second simple property.\" );\n\t\tcounter++;\n\t} );\n\n\tassert.equal( counter, 3, \"Multiple synchronic animations\" );\n\n\t$elems.eq( 0 ).animate( { a:3 }, 0, function() {\n\t\tassert.ok( true, \"Animate a third simple property.\" );\n\t\tcounter++;\n\t} );\n\t$elems.eq( 1 ).animate( { a:3 }, 200, function() {\n\t\tcounter++;\n\n\t\t// Failed until [6115]\n\t\tassert.equal( counter, 5, \"One synchronic and one asynchronic\" );\n\t} );\n\tthis.clock.tick( 200 );\n\n\t$elem = jQuery( \"<div></div>\" );\n\t$elem.show( 0, function() {\n\t\tassert.ok( true, \"Show callback with no duration\" );\n\t} );\n\t$elem.hide( 0, function() {\n\t\tassert.ok( true, \"Hide callback with no duration\" );\n\t} );\n\n\t// manually clean up detached elements\n\t$elem.remove();\n} );\n\nQUnit.test( \"animate hyphenated properties\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#foo\" )\n\t\t.css( \"font-size\", 10 )\n\t\t.animate( { \"font-size\": 20 }, 200, function() {\n\t\t\tassert.equal( this.style.fontSize, \"20px\", \"The font-size property was animated.\" );\n\t\t} );\n\n\t// FIXME why is this double only when run with other tests\n\tthis.clock.tick( 400 );\n\n} );\n\nQUnit.test( \"animate non-element\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar obj = { test: 0 };\n\n\tjQuery( obj ).animate( { test: 200 }, 200, function() {\n\t\tassert.equal( obj.test, 200, \"The custom property should be modified.\" );\n\t} );\n\tthis.clock.tick( 200 );\n} );\n\nQUnit.test( \"animate non-element's zIndex without appending \\\"px\\\"\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar obj = { zIndex: 0 };\n\n\tjQuery( obj ).animate( { zIndex: 200 }, 200, function() {\n\t\tassert.equal( obj.zIndex, 200, \"The custom property should be modified without appending \\\"px\\\".\" );\n\t} );\n\tthis.clock.tick( 200 );\n} );\n\nQUnit.test( \"stop()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $one, $two,\n\t\t$foo = jQuery( \"#foo\" ),\n\t\tw = 0,\n\t\tnw;\n\n\t$foo.hide().css( \"width\", 200 )\n\t\t.animate( { \"width\": \"show\" }, 1500 );\n\n\tthis.clock.tick( 100 );\n\tnw = $foo.css( \"width\" );\n\tassert.notEqual( parseFloat( nw ), w, \"An animation occurred \" + nw + \" \" + w + \"px\" );\n\t$foo.stop();\n\n\tnw = $foo.css( \"width\" );\n\tassert.notEqual( parseFloat( nw ), w, \"Stop didn't reset the animation \" + nw + \" \" + w + \"px\" );\n\n\tthis.clock.tick( 100 );\n\n\t$foo.removeData();\n\t$foo.removeData( undefined, true );\n\tassert.equal( nw, $foo.css( \"width\" ), \"The animation didn't continue\" );\n\n\t$one = jQuery( \"#fadein\" );\n\t$two = jQuery( \"#show\" );\n\t$one.fadeTo( 100, 0, function() {\n\t\t$one.stop();\n\t} );\n\tthis.clock.tick( 100 );\n\t$two.fadeTo( 100, 0, function() {\n\t\tassert.equal( $two.css( \"opacity\" ), \"0\", \"Stop does not interfere with animations on other elements (#6641)\" );\n\n\t\t// Reset styles\n\t\t$one.add( $two ).css( \"opacity\", \"\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\n// In IE9 inside testswarm this test doesn't work properly\n( function() {\n\tvar type = \"test\";\n\n\tif ( QUnit.isSwarm && /msie 9\\.0/i.test( window.navigator.userAgent ) ) {\n\t\ttype = \"skip\";\n\t}\n\n\tQUnit[ type ]( \"stop() - several in queue\", function( assert ) {\n\t\tassert.expect( 5 );\n\n\t\tvar nw, $foo = jQuery( \"#foo\" );\n\n\t\t// default duration is 400ms, so 800px ensures we aren't 0 or 1 after 1ms\n\t\t$foo.hide().css( \"width\", 800 );\n\n\t\t$foo.animate( { \"width\": \"show\" }, 400, \"linear\" );\n\t\t$foo.animate( { \"width\": \"hide\" } );\n\t\t$foo.animate( { \"width\": \"show\" } );\n\n\t\tthis.clock.tick( 1 );\n\n\t\tjQuery.fx.tick();\n\t\tassert.equal( $foo.queue().length, 3, \"3 in the queue\" );\n\n\t\tnw = $foo.css( \"width\" );\n\t\tassert.notEqual( parseFloat( nw ), 1, \"An animation occurred \" + nw );\n\t\t$foo.stop();\n\n\t\tassert.equal( $foo.queue().length, 2, \"2 in the queue\" );\n\t\tnw = $foo.css( \"width\" );\n\t\tassert.notEqual( parseFloat( nw ), 1, \"Stop didn't reset the animation \" + nw );\n\n\t\t$foo.stop( true );\n\n\t\tassert.equal( $foo.queue().length, 0, \"0 in the queue\" );\n\t} );\n} )();\n\nQUnit.test( \"stop(clearQueue)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $foo = jQuery( \"#foo\" ),\n\t\tw = 0,\n\t\tnw;\n\t$foo.hide().css( \"width\", 200 ).css( \"width\" );\n\n\t$foo.animate( { \"width\": \"show\" }, 1000 );\n\t$foo.animate( { \"width\": \"hide\" }, 1000 );\n\t$foo.animate( { \"width\": \"show\" }, 1000 );\n\tthis.clock.tick( 100 );\n\tnw = $foo.css( \"width\" );\n\tassert.ok( parseFloat( nw ) !== w, \"An animation occurred \" + nw + \" \" + w + \"px\" );\n\t$foo.stop( true );\n\n\tnw = $foo.css( \"width\" );\n\tassert.ok( parseFloat( nw ) !== w, \"Stop didn't reset the animation \" + nw + \" \" + w + \"px\" );\n\n\tassert.equal( $foo.queue().length, 0, \"The animation queue was cleared\" );\n\tthis.clock.tick( 100 );\n\tassert.equal( nw, $foo.css( \"width\" ), \"The animation didn't continue\" );\n} );\n\nQUnit.test( \"stop(clearQueue, gotoEnd)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $foo = jQuery( \"#foo\" ),\n\t\tw = 0,\n\t\tnw;\n\t$foo.hide().css( \"width\", 200 ).css( \"width\" );\n\n\t$foo.animate( { width: \"show\" }, 1000 );\n\t$foo.animate( { width: \"hide\" }, 1000 );\n\t$foo.animate( { width: \"show\" }, 1000 );\n\t$foo.animate( { width: \"hide\" }, 1000 );\n\tthis.clock.tick( 100 );\n\tnw = $foo.css( \"width\" );\n\tassert.ok( parseFloat( nw ) !== w, \"An animation occurred \" + nw + \" \" + w + \"px\" );\n\t$foo.stop( false, true );\n\n\tnw = $foo.css( \"width\" );\n\n\t// Disabled, being flaky\n\t//equal( nw, 1, \"Stop() reset the animation\" );\n\n\tthis.clock.tick( 100 );\n\n\t// Disabled, being flaky\n\t//equal( $foo.queue().length, 2, \"The next animation continued\" );\n\t$foo.stop( true );\n} );\n\nQUnit.test( \"stop( queue, ..., ... ) - Stop single queues\", function( assert ) {\n\tassert.expect( 3 );\n\tvar saved,\n\t\tfoo = jQuery( \"#foo\" ).css( { width: 200, height: 200 } );\n\n\tfoo.animate( {\n\t\twidth: 400\n\t}, {\n\t\tduration: 500,\n\t\tcomplete: function() {\n\t\t\tassert.equal( parseFloat( foo.css( \"width\" ) ), 400, \"Animation completed for standard queue\" );\n\t\t\tassert.equal( parseFloat( foo.css( \"height\" ) ), saved, \"Height was not changed after the second stop\" );\n\t\t}\n\t} );\n\n\tfoo.animate( {\n\t\theight: 400\n\t}, {\n\t\tduration: 1000,\n\t\tqueue: \"height\"\n\t} ).dequeue( \"height\" ).stop( \"height\", false, true );\n\n\tassert.equal( parseFloat( foo.css( \"height\" ) ), 400, \"Height was stopped with gotoEnd\" );\n\n\tfoo.animate( {\n\t\theight: 200\n\t}, {\n\t\tduration: 1000,\n\t\tqueue: \"height\"\n\t} ).dequeue( \"height\" ).stop( \"height\", false, false );\n\tsaved = parseFloat( foo.css( \"height\" ) );\n        this.clock.tick( 500 );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"toggle()\", function( assert ) {\n\tassert.expect( 6 );\n\tvar x = jQuery( \"#foo\" );\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle();\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle();\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible\" );\n\tx.toggle( false );\n\tassert.ok( x.is( \":hidden\" ), \"is hidden\" );\n\tx.toggle( true );\n\tassert.ok( x.is( \":visible\" ), \"is visible again\" );\n} );\n\nQUnit.test( \"jQuery.fx.prototype.cur() - <1.8 Back Compat\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).css( {\n\t\t\tcolor: \"#ABC\",\n\t\t\tborder: \"5px solid black\",\n\t\t\tleft: \"auto\",\n\t\t\tmarginBottom: \"-11000px\"\n\t\t} )[ 0 ];\n\n\tassert.equal(\n\t\t( new jQuery.fx( div, {}, \"color\" ) ).cur(),\n\t\tjQuery.css( div, \"color\" ),\n\t\t\"Return the same value as jQuery.css for complex properties (bug #7912)\"\n\t);\n\n\tassert.strictEqual(\n\t\t( new jQuery.fx( div, {}, \"borderLeftWidth\" ) ).cur(),\n\t\t5,\n\t\t\"Return simple values parsed as Float\"\n\t);\n\n\t// backgroundPosition actually returns 0% 0% in most browser\n\t// this fakes a \"\" return\n\t// hook now gets called twice because Tween will grab the current\n\t// value as it is being newed\n\tjQuery.cssHooks.backgroundPosition = {\n\t\tget: function() {\n\t\t\tassert.ok( true, \"hook used\" );\n\t\t\treturn \"\";\n\t\t}\n\t};\n\n\tassert.strictEqual(\n\t\t( new jQuery.fx( div, {}, \"backgroundPosition\" ) ).cur(),\n\t\t0,\n\t\t\"Return 0 when jQuery.css returns an empty string\"\n\t);\n\n\tdelete jQuery.cssHooks.backgroundPosition;\n\n\tassert.strictEqual(\n\t\t( new jQuery.fx( div, {}, \"left\" ) ).cur(),\n\t\t0,\n\t\t\"Return 0 when jQuery.css returns 'auto'\"\n\t);\n\n\tassert.equal(\n\t\t( new jQuery.fx( div, {}, \"marginBottom\" ) ).cur(),\n\t\t-11000,\n\t\t\"support negative values < -10000 (bug #7193)\"\n\t);\n\n\tjQuery( div ).remove();\n} );\n\nQUnit.test( \"Overflow and Display\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar\n\t\ttestClass = jQuery.makeTest( \"Overflow and Display\" )\n\t\t\t.addClass( \"overflow inline\" ),\n\t\ttestStyle = jQuery.makeTest( \"Overflow and Display (inline style)\" )\n\t\t\t.css( { overflow: \"visible\", display: \"inline\" } ),\n\t\tdone = function() {\n\t\t\tassert.equal( jQuery.css( this, \"overflow\" ), \"visible\", \"Overflow should be 'visible'\" );\n\t\t\tassert.equal( jQuery.css( this, \"display\" ), \"inline\", \"Display should be 'inline'\" );\n\t\t};\n\n\ttestClass.add( testStyle )\n\t\t.addClass( \"widewidth\" )\n\t\t.text( \"Some sample text.\" )\n\t\t.before( \"text before\" )\n\t\t.after( \"text after\" )\n\t\t.animate( { opacity: 0.5 }, \"slow\", done );\n\tthis.clock.tick( 600 );\n} );\n\njQuery.each( {\n\t\"CSS Auto\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"auto\" + prop )\n\t\t\t.text( \"This is a long string of text.\" );\n\t\treturn \"\";\n\t},\n\t\"JS Auto\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, \"\" )\n\t\t\t.text( \"This is a long string of text.\" );\n\t\treturn \"\";\n\t},\n\t\"CSS 100\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"large\" + prop );\n\t\treturn \"\";\n\t},\n\t\"JS 100\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, prop === \"opacity\" ? 1 : \"100px\" );\n\t\treturn prop === \"opacity\" ? 1 : 100;\n\t},\n\t\"CSS 50\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"med\" + prop );\n\t\treturn \"\";\n\t},\n\t\"JS 50\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, prop === \"opacity\" ? 0.50 : \"50px\" );\n\t\treturn prop === \"opacity\" ? 0.5 : 50;\n\t},\n\t\"CSS 0\": function( elem, prop ) {\n\t\tjQuery( elem ).addClass( \"no\" + prop );\n\t\treturn \"\";\n\t},\n\t\"JS 0\": function( elem, prop ) {\n\t\tjQuery( elem ).css( prop, prop === \"opacity\" ? 0 : \"0px\" );\n\t\treturn 0;\n\t}\n}, function( fn, f ) {\n\tjQuery.each( {\n\t\t\"show\": function( elem, prop ) {\n\t\t\tjQuery( elem ).hide().addClass( \"wide\" + prop );\n\t\t\treturn \"show\";\n\t\t},\n\t\t\"hide\": function( elem, prop ) {\n\t\t\tjQuery( elem ).addClass( \"wide\" + prop );\n\t\t\treturn \"hide\";\n\t\t},\n\t\t\"100\": function( elem, prop ) {\n\t\t\tjQuery( elem ).addClass( \"wide\" + prop );\n\t\t\treturn prop === \"opacity\" ? 1 : 100;\n\t\t},\n\t\t\"50\": function( elem, prop ) {\n\t\t\treturn prop === \"opacity\" ? 0.50 : 50;\n\t\t},\n\t\t\"0\": function( elem ) {\n\t\t\tjQuery( elem ).addClass( \"noback\" );\n\t\t\treturn 0;\n\t\t}\n\t}, function( tn, t ) {\n\t\tQUnit.test( fn + \" to \" + tn, function( assert ) {\n\t\t\tvar num, anim,\n\t\t\t\telem = jQuery.makeTest( fn + \" to \" + tn ),\n\t\t\t\tt_w = t( elem, \"width\" ),\n\t\t\t\tf_w = f( elem, \"width\" ),\n\t\t\t\tt_h = t( elem, \"height\" ),\n\t\t\t\tf_h = f( elem, \"height\" ),\n\t\t\t\tt_o = t( elem, \"opacity\" ),\n\t\t\t\tf_o = f( elem, \"opacity\" );\n\n\t\t\tif ( f_o === \"\" ) {\n\t\t\t\tf_o = 1;\n\t\t\t}\n\n\t\t\tnum = 0;\n\n\t\t\t// TODO: uncrowd this\n\t\t\tif ( t_h === \"show\" ) { num++; }\n\t\t\tif ( t_w === \"show\" ) { num++; }\n\t\t\tif ( t_w === \"hide\" || t_w === \"show\" ) { num++; }\n\t\t\tif ( t_h === \"hide\" || t_h === \"show\" ) { num++; }\n\t\t\tif ( t_o === \"hide\" || t_o === \"show\" ) { num++; }\n\t\t\tif ( t_w === \"hide\" ) { num++; }\n\t\t\tif ( t_o.constructor === Number ) { num += 2; }\n\t\t\tif ( t_w.constructor === Number ) { num += 2; }\n\t\t\tif ( t_h.constructor === Number ) { num += 2; }\n\n\t\t\tassert.expect( num );\n\n\t\t\tanim = { width: t_w, height: t_h, opacity: t_o };\n\n\t\t\telem.animate( anim, 50 );\n\n\t\t\tjQuery.when( elem ).done( function( $elem ) {\n\t\t\t\tvar cur_o, cur_w, cur_h, old_h,\n\t\t\t\t\telem = $elem[ 0 ];\n\n\t\t\t\tif ( t_w === \"show\" ) {\n\t\t\t\t\tassert.equal( $elem.css( \"display\" ), \"block\",\n\t\t\t\t\t\t\"Showing, display should block: \" + elem.style.display );\n\t\t\t\t}\n\n\t\t\t\tif ( t_w === \"hide\" || t_w === \"show\" ) {\n\t\t\t\t\tassert.ok( f_w === \"\" ? elem.style.width === f_w : elem.style.width.indexOf( f_w ) === 0, \"Width must be reset to \" + f_w + \": \" + elem.style.width );\n\t\t\t\t}\n\n\t\t\t\tif ( t_h === \"hide\" || t_h === \"show\" ) {\n\t\t\t\t\tassert.ok( f_h === \"\" ? elem.style.height === f_h : elem.style.height.indexOf( f_h ) === 0, \"Height must be reset to \" + f_h + \": \" + elem.style.height );\n\t\t\t\t}\n\n\t\t\t\tcur_o = jQuery.style( elem, \"opacity\" );\n\n\t\t\t\tif ( f_o !== jQuery.css( elem, \"opacity\" ) ) {\n\t\t\t\t\tf_o = f( elem, \"opacity\" );\n\t\t\t\t}\n\n\t\t\t\tif ( t_o === \"hide\" || t_o === \"show\" ) {\n\t\t\t\t\tassert.equal( cur_o, f_o, \"Opacity must be reset to \" + f_o + \": \" + cur_o );\n\t\t\t\t}\n\n\t\t\t\tif ( t_w === \"hide\" ) {\n\t\t\t\t\tassert.equal( elem.style.display, \"none\", \"Hiding, display should be none: \" + elem.style.display );\n\t\t\t\t}\n\n\t\t\t\tif ( t_o.constructor === Number ) {\n\t\t\t\t\tassert.equal( cur_o, t_o, \"Final opacity should be \" + t_o + \": \" + cur_o );\n\n\t\t\t\t\tassert.ok( jQuery.css( elem, \"opacity\" ) !== \"\" || cur_o === t_o, \"Opacity should be explicitly set to \" + t_o + \", is instead: \" + cur_o );\n\t\t\t\t}\n\n\t\t\t\tif ( t_w.constructor === Number ) {\n\t\t\t\t\tassert.equal( elem.style.width, t_w + \"px\", \"Final width should be \" + t_w + \": \" + elem.style.width );\n\n\t\t\t\t\tcur_w = jQuery.css( elem, \"width\" );\n\n\t\t\t\t\tassert.ok( elem.style.width !== \"\" || cur_w === t_w, \"Width should be explicitly set to \" + t_w + \", is instead: \" + cur_w );\n\t\t\t\t}\n\n\t\t\t\tif ( t_h.constructor === Number ) {\n\t\t\t\t\tassert.equal( elem.style.height, t_h + \"px\", \"Final height should be \" + t_h + \": \" + elem.style.height );\n\n\t\t\t\t\tcur_h = jQuery.css( elem, \"height\" );\n\n\t\t\t\t\tassert.ok( elem.style.height !== \"\" || cur_h === t_h, \"Height should be explicitly set to \" + t_h + \", is instead: \" + cur_h );\n\t\t\t\t}\n\n\t\t\t\tif ( t_h === \"show\" ) {\n\t\t\t\t\told_h = jQuery.css( elem, \"height\" );\n\t\t\t\t\tjQuery( elem ).append( \"<br/>Some more text<br/>and some more...\" );\n\n\t\t\t\t\tif ( /Auto/.test( fn ) ) {\n\t\t\t\t\t\tassert.notEqual( jQuery.css( elem, \"height\" ), old_h, \"Make sure height is auto.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.equal( jQuery.css( elem, \"height\" ), old_h, \"Make sure height is not auto.\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// manually remove generated element\n\t\t\t\tjQuery( elem ).remove();\n\n\t\t\t} );\n\t\t\tthis.clock.tick( 100 );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"Effects chaining\", function( assert ) {\n\tvar remaining = 16,\n\t\tprops = [ \"opacity\", \"height\", \"width\", \"display\", \"overflow\" ],\n\t\tsetup = function( name, selector ) {\n\t\t\tvar $el = jQuery( selector );\n\t\t\treturn $el.data( getProps( $el[ 0 ] ) ).data( \"name\", name );\n\t\t},\n\t\tcheck = function() {\n\t\t\tvar data = jQuery.data( this ),\n\t\t\t\tname = data.name;\n\t\t\tdelete data.name;\n\n\t\t\tassert.deepEqual( getProps( this ), data, name );\n\n\t\t\tjQuery.removeData( this );\n\t\t},\n\t\tgetProps = function( el ) {\n\t\t\tvar obj = {};\n\t\t\tjQuery.each( props, function( i, prop ) {\n\t\t\t\tobj[ prop ] = prop === \"overflow\" && el.style[ prop ] || jQuery.css( el, prop );\n\t\t\t} );\n\t\t\treturn obj;\n\t\t};\n\n\tassert.expect( remaining );\n\n\tsetup( \".fadeOut().fadeIn()\", \"#fadein div\" ).fadeOut( \"fast\" ).fadeIn( \"fast\", check );\n\tsetup( \".fadeIn().fadeOut()\", \"#fadeout div\" ).fadeIn( \"fast\" ).fadeOut( \"fast\", check );\n\tsetup( \".hide().show()\", \"#show div\" ).hide( \"fast\" ).show( \"fast\", check );\n\tsetup( \".show().hide()\", \"#hide div\" ).show( \"fast\" ).hide( \"fast\", check );\n\tsetup( \".show().hide(easing)\", \"#easehide div\" ).show( \"fast\" ).hide( \"fast\", \"linear\", check );\n\tsetup( \".toggle().toggle() - in\", \"#togglein div\" ).toggle( \"fast\" ).toggle( \"fast\", check );\n\tsetup( \".toggle().toggle() - out\", \"#toggleout div\" ).toggle( \"fast\" ).toggle( \"fast\", check );\n\tsetup( \".toggle().toggle(easing) - out\", \"#easetoggleout div\" ).toggle( \"fast\" ).toggle( \"fast\", \"linear\", check );\n\tsetup( \".slideDown().slideUp()\", \"#slidedown div\" ).slideDown( \"fast\" ).slideUp( \"fast\", check );\n\tsetup( \".slideUp().slideDown()\", \"#slideup div\" ).slideUp( \"fast\" ).slideDown( \"fast\", check );\n\tsetup( \".slideUp().slideDown(easing)\", \"#easeslideup div\" ).slideUp( \"fast\" ).slideDown( \"fast\", \"linear\", check );\n\tsetup( \".slideToggle().slideToggle() - in\", \"#slidetogglein div\" ).slideToggle( \"fast\" ).slideToggle( \"fast\", check );\n\tsetup( \".slideToggle().slideToggle() - out\", \"#slidetoggleout div\" ).slideToggle( \"fast\" ).slideToggle( \"fast\", check );\n\tsetup( \".fadeToggle().fadeToggle() - in\", \"#fadetogglein div\" ).fadeToggle( \"fast\" ).fadeToggle( \"fast\", check );\n\tsetup( \".fadeToggle().fadeToggle() - out\", \"#fadetoggleout div\" ).fadeToggle( \"fast\" ).fadeToggle( \"fast\", check );\n\tsetup( \".fadeTo(0.5).fadeTo(1.0, easing)\", \"#fadeto div\" ).fadeTo( \"fast\", 0.5 ).fadeTo( \"fast\", 1.0, \"linear\", check );\n\n    this.clock.tick( 400 );\n} );\n\njQuery.makeTest = function( text ) {\n        var elem = jQuery( \"<div></div>\" )\n                .attr( \"id\", \"test\" + jQuery.makeTest.id++ )\n                .addClass( \"box\" );\n\n        jQuery( \"<h4></h4>\" )\n                .text( text )\n                .appendTo( \"#fx-tests\" )\n                .after( elem );\n\n        return elem;\n};\n\njQuery.makeTest.id = 1;\n\nQUnit.test( \"jQuery.show('fast') doesn't clear radio buttons (bug #1095)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $checkedtest = jQuery( \"#checkedtest\" );\n\t$checkedtest.hide().show( \"fast\", function() {\n\t\tassert.ok( jQuery( \"input[type='radio']\", $checkedtest ).first().attr( \"checked\" ), \"Check first radio still checked.\" );\n\t\tassert.ok( !jQuery( \"input[type='radio']\", $checkedtest ).last().attr( \"checked\" ), \"Check last radio still NOT checked.\" );\n\t\tassert.ok( jQuery( \"input[type='checkbox']\", $checkedtest ).first().attr( \"checked\" ), \"Check first checkbox still checked.\" );\n\t\tassert.ok( !jQuery( \"input[type='checkbox']\", $checkedtest ).last().attr( \"checked\" ), \"Check last checkbox still NOT checked.\" );\n\t} );\n\tthis.clock.tick( 200 );\n} );\n\nQUnit.test( \"interrupt toggle\", function( assert ) {\n\tassert.expect( 24 );\n\n\tvar env = this,\n\t\tlongDuration = 2000,\n\t\tshortDuration = 500,\n\t\tremaining = 0,\n\t\t$elems = jQuery( \".chain-test\" ),\n\t\tclock = this.clock,\n\t\tfinish = function() {\n\t\t};\n\n\tjQuery.each( { slideToggle: \"height\", fadeToggle: \"opacity\", toggle: \"width\" }, function( method, prop ) {\n\t\tvar $methodElems = $elems.filter( \"[id^='\" + method.toLowerCase() + \"']\" ).each( function() {\n\n\t\t\t// Don't end test until we're done with this element\n\t\t\tremaining++;\n\n\t\t\t// Save original property value for comparison\n\t\t\tjQuery.data( this, \"startVal\", jQuery( this ).css( prop ) );\n\n\t\t\t// Expect olddisplay data from our .hide() call below\n\t\t\tassert.expectJqData( env, this, \"olddisplay\" );\n\t\t} );\n\n\t\t// Interrupt a hiding toggle\n\t\t$methodElems[ method ]( longDuration );\n\t\tsetTimeout( function() {\n\t\t\t$methodElems.stop().each( function() {\n\t\t\t\tassert.notEqual( jQuery( this ).css( prop ), jQuery.data( this, \"startVal\" ), \".stop() before completion of hiding .\" + method + \"() - #\" + this.id );\n\t\t\t} );\n\n\t\t\t// Restore\n\t\t\t$methodElems[ method ]( shortDuration, function() {\n\t\t\t\tvar id = this.id,\n\t\t\t\t\t$elem = jQuery( this ),\n\t\t\t\t\tstartVal = $elem.data( \"startVal\" );\n\n\t\t\t\t$elem.removeData( \"startVal\" );\n\n\t\t\t\tassert.equal( $elem.css( prop ), startVal, \"original value restored by .\" + method + \"() - #\" + id );\n\n\t\t\t\t// Interrupt a showing toggle\n\t\t\t\t$elem.hide()[ method ]( longDuration );\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t$elem.stop();\n\t\t\t\t\tassert.notEqual( $elem.css( prop ), startVal, \".stop() before completion of showing .\" + method + \"() - #\" + id );\n\n\t\t\t\t\t// Restore\n\t\t\t\t\t$elem[ method ]( shortDuration, function() {\n\t\t\t\t\t\tassert.equal( $elem.css( prop ), startVal, \"original value restored by .\" + method + \"() - #\" + id );\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t} );\n\t\t\t\t}, shortDuration );\n\t\t\t} );\n\t\t}, shortDuration );\n\t} );\n\tclock.tick( longDuration );\n\n\t// FIXME untangle the set timeouts\n} );\n\nQUnit.test( \"animate with per-property easing\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar data = { a: 0, b: 0, c: 0 },\n\t\ttest1Called = false,\n\t\ttest2Called = false,\n\t\tdefaultTestCalled = false,\n\t\tprops = {\n\t\t\ta: [ 100, \"_test1\" ],\n\t\t\tb: [ 100, \"_test2\" ],\n\t\t\tc: 100\n\t\t};\n\n\tjQuery.easing._test1 = function( p ) {\n\t\ttest1Called = true;\n\t\treturn p;\n\t};\n\n\tjQuery.easing._test2 = function( p ) {\n\t\ttest2Called = true;\n\t\treturn p;\n\t};\n\n\tjQuery.easing._defaultTest = function( p ) {\n\t\tdefaultTestCalled = true;\n\t\treturn p;\n\t};\n\n\tjQuery( data ).animate( props, 400, \"_defaultTest\", function() {\n\t\tassert.ok( test1Called, \"Easing function (_test1) called\" );\n\t\tassert.ok( test2Called, \"Easing function (_test2) called\" );\n\t\tassert.ok( defaultTestCalled, \"Easing function (_default) called\" );\n\t\tassert.equal( props.a[ 1 ], \"_test1\", \"animate does not change original props (per-property easing would be lost)\" );\n\t\tassert.equal( props.b[ 1 ], \"_test2\", \"animate does not change original props (per-property easing would be lost)\" );\n\t} );\n\n\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"animate with CSS shorthand properties\", function( assert ) {\n\tassert.expect( 11 );\n\n\tvar easeAnimation_count = 0,\n\t\teaseProperty_count = 0,\n\t\tpropsBasic = { \"padding\": \"10 20 30\" },\n\t\tpropsSpecial = { \"padding\": [ \"1 2 3\", \"propertyScope\" ] };\n\n\tjQuery.easing.animationScope = function( p ) {\n\t\tif ( p >= 1 ) {\n\t\t\teaseAnimation_count++;\n\t\t}\n\t\treturn p;\n\t};\n\n\tjQuery.easing.propertyScope = function( p ) {\n\t\tif ( p >= 1 ) {\n\t\t\teaseProperty_count++;\n\t\t}\n\t\treturn p;\n\t};\n\n\tjQuery( \"#foo\" )\n\t\t.animate( propsBasic, 200, \"animationScope\", function() {\n\t\t\tassert.equal( this.style.paddingTop, \"10px\", \"padding-top was animated\" );\n\t\t\tassert.equal( this.style.paddingLeft, \"20px\", \"padding-left was animated\" );\n\t\t\tassert.equal( this.style.paddingRight, \"20px\", \"padding-right was animated\" );\n\t\t\tassert.equal( this.style.paddingBottom, \"30px\", \"padding-bottom was animated\" );\n\t\t\tassert.equal( easeAnimation_count, 4, \"per-animation default easing called for each property\" );\n\t\t\teaseAnimation_count = 0;\n\t\t} )\n\t\t.animate( propsSpecial, 200, \"animationScope\", function() {\n\t\t\tassert.equal( this.style.paddingTop, \"1px\", \"padding-top was animated again\" );\n\t\t\tassert.equal( this.style.paddingLeft, \"2px\", \"padding-left was animated again\" );\n\t\t\tassert.equal( this.style.paddingRight, \"2px\", \"padding-right was animated again\" );\n\t\t\tassert.equal( this.style.paddingBottom, \"3px\", \"padding-bottom was animated again\" );\n\t\t\tassert.equal( easeAnimation_count, 0, \"per-animation default easing not called\" );\n\t\t\tassert.equal( easeProperty_count, 4, \"special easing called for each property\" );\n\n\t\t\tjQuery( this ).css( \"padding\", \"0\" );\n\t\t\tdelete jQuery.easing.animationScope;\n\t\t\tdelete jQuery.easing.propertyScope;\n\t\t} );\n\t\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"hide hidden elements, with animation (bug #7141)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar div = jQuery( \"<div id='bug7141' style='display:none'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"display\" ), \"none\", \"Element is initially hidden\" );\n\tdiv.hide( 10, function() {\n\t\tassert.equal( div.css( \"display\" ), \"none\", \"Element is hidden in .hide() callback\" );\n\t\tdiv.show( 11, function() {\n\t\t\tassert.equal( div.css( \"display\" ), \"block\", \"Element is visible in .show() callback\" );\n\t\t} );\n\t} );\n\tthis.clock.tick( 50 );\n\tassert.equal( div.css( \"display\" ), \"block\", \"Element is visible after animations\" );\n} );\n\nQUnit.test( \"animate unit-less properties (#4966)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div style='z-index: 0; position: absolute;'></div>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.equal( div.css( \"z-index\" ), \"0\", \"z-index is 0\" );\n\tdiv.animate( { zIndex: 2 }, function() {\n\t\tassert.equal( div.css( \"z-index\" ), \"2\", \"z-index is 2\" );\n\t} );\n\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"animate properties missing px w/ opacity as last (#9074)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar ml, l,\n\t\tdiv = jQuery( \"<div style='position: absolute; margin-left: 0; left: 0px;'></div>\" )\n\t\t.appendTo( \"#qunit-fixture\" );\n\tfunction cssInt( prop ) {\n\t\treturn parseInt( div.css( prop ), 10 );\n\t}\n\tassert.equal( cssInt( \"marginLeft\" ), 0, \"Margin left is 0\" );\n\tassert.equal( cssInt( \"left\" ), 0, \"Left is 0\" );\n\tdiv.animate( {\n\t\tleft: 200,\n\t\tmarginLeft: 200,\n\t\topacity: 0\n\t}, 2000 );\n\n\tthis.clock.tick( 500 );\n\n\tml = cssInt( \"marginLeft\" );\n\tl = cssInt( \"left\" );\n\tassert.notEqual( ml, 0, \"Margin left is not 0 after partial animate\" );\n\tassert.notEqual( ml, 200, \"Margin left is not 200 after partial animate\" );\n\tassert.notEqual( l, 0, \"Left is not 0 after partial animate\" );\n\tassert.notEqual( l, 200, \"Left is not 200 after partial animate\" );\n\tdiv.stop().remove();\n} );\n\nQUnit.test( \"callbacks should fire in correct order (#9100)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar a = 1,\n\t\tcb = 0;\n\n\tjQuery( \"<p data-operation='*2'></p><p data-operation='^2'></p>\" ).appendTo( \"#qunit-fixture\" )\n\n\t\t// The test will always pass if no properties are animated or if the duration is 0\n\t\t.animate( { fontSize: 12 }, 13, function() {\n\t\t\ta *= jQuery( this ).data( \"operation\" ) === \"*2\" ? 2 : a;\n\t\t\tcb++;\n\t\t\tif ( cb === 2 ) {\n\t\t\t\tassert.equal( a, 4, \"test value has been *2 and _then_ ^2\" );\n\t\t\t}\n\t\t} );\n\tthis.clock.tick( 20 );\n} );\n\nQUnit.test( \"callbacks that throw exceptions will be removed (#5684)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" );\n\n\tfunction TestException() {\n\t}\n\n\tfoo.animate( { height: 1 }, 1, function() {\n\t\tthrow new TestException();\n\t} );\n\n\t// this test thoroughly abuses undocumented methods - please feel free to update\n\t// with any changes internally to these functions.\n\n\t// make sure that the standard timer loop will NOT run.\n\tjQuery.fx.stop();\n\n        this.clock.tick( 1 );\n\tassert.throws( jQuery.fx.tick, TestException, \"Exception was thrown\" );\n\n\t// the second call shouldn't\n\tjQuery.fx.tick();\n\n\tassert.ok( true, \"Test completed without throwing a second exception\" );\n\n} );\n\nQUnit.test( \"animate will scale margin properties individually\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" ).css( {\n\t\t\"margin\": 0,\n\t\t\"marginLeft\": 100\n\t} );\n\n\tassert.ok( foo.css( \"marginLeft\" ) !== foo.css( \"marginRight\" ), \"Sanity Check\" );\n\n\tfoo.animate( {\n\t\t\"margin\": 200\n\t} ).stop();\n\n\tassert.ok( foo.css( \"marginLeft\" ) !== foo.css( \"marginRight\" ), \"The margin properties are different\" );\n\n\t// clean up for next test\n\tfoo.css( {\n\t\t\"marginLeft\": \"\",\n\t\t\"marginRight\": \"\",\n\t\t\"marginTop\": \"\",\n\t\t\"marginBottom\": \"\"\n\t} );\n} );\n\nQUnit.test( \"Do not append px to 'fill-opacity' #9548\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$div.css( \"fill-opacity\", 0 ).animate( { \"fill-opacity\": 1.0 }, 0, function() {\n\t\tassert.equal( jQuery( this ).css( \"fill-opacity\" ), 1, \"Do not append px to 'fill-opacity'\" );\n\t\t$div.remove();\n\t} );\n} );\n\nQUnit.test( \"line-height animates correctly (#13855)\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar t0,\n\t\tclock = this.clock,\n\t\tlongDuration = 2000,\n\t\tshortDuration = 500,\n\t\tanimated = jQuery(\n\t\t\t\"<p style='line-height: 100;'>unitless</p>\" +\n\t\t\t\"<p style='line-height: 5000px;'>px</p>\" +\n\t\t\t\"<p style='line-height: 5000%;'>percent</p>\" +\n\t\t\t\"<p style='line-height: 100em;'>em</p>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tinitialHeight = jQuery.map( animated, function( el ) {\n\t\t\treturn jQuery( el ).height();\n\t\t} ),\n\t\ttolerance = 1.5;\n\n\t// Delay start to improve test stability\n\tsetTimeout( function() {\n\n\t\tt0 = +( new Date() );\n\t\tanimated.animate( { \"line-height\": \"hide\" }, longDuration, \"linear\" );\n\n\t\tsetTimeout( function() {\n\t\t\tvar progress = ( ( new Date() ) - t0 ) / longDuration;\n\n\t\t\tanimated.each( function( i ) {\n\t\t\t\tvar label = jQuery.text( this ),\n\t\t\t\t\tinitial = initialHeight[ i ],\n\t\t\t\t\theight = jQuery( this ).height(),\n\t\t\t\t\tlower = initial * ( 1 - progress ) / tolerance;\n\t\t\t\tassert.ok( height < initial, \"hide \" + label + \": upper bound; \" +\n\t\t\t\t\theight + \" < \" + initial + \" @ \" + ( progress * 100 ) + \"%\" );\n\t\t\t\tassert.ok( height > lower, \"hide \" + label + \": lower bound; \"  +\n\t\t\t\t\theight + \" > \" + lower + \" @ \" + ( progress * 100 ) + \"%\" );\n\t\t\t} );\n\n\t\t\tt0 = +( new Date() );\n\t\t\tanimated.stop( true, true ).hide()\n\t\t\t\t\t.animate( { \"line-height\": \"show\" }, longDuration, \"linear\" );\n\n\t\t\tsetTimeout( function() {\n\t\t\t\tvar progress = ( ( new Date() ) - t0 ) / longDuration;\n\n\t\t\t\tanimated.each( function( i ) {\n\t\t\t\t\tvar label = jQuery.text( this ),\n\t\t\t\t\t\tinitial = initialHeight[ i ],\n\t\t\t\t\t\theight = jQuery( this ).height(),\n\t\t\t\t\t\tupper = initial * progress * tolerance;\n\t\t\t\t\tassert.ok( height < upper, \"show \" + label + \": upper bound; \" +\n\t\t\t\t\t\theight + \" < \" + upper + \" @ \" + ( progress * 100 ) + \"%\" );\n\t\t\t\t} );\n\n\t\t\t\tanimated.stop( true, true );\n\t\t\t}, shortDuration );\nclock.tick( shortDuration );\n\t\t}, shortDuration );\nclock.tick( shortDuration );\n\t}, 50 );\nclock.tick( 50 );\n} );\n\n// Start 1.8 Animation tests\nQUnit.test( \"jQuery.Animation( object, props, opts )\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar animation,\n\t\ttestObject = {\n\t\t\t\"foo\": 0,\n\t\t\t\"bar\": 1,\n\t\t\t\"width\": 100\n\t\t},\n\t\ttestDest = {\n\t\t\t\"foo\": 1,\n\t\t\t\"bar\": 0,\n\t\t\t\"width\": 200\n\t\t};\n\n\tanimation = jQuery.Animation( testObject, testDest, { \"duration\": 1 } );\n\tanimation.done( function() {\n\t\tfor ( var prop in testDest ) {\n\t\t\tassert.equal( testObject[ prop ], testDest[ prop ], \"Animated: \" + prop );\n\t\t}\n\t\tanimation.done( function() {\n\t\t\tassert.deepEqual( testObject, testDest, \"No unexpected properties\" );\n\t\t} );\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animate Option: step: function( percent, tween )\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar counter = {};\n\tjQuery( \"#foo\" ).animate( {\n\t\tprop1: 1,\n\t\tprop2: 2,\n\t\tprop3: 3\n\t}, {\n\t\tduration: 1,\n\t\tstep: function( value, tween ) {\n\t\t\tvar calls = counter[ tween.prop ] = counter[ tween.prop ] || [];\n\n\t\t\t// in case this is called multiple times for either, lets store it in\n\t\t\t// 0 or 1 in the array\n\t\t\tcalls[ value === 0 ? 0 : 1 ] = value;\n\t\t}\n\t} ).queue( function( next ) {\n\t\tassert.deepEqual( counter, {\n\t\t\tprop1: [ 0, 1 ],\n\t\t\tprop2: [ 0, 2 ],\n\t\t\tprop3: [ 0, 3 ]\n\t\t}, \"Step function was called once at 0% and once at 100% for each property\" );\n\t\tnext();\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animate callbacks have correct context\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" );\n\tfoo.animate( {\n\t\theight: 10\n\t}, 10, function() {\n\t\tassert.equal( foo[ 0 ], this, \"Complete callback after stop(true) `this` is element\" );\n\t} ).stop( true, true );\n\tfoo.animate( {\n\t\theight: 100\n\t}, 10, function() {\n\t\tassert.equal( foo[ 0 ], this, \"Complete callback `this` is element\" );\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"User supplied callback called after show when fx off (#8892)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" );\n\tjQuery.fx.off = true;\n\tfoo.hide();\n\tfoo.fadeIn( 500, function() {\n\t\tassert.ok( supportjQuery( this ).is( \":visible\" ), \"Element is visible in callback\" );\n\t\tfoo.fadeOut( 500, function() {\n\t\t\tassert.ok( supportjQuery( this ).is( \":hidden\" ), \"Element is hidden in callback\" );\n\t\t\tjQuery.fx.off = false;\n\t\t} );\n\t} );\n\tthis.clock.tick( 1000 );\n} );\n\nQUnit.test( \"animate should set display for disconnected nodes\", function( assert ) {\n\tassert.expect( 20 );\n\n\tvar env = this,\n\t\tshowMethods = {\n\t\t\tfadeIn: [],\n\t\t\tfadeTo: [ \"fast\", 0.5 ],\n\t\t\tslideDown: [ \"fast\" ],\n\t\t\tshow: [ 1 ],\n\t\t\tanimate: [ { width: \"show\" } ]\n\t\t},\n\t\ttoggleMethods = {\n\t\t\ttoggle: [ 1 ],\n\t\t\tslideToggle: []\n\t\t},\n\t\t$divEmpty = jQuery( \"<div></div>\" ),\n\t\t$divTest = jQuery( \"<div>test</div>\" ),\n\t\t$divNone = jQuery( \"<div style='display: none;'></div>\" ),\n\t\t$divInline = jQuery( \"<div style='display: inline;'></div>\" ),\n\t\tnullParentDisplay = $divEmpty.css( \"display\" ),\n\t\tunderFragmentDisplay = $divTest.css( \"display\" ),\n\t\tclock = this.clock;\n\n\tassert.strictEqual( $divEmpty[ 0 ].parentNode, null, \"Setup: element with null parentNode\" );\n\tassert.strictEqual( ( $divTest[ 0 ].parentNode || {} ).nodeType, 11, \"Setup: element under fragment\" );\n\n\tassert.strictEqual( $divEmpty.show()[ 0 ].style.display, \"\",\n\t\t\"set display with show() for element with null parentNode\" );\n\tassert.strictEqual( $divTest.show()[ 0 ].style.display, \"\",\n\t\t\"set display with show() for element under fragment\" );\n\tassert.strictEqual( $divNone.show()[ 0 ].style.display, \"\",\n\t\t\"show() should change display if it already set to none\" );\n\tassert.strictEqual( $divInline.show()[ 0 ].style.display, \"inline\",\n\t\t\"show() should not change display if it already set\" );\n\n\tassert.expectJqData( env, $divNone[ 0 ], \"olddisplay\" );\n\n\tjQuery.each( showMethods, function( name, opt ) {\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div></div>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), nullParentDisplay,\n\t\t\t\t\".\" + name + \" block with null parentNode\" );\n\t\t} ] ) );\n\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div>test</div>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), underFragmentDisplay,\n\t\t\t\t\".\" + name + \" block under fragment\" );\n\t\t} ] ) );\n\t} );\n\tjQuery.each( toggleMethods, function( name, opt ) {\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div></div>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), \"none\",\n\t\t\t\t\".\" + name + \" block with null parentNode\" );\n\t\t} ] ) );\n\n\t\tjQuery.fn[ name ].apply( jQuery( \"<div>test</div>\" ), opt.concat( [ function() {\n\t\t\tassert.strictEqual( jQuery( this ).css( \"display\" ), \"none\",\n\t\t\t\t\".\" + name + \" block under fragment\" );\n\t\t} ] ) );\n\t} );\n\tclock.tick( 400 );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"Animation callback should not show animated element as :animated (#7157)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\topacity: 0\n\t}, 100, function() {\n\t\tassert.ok( !foo.is( \":animated\" ), \"The element is not animated\" );\n\t} );\n\tthis.clock.tick( 100 );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"Initial step callback should show element as :animated (#14623)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar foo = jQuery( \"#foo\" );\n\n\tfoo.animate( {\n\t\topacity: 0\n\t}, {\n\t\tduration: 100,\n\t\tstep: function() {\n\t\t\tassert.ok( foo.is( \":animated\" ), \"The element matches :animated inside step function\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 1 );\n\tfoo.stop();\n} );\n\nQUnit.test( \"hide called on element within hidden parent should set display to none (#10045)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar hidden = jQuery( \".hidden\" ),\n\t\telems = jQuery( \"<div>hide</div><div>hide0</div><div>hide1</div>\" );\n\n\thidden.append( elems );\n\n\tjQuery.when(\n\t\telems.eq( 0 ).hide(),\n\t\telems.eq( 1 ).hide( 0 ),\n\t\telems.eq( 2 ).hide( 1 )\n\t).done( function() {\n\t\tassert.strictEqual( elems.get( 0 ).style.display, \"none\", \"hide() called on element within hidden parent should set display to none\" );\n\t\tassert.strictEqual( elems.get( 1 ).style.display, \"none\", \"hide( 0 ) called on element within hidden parent should set display to none\" );\n\t\tassert.strictEqual( elems.get( 2 ).style.display, \"none\", \"hide( 1 ) called on element within hidden parent should set display to none\" );\n\n\t\telems.remove();\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"hide, fadeOut and slideUp called on element width height and width = 0 should set display to none\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar foo = jQuery( \"#foo\" ),\n\t\ti = 0,\n\t\telems = jQuery();\n\n\tfor ( ; i < 5; i++ ) {\n\t\telems = elems.add( \"<div style='width:0;height:0;'></div>\" );\n\t}\n\n\tfoo.append( elems );\n\n\tjQuery.when(\n\t\telems.eq( 0 ).hide(),\n\t\telems.eq( 1 ).hide( jQuery.noop ),\n\t\telems.eq( 2 ).hide( 1 ),\n\t\telems.eq( 3 ).fadeOut(),\n\t\telems.eq( 4 ).slideUp()\n\t).done( function() {\n\t\tassert.strictEqual( elems.get( 0 ).style.display, \"none\", \"hide() called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 1 ).style.display, \"none\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"hide( jQuery.noop ) called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 2 ).style.display, \"none\", \"hide( 1 ) called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 3 ).style.display, \"none\", \"fadeOut() called on element width height and width = 0 should set display to none\" );\n\t\tassert.strictEqual( elems.get( 4 ).style.display, \"none\", \"slideUp() called on element width height and width = 0 should set display to none\" );\n\n\t} );\n\tthis.clock.tick( 400 );\n} );\n\nQUnit.test( \"hide should not leave hidden inline elements visible (#14848)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar el = jQuery( \"#simon1\" );\n\n\tel.hide( 1, function() {\n\t\tassert.equal( el.css( \"display\" ), \"none\", \"hidden\" );\n\t\tel.hide( 1, function() {\n\t\t\tassert.equal( el.css( \"display\" ), \"none\", \"still hidden\" );\n\t\t} );\n\t} );\n\n\tthis.clock.tick( 100 );\n} );\n\nQUnit.test( \"Handle queue:false promises\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar foo = jQuery( \"#foo\" ).clone().addBack(),\n\t\tstep = 1;\n\n\tfoo.animate( {\n\t\ttop: 1\n\t}, {\n\t\tduration: 10,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\t\t\tassert.ok( step++ <= 2, \"Step one or two\" );\n\t\t}\n\t} ).animate( {\n\t\tbottom: 1\n\t}, {\n\t\tduration: 10,\n\t\tcomplete: function() {\n\t\t\tassert.ok( step > 2 && step < 5, \"Step three or four\" );\n\t\t\tstep++;\n\t\t}\n\t} );\n\n\tthis.clock.tick( 10 );\n\n\tfoo.promise().done( function() {\n\t\tassert.equal( step++, 5, \"steps 1-5: queue:false then queue:fx done\" );\n\t\tfoo.animate( {\n\t\t\ttop: 10\n\t\t}, {\n\t\t\tduration: 10,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( step > 5 && step < 8, \"Step six or seven\" );\n\t\t\t\tstep++;\n\t\t\t}\n\t\t} ).animate( {\n\t\t\tbottom: 10\n\t\t}, {\n\t\t\tduration: 10,\n\t\t\tqueue: false,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( step > 7 && step < 10, \"Step eight or nine\" );\n\t\t\t\tstep++;\n\t\t\t}\n\t\t} ).promise().done( function() {\n\t\t\tassert.equal( step++, 10, \"steps 6-10: queue:fx then queue:false\" );\n\t\t} );\n\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"multiple unqueued and promise\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar foo = jQuery( \"#foo\" ),\n\t\tstep = 1;\n\tfoo.animate( {\n\t\tmarginLeft: 300\n\t}, {\n\t\tduration: 500,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\t\t\tassert.strictEqual( step++, 2, \"Step 2\" );\n\t\t}\n\t} ).animate( {\n\t\ttop: 100\n\t}, {\n\t\tduration: 1000,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\t\t\tassert.strictEqual( step++, 3, \"Step 3\" );\n\t\t}\n\t} ).animate( {}, {\n\t\tduration: 2000,\n\t\tqueue: false,\n\t\tcomplete: function() {\n\n\t\t\t// no properties is a non-op and finishes immediately\n\t\t\tassert.strictEqual( step++, 1, \"Step 1\" );\n\t\t}\n\t} ).promise().done( function() {\n\t\tassert.strictEqual( step++, 4, \"Step 4\" );\n\t} );\n\tthis.clock.tick( 1000 );\n} );\n\nQUnit.test( \"animate does not change start value for non-px animation (#7109)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar parent = jQuery( \"<div><div></div></div>\" ).css( { width: 284, height: 1 } ).appendTo( \"#qunit-fixture\" ),\n\t\tchild = parent.children().css( { fontSize: \"98.6in\", width: \"0.01em\", height: 1 } ),\n\t\tactual = parseFloat( child.css( \"width\" ) ),\n\t\tcomputed = [];\n\n\tchild.animate( { width: \"0%\" }, {\n\t\tduration: 1,\n\t\tstep: function() {\n\t\t\tcomputed.push( parseFloat( child.css( \"width\" ) ) );\n\t\t}\n\t} ).queue( function( next ) {\n\t\tvar ratio = computed[ 0 ] / actual;\n\t\tassert.ok( ratio > 0.9 && ratio < 1.1,\n\t\t\t\"Starting width was close enough (\" + computed[ 0 ] + \" approximates \" + actual + \")\" );\n\t\tnext();\n\t\tparent.remove();\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"non-px animation handles non-numeric start (#11971)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar foo = jQuery( \"#foo\" ),\n\t\tinitial = foo.css( \"backgroundPositionX\" );\n\n\tif ( !initial ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( true, \"Style property not understood\" );\n\t\treturn;\n\t}\n\n\tfoo.animate( { backgroundPositionX: \"42%\" }, {\n\t\tduration: 1,\n\t\tprogress: function( anim, percent ) {\n\t\t\tif ( percent ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( parseFloat( initial ) ) {\n\t\t\t\tassert.equal( jQuery.style( this, \"backgroundPositionX\" ), initial, \"Numeric start preserved\" );\n\t\t\t} else {\n\t\t\t\tassert.equal( jQuery.style( this, \"backgroundPositionX\" ), \"0%\", \"Non-numeric start zeroed\" );\n\t\t\t}\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.equal( jQuery.style( this, \"backgroundPositionX\" ), \"42%\", \"End reached\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animation callbacks (#11797)\", function( assert ) {\n\tassert.expect( 15 );\n\n\tvar prog = 0,\n\t\ttargets = jQuery( \"#foo\" ).children(),\n\t\tdone = false,\n\t\texpectedProgress = 1;\n\n\ttargets.eq( 0 ).animate( {}, {\n\t\tduration: 1,\n\t\tstart: function() {\n\t\t\tassert.ok( true, \"empty: start\" );\n\t\t},\n\t\tprogress: function( anim, percent ) {\n\t\t\tassert.equal( percent, prog, \"empty: progress \" + prog );\n\t\t\tprog = 1;\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.ok( true, \"empty: done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( false, \"empty: fail\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.ok( true, \"empty: always\" );\n\t\t\tdone = true;\n\t\t}\n\t} );\n\n\tassert.ok( done, \"empty: done immediately\" );\n\n\tdone = false;\n\ttargets.eq( 1 ).animate( {\n\t\topacity: 0\n\t}, {\n\t\tduration: 1,\n\t\tstart: function() {\n\t\t\tassert.ok( true, \"stopped: start\" );\n\t\t},\n\t\tprogress: function( anim, percent ) {\n\t\t\tassert.equal( percent, 0, \"stopped: progress 0\" );\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.ok( false, \"stopped: done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( true, \"stopped: fail\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.ok( true, \"stopped: always\" );\n\t\t\tdone = true;\n\t\t}\n\t} ).stop();\n\n\tassert.ok( done, \"stopped: stopped immediately\" );\n\n\ttargets.eq( 2 ).animate( {\n\t\topacity: 0\n\t}, {\n\t\tduration: 1,\n\t\tstart: function() {\n\t\t\tassert.ok( true, \"async: start\" );\n\t\t},\n\t\tprogress: function( anim, percent ) {\n\t\t\tassert.equal( percent, expectedProgress, \"async: progress \" + expectedProgress );\n\t\t\texpectedProgress++;\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.ok( true, \"async: done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( false, \"async: fail\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.ok( true, \"async: always\" );\n\t\t}\n\t} );\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"Animation callbacks in order (#2292)\", function( assert ) {\n\tassert.expect( 9 );\n\n\tvar done = assert.async(),\n\t\tstep = 0,\n\t\tdur = 50;\n\n\tjQuery( \"#foo\" ).animate( {\n\t\twidth: \"5px\"\n\t}, {\n\t\tduration: dur,\n\t\tstart: function() {\n\t\t\tassert.step( \"start\" );\n\t\t},\n\t\tprogress: function( anim, p, ms ) {\n\t\t\tif ( !( step++ ) ) {\n\t\t\t\tassert.step( \"progress\" );\n\t\t\t\tassert.strictEqual( p, 0, \"first progress callback: progress ratio\" );\n\t\t\t\tassert.strictEqual( ms, dur, \"first progress callback: remaining ms\" );\n\t\t\t} else {\n\t\t\t\tassert.step( \"last progress\" );\n\t\t\t\tassert.strictEqual( p, 1, \"last progress callback: progress ratio\" );\n\t\t\t\tassert.strictEqual( ms, 0, \"last progress callback: remaining ms\" );\n\t\t\t}\n\t\t},\n\t\tdone: function() {\n\t\t\tassert.step( \"done\" );\n\t\t},\n\t\tfail: function() {\n\t\t\tassert.ok( false, \"Animation failed\" );\n\t\t},\n\t\talways: function() {\n\t\t\tassert.verifySteps( [ \"start\", \"progress\", \"last progress\", \"done\" ] );\n\t\t\tdone();\n\t\t}\n\t} ).finish();\n\n\tthis.clock.tick( dur + 10 );\n} );\n\nQUnit.test( \"Animate properly sets overflow hidden when animating width/height (#12117)\", function( assert ) {\n\tassert.expect( 8 );\n\n\tjQuery.each( [ \"height\", \"width\" ], function( _, prop ) {\n\t\tjQuery.each( [ 100, 0 ], function( _, value ) {\n\t\t\tvar div = jQuery( \"<div>\" ).css( \"overflow\", \"auto\" ),\n\t\t\t\tprops = {};\n\t\t\tprops[ prop ] = value;\n\t\t\tdiv.animate( props, 1 );\n\t\t\tassert.equal( div.css( \"overflow\" ), \"hidden\",\n\t\t\t\t\"overflow: hidden set when animating \" + prop + \" to \" + value );\n\t\t\tdiv.stop();\n\t\t\tassert.equal( div.css( \"overflow\" ), \"auto\",\n\t\t\t\t\"overflow: auto restored after animating \" + prop + \" to \" + value );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"Each tick of the timer loop uses a fresh time (#12837)\", function( assert ) {\n\tvar lastVal,\n\t\ttmp = jQuery( {\n\t\t\ttest: 0\n\t\t} );\n\tassert.expect( 3 );\n\ttmp.animate( {\n\t\ttest: 100\n\t}, {\n\t\tstep: function( p, fx ) {\n\t\t\tassert.ok( fx.now !== lastVal, \"Current value is not the last value: \" + lastVal + \" - \" + fx.now );\n\t\t\tlastVal = fx.now;\n\t\t}\n\t} );\n\tthis.clock.tick( 1 );\n\n\t// now that we have a new time, run another tick\n\tjQuery.fx.tick();\n\n\tthis.clock.tick( 1 );\n\n\tjQuery.fx.tick();\n\ttmp.stop();\n} );\n\nQUnit.test( \"Animations with 0 duration don't ease (#12273)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery.easing.test = function() {\n\t\tassert.ok( false, \"Called easing\" );\n\t};\n\n\tjQuery( \"#foo\" ).animate( {\n\t\theight: 100\n\t}, {\n\t\tduration: 0,\n\t\teasing: \"test\",\n\t\tcomplete: function() {\n\t\t\tassert.equal( jQuery( this ).height(), 100, \"Height is 100\" );\n\t\t}\n\t} );\n\n\tdelete jQuery.easing.test;\n} );\n\njQuery.map( [ \"toggle\", \"slideToggle\", \"fadeToggle\" ], function( method ) {\n\n\t// this test would look a lot better if we were using something to override\n\t// the default timers\n\tvar duration = 1500;\n\tQUnit.test( \"toggle state tests: \" + method + \" (#8685)\", function( assert ) {\n\t\tfunction secondToggle() {\n\t\t\tvar stopped = parseFloat( element.css( check ) );\n\t\t\ttested = false;\n\t\t\telement[ method ]( {\n\t\t\t\tduration: duration,\n\t\t\t\tstep: function( p, fx ) {\n\t\t\t\t\tif ( fx.pos > 0.1 && fx.prop === check && !tested ) {\n\t\t\t\t\t\ttested = true;\n\t\t\t\t\t\tassert.equal( fx.start, stopped, check + \" starts at \" + stopped + \" where it stopped\" );\n\t\t\t\t\t\tassert.equal( fx.end, original, check + \" ending value is \" + original );\n\t\t\t\t\t\telement.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tvar tested,\n\t\t\toriginal,\n\t\t\tcheck = method === \"slideToggle\" ? \"height\" : \"opacity\",\n\t\t\telement = jQuery( \"#foo\" ).height( 200 );\n\n\t\tassert.expect( 4 );\n\n\t\telement[ method ]( {\n\t\t\tduration: duration,\n\t\t\teasing: \"linear\",\n\t\t\tstep: function( p, fx ) {\n\t\t\t\tif ( fx.pos > 0.1 && fx.prop === check && !tested ) {\n\t\t\t\t\ttested = true;\n\t\t\t\t\toriginal = fx.start;\n\t\t\t\t\tassert.ok( fx.start !== 0, check + \" is starting at \" + original + \" on first toggle (non-zero)\" );\n\t\t\t\t\tassert.equal( fx.end, 0, check + \" is ending at 0 on first toggle\" );\n\t\t\t\t\telement.stop();\n\t\t\t\t}\n\t\t\t},\n\t\t\talways: secondToggle\n\t\t} );\n\n                //FIXME figure out why 470\n\t\tthis.clock.tick( 470 );\n\t} );\n} );\n\nQUnit.test( \"jQuery.fx.start & jQuery.fx.stop hook points\", function( assert ) {\n\tvar oldStart = jQuery.fx.start,\n\t\toldStop = jQuery.fx.stop,\n\t\tfoo = jQuery( { foo: 0 } );\n\n\tassert.expect( 3 );\n\n\tjQuery.fx.start = function() {\n\t\tassert.ok( true, \"start called\" );\n\t};\n\tjQuery.fx.stop = function() {\n\t\tassert.ok( true, \"stop called\" );\n\t};\n\n\t// calls start\n\tfoo.animate( { foo: 1 }, { queue: false } );\n\n\t// calls start\n\tfoo.animate( { foo: 2 }, { queue: false } );\n\tfoo.stop();\n\n\t// calls stop\n\tjQuery.fx.tick();\n\n\t// cleanup\n\tjQuery.fx.start = oldStart;\n\tjQuery.fx.stop = oldStop;\n} );\n\nQUnit.test( \".finish() completes all queued animations\", function( assert ) {\n\tvar animations = {\n\t\t\ttop: 100,\n\t\t\tleft: 100,\n\t\t\theight: 100,\n\t\t\twidth: 100\n\t\t},\n\t\tdiv = jQuery( \"<div>\" );\n\n\tassert.expect( 11 );\n\n\tjQuery.each( animations, function( prop, value ) {\n\t\tvar anim = {};\n\t\tanim[ prop ] = value;\n\n\t\t// the delay shouldn't matter at all!\n\t\tdiv.css( prop, 1 ).animate( anim, function() {\n\t\t\tassert.ok( true, \"Called animation callback for \" + prop );\n\t\t} ).delay( 100 );\n\t} );\n\tassert.equal( div.queue().length, 8, \"8 animations in the queue\" );\n\tdiv.finish();\n\tjQuery.each( animations, function( prop, value ) {\n\t\tassert.equal( parseFloat( div.css( prop ) ), value, prop + \" finished at correct value\" );\n\t} );\n\tassert.equal( div.queue().length, 0, \"empty queue when done\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), false, \":animated doesn't match\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\t// cleanup\n\tdiv.remove();\n\n\t// leaves a \"shadow timer\" which does nothing around, need to force a tick\n\tjQuery.fx.tick();\n} );\n\nQUnit.test( \".finish( false ) - unqueued animations\", function( assert ) {\n\tvar animations = {\n\t\t\ttop: 100,\n\t\t\tleft: 100,\n\t\t\theight: 100,\n\t\t\twidth: 100\n\t\t},\n\t\tdiv = jQuery( \"<div>\" );\n\n\tassert.expect( 10 );\n\n\tjQuery.each( animations, function( prop, value ) {\n\t\tvar anim = {};\n\t\tanim[ prop ] = value;\n\t\tdiv.css( prop, 1 ).animate( anim, {\n\t\t\tqueue: false,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Called animation callback for \" + prop );\n\t\t\t}\n\t\t} );\n\t} );\n\tassert.equal( div.queue().length, 0, \"0 animations in the queue\" );\n\tdiv.finish( false );\n\tjQuery.each( animations, function( prop, value ) {\n\t\tassert.equal( parseFloat( div.css( prop ) ), value, prop + \" finished at correct value\" );\n\t} );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), false, \":animated doesn't match\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\t// cleanup\n\tdiv.remove();\n\n\t// leaves a \"shadow timer\" which does nothing around, need to force a tick\n\tjQuery.fx.tick();\n} );\n\nQUnit.test( \".finish( \\\"custom\\\" ) - custom queue animations\", function( assert ) {\n\tvar animations = {\n\t\t\ttop: 100,\n\t\t\tleft: 100,\n\t\t\theight: 100,\n\t\t\twidth: 100\n\t\t},\n\t\tdiv = jQuery( \"<div>\" );\n\n\tassert.expect( 11 );\n\n\tjQuery.each( animations, function( prop, value ) {\n\t\tvar anim = {};\n\t\tanim[ prop ] = value;\n\t\tdiv.css( prop, 1 ).animate( anim, {\n\t\t\tqueue: \"custom\",\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Called animation callback for \" + prop );\n\t\t\t}\n\t\t} );\n\t} );\n\tassert.equal( div.queue( \"custom\" ).length, 4, \"4 animations in the queue\" );\n\n\t// start the first animation\n\tdiv.dequeue( \"custom\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), true, \":animated matches\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\tdiv.finish( \"custom\" );\n\tjQuery.each( animations, function( prop, value ) {\n\t\tassert.equal( parseFloat( div.css( prop ) ), value, prop + \" finished at correct value\" );\n\t} );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( div.is( \":animated\" ), false, \":animated doesn't match\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":animated selector not supported with selector-native\" );\n\t}\n\n\t// cleanup\n\tdiv.remove();\n\n\t// leaves a \"shadow timer\" which does nothing around, need to force a tick\n\tjQuery.fx.tick();\n} );\n\nQUnit.test( \".finish() calls finish of custom queue functions\", function( assert ) {\n\tfunction queueTester( next, hooks ) {\n\t\thooks.stop = function( gotoEnd ) {\n\t\t\tinside++;\n\t\t\tassert.equal( this, div[ 0 ] );\n\t\t\tassert.ok( gotoEnd, \"hooks.stop(true) called\" );\n\t\t};\n\t}\n\tvar div = jQuery( \"<div>\" ),\n\t\tinside = 0,\n\t\toutside = 0;\n\n\tassert.expect( 6 );\n\tqueueTester.finish = function() {\n\t\toutside++;\n\t\tassert.ok( true, \"Finish called on custom queue function\" );\n\t};\n\n\tdiv.queue( queueTester ).queue( queueTester ).queue( queueTester ).finish();\n\n\tassert.equal( inside, 1, \"1 stop(true) callback\" );\n\tassert.equal( outside, 2, \"2 finish callbacks\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \".finish() is applied correctly when multiple elements were animated (#13937)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar elems = jQuery( \"<a>0</a><a>1</a><a>2</a>\" );\n\n\telems.animate( { opacity: 0 }, 1500 ).animate( { opacity: 1 }, 1500 );\n\tsetTimeout( function() {\n\t\telems.eq( 1 ).finish();\n\t\tassert.ok( !elems.eq( 1 ).queue().length, \"empty queue for .finish()ed element\" );\n\t\tassert.ok( elems.eq( 0 ).queue().length, \"non-empty queue for preceding element\" );\n\t\tassert.ok( elems.eq( 2 ).queue().length, \"non-empty queue for following element\" );\n\t\telems.stop( true );\n\n\t}, 100 );\n\tthis.clock.tick( 1500 );\n} );\n\nQUnit.test( \"slideDown() after stop() (#13483)\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar ul = jQuery( \"<ul style='height: 100px; display: block;'></ul>\" )\n\t\t\t\t.appendTo( \"#qunit-fixture\" ),\n\t\t\torigHeight = ul.height(),\n\t\t\tclock = this.clock;\n\n        // First test. slideUp() -> stop() in the middle -> slideDown() until the end\n\t\tul.slideUp( 1000 );\n\t\tclock.tick( 500 );\n\t\tul.stop( true );\n\t\tul.slideDown( 1, function() {\n\t\t\t\tassert.equal( ul.height(), origHeight, \"slideDown() after interrupting slideUp() with stop(). Height must be in original value\" );\n\n\t\t\t\t// Second test. slideDown() -> stop() in the middle -> slideDown() until the end\n\t\t\t\tul.slideUp( 1 );\n\t\t\t\tclock.tick( 10 );\n\t\t\t\tul.slideDown( 1000 );\n\t\t\t\tclock.tick( 500 );\n\t\t\t\tul.stop( true );\n\t\t\t\tul.slideDown( 1 );\n\t\t\t\tassert.equal( ul.height(), origHeight, \"slideDown() after interrupting slideDown() with stop(). Height must be in original value\" );\n\n\t\t\t\t// Cleanup\n\t\t\t\tul.remove();\n\t\t\t\tclock.tick( 10 );\n\n\t\t} );\n\n\t\tclock.tick( 10 );\n} );\n\nQUnit.test( \"Respect display value on inline elements (#14824)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar clock = this.clock,\n\t\tfromStyleSheet = jQuery( \"<span id='span-14824'></span>\" ),\n\t\tfromStyleAttr = jQuery( \"<span style='display: block;'></span>\" );\n\n\tjQuery( \"#qunit-fixture\" ).append( fromStyleSheet, fromStyleAttr );\n\n\tfromStyleSheet.slideUp( function() {\n\t\tjQuery( this ).slideDown( function() {\n\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"block\",\n\t\t\t\t\"Respect previous display value (from stylesheet) on span element\" );\n\t\t} );\n\t} );\n\n\tfromStyleAttr.slideUp( function() {\n\t\tjQuery( this ).slideDown( function() {\n\t\t\tassert.equal( jQuery( this ).css( \"display\" ), \"block\",\n\t\t\t\t\"Respect previous display value (from style attribute) on span element\" );\n\t\t} );\n\t} );\n\n\tclock.tick( 800 );\n} );\n\nQUnit.test( \"jQuery.easing._default (gh-2218)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( \"#foo\" )\n\t\t.animate( { width: \"5px\" }, {\n\t\t\tduration: 5,\n\t\t\tstart: function( anim ) {\n\t\t\t\tassert.equal( anim.opts.easing, jQuery.easing._default,\n\t\t\t\t\t\"anim.opts.easing should be equal to jQuery.easing._default when the easing argument is not given\" );\n\t\t\t}\n\t\t} )\n\t\t.animate( { height: \"5px\" }, {\n\t\t\tduration: 5,\n\t\t\teasing: \"linear\",\n\t\t\tstart: function( anim ) {\n\t\t\t\tassert.equal( anim.opts.easing, \"linear\",\n\t\t\t\t\t\"anim.opts.easing should be equal to the easing argument\" );\n\t\t\t}\n\t\t} )\n\t\t.stop();\n\n\tthis.clock.tick( 25 );\n} );\n\nQUnit.test( \"jQuery.easing._default in Animation (gh-2218\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar animation,\n\t\tdefaultEasing = jQuery.easing._default,\n\t\tcalled = false,\n\t\ttestObject = { \"width\": 100 },\n\t\ttestDest = { \"width\": 200 };\n\n\tjQuery.easing.custom = function( p ) {\n\t\tcalled = true;\n\t\treturn p;\n\t};\n\tjQuery.easing._default = \"custom\";\n\n\tanimation = jQuery.Animation( testObject, testDest, { \"duration\": 1 } );\n\tanimation.done( function() {\n\t\tassert.equal( testObject.width, testDest.width, \"Animated width\" );\n\t\tassert.ok( called, \"Custom jQuery.easing._default called\" );\n\t\tassert.strictEqual( animation.opts.easing, \"custom\",\n\t\t\t\"Animation used custom jQuery.easing._default\" );\n\t\tjQuery.easing._default = defaultEasing;\n\t\tdelete jQuery.easing.custom;\n\t} );\n\n\tthis.clock.tick( 10 );\n} );\n\nQUnit.test( \"jQuery.easing._default in Tween (gh-2218)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar tween,\n\t\tdefaultEasing = jQuery.easing._default,\n\t\tcalled = false,\n\t\ttestObject = { \"width\": 100 };\n\n\tjQuery.easing.custom = function( p ) {\n\t\tcalled = true;\n\t\treturn p;\n\t};\n\tjQuery.easing._default = \"custom\";\n\n\ttween = jQuery.Tween( testObject, { \"duration\": 1 }, \"width\", 200 );\n\ttween.run( 1 );\n\tassert.equal( testObject.width, 200, \"Animated width\" );\n\tassert.ok( called, \"Custom jQuery.easing._default called\" );\n\tassert.strictEqual( tween.easing, \"custom\",\n\t\t\"Animation used custom jQuery.easing._default\" );\n\tjQuery.easing._default = defaultEasing;\n\tdelete jQuery.easing.custom;\n} );\n\nQUnit.test( \"Display value is correct for disconnected nodes (trac-13310)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar div = jQuery( \"<div></div>\" );\n\n\tassert.equal( div.css( \"display\", \"inline\" ).hide().show().appendTo( \"body\" ).css( \"display\" ), \"inline\", \"Initialized display value has returned\" );\n\tdiv.remove();\n\n\tdiv.css( \"display\", \"none\" ).hide();\n\tassert.equal( jQuery._data( div[ 0 ], \"olddisplay\" ), undefined, \"olddisplay is undefined after hiding a detached and hidden element\" );\n\tdiv.remove();\n\n\tdiv.css( \"display\", \"inline-block\" ).hide().appendTo( \"body\" ).fadeIn( function() {\n\t\tassert.equal( div.css( \"display\" ), \"inline-block\", \"Initialized display value has returned\" );\n\t\tdiv.remove();\n\t} );\n\tthis.clock.tick( 1000 );\n} );\n\nQUnit.test( \"Show/hide/toggle and display: inline\", function( assert ) {\n\tassert.expect( 40 );\n\n\tvar clock = this.clock;\n\n\tjQuery( \"<span></span><div style='display:inline' title='inline div'></div>\" ).each( function() {\n\t\tvar completed, interrupted,\n\t\t\tN = 100,\n\t\t\tfixture = jQuery( \"#qunit-fixture\" ),\n\t\t\t$el = jQuery( this ),\n\t\t\tkind = this.title || this.nodeName.toLowerCase();\n\n\t\t// Animations allowed to complete\n\t\tcompleted = jQuery.map( [\n\t\t\t$el.clone().data( { call: \"hide\", done: \"none\" } ).appendTo( fixture ).hide( N ),\n\t\t\t$el.clone().data( { call: \"toggle\", done: \"none\" } ).appendTo( fixture ).toggle( N ),\n\t\t\t$el.clone().data( { call: \"hide+show\", done: \"inline\" } ).appendTo( fixture )\n\t\t\t\t.hide().show( N ),\n\t\t\t$el.clone().data( { call: \"hide+toggle\", done: \"inline\" } ).appendTo( fixture )\n\t\t\t\t.hide().toggle( N )\n\t\t], function( $clone ) { return $clone[ 0 ]; } );\n\n\t\t// Animations not allowed to complete\n\t\tinterrupted = jQuery.map( [\n\t\t\t$el.clone().data( { call: \"hide+stop\" } ).appendTo( fixture ).hide( N ),\n\t\t\t$el.clone().data( { call: \"toggle+stop\" } ).appendTo( fixture ).toggle( N ),\n\t\t\t$el.clone().data( { call: \"hide+show+stop\" } ).appendTo( fixture ).hide().show( N ),\n\t\t\t$el.clone().data( { call: \"hide+toggle+stop\" } ).appendTo( fixture ).hide().toggle( N )\n\t\t], function( $clone ) { return $clone[ 0 ]; } );\n\n\t\t// All elements should be inline-block during the animation\n\t\tclock.tick( N / 2 );\n\t\tjQuery( completed ).each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" );\n\t\t\tassert.strictEqual( $el.css( \"display\" ), \"inline-block\", kind + \" display during \" + call );\n\t\t} );\n\n\t\t// Interrupted elements should remain inline-block\n\t\tjQuery( interrupted ).stop();\n\t\tclock.tick( N / 2 );\n\t\tjQuery( interrupted ).each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" );\n\t\t\tassert.strictEqual( $el.css( \"display\" ), \"inline-block\", kind + \" display after \" + call );\n\t\t} );\n\n\t\t// Completed elements should not remain inline-block\n\t\tclock.tick( N / 2 );\n\t\tjQuery( completed ).each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" ),\n\t\t\t\tdisplay = $el.data( \"done\" );\n\t\t\tassert.strictEqual( $el.css( \"display\" ), display, kind + \" display after \" + call );\n\t\t} );\n\n\t\t// A post-animation toggle should not make any element inline-block\n\t\tcompleted = jQuery( completed.concat( interrupted ) );\n\t\tcompleted.toggle( N / 2 );\n\t\tclock.tick( N );\n\t\tcompleted.each( function() {\n\t\t\tvar $el = jQuery( this ),\n\t\t\t\tcall = $el.data( \"call\" );\n\t\t\tassert.ok( $el.css( \"display\" ) !== \"inline-block\",\n\t\t\t\tkind + \" display is not inline-block after \" + call + \"+toggle\" );\n\t\t} );\n\t} );\n} );\n\nfunction testEasing( assert, speed, easing, complete ) {\n\tassert.expect( 4 );\n\tvar options = jQuery.speed( speed, easing, complete );\n\n\tassert.equal( options.duration, 10, \"Duration set properly\" );\n\tassert.equal(\n\t\ttypeof options.easing === \"function\" ? options.easing() : options.easing,\n\t\t\"linear\",\n\t\t\"Easing set properly\"\n\t);\n\tassert.equal( options.queue, \"fx\", \"Queue defaults to fx\" );\n\toptions.complete();\n}\n\nQUnit.test( \"jQuery.speed( speed, easing, complete )\", function( assert ) {\n\ttestEasing( assert, 10, \"linear\", function() {\n\t\tassert.ok( true, \"Complete called\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery.speed( speed, easing, complete ) - with easing function\", function( assert ) {\n\ttestEasing(\n\t\tassert,\n\t\t10,\n\t\tfunction() {\n\t\t\treturn \"linear\";\n\t\t},\n\t\tfunction() {\n\t\t\tassert.ok( true, \"Complete called\" );\n\t\t}\n\t);\n} );\n\nQUnit.test( \"jQuery.speed( options )\", function( assert ) {\n\ttestEasing( assert, {\n\t\tduration: 10,\n\t\teasing: \"linear\",\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Complete called\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"jQuery.speed( options ) - with easing function\", function( assert ) {\n\ttestEasing( assert, {\n\t\tduration: 10,\n\t\teasing: function() {\n\t\t\treturn \"linear\";\n\t\t},\n\t\tcomplete: function() {\n\t\t\tassert.ok( true, \"Complete called\" );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"jQuery.speed( options ) - queue values\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar get = function( queue ) {\n\t\treturn jQuery.speed( { queue: queue } ).queue;\n\t};\n\n\tassert.equal( get( null ), \"fx\", \"null defaults to 'fx'\" );\n\tassert.equal( get( undefined ), \"fx\", \"undefined defaults to 'fx'\" );\n\tassert.equal( get( true ), \"fx\", \"true defaults to 'fx'\" );\n\tassert.equal( get( \"fx\" ), \"fx\", \"'fx' passed through\" );\n\tassert.equal( get( \"custom\" ), \"custom\", \"'custom' passed through\" );\n} );\n\nQUnit.test( \"jQuery.speed() - durations\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar get = function( duration ) {\n\t\treturn jQuery.speed( duration ).duration;\n\t};\n\n\tassert.equal( get( 100 ), 100, \"jQuery.speed sets number duration\" );\n\tassert.equal( get(), jQuery.fx.speeds._default, \"jQuery.speed falls back default duration\" );\n\tassert.equal( get( \"slow\" ), jQuery.fx.speeds.slow, \"jQuery.speed uses preset speeds\" );\n\tassert.equal( get( \"fast\" ), jQuery.fx.speeds.fast, \"jQuery.speed uses preset speeds\" );\n\tjQuery.fx.off = true;\n\tassert.equal( get( 100 ), 0, \"jQuery.speed defaults duration to zero if fx is off\" );\n\tjQuery.fx.off = false;\n} );\n\n} )();\n", "QUnit.module( \"event\", {\n\tbeforeEach: function() {\n\t\tdocument.body.focus();\n\t},\n\tafterEach: moduleTeardown\n} );\n\nQUnit.test( \"null or undefined handler\", function( assert ) {\n\tassert.expect( 4 );\n\n\t// Supports Fixes bug #7229\n\ttry {\n\t\tjQuery( \"#firstp\" ).on( \"click\", null );\n\t\tassert.ok( true, \"Passing a null handler will not throw an exception\" );\n\t} catch ( e ) {}\n\n\ttry {\n\t\tjQuery( \"#firstp\" ).on( \"click\", undefined );\n\t\tassert.ok( true, \"Passing an undefined handler will not throw an exception\" );\n\t} catch ( e ) {}\n\n\tvar expectedElem = jQuery( \"#firstp\" );\n\tvar actualElem = expectedElem.on( \"click\", null );\n\tassert.equal( actualElem, expectedElem, \"Passing a null handler should return the original element\" );\n\n\tactualElem = expectedElem.on( \"click\", undefined );\n\tassert.equal( actualElem, expectedElem, \"Passing a null handler should return the original element\" );\n} );\n\nQUnit.test( \"on() with non-null,defined data\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar handler = function( event, data ) {\n\t\tassert.equal( data, 0, \"non-null, defined data (zero) is correctly passed\" );\n\t};\n\n\tjQuery( \"#foo\" ).on( \"foo.on\", handler );\n\tjQuery( \"div\" ).on( \"foo.delegate\", \"#foo\", handler );\n\n\tjQuery( \"#foo\" ).trigger( \"foo\", 0 );\n\n\tjQuery( \"#foo\" ).off( \"foo.on\", handler );\n\tjQuery( \"div\" ).off( \"foo.delegate\", \"#foo\" );\n\n} );\n\nQUnit.test( \"Handler changes and .trigger() order\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery(\n\t\t\"<div><div><p><span><b class=\\\"a\\\">b</b></span></p></div></div>\"\n\t),\n\tpath = \"\";\n\n\tmarkup\n\t\t.find( \"*\" ).addBack().on( \"click\", function() {\n\t\t\tpath += this.nodeName.toLowerCase() + \" \";\n\t\t} )\n\t\t.filter( \"b\" ).on( \"click\", function( e ) {\n\n\t\t\t// Removing span should not stop propagation to original parents\n\t\t\tif ( e.target === this ) {\n\t\t\t\tjQuery( this ).parent().remove();\n\t\t\t}\n\t\t} );\n\n\tmarkup.find( \"b\" ).trigger( \"click\" );\n\n\tassert.equal( path, \"b p div div \", \"Delivered all events\" );\n\n\tmarkup.remove();\n} );\n\nQUnit.test( \"on(), with data\", function( assert ) {\n\tassert.expect( 4 );\n\tvar test, handler, handler2;\n\n\thandler = function( event ) {\n\t\tassert.ok( event.data, \"on() with data, check passed data exists\" );\n\t\tassert.equal( event.data.foo, \"bar\", \"on() with data, Check value of passed data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", { \"foo\": \"bar\" }, handler ).trigger( \"click\" ).off( \"click\", handler );\n\n\tassert.ok( !jQuery._data( jQuery( \"#firstp\" )[ 0 ], \"events\" ), \"Event handler unbound when using data.\" );\n\n\ttest = function() {};\n\thandler2 = function( event ) {\n\t\tassert.equal( event.data, test, \"on() with function data, Check value of passed data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", test, handler2 ).trigger( \"click\" ).off( \"click\", handler2 );\n} );\n\nQUnit.test( \"click(), with data\", function( assert ) {\n\tassert.expect( 3 );\n\tvar handler = function( event ) {\n\t\tassert.ok( event.data, \"on() with data, check passed data exists\" );\n\t\tassert.equal( event.data.foo, \"bar\", \"on() with data, Check value of passed data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", { \"foo\": \"bar\" }, handler ).trigger( \"click\" ).off( \"click\", handler );\n\n\tassert.ok( !jQuery._data( jQuery( \"#firstp\" )[ 0 ], \"events\" ), \"Event handler unbound when using data.\" );\n} );\n\nQUnit.test( \"on(), with data, trigger with data\", function( assert ) {\n\tassert.expect( 4 );\n\tvar handler = function( event, data ) {\n\t\tassert.ok( event.data, \"check passed data exists\" );\n\t\tassert.equal( event.data.foo, \"bar\", \"Check value of passed data\" );\n\t\tassert.ok( data, \"Check trigger data\" );\n\t\tassert.equal( data.bar, \"foo\", \"Check value of trigger data\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", { foo: \"bar\" }, handler ).trigger( \"click\", [ { bar: \"foo\" } ] ).off( \"click\", handler );\n} );\n\nQUnit.test( \"on(), multiple events at once\", function( assert ) {\n\tassert.expect( 2 );\n\tvar handler,\n\t\tclickCounter = 0,\n\t\tmouseoverCounter = 0;\n\thandler = function( event ) {\n\t\tif ( event.type === \"click\" ) {\n\t\t\tclickCounter += 1;\n\t\t} else if ( event.type === \"mouseover\" ) {\n\t\t\tmouseoverCounter += 1;\n\t\t}\n\t};\n\n\tjQuery( \"#firstp\" ).on( \"click mouseover\", handler ).trigger( \"click\" ).trigger( \"mouseover\" );\n\tassert.equal( clickCounter, 1, \"on() with multiple events at once\" );\n\tassert.equal( mouseoverCounter, 1, \"on() with multiple events at once\" );\n} );\n\nQUnit.test( \"on(), five events at once\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\thandler = function() {\n\t\t\tcount++;\n\t\t};\n\n\tjQuery( \"#firstp\" ).on( \"click mouseover foo bar baz\", handler )\n\t.trigger( \"click\" ).trigger( \"mouseover\" )\n\t\t.trigger( \"foo\" ).trigger( \"bar\" )\n\t\t.trigger( \"baz\" );\n\n\tassert.equal( count, 5, \"on() five events at once\" );\n} );\n\nQUnit.test( \"on(), multiple events at once and namespaces\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar cur, div,\n\t\tobj = {};\n\n\tdiv = jQuery( \"<div></div>\" ).on( \"focusin.a\", function( e ) {\n\t\tassert.equal( e.type, cur, \"Verify right single event was fired.\" );\n\t} );\n\n\tcur = \"focusin\";\n\tdiv.trigger( \"focusin.a\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n\n\tdiv = jQuery( \"<div></div>\" ).on( \"click mouseover\", obj, function( e ) {\n\t\tassert.equal( e.type, cur, \"Verify right multi event was fired.\" );\n\t\tassert.equal( e.data, obj, \"Make sure the data came in correctly.\" );\n\t} );\n\n\tcur = \"click\";\n\tdiv.trigger( \"click\" );\n\n\tcur = \"mouseover\";\n\tdiv.trigger( \"mouseover\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n\n\tdiv = jQuery( \"<div></div>\" ).on( \"focusin.a focusout.b\", function( e ) {\n\t\tassert.equal( e.type, cur, \"Verify right multi event was fired.\" );\n\t} );\n\n\tcur = \"focusin\";\n\tdiv.trigger( \"focusin.a\" );\n\n\tcur = \"focusout\";\n\tdiv.trigger( \"focusout.b\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n} );\n\nQUnit.test( \"on(), namespace with special add\", function( assert ) {\n\tassert.expect( 27 );\n\n\tvar i = 0,\n\t\tdiv = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"test\", function() {\n\t\t\tassert.ok( true, \"Test event fired.\" );\n\t\t} );\n\n\tjQuery.event.special.test = {\n\t\t_default: function( e, data ) {\n\t\t\tassert.equal( e.type, \"test\", \"Make sure we're dealing with a test event.\" );\n\t\t\tassert.ok( data, \"And that trigger data was passed.\" );\n\t\t\tassert.strictEqual( e.target, div[ 0 ], \"And that the target is correct.\" );\n\t\t\tassert.equal( this, window, \"And that the context is correct.\" );\n\t\t},\n\t\tsetup: function() {},\n\t\tteardown: function() {\n\t\t\tassert.ok( true, \"Teardown called.\" );\n\t\t},\n\t\tadd: function( handleObj ) {\n\t\t\tvar handler = handleObj.handler;\n\t\t\thandleObj.handler = function( e ) {\n\t\t\t\te.xyz = ++i;\n\t\t\t\thandler.apply( this, arguments );\n\t\t\t};\n\t\t},\n\t\tremove: function() {\n\t\t\tassert.ok( true, \"Remove called.\" );\n\t\t}\n\t};\n\n\tdiv.on( \"test.a\", { x: 1 }, function( e ) {\n\t\tassert.ok( !!e.xyz, \"Make sure that the data is getting passed through.\" );\n\t\tassert.equal( e.data[ \"x\" ], 1, \"Make sure data is attached properly.\" );\n\t} );\n\n\tdiv.on( \"test.b\", { x: 2 }, function( e ) {\n\t\tassert.ok( !!e.xyz, \"Make sure that the data is getting passed through.\" );\n\t\tassert.equal( e.data[ \"x\" ], 2, \"Make sure data is attached properly.\" );\n\t} );\n\n\t// Should trigger 5\n\tdiv.trigger( \"test\", 33.33 );\n\n\t// Should trigger 2\n\tdiv.trigger( \"test.a\", \"George Harrison\" );\n\n\t// Should trigger 2\n\tdiv.trigger( \"test.b\", { year: 1982 } );\n\n\t// Should trigger 4\n\tdiv.off( \"test\" );\n\n\tdiv = jQuery( \"<div></div>\" ).on( \"test\", function() {\n\t\tassert.ok( true, \"Test event fired.\" );\n\t} );\n\n\t// Should trigger 2\n\tdiv.appendTo( \"#qunit-fixture\" ).remove();\n\n\tdelete jQuery.event.special.test;\n} );\n\nQUnit.test( \"on(), no data\", function( assert ) {\n\tassert.expect( 1 );\n\tvar handler = function( event ) {\n\t\tassert.ok( !event.data, \"Check that no data is added to the event object\" );\n\t};\n\tjQuery( \"#firstp\" ).on( \"click\", handler ).trigger( \"click\" );\n} );\n\nQUnit.test( \"on/one/off(Object)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar $elem,\n\t\tclickCounter = 0,\n\t\tmouseoverCounter = 0;\n\n\tfunction handler( event ) {\n\t\tif ( event.type === \"click\" ) {\n\t\t\tclickCounter++;\n\t\t} else if ( event.type === \"mouseover\" ) {\n\t\t\tmouseoverCounter++;\n\t\t}\n\t}\n\n\tfunction handlerWithData( event ) {\n\t\tif ( event.type === \"click\" ) {\n\t\t\tclickCounter += event.data;\n\t\t} else if ( event.type === \"mouseover\" ) {\n\t\t\tmouseoverCounter += event.data;\n\t\t}\n\t}\n\n\tfunction trigger() {\n\t\t$elem.trigger( \"click\" ).trigger( \"mouseover\" );\n\t}\n\n\t$elem = jQuery( \"#firstp\" )\n\n\t\t// Regular bind\n\t\t.on( {\n\t\t\t\"click\":handler,\n\t\t\t\"mouseover\":handler\n\t\t} )\n\n\t\t// Bind with data\n\t\t.one( {\n\t\t\t\"click\":handlerWithData,\n\t\t\t\"mouseover\":handlerWithData\n\t\t}, 2 );\n\n\ttrigger();\n\n\tassert.equal( clickCounter, 3, \"on(Object)\" );\n\tassert.equal( mouseoverCounter, 3, \"on(Object)\" );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"on(Object)\" );\n\tassert.equal( mouseoverCounter, 4, \"on(Object)\" );\n\n\tjQuery( \"#firstp\" ).off( {\n\t\t\"click\":handler,\n\t\t\"mouseover\":handler\n\t} );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"on(Object)\" );\n\tassert.equal( mouseoverCounter, 4, \"on(Object)\" );\n} );\n\nQUnit.test( \"on/off(Object), on/off(Object, String)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar events,\n\t\tclickCounter = 0,\n\t\tmouseoverCounter = 0,\n\t\t$p = jQuery( \"#firstp\" ),\n\t\t$a = $p.find( \"a\" ).eq( 0 );\n\n\tevents = {\n\t\t\"click\": function( event ) {\n\t\t\tclickCounter += ( event.data || 1 );\n\t\t},\n\t\t\"mouseover\": function( event ) {\n\t\t\tmouseoverCounter += ( event.data || 1 );\n\t\t}\n\t};\n\n\tfunction trigger() {\n\t\t$a.trigger( \"click\" ).trigger( \"mouseover\" );\n\t}\n\n\tjQuery( document ).on( events, \"#firstp a\" );\n\t$p.on( events, \"a\", 2 );\n\n\ttrigger();\n\tassert.equal( clickCounter, 3, \"on\" );\n\tassert.equal( mouseoverCounter, 3, \"on\" );\n\n\t$p.off( events, \"a\" );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"off\" );\n\tassert.equal( mouseoverCounter, 4, \"off\" );\n\n\tjQuery( document ).off( events, \"#firstp a\" );\n\n\ttrigger();\n\tassert.equal( clickCounter, 4, \"off\" );\n\tassert.equal( mouseoverCounter, 4, \"off\" );\n} );\n\nQUnit.test( \"on immediate propagation\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar lastClick,\n\t\t$p = jQuery( \"#firstp\" ),\n\t\t$a = $p.find( \"a\" ).eq( 0 );\n\n\tlastClick = \"\";\n\tjQuery( document ).on( \"click\", \"#firstp a\", function( e ) {\n\t\tlastClick = \"click1\";\n\t\te.stopImmediatePropagation();\n\t} );\n\tjQuery( document ).on( \"click\", \"#firstp a\", function() {\n\t\tlastClick = \"click2\";\n\t} );\n\t$a.trigger( \"click\" );\n\tassert.equal( lastClick, \"click1\", \"on stopImmediatePropagation\" );\n\tjQuery( document ).off( \"click\", \"#firstp a\" );\n\n\tlastClick = \"\";\n\t$p.on( \"click\", \"a\", function( e ) {\n\t\tlastClick = \"click1\";\n\t\te.stopImmediatePropagation();\n\t} );\n\t$p.on( \"click\", \"a\", function() {\n\t\tlastClick = \"click2\";\n\t} );\n\t$a.trigger( \"click\" );\n\tassert.equal( lastClick, \"click1\", \"on stopImmediatePropagation\" );\n\t$p.off( \"click\", \"**\" );\n} );\n\nQUnit.test( \"on bubbling, isDefaultPrevented, stopImmediatePropagation\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $anchor2 = jQuery( \"#anchor2\" ),\n\t\t$main = jQuery( \"#qunit-fixture\" ),\n\t\tneverCallMe = function() {\n\t\t\tassert.ok( false, \"immediate propagation should have been stopped\" );\n\t\t},\n\t\tfakeClick = function( $jq ) {\n\n\t\t\t// Use a native click so we don't get jQuery simulated bubbling\n\t\t\tvar e = document.createEvent( \"MouseEvents\" );\n\t\t\te.initEvent( \"click\", true, true );\n\t\t\t$jq[ 0 ].dispatchEvent( e );\n\t\t};\n\t$anchor2.on( \"click\", function( e ) {\n\t\te.preventDefault();\n\t} );\n\t$main.on( \"click\", \"#foo\", function( e ) {\n\t\tassert.equal( e.isDefaultPrevented(), true, \"isDefaultPrevented true passed to bubbled event\" );\n\t} );\n\tfakeClick( $anchor2 );\n\t$anchor2.off( \"click\" );\n\t$main.off( \"click\", \"**\" );\n\t$anchor2.on( \"click\", function() {\n\n\t\t// Let the default action occur\n\t} );\n\t$main.on( \"click\", \"#foo\", function( e ) {\n\t\tassert.equal( e.isDefaultPrevented(), false, \"isDefaultPrevented false passed to bubbled event\" );\n\t} );\n\tfakeClick( $anchor2 );\n\t$anchor2.off( \"click\" );\n\t$main.off( \"click\", \"**\" );\n\n\t$anchor2.on( \"click\", function( e ) {\n\t\te.stopImmediatePropagation();\n\t\tassert.ok( true, \"anchor was clicked and prop stopped\" );\n\t} );\n\t$anchor2[ 0 ].addEventListener( \"click\", neverCallMe, false );\n\tfakeClick( $anchor2 );\n\t$anchor2[ 0 ].removeEventListener( \"click\", neverCallMe );\n} );\n\nQUnit.test( \"triggered events stopPropagation() for natively-bound events\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $button = jQuery( \"#button\" ),\n\t\t$parent = $button.parent(),\n\t\tneverCallMe = function() {\n\t\t\tassert.ok( false, \"propagation should have been stopped\" );\n\t\t},\n\t\tstopPropagationCallback = function( e ) {\n\t\t\tassert.ok( true, \"propagation is stopped\" );\n\t\t\te.stopPropagation();\n\t\t};\n\n\t$parent[ 0 ].addEventListener( \"click\", neverCallMe );\n\t$button.on( \"click\", stopPropagationCallback );\n\t$button.trigger( \"click\" );\n\t$parent[ 0 ].removeEventListener( \"click\", neverCallMe );\n\t$button.off( \"click\", stopPropagationCallback );\n} );\n\nQUnit.test( \"trigger() works with events that were previously stopped\", function( assert ) {\n\tassert.expect( 0 );\n\n\tvar $button = jQuery( \"#button\" ),\n\t\t$parent = $button.parent(),\n\t\tneverCallMe = function() {\n\t\t\tassert.ok( false, \"propagation should have been stopped\" );\n\t\t};\n\n\t$parent[ 0 ].addEventListener( \"click\", neverCallMe );\n\t$button.on( \"click\", neverCallMe );\n\n\tvar clickEvent =  jQuery.Event( \"click\" );\n\tclickEvent.stopPropagation();\n\t$button.trigger( clickEvent );\n\n\t$parent[ 0 ].removeEventListener( \"click\", neverCallMe );\n\t$button.off( \"click\", neverCallMe );\n} );\n\n\nQUnit.test( \"on(), iframes\", function( assert ) {\n\tassert.expect( 1 );\n\n\t// events don't work with iframes, see #939 - this test fails in IE because of contentDocument\n\tvar doc = jQuery( \"#loadediframe\" ).contents();\n\n\tjQuery( \"div\", doc ).on( \"click\", function() {\n\t\tassert.ok( true, \"Binding to element inside iframe\" );\n\t} ).trigger( \"click\" ).off( \"click\" );\n} );\n\nQUnit.test( \"on(), trigger change on select\", function( assert ) {\n\tassert.expect( 5 );\n\tvar counter = 0;\n\tfunction selectOnChange( event ) {\n\t\tassert.equal( event.data, counter++, \"Event.data is not a global event object\" );\n\t}\n\tjQuery( \"#form select\" ).each( function( i ) {\n\t\tjQuery( this ).on( \"change\", i, selectOnChange );\n\t} ).trigger( \"change\" );\n} );\n\nQUnit.test( \"on(), namespaced events, cloned events\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar firstp = jQuery( \"#firstp\" );\n\n\tfirstp.on( \"custom.test\", function() {\n\t\tassert.ok( false, \"Custom event triggered\" );\n\t} );\n\n\tfirstp.on( \"click\", function( e ) {\n\t\tassert.ok( true, \"Normal click triggered\" );\n\t\tassert.equal( e.type + e.namespace, \"click\", \"Check that only click events trigger this fn\" );\n\t} );\n\n\tfirstp.on( \"click.test\", function( e ) {\n\t\tvar check = \"click\";\n\t\tassert.ok( true, \"Namespaced click triggered\" );\n\t\tif ( e.namespace ) {\n\t\t\tcheck += \"test\";\n\t\t}\n\t\tassert.equal( e.type + e.namespace, check, \"Check that only click/click.test events trigger this fn\" );\n\t} );\n\n\t//clone(true) element to verify events are cloned correctly\n\tfirstp = firstp.add( firstp.clone( true ).attr( \"id\", \"firstp2\" ).insertBefore( firstp ) );\n\n\t// Trigger both bound fn (8)\n\tfirstp.trigger( \"click\" );\n\n\t// Trigger one bound fn (4)\n\tfirstp.trigger( \"click.test\" );\n\n\t// Remove only the one fn\n\tfirstp.off( \"click.test\" );\n\n\t// Trigger the remaining fn (4)\n\tfirstp.trigger( \"click\" );\n\n\t// Remove the remaining namespaced fn\n\tfirstp.off( \".test\" );\n\n\t// Try triggering the custom event (0)\n\tfirstp.trigger( \"custom\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tjQuery( \"#nonnodes\" ).contents().on( \"tester\", function() {\n\t\tassert.equal( this.nodeType, 1, \"Check node,textnode,comment on just does real nodes\" );\n\t} ).trigger( \"tester\" );\n\n\t// Make sure events stick with appendTo'd elements (which are cloned) #2027\n\tjQuery( \"<a href='#fail' class='test'>test</a>\" ).on( \"click\", function() { return false; } ).appendTo( \"#qunit-fixture\" );\n\tassert.ok( jQuery( \"a.test\" ).eq( 0 ).triggerHandler( \"click\" ) === false, \"Handler is bound to appendTo'd elements\" );\n} );\n\nQUnit.test( \"on(), multi-namespaced events\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar order = [\n\t\t\"click.test.abc\",\n\t\t\"click.test.abc\",\n\t\t\"click.test\",\n\t\t\"click.test.abc\",\n\t\t\"click.test\",\n\t\t\"custom.test2\"\n\t];\n\n\tfunction check( name, msg ) {\n\t\tassert.deepEqual( name, order.shift(), msg );\n\t}\n\n\tjQuery( \"#firstp\" ).on( \"custom.test\", function() {\n\t\tcheck( \"custom.test\", \"Custom event triggered\" );\n\t} );\n\n\tjQuery( \"#firstp\" ).on( \"custom.test2\", function() {\n\t\tcheck( \"custom.test2\", \"Custom event triggered\" );\n\t} );\n\n\tjQuery( \"#firstp\" ).on( \"click.test\", function() {\n\t\tcheck( \"click.test\", \"Normal click triggered\" );\n\t} );\n\n\tjQuery( \"#firstp\" ).on( \"click.test.abc\", function() {\n\t\tcheck( \"click.test.abc\", \"Namespaced click triggered\" );\n\t} );\n\n\t// Those would not trigger/off (#5303)\n\tjQuery( \"#firstp\" ).trigger( \"click.a.test\" );\n\tjQuery( \"#firstp\" ).off( \"click.a.test\" );\n\n\t// Trigger both bound fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"click.test.abc\" );\n\n\t// Trigger one bound fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"click.abc\" );\n\n\t// Trigger two bound fn (2)\n\tjQuery( \"#firstp\" ).trigger( \"click.test\" );\n\n\t// Remove only the one fn\n\tjQuery( \"#firstp\" ).off( \"click.abc\" );\n\n\t// Trigger the remaining fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"click\" );\n\n\t// Remove the remaining fn\n\tjQuery( \"#firstp\" ).off( \".test\" );\n\n\t// Trigger the remaining fn (1)\n\tjQuery( \"#firstp\" ).trigger( \"custom\" );\n} );\n\nQUnit.test( \"namespace-only event binding is a no-op\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( \"#firstp\" )\n\t\t.on( \".whoops\", function() {\n\t\t\tassert.ok( false, \"called a namespace-only event\" );\n\t\t} )\n\t\t.on( \"whoops\", function() {\n\t\t\tassert.ok( true, \"called whoops\" );\n\t\t} )\n\t\t.trigger( \"whoops\" )\t// 1\n\t\t.off( \".whoops\" )\n\t\t.trigger( \"whoops\" )\t// 2\n\t\t.off( \"whoops\" );\n} );\n\nQUnit.test( \"Empty namespace is ignored\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#firstp\" )\n\t\t.on( \"meow.\", function( e ) {\n\t\t\tassert.equal( e.namespace, \"\", \"triggered a namespace-less meow event\" );\n\t\t} )\n\t\t.trigger( \"meow.\" )\n\t\t.off( \"meow.\" );\n} );\n\nQUnit.test( \"on(), with same function\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar count = 0, func = function() {\n\t\tcount++;\n\t};\n\n\tjQuery( \"#liveHandlerOrder\" ).on( \"foo.bar\", func ).on( \"foo.zar\", func );\n\tjQuery( \"#liveHandlerOrder\" ).trigger( \"foo.bar\" );\n\n\tassert.equal( count, 1, \"Verify binding function with multiple namespaces.\" );\n\n\tjQuery( \"#liveHandlerOrder\" ).off( \"foo.bar\", func ).off( \"foo.zar\", func );\n\tjQuery( \"#liveHandlerOrder\" ).trigger( \"foo.bar\" );\n\n\tassert.equal( count, 1, \"Verify that removing events still work.\" );\n} );\n\nQUnit.test( \"on(), make sure order is maintained\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"#firstp\" ), log = [], check = [];\n\n\tjQuery.each( new Array( 100 ), function( i ) {\n\t\telem.on( \"click\", function() {\n\t\t\tlog.push( i );\n\t\t} );\n\n\t\tcheck.push( i );\n\n\t} );\n\n\telem.trigger( \"click\" );\n\n\tassert.equal( log.join( \",\" ), check.join( \",\" ), \"Make sure order was maintained.\" );\n\n\telem.off( \"click\" );\n} );\n\nQUnit.test( \"on(), with different this object\", function( assert ) {\n\tassert.expect( 4 );\n\tvar thisObject = { myThis: true },\n\t\tdata = { myData: true },\n\t\thandler1 = function() {\n\t\t\tassert.equal( this, thisObject, \"on() with different this object\" );\n\t\t}.bind( thisObject ),\n\t\thandler2 = function( event ) {\n\t\t\tassert.equal( this, thisObject, \"on() with different this object and data\" );\n\t\t\tassert.equal( event.data, data, \"on() with different this object and data\" );\n\t\t}.bind( thisObject );\n\n\tjQuery( \"#firstp\" )\n\t\t.on( \"click\", handler1 ).trigger( \"click\" ).off( \"click\", handler1 )\n\t\t.on( \"click\", data, handler2 ).trigger( \"click\" ).off( \"click\", handler2 );\n\n\tassert.ok( !jQuery._data( jQuery( \"#firstp\" )[ 0 ], \"events\" ), \"Event handler unbound when using different this object and data.\" );\n} );\n\nQUnit.test( \"on(name, false), off(name, false)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar main = 0;\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", function() { main++; } );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).on( \"click\", false );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 0, \"Verify that no bubble happened.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).off( \"click\", false );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\n\t// manually clean up events from elements outside the fixture\n\tjQuery( \"#qunit-fixture\" ).off( \"click\" );\n} );\n\nQUnit.test( \"on(name, selector, false), off(name, selector, false)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar main = 0;\n\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", \"#ap\", function() { main++; } );\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).on( \"click\", \"#groups\", false );\n\tjQuery( \"#groups\" ).trigger( \"click\" );\n\tassert.equal( main, 0, \"Verify that no bubble happened.\" );\n\n\tmain = 0;\n\tjQuery( \"#ap\" ).off( \"click\", \"#groups\", false );\n\tjQuery( \"#groups\" ).trigger( \"click\" );\n\tassert.equal( main, 1, \"Verify that the trigger happened correctly.\" );\n\tjQuery( \"#qunit-fixture\" ).off( \"click\", \"#ap\" );\n} );\n\nQUnit.test( \"on()/trigger()/off() on plain object\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar events,\n\t\tobj = {};\n\n\t// Make sure it doesn't complain when no events are found\n\tjQuery( obj ).trigger( \"test\" );\n\n\t// Make sure it doesn't complain when no events are found\n\tjQuery( obj ).off( \"test\" );\n\n\tjQuery( obj ).on( {\n\t\t\"test\": function() {\n\t\t\tassert.ok( true, \"Custom event run.\" );\n\t\t},\n\t\t\"submit\": function() {\n\t\t\tassert.ok( true, \"Custom submit event run.\" );\n\t\t}\n\t} );\n\n\tevents = jQuery._data( obj, \"events\" );\n\tassert.ok( events, \"Object has events bound.\" );\n\tassert.equal( obj[ \"events\" ], undefined, \"Events object on plain objects is not events\" );\n\tassert.equal( obj.test, undefined, \"Make sure that test event is not on the plain object.\" );\n\tassert.equal( obj.handle, undefined, \"Make sure that the event handler is not on the plain object.\" );\n\n\t// Should trigger 1\n\tjQuery( obj ).trigger( \"test\" );\n\tjQuery( obj ).trigger( \"submit\" );\n\n\tjQuery( obj ).off( \"test\" );\n\tjQuery( obj ).off( \"submit\" );\n\n\t// Should trigger 0\n\tjQuery( obj ).trigger( \"test\" );\n\n\t// Make sure it doesn't complain when no events are found\n\tjQuery( obj ).off( \"test\" );\n\n\tassert.equal( obj && obj[ jQuery.expando ] &&\n\t\t\tobj[ jQuery.expando ][ jQuery.expando ] &&\n\t\t\tobj[ jQuery.expando ][ jQuery.expando ][ \"events\" ], undefined, \"Make sure events object is removed\" );\n} );\n\nQUnit.test( \"off(type)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar message, func,\n\t\t$elem = jQuery( \"#firstp\" );\n\n\tfunction error() {\n\t\tassert.ok( false, message );\n\t}\n\n\tmessage = \"unbind passing function\";\n\t$elem.on( \"error1\", error ).off( \"error1\", error ).triggerHandler( \"error1\" );\n\n\tmessage = \"unbind all from event\";\n\t$elem.on( \"error1\", error ).off( \"error1\" ).triggerHandler( \"error1\" );\n\n\tmessage = \"unbind all\";\n\t$elem.on( \"error1\", error ).off().triggerHandler( \"error1\" );\n\n\tmessage = \"unbind many with function\";\n\t$elem.on( \"error1 error2\", error )\n\t\t.off( \"error1 error2\", error )\n\t\t.trigger( \"error1\" ).triggerHandler( \"error2\" );\n\n\tmessage = \"unbind many\"; // #3538\n\t$elem.on( \"error1 error2\", error )\n\t\t.off( \"error1 error2\" )\n\t\t.trigger( \"error1\" ).triggerHandler( \"error2\" );\n\n\tmessage = \"unbind without a type or handler\";\n\t$elem.on( \"error1 error2.test\", error )\n\t\t.off()\n\t\t.trigger( \"error1\" ).triggerHandler( \"error2\" );\n\n\t// Should only unbind the specified function\n\tjQuery( document ).on( \"click\", function() {\n\t\tassert.ok( true, \"called handler after selective removal\" );\n\t} );\n\tfunc = function() {};\n\tjQuery( document )\n\t\t.on( \"click\", func )\n\t\t.off( \"click\", func )\n\t\t.trigger( \"click\" )\n\t\t.off( \"click\" );\n} );\n\nQUnit.test( \"off(eventObject)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $elem = jQuery( \"#firstp\" ),\n\t\tnum;\n\n\tfunction check( expected ) {\n\t\tnum = 0;\n\t\t$elem.trigger( \"foo\" ).triggerHandler( \"bar\" );\n\t\tassert.equal( num, expected, \"Check the right handlers are triggered\" );\n\t}\n\n\t$elem\n\n\t\t// This handler shouldn't be unbound\n\t\t.on( \"foo\", function() {\n\t\t\tnum += 1;\n\t\t} )\n\t\t.on( \"foo\", function( e ) {\n\t\t\t$elem.off( e );\n\t\t\tnum += 2;\n\t\t} )\n\n\t\t// Neither this one\n\t\t.on( \"bar\", function() {\n\t\t\tnum += 4;\n\t\t} );\n\n\tcheck( 7 );\n\tcheck( 5 );\n\n\t$elem.off( \"bar\" );\n\tcheck( 1 );\n\n\t$elem.off();\n\tcheck( 0 );\n} );\n\nQUnit.test( \"mouseover triggers mouseenter\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\telem = jQuery( \"<a></a>\" );\n\telem.on( \"mouseenter\", function() {\n\t\tcount++;\n\t} );\n\telem.trigger( \"mouseover\" );\n\tassert.equal( count, 1, \"make sure mouseover triggers a mouseenter\" );\n\n\telem.remove();\n} );\n\nQUnit.test( \"pointerover triggers pointerenter\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\telem = jQuery( \"<a></a>\" );\n\telem.on( \"pointerenter\", function() {\n\t\tcount++;\n\t} );\n\telem.trigger( \"pointerover\" );\n\tassert.equal( count, 1, \"make sure pointerover triggers a pointerenter\" );\n\n\telem.remove();\n} );\n\nQUnit.test( \"withinElement implemented with jQuery.contains()\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<div id='jc-outer'><div id='jc-inner'></div></div>\" );\n\n\tjQuery( \"#jc-outer\" ).on( \"mouseenter mouseleave\", function( event ) {\n\t\tassert.equal( this.id, \"jc-outer\", this.id + \" \" + event.type );\n\t} );\n\n\tjQuery( \"#jc-inner\" ).trigger( \"mouseenter\" );\n} );\n\nQUnit.test( \"mouseenter, mouseleave don't catch exceptions\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar elem = jQuery( \"#firstp\" ).on( \"mouseenter mouseleave\", function() {\n\t\t\tthrow \"an Exception\";\n\t\t} );\n\n\ttry {\n\t\telem.trigger( \"mouseenter\" );\n\t} catch ( e ) {\n\t\tassert.equal( e, \"an Exception\", \"mouseenter doesn't catch exceptions\" );\n\t}\n\n\ttry {\n\t\telem.trigger( \"mouseleave\" );\n\t} catch ( e ) {\n\t\tassert.equal( e, \"an Exception\", \"mouseleave doesn't catch exceptions\" );\n\t}\n} );\n\nQUnit.test( \"trigger() bubbling\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar win = 0, doc = 0, html = 0, body = 0, main = 0, ap = 0;\n\n\tjQuery( window ).on( \"click\", function() { win++; } );\n\tjQuery( document ).on( \"click\", function( e ) { if ( e.target !== document ) { doc++; } } );\n\tjQuery( \"html\" ).on( \"click\", function() { html++; } );\n\tjQuery( \"body\" ).on( \"click\", function() { body++; } );\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", function() { main++; } );\n\tjQuery( \"#ap\" ).on( \"click\", function() { ap++; return false; } );\n\n\tjQuery( \"html\" ).trigger( \"click\" );\n\tassert.equal( win, 1, \"HTML bubble\" );\n\tassert.equal( doc, 1, \"HTML bubble\" );\n\tassert.equal( html, 1, \"HTML bubble\" );\n\n\tjQuery( \"body\" ).trigger( \"click\" );\n\tassert.equal( win, 2, \"Body bubble\" );\n\tassert.equal( doc, 2, \"Body bubble\" );\n\tassert.equal( html, 2, \"Body bubble\" );\n\tassert.equal( body, 1, \"Body bubble\" );\n\n\tjQuery( \"#qunit-fixture\" ).trigger( \"click\" );\n\tassert.equal( win, 3, \"Main bubble\" );\n\tassert.equal( doc, 3, \"Main bubble\" );\n\tassert.equal( html, 3, \"Main bubble\" );\n\tassert.equal( body, 2, \"Main bubble\" );\n\tassert.equal( main, 1, \"Main bubble\" );\n\n\tjQuery( \"#ap\" ).trigger( \"click\" );\n\tassert.equal( doc, 3, \"ap bubble\" );\n\tassert.equal( html, 3, \"ap bubble\" );\n\tassert.equal( body, 2, \"ap bubble\" );\n\tassert.equal( main, 1, \"ap bubble\" );\n\tassert.equal( ap, 1, \"ap bubble\" );\n\n\tjQuery( document ).trigger( \"click\" );\n\tassert.equal( win, 4, \"doc bubble\" );\n\n\t// manually clean up events from elements outside the fixture\n\tjQuery( window ).off( \"click\" );\n\tjQuery( document ).off( \"click\" );\n\tjQuery( \"html, body, #qunit-fixture\" ).off( \"click\" );\n} );\n\nQUnit.test( \"trigger(type, [data], [fn])\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar $elem, pass, form, elem2,\n\t\thandler = function( event, a, b, c ) {\n\t\tassert.equal( event.type, \"click\", \"check passed data\" );\n\t\tassert.equal( a, 1, \"check passed data\" );\n\t\tassert.equal( b, \"2\", \"check passed data\" );\n\t\tassert.equal( c, \"abc\", \"check passed data\" );\n\t\treturn \"test\";\n\t};\n\n\t$elem = jQuery( \"#firstp\" );\n\n\t// Simulate a \"native\" click\n\t$elem[ 0 ].click = function() {\n\t\tassert.ok( true, \"Native call was triggered\" );\n\t};\n\n\tjQuery( document ).on( \"mouseenter\", \"#firstp\", function() {\n\t\tassert.ok( true, \"Trigger mouseenter bound by on\" );\n\t} );\n\n\tjQuery( document ).on( \"mouseleave\", \"#firstp\", function() {\n\t\tassert.ok( true, \"Trigger mouseleave bound by on\" );\n\t} );\n\n\t$elem.trigger( \"mouseenter\" );\n\n\t$elem.trigger( \"mouseleave\" );\n\n\tjQuery( document ).off( \"mouseenter mouseleave\", \"#firstp\" );\n\n\t// Triggers handlers and native\n\t// Trigger 5\n\t$elem.on( \"click\", handler ).trigger( \"click\", [ 1, \"2\", \"abc\" ] );\n\n\t// Simulate a \"native\" click\n\t$elem[ 0 ].click = function() {\n\t\tassert.ok( false, \"Native call was triggered\" );\n\t};\n\n\t// Trigger only the handlers (no native)\n\t// Triggers 5\n\tassert.equal( $elem.triggerHandler( \"click\", [ 1, \"2\", \"abc\" ] ), \"test\", \"Verify handler response\" );\n\n\tpass = true;\n\ttry {\n\t\telem2 = jQuery( \"#form input\" ).eq( 0 );\n\t\telem2.get( 0 ).style.display = \"none\";\n\t\telem2.trigger( \"focus\" );\n\t} catch ( e ) {\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"Trigger focus on hidden element\" );\n\n\tpass = true;\n\ttry {\n\t\tjQuery( \"#qunit-fixture table\" ).eq( 0 ).on( \"test:test\", function() {} ).trigger( \"test:test\" );\n\t} catch ( e ) {\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"Trigger on a table with a colon in the even type, see #3533\" );\n\n\tform = jQuery( \"<form action=''></form>\" ).appendTo( \"body\" );\n\n\t// Make sure it can be prevented locally\n\tform.on( \"submit\", function() {\n\t\tassert.ok( true, \"Local `on` still works.\" );\n\t\treturn false;\n\t} );\n\n\t// Trigger 1\n\tform.trigger( \"submit\" );\n\n\tform.off( \"submit\" );\n\n\tjQuery( document ).on( \"submit\", function() {\n\t\tassert.ok( true, \"Make sure bubble works up to document.\" );\n\t\treturn false;\n\t} );\n\n\t// Trigger 1\n\tform.trigger( \"submit\" );\n\n\tjQuery( document ).off( \"submit\" );\n\n\tform.remove();\n} );\n\nQUnit.test( \"submit event bubbles on copied forms (#11649)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $formByClone, $formByHTML,\n\t\t$testForm = jQuery( \"#testForm\" ),\n\t\t$fixture = jQuery( \"#qunit-fixture\" ),\n\t\t$wrapperDiv = jQuery( \"<div></div>\" ).appendTo( $fixture );\n\n\tfunction noSubmit( e ) {\n\t\te.preventDefault();\n\t}\n\tfunction delegatedSubmit() {\n\t\tassert.ok( true, \"Make sure submit event bubbles up.\" );\n\t\treturn false;\n\t}\n\n\t// Attach a delegated submit handler to the parent element\n\t$fixture.on( \"submit\", \"form\", delegatedSubmit );\n\n\t// Trigger form submission to introduce the _submit_attached property\n\t$testForm.on( \"submit\", noSubmit ).find( \"input[name=sub1]\" ).trigger( \"click\" );\n\n\t// Copy the form via .clone() and .html()\n\t$formByClone = $testForm.clone( true, true ).removeAttr( \"id\" );\n\t$formByHTML = jQuery( jQuery.parseHTML( $fixture.html() ) ).filter( \"#testForm\" ).removeAttr( \"id\" );\n\t$wrapperDiv.append( $formByClone, $formByHTML );\n\n\t// Check submit bubbling on the copied forms\n\t$wrapperDiv.find( \"form\" ).on( \"submit\", noSubmit ).find( \"input[name=sub1]\" ).trigger( \"click\" );\n\n\t// Clean up\n\t$wrapperDiv.remove();\n\t$fixture.off( \"submit\", \"form\", delegatedSubmit );\n\t$testForm.off( \"submit\", noSubmit );\n} );\n\nQUnit.test( \"change event bubbles on copied forms (#11796)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $formByClone, $formByHTML,\n\t\t$form = jQuery( \"#form\" ),\n\t\t$fixture = jQuery( \"#qunit-fixture\" ),\n\t\t$wrapperDiv = jQuery( \"<div></div>\" ).appendTo( $fixture );\n\n\tfunction delegatedChange() {\n\t\tassert.ok( true, \"Make sure change event bubbles up.\" );\n\t\treturn false;\n\t}\n\n\t// Attach a delegated change handler to the form\n\t$fixture.on( \"change\", \"form\", delegatedChange );\n\n\t// Trigger change event to introduce the _change_attached property\n\t$form.find( \"select[name=select1]\" ).val( \"1\" ).trigger( \"change\" );\n\n\t// Copy the form via .clone() and .html()\n\t$formByClone = $form.clone( true, true ).removeAttr( \"id\" );\n\t$formByHTML = jQuery( jQuery.parseHTML( $fixture.html() ) ).filter( \"#form\" ).removeAttr( \"id\" );\n\t$wrapperDiv.append( $formByClone, $formByHTML );\n\n\t// Check change bubbling on the copied forms\n\t$wrapperDiv.find( \"form select[name=select1]\" ).val( \"2\" ).trigger( \"change\" );\n\n\t// Clean up\n\t$wrapperDiv.remove();\n\t$fixture.off( \"change\", \"form\", delegatedChange );\n} );\n\nQUnit.test( \"trigger(eventObject, [data], [fn])\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar event,\n\t\t$parent = jQuery( \"<div id='par'></div>\" ).appendTo( \"body\" ),\n\t\t$child = jQuery( \"<p id='child'>foo</p>\" ).appendTo( $parent );\n\n\t$parent.get( 0 ).style.display = \"none\";\n\n\tevent = jQuery.Event( \"noNew\" );\n\tassert.ok( event !== window, \"Instantiate jQuery.Event without the 'new' keyword\" );\n\tassert.equal( event.type, \"noNew\", \"Verify its type\" );\n\n\tassert.equal( event.isDefaultPrevented(), false, \"Verify isDefaultPrevented\" );\n\tassert.equal( event.isPropagationStopped(), false, \"Verify isPropagationStopped\" );\n\tassert.equal( event.isImmediatePropagationStopped(), false, \"Verify isImmediatePropagationStopped\" );\n\n\tevent.preventDefault();\n\tassert.equal( event.isDefaultPrevented(), true, \"Verify isDefaultPrevented\" );\n\tevent.stopPropagation();\n\tassert.equal( event.isPropagationStopped(), true, \"Verify isPropagationStopped\" );\n\n\tevent.isPropagationStopped = function() { return false; };\n\tevent.stopImmediatePropagation();\n\tassert.equal( event.isPropagationStopped(), true, \"Verify isPropagationStopped\" );\n\tassert.equal( event.isImmediatePropagationStopped(), true, \"Verify isPropagationStopped\" );\n\n\t$parent.on( \"foo\", function( e ) {\n\n\t\t// Tries bubbling\n\t\tassert.equal( e.type, \"foo\", \"Verify event type when passed passing an event object\" );\n\t\tassert.equal( e.target.id, \"child\", \"Verify event.target when passed passing an event object\" );\n\t\tassert.equal( e.currentTarget.id, \"par\", \"Verify event.currentTarget when passed passing an event object\" );\n\t\tassert.equal( e.secret, \"boo!\", \"Verify event object's custom attribute when passed passing an event object\" );\n\t} );\n\n\t// test with an event object\n\tevent = new jQuery.Event( \"foo\" );\n\tevent.secret = \"boo!\";\n\t$child.trigger( event );\n\n\t// test with a literal object\n\t$child.trigger( { \"type\": \"foo\", \"secret\": \"boo!\" } );\n\n\t$parent.off();\n\n\tfunction error() {\n\t\tassert.ok( false, \"This assertion shouldn't be reached\" );\n\t}\n\n\t$parent.on( \"foo\", error );\n\n\t$child.on( \"foo\", function( e, a, b, c ) {\n\t\tassert.equal( arguments.length, 4, \"Check arguments length\" );\n\t\tassert.equal( a, 1, \"Check first custom argument\" );\n\t\tassert.equal( b, 2, \"Check second custom argument\" );\n\t\tassert.equal( c, 3, \"Check third custom argument\" );\n\n\t\tassert.equal( e.isDefaultPrevented(), false, \"Verify isDefaultPrevented\" );\n\t\tassert.equal( e.isPropagationStopped(), false, \"Verify isPropagationStopped\" );\n\t\tassert.equal( e.isImmediatePropagationStopped(), false, \"Verify isImmediatePropagationStopped\" );\n\n\t\t// Skips both errors\n\t\te.stopImmediatePropagation();\n\n\t\treturn \"result\";\n\t} );\n\n\t// We should add this back in when we want to test the order\n\t// in which event handlers are iterated.\n\t//$child.on(\"foo\", error );\n\n\tevent = new jQuery.Event( \"foo\" );\n\t$child.trigger( event, [ 1, 2, 3 ] ).off();\n\tassert.equal( event.result, \"result\", \"Check event.result attribute\" );\n\n\t// Will error if it bubbles\n\t$child.triggerHandler( \"foo\" );\n\n\t$child.off();\n\t$parent.off().remove();\n\n\t// Ensure triggerHandler doesn't molest its event object (#xxx)\n\tevent = jQuery.Event( \"zowie\" );\n\tjQuery( document ).triggerHandler( event );\n\tassert.equal( event.type, \"zowie\", \"Verify its type\" );\n\tassert.equal( event.isPropagationStopped(), false, \"propagation not stopped\" );\n\tassert.equal( event.isDefaultPrevented(), false, \"default not prevented\" );\n} );\n\nQUnit.test( \".trigger() bubbling on disconnected elements (#10489)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( window ).on( \"click\", function() {\n\t\tassert.ok( false, \"click fired on window\" );\n\t} );\n\n\tjQuery( \"<div><p>hi</p></div>\" )\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( true, \"click fired on div\" );\n\t\t} )\n\t\t.find( \"p\" )\n\t\t\t.on( \"click\", function() {\n\t\t\t\tassert.ok( true, \"click fired on p\" );\n\t\t\t} )\n\t\t\t.trigger( \"click\" )\n\t\t\t.off( \"click\" )\n\t\t.end()\n\t\t.off( \"click\" )\n\t\t.remove();\n\n\tjQuery( window ).off( \"click\" );\n} );\n\nQUnit.test( \".trigger() doesn't bubble load event (#10717)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( window ).on( \"load\", function() {\n\t\tassert.ok( false, \"load fired on window\" );\n\t} );\n\n\tjQuery( \"<img src='\" + baseURL + \"1x1.jpg' />\" )\n\t\t.appendTo( \"body\" )\n\t\t.on( \"load\", function() {\n\t\t\tassert.ok( true, \"load fired on img\" );\n\t\t} )\n\t\t.trigger( \"load\" )\n\t\t.remove();\n\n\tjQuery( window ).off( \"load\" );\n} );\n\nQUnit.test( \"Delegated events in SVG (#10791; #13180)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar useElem, e,\n\t\tsvg = jQuery(\n\t\t\t\"<svg height='1' version='1.1' width='1' xmlns='http://www.w3.org/2000/svg'>\" +\n\t\t\t\"<defs><rect id='ref' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect></defs>\" +\n\t\t\t\"<rect class='svg-by-class' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect>\" +\n\t\t\t\"<rect id='svg-by-id' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect>\" +\n\t\t\t\"<use id='use' xlink:href='#ref'></use>\" +\n\t\t\t\"</svg>\"\n\t\t);\n\n\tjQuery( \"#qunit-fixture\" )\n\t\t.append( svg )\n\t\t.on( \"click\", \"#svg-by-id\", function() {\n\t\t\tassert.ok( true, \"delegated id selector\" );\n\t\t} )\n\t\t.on( \"click\", \"[class~='svg-by-class']\", function() {\n\t\t\tassert.ok( true, \"delegated class selector\" );\n\t\t} )\n\t\t.find( \"#svg-by-id, [class~='svg-by-class']\" )\n\t\t\t.trigger( \"click\" )\n\t\t.end();\n\n\t// Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)\n\t// to confirm that it doesn't break our event delegation handling (#13180)\n\tuseElem = svg.find( \"#use\" )[ 0 ];\n\tif ( document.createEvent && useElem && useElem.instanceRoot ) {\n\t\te = document.createEvent( \"MouseEvents\" );\n\t\te.initEvent( \"click\", true, true );\n\t\tuseElem.instanceRoot.dispatchEvent( e );\n\t}\n\n\tjQuery( \"#qunit-fixture\" ).off( \"click\" );\n} );\n\nQUnit.test( \"Delegated events with malformed selectors (gh-3071)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.throws( function() {\n\t\tjQuery( \"#foo\" ).on( \"click\", \":not\", function() {} );\n\t}, \"malformed selector throws on attach\" );\n\n\tassert.throws( function() {\n\t\tjQuery( \"#foo\" ).on( \"click\", \"nonexistent:not\", function() {} );\n\t}, \"short-circuitable malformed selector throws on attach\" );\n\n\tjQuery( \"#foo > :first-child\" ).trigger( \"click\" );\n\tassert.ok( true, \"malformed selector does not throw on event\" );\n} );\n\nQUnit.test( \"Delegated events in forms (#10844; #11145; #8165; #11382, #11764)\", function( assert ) {\n\tassert.expect( 5 );\n\n\t// Alias names like \"id\" cause havoc\n\tvar form = jQuery(\n\t\t\t\"<form id='myform'>\" +\n\t\t\t\t\"<input type='text' name='id' value='secret agent man' />\" +\n\t\t\t\"</form>\"\n\t\t)\n\t\t.on( \"submit\", function( event ) {\n\t\t\tevent.preventDefault();\n\t\t} )\n\t\t.appendTo( \"body\" );\n\n\tjQuery( \"body\" )\n\t\t.on( \"submit\", \"#myform\", function() {\n\t\t\tassert.ok( true, \"delegated id selector with aliased id\" );\n\t\t} )\n\t\t.find( \"#myform\" )\n\t\t\t.trigger( \"submit\" )\n\t\t.end()\n\t\t.off( \"submit\" );\n\n\tform.append( \"<input type='text' name='disabled' value='differently abled' />\" );\n\tjQuery( \"body\" )\n\t\t.on( \"submit\", \"#myform\", function() {\n\t\t\tassert.ok( true, \"delegated id selector with aliased disabled\" );\n\t\t} )\n\t\t.find( \"#myform\" )\n\t\t\t.trigger( \"submit\" )\n\t\t.end()\n\t\t.off( \"submit\" );\n\n\tform\n\t\t.append( \"<button id='nestyDisabledBtn'><span>Zing</span></button>\" )\n\t\t.on( \"click\", \"#nestyDisabledBtn\", function() {\n\t\t\tassert.ok( true, \"click on enabled/disabled button with nesty elements\" );\n\t\t} )\n\t\t.on( \"mouseover\", \"#nestyDisabledBtn\", function() {\n\t\t\tassert.ok( true, \"mouse on enabled/disabled button with nesty elements\" );\n\t\t} )\n\t\t.find( \"span\" )\n\t\t\t.trigger( \"click\" )\t\t// yep\n\t\t\t.trigger( \"mouseover\" )\t// yep\n\t\t.end()\n\t\t.find( \"#nestyDisabledBtn\" ).prop( \"disabled\", true ).end()\n\t\t.find( \"span\" )\n\t\t\t.trigger( \"click\" )\t\t// nope\n\t\t\t.trigger( \"mouseover\" )\t// yep\n\t\t.end()\n\t\t.off( \"click\" );\n\n\tform.remove();\n} );\n\nQUnit.test( \"Submit event can be stopped (#11049)\", function( assert ) {\n\tassert.expect( 1 );\n\n\t// Since we manually bubble in IE, make sure inner handlers get a chance to cancel\n\tvar form = jQuery(\n\t\t\t\"<form id='myform'>\" +\n\t\t\t\t\"<input type='text' name='sue' value='bawls' />\" +\n\t\t\t\t\"<input type='submit' />\" +\n\t\t\t\"</form>\"\n\t\t)\n\t\t.appendTo( \"body\" );\n\n\tjQuery( \"body\" )\n\t\t.on( \"submit\", function() {\n\t\t\tassert.ok( true, \"submit bubbled on first handler\" );\n\t\t\treturn false;\n\t\t} )\n\t\t.find( \"#myform input[type=submit]\" )\n\t\t\t.each( function() { this.click(); } )\n\t\t.end()\n\t\t.on( \"submit\", function() {\n\t\t\tassert.ok( false, \"submit bubbled on second handler\" );\n\t\t\treturn false;\n\t\t} )\n\t\t.find( \"#myform input[type=submit]\" )\n\t\t\t.each( function() {\n\t\t\t\tjQuery( this.form ).on( \"submit\", function( e ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t} );\n\t\t\t\tthis.click();\n\t\t\t} )\n\t\t.end()\n\t\t.off( \"submit\" );\n\n\tform.remove();\n} );\n\n// Support: iOS 7 - 9\n// iOS has the window.onbeforeunload field but doesn't support the beforeunload\n// handler making it impossible to feature-detect the support.\nQUnit[ /(ipad|iphone|ipod)/i.test( navigator.userAgent ) ? \"skip\" : \"test\" ](\n\t\"on(beforeunload)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar iframe = jQuery( jQuery.parseHTML( \"<iframe src='\" + baseURL + \"event/onbeforeunload.html'><iframe>\" ) );\n\tvar done = assert.async();\n\n\twindow.onmessage = function( event ) {\n\t\tvar payload = JSON.parse( event.data );\n\n\t\tassert.ok( payload.event, \"beforeunload\", \"beforeunload event\" );\n\n\t\tiframe.remove();\n\t\twindow.onmessage = null;\n\t\tdone();\n\t};\n\n\tiframe.appendTo( \"#qunit-fixture\" );\n} );\n\nQUnit.test( \"jQuery.Event( type, props )\", function( assert ) {\n\n\tassert.expect( 6 );\n\n\tvar event = jQuery.Event( \"keydown\", { keyCode: 64 } ),\n\t\t\thandler = function( event ) {\n\t\t\t\tassert.ok( \"keyCode\" in event, \"Special property 'keyCode' exists\" );\n\t\t\t\tassert.equal( event.keyCode, 64, \"event.keyCode has explicit value '64'\" );\n\t\t\t};\n\n\t// Supports jQuery.Event implementation\n\tassert.equal( event.type, \"keydown\", \"Verify type\" );\n\n\t// ensure \"type\" in props won't clobber the one set by constructor\n\tassert.equal( jQuery.inArray( \"type\", jQuery.event.props ), -1, \"'type' property not in props (#10375)\" );\n\n\tassert.ok( \"keyCode\" in event, \"Special 'keyCode' property exists\" );\n\n\tassert.strictEqual( jQuery.isPlainObject( event ), false, \"Instances of $.Event should not be identified as a plain object.\" );\n\n\tjQuery( \"body\" ).on( \"keydown\", handler ).trigger( event );\n\n\tjQuery( \"body\" ).off( \"keydown\" );\n\n} );\n\nQUnit.test( \"jQuery.Event properties\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar handler,\n\t\t$structure = jQuery( \"<div id='ancestor'><p id='delegate'><span id='target'>shiny</span></p></div>\" ),\n\t\t$target = $structure.find( \"#target\" );\n\n\thandler = function( e ) {\n\t\tassert.strictEqual( e.currentTarget, this, \"currentTarget at \" + this.id );\n\t\tassert.equal( e.isTrigger, 3, \"trigger at \" + this.id );\n\t};\n\t$structure.one( \"click\", handler );\n\t$structure.one( \"click\", \"p\", handler );\n\t$target.one( \"click\", handler );\n\t$target[ 0 ].onclick = function( e ) {\n\t\tassert.strictEqual( e.currentTarget, this, \"currentTarget at target (native handler)\" );\n\t\tassert.equal( e.isTrigger, 3, \"trigger at target (native handler)\" );\n\t};\n\t$target.trigger( \"click\" );\n\n\t$target.one( \"click\", function( e ) {\n\t\tassert.equal( e.isTrigger, 2, \"triggerHandler at target\" );\n\t} );\n\t$target[ 0 ].onclick = function( e ) {\n\t\tassert.equal( e.isTrigger, 2, \"triggerHandler at target (native handler)\" );\n\t};\n\t$target.triggerHandler( \"click\" );\n\n\thandler = function( e ) {\n\t\tassert.strictEqual( e.isTrigger, undefined, \"native event at \" + this.id );\n\t};\n\t$target.one( \"click\", handler );\n\t$target[ 0 ].onclick = function( e ) {\n\t\tassert.strictEqual( e.isTrigger, undefined, \"native event at target (native handler)\" );\n\t};\n\tfireNative( $target[ 0 ], \"click\" );\n} );\n\nQUnit.test( \".on()/.off()\", function( assert ) {\n\tassert.expect( 65 );\n\n\tvar event, clicked, hash, called, livec, lived, livee,\n\t\tsubmit = 0, div = 0, livea = 0, liveb = 0;\n\n\tjQuery( \"#body\" ).on( \"submit\", \"#qunit-fixture div\", function() { submit++; return false; } );\n\tjQuery( \"#body\" ).on( \"click\", \"#qunit-fixture div\", function() { div++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"div#nothiddendiv\", function() { livea++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"div#nothiddendivchild\", function() { liveb++; } );\n\n\t// Nothing should trigger on the body\n\tjQuery( \"body\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"Click on body\" );\n\tassert.equal( div, 0, \"Click on body\" );\n\tassert.equal( livea, 0, \"Click on body\" );\n\tassert.equal( liveb, 0, \"Click on body\" );\n\n\t// This should trigger two events\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"Click on div\" );\n\tassert.equal( div, 1, \"Click on div\" );\n\tassert.equal( livea, 1, \"Click on div\" );\n\tassert.equal( liveb, 0, \"Click on div\" );\n\n\t// This should trigger three events (w/ bubbling)\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"Click on inner div\" );\n\tassert.equal( div, 2, \"Click on inner div\" );\n\tassert.equal( livea, 1, \"Click on inner div\" );\n\tassert.equal( liveb, 1, \"Click on inner div\" );\n\n\t// This should trigger one submit\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"submit\" );\n\tassert.equal( submit, 1, \"Submit on div\" );\n\tassert.equal( div, 0, \"Submit on div\" );\n\tassert.equal( livea, 0, \"Submit on div\" );\n\tassert.equal( liveb, 0, \"Submit on div\" );\n\n\t// Make sure no other events were removed in the process\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"off Click on inner div\" );\n\tassert.equal( div, 2, \"off Click on inner div\" );\n\tassert.equal( livea, 1, \"off Click on inner div\" );\n\tassert.equal( liveb, 1, \"off Click on inner div\" );\n\n\t// Now make sure that the removal works\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"#body\" ).off( \"click\", \"div#nothiddendivchild\" );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"off Click on inner div\" );\n\tassert.equal( div, 2, \"off Click on inner div\" );\n\tassert.equal( livea, 1, \"off Click on inner div\" );\n\tassert.equal( liveb, 0, \"off Click on inner div\" );\n\n\t// Make sure that the click wasn't removed too early\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"div#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"off Click on inner div\" );\n\tassert.equal( div, 1, \"off Click on inner div\" );\n\tassert.equal( livea, 1, \"off Click on inner div\" );\n\tassert.equal( liveb, 0, \"off Click on inner div\" );\n\n\t// Make sure that stopPropagation doesn't stop live events\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tjQuery( \"#body\" ).on( \"click\", \"div#nothiddendivchild\", function( e ) { liveb++; e.stopPropagation(); } );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( submit, 0, \"stopPropagation Click on inner div\" );\n\tassert.equal( div, 1, \"stopPropagation Click on inner div\" );\n\tassert.equal( livea, 0, \"stopPropagation Click on inner div\" );\n\tassert.equal( liveb, 1, \"stopPropagation Click on inner div\" );\n\n\t// Make sure click events only fire with primary click\n\tsubmit = 0; div = 0; livea = 0; liveb = 0;\n\tevent = jQuery.Event( \"click\" );\n\tevent.button = 1;\n\tjQuery( \"div#nothiddendiv\" ).trigger( event );\n\n\tassert.equal( livea, 0, \"on secondary click\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"div#nothiddendivchild\" );\n\tjQuery( \"#body\" ).off( \"click\", \"div#nothiddendiv\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#qunit-fixture div\" );\n\tjQuery( \"#body\" ).off( \"submit\", \"#qunit-fixture div\" );\n\n\t// Test binding with a different context\n\tclicked = 0;\n\tjQuery( \"#qunit-fixture\" ).on( \"click\", \"#foo\", function() { clicked++; } );\n\tjQuery( \"#qunit-fixture div\" ).trigger( \"click\" );\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tjQuery( \"#qunit-fixture\" ).trigger( \"click\" );\n\tjQuery( \"body\" ).trigger( \"click\" );\n\tassert.equal( clicked, 2, \"on with a context\" );\n\n\t// Test unbinding with a different context\n\tjQuery( \"#qunit-fixture\" ).off( \"click\", \"#foo\" );\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tassert.equal( clicked, 2, \"off with a context\" );\n\n\t// Test binding with event data\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", true, function( e ) {\n\t\tassert.equal( e.data, true, \"on with event data\" );\n\t} );\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Test binding with trigger data\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", function( e, data ) {\n\t\tassert.equal( data, true, \"on with trigger data\" );\n\t} );\n\tjQuery( \"#foo\" ).trigger( \"click\", true );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Test binding with different this object\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", function() {\n\t\t\tassert.equal( this.foo, \"bar\", \"on with event scope\" );\n\t}.bind( { \"foo\": \"bar\" } ) );\n\n\tjQuery( \"#foo\" ).trigger( \"click\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Test binding with different this object, event data, and trigger data\n\tjQuery( \"#body\" ).on( \"click\", \"#foo\", true, function( e, data ) {\n\t\tassert.equal( e.data, true, \"on with with different this object, event data, and trigger data\" );\n\t\tassert.equal( this.foo, \"bar\", \"on with with different this object, event data, and trigger data\" );\n\t\tassert.equal( data, true, \"on with with different this object, event data, and trigger data\" );\n\t}.bind( { \"foo\": \"bar\" } ) );\n\tjQuery( \"#foo\" ).trigger( \"click\", true );\n\tjQuery( \"#body\" ).off( \"click\", \"#foo\" );\n\n\t// Verify that return false prevents default action\n\tjQuery( \"#body\" ).on( \"click\", \"#anchor2\", function() { return false; } );\n\thash = window.location.hash;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( window.location.hash, hash, \"return false worked\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#anchor2\" );\n\n\t// Verify that .preventDefault() prevents default action\n\tjQuery( \"#body\" ).on( \"click\", \"#anchor2\", function( e ) { e.preventDefault(); } );\n\thash = window.location.hash;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( window.location.hash, hash, \"e.preventDefault() worked\" );\n\tjQuery( \"#body\" ).off( \"click\", \"#anchor2\" );\n\n\t// Test binding the same handler to multiple points\n\tcalled = 0;\n\tfunction callback() { called++; return false; }\n\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendiv\", callback );\n\tjQuery( \"#body\" ).on( \"click\", \"#anchor2\", callback );\n\n\tjQuery( \"#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( called, 1, \"Verify that only one click occurred.\" );\n\n\tcalled = 0;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( called, 1, \"Verify that only one click occurred.\" );\n\n\t// Make sure that only one callback is removed\n\tjQuery( \"#body\" ).off( \"click\", \"#anchor2\", callback );\n\n\tcalled = 0;\n\tjQuery( \"#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( called, 1, \"Verify that only one click occurred.\" );\n\n\tcalled = 0;\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\tassert.equal( called, 0, \"Verify that no click occurred.\" );\n\n\t// Make sure that it still works if the selector is the same,\n\t// but the event type is different\n\tjQuery( \"#body\" ).on( \"foo\", \"#nothiddendiv\", callback );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendiv\", callback );\n\n\tcalled = 0;\n\tjQuery( \"#nothiddendiv\" ).trigger( \"click\" );\n\tassert.equal( called, 0, \"Verify that no click occurred.\" );\n\n\tcalled = 0;\n\tjQuery( \"#nothiddendiv\" ).trigger( \"foo\" );\n\tassert.equal( called, 1, \"Verify that one foo occurred.\" );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"foo\", \"#nothiddendiv\", callback );\n\n\t// Make sure we don't loose the target by DOM modifications\n\t// after the bubble already reached the liveHandler\n\tlivec = 0;\n\tjQuery( \"#nothiddendivchild\" ).html( \"<span></span>\" );\n\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendivchild\", function() { jQuery( \"#nothiddendivchild\" ).html( \"\" ); } );\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendivchild\", function( e ) { if ( e.target ) {livec++;} } );\n\n\tjQuery( \"#nothiddendiv span\" ).trigger( \"click\" );\n\tassert.equal( jQuery( \"#nothiddendiv span\" ).length, 0, \"Verify that first handler occurred and modified the DOM.\" );\n\tassert.equal( livec, 1, \"Verify that second handler occurred even with nuked target.\" );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendivchild\" );\n\n\t// Verify that .live() occurs and cancel bubble in the same order as\n\t// we would expect .on() and .click() without delegation\n\tlived = 0;\n\tlivee = 0;\n\n\t// bind one pair in one order\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan1 a\", function() { lived++; return false; } );\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan1\", function() { livee++; } );\n\n\tjQuery( \"span#liveSpan1 a\" ).trigger( \"click\" );\n\tassert.equal( lived, 1, \"Verify that only one first handler occurred.\" );\n\tassert.equal( livee, 0, \"Verify that second handler doesn't.\" );\n\n\t// and one pair in inverse\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan2\", function() { livee++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan2 a\", function() { lived++; return false; } );\n\n\tlived = 0;\n\tlivee = 0;\n\tjQuery( \"span#liveSpan2 a\" ).trigger( \"click\" );\n\tassert.equal( lived, 1, \"Verify that only one first handler occurred.\" );\n\tassert.equal( livee, 0, \"Verify that second handler doesn't.\" );\n\n\t// Cleanup\n\tjQuery( \"#body\" ).off( \"click\", \"**\" );\n\n\t// Test this, target and currentTarget are correct\n\tjQuery( \"#body\" ).on( \"click\", \"span#liveSpan1\", function( e ) {\n\t\tassert.equal( this.id, \"liveSpan1\", \"Check the this within a on handler\" );\n\t\tassert.equal( e.currentTarget.id, \"liveSpan1\", \"Check the event.currentTarget within a on handler\" );\n\t\tassert.equal( e.delegateTarget, document.body, \"Check the event.delegateTarget within a on handler\" );\n\t\tassert.equal( e.target.nodeName.toUpperCase(), \"A\", \"Check the event.target within a on handler\" );\n\t} );\n\n\tjQuery( \"span#liveSpan1 a\" ).trigger( \"click\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"span#liveSpan1\" );\n\n\t// Work with deep selectors\n\tlivee = 0;\n\n\tfunction clickB() { livee++; }\n\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendiv div\", function() { livee++; } );\n\tjQuery( \"#body\" ).on( \"click\", \"#nothiddendiv div\", clickB );\n\tjQuery( \"#body\" ).on( \"mouseover\", \"#nothiddendiv div\", function() { livee++; } );\n\n\tassert.equal( livee, 0, \"No clicks, deep selector.\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( livee, 2, \"Click, deep selector.\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"mouseover\" );\n\tassert.equal( livee, 1, \"Mouseover, deep selector.\" );\n\n\tjQuery( \"#body\" ).off( \"mouseover\", \"#nothiddendiv div\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( livee, 2, \"Click, deep selector.\" );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"mouseover\" );\n\tassert.equal( livee, 0, \"Mouseover, deep selector.\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendiv div\", clickB );\n\n\tlivee = 0;\n\tjQuery( \"#nothiddendivchild\" ).trigger( \"click\" );\n\tassert.equal( livee, 1, \"Click, deep selector.\" );\n\n\tjQuery( \"#body\" ).off( \"click\", \"#nothiddendiv div\" );\n} );\n\nQUnit.test( \"jQuery.off using dispatched jQuery.Event\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery( \"<p><a href='#'>target</a></p>\" ),\n\t\tcount = 0;\n\tmarkup\n\t\t.on( \"click.name\", \"a\", function( event ) {\n\t\t\tassert.equal( ++count, 1, \"event called once before removal\" );\n\t\t\tjQuery().off( event );\n\t\t} )\n\t\t.find( \"a\" ).trigger( \"click\" ).trigger( \"click\" ).end()\n\t\t.remove();\n} );\n\nQUnit.test( \"events with type matching an Object.prototype property (gh-3256)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"<div></div>\" ),\n\t\teventFired = false;\n\n\telem.appendTo( \"#qunit-fixture\" );\n\n\ttry {\n\t\telem\n\t\t\t.one( \"hasOwnProperty\", function() {\n\t\t\t\teventFired = true;\n\t\t\t} )\n\t\t\t.trigger( \"hasOwnProperty\" );\n\t} finally {\n\t\tassert.strictEqual( eventFired, true, \"trigger fired without crashing\" );\n\t}\n} );\n\nQUnit.test( \"events with type matching an Object.prototype property, cloned element (gh-3256)\",\n\tfunction( assert ) {\n\tassert.expect( 1 );\n\n\tvar elem = jQuery( \"<div></div>\" ),\n\t\teventFired = false;\n\n\telem.appendTo( \"#qunit-fixture\" );\n\n\ttry {\n\t\t// Make sure the original element has some event data.\n\t\telem.on( \"click\", function() {} );\n\n\t\telem\n\t\t\t.clone( true )\n\t\t\t.one( \"hasOwnProperty\", function() {\n\t\t\t\teventFired = true;\n\t\t\t} )\n\t\t\t.trigger( \"hasOwnProperty\" );\n\t} finally {\n\t\tassert.strictEqual( eventFired, true, \"trigger fired without crashing\" );\n\t}\n} );\n\n// selector-native does not support scope-fixing in delegation\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"delegated event with delegateTarget-relative selector\", function( assert ) {\n\tassert.expect( 3 );\n\tvar markup = jQuery( \"<div><ul><li><a id=\\\"a0\\\"></a><ul id=\\\"ul0\\\"><li class=test><a id=\\\"a0_0\\\"></a></li><li><a id=\\\"a0_1\\\"></a></li></ul></li></ul></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t// Non-positional selector (#12383)\n\tmarkup.find( \"#ul0\" )\n\t\t.on( \"click\", \"div li a\", function() {\n\t\t\tassert.ok( false, \"div is ABOVE the delegation point!\" );\n\t\t} )\n\t\t.on( \"click\", \"ul a\", function() {\n\t\t\tassert.ok( false, \"ul IS the delegation point!\" );\n\t\t} )\n\t\t.on( \"click\", \"li.test a\", function() {\n\t\t\tassert.ok( true, \"li.test is below the delegation point.\" );\n\t\t} )\n\t\t.find( \"#a0_0\" ).trigger( \"click\" ).end()\n\t\t.off( \"click\" );\n\n\t// Positional selector (#11315)\n\tmarkup.find( \"ul\" ).eq( 0 )\n\t\t.on( \"click\", \">li>a\", function() {\n\t\t\tassert.ok( this.id === \"a0\", \"child li was clicked\" );\n\t\t} )\n\t\t.find( \"#ul0\" )\n\t\t\t.on( \"click\", \"li:first>a\", function() {\n\t\t\t\tassert.ok( this.id === \"a0_0\", \"first li under #u10 was clicked\" );\n\t\t\t} )\n\t\t.end()\n\t\t.find( \"a\" ).trigger( \"click\" ).end()\n\t\t.find( \"#ul0\" ).off();\n\n\tmarkup.remove();\n} );\n\nQUnit.test( \"delegated event with selector matching Object.prototype property (#13203)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar matched = 0;\n\n\tjQuery( \"#foo\" ).on( \"click\", \"toString\", function() {\n\t\tmatched++;\n\t} );\n\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n\n\tassert.equal( matched, 0, \"Nothing matched 'toString'\" );\n} );\n\nQUnit.test( \"delegated event with intermediate DOM manipulation (#13208)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( \"#foo\" ).on( \"click\", \"[id=sap]\", function() {} );\n\tjQuery( \"#sap\" ).on( \"click\", \"[id=anchor2]\", function() {\n\t\tdocument.createDocumentFragment().appendChild( this.parentNode );\n\t\tassert.ok( true, \"Element removed\" );\n\t} );\n\tjQuery( \"#anchor2\" ).trigger( \"click\" );\n} );\n\nQUnit.test( \"ignore comment nodes in event delegation (gh-2055)\", function( assert ) {\n\tassert.expect( 1 );\n\n\t// Test if DOMNodeInserted is supported\n\t// This is a back-up for when DOMNodeInserted support\n\t// is eventually removed from browsers\n\tfunction test() {\n\t\tvar ret = false;\n\t\tvar $fixture = jQuery( \"#qunit-fixture\" );\n\t\t$fixture.on( \"DOMNodeInserted\", function() {\n\t\t\tret = true;\n\t\t\t$fixture.off( \"DOMNodeInserted\" );\n\t\t} ).append( \"<div></div>\" );\n\t\treturn ret;\n\t}\n\n\tvar $foo = jQuery( \"#foo\" ).on( \"DOMNodeInserted\", \"[id]\", function() {\n\t\tassert.ok( true, \"No error thrown on comment node\" );\n\t} ),\n\t\t$comment = jQuery( document.createComment( \"comment\" ) )\n\t\t\t.appendTo( $foo.find( \"#sap\" ) );\n\n\tif ( !test() ) {\n\t\tfireNative( $comment[ 0 ], \"DOMNodeInserted\" );\n\t}\n} );\n\nQUnit.test( \"stopPropagation() stops directly-bound events on delegated target\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery( \"<div><p><a href=\\\"#\\\">target</a></p></div>\" );\n\tmarkup\n\t\t.on( \"click\", function() {\n\t\t\tassert.ok( false, \"directly-bound event on delegate target was called\" );\n\t\t} )\n\t\t.on( \"click\", \"a\", function( e ) {\n\t\t\te.stopPropagation();\n\t\t\tassert.ok( true, \"delegated handler was called\" );\n\t\t} )\n\t\t.find( \"a\" ).trigger( \"click\" ).end()\n\t\t.remove();\n} );\n\nQUnit.test( \"off all bound delegated events\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar count = 0,\n\t\tclicks = 0,\n\t\tdiv = jQuery( \"#body\" );\n\n\tdiv.on( \"click submit\", \"div#nothiddendivchild\", function() { count++; } );\n\tdiv.on( \"click\", function() { clicks++; } );\n\tdiv.off( undefined, \"**\" );\n\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"submit\" );\n\n\tassert.equal( count, 0, \"Make sure no events were triggered.\" );\n\n\tdiv.trigger( \"click\" );\n\tassert.equal( clicks, 2, \"Make sure delegated and directly bound event occurred.\" );\n\tdiv.off( \"click\" );\n} );\n\nQUnit.test( \"on with multiple delegated events\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count = 0,\n\t\tdiv = jQuery( \"#body\" );\n\n\tdiv.on( \"click submit\", \"div#nothiddendivchild\", function() { count++; } );\n\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"click\" );\n\tjQuery( \"div#nothiddendivchild\" ).trigger( \"submit\" );\n\n\tassert.equal( count, 2, \"Make sure both the click and submit were triggered.\" );\n\n\tjQuery( \"#body\" ).off( undefined, \"**\" );\n} );\n\nQUnit.test( \"delegated on with change\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar select, checkbox, checkboxFunction,\n\t\ttext, textChange, oldTextVal,\n\t\tpassword, passwordChange, oldPasswordVal,\n\t\tselectChange = 0,\n\t\tcheckboxChange = 0;\n\n\tselect = jQuery( \"select[name='S1']\" );\n\tjQuery( \"#body\" ).on( \"change\", \"select[name='S1']\", function() {\n\t\tselectChange++;\n\t} );\n\n\tcheckbox = jQuery( \"#check2\" );\n\tcheckboxFunction = function() {\n\t\tcheckboxChange++;\n\t};\n\tjQuery( \"#body\" ).on( \"change\", \"#check2\", checkboxFunction );\n\n\t// test click on select\n\n\t// second click that changed it\n\tselectChange = 0;\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 1, \"Change on click.\" );\n\n\t// test keys on select\n\tselectChange = 0;\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 1, \"Change on keyup.\" );\n\n\t// test click on checkbox\n\tcheckbox.trigger( \"change\" );\n\tassert.equal( checkboxChange, 1, \"Change on checkbox.\" );\n\n\t// test blur/focus on text\n\ttext = jQuery( \"#name\" );\n\ttextChange = 0;\n\toldTextVal = text.val();\n\n\tjQuery( \"#body\" ).on( \"change\", \"#name\", function() {\n\t\ttextChange++;\n\t} );\n\n\ttext.val( oldTextVal + \"foo\" );\n\ttext.trigger( \"change\" );\n\tassert.equal( textChange, 1, \"Change on text input.\" );\n\n\ttext.val( oldTextVal );\n\tjQuery( \"#body\" ).off( \"change\", \"#name\" );\n\n\t// test blur/focus on password\n\tpassword = jQuery( \"#name\" );\n\tpasswordChange = 0;\n\toldPasswordVal = password.val();\n\tjQuery( \"#body\" ).on( \"change\", \"#name\", function() {\n\t\tpasswordChange++;\n\t} );\n\n\tpassword.val( oldPasswordVal + \"foo\" );\n\tpassword.trigger( \"change\" );\n\tassert.equal( passwordChange, 1, \"Change on password input.\" );\n\n\tpassword.val( oldPasswordVal );\n\tjQuery( \"#body\" ).off( \"change\", \"#name\" );\n\n\t// make sure die works\n\n\t// die all changes\n\tselectChange = 0;\n\tjQuery( \"#body\" ).off( \"change\", \"select[name='S1']\" );\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 0, \"Die on click works.\" );\n\n\tselectChange = 0;\n\tselect[ 0 ].selectedIndex = select[ 0 ].selectedIndex ? 0 : 1;\n\tselect.trigger( \"change\" );\n\tassert.equal( selectChange, 0, \"Die on keyup works.\" );\n\n\t// die specific checkbox\n\tjQuery( \"#body\" ).off( \"change\", \"#check2\", checkboxFunction );\n\tcheckbox.trigger( \"change\" );\n\tassert.equal( checkboxChange, 1, \"Die on checkbox.\" );\n} );\n\nQUnit.test( \"delegated on with submit\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar count1 = 0, count2 = 0;\n\n\tjQuery( \"#body\" ).on( \"submit\", \"#testForm\", function( ev ) {\n\t\tcount1++;\n\t\tev.preventDefault();\n\t} );\n\n\tjQuery( document ).on( \"submit\", \"body\", function( ev ) {\n\t\tcount2++;\n\t\tev.preventDefault();\n\t} );\n\n\tjQuery( \"#testForm input[name=sub1]\" ).trigger( \"submit\" );\n\tassert.equal( count1, 1, \"Verify form submit.\" );\n\tassert.equal( count2, 1, \"Verify body submit.\" );\n\n\tjQuery( \"#body\" ).off( undefined, \"**\" );\n\tjQuery( document ).off( undefined, \"**\" );\n} );\n\nQUnit.test( \"delegated off() with only namespaces\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $delegate = jQuery( \"#liveHandlerOrder\" ),\n\t\tcount = 0;\n\n\t$delegate.on( \"click.ns\", \"a\", function() {\n\t\tcount++;\n\t} );\n\n\tjQuery( \"a\", $delegate ).eq( 0 ).trigger( \"click.ns\" );\n\n\tassert.equal( count, 1, \"delegated click.ns\" );\n\n\t$delegate.off( \".ns\", \"**\" );\n\n\tjQuery( \"a\", $delegate ).eq( 1 ).trigger( \"click.ns\" );\n\n\tassert.equal( count, 1, \"no more .ns after off\" );\n} );\n\nQUnit.test( \"Non DOM element events\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar o = {};\n\n\tjQuery( o ).on( \"nonelementobj\", function() {\n\t\tassert.ok( true, \"Event on non-DOM object triggered\" );\n\t} );\n\n\tjQuery( o ).trigger( \"nonelementobj\" ).off( \"nonelementobj\" );\n} );\n\nQUnit.test( \"inline handler returning false stops default\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar markup = jQuery( \"<div><a href=\\\"#\\\" onclick=\\\"return false\\\">x</a></div>\" );\n\tmarkup.on( \"click\", function( e ) {\n\t\tassert.ok( e.isDefaultPrevented(), \"inline handler prevented default\" );\n\t\treturn false;\n\t} );\n\tmarkup.find( \"a\" ).trigger( \"click\" );\n\tmarkup.off( \"click\" );\n} );\n\nQUnit.test( \"window resize\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( window ).off();\n\n\tjQuery( window ).on( \"resize\", function() {\n\t\tassert.ok( true, \"Resize event fired.\" );\n\t} ).trigger( \"resize\" ).off( \"resize\" );\n\n\tassert.ok( !jQuery._data( window, \"events\" ), \"Make sure all the events are gone.\" );\n} );\n\nQUnit.test( \"focusin bubbles\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar input = jQuery( \"<input type='text' />\" ).prependTo( \"body\" ),\n\t\torder = 0;\n\n\t// focus the element so DOM focus won't fire\n\tinput[ 0 ].focus();\n\n\tjQuery( \"body\" ).on( \"focusin.focusinBubblesTest\", function() {\n\t\tassert.equal( 1, order++, \"focusin on the body second\" );\n\t} );\n\n\tinput.on( \"focusin.focusinBubblesTest\", function() {\n\t\tassert.equal( 0, order++, \"focusin on the element first\" );\n\t} );\n\n// Removed since DOM focus is unreliable on test swarm\n\t// DOM focus method\n//\tinput[0].focus();\n\n\t// To make the next focus test work, we need to take focus off the input.\n\t// This will fire another focusin event, so set order to reflect that.\n//\torder = 1;\n//\tjQuery(\"#text1\")[0].focus();\n\n\t// jQuery trigger, which calls DOM focus\n\torder = 0;\n\tinput.trigger( \"focus\" );\n\n\tinput.remove();\n\tjQuery( \"body\" ).off( \"focusin.focusinBubblesTest\" );\n} );\n\nQUnit.test( \"custom events with colons (#3533, #8272)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar tab = jQuery( \"<table><tr><td>trigger</td></tr></table>\" ).appendTo( \"body\" );\n\ttry {\n\t\ttab.trigger( \"back:forth\" );\n\t\tassert.ok( true, \"colon events don't throw\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"colon events die\" );\n\t}\n\ttab.remove();\n\n} );\n\nQUnit.test( \".on and .off\", function( assert ) {\n\tassert.expect( 9 );\n\tvar counter, mixfn, data,\n\t\t$onandoff = jQuery( \"<div id=\\\"onandoff\\\"><p>on<b>and</b>off</p><div>worked<em>or</em>borked?</div></div>\" ).appendTo( \"body\" );\n\n\t// Simple case\n\tjQuery( \"#onandoff\" )\n\t\t.on( \"whip\", function() {\n\t\t\tassert.ok( true, \"whipped it good\" );\n\t\t} )\n\t\t.trigger( \"whip\" )\n\t\t.off();\n\n\t// Direct events only\n\tcounter = 0;\n\tjQuery( \"#onandoff b\" )\n\t\t.on( \"click\", 5, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 9 );\t// twice, 5+9+5+17=36\n\t\t} )\n\t\t.one( \"click\", 7, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 11 );\t// once, 7+11=18\n\t\t} )\n\t\t.trigger( \"click\" )\n\t\t.trigger( \"click\", 17 )\n\t\t.off( \"click\" );\n\tassert.equal( counter, 54, \"direct event bindings with data\" );\n\n\t// Delegated events only\n\tcounter = 0;\n\tjQuery( \"#onandoff\" )\n\t\t.on( \"click\", \"em\", 5, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 9 );\t// twice, 5+9+5+17=36\n\t\t} )\n\t\t.one( \"click\", \"em\", 7, function( e, trig ) {\n\t\t\tcounter += e.data + ( trig || 11 );\t// once, 7+11=18\n\t\t} )\n\t\t.find( \"em\" )\n\t\t\t.trigger( \"click\" )\n\t\t\t.trigger( \"click\", 17 )\n\t\t.end()\n\t\t.off( \"click\", \"em\" );\n\tassert.equal( counter, 54, \"delegated event bindings with data\" );\n\n\t// Mixed event bindings and types\n\tcounter = 0;\n\tmixfn = function( e, trig ) {\n\t\tcounter += ( e.data || 0 ) + ( trig || 1 );\n\t};\n\tjQuery( \"#onandoff\" )\n\t\t.on( \" click  clack cluck \", \"em\", 2, mixfn )\n\t\t.on( \"cluck\", \"b\", 7, mixfn )\n\t\t.on( \"cluck\", mixfn )\n\t\t.trigger( \"what!\" )\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 0, \"nothing triggered yet\" );\n\t\t} )\n\t\t.find( \"em\" )\n\t\t\t.one( \"cluck\", 3, mixfn )\n\t\t\t.trigger( \"cluck\", 8 )\t\t\t// 3+8 2+8 + 0+8 = 29\n\t\t\t.off()\n\t\t\t.trigger( \"cluck\", 9 )\t\t\t// 2+9 + 0+9 = 20\n\t\t.end()\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 49, \"after triggering em element\" );\n\t\t} )\n\t\t.off( \"cluck\", function() {} )\t\t// shouldn't remove anything\n\t\t.trigger( \"cluck\", 2 )\t\t\t\t// 0+2 = 2\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 51, \"after triggering #onandoff cluck\" );\n\t\t} )\n\t\t.find( \"b\" )\n\t\t\t.on( \"click\", 95, mixfn )\n\t\t\t.on( \"clack\", \"p\", 97, mixfn )\n\t\t\t.one( \"cluck\", 3, mixfn )\n\t\t\t.trigger( \"quack\", 19 )\t\t\t// 0\n\t\t\t.off( \"click clack cluck\" )\n\t\t.end()\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 51, \"after triggering b\" );\n\t\t} )\n\t\t.trigger( \"cluck\", 3 )\t\t\t\t// 0+3 = 3\n\t\t.off( \"clack\", \"em\", mixfn )\n\t\t.find( \"em\" )\n\t\t\t.trigger( \"clack\" )\t\t\t\t// 0\n\t\t.end()\n\t\t.each( function() {\n\t\t\tassert.equal( counter, 54, \"final triggers\" );\n\t\t} )\n\t\t.off( \"click cluck\" );\n\n\t// We should have removed all the event handlers ... kinda hacky way to check this\n\tdata = jQuery.data[ jQuery( \"#onandoff\" )[ 0 ].expando ] || {};\n\tassert.equal( data[ \"events\" ], undefined, \"no events left\" );\n\n\t$onandoff.remove();\n} );\n\nQUnit.test( \"special on name mapping\", function( assert ) {\n\tassert.expect( 7 );\n\n\tjQuery.event.special.slap = {\n\t\tbindType: \"click\",\n\t\tdelegateType: \"swing\",\n\t\thandle: function( event ) {\n\t\t\tassert.equal( event.handleObj.origType, \"slap\", \"slapped your mammy, \" + event.type );\n\t\t}\n\t};\n\n\tvar comeback = function( event ) {\n\t\tassert.ok( true, \"event \" + event.type + \" triggered\" );\n\t};\n\n\tjQuery( \"<div><button id=\\\"mammy\\\">Are We Not Men?</button></div>\" )\n\t\t.on( \"slap\", \"button\", jQuery.noop )\n\t\t.on( \"swing\", \"button\", comeback )\n\t\t.find( \"button\" )\n\t\t\t.on( \"slap\", jQuery.noop )\n\t\t\t.on( \"click\", comeback )\n\t\t\t.trigger( \"click\" )\t\t// bindType-slap and click\n\t\t\t.off( \"slap\" )\n\t\t\t.trigger( \"click\" )\t\t// click\n\t\t\t.off( \"click\" )\n\t\t\t.trigger( \"swing\" )\t\t// delegateType-slap and swing\n\t\t.end()\n\t\t.off( \"slap swing\", \"button\" )\n\t\t.find( \"button\" )\t\t\t// everything should be gone\n\t\t\t.trigger( \"slap\" )\n\t\t\t.trigger( \"click\" )\n\t\t\t.trigger( \"swing\" )\n\t\t.end()\n\t\t.remove();\n\tdelete jQuery.event.special.slap;\n\n\tjQuery.event.special.gutfeeling = {\n\t\tbindType: \"click\",\n\t\tdelegateType: \"click\",\n\t\thandle: function( event ) {\n\t\t\tassert.equal( event.handleObj.origType, \"gutfeeling\", \"got a gutfeeling\" );\n\n\t\t\t// Need to call the handler since .one() uses it to unbind\n\t\t\treturn event.handleObj.handler.call( this, event );\n\t\t}\n\t};\n\n\t// Ensure a special event isn't removed by its mapped type\n\tjQuery( \"<p>Gut Feeling</p>\" )\n\t\t.on( \"click\", jQuery.noop )\n\t\t.on( \"gutfeeling\", jQuery.noop )\n\t\t.off( \"click\" )\n\t\t.trigger( \"gutfeeling\" )\n\t\t.remove();\n\n\t// Ensure special events are removed when only a namespace is provided\n\tjQuery( \"<p>Gut Feeling</p>\" )\n\t\t.on( \"gutfeeling.Devo\", jQuery.noop )\n\t\t.off( \".Devo\" )\n\t\t.trigger( \"gutfeeling\" )\n\t\t.remove();\n\n\t// Ensure .one() events are removed after their maiden voyage\n\tjQuery( \"<p>Gut Feeling</p>\" )\n\t\t.one( \"gutfeeling\", jQuery.noop )\n\t\t.trigger( \"gutfeeling\" )\t// This one should\n\t\t.trigger( \"gutfeeling\" )\t// This one should not\n\t\t.remove();\n\n\tdelete jQuery.event.special[ \"gutfeeling\" ];\n} );\n\nQUnit.test( \".on and .off, selective mixed removal (#10705)\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar timingx = function( e ) {\n\t\tassert.ok( true, \"triggered \" + e.type );\n\t};\n\n\tjQuery( \"<p>Strange Pursuit</p>\" )\n\t\t.on( \"click\", timingx )\n\t\t.on( \"click.duty\", timingx )\n\t\t.on( \"click.now\", timingx )\n\t\t.on( \"devo\", timingx )\n\t\t.on( \"future\", timingx )\n\t\t.trigger( \"click\" )\t\t// 3\n\t\t.trigger( \"devo\" )\t\t// 1\n\t\t.off( \".duty devo \" )\t// trailing space\n\t\t.trigger( \"future\" )\t// 1\n\t\t.trigger( \"click\" )\t\t// 2\n\t\t.off( \"future click\" )\n\t\t.trigger( \"click\" );\t// 0\n} );\n\nQUnit.test( \".on( event-map, null-selector, data ) #11130\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar $p = jQuery( \"<p>Strange Pursuit</p>\" ),\n\t\tdata = \"bar\",\n\t\tmap = {\n\t\t\t\"foo\": function( event ) {\n\t\t\t\tassert.equal( event.data, \"bar\", \"event.data correctly relayed with null selector\" );\n\t\t\t\t$p.remove();\n\t\t\t}\n\t\t};\n\n\t$p.on( map, null, data ).trigger( \"foo\" );\n} );\n\nQUnit.test( \"clone() delegated events (#11076)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar counter = { \"center\": 0, \"fold\": 0, \"centerfold\": 0 },\n\t\tclicked = function() {\n\t\t\tcounter[ jQuery( this ).text().replace( /\\s+/, \"\" ) ]++;\n\t\t},\n\t\ttable =\n\t\t\tjQuery( \"<table><tr><td>center</td><td>fold</td></tr></table>\" )\n\t\t\t.on( \"click\", \"tr\", clicked )\n\t\t\t.on( \"click\", \"td:first-child\", clicked )\n\t\t\t.on( \"click\", \"td:last-child\", clicked ),\n\t\tclone = table.clone( true );\n\n\tclone.find( \"td\" ).trigger( \"click\" );\n\tassert.equal( counter.center, 1, \"first child\" );\n\tassert.equal( counter.fold, 1, \"last child\" );\n\tassert.equal( counter.centerfold, 2, \"all children\" );\n\n\ttable.remove();\n\tclone.remove();\n} );\n\nQUnit.test( \"checkbox state (trac-3827)\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar markup = jQuery( \"<div class='parent'><input type=checkbox><div>\" ),\n\t\tcb = markup.find( \"input\" )[ 0 ];\n\n\tmarkup.appendTo( \"#qunit-fixture\" );\n\n\tjQuery( cb ).on( \"click\", function() {\n\t\tassert.equal( this.checked, false, \"just-clicked checkbox is not checked\" );\n\t} );\n\tmarkup.on( \"click\", function() {\n\t\tassert.equal( cb.checked, false, \"checkbox is not checked in bubbled event\" );\n\t} );\n\n\t// Native click\n\tcb.checked = true;\n\tassert.equal( cb.checked, true, \"native event - checkbox is initially checked\" );\n\tcb.click();\n\tassert.equal( cb.checked, false, \"native event - checkbox is no longer checked\" );\n\n\t// jQuery click\n\tcb.checked = true;\n\tassert.equal( cb.checked, true, \"jQuery event - checkbox is initially checked\" );\n\tjQuery( cb ).trigger( \"click\" );\n\tassert.equal( cb.checked, false, \"jQuery event - checkbox is no longer checked\" );\n\n\t// Handlers only; checkbox state remains false\n\tjQuery( cb ).triggerHandler( \"click\" );\n\tassert.equal( cb.checked, false, \"handlers only - checkbox is still unchecked\" );\n\n\t// Trigger parameters are preserved (trac-13353, gh-4139)\n\tcb.checked = true;\n\tassert.equal( cb.checked, true, \"jQuery event with data - checkbox is initially checked\" );\n\tjQuery( cb ).on( \"click\", function( e, data ) {\n\t\tassert.equal( data, \"clicked\", \"trigger data passed to handler\" );\n\t} );\n\tmarkup.on( \"click\", function( e, data ) {\n\t\tassert.equal( data, \"clicked\", \"trigger data passed to bubbled handler\" );\n\t} );\n\tjQuery( cb ).trigger( \"click\", [ \"clicked\" ] );\n\tassert.equal( cb.checked, false, \"jQuery event with data - checkbox is no longer checked\" );\n} );\n\nQUnit.test( \"event object properties on natively-triggered event\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar link = document.createElement( \"a\" ),\n\t\t$link = jQuery( link ),\n\t\tevt = document.createEvent( \"MouseEvents\" );\n\n\t// Support: IE <=9 - 11 only\n\t// IE requires element to be in the body before it will dispatch\n\t$link.appendTo( \"body\" ).on( \"click\", function( e ) {\n\n\t\t// Not trying to assert specific values here, just ensure the property exists\n\t\tassert.equal( \"detail\" in e, true, \"has .detail\" );\n\t\tassert.equal( \"cancelable\" in e, true, \"has .cancelable\" );\n\t\tassert.equal( \"bubbles\" in e, true, \"has .bubbles\" );\n\t} );\n\tevt.initEvent( \"click\", true, true );\n\tlink.dispatchEvent( evt );\n\t$link.off( \"click\" ).remove();\n} );\n\nQUnit.test( \"addProp extensions\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $fixture = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" );\n\n\t// Ensure the property doesn't exist\n\t$fixture.on( \"click\", function( event ) {\n\t\tassert.ok( !( \"testProperty\" in event ), \"event.testProperty does not exist\" );\n\t} );\n\tfireNative( $fixture[ 0 ], \"click\" );\n\t$fixture.off( \"click\" );\n\n\tjQuery.event.addProp( \"testProperty\", function() { return 42; } );\n\n\t// Trigger a native click and ensure the property is set\n\t$fixture.on( \"click\", function( event ) {\n\t\tassert.equal( event.testProperty, 42, \"event.testProperty getter was invoked\" );\n\t} );\n\tfireNative( $fixture[ 0 ], \"click\" );\n\t$fixture.off( \"click\" );\n\n\t$fixture.remove();\n} );\n\nQUnit.test( \"drag/drop events copy mouse-related event properties (gh-1925, gh-2009)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $fixture = jQuery( \"<div id='drag-fixture'></div>\" ).appendTo( \"body\" );\n\n\t$fixture.on( \"dragmove\", function( evt ) {\n\t\tassert.ok( \"pageX\" in evt, \"checking for pageX property on dragmove\" );\n\t\tassert.ok( \"pageY\" in evt, \"checking for pageY property on dragmove\" );\n\t} );\n\tfireNative( $fixture[ 0 ], \"dragmove\" );\n\n\t$fixture.on( \"drop\", function( evt ) {\n\t\tassert.ok( \"pageX\" in evt, \"checking for pageX property on drop\" );\n\t\tassert.ok( \"pageY\" in evt, \"checking for pageY property on drop\" );\n\t} );\n\n\tfireNative( $fixture[ 0 ], \"drop\" );\n\n\t$fixture.off( \"dragmove drop\" ).remove();\n} );\n\nQUnit.test( \"focusin using non-element targets\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( document ).on( \"focusin\", function( e ) {\n\t\tassert.ok( e.type === \"focusin\", \"got a focusin event on a document\" );\n\t} ).trigger( \"focusin\" ).off( \"focusin\" );\n\n\tjQuery( window ).on( \"focusin\", function( e ) {\n\t\tassert.ok( e.type === \"focusin\", \"got a focusin event on a window\" );\n\t} ).trigger( \"focusin\" ).off( \"focusin\" );\n\n} );\n\ntestIframe(\n\t\"focusin from an iframe\",\n\t\"event/focusinCrossFrame.html\",\n\tfunction( assert, framejQuery, frameWin, frameDoc ) {\n\t\tassert.expect( 1 );\n\n\t\tvar input = jQuery( frameDoc ).find( \"#frame-input\" );\n\n\t\t// Create a focusin handler on the parent; shouldn't affect the iframe's fate\n\t\tjQuery( \"body\" ).on( \"focusin.iframeTest\", function() {\n\t\t\tassert.ok( false, \"fired a focusin event in the parent document\" );\n\t\t} );\n\n\t\tinput.on( \"focusin\", function() {\n\t\t\tassert.ok( true, \"fired a focusin event in the iframe\" );\n\t\t} );\n\n\t\t// Avoid a native event; Chrome can't force focus to another frame\n\t\tinput.trigger( \"focusin\" );\n\n\t\t// Must manually remove handler to avoid leaks in our data store\n\t\tinput.remove();\n\n\t\t// Be sure it was removed; nothing should happen\n\t\tinput.trigger( \"focusin\" );\n\n\t\t// Remove body handler manually since it's outside the fixture\n\t\tjQuery( \"body\" ).off( \"focusin.iframeTest\" );\n\t}\n);\n\ntestIframe(\n\t\"jQuery.ready promise\",\n\t\"event/promiseReady.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( isOk, \"$.when( $.ready ) works\" );\n\t},\n\tjQuery.when ? QUnit.test : QUnit.skip\n);\n\n// need PHP here to make the incepted IFRAME hang\nif ( hasPHP ) {\n\ttestIframe(\n\t\t\"jQuery.ready uses interactive\",\n\t\t\"event/interactiveReady.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( isOk, \"jQuery fires ready when the DOM can truly be interacted with\" );\n\t\t}\n\t);\n}\n\ntestIframe(\n\t\"Focusing iframe element\",\n\t\"event/focusElem.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( isOk, \"Focused an element in an iframe\" );\n\t}\n);\n\ntestIframe(\n\t\"triggerHandler(onbeforeunload)\",\n\t\"event/triggerunload.html\",\n\tfunction( assert, jQuery, window, document, isOk ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( isOk, \"Triggered onbeforeunload without an error\" );\n\t}\n);\n\n// need PHP here to make the incepted IFRAME hang\nif ( hasPHP ) {\n\ttestIframe(\n\t\t\"jQuery.ready synchronous load with long loading subresources\",\n\t\t\"event/syncReady.html\",\n\t\tfunction( assert, jQuery, window, document, isOk ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( isOk, \"jQuery loaded synchronously fires ready when the DOM can truly be interacted with\" );\n\t\t}\n\t);\n}\n\nQUnit.test( \"change handler should be detached from element\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar $fixture = jQuery( \"<input type='text' id='change-ie-leak' />\" ).appendTo( \"body\" ),\n\t\toriginRemoveEvent = jQuery.removeEvent,\n\t\twrapperRemoveEvent =  function( elem, type, handle ) {\n\t\t\tassert.equal( \"change\", type, \"Event handler for 'change' event should be removed\" );\n\t\t\tassert.equal( \"change-ie-leak\", jQuery( elem ).attr( \"id\" ), \"Event handler for 'change' event should be removed from appropriate element\" );\n\t\t\toriginRemoveEvent( elem, type, handle );\n\t\t};\n\n\tjQuery.removeEvent = wrapperRemoveEvent;\n\n\t$fixture.on( \"change\", function() {} );\n\t$fixture.off( \"change\" );\n\n\t$fixture.remove();\n\n\tjQuery.removeEvent = originRemoveEvent;\n} );\n\nQUnit.test( \"trigger click on checkbox, fires change event\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar check = jQuery( \"#check2\" );\n\tvar done = assert.async();\n\n\tcheck.on( \"change\", function() {\n\n\t\t// get it?\n\t\tcheck.off( \"change\" );\n\t\tassert.ok( true, \"Change event fired as a result of triggered click\" );\n\t\tdone();\n\t} ).trigger( \"click\" );\n} );\n\nQUnit.test( \"Namespace preserved when passed an Event (#12739)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar markup = jQuery(\n\t\t\t\"<div id='parent'><div id='child'></div></div>\"\n\t\t),\n\t\ttriggered = 0,\n\t\tfooEvent;\n\n\tmarkup.find( \"div\" )\n\t\t.addBack()\n\t\t.on( \"foo.bar\", function( e ) {\n\t\t\tif ( !e.handled ) {\n\t\t\t\ttriggered++;\n\t\t\t\te.handled = true;\n\t\t\t\tassert.equal( e.namespace, \"bar\", \"namespace is bar\" );\n\t\t\t\tjQuery( e.target ).find( \"div\" ).each( function() {\n\t\t\t\t\tjQuery( this ).triggerHandler( e );\n\t\t\t\t} );\n\t\t\t}\n\t\t} )\n\t\t.on( \"foo.bar2\", function() {\n\t\t\tassert.ok( false, \"foo.bar2 called on trigger \" + triggered + \" id \" + this.id );\n\t\t} );\n\n\tmarkup.trigger( \"foo.bar\" );\n\tmarkup.trigger( jQuery.Event( \"foo.bar\" ) );\n\tfooEvent = jQuery.Event( \"foo\" );\n\tfooEvent.namespace = \"bar\";\n\tmarkup.trigger( fooEvent );\n\tmarkup.remove();\n\n\tassert.equal( triggered, 3, \"foo.bar triggered\" );\n} );\n\nQUnit.test( \"make sure events cloned correctly\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar clone,\n\t\tfixture = jQuery( \"#qunit-fixture\" ),\n\t\tcheckbox = jQuery( \"#check1\" ),\n\t\tp = jQuery( \"#firstp\" );\n\n\tfixture.on( \"click change\", function( event, result ) {\n\t\tassert.ok( result,  event.type + \" on original element is fired\" );\n\n\t} ).on( \"click\", \"#firstp\", function( event, result ) {\n\t\tassert.ok( result, \"Click on original child element though delegation is fired\" );\n\n\t} ).on( \"change\", \"#check1\", function( event, result ) {\n\t\tassert.ok( result, \"Change on original child element though delegation is fired\" );\n\t} );\n\n\tp.on( \"click\", function() {\n\t\tassert.ok( true, \"Click on original child element is fired\" );\n\t} );\n\n\tcheckbox.on( \"change\", function() {\n\t\tassert.ok( true, \"Change on original child element is fired\" );\n\t} );\n\n\tfixture.clone().trigger( \"click\" ).trigger( \"change\" ); // 0 events should be fired\n\n\tclone = fixture.clone( true );\n\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\", true ); // 3 events should fire\n\tclone.find( \"#check1\" ).trigger( \"change\", true ); // 3 events should fire\n\tclone.remove();\n\n\tclone = fixture.clone( true, true );\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\", true ); // 3 events should fire\n\tclone.find( \"#check1\" ).trigger( \"change\", true ); // 3 events should fire\n\n\tfixture.off();\n\tp.off();\n\tcheckbox.off();\n\n\tp.trigger( \"click\" ); // 0 should be fired\n\tcheckbox.trigger( \"change\" ); // 0 should be fired\n\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\", true );  // 3 events should fire\n\tclone.find( \"#check1\" ).trigger( \"change\", true ); // 3 events should fire\n\tclone.remove();\n\n\tclone.find( \"p\" ).eq( 0 ).trigger( \"click\" );  // 0 should be fired\n\tclone.find( \"#check1\" ).trigger( \"change\" ); // 0 events should fire\n} );\n\nQUnit.test( \"String.prototype.namespace does not cause trigger() to throw (#13360)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar errored = false;\n\n\tString.prototype.namespace = function() {};\n\n\ttry {\n\t\tjQuery( \"<p>\" ).trigger( \"foo.bar\" );\n\t} catch ( e ) {\n\t\terrored = true;\n\t}\n\tassert.equal( errored, false, \"trigger() did not throw exception\" );\n\tdelete String.prototype.namespace;\n} );\n\nQUnit.test( \"Inline event result is returned (#13993)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar result = jQuery( \"<p onclick='return 42'>hello</p>\" ).triggerHandler( \"click\" );\n\n\tassert.equal( result, 42, \"inline handler returned value\" );\n} );\n\nQUnit.test( \".off() removes the expando when there's no more data\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tdiv.on( \"click\", false );\n\tdiv.on( \"custom\", function() {\n\t\tassert.ok( true, \"Custom event triggered\" );\n\t} );\n\tdiv.trigger( \"custom\" );\n\tdiv.off( \"click custom\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.strictEqual(\n\t\t\t\tdiv[ 0 ][ key ], undefined,\n\t\t\t\t\"Expando was not removed when there was no more data\"\n\t\t\t);\n\t\t}\n\t}\n} );\n\nQUnit.test( \"jQuery.Event( src ) does not require a target property\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar event = jQuery.Event( { type: \"offtarget\" } );\n\n\tassert.equal( event.type, \"offtarget\", \"correct type\" );\n\tassert.equal( event.target, undefined, \"no target\" );\n} );\n\nQUnit.test( \"preventDefault() on focusin does not throw exception\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar done = assert.async(),\n\t\tinput = jQuery( \"<input/>\" ).appendTo( \"#form\" );\n\n\tinput.on( \"focusin\", function( event ) {\n\t\tif ( !done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar exceptionCaught;\n\t\ttry {\n\t\t\tevent.preventDefault();\n\t\t} catch ( theException ) {\n\t\t\texceptionCaught = theException;\n\t\t}\n\n\t\tassert.strictEqual( exceptionCaught, undefined,\n\t\t\t\"Preventing default on focusin throws no exception\" );\n\n\t\tdone();\n\t\tdone = null;\n\t} );\n\tinput.trigger( \"focus\" );\n\n\t// DOM focus is unreliable in TestSwarm; set a simulated event workaround timeout\n\tsetTimeout( function() {\n\t\tif ( !done ) {\n\t\t\treturn;\n\t\t}\n\t\tinput[ 0 ].addEventListener( \"click\", function( nativeEvent ) {\n\t\t\tjQuery.event.simulate( \"focusin\", this, jQuery.event.fix( nativeEvent ) );\n\t\t} );\n\t\tinput[ 0 ].click();\n\t}, QUnit.config.testTimeout / 4 || 1000 );\n} );\n\nQUnit.test( \".on('focus', fn) on a text node doesn't throw\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery( document.createTextNode( \"text\" ) )\n\t\t.on( \"focus\", function() {} );\n\n\tassert.ok( true, \"No crash\" );\n} );\n\nQUnit.test( \"Donor event interference\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar outer = jQuery(\n\t\t\t\"<div id='donor-outer'>\" +\n\t\t\t\t\"<form id='donor-form'>\" +\n\t\t\t\t\t\"<input id='donor-input' type='checkbox' />\" +\n\t\t\t\t\"</form>\" +\n\t\t\t\"</div>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tinput = jQuery( \"#donor-input\" );\n\n\tinput.on( \"click\", function( event ) {\n\t\tassert.equal( event.type, \"click\", \"click event at input\" );\n\t\tassert.ok( !event.isPropagationStopped(), \"click event at input is still propagating\" );\n\t\tassert.equal( typeof event.originalEvent, \"object\",\n\t\t\t\"click event at input has originalEvent property\" );\n\t} );\n\touter.on( \"click\", function( event ) {\n\t\tassert.equal( event.type, \"click\", \"click event at ancestor\" );\n\t\tassert.ok( !event.isPropagationStopped(), \"click event at ancestor is still propagating\" );\n\t\tassert.equal( typeof event.originalEvent, \"object\",\n\t\t\t\"click event at ancestor has originalEvent property\" );\n\t} );\n\tinput.on( \"change\", function( event ) {\n\t\tassert.equal( event.type, \"change\", \"change event at input\" );\n\t\tassert.equal( typeof event.originalEvent, \"object\",\n\t\t\t\"change event at input has originalEvent property\" );\n\t\tevent.stopPropagation();\n\t} );\n\tinput[ 0 ].click();\n} );\n\nQUnit.test(\n\t\"simulated events shouldn't forward stopPropagation/preventDefault methods\",\n\tfunction( assert ) {\n\t\tassert.expect( 3 );\n\n\t\tvar outer = jQuery(\n\t\t\t\t\"<div id='donor-outer'>\" +\n\t\t\t\t\t\"<form id='donor-form'>\" +\n\t\t\t\t\t\t\"<input id='donor-input' type='checkbox' />\" +\n\t\t\t\t\t\"</form>\" +\n\t\t\t\t\"</div>\"\n\t\t\t).appendTo( \"#qunit-fixture\" ),\n\t\t\tinput = jQuery( \"#donor-input\" ),\n\t\t\tspy = {};\n\n\t\tjQuery( \"#donor-form\" )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tspy.prevent = sinon.stub( event.originalEvent, \"preventDefault\" );\n\t\t\t\tevent.preventDefault();\n\t\t\t} )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tspy.stop = sinon.stub( event.originalEvent, \"stopPropagation\" );\n\t\t\t\tevent.stopPropagation();\n\t\t\t} )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tspy.immediate = sinon.stub( event.originalEvent, \"stopImmediatePropagation\" );\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} )\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tassert.ok( false, \"simulated event immediate propagation stopped\" );\n\t\t\t} );\n\t\touter\n\t\t\t.on( \"simulated\", function( event ) {\n\t\t\t\tassert.ok( false, \"simulated event propagation stopped\" );\n\t\t\t} );\n\n\t\t// Force a simulated event\n\t\tinput[ 0 ].addEventListener( \"click\", function( nativeEvent ) {\n\t\t\tjQuery.event.simulate( \"simulated\", this, jQuery.event.fix( nativeEvent ) );\n\t\t} );\n\t\tinput[ 0 ].click();\n\n\t\tassert.strictEqual( spy.prevent.called, false, \"Native preventDefault not called\" );\n\t\tassert.strictEqual( spy.stop.called, false, \"Native stopPropagation not called\" );\n\t\tassert.strictEqual( spy.immediate.called, false,\n\t\t\t\"Native stopImmediatePropagation not called\" );\n\t}\n);\n\nQUnit.test( \"originalEvent type of simulated event\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar outer = jQuery(\n\t\t\t\"<div id='donor-outer'>\" +\n\t\t\t\t\"<form id='donor-form'>\" +\n\t\t\t\t\t\"<input id='donor-input' type='text' />\" +\n\t\t\t\t\"</form>\" +\n\t\t\t\"</div>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tinput = jQuery( \"#donor-input\" ),\n\t\tdone = assert.async(),\n\t\tfinish = function() {\n\n\t\t\t// Remove jQuery handlers to ensure removal of capturing handlers on the document\n\t\t\touter.off( \"focusin\" );\n\n\t\t\tdone();\n\t\t};\n\n\touter.on( \"focusin\", function( event ) {\n\t\tassert.equal( event.type, \"focusin\", \"focusin event at ancestor\" );\n\t\tassert.equal( event.originalEvent.type, \"click\",\n\t\t\t\"focus event at ancestor has correct originalEvent type\" );\n\t\tsetTimeout( finish );\n\t} );\n\n\tinput[ 0 ].addEventListener( \"click\", function( nativeEvent ) {\n\t\tjQuery.event.simulate( \"focusin\", this, jQuery.event.fix( nativeEvent ) );\n\t} );\n\tinput[ 0 ].click();\n} );\n\nQUnit.test( \"trigger('click') on radio passes extra params\", function( assert ) {\n\tassert.expect( 1 );\n\tvar $radio = jQuery( \"<input type='radio' />\" ).appendTo( \"#qunit-fixture\" )\n\t\t.on( \"click\", function( e, data ) {\n\t\t\tassert.ok( data, \"Trigger data is passed to radio click handler\" );\n\t\t} );\n\n\t$radio.trigger( \"click\", [ true ] );\n} );\n\n// Support: IE <=9 only\n// https://msdn.microsoft.com/en-us/library/hh801223(v=vs.85).aspx\nQUnit.test( \"VML with special event handlers (trac-7071)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar ns = jQuery( \"<xml:namespace ns='urn:schemas-microsoft-com:vml' prefix='v' />\" ).appendTo( \"head\" );\n\n\tjQuery( \"<v:oval id='oval' style='width:100pt;height:75pt;' fillcolor='red'> </v:oval>\" ).appendTo( \"#form\" );\n\tjQuery( \"#form\" ).on( \"keydown\", function() {\n\t\tassert.ok( true, \"no error was thrown\" );\n\t} );\n\tjQuery( \"#oval\" ).trigger( \"click\" ).trigger( \"keydown\" );\n\tns.remove();\n} );\n\nQUnit.test( \"Check order of focusin/focusout events\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar focus, blur,\n\t\tinput = jQuery( \"#name\" );\n\n\tinput\n\t\t.on( \"focus\", function() {\n\t\t\tfocus = true;\n\t\t} )\n\t\t.on( \"focusin\", function() {\n\t\t\tassert.ok( !focus, \"Focusin event should fire before focus does\" );\n\t\t\tfocus = true;\n\t\t} )\n\t\t.on( \"blur\", function() {\n\t\t\tblur = true;\n\t\t} )\n\t\t.on( \"focusout\", function() {\n\t\t\tassert.ok( !blur, \"Focusout event should fire before blur does\" );\n\t\t\tblur = true;\n\t\t} );\n\n\t// gain focus\n\tinput.trigger( \"focus\" );\n\n\t// then lose it\n\tjQuery( \"#search\" ).trigger( \"focus\" );\n\n\t// cleanup\n\tinput.off();\n\n\t// DOM focus is unreliable in TestSwarm\n\tif ( !focus ) {\n\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t}\n} );\n\nQUnit.test( \"focus-blur order (#12868)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar order,\n\t\t$text = jQuery( \"#text1\" ),\n\t\t$radio = jQuery( \"#radio1\" ),\n\n\t\t// Support: IE <=9 - 11+\n\t\t// focus and blur events are asynchronous; this is the resulting mess.\n\t\t// The browser window must be topmost for this to work properly!!\n\t\tdone = assert.async();\n\n\t$radio[ 0 ].focus();\n\n\tsetTimeout( function() {\n\n\t\t$text\n\t\t\t.on( \"focus\", function() {\n\t\t\t\tassert.equal( order++, 1, \"text focus\" );\n\t\t\t} )\n\t\t\t.on( \"blur\", function() {\n\t\t\t\tassert.equal( order++, 0, \"text blur\" );\n\t\t\t} );\n\t\t$radio\n\t\t\t.on( \"focus\", function() {\n\t\t\t\tassert.equal( order++, 1, \"radio focus\" );\n\t\t\t} )\n\t\t\t.on( \"blur\", function() {\n\t\t\t\tassert.equal( order++, 0, \"radio blur\" );\n\t\t\t} );\n\n\t\t// Enabled input getting focus\n\t\torder = 0;\n\t\tassert.equal( document.activeElement, $radio[ 0 ], \"radio has focus\" );\n\t\t$text.trigger( \"focus\" );\n\t\tsetTimeout( function() {\n\n\t\t\t// DOM focus is unreliable in TestSwarm\n\t\t\tif ( order === 0 ) {\n\t\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\t}\n\n\t\t\tassert.equal( document.activeElement, $text[ 0 ], \"text has focus\" );\n\n\t\t\t// Run handlers without native method on an input\n\t\t\torder = 1;\n\t\t\t$radio.triggerHandler( \"focus\" );\n\n\t\t\t// Clean up\n\t\t\t$text.off();\n\t\t\t$radio.off();\n\t\t\tdone();\n\t\t}, 50 );\n\t}, 50 );\n} );\n\nQUnit.test( \"Event handling works with multiple async focus events (gh-4350)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar remaining = 3,\n\t\tinput = jQuery( \"#name\" ),\n\n\t\t// Support: IE <=9 - 11+\n\t\t// focus and blur events are asynchronous; this is the resulting mess.\n\t\t// The browser window must be topmost for this to work properly!!\n\t\tdone = assert.async();\n\n\tinput\n\t\t.on( \"focus\", function() {\n\t\t\tremaining--;\n\t\t\tassert.ok( true, \"received focus event, expecting \" + remaining + \" more\" );\n\t\t\tif ( remaining > 0 ) {\n\t\t\t\tinput.trigger( \"blur\" );\n\t\t\t} else {\n\t\t\t\tdone();\n\t\t\t}\n\t\t} )\n\t\t.on( \"blur\", function() {\n\t\t\tsetTimeout( function() {\n\t\t\t\tinput.trigger( \"focus\" );\n\t\t\t} );\n\t\t} );\n\n\t// gain focus\n\tinput.trigger( \"focus\" );\n\n\t// DOM focus is unreliable in TestSwarm\n\tsetTimeout( function() {\n\t\tif ( QUnit.isSwarm && remaining === 3 ) {\n\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\tassert.ok( true, \"GAP: Could not observe focus change\" );\n\t\t\tsetTimeout( function() {\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t} );\n} );\n\nQUnit.test( \"native-backed events preserve trigger data (gh-1741, gh-4139)\", function( assert ) {\n\tassert.expect( 17 );\n\n\tvar parent = supportjQuery(\n\t\t\t\"<div class='parent'><input type='checkbox'><input type='radio'></div>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\ttargets = jQuery( parent[ 0 ].childNodes ),\n\t\tcheckbox = jQuery( targets[ 0 ] ),\n\t\tdata = [ \"arg1\", \"arg2\" ],\n\t\tslice = data.slice,\n\n\t\t// Support: IE <=9 - 11+\n\t\t// focus and blur events are asynchronous; this is the resulting mess.\n\t\t// The browser window must be topmost for this to work properly!!\n\t\tdone = assert.async();\n\n\t// click (gh-4139)\n\tassert.strictEqual( targets[ 0 ].checked, false, \"checkbox unchecked before click\" );\n\tassert.strictEqual( targets[ 1 ].checked, false, \"radio unchecked before click\" );\n\ttargets.add( parent ).on( \"click\", function( event ) {\n\t\tvar type = event.target.type,\n\t\t\tlevel = event.currentTarget === parent[ 0 ] ? \"parent\" : \"\";\n\t\tassert.strictEqual( event.target.checked, true,\n\t\t\ttype + \" toggled before invoking \" + level + \" handler\" );\n\t\tassert.deepEqual( slice.call( arguments, 1 ), data,\n\t\t\ttype + \" \" + level + \" handler received correct data\" );\n\t} );\n\ttargets.trigger( \"click\", data );\n\tassert.strictEqual( targets[ 0 ].checked, true,\n\t\t\"checkbox toggled after click (default action)\" );\n\tassert.strictEqual( targets[ 1 ].checked, true,\n\t\t\"radio toggled after event (default action)\" );\n\n\t// focus (gh-1741)\n\tassert.notEqual( document.activeElement, checkbox[ 0 ],\n\t\t\"element not focused before focus event\" );\n\tcheckbox.on( \"focus blur\", function( event ) {\n\t\tvar type = event.type;\n\t\tassert.deepEqual( slice.call( arguments, 1 ), data,\n\t\t\ttype + \" handler received correct data\" );\n\t} );\n\tcheckbox.trigger( \"focus\", data );\n\tsetTimeout( function() {\n\t\tassert.strictEqual( document.activeElement, checkbox[ 0 ],\n\t\t\t\"element focused after focus event (default action)\" );\n\t\tcheckbox.trigger( \"blur\", data );\n\t\tsetTimeout( function() {\n\t\t\tassert.notEqual( document.activeElement, checkbox[ 0 ],\n\t\t\t\t\"element not focused after blur event (default action)\" );\n\t\t\tdone();\n\t\t}, 50 );\n\t}, 50 );\n} );\n\n// TODO replace with an adaptation of\n// https://github.com/jquery/jquery/pull/1367/files#diff-a215316abbaabdf71857809e8673ea28R2464\n( function() {\n\tsupportjQuery.each(\n\t\t{\n\t\t\tcheckbox: \"<input type='checkbox'>\",\n\t\t\tradio: \"<input type='radio'>\"\n\t\t},\n\t\tmakeTestFor3751\n\t);\n\n\tfunction makeTestFor3751( type, html ) {\n\t\tvar testName = \"native-backed namespaced clicks are handled correctly (gh-3751) - \" + type;\n\t\tQUnit.test( testName, function( assert ) {\n\t\t\tassert.expect( 2 );\n\n\t\t\tvar parent = supportjQuery( \"<div class='parent'>\" + html + \"</div>\" ),\n\t\t\t\ttarget = jQuery( parent[ 0 ].firstChild );\n\n\t\t\tparent.appendTo( \"#qunit-fixture\" );\n\n\t\t\ttarget.add( parent )\n\t\t\t\t.on( \"click.notFired\", function( event ) {\n\t\t\t\t\tassert.ok( false, \"namespaced event should not be received\" +\n\t\t\t\t\t\t\" by wrong-namespace listener at \" + event.currentTarget.nodeName );\n\t\t\t\t} )\n\t\t\t\t.on( \"click.fired\", function( event ) {\n\t\t\t\t\tassert.equal( event.target.checked, true,\n\t\t\t\t\t\t\"toggled before invoking handler at \" + event.currentTarget.nodeName );\n\t\t\t\t} )\n\t\t\t\t.on( \"click\", function( event ) {\n\t\t\t\t\tassert.ok( false, \"namespaced event should not be received\" +\n\t\t\t\t\t\t\" by non-namespaced listener at \" + event.currentTarget.nodeName );\n\t\t\t\t} );\n\n\t\t\ttarget.trigger( \"click.fired\" );\n\t\t} );\n\t}\n} )();\n", "QUnit.module( \"manipulation\", {\n\tafterEach: moduleTeardown\n} );\n\n// Ensure that an extended Array prototype doesn't break jQuery\nArray.prototype.arrayProtoFn = function() {\n};\n\nfunction manipulationBareObj( value ) {\n\treturn value;\n}\n\nfunction manipulationFunctionReturningObj( value ) {\n\treturn function() {\n\t\treturn value;\n\t};\n}\n\n/*\n\t======== local reference =======\n\tmanipulationBareObj and manipulationFunctionReturningObj can be used to test passing functions to setters\n\tSee testVal below for an example\n\n\tbareObj( value );\n\t\tThis function returns whatever value is passed in\n\n\tfunctionReturningObj( value );\n\t\tReturns a function that returns the value\n*/\n\nQUnit.test( \"text()\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar expected, frag, $newLineTest;\n\n\texpected = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for merged text of more then one element.\" );\n\n\t// Check serialization of text values\n\tassert.equal( jQuery( document.createTextNode( \"foo\" ) ).text(), \"foo\", \"Text node was retrieved from .text().\" );\n\tassert.notEqual( jQuery( document ).text(), \"\", \"Retrieving text for the document retrieves all text (#10724).\" );\n\n\t// Retrieve from document fragments #10864\n\tfrag = document.createDocumentFragment();\n\tfrag.appendChild( document.createTextNode( \"foo\" ) );\n\n\tassert.equal( jQuery( frag ).text(), \"foo\", \"Document Fragment Text node was retrieved from .text().\" );\n\n\t$newLineTest = jQuery( \"<div>test<br/>testy</div>\" ).appendTo( \"#moretests\" );\n\t$newLineTest.find( \"br\" ).replaceWith( \"\\n\" );\n\tassert.equal( $newLineTest.text(), \"test\\ntesty\", \"text() does not remove new lines (#11153)\" );\n\n\t$newLineTest.remove();\n} );\n\nQUnit.test( \"text(undefined)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery( \"#foo\" ).text( \"<div\" ).text( undefined )[ 0 ].innerHTML, \"&lt;div\", \".text(undefined) is chainable (#5571)\" );\n} );\n\nfunction testText( valueObj, assert ) {\n\n\tassert.expect( 6 );\n\n\tvar val, j, expected, $multipleElements, $parentDiv, $childDiv;\n\n\tval = valueObj( \"<div><b>Hello</b> cruel world!</div>\" );\n\tassert.equal( jQuery( \"#foo\" ).text( val )[ 0 ].innerHTML.replace( />/g, \"&gt;\" ), \"&lt;div&gt;&lt;b&gt;Hello&lt;/b&gt; cruel world!&lt;/div&gt;\", \"Check escaped text\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.text( valueObj( \"hi!\" ) );\n\tassert.equal( jQuery( j[ 0 ] ).text(), \"hi!\", \"Check node,textnode,comment with text()\" );\n\tassert.equal( j[ 1 ].nodeValue, \" there \", \"Check node,textnode,comment with text()\" );\n\n\tassert.equal( j[ 2 ].nodeType, 8, \"Check node,textnode,comment with text()\" );\n\n\t// Update multiple elements #11809\n\texpected = \"New\";\n\n\t$multipleElements = jQuery( \"<div>Hello</div>\" ).add( \"<div>World</div>\" );\n\t$multipleElements.text( expected );\n\n\tassert.equal( $multipleElements.eq( 0 ).text(), expected, \"text() updates multiple elements (#11809)\" );\n\tassert.equal( $multipleElements.eq( 1 ).text(), expected, \"text() updates multiple elements (#11809)\" );\n\n\t// Prevent memory leaks #11809\n\t$childDiv = jQuery( \"<div></div>\" );\n\t$childDiv.data( \"leak\", true );\n\t$parentDiv = jQuery( \"<div></div>\" );\n\t$parentDiv.append( $childDiv );\n\t$parentDiv.text( \"Dry off\" );\n}\n\nQUnit.test( \"text(String)\", function( assert ) {\n\ttestText( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"text(Function)\", function( assert ) {\n\ttestText( manipulationFunctionReturningObj, assert );\n} );\n\nQUnit.test( \"text(Function) with incoming value\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\n\tjQuery( \"#sap\" ).text( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"foobar\";\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), \"foobar\", \"Check for merged text of more then one element.\" );\n} );\n\nfunction testAppendForObject( valueObj, isFragment, assert ) {\n\tvar $base,\n\t\ttype = isFragment ? \" (DocumentFragment)\" : \" (Element)\",\n\t\ttext = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\",\n\t\tel = document.getElementById( \"sap\" ).cloneNode( true ),\n\t\tfirst = document.getElementById( \"first\" ),\n\t\tyahoo = document.getElementById( \"yahoo\" );\n\n\tif ( isFragment ) {\n\t\t$base = document.createDocumentFragment();\n\t\tjQuery( el ).contents().each( function() {\n\t\t\t$base.appendChild( this );\n\t\t} );\n\t\t$base = jQuery( $base );\n\t} else {\n\t\t$base = jQuery( el );\n\t}\n\n\tassert.equal( $base.clone().append( valueObj( first.cloneNode( true ) ) ).text(),\n\t\ttext + \"Try them out:\",\n\t\t\"Check for appending of element\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( [ first.cloneNode( true ), yahoo.cloneNode( true ) ] ) ).text(),\n\t\ttext + \"Try them out:Yahoo\",\n\t\t\"Check for appending of array of elements\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( jQuery( \"#yahoo, #first\" ).clone() ) ).text(),\n\t\ttext + \"YahooTry them out:\",\n\t\t\"Check for appending of jQuery object\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( 5 ) ).text(),\n\t\ttext + \"5\",\n\t\t\"Check for appending a number\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( [ jQuery( \"#first\" ).clone(), jQuery( \"#yahoo, #google\" ).clone() ] ) ).text(),\n\t\ttext + \"Try them out:GoogleYahoo\",\n\t\t\"Check for appending of array of jQuery objects\"\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( \" text with spaces \" ) ).text(),\n\t\ttext + \" text with spaces \",\n\t\t\"Check for appending text with spaces\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( [] ) ).text(),\n\t\ttext,\n\t\t\"Check for appending an empty array\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( \"\" ) ).text(),\n\t\ttext,\n\t\t\"Check for appending an empty string\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( document.getElementsByTagName( \"foo\" ) ) ).text(),\n\t\ttext,\n\t\t\"Check for appending an empty nodelist\" + type\n\t);\n\n\tassert.equal( $base.clone().append( \"<span></span>\", \"<span></span>\", \"<span></span>\" ).children().length,\n\t\t$base.children().length + 3,\n\t\t\"Make sure that multiple arguments works.\" + type\n\t);\n\n\tassert.equal( $base.clone().append( valueObj( document.getElementById( \"form\" ).cloneNode( true ) ) ).children( \"form\" ).length,\n\t\t1,\n\t\t\"Check for appending a form (#910)\" + type\n\t);\n}\n\nfunction testAppend( valueObj, assert ) {\n\n\tassert.expect( 78 );\n\n\ttestAppendForObject( valueObj, false, assert );\n\ttestAppendForObject( valueObj, true, assert );\n\n\tvar defaultText, result, message, iframe, iframeDoc, j, d,\n\t\t$input, $radioChecked, $radioUnchecked, $radioParent, $map, $table;\n\n\tdefaultText = \"Try them out:\";\n\tresult = jQuery( \"#first\" ).append( valueObj( \"<b>buga</b>\" ) );\n\n\tassert.equal( result.text(), defaultText + \"buga\", \"Check if text appending works\" );\n\tassert.equal( jQuery( \"#select3\" ).append( valueObj( \"<option value='appendTest'>Append Test</option>\" ) ).find( \"option:last-child\" ).attr( \"value\" ), \"appendTest\", \"Appending html options to select element\" );\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input name='radiotest' type='radio' checked='checked' />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append checked radio\" );\n\t} ).remove();\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input name='radiotest2' type='radio' checked    =   'checked' />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest2]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append alternately formated checked radio\" );\n\t} ).remove();\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input name='radiotest3' type='radio' checked />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest3]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append HTML5-formated checked radio\" );\n\t} ).remove();\n\n\tjQuery( \"#qunit-fixture form\" ).append( valueObj( \"<input type='radio' checked='checked' name='radiotest4' />\" ) );\n\tjQuery( \"#qunit-fixture form input[name=radiotest4]\" ).each( function() {\n\t\tassert.ok( jQuery( this ).is( \":checked\" ), \"Append with name attribute after checked attribute\" );\n\t} ).remove();\n\n\tmessage = \"Test for appending a DOM node to the contents of an iframe\";\n\tiframe = jQuery( \"#iframe\" )[ 0 ];\n\tiframeDoc = iframe.contentDocument || iframe.contentWindow && iframe.contentWindow.document;\n\n\ttry {\n\t\tif ( iframeDoc && iframeDoc.body ) {\n\t\t\tassert.equal( jQuery( iframeDoc.body ).append( valueObj( \"<div id='success'>test</div>\" ) )[ 0 ].lastChild.id, \"success\", message );\n\t\t} else {\n\t\t\tassert.ok( true, message + \" - can't test\" );\n\t\t}\n\t} catch ( e ) {\n\t\tassert.strictEqual( e.message || e, undefined, message );\n\t}\n\n\tjQuery( \"<fieldset></fieldset>\" ).appendTo( \"#form\" ).append( valueObj( \"<legend id='legend'>test</legend>\" ) );\n\tassert.t( \"Append legend\", \"#legend\", [ \"legend\" ] );\n\n\t$map = jQuery( \"<map></map>\" ).append( valueObj( \"<area id='map01' shape='rect' coords='50,50,150,150' href='http://www.jquery.com/' alt='jQuery'>\" ) );\n\n\tassert.equal( $map[ 0 ].childNodes.length, 1, \"The area was inserted.\" );\n\tassert.equal( $map[ 0 ].firstChild.nodeName.toLowerCase(), \"area\", \"The area was inserted.\" );\n\n\tjQuery( \"#select1\" ).append( valueObj( \"<OPTION>Test</OPTION>\" ) );\n\tassert.equal( jQuery( \"#select1 option:last-child\" ).text(), \"Test\", \"Appending OPTION (all caps)\" );\n\n\tjQuery( \"#select1\" ).append( valueObj( \"<optgroup label='optgroup'><option>optgroup</option></optgroup>\" ) );\n\tassert.equal( jQuery( \"#select1 optgroup\" ).attr( \"label\" ), \"optgroup\", \"Label attribute in newly inserted optgroup is correct\" );\n\tassert.equal( jQuery( \"#select1 option\" ).last().text(), \"optgroup\", \"Appending optgroup\" );\n\n\t$table = jQuery( \"#table\" );\n\n\tjQuery.each( \"thead tbody tfoot colgroup caption tr th td\".split( \" \" ), function( i, name ) {\n\t\t$table.append( valueObj( \"<\" + name + \"/>\" ) );\n\t\tassert.equal( $table.find( name ).length, 1, \"Append \" + name );\n\t\tassert.ok( jQuery.parseHTML( \"<\" + name + \"/>\" ).length, name + \" wrapped correctly\" );\n\t} );\n\n\tjQuery( \"#table colgroup\" ).append( valueObj( \"<col></col>\" ) );\n\tassert.equal( jQuery( \"#table colgroup col\" ).length, 1, \"Append col\" );\n\n\tjQuery( \"#form\" )\n\t\t.append( valueObj( \"<select id='appendSelect1'></select>\" ) )\n\t\t.append( valueObj( \"<select id='appendSelect2'><option>Test</option></select>\" ) );\n\tassert.t( \"Append Select\", \"#appendSelect1, #appendSelect2\", [ \"appendSelect1\", \"appendSelect2\" ] );\n\n\tassert.equal( \"Two nodes\", jQuery( \"<div></div>\" ).append( \"Two\", \" nodes\" ).text(), \"Appending two text nodes (#4011)\" );\n\tassert.equal( jQuery( \"<div></div>\" ).append( \"1\", \"\", 3 ).text(), \"13\", \"If median is false-like value, subsequent arguments should not be ignored\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\td = jQuery( \"<div></div>\" ).appendTo( \"#nonnodes\" ).append( j );\n\n\tassert.equal( jQuery( \"#nonnodes\" ).length, 1, \"Check node,textnode,comment append moved leaving just the div\" );\n\tassert.equal( d.contents().length, 3, \"Check node,textnode,comment append works\" );\n\td.contents().appendTo( \"#nonnodes\" );\n\td.remove();\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().length, 3, \"Check node,textnode,comment append cleanup worked\" );\n\n\t$input = jQuery( \"<input type='checkbox'/>\" ).prop( \"checked\", true ).appendTo( \"#testForm\" );\n\tassert.equal( $input[ 0 ].checked, true, \"A checked checkbox that is appended stays checked\" );\n\n\t$radioChecked = jQuery( \"input[type='radio'][name='R1']\" ).eq( 1 );\n\t$radioParent = $radioChecked.parent();\n\t$radioUnchecked = jQuery( \"<input type='radio' name='R1' checked='checked'/>\" ).appendTo( $radioParent );\n\t$radioChecked.trigger( \"click\" );\n\t$radioUnchecked[ 0 ].checked = false;\n\n\tjQuery( \"<div></div>\" ).insertBefore( $radioParent ).append( $radioParent );\n\n\tassert.equal( $radioChecked[ 0 ].checked, true, \"Reappending radios uphold which radio is checked\" );\n\tassert.equal( $radioUnchecked[ 0 ].checked, false, \"Reappending radios uphold not being checked\" );\n\n\tassert.equal( jQuery( \"<div></div>\" ).append( valueObj( \"option<area></area>\" ) )[ 0 ].childNodes.length, 2, \"HTML-string with leading text should be processed correctly\" );\n}\n\nQUnit.test( \"append(String|Element|Array<Element>|jQuery)\", function( assert ) {\n\ttestAppend( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"append(Function)\", function( assert ) {\n\ttestAppend( manipulationFunctionReturningObj, assert );\n} );\n\nQUnit.test( \"append(param) to object, see #11280\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar object = jQuery( document.createElement( \"object\" ) ).appendTo( document.body );\n\n\tassert.equal( object.children().length, 0, \"object does not start with children\" );\n\n\tobject.append( jQuery( \"<param type='wmode' name='foo'>\" ) );\n\tassert.equal( object.children().length, 1, \"appended param\" );\n\tassert.equal( object.children().eq( 0 ).attr( \"name\" ), \"foo\", \"param has name=foo\" );\n\n\tobject = jQuery( \"<object><param type='baz' name='bar'></object>\" );\n\tassert.equal( object.children().length, 1, \"object created with child param\" );\n\tassert.equal( object.children().eq( 0 ).attr( \"name\" ), \"bar\", \"param has name=bar\" );\n} );\n\nQUnit.test( \"append(Function) returns String\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar defaultText, result, select, old;\n\n\tdefaultText = \"Try them out:\";\n\told = jQuery( \"#first\" ).html();\n\n\tresult = jQuery( \"#first\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>buga</b>\";\n\t} );\n\tassert.equal( result.text(), defaultText + \"buga\", \"Check if text appending works\" );\n\n\tselect = jQuery( \"#select3\" );\n\told = select.html();\n\n\tassert.equal( select.append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<option value='appendTest'>Append Test</option>\";\n\t} ).find( \"option:last-child\" ).attr( \"value\" ), \"appendTest\", \"Appending html options to select element\" );\n} );\n\nQUnit.test( \"append(Function) returns Element\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\",\n\t\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn document.getElementById( \"first\" );\n\t} );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of element\" );\n} );\n\nQUnit.test( \"append(Function) returns Array<Element>\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:Yahoo\",\n\t\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ];\n\t} );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of array of elements\" );\n} );\n\nQUnit.test( \"append(Function) returns jQuery\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogYahooTry them out:\",\n\t\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn jQuery( \"#yahoo, #first\" );\n\t} );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of jQuery object\" );\n} );\n\nQUnit.test( \"append(Function) returns Number\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar old = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).append( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn 5;\n\t} );\n\tassert.ok( jQuery( \"#sap\" )[ 0 ].innerHTML.match( /5$/ ), \"Check for appending a number\" );\n} );\n\nQUnit.test( \"XML DOM manipulation (#9960)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar xmlDoc1 = jQuery.parseXML( \"<scxml xmlns='http://www.w3.org/2005/07/scxml' version='1.0'><state x='100' y='100' initial='actions' id='provisioning'></state><state x='100' y='100' id='error'></state><state x='100' y='100' id='finished' final='true'></state></scxml>\" ),\n\t\txmlDoc2 = jQuery.parseXML( \"<scxml xmlns='http://www.w3.org/2005/07/scxml' version='1.0'><state id='provisioning3'></state></scxml>\" ),\n\t\txml1 = jQuery( xmlDoc1 ),\n\t\txml2 = jQuery( xmlDoc2 ),\n\t\tscxml1 = jQuery( \"scxml\", xml1 ),\n\t\tscxml2 = jQuery( \"scxml\", xml2 ),\n\t\tstate = scxml2.find( \"state\" );\n\n\tscxml1.append( state );\n\tassert.strictEqual( scxml1[ 0 ].lastChild, state[ 0 ], \"append\" );\n\n\tscxml1.prepend( state );\n\tassert.strictEqual( scxml1[ 0 ].firstChild, state[ 0 ], \"prepend\" );\n\n\tscxml1.find( \"#finished\" ).after( state );\n\tassert.strictEqual( scxml1[ 0 ].lastChild, state[ 0 ], \"after\" );\n\n\tscxml1.find( \"#provisioning\" ).before( state );\n\tassert.strictEqual( scxml1[ 0 ].firstChild, state[ 0 ], \"before\" );\n\n\tscxml2.replaceWith( scxml1 );\n\tassert.deepEqual( jQuery( \"state\", xml2 ).get(), scxml1.find( \"state\" ).get(), \"replaceWith\" );\n} );\n\nQUnit.test( \"append HTML5 sectioning elements (Bug #6485)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar article, aside;\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<article style='font-size:10px'><section><aside>HTML5 elements</aside></section></article>\" );\n\n\tarticle = jQuery( \"article\" );\n\taside = jQuery( \"aside\" );\n\n\tassert.equal( article.get( 0 ).style.fontSize, \"10px\", \"HTML5 elements are styleable\" );\n\tassert.equal( aside.length, 1, \"HTML5 elements do not collapse their children\" );\n} );\n\nif ( jQuery.css ) {\n\tQUnit.test( \"HTML5 Elements inherit styles from style rules (Bug #10501)\", function( assert ) {\n\n\t\tassert.expect( 1 );\n\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<article id='article'></article>\" );\n\t\tjQuery( \"#article\" ).append( \"<section>This section should have a pink background.</section>\" );\n\n\t\t// In IE, the missing background color will claim its value is \"transparent\"\n\t\tassert.notEqual( jQuery( \"section\" ).css( \"background-color\" ), \"transparent\", \"HTML5 elements inherit styles\" );\n\t} );\n}\n\nQUnit.test( \"html(String) with HTML5 (Bug #6485)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tjQuery( \"#qunit-fixture\" ).html( \"<article><section><aside>HTML5 elements</aside></section></article>\" );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).children().children().length, 1, \"Make sure HTML5 article elements can hold children. innerHTML shortcut path\" );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).children().children().children().length, 1, \"Make sure nested HTML5 elements can hold children.\" );\n} );\n\nQUnit.test( \"html(String) tag-hyphenated elements (Bug #1987)\", function( assert ) {\n\n\tassert.expect( 27 );\n\n\tjQuery.each( \"thead tbody tfoot colgroup caption tr th td\".split( \" \" ), function( i, name ) {\n\t\tvar j = jQuery( \"<\" + name + \"-d></\" + name + \"-d><\" + name + \"-d></\" + name + \"-d>\" );\n\t\tassert.ok( j[ 0 ], \"Create a tag-hyphenated element\" );\n\t\tassert.ok( j[ 0 ].nodeName === name.toUpperCase() + \"-D\", \"Hyphenated node name\" );\n\t\tassert.ok( j[ 1 ].nodeName === name.toUpperCase() + \"-D\", \"Hyphenated node name\" );\n\t} );\n\n\tvar j = jQuery( \"<tr-multiple-hyphens><td-with-hyphen>text</td-with-hyphen></tr-multiple-hyphens>\" );\n\tassert.ok( j[ 0 ].nodeName === \"TR-MULTIPLE-HYPHENS\", \"Tags with multiple hyphens\" );\n\tassert.ok( j.children()[ 0 ].nodeName === \"TD-WITH-HYPHEN\", \"Tags with multiple hyphens\" );\n\tassert.equal( j.children().text(), \"text\", \"Tags with multiple hyphens behave normally\" );\n} );\n\nQUnit.test( \"Tag name processing respects the HTML Standard (gh-2005)\", function( assert ) {\n\n\tassert.expect( 240 );\n\n\tvar wrapper = jQuery( \"<div></div>\" ),\n\t\tnameTerminatingChars = \"\\x20\\t\\r\\n\\f\".split( \"\" ),\n\t\tspecialChars = \"[ ] { } _ - = + \\\\ ( ) * & ^ % $ # @ ! ~ ` ' ; ? \u00a5 \u00ab \u00b5 \u03bb \u2295 \u2248 \u03be \u211c \u2663 \u20ac\"\n\t\t\t.split( \" \" );\n\n\tspecialChars.push( specialChars.join( \"\" ) );\n\n\tjQuery.each( specialChars, function( i, characters ) {\n\t\tassertSpecialCharsSupport( \"html\", characters );\n\t\tassertSpecialCharsSupport( \"append\", characters );\n\t} );\n\n\tjQuery.each( nameTerminatingChars, function( i, character ) {\n\t\tassertNameTerminatingCharsHandling( \"html\", character );\n\t\tassertNameTerminatingCharsHandling( \"append\", character );\n\t} );\n\n\tfunction buildChild( method, html ) {\n\t\twrapper[ method ]( html );\n\t\treturn wrapper.children()[ 0 ];\n\t}\n\n\tfunction assertSpecialCharsSupport( method, characters ) {\n\t\t// Support: Android 4.4 only\n\t\t// Chromium < 35 incorrectly upper-cases \u00b5; Android 4.4 uses such a version by default\n\t\t// (and its WebView, being un-updatable, will use it for eternity) so we need to blacklist\n\t\t// that one for the tests to pass.\n\t\tif ( characters === \"\u00b5\" && /chrome/i.test( navigator.userAgent ) &&\n\t\t\tnavigator.userAgent.match( /chrome\\/(\\d+)/i )[ 1 ] < 35 ) {\n\t\t\tassert.ok( true, \"This Chromium version upper-cases \u00b5 incorrectly; skip test\" );\n\t\t\tassert.ok( true, \"This Chromium version upper-cases \u00b5 incorrectly; skip test\" );\n\t\t\tassert.ok( true, \"This Chromium version upper-cases \u00b5 incorrectly; skip test\" );\n\t\t\treturn;\n\t\t}\n\n\t\tvar child,\n\t\t\tcodepoint = characters.charCodeAt( 0 ).toString( 16 ).toUpperCase(),\n\t\t\tdescription = characters.length === 1 ?\n\t\t\t\t\"U+\" + ( \"000\" + codepoint ).slice( -4 ) + \" \" + characters :\n\t\t\t\t\"all special characters\",\n\t\t\tnodeName = \"valid\" + characters + \"tagname\";\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"></\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), nodeName.toUpperCase(),\n\t\t\tmethod + \"(): Paired tag name includes \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), nodeName.toUpperCase(),\n\t\t\tmethod + \"(): Unpaired tag name includes \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"/>\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), nodeName.toUpperCase(),\n\t\t\tmethod + \"(): Self-closing tag name includes \" + description );\n\t}\n\n\tfunction assertNameTerminatingCharsHandling( method, character ) {\n\t\tvar child,\n\t\t\tcodepoint = character.charCodeAt( 0 ).toString( 16 ).toUpperCase(),\n\t\t\tdescription = \"U+\" + ( \"000\" + codepoint ).slice( -4 ) + \" \" + character,\n\t\t\tnodeName = \"div\" + character + \"this-will-be-discarded\";\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"></\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), \"DIV\",\n\t\t\tmethod + \"(): Paired tag name terminated by \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \">\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), \"DIV\",\n\t\t\tmethod + \"(): Unpaired open tag name terminated by \" + description );\n\n\t\tchild = buildChild( method, \"<\" + nodeName + \"/>\" );\n\t\tassert.equal( child.nodeName.toUpperCase(), \"DIV\",\n\t\t\tmethod + \"(): Self-closing tag name terminated by \" + description );\n\t}\n} );\n\nQUnit.test( \"IE8 serialization bug\", function( assert ) {\n\n\tassert.expect( 2 );\n\tvar wrapper = jQuery( \"<div></div>\" );\n\n\twrapper.html( \"<div></div><article></article>\" );\n\tassert.equal( wrapper.children( \"article\" ).length, 1, \"HTML5 elements are insertable with .html()\" );\n\n\twrapper.html( \"<div></div><link></link>\" );\n\tassert.equal( wrapper.children( \"link\" ).length, 1, \"Link elements are insertable with .html()\" );\n} );\n\nQUnit.test( \"html() object element #10324\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar object = jQuery( \"<object id='object2'><param name='object2test' value='test'></param></object>?\" ).appendTo( \"#qunit-fixture\" ),\n\t\tclone = object.clone();\n\n\tassert.equal( clone.html(), object.html(), \"html() returns correct innerhtml of cloned object elements\" );\n} );\n\nQUnit.test( \"append(xml)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar xmlDoc, xml1, xml2;\n\n\tfunction createXMLDoc() {\n\n\t\t// Initialize DOM based upon latest installed MSXML or Netscape\n\t\tvar elem, n, len,\n\t\t\taActiveX =\n\t\t\t\t[ \"MSXML6.DomDocument\",\n\t\t\t\t\"MSXML3.DomDocument\",\n\t\t\t\t\"MSXML2.DomDocument\",\n\t\t\t\t\"MSXML.DomDocument\",\n\t\t\t\t\"Microsoft.XmlDom\" ];\n\n\t\tif ( document.implementation && \"createDocument\" in document.implementation ) {\n\t\t\treturn document.implementation.createDocument( \"\", \"\", null );\n\t\t} else {\n\n\t\t\t// IE\n\t\t\tfor ( n = 0, len = aActiveX.length; n < len; n++ ) {\n\t\t\t\ttry {\n\t\t\t\t\telem = new window.ActiveXObject( aActiveX[ n ] );\n\t\t\t\t\treturn elem;\n\t\t\t\t} catch ( _ ) {}\n\t\t\t}\n\t\t}\n\t}\n\n\txmlDoc = createXMLDoc();\n\txml1 = xmlDoc.createElement( \"head\" );\n\txml2 = xmlDoc.createElement( \"test\" );\n\n\tassert.ok( jQuery( xml1 ).append( xml2 ), \"Append an xml element to another without raising an exception.\" );\n\n} );\n\nQUnit.test( \"appendTo(String)\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar l, defaultText;\n\n\tdefaultText = \"Try them out:\";\n\tjQuery( \"<b>buga</b>\" ).appendTo( \"#first\" );\n\tassert.equal( jQuery( \"#first\" ).text(), defaultText + \"buga\", \"Check if text appending works\" );\n\tassert.equal( jQuery( \"<option value='appendTest'>Append Test</option>\" ).appendTo( \"#select3\" ).parent().find( \"option:last-child\" ).attr( \"value\" ), \"appendTest\", \"Appending html options to select element\" );\n\n\tl = jQuery( \"#first\" ).children().length + 2;\n\tjQuery( \"<strong>test</strong>\" );\n\tjQuery( \"<strong>test</strong>\" );\n\tjQuery( [ jQuery( \"<strong>test</strong>\" )[ 0 ], jQuery( \"<strong>test</strong>\" )[ 0 ] ] )\n\t\t.appendTo( \"#first\" );\n\tassert.equal( jQuery( \"#first\" ).children().length, l, \"Make sure the elements were inserted.\" );\n\tassert.equal( jQuery( \"#first\" ).children().last()[ 0 ].nodeName.toLowerCase(), \"strong\", \"Verify the last element.\" );\n} );\n\nQUnit.test( \"appendTo(Element|Array<Element>)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\";\n\tjQuery( document.getElementById( \"first\" ) ).appendTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of element\" );\n\n\texpected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:Yahoo\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ] ).appendTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of array of elements\" );\n\n} );\n\nQUnit.test( \"appendTo(jQuery)\", function( assert ) {\n\n\tassert.expect( 10 );\n\n\tvar expected, num, div;\n\tassert.ok( jQuery( document.createElement( \"script\" ) ).appendTo( \"body\" ).length, \"Make sure a disconnected script can be appended.\" );\n\n\texpected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogYahooTry them out:\";\n\tjQuery( \"#yahoo, #first\" ).appendTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for appending of jQuery object\" );\n\n\tjQuery( \"#select1\" ).appendTo( \"#foo\" );\n\tassert.t( \"Append select\", \"#foo select\", [ \"select1\" ] );\n\n\tdiv = jQuery( \"<div></div>\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Running a cloned click.\" );\n\t} );\n\tdiv.appendTo( \"#qunit-fixture, #moretests\" );\n\n\tjQuery( \"#qunit-fixture div\" ).last().trigger( \"click\" );\n\tjQuery( \"#moretests div\" ).last().trigger( \"click\" );\n\n\tdiv = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture, #moretests\" );\n\n\tassert.equal( div.length, 2, \"appendTo returns the inserted elements\" );\n\n\tdiv.addClass( \"test\" );\n\n\tassert.ok( jQuery( \"#qunit-fixture div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );\n\tassert.ok( jQuery( \"#moretests div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );\n\n\tdiv = jQuery( \"<div></div>\" );\n\tjQuery( \"<span>a</span><b>b</b>\" ).filter( \"span\" ).appendTo( div );\n\n\tassert.equal( div.children().length, 1, \"Make sure the right number of children were inserted.\" );\n\n\tdiv = jQuery( \"#moretests div\" );\n\n\tnum = jQuery( \"#qunit-fixture div\" ).length;\n\tdiv.remove().appendTo( \"#qunit-fixture\" );\n\n\tassert.equal( jQuery( \"#qunit-fixture div\" ).length, num, \"Make sure all the removed divs were inserted.\" );\n} );\n\nQUnit.test( \"prepend(String)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar result, expected;\n\texpected = \"Try them out:\";\n\tresult = jQuery( \"#first\" ).prepend( \"<b>buga</b>\" );\n\tassert.equal( result.text(), \"buga\" + expected, \"Check if text prepending works\" );\n\tassert.equal( jQuery( \"#select3\" ).prepend( \"<option value='prependTest'>Prepend Test</option>\"  ).find( \"option:first-child\" ).attr( \"value\" ), \"prependTest\", \"Prepending html options to select element\" );\n} );\n\nQUnit.test( \"prepend(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( document.getElementById( \"first\" ) );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of element\" );\n} );\n\nQUnit.test( \"prepend(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ] );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of elements\" );\n} );\n\nQUnit.test( \"prepend(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( jQuery( \"#yahoo, #first\" ) );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of jQuery object\" );\n} );\n\nQUnit.test( \"prepend(Array<jQuery>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"Try them out:GoogleYahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#sap\" ).prepend( [ jQuery( \"#first\" ), jQuery( \"#yahoo, #google\" ) ] );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of jQuery objects\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- String\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar defaultText, old, result;\n\n\tdefaultText = \"Try them out:\";\n\told = jQuery( \"#first\" ).html();\n\tresult = jQuery( \"#first\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>buga</b>\";\n\t} );\n\n\tassert.equal( result.text(), \"buga\" + defaultText, \"Check if text prepending works\" );\n\n\told = jQuery( \"#select3\" ).html();\n\n\tassert.equal( jQuery( \"#select3\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn \"<option value='prependTest'>Prepend Test</option>\";\n\t} ).find( \"option:first-child\" ).attr( \"value\" ), \"prependTest\", \"Prepending html options to select element\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- Element\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old, expected;\n\texpected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn document.getElementById( \"first\" );\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of element\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- Array<Element>\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old, expected;\n\texpected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ];\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of elements\" );\n} );\n\nQUnit.test( \"prepend(Function) with incoming value -- jQuery\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar old, expected;\n\texpected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\told = jQuery( \"#sap\" ).html();\n\n\tjQuery( \"#sap\" ).prepend( function( i, val ) {\n\t\tassert.equal( val, old, \"Make sure the incoming value is correct.\" );\n\t\treturn jQuery( \"#yahoo, #first\" );\n\t} );\n\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of jQuery object\" );\n} );\n\nQUnit.test( \"prependTo(String)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar defaultText;\n\n\tdefaultText = \"Try them out:\";\n\tjQuery( \"<b>buga</b>\" ).prependTo( \"#first\" );\n\tassert.equal( jQuery( \"#first\" ).text(), \"buga\" + defaultText, \"Check if text prepending works\" );\n\tassert.equal( jQuery( \"<option value='prependTest'>Prepend Test</option>\" ).prependTo( \"#select3\" ).parent().find( \"option:first-child\" ).attr( \"value\" ), \"prependTest\", \"Prepending html options to select element\" );\n\n} );\n\nQUnit.test( \"prependTo(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( document.getElementById( \"first\" ) ).prependTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of element\" );\n} );\n\nQUnit.test( \"prependTo(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"yahoo\" ) ] ).prependTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of array of elements\" );\n} );\n\nQUnit.test( \"prependTo(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n\tjQuery( \"#yahoo, #first\" ).prependTo( \"#sap\" );\n\tassert.equal( jQuery( \"#sap\" ).text(), expected, \"Check for prepending of jQuery object\" );\n} );\n\nQUnit.test( \"prependTo(Array<jQuery>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tjQuery( \"<select id='prependSelect1'></select>\" ).prependTo( \"#form\" );\n\tjQuery( \"<select id='prependSelect2'><option>Test</option></select>\" ).prependTo( \"#form\" );\n\n\tassert.t( \"Prepend Select\", \"#prependSelect2, #prependSelect1\", [ \"prependSelect2\", \"prependSelect1\" ] );\n} );\n\nQUnit.test( \"before(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: bugaYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( \"<b>buga</b>\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String before\" );\n} );\n\nQUnit.test( \"before(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( document.getElementById( \"first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element before\" );\n} );\n\nQUnit.test( \"before(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements before\" );\n} );\n\nQUnit.test( \"before(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( jQuery( \"#mark, #first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery before\" );\n} );\n\nQUnit.test( \"before(Array<jQuery>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:GooglediveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationBareObj( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns String\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: bugaYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( \"<b>buga</b>\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns Element\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( document.getElementById( \"first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns Array<Element>\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns jQuery\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( jQuery( \"#mark, #first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery before\" );\n} );\n\nQUnit.test( \"before(Function) -- Returns Array<jQuery>\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected;\n\texpected = \"This is a normal link: Try them out:GooglediveintomarkYahoo\";\n\tjQuery( \"#yahoo\" ).before( manipulationFunctionReturningObj( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects before\" );\n} );\n\nQUnit.test( \"before(no-op)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar set;\n\tset = jQuery( \"<div></div>\" ).before( \"<span>test</span>\" );\n\tassert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert before a disconnected node should be a no-op\" );\n\tassert.equal( set.length, 1, \"Insert the element before the disconnected node. should be a no-op\" );\n} );\n\nQUnit.test( \"before and after w/ empty object (#10812)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar res;\n\n\tres = jQuery( \"#notInTheDocument\" ).before( \"(\" ).after( \")\" );\n\tassert.equal( res.length, 0, \"didn't choke on empty object\" );\n} );\n\nQUnit.test( \".before() and .after() disconnected node\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery( \"<input type='checkbox'/>\" ).before( \"<div></div>\" ).length, 1, \"before() on disconnected node is no-op\" );\n\tassert.equal( jQuery( \"<input type='checkbox'/>\" ).after( \"<div></div>\" ).length, 1, \"after() on disconnected node is no-op\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedBefore = \"This is a normal link: bugaYahoo\";\n\n\tjQuery( \"#yahoo\" ).add( \"<span></span>\" ).before( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node last\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node first\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedBefore = \"This is a normal link: bugaYahoo\";\n\n\tjQuery( \"<span></span>\" ).add( \"#yahoo\" ).before( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node first\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedAfter = \"This is a normal link: Yahoobuga\";\n\n\tjQuery( \"#yahoo\" ).add( \"<span></span>\" ).after( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node last\" );\n} );\n\nQUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expectedAfter = \"This is a normal link: Yahoobuga\";\n\n\tjQuery( \"<span></span>\" ).add( \"#yahoo\" ).after( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node first\" );\n} );\n\nQUnit.test( \"insertBefore(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: bugaYahoo\";\n\tjQuery( \"<b>buga</b>\" ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String before\" );\n} );\n\nQUnit.test( \"insertBefore(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Try them out:Yahoo\";\n\tjQuery( document.getElementById( \"first\" ) ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element before\" );\n} );\n\nQUnit.test( \"insertBefore(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements before\" );\n} );\n\nQUnit.test( \"insertBefore(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n\tjQuery( \"#mark, #first\" ).insertBefore( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery before\" );\n} );\n\nQUnit.test( \".after(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Yahoobuga\";\n\tjQuery( \"#yahoo\" ).after( \"<b>buga</b>\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String after\" );\n} );\n\nQUnit.test( \".after(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:\";\n\tjQuery( \"#yahoo\" ).after( document.getElementById( \"first\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element after\" );\n} );\n\nQUnit.test( \".after(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:diveintomark\";\n\tjQuery( \"#yahoo\" ).after( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements after\" );\n} );\n\nQUnit.test( \".after(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:Googlediveintomark\";\n\tjQuery( \"#yahoo\" ).after( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects after\" );\n} );\n\nQUnit.test( \".after(Function) returns String\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Yahoobuga\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( \"<b>buga</b>\" ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String after\" );\n} );\n\nQUnit.test( \".after(Function) returns Element\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( document.getElementById( \"first\" ) ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element after\" );\n} );\n\nQUnit.test( \".after(Function) returns Array<Element>\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:diveintomark\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements after\" );\n} );\n\nQUnit.test( \".after(Function) returns jQuery\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:Googlediveintomark\",\n\t\tval = manipulationFunctionReturningObj;\n\tjQuery( \"#yahoo\" ).after( val( [ jQuery( \"#first\" ), jQuery( \"#mark, #google\" ) ] ) );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of jQuery objects after\" );\n} );\n\nQUnit.test( \".after(disconnected node)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar set = jQuery( \"<div></div>\" ).before( \"<span>test</span>\" );\n\tassert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert after a disconnected node should be a no-op\" );\n\tassert.equal( set.length, 1, \"Insert the element after the disconnected node should be a no-op\" );\n} );\n\nQUnit.test( \"insertAfter(String)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: Yahoobuga\";\n\tjQuery( \"<b>buga</b>\" ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert String after\" );\n} );\n\nQUnit.test( \"insertAfter(Element)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:\";\n\tjQuery( document.getElementById( \"first\" ) ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert element after\" );\n} );\n\nQUnit.test( \"insertAfter(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahooTry them out:diveintomark\";\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert array of elements after\" );\n} );\n\nQUnit.test( \"insertAfter(jQuery)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar expected = \"This is a normal link: YahoodiveintomarkTry them out:\";\n\tjQuery( \"#mark, #first\" ).insertAfter( \"#yahoo\" );\n\tassert.equal( jQuery( \"#en\" ).text(), expected, \"Insert jQuery after\" );\n} );\n\nfunction testReplaceWith( val, assert ) {\n\n\tvar tmp, y, child, child2, set, nonExistent, $div,\n\t\texpected = 29;\n\n\tassert.expect( expected );\n\n\tjQuery( \"#yahoo\" ).replaceWith( val( \"<b id='replace'>buga</b>\" ) );\n\tassert.ok( jQuery( \"#replace\" )[ 0 ], \"Replace element with element from string\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after string\" );\n\n\tjQuery( \"#anchor2\" ).replaceWith( val( document.getElementById( \"first\" ) ) );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with element\" );\n\tassert.ok( !jQuery( \"#anchor2\" )[ 0 ], \"Verify that original element is gone, after element\" );\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<div id='bar'><div id='baz'></div></div>\" );\n\tjQuery( \"#baz\" ).replaceWith( val( \"Baz\" ) );\n\tassert.equal( jQuery( \"#bar\" ).text(), \"Baz\", \"Replace element with text\" );\n\tassert.ok( !jQuery( \"#baz\" )[ 0 ], \"Verify that original element is gone, after element\" );\n\n\tjQuery( \"#bar\" ).replaceWith( \"<div id='yahoo'></div>\", \"...\", \"<div id='baz'></div>\" );\n\tassert.deepEqual( jQuery( \"#yahoo, #baz\" ).get(), q( \"yahoo\", \"baz\" ),  \"Replace element with multiple arguments (#13722)\" );\n\tassert.strictEqual( jQuery( \"#yahoo\" )[ 0 ].nextSibling, jQuery( \"#baz\" )[ 0 ].previousSibling, \"Argument order preserved\" );\n\tassert.deepEqual( jQuery( \"#bar\" ).get(), [], \"Verify that original element is gone, after multiple arguments\" );\n\n\tjQuery( \"#google\" ).replaceWith( val( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ) );\n\tassert.deepEqual( jQuery( \"#mark, #first\" ).get(), q( \"first\", \"mark\" ),  \"Replace element with array of elements\" );\n\tassert.ok( !jQuery( \"#google\" )[ 0 ], \"Verify that original element is gone, after array of elements\" );\n\n\tjQuery( \"#groups\" ).replaceWith( val( jQuery( \"#mark, #first\" ) ) );\n\tassert.deepEqual( jQuery( \"#mark, #first\" ).get(), q( \"first\", \"mark\" ),  \"Replace element with jQuery collection\" );\n\tassert.ok( !jQuery( \"#groups\" )[ 0 ], \"Verify that original element is gone, after jQuery collection\" );\n\n\tjQuery( \"#mark, #first\" ).replaceWith( val( \"<span class='replacement'></span><span class='replacement'></span>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture .replacement\" ).length, 4, \"Replace multiple elements (#12449)\" );\n\tassert.deepEqual( jQuery( \"#mark, #first\" ).get(), [], \"Verify that original elements are gone, after replace multiple\" );\n\n\ttmp = jQuery( \"<b>content</b>\" )[ 0 ];\n\tjQuery( \"#anchor1\" ).contents().replaceWith( val( tmp ) );\n\tassert.deepEqual( jQuery( \"#anchor1\" ).contents().get(), [ tmp ], \"Replace text node with element\" );\n\n\ttmp = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Newly bound click run.\" );\n\t} );\n\ty = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {\n\t\tassert.ok( false, \"Previously bound click run.\" );\n\t} );\n\tchild = y.append( \"<b>test</b>\" ).find( \"b\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Child bound click run.\" );\n\t\treturn false;\n\t} );\n\n\ty.replaceWith( val( tmp ) );\n\n\ttmp.trigger( \"click\" );\n\ty.trigger( \"click\" ); // Shouldn't be run\n\tchild.trigger( \"click\" ); // Shouldn't be run\n\n\ty = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {\n\t\tassert.ok( false, \"Previously bound click run.\" );\n\t} );\n\tchild2 = y.append( \"<u>test</u>\" ).find( \"u\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Child 2 bound click run.\" );\n\t\treturn false;\n\t} );\n\n\ty.replaceWith( val( child2 ) );\n\n\tchild2.trigger( \"click\" );\n\n\tset = jQuery( \"<div></div>\" ).replaceWith( val( \"<span>test</span>\" ) );\n\tassert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"No effect on a disconnected node.\" );\n\tassert.equal( set.length, 1, \"No effect on a disconnected node.\" );\n\tassert.equal( set[ 0 ].childNodes.length, 0, \"No effect on a disconnected node.\" );\n\n\tchild = jQuery( \"#qunit-fixture\" ).children().first();\n\t$div = jQuery( \"<div class='pathological'></div>\" ).insertBefore( child );\n\t$div.replaceWith( $div );\n\tassert.deepEqual( jQuery( \".pathological\", \"#qunit-fixture\" ).get(), $div.get(),\n\t\t\"Self-replacement\" );\n\t$div.replaceWith( child );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).children().first().get(), child.get(),\n\t\t\"Replacement with following sibling (#13810)\" );\n\tassert.deepEqual( jQuery( \".pathological\", \"#qunit-fixture\" ).get(), [],\n\t\t\"Replacement with following sibling (context removed)\" );\n\n\tnonExistent = jQuery( \"#does-not-exist\" ).replaceWith( val( \"<b>should not throw an error</b>\" ) );\n\tassert.equal( nonExistent.length, 0, \"Length of non existent element.\" );\n\n\t$div = jQuery( \"<div class='replacewith'></div>\" ).appendTo( \"#qunit-fixture\" );\n\t$div.replaceWith( val( \"<div class='replacewith'></div><script>\" +\n\t\t\"QUnit.assert.equal( jQuery('.replacewith').length, 1, 'Check number of elements in page.' );\" +\n\t\t\"</script>\" ) );\n\n\tjQuery( \"#qunit-fixture\" ).append( \"<div id='replaceWith'></div>\" );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).find( \"div[id=replaceWith]\" ).length, 1, \"Make sure only one div exists.\" );\n\tjQuery( \"#replaceWith\" ).replaceWith( val( \"<div id='replaceWith'></div>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).find( \"div[id=replaceWith]\" ).length, 1, \"Make sure only one div exists after replacement.\" );\n\tjQuery( \"#replaceWith\" ).replaceWith( val( \"<div id='replaceWith'></div>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture\" ).find( \"div[id=replaceWith]\" ).length, 1, \"Make sure only one div exists after subsequent replacement.\" );\n\n\treturn expected;\n}\n\nQUnit.test( \"replaceWith(String|Element|Array<Element>|jQuery)\", function( assert ) {\n\ttestReplaceWith( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"replaceWith(Function)\", function( assert ) {\n\tassert.expect( testReplaceWith( manipulationFunctionReturningObj, assert ) + 1 );\n\n\tvar y = jQuery( \"#foo\" )[ 0 ];\n\n\tjQuery( y ).replaceWith( function() {\n\t\tassert.equal( this, y, \"Make sure the context is coming in correctly.\" );\n\t} );\n} );\n\nQUnit.test( \"replaceWith(string) for more than one element\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery( \"#foo p\" ).length, 3, \"ensuring that test data has not changed\" );\n\n\tjQuery( \"#foo p\" ).replaceWith( \"<span>bar</span>\" );\n\tassert.equal( jQuery( \"#foo span\" ).length, 3, \"verify that all the three original element have been replaced\" );\n\tassert.equal( jQuery( \"#foo p\" ).length, 0, \"verify that all the three original element have been replaced\" );\n} );\n\nQUnit.test( \"Empty replaceWith (trac-13401; trac-13596; gh-2204)\", function( assert ) {\n\n\tassert.expect( 25 );\n\n\tvar $el = jQuery( \"<div></div><div></div>\" ).html( \"<p>0</p>\" ),\n\t\texpectedHTML = $el.html(),\n\t\ttests = {\n\t\t\t\"empty string\": \"\",\n\t\t\t\"empty array\": [],\n\t\t\t\"array of empty string\": [ \"\" ],\n\t\t\t\"empty collection\": jQuery( \"#nonexistent\" ),\n\n\t\t\t// in case of jQuery(...).replaceWith();\n\t\t\t\"undefined\": undefined\n\t\t};\n\n\tjQuery.each( tests, function( label, input ) {\n\t\t$el.html( \"<a></a>\" ).children().replaceWith( input );\n\t\tassert.strictEqual( $el.html(), \"\", \"replaceWith(\" + label + \")\" );\n\t\t$el.html( \"<b></b>\" ).children().replaceWith( function() { return input; } );\n\t\tassert.strictEqual( $el.html(), \"\", \"replaceWith(function returning \" + label + \")\" );\n\t\t$el.html( \"<i></i>\" ).children().replaceWith( function( i ) { return input; } );\n\t\tassert.strictEqual( $el.html(), \"\", \"replaceWith(other function returning \" + label + \")\" );\n\t\t$el.html( \"<p></p>\" ).children().replaceWith( function( i ) {\n\t\t\treturn i ?\n\t\t\t\tinput :\n\t\t\t\tjQuery( this ).html( i + \"\" );\n\t\t} );\n\t\tassert.strictEqual( $el.eq( 0 ).html(), expectedHTML,\n\t\t\t\"replaceWith(function conditionally returning context)\" );\n\t\tassert.strictEqual( $el.eq( 1 ).html(), \"\",\n\t\t\t\"replaceWith(function conditionally returning \" + label + \")\" );\n\t} );\n} );\n\nQUnit.test( \"replaceAll(String)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tjQuery( \"<b id='replace'>buga</b>\" ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#replace\" )[ 0 ], \"Replace element with string\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after string\" );\n} );\n\nQUnit.test( \"replaceAll(Element)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tjQuery( document.getElementById( \"first\" ) ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with element\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after element\" );\n} );\n\nQUnit.test( \"replaceAll(Array<Element>)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tjQuery( [ document.getElementById( \"first\" ), document.getElementById( \"mark\" ) ] ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with array of elements\" );\n\tassert.ok( jQuery( \"#mark\" )[ 0 ], \"Replace element with array of elements\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after array of elements\" );\n} );\n\nQUnit.test( \"replaceAll(jQuery)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tjQuery( \"#mark, #first\" ).replaceAll( \"#yahoo\" );\n\tassert.ok( jQuery( \"#first\" )[ 0 ], \"Replace element with set of elements\" );\n\tassert.ok( jQuery( \"#mark\" )[ 0 ], \"Replace element with set of elements\" );\n\tassert.ok( !jQuery( \"#yahoo\" )[ 0 ], \"Verify that original element is gone, after set of elements\" );\n} );\n\nQUnit.test( \"jQuery.clone() (#8017)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tassert.ok( jQuery.clone && typeof jQuery.clone === \"function\", \"jQuery.clone() utility exists and is a function.\" );\n\n\tvar main = jQuery( \"#qunit-fixture\" )[ 0 ],\n\t\tclone = jQuery.clone( main );\n\n\tassert.equal( main.childNodes.length, clone.childNodes.length, \"Simple child length to ensure a large dom tree copies correctly\" );\n} );\n\nQUnit.test( \"append to multiple elements (#8070)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar selects = jQuery( \"<select class='test8070'></select><select class='test8070'></select>\" ).appendTo( \"#qunit-fixture\" );\n\tselects.append( \"<OPTION>1</OPTION><OPTION>2</OPTION>\" );\n\n\tassert.equal( selects[ 0 ].childNodes.length, 2, \"First select got two nodes\" );\n\tassert.equal( selects[ 1 ].childNodes.length, 2, \"Second select got two nodes\" );\n} );\n\nQUnit.test( \"table manipulation\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar table = jQuery( \"<table style='font-size:16px'></table>\" ).appendTo( \"#qunit-fixture\" ).empty(),\n\t\theight = table[ 0 ].offsetHeight;\n\n\ttable.append( \"<tr><td>DATA</td></tr>\" );\n\tassert.ok( table[ 0 ].offsetHeight - height >= 15, \"appended rows are visible\" );\n\n\ttable.empty();\n\theight = table[ 0 ].offsetHeight;\n\ttable.prepend( \"<tr><td>DATA</td></tr>\" );\n\tassert.ok( table[ 0 ].offsetHeight - height >= 15, \"prepended rows are visible\" );\n} );\n\nQUnit.test( \"clone()\", function( assert ) {\n\n\tassert.expect( 45 );\n\n\tvar div, clone, form, body;\n\n\tassert.equal( jQuery( \"#en\" ).text(), \"This is a normal link: Yahoo\", \"Assert text for #en\" );\n\tassert.equal( jQuery( \"#first\" ).append( jQuery( \"#yahoo\" ).clone() ).text(), \"Try them out:Yahoo\", \"Check for clone\" );\n\tassert.equal( jQuery( \"#en\" ).text(), \"This is a normal link: Yahoo\", \"Reassert text for #en\" );\n\n\tjQuery.each( \"table thead tbody tfoot tr td div button ul ol li select option textarea iframe\".split( \" \" ), function( i, nodeName ) {\n\t\tassert.equal( jQuery( \"<\" + nodeName + \"/>\" ).clone()[ 0 ].nodeName.toLowerCase(), nodeName, \"Clone a \" + nodeName );\n\t} );\n\tassert.equal( jQuery( \"<input type='checkbox' />\" ).clone()[ 0 ].nodeName.toLowerCase(), \"input\", \"Clone a <input type='checkbox' />\" );\n\n\t// Check cloning non-elements\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().clone().length, 3, \"Check node,textnode,comment clone works (some browsers delete comments on clone)\" );\n\n\t// Verify that clones of clones can keep event listeners\n\tdiv = jQuery( \"<div><ul><li>test</li></ul></div>\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Bound event still exists.\" );\n\t} );\n\tclone = div.clone( true ); div.remove();\n\tdiv = clone.clone( true ); clone.remove();\n\n\tassert.equal( div.length, 1, \"One element cloned\" );\n\tassert.equal( div[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\tdiv.trigger( \"click\" );\n\n\t// Manually clean up detached elements\n\tdiv.remove();\n\n\t// Verify that cloned children can keep event listeners\n\tdiv = jQuery( \"<div></div>\" ).append( [ document.createElement( \"table\" ), document.createElement( \"table\" ) ] );\n\tdiv.find( \"table\" ).on( \"click\", function() {\n\t\tassert.ok( true, \"Bound event still exists.\" );\n\t} );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\tclone.find( \"table\" ).trigger( \"click\" );\n\n\t// Manually clean up detached elements\n\tdiv.remove();\n\tclone.remove();\n\n\t// Make sure that doing .clone() doesn't clone event listeners\n\tdiv = jQuery( \"<div><ul><li>test</li></ul></div>\" ).on( \"click\", function() {\n\t\tassert.ok( false, \"Bound event still exists after .clone().\" );\n\t} );\n\tclone = div.clone();\n\n\tclone.trigger( \"click\" );\n\n\t// Manually clean up detached elements\n\tclone.remove();\n\tdiv.remove();\n\n\t// Test both html() and clone() for <embed> and <object> types\n\tdiv = jQuery( \"<div></div>\" ).html( \"<embed height='355' width='425' src='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\" );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone.html(), div.html(), \"Element contents cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\n\t// this is technically an invalid object, but because of the special\n\t// classid instantiation it is the only kind that IE has trouble with,\n\t// so let's test with it too.\n\tdiv = jQuery( \"<div></div>\" ).html( \"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\tdiv = div.find( \"object\" );\n\tclone = clone.find( \"object\" );\n\n\t// oldIE adds extra attributes and <param> elements, so just test for existence of the defined set\n\tjQuery.each( [ \"height\", \"width\", \"classid\" ], function( i, attr ) {\n\t\tassert.equal( clone.attr( attr ), div.attr( attr ), \"<object> attribute cloned: \" + attr );\n\t} );\n\t( function() {\n\t\tvar params = {};\n\n\t\tclone.find( \"param\" ).each( function( index, param ) {\n\t\t\tparams[ param.attributes.name.nodeValue.toLowerCase() ] =\n\t\t\t\tparam.attributes.value.nodeValue.toLowerCase();\n\t\t} );\n\n\t\tdiv.find( \"param\" ).each( function( index, param ) {\n\t\t\tvar key = param.attributes.name.nodeValue.toLowerCase();\n\t\t\tassert.equal( params[ key ], param.attributes.value.nodeValue.toLowerCase(), \"<param> cloned: \" + key );\n\t\t} );\n\t} )();\n\n\t// and here's a valid one.\n\tdiv = jQuery( \"<div></div>\" ).html( \"<object height='355' width='425' type='application/x-shockwave-flash' data='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );\n\n\tclone = div.clone( true );\n\tassert.equal( clone.length, 1, \"One element cloned\" );\n\tassert.equal( clone.html(), div.html(), \"Element contents cloned\" );\n\tassert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\n\n\tdiv = jQuery( \"<div></div>\" ).data( { \"a\": true } );\n\tclone = div.clone( true );\n\tassert.equal( clone.data( \"a\" ), true, \"Data cloned.\" );\n\tclone.data( \"a\", false );\n\tassert.equal( clone.data( \"a\" ), false, \"Ensure cloned element data object was correctly modified\" );\n\tassert.equal( div.data( \"a\" ), true, \"Ensure cloned element data object is copied, not referenced\" );\n\n\t// manually clean up detached elements\n\tdiv.remove();\n\tclone.remove();\n\n\tform = document.createElement( \"form\" );\n\tform.action = \"/test/\";\n\n\tdiv = document.createElement( \"div\" );\n\tdiv.appendChild( document.createTextNode( \"test\" ) );\n\tform.appendChild( div );\n\n\tassert.equal( jQuery( form ).clone().children().length, 1, \"Make sure we just get the form back.\" );\n\n\tbody = jQuery( \"body\" ).clone();\n\tassert.equal( body.children()[ 0 ].id, \"qunit\", \"Make sure cloning body works\" );\n\tbody.remove();\n} );\n\nQUnit.test( \"clone(script type=non-javascript) (#11359)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tvar src = jQuery( \"<script type='text/filler'>Lorem ipsum dolor sit amet</script><q><script type='text/filler'>consectetur adipiscing elit</script></q>\" ),\n\t\tdest = src.clone();\n\n\tassert.equal( dest[ 0 ].text, \"Lorem ipsum dolor sit amet\", \"Cloning preserves script text\" );\n\tassert.equal( dest.last().html(), src.last().html(), \"Cloning preserves nested script text\" );\n\tassert.ok( /^\\s*<scr.pt\\s+type=['\"]?text\\/filler['\"]?\\s*>consectetur adipiscing elit<\\/scr.pt>\\s*$/i.test( dest.last().html() ), \"Cloning preserves nested script text\" );\n\tdest.remove();\n} );\n\nQUnit.test( \"clone(form element) (Bug #3879, #6655)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar clone, element;\n\n\telement = jQuery( \"<select><option>Foo</option><option value='selected' selected>Bar</option></select>\" );\n\n\tassert.equal( element.clone().find( \"option\" ).filter( function() { return this.selected; } ).val(), \"selected\", \"Selected option cloned correctly\" );\n\n\telement = jQuery( \"<input type='checkbox' value='foo'>\" ).attr( \"checked\", \"checked\" );\n\tclone = element.clone();\n\n\tassert.equal( clone.is( \":checked\" ), element.is( \":checked\" ), \"Checked input cloned correctly\" );\n\tassert.equal( clone[ 0 ].defaultValue, \"foo\", \"Checked input defaultValue cloned correctly\" );\n\n\telement = jQuery( \"<input type='text' value='foo'>\" );\n\tclone = element.clone();\n\tassert.equal( clone[ 0 ].defaultValue, \"foo\", \"Text input defaultValue cloned correctly\" );\n\n\telement = jQuery( \"<textarea>foo</textarea>\" );\n\tclone = element.clone();\n\tassert.equal( clone[ 0 ].defaultValue, \"foo\", \"Textarea defaultValue cloned correctly\" );\n} );\n\nQUnit.test( \"clone(multiple selected options) (Bug #8129)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar element = jQuery( \"<select><option>Foo</option><option selected>Bar</option><option selected>Baz</option></select>\" );\n\n\tfunction getSelectedOptions( collection ) {\n\t\treturn collection.find( \"option\" ).filter( function( option ) {\n\t\t\treturn option.selected;\n\t\t} );\n\t}\n\n\tassert.equal(\n\t\tgetSelectedOptions( element.clone() ).length,\n\t\tgetSelectedOptions( element ).length,\n\t\t\"Multiple selected options cloned correctly\"\n\t);\n} );\n\nQUnit.test( \"clone() on XML nodes\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar xml = createDashboardXML(),\n\t\troot = jQuery( xml.documentElement ).clone(),\n\t\torigTab = jQuery( \"tab\", xml ).eq( 0 ),\n\t\tcloneTab = jQuery( \"tab\", root ).eq( 0 );\n\n\torigTab.text( \"origval\" );\n\tcloneTab.text( \"cloneval\" );\n\tassert.equal( origTab.text(), \"origval\", \"Check original XML node was correctly set\" );\n\tassert.equal( cloneTab.text(), \"cloneval\", \"Check cloned XML node was correctly set\" );\n} );\n\nQUnit.test( \"clone() on local XML nodes with html5 nodename\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $xmlDoc = jQuery( jQuery.parseXML( \"<root><meter /></root>\" ) ),\n\t\t$meter = $xmlDoc.find( \"meter\" ).clone();\n\n\tassert.equal( $meter[ 0 ].nodeName, \"meter\", \"Check if nodeName was not changed due to cloning\" );\n\tassert.equal( $meter[ 0 ].nodeType, 1, \"Check if nodeType is not changed due to cloning\" );\n} );\n\nQUnit.test( \"html(undefined)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery( \"#foo\" ).html( \"<i>test</i>\" ).html( undefined ).html().toLowerCase(), \"<i>test</i>\", \".html(undefined) is chainable (#5571)\" );\n} );\n\nQUnit.test( \"html() on empty set\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tassert.strictEqual( jQuery().html(), undefined, \".html() returns undefined for empty sets (#11962)\" );\n} );\n\nfunction childNodeNames( node ) {\n\treturn jQuery.map( node.childNodes, function( child ) {\n\t\treturn child.nodeName.toUpperCase();\n\t} ).join( \" \" );\n}\n\nfunction testHtml( valueObj, assert ) {\n\tassert.expect( 40 );\n\n\tvar actual, expected, tmp,\n\t\tdiv = jQuery( \"<div></div>\" ),\n\t\tfixture = jQuery( \"#qunit-fixture\" );\n\n\tdiv.html( valueObj( \"<div id='parent_1'><div id='child_1'></div></div><div id='parent_2'></div>\" ) );\n\tassert.equal( div.children().length, 2, \"Found children\" );\n\tassert.equal( div.children().children().length, 1, \"Found grandchild\" );\n\n\tactual = []; expected = [];\n\ttmp = jQuery( \"<map></map>\" ).html( valueObj( \"<area alt='area'></area>\" ) ).each( function() {\n\t\texpected.push( \"AREA\" );\n\t\tactual.push( childNodeNames( this ) );\n\t} );\n\tassert.equal( expected.length, 1, \"Expecting one parent\" );\n\tassert.deepEqual( actual, expected, \"Found the inserted area element\" );\n\n\tassert.equal( div.html( valueObj( 5 ) ).html(), \"5\", \"Setting a number as html\" );\n\tassert.equal( div.html( valueObj( 0 ) ).html(), \"0\", \"Setting a zero as html\" );\n\tassert.equal( div.html( valueObj( Infinity ) ).html(), \"Infinity\", \"Setting Infinity as html\" );\n\tassert.equal( div.html( valueObj( NaN ) ).html(), \"\", \"Setting NaN as html\" );\n\tassert.equal( div.html( valueObj( 1e2 ) ).html(), \"100\", \"Setting exponential number notation as html\" );\n\n\tdiv.html( valueObj( \"&#160;&amp;\" ) );\n\tassert.equal(\n\t\tdiv[ 0 ].innerHTML.replace( /\\xA0/, \"&nbsp;\" ),\n\t\t\"&nbsp;&amp;\",\n\t\t\"Entities are passed through correctly\"\n\t);\n\n\ttmp = \"&lt;div&gt;hello1&lt;/div&gt;\";\n\tassert.equal( div.html( valueObj( tmp ) ).html().replace( />/g, \"&gt;\" ), tmp, \"Escaped html\" );\n\ttmp = \"x\" + tmp;\n\tassert.equal( div.html( valueObj( tmp ) ).html().replace( />/g, \"&gt;\" ), tmp, \"Escaped html, leading x\" );\n\ttmp = \" \" + tmp.slice( 1 );\n\tassert.equal( div.html( valueObj( tmp ) ).html().replace( />/g, \"&gt;\" ), tmp, \"Escaped html, leading space\" );\n\n\tactual = []; expected = []; tmp = {};\n\tjQuery( \"#nonnodes\" ).contents().html( valueObj( \"<b>bold</b>\" ) ).each( function() {\n\t\tvar html = jQuery( this ).html();\n\t\ttmp[ this.nodeType ] = true;\n\t\texpected.push( this.nodeType === 1 ? \"<b>bold</b>\" : undefined );\n\t\tactual.push( html ? html.toLowerCase() : html );\n\t} );\n\tassert.deepEqual( actual, expected, \"Set containing element, text node, comment\" );\n\tassert.ok( tmp[ 1 ], \"element\" );\n\tassert.ok( tmp[ 3 ], \"text node\" );\n\tassert.ok( tmp[ 8 ], \"comment\" );\n\n\tactual = []; expected = [];\n\tfixture.children( \"div\" ).html( valueObj( \"<b>test</b>\" ) ).each( function() {\n\t\texpected.push( \"B\" );\n\t\tactual.push( childNodeNames( this ) );\n\t} );\n\tassert.equal( expected.length, 7, \"Expecting many parents\" );\n\tassert.deepEqual( actual, expected, \"Correct childNodes after setting HTML\" );\n\n\tactual = []; expected = [];\n\tfixture.html( valueObj( \"<style>.foobar{color:green;}</style>\" ) ).each( function() {\n\t\texpected.push( \"STYLE\" );\n\t\tactual.push( childNodeNames( this ) );\n\t} );\n\tassert.equal( expected.length, 1, \"Expecting one parent\" );\n\tassert.deepEqual( actual, expected, \"Found the inserted style element\" );\n\n\tfixture.html( valueObj( \"<select></select>\" ) );\n\tjQuery( \"#qunit-fixture select\" ).html( valueObj( \"<option>O1</option><option selected='selected'>O2</option><option>O3</option>\" ) );\n\tassert.equal( jQuery( \"#qunit-fixture select\" ).val(), \"O2\", \"Selected option correct\" );\n\n\ttmp = fixture.html(\n\t\tvalueObj( [\n\t\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: non-script' );</script>\",\n\t\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: text/javascript' );</script>\",\n\t\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: text/ecmascript' );</script>\",\n\t\t\t\"<script>QUnit.assert.ok( true, 'evaluated: no type' );</script>\",\n\t\t\t\"<div>\",\n\t\t\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: inner non-script' );</script>\",\n\t\t\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: inner text/javascript' );</script>\",\n\t\t\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: inner text/ecmascript' );</script>\",\n\t\t\t\t\"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\",\n\t\t\t\"</div>\"\n\t\t].join( \"\" ) )\n\t).find( \"script\" );\n\tassert.equal( tmp.length, 8, \"All script tags remain.\" );\n\tassert.equal( tmp[ 0 ].type, \"something/else\", \"Non-evaluated type.\" );\n\tassert.equal( tmp[ 1 ].type, \"text/javascript\", \"Evaluated type.\" );\n\n\tfixture.html( valueObj( \"<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>\" ) );\n\tfixture.html( valueObj( \"<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>\" ) );\n\tfixture.html( valueObj( \"<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>\" ) );\n\tfixture.html( valueObj( \"foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (#975)' );</script></form>\" ) );\n\n\tjQuery.scriptorder = 0;\n\tfixture.html( valueObj( [\n\t\t\"<script>\",\n\t\t\t\"QUnit.assert.equal( jQuery('#scriptorder').length, 1,'Execute after html' );\",\n\t\t\t\"QUnit.assert.equal( jQuery.scriptorder++, 0, 'Script is executed in order' );\",\n\t\t\"</script>\",\n\t\t\"<span id='scriptorder'><script>QUnit.assert.equal( jQuery.scriptorder++, 1, 'Script (nested) is executed in order');</script></span>\",\n\t\t\"<script>QUnit.assert.equal( jQuery.scriptorder++, 2, 'Script (unnested) is executed in order' );</script>\"\n\t].join( \"\" ) ) );\n\n\tfixture.html( valueObj( fixture.text() ) );\n\tassert.ok( /^[^<]*[^<\\s][^<]*$/.test( fixture.html() ), \"Replace html with text\" );\n}\n\nQUnit.test( \"html(String|Number)\", function( assert ) {\n\ttestHtml( manipulationBareObj, assert  );\n} );\n\nQUnit.test( \"html(Function)\", function( assert ) {\n\ttestHtml( manipulationFunctionReturningObj, assert  );\n} );\n\nQUnit[\n\t// Support: Edge 16-18+\n\t// Edge sometimes doesn't execute module scripts so skip the test there.\n\t( QUnit.moduleTypeSupported && !/edge\\//i.test( navigator.userAgent ) ) ?\n\t\t\"test\" :\n\t\t\"skip\"\n]( \"html(script type module)\", function( assert ) {\n\tassert.expect( 4 );\n\tvar done = assert.async(),\n\t\t$fixture = jQuery( \"#qunit-fixture\" );\n\n\t$fixture.html(\n\t\t[\n\t\t\t\"<script type='module'>QUnit.assert.ok( true, 'evaluated: module' );</script>\",\n\t\t\t\"<script type='module' src='\" + url( \"module.js\" ) + \"'></script>\",\n\t\t\t\"<div>\",\n\t\t\t\t\"<script type='module'>QUnit.assert.ok( true, 'evaluated: inner module' );</script>\",\n\t\t\t\t\"<script type='module' src='\" + url( \"inner_module.js\" ) + \"'></script>\",\n\t\t\t\"</div>\"\n\t\t].join( \"\" )\n\t);\n\n\t// Allow asynchronous script execution to generate assertions\n\tsetTimeout( function() {\n\t\tdone();\n\t}, 1000 );\n} );\n\nQUnit[\n\t// Support: IE 9-11 only, Android 4.0-4.4 only, iOS 7-10 only\n\t// `nomodule` scripts should be executed by legacy browsers only.\n\t// iOS 10 supports `<script type=\"module\">` but doesn't support the nomodule attribute\n\t// so let's skip it here; sites supporting it must handle `nomodule` in a custom way anyway.\n\t!/iphone os 10_/i.test( navigator.userAgent ) ?\n\t\t\"test\" :\n\t\t\"skip\"\n]( \"html(script nomodule)\", function( assert ) {\n\tassert.expect( QUnit.moduleTypeSupported ? 0 : 4 );\n\tvar done = assert.async(),\n\t\t$fixture = jQuery( \"#qunit-fixture\" );\n\n\t$fixture.html(\n\t\t[\n\t\t\t\"<script nomodule>QUnit.assert.ok( !QUnit.moduleTypeSupported, 'evaluated: nomodule script' );</script>\",\n\t\t\t\"<script nomodule src='\" + url( \"nomodule.js\" ) + \"'></script>\",\n\t\t\t\"<div>\",\n\t\t\t\t\"<script nomodule>QUnit.assert.ok( !QUnit.moduleTypeSupported, 'evaluated: inner nomodule script' );</script>\",\n\t\t\t\t\"<script nomodule src='\" + url( \"inner_nomodule.js\" ) + \"'></script>\",\n\t\t\t\"</div>\"\n\t\t].join( \"\" )\n\t);\n\n\t// Allow asynchronous script execution to generate assertions\n\tsetTimeout( function() {\n\t\tdone();\n\t}, 1000 );\n} );\n\nQUnit.test( \"html(Function) with incoming value -- direct selection\", function( assert ) {\n\n\tassert.expect( 4 );\n\n\tvar els, actualhtml, pass;\n\n\tels = jQuery( \"#foo > p\" );\n\tactualhtml = els.map( function() {\n\t\treturn jQuery( this ).html();\n\t} );\n\n\tels.html( function( i, val ) {\n\t\tassert.equal( val, actualhtml[ i ], \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>test</b>\";\n\t} );\n\n\tpass = true;\n\tels.each( function() {\n\t\tif ( this.childNodes.length !== 1 ) {\n\t\t\tpass = false;\n\t\t}\n\t} );\n\tassert.ok( pass, \"Set HTML\" );\n} );\n\nQUnit.test( \"html(Function) with incoming value -- jQuery.contents()\", function( assert ) {\n\n\tassert.expect( 14 );\n\n\tvar actualhtml, j, $div, $div2, insert;\n\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tactualhtml = j.map( function() {\n\t\treturn jQuery( this ).html();\n\t} );\n\n\tj.html( function( i, val ) {\n\t\tassert.equal( val, actualhtml[ i ], \"Make sure the incoming value is correct.\" );\n\t\treturn \"<b>bold</b>\";\n\t} );\n\n\t// Handle the case where no comment is in the document\n\tif ( j.length === 2 ) {\n\t\tassert.equal( null, null, \"Make sure the incoming value is correct.\" );\n\t}\n\n\tassert.equal( j.html().replace( / xmlns=\"[^\"]+\"/g, \"\" ).toLowerCase(), \"<b>bold</b>\", \"Check node,textnode,comment with html()\" );\n\n\t$div = jQuery( \"<div></div>\" );\n\n\tassert.equal( $div.html( function( i, val ) {\n\t\tassert.equal( val, \"\", \"Make sure the incoming value is correct.\" );\n\t\treturn 5;\n\t} ).html(), \"5\", \"Setting a number as html\" );\n\n\tassert.equal( $div.html( function( i, val ) {\n\t\tassert.equal( val, \"5\", \"Make sure the incoming value is correct.\" );\n\t\treturn 0;\n\t} ).html(), \"0\", \"Setting a zero as html\" );\n\n\t$div2 = jQuery( \"<div></div>\" );\n\tinsert = \"&lt;div&gt;hello1&lt;/div&gt;\";\n\tassert.equal( $div2.html( function( i, val ) {\n\t\tassert.equal( val, \"\", \"Make sure the incoming value is correct.\" );\n\t\treturn insert;\n\t} ).html().replace( />/g, \"&gt;\" ), insert, \"Verify escaped insertion.\" );\n\n\tassert.equal( $div2.html( function( i, val ) {\n\t\tassert.equal( val.replace( />/g, \"&gt;\" ), insert, \"Make sure the incoming value is correct.\" );\n\t\treturn \"x\" + insert;\n\t} ).html().replace( />/g, \"&gt;\" ), \"x\" + insert, \"Verify escaped insertion.\" );\n\n\tassert.equal( $div2.html( function( i, val ) {\n\t\tassert.equal( val.replace( />/g, \"&gt;\" ), \"x\" + insert, \"Make sure the incoming value is correct.\" );\n\t\treturn \" \" + insert;\n\t} ).html().replace( />/g, \"&gt;\" ), \" \" + insert, \"Verify escaped insertion.\" );\n} );\n\nQUnit.test( \"clone()/html() don't expose jQuery/Sizzle expandos (#12858)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $content = jQuery( \"<div><b><i>text</i></b></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\texpected = /^<b><i>text<\\/i><\\/b>$/i;\n\n\t// Attach jQuery and Sizzle data (the latter with a non-qSA nth-child)\n\ttry {\n\t\t$content.find( \":nth-child(1):lt(4)\" ).data( \"test\", true );\n\n\t// But don't break on a non-Sizzle build\n\t} catch ( e ) {\n\t\t$content.find( \"*\" ).data( \"test\", true );\n\t}\n\n\tassert.ok( expected.test( $content.clone( false )[ 0 ].innerHTML ), \"clone()\" );\n\tassert.ok( expected.test( $content.html() ), \"html()\" );\n} );\n\nQUnit.test( \"remove() no filters\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar first = jQuery( \"#ap\" ).children().first();\n\n\tfirst.data( \"foo\", \"bar\" );\n\n\tjQuery( \"#ap\" ).children().remove();\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check remove\" );\n} );\n\nQUnit.test( \"remove() with filters\", function( assert ) {\n\n\tassert.expect( 8 );\n\n\tvar markup, div;\n\tjQuery( \"#ap\" ).children().remove( \"a\" );\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 1, \"Check filtered remove\" );\n\n\tjQuery( \"#ap\" ).children().remove( \"a, code\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check multi-filtered remove\" );\n\n\t// Positional and relative selectors\n\tmarkup = \"<div><span>1</span><span>2</span><span>3</span><span>4</span></div>\";\n\tdiv = jQuery( markup );\n\tdiv.children().remove( \"span:nth-child(2n)\" );\n\tassert.equal( div.text(), \"13\", \"relative selector in remove\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().remove( \"span:first\" );\n\t\tassert.equal( div.text(), \"234\", \"positional selector in remove\" );\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().remove( \"span:last\" );\n\t\tassert.equal( div.text(), \"123\", \"positional selector in remove\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Positional selectors not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \"Positional selectors not supported in selector-native\" );\n\t}\n\n\t// using contents will get comments regular, text, and comment nodes\n\t// Handle the case where no comment is in the document\n\tassert.ok( jQuery( \"#nonnodes\" ).contents().length >= 2, \"Check node,textnode,comment remove works\" );\n\tjQuery( \"#nonnodes\" ).contents().remove();\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().length, 0, \"Check node,textnode,comment remove works\" );\n} );\n\nQUnit.test( \"remove() event cleaning \", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count, first, cleanUp;\n\n\tcount = 0;\n\tfirst = jQuery( \"#ap\" ).children().first();\n\tcleanUp = first.on( \"click\", function() {\n\t\tcount++;\n\t} ).remove().appendTo( \"#qunit-fixture\" ).trigger( \"click\" );\n\n\tassert.strictEqual( 0, count, \"Event handler has been removed\" );\n\n\t// Clean up detached data\n\tcleanUp.remove();\n} );\n\nQUnit.test( \"remove() in document order #13779\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar last,\n\t\tcleanData = jQuery.cleanData;\n\n\tjQuery.cleanData = function( nodes ) {\n\t\tlast = jQuery.text( nodes[ 0 ] );\n\t\tcleanData.call( this, nodes );\n\t};\n\n\tjQuery( \"#qunit-fixture\" ).append(\n\t\tjQuery.parseHTML(\n\t\t\t\"<div class='removal-fixture'>1</div>\" +\n\t\t\t\"<div class='removal-fixture'>2</div>\" +\n\t\t\t\"<div class='removal-fixture'>3</div>\"\n\t\t)\n\t);\n\n\tjQuery( \".removal-fixture\" ).remove();\n\n\tassert.equal( last, 3, \"The removal fixtures were removed in document order\" );\n\n\tjQuery.cleanData = cleanData;\n} );\n\nQUnit.test( \"detach() no filters\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tvar first = jQuery( \"#ap\" ).children().first();\n\n\tfirst.data( \"foo\", \"bar\" );\n\n\tjQuery( \"#ap\" ).children().detach();\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check remove\" );\n\n\tassert.equal( first.data( \"foo\" ), \"bar\" );\n\tfirst.remove();\n\n} );\n\nQUnit.test( \"detach() with filters\", function( assert ) {\n\n\tassert.expect( 8 );\n\n\tvar markup, div;\n\tjQuery( \"#ap\" ).children().detach( \"a\" );\n\tassert.ok( jQuery( \"#ap\" ).text().length > 10, \"Check text is not removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 1, \"Check filtered remove\" );\n\n\tjQuery( \"#ap\" ).children().detach( \"a, code\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 0, \"Check multi-filtered remove\" );\n\n\t// Positional and relative selectors\n\tmarkup = \"<div><span>1</span><span>2</span><span>3</span><span>4</span></div>\";\n\tdiv = jQuery( markup );\n\tdiv.children().detach( \"span:nth-child(2n)\" );\n\tassert.equal( div.text(), \"13\", \"relative selector in detach\" );\n\n\tif ( jQuery.find.compile ) {\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().detach( \"span:first\" );\n\t\tassert.equal( div.text(), \"234\", \"positional selector in detach\" );\n\t\tdiv = jQuery( markup );\n\t\tdiv.children().detach( \"span:last\" );\n\t\tassert.equal( div.text(), \"123\", \"positional selector in detach\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"positional selectors not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \"positional selectors not supported in selector-native\" );\n\t}\n\n\t// using contents will get comments regular, text, and comment nodes\n\t// Handle the case where no comment is in the document\n\tassert.ok( jQuery( \"#nonnodes\" ).contents().length >= 2, \"Check node,textnode,comment remove works\" );\n\tjQuery( \"#nonnodes\" ).contents().detach();\n\tassert.equal( jQuery( \"#nonnodes\" ).contents().length, 0, \"Check node,textnode,comment remove works\" );\n} );\n\nQUnit.test( \"detach() event cleaning \", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar count, first, cleanUp;\n\n\tcount = 0;\n\tfirst = jQuery( \"#ap\" ).children().first();\n\tcleanUp = first.on( \"click\", function() {\n\t\tcount++;\n\t} ).detach().appendTo( \"#qunit-fixture\" ).trigger( \"click\" );\n\n\tassert.strictEqual( 1, count, \"Event handler has not been removed\" );\n\n\t// Clean up detached data\n\tcleanUp.remove();\n} );\n\nQUnit.test( \"empty()\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery( \"#ap\" ).children().empty().text().length, 0, \"Check text is removed\" );\n\tassert.equal( jQuery( \"#ap\" ).children().length, 4, \"Check elements are not removed\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tvar j = jQuery( \"#nonnodes\" ).contents();\n\tj.empty();\n\tassert.equal( j.html(), \"\", \"Check node,textnode,comment empty works\" );\n} );\n\nQUnit.test( \"jQuery.cleanData\", function( assert ) {\n\n\tassert.expect( 14 );\n\n\tvar type, pos, div, child;\n\n\ttype = \"remove\";\n\n\t// Should trigger 4 remove event\n\tdiv = getDiv().remove();\n\n\t// Should both do nothing\n\tpos = \"Outer\";\n\tdiv.trigger( \"click\" );\n\n\tpos = \"Inner\";\n\tdiv.children().trigger( \"click\" );\n\n\ttype = \"empty\";\n\tdiv = getDiv();\n\tchild = div.children();\n\n\t// Should trigger 2 remove event\n\tdiv.empty();\n\n\t// Should trigger 1\n\tpos = \"Outer\";\n\tdiv.trigger( \"click\" );\n\n\t// Should do nothing\n\tpos = \"Inner\";\n\tchild.trigger( \"click\" );\n\n\t// Should trigger 2\n\tdiv.remove();\n\n\ttype = \"html\";\n\n\tdiv = getDiv();\n\tchild = div.children();\n\n\t// Should trigger 2 remove event\n\tdiv.html( \"<div></div>\" );\n\n\t// Should trigger 1\n\tpos = \"Outer\";\n\tdiv.trigger( \"click\" );\n\n\t// Should do nothing\n\tpos = \"Inner\";\n\tchild.trigger( \"click\" );\n\n\t// Should trigger 2\n\tdiv.remove();\n\n\tfunction getDiv() {\n\t\tvar div = jQuery( \"<div class='outer'><div class='inner'></div></div>\" ).on( \"click\", function() {\n\t\t\tassert.ok( true, type + \" \" + pos + \" Click event fired.\" );\n\t\t} ).on( \"focus\", function() {\n\t\t\tassert.ok( true, type + \" \" + pos + \" Focus event fired.\" );\n\t\t} ).find( \"div\" ).on( \"click\", function() {\n\t\t\tassert.ok( false, type + \" \" + pos + \" Click event fired.\" );\n\t\t} ).on( \"focus\", function() {\n\t\t\tassert.ok( false, type + \" \" + pos + \" Focus event fired.\" );\n\t\t} ).end().appendTo( \"body\" );\n\n\t\tdiv[ 0 ].detachEvent = div[ 0 ].removeEventListener = function( t ) {\n\t\t\tassert.ok( true, type + \" Outer \" + t + \" event unbound\" );\n\t\t};\n\n\t\tdiv[ 0 ].firstChild.detachEvent = div[ 0 ].firstChild.removeEventListener = function( t ) {\n\t\t\tassert.ok( true, type + \" Inner \" + t + \" event unbound\" );\n\t\t};\n\n\t\treturn div;\n\t}\n} );\n\nQUnit.test( \"jQuery.cleanData eliminates all private data (gh-2127)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery._data( div[ 0 ], \"gh-2127\", \"testing\" );\n\n\tassert.ok( !jQuery.isEmptyObject( jQuery._data( div[ 0 ] ) ),  \"Ensure some private data exists\" );\n\n\tdiv.remove();\n\n\tassert.ok( !jQuery.hasData( div[ 0 ] ), \"Removed element hasData should return false\" );\n\n\tassert.ok( jQuery.isEmptyObject( jQuery._data( div[ 0 ] ) ),\n\t\t\"Private data is empty after node is removed\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"jQuery.cleanData eliminates all public data\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar key,\n\t\tdiv = jQuery( \"<div></div>\" );\n\tdiv.data( \"some\", \"data\" );\n\tassert.ok( !jQuery.isEmptyObject( jQuery.data( div[ 0 ] ) ),  \"Ensure some public data exists\" );\n\n\tdiv.remove();\n\n\tassert.ok( !jQuery.hasData( div[ 0 ] ), \"Removed element hasData should return false\" );\n\n\t// Make sure the expando is gone\n\tfor ( key in div[ 0 ] ) {\n\t\tif ( /^jQuery/.test( key ) ) {\n\t\t\tassert.strictEqual( div[ 0 ][ key ], undefined, \"Expando was not removed when there was no more data\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"domManip plain-text caching (trac-6779)\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\t// DOM manipulation fails if added text matches an Object method\n\tvar i,\n\t\t$f = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tbad = [ \"start-\", \"toString\", \"hasOwnProperty\", \"append\", \"here&there!\", \"-end\" ];\n\n\tfor ( i = 0; i < bad.length; i++ ) {\n\t\ttry {\n\t\t\t$f.append( bad[ i ] );\n\t\t}\n\t\tcatch ( e ) {}\n\t}\n\tassert.equal( $f.text(), bad.join( \"\" ), \"Cached strings that match Object properties\" );\n\t$f.remove();\n} );\n\nQUnit.test( \"domManip executes scripts containing html comments or CDATA (trac-9221)\", function( assert ) {\n\n\tassert.expect( 3 );\n\n\tjQuery( [\n\t\t\"<script type='text/javascript'>\",\n\t\t\"<!--\",\n\t\t\"QUnit.assert.ok( true, '<!-- handled' );\",\n\t\t\"//-->\",\n\t\t\"</script>\"\n\t].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( [\n\t\t\"<script type='text/javascript'>\",\n\t\t\"<![CDATA[\",\n\t\t\"QUnit.assert.ok( true, '<![CDATA[ handled' );\",\n\t\t\"//]]>\",\n\t\t\"</script>\"\n\t].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( [\n\t\t\"<script type='text/javascript'>\",\n\t\t\"<!--//--><![CDATA[//><!--\",\n\t\t\"QUnit.assert.ok( true, '<!--//--><![CDATA[//><!-- (Drupal case) handled' );\",\n\t\t\"//--><!]]>\",\n\t\t\"</script>\"\n\t].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n} );\n\ntestIframe(\n\t\"domManip tolerates window-valued document[0] in IE9/10 (trac-12266)\",\n\t\"manipulation/iframe-denied.html\",\n\tfunction( assert, jQuery, window, document, test ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( test.status, test.description );\n\t}\n);\n\ntestIframe(\n\t\"domManip executes scripts in iframes in the iframes' context\",\n\t\"manipulation/scripts-context.html\",\n\tfunction( assert, framejQuery, frameWindow, frameDocument ) {\n\t\tassert.expect( 2 );\n\t\tjQuery( frameDocument.body ).append( \"<script>window.scriptTest = true;<\\x2fscript>\" );\n\t\tassert.ok( !window.scriptTest, \"script executed in iframe context\" );\n\t\tassert.ok( frameWindow.scriptTest, \"script executed in iframe context\" );\n\t}\n);\n\ntestIframe(\n\t\"domManip executes external scripts in iframes in the iframes' context\",\n\t\"manipulation/scripts-context.html\",\n\tfunction( assert, framejQuery, frameWindow, frameDocument ) {\n\t\tassert.expect( 2 );\n\n\t\tGlobals.register( \"finishTest\" );\n\n\t\treturn new Promise( function( resolve ) {\n\t\t\twindow.finishTest = resolve;\n\t\t\tjQuery( frameDocument.body ).append(\n\t\t\t\t\"<script src='\" + url( \"manipulation/set-global-scripttest.js\" ) + \"'></script>\" );\n\t\t\tassert.ok( !window.scriptTest, \"script executed in iframe context\" );\n\t\t\tassert.ok( frameWindow.scriptTest, \"script executed in iframe context\" );\n\t\t} );\n\t},\n\n\t// The AJAX module is needed for jQuery._evalUrl.\n\tQUnit[ jQuery.ajax ? \"test\" : \"skip\" ]\n);\n\nQUnit.test( \"jQuery.clone - no exceptions for object elements #9587\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery( \"#no-clone-exception\" ).clone();\n\t\tassert.ok( true, \"cloned with no exceptions\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, e.message );\n\t}\n} );\n\nQUnit.test( \"Cloned, detached HTML5 elems (#10667,10670)\", function( assert ) {\n\n\tassert.expect( 7 );\n\n\tvar $clone,\n\t\t$section = jQuery( \"<section>\" ).appendTo( \"#qunit-fixture\" );\n\n\t// First clone\n\t$clone = $section.clone();\n\n\t// This branch tests a known behavior in modern browsers that should never fail.\n\t// Included for expected test count symmetry (expecting 1)\n\tassert.equal( $clone[ 0 ].nodeName, \"SECTION\", \"detached clone nodeName matches 'SECTION'\" );\n\n\t// Bind an event\n\t$section.on( \"click\", function() {\n\t\tassert.ok( true, \"clone fired event\" );\n\t} );\n\n\t// Second clone (will have an event bound)\n\t$clone = $section.clone( true );\n\n\t// Trigger an event from the first clone\n\t$clone.trigger( \"click\" );\n\t$clone.off( \"click\" );\n\n\t// Add a child node with text to the original\n\t$section.append( \"<p>Hello</p>\" );\n\n\t// Third clone (will have child node and text)\n\t$clone = $section.clone( true );\n\n\tassert.equal( $clone.find( \"p\" ).text(), \"Hello\", \"Assert text in child of clone\" );\n\n\t// Trigger an event from the third clone\n\t$clone.trigger( \"click\" );\n\t$clone.off( \"click\" );\n\n\t// Add attributes to copy\n\t$section.attr( {\n\t\t\"class\": \"foo bar baz\",\n\t\t\"title\": \"This is a title\"\n\t} );\n\n\t// Fourth clone (will have newly added attributes)\n\t$clone = $section.clone( true );\n\n\tassert.equal( $clone.attr( \"class\" ), $section.attr( \"class\" ), \"clone and element have same class attribute\" );\n\tassert.equal( $clone.attr( \"title\" ), $section.attr( \"title\" ), \"clone and element have same title attribute\" );\n\n\t// Remove the original\n\t$section.remove();\n\n\t// Clone the clone\n\t$section = $clone.clone( true );\n\n\t// Remove the clone\n\t$clone.remove();\n\n\t// Trigger an event from the clone of the clone\n\t$section.trigger( \"click\" );\n\n\t// Unbind any remaining events\n\t$section.off( \"click\" );\n\t$clone.off( \"click\" );\n} );\n\nQUnit.test( \"Guard against exceptions when clearing safeChildNodes\", function( assert ) {\n\n\tassert.expect( 1 );\n\n\tvar div;\n\n\ttry {\n\t\tdiv = jQuery( \"<div></div><hr/><code></code><b></b>\" );\n\t} catch ( e ) {}\n\n\tassert.ok( div && div.jquery, \"Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]\" );\n} );\n\nQUnit.test( \"Ensure oldIE creates a new set on appendTo (#8894)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tassert.strictEqual( jQuery( \"<div></div>\" ).clone().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.clone\" );\n\tassert.strictEqual( jQuery( \"<div></div>\" ).find( \"p\" ).end().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\" );\n\tassert.strictEqual( jQuery( \"<div></div>\" ).text( \"test\" ).addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\" );\n\tassert.strictEqual( jQuery( \"<bdi></bdi>\" ).clone().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after clone html5 element\" );\n\tassert.strictEqual( jQuery( \"<p></p>\" ).appendTo( \"<div></div>\" ).end().length, jQuery( \"<p>test</p>\" ).appendTo( \"<div></div>\" ).end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\" );\n} );\n\nQUnit.test( \"html() - script exceptions bubble (#11743)\", function( assert ) {\n\tassert.expect( 2 );\n\tvar done = assert.async(),\n\t\tonerror = window.onerror;\n\n\tsetTimeout( function() {\n\t\twindow.onerror = onerror;\n\n\t\tdone();\n\t}, 1000 );\n\n\twindow.onerror = function() {\n\t\tassert.ok( true, \"Exception thrown\" );\n\n\t\tif ( jQuery.ajax ) {\n\t\t\twindow.onerror = function() {\n\t\t\t\tassert.ok( true, \"Exception thrown in remote script\" );\n\t\t\t};\n\n\t\t\tjQuery( \"#qunit-fixture\" ).html( \"<script src='\" + baseURL + \"badcall.js'></script>\" );\n\t\t\tassert.ok( true, \"Exception ignored\" );\n\t\t} else {\n\t\t\tassert.ok( true, \"No jQuery.ajax\" );\n\t\t}\n\t};\n\n\tjQuery( \"#qunit-fixture\" ).html( \"<script>undefined();</script>\" );\n} );\n\nQUnit.test( \"checked state is cloned with clone()\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar elem = jQuery.parseHTML( \"<input type='checkbox' checked='checked'/>\" )[ 0 ];\n\telem.checked = false;\n\tassert.equal( jQuery( elem ).clone().attr( \"id\", \"clone\" )[ 0 ].checked, false, \"Checked false state correctly cloned\" );\n\n\telem = jQuery.parseHTML( \"<input type='checkbox'/>\" )[ 0 ];\n\telem.checked = true;\n\tassert.equal( jQuery( elem ).clone().attr( \"id\", \"clone\" )[ 0 ].checked, true, \"Checked true state correctly cloned\" );\n} );\n\nQUnit.test( \"manipulate mixed jQuery and text (#12384, #12346)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar div = jQuery( \"<div>a</div>\" ).append( \"&nbsp;\", jQuery( \"<span>b</span>\" ), \"&nbsp;\", jQuery( \"<span>c</span>\" ) ),\n\t\tnbsp = String.fromCharCode( 160 );\n\n\tassert.equal( div.text(), \"a\" + nbsp + \"b\" + nbsp + \"c\", \"Appending mixed jQuery with text nodes\" );\n\n\tdiv = jQuery( \"<div><div></div></div>\" )\n\t\t.find( \"div\" )\n\t\t.after( \"<p>a</p>\", \"<p>b</p>\" )\n\t\t.parent();\n\tassert.equal( div.find( \"*\" ).length, 3, \"added 2 paragraphs after inner div\" );\n} );\n\nQUnit.test( \"script evaluation (#11795)\", function( assert ) {\n\n\tassert.expect( 13 );\n\n\tvar scriptsIn, scriptsOut,\n\t\tfixture = jQuery( \"#qunit-fixture\" ).empty(),\n\t\tobjGlobal = ( function() {\n\t\t\treturn this;\n\t\t} )(),\n\t\tisOk = objGlobal.ok,\n\t\tnotOk = function() {\n\t\t\tvar args = arguments;\n\t\t\targs[ 0 ] = !args[ 0 ];\n\t\t\treturn isOk.apply( this, args );\n\t\t};\n\n\tobjGlobal.ok = notOk;\n\tscriptsIn = jQuery( [\n\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: non-script' );</script>\",\n\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: text/javascript' );</script>\",\n\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: text/ecmascript' );</script>\",\n\t\t\"<script>QUnit.assert.ok( true, 'evaluated: no type' );</script>\",\n\t\t\"<div>\",\n\t\t\t\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: inner non-script' );</script>\",\n\t\t\t\"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: inner text/javascript' );</script>\",\n\t\t\t\"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: inner text/ecmascript' );</script>\",\n\t\t\t\"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\",\n\t\t\"</div>\"\n\t].join( \"\" ) );\n\tscriptsIn.appendTo( jQuery( \"<div class='detached'></div>\" ) );\n\tobjGlobal.ok = isOk;\n\n\tscriptsOut = fixture.append( scriptsIn ).find( \"script\" );\n\tassert.equal( scriptsOut[ 0 ].type, \"something/else\", \"Non-evaluated type.\" );\n\tassert.equal( scriptsOut[ 1 ].type, \"text/javascript\", \"Evaluated type.\" );\n\tassert.deepEqual( scriptsOut.get(), fixture.find( \"script\" ).get(), \"All script tags remain.\" );\n\n\tobjGlobal.ok = notOk;\n\tscriptsOut = scriptsOut.add( scriptsOut.clone() ).appendTo( fixture.find( \"div\" ) );\n\tassert.deepEqual( fixture.find( \"div script\" ).get(), scriptsOut.get(), \"Scripts cloned without reevaluation\" );\n\tfixture.append( scriptsOut.detach() );\n\tassert.deepEqual( fixture.children( \"script\" ).get(), scriptsOut.get(), \"Scripts detached without reevaluation\" );\n\tobjGlobal.ok = isOk;\n\n\tif ( jQuery.ajax ) {\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<script src='\" + url( \"mock.php?action=testbar\" ) + \"'></script>\" );\n\t\tassert.strictEqual( window.testBar, \"bar\", \"Global script evaluation\" );\n\t} else {\n\t\tassert.ok( true, \"No jQuery.ajax\" );\n\t\tassert.ok( true, \"No jQuery.ajax\" );\n\t}\n} );\n\nQUnit[ jQuery.ajax ? \"test\" : \"skip\" ]( \"jQuery._evalUrl (#12838)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar message, expectedArgument,\n\t\tajax = jQuery.ajax,\n\t\tevalUrl = jQuery._evalUrl;\n\n\tmessage = \"jQuery.ajax implementation\";\n\texpectedArgument = 1;\n\tjQuery.ajax = function( input ) {\n\t\tassert.equal( ( input.url || input ).slice( -1 ), expectedArgument, message );\n\t\texpectedArgument++;\n\t};\n\tjQuery( \"#qunit-fixture\" ).append( \"<script src='1'></script><script src='2'></script>\" );\n\tassert.equal( expectedArgument, 3, \"synchronous execution\" );\n\n\tmessage = \"custom implementation\";\n\texpectedArgument = 3;\n\tjQuery._evalUrl = jQuery.ajax;\n\tjQuery.ajax = function( options ) {\n\t\tassert.strictEqual( options, {}, \"Unexpected call to jQuery.ajax\" );\n\t};\n\tjQuery( \"#qunit-fixture\" ).append( \"<script src='3'></script><script src='4'></script>\" );\n\n\tjQuery.ajax = ajax;\n\tjQuery._evalUrl = evalUrl;\n} );\n\nQUnit.test( \"jQuery.htmlPrefilter (gh-1747)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar expectedArgument,\n\t\tinvocations = 0,\n\t\tdone = assert.async(),\n\t\thtmlPrefilter = jQuery.htmlPrefilter,\n\t\tfixture = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tpoison = \"<script>jQuery.htmlPrefilter.assert.ok( false, 'script not executed' );</script>\";\n\n\tjQuery.htmlPrefilter = function( html ) {\n\t\tinvocations++;\n\t\tassert.equal( html, expectedArgument, \"Expected input\" );\n\n\t\t// Remove <script> and <del> elements\n\t\treturn htmlPrefilter.apply( this, arguments )\n\t\t\t.replace( /<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig, \"\" );\n\t};\n\tjQuery.htmlPrefilter.assert = assert;\n\n\texpectedArgument = \"A-\" + poison + \"B-\" + poison + poison + \"C-\";\n\tfixture.html( expectedArgument );\n\n\texpectedArgument = \"D-\" + poison + \"E-\" + \"<del></del><div>\" + poison + poison + \"</div>\" + \"F-\";\n\tfixture.append( expectedArgument );\n\n\texpectedArgument = poison;\n\tfixture.find( \"div\" ).replaceWith( expectedArgument );\n\n\tassert.equal( invocations, 3, \"htmlPrefilter invoked for all DOM manipulations\" );\n\tassert.equal( fixture.html(), \"A-B-C-D-E-F-\", \"htmlPrefilter modified HTML\" );\n\n\t// Allow asynchronous script execution to generate assertions\n\tsetTimeout( function() {\n\t\tjQuery.htmlPrefilter = htmlPrefilter;\n\t\tdone();\n\t}, 100 );\n} );\n\nQUnit.test( \"insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)\", function( assert ) {\n\n\tassert.expect( 10 );\n\n\tvar elems;\n\n\tjQuery.each( [\n\t\t\"appendTo\",\n\t\t\"prependTo\",\n\t\t\"insertBefore\",\n\t\t\"insertAfter\",\n\t\t\"replaceAll\"\n\t], function( index, name ) {\n\t\telems = jQuery( [\n\t\t\t\"<ul id='test4087-complex'><li class='test4087'><div>c1</div>h1</li><li><div>c2</div>h2</li></ul>\",\n\t\t\t\"<div id='test4087-simple'><div class='test4087-1'>1<div class='test4087-2'>2</div><div class='test4087-3'>3</div></div></div>\",\n\t\t\t\"<div id='test4087-multiple'><div class='test4087-multiple'>1</div><div class='test4087-multiple'>2</div></div>\"\n\t\t].join( \"\" ) ).appendTo( \"#qunit-fixture\" );\n\n\t\t// complex case based on https://jsfiddle.net/pbramos/gZ7vB/\n\t\tjQuery( \"#test4087-complex div\" )[ name ]( \"#test4087-complex li:last-child div:last-child\" );\n\t\tassert.equal( jQuery( \"#test4087-complex li:last-child div\" ).length, name === \"replaceAll\" ? 1 : 2, name + \" a node to itself, complex case.\" );\n\n\t\t// simple case\n\t\tjQuery( \".test4087-1\" )[ name ]( \".test4087-1\" );\n\t\tassert.equal( jQuery( \".test4087-1\" ).length, 1, name + \" a node to itself, simple case.\" );\n\n\t\t// clean for next test\n\t\tjQuery( \"#test4087-complex\" ).remove();\n\t\tjQuery( \"#test4087-simple\" ).remove();\n\t\tjQuery( \"#test4087-multiple\" ).remove();\n\t} );\n} );\n\nQUnit.test( \"Index for function argument should be received (#13094)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar i = 0;\n\n\tjQuery( \"<div></div><div></div>\" ).before( function( index ) {\n\t\tassert.equal( index, i++, \"Index should be correct\" );\n\t} );\n\n} );\n\nQUnit.test( \"Make sure jQuery.fn.remove can work on elements in documentFragment\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) );\n\n\tjQuery( div ).remove();\n\n\tassert.equal( fragment.childNodes.length, 0, \"div element was removed from documentFragment\" );\n} );\n\nQUnit.test( \"Make sure specific elements with content created correctly (#13232)\", function( assert ) {\n\tassert.expect( 20 );\n\n\tvar results = [],\n\t\targs = [],\n\t\telems = {\n\t\t\tthead: \"<tr><td>thead</td></tr>\",\n\t\t\ttbody: \"<tr><td>tbody</td></tr>\",\n\t\t\ttfoot: \"<tr><td>tfoot</td></tr>\",\n\t\t\tcolgroup: \"<col span='5'></col>\",\n\t\t\tcaption: \"caption\",\n\t\t\ttr: \"<td>tr</td>\",\n\t\t\tth: \"th\",\n\t\t\ttd: \"<div>td</div>\",\n\t\t\toptgroup: \"<option>optgroup</option>\",\n\t\t\toption: \"option\"\n\t\t};\n\n\tjQuery.each( elems, function( name, value ) {\n\t\tvar html = \"<\" + name + \">\" + value + \"</\" + name + \">\";\n\t\tassert.ok( jQuery.parseHTML( \"<\" + name + \">\" + value + \"</\" + name + \">\" )[ 0 ].nodeName.toLowerCase() === name, name + \" is created correctly\" );\n\n\t\tresults.push( name );\n\t\targs.push( html );\n\t} );\n\n\tjQuery.fn.append.apply( jQuery( \"<div></div>\" ), args ).children().each( function( i ) {\n\t\tassert.ok( this.nodeName.toLowerCase() === results[ i ] );\n\t} );\n} );\n\nQUnit.test( \"Validate creation of multiple quantities of certain elements (#13818)\", function( assert ) {\n\tassert.expect( 22 );\n\n\tvar tags = [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"col\", \"caption\", \"tr\", \"th\", \"td\", \"optgroup\", \"option\" ];\n\n\tjQuery.each( tags, function( index, tag ) {\n\t\tjQuery( \"<\" + tag + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\" ).each( function() {\n\t\t\tassert.ok( this.nodeName.toLowerCase() === tag, tag + \" elements created correctly\" );\n\t\t} );\n\t} );\n} );\n\nQUnit.test( \"Make sure tr element will be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\ttable = document.createElement( \"table\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tjQuery( table ).append( \"<tr><td>test</td></tr>\" );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody><tr><td>test</td></tr></tbody>\" );\n} );\n\nQUnit.test( \"Make sure tr elements will be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\ttable = document.createElement( \"table\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tjQuery( table ).append( \"<tr><td>1</td></tr><tr><td>2</td></tr>\" );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody>\" );\n} );\n\nQUnit.test( \"Make sure tfoot element will not be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\ttable = document.createElement( \"table\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tjQuery( table ).append( \"<tfoot></tfoot>\" );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody></tbody><tfoot></tfoot>\" );\n} );\n\nQUnit.test( \"Make sure document fragment will be appended to tbody element of table when present\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html,\n\t\tfragment = document.createDocumentFragment(),\n\t\ttable = document.createElement( \"table\" ),\n\t\ttr = document.createElement( \"tr\" ),\n\t\ttd = document.createElement( \"td\" );\n\n\ttable.appendChild( document.createElement( \"tbody\" ) );\n\tdocument.getElementById( \"qunit-fixture\" ).appendChild( table );\n\n\tfragment.appendChild( tr );\n\ttr.appendChild( td );\n\ttd.innerHTML = \"test\";\n\n\tjQuery( table ).append( fragment );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtml = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( html, \"<tbody><tr><td>test</td></tr></tbody>\" );\n} );\n\nQUnit.test( \"Make sure col element is appended correctly\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar table = jQuery( \"<table cellpadding='0'><tr><td>test</td></tr></table>\" );\n\n\tjQuery( table ).appendTo( \"#qunit-fixture\" );\n\n\tjQuery( \"<col width='150'></col>\" ).prependTo( table );\n\n\tassert.strictEqual( table.find( \"td\" ).width(), 150 );\n} );\n\nQUnit.test( \"Make sure tr is not appended to the wrong tbody (gh-3439)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar htmlOut,\n\t\thtmlIn =\n\t\t\t\"<thead><tr><td>\" +\n\t\t\t\t\"<table><tbody><tr><td>nested</td></tr></tbody></table>\" +\n\t\t\t\"</td></tr></thead>\",\n\t\tnewRow = \"<tr><td>added</td></tr>\",\n\t\thtmlExpected = htmlIn.replace( \"</thead>\", \"</thead>\" + newRow ),\n\t\ttable = supportjQuery( \"<table></table>\" ).html( htmlIn ).appendTo( \"#qunit-fixture\" )[ 0 ];\n\n\tjQuery( table ).append( newRow );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtmlOut = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( htmlOut, htmlExpected );\n} );\n\nQUnit.test( \"Make sure tags with single-character names are found (gh-4124)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar htmlOut,\n\t\thtmlIn = \"<p>foo<!--<td>--></p>\",\n\t\t$el = jQuery( \"<div></div>\" );\n\n\t$el.html( htmlIn );\n\n\t// Lowercase and replace spaces to remove possible browser inconsistencies\n\thtmlOut = $el[ 0 ].innerHTML.toLowerCase().replace( /\\s/g, \"\" );\n\n\tassert.strictEqual( htmlOut, htmlIn );\n} );\n\n// The AJAX module is needed for jQuery._evalUrl.\nQUnit[ jQuery.ajax ? \"test\" : \"skip\" ]( \"Insert script with data-URI (gh-1887)\", function( assert ) {\n\tassert.expect( 1 );\n\tGlobals.register( \"testFoo\" );\n\tGlobals.register( \"testSrcFoo\" );\n\n\tvar script = document.createElement( \"script\" ),\n\t\tfixture = document.getElementById( \"qunit-fixture\" ),\n\t\tdone = assert.async();\n\n\tscript.src = \"data:text/javascript,testSrcFoo = 'foo';\";\n\n\tfixture.appendChild( script );\n\n\tjQuery( fixture ).append( \"<script src=\\\"data:text/javascript,testFoo = 'foo';\\\"></script>\" );\n\n\tsetTimeout( function() {\n\t\tif ( window.testSrcFoo === \"foo\" ) {\n\t\t\tassert.strictEqual( window.testFoo, window.testSrcFoo, \"data-URI script executed\" );\n\n\t\t} else {\n\t\t\tassert.ok( true, \"data-URI script is not supported by this environment\" );\n\t\t}\n\n\t\tdone();\n\t}, 100 );\n} );\n\nQUnit.test( \"Ignore content from unsuccessful responses (gh-4126)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar globalEval = jQuery.globalEval;\n\tjQuery.globalEval = function( code ) {\n\t\tassert.ok( false, \"no attempt to evaluate code from an unsuccessful response\" );\n\t};\n\n\ttry {\n\t\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\t\"<script src='\" + url( \"mock.php?action=error\" ) + \"'></script>\" );\n\t\tassert.ok( true, \"no error thrown from embedding script with unsuccessful-response src\" );\n\t} catch ( e ) {\n\t\tthrow e;\n\t} finally {\n\t\tjQuery.globalEval = globalEval;\n\t}\n} );\n\ntestIframe(\n\t\"Check if CSP nonce is preserved\",\n\t\"mock.php?action=cspNonce\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar done = assert.async();\n\n\t\tassert.expect( 1 );\n\n\t\tsupportjQuery.get( baseURL + \"support/csp.log\" ).done( function( data ) {\n\t\t\tassert.equal( data, \"\", \"No log request should be sent\" );\n\t\t\tsupportjQuery.get( baseURL + \"mock.php?action=cspClean\" ).done( done );\n\t\t} );\n\t},\n\n\t// Support: Edge 18+, iOS 7-9 only, Android 4.0-4.4 only\n\t// Edge doesn't support nonce in non-inline scripts.\n\t// See https://web.archive.org/web/20171203124125/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13246371/\n\t// Old iOS & Android Browser versions support script-src but not nonce, making this test\n\t// impossible to run. Browsers not supporting CSP at all are not a problem as they'll skip\n\t// script-src restrictions completely.\n\tQUnit[ /\\bedge\\/|iphone os [789]|android 4\\./i.test( navigator.userAgent ) ? \"skip\" : \"test\" ]\n);\n\ntestIframe(\n\t\"Check if CSP nonce is preserved for external scripts with src attribute\",\n\t\"mock.php?action=cspNonce&test=external\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar done = assert.async();\n\n\t\tassert.expect( 1 );\n\n\t\tsupportjQuery.get( baseURL + \"support/csp.log\" ).done( function( data ) {\n\t\t\tassert.equal( data, \"\", \"No log request should be sent\" );\n\t\t\tsupportjQuery.get( baseURL + \"mock.php?action=cspClean\" ).done( done );\n\t\t} );\n\t},\n\n\t// The AJAX module is needed for jQuery._evalUrl.\n\t// Support: Edge 18+, iOS 7-9 only, Android 4.0-4.4 only\n\t// Edge doesn't support nonce in non-inline scripts.\n\t// See https://web.archive.org/web/20171203124125/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13246371/\n\t// Old iOS & Android Browser versions support script-src but not nonce, making this test\n\t// impossible to run. Browsers not supporting CSP at all are not a problem as they'll skip\n\t// script-src restrictions completely.\n\tQUnit[ jQuery.ajax && !/\\bedge\\/|iphone os [789]|android 4\\./i.test( navigator.userAgent ) ? \"test\" : \"skip\" ]\n);\n\ntestIframe(\n\t\"jQuery.globalEval supports nonce\",\n\t\"mock.php?action=cspNonce&test=globaleval\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar done = assert.async();\n\n\t\tassert.expect( 1 );\n\n\t\tsupportjQuery.get( baseURL + \"support/csp.log\" ).done( function( data ) {\n\t\t\tassert.equal( data, \"\", \"No log request should be sent\" );\n\t\t\tsupportjQuery.get( baseURL + \"mock.php?action=cspClean\" ).done( done );\n\t\t} );\n\t},\n\n\t// Support: Edge 18+, iOS 7-9 only, Android 4.0-4.4 only\n\t// Edge doesn't support nonce in non-inline scripts.\n\t// See https://web.archive.org/web/20171203124125/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13246371/\n\t// Old iOS & Android Browser versions support script-src but not nonce, making this test\n\t// impossible to run. Browsers not supporting CSP at all are not a problem as they'll skip\n\t// script-src restrictions completely.\n\tQUnit[ /\\bedge\\/|iphone os [789]|android 4\\./i.test( navigator.userAgent ) ? \"skip\" : \"test\" ]\n);\n", "( function() {\n\nif ( !jQuery.fn.offset ) {\n\treturn;\n}\n\nvar supportsFixedPosition, supportsScroll, alwaysScrollable,\n\tforceScroll = supportjQuery( \"<div></div>\" ).css( { width: 2000, height: 2000 } ),\n\tcheckSupport = function( assert ) {\n\n\t\t// Only run once\n\t\tcheckSupport = false;\n\n\t\tvar checkFixed = supportjQuery( \"<div/>\" )\n\t\t\t.css( { position: \"fixed\", top: \"20px\" } )\n\t\t\t.appendTo( \"#qunit-fixture\" );\n\t\tsupportsFixedPosition = checkFixed[ 0 ].offsetTop === 20;\n\t\tcheckFixed.remove();\n\n\t\t// Append forceScroll to the body instead of #qunit-fixture because the latter is hidden\n\t\tforceScroll.appendTo( \"body\" );\n\t\twindow.scrollTo( 200, 200 );\n\t\tsupportsScroll = document.documentElement.scrollTop || document.body.scrollTop;\n\t\tforceScroll.detach();\n\n\t\t// Support: iOS <=7\n\t\t// Hijack the iframe test infrastructure to detect viewport scrollability\n\t\t// for pages with position:fixed document element\n\t\tvar done = assert.async();\n\t\ttestIframe(\n\t\t\tnull,\n\t\t\t\"offset/boxes.html\",\n\t\t\tfunction( assert, $, win, doc ) {\n\t\t\t\tvar scrollTop = win.pageYOffset,\n\t\t\t\t\tscrollLeft = win.pageXOffset;\n\t\t\t\tdoc.documentElement.style.position = \"fixed\";\n\t\t\t\twin.scrollTo( scrollLeft, scrollTop );\n\t\t\t\talwaysScrollable = win.pageXOffset !== 0;\n\t\t\t\tdone();\n\t\t\t},\n\t\t\tfunction mockQUnit_test( _, testCallback ) {\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\ttestCallback( assert );\n\t\t\t\t} );\n\t\t\t}\n\t\t);\n\t};\n\nQUnit.module( \"offset\", { beforeEach: function( assert ) {\n\tif ( typeof checkSupport === \"function\" ) {\n\t\tcheckSupport( assert );\n\t}\n\n\t// Force a scroll value on the main window to ensure incorrect results\n\t// if offset is using the scroll offset of the parent window\n\tforceScroll.appendTo( \"body\" );\n\twindow.scrollTo( 1, 1 );\n\tforceScroll.detach();\n}, afterEach: moduleTeardown } );\n\nQUnit.test( \"empty set\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.strictEqual( jQuery().offset(), undefined, \"offset() returns undefined for empty set (#11962)\" );\n\tassert.strictEqual( jQuery().position(), undefined, \"position() returns undefined for empty set (#11962)\" );\n} );\n\nQUnit.test( \"disconnected element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar result = jQuery( document.createElement( \"div\" ) ).offset();\n\n\t// These tests are solely for master/compat consistency\n\t// Retrieving offset on disconnected/hidden elements is not officially\n\t// valid input, but will return zeros for back-compat\n\tassert.equal( result.top, 0, \"Retrieving offset on disconnected elements returns zeros (gh-2310)\" );\n\tassert.equal( result.left, 0, \"Retrieving offset on disconnected elements returns zeros (gh-2310)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on disconnected elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on disconnected elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"hidden (display: none) element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div style='display: none'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tresult = node.offset();\n\n\tnode.remove();\n\n\t// These tests are solely for master/compat consistency\n\t// Retrieving offset on disconnected/hidden elements is not officially\n\t// valid input, but will return zeros for back-compat\n\tassert.equal( result.top, 0, \"Retrieving offset on hidden elements returns zeros (gh-2310)\" );\n\tassert.equal( result.left, 0, \"Retrieving offset on hidden elements returns zeros (gh-2310)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on hidden elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on hidden elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"0 sized element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div style='margin: 5px; width: 0; height: 0'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tresult = node.offset();\n\n\tnode.remove();\n\n\tassert.notEqual( result.top, 0, \"Retrieving offset on 0 sized elements (gh-3167)\" );\n\tassert.notEqual( result.left, 0, \"Retrieving offset on 0 sized elements (gh-3167)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on 0 sized elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on 0 sized elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"hidden (visibility: hidden) element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div style='margin: 5px; visibility: hidden'></div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\tresult = node.offset();\n\n\tnode.remove();\n\n\tassert.notEqual( result.top, 0, \"Retrieving offset on visibility:hidden elements (gh-3167)\" );\n\tassert.notEqual( result.left, 0, \"Retrieving offset on visibility:hidden elements (gh-3167)\" );\n\tassert.equal( Object.keys( result ).length, 2, \"Retrieving offset on visibility:hidden elements returns offset object (gh-3167)\" );\n\tassert.equal( jQuery.isPlainObject( result ), true, \"Retrieving offset on visibility:hidden elements returns plain object (gh-3612)\" );\n} );\n\nQUnit.test( \"normal element\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar node = jQuery( \"<div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\toffset = node.offset(),\n\t\tposition = node.position();\n\n\tnode.remove();\n\n\tassert.equal( Object.keys( offset ).length, 2, \"Retrieving offset on normal elements returns offset object (gh-3612)\" );\n\tassert.equal( jQuery.isPlainObject( offset ), true, \"Retrieving offset on normal elements returns plain object (gh-3612)\" );\n\n\tassert.equal( Object.keys( position ).length, 2, \"Retrieving position on normal elements returns offset object (gh-3612)\" );\n\tassert.equal( jQuery.isPlainObject( position ), true, \"Retrieving position on normal elements returns plain object (gh-3612)\" );\n} );\n\ntestIframe( \"absolute\", \"offset/absolute.html\", function( assert, $, iframe ) {\n\tassert.expect( 4 );\n\n\tvar doc = iframe.document,\n\t\t\ttests;\n\n\t// get offset\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\", \"top\": 1, \"left\": 1 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( jQuery( this.id, doc ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( jQuery( this.id, doc ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\", \"top\": 0, \"left\": 0 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( jQuery( this.id, doc ).position().top,  this.top,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\tassert.equal( jQuery( this.id, doc ).position().left, this.left, \"jQuery('\" + this.id + \"').position().left\" );\n\t} );\n} );\n\ntestIframe( \"absolute\", \"offset/absolute.html\", function( assert, $ ) {\n\tassert.expect( 178 );\n\n\tvar tests, offset;\n\n\t// get offset tests\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  1, \"left\":  1 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  5, \"left\":  5 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  9, \"left\":  9 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 20, \"left\": 20 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  0, \"left\":  0 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  1, \"left\":  1 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  1, \"left\":  1 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 19, \"left\": 19 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).position().top,  this.top,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\tassert.equal( $( this.id ).position().left, this.left, \"jQuery('\" + this.id + \"').position().left\" );\n\t} );\n\n\t// test #5781\n\toffset = $( \"#positionTest\" ).offset( { \"top\": 10, \"left\": 10 } ).offset();\n\tassert.equal( offset.top,  10, \"Setting offset on element with position absolute but 'auto' values.\" );\n\tassert.equal( offset.left, 10, \"Setting offset on element with position absolute but 'auto' values.\" );\n\n\t// set offset\n\ttests = [\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 30, \"left\": 30 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 10, \"left\": 10 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-2\",     \"top\": 19, \"left\": 19 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\": 15, \"left\": 15 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  5, \"left\":  5 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-1-1-1\", \"top\":  9, \"left\":  9 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\": 10, \"left\": 10 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  0, \"left\":  0 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-1-1\",   \"top\":  5, \"left\":  5 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  2, \"left\":  2 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  0, \"left\":  0 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\": -1, \"left\": -1 },\n\t\t{ \"id\": \"#absolute-1\",     \"top\":  1, \"left\":  1 }\n\t];\n\tjQuery.each( tests, function() {\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\tvar top = this.top, left = this.left;\n\n\t\t$( this.id ).offset( function( i, val ) {\n\t\t\tassert.equal( val.top, top, \"Verify incoming top position.\" );\n\t\t\tassert.equal( val.left, left, \"Verify incoming top position.\" );\n\t\t\treturn { \"top\": top + 1, \"left\": left + 1 };\n\t\t} );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \" })\" );\n\n\t\t$( this.id )\n\t\t\t.offset( { \"left\": this.left + 2 } )\n\t\t\t.offset( { \"top\":  this.top  + 2 } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 2, \"Setting one property at a time.\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 2, \"Setting one property at a time.\" );\n\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t$( this ).css( {\n\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\"left\": props.left + 1\n\t\t\t} );\n\t\t} } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t} );\n} );\n\ntestIframe( \"relative\", \"offset/relative.html\", function( assert, $ ) {\n\tassert.expect( 64 );\n\n\t// get offset\n\tvar tests = [\n\t\t{ \"id\": \"#relative-1\",   \"top\":   7, \"left\":  7 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":  15, \"left\": 15 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 142, \"left\": 27 },\n\t\t{ \"id\": \"#relative-2-1\",   \"top\": 149, \"left\": 52 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#relative-1\",   \"top\":   6, \"left\":  6 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":   5, \"left\":  5 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 141, \"left\": 26 },\n\t\t{ \"id\": \"#relative-2-1\",   \"top\": 5, \"left\": 5 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).position().top,  this.top,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\tassert.equal( $( this.id ).position().left, this.left, \"jQuery('\" + this.id + \"').position().left\" );\n\t} );\n\n\t// set offset\n\ttests = [\n\t\t{ \"id\": \"#relative-2\",   \"top\": 200, \"left\":  50 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 100, \"left\":  10 },\n\t\t{ \"id\": \"#relative-2\",   \"top\":  -5, \"left\":  -5 },\n\t\t{ \"id\": \"#relative-2\",   \"top\": 142, \"left\":  27 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":   5, \"left\":   5 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":  -1, \"left\":  -1 },\n\t\t{ \"id\": \"#relative-1-1\", \"top\":  15, \"left\":  15 },\n\t\t{ \"id\": \"#relative-1\",   \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#relative-1\",   \"top\":   0, \"left\":   0 },\n\t\t{ \"id\": \"#relative-1\",   \"top\":  -1, \"left\":  -1 },\n\t\t{ \"id\": \"#relative-1\",   \"top\":   7, \"left\":   7 }\n\t];\n\tjQuery.each( tests, function() {\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t$( this ).css( {\n\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\"left\": props.left + 1\n\t\t\t} );\n\t\t} } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t} );\n} );\n\ntestIframe( \"static\", \"offset/static.html\", function( assert, $ ) {\n\tassert.expect( 80 );\n\n\t// get offset\n\tvar tests = [\n\t\t{ \"id\": \"#static-1\",     \"top\":   7, \"left\":  7 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  15, \"left\": 15 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  23, \"left\": 23 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 122, left: 7 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset().left\" );\n\t} );\n\n\t// get position\n\ttests = [\n\t\t{ \"id\": \"#static-1\",     \"top\":   6, \"left\":  6 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  14, \"left\": 14 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  22, \"left\": 22 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 121, \"left\": 6 }\n\t];\n\tjQuery.each( tests, function() {\n\t\tassert.equal( $( this.id ).position().top,  this.top,  \"jQuery('\" + this.top  + \"').position().top\" );\n\t\tassert.equal( $( this.id ).position().left, this.left, \"jQuery('\" + this.left + \"').position().left\" );\n\t} );\n\n\t// set offset\n\ttests = [\n\t\t{ \"id\": \"#static-2\",     \"top\": 200, \"left\": 200 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#static-2\",     \"top\":  -2, \"left\":  -2 },\n\t\t{ \"id\": \"#static-2\",     \"top\": 121, \"left\":   6 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  50, \"left\":  50 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  10, \"left\":  10 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  -1, \"left\":  -1 },\n\t\t{ \"id\": \"#static-1-1-1\", \"top\":  22, \"left\":  22 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  25, \"left\":  25 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  10, \"left\":  10 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  -3, \"left\":  -3 },\n\t\t{ \"id\": \"#static-1-1\",   \"top\":  14, \"left\":  14 },\n\t\t{ \"id\": \"#static-1\",     \"top\":  30, \"left\":  30 },\n\t\t{ \"id\": \"#static-1\",     \"top\":   2, \"left\":   2 },\n\t\t{ \"id\": \"#static-1\",     \"top\":  -2, \"left\":  -2 },\n\t\t{ \"id\": \"#static-1\",     \"top\":   7, \"left\":   7 }\n\t];\n\tjQuery.each( tests, function() {\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t$( this ).css( {\n\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\"left\": props.left + 1\n\t\t\t} );\n\t\t} } );\n\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t} );\n} );\n\ntestIframe( \"fixed\", \"offset/fixed.html\", function( assert, $, window ) {\n\tassert.expect( 38 );\n\n\tvar tests, $noTopLeft;\n\n\ttests = [\n\t\t{\n\t\t\t\"id\": \"#fixed-1\",\n\t\t\t\"offsetTop\": 1001,\n\t\t\t\"offsetLeft\": 1001,\n\t\t\t\"positionTop\": 0,\n\t\t\t\"positionLeft\": 0\n\t\t},\n\t\t{\n\t\t\t\"id\": \"#fixed-2\",\n\t\t\t\"offsetTop\": 1021,\n\t\t\t\"offsetLeft\": 1021,\n\t\t\t\"positionTop\": 20,\n\t\t\t\"positionLeft\": 20\n\t\t}\n\t];\n\n\tjQuery.each( tests, function() {\n\t\tif ( !window.supportsScroll ) {\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\n\t\t} else if ( window.supportsFixedPosition ) {\n\t\t\tassert.equal( jQuery.isPlainObject( $( this.id ).offset() ), true, \"jQuery('\" + this.id + \"').offset() is plain object\" );\n\t\t\tassert.equal( jQuery.isPlainObject( $( this.id ).position() ), true, \"jQuery('\" + this.id + \"').position() is plain object\" );\n\t\t\tassert.equal( $( this.id ).offset().top,  this.offsetTop,  \"jQuery('\" + this.id + \"').offset().top\" );\n\t\t\tassert.equal( $( this.id ).position().top,  this.positionTop,  \"jQuery('\" + this.id + \"').position().top\" );\n\t\t\tassert.equal( $( this.id ).offset().left, this.offsetLeft, \"jQuery('\" + this.id + \"').offset().left\" );\n\t\t\tassert.equal( $( this.id ).position().left,  this.positionLeft,  \"jQuery('\" + this.id + \"').position().left\" );\n\t\t} else {\n\n\t\t\t// need to have same number of assertions\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t}\n\t} );\n\n\ttests = [\n\t\t{ \"id\": \"#fixed-1\", \"top\": 100, \"left\": 100 },\n\t\t{ \"id\": \"#fixed-1\", \"top\":   0, \"left\":   0 },\n\t\t{ \"id\": \"#fixed-1\", \"top\":  -4, \"left\":  -4 },\n\t\t{ \"id\": \"#fixed-2\", \"top\": 200, \"left\": 200 },\n\t\t{ \"id\": \"#fixed-2\", \"top\":   0, \"left\":   0 },\n\t\t{ \"id\": \"#fixed-2\", \"top\":  -5, \"left\":  -5 }\n\t];\n\n\tjQuery.each( tests, function() {\n\t\tif ( window.supportsFixedPosition ) {\n\t\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left } );\n\t\t\tassert.equal( $( this.id ).offset().top,  this.top,  \"jQuery('\" + this.id + \"').offset({ top: \"  + this.top  + \" })\" );\n\t\t\tassert.equal( $( this.id ).offset().left, this.left, \"jQuery('\" + this.id + \"').offset({ left: \" + this.left + \" })\" );\n\n\t\t\t$( this.id ).offset( { \"top\": this.top, \"left\": this.left, \"using\": function( props ) {\n\t\t\t\t$( this ).css( {\n\t\t\t\t\t\"top\":  props.top  + 1,\n\t\t\t\t\t\"left\": props.left + 1\n\t\t\t\t} );\n\t\t\t} } );\n\t\t\tassert.equal( $( this.id ).offset().top,  this.top  + 1, \"jQuery('\" + this.id + \"').offset({ top: \"  + ( this.top  + 1 ) + \", using: fn })\" );\n\t\t\tassert.equal( $( this.id ).offset().left, this.left + 1, \"jQuery('\" + this.id + \"').offset({ left: \" + ( this.left + 1 ) + \", using: fn })\" );\n\t\t} else {\n\n\t\t\t// need to have same number of assertions\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\t}\n\t} );\n\n\t// Bug 8316\n\t$noTopLeft = $( \"#fixed-no-top-left\" );\n\tif ( window.supportsFixedPosition ) {\n\t\tassert.equal( $noTopLeft.offset().top,  1007,  \"Check offset top for fixed element with no top set\" );\n\t\tassert.equal( $noTopLeft.offset().left, 1007, \"Check offset left for fixed element with no left set\" );\n\t} else {\n\n\t\t// need to have same number of assertions\n\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t\tassert.ok( true, \"Fixed position is not supported\" );\n\t}\n} );\n\ntestIframe( \"table\", \"offset/table.html\", function( assert, $ ) {\n\tassert.expect( 4 );\n\n\tassert.equal( $( \"#table-1\" ).offset().top, 6, \"jQuery('#table-1').offset().top\" );\n\tassert.equal( $( \"#table-1\" ).offset().left, 6, \"jQuery('#table-1').offset().left\" );\n\n\tassert.equal( $( \"#th-1\" ).offset().top, 10, \"jQuery('#th-1').offset().top\" );\n\tassert.equal( $( \"#th-1\" ).offset().left, 10, \"jQuery('#th-1').offset().left\" );\n} );\n\ntestIframe( \"scroll\", \"offset/scroll.html\", function( assert, $, win ) {\n\tassert.expect( 26 );\n\n\tassert.equal( $( \"#scroll-1\" ).offset().top, 7, \"jQuery('#scroll-1').offset().top\" );\n\tassert.equal( $( \"#scroll-1\" ).offset().left, 7, \"jQuery('#scroll-1').offset().left\" );\n\n\tassert.equal( $( \"#scroll-1-1\" ).offset().top, 11, \"jQuery('#scroll-1-1').offset().top\" );\n\tassert.equal( $( \"#scroll-1-1\" ).offset().left, 11, \"jQuery('#scroll-1-1').offset().left\" );\n\n\t// These tests are solely for master/compat consistency\n\t// Retrieving offset on disconnected/hidden elements is not officially\n\t// valid input, but will return zeros for back-compat\n\tassert.equal( $( \"#hidden\" ).offset().top, 0, \"Hidden elements do not subtract scroll\" );\n\tassert.equal( $( \"#hidden\" ).offset().left, 0, \"Hidden elements do not subtract scroll\" );\n\n\t// scroll offset tests .scrollTop/Left\n\tassert.equal( $( \"#scroll-1\" ).scrollTop(), 5, \"jQuery('#scroll-1').scrollTop()\" );\n\tassert.equal( $( \"#scroll-1\" ).scrollLeft(), 5, \"jQuery('#scroll-1').scrollLeft()\" );\n\n\tassert.equal( $( \"#scroll-1-1\" ).scrollTop(), 0, \"jQuery('#scroll-1-1').scrollTop()\" );\n\tassert.equal( $( \"#scroll-1-1\" ).scrollLeft(), 0, \"jQuery('#scroll-1-1').scrollLeft()\" );\n\n\t// scroll method chaining\n\tassert.equal( $( \"#scroll-1\" ).scrollTop( undefined ).scrollTop(), 5, \".scrollTop(undefined) is chainable (#5571)\" );\n\tassert.equal( $( \"#scroll-1\" ).scrollLeft( undefined ).scrollLeft(), 5, \".scrollLeft(undefined) is chainable (#5571)\" );\n\n\twin.name = \"test\";\n\n\tif ( !window.supportsScroll ) {\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t\tassert.ok( true, \"Browser doesn't support scroll position.\" );\n\t} else {\n\t\tassert.equal( $( win ).scrollTop(), 1000, \"jQuery(window).scrollTop()\" );\n\t\tassert.equal( $( win ).scrollLeft(), 1000, \"jQuery(window).scrollLeft()\" );\n\n\t\tassert.equal( $( win.document ).scrollTop(), 1000, \"jQuery(document).scrollTop()\" );\n\t\tassert.equal( $( win.document ).scrollLeft(), 1000, \"jQuery(document).scrollLeft()\" );\n\t}\n\n\t// test jQuery using parent window/document\n\t// jQuery reference here is in the iframe\n\twindow.scrollTo( 0, 0 );\n\tassert.equal( $( window ).scrollTop(), 0, \"jQuery(window).scrollTop() other window\" );\n\tassert.equal( $( window ).scrollLeft(), 0, \"jQuery(window).scrollLeft() other window\" );\n\tassert.equal( $( document ).scrollTop(), 0, \"jQuery(window).scrollTop() other document\" );\n\tassert.equal( $( document ).scrollLeft(), 0, \"jQuery(window).scrollLeft() other document\" );\n\n\t// Tests scrollTop/Left with empty jquery objects\n\tassert.notEqual( $().scrollTop( 100 ), null, \"jQuery().scrollTop(100) testing setter on empty jquery object\" );\n\tassert.notEqual( $().scrollLeft( 100 ), null, \"jQuery().scrollLeft(100) testing setter on empty jquery object\" );\n\tassert.notEqual( $().scrollTop( null ), null, \"jQuery().scrollTop(null) testing setter on empty jquery object\" );\n\tassert.notEqual( $().scrollLeft( null ), null, \"jQuery().scrollLeft(null) testing setter on empty jquery object\" );\n\tassert.strictEqual( $().scrollTop(), undefined, \"jQuery().scrollTop() testing getter on empty jquery object\" );\n\tassert.strictEqual( $().scrollLeft(), undefined, \"jQuery().scrollLeft() testing getter on empty jquery object\" );\n} );\n\ntestIframe( \"body\", \"offset/body.html\", function( assert, $ ) {\n\tassert.expect( 4 );\n\n\tassert.equal( $( \"body\" ).offset().top, 1, \"jQuery('#body').offset().top\" );\n\tassert.equal( $( \"body\" ).offset().left, 1, \"jQuery('#body').offset().left\" );\n\tassert.equal( $( \"#firstElement\" ).position().left, 5, \"$('#firstElement').position().left\" );\n\tassert.equal( $( \"#firstElement\" ).position().top, 5, \"$('#firstElement').position().top\" );\n} );\n\nQUnit.test( \"chaining\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar coords = { \"top\":  1, \"left\":  1 };\n\tassert.equal( jQuery( \"#absolute-1\" ).offset( coords ).jquery, jQuery.fn.jquery, \"offset(coords) returns jQuery object\" );\n\tassert.equal( jQuery( \"#non-existent\" ).offset( coords ).jquery, jQuery.fn.jquery, \"offset(coords) with empty jQuery set returns jQuery object\" );\n\tassert.equal( jQuery( \"#absolute-1\" ).offset( undefined ).jquery, jQuery.fn.jquery, \"offset(undefined) returns jQuery object (#5571)\" );\n} );\n\n// Test complex content under a variety of <html>/<body> positioning styles\n( function() {\n\tvar POSITION_VALUES = [ \"static\", \"relative\", \"absolute\", \"fixed\" ],\n\n\t\t// Use shorthands for describing an element's relevant properties\n\t\tBOX_PROPS =\n\t\t\t( \"top left  marginTop marginLeft  borderTop borderLeft  paddingTop paddingLeft\" +\n\t\t\t\"  style  parent\" ).split( /\\s+/g ),\n\t\tprops = function() {\n\t\t\tvar propObj = {};\n\t\t\tsupportjQuery.each( arguments, function( i, value ) {\n\t\t\t\tpropObj[ BOX_PROPS[ i ] ] = value;\n\t\t\t} );\n\t\t\treturn propObj;\n\t\t},\n\n\t\t// Values must stay synchronized with test/data/offset/boxes.html\n\t\tdivProps = function( position, parentId ) {\n\t\t\treturn props( 8, 4,  16, 8,  4, 2,  32, 16,  position, parentId );\n\t\t},\n\t\thtmlProps = function( position ) {\n\t\t\treturn props( position === \"static\" ? 0 : 4096, position === \"static\" ? 0 : 2048,\n\t\t\t\t64, 32,  128, 64,  256, 128,  position );\n\t\t},\n\t\tbodyProps = function( position ) {\n\t\t\treturn props( position === \"static\" ? 0 : 8192, position === \"static\" ? 0 : 4096,\n\t\t\t\t512, 256,  1024, 512,  2048, 1024,  position,\n\t\t\t\tposition !== \"fixed\" && \"documentElement\" );\n\t\t};\n\n\tfunction getExpectations( htmlPos, bodyPos, scrollTop, scrollLeft ) {\n\n\t\t// Initialize data about page elements\n\t\tvar expectations = {\n\t\t\t\t\"documentElement\":   htmlProps( htmlPos ),\n\t\t\t\t\"body\":              bodyProps( bodyPos ),\n\t\t\t\t\"relative\":          divProps( \"relative\", \"body\" ),\n\t\t\t\t\"relative-relative\": divProps( \"relative\", \"relative\" ),\n\t\t\t\t\"relative-absolute\": divProps( \"absolute\", \"relative\" ),\n\t\t\t\t\"absolute\":          divProps( \"absolute\", \"body\" ),\n\t\t\t\t\"absolute-relative\": divProps( \"relative\", \"absolute\" ),\n\t\t\t\t\"absolute-absolute\": divProps( \"absolute\", \"absolute\" ),\n\t\t\t\t\"fixed\":             divProps( \"fixed\" ),\n\t\t\t\t\"fixed-relative\":    divProps( \"relative\", \"fixed\" ),\n\t\t\t\t\"fixed-absolute\":    divProps( \"absolute\", \"fixed\" )\n\t\t\t};\n\n\t\t// Define position and offset expectations for page elements\n\t\tsupportjQuery.each( expectations, function( id, props ) {\n\t\t\tvar parent = expectations[ props.parent ],\n\n\t\t\t\t// position() relates an element's margin box to its offset parent's padding box\n\t\t\t\tpos = props.pos = {\n\t\t\t\t\ttop: props.top,\n\t\t\t\t\tleft: props.left\n\t\t\t\t},\n\n\t\t\t\t// offset() relates an element's border box to the document origin\n\t\t\t\toffset = props.offset = {\n\t\t\t\t\ttop: pos.top + props.marginTop,\n\t\t\t\t\tleft: pos.left + props.marginLeft\n\t\t\t\t};\n\n\t\t\t// Account for ancestors differently by element position\n\t\t\t// fixed: ignore them\n\t\t\t// absolute: offset includes offsetParent offset+border\n\t\t\t// relative: position includes parent padding (and also position+margin+border when\n\t\t\t//   parent is not offsetParent); offset includes parent offset+border+padding\n\t\t\t// static: same as relative\n\t\t\tfor ( ; parent; parent = expectations[ parent.parent ] ) {\n\t\t\t\t// position:fixed\n\t\t\t\tif ( props.style === \"fixed\" ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// position:absolute bypass\n\t\t\t\tif ( props.style === \"absolute\" && parent.style === \"static\" ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Offset update\n\t\t\t\toffset.top += parent.offset.top + parent.borderTop;\n\t\t\t\toffset.left += parent.offset.left + parent.borderLeft;\n\t\t\t\tif ( props.style !== \"absolute\" ) {\n\t\t\t\t\toffset.top += parent.paddingTop;\n\t\t\t\t\toffset.left += parent.paddingLeft;\n\n\t\t\t\t\t// position:relative or position:static position update\n\t\t\t\t\tpos.top += parent.paddingTop;\n\t\t\t\t\tpos.left += parent.paddingLeft;\n\t\t\t\t\tif ( parent.style === \"static\" ) {\n\t\t\t\t\t\tpos.top += parent.pos.top + parent.marginTop + parent.borderTop;\n\t\t\t\t\t\tpos.left += parent.pos.left + parent.marginLeft + parent.borderLeft;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Viewport scroll affects position:fixed elements, except when the page is\n\t\t\t// unscrollable.\n\t\t\tif ( props.style === \"fixed\" &&\n\t\t\t\t( alwaysScrollable || expectations.documentElement.style !== \"fixed\" ) ) {\n\n\t\t\t\toffset.top += scrollTop;\n\t\t\t\toffset.left += scrollLeft;\n\t\t\t}\n\t\t} );\n\n\t\t// Support: IE<=10 only\n\t\t// Fudge the tests to work around <html>.gBCR() erroneously including margins\n\t\tif ( /MSIE (?:9|10)\\./.test( navigator.userAgent ) ) {\n\t\t\texpectations.documentElement.pos.top -= expectations.documentElement.marginTop -\n\t\t\t\tscrollTop;\n\t\t\texpectations.documentElement.offset.top -= expectations.documentElement.marginTop -\n\t\t\t\tscrollTop;\n\t\t\texpectations.documentElement.pos.left -= expectations.documentElement.marginLeft -\n\t\t\t\tscrollLeft;\n\t\t\texpectations.documentElement.offset.left -= expectations.documentElement.marginLeft -\n\t\t\t\tscrollLeft;\n\t\t\tif ( htmlPos !== \"static\" ) {\n\t\t\t\tdelete expectations.documentElement;\n\t\t\t\tdelete expectations.body;\n\t\t\t\tdelete expectations.relative;\n\t\t\t\tdelete expectations.absolute;\n\t\t\t}\n\t\t}\n\n\t\treturn expectations;\n\t}\n\n\t// Cover each combination of <html> position and <body> position\n\tsupportjQuery.each( POSITION_VALUES, function( _, htmlPos ) {\n\t\tsupportjQuery.each( POSITION_VALUES, function( _, bodyPos ) {\n\t\t\tvar label = \"nonzero box properties - html.\" + htmlPos + \" body.\" + bodyPos;\n\t\t\ttestIframe( label, \"offset/boxes.html\", function( assert, $, win, doc ) {\n\n\t\t\t\t// Define expectations at runtime to properly account for scrolling\n\t\t\t\tvar scrollTop = win.pageYOffset,\n\t\t\t\t\tscrollLeft = win.pageXOffset,\n\t\t\t\t\texpectations = getExpectations( htmlPos, bodyPos, scrollTop, scrollLeft );\n\n\t\t\t\tassert.expect( 3 * Object.keys( expectations ).length );\n\n\t\t\t\t// Setup documentElement and body styles, preserving scroll position\n\t\t\t\tdoc.documentElement.style.position = htmlPos;\n\t\t\t\tdoc.body.style.position = bodyPos;\n\t\t\t\twin.scrollTo( scrollLeft, scrollTop );\n\n\t\t\t\t// Verify expected document offset\n\t\t\t\tsupportjQuery.each( expectations, function( id, descriptor ) {\n\t\t\t\t\tassert.deepEqual(\n\t\t\t\t\t\tsupportjQuery.extend( {}, $( \"#\" + id ).offset() ),\n\t\t\t\t\t\tdescriptor.offset,\n\t\t\t\t\t\t\"jQuery('#\" + id + \"').offset(): top \" + descriptor.offset.top +\n\t\t\t\t\t\t\t\", left \" + descriptor.offset.left );\n\t\t\t\t} );\n\n\t\t\t\t// Verify expected relative position\n\t\t\t\tsupportjQuery.each( expectations, function( id, descriptor ) {\n\t\t\t\t\tassert.deepEqual(\n\t\t\t\t\t\tsupportjQuery.extend( {}, $( \"#\" + id ).position() ),\n\t\t\t\t\t\tdescriptor.pos,\n\t\t\t\t\t\t\"jQuery('#\" + id + \"').position(): top \" + descriptor.pos.top +\n\t\t\t\t\t\t\t\", left \" + descriptor.pos.left );\n\t\t\t\t} );\n\n\t\t\t\t// Verify that values round-trip\n\t\t\t\tsupportjQuery.each( Object.keys( expectations ).reverse(), function( _, id ) {\n\t\t\t\t\tvar $el = $( \"#\" + id ),\n\t\t\t\t\t\tpos = supportjQuery.extend( {}, $el.position() );\n\n\t\t\t\t\t$el.css( { top: pos.top, left: pos.left } );\n\t\t\t\t\tif ( $el.css( \"position\" ) === \"relative\" ) {\n\n\t\t\t\t\t\t// $relative.position() includes parent padding; switch to absolute\n\t\t\t\t\t\t// positioning so we don't double its effects.\n\t\t\t\t\t\t$el.css( { position: \"absolute\" } );\n\t\t\t\t\t}\n\t\t\t\t\tassert.deepEqual( supportjQuery.extend( {}, $el.position() ), pos,\n\t\t\t\t\t\t\"jQuery('#\" + id + \"').position() round-trips\" );\n\n\t\t\t\t\t// TODO Verify .offset(...)\n\t\t\t\t\t// assert.deepEqual( $el.offset( offset ).offset(), offset )\n\t\t\t\t\t// assert.deepEqual( $el.offset( adjustedOffset ).offset(), adjustedOffset )\n\t\t\t\t\t// assert.deepEqual( $new.offset( offset ).offset(), offset )\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\t} );\n} )();\n\nQUnit.test( \"offsetParent\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar body, header, div, area;\n\n\tbody = jQuery( \"body\" ).offsetParent();\n\tassert.equal( body.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( body[ 0 ], document.documentElement, \"The html element is the offsetParent of the body.\" );\n\n\theader = jQuery( \"#qunit\" ).offsetParent();\n\tassert.equal( header.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( header[ 0 ], document.documentElement, \"The html element is the offsetParent of #qunit.\" );\n\n\tjQuery( \"#qunit-fixture\" ).css( \"position\", \"absolute\" );\n\tdiv = jQuery( \"#nothiddendivchild\" ).offsetParent();\n\tassert.equal( div.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( div[ 0 ], document.getElementById( \"qunit-fixture\" ), \"The #qunit-fixture is the offsetParent of #nothiddendivchild.\" );\n\tjQuery( \"#qunit-fixture\" ).css( \"position\", \"\" );\n\n\tjQuery( \"#nothiddendiv\" ).css( \"position\", \"relative\" );\n\n\tdiv = jQuery( \"#nothiddendivchild\" ).offsetParent();\n\tassert.equal( div.length, 1, \"Only one offsetParent found.\" );\n\tassert.equal( div[ 0 ], jQuery( \"#nothiddendiv\" )[ 0 ], \"The div is the offsetParent.\" );\n\n\tdiv = jQuery( \"body, #nothiddendivchild\" ).offsetParent();\n\tassert.equal( div.length, 2, \"Two offsetParent found.\" );\n\tassert.equal( div[ 0 ], document.documentElement, \"The html element is the offsetParent of the body.\" );\n\tassert.equal( div[ 1 ], jQuery( \"#nothiddendiv\" )[ 0 ], \"The div is the offsetParent.\" );\n\n\tarea = jQuery( \"<map name=\\\"imgmap\\\"><area shape=\\\"rect\\\" coords=\\\"0,0,200,50\\\"></map>\" ).appendTo( \"body\" ).find( \"area\" );\n\tassert.equal( area.offsetParent()[ 0 ], document.documentElement, \"The html element is the offsetParent of a map area.\" );\n\tarea.remove();\n\n\tdiv = jQuery( \"<div>\" ).css( { \"position\": \"absolute\" } ).appendTo( \"body\" );\n\tassert.equal( div.offsetParent()[ 0 ], document.documentElement, \"Absolutely positioned div returns html as offset parent, see #12139\" );\n\tdiv.remove();\n} );\n\nQUnit.test( \"fractions (see #7730 and #7885)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tjQuery( \"body\" ).append( \"<div id='fractions'></div>\" );\n\n\tvar result,\n\t\texpected = { \"top\": 1000, \"left\": 1000 },\n\t\tdiv = jQuery( \"#fractions\" );\n\n\tdiv.css( {\n\t\t\"position\": \"absolute\",\n\t\t\"left\": \"1000.7432222px\",\n\t\t\"top\": \"1000.532325px\",\n\t\t\"width\": 100,\n\t\t\"height\": 100\n\t} );\n\n\tdiv.offset( expected );\n\n\tresult = div.offset();\n\n\t// Support: Chrome <=45 - 46\n\t// In recent Chrome these values differ a little.\n\tassert.ok( Math.abs( result.top - expected.top ) < 0.25, \"Check top within 0.25 of expected\" );\n\tassert.ok( Math.abs( result.left - expected.left ) < 0.25, \"Check left within 0.25 of expected\" );\n\n\tdiv.remove();\n} );\n\nQUnit.test( \"iframe scrollTop/Left (see gh-1945)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar ifDoc = jQuery( \"#iframe\" )[ 0 ].contentDocument;\n\n\t// Mobile Safari resize the iframe by its content meaning it's not possible to scroll\n\t// the iframe but only its parent element.\n\t// It seems (not confirmed) in android 4.0 it's not possible to scroll iframes from the code.\n\tif (\n\t\t/iphone os|ipad/i.test( navigator.userAgent ) ||\n\t\t/android 4\\.0/i.test( navigator.userAgent )\n\t) {\n\t\tassert.equal( true, true, \"Can't scroll iframes in this environment\" );\n\t\tassert.equal( true, true, \"Can't scroll iframes in this environment\" );\n\n\t} else {\n\n\t\t// Tests scrollTop/Left with iframes\n\t\tjQuery( \"#iframe\" ).css( \"width\", \"50px\" ).css( \"height\", \"50px\" );\n\t\tifDoc.write( \"<div style='width: 1000px; height: 1000px;'></div>\" );\n\n\t\tjQuery( ifDoc ).scrollTop( 200 );\n\t\tjQuery( ifDoc ).scrollLeft( 500 );\n\n\t\tassert.equal( jQuery( ifDoc ).scrollTop(), 200, \"$($('#iframe')[0].contentDocument).scrollTop()\" );\n\t\tassert.equal( jQuery( ifDoc ).scrollLeft(), 500, \"$($('#iframe')[0].contentDocument).scrollLeft()\" );\n\t}\n} );\n\n} )();\n", "QUnit.module( \"selector\", { afterEach: moduleTeardown } );\n\n/**\n * This test page is for selector tests that require jQuery in order to do the selection\n */\n\nQUnit.test( \"element\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar fixture = document.getElementById( \"qunit-fixture\" );\n\n\tassert.deepEqual( jQuery( \"p\", fixture ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a Node context.\" );\n\tassert.deepEqual( jQuery( \"p\", \"#qunit-fixture\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a selector context.\" );\n\tassert.deepEqual( jQuery( \"p\", jQuery( \"#qunit-fixture\" ) ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a jQuery object context.\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"p\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Finding elements with a context via .find().\" );\n\n\tassert.ok( jQuery( \"#length\" ).length, \"<input name=\\\"length\\\"> cannot be found under IE, see #945\" );\n\tassert.ok( jQuery( \"#lengthtest input\" ).length, \"<input name=\\\"length\\\"> cannot be found under IE, see #945\" );\n\n\t// #7533\n\tassert.equal( jQuery( \"<div id=\\\"A'B~C.D[E]\\\"><p>foo</p></div>\" ).find( \"p\" ).length, 1, \"Find where context root is a node and has an ID with CSS3 meta characters\" );\n} );\n\nQUnit.test( \"id\", function( assert ) {\n\tassert.expect( 26 );\n\n\tvar a;\n\n\tassert.t( \"ID Selector\", \"#body\", [ \"body\" ] );\n\tassert.t( \"ID Selector w/ Element\", \"body#body\", [ \"body\" ] );\n\tassert.t( \"ID Selector w/ Element\", \"ul#first\", [] );\n\tassert.t( \"ID selector with existing ID descendant\", \"#firstp #simon1\", [ \"simon1\" ] );\n\tassert.t( \"ID selector with non-existent descendant\", \"#firstp #foobar\", [] );\n\tassert.t( \"ID selector using UTF8\", \"#\u53f0\u5317Ta\u0301ibe\u030ci\", [ \"\u53f0\u5317Ta\u0301ibe\u030ci\" ] );\n\tassert.t( \"Multiple ID selectors using UTF8\", \"#\u53f0\u5317Ta\u0301ibe\u030ci, #\u53f0\u5317\", [ \"\u53f0\u5317Ta\u0301ibe\u030ci\", \"\u53f0\u5317\" ] );\n\tassert.t( \"Descendant ID selector using UTF8\", \"div #\u53f0\u5317\", [ \"\u53f0\u5317\" ] );\n\tassert.t( \"Child ID selector using UTF8\", \"form > #\u53f0\u5317\", [ \"\u53f0\u5317\" ] );\n\n\tassert.t( \"Escaped ID\", \"#foo\\\\:bar\", [ \"foo:bar\" ] );\n\tassert.t( \"Escaped ID\", \"#test\\\\.foo\\\\[5\\\\]bar\", [ \"test.foo[5]bar\" ] );\n\tassert.t( \"Descendant escaped ID\", \"div #foo\\\\:bar\", [ \"foo:bar\" ] );\n\tassert.t( \"Descendant escaped ID\", \"div #test\\\\.foo\\\\[5\\\\]bar\", [ \"test.foo[5]bar\" ] );\n\tassert.t( \"Child escaped ID\", \"form > #foo\\\\:bar\", [ \"foo:bar\" ] );\n\tassert.t( \"Child escaped ID\", \"form > #test\\\\.foo\\\\[5\\\\]bar\", [ \"test.foo[5]bar\" ] );\n\n\tassert.t( \"ID Selector, child ID present\", \"#form > #radio1\", [ \"radio1\" ] ); // bug #267\n\tassert.t( \"ID Selector, not an ancestor ID\", \"#form #first\", [] );\n\tassert.t( \"ID Selector, not a child ID\", \"#form > #option1a\", [] );\n\n\tassert.t( \"All Children of ID\", \"#foo > *\", [ \"sndp\", \"en\", \"sap\" ] );\n\tassert.t( \"All Children of ID with no children\", \"#firstUL > *\", [] );\n\n\ta = jQuery( \"<a id='backslash\\\\foo'></a>\" ).appendTo( \"#qunit-fixture\" );\n\tassert.t( \"ID Selector contains backslash\", \"#backslash\\\\\\\\foo\", [ \"backslash\\\\foo\" ] );\n\n\tassert.t( \"ID Selector on Form with an input that has a name of 'id'\", \"#lengthtest\", [ \"lengthtest\" ] );\n\n\tassert.t( \"ID selector with non-existent ancestor\", \"#asdfasdf #foobar\", [] ); // bug #986\n\n\tassert.t( \"Underscore ID\", \"#types_all\", [ \"types_all\" ] );\n\tassert.t( \"Dash ID\", \"#qunit-fixture\", [ \"qunit-fixture\" ] );\n\n\tassert.t( \"ID with weird characters in it\", \"#name\\\\+value\", [ \"name+value\" ] );\n} );\n\nQUnit.test( \"class\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.deepEqual( jQuery( \".blog\", document.getElementsByTagName( \"p\" ) ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n\tassert.deepEqual( jQuery( \".blog\", \"p\" ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n\tassert.deepEqual( jQuery( \".blog\", jQuery( \"p\" ) ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n\tassert.deepEqual( jQuery( \"p\" ).find( \".blog\" ).get(), q( \"mark\", \"simon\" ), \"Finding elements with a context.\" );\n} );\n\nQUnit.test( \"name\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar form;\n\n\tassert.t( \"Name selector\", \"input[name=action]\", [ \"text1\" ] );\n\tassert.t( \"Name selector with single quotes\", \"input[name='action']\", [ \"text1\" ] );\n\tassert.t( \"Name selector with double quotes\", \"input[name=\\\"action\\\"]\", [ \"text1\" ] );\n\n\tassert.t( \"Name selector for grouped input\", \"input[name='types[]']\", [ \"types_all\", \"types_anime\", \"types_movie\" ] );\n\n\tform = jQuery( \"<form><input name='id'/></form>\" ).appendTo( \"body\" );\n\tassert.equal( jQuery( \"input\", form[ 0 ] ).length, 1, \"Make sure that rooted queries on forms (with possible expandos) work.\" );\n\n\tform.remove();\n} );\n\nQUnit.test( \"selectors with comma\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar fixture = jQuery( \"<div><h2><span></span></h2><div><p><span></span></p><p></p></div></div>\" );\n\n\tassert.equal( fixture.find( \"h2, div p\" ).filter( \"p\" ).length, 2, \"has to find two <p>\" );\n\tassert.equal( fixture.find( \"h2, div p\" ).filter( \"h2\" ).length, 1, \"has to find one <h2>\" );\n\tassert.equal( fixture.find( \"h2 , div p\" ).filter( \"p\" ).length, 2, \"has to find two <p>\" );\n\tassert.equal( fixture.find( \"h2 , div p\" ).filter( \"h2\" ).length, 1, \"has to find one <h2>\" );\n} );\n\nQUnit.test( \"child and adjacent\", function( assert ) {\n\tassert.expect( 27 );\n\n\tassert.t( \"Child\", \"p > a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child\", \"p> a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child\", \"p >a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child\", \"p>a\", [ \"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\" ] );\n\tassert.t( \"Child w/ Class\", \"p > a.blog\", [ \"mark\", \"simon\" ] );\n\tassert.t( \"All Children\", \"code > *\", [ \"anchor1\", \"anchor2\" ] );\n\tassert.selectInFixture( \"All Grandchildren\", \"p > * > *\", [ \"anchor1\", \"anchor2\" ] );\n\tassert.t( \"Adjacent\", \"p + p\", [ \"ap\", \"en\", \"sap\" ] );\n\tassert.t( \"Adjacent\", \"p#firstp + p\", [ \"ap\" ] );\n\tassert.t( \"Adjacent\", \"p[lang=en] + p\", [ \"sap\" ] );\n\tassert.t( \"Adjacent\", \"a.GROUPS + code + a\", [ \"mark\" ] );\n\tassert.t( \"Element Preceded By\", \"#groups ~ a\", [ \"mark\" ] );\n\tassert.t( \"Element Preceded By\", \"#length ~ input\", [ \"idTest\" ] );\n\tassert.t( \"Element Preceded By\", \"#siblingfirst ~ em\", [ \"siblingnext\", \"siblingthird\" ] );\n\tassert.t( \"Element Preceded By (multiple)\", \"#siblingTest em ~ em ~ em ~ span\", [ \"siblingspan\" ] );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.t( \"Element Preceded By, Containing\", \"#liveHandlerOrder ~ div em:contains('1')\", [ \"siblingfirst\" ] );\n\t\tassert.t( \"Combinators are not skipped when mixing general and specific\", \"#siblingTest > em:contains('x') + em ~ span\", [] );\n\t\tassert.equal( jQuery( \"#listWithTabIndex li:eq(2) ~ li\" ).length, 1, \"Find by general sibling combinator (#8310)\" );\n\t} else {\n\t\tassert.ok( \"skip\", \":contains not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":contains not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":eq not supported in selector-native\" );\n\t}\n\n\tassert.t( \"Multiple combinators selects all levels\", \"#siblingTest em *\", [ \"siblingchild\", \"siblinggrandchild\", \"siblinggreatgrandchild\" ] );\n\tassert.t( \"Multiple combinators selects all levels\", \"#siblingTest > em *\", [ \"siblingchild\", \"siblinggrandchild\", \"siblinggreatgrandchild\" ] );\n\tassert.t( \"Multiple sibling combinators doesn't miss general siblings\", \"#siblingTest > em:first-child + em ~ span\", [ \"siblingspan\" ] );\n\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).length, 1, \"Parent div for next test is found via ID (#8310)\" );\n\tassert.equal( jQuery( \"#__sizzle__\" ).length, 0, \"Make sure the temporary id assigned by sizzle is cleared out (#8310)\" );\n\tassert.equal( jQuery( \"#listWithTabIndex\" ).length, 1, \"Parent div for previous test is still found via ID (#8310)\" );\n\n\tassert.t( \"Verify deep class selector\", \"div.blah > p > a\", [] );\n\tassert.t( \"No element deep selector\", \"div.foo > span > a\", [] );\n\tassert.t( \"Non-existent ancestors\", \".fototab > .thumbnails > a\", [] );\n} );\n\nQUnit.test( \"attributes\", function( assert ) {\n\tassert.expect( 54 );\n\n\tvar attrbad, div, withScript;\n\n\tassert.t( \"Find elements with a tabindex attribute\", \"[tabindex]\", [ \"listWithTabIndex\", \"foodWithNegativeTabIndex\", \"linkWithTabIndex\", \"linkWithNegativeTabIndex\", \"linkWithNoHrefWithTabIndex\", \"linkWithNoHrefWithNegativeTabIndex\" ] );\n\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture a[title]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists (case-insensitive)\", \"#qunit-fixture a[TITLE]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture *[title]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture [title]\", [ \"google\" ] );\n\tassert.t( \"Attribute Exists\", \"#qunit-fixture a[ title ]\", [ \"google\" ] );\n\n\tassert.t( \"Boolean attribute exists\", \"#select2 option[selected]\", [ \"option2d\" ] );\n\tassert.t( \"Boolean attribute equals\", \"#select2 option[selected='selected']\", [ \"option2d\" ] );\n\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[rel='bookmark']\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[rel='bookmark']\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[rel=bookmark]\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[href='http://www.google.com/']\", [ \"google\" ] );\n\tassert.t( \"Attribute Equals\", \"#qunit-fixture a[ rel = 'bookmark' ]\", [ \"simon1\" ] );\n\tassert.t( \"Attribute Equals Number\", \"#qunit-fixture option[value='1']\", [ \"option1b\", \"option2b\", \"option3b\", \"option4b\", \"option5c\" ] );\n\tassert.t( \"Attribute Equals Number\", \"#qunit-fixture li[tabIndex='-1']\", [ \"foodWithNegativeTabIndex\" ] );\n\n\tdocument.getElementById( \"anchor2\" ).href = \"#2\";\n\tassert.t( \"href Attribute\", \"p a[href^='#']\", [ \"anchor2\" ] );\n\tassert.t( \"href Attribute\", \"p a[href*='#']\", [ \"simon1\", \"anchor2\" ] );\n\n\tassert.t( \"for Attribute\", \"form label[for]\", [ \"label-for\" ] );\n\tassert.t( \"for Attribute in form\", \"#form [for=action]\", [ \"label-for\" ] );\n\n\tassert.t( \"Attribute containing []\", \"input[name^='foo[']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name^='foo[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name*='[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name$='bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name$='[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name$='foo[bar]']\", [ \"hidden2\" ] );\n\tassert.t( \"Attribute containing []\", \"input[name*='foo[bar]']\", [ \"hidden2\" ] );\n\n\tassert.t( \"Multiple Attribute Equals\", \"#form input[type='radio'], #form input[type='hidden']\", [ \"radio1\", \"radio2\", \"hidden1\" ] );\n\tassert.t( \"Multiple Attribute Equals\", \"#form input[type='radio'], #form input[type=\\\"hidden\\\"]\", [ \"radio1\", \"radio2\", \"hidden1\" ] );\n\tassert.t( \"Multiple Attribute Equals\", \"#form input[type='radio'], #form input[type=hidden]\", [ \"radio1\", \"radio2\", \"hidden1\" ] );\n\n\tassert.t( \"Attribute selector using UTF8\", \"span[lang=\u4e2d\u6587]\", [ \"\u53f0\u5317\" ] );\n\n\tassert.t( \"Attribute Begins With\", \"a[href ^= 'http://www']\", [ \"google\", \"yahoo\" ] );\n\tassert.t( \"Attribute Ends With\", \"a[href $= 'org/']\", [ \"mark\" ] );\n\tassert.t( \"Attribute Contains\", \"a[href *= 'google']\", [ \"google\", \"groups\" ] );\n\n\tif ( jQuery.find.compile ) {\n\t\tassert.t( \"Empty values\", \"#select1 option[value!='']\", [ \"option1b\", \"option1c\", \"option1d\" ] );\n\t\tassert.t( \"Attribute Is Not Equal\", \"#ap a[hreflang!='en']\", [ \"google\", \"groups\", \"anchor1\" ] );\n\t\tassert.t( \"Select options via :selected\", \"#select1 option:selected\", [ \"option1a\" ] );\n\t\tassert.t( \"Select options via :selected\", \"#select2 option:selected\", [ \"option2d\" ] );\n\t\tassert.t( \"Select options via :selected\", \"#select3 option:selected\", [ \"option3b\", \"option3c\" ] );\n\t\tassert.t( \"Select options via :selected\", \"select[name='select2'] option:selected\", [ \"option2d\" ] );\n\t} else {\n\t\tassert.ok( \"skip\", \"!= not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \"!= not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":selected not supported in selector-native\" );\n\t}\n\n\tassert.t( \"Empty values\", \"#select1 option[value='']\", [ \"option1a\" ] );\n\n\n\tassert.t( \"Grouped Form Elements\", \"input[name='foo[bar]']\", [ \"hidden2\" ] );\n\n\t// Make sure attribute value quoting works correctly. See jQuery #6093; #6428; #13894\n\t// Use seeded results to bypass querySelectorAll optimizations\n\tattrbad = jQuery(\n\t\t\"<input type='hidden' id='attrbad_space' name='foo bar'/>\" +\n\t\t\"<input type='hidden' id='attrbad_dot' value='2' name='foo.baz'/>\" +\n\t\t\"<input type='hidden' id='attrbad_brackets' value='2' name='foo[baz]'/>\" +\n\t\t\"<input type='hidden' id='attrbad_injection' data-attr='foo_baz&#39;]'/>\" +\n\t\t\"<input type='hidden' id='attrbad_quote' data-attr='&#39;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_backslash' data-attr='&#92;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_backslash_quote' data-attr='&#92;&#39;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_backslash_backslash' data-attr='&#92;&#92;'/>\" +\n\t\t\"<input type='hidden' id='attrbad_unicode' data-attr='&#x4e00;'/>\"\n\t).appendTo( \"#qunit-fixture\" ).get();\n\n\tassert.t( \"Underscores don't need escaping\", \"input[id=types_all]\", [ \"types_all\" ] );\n\n\tassert.t( \"input[type=text]\", \"#form input[type=text]\", [ \"text1\", \"text2\", \"hidden2\", \"name\" ] );\n\tassert.t( \"input[type=search]\", \"#form input[type=search]\", [ \"search\" ] );\n\n\twithScript = supportjQuery( \"<div><span><script src=''/></span></div>\" );\n\tassert.ok( withScript.find( \"#moretests script[src]\" ).has( \"script\" ), \"script[src] (jQuery #13777)\" );\n\n\tdiv = document.getElementById( \"foo\" );\n\tassert.t( \"Object.prototype property \\\"constructor\\\" (negative)\", \"[constructor]\", [] );\n\tassert.t( \"Gecko Object.prototype property \\\"watch\\\" (negative)\", \"[watch]\", [] );\n\tdiv.setAttribute( \"constructor\", \"foo\" );\n\tdiv.setAttribute( \"watch\", \"bar\" );\n\tassert.t( \"Object.prototype property \\\"constructor\\\"\", \"[constructor='foo']\", [ \"foo\" ] );\n\tassert.t( \"Gecko Object.prototype property \\\"watch\\\"\", \"[watch='bar']\", [ \"foo\" ] );\n\n\tassert.t( \"Value attribute is retrieved correctly\", \"input[value=Test]\", [ \"text1\", \"text2\" ] );\n\n\tif ( jQuery.find.compile ) {\n\n\t\t// #12600\n\t\tassert.ok(\n\t\t\tjQuery( \"<select value='12600'><option value='option' selected='selected'></option><option value=''></option></select>\" )\n\t\t\t.prop( \"value\", \"option\" )\n\t\t\t.is( \":input[value='12600']\" ),\n\n\t\t\t\":input[value=foo] selects select by attribute\"\n\t\t);\n\t\tassert.ok( jQuery( \"<input type='text' value='12600'/>\" ).prop( \"value\", \"option\" ).is( \":input[value='12600']\" ),\n\t\t\t\":input[value=foo] selects text input by attribute\"\n\t\t);\n\t} else {\n\t\tassert.ok( \"skip\", \":input not supported in selector-native\" );\n\t\tassert.ok( \"skip\", \":input not supported in selector-native\" );\n\t}\n\n\n\t// #11115\n\tassert.ok( jQuery( \"<input type='checkbox' checked='checked'/>\" ).prop( \"checked\", false ).is( \"[checked]\" ),\n\t\t\"[checked] selects by attribute (positive)\"\n\t);\n\tassert.ok( !jQuery( \"<input type='checkbox'/>\" ).prop( \"checked\", true ).is( \"[checked]\" ),\n\t\t\"[checked] selects by attribute (negative)\"\n\t);\n} );\n\nQUnit.test( \"disconnected nodes\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div></div>\" );\n\tassert.equal( $div.is( \"div\" ), true, \"Make sure .is('nodeName') works on disconnected nodes.\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"disconnected nodes\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar $opt = jQuery( \"<option></option>\" ).attr( \"value\", \"whipit\" ).appendTo( \"#qunit-fixture\" ).detach();\n\tassert.equal( $opt.val(), \"whipit\", \"option value\" );\n\tassert.equal( $opt.is( \":selected\" ), false, \"unselected option\" );\n\t$opt.prop( \"selected\", true );\n\tassert.equal( $opt.is( \":selected\" ), true, \"selected option\" );\n} );\n\ntestIframe(\n\t\"attributes - jQuery.attr\",\n\t\"selector/html5_selector.html\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tassert.expect( 38 );\n\n\t\t/**\n\t\t * Returns an array of elements with the given IDs\n\t\t * q & t are added here for the iFrame's context\n\t\t */\n\t\tfunction q() {\n\t\t\tvar r = [],\n\t\t\t\ti = 0;\n\n\t\t\tfor ( ; i < arguments.length; i++ ) {\n\t\t\t\tr.push( document.getElementById( arguments[ i ] ) );\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\n\t\t/**\n\t\t * Asserts that a select matches the given IDs\n\t\t * @example t(\"Check for something\", \"//[a]\", [\"foo\", \"bar\"]);\n\t\t * @param {String} a - Assertion name\n\t\t * @param {String} b - Sizzle selector\n\t\t * @param {Array} c - Array of ids to construct what is expected\n\t\t */\n\t\tfunction t( a, b, c ) {\n\t\t\tvar f = jQuery( b ).get(),\n\t\t\t\ts = \"\",\n\t\t\t\ti = 0;\n\n\t\t\tfor ( ; i < f.length; i++ ) {\n\t\t\t\ts += ( s && \",\" ) + \"'\" + f[ i ].id + \"'\";\n\t\t\t}\n\n\t\t\tassert.deepEqual( f, q.apply( q, c ), a + \" (\" + b + \")\" );\n\t\t}\n\n\t\t// ====== All known boolean attributes, including html5 booleans ======\n\t\t// autobuffer, autofocus, autoplay, async, checked,\n\t\t// compact, controls, declare, defer, disabled,\n\t\t// formnovalidate, hidden, indeterminate (property only),\n\t\t// ismap, itemscope, loop, multiple, muted, nohref, noresize,\n\t\t// noshade, nowrap, novalidate, open, pubdate, readonly, required,\n\t\t// reversed, scoped, seamless, selected, truespeed, visible (skipping visible attribute, which is on a barprop object)\n\n\t\tt( \"Attribute Exists\", \"[autobuffer]\",     [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[autofocus]\",      [ \"text1\" ] );\n\t\tt( \"Attribute Exists\", \"[autoplay]\",       [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[async]\",          [ \"script1\" ] );\n\t\tt( \"Attribute Exists\", \"[checked]\",        [ \"check1\" ] );\n\t\tt( \"Attribute Exists\", \"[compact]\",        [ \"dl\" ] );\n\t\tt( \"Attribute Exists\", \"[controls]\",       [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[declare]\",        [ \"object1\" ] );\n\t\tt( \"Attribute Exists\", \"[defer]\",          [ \"script1\" ] );\n\t\tt( \"Attribute Exists\", \"[disabled]\",       [ \"check1\" ] );\n\t\tt( \"Attribute Exists\", \"[formnovalidate]\", [ \"form1\" ] );\n\t\tt( \"Attribute Exists\", \"[hidden]\",         [ \"div1\" ] );\n\t\tt( \"Attribute Exists\", \"[indeterminate]\",  [] );\n\t\tt( \"Attribute Exists\", \"[ismap]\",          [ \"img1\" ] );\n\t\tt( \"Attribute Exists\", \"[itemscope]\",      [ \"div1\" ] );\n\t\tt( \"Attribute Exists\", \"[loop]\",           [ \"video1\" ] );\n\t\tt( \"Attribute Exists\", \"[multiple]\",       [ \"select1\" ] );\n\t\tt( \"Attribute Exists\", \"[muted]\",          [ \"audio1\" ] );\n\t\tt( \"Attribute Exists\", \"[nohref]\",         [ \"area1\" ] );\n\t\tt( \"Attribute Exists\", \"[noresize]\",       [ \"textarea1\" ] );\n\t\tt( \"Attribute Exists\", \"[noshade]\",        [ \"hr1\" ] );\n\t\tt( \"Attribute Exists\", \"[nowrap]\",         [ \"td1\", \"div1\" ] );\n\t\tt( \"Attribute Exists\", \"[novalidate]\",     [ \"form1\" ] );\n\t\tt( \"Attribute Exists\", \"[open]\",           [ \"details1\" ] );\n\t\tt( \"Attribute Exists\", \"[pubdate]\",        [ \"article1\" ] );\n\t\tt( \"Attribute Exists\", \"[readonly]\",       [ \"text1\" ] );\n\t\tt( \"Attribute Exists\", \"[required]\",       [ \"text1\" ] );\n\t\tt( \"Attribute Exists\", \"[reversed]\",       [ \"ol1\" ] );\n\t\tt( \"Attribute Exists\", \"[scoped]\",         [ \"style1\" ] );\n\t\tt( \"Attribute Exists\", \"[seamless]\",       [ \"iframe1\" ] );\n\t\tt( \"Attribute Exists\", \"[selected]\",       [ \"option1\" ] );\n\t\tt( \"Attribute Exists\", \"[truespeed]\",      [ \"marquee1\" ] );\n\n\t\t// Enumerated attributes (these are not boolean content attributes)\n\t\tjQuery.expandedEach = jQuery.each;\n\t\tjQuery.expandedEach( [ \"draggable\", \"contenteditable\", \"aria-disabled\" ], function( i, val ) {\n\t\t\tt( \"Enumerated attribute\", \"[\" + val + \"]\", [ \"div1\" ] );\n\t\t} );\n\t\tt( \"Enumerated attribute\", \"[spellcheck]\", [ \"span1\" ] );\n\n\t\tt( \"tabindex selector does not retrieve all elements in IE6/7 (#8473)\",\n\t\t\t\"form, [tabindex]\", [ \"form1\", \"text1\" ] );\n\t\tt( \"Improperly named form elements do not interfere with form selections (#9570)\", \"form[name='formName']\", [ \"form1\" ] );\n\t}\n);\n\nQUnit.test( \"jQuery.contains\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar container = document.getElementById( \"nonnodes\" ),\n\t\telement = container.firstChild,\n\t\ttext = element.nextSibling,\n\t\tnonContained = container.nextSibling,\n\t\tdetached = document.createElement( \"a\" );\n\tassert.ok( element && element.nodeType === 1, \"preliminary: found element\" );\n\tassert.ok( text && text.nodeType === 3, \"preliminary: found text\" );\n\tassert.ok( nonContained, \"preliminary: found non-descendant\" );\n\tassert.ok( jQuery.contains( container, element ), \"child\" );\n\tassert.ok( jQuery.contains( container.parentNode, element ), \"grandchild\" );\n\tassert.ok( jQuery.contains( container, text ), \"text child\" );\n\tassert.ok( jQuery.contains( container.parentNode, text ), \"text grandchild\" );\n\tassert.ok( !jQuery.contains( container, container ), \"self\" );\n\tassert.ok( !jQuery.contains( element, container ), \"parent\" );\n\tassert.ok( !jQuery.contains( container, nonContained ), \"non-descendant\" );\n\tassert.ok( !jQuery.contains( container, document ), \"document\" );\n\tassert.ok( !jQuery.contains( container, document.documentElement ), \"documentElement (negative)\" );\n\tassert.ok( !jQuery.contains( container, null ), \"Passing null does not throw an error\" );\n\tassert.ok( jQuery.contains( document, document.documentElement ), \"documentElement (positive)\" );\n\tassert.ok( jQuery.contains( document, element ), \"document container (positive)\" );\n\tassert.ok( !jQuery.contains( document, detached ), \"document container (negative)\" );\n} );\n\nQUnit.test( \"jQuery.uniqueSort\", function( assert ) {\n\tassert.expect( 15 );\n\n\tfunction Arrayish( arr ) {\n\t\tvar i = this.length = arr.length;\n\t\twhile ( i-- ) {\n\t\t\tthis[ i ] = arr[ i ];\n\t\t}\n\t}\n\tArrayish.prototype = {\n\t\tslice: [].slice,\n\t\tsort: [].sort,\n\t\tsplice: [].splice\n\t};\n\n\tvar i, tests,\n\t\tdetached = [],\n\t\tbody = document.body,\n\t\tfixture = document.getElementById( \"qunit-fixture\" ),\n\t\tdetached1 = document.createElement( \"p\" ),\n\t\tdetached2 = document.createElement( \"ul\" ),\n\t\tdetachedChild = detached1.appendChild( document.createElement( \"a\" ) ),\n\t\tdetachedGrandchild = detachedChild.appendChild( document.createElement( \"b\" ) );\n\n\tfor ( i = 0; i < 12; i++ ) {\n\t\tdetached.push( document.createElement( \"li\" ) );\n\t\tdetached[ i ].id = \"detached\" + i;\n\t\tdetached2.appendChild( document.createElement( \"li\" ) ).id = \"detachedChild\" + i;\n\t}\n\n\ttests = {\n\t\t\"Empty\": {\n\t\t\tinput: [],\n\t\t\texpected: []\n\t\t},\n\t\t\"Single-element\": {\n\t\t\tinput: [ fixture ],\n\t\t\texpected: [ fixture ]\n\t\t},\n\t\t\"No duplicates\": {\n\t\t\tinput: [ fixture, body ],\n\t\t\texpected: [ body, fixture ]\n\t\t},\n\t\t\"Duplicates\": {\n\t\t\tinput: [ body, fixture, fixture, body ],\n\t\t\texpected: [ body, fixture ]\n\t\t},\n\t\t\"Detached\": {\n\t\t\tinput: detached.slice( 0 ),\n\t\t\texpected: detached.slice( 0 )\n\t\t},\n\t\t\"Detached children\": {\n\t\t\tinput: [\n\t\t\t\tdetached2.childNodes[ 0 ],\n\t\t\t\tdetached2.childNodes[ 1 ],\n\t\t\t\tdetached2.childNodes[ 2 ],\n\t\t\t\tdetached2.childNodes[ 3 ]\n\t\t\t],\n\t\t\texpected: [\n\t\t\t\tdetached2.childNodes[ 0 ],\n\t\t\t\tdetached2.childNodes[ 1 ],\n\t\t\t\tdetached2.childNodes[ 2 ],\n\t\t\t\tdetached2.childNodes[ 3 ]\n\t\t\t]\n\t\t},\n\t\t\"Attached/detached mixture\": {\n\t\t\tinput: [ detached1, fixture, detached2, document, detachedChild, body, detachedGrandchild ],\n\t\t\texpected: [ document, body, fixture ],\n\t\t\tlength: 3\n\t\t}\n\t};\n\n\tjQuery.each( tests, function( label, test ) {\n\t\tvar length = test.length || test.input.length;\n\t\tassert.deepEqual( jQuery.uniqueSort( test.input ).slice( 0, length ), test.expected, label + \" (array)\" );\n\t\tassert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).slice( 0, length ), test.expected, label + \" (quasi-array)\" );\n\t} );\n\n\tassert.strictEqual( jQuery.unique, jQuery.uniqueSort, \"jQuery.unique() is an alias for jQuery.uniqueSort()\" );\n} );\n\ntestIframe(\n\t\"Sizzle cache collides with multiple Sizzles on a page\",\n\t\"selector/sizzle_cache.html\",\n\tfunction( assert, jQuery, window, document ) {\n\t\tvar $cached = window.$cached;\n\n\t\tassert.expect( 4 );\n\t\tassert.notStrictEqual( jQuery, $cached, \"Loaded two engines\" );\n\t\tassert.deepEqual( $cached( \".test a\" ).get(), [ document.getElementById( \"collision\" ) ], \"Select collision anchor with first sizzle\" );\n\t\tassert.equal( jQuery( \".evil a\" ).length, 0, \"Select nothing with second sizzle\" );\n\t\tassert.equal( jQuery( \".evil a\" ).length, 0, \"Select nothing again with second sizzle\" );\n\t}\n);\n\nQUnit.test( \"Iframe dispatch should not affect jQuery (#13936)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar loaded = false,\n\t\tthrown = false,\n\t\tiframe = document.getElementById( \"iframe\" ),\n\t\tiframeDoc = iframe.contentDocument || iframe.contentWindow.document,\n\t\tdone = assert.async();\n\n\tjQuery( iframe ).on( \"load\", function() {\n\t\tvar form;\n\n\t\ttry {\n\t\t\tiframeDoc = this.contentDocument || this.contentWindow.document;\n\t\t\tform = jQuery( \"#navigate\", iframeDoc )[ 0 ];\n\t\t} catch ( e ) {\n\t\t\tthrown = e;\n\t\t}\n\n\t\tif ( loaded ) {\n\t\t\tassert.strictEqual( thrown, false, \"No error thrown from post-reload jQuery call\" );\n\n\t\t\t// clean up\n\t\t\tjQuery( iframe ).off();\n\n\t\t\tdone();\n\t\t} else {\n\t\t\tloaded = true;\n\t\t\tform.submit();\n\t\t}\n\t} );\n\n\tiframeDoc.open();\n\tiframeDoc.write( \"<body><form id='navigate' action='?'></form></body>\" );\n\tiframeDoc.close();\n} );\n\nQUnit.test( \"Ensure escapeSelector exists (escape tests in Sizzle)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.escapeSelector( \"#foo.bar\" ), \"\\\\#foo\\\\.bar\", \"escapeSelector present\" );\n} );\n", "QUnit.module( \"traversing\", { afterEach: moduleTeardown } );\n\nQUnit.test( \"find(String)\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#foo\" ).find( \".blogTest\" ).text(), \"Yahoo\", \"Basic selector\" );\n} );\n\nQUnit.test( \"find(String) under non-elements\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar j = jQuery( \"#nonnodes\" ).contents();\n\tassert.equal( j.find( \"div\" ).length, 0, \"Check node,textnode,comment to find zero divs\" );\n\tassert.equal( j.find( \"div\" ).addBack().length, 3, \"Check node,textnode,comment to find zero divs, but preserves pushStack\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"find(leading combinator)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"> div\" ).get(), q( \"foo\", \"nothiddendiv\", \"moretests\", \"tabindex-tests\", \"liveHandlerOrder\", \"siblingTest\", \"fx-test-group\" ), \"find child elements\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"> #foo, > #moretests\" ).get(), q( \"foo\", \"moretests\" ), \"find child elements\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).find( \"> #foo > p\" ).get(), q( \"sndp\", \"en\", \"sap\" ), \"find child elements\" );\n\n\tassert.deepEqual( jQuery( \"#siblingTest, #siblingfirst\" ).find( \"+ *\" ).get(), q( \"siblingnext\", \"fx-test-group\" ), \"ensure document order\" );\n} );\n\nQUnit.test( \"find(node|jQuery object)\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar $foo = jQuery( \"#foo\" ),\n\t\t$blog = jQuery( \".blogTest\" ),\n\t\t$first = jQuery( \"#first\" ),\n\t\t$two = $blog.add( $first ),\n\t\t$twoMore = jQuery( \"#ap\" ).add( $blog ),\n\t\t$fooTwo = $foo.add( $blog );\n\n\tassert.equal( $foo.find( $blog ).text(), \"Yahoo\", \"Find with blog jQuery object\" );\n\tassert.equal( $foo.find( $blog[ 0 ] ).text(), \"Yahoo\", \"Find with blog node\" );\n\tassert.equal( $foo.find( $first ).length, 0, \"#first is not in #foo\" );\n\tassert.equal( $foo.find( $first[ 0 ] ).length, 0, \"#first not in #foo (node)\" );\n\tassert.deepEqual( $foo.find( $two ).get(), $blog.get(), \"Find returns only nodes within #foo\" );\n\tassert.deepEqual( $foo.find( $twoMore ).get(), $blog.get(), \"...regardless of order\" );\n\tassert.ok( $fooTwo.find( $blog ).is( \".blogTest\" ), \"Blog is part of the collection, but also within foo\" );\n\tassert.ok( $fooTwo.find( $blog[ 0 ] ).is( \".blogTest\" ), \"Blog is part of the collection, but also within foo(node)\" );\n\n\tassert.equal( $two.find( $foo ).length, 0, \"Foo is not in two elements\" );\n\tassert.equal( $two.find( $foo[ 0 ] ).length, 0, \"Foo is not in two elements(node)\" );\n\tassert.equal( $two.find( $first ).length, 0, \"first is in the collection and not within two\" );\n\tassert.equal( $two.find( $first ).length, 0, \"first is in the collection and not within two(node)\" );\n\n\tassert.equal( $two.find( $foo[ 0 ] ).addBack().length, 2, \"find preserves the pushStack, see #12009\" );\n} );\n\nQUnit.test( \"is(String|undefined)\", function( assert ) {\n\tassert.expect( 23 );\n\tassert.ok( jQuery( \"#form\" ).is( \"form\" ), \"Check for element: A form must be a form\" );\n\tassert.ok( !jQuery( \"#form\" ).is( \"div\" ), \"Check for element: A form is not a div\" );\n\tassert.ok( jQuery( \"#mark\" ).is( \".blog\" ), \"Check for class: Expected class 'blog'\" );\n\tassert.ok( !jQuery( \"#mark\" ).is( \".link\" ), \"Check for class: Did not expect class 'link'\" );\n\tassert.ok( jQuery( \"#simon\" ).is( \".blog.link\" ), \"Check for multiple classes: Expected classes 'blog' and 'link'\" );\n\tassert.ok( !jQuery( \"#simon\" ).is( \".blogTest\" ), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"en\\\"]\" ), \"Check for attribute: Expected attribute lang to be 'en'\" );\n\tassert.ok( !jQuery( \"#en\" ).is( \"[lang=\\\"de\\\"]\" ), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\" );\n\tassert.ok( jQuery( \"#text1\" ).is( \"[type=\\\"text\\\"]\" ), \"Check for attribute: Expected attribute type to be 'text'\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( \"[type=\\\"radio\\\"]\" ), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\" );\n\tassert.ok( jQuery( \"#text2\" ).is( \":disabled\" ), \"Check for pseudoclass: Expected to be disabled\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( \":disabled\" ), \"Check for pseudoclass: Expected not disabled\" );\n\tassert.ok( jQuery( \"#radio2\" ).is( \":checked\" ), \"Check for pseudoclass: Expected to be checked\" );\n\tassert.ok( !jQuery( \"#radio1\" ).is( \":checked\" ), \"Check for pseudoclass: Expected not checked\" );\n\n\tassert.ok( !jQuery( \"#foo\" ).is( 0 ), \"Expected false for an invalid expression - 0\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( null ), \"Expected false for an invalid expression - null\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( \"\" ), \"Expected false for an invalid expression - \\\"\\\"\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( undefined ), \"Expected false for an invalid expression - undefined\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( { plain: \"object\" } ), \"Check passing invalid object\" );\n\n\t// test is() with comma-separated expressions\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"en\\\"],[lang=\\\"de\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"de\\\"],[lang=\\\"en\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"en\\\"] , [lang=\\\"de\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n\tassert.ok( jQuery( \"#en\" ).is( \"[lang=\\\"de\\\"] , [lang=\\\"en\\\"]\" ), \"Comma-separated; Check for lang attribute: Expect en or de\" );\n} );\n\nQUnit.test( \"is() against non-elements (#10178)\", function( assert ) {\n\tassert.expect( 14 );\n\n\tvar label, i, test,\n\t\tcollection = jQuery( document ),\n\t\ttests = [ \"a\", \"*\" ],\n\t\tnonelements = {\n\t\t\ttext: document.createTextNode( \"\" ),\n\t\t\tcomment: document.createComment( \"\" ),\n\t\t\tdocument: document,\n\t\t\twindow: window,\n\t\t\tarray: [],\n\t\t\t\"plain object\": {},\n\t\t\t\"function\": function() {}\n\t\t};\n\n\tfor ( label in nonelements ) {\n\t\tcollection[ 0 ] = nonelements[ label ];\n\t\tfor ( i = 0; i < tests.length; i++ ) {\n\t\t\ttest = tests[ i ];\n\t\t\tassert.ok( !collection.is( test ), label + \" does not match \\\"\" + test + \"\\\"\" );\n\t\t}\n\t}\n} );\n\nQUnit.test( \"is(jQuery)\", function( assert ) {\n\tassert.expect( 19 );\n\tassert.ok( jQuery( \"#form\" ).is( jQuery( \"form\" ) ), \"Check for element: A form is a form\" );\n\tassert.ok( !jQuery( \"#form\" ).is( jQuery( \"div\" ) ), \"Check for element: A form is not a div\" );\n\tassert.ok( jQuery( \"#mark\" ).is( jQuery( \".blog\" ) ), \"Check for class: Expected class 'blog'\" );\n\tassert.ok( !jQuery( \"#mark\" ).is( jQuery( \".link\" ) ), \"Check for class: Did not expect class 'link'\" );\n\tassert.ok( jQuery( \"#simon\" ).is( jQuery( \".blog.link\" ) ), \"Check for multiple classes: Expected classes 'blog' and 'link'\" );\n\tassert.ok( !jQuery( \"#simon\" ).is( jQuery( \".blogTest\" ) ), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\" );\n\tassert.ok( jQuery( \"#en\" ).is( jQuery( \"[lang=\\\"en\\\"]\" ) ), \"Check for attribute: Expected attribute lang to be 'en'\" );\n\tassert.ok( !jQuery( \"#en\" ).is( jQuery( \"[lang=\\\"de\\\"]\" ) ), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\" );\n\tassert.ok( jQuery( \"#text1\" ).is( jQuery( \"[type=\\\"text\\\"]\" ) ), \"Check for attribute: Expected attribute type to be 'text'\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( jQuery( \"[type=\\\"radio\\\"]\" ) ), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\" );\n\tassert.ok( !jQuery( \"#text1\" ).is( jQuery( \"input:disabled\" ) ), \"Check for pseudoclass: Expected not disabled\" );\n\tassert.ok( jQuery( \"#radio2\" ).is( jQuery( \"input:checked\" ) ), \"Check for pseudoclass: Expected to be checked\" );\n\tassert.ok( !jQuery( \"#radio1\" ).is( jQuery( \"input:checked\" ) ), \"Check for pseudoclass: Expected not checked\" );\n\n\t// Some raw elements\n\tassert.ok( jQuery( \"#form\" ).is( jQuery( \"#qunit-fixture form\" )[ 0 ] ), \"Check for element: A form is a form\" );\n\tassert.ok( !jQuery( \"#form\" ).is( jQuery( \"div\" )[ 0 ] ), \"Check for element: A form is not a div\" );\n\tassert.ok( jQuery( \"#mark\" ).is( jQuery( \".blog\" )[ 0 ] ), \"Check for class: Expected class 'blog'\" );\n\tassert.ok( !jQuery( \"#mark\" ).is( jQuery( \".link\" )[ 0 ] ), \"Check for class: Did not expect class 'link'\" );\n\tassert.ok( jQuery( \"#simon\" ).is( jQuery( \".blog.link\" )[ 0 ] ), \"Check for multiple classes: Expected classes 'blog' and 'link'\" );\n\tassert.ok( !jQuery( \"#simon\" ).is( jQuery( \".blogTest\" )[ 0 ] ), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"is() with :has() selectors\", function( assert ) {\n\tassert.expect( 6 );\n\n\tassert.ok( jQuery( \"#foo\" ).is( \":has(p)\" ), \"Check for child: Expected a child 'p' element\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( \":has(ul)\" ), \"Check for child: Did not expect 'ul' element\" );\n\tassert.ok( jQuery( \"#foo\" ).is( \":has(p):has(a):has(code)\" ), \"Check for childs: Expected 'p', 'a' and 'code' child elements\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( \":has(p):has(a):has(code):has(ol)\" ), \"Check for childs: Expected 'p', 'a' and 'code' child elements, but no 'ol'\" );\n\n\tassert.ok( jQuery( \"#foo\" ).is( jQuery( \"div:has(p)\" ) ), \"Check for child: Expected a child 'p' element\" );\n\tassert.ok( !jQuery( \"#foo\" ).is( jQuery( \"div:has(ul)\" ) ), \"Check for child: Did not expect 'ul' element\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"is() with positional selectors\", function( assert ) {\n\tassert.expect( 27 );\n\n\tvar\n\t\tposp = jQuery(\n\t\t\t\"<p id='posp'><a class='firsta' href='#'><em>first</em></a>\" +\n\t\t\t\"<a class='seconda' href='#'><b>test</b></a><em></em></p>\"\n\t\t).appendTo( \"#qunit-fixture\" ),\n\t\tisit = function( sel, match, expect ) {\n\t\t\tassert.equal(\n\t\t\t\tjQuery( sel ).is( match ),\n\t\t\t\texpect,\n\t\t\t\t\"jQuery('\" + sel + \"').is('\" + match + \"')\"\n\t\t\t);\n\t\t};\n\n\tisit( \"#posp\", \"p:last\", true );\n\tisit( \"#posp\", \"#posp:first\", true );\n\tisit( \"#posp\", \"#posp:eq(2)\", false );\n\tisit( \"#posp\", \"#posp a:first\", false );\n\n\tisit( \"#posp .firsta\", \"#posp a:first\", true );\n\tisit( \"#posp .firsta\", \"#posp a:last\", false );\n\tisit( \"#posp .firsta\", \"#posp a:even\", true );\n\tisit( \"#posp .firsta\", \"#posp a:odd\", false );\n\tisit( \"#posp .firsta\", \"#posp a:eq(0)\", true );\n\tisit( \"#posp .firsta\", \"#posp a:eq(9)\", false );\n\tisit( \"#posp .firsta\", \"#posp em:eq(0)\", false );\n\tisit( \"#posp .firsta\", \"#posp em:first\", false );\n\tisit( \"#posp .firsta\", \"#posp:first\", false );\n\n\tisit( \"#posp .seconda\", \"#posp a:first\", false );\n\tisit( \"#posp .seconda\", \"#posp a:last\", true );\n\tisit( \"#posp .seconda\", \"#posp a:gt(0)\", true );\n\tisit( \"#posp .seconda\", \"#posp a:lt(5)\", true );\n\tisit( \"#posp .seconda\", \"#posp a:lt(1)\", false );\n\n\tisit( \"#posp em\", \"#posp a:eq(0) em\", true );\n\tisit( \"#posp em\", \"#posp a:lt(1) em\", true );\n\tisit( \"#posp em\", \"#posp a:gt(1) em\", false );\n\tisit( \"#posp em\", \"#posp a:first em\", true );\n\tisit( \"#posp em\", \"#posp a em:last\", true );\n\tisit( \"#posp em\", \"#posp a em:eq(2)\", false );\n\n\tassert.ok( jQuery( \"#option1b\" ).is( \"#select1 option:not(:first)\" ), \"POS inside of :not() (#10970)\" );\n\n\tassert.ok( jQuery( posp[ 0 ] ).is( \"p:last\" ), \"context constructed from a single node (#13797)\" );\n\tassert.ok( !jQuery( posp[ 0 ] ).find( \"#firsta\" ).is( \"a:first\" ), \"context derived from a single node (#13797)\" );\n} );\n\nQUnit.test( \"index()\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery( \"#text2\" ).index(), 2, \"Returns the index of a child amongst its siblings\" );\n\n\tassert.equal( jQuery( \"<div></div>\" ).index(), -1, \"Node without parent returns -1\" );\n} );\n\nQUnit.test( \"index(Object|String|undefined)\", function( assert ) {\n\tassert.expect( 16 );\n\n\tvar elements = jQuery( [ window, document ] ),\n\t\tinputElements = jQuery( \"#radio1,#radio2,#check1,#check2\" );\n\n\t// Passing a node\n\tassert.equal( elements.index( window ), 0, \"Check for index of elements\" );\n\tassert.equal( elements.index( document ), 1, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"radio1\" ) ), 0, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"radio2\" ) ), 1, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"check1\" ) ), 2, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( document.getElementById( \"check2\" ) ), 3, \"Check for index of elements\" );\n\tassert.equal( inputElements.index( window ), -1, \"Check for not found index\" );\n\tassert.equal( inputElements.index( document ), -1, \"Check for not found index\" );\n\n\t// Passing a jQuery object\n\t// enabled since [5500]\n\tassert.equal( elements.index( elements ), 0, \"Pass in a jQuery object\" );\n\tassert.equal( elements.index( elements.eq( 1 ) ), 1, \"Pass in a jQuery object\" );\n\tassert.equal( jQuery( \"#form input[type='radio']\" ).index( jQuery( \"#radio2\" ) ), 1, \"Pass in a jQuery object\" );\n\n\t// Passing a selector or nothing\n\t// enabled since [6330]\n\tassert.equal( jQuery( \"#text2\" ).index(), 2, \"Check for index amongst siblings\" );\n\tassert.equal( jQuery( \"#form\" ).children().eq( 4 ).index(), 4, \"Check for index amongst siblings\" );\n\tassert.equal( jQuery( \"#radio2\" ).index( \"#form input[type='radio']\" ), 1, \"Check for index within a selector\" );\n\tassert.equal( jQuery( \"#form input[type='radio']\" ).index( jQuery( \"#radio2\" ) ), 1, \"Check for index within a selector\" );\n\tassert.equal( jQuery( \"#radio2\" ).index( \"#form input[type='text']\" ), -1, \"Check for index not found within a selector\" );\n} );\n\nQUnit.test( \"filter(Selector|undefined)\", function( assert ) {\n\tassert.expect( 9 );\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( \":checked\" ).get(), q( \"radio2\", \"check1\" ), \"filter(String)\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( \"#ap, #sndp\" ).get(), q( \"ap\", \"sndp\" ), \"filter('String, String')\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( \"#ap,#sndp\" ).get(), q( \"ap\", \"sndp\" ), \"filter('String,String')\" );\n\n\tassert.deepEqual( jQuery( \"p\" ).filter( null ).get(),      [], \"filter(null) should return an empty jQuery object\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( undefined ).get(), [], \"filter(undefined) should return an empty jQuery object\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( 0 ).get(),         [], \"filter(0) should return an empty jQuery object\" );\n\tassert.deepEqual( jQuery( \"p\" ).filter( \"\" ).get(),        [], \"filter('') should return an empty jQuery object\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tvar j = jQuery( \"#nonnodes\" ).contents();\n\tassert.equal( j.filter( \"span\" ).length, 1, \"Check node,textnode,comment to filter the one span\" );\n\tassert.equal( j.filter( \"[name]\" ).length, 0, \"Check node,textnode,comment to filter the one span\" );\n} );\n\nQUnit.test( \"filter(Function)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).filter( function() {\n\t\treturn !jQuery( \"a\", this ).length;\n\t} ).get(), q( \"sndp\", \"first\" ), \"filter(Function)\" );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).filter( function( i, elem ) { return !jQuery( \"a\", elem ).length; } ).get(), q( \"sndp\", \"first\" ), \"filter(Function) using arg\" );\n} );\n\nQUnit.test( \"filter(Element)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar element = document.getElementById( \"text1\" );\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( element ).get(), q( \"text1\" ), \"filter(Element)\" );\n} );\n\nQUnit.test( \"filter(Array)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elements = [ document.getElementById( \"text1\" ) ];\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( elements ).get(), q( \"text1\" ), \"filter(Element)\" );\n} );\n\nQUnit.test( \"filter(jQuery)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar elements = jQuery( \"#text1\" );\n\tassert.deepEqual( jQuery( \"#form input\" ).filter( elements ).get(), q( \"text1\" ), \"filter(Element)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"filter() with positional selectors\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar filterit = function( sel, filter, length ) {\n\t\tassert.equal( jQuery( sel ).filter( filter ).length, length, \"jQuery( \" + sel + \" ).filter( \" + filter + \" )\" );\n\t};\n\n\tjQuery( \"\" +\n\t\t\"<p id='posp'>\" +\n\t\t\t\"<a class='firsta' href='#'>\" +\n\t\t\t\t\"<em>first</em>\" +\n\t\t\t\"</a>\" +\n\t\t\t\"<a class='seconda' href='#'>\" +\n\t\t\t\t\"<b>test</b>\" +\n\t\t\t\"</a>\" +\n\t\t\t\"<em></em>\" +\n\t\t\"</p>\" ).appendTo( \"#qunit-fixture\" );\n\n\tfilterit( \"#posp\", \"#posp:first\", 1 );\n\tfilterit( \"#posp\", \"#posp:eq(2)\", 0 );\n\tfilterit( \"#posp\", \"#posp a:first\", 0 );\n\n\t// Keep in mind this is within the selection and\n\t// not in relation to other elements (.is() is a different story)\n\tfilterit( \"#posp .firsta\", \"#posp a:first\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:last\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:last-child\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp a:even\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:odd\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp a:eq(0)\", 1 );\n\tfilterit( \"#posp .firsta\", \"#posp a:eq(9)\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp em:eq(0)\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp em:first\", 0 );\n\tfilterit( \"#posp .firsta\", \"#posp:first\", 0 );\n\n\tfilterit( \"#posp .seconda\", \"#posp a:first\", 1 );\n\tfilterit( \"#posp .seconda\", \"#posp em:first\", 0 );\n\tfilterit( \"#posp .seconda\", \"#posp a:last\", 1 );\n\tfilterit( \"#posp .seconda\", \"#posp a:gt(0)\", 0 );\n\tfilterit( \"#posp .seconda\", \"#posp a:lt(5)\", 1 );\n\tfilterit( \"#posp .seconda\", \"#posp a:lt(1)\", 1 );\n} );\n\nQUnit.test( \"closest()\", function( assert ) {\n\tassert.expect( 14 );\n\n\tvar jq;\n\n\tassert.deepEqual( jQuery( \"body\" ).closest( \"body\" ).get(), q( \"body\" ), \"closest(body)\" );\n\tassert.deepEqual( jQuery( \"body\" ).closest( \"html\" ).get(), q( \"html\" ), \"closest(html)\" );\n\tassert.deepEqual( jQuery( \"body\" ).closest( \"div\" ).get(), [], \"closest(div)\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).closest( \"span,#html\" ).get(), q( \"html\" ), \"closest(span,#html)\" );\n\n\t// Test .closest() limited by the context\n\tjq = jQuery( \"#nothiddendivchild\" );\n\tassert.deepEqual( jq.closest( \"html\", document.body ).get(), [], \"Context limited.\" );\n\tassert.deepEqual( jq.closest( \"body\", document.body ).get(), [], \"Context limited.\" );\n\tassert.deepEqual( jq.closest( \"#nothiddendiv\", document.body ).get(), q( \"nothiddendiv\" ), \"Context not reached.\" );\n\n\t//Test that .closest() returns unique'd set\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).closest( \"#qunit-fixture\" ).length, 1, \"Closest should return a unique set\" );\n\n\t// Test on disconnected node\n\tassert.equal( jQuery( \"<div><p></p></div>\" ).find( \"p\" ).closest( \"table\" ).length, 0, \"Make sure disconnected closest work.\" );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#firstp\" ).closest( q( \"qunit-fixture\" ) ).get(),\n\t\tq( \"qunit-fixture\" ),\n\t\t\"Non-string match target\"\n\t);\n\n\t// Bug #7369\n\tassert.equal( jQuery( \"<div foo='bar'></div>\" ).closest( \"[foo]\" ).length, 1, \"Disconnected nodes with attribute selector\" );\n\tassert.equal( jQuery( \"<div>text</div>\" ).closest( \"[lang]\" ).length, 0, \"Disconnected nodes with text and non-existent attribute selector\" );\n\n\tassert.ok( !jQuery( document ).closest( \"#foo\" ).length, \"Calling closest on a document fails silently\" );\n\n\tjq = jQuery( \"<div>text</div>\" );\n\tassert.deepEqual( jq.contents().closest( \"*\" ).get(), jq.get(), \"Text node input (#13332)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"closest() with positional selectors\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture\" ).closest( \"div:first\" ).get(), [],\n\t\t\"closest(div:first)\" );\n\tassert.deepEqual( jQuery( \"#qunit-fixture div\" ).closest( \"body:first div:last\" ).get(), [],\n\t\t\"closest(body:first div:last)\" );\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture div\" ).closest( \"body:first div:last\", document ).get(),\n\t\t[],\n\t\t\"closest(body:first div:last, document)\"\n\t);\n} );\n\nQUnit.test( \"closest(jQuery)\", function( assert ) {\n\tassert.expect( 8 );\n\tvar $child = jQuery( \"#nothiddendivchild\" ),\n\t\t$parent = jQuery( \"#nothiddendiv\" ),\n\t\t$sibling = jQuery( \"#foo\" ),\n\t\t$body = jQuery( \"body\" );\n\tassert.ok( $child.closest( $parent ).is( \"#nothiddendiv\" ), \"closest( jQuery('#nothiddendiv') )\" );\n\tassert.ok( $child.closest( $parent[ 0 ] ).is( \"#nothiddendiv\" ), \"closest( jQuery('#nothiddendiv') ) :: node\" );\n\tassert.ok( $child.closest( $child ).is( \"#nothiddendivchild\" ), \"child is included\" );\n\tassert.ok( $child.closest( $child[ 0 ] ).is( \"#nothiddendivchild\" ), \"child is included  :: node\" );\n\tassert.equal( $child.closest( document.createElement( \"div\" ) ).length, 0, \"created element is not related\" );\n\tassert.equal( $child.closest( $sibling ).length, 0, \"Sibling not a parent of child\" );\n\tassert.equal( $child.closest( $sibling[ 0 ] ).length, 0, \"Sibling not a parent of child :: node\" );\n\tassert.ok( $child.closest( $body.add( $parent ) ).is( \"#nothiddendiv\" ), \"Closest ancestor retrieved.\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"not(Selector)\", function( assert ) {\n\tassert.expect( 7 );\n\tassert.equal( jQuery( \"#qunit-fixture > p#ap > a\" ).not( \"#google\" ).length, 2, \"not('selector')\" );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture p\" ).not( \".result\" ).get(),\n\t\tq(\n\t\t\t\"firstp\",\n\t\t\t\"ap\",\n\t\t\t\"sndp\",\n\t\t\t\"en\",\n\t\t\t\"sap\",\n\t\t\t\"first\"\n\t\t),\n\t\t\"not('.class')\"\n\t);\n\n\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture p\" ).not( \"#ap, #sndp, .result\" ).get(),\n\t\tq(\n\t\t\t\"firstp\",\n\t\t\t\"en\",\n\t\t\t\"sap\",\n\t\t\t\"first\"\n\t\t),\n\t\t\"not('selector, selector')\"\n\t);\n\n\tassert.deepEqual( jQuery( \"#ap *\" ).not( \"code\" ).get(), q( \"google\", \"groups\", \"anchor1\", \"mark\" ), \"not('tag selector')\" );\n\tassert.deepEqual( jQuery( \"#ap *\" ).not( \"code, #mark\" ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"not('tag, ID selector')\" );\n\tassert.deepEqual( jQuery( \"#ap *\" ).not( \"#mark, code\" ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"not('ID, tag selector')\" );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#form option\" ).not( \"option.emptyopt:contains('Nothing'),optgroup *,[value='1']\" ).get(),\n\t\tq( \"option1c\", \"option1d\", \"option2c\", \"option2d\", \"option3c\", \"option3d\", \"option3e\", \"option4d\", \"option4e\", \"option5a\", \"option5b\" ),\n\t\t\"not('complex selector')\"\n\t);\n} );\n\nQUnit.test( \"not(undefined)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar all = jQuery( \"p\" ).get();\n\tassert.deepEqual( jQuery( \"p\" ).not( null ).get(),      all, \"not(null) should have no effect\" );\n\tassert.deepEqual( jQuery( \"p\" ).not( undefined ).get(), all, \"not(undefined) should have no effect\" );\n\tassert.deepEqual( jQuery( \"p\" ).not( 0 ).get(),         all, \"not(0) should have no effect\" );\n\tassert.deepEqual( jQuery( \"p\" ).not( \"\" ).get(),        all, \"not('') should have no effect\" );\n} );\n\nQUnit.test( \"not(Element)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar selects = jQuery( \"#form select\" );\n\tassert.deepEqual( selects.not( selects[ 1 ] ).get(), q( \"select1\", \"select3\", \"select4\", \"select5\" ), \"filter out DOM element\" );\n} );\n\nQUnit.test( \"not(Function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).not( function() { return jQuery( \"a\", this ).length; } ).get(), q( \"sndp\", \"first\" ), \"not(Function)\" );\n} );\n\nQUnit.test( \"not(Array)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery( \"#qunit-fixture > p#ap > a\" ).not( document.getElementById( \"google\" ) ).length, 2, \"not(DOMElement)\" );\n\tassert.equal( jQuery( \"p\" ).not( document.getElementsByTagName( \"p\" ) ).length, 0, \"not(Array-like DOM collection)\" );\n} );\n\nQUnit.test( \"not(jQuery)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#qunit-fixture p\" ).not( jQuery( \"#ap, #sndp, .result\" ) ).get(),\n\t\tq( \"firstp\", \"en\", \"sap\", \"first\" ),\n\t\t\"not(jQuery)\"\n\t);\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"not(Selector) excludes non-element nodes (gh-2808)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar mixedContents = jQuery( \"#nonnodes\" ).contents(),\n\t\tchildElements = q( \"nonnodesElement\" );\n\n\tassert.deepEqual( mixedContents.not( \"*\" ).get(), [], \"not *\" );\n\tassert.deepEqual( mixedContents.not( \"[id=a],[id=b]\" ).get(), childElements, \"not [id=a],[id=b]\" );\n\tassert.deepEqual( mixedContents.not( \"[id=a],*,[id=b]\" ).get(), [], \"not [id=a],*,[id=b]\" );\n} );\n\nQUnit.test( \"not(arraylike) passes non-element nodes (gh-3226)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar mixedContents = jQuery( \"<span id='nonnodesElement'>hi</span> there <!-- mon ami -->\" ),\n\t\tmixedLength = mixedContents.length,\n\t\tfirstElement = mixedContents.first();\n\n\tassert.deepEqual( mixedContents.not( mixedContents ).get(), [], \"not everything\" );\n\tassert.deepEqual( mixedContents.not( firstElement ).length, mixedLength - 1, \"not firstElement\" );\n\tassert.deepEqual( mixedContents.not( [ firstElement[ 0 ].nextSibling ] ).length, mixedLength - 1, \"not textnode array\" );\n\tassert.deepEqual( mixedContents.not( firstElement[ 0 ].nextSibling ).length, mixedLength - 1, \"not textnode\" );\n\tassert.deepEqual( mixedContents.not( document.body ).get(), mixedContents.get(), \"not with unmatched element\" );\n} );\n\nQUnit.test( \"has(Element)\", function( assert ) {\n\tassert.expect( 3 );\n\tvar obj, detached, multipleParent;\n\n\tobj = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" )[ 0 ] );\n\tassert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have the element as a descendant\" );\n\n\tdetached = jQuery( \"<a><b><i></i></b></a>\" );\n\tassert.deepEqual( detached.has( detached.find( \"i\" )[ 0 ] ).get(), detached.get(), \"...Even when detached\" );\n\n\tmultipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" )[ 0 ] );\n\tassert.deepEqual( multipleParent.get(), q( \"qunit-fixture\" ), \"Does not include elements that do not have the element as a descendant\" );\n} );\n\nQUnit.test( \"has(Selector)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar obj, detached, multipleParent, multipleHas;\n\n\tobj = jQuery( \"#qunit-fixture\" ).has( \"#sndp\" );\n\tassert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element matching the selector as a descendant\" );\n\n\tdetached = jQuery( \"<a><b><i></i></b></a>\" );\n\tassert.deepEqual( detached.has( \"i\" ).get(), detached.get(), \"...Even when detached\" );\n\n\tmultipleParent = jQuery( \"#qunit-fixture, #header\" ).has( \"#sndp\" );\n\tassert.deepEqual( multipleParent.get(), q( \"qunit-fixture\" ), \"Does not include elements that do not have the element as a descendant\" );\n\n\tmultipleParent = jQuery( \"#select1, #select2, #select3\" ).has( \"#option1a, #option3a\" );\n\tassert.deepEqual( multipleParent.get(), q( \"select1\", \"select3\" ), \"Multiple contexts are checks correctly\" );\n\n\tmultipleHas = jQuery( \"#qunit-fixture\" ).has( \"#sndp, #first\" );\n\tassert.deepEqual( multipleHas.get(), q( \"qunit-fixture\" ), \"Only adds elements once\" );\n} );\n\nQUnit.test( \"has(Arrayish)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar simple, detached, multipleParent, multipleHas;\n\n\tsimple = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" ) );\n\tassert.deepEqual( simple.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element in the jQuery list as a descendant\" );\n\n\tdetached = jQuery( \"<a><b><i></i></b></a>\" );\n\tassert.deepEqual( detached.has( detached.find( \"i\" ) ).get(), detached.get(), \"...Even when detached\" );\n\n\tmultipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" ) );\n\tassert.deepEqual( multipleParent.get(), q( \"qunit-fixture\" ), \"Does not include elements that do not have an element in the jQuery list as a descendant\" );\n\n\tmultipleHas = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp, #first\" ) );\n\tassert.deepEqual( multipleHas.get(), q( \"qunit-fixture\" ), \"Only adds elements once\" );\n} );\n\nQUnit.test( \"addBack()\", function( assert ) {\n\tassert.expect( 5 );\n\tassert.deepEqual( jQuery( \"#en\" ).siblings().addBack().get(), q( \"sndp\", \"en\", \"sap\" ), \"Check for siblings and self\" );\n\tassert.deepEqual( jQuery( \"#foo\" ).children().addBack().get(), q( \"foo\", \"sndp\", \"en\", \"sap\" ), \"Check for children and self\" );\n\tassert.deepEqual( jQuery( \"#sndp, #en\" ).parent().addBack().get(), q( \"foo\", \"sndp\", \"en\" ), \"Check for parent and self\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parents( \"p, div\" ).addBack().get(), q( \"qunit-fixture\", \"ap\", \"groups\" ), \"Check for parents and self\" );\n\tassert.deepEqual( jQuery( \"#select1 > option\" ).filter( \":first-child\" ).addBack( \":last-child\" ).get(), q( \"option1a\", \"option1d\" ), \"Should contain the last elems plus the *filtered* prior set elements\" );\n} );\n\nQUnit.test( \"siblings([String])\", function( assert ) {\n\tassert.expect( 6 );\n\tassert.deepEqual( jQuery( \"#en\" ).siblings().get(), q( \"sndp\", \"sap\" ), \"Check for siblings\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).siblings().get(), q( \"nonnodesElement\" ), \"Check for text node siblings\" );\n\tassert.deepEqual( jQuery( \"#foo\" ).siblings( \"form, b\" ).get(), q( \"form\", \"floatTest\", \"lengthtest\", \"name-tests\", \"testForm\" ), \"Check for multiple filters\" );\n\n\tvar set = q( \"sndp\", \"en\", \"sap\" );\n\tassert.deepEqual( jQuery( \"#en, #sndp\" ).siblings().get(), set, \"Check for unique results from siblings\" );\n\tassert.deepEqual( jQuery( \"#option5a\" ).siblings( \"option[data-attr]\" ).get(), q( \"option5c\" ), \"Has attribute selector in siblings (#9261)\" );\n\tassert.equal( jQuery( \"<a></a>\" ).siblings().length, 0, \"Detached elements have no siblings (#11370)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"siblings([String])\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.deepEqual( jQuery( \"#sndp\" ).siblings( \":has(code)\" ).get(), q( \"sap\" ), \"Check for filtered siblings (has code child element)\" );\n\tassert.deepEqual( jQuery( \"#sndp\" ).siblings( \":has(a)\" ).get(), q( \"en\", \"sap\" ), \"Check for filtered siblings (has anchor child element)\" );\n} );\n\nQUnit.test( \"children([String])\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.deepEqual( jQuery( \"#foo\" ).children().get(), q( \"sndp\", \"en\", \"sap\" ), \"Check for children\" );\n\tassert.deepEqual( jQuery( \"#foo\" ).children( \"#en, #sap\" ).get(), q( \"en\", \"sap\" ), \"Check for multiple filters\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"children([String])\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#foo\" ).children( \":has(code)\" ).get(), q( \"sndp\", \"sap\" ), \"Check for filtered children\" );\n} );\n\nQUnit.test( \"parent([String])\", function( assert ) {\n\tassert.expect( 6 );\n\n\tvar $el;\n\n\tassert.equal( jQuery( \"#groups\" ).parent()[ 0 ].id, \"ap\", \"Simple parent check\" );\n\tassert.equal( jQuery( \"#groups\" ).parent( \"p\" )[ 0 ].id, \"ap\", \"Filtered parent check\" );\n\tassert.equal( jQuery( \"#groups\" ).parent( \"div\" ).length, 0, \"Filtered parent check, no match\" );\n\tassert.equal( jQuery( \"#groups\" ).parent( \"div, p\" )[ 0 ].id, \"ap\", \"Check for multiple filters\" );\n\tassert.deepEqual( jQuery( \"#en, #sndp\" ).parent().get(), q( \"foo\" ), \"Check for unique results from parent\" );\n\n\t$el = jQuery( \"<div>text</div>\" );\n\tassert.deepEqual( $el.contents().parent().get(), $el.get(), \"Check for parent of text node (#13265)\" );\n} );\n\nQUnit.test( \"parents([String])\", function( assert ) {\n\tassert.expect( 6 );\n\tassert.equal( jQuery( \"#groups\" ).parents()[ 0 ].id, \"ap\", \"Simple parents check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).parents().eq( 0 ).get(), q( \"nonnodes\" ), \"Text node parents check\" );\n\tassert.equal( jQuery( \"#groups\" ).parents( \"p\" )[ 0 ].id, \"ap\", \"Filtered parents check\" );\n\tassert.equal( jQuery( \"#groups\" ).parents( \"div\" )[ 0 ].id, \"qunit-fixture\", \"Filtered parents check2\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parents( \"p, div\" ).get(), q( \"ap\", \"qunit-fixture\" ), \"Check for multiple filters\" );\n\tassert.deepEqual( jQuery( \"#en, #sndp\" ).parents().get(), q( \"foo\", \"qunit-fixture\", \"body\", \"html\" ), \"Check for unique results from parents\" );\n} );\n\nQUnit.test( \"parentsUntil([String])\", function( assert ) {\n\tassert.expect( 10 );\n\n\tvar parents = jQuery( \"#groups\" ).parents();\n\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil().get(), parents.get(), \"parentsUntil with no selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \".foo\" ).get(), parents.get(), \"parentsUntil with invalid selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html\" ).get(), parents.slice( 0, -1 ).get(), \"Simple parentsUntil check\" );\n\tassert.equal( jQuery( \"#groups\" ).parentsUntil( \"#ap\" ).length, 0, \"Simple parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).parentsUntil( \"#html\" ).eq( 0 ).get(), q( \"nonnodes\" ), \"Text node parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html, #body\" ).get(), parents.slice( 0, 2 ).get(), \"Less simple parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html\", \"div\" ).get(), jQuery( \"#qunit-fixture\" ).get(), \"Filtered parentsUntil check\" );\n\tassert.deepEqual( jQuery( \"#groups\" ).parentsUntil( \"#html\", \"p,div\" ).get(), parents.slice( 0, 2 ).get(), \"Multiple-filtered parentsUntil check\" );\n\tassert.equal( jQuery( \"#groups\" ).parentsUntil( \"#html\", \"span\" ).length, 0, \"Filtered parentsUntil check, no match\" );\n\tassert.deepEqual( jQuery( \"#groups, #ap\" ).parentsUntil( \"#html\", \"p,div\" ).get(), parents.slice( 0, 2 ).get(), \"Multi-source, multiple-filtered parentsUntil check\" );\n} );\n\nQUnit.test( \"next([String])\", function( assert ) {\n\tassert.expect( 6 );\n\tassert.equal( jQuery( \"#ap\" ).next()[ 0 ].id, \"foo\", \"Simple next check\" );\n\tassert.equal( jQuery( \"<div>text<a id='element'></a></div>\" ).contents().eq( 0 ).next().attr( \"id\" ), \"element\", \"Text node next check\" );\n\tassert.equal( jQuery( \"#ap\" ).next( \"div\" )[ 0 ].id, \"foo\", \"Filtered next check\" );\n\tassert.equal( jQuery( \"#ap\" ).next( \"p\" ).length, 0, \"Filtered next check, no match\" );\n\tassert.equal( jQuery( \"#ap\" ).next( \"div, p\" )[ 0 ].id, \"foo\", \"Multiple filters\" );\n\tassert.equal( jQuery( \"body\" ).next().length, 0, \"Simple next check, no match\" );\n} );\n\nQUnit.test( \"prev([String])\", function( assert ) {\n\tassert.expect( 5 );\n\tassert.equal( jQuery( \"#foo\" ).prev()[ 0 ].id, \"ap\", \"Simple prev check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).prev().get(), q( \"nonnodesElement\" ), \"Text node prev check\" );\n\tassert.equal( jQuery( \"#foo\" ).prev( \"p\" )[ 0 ].id, \"ap\", \"Filtered prev check\" );\n\tassert.equal( jQuery( \"#foo\" ).prev( \"div\" ).length, 0, \"Filtered prev check, no match\" );\n\tassert.equal( jQuery( \"#foo\" ).prev( \"p, div\" )[ 0 ].id, \"ap\", \"Multiple filters\" );\n} );\n\nQUnit.test( \"nextAll([String])\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar elems = jQuery( \"#form\" ).children();\n\n\tassert.deepEqual( jQuery( \"#label-for\" ).nextAll().get(), elems.slice( 1 ).get(), \"Simple nextAll check\" );\n\tassert.equal( jQuery( \"<div>text<a id='element'></a></div>\" ).contents().eq( 0 ).nextAll().attr( \"id\" ), \"element\", \"Text node nextAll check\" );\n\tassert.deepEqual( jQuery( \"#label-for\" ).nextAll( \"input\" ).get(), elems.slice( 1 ).filter( \"input\" ).get(), \"Filtered nextAll check\" );\n\tassert.deepEqual( jQuery( \"#label-for\" ).nextAll( \"input,select\" ).get(), elems.slice( 1 ).filter( \"input,select\" ).get(), \"Multiple-filtered nextAll check\" );\n\tassert.deepEqual( jQuery( \"#label-for, #hidden1\" ).nextAll( \"input,select\" ).get(), elems.slice( 1 ).filter( \"input,select\" ).get(), \"Multi-source, multiple-filtered nextAll check\" );\n} );\n\nQUnit.test( \"prevAll([String])\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar elems = jQuery( jQuery( \"#form\" ).children().slice( 0, 12 ).get().reverse() );\n\n\tassert.deepEqual( jQuery( \"#area1\" ).prevAll().get(), elems.get(), \"Simple prevAll check\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).prevAll().get(), q( \"nonnodesElement\" ), \"Text node prevAll check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevAll( \"input\" ).get(), elems.filter( \"input\" ).get(), \"Filtered prevAll check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevAll( \"input,select\" ).get(), elems.filter( \"input,select\" ).get(), \"Multiple-filtered prevAll check\" );\n\tassert.deepEqual( jQuery( \"#area1, #hidden1\" ).prevAll( \"input,select\" ).get(), elems.filter( \"input,select\" ).get(), \"Multi-source, multiple-filtered prevAll check\" );\n} );\n\nQUnit.test( \"nextUntil([String])\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar elems = jQuery( \"#form\" ).children().slice( 2, 12 );\n\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil().get(), jQuery( \"#text1\" ).nextAll().get(), \"nextUntil with no selector (nextAll)\" );\n\tassert.equal( jQuery( \"<div>text<a id='element'></a></div>\" ).contents().eq( 0 ).nextUntil().attr( \"id\" ), \"element\", \"Text node nextUntil with no selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \".foo\" ).get(), jQuery( \"#text1\" ).nextAll().get(), \"nextUntil with invalid selector (nextAll)\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\" ).get(), elems.get(), \"Simple nextUntil check\" );\n\tassert.equal( jQuery( \"#text1\" ).nextUntil( \"#text2\" ).length, 0, \"Simple nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1, #radio1\" ).get(), jQuery( \"#text1\" ).next().get(), \"Less simple nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"input\" ).get(), elems.not( \"button\" ).get(), \"Filtered nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"button\" ).get(), elems.not( \"input\" ).get(), \"Filtered nextUntil check\" );\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"button,input\" ).get(), elems.get(), \"Multiple-filtered nextUntil check\" );\n\tassert.equal( jQuery( \"#text1\" ).nextUntil( \"#area1\", \"div\" ).length, 0, \"Filtered nextUntil check, no match\" );\n\tassert.deepEqual( jQuery( \"#text1, #hidden1\" ).nextUntil( \"#area1\", \"button,input\" ).get(), elems.get(), \"Multi-source, multiple-filtered nextUntil check\" );\n\n\tassert.deepEqual( jQuery( \"#text1\" ).nextUntil( \"[class=foo]\" ).get(), jQuery( \"#text1\" ).nextAll().get(), \"Non-element nodes must be skipped, since they have no attributes\" );\n} );\n\nQUnit.test( \"prevUntil([String])\", function( assert ) {\n\tassert.expect( 11 );\n\n\tvar elems = jQuery( \"#area1\" ).prevAll();\n\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil().get(), elems.get(), \"prevUntil with no selector (prevAll)\" );\n\tassert.deepEqual( jQuery( \"#nonnodes\" ).contents().eq( 1 ).prevUntil().get(), q( \"nonnodesElement\" ), \"Text node prevUntil with no selector (prevAll)\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \".foo\" ).get(), elems.get(), \"prevUntil with invalid selector (prevAll)\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\" ).get(), elems.slice( 0, -1 ).get(), \"Simple prevUntil check\" );\n\tassert.equal( jQuery( \"#area1\" ).prevUntil( \"#button\" ).length, 0, \"Simple prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label, #search\" ).get(), jQuery( \"#area1\" ).prev().get(), \"Less simple prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\", \"input\" ).get(), elems.slice( 0, -1 ).not( \"button\" ).get(), \"Filtered prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\", \"button\" ).get(), elems.slice( 0, -1 ).not( \"input\" ).get(), \"Filtered prevUntil check\" );\n\tassert.deepEqual( jQuery( \"#area1\" ).prevUntil( \"label\", \"button,input\" ).get(), elems.slice( 0, -1 ).get(), \"Multiple-filtered prevUntil check\" );\n\tassert.equal( jQuery( \"#area1\" ).prevUntil( \"label\", \"div\" ).length, 0, \"Filtered prevUntil check, no match\" );\n\tassert.deepEqual( jQuery( \"#area1, #hidden1\" ).prevUntil( \"label\", \"button,input\" ).get(), elems.slice( 0, -1 ).get(), \"Multi-source, multiple-filtered prevUntil check\" );\n} );\n\nQUnit.test( \"contents()\", function( assert ) {\n\tassert.expect( 12 );\n\tvar ibody, c;\n\n\tassert.equal( jQuery( \"#ap\" ).contents().length, 9, \"Check element contents\" );\n\tassert.ok( jQuery( \"#iframe\" ).contents()[ 0 ], \"Check existence of IFrame document\" );\n\tibody = jQuery( \"#loadediframe\" ).contents()[ 0 ].body;\n\tassert.ok( ibody, \"Check existence of IFrame body\" );\n\n\tassert.equal( jQuery( \"span\", ibody ).text(), \"span text\", \"Find span in IFrame and check its text\" );\n\n\tjQuery( ibody ).append( \"<div>init text</div>\" );\n\tassert.equal( jQuery( \"div\", ibody ).length, 2, \"Check the original div and the new div are in IFrame\" );\n\n\tassert.equal( jQuery( \"div\", ibody ).last().text(), \"init text\", \"Add text to div in IFrame\" );\n\n\tjQuery( \"div\", ibody ).last().text( \"div text\" );\n\tassert.equal( jQuery( \"div\", ibody ).last().text(), \"div text\", \"Add text to div in IFrame\" );\n\n\tjQuery( \"div\", ibody ).last().remove();\n\tassert.equal( jQuery( \"div\", ibody ).length, 1, \"Delete the div and check only one div left in IFrame\" );\n\n\tassert.equal( jQuery( \"div\", ibody ).text(), \"span text\", \"Make sure the correct div is still left after deletion in IFrame\" );\n\n\tjQuery( \"<table></table>\", ibody ).append( \"<tr><td>cell</td></tr>\" ).appendTo( ibody );\n\tjQuery( \"table\", ibody ).remove();\n\tassert.equal( jQuery( \"div\", ibody ).length, 1, \"Check for JS error on add and delete of a table in IFrame\" );\n\n\t// using contents will get comments regular, text, and comment nodes\n\tc = jQuery( \"#nonnodes\" ).contents().contents();\n\tassert.equal( c.length, 1, \"Check node,textnode,comment contents is just one\" );\n\tassert.equal( c[ 0 ].nodeValue, \"hi\", \"Check node,textnode,comment contents is just the one from span\" );\n} );\n\nQUnit.test( \"contents() for <template />\", function( assert ) {\n\tassert.expect( 4 );\n\n\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\"<template id='template'>\" +\n\t\t\"    <div id='template-div0'>\" +\n\t\t\"        <span>Hello, Web Component!</span>\" +\n\t\t\"    </div>\" +\n\t\t\"    <div id='template-div1'></div>\" +\n\t\t\"    <div id='template-div2'></div>\" +\n\t\t\"</template>\"\n\t);\n\n\tvar contents = jQuery( \"#template\" ).contents();\n\tassert.equal( contents.length, 6, \"Check template element contents\" );\n\n\tassert.equal( contents.find( \"span\" ).text(), \"Hello, Web Component!\", \"Find span in template and check its text\" );\n\n\tjQuery( \"<div id='templateTest'></div>\" ).append(\n\t\t\tjQuery( jQuery.map( contents, function( node ) {\n\t\t\t\t\treturn document.importNode( node, true );\n\t\t\t} ) )\n\t).appendTo( \"#qunit-fixture\" );\n\n\tcontents = jQuery( \"#templateTest\" ).contents();\n\tassert.equal( contents.length, 6, \"Check cloned nodes of template element contents\" );\n\n\tassert.equal( contents.filter( \"div\" ).length, 3, \"Count cloned elements from template\" );\n} );\n\nQUnit[ \"content\" in document.createElement( \"template\" ) ? \"test\" : \"skip\" ]( \"contents() for <template /> remains inert\", function( assert ) {\n\tassert.expect( 2 );\n\n\tGlobals.register( \"testScript\" );\n\tGlobals.register( \"testImgOnload\" );\n\n\tjQuery( \"#qunit-fixture\" ).append(\n\t\t\"<template id='template'>\" +\n\t\t\"    <script>testScript = 1;</script>\" +\n\t\t\"    <img src='\" + baseURL + \"1x1.jpg' onload='testImgOnload = 1' >\" +\n\t\t\"</template>\"\n\t);\n\n\tvar content = jQuery( \"#template\" ).contents();\n\n\tassert.strictEqual( window.testScript, true, \"script in template isn't executed\" );\n\tassert.strictEqual( window.testImgOnload, true, \"onload of image in template isn't executed\" );\n} );\n\nQUnit.test( \"contents() for <object />\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar svgObject = jQuery( \"<object id='svg-object' data='\" + baseURL + \"1x1.svg'></object>\" );\n\tvar done = assert.async();\n\n\tsvgObject.on( \"load\", function() {\n\t\tvar contents = jQuery( \"#svg-object\" ).contents();\n\t\tassert.equal( contents.length, 1, \"Check object contents\" );\n\t\tassert.equal( contents.find( \"svg\" ).length, 1, \"Find svg within object\" );\n\t\tdone();\n\t} );\n\n\tjQuery( \"#qunit-fixture\" ).append( svgObject );\n} );\n\nQUnit.test( \"contents() for <object /> with children\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar object = \"<object type='application/x-shockwave-flash' width='200' height='300' id='penguin'>\" +\n\t\t\"<param name='movie' value='flash/penguin.swf'>\" +\n\t\t\"<param name='quality' value='high'>\" +\n\t\t\"<img src='images/penguin.jpg' width='200' height='300' alt='Penguin'>\" +\n\t\"</object>\";\n\n\tvar contents = jQuery( object ).contents();\n\tassert.equal( contents.length, 3, \"Check object contents children are correct\" );\n} );\n\nQUnit.test( \"contents() for <frame />\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar iframe = jQuery( \"<iframe id='frame-contents' src='\" + baseURL + \"frame.html'></iframe>\" );\n\tvar done = assert.async();\n\n\tiframe.on( \"load\", function() {\n\t\tvar container = jQuery( \"#frame-contents\" ).contents();\n\t\tvar contents = container.find( \"#test-frame\" ).contents();\n\t\tassert.equal( contents.length, 1, \"Check frame contents\" );\n\t\tassert.equal( contents.find( \"body\" ).length, 1, \"Find body within frame\" );\n\t\tdone();\n\t} );\n\n\tjQuery( \"#qunit-fixture\" ).append( iframe );\n} );\n\nQUnit.test( \"sort direction\", function( assert ) {\n\tassert.expect( 12 );\n\n\tvar elems = jQuery( \"#ap, #select1 > *, #moretests > form\" ),\n\t\tmethodDirections = {\n\t\t\tparent: false,\n\t\t\tparents: true,\n\t\t\tparentsUntil: true,\n\t\t\tnext: false,\n\t\t\tprev: false,\n\t\t\tnextAll: false,\n\t\t\tprevAll: true,\n\t\t\tnextUntil: false,\n\t\t\tprevUntil: true,\n\t\t\tsiblings: false,\n\t\t\tchildren: false,\n\t\t\tcontents: false\n\t\t};\n\n\tjQuery.each( methodDirections, function( method, reversed ) {\n\t\tvar actual = elems[ method ]().get(),\n\t\t\tforward = jQuery.uniqueSort( [].concat( actual ) );\n\t\tassert.deepEqual( actual, reversed ? forward.reverse() : forward, \"Correct sort direction for \" + method );\n\t} );\n} );\n\nQUnit.test( \"add(String selector)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar divs;\n\n\tassert.deepEqual(\n\t\tjQuery( \"#sndp\" ).add( \"#en\" ).add( \"#sap\" ).toArray(),\n\t\tq( \"sndp\", \"en\", \"sap\" ),\n\t\t\"Check elements from document\"\n\t);\n\n\tdivs = jQuery( \"<div></div>\" ).add( \"#sndp\" );\n\tassert.ok( divs[ 0 ].parentNode, \"Sort with the disconnected node last (started with disconnected first).\" );\n} );\n\nQUnit.test( \"add(String selector, String context)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual(\n\t\tjQuery( [] ).add( \"div\", \"#nothiddendiv\" ).toArray(),\n\t\tq( \"nothiddendivchild\" ),\n\t\t\"Check elements from document\"\n\t);\n} );\n\nQUnit.test( \"add(String html)\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar x,\n\t\tdivs = jQuery( \"#sndp\" ).add( \"<div></div>\" );\n\n\tassert.ok( !divs[ 1 ].parentNode, \"Sort with the disconnected node last.\" );\n\n\tx = jQuery( [] ).add( \"<p id='x1'>xxx</p>\" ).add( \"<p id='x2'>xxx</p>\" );\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check detached element1\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check detached element2\" );\n} );\n\nQUnit.test( \"add(jQuery)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar x,\n\t\ttmp = jQuery( \"<div></div>\" );\n\n\tx = jQuery( [] )\n\t.add(\n\t\tjQuery( \"<p id='x1'>xxx</p>\" ).appendTo( tmp )\n\t)\n\t.add(\n\t\tjQuery( \"<p id='x2'>xxx</p>\" ).appendTo( tmp )\n\t);\n\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check element1 in detached parent\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check element2 in detached parent\" );\n\n\tx = jQuery( [] )\n\t.add(\n\t\tjQuery( \"<p id='x1'>xxx</p>\" )\n\t)\n\t.add(\n\t\tjQuery( \"<p id='x2'>xxx</p>\" )\n\t);\n\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check detached element1\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check detached element2\" );\n} );\n\nQUnit.test( \"add(Element)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar x,\n\t\ttmp = jQuery( \"<div></div>\" );\n\n\tx = jQuery( [] ).add( jQuery( \"<p id='x1'>xxx</p>\" ).appendTo( tmp )[ 0 ] ).add( jQuery( \"<p id='x2'>xxx</p>\" ).appendTo( tmp )[ 0 ] );\n\tassert.equal( x[ 0 ].id, \"x1\", \"Check on-the-fly element1\" );\n\tassert.equal( x[ 1 ].id, \"x2\", \"Check on-the-fly element2\" );\n} );\n\nQUnit.test( \"add(Array elements)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#sndp\" ).add( jQuery( \"#en\" )[ 0 ] ).add( jQuery( \"#sap\" ) ).toArray(),\n\t\tq( \"sndp\", \"en\", \"sap\" ),\n\t\t\"Check elements from document\"\n\t);\n} );\n\nQUnit.test( \"add(Window)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar frame1 = document.createElement( \"iframe\" ),\n\t\tframe2 = document.createElement( \"iframe\" );\n\n\t// This increases window.length and sets window[i] available\n\tdocument.body.appendChild( frame1 );\n\tdocument.body.appendChild( frame2 );\n\n\t// Window is tricky because it is a lot like an array, even Array#slice will\n\t// turn it into a multi-item array.\n\tassert.equal( jQuery( [] ).add( window ).length, 1, \"Add a window\" );\n\n\tdocument.body.removeChild( frame1 );\n\tdocument.body.removeChild( frame2 );\n} );\n\nQUnit.test( \"add(NodeList|undefined|HTMLFormElement|HTMLSelectElement)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar ps, notDefined;\n\n\tps = document.getElementsByTagName( \"p\" );\n\n\tassert.equal( jQuery( [] ).add( ps ).length, ps.length, \"Add a NodeList\" );\n\n\tassert.equal( jQuery( [] ).add( notDefined ).length, 0, \"Adding undefined adds nothing\" );\n\n\tassert.equal( jQuery( [] ).add( document.getElementById( \"form\" ) ).length, 1, \"Add a form\" );\n\tassert.equal( jQuery( [] ).add( document.getElementById( \"select1\" ) ).length, 1, \"Add a select\" );\n\n\t// We no longer support .add(form.elements), unfortunately.\n\t// There is no way, in browsers, to reliably determine the difference\n\t// between form.elements and form - and doing .add(form) and having it\n\t// add the form elements is way to unexpected, so this gets the boot.\n\t//ok( jQuery([]).add(jQuery(\"#form\")[0].elements).length >= 13, \"Check elements from array\" );\n\n\t// For the time being, we're discontinuing support for jQuery(form.elements) since it's ambiguous in IE\n\t// use jQuery([]).add(form.elements) instead.\n\t//equal( jQuery([]).add(jQuery(\"#form\")[0].elements).length, jQuery(jQuery(\"#form\")[0].elements).length, \"Array in constructor must equals array in add()\" );\n} );\n\nQUnit.test( \"add(String, Context)\", function( assert ) {\n\tassert.expect( 6 );\n\n\tassert.deepEqual( jQuery( \"#firstp\" ).add( \"#ap\" ).get(), q( \"firstp\", \"ap\" ), \"Add selector to selector \" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( \"#ap\" ).get(), q( \"firstp\", \"ap\" ), \"Add gEBId to selector\" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( document.getElementById( \"ap\" ) ).get(), q( \"firstp\", \"ap\" ), \"Add gEBId to gEBId\" );\n\n\tvar ctx = document.getElementById( \"firstp\" );\n\tassert.deepEqual( jQuery( \"#firstp\" ).add( \"#ap\", ctx ).get(), q( \"firstp\" ), \"Add selector to selector \" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( \"#ap\", ctx ).get(), q( \"firstp\" ), \"Add gEBId to selector, not in context\" );\n\tassert.deepEqual( jQuery( document.getElementById( \"firstp\" ) ).add( \"#ap\", document.getElementsByTagName( \"body\" )[ 0 ] ).get(), q( \"firstp\", \"ap\" ), \"Add gEBId to selector, in context\" );\n} );\n\nQUnit.test( \"eq('-1') #10616\", function( assert ) {\n\tassert.expect( 3 );\n\tvar $divs = jQuery( \"div\" );\n\n\tassert.equal( $divs.eq( -1 ).length, 1, \"The number -1 returns a selection that has length 1\" );\n\tassert.equal( $divs.eq( \"-1\" ).length, 1, \"The string '-1' returns a selection that has length 1\" );\n\tassert.deepEqual( $divs.eq( \"-1\" ), $divs.eq( -1 ), \"String and number -1 match\" );\n} );\n\nQUnit.test( \"index(no arg) #10977\", function( assert ) {\n\tassert.expect( 2 );\n\tvar $list, fragment, div;\n\n\t$list = jQuery( \"<ul id='indextest'><li class='zero'>THIS ONE</li><li class='one'>a</li><li class='two'>b</li><li class='three'>c</li></ul>\" );\n\tjQuery( \"#qunit-fixture\" ).append( $list );\n\tassert.strictEqual( jQuery( \"#indextest li.zero\" ).first().index(), 0, \"No Argument Index Check\" );\n\t$list.remove();\n\n\tfragment = document.createDocumentFragment();\n\tdiv = fragment.appendChild( document.createElement( \"div\" ) );\n\n\tassert.equal( jQuery( div ).index(), 0, \"If jQuery#index called on element whose parent is fragment, it still should work correctly\" );\n} );\n\nQUnit.test( \"traversing non-elements with attribute filters (#12523)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar nonnodes = jQuery( \"#nonnodes\" ).contents();\n\n\tassert.equal( nonnodes.filter( \"[id]\" ).length, 1, \".filter\" );\n\tassert.equal( nonnodes.find( \"[id]\" ).length, 0, \".find\" );\n\tassert.strictEqual( nonnodes.is( \"[id]\" ), true, \".is\" );\n\tassert.deepEqual( nonnodes.closest( \"[id='nonnodes']\" ).get(), q( \"nonnodes\" ), \".closest\" );\n\tassert.deepEqual( nonnodes.parents( \"[id='nonnodes']\" ).get(), q( \"nonnodes\" ), \".parents\" );\n} );\n", "( function() {\n\nif ( !jQuery.fn.wrap ) { // no wrap module\n\treturn;\n}\n\nQUnit.module( \"wrap\", {\n\tafterEach: moduleTeardown\n} );\n\n// See test/unit/manipulation.js for explanation about these 2 functions\nfunction manipulationBareObj( value ) {\n\treturn value;\n}\n\nfunction manipulationFunctionReturningObj( value ) {\n\treturn function() {\n\t\treturn value;\n\t};\n}\n\nfunction testWrap( val, assert ) {\n\n\tassert.expect( 19 );\n\n\tvar defaultText, result, j, i, cacheLength;\n\n\tdefaultText = \"Try them out:\";\n\tresult = jQuery( \"#first\" ).wrap( val( \"<div class='red'><span></span></div>\" ) ).text();\n\n\tassert.equal(\n\t\tdefaultText, result, \"Check for wrapping of on-the-fly html\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\n\tresult = jQuery( \"#first\" ).wrap( val( document.getElementById( \"empty\" ) ) ).parent();\n\tassert.ok(\n\t\tresult.is( \"ol\" ), \"Check for element wrapping\"\n\t);\n\tassert.equal(\n\t\tresult.text(), defaultText, \"Check for element wrapping\"\n\t);\n\n\tjQuery( \"#check1\" ).on( \"click\", function() {\n\t\tvar checkbox = this;\n\n\t\tassert.ok(\n\t\tcheckbox.checked, \"Checkbox's state is erased after wrap() action, see #769\"\n\t);\n\t\tjQuery( checkbox ).wrap( val( \"<div id='c1' style='display:none;'></div>\" ) );\n\t\tassert.ok(\n\t\tcheckbox.checked, \"Checkbox's state is erased after wrap() action, see #769\"\n\t);\n\t} ).prop( \"checked\", false )[ 0 ].click();\n\n\t// using contents will get comments regular, text, and comment nodes\n\tj = jQuery( \"#nonnodes\" ).contents();\n\tj.wrap( val( \"<i></i>\" ) );\n\n\tassert.equal(\n\t\tjQuery( \"#nonnodes > i\" ).length, 3,\n\t\t\"Check node,textnode,comment wraps ok\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#nonnodes > i\" ).text(), j.text(),\n\t\t\"Check node,textnode,comment wraps doesn't hurt text\"\n\t);\n\n\t// Try wrapping a disconnected node\n\tcacheLength = 0;\n\tfor ( i in jQuery.cache ) {\n\t\tcacheLength++;\n\t}\n\n\tj = jQuery( \"<label></label>\" ).wrap( val( \"<li></li>\" ) );\n\tassert.equal(\n\t\tj[ 0 ] .nodeName.toUpperCase(), \"LABEL\", \"Element is a label\"\n\t);\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toUpperCase(), \"LI\", \"Element has been wrapped\"\n\t);\n\n\tfor ( i in jQuery.cache ) {\n\t\tcacheLength--;\n\t}\n\tassert.equal(\n\t\tcacheLength, 0, \"No memory leak in jQuery.cache (bug #7165)\"\n\t);\n\n\t// Wrap an element containing a text node\n\tj = jQuery( \"<span></span>\" ).wrap( \"<div>test</div>\" );\n\tassert.equal(\n\t\tj[ 0 ].previousSibling.nodeType, 3, \"Make sure the previous node is a text element\"\n\t);\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toUpperCase(), \"DIV\", \"And that we're in the div element.\"\n\t);\n\n\t// Try to wrap an element with multiple elements (should fail)\n\tj = jQuery( \"<div><span></span></div>\" ).children().wrap( \"<p></p><div></div>\" );\n\tassert.equal(\n\t\tj[ 0 ].parentNode.parentNode.childNodes.length, 1,\n\t\t\"There should only be one element wrapping.\"\n\t);\n\tassert.equal(\n\t\tj.length, 1, \"There should only be one element (no cloning).\"\n\t);\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toUpperCase(), \"P\", \"The span should be in the paragraph.\"\n\t);\n\n\t// Wrap an element with a jQuery set\n\tj = jQuery( \"<span></span>\" ).wrap( jQuery( \"<div></div>\" ) );\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"\n\t);\n\n\t// Wrap an element with a jQuery set and event\n\tresult = jQuery( \"<div></div>\" ).on( \"click\", function() {\n\t\tassert.ok(\n\t\ttrue, \"Event triggered.\"\n\t);\n\n\t\t// Remove handlers on detached elements\n\t\tresult.off();\n\t\tjQuery( this ).off();\n\t} );\n\n\tj = jQuery( \"<span></span>\" ).wrap( result );\n\tassert.equal(\n\t\tj[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"\n\t);\n\n\tj.parent().trigger( \"click\" );\n}\n\nQUnit.test( \"wrap(String|Element)\", function( assert ) {\n\ttestWrap( manipulationBareObj, assert );\n} );\n\nQUnit.test( \"wrap(Function)\", function( assert ) {\n\ttestWrap( manipulationFunctionReturningObj, assert );\n} );\n\nQUnit.test( \"wrap(Function) with index (#10177)\", function( assert ) {\n\tvar expectedIndex = 0,\n\t\ttargets = jQuery( \"#qunit-fixture p\" );\n\n\tassert.expect( targets.length );\n\ttargets.wrap( function( i ) {\n\t\tassert.equal(\n\t\ti, expectedIndex,\n\t\t\"Check if the provided index (\" + i + \") is as expected (\" + expectedIndex + \")\"\n\t);\n\t\texpectedIndex++;\n\n\t\treturn \"<div id='wrap_index_'\" + i + \"'></div>\";\n\t} );\n} );\n\nQUnit.test( \"wrap(String) consecutive elements (#10177)\", function( assert ) {\n\tvar targets = jQuery( \"#qunit-fixture p\" );\n\n\tassert.expect( targets.length * 2 );\n\ttargets.wrap( \"<div class='wrapper'></div>\" );\n\n\ttargets.each( function() {\n\t\tvar $this = jQuery( this );\n\n\t\tassert.ok(\n\t\t$this.parent().is( \".wrapper\" ), \"Check each elements parent is correct (.wrapper)\"\n\t);\n\t\tassert.equal(\n\t\t$this.siblings().length, 0, \"Each element should be wrapped individually\"\n\t);\n\t} );\n} );\n\nQUnit.test( \"wrapAll(String)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar prev, p, result;\n\n\tprev = jQuery( \"#firstp\" )[ 0 ].previousSibling;\n\tp = jQuery( \"#firstp,#first\" )[ 0 ].parentNode;\n\tresult = jQuery( \"#firstp,#first\" ).wrapAll( \"<div class='red'><div class='tmp'></div></div>\" );\n\n\tassert.equal(\n\t\tresult.parent().length, 1, \"Check for wrapping of on-the-fly html\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#firstp\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent().parent()[ 0 ].previousSibling, prev, \"Correct Previous Sibling\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent().parent()[ 0 ].parentNode, p, \"Correct Parent\"\n\t);\n\n} );\n\nQUnit.test( \"wrapAll(Function)\", function( assert ) {\n\tassert.expect( 5 );\n\n\tvar prev = jQuery( \"#firstp\" )[ 0 ].previousSibling,\n\t\tp = jQuery( \"#firstp,#first\" )[ 0 ].parentNode,\n\t\tresult = jQuery( \"#firstp,#first\" ).wrapAll( function() {\n\t\t\treturn \"<div class='red'><div class='tmp'></div></div>\";\n\t\t} );\n\n\tassert.equal(\n\t\tresult.parent().length, 1, \"Check for wrapping of on-the-fly html\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#firstp\" ).parent().parent().is( \".red\" ), \"Check if wrapper has class 'red'\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).parent().parent().parent().is( p ), \"Correct Parent\"\n\t);\n\tassert.strictEqual(\n\t\tjQuery( \"#first\" ).parent().parent()[ 0 ].previousSibling, prev, \"Correct Previous Sibling\"\n\t);\n} );\n\nQUnit.test( \"wrapAll(Function) check execution characteristics\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar i = 0;\n\n\tjQuery( \"non-existent\" ).wrapAll( function() {\n\t\ti++;\n\t\treturn \"\";\n\t} );\n\n\tassert.ok(\n\t\t!i, \"should not execute function argument if target element does not exist\"\n\t);\n\n\tjQuery( \"#firstp\" ).wrapAll( function( index ) {\n\t\tassert.strictEqual(\n\t\tthis, jQuery( \"#firstp\" )[ 0 ], \"context must be the first found element\"\n\t);\n\t\tassert.strictEqual(\n\t\tindex, undefined, \"index argument should not be included in function execution\"\n\t);\n\t} );\n} );\n\nQUnit.test( \"wrapAll(Element)\", function( assert ) {\n\n  assert.expect( 3 );\n\n  var prev, p;\n\tprev = jQuery( \"#firstp\" )[ 0 ].previousSibling;\n\tp = jQuery( \"#first\" )[ 0 ].parentNode;\n\tjQuery( \"#firstp,#first\" ).wrapAll( document.getElementById( \"empty\" ) );\n\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent()[ 0 ], jQuery( \"#firstp\" ).parent()[ 0 ], \"Same Parent\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent()[ 0 ].previousSibling, prev, \"Correct Previous Sibling\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).parent()[ 0 ].parentNode, p, \"Correct Parent\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(String)\", function( assert ) {\n\n\tassert.expect( 6 );\n\n\tvar num;\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( \"<div class='red'><div id='tmp'></div></div>\" );\n\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tnum = jQuery( \"#first\" ).html( \"foo<div>test</div><div>test2</div>\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( \"<div class='red'><div id='tmp'></div></div>\" );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(Element)\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar num,\n\t\tdiv = jQuery( \"<div></div>\" );\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( document.getElementById( \"empty\" ) );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \"#empty\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tdiv.wrapInner( \"<span></span>\" );\n\tassert.equal(\n\t\tdiv.children().length, 1, \"The contents were wrapped.\"\n\t);\n\tassert.equal(\n\t\tdiv.children()[ 0 ].nodeName.toLowerCase(), \"span\", \"A span was inserted.\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(Function) returns String\", function( assert ) {\n\n\tassert.expect( 6 );\n\n\tvar num,\n    val = manipulationFunctionReturningObj;\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( val( \"<div class='red'><div id='tmp'></div></div>\" ) );\n\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tnum = jQuery( \"#first\" ).html( \"foo<div>test</div><div>test2</div>\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( val( \"<div class='red'><div id='tmp'></div></div>\" ) );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \".red\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().children().length, num, \"Verify Elements Intact\"\n\t);\n} );\n\nQUnit.test( \"wrapInner(Function) returns Element\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tvar num,\n    val = manipulationFunctionReturningObj,\n\t\tdiv = jQuery( \"<div></div>\" );\n\n\tnum = jQuery( \"#first\" ).children().length;\n\tjQuery( \"#first\" ).wrapInner( val( document.getElementById( \"empty\" ) ) );\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().length, 1, \"Only one child\"\n\t);\n\tassert.ok(\n\t\tjQuery( \"#first\" ).children().is( \"#empty\" ), \"Verify Right Element\"\n\t);\n\tassert.equal(\n\t\tjQuery( \"#first\" ).children().children().length, num, \"Verify Elements Intact\"\n\t);\n\n\tdiv.wrapInner( val( \"<span></span>\" ) );\n\tassert.equal(\n\t\tdiv.children().length, 1, \"The contents were wrapped.\"\n\t);\n\tassert.equal(\n\t\tdiv.children()[ 0 ].nodeName.toLowerCase(), \"span\", \"A span was inserted.\"\n\t);\n} );\n\nQUnit.test( \"unwrap()\", function( assert ) {\n\n\tassert.expect( 9 );\n\n\tjQuery( \"body\" ).append(\n\t\t\"  <div id='unwrap' style='display: none;'> <div id='unwrap1'>\" +\n\t\t\" <span class='unwrap'>a</span> <span class='unwrap'>b</span> </div> <div id='unwrap2'>\" +\n\t\t\" <span class='unwrap'>c</span> <span class='unwrap'>d</span> </div> <div id='unwrap3'>\" +\n\t\t\" <b><span class='unwrap unwrap3'>e</span></b>\" +\n\t\t\" <b><span class='unwrap unwrap3'>f</span></b> </div> </div>\"\n\t);\n\n\tvar abcd = jQuery( \"#unwrap1 > span, #unwrap2 > span\" ).get(),\n\t\tabcdef = jQuery( \"#unwrap span\" ).get();\n\n\tassert.equal(\n\t\tjQuery( \"#unwrap1 span\" ).add( \"#unwrap2 span:first-child\" ).unwrap().length, 3,\n\t\t\"make #unwrap1 and #unwrap2 go away\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap > span\" ).get(), abcd, \"all four spans should still exist\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap3 span\" ).unwrap().get(), jQuery( \"#unwrap3 > span\" ).get(),\n\t\t\"make all b in #unwrap3 go away\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap3 span\" ).unwrap().get(), jQuery( \"#unwrap > span.unwrap3\" ).get(),\n\t\t\"make #unwrap3 go away\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap\" ).children().get(), abcdef, \"#unwrap only contains 6 child spans\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap > span\" ).unwrap().get(), jQuery( \"body > span.unwrap\" ).get(),\n\t\t\"make the 6 spans become children of body\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"body > span.unwrap\" ).unwrap().get(), jQuery( \"body > span.unwrap\" ).get(),\n\t\t\"can't unwrap children of body\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery( \"body > span.unwrap\" ).unwrap().get(), abcdef, \"can't unwrap children of body\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"body > span.unwrap\" ).get(), abcdef, \"body contains 6 .unwrap child spans\"\n\t);\n\n\tjQuery( \"body > span.unwrap\" ).remove();\n} );\n\nQUnit.test( \"unwrap( selector )\", function( assert ) {\n\n\tassert.expect( 5 );\n\n\tjQuery( \"body\" ).append(\n\t\t\"  <div id='unwrap' style='display: none;'> <div id='unwrap1'>\" +\n\t\t\"<span class='unwrap'>a</span> <span class='unwrap'>b</span> </div>\" +\n\t\t\" <div id='unwrap2'> <span class='unwrap'>c</span> <span class='unwrap'>d</span>\" +\n\t\t\" </div> </div>\"\n\t);\n\n\t// Shouldn't unwrap, no match\n\tjQuery( \"#unwrap1 span\" ) .unwrap( \"#unwrap2\" );\n\tassert.equal(\n\t\tjQuery( \"#unwrap1\" ).length, 1, \"still wrapped\"\n\t);\n\n\t// Shouldn't unwrap, no match\n\tjQuery( \"#unwrap1 span\" ) .unwrap( \"span\" );\n\tassert.equal(\n\t\tjQuery( \"#unwrap1\" ).length, 1, \"still wrapped\"\n\t);\n\n\t// Unwraps\n\tjQuery( \"#unwrap1 span\" ) .unwrap( \"#unwrap1\" );\n\tassert.equal(\n\t\tjQuery( \"#unwrap1\" ).length, 0, \"unwrapped match\"\n\t);\n\n\t// Check return values\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap2 span\" ).get(), jQuery( \"#unwrap2 span\" ).unwrap( \"quote\" ).get(),\n\t\t\"return on unmatched unwrap\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery( \"#unwrap2 span\" ).get(), jQuery( \"#unwrap2 span\" ).unwrap( \"#unwrap2\" ).get(),\n\t\t\"return on matched unwrap\"\n\t);\n\n\tjQuery( \"body > span.unwrap\" ).remove();\n} );\n\nQUnit.test( \"jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar $wraptarget = jQuery( \"<div id='wrap-target'>Target</div>\" ).appendTo( \"#qunit-fixture\" ),\n\t\t$section = jQuery( \"<section>\" ).appendTo( \"#qunit-fixture\" );\n\n\t$wraptarget.wrapAll( \"<aside style='background-color:green'></aside>\" );\n\n\tassert.notEqual(\n\t\t$wraptarget.parent( \"aside\" ).get( 0 ).style.backgroundColor, \"transparent\",\n\t\t\"HTML5 elements created with wrapAll inherit styles\"\n\t);\n\tassert.notEqual(\n\t\t$section.get( 0 ).style.backgroundColor, \"transparent\",\n\t\t\"HTML5 elements create with jQuery( string ) inherit styles\"\n\t);\n} );\n\nQUnit.test( \"wrapping scripts (#10470)\", function( assert ) {\n\n\tassert.expect( 2 );\n\n\tvar script = document.createElement( \"script\" );\n\tscript.text = script.textContent =\n\t\t\"QUnit.assert.ok( !document.eval10470, 'script evaluated once' ); document.eval10470 = true;\";\n\n\tdocument.eval10470 = false;\n\tjQuery( \"#qunit-fixture\" ).empty()[ 0 ].appendChild( script );\n\tjQuery( \"#qunit-fixture script\" ).wrap( \"<b></b>\" );\n\tassert.strictEqual(\n\t\tscript.parentNode, jQuery( \"#qunit-fixture > b\" )[ 0 ], \"correctly wrapped\"\n\t);\n\tjQuery( script ).remove();\n} );\n\n} )();\n"], "filenames": ["src/manipulation.js", "test/data/testinit.js", "test/localfile.html", "test/unit/ajax.js", "test/unit/attributes.js", "test/unit/basic.js", "test/unit/core.js", "test/unit/css.js", "test/unit/data.js", "test/unit/deprecated.js", "test/unit/dimensions.js", "test/unit/effects.js", "test/unit/event.js", "test/unit/manipulation.js", "test/unit/offset.js", "test/unit/selector.js", "test/unit/traversing.js", "test/unit/wrap.js"], "buggy_code_start_loc": [36, 254, 52, 2459, 96, 39, 26, 16, 430, 141, 345, 608, 156, 91, 8, 95, 200, 77], "buggy_code_end_loc": [240, 255, 53, 2591, 1683, 202, 1360, 1734, 997, 142, 780, 2488, 2787, 2887, 789, 279, 939, 379], "fixing_code_start_loc": [35, 254, 52, 2459, 96, 39, 26, 16, 430, 141, 345, 608, 156, 91, 8, 95, 200, 77], "fixing_code_end_loc": [233, 255, 53, 2591, 1683, 202, 1360, 1734, 997, 142, 780, 2488, 2787, 2883, 789, 279, 939, 379], "type": "CWE-79", "message": "In jQuery versions greater than or equal to 1.2 and before 3.5.0, passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0.", "other": {"cve": {"id": "CVE-2020-11022", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-29T22:15:11.903", "lastModified": "2022-07-25T18:15:17.613", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "In jQuery versions greater than or equal to 1.2 and before 3.5.0, passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0."}, {"lang": "es", "value": "En las versiones de jQuery mayores o iguales a 1.2 y anteriores a la versi\u00f3n 3.5.0, se puede ejecutar HTML desde fuentes no seguras, incluso despu\u00e9s de desinfectarlo, a uno de los m\u00e9todos de manipulaci\u00f3n DOM de jQuery (es decir .html (), .append () y otros). c\u00f3digo no seguro Este problema est\u00e1 corregido en jQuery 3.5.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jquery:jquery:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.2", "versionEndExcluding": "3.5.0", "matchCriteriaId": "B5CFA4CA-5296-4B78-8D65-34FC63A09DEF"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:drupal:drupal:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.0", "versionEndExcluding": "7.70", "matchCriteriaId": "70C672EE-2027-4A29-8C14-3450DEF1462A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:drupal:drupal:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.7.0", "versionEndExcluding": "8.7.14", "matchCriteriaId": "BBFE42E2-6583-4EBE-B320-B8CF9CA0C3BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:drupal:drupal:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.8.0", "versionEndExcluding": "8.8.6", "matchCriteriaId": "7BA49DB0-ECC3-4155-B76C-0CA292600DE6"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:31:*:*:*:*:*:*:*", "matchCriteriaId": "80F0FA5D-8D3B-4C0E-81E2-87998286AF33"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:32:*:*:*:*:*:*:*", "matchCriteriaId": "36D96259-24BD-44E2-96D9-78CE1D41F956"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A079FD6E-3BB0-4997-9A8E-6F8FEC89887A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:13.3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "A125E817-F974-4509-872C-B71933F42AD1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "BBE7BF09-B89C-4590-821E-6C0587E096B5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:18.2:*:*:*:*:*:*:*", "matchCriteriaId": "ADAE8A71-0BCD-42D5-B38C-9B2A27CC1E6B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:18.3:*:*:*:*:*:*:*", "matchCriteriaId": "E7231D2D-4092-44F3-B60A-D7C9ED78AFDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:19.1:*:*:*:*:*:*:*", "matchCriteriaId": "F7BDFC10-45A0-46D8-AB92-4A5E2C1C76ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:19.2:*:*:*:*:*:*:*", "matchCriteriaId": "18127694-109C-4E7E-AE79-0BA351849291"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:20.1:*:*:*:*:*:*:*", "matchCriteriaId": "33F68878-BC19-4DB8-8A72-BD9FE3D0ACEC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:blockchain_platform:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.1.2", "matchCriteriaId": "D0DBC938-A782-433F-8BF1-CA250C332AA7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_application_session_controller:3.8m0:*:*:*:*:*:*:*", "matchCriteriaId": "B796AC70-A220-48D8-B8CD-97CF57227962"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:7.5.0.23.0:*:*:*:*:*:*:*", "matchCriteriaId": "790A89FD-6B86-49AE-9B4F-AE7262915E13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:12.0.0.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "E39D442D-1997-49AF-8B02-5640BE2A26CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router_idih\\::*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndIncluding": "8.2.2", "matchCriteriaId": "FAFED7F5-03FA-43B5-AD13-1130F0324448"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_eagle_application_processor:*:*:*:*:*:*:*:*", "versionStartIncluding": "16.1.0", "versionEndIncluding": "16.4.0", "matchCriteriaId": "1A0E3537-CB5A-40BF-B42C-CED9211B8892"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_services_gatekeeper:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "062E4E7C-55BB-46F3-8B61-5A663B565891"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_webrtc_session_controller:7.2:*:*:*:*:*:*:*", "matchCriteriaId": "726DB59B-00C7-444E-83F7-CB31032482AB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B095CC03-7077-4A58-AB25-CC5380CDCE5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_session_border_controller:8.4:*:*:*:*:*:*:*", "matchCriteriaId": "7015A8CB-8FA6-423E-8307-BD903244F517"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_infrastructure:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6.0.0", "versionEndIncluding": "8.1.0.0.0", "matchCriteriaId": "F2BB6A71-6AF6-4C0B-9304-4111E32108D4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_reconciliation_framework:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "AD080793-FC45-4260-8E45-40E228F432FC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_reconciliation_framework:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "2ACA29E6-F393-46E5-B2B3-9158077819A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "FCD1EC13-CC2F-4668-90D2-D8609066F2DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "4D614F76-0AA1-4EA8-A24A-38EFC90EF5DB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "39B8DFFF-B037-4F29-8C8E-F4BBC3435199"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_balance_sheet_planning:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "4D0D0EAC-300D-44B1-AD4A-93A368D5DBA1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_basic:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "C5E0646D-4866-41FB-AE2E-5307B6F4004A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_basic:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "8A566893-8DCF-49E4-93D0-0ACCEFD70D3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_internal_ratings_based_approach:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "B37FC113-4F40-4D29-8712-7AD250373008"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_internal_ratings_based_approach:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "00E5D719-249D-48B8-BAFC-1E14D250B3F6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_foundation:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.1.0", "matchCriteriaId": "712577A9-04D6-4579-A82B-72200E467399"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_governance_for_us_regulatory_reporting:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.9", "matchCriteriaId": "672949B4-1989-4AA7-806F-EEC07D07F317"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "987A0C35-4C7F-4FFB-B47B-37B69A32F879"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "8B3B6BE3-4C5A-402F-832C-86A0A6234C25"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "9476D1DA-C8A8-40A0-94DD-9B46C05FD461"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "34070F24-2E53-43EC-9117-E1434B2C4C2B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "B9B2C2F6-235F-4E78-A299-18C041C05C9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F727AAC6-6D9F-4B28-B07C-6A93916C43A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "6662C783-5B5C-4559-89F5-1A681AA46A3E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "51C17460-D326-4525-A7D1-0AED53E75E18"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "37C8EE84-A840-4132-B331-C7D450B1FBBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "1D8436A2-9CA3-4C91-B632-9B03368ABC1B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "A00142E6-EEB3-44BD-AB0D-0E5C5640557F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "6149C89E-0111-4CF9-90CA-0662D2F75E04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "6CDDF6CA-6441-4606-9D2F-22A67BA46978"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "6FA0B592-A216-4320-A4FE-ABCA6B3E7D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "CEA4D6CF-D54A-40DF-9B70-E13392D0BE19"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "2A333755-4B6E-4A0F-AC48-4CEA70CD5801"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "397B1A24-7C95-4A73-8363-4529A7F6CFCC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "EF6D5112-4055-4F89-A5B3-0DCB109481B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "D262848E-AA24-4057-A747-6221BA22ADF4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_price_creation_and_discovery:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "4A01F8ED-64DA-43BC-9C02-488010BCD0F4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_price_creation_and_discovery:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "75638A6A-88B2-4BC7-84EA-1CF5FC30D555"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "501B9331-6BB7-44BF-A664-180CAFABF88C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "F2A3AE3C-8E24-4FB6-9954-9B50CBD59B21"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F8E565DA-91BE-44FC-A28F-579BE8D2281A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_european_banking_authority:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.1.0", "matchCriteriaId": "AED72F90-3B68-45AC-865C-110F7FD30D37"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_us_federal_reserve:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.9", "matchCriteriaId": "4F909C61-1A74-402C-B74F-BAF7297875B0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "26A1F27B-C3AC-4D13-B9B2-2D6CF65D07BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "B95E8056-51D8-4390-ADE3-661B7AE1D7CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "609D6EDF-D4D0-4370-9B8B-CA39D41946C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "9059A907-508B-4844-8D7B-0FA68C0DF6A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_materials_control:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "2AC63D10-2326-4542-B345-31D45B9A7408"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:*:*:*:*:*:*:*:*", "versionStartIncluding": "19.1.0", "versionEndIncluding": "19.1.2", "matchCriteriaId": "7BFD7783-BE15-421C-A550-7FE15AB53ABF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "1F7BF047-03C5-4A60-B718-E222B16DBF41"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:18.2:*:*:*:*:*:*:*", "matchCriteriaId": "E3A73D81-3E1A-42E6-AB96-835CDD5905F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_accounting_analyzer:8.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "66136D6D-FC52-40DB-B7B6-BA8B7758CE16"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_allocation_manager_for_enterprise_profitability:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "06514F46-544B-4404-B45C-C9584EBC3131"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_allocation_manager_for_enterprise_profitability:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "3BD4BF9A-BF38-460D-974D-5B3255AAF946"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_data_foundation:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.1.0", "matchCriteriaId": "B7DB4831-F874-4D9D-AB58-BE4A554891EA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0.0", "versionEndIncluding": "5.6.0.0", "matchCriteriaId": "B47C73D0-BE89-4D87-8765-12C507F13AFF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:5.6.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "5B8AA91A-1880-43CD-938D-48EF58ACF2CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "A7506589-9B3B-49BA-B826-774BFDCC45B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "228DA523-4D6D-48C5-BDB0-DB1A60F23F8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "335AB6A7-3B1F-4FA8-AF08-7D64C16C4B04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.56:*:*:*:*:*:*:*", "matchCriteriaId": "D0A735B4-4F3C-416B-8C08-9CB21BAD2889"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.57:*:*:*:*:*:*:*", "matchCriteriaId": "7E1E416B-920B-49A0-9523-382898C2979D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.58:*:*:*:*:*:*:*", "matchCriteriaId": "D9DB4A14-2EF5-4B54-95D2-75E6CF9AA0A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndIncluding": "12.2.20", "matchCriteriaId": "15512D27-7BEB-4DDD-9A1B-447FC7156E3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation_connector_for_siebel:10.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "0DB5E2C7-9C68-4D3B-95AD-9CBF65DE1E94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation_for_mobile_devices:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndIncluding": "12.2.20", "matchCriteriaId": "90F0B2AB-453C-4585-8753-74D17BD20C79"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_back_office:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "31C7EEA3-AA72-48DA-A112-2923DBB37773"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_back_office:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "F0735989-13BD-40B3-B954-AC0529C5B53D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_management_and_segmentation_foundation:19.0:*:*:*:*:*:*:*", "matchCriteriaId": "9EFAEA84-E376-40A2-8C9F-3E0676FEC527"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_returns_management:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "959316A8-C3AF-4126-A242-3835ED0AD1E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_returns_management:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "BDB925C6-2CBC-4D88-B9EA-F246F4F7A206"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:siebel_ui_framework:20.8:*:*:*:*:*:*:*", "matchCriteriaId": "98B9198C-11DF-4E80-ACFC-DC719CED8C7E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:storagetek_acsls:8.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "6953CFDB-33C0-4B8E-BBBD-E460A17E8ED3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:10.3.6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B40B13B7-68B3-4510-968C-6A730EB46462"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "C93CC705-1F8C-4870-99E6-14BF264C3811"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "F14A818F-AA16-4438-A3E4-E64C9287AC66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "4A5BB153-68E0-4DDA-87D1-0D9AB7F0A418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:14.1.1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "04BCDC24-4A21-473C-8733-0D9CFB38A752"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netapp:max_data:-:*:*:*:*:*:*:*", "matchCriteriaId": "FD1FCB0D-3E19-4461-9330-4D7F02972A35"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:oncommand_insight:-:*:*:*:*:*:*:*", "matchCriteriaId": "F1BE6C1F-2565-4E97-92AA-16563E5660A5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:oncommand_system_manager:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0", "versionEndIncluding": "3.1.3", "matchCriteriaId": "B9273745-6408-4CD3-94E8-9385D4F5FE69"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:snap_creator_framework:-:*:*:*:*:*:*:*", "matchCriteriaId": "9F4754FB-E3EB-454A-AB1A-AE3835C5350C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:snapcenter:-:*:*:*:*:*:*:*", "matchCriteriaId": "BDFB1169-41A0-4A86-8E4F-FDA9730B1E94"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h300s_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "6770B6C3-732E-4E22-BF1C-2D2FD610061C"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h300s:-:*:*:*:*:*:*:*", "matchCriteriaId": "9F9C8C20-42EB-4AB5-BD97-212DEB070C43"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h500s_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "7FFF7106-ED78-49BA-9EC5-B889E3685D53"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h500s:-:*:*:*:*:*:*:*", "matchCriteriaId": "E63D8B0F-006E-4801-BF9D-1C001BBFB4F9"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h700s_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "56409CEC-5A1E-4450-AA42-641E459CC2AF"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h700s:-:*:*:*:*:*:*:*", "matchCriteriaId": "B06F4839-D16A-4A61-9BB5-55B13F41E47F"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h300e_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "108A2215-50FB-4074-94CF-C130FA14566D"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h300e:-:*:*:*:*:*:*:*", "matchCriteriaId": "7AFC73CE-ABB9-42D3-9A71-3F5BC5381E0E"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h500e_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "32F0B6C0-F930-480D-962B-3F4EFDCC13C7"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h500e:-:*:*:*:*:*:*:*", "matchCriteriaId": "803BC414-B250-4E3A-A478-A3881340D6B8"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h700e_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "0FEB3337-BFDE-462A-908B-176F92053CEC"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h700e:-:*:*:*:*:*:*:*", "matchCriteriaId": "736AEAE9-782B-4F71-9893-DED53367E102"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h410s_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "D0B4AD8A-F172-4558-AEC6-FF424BA2D912"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h410s:-:*:*:*:*:*:*:*", "matchCriteriaId": "8497A4C9-8474-4A62-8331-3FE862ED4098"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:netapp:h410c_firmware:-:*:*:*:*:*:*:*", "matchCriteriaId": "234DEFE0-5CE5-4B0A-96B8-5D227CB8ED31"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:h:netapp:h410c:-:*:*:*:*:*:*:*", "matchCriteriaId": "CDDF61B7-EC5C-467C-B710-B89F502CD04F"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.2:*:*:*:*:*:*:*", "matchCriteriaId": "B009C22E-30A4-4288-BCF6-C3E81DEAF45A"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tenable:log_correlation_engine:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.9", "matchCriteriaId": "4ACF85D6-6B45-43DA-9C01-F0208186F014"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_supplier_collaboration_for_process:6.2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "CA6F2E4C-C935-40CF-972E-8C3D8A912134"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:*:*:*:*:*:*:*:*", "versionStartIncluding": "18.1", "versionEndIncluding": "20.1", "matchCriteriaId": "59830587-A6B0-4642-B566-6FD8792F7716"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_application_session_controller:3.8m0:*:*:*:*:*:*:*", "matchCriteriaId": "B796AC70-A220-48D8-B8CD-97CF57227962"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:7.5.0.23.0:*:*:*:*:*:*:*", "matchCriteriaId": "790A89FD-6B86-49AE-9B4F-AE7262915E13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:12.0.0.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "E39D442D-1997-49AF-8B02-5640BE2A26CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router_idih\\::*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndIncluding": "8.2.2", "matchCriteriaId": "FAFED7F5-03FA-43B5-AD13-1130F0324448"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_webrtc_session_controller:7.2:*:*:*:*:*:*:*", "matchCriteriaId": "726DB59B-00C7-444E-83F7-CB31032482AB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B095CC03-7077-4A58-AB25-CC5380CDCE5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_session_border_controller:8.4:*:*:*:*:*:*:*", "matchCriteriaId": "7015A8CB-8FA6-423E-8307-BD903244F517"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_infrastructure:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.1.0", "matchCriteriaId": "021014B2-DC51-481C-BCFE-5857EFBDEDDA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_reconciliation_framework:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "AD080793-FC45-4260-8E45-40E228F432FC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_reconciliation_framework:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "2ACA29E6-F393-46E5-B2B3-9158077819A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "FCD1EC13-CC2F-4668-90D2-D8609066F2DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "4D614F76-0AA1-4EA8-A24A-38EFC90EF5DB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "39B8DFFF-B037-4F29-8C8E-F4BBC3435199"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_balance_sheet_planning:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "4D0D0EAC-300D-44B1-AD4A-93A368D5DBA1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_basic:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "C5E0646D-4866-41FB-AE2E-5307B6F4004A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_basic:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "8A566893-8DCF-49E4-93D0-0ACCEFD70D3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_internal_ratings_based_approach:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "B37FC113-4F40-4D29-8712-7AD250373008"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_internal_ratings_based_approach:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "00E5D719-249D-48B8-BAFC-1E14D250B3F6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_foundation:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.1.0", "matchCriteriaId": "712577A9-04D6-4579-A82B-72200E467399"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_governance_for_us_regulatory_reporting:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.9", "matchCriteriaId": "672949B4-1989-4AA7-806F-EEC07D07F317"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "987A0C35-4C7F-4FFB-B47B-37B69A32F879"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "8B3B6BE3-4C5A-402F-832C-86A0A6234C25"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "9476D1DA-C8A8-40A0-94DD-9B46C05FD461"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "34070F24-2E53-43EC-9117-E1434B2C4C2B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "B9B2C2F6-235F-4E78-A299-18C041C05C9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F727AAC6-6D9F-4B28-B07C-6A93916C43A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "6662C783-5B5C-4559-89F5-1A681AA46A3E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "51C17460-D326-4525-A7D1-0AED53E75E18"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "37C8EE84-A840-4132-B331-C7D450B1FBBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "1D8436A2-9CA3-4C91-B632-9B03368ABC1B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "A00142E6-EEB3-44BD-AB0D-0E5C5640557F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "6149C89E-0111-4CF9-90CA-0662D2F75E04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "6CDDF6CA-6441-4606-9D2F-22A67BA46978"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "6FA0B592-A216-4320-A4FE-ABCA6B3E7D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "CEA4D6CF-D54A-40DF-9B70-E13392D0BE19"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.8", "matchCriteriaId": "2A333755-4B6E-4A0F-AC48-4CEA70CD5801"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "397B1A24-7C95-4A73-8363-4529A7F6CFCC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "EF6D5112-4055-4F89-A5B3-0DCB109481B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "D262848E-AA24-4057-A747-6221BA22ADF4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_price_creation_and_discovery:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "4A01F8ED-64DA-43BC-9C02-488010BCD0F4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_price_creation_and_discovery:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "75638A6A-88B2-4BC7-84EA-1CF5FC30D555"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "501B9331-6BB7-44BF-A664-180CAFABF88C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "F2A3AE3C-8E24-4FB6-9954-9B50CBD59B21"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F8E565DA-91BE-44FC-A28F-579BE8D2281A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_european_banking_authority:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.1.0", "matchCriteriaId": "AED72F90-3B68-45AC-865C-110F7FD30D37"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_us_federal_reserve:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.9", "matchCriteriaId": "4F909C61-1A74-402C-B74F-BAF7297875B0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "26A1F27B-C3AC-4D13-B9B2-2D6CF65D07BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "B95E8056-51D8-4390-ADE3-661B7AE1D7CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "609D6EDF-D4D0-4370-9B8B-CA39D41946C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "9059A907-508B-4844-8D7B-0FA68C0DF6A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_materials_control:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "2AC63D10-2326-4542-B345-31D45B9A7408"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "1F7BF047-03C5-4A60-B718-E222B16DBF41"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:18.2:*:*:*:*:*:*:*", "matchCriteriaId": "E3A73D81-3E1A-42E6-AB96-835CDD5905F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:19.1.0-19.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "351F9DE9-2FCE-4BCA-A098-CDFB07E6E4B9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_accounting_analyzer:8.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "66136D6D-FC52-40DB-B7B6-BA8B7758CE16"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_allocation_manager_for_enterprise_profitability:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "06514F46-544B-4404-B45C-C9584EBC3131"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_allocation_manager_for_enterprise_profitability:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "3BD4BF9A-BF38-460D-974D-5B3255AAF946"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_data_foundation:8.0.6-8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "D10745C6-2751-4FD0-BDFA-84C7AB8066BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0.0", "versionEndIncluding": "5.6.0.0", "matchCriteriaId": "B47C73D0-BE89-4D87-8765-12C507F13AFF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:5.6.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "5B8AA91A-1880-43CD-938D-48EF58ACF2CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "A7506589-9B3B-49BA-B826-774BFDCC45B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "228DA523-4D6D-48C5-BDB0-DB1A60F23F8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "335AB6A7-3B1F-4FA8-AF08-7D64C16C4B04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.56:*:*:*:*:*:*:*", "matchCriteriaId": "D0A735B4-4F3C-416B-8C08-9CB21BAD2889"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.57:*:*:*:*:*:*:*", "matchCriteriaId": "7E1E416B-920B-49A0-9523-382898C2979D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.58:*:*:*:*:*:*:*", "matchCriteriaId": "D9DB4A14-2EF5-4B54-95D2-75E6CF9AA0A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndIncluding": "12.2.20", "matchCriteriaId": "15512D27-7BEB-4DDD-9A1B-447FC7156E3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation_connector_for_siebel:10.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "0DB5E2C7-9C68-4D3B-95AD-9CBF65DE1E94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation_for_mobile_devices:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndIncluding": "12.2.20", "matchCriteriaId": "90F0B2AB-453C-4585-8753-74D17BD20C79"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_back_office:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "31C7EEA3-AA72-48DA-A112-2923DBB37773"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_back_office:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "F0735989-13BD-40B3-B954-AC0529C5B53D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_management_and_segmentation_foundation:19.0:*:*:*:*:*:*:*", "matchCriteriaId": "9EFAEA84-E376-40A2-8C9F-3E0676FEC527"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_returns_management:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "959316A8-C3AF-4126-A242-3835ED0AD1E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_returns_management:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "BDB925C6-2CBC-4D88-B9EA-F246F4F7A206"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:siebel_ui_framework:20.8:*:*:*:*:*:*:*", "matchCriteriaId": "98B9198C-11DF-4E80-ACFC-DC719CED8C7E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:10.3.6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B40B13B7-68B3-4510-968C-6A730EB46462"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "C93CC705-1F8C-4870-99E6-14BF264C3811"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "F14A818F-AA16-4438-A3E4-E64C9287AC66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "4A5BB153-68E0-4DDA-87D1-0D9AB7F0A418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:14.1.1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "04BCDC24-4A21-473C-8733-0D9CFB38A752"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00067.html", "source": "security-advisories@github.com", "tags": ["Broken Link"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00085.html", "source": "security-advisories@github.com", "tags": ["Broken Link"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2020-11/msg00039.html", "source": "security-advisories@github.com", "tags": ["Broken Link"]}, {"url": "http://packetstormsecurity.com/files/162159/jQuery-1.2-Cross-Site-Scripting.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/", "source": "security-advisories@github.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2", "source": "security-advisories@github.com", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://jquery.com/upgrade-guide/3.5/", "source": "security-advisories@github.com", "tags": ["Mitigation", "Vendor Advisory"]}, {"url": "https://lists.apache.org/thread.html/r0483ba0072783c2e1bfea613984bfb3c86e73ba8879d780dc1cc7d36@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r49ce4243b4738dd763caeb27fa8ad6afb426ae3e8c011ff00b8b1f48@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r54565a8f025c7c4f305355fdfd75b68eca442eebdb5f31c2e7d977ae@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r564585d97bc069137e64f521e68ba490c7c9c5b342df5d73c49a0760@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r706cfbc098420f7113968cc377247ec3d1439bce42e679c11c609e2d@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r8f70b0f65d6bedf316ecd899371fd89e65333bc988f6326d2956735c@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rbb448222ba62c430e21e13f940be4cb5cfc373cd3bce56b48c0ffa67@%3Cdev.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rdf44341677cf7eec7e9aa96dcf3f37ed709544863d619cca8c36f133@%3Ccommits.airflow.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/re4ae96fa5c1a2fe71ccbb7b7ac1538bd0cb677be270a2bf6e2f8d108@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rede9cfaa756e050a3d83045008f84a62802fc68c17f2b4eabeaae5e4@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/ree3bd8ddb23df5fa4e372d11c226830ea3650056b1059f3965b3fce2@%3Cissues.flink.apache.org%3E", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/03/msg00033.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AVKYXLWCLZBV2N7M46KYK4LVA5OXWPBY/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QPN2L2XVQGUA2V5HNQJWHK3APSK3VN7K/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SAPQVX3XDNPGFT26QAQ6AJIXZZBZ4CD4/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SFP4UK4EGP4AFH2MWYJ5A5Z4I7XVFQ6B/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VOE7P7APPRQKD4FGNHBKJPDY6FFCOH3W/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202007-03", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20200511-0006/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4693", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.drupal.org/sa-core-2020-002", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com//security-alerts/cpujul2021.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuApr2021.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuapr2022.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2021.html", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2022.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujul2020.html", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujul2022.html", "source": "security-advisories@github.com"}, {"url": "https://www.oracle.com/security-alerts/cpuoct2020.html", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2021.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2020-10", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2020-11", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2021-02", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2021-10", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77"}}