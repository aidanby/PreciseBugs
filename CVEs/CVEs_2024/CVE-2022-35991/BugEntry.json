{"buggy_code": ["/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_CORE_KERNELS_LIST_KERNELS_H_\n#define TENSORFLOW_CORE_KERNELS_LIST_KERNELS_H_\n\n#define EIGEN_USE_THREADS\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define EIGEN_USE_GPU\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/framework/variant.h\"\n#include \"tensorflow/core/framework/variant_op_registry.h\"\n#include \"tensorflow/core/kernels/concat_lib.h\"\n#include \"tensorflow/core/kernels/fill_functor.h\"\n#include \"tensorflow/core/kernels/tensor_list.h\"\n#include \"tensorflow/core/lib/core/coding.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/core/refcount.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/platform/platform.h\"\n#include \"tensorflow/core/util/tensor_ops_util.h\"\n#include \"tensorflow/core/util/util.h\"\n\n// stream.h isn't available in some platforms such as Android, iOS, and\n// ChromiumOS. Only include it for platforms that PluggableDevice is tested on.\n#if !defined(PLUGGABLE_DEVICE_SUPPORTED) &&                              \\\n    (__x86_64__ || __i386__ || defined(__APPLE__) || defined(_WIN32)) && \\\n    !defined(ANDROID) && !defined(__ANDROID__) && !TARGET_OS_IOS &&      \\\n    !defined(PLATFORM_CHROMIUMOS)\n#define PLUGGABLE_DEVICE_SUPPORTED\n#endif\n\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n#include \"tensorflow/stream_executor/stream.h\"\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nStatus TensorShapeFromTensor(const Tensor& t, PartialTensorShape* out);\n\nStatus GetElementShapeFromInput(OpKernelContext* c,\n                                const TensorList& tensor_list, int index,\n                                PartialTensorShape* element_shape);\n\nStatus GetInputList(OpKernelContext* c, int index, const TensorList** list);\n\nStatus ForwardInputOrCreateNewList(OpKernelContext* c, int32_t input_index,\n                                   int32_t output_index,\n                                   const TensorList& input_list,\n                                   TensorList** output_list);\n\n// TODO(penporn): Move this to a proper place.\ninline bool IsPluggableDevice(OpKernelContext* c) {\n  return c->op_device_context() && c->op_device_context()->IsPluggableDevice();\n}\n\ntemplate <typename Device, typename T>\ninline void SetZero(OpKernelContext* ctx, Tensor& tensor) {\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  if (IsPluggableDevice(ctx)) {\n    auto ptr =\n        se::DeviceMemoryBase(tensor.flat<T>().data(), tensor.TotalBytes());\n    auto stream = ctx->op_device_context()->stream();\n    auto result = stream->ThenMemZero(&ptr, tensor.TotalBytes()).ok();\n    DCHECK_EQ(true, result);\n  } else {\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n    functor::SetZeroFunctor<Device, T>()(ctx->eigen_device<Device>(),\n                                         tensor.flat<T>());\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  }\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n}\n\ntemplate <typename T>\ninline void CopyTensorPluggableDevice(OpKernelContext* ctx, Tensor& src,\n                                      Tensor& dst) {\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  auto src_t = src.unaligned_flat<T>();\n  auto dst_t = dst.flat<T>();\n  DCHECK(DataTypeCanUseMemcpy(DataTypeToEnum<T>::v()));\n  auto src_ptr = se::DeviceMemoryBase(src_t.data(), src.TotalBytes());\n  auto dst_ptr = se::DeviceMemoryBase(dst_t.data(), dst.TotalBytes());\n  auto stream = ctx->op_device_context()->stream();\n  auto result = stream->ThenMemcpy(&dst_ptr, src_ptr, src.TotalBytes()).ok();\n  DCHECK_EQ(true, result);\n#else\n  LOG(FATAL)  // Crash OK.\n      << \"PluggableDevice is not supported on this platform.\";\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n}\n\ntemplate <typename Device, typename T>\ninline void CopyTensor(OpKernelContext* ctx, Tensor& src, Tensor& dst) {\n  auto src_t = src.unaligned_flat<T>();\n  auto dst_t = dst.flat<T>();\n  dst_t.device(ctx->eigen_device<Device>()) = src_t;\n}\n\ntemplate <typename T>\nvoid ConcatPluggableDevice(\n    OpKernelContext* context,\n    const std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>&\n        inputs,\n    typename TTypes<T, 2>::Matrix* output) {\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  DCHECK(DataTypeCanUseMemcpy(DataTypeToEnum<T>::v()));\n\n  se::Stream* stream = context->op_device_context()->stream();\n\n  size_t num_inputs = inputs.size();\n  std::vector<ptrdiff_t> sizes;\n  sizes.reserve(num_inputs);\n  int64 row_size = 0;\n  for (const auto& input : inputs) {\n    sizes.push_back(input->dimension(1));\n    row_size += sizes.back();\n  }\n\n  T* out = &(*output)(0, 0);\n  std::vector<const T*> inp;\n  inp.reserve(num_inputs);\n  for (const auto& input : inputs) {\n    inp.push_back(&(*input)(0, 0));\n  }\n  const int64 dim0 = output->dimension(0);\n  for (int64 i = 0; i < dim0; ++i) {\n    for (int64 j = 0; j < num_inputs; ++j) {\n      auto size = sizes[j];\n      se::DeviceMemoryBase out_base{out, size * sizeof(T)};\n      se::DeviceMemoryBase inp_base{const_cast<T*>(inp[j]), size * sizeof(T)};\n      stream->ThenMemcpy(&out_base, inp_base, size * sizeof(T));\n      out += size;\n      inp[j] += size;\n    }\n  }\n#else\n  LOG(FATAL)  // Crash OK.\n      << \"PluggableDevice is not supported on this platform.\";\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n}\n\ntemplate <typename Device, typename T>\nclass TensorListStack : public OpKernel {\n public:\n  typedef std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>\n      ConstMatrixVector;\n  explicit TensorListStack(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n    OP_REQUIRES_OK(c, c->GetAttr(\"num_elements\", &num_elements_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* tensor_list = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &tensor_list));\n    OP_REQUIRES(\n        c, element_dtype_ == tensor_list->element_dtype,\n        errors::InvalidArgument(\n            \"Invalid data types; op elements \", DataTypeString(element_dtype_),\n            \" but list elements \", DataTypeString(tensor_list->element_dtype)));\n    if (num_elements_ != -1) {\n      OP_REQUIRES(c, tensor_list->tensors().size() == num_elements_,\n                  errors::InvalidArgument(\n                      \"Operation expected a list with \", num_elements_,\n                      \" elements but got a list with \",\n                      tensor_list->tensors().size(), \" elements.\"));\n    }\n    PartialTensorShape partial_element_shape;\n    OP_REQUIRES_OK(c, GetElementShapeFromInput(c, *tensor_list, 1,\n                                               &partial_element_shape));\n    OP_REQUIRES(\n        c,\n        partial_element_shape.IsFullyDefined() ||\n            !tensor_list->tensors().empty(),\n        errors::InvalidArgument(\"Tried to stack elements of an empty \",\n                                \"list with non-fully-defined element_shape: \",\n                                partial_element_shape.DebugString()));\n\n    // Check that `element_shape` input tensor is compatible with the shapes of\n    // element tensors.\n    if (!tensor_list->element_shape.IsFullyDefined()) {\n      for (int i = 0; i < tensor_list->tensors().size(); ++i) {\n        const Tensor& t = tensor_list->tensors()[i];\n        if (t.dtype() != DT_INVALID) {\n          PartialTensorShape tmp = partial_element_shape;\n          OP_REQUIRES_OK(c, tmp.MergeWith(t.shape(), &partial_element_shape));\n        }\n      }\n    }\n\n    // Compute the shape of the output tensor by pre-pending the leading dim to\n    // the element_shape.\n    TensorShape element_shape;\n    OP_REQUIRES(c, partial_element_shape.AsTensorShape(&element_shape),\n                errors::InvalidArgument(\n                    \"Tried to stack list which only contains uninitialized \",\n                    \"tensors and has a non-fully-defined element_shape: \",\n                    partial_element_shape.DebugString()));\n    TensorShape output_shape = element_shape;\n    output_shape.InsertDim(0, tensor_list->tensors().size());\n    Tensor* output;\n    OP_REQUIRES_OK(c, c->allocate_output(0, output_shape, &output));\n    if (output->NumElements() == 0) {\n      return;\n    }\n\n    ConstMatrixVector inputs_flat;\n    inputs_flat.reserve(tensor_list->tensors().size());\n    Tensor zeros;\n    for (const auto& t : tensor_list->tensors()) {\n      if (t.dtype() != DT_INVALID) {\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            t.shaped<T, 2>({1, t.NumElements()})));\n      } else {\n        if (!zeros.NumElements()) {\n          AllocatorAttributes attr;\n          if (element_dtype_ == DT_VARIANT) {\n            attr.set_on_host(true);\n          }\n          OP_REQUIRES_OK(\n              c, c->allocate_temp(element_dtype_, element_shape, &zeros, attr));\n          SetZero<Device, T>(c, zeros);\n        }\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            const_cast<const Tensor&>(zeros).shaped<T, 2>(\n                {1, zeros.NumElements()})));\n      }\n    }\n    auto output_flat = output->shaped<T, 2>({1, output->NumElements()});\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      ConcatGPU<T>(c, inputs_flat, output, &output_flat);\n      return;\n    }\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (IsPluggableDevice(c)) {\n      ConcatPluggableDevice<T>(c, inputs_flat, &output_flat);\n    } else {\n      ConcatCPU<T>(c->device(), inputs_flat, &output_flat);\n    }\n  }\n\n private:\n  int num_elements_;\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListGetItem : public OpKernel {\n public:\n  explicit TensorListGetItem(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* l = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &l));\n    OP_REQUIRES(c, element_dtype_ == l->element_dtype,\n                errors::InvalidArgument(\"Invalid data types; op elements \",\n                                        DataTypeString(element_dtype_),\n                                        \" but list elements \",\n                                        DataTypeString(l->element_dtype)));\n    int32_t index = c->input(1).scalar<int32>()();\n    OP_REQUIRES(c, index < l->tensors().size(),\n                errors::InvalidArgument(\"Trying to access element \", index,\n                                        \" in a list with \", l->tensors().size(),\n                                        \" elements.\"));\n    if (l->tensors()[index].dtype() != DT_INVALID) {\n      c->set_output(0, l->tensors()[index]);\n    } else {\n      PartialTensorShape partial_element_shape;\n      OP_REQUIRES_OK(\n          c, GetElementShapeFromInput(c, *l, 2, &partial_element_shape));\n      TensorShape element_shape;\n      // If l->element_shape and the element_shape input are both not fully\n      // defined, try to infer the shape from other list elements. This requires\n      // that all initialized list elements have the same shape.\n      // NOTE(srbs): This might be a performance bottleneck since we are\n      // iterating over the entire list here. This is necessary for feature\n      // parity with TensorArray.read. TensorArray has a mode in which all\n      // elements are required to be of the same shape, TensorList does not.\n      // In that mode TensorArray sets the array's element_shape on the first\n      // write call. We could do something similar here if needed.\n      if (!partial_element_shape.IsFullyDefined()) {\n        for (const Tensor& t : l->tensors()) {\n          if (t.dtype() != DT_INVALID) {\n            PartialTensorShape tmp = partial_element_shape;\n            OP_REQUIRES_OK(c, tmp.MergeWith(t.shape(), &partial_element_shape));\n          }\n        }\n      }\n      OP_REQUIRES(\n          c, partial_element_shape.AsTensorShape(&element_shape),\n          errors::InvalidArgument(\"Trying to read an uninitialized tensor but \",\n                                  \"element_shape is not fully defined: \",\n                                  partial_element_shape.DebugString(),\n                                  \" and no list element is set.\"));\n      Tensor* result;\n      AllocatorAttributes attr;\n      if (element_dtype_ == DT_VARIANT) {\n        attr.set_on_host(true);\n      }\n      OP_REQUIRES_OK(c, c->allocate_output(0, element_shape, &result, attr));\n      SetZero<Device, T>(c, *result);\n    }\n  }\n\n private:\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListPopBack : public OpKernel {\n public:\n  explicit TensorListPopBack(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* l = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &l));\n    OP_REQUIRES(c, element_dtype_ == l->element_dtype,\n                errors::InvalidArgument(\"Invalid data types; op elements \",\n                                        DataTypeString(element_dtype_),\n                                        \" but list elements \",\n                                        DataTypeString(l->element_dtype)));\n\n    OP_REQUIRES(c, !l->tensors().empty(),\n                errors::InvalidArgument(\"Trying to pop from an empty list.\"));\n\n    const Tensor& t = l->tensors().back();\n    if (t.dtype() != DT_INVALID) {\n      c->set_output(1, t);\n    } else {\n      PartialTensorShape partial_element_shape;\n      OP_REQUIRES_OK(\n          c, GetElementShapeFromInput(c, *l, 1, &partial_element_shape));\n      TensorShape element_shape;\n      OP_REQUIRES(\n          c, partial_element_shape.AsTensorShape(&element_shape),\n          errors::InvalidArgument(\"Trying to read an uninitialized tensor but \",\n                                  \"element_shape is not fully defined.\",\n                                  partial_element_shape.DebugString()));\n      Tensor* result;\n      AllocatorAttributes attr;\n      if (element_dtype_ == DT_VARIANT) {\n        attr.set_on_host(true);\n      }\n      OP_REQUIRES_OK(c, c->allocate_output(1, element_shape, &result, attr));\n      SetZero<Device, T>(c, *result);\n    }\n\n    TensorList* output_list = nullptr;\n    OP_REQUIRES_OK(c, ForwardInputOrCreateNewList(c, 0, 0, *l, &output_list));\n    output_list->tensors().pop_back();\n  }\n\n private:\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListConcat : public OpKernel {\n public:\n  using ConstMatrixVector =\n      std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>;\n  explicit TensorListConcat(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n    if (c->HasAttr(\"element_shape\")) {\n      OP_REQUIRES_OK(c, c->GetAttr(\"element_shape\", &element_shape_));\n    }\n  }\n\n  void Compute(OpKernelContext* c) override {\n    PartialTensorShape element_shape_except_first_dim;\n    if (!element_shape_.unknown_rank()) {\n      element_shape_except_first_dim = PartialTensorShape(\n          gtl::ArraySlice<int64_t>(element_shape_.dim_sizes()).subspan(1));\n    }\n    // Check that the input Variant tensor is indeed a TensorList and has the\n    // correct element type.\n    const TensorList* tensor_list = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &tensor_list));\n    OP_REQUIRES(\n        c, element_dtype_ == tensor_list->element_dtype,\n        errors::InvalidArgument(\n            \"Invalid data types; op elements \", DataTypeString(element_dtype_),\n            \" but list elements \", DataTypeString(tensor_list->element_dtype)));\n    // The leading dimension of all list elements if they are all the same.\n    // This is used as the leading dim of uninitialized tensors in the list\n    // if leading_dims is not provided.\n    int64_t first_dim = -1;\n    if (c->num_inputs() > 1) {\n      // TensorListConcatV2\n      PartialTensorShape element_shape;\n      OP_REQUIRES_OK(\n          c, GetElementShapeFromInput(c, *tensor_list, 1, &element_shape));\n      OP_REQUIRES(c, element_shape.unknown_rank() || element_shape.dims() >= 1,\n                  errors::InvalidArgument(\n                      \"Concat requires elements to be at least vectors, \",\n                      \"found scalars instead.\"));\n      // Split `element_shape` into `first_dim` and\n      // `element_shape_except_first_dim`.\n      first_dim = element_shape.dim_size(0);\n      element_shape_except_first_dim = element_shape;\n      element_shape_except_first_dim.RemoveDim(0);\n    }\n    // If the TensorList is empty, element_shape_except_first_dim must be fully\n    // defined.\n    OP_REQUIRES(c,\n                !tensor_list->tensors().empty() ||\n                    element_shape_except_first_dim.IsFullyDefined(),\n                errors::InvalidArgument(\n                    \"All except the first dimension must be fully defined \",\n                    \"when concating an empty tensor list. element_shape: \",\n                    element_shape_except_first_dim.DebugString()));\n    // 1. Check that `element_shape_except_first_dim` input tensor is\n    //    compatible with the shapes of element tensors.\n    // 2. Check that the elements have the same shape except the first dim.\n    // 3. If `first_dim` is known, check that it is compatible with the leading\n    //    dims of all elements.\n    // 4. If `first_dim` is unknown (-1), check whether all initialized\n    //    elements have the same leading dim and if so set `first_dim` to that\n    //    value.\n    if (!tensor_list->element_shape.IsFullyDefined()) {\n      bool check_dim = (first_dim == -1);\n      int64_t inferred_first_dim = first_dim;\n      for (int i = 0; i < tensor_list->tensors().size(); ++i) {\n        const Tensor& t = tensor_list->tensors()[i];\n        if (t.dtype() != DT_INVALID) {\n          PartialTensorShape tmp = element_shape_except_first_dim;\n          OP_REQUIRES(\n              c, TensorShapeUtils::IsVectorOrHigher(t.shape()),\n              errors::InvalidArgument(\"Concat saw a scalar shape at index \", i,\n                                      \" but requires at least vectors.\"));\n          TensorShape shape_except_first_dim = TensorShape(\n              gtl::ArraySlice<int64_t>(t.shape().dim_sizes()).subspan(1));\n          OP_REQUIRES_OK(c, tmp.MergeWith(shape_except_first_dim,\n                                          &element_shape_except_first_dim));\n          OP_REQUIRES(c, first_dim == -1 || first_dim == t.shape().dim_size(0),\n                      errors::InvalidArgument(\n                          \"First entry of element_shape input does not match \",\n                          \"the first dim of list element at index: \", i,\n                          \" Expected: \", first_dim,\n                          \" Actual: \", t.shape().dim_size(0)));\n          if (check_dim) {\n            if (inferred_first_dim == -1) {\n              inferred_first_dim = t.shape().dim_size(0);\n            } else if (inferred_first_dim != t.shape().dim_size(0)) {\n              inferred_first_dim = -1;\n              check_dim = false;\n            }\n          }\n        }\n      }\n      first_dim = inferred_first_dim;\n    }\n    TensorShape output_shape;\n    OP_REQUIRES(c, element_shape_except_first_dim.AsTensorShape(&output_shape),\n                errors::InvalidArgument(\n                    \"Trying to concat list with only uninitialized tensors \",\n                    \"but element_shape_except_first_dim is not fully defined: \",\n                    element_shape_except_first_dim.DebugString()));\n    // Build the lengths_tensor and leading dim of the output tensor by\n    // iterating over all element tensors.\n    Tensor* lengths_tensor = nullptr;\n    OP_REQUIRES_OK(c, c->allocate_output(1,\n                                         TensorShape({static_cast<int64_t>(\n                                             tensor_list->tensors().size())}),\n                                         &lengths_tensor));\n    auto lengths_tensor_vec = lengths_tensor->vec<int64_t>();\n    int64_t leading_dim = 0;\n    for (size_t i = 0; i < tensor_list->tensors().size(); i++) {\n      int64_t dim;\n      if (tensor_list->tensors()[i].dtype() != DT_INVALID) {\n        dim = tensor_list->tensors()[i].shape().dim_size(0);\n      } else {\n        // If leading_dims is not provided or does not contain an entry for\n        // index i use the inferred `first_dim` if set.\n        if ((c->num_inputs() <= 2 || i >= c->input(2).NumElements()) &&\n            first_dim != -1) {\n          dim = first_dim;\n        } else {\n          OP_REQUIRES(c, c->num_inputs() > 2,\n                      errors::InvalidArgument(\n                          \"Concating lists with uninitialized tensors is not \",\n                          \"supported in this version of TensorListConcat. \",\n                          \"Consider updating your GraphDef to run the newer \",\n                          \"version.\"));\n          OP_REQUIRES(c, i < c->input(2).NumElements(),\n                      errors::InvalidArgument(\n                          \"List contains uninitialized tensor at index \", i,\n                          \" but leading_dims has only \",\n                          c->input(2).NumElements(), \" elements.\"));\n          dim = c->input(2).vec<int64_t>()(i);\n        }\n      }\n      leading_dim += dim;\n      lengths_tensor_vec(i) = dim;\n    }\n    output_shape.InsertDim(0, leading_dim);\n    Tensor* output;\n    // Allocate the output tensor and fill it up with the concated element\n    // tensors.\n    OP_REQUIRES_OK(c, c->allocate_output(0, output_shape, &output));\n    if (output->NumElements() == 0) {\n      return;\n    }\n\n    ConstMatrixVector inputs_flat;\n    inputs_flat.reserve(tensor_list->tensors().size());\n    // Store the zeros tensors in a vector to prevent them from being GC'ed till\n    // concat is complete.\n    std::vector<Tensor> zeros_vec;\n    for (int i = 0; i < tensor_list->tensors().size(); i++) {\n      const Tensor& element_tensor = tensor_list->tensors()[i];\n      if (element_tensor.dtype() != DT_INVALID) {\n        if (element_tensor.NumElements() > 0) {\n          inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n              element_tensor.shaped<T, 2>({1, element_tensor.NumElements()})));\n        }\n      } else {\n        AllocatorAttributes attr;\n        if (element_dtype_ == DT_VARIANT) {\n          attr.set_on_host(true);\n        }\n        TensorShape element_shape = output_shape;\n        element_shape.set_dim(0, lengths_tensor_vec(i));\n        zeros_vec.emplace_back();\n        Tensor& zeros = zeros_vec.back();\n        OP_REQUIRES_OK(\n            c, c->allocate_temp(element_dtype_, element_shape, &zeros, attr));\n        SetZero<Device, T>(c, zeros);\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            const_cast<const Tensor&>(zeros).shaped<T, 2>(\n                {1, zeros.NumElements()})));\n      }\n    }\n    auto output_flat = output->shaped<T, 2>({1, output->NumElements()});\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      ConcatGPU<T>(c, inputs_flat, output, &output_flat);\n      return;\n    }\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (IsPluggableDevice(c)) {\n      ConcatPluggableDevice<T>(c, inputs_flat, &output_flat);\n    } else {\n      ConcatCPU<T>(c->device(), inputs_flat, &output_flat);\n    }\n  }\n\n private:\n  DataType element_dtype_;\n  PartialTensorShape element_shape_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListSplit : public OpKernel {\n public:\n  TensorListSplit(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    Tensor* output_tensor;\n    AllocatorAttributes attr;\n    attr.set_on_host(true);\n    OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));\n    PartialTensorShape element_shape;\n    OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));\n    OP_REQUIRES(c, element_shape.unknown_rank() || element_shape.dims() >= 1,\n                errors::InvalidArgument(\n                    \"TensorListSplit requires element_shape to be at least of \",\n                    \"rank 1, but saw: \", element_shape.DebugString()));\n    TensorList output_list;\n    const Tensor& input_tensor = c->input(0);\n    output_list.element_dtype = input_tensor.dtype();\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    input_tensor.shape().DebugString()));\n    TensorShape tensor_shape_without_first_dim(input_tensor.shape());\n    tensor_shape_without_first_dim.RemoveDim(0);\n    PartialTensorShape element_shape_without_first_dim;\n    if (!element_shape.unknown_rank()) {\n      element_shape_without_first_dim =\n          PartialTensorShape(element_shape.dim_sizes());\n      element_shape_without_first_dim.RemoveDim(0);\n    }\n    OP_REQUIRES(c,\n                element_shape_without_first_dim.IsCompatibleWith(\n                    tensor_shape_without_first_dim),\n                errors::InvalidArgument(\n                    \"tensor shape \", input_tensor.shape().DebugString(),\n                    \" is not compatible with element_shape \",\n                    element_shape.DebugString()));\n    output_list.element_shape = element_shape;\n    const Tensor& lengths = c->input(2);\n    OP_REQUIRES(c, TensorShapeUtils::IsVector(lengths.shape()),\n                errors::InvalidArgument(\n                    \"Expected lengths to be a vector, received shape: \",\n                    lengths.shape().DebugString()));\n    output_list.tensors().reserve(lengths.shape().dim_size(0));\n\n    const auto copy_tensor = IsPluggableDevice(c)\n                                 ? &CopyTensorPluggableDevice<T>\n                                 : &CopyTensor<Device, T>;\n\n    int64_t start = 0;\n    int64_t end = 0;\n    for (int i = 0; i < lengths.shape().dim_size(0); ++i) {\n      int64_t length = lengths.vec<int64_t>()(i);\n      OP_REQUIRES(\n          c, length >= 0,\n          errors::InvalidArgument(\"Invalid value in lengths: \", length));\n      end = start + length;\n      OP_REQUIRES(c, end <= input_tensor.shape().dim_size(0),\n                  errors::InvalidArgument(\"Attempting to slice [\", start, \", \",\n                                          end, \"] from tensor with length \",\n                                          input_tensor.shape().dim_size(0)));\n      Tensor tmp = input_tensor.Slice(start, end);\n      start = end;\n      // TODO(apassos) maybe not always align; but weird compiler bugs seem to\n      // prevent this.\n      Tensor aligned;\n      OP_REQUIRES_OK(c, c->allocate_temp(tmp.dtype(), tmp.shape(), &aligned));\n      copy_tensor(c, tmp, aligned);\n      output_list.tensors().emplace_back(aligned);\n    }\n    OP_REQUIRES(c, end == input_tensor.shape().dim_size(0),\n                errors::InvalidArgument(\n                    \"Unused values in tensor. Length of tensor: \",\n                    input_tensor.shape().dim_size(0), \" Values used: \", end));\n    output_tensor->scalar<Variant>()() = std::move(output_list);\n  }\n};\n\ntemplate <typename Device, typename T>\nclass TensorListGather : public OpKernel {\n public:\n  typedef std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>\n      ConstMatrixVector;\n  explicit TensorListGather(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* tensor_list = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &tensor_list));\n    OP_REQUIRES(\n        c, element_dtype_ == tensor_list->element_dtype,\n        errors::InvalidArgument(\n            \"Invalid data types; op elements \", DataTypeString(element_dtype_),\n            \" but list elements \", DataTypeString(tensor_list->element_dtype)));\n    const Tensor& indices = c->input(1);\n    PartialTensorShape partial_element_shape;\n    OP_REQUIRES_OK(c, GetElementShapeFromInput(c, *tensor_list, 2,\n                                               &partial_element_shape));\n    OP_REQUIRES(\n        c, partial_element_shape.IsFullyDefined() || indices.NumElements() > 0,\n        errors::InvalidArgument(\"Tried to gather 0-elements from \"\n                                \"a list with non-fully-defined shape: \",\n                                partial_element_shape.DebugString()));\n\n    // Check that `element_shape` input tensor is compatible with the shapes of\n    // element tensors.\n    if (!tensor_list->element_shape.IsFullyDefined()) {\n      for (int index = 0; index < indices.NumElements(); ++index) {\n        const int i = indices.flat<int32>()(index);\n        const Tensor& t = tensor_list->tensors()[i];\n        if (t.dtype() != DT_INVALID) {\n          PartialTensorShape tmp = partial_element_shape;\n          OP_REQUIRES_OK(c, tmp.MergeWith(t.shape(), &partial_element_shape));\n        }\n      }\n    }\n\n    // Compute the shape of the output tensor by pre-pending the leading dim to\n    // the element_shape.\n    TensorShape element_shape;\n    OP_REQUIRES(\n        c, partial_element_shape.AsTensorShape(&element_shape),\n        errors::InvalidArgument(\"Tried to gather uninitialized tensors from a \",\n                                \"list with non-fully-defined element_shape: \",\n                                partial_element_shape.DebugString()));\n    TensorShape output_shape = element_shape;\n    output_shape.InsertDim(0, indices.NumElements());\n    Tensor* output;\n    OP_REQUIRES_OK(c, c->allocate_output(0, output_shape, &output));\n    if (output->NumElements() == 0) {\n      return;\n    }\n\n    ConstMatrixVector inputs_flat;\n    inputs_flat.reserve(indices.NumElements());\n    Tensor zeros;\n    for (int index = 0; index < indices.NumElements(); ++index) {\n      const int i = indices.flat<int32>()(index);\n      OP_REQUIRES(\n          c, i < tensor_list->tensors().size(),\n          errors::InvalidArgument(\"Index \", i, \" out o range; list only has \",\n                                  tensor_list->tensors().size(), \" elements.\"));\n      const Tensor& t = tensor_list->tensors()[i];\n      if (t.dtype() != DT_INVALID) {\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            t.shaped<T, 2>({1, t.NumElements()})));\n      } else {\n        if (!zeros.NumElements()) {\n          AllocatorAttributes attr;\n          if (element_dtype_ == DT_VARIANT) {\n            attr.set_on_host(true);\n          }\n          OP_REQUIRES_OK(\n              c, c->allocate_temp(element_dtype_, element_shape, &zeros, attr));\n          SetZero<Device, T>(c, zeros);\n        }\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            const_cast<const Tensor&>(zeros).shaped<T, 2>(\n                {1, zeros.NumElements()})));\n      }\n    }\n    auto output_flat = output->shaped<T, 2>({1, output->NumElements()});\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      ConcatGPU<T>(c, inputs_flat, output, &output_flat);\n      return;\n    }\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (IsPluggableDevice(c)) {\n      ConcatPluggableDevice<T>(c, inputs_flat, &output_flat);\n    } else {\n      ConcatCPU<T>(c->device(), inputs_flat, &output_flat);\n    }\n  }\n\n private:\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListFromTensor : public OpKernel {\n public:\n  TensorListFromTensor(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    Tensor* output_tensor;\n    AllocatorAttributes attr;\n    attr.set_on_host(true);\n    OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));\n    PartialTensorShape element_shape;\n    OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));\n    TensorList output_list;\n    const Tensor& t = c->input(0);\n    output_list.element_dtype = t.dtype();\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(t.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    t.shape().DebugString()));\n    TensorShape output_shape(t.shape());\n    output_shape.RemoveDim(0);\n    OP_REQUIRES(c, element_shape.IsCompatibleWith(output_shape),\n                errors::InvalidArgument(\n                    \"Specified a list with shape \", element_shape.DebugString(),\n                    \" from a tensor with shape \", output_shape.DebugString()));\n    output_list.element_shape = element_shape;\n    output_list.tensors().reserve(t.shape().dim_size(0));\n\n    const auto copy_tensor = IsPluggableDevice(c)\n                                 ? &CopyTensorPluggableDevice<T>\n                                 : &CopyTensor<Device, T>;\n\n    for (int i = 0; i < t.shape().dim_size(0); ++i) {\n      Tensor tmp = t.Slice(i, i + 1);\n      TensorShape tmp_shape = tmp.shape();\n      tmp_shape.RemoveDim(0);\n      OP_REQUIRES(c, tmp.CopyFrom(tmp, tmp_shape),\n                  errors::Unknown(\"Unexpected shape error.\"));\n      // TODO(apassos) maybe not always align; but weird compiler bugs seem to\n      // prevent this.\n      Tensor aligned;\n      OP_REQUIRES_OK(c, c->allocate_temp(tmp.dtype(), tmp.shape(), &aligned));\n      copy_tensor(c, tmp, aligned);\n      output_list.tensors().push_back(aligned);\n    }\n    output_tensor->scalar<Variant>()() = std::move(output_list);\n  }\n};\n\n// Scatters values in `value` into `list`. Assumes that `indices` are valid.\ntemplate <typename Device, typename T>\nStatus Scatter(OpKernelContext* c, const Tensor& value, const Tensor& indices,\n               TensorList* list) {\n  const auto copy_tensor = IsPluggableDevice(c) ? &CopyTensorPluggableDevice<T>\n                                                : &CopyTensor<Device, T>;\n  for (int index = 0; index < indices.NumElements(); ++index) {\n    const int i = indices.flat<int32>()(index);\n    Tensor tmp = value.Slice(index, index + 1);\n    TensorShape tmp_shape = tmp.shape();\n    tmp_shape.RemoveDim(0);\n    if (!tmp.CopyFrom(tmp, tmp_shape)) {\n      return errors::Unknown(\"Unexpected shape error.\");\n    }\n    // TODO(apassos) maybe not always align; but weird compiler bugs seem to\n    // prevent this.\n    Tensor aligned;\n    TF_RETURN_IF_ERROR(c->allocate_temp(tmp.dtype(), tmp.shape(), &aligned));\n    // TODO(apassos) do all slices in a single kernel invocation instead of\n    // many small ones.\n    copy_tensor(c, tmp, aligned);\n    std::swap(list->tensors()[i], aligned);\n  }\n  return OkStatus();\n}\n\ntemplate <typename Device, typename T>\nclass TensorListScatterIntoExistingList : public OpKernel {\n public:\n  TensorListScatterIntoExistingList(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* l = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &l));\n    const Tensor& input_tensor = c->input(1);\n    const Tensor& indices = c->input(2);\n\n    // Check that inputs are valid.\n    OP_REQUIRES(c, input_tensor.dtype() == l->element_dtype,\n                errors::InvalidArgument(\n                    \"Invalid data types; input tensor type: \",\n                    DataTypeString(input_tensor.dtype()),\n                    \" list element_type: \", DataTypeString(l->element_dtype)));\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    input_tensor.shape().DebugString()));\n    OP_REQUIRES(c, TensorShapeUtils::IsVector(indices.shape()),\n                errors::InvalidArgument(\n                    \"Expected indices to be a vector, but received shape: \",\n                    indices.shape().DebugString()));\n    OP_REQUIRES(\n        c, indices.NumElements() == input_tensor.shape().dim_size(0),\n        errors::InvalidArgument(\n            \"Expected len(indices) == tensor.shape[0], but saw: \",\n            indices.NumElements(), \" vs. \", input_tensor.shape().dim_size(0)));\n\n    // Resize the list if needed to accommodate all indices.\n    TensorList* output_list = nullptr;\n    OP_REQUIRES_OK(c, ForwardInputOrCreateNewList(c, 0, 0, *l, &output_list));\n    const auto indices_vec = indices.vec<int32>();\n    int32_t max_index =\n        (indices.NumElements() == 0)\n            ? -1\n            : *std::max_element(indices_vec.data(),\n                                indices_vec.data() + indices.NumElements());\n    if (max_index + 1 > output_list->tensors().size()) {\n      output_list->tensors().resize(max_index + 1);\n    }\n\n    // Scatter the values.\n    OP_REQUIRES_OK(c,\n                   Scatter<Device, T>(c, input_tensor, indices, output_list));\n  }\n};\n\ntemplate <typename Device, typename T>\nclass TensorListScatter : public OpKernel {\n public:\n  TensorListScatter(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    Tensor* output_tensor;\n    AllocatorAttributes attr;\n    attr.set_on_host(true);\n    OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));\n    Tensor indices = c->input(1);\n    PartialTensorShape element_shape;\n    OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(2), &element_shape));\n    // TensorListScatterV2 passes the num_elements input, TensorListScatter does\n    // not.\n    int num_elements = c->num_inputs() >= 4 ? c->input(3).scalar<int>()() : -1;\n    OP_REQUIRES(c, num_elements >= -1,\n                errors::InvalidArgument(\n                    \"TensorListScatter expects num_elements >= -1, found: \",\n                    num_elements));\n    TensorList output_list;\n    const Tensor& input_tensor = c->input(0);\n    output_list.element_dtype = input_tensor.dtype();\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    input_tensor.shape().DebugString()));\n    TensorShape output_shape(input_tensor.shape());\n    output_shape.RemoveDim(0);\n    OP_REQUIRES(c, element_shape.IsCompatibleWith(output_shape),\n                errors::InvalidArgument(\n                    \"Specified a list with shape \", element_shape.DebugString(),\n                    \" from a tensor with shape \", output_shape.DebugString()));\n    output_list.element_shape = element_shape;\n\n    OP_REQUIRES(c, indices.NumElements() == input_tensor.shape().dim_size(0),\n                errors::InvalidArgument(\n                    \"Invalid number of rows in input tensor. Expected: \",\n                    indices.NumElements(),\n                    \" Actual: \", input_tensor.shape().dim_size(0)));\n\n    // Validate indices and resize output_list.tensors to fit the highest index.\n    {\n      int highest_index = -1;\n      for (int index = 0; index < indices.NumElements(); ++index) {\n        const int i = indices.flat<int32>()(index);\n        OP_REQUIRES(\n            c, i >= 0,\n            errors::InvalidArgument(\n                \"Indices in TensorListScatter must all be non-negative.\"));\n        OP_REQUIRES(c, num_elements == -1 || i < num_elements,\n                    errors::InvalidArgument(\n                        \"TensorListScatter: Trying to scatter at index \", i,\n                        \" in list with size \", num_elements));\n        if (i > highest_index) {\n          highest_index = i;\n        }\n      }\n      output_list.tensors().resize(std::max(highest_index + 1, num_elements),\n                                   Tensor(DT_INVALID));\n    }\n\n    OP_REQUIRES_OK(c,\n                   Scatter<Device, T>(c, input_tensor, indices, &output_list));\n    output_tensor->scalar<Variant>()() = std::move(output_list);\n  }\n};\n\ntemplate <typename Device>\nStatus TensorListBinaryAdd(OpKernelContext* c, const TensorList& a,\n                           const TensorList& b, TensorList* out) {\n  if (a.element_dtype != b.element_dtype) {\n    return errors::InvalidArgument(\n        \"Trying to add two lists of tensors of different dtypes. One is \",\n        DataTypeString(a.element_dtype), \" and the other is \",\n        DataTypeString(b.element_dtype));\n  }\n  out->element_dtype = a.element_dtype;\n  if (!a.element_shape.IsCompatibleWith(b.element_shape)) {\n    return errors::InvalidArgument(\n        \"Trying to add two lists of tensors with incompatible element shapes. \"\n        \"One is \",\n        a.element_shape.DebugString(), \" and the other is \",\n        b.element_shape.DebugString());\n  }\n\n  TF_RETURN_IF_ERROR(\n      a.element_shape.MergeWith(b.element_shape, &out->element_shape));\n  if (a.tensors().size() != b.tensors().size()) {\n    return errors::InvalidArgument(\n        \"Trying to add two lists of tensors with different lengths. One is \",\n        a.tensors().size(), \" and the other is \", b.tensors().size());\n  }\n  out->tensors().reserve(a.tensors().size());\n  for (int i = 0; i < a.tensors().size(); ++i) {\n    const Tensor& a_tensor = a.tensors()[i];\n    const Tensor& b_tensor = b.tensors()[i];\n    Tensor out_tensor;\n    TF_RETURN_IF_ERROR(\n        BinaryAddTensors<Device>(c, a_tensor, b_tensor, &out_tensor));\n    out->tensors().push_back(out_tensor);\n  }\n  return OkStatus();\n}\n\ntemplate <typename Device>\nStatus TensorListZerosLike(OpKernelContext* c, const TensorList& x,\n                           TensorList* y) {\n  y->element_dtype = x.element_dtype;\n  y->element_shape = x.element_shape;\n  y->tensors().reserve(x.tensors().size());\n  for (const Tensor& t : x.tensors()) {\n    Tensor out_tensor;\n    TF_RETURN_IF_ERROR(ZerosLikeTensor<Device>(c, t, &out_tensor));\n    y->tensors().emplace_back(out_tensor);\n  }\n  return OkStatus();\n}\n\ntemplate <typename Device, typename T>\nclass TensorListPushBackBatch : public OpKernel {\n public:\n  explicit TensorListPushBackBatch(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const Tensor& input = c->input(1);\n    OP_REQUIRES(c, element_dtype_ == input.dtype(),\n                errors::InvalidArgument(\"Invalid data types; list elements \",\n                                        DataTypeString(element_dtype_),\n                                        \" but tried to append \",\n                                        DataTypeString(input.dtype())));\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input.shape()),\n                errors::InvalidArgument(\n                    \"Expected tensor to be at least a vector, but saw shape: \",\n                    input.shape().DebugString()));\n\n    const TensorShape& tls_shape = c->input(0).shape();\n\n    // For purposes of input forwarding, we want the least restrictive\n    // AllocatorAttributes possible.  If we need to allocate later,\n    // we'll request the DT_VARIANT be allocated on host.\n    AllocatorAttributes attr;\n\n    std::unique_ptr<Tensor> tls_alias = c->forward_input(\n        0 /*input_index*/, 0 /*output_index*/, DT_VARIANT, tls_shape,\n        DEVICE_MEMORY /* input is always on DEVICE_MEMORY */, attr);\n\n    bool ok_to_alias = tls_alias != nullptr;\n    if (tls_alias && tls_alias->dtype() == DT_VARIANT &&\n        tls_alias->NumElements() > 0) {\n      auto alias_t = tls_alias->flat<Variant>();\n      for (int i = 0; i < tls_alias->NumElements(); ++i) {\n        TensorList* tl_i = alias_t(i).get<TensorList>();\n        if (tl_i == nullptr || !tl_i->RefCountIsOne()) {\n          ok_to_alias = false;\n          break;\n        }\n      }\n    }\n    const Tensor& tls = ok_to_alias ? *tls_alias : c->input(0);\n\n    OP_REQUIRES(c, tls.dtype() == DT_VARIANT,\n                errors::InvalidArgument(\n                    \"Expected input_handles dtype to be Variant, but saw: \",\n                    DataTypeString(tls.dtype())));\n    OP_REQUIRES(c, TensorShapeUtils::IsVector(tls_shape),\n                errors::InvalidArgument(\n                    \"Expected input_handles to be a vector, but saw shape: \",\n                    tls_shape.DebugString()));\n    const int64_t batch_size = tls.NumElements();\n    OP_REQUIRES(c, input.dim_size(0) == batch_size,\n                errors::InvalidArgument(\n                    \"Expected tensor.shape[0] == input_handles.size, but saw \",\n                    input.dim_size(0), \" vs. \", batch_size));\n    auto tls_t = tls.vec<Variant>();\n\n    TensorShape input_element_shape = input.shape();\n    input_element_shape.RemoveDim(0);\n    std::vector<const TensorList*> tl_batch;\n    for (int64_t b = 0; b < batch_size; ++b) {\n      const TensorList* l = tls_t(b).get<TensorList>();\n      OP_REQUIRES(c, l != nullptr,\n                  errors::InvalidArgument(\"Input handle at index \", b,\n                                          \" is not a list. Saw: '\",\n                                          tls_t(b).DebugString(), \"'\"));\n      OP_REQUIRES(\n          c, l->element_shape.IsCompatibleWith(input_element_shape),\n          errors::InvalidArgument(\n              \"Tried to append a tensor with incompatible shape to a \"\n              \"list at index \",\n              b, \". Op element shape: \", input_element_shape.DebugString(),\n              \" list shape: \", l->element_shape.DebugString()));\n      OP_REQUIRES(c, element_dtype_ == l->element_dtype,\n                  errors::InvalidArgument(\n                      \"Invalid data type at index \", b, \"; op elements \",\n                      DataTypeString(element_dtype_), \" but list elements \",\n                      DataTypeString(l->element_dtype)));\n      tl_batch.push_back(l);\n    }\n\n    Tensor* result;\n\n    if (ok_to_alias) {\n      result = tls_alias.get();\n      c->set_output(0, *result);\n    } else {\n      // DT_VARIANT tensors always allocated on host.\n      AllocatorAttributes attr;\n      attr.set_on_host(true);\n      OP_REQUIRES_OK(\n          c, c->allocate_output(0, TensorShape{batch_size}, &result, attr));\n    }\n\n    if (batch_size == 0) {\n      return;\n    }\n\n    auto input_t = input.flat_outer_dims<T, 2>();\n    auto result_t = result->vec<Variant>();\n\n    for (int64_t b = 0; b < batch_size; ++b) {\n      if (!ok_to_alias) {\n        result_t(b) = tl_batch[b]->Copy();\n      }\n      TensorList* output = result_t(b).get<TensorList>();\n      DCHECK(output != nullptr);\n      Tensor frame;\n      OP_REQUIRES_OK(\n          c, c->allocate_temp(element_dtype_, input_element_shape, &frame));\n      if (input_element_shape.num_elements() > 0) {\n        auto frame_t = frame.flat<T>();\n        // TODO(penporn): Get this if out of the batch loop.\n        if (IsPluggableDevice(c)) {\n          // The chip method need Eigen Device, so need to use Tensor.Slice\n          // instead of chip for pluggable device. The input should be reshaped\n          // to 2-D and so can be sliced by batch dim.\n          auto input_t_shape =\n              TensorShape({input_t.dimension(0), input_t.dimension(1)});\n          auto input_reshaped = Tensor();\n          OP_REQUIRES(c, input_reshaped.CopyFrom(input, input_t_shape),\n                      errors::Unknown(\"Unexpected shape error.\"));\n\n          auto input_batch = input_reshaped.Slice(b, b + 1);\n          CopyTensorPluggableDevice<T>(c, input_batch, frame);\n        } else {\n          frame_t.device(c->eigen_device<Device>()) =\n              input_t.template chip<0>(b);\n        }\n      }\n      output->tensors().push_back(std::move(frame));\n    }\n  }\n\n private:\n  DataType element_dtype_;\n};\n\n}  // namespace tensorflow\n\n#undef PLUGGABLE_DEVICE_SUPPORTED\n#endif  // TENSORFLOW_CORE_KERNELS_LIST_KERNELS_H_\n", "# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for ops which manipulate lists of tensors.\"\"\"\n\n# pylint: disable=g-bad-name\nfrom absl.testing import parameterized\nimport numpy as np  # pylint: disable=unused-import\n\nfrom tensorflow.core.framework import full_type_pb2\nfrom tensorflow.python.client import session\nfrom tensorflow.python.eager import backprop\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.eager import function\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import tensor_shape\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import control_flow_ops\nfrom tensorflow.python.ops import gen_list_ops\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import list_ops\nfrom tensorflow.python.ops import map_fn\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import resource_variable_ops\nfrom tensorflow.python.ops import state_ops\nfrom tensorflow.python.ops import string_ops\nfrom tensorflow.python.ops import variable_scope as vs\nfrom tensorflow.python.platform import test\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass ListOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n\n  def _testPushPop(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    l = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    l, e = self.evaluate((l, e))\n    self.assertAllEqual(l, [])\n    self.assertAllEqual(e, 1.0)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  def testPushPop(self, max_num_elements):\n    self._testPushPop(max_num_elements)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_gpu_only\n  def testPushPopGPU(self, max_num_elements):\n    with context.device(\"gpu:0\"):\n      self._testPushPop(max_num_elements)\n\n  @test_util.run_deprecated_v1\n  def testPushInFullListFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[], max_num_elements=1)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Tried to push item into a full list\"):\n      l = list_ops.tensor_list_push_back(l, 2.)\n      self.evaluate(l)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_deprecated_v1\n  def testPopFromEmptyTensorListFails(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[],\n        max_num_elements=max_num_elements)\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Trying to pop from an empty list\"):\n      l = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n      self.evaluate(l)\n\n  def testPopUninitializedTensorUseListElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[2, 3], num_elements=3)\n    _, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    l = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    l, e = self.evaluate((l, e))\n    self.assertAllEqual(e, np.zeros((2, 3)))\n    self.assertAllEqual(l, np.zeros((3, 2, 3)))\n\n  def testPopUninitializedTensorUseSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 3], num_elements=3)\n    _, e = gen_list_ops.tensor_list_pop_back(\n        l, element_dtype=dtypes.float32, element_shape=[4, 3])\n    self.assertAllEqual(e, np.zeros((4, 3)))\n\n  def testPopUninitializedTensorWithInvalidElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to read an uninitialized tensor but \"\n        \"element_shape is not fully defined\"):\n      _, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n      self.evaluate(e)\n\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 2], num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Incompatible shapes during merge: \\[1,3\\] vs. \\[\\?,2\\]\"):\n      _, e = gen_list_ops.tensor_list_pop_back(\n          l, element_dtype=dtypes.float32, element_shape=[1, 3])\n      self.evaluate(e)\n\n  def testPushGetGrad(self):\n    with backprop.GradientTape() as tape:\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=None)\n      c0 = constant_op.constant(5.0)\n      c1 = constant_op.constant([10.0, 20.0])\n      tape.watch(c0)\n      tape.watch(c1)\n      l = list_ops.tensor_list_push_back(l, c0)\n      l = list_ops.tensor_list_push_back(l, c1)\n      t1 = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t1), [10.0, 20.0])\n      # t1 == c1 so the gradient should be [0., [1., 1.]]\n      # This tests that the gradient of push_back correctly converts DT_INVALID\n      # tensors to zeros. The list returned by the gradient of GetItem will\n      # have only have tensor at index 1 set and others set to DT_INVALID.\n      dt0, dt1 = tape.gradient(t1, [c0, c1])\n      self.assertAllEqual(self.evaluate(dt1), [1.0, 1.0])\n      self.assertEqual(self.evaluate(dt0), 0.0)\n\n  def _testStack(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    if not context.executing_eagerly():\n      self.assertAllEqual(t.shape.as_list(), [None])\n    self.assertAllEqual(self.evaluate(t), [1.0, 2.0])\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  def testStack(self, max_num_elements):\n    self._testStack(max_num_elements)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_gpu_only\n  def testStackGPU(self, max_num_elements):\n    with context.device(\"gpu:0\"):\n      self._testStack(max_num_elements)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testStackWithUnknownElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=None,\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [1.0, 2.0])\n\n    # Should raise an error when the element tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Incompatible ranks during merge: 0 vs. 1\"):\n      l = list_ops.tensor_list_push_back(l, constant_op.constant([3.0, 4.0]))\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testStackWithPartiallyDefinedElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[None],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([1.0]))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([2.0]))\n\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[1.0], [2.0]])\n\n    # Should raise an error when the element tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Incompatible shapes during merge: \\[1\\] vs. \\[2\\]\"):\n      l = list_ops.tensor_list_push_back(l, constant_op.constant([2.0, 3.0]))\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_deprecated_v1\n  def testStackEmptyList(self, max_num_elements):\n    # Should be able to stack empty lists with fully defined element_shape.\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[1, 2],\n        max_num_elements=max_num_elements)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t).shape, (0, 1, 2))\n\n    # Should not be able to stack empty lists with partially defined\n    # element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=[None, 2],\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n    # Should not be able to stack empty lists with undefined element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=None,\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def _testStackWithUninitializedTensors(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(t, [0., 0., 0.])\n\n  def testStackWithUninitializedTensors(self):\n    self._testStackWithUninitializedTensors()\n\n  @test_util.run_gpu_only\n  def testStackWithUninitializedTensorsGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testStackWithUninitializedTensors()\n\n  def _testStackWithUninitializedTensorsInferShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 1, [1., 2.])\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(t, [[0., 0.], [1., 2.], [0., 0.]])\n\n  def testStackWithUninitializedTensorsInferShape(self):\n    self._testStackWithUninitializedTensorsInferShape()\n\n  @test_util.run_gpu_only\n  def testStackWithUninitializedTensorsInferShapeGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testStackWithUninitializedTensorsInferShape()\n\n  def testStackReservedListWithNoElementsAndPartialElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, \"Tried to stack list which only contains \"\n        \"uninitialized tensors and has a \"\n        \"non-fully-defined element_shape: <unknown>\"):\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testStackUsingSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t = gen_list_ops.tensor_list_stack(\n        l, element_dtype=dtypes.float32, element_shape=[])\n    if context.executing_eagerly():\n      self.assertEqual(t.shape.as_list(), [3])\n    else:\n      self.assertEqual(t.shape.as_list(), [None])\n    self.assertAllEqual(self.evaluate(t), np.zeros((3,)))\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  def testGatherGrad(self, max_num_elements):\n    with backprop.GradientTape() as tape:\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=[],\n          max_num_elements=max_num_elements)\n      c0 = constant_op.constant(1.0)\n      tape.watch(c0)\n      l = list_ops.tensor_list_push_back(l, c0)\n      l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n      t = list_ops.tensor_list_gather(l, [1, 0], element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t), [2.0, 1.0])\n      s = (t[0] + t[1]) * (t[0] + t[1])\n    dt = tape.gradient(s, c0)\n    self.assertAllEqual(self.evaluate(dt), 6.0)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testGatherWithUnknownElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=None,\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([3.0, 4.0]))\n\n    t = list_ops.tensor_list_gather(l, [1, 0], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [2.0, 1.0])\n\n    t = list_ops.tensor_list_gather(l, [2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[3.0, 4.0]])\n\n    # Should raise an error when the requested tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Incompatible ranks during merge: 0 vs. 1\"):\n      t = list_ops.tensor_list_gather(l, [0, 2], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testGatherWithPartiallyDefinedElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[None],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([1.0]))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([2.0, 3.0]))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([4.0, 5.0]))\n\n    t = list_ops.tensor_list_gather(l, [0], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[1.0]])\n\n    t = list_ops.tensor_list_gather(l, [1, 2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[2.0, 3.0], [4.0, 5.0]])\n\n    # Should raise an error when the requested tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Incompatible shapes during merge: \\[1\\] vs. \\[2\\]\"):\n      t = list_ops.tensor_list_gather(l, [0, 2], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testGatherEmptyList(self, max_num_elements):\n    # Should be able to gather from empty lists with fully defined\n    # element_shape.\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[1, 2],\n        max_num_elements=max_num_elements)\n    t = list_ops.tensor_list_gather(l, [], element_dtype=dtypes.float32)\n    self.assertAllEqual((0, 1, 2), self.evaluate(t).shape)\n\n    # Should not be able to gather from empty lists with partially defined\n    # element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=[None, 2],\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_gather(l, [], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n    # Should not be able to gather from empty lists with undefined\n    # element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=None,\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_gather(l, [], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testGatherGradWithNonContiguousIndices(self):\n    with backprop.GradientTape(persistent=True) as tape:\n      t = constant_op.constant([1.0, 2.0, 3.0])\n      l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n      c = constant_op.constant(5.0)\n      tape.watch(c)\n      l = list_ops.tensor_list_set_item(l, 1, c)\n      t = list_ops.tensor_list_gather(l, [1], element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t), [5.0])\n      s = t[0] * t[0]\n    dt = tape.gradient(s, c)\n    self.assertAllEqual(self.evaluate(dt), 10.0)\n    dl = tape.gradient(t, l)\n    dl_length = list_ops.tensor_list_length(dl)\n    self.assertAllEqual(self.evaluate(dl_length), 3)\n\n  def _testGatherWithUninitializedTensors(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    t = list_ops.tensor_list_gather(l, [0, 2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [0., 0.])\n\n  def testGatherWithUninitializedTensors(self):\n    self._testGatherWithUninitializedTensors()\n\n  @test_util.run_gpu_only\n  def testGatherWithUninitializedTensorsGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testGatherWithUninitializedTensors()\n\n  def _testGatherWithUninitializedTensorsInferShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 1, [1., 2.])\n    t = list_ops.tensor_list_gather(l, [1, 2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[1., 2.], [0., 0.]])\n\n  def testGatherWithUninitializedTensorsInferShape(self):\n    self._testGatherWithUninitializedTensorsInferShape()\n\n  @test_util.run_gpu_only\n  def testGatherWithUninitializedTensorsInferShapeGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testGatherWithUninitializedTensorsInferShape()\n\n  def testGatherReservedListWithNoElementsAndPartialElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Tried to gather uninitialized tensors from a\"\n        \" list with non-fully-defined element_shape\"):\n      t = list_ops.tensor_list_gather(l, [0], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testGatherUsingSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t = gen_list_ops.tensor_list_gather(\n        l, [0, 1, 2], element_dtype=dtypes.float32, element_shape=[])\n    self.assertEqual(t.shape.as_list(), [3])\n    self.assertAllEqual(self.evaluate(t), np.zeros((3,)))\n\n  def testScatterOutputListSize(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_scatter(c0, [1, 3], [])\n    # TensorListScatter should return a list with size largest index + 1.\n    self.assertAllEqual(list_ops.tensor_list_length(l), 4)\n\n  def testScatterOutputListSizeWithNumElementsSpecified(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    l = gen_list_ops.tensor_list_scatter_v2(\n        c0, [1, 3], list_ops._build_element_shape([]), num_elements=5)\n    # TensorListScatter should return a list with size num_elements.\n    self.assertAllEqual(list_ops.tensor_list_length(l), 5)\n\n  def testScatterFailsWhenIndexLargerThanNumElements(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"TensorListScatter: Trying to scatter at index 3 in list with size 3\"):\n      l = gen_list_ops.tensor_list_scatter_v2(\n          c0, [1, 3], list_ops._build_element_shape([]), num_elements=3)\n      self.evaluate(l)\n\n  def testScatterFailsWithInvalidNumElements(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"TensorListScatter expects num_elements >= -1, found: -2\"):\n      l = gen_list_ops.tensor_list_scatter_v2(\n          c0, [1, 3], list_ops._build_element_shape([]), num_elements=-2)\n      self.evaluate(l)\n\n  def testScatterWithInvalidRowsInInputTensorFails(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Invalid number of rows in input tensor. Expected: 3 Actual: 2\"):\n      l = list_ops.tensor_list_scatter(c0, [1, 0, 2], [])\n      self.evaluate(l)\n\n  def testScatterWithNegativeIndicesFails(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Indices in TensorListScatter must all be non-negative.\"):\n      l = list_ops.tensor_list_scatter(c0, [-1, -2], element_shape=[])\n      self.evaluate(l)\n\n  def testScatterIntoExistingList(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    l = list_ops.tensor_list_scatter(tensor=[1.], indices=[0], element_shape=[])\n    l = list_ops.tensor_list_scatter(\n        tensor=[2., 3.], indices=[1, 2], element_shape=[], input_handle=l)\n    self.assertAllEqual(\n        list_ops.tensor_list_stack(l, element_dtype=dtypes.float32),\n        [1., 2., 3.])\n\n  def testScatterGrad(self):\n    with backprop.GradientTape() as tape:\n      c0 = constant_op.constant([1.0, 2.0])\n      tape.watch(c0)\n      l = list_ops.tensor_list_scatter(c0, [1, 0], element_shape=[])\n      t0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      t1 = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t0), 2.0)\n      self.assertAllEqual(self.evaluate(t1), 1.0)\n      loss = t0 * t0 + t1 * t1\n    dt = tape.gradient(loss, c0)\n    self.assertAllEqual(self.evaluate(dt), [2., 4.])\n\n  def testScatterWithPartialReadGrad(self):\n    with backprop.GradientTape() as tape:\n      c0 = constant_op.constant([1.0, 2.0])\n      tape.watch(c0)\n      l = list_ops.tensor_list_scatter(c0, [1, 0], element_shape=[])\n      t0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t0), 2.0)\n      loss = t0 * t0\n    dt = tape.gradient(loss, c0)\n    self.assertAllEqual(self.evaluate(dt), [0., 4.])\n\n  def testTensorListFromTensor(self):\n    t = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    e = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    self.assertAllEqual(e, 1.0)\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(e, 2.0)\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(e, 1.0)\n    self.assertAllEqual(list_ops.tensor_list_length(l), 0)\n\n  @test_util.run_gpu_only\n  def testFromTensorGPU(self):\n    with context.device(\"gpu:0\"):\n      self.testTensorListFromTensor()\n\n  def testGetSetBool(self):\n    t = constant_op.constant([True, False])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.bool)\n    self.assertAllEqual(self.evaluate(e0), True)\n    l = list_ops.tensor_list_set_item(l, 0, False)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.bool)\n    self.assertAllEqual(self.evaluate(t), [False, False])\n\n  @test_util.run_gpu_only\n  def testGetSetBoolGPU(self):\n    with context.device(\"gpu:0\"):\n      self.testGetSetBool()\n\n  def _testGetSetNumeric(self, dtype):\n    t = constant_op.constant([1.0, 2.0], dtype=dtype)\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtype)\n    self.assertAllEqual(self.evaluate(e0), 1.0)\n    l = list_ops.tensor_list_set_item(\n        l, 0, constant_op.constant(3.0, dtype=dtype))\n    t = list_ops.tensor_list_stack(l, element_dtype=dtype)\n    self.assertAllEqual(self.evaluate(t), [3.0, 2.0])\n\n  @parameterized.parameters([dtypes.float32, dtypes.float64,\n                             dtypes.complex64, dtypes.complex128])\n  def testGetSetNumeric(self, dtype):\n    self._testGetSetNumeric(dtype)\n\n  @parameterized.parameters([dtypes.float32, dtypes.float64,\n                             dtypes.complex64, dtypes.complex128])\n  @test_util.run_gpu_only\n  def testGetSetNumericGPU(self, dtype):\n    with context.device(\"gpu:0\"):\n      self._testGetSetNumeric(dtype)\n\n  def testGetSetReserved(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=2)\n    e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    self.assertAllEqual(e0, 0.0)\n    l = list_ops.tensor_list_set_item(l, 0, 3.0)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(t, [3.0, 0.0])\n\n  @test_util.run_gpu_only\n  def testGetSetReservedGPU(self):\n    with context.device(\"gpu:0\"):\n      self.testGetSetReserved()\n\n  def testSetGetGrad(self):\n    with backprop.GradientTape() as tape:\n      t = constant_op.constant(5.)\n      tape.watch(t)\n      l = list_ops.tensor_list_reserve(\n          element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n      l = list_ops.tensor_list_set_item(l, 1, 2. * t)\n      e = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(e), 10.0)\n    self.assertAllEqual(self.evaluate(tape.gradient(e, t)), 2.0)\n\n  def testGetUninitializedTensorUseListElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 0, 5.)\n    e1 = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n    e2 = list_ops.tensor_list_get_item(l, 2, element_dtype=dtypes.float32)\n    self.assertEqual(self.evaluate(e1), 0.)\n    self.assertEqual(self.evaluate(e2), 0.)\n\n  def testGetUninitializedTensorUseSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    e0 = gen_list_ops.tensor_list_get_item(\n        l, 0, element_shape=[], element_dtype=dtypes.float32)\n    e1 = gen_list_ops.tensor_list_get_item(\n        l, 1, element_shape=[2, 3], element_dtype=dtypes.float32)\n    self.assertEqual(e0.shape.as_list(), [])\n    self.assertEqual(e1.shape.as_list(), [2, 3])\n    self.assertEqual(self.evaluate(e0), 0.)\n    self.assertAllEqual(self.evaluate(e1), np.zeros((2, 3)))\n\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 3], num_elements=3)\n    e1 = gen_list_ops.tensor_list_get_item(\n        l, 1, element_shape=[2, 3], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(e1), np.zeros((2, 3)))\n\n  def testGetUninitializedTensorWithInvalidElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to read an uninitialized tensor but \"\n        \"element_shape is not fully defined\"):\n      e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      self.evaluate(e0)\n\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 2], num_elements=3)\n\n    # In eager mode the shape mismatch is caught in the TensorListGetItem\n    # kernel which raises an InvalidArgumentError.\n    # In graph mode the shape mismatch is caught in the C++ shape inference\n    # which raises a ValueError.\n    if context.executing_eagerly():\n      error_type = errors.InvalidArgumentError\n    else:\n      error_type = ValueError\n    with self.assertRaisesRegex(error_type, r\"shapes\"):\n      e0 = gen_list_ops.tensor_list_get_item(\n          l, 0, element_dtype=dtypes.float32, element_shape=[1, 3])\n      self.evaluate(e0)\n\n  @test_util.run_deprecated_v1\n  @test_util.enable_control_flow_v2\n  def testSkipEagerSetItemIndexOutOfBounds(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[])\n    e0 = constant_op.constant(5.)\n    l = list_ops.tensor_list_set_item(\n        l, 0, 2. * e0, resize_if_index_out_of_bounds=True)\n    l = list_ops.tensor_list_set_item(\n        l, 1, 1., resize_if_index_out_of_bounds=True)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    grad = gradients_impl.gradients(t, e0)[0]\n    self.assertAllEqual(self.evaluate(grad), 2.)\n\n  @test_util.run_deprecated_v1\n  def testSetOnEmptyListWithMaxNumElementsFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[], max_num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to modify element 0 in a list with 0 elements.\"):\n      l = list_ops.tensor_list_set_item(l, 0, 1.)\n      self.evaluate(l)\n\n  def testUnknownShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([1.0, 2.0]))\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(e), [1.0, 2.0])\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(e), 1.0)\n\n  @test_util.run_gpu_only\n  def testCPUGPUCopy(self):\n    t = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    with context.device(\"gpu:0\"):\n      l_gpu = array_ops.identity(l)\n      self.assertAllEqual(\n          self.evaluate(\n              list_ops.tensor_list_pop_back(\n                  l_gpu, element_dtype=dtypes.float32)[1]), 2.0)\n    l_cpu = array_ops.identity(l_gpu)\n    self.assertAllEqual(\n        self.evaluate(\n            list_ops.tensor_list_pop_back(\n                l_cpu, element_dtype=dtypes.float32)[1]), 2.0)\n\n  @test_util.run_gpu_only\n  def testCPUGPUCopyNested(self):\n    t = constant_op.constant([1.0, 2.0])\n    child_l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    l = list_ops.empty_tensor_list(\n        element_shape=constant_op.constant([], dtype=dtypes.int32),\n        element_dtype=dtypes.variant)\n    l = list_ops.tensor_list_push_back(l, child_l)\n    with context.device(\"gpu:0\"):\n      l_gpu = array_ops.identity(l)\n      _, child_l_gpu = list_ops.tensor_list_pop_back(\n          l_gpu, element_dtype=dtypes.variant)\n      self.assertAllEqual(\n          self.evaluate(\n              list_ops.tensor_list_pop_back(\n                  child_l_gpu, element_dtype=dtypes.float32)[1]), 2.0)\n    l_cpu = array_ops.identity(l_gpu)\n    _, child_l_cpu = list_ops.tensor_list_pop_back(\n        l_cpu, element_dtype=dtypes.variant)\n    self.assertAllEqual(\n        self.evaluate(\n            list_ops.tensor_list_pop_back(\n                child_l_cpu, element_dtype=dtypes.float32)[1]), 2.0)\n\n  def testGraphStack(self):\n    with self.cached_session():\n      tl = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([1], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      tl = list_ops.tensor_list_push_back(tl, [1])\n      self.assertAllEqual(\n          self.evaluate(\n              list_ops.tensor_list_stack(tl, element_dtype=dtypes.int32)),\n          [[1]])\n\n  def testSkipEagerStackInLoop(self):\n    with self.cached_session():\n      t1 = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      i = constant_op.constant(0, dtype=dtypes.int32)\n\n      def body(i, t1):\n        t1 = list_ops.tensor_list_push_back(t1, i)\n        i += 1\n        return i, t1\n\n      i, t1 = control_flow_ops.while_loop(lambda i, t1: math_ops.less(i, 4),\n                                          body, [i, t1])\n      s1 = list_ops.tensor_list_stack(t1, element_dtype=dtypes.int32)\n      self.assertAllEqual(self.evaluate(s1), [0, 1, 2, 3])\n\n  def testSkipEagerStackSwitchDtype(self):\n    with self.cached_session():\n      list_ = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      m = constant_op.constant([1, 2, 3], dtype=dtypes.float32)\n\n      def body(list_, m):\n        list_ = control_flow_ops.cond(\n            math_ops.equal(list_ops.tensor_list_length(list_), 0),\n            lambda: list_ops.empty_tensor_list(m.shape, m.dtype), lambda: list_)\n        list_ = list_ops.tensor_list_push_back(list_, m)\n        return list_, m\n\n      for _ in range(2):\n        list_, m = body(list_, m)\n\n      s1 = list_ops.tensor_list_stack(list_, element_dtype=dtypes.float32)\n      np_s1 = np.array([[1, 2, 3], [1, 2, 3]], dtype=np.float32)\n      self.assertAllEqual(self.evaluate(s1), np_s1)\n\n  def testSkipEagerStackInLoopSwitchDtype(self):\n    with self.cached_session():\n      t1 = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      i = constant_op.constant(0, dtype=dtypes.float32)\n      m = constant_op.constant([1, 2, 3], dtype=dtypes.float32)\n\n      def body(i, m, t1):\n        t1 = control_flow_ops.cond(\n            math_ops.equal(list_ops.tensor_list_length(t1), 0),\n            lambda: list_ops.empty_tensor_list(m.shape, m.dtype), lambda: t1)\n\n        t1 = list_ops.tensor_list_push_back(t1, m * i)\n        i += 1.0\n        return i, m, t1\n\n      i, m, t1 = control_flow_ops.while_loop(\n          lambda i, m, t1: math_ops.less(i, 4), body, [i, m, t1])\n      s1 = list_ops.tensor_list_stack(t1, element_dtype=dtypes.float32)\n      np_s1 = np.vstack([np.arange(1, 4) * i for i in range(4)])\n      self.assertAllEqual(self.evaluate(s1), np_s1)\n\n  def testSerialize(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        t = constant_op.constant([[1.0], [2.0]])\n        l = list_ops.tensor_list_from_tensor(t, element_shape=[1])\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        l_ps, e = list_ops.tensor_list_pop_back(\n            l_ps, element_dtype=dtypes.float32)\n      with ops.device(\"/job:worker\"):\n        worker_e = array_ops.identity(e)\n      self.assertAllEqual(self.evaluate(worker_e), [2.0])\n\n  def testSerializeListWithInvalidTensors(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        l = list_ops.tensor_list_reserve(\n            element_dtype=dtypes.float32, element_shape=[], num_elements=2)\n        l = list_ops.tensor_list_set_item(l, 0, 1.)\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        l_ps = list_ops.tensor_list_set_item(l_ps, 1, 2.)\n        t = list_ops.tensor_list_stack(l_ps, element_dtype=dtypes.float32)\n      with ops.device(\"/job:worker\"):\n        worker_t = array_ops.identity(t)\n      self.assertAllEqual(self.evaluate(worker_t), [1.0, 2.0])\n\n  def testSerializeListWithUnknownRank(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        t = constant_op.constant([[1.0], [2.0]])\n        l = list_ops.tensor_list_from_tensor(t, element_shape=None)\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        element_shape = list_ops.tensor_list_element_shape(\n            l_ps, shape_type=dtypes.int32)\n      with ops.device(\"/job:worker\"):\n        element_shape = array_ops.identity(element_shape)\n      self.assertEqual(self.evaluate(element_shape), -1)\n\n  def testSerializeListWithMaxNumElements(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        l = list_ops.empty_tensor_list(\n            element_shape=None,\n            element_dtype=dtypes.float32,\n            max_num_elements=2)\n        l = list_ops.tensor_list_push_back(l, 1.)\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        l_ps = list_ops.tensor_list_push_back(l_ps, 2.)\n      with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                  \"Tried to push item into a full list\"):\n        with ops.device(\"/job:worker\"):\n          l_worker = array_ops.identity(l_ps)\n          l_worker = list_ops.tensor_list_push_back(l_worker, 3.0)\n          self.evaluate(l_worker)\n\n  def testPushPopGradients(self):\n    with backprop.GradientTape() as tape:\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=[])\n      c = constant_op.constant(1.0)\n      tape.watch(c)\n      l = list_ops.tensor_list_push_back(l, c)\n      l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n      e = 2 * e\n    self.assertAllEqual(self.evaluate(tape.gradient(e, [c])[0]), 2.0)\n\n  def testStackFromTensorGradients(self):\n    with backprop.GradientTape() as tape:\n      c = constant_op.constant([1.0, 2.0])\n      tape.watch(c)\n      l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n      c2 = list_ops.tensor_list_stack(\n          l, element_dtype=dtypes.float32, num_elements=2)\n      result = c2 * 2.0\n    grad = tape.gradient(result, [c])[0]\n    self.assertAllEqual(self.evaluate(grad), [2.0, 2.0])\n\n  def testGetSetGradients(self):\n    with backprop.GradientTape() as tape:\n      c = constant_op.constant([1.0, 2.0])\n      tape.watch(c)\n      l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n      c2 = constant_op.constant(3.0)\n      tape.watch(c2)\n      l = list_ops.tensor_list_set_item(l, 0, c2)\n      e = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      ee = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      y = e * e + ee * ee\n    grad_c, grad_c2 = tape.gradient(y, [c, c2])\n    self.assertAllEqual(self.evaluate(grad_c), [0.0, 4.0])\n    self.assertAllEqual(self.evaluate(grad_c2), 6.0)\n\n  @test_util.run_deprecated_v1\n  def testSetOutOfBounds(self):\n    c = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    with self.assertRaises(errors.InvalidArgumentError):\n      self.evaluate(list_ops.tensor_list_set_item(l, 20, 3.0))\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSetItemWithMismatchedShapeFails(self):\n    with self.cached_session() as sess:\n      ph = array_ops.placeholder(dtypes.float32)\n      c = constant_op.constant([1.0, 2.0])\n      l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n      # Set a placeholder with unknown shape to satisfy the shape inference\n      # at graph building time.\n      l = list_ops.tensor_list_set_item(l, 0, ph)\n      l_0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                  \"incompatible shape\"):\n        sess.run(l_0, {ph: [3.0]})\n\n  def testResourceVariableScatterGather(self):\n    c = constant_op.constant([1.0, 2.0], dtype=dtypes.float32)\n    l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    v = vs.get_variable(\"var\", initializer=[l] * 10, use_resource=True)\n    v_r_0_stacked = list_ops.tensor_list_stack(v[0], dtypes.float32)\n    self.evaluate(v.initializer)\n    self.assertAllEqual([1.0, 2.0], self.evaluate(v_r_0_stacked))\n    v_r_sparse_stacked = list_ops.tensor_list_stack(\n        v.sparse_read(0), dtypes.float32)\n    self.assertAllEqual([1.0, 2.0], self.evaluate(v_r_sparse_stacked))\n    l_new_0 = list_ops.tensor_list_from_tensor([3.0, 4.0], element_shape=[])\n    l_new_1 = list_ops.tensor_list_from_tensor([5.0, 6.0], element_shape=[])\n    updated_v = state_ops.scatter_update(v, [3, 5], [l_new_0, l_new_1])\n    updated_v_elems = array_ops.unstack(updated_v)\n    updated_v_stacked = [\n        list_ops.tensor_list_stack(el, dtypes.float32) for el in updated_v_elems\n    ]\n    expected = ([[1.0, 2.0]] * 3 + [[3.0, 4.0], [1.0, 2.0], [5.0, 6.0]] +\n                [[1.0, 2.0]] * 4)\n    self.assertAllEqual(self.evaluate(updated_v_stacked), expected)\n\n  def testResourceVariableScatterGatherInt64(self):\n    c = constant_op.constant([1, 2], dtype=dtypes.int64)\n    l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    v = vs.get_variable(\"var\", initializer=[l] * 10, use_resource=True)\n    v_r_0_stacked = list_ops.tensor_list_stack(v[0], dtypes.int64)\n    self.evaluate(v.initializer)\n    self.assertAllEqual([1, 2], self.evaluate(v_r_0_stacked))\n    v_r_sparse_stacked = list_ops.tensor_list_stack(\n        v.sparse_read(0), dtypes.int64)\n    self.assertAllEqual([1, 2], self.evaluate(v_r_sparse_stacked))\n    c34 = constant_op.constant([3, 4], dtype=dtypes.int64)\n    l_new_0 = list_ops.tensor_list_from_tensor(c34, element_shape=[])\n    c56 = constant_op.constant([5, 6], dtype=dtypes.int64)\n    l_new_1 = list_ops.tensor_list_from_tensor(c56, element_shape=[])\n    updated_v = state_ops.scatter_update(v, [3, 5], [l_new_0, l_new_1])\n    updated_v_elems = array_ops.unstack(updated_v)\n    updated_v_stacked = [\n        list_ops.tensor_list_stack(el, dtypes.int64) for el in updated_v_elems\n    ]\n    expected = ([[1, 2]] * 3 + [[3, 4], [1, 2], [5, 6]] +\n                [[1, 2]] * 4)\n    self.assertAllEqual(self.evaluate(updated_v_stacked), expected)\n\n  @test_util.run_deprecated_v1\n  def testConcat(self):\n    c = constant_op.constant([1.0, 2.0], dtype=dtypes.float32)\n    l0 = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    l1 = list_ops.tensor_list_from_tensor([-1.0], element_shape=[])\n    l_batch_0 = array_ops.stack([l0, l1])\n    l_batch_1 = array_ops.stack([l1, l0])\n\n    l_concat_01 = list_ops.tensor_list_concat_lists(\n        l_batch_0, l_batch_1, element_dtype=dtypes.float32)\n    l_concat_10 = list_ops.tensor_list_concat_lists(\n        l_batch_1, l_batch_0, element_dtype=dtypes.float32)\n    l_concat_00 = list_ops.tensor_list_concat_lists(\n        l_batch_0, l_batch_0, element_dtype=dtypes.float32)\n    l_concat_11 = list_ops.tensor_list_concat_lists(\n        l_batch_1, l_batch_1, element_dtype=dtypes.float32)\n\n    expected_0 = [[1.0, 2.0], [-1.0]]\n    expected_1 = [[-1.0], [1.0, 2.0]]\n    expected_00 = [[1.0, 2.0, 1.0, 2.0], [-1.0, -1.0]]\n    expected_01 = [[1.0, 2.0, -1.0], [-1.0, 1.0, 2.0]]\n    expected_10 = [[-1.0, 1.0, 2.0], [1.0, 2.0, -1.0]]\n    expected_11 = [[-1.0, -1.0], [1.0, 2.0, 1.0, 2.0]]\n\n    for i, (concat, expected) in enumerate(zip(\n        [l_batch_0, l_batch_1,\n         l_concat_00, l_concat_01, l_concat_10, l_concat_11],\n        [expected_0, expected_1,\n         expected_00, expected_01, expected_10, expected_11])):\n      splitted = array_ops.unstack(concat)\n      splitted_stacked_ret = self.evaluate(\n          (list_ops.tensor_list_stack(splitted[0], dtypes.float32),\n           list_ops.tensor_list_stack(splitted[1], dtypes.float32)))\n      print(\"Test concat %d: %s, %s, %s, %s\"\n            % (i, expected[0], splitted_stacked_ret[0],\n               expected[1], splitted_stacked_ret[1]))\n      self.assertAllClose(expected[0], splitted_stacked_ret[0])\n      self.assertAllClose(expected[1], splitted_stacked_ret[1])\n\n    # Concatenating mismatched shapes fails.\n    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n      self.evaluate(\n          list_ops.tensor_list_concat_lists(\n              l_batch_0,\n              list_ops.empty_tensor_list([], dtypes.float32),\n              element_dtype=dtypes.float32))\n\n    if context.executing_eagerly():\n      expected_error = (\n          errors.InvalidArgumentError,\n          \"element shapes are not identical at index 0\")\n    else:\n      expected_error = (ValueError, \"Shapes must be equal rank\")\n    with self.assertRaisesRegex(*expected_error):\n      l_batch_of_vec_tls = array_ops.stack(\n          [list_ops.tensor_list_from_tensor([[1.0]], element_shape=[1])] * 2)\n      self.evaluate(\n          list_ops.tensor_list_concat_lists(l_batch_0, l_batch_of_vec_tls,\n                                            element_dtype=dtypes.float32))\n\n    if context.executing_eagerly():\n      expected_error = (errors.InvalidArgumentError,\n                        r\"input_b\\[0\\].dtype != element_dtype.\")\n    else:\n      expected_error = (ValueError, \"input_b.type != element_dtype\")\n    with self.assertRaisesRegex(*expected_error):\n      l_batch_of_int_tls = array_ops.stack(\n          [list_ops.tensor_list_from_tensor([1], element_shape=[])] * 2)\n      self.evaluate(\n          list_ops.tensor_list_concat_lists(l_batch_0, l_batch_of_int_tls,\n                                            element_dtype=dtypes.float32))\n\n  @test_util.run_deprecated_v1\n  def testPushBackBatch(self):\n    c = constant_op.constant([1.0, 2.0], dtype=dtypes.float32)\n    l0 = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    l1 = list_ops.tensor_list_from_tensor([-1.0], element_shape=[])\n    l_batch = array_ops.stack([l0, l1])\n    l_push = list_ops.tensor_list_push_back_batch(l_batch, [3.0, 4.0])\n    l_unstack = array_ops.unstack(l_push)\n    l0_ret = list_ops.tensor_list_stack(l_unstack[0], dtypes.float32)\n    l1_ret = list_ops.tensor_list_stack(l_unstack[1], dtypes.float32)\n    self.assertAllClose([1.0, 2.0, 3.0], self.evaluate(l0_ret))\n    self.assertAllClose([-1.0, 4.0], self.evaluate(l1_ret))\n\n    with ops.control_dependencies([l_push]):\n      l_unstack_orig = array_ops.unstack(l_batch)\n      l0_orig_ret = list_ops.tensor_list_stack(l_unstack_orig[0],\n                                               dtypes.float32)\n      l1_orig_ret = list_ops.tensor_list_stack(l_unstack_orig[1],\n                                               dtypes.float32)\n\n    # Check that without aliasing, push_back_batch still works; and\n    # that it doesn't modify the input.\n    l0_r_v, l1_r_v, l0_orig_v, l1_orig_v = self.evaluate(\n        (l0_ret, l1_ret, l0_orig_ret, l1_orig_ret))\n    self.assertAllClose([1.0, 2.0, 3.0], l0_r_v)\n    self.assertAllClose([-1.0, 4.0], l1_r_v)\n    self.assertAllClose([1.0, 2.0], l0_orig_v)\n    self.assertAllClose([-1.0], l1_orig_v)\n\n    # Pushing back mismatched shapes fails.\n    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n      self.evaluate(list_ops.tensor_list_push_back_batch(l_batch, []))\n\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"incompatible shape to a list at index 0\"):\n      self.evaluate(\n          list_ops.tensor_list_push_back_batch(l_batch, [[3.0], [4.0]]))\n\n    if context.executing_eagerly():\n      expected_error = (errors.InvalidArgumentError, \"Invalid data type\")\n    else:\n      expected_error = (ValueError, \"wrong element dtype\")\n    with self.assertRaisesRegex(*expected_error):\n      self.evaluate(list_ops.tensor_list_push_back_batch(l_batch, [3, 4]))\n\n  def testZerosLike(self):\n    for dtype in (dtypes.uint8, dtypes.uint16, dtypes.int8, dtypes.int16,\n                  dtypes.int32, dtypes.int64, dtypes.float16, dtypes.float32,\n                  dtypes.float64, dtypes.complex64, dtypes.complex128,\n                  dtypes.bool):\n      l_empty = list_ops.empty_tensor_list(\n          element_dtype=dtype, element_shape=[])\n      l_empty_zeros = array_ops.zeros_like(l_empty)\n      t_empty_zeros = list_ops.tensor_list_stack(\n          l_empty_zeros, element_dtype=dtype)\n\n      l_full = list_ops.tensor_list_push_back(l_empty,\n                                              math_ops.cast(0, dtype=dtype))\n      l_full = list_ops.tensor_list_push_back(l_full,\n                                              math_ops.cast(1, dtype=dtype))\n      l_full_zeros = array_ops.zeros_like(l_full)\n      t_full_zeros = list_ops.tensor_list_stack(\n          l_full_zeros, element_dtype=dtype)\n\n      self.assertAllEqual(self.evaluate(t_empty_zeros), [])\n      self.assertAllEqual(\n          self.evaluate(t_full_zeros), np.zeros(\n              (2,), dtype=dtype.as_numpy_dtype))\n\n  def testZerosLikeNested(self):\n    for dtype in (dtypes.uint8, dtypes.uint16, dtypes.int8, dtypes.int16,\n                  dtypes.int32, dtypes.int64, dtypes.float16, dtypes.float32,\n                  dtypes.float64, dtypes.complex64, dtypes.complex128,\n                  dtypes.bool):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.variant, element_shape=[])\n\n      sub_l = list_ops.empty_tensor_list(element_dtype=dtype, element_shape=[])\n      l = list_ops.tensor_list_push_back(l, sub_l)\n      sub_l = list_ops.tensor_list_push_back(sub_l, math_ops.cast(\n          1, dtype=dtype))\n      l = list_ops.tensor_list_push_back(l, sub_l)\n      sub_l = list_ops.tensor_list_push_back(sub_l, math_ops.cast(\n          2, dtype=dtype))\n      l = list_ops.tensor_list_push_back(l, sub_l)\n\n      # l : [[],\n      #      [1],\n      #      [1, 2]]\n      #\n      # l_zeros : [[],\n      #            [0],\n      #            [0, 0]]\n      l_zeros = array_ops.zeros_like(l)\n\n      outputs = []\n      for _ in range(3):\n        l_zeros, out = list_ops.tensor_list_pop_back(\n            l_zeros, element_dtype=dtypes.variant)\n        outputs.append(list_ops.tensor_list_stack(out, element_dtype=dtype))\n\n      # Note: `outputs` contains popped values so the order is reversed.\n      self.assertAllEqual(self.evaluate(outputs[2]), [])\n      self.assertAllEqual(\n          self.evaluate(outputs[1]), np.zeros((1,), dtype=dtype.as_numpy_dtype))\n      self.assertAllEqual(\n          self.evaluate(outputs[0]), np.zeros((2,), dtype=dtype.as_numpy_dtype))\n\n  def testElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    shape = list_ops.tensor_list_element_shape(l, shape_type=dtypes.int32)\n    self.assertEqual(self.evaluate(shape), -1)\n\n  def testZerosLikeUninitialized(self):\n    l0 = list_ops.tensor_list_reserve([], 3, element_dtype=dtypes.float32)\n    l1 = list_ops.tensor_list_set_item(l0, 0, 1.)  # [1., _, _]\n    zeros_1 = array_ops.zeros_like(l1)  # [0., _, _]\n    l2 = list_ops.tensor_list_set_item(l1, 2, 2.)  # [1., _, 2.]\n    zeros_2 = array_ops.zeros_like(l2)  # [0., _, 0.]\n\n    # Gather indices with zeros in `zeros_1`.\n    res_1 = list_ops.tensor_list_gather(\n        zeros_1, [0], element_dtype=dtypes.float32)\n    # Gather indices with zeros in `zeros_2`.\n    res_2 = list_ops.tensor_list_gather(\n        zeros_2, [0, 2], element_dtype=dtypes.float32)\n\n    self.assertAllEqual(self.evaluate(res_1), [0.])\n    self.assertAllEqual(self.evaluate(res_2), [0., 0.])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerTensorListGetItemGradAggregation(self):\n    l = list_ops.tensor_list_reserve(\n        element_shape=[], num_elements=1, element_dtype=dtypes.float32)\n    x = constant_op.constant(1.0)\n    l = list_ops.tensor_list_set_item(l, 0, x)\n    l_read1 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    l_read2 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    grad = gradients_impl.gradients([l_read1, l_read2], [x])\n    with self.cached_session() as sess:\n      self.assertSequenceEqual(self.evaluate(grad), [2.])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerBuildElementShape(self):\n    fn = list_ops._build_element_shape\n    # Unknown shape -> -1.\n    self.assertEqual(fn(None), -1)\n    self.assertEqual(fn(tensor_shape.unknown_shape()), -1)\n    # Scalar shape -> [] with type int32.\n    self.assertEqual(fn([]).dtype, dtypes.int32)\n    self.assertEqual(fn(tensor_shape.TensorShape([])).dtype, dtypes.int32)\n    self.assertAllEqual(self.evaluate(fn([])), np.array([], np.int32))\n    self.assertAllEqual(\n        self.evaluate(fn(tensor_shape.TensorShape([]))), np.array([], np.int32))\n    # Tensor -> Tensor\n    shape = constant_op.constant(1)\n    self.assertIs(fn(shape), shape)\n    # Shape with unknown dims -> shape list with -1's.\n    shape = [None, 5]\n    self.assertAllEqual(fn(shape), [-1, 5])\n    self.assertAllEqual(fn(tensor_shape.TensorShape(shape)), [-1, 5])\n    # Shape with unknown dims and tensor dims -> shape list with -1's and tensor\n    # dims.\n    t = array_ops.placeholder(dtypes.int32)\n    shape = [None, 5, t]\n    result = fn(shape)\n    self.assertAllEqual(result[:2], [-1, 5])\n    self.assertIs(result[2], t)\n\n  def testAddN(self):\n    l1 = list_ops.tensor_list_from_tensor([1.0, 2.0], element_shape=[])\n    l2 = list_ops.tensor_list_from_tensor([3.0, 4.0], element_shape=[])\n    l3 = list_ops.tensor_list_from_tensor([5.0, 6.0], element_shape=[])\n    result = math_ops.add_n((l1, l2, l3))\n    result_t = list_ops.tensor_list_stack(result, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(result_t), [9., 12.])\n\n  def testAddNNestedList(self):\n    l1 = list_ops.tensor_list_from_tensor([1.0, 2.0], element_shape=[])\n    l2 = list_ops.tensor_list_from_tensor([3.0, 4.0], element_shape=[])\n    l3 = list_ops.tensor_list_from_tensor([5.0, 6.0], element_shape=[])\n    l4 = list_ops.tensor_list_from_tensor([7.0, 8.0], element_shape=[])\n    a = list_ops.empty_tensor_list(\n        element_dtype=dtypes.variant, element_shape=[])\n    a = list_ops.tensor_list_push_back(a, l1)\n    a = list_ops.tensor_list_push_back(a, l2)\n    b = list_ops.empty_tensor_list(\n        element_dtype=dtypes.variant, element_shape=[])\n    b = list_ops.tensor_list_push_back(b, l3)\n    b = list_ops.tensor_list_push_back(b, l4)\n    result = math_ops.add_n((a, b))\n    result_0 = list_ops.tensor_list_stack(\n        list_ops.tensor_list_get_item(result, 0, element_dtype=dtypes.variant),\n        element_dtype=dtypes.float32)\n    result_1 = list_ops.tensor_list_stack(\n        list_ops.tensor_list_get_item(result, 1, element_dtype=dtypes.variant),\n        element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(result_0), [6., 8.])\n    self.assertAllEqual(self.evaluate(result_1), [10., 12.])\n\n  def testAddTensorListsFailsIfLeadingDimsMismatch(self):\n    l1 = list_ops.tensor_list_reserve(\n        element_shape=[], element_dtype=dtypes.float32, num_elements=2)\n    l2 = list_ops.tensor_list_reserve(\n        element_shape=[], element_dtype=dtypes.float32, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to add two lists of tensors with different lengths\"):\n      l = math_ops.add_n([l1, l2])\n      self.evaluate(list_ops.tensor_list_stack(l, element_dtype=dtypes.float32))\n\n  @test_util.run_v1_only(\"Uses placeholders\")\n  def testSkipEagerAddTensorListsFailsIfElementShapesMismatch(self):\n    with self.cached_session() as sess:\n      # Use placeholders instead of constant values for shapes to prevent TF's\n      # shape inference from catching this early.\n      l1_element_shape = array_ops.placeholder(dtype=dtypes.int32)\n      l2_element_shape = array_ops.placeholder(dtype=dtypes.int32)\n      l1 = list_ops.tensor_list_reserve(\n          element_shape=l1_element_shape,\n          element_dtype=dtypes.float32,\n          num_elements=3)\n      l2 = list_ops.tensor_list_reserve(\n          element_shape=l2_element_shape,\n          element_dtype=dtypes.float32,\n          num_elements=3)\n      l = math_ops.add_n([l1, l2])\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          \"Trying to add two lists of tensors with incompatible element shapes\"\n      ):\n        sess.run(\n            list_ops.tensor_list_stack(l, element_dtype=dtypes.float32), {\n                l1_element_shape: [],\n                l2_element_shape: [2]\n            })\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerConcatShapeInference(self):\n\n    def BuildTensor(element_shape):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=element_shape)\n      return list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n\n    self.assertIsNone(BuildTensor(None).shape.rank)\n    self.assertAllEqual(BuildTensor([None, 2, 3]).shape.as_list(), [None, 2, 3])\n    self.assertAllEqual(\n        BuildTensor([None, 2, None]).shape.as_list(), [None, 2, None])\n    self.assertAllEqual(BuildTensor([1, 2, 3]).shape.as_list(), [None, 2, 3])\n\n  def testConcatWithFullyDefinedElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[2, 2])\n    l = list_ops.tensor_list_push_back(l, [[0., 1.], [2., 3.]])\n    l = list_ops.tensor_list_push_back(l, [[4., 5.], [6., 7.]])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(\n        self.evaluate(t), [[0., 1.], [2., 3.], [4., 5.], [6., 7.]])\n\n  def testConcatWithNonFullyDefinedElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[None, 2])\n    l = list_ops.tensor_list_push_back(l, [[0., 1.]])\n    l = list_ops.tensor_list_push_back(l, [[2., 3.], [4., 5.]])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[0., 1.], [2., 3.], [4., 5.]])\n\n  def testConcatWithMismatchingTensorShapesFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    l = list_ops.tensor_list_push_back(l, [[0., 1.]])\n    l = list_ops.tensor_list_push_back(l, [[2.], [4.]])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, r\"Incompatible shapes during merge: \"\n        r\"\\[2\\] vs. \\[1\\]\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatEmptyListWithFullyDefinedElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[5, 2])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t).shape, (0, 2))\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[None, 2])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t).shape, (0, 2))\n\n  def testConcatEmptyListWithUnknownElementShapeFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"All except the first dimension must be fully\"\n        \" defined when concating an empty tensor list\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatEmptyListWithPartiallyDefinedElementShapeFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[2, None])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"All except the first dimension must be fully\"\n        \" defined when concating an empty tensor list\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatListWithScalarElementShapeFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=tensor_shape.TensorShape([]))\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Concat requires elements to be at least vectors, \"\n        \"found scalars instead\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatListWithScalarElementsFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    l1 = list_ops.tensor_list_push_back(l, 1.)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, \"Concat saw a scalar shape at index 0\"\n        \" but requires at least vectors\"):\n      t = list_ops.tensor_list_concat(l1, element_dtype=dtypes.float32)\n      self.evaluate(t)\n    l1 = list_ops.tensor_list_push_back(l, [1.])\n    l1 = list_ops.tensor_list_push_back(l1, 2.)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, \"Concat saw a scalar shape at index 1\"\n        \" but requires at least vectors\"):\n      t = list_ops.tensor_list_concat(l1, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatWithUninitializedTensorsUseListElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[2, 3], num_elements=3)\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(np.zeros((6, 3)), t)\n\n  def testConcatWithUninitializedTensorsUseProvidedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t = list_ops.tensor_list_concat(\n        l, element_dtype=dtypes.float32, element_shape=(2, 3))\n    self.assertAllEqual(np.zeros((6, 3)), t)\n\n  def testConcatWithUninitializedTensorsUseProvidedElementShapeAndLengths(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t, _ = gen_list_ops.tensor_list_concat_v2(\n        l,\n        element_dtype=dtypes.float32,\n        element_shape=list_ops._build_element_shape((None, 3)),\n        leading_dims=[2, 3, 5])\n    self.assertAllEqual(np.zeros((10, 3)), t)\n    l = list_ops.tensor_list_set_item(l, 1, [[2., 3.], [4., 5.], [6., 7.]])\n    t, _ = gen_list_ops.tensor_list_concat_v2(\n        l,\n        element_dtype=dtypes.float32,\n        element_shape=list_ops._build_element_shape((None, 2)),\n        leading_dims=[2, 3, 4])\n    self.assertAllEqual([[0., 0.], [0., 0.], [2., 3.], [4., 5.], [6., 7.],\n                         [0., 0.], [0., 0.], [0., 0.], [0., 0.]], t)\n\n  def testConcatWithUninitializedTensorsInferShapeFromElements(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 1, [[2., 3.], [4., 5.], [6., 7.]])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual([[0., 0.], [0., 0.], [0., 0.], [2., 3.], [4., 5.],\n                         [6., 7.], [0., 0.], [0., 0.], [0., 0.]], t)\n\n  def testConcatWithUninitializedTensorsFailsIfNoElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Trying to concat list with only uninitialized tensors \"\n        r\"but element_shape_except_first_dim is not fully defined\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatWithUninitializedTensorsFailsIfNoInputLengths(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 3], num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"List contains uninitialized tensor at index 0\"\n        r\" but leading_dims has only 0 elements.\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testEmptyTensorListInvalidShape(self):\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                r\"Shape must be at most rank 1 but is rank 2\"):\n      t = gen_list_ops.EmptyTensorList(\n          element_shape=array_ops.ones(dtype=dtypes.int32, shape=[1, 0]),\n          max_num_elements=constant_op.constant(1),\n          element_dtype=dtypes.int32)\n      self.evaluate(t)\n\n  def testEvenSplit(self):\n\n    def RunTest(input_tensor, lengths, expected_stacked_output):\n      l = list_ops.tensor_list_split(\n          input_tensor, element_shape=None, lengths=lengths)\n      self.assertAllEqual(\n          list_ops.tensor_list_stack(l, element_dtype=dtypes.float32),\n          expected_stacked_output)\n\n    RunTest([1., 2., 3.], [1, 1, 1], [[1.], [2.], [3.]])\n    RunTest([1., 2., 3., 4.], [2, 2], [[1., 2.], [3., 4.]])\n    RunTest([[1., 2.], [3., 4.]], [1, 1], [[[1., 2.]], [[3., 4.]]])\n\n  def testUnevenSplit(self):\n    l = list_ops.tensor_list_split([1., 2., 3., 4., 5],\n                                   element_shape=None,\n                                   lengths=[3, 2])\n    self.assertAllEqual(list_ops.tensor_list_length(l), 2)\n    self.assertAllEqual(\n        list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32),\n        [1., 2., 3.])\n    self.assertAllEqual(\n        list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32),\n        [4., 5.])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithInvalidTensorShapeFails(self):\n    with self.cached_session():\n      tensor = array_ops.placeholder(dtype=dtypes.float32)\n      l = list_ops.tensor_list_split(tensor, element_shape=None, lengths=[1])\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"Tensor must be at least a vector, but saw shape: \\[\\]\"):\n        l.eval({tensor: 1})\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithInvalidLengthsShapeFails(self):\n    with self.cached_session():\n      lengths = array_ops.placeholder(dtype=dtypes.int64)\n      l = list_ops.tensor_list_split([1., 2.],\n                                     element_shape=None,\n                                     lengths=lengths)\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"Expected lengths to be a vector, received shape: \\[\\]\"):\n        l.eval({lengths: 1})\n\n  def testSplitWithInvalidLengthsFails(self):\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                r\"Invalid value in lengths: -1\"):\n      l = list_ops.tensor_list_split([1., 2.],\n                                     element_shape=None,\n                                     lengths=[1, -1])\n      self.evaluate(l)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Attempting to slice \\[0, 3\\] from tensor with length 2\"):\n      l = list_ops.tensor_list_split([1., 2.], element_shape=None, lengths=[3])\n      self.evaluate(l)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Unused values in tensor. Length of tensor: 2 Values used: 1\"):\n      l = list_ops.tensor_list_split([1., 2.], element_shape=None, lengths=[1])\n      self.evaluate(l)\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithScalarElementShapeFails(self):\n    with self.assertRaisesRegex(ValueError,\n                                r\"Shapes must be equal rank, but are 1 and 0\"):\n      l = list_ops.tensor_list_split([1., 2.], element_shape=[], lengths=[1, 1])\n    with self.cached_session():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"TensorListSplit requires element_shape to be at least of rank 1, \"\n          r\"but saw: \\[\\]\"):\n        element_shape = array_ops.placeholder(dtype=dtypes.int32)\n        l = list_ops.tensor_list_split([1., 2.],\n                                       element_shape=element_shape,\n                                       lengths=[1, 1])\n        l.eval({element_shape: []})\n\n  def testEagerOnlySplitWithScalarElementShapeFails(self):\n    if context.executing_eagerly():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"TensorListSplit requires element_shape to be at least of rank 1, \"\n          r\"but saw: \\[\\]\"):\n        list_ops.tensor_list_split([1., 2.], element_shape=[], lengths=[1, 1])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithIncompatibleTensorShapeAndElementShapeFails(self):\n    with self.assertRaisesRegex(ValueError,\n                                r\"Shapes must be equal rank, but are 2 and 1\"):\n      l = list_ops.tensor_list_split([[1.], [2.]],\n                                     element_shape=[1],\n                                     lengths=[1, 1])\n\n    with self.cached_session():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"tensor shape \\[2,1\\] is not compatible with element_shape \\[1\\]\"):\n        element_shape = array_ops.placeholder(dtype=dtypes.int32)\n        l = list_ops.tensor_list_split([[1.], [2.]],\n                                       element_shape=element_shape,\n                                       lengths=[1, 1])\n        l.eval({element_shape: [1]})\n\n  def testEagerOnlySplitWithIncompatibleTensorShapeAndElementShapeFails(self):\n    if context.executing_eagerly():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"tensor shape \\[2,1\\] is not compatible with element_shape \\[1\\]\"):\n        list_ops.tensor_list_split([[1.], [2.]],\n                                   element_shape=[1],\n                                   lengths=[1, 1])\n\n  def testResizeGrow(self):\n    l = list_ops.tensor_list_from_tensor([1., 2.], element_shape=[])\n    l = list_ops.tensor_list_resize(l, 4)\n    self.assertEqual(self.evaluate(list_ops.tensor_list_length(l)), 4)\n    self.assertEqual(\n        self.evaluate(\n            list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)),\n        1.)\n    self.assertEqual(\n        self.evaluate(\n            list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)),\n        2.)\n\n  def testResizeShrink(self):\n    l = list_ops.tensor_list_from_tensor([1., 2., 3.], element_shape=[])\n    l = list_ops.tensor_list_resize(l, 2)\n    self.assertEqual(self.evaluate(list_ops.tensor_list_length(l)), 2)\n    self.assertAllEqual(\n        self.evaluate(\n            list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)),\n        [1., 2.])\n\n  def testResizeWithInvalidSizeFails(self):\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"TensorListSlice expects size to be non-negative\"):\n      l = list_ops.tensor_list_from_tensor([1., 2., 3.], element_shape=[])\n      l = list_ops.tensor_list_resize(l, -1)\n      self.evaluate(l)\n\n  @test_util.run_deprecated_v1\n  @test_util.enable_control_flow_v2\n  def testSkipEagerResizeGrad(self):\n    t = constant_op.constant([1., 2., 3.])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    l = list_ops.tensor_list_set_item(\n        l, 3, 4., resize_if_index_out_of_bounds=True)\n    t1 = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    grad = gradients_impl.gradients(t1, t)[0]\n    self.assertAllEqual(self.evaluate(grad), [1., 1., 1.])\n\n  def testHandleDataAcrossFunctionCall(self):\n\n    @def_function.function\n    def func():\n      t = constant_op.constant([1., 2., 3.])\n      l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n      handle_data = resource_variable_ops.get_eager_safe_handle_data(l)\n      self.assertTrue(handle_data.is_set)\n      self.assertEqual(handle_data.shape_and_type[0].type.type_id,\n                       full_type_pb2.TFT_ARRAY)\n      return l\n\n    tensor_list = func()\n    handle_data = resource_variable_ops.get_eager_safe_handle_data(tensor_list)\n    self.assertTrue(handle_data.is_set)\n    self.assertEqual(dtypes.float32, handle_data.shape_and_type[0].dtype)\n    self.assertEqual(handle_data.shape_and_type[0].type.type_id,\n                     full_type_pb2.TFT_ARRAY)\n    element = list_ops.tensor_list_get_item(\n        tensor_list, 0, element_dtype=dtypes.float32)\n    self.assertAllEqual(element.shape.as_list(), [])\n\n  @test_util.run_gpu_only\n  def testNestedListDevicetoDeviceCopy(self):\n    if context.num_gpus() < 2:\n      self.skipTest(\"Need at least 2 GPUs for this test, found %d\" %\n                    context.num_gpus())\n    with ops.device(\"gpu:0\"):\n      t = constant_op.constant([1.0, 2.0, 3.0])\n      inner_l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n      outer_l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.variant, element_shape=[])\n      outer_l = list_ops.tensor_list_push_back(outer_l, inner_l)\n\n    # Stress test.\n    for _ in range(1024):\n      with ops.device(\"gpu:1\"):\n        outer_l = array_ops.identity(outer_l)\n      with ops.device(\"gpu:0\"):\n        outer_l = array_ops.identity(outer_l)\n\n    with ops.device(\"gpu:1\"):\n      _, inner_l = list_ops.tensor_list_pop_back(\n          outer_l, element_dtype=dtypes.variant)\n      t = list_ops.tensor_list_stack(inner_l, element_dtype=dtypes.float32)\n      self.assertAllEqual(t, [1.0, 2.0, 3.0])\n\n  def testTensorListStrings(self):\n    @def_function.function\n    def f():\n      return map_fn.map_fn(string_ops.string_upper,\n                           constant_op.constant([\"a\", \"b\", \"c\"]))\n\n    self.assertAllEqual(f(), [b\"A\", b\"B\", b\"C\"])\n\n  def testTensorListStringsNoInline(self):\n    # Generator function output type is a variant with a host-only underlying\n    # data type. \"ColocationGraph::AddHostOnlyDataTypesConstraints\" needs to\n    # have \"deep op inspection\" to be able to correctly place the while loop\n    # generated from map_fn.\n    self.skipTest(\"b/150742232\")\n\n    @function.defun_with_attributes(attributes={\"_noinline\": True})\n    def generator():\n      c = constant_op.constant([\"a\", \"b\", \"c\"])\n      return list_ops.tensor_list_from_tensor(c, element_shape=[])\n\n    @def_function.function\n    def f():\n      l = generator()\n\n      def upper(i):\n        e = list_ops.tensor_list_get_item(l, i, element_dtype=dtypes.string)\n        return string_ops.string_upper(e)\n\n      return map_fn.map_fn(\n          upper, constant_op.constant([0, 1, 2]), dtype=dtypes.string)\n\n    self.assertAllEqual(f(), [b\"A\", b\"B\", b\"C\"])\n\n  def testPopBackGrad(self):\n    # https://github.com/tensorflow/tensorflow/issues/37230\n\n    @def_function.function\n    def g(x):\n      x_prod = constant_op.constant([1.])\n      for unused_i in math_ops.range(3):\n        x_prod = x_prod * x\n      return x_prod\n\n    x = constant_op.constant(1.)\n    with backprop.GradientTape() as t:\n      t.watch(x)\n      with backprop.GradientTape() as tt:\n        tt.watch(x)\n        loss = g(x)\n      jac = tt.gradient(loss, x)\n    hess = t.gradient(jac, x)\n    self.assertAllEqual(hess, 6.)\n\n  def testTensorListElementShapeShapeInference(self):\n\n    @def_function.function\n    def f():\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=None)\n      l_element_shape = list_ops.tensor_list_element_shape(l, dtypes.int32)\n      self.assertIsNone(l_element_shape.shape.rank)\n      shape_l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.int32, element_shape=l_element_shape.shape)\n      shape_l = list_ops.tensor_list_push_back(shape_l, l_element_shape)\n      return list_ops.tensor_list_pop_back(shape_l, dtypes.int32)[1]\n\n    self.assertAllEqual(f(), -1)\n\n  def testElementShapeArgOfTensorListFromTensor(self):\n\n    @def_function.function\n    def f():\n      t = array_ops.ones([3, 3])\n      l = list_ops.tensor_list_from_tensor(t, element_shape=[-1])\n      l = list_ops.tensor_list_push_back(l, array_ops.ones([4]))\n      read_val = list_ops.tensor_list_get_item(\n          l, 3, element_dtype=dtypes.float32)\n      self.assertAllEqual(read_val.shape.as_list(), [None])\n      return read_val\n\n    self.assertAllEqual(f(), [1.0, 1.0, 1.0, 1.0])\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_CORE_KERNELS_LIST_KERNELS_H_\n#define TENSORFLOW_CORE_KERNELS_LIST_KERNELS_H_\n\n#define EIGEN_USE_THREADS\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define EIGEN_USE_GPU\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/framework/variant.h\"\n#include \"tensorflow/core/framework/variant_op_registry.h\"\n#include \"tensorflow/core/kernels/concat_lib.h\"\n#include \"tensorflow/core/kernels/fill_functor.h\"\n#include \"tensorflow/core/kernels/tensor_list.h\"\n#include \"tensorflow/core/lib/core/coding.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/core/refcount.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/platform/platform.h\"\n#include \"tensorflow/core/util/tensor_ops_util.h\"\n#include \"tensorflow/core/util/util.h\"\n\n// stream.h isn't available in some platforms such as Android, iOS, and\n// ChromiumOS. Only include it for platforms that PluggableDevice is tested on.\n#if !defined(PLUGGABLE_DEVICE_SUPPORTED) &&                              \\\n    (__x86_64__ || __i386__ || defined(__APPLE__) || defined(_WIN32)) && \\\n    !defined(ANDROID) && !defined(__ANDROID__) && !TARGET_OS_IOS &&      \\\n    !defined(PLATFORM_CHROMIUMOS)\n#define PLUGGABLE_DEVICE_SUPPORTED\n#endif\n\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n#include \"tensorflow/stream_executor/stream.h\"\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nStatus TensorShapeFromTensor(const Tensor& t, PartialTensorShape* out);\n\nStatus GetElementShapeFromInput(OpKernelContext* c,\n                                const TensorList& tensor_list, int index,\n                                PartialTensorShape* element_shape);\n\nStatus GetInputList(OpKernelContext* c, int index, const TensorList** list);\n\nStatus ForwardInputOrCreateNewList(OpKernelContext* c, int32_t input_index,\n                                   int32_t output_index,\n                                   const TensorList& input_list,\n                                   TensorList** output_list);\n\n// TODO(penporn): Move this to a proper place.\ninline bool IsPluggableDevice(OpKernelContext* c) {\n  return c->op_device_context() && c->op_device_context()->IsPluggableDevice();\n}\n\ntemplate <typename Device, typename T>\ninline void SetZero(OpKernelContext* ctx, Tensor& tensor) {\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  if (IsPluggableDevice(ctx)) {\n    auto ptr =\n        se::DeviceMemoryBase(tensor.flat<T>().data(), tensor.TotalBytes());\n    auto stream = ctx->op_device_context()->stream();\n    auto result = stream->ThenMemZero(&ptr, tensor.TotalBytes()).ok();\n    DCHECK_EQ(true, result);\n  } else {\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n    functor::SetZeroFunctor<Device, T>()(ctx->eigen_device<Device>(),\n                                         tensor.flat<T>());\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  }\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n}\n\ntemplate <typename T>\ninline void CopyTensorPluggableDevice(OpKernelContext* ctx, Tensor& src,\n                                      Tensor& dst) {\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  auto src_t = src.unaligned_flat<T>();\n  auto dst_t = dst.flat<T>();\n  DCHECK(DataTypeCanUseMemcpy(DataTypeToEnum<T>::v()));\n  auto src_ptr = se::DeviceMemoryBase(src_t.data(), src.TotalBytes());\n  auto dst_ptr = se::DeviceMemoryBase(dst_t.data(), dst.TotalBytes());\n  auto stream = ctx->op_device_context()->stream();\n  auto result = stream->ThenMemcpy(&dst_ptr, src_ptr, src.TotalBytes()).ok();\n  DCHECK_EQ(true, result);\n#else\n  LOG(FATAL)  // Crash OK.\n      << \"PluggableDevice is not supported on this platform.\";\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n}\n\ntemplate <typename Device, typename T>\ninline void CopyTensor(OpKernelContext* ctx, Tensor& src, Tensor& dst) {\n  auto src_t = src.unaligned_flat<T>();\n  auto dst_t = dst.flat<T>();\n  dst_t.device(ctx->eigen_device<Device>()) = src_t;\n}\n\ntemplate <typename T>\nvoid ConcatPluggableDevice(\n    OpKernelContext* context,\n    const std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>&\n        inputs,\n    typename TTypes<T, 2>::Matrix* output) {\n#ifdef PLUGGABLE_DEVICE_SUPPORTED\n  DCHECK(DataTypeCanUseMemcpy(DataTypeToEnum<T>::v()));\n\n  se::Stream* stream = context->op_device_context()->stream();\n\n  size_t num_inputs = inputs.size();\n  std::vector<ptrdiff_t> sizes;\n  sizes.reserve(num_inputs);\n  int64 row_size = 0;\n  for (const auto& input : inputs) {\n    sizes.push_back(input->dimension(1));\n    row_size += sizes.back();\n  }\n\n  T* out = &(*output)(0, 0);\n  std::vector<const T*> inp;\n  inp.reserve(num_inputs);\n  for (const auto& input : inputs) {\n    inp.push_back(&(*input)(0, 0));\n  }\n  const int64 dim0 = output->dimension(0);\n  for (int64 i = 0; i < dim0; ++i) {\n    for (int64 j = 0; j < num_inputs; ++j) {\n      auto size = sizes[j];\n      se::DeviceMemoryBase out_base{out, size * sizeof(T)};\n      se::DeviceMemoryBase inp_base{const_cast<T*>(inp[j]), size * sizeof(T)};\n      stream->ThenMemcpy(&out_base, inp_base, size * sizeof(T));\n      out += size;\n      inp[j] += size;\n    }\n  }\n#else\n  LOG(FATAL)  // Crash OK.\n      << \"PluggableDevice is not supported on this platform.\";\n#endif  // PLUGGABLE_DEVICE_SUPPORTED\n}\n\ntemplate <typename Device, typename T>\nclass TensorListStack : public OpKernel {\n public:\n  typedef std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>\n      ConstMatrixVector;\n  explicit TensorListStack(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n    OP_REQUIRES_OK(c, c->GetAttr(\"num_elements\", &num_elements_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* tensor_list = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &tensor_list));\n    OP_REQUIRES(\n        c, element_dtype_ == tensor_list->element_dtype,\n        errors::InvalidArgument(\n            \"Invalid data types; op elements \", DataTypeString(element_dtype_),\n            \" but list elements \", DataTypeString(tensor_list->element_dtype)));\n    if (num_elements_ != -1) {\n      OP_REQUIRES(c, tensor_list->tensors().size() == num_elements_,\n                  errors::InvalidArgument(\n                      \"Operation expected a list with \", num_elements_,\n                      \" elements but got a list with \",\n                      tensor_list->tensors().size(), \" elements.\"));\n    }\n    PartialTensorShape partial_element_shape;\n    OP_REQUIRES_OK(c, GetElementShapeFromInput(c, *tensor_list, 1,\n                                               &partial_element_shape));\n    OP_REQUIRES(\n        c,\n        partial_element_shape.IsFullyDefined() ||\n            !tensor_list->tensors().empty(),\n        errors::InvalidArgument(\"Tried to stack elements of an empty \",\n                                \"list with non-fully-defined element_shape: \",\n                                partial_element_shape.DebugString()));\n\n    // Check that `element_shape` input tensor is compatible with the shapes of\n    // element tensors.\n    if (!tensor_list->element_shape.IsFullyDefined()) {\n      for (int i = 0; i < tensor_list->tensors().size(); ++i) {\n        const Tensor& t = tensor_list->tensors()[i];\n        if (t.dtype() != DT_INVALID) {\n          PartialTensorShape tmp = partial_element_shape;\n          OP_REQUIRES_OK(c, tmp.MergeWith(t.shape(), &partial_element_shape));\n        }\n      }\n    }\n\n    // Compute the shape of the output tensor by pre-pending the leading dim to\n    // the element_shape.\n    TensorShape element_shape;\n    OP_REQUIRES(c, partial_element_shape.AsTensorShape(&element_shape),\n                errors::InvalidArgument(\n                    \"Tried to stack list which only contains uninitialized \",\n                    \"tensors and has a non-fully-defined element_shape: \",\n                    partial_element_shape.DebugString()));\n    TensorShape output_shape = element_shape;\n    output_shape.InsertDim(0, tensor_list->tensors().size());\n    Tensor* output;\n    OP_REQUIRES_OK(c, c->allocate_output(0, output_shape, &output));\n    if (output->NumElements() == 0) {\n      return;\n    }\n\n    ConstMatrixVector inputs_flat;\n    inputs_flat.reserve(tensor_list->tensors().size());\n    Tensor zeros;\n    for (const auto& t : tensor_list->tensors()) {\n      if (t.dtype() != DT_INVALID) {\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            t.shaped<T, 2>({1, t.NumElements()})));\n      } else {\n        if (!zeros.NumElements()) {\n          AllocatorAttributes attr;\n          if (element_dtype_ == DT_VARIANT) {\n            attr.set_on_host(true);\n          }\n          OP_REQUIRES_OK(\n              c, c->allocate_temp(element_dtype_, element_shape, &zeros, attr));\n          SetZero<Device, T>(c, zeros);\n        }\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            const_cast<const Tensor&>(zeros).shaped<T, 2>(\n                {1, zeros.NumElements()})));\n      }\n    }\n    auto output_flat = output->shaped<T, 2>({1, output->NumElements()});\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      ConcatGPU<T>(c, inputs_flat, output, &output_flat);\n      return;\n    }\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (IsPluggableDevice(c)) {\n      ConcatPluggableDevice<T>(c, inputs_flat, &output_flat);\n    } else {\n      ConcatCPU<T>(c->device(), inputs_flat, &output_flat);\n    }\n  }\n\n private:\n  int num_elements_;\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListGetItem : public OpKernel {\n public:\n  explicit TensorListGetItem(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* l = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &l));\n    OP_REQUIRES(c, element_dtype_ == l->element_dtype,\n                errors::InvalidArgument(\"Invalid data types; op elements \",\n                                        DataTypeString(element_dtype_),\n                                        \" but list elements \",\n                                        DataTypeString(l->element_dtype)));\n    int32_t index = c->input(1).scalar<int32>()();\n    OP_REQUIRES(c, index < l->tensors().size(),\n                errors::InvalidArgument(\"Trying to access element \", index,\n                                        \" in a list with \", l->tensors().size(),\n                                        \" elements.\"));\n    if (l->tensors()[index].dtype() != DT_INVALID) {\n      c->set_output(0, l->tensors()[index]);\n    } else {\n      PartialTensorShape partial_element_shape;\n      OP_REQUIRES_OK(\n          c, GetElementShapeFromInput(c, *l, 2, &partial_element_shape));\n      TensorShape element_shape;\n      // If l->element_shape and the element_shape input are both not fully\n      // defined, try to infer the shape from other list elements. This requires\n      // that all initialized list elements have the same shape.\n      // NOTE(srbs): This might be a performance bottleneck since we are\n      // iterating over the entire list here. This is necessary for feature\n      // parity with TensorArray.read. TensorArray has a mode in which all\n      // elements are required to be of the same shape, TensorList does not.\n      // In that mode TensorArray sets the array's element_shape on the first\n      // write call. We could do something similar here if needed.\n      if (!partial_element_shape.IsFullyDefined()) {\n        for (const Tensor& t : l->tensors()) {\n          if (t.dtype() != DT_INVALID) {\n            PartialTensorShape tmp = partial_element_shape;\n            OP_REQUIRES_OK(c, tmp.MergeWith(t.shape(), &partial_element_shape));\n          }\n        }\n      }\n      OP_REQUIRES(\n          c, partial_element_shape.AsTensorShape(&element_shape),\n          errors::InvalidArgument(\"Trying to read an uninitialized tensor but \",\n                                  \"element_shape is not fully defined: \",\n                                  partial_element_shape.DebugString(),\n                                  \" and no list element is set.\"));\n      Tensor* result;\n      AllocatorAttributes attr;\n      if (element_dtype_ == DT_VARIANT) {\n        attr.set_on_host(true);\n      }\n      OP_REQUIRES_OK(c, c->allocate_output(0, element_shape, &result, attr));\n      SetZero<Device, T>(c, *result);\n    }\n  }\n\n private:\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListPopBack : public OpKernel {\n public:\n  explicit TensorListPopBack(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* l = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &l));\n    OP_REQUIRES(c, element_dtype_ == l->element_dtype,\n                errors::InvalidArgument(\"Invalid data types; op elements \",\n                                        DataTypeString(element_dtype_),\n                                        \" but list elements \",\n                                        DataTypeString(l->element_dtype)));\n\n    OP_REQUIRES(c, !l->tensors().empty(),\n                errors::InvalidArgument(\"Trying to pop from an empty list.\"));\n\n    const Tensor& t = l->tensors().back();\n    if (t.dtype() != DT_INVALID) {\n      c->set_output(1, t);\n    } else {\n      PartialTensorShape partial_element_shape;\n      OP_REQUIRES_OK(\n          c, GetElementShapeFromInput(c, *l, 1, &partial_element_shape));\n      TensorShape element_shape;\n      OP_REQUIRES(\n          c, partial_element_shape.AsTensorShape(&element_shape),\n          errors::InvalidArgument(\"Trying to read an uninitialized tensor but \",\n                                  \"element_shape is not fully defined.\",\n                                  partial_element_shape.DebugString()));\n      Tensor* result;\n      AllocatorAttributes attr;\n      if (element_dtype_ == DT_VARIANT) {\n        attr.set_on_host(true);\n      }\n      OP_REQUIRES_OK(c, c->allocate_output(1, element_shape, &result, attr));\n      SetZero<Device, T>(c, *result);\n    }\n\n    TensorList* output_list = nullptr;\n    OP_REQUIRES_OK(c, ForwardInputOrCreateNewList(c, 0, 0, *l, &output_list));\n    output_list->tensors().pop_back();\n  }\n\n private:\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListConcat : public OpKernel {\n public:\n  using ConstMatrixVector =\n      std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>;\n  explicit TensorListConcat(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n    if (c->HasAttr(\"element_shape\")) {\n      OP_REQUIRES_OK(c, c->GetAttr(\"element_shape\", &element_shape_));\n    }\n  }\n\n  void Compute(OpKernelContext* c) override {\n    PartialTensorShape element_shape_except_first_dim;\n    if (!element_shape_.unknown_rank()) {\n      element_shape_except_first_dim = PartialTensorShape(\n          gtl::ArraySlice<int64_t>(element_shape_.dim_sizes()).subspan(1));\n    }\n    // Check that the input Variant tensor is indeed a TensorList and has the\n    // correct element type.\n    const TensorList* tensor_list = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &tensor_list));\n    OP_REQUIRES(\n        c, element_dtype_ == tensor_list->element_dtype,\n        errors::InvalidArgument(\n            \"Invalid data types; op elements \", DataTypeString(element_dtype_),\n            \" but list elements \", DataTypeString(tensor_list->element_dtype)));\n    // The leading dimension of all list elements if they are all the same.\n    // This is used as the leading dim of uninitialized tensors in the list\n    // if leading_dims is not provided.\n    int64_t first_dim = -1;\n    if (c->num_inputs() > 1) {\n      // TensorListConcatV2\n      PartialTensorShape element_shape;\n      OP_REQUIRES_OK(\n          c, GetElementShapeFromInput(c, *tensor_list, 1, &element_shape));\n      OP_REQUIRES(c, element_shape.unknown_rank() || element_shape.dims() >= 1,\n                  errors::InvalidArgument(\n                      \"Concat requires elements to be at least vectors, \",\n                      \"found scalars instead.\"));\n      // Split `element_shape` into `first_dim` and\n      // `element_shape_except_first_dim`.\n      first_dim = element_shape.dim_size(0);\n      element_shape_except_first_dim = element_shape;\n      element_shape_except_first_dim.RemoveDim(0);\n    }\n    // If the TensorList is empty, element_shape_except_first_dim must be fully\n    // defined.\n    OP_REQUIRES(c,\n                !tensor_list->tensors().empty() ||\n                    element_shape_except_first_dim.IsFullyDefined(),\n                errors::InvalidArgument(\n                    \"All except the first dimension must be fully defined \",\n                    \"when concating an empty tensor list. element_shape: \",\n                    element_shape_except_first_dim.DebugString()));\n    // 1. Check that `element_shape_except_first_dim` input tensor is\n    //    compatible with the shapes of element tensors.\n    // 2. Check that the elements have the same shape except the first dim.\n    // 3. If `first_dim` is known, check that it is compatible with the leading\n    //    dims of all elements.\n    // 4. If `first_dim` is unknown (-1), check whether all initialized\n    //    elements have the same leading dim and if so set `first_dim` to that\n    //    value.\n    if (!tensor_list->element_shape.IsFullyDefined()) {\n      bool check_dim = (first_dim == -1);\n      int64_t inferred_first_dim = first_dim;\n      for (int i = 0; i < tensor_list->tensors().size(); ++i) {\n        const Tensor& t = tensor_list->tensors()[i];\n        if (t.dtype() != DT_INVALID) {\n          PartialTensorShape tmp = element_shape_except_first_dim;\n          OP_REQUIRES(\n              c, TensorShapeUtils::IsVectorOrHigher(t.shape()),\n              errors::InvalidArgument(\"Concat saw a scalar shape at index \", i,\n                                      \" but requires at least vectors.\"));\n          TensorShape shape_except_first_dim = TensorShape(\n              gtl::ArraySlice<int64_t>(t.shape().dim_sizes()).subspan(1));\n          OP_REQUIRES_OK(c, tmp.MergeWith(shape_except_first_dim,\n                                          &element_shape_except_first_dim));\n          OP_REQUIRES(c, first_dim == -1 || first_dim == t.shape().dim_size(0),\n                      errors::InvalidArgument(\n                          \"First entry of element_shape input does not match \",\n                          \"the first dim of list element at index: \", i,\n                          \" Expected: \", first_dim,\n                          \" Actual: \", t.shape().dim_size(0)));\n          if (check_dim) {\n            if (inferred_first_dim == -1) {\n              inferred_first_dim = t.shape().dim_size(0);\n            } else if (inferred_first_dim != t.shape().dim_size(0)) {\n              inferred_first_dim = -1;\n              check_dim = false;\n            }\n          }\n        }\n      }\n      first_dim = inferred_first_dim;\n    }\n    TensorShape output_shape;\n    OP_REQUIRES(c, element_shape_except_first_dim.AsTensorShape(&output_shape),\n                errors::InvalidArgument(\n                    \"Trying to concat list with only uninitialized tensors \",\n                    \"but element_shape_except_first_dim is not fully defined: \",\n                    element_shape_except_first_dim.DebugString()));\n    // Build the lengths_tensor and leading dim of the output tensor by\n    // iterating over all element tensors.\n    Tensor* lengths_tensor = nullptr;\n    OP_REQUIRES_OK(c, c->allocate_output(1,\n                                         TensorShape({static_cast<int64_t>(\n                                             tensor_list->tensors().size())}),\n                                         &lengths_tensor));\n    auto lengths_tensor_vec = lengths_tensor->vec<int64_t>();\n    int64_t leading_dim = 0;\n    for (size_t i = 0; i < tensor_list->tensors().size(); i++) {\n      int64_t dim;\n      if (tensor_list->tensors()[i].dtype() != DT_INVALID) {\n        dim = tensor_list->tensors()[i].shape().dim_size(0);\n      } else {\n        // If leading_dims is not provided or does not contain an entry for\n        // index i use the inferred `first_dim` if set.\n        if ((c->num_inputs() <= 2 || i >= c->input(2).NumElements()) &&\n            first_dim != -1) {\n          dim = first_dim;\n        } else {\n          OP_REQUIRES(c, c->num_inputs() > 2,\n                      errors::InvalidArgument(\n                          \"Concating lists with uninitialized tensors is not \",\n                          \"supported in this version of TensorListConcat. \",\n                          \"Consider updating your GraphDef to run the newer \",\n                          \"version.\"));\n          OP_REQUIRES(c, i < c->input(2).NumElements(),\n                      errors::InvalidArgument(\n                          \"List contains uninitialized tensor at index \", i,\n                          \" but leading_dims has only \",\n                          c->input(2).NumElements(), \" elements.\"));\n          dim = c->input(2).vec<int64_t>()(i);\n        }\n      }\n      leading_dim += dim;\n      lengths_tensor_vec(i) = dim;\n    }\n    output_shape.InsertDim(0, leading_dim);\n    Tensor* output;\n    // Allocate the output tensor and fill it up with the concated element\n    // tensors.\n    OP_REQUIRES_OK(c, c->allocate_output(0, output_shape, &output));\n    if (output->NumElements() == 0) {\n      return;\n    }\n\n    ConstMatrixVector inputs_flat;\n    inputs_flat.reserve(tensor_list->tensors().size());\n    // Store the zeros tensors in a vector to prevent them from being GC'ed till\n    // concat is complete.\n    std::vector<Tensor> zeros_vec;\n    for (int i = 0; i < tensor_list->tensors().size(); i++) {\n      const Tensor& element_tensor = tensor_list->tensors()[i];\n      if (element_tensor.dtype() != DT_INVALID) {\n        if (element_tensor.NumElements() > 0) {\n          inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n              element_tensor.shaped<T, 2>({1, element_tensor.NumElements()})));\n        }\n      } else {\n        AllocatorAttributes attr;\n        if (element_dtype_ == DT_VARIANT) {\n          attr.set_on_host(true);\n        }\n        TensorShape element_shape = output_shape;\n        element_shape.set_dim(0, lengths_tensor_vec(i));\n        zeros_vec.emplace_back();\n        Tensor& zeros = zeros_vec.back();\n        OP_REQUIRES_OK(\n            c, c->allocate_temp(element_dtype_, element_shape, &zeros, attr));\n        SetZero<Device, T>(c, zeros);\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            const_cast<const Tensor&>(zeros).shaped<T, 2>(\n                {1, zeros.NumElements()})));\n      }\n    }\n    auto output_flat = output->shaped<T, 2>({1, output->NumElements()});\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      ConcatGPU<T>(c, inputs_flat, output, &output_flat);\n      return;\n    }\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (IsPluggableDevice(c)) {\n      ConcatPluggableDevice<T>(c, inputs_flat, &output_flat);\n    } else {\n      ConcatCPU<T>(c->device(), inputs_flat, &output_flat);\n    }\n  }\n\n private:\n  DataType element_dtype_;\n  PartialTensorShape element_shape_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListSplit : public OpKernel {\n public:\n  TensorListSplit(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    Tensor* output_tensor;\n    AllocatorAttributes attr;\n    attr.set_on_host(true);\n    OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));\n    PartialTensorShape element_shape;\n    OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));\n    OP_REQUIRES(c, element_shape.unknown_rank() || element_shape.dims() >= 1,\n                errors::InvalidArgument(\n                    \"TensorListSplit requires element_shape to be at least of \",\n                    \"rank 1, but saw: \", element_shape.DebugString()));\n    TensorList output_list;\n    const Tensor& input_tensor = c->input(0);\n    output_list.element_dtype = input_tensor.dtype();\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    input_tensor.shape().DebugString()));\n    TensorShape tensor_shape_without_first_dim(input_tensor.shape());\n    tensor_shape_without_first_dim.RemoveDim(0);\n    PartialTensorShape element_shape_without_first_dim;\n    if (!element_shape.unknown_rank()) {\n      element_shape_without_first_dim =\n          PartialTensorShape(element_shape.dim_sizes());\n      element_shape_without_first_dim.RemoveDim(0);\n    }\n    OP_REQUIRES(c,\n                element_shape_without_first_dim.IsCompatibleWith(\n                    tensor_shape_without_first_dim),\n                errors::InvalidArgument(\n                    \"tensor shape \", input_tensor.shape().DebugString(),\n                    \" is not compatible with element_shape \",\n                    element_shape.DebugString()));\n    output_list.element_shape = element_shape;\n    const Tensor& lengths = c->input(2);\n    OP_REQUIRES(c, TensorShapeUtils::IsVector(lengths.shape()),\n                errors::InvalidArgument(\n                    \"Expected lengths to be a vector, received shape: \",\n                    lengths.shape().DebugString()));\n    output_list.tensors().reserve(lengths.shape().dim_size(0));\n\n    const auto copy_tensor = IsPluggableDevice(c)\n                                 ? &CopyTensorPluggableDevice<T>\n                                 : &CopyTensor<Device, T>;\n\n    int64_t start = 0;\n    int64_t end = 0;\n    for (int i = 0; i < lengths.shape().dim_size(0); ++i) {\n      int64_t length = lengths.vec<int64_t>()(i);\n      OP_REQUIRES(\n          c, length >= 0,\n          errors::InvalidArgument(\"Invalid value in lengths: \", length));\n      end = start + length;\n      OP_REQUIRES(c, end <= input_tensor.shape().dim_size(0),\n                  errors::InvalidArgument(\"Attempting to slice [\", start, \", \",\n                                          end, \"] from tensor with length \",\n                                          input_tensor.shape().dim_size(0)));\n      Tensor tmp = input_tensor.Slice(start, end);\n      start = end;\n      // TODO(apassos) maybe not always align; but weird compiler bugs seem to\n      // prevent this.\n      Tensor aligned;\n      OP_REQUIRES_OK(c, c->allocate_temp(tmp.dtype(), tmp.shape(), &aligned));\n      copy_tensor(c, tmp, aligned);\n      output_list.tensors().emplace_back(aligned);\n    }\n    OP_REQUIRES(c, end == input_tensor.shape().dim_size(0),\n                errors::InvalidArgument(\n                    \"Unused values in tensor. Length of tensor: \",\n                    input_tensor.shape().dim_size(0), \" Values used: \", end));\n    output_tensor->scalar<Variant>()() = std::move(output_list);\n  }\n};\n\ntemplate <typename Device, typename T>\nclass TensorListGather : public OpKernel {\n public:\n  typedef std::vector<std::unique_ptr<typename TTypes<T, 2>::ConstMatrix>>\n      ConstMatrixVector;\n  explicit TensorListGather(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* tensor_list = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &tensor_list));\n    OP_REQUIRES(\n        c, element_dtype_ == tensor_list->element_dtype,\n        errors::InvalidArgument(\n            \"Invalid data types; op elements \", DataTypeString(element_dtype_),\n            \" but list elements \", DataTypeString(tensor_list->element_dtype)));\n    const Tensor& indices = c->input(1);\n    PartialTensorShape partial_element_shape;\n    OP_REQUIRES_OK(c, GetElementShapeFromInput(c, *tensor_list, 2,\n                                               &partial_element_shape));\n    OP_REQUIRES(\n        c, partial_element_shape.IsFullyDefined() || indices.NumElements() > 0,\n        errors::InvalidArgument(\"Tried to gather 0-elements from \"\n                                \"a list with non-fully-defined shape: \",\n                                partial_element_shape.DebugString()));\n\n    // Check that `element_shape` input tensor is compatible with the shapes of\n    // element tensors.\n    if (!tensor_list->element_shape.IsFullyDefined()) {\n      for (int index = 0; index < indices.NumElements(); ++index) {\n        const int i = indices.flat<int32>()(index);\n        const Tensor& t = tensor_list->tensors()[i];\n        if (t.dtype() != DT_INVALID) {\n          PartialTensorShape tmp = partial_element_shape;\n          OP_REQUIRES_OK(c, tmp.MergeWith(t.shape(), &partial_element_shape));\n        }\n      }\n    }\n\n    // Compute the shape of the output tensor by pre-pending the leading dim to\n    // the element_shape.\n    TensorShape element_shape;\n    OP_REQUIRES(\n        c, partial_element_shape.AsTensorShape(&element_shape),\n        errors::InvalidArgument(\"Tried to gather uninitialized tensors from a \",\n                                \"list with non-fully-defined element_shape: \",\n                                partial_element_shape.DebugString()));\n    TensorShape output_shape = element_shape;\n    output_shape.InsertDim(0, indices.NumElements());\n    Tensor* output;\n    OP_REQUIRES_OK(c, c->allocate_output(0, output_shape, &output));\n    if (output->NumElements() == 0) {\n      return;\n    }\n\n    ConstMatrixVector inputs_flat;\n    inputs_flat.reserve(indices.NumElements());\n    Tensor zeros;\n    for (int index = 0; index < indices.NumElements(); ++index) {\n      const int i = indices.flat<int32>()(index);\n      OP_REQUIRES(\n          c, i < tensor_list->tensors().size(),\n          errors::InvalidArgument(\"Index \", i, \" out o range; list only has \",\n                                  tensor_list->tensors().size(), \" elements.\"));\n      const Tensor& t = tensor_list->tensors()[i];\n      if (t.dtype() != DT_INVALID) {\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            t.shaped<T, 2>({1, t.NumElements()})));\n      } else {\n        if (!zeros.NumElements()) {\n          AllocatorAttributes attr;\n          if (element_dtype_ == DT_VARIANT) {\n            attr.set_on_host(true);\n          }\n          OP_REQUIRES_OK(\n              c, c->allocate_temp(element_dtype_, element_shape, &zeros, attr));\n          SetZero<Device, T>(c, zeros);\n        }\n        inputs_flat.emplace_back(new typename TTypes<T, 2>::ConstMatrix(\n            const_cast<const Tensor&>(zeros).shaped<T, 2>(\n                {1, zeros.NumElements()})));\n      }\n    }\n    auto output_flat = output->shaped<T, 2>({1, output->NumElements()});\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      ConcatGPU<T>(c, inputs_flat, output, &output_flat);\n      return;\n    }\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n    if (IsPluggableDevice(c)) {\n      ConcatPluggableDevice<T>(c, inputs_flat, &output_flat);\n    } else {\n      ConcatCPU<T>(c->device(), inputs_flat, &output_flat);\n    }\n  }\n\n private:\n  DataType element_dtype_;\n};\n\ntemplate <typename Device, typename T>\nclass TensorListFromTensor : public OpKernel {\n public:\n  TensorListFromTensor(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    Tensor* output_tensor;\n    AllocatorAttributes attr;\n    attr.set_on_host(true);\n    OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));\n    PartialTensorShape element_shape;\n    OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));\n    TensorList output_list;\n    const Tensor& t = c->input(0);\n    output_list.element_dtype = t.dtype();\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(t.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    t.shape().DebugString()));\n    TensorShape output_shape(t.shape());\n    output_shape.RemoveDim(0);\n    OP_REQUIRES(c, element_shape.IsCompatibleWith(output_shape),\n                errors::InvalidArgument(\n                    \"Specified a list with shape \", element_shape.DebugString(),\n                    \" from a tensor with shape \", output_shape.DebugString()));\n    output_list.element_shape = element_shape;\n    output_list.tensors().reserve(t.shape().dim_size(0));\n\n    const auto copy_tensor = IsPluggableDevice(c)\n                                 ? &CopyTensorPluggableDevice<T>\n                                 : &CopyTensor<Device, T>;\n\n    for (int i = 0; i < t.shape().dim_size(0); ++i) {\n      Tensor tmp = t.Slice(i, i + 1);\n      TensorShape tmp_shape = tmp.shape();\n      tmp_shape.RemoveDim(0);\n      OP_REQUIRES(c, tmp.CopyFrom(tmp, tmp_shape),\n                  errors::Unknown(\"Unexpected shape error.\"));\n      // TODO(apassos) maybe not always align; but weird compiler bugs seem to\n      // prevent this.\n      Tensor aligned;\n      OP_REQUIRES_OK(c, c->allocate_temp(tmp.dtype(), tmp.shape(), &aligned));\n      copy_tensor(c, tmp, aligned);\n      output_list.tensors().push_back(aligned);\n    }\n    output_tensor->scalar<Variant>()() = std::move(output_list);\n  }\n};\n\n// Scatters values in `value` into `list`. Assumes that `indices` are valid.\ntemplate <typename Device, typename T>\nStatus Scatter(OpKernelContext* c, const Tensor& value, const Tensor& indices,\n               TensorList* list) {\n  const auto copy_tensor = IsPluggableDevice(c) ? &CopyTensorPluggableDevice<T>\n                                                : &CopyTensor<Device, T>;\n  for (int index = 0; index < indices.NumElements(); ++index) {\n    const int i = indices.flat<int32>()(index);\n    Tensor tmp = value.Slice(index, index + 1);\n    TensorShape tmp_shape = tmp.shape();\n    tmp_shape.RemoveDim(0);\n    if (!tmp.CopyFrom(tmp, tmp_shape)) {\n      return errors::Unknown(\"Unexpected shape error.\");\n    }\n    // TODO(apassos) maybe not always align; but weird compiler bugs seem to\n    // prevent this.\n    Tensor aligned;\n    TF_RETURN_IF_ERROR(c->allocate_temp(tmp.dtype(), tmp.shape(), &aligned));\n    // TODO(apassos) do all slices in a single kernel invocation instead of\n    // many small ones.\n    copy_tensor(c, tmp, aligned);\n    std::swap(list->tensors()[i], aligned);\n  }\n  return OkStatus();\n}\n\ntemplate <typename Device, typename T>\nclass TensorListScatterIntoExistingList : public OpKernel {\n public:\n  TensorListScatterIntoExistingList(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    const TensorList* l = nullptr;\n    OP_REQUIRES_OK(c, GetInputList(c, 0, &l));\n    const Tensor& input_tensor = c->input(1);\n    const Tensor& indices = c->input(2);\n\n    // Check that inputs are valid.\n    OP_REQUIRES(c, input_tensor.dtype() == l->element_dtype,\n                errors::InvalidArgument(\n                    \"Invalid data types; input tensor type: \",\n                    DataTypeString(input_tensor.dtype()),\n                    \" list element_type: \", DataTypeString(l->element_dtype)));\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    input_tensor.shape().DebugString()));\n    OP_REQUIRES(c, TensorShapeUtils::IsVector(indices.shape()),\n                errors::InvalidArgument(\n                    \"Expected indices to be a vector, but received shape: \",\n                    indices.shape().DebugString()));\n    OP_REQUIRES(\n        c, indices.NumElements() == input_tensor.shape().dim_size(0),\n        errors::InvalidArgument(\n            \"Expected len(indices) == tensor.shape[0], but saw: \",\n            indices.NumElements(), \" vs. \", input_tensor.shape().dim_size(0)));\n\n    // Resize the list if needed to accommodate all indices.\n    TensorList* output_list = nullptr;\n    OP_REQUIRES_OK(c, ForwardInputOrCreateNewList(c, 0, 0, *l, &output_list));\n    const auto indices_vec = indices.vec<int32>();\n    int32_t max_index =\n        (indices.NumElements() == 0)\n            ? -1\n            : *std::max_element(indices_vec.data(),\n                                indices_vec.data() + indices.NumElements());\n    if (max_index + 1 > output_list->tensors().size()) {\n      output_list->tensors().resize(max_index + 1);\n    }\n\n    // Scatter the values.\n    OP_REQUIRES_OK(c,\n                   Scatter<Device, T>(c, input_tensor, indices, output_list));\n  }\n};\n\ntemplate <typename Device, typename T>\nclass TensorListScatter : public OpKernel {\n public:\n  TensorListScatter(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void Compute(OpKernelContext* c) override {\n    Tensor* output_tensor;\n    AllocatorAttributes attr;\n    attr.set_on_host(true);\n    OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));\n    Tensor indices = c->input(1);\n    PartialTensorShape element_shape;\n    OP_REQUIRES(\n        c, !TensorShapeUtils::IsMatrixOrHigher(c->input(2).shape()),\n        errors::InvalidArgument(\n            \"TensorListScatter: element_shape must be at most rank 1 but has \",\n            \"the shape of \", c->input(2).shape().DebugString()));\n    OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(2), &element_shape));\n    // TensorListScatterV2 passes the num_elements input, TensorListScatter does\n    // not.\n    int num_elements = c->num_inputs() >= 4 ? c->input(3).scalar<int>()() : -1;\n    OP_REQUIRES(c, num_elements >= -1,\n                errors::InvalidArgument(\n                    \"TensorListScatter expects num_elements >= -1, found: \",\n                    num_elements));\n    TensorList output_list;\n    const Tensor& input_tensor = c->input(0);\n    output_list.element_dtype = input_tensor.dtype();\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Tensor must be at least a vector, but saw shape: \",\n                    input_tensor.shape().DebugString()));\n    TensorShape output_shape(input_tensor.shape());\n    output_shape.RemoveDim(0);\n    OP_REQUIRES(c, element_shape.IsCompatibleWith(output_shape),\n                errors::InvalidArgument(\n                    \"Specified a list with shape \", element_shape.DebugString(),\n                    \" from a tensor with shape \", output_shape.DebugString()));\n    output_list.element_shape = element_shape;\n\n    OP_REQUIRES(c, indices.NumElements() == input_tensor.shape().dim_size(0),\n                errors::InvalidArgument(\n                    \"Invalid number of rows in input tensor. Expected: \",\n                    indices.NumElements(),\n                    \" Actual: \", input_tensor.shape().dim_size(0)));\n\n    // Validate indices and resize output_list.tensors to fit the highest index.\n    {\n      int highest_index = -1;\n      for (int index = 0; index < indices.NumElements(); ++index) {\n        const int i = indices.flat<int32>()(index);\n        OP_REQUIRES(\n            c, i >= 0,\n            errors::InvalidArgument(\n                \"Indices in TensorListScatter must all be non-negative.\"));\n        OP_REQUIRES(c, num_elements == -1 || i < num_elements,\n                    errors::InvalidArgument(\n                        \"TensorListScatter: Trying to scatter at index \", i,\n                        \" in list with size \", num_elements));\n        if (i > highest_index) {\n          highest_index = i;\n        }\n      }\n      output_list.tensors().resize(std::max(highest_index + 1, num_elements),\n                                   Tensor(DT_INVALID));\n    }\n\n    OP_REQUIRES_OK(c,\n                   Scatter<Device, T>(c, input_tensor, indices, &output_list));\n    output_tensor->scalar<Variant>()() = std::move(output_list);\n  }\n};\n\ntemplate <typename Device>\nStatus TensorListBinaryAdd(OpKernelContext* c, const TensorList& a,\n                           const TensorList& b, TensorList* out) {\n  if (a.element_dtype != b.element_dtype) {\n    return errors::InvalidArgument(\n        \"Trying to add two lists of tensors of different dtypes. One is \",\n        DataTypeString(a.element_dtype), \" and the other is \",\n        DataTypeString(b.element_dtype));\n  }\n  out->element_dtype = a.element_dtype;\n  if (!a.element_shape.IsCompatibleWith(b.element_shape)) {\n    return errors::InvalidArgument(\n        \"Trying to add two lists of tensors with incompatible element shapes. \"\n        \"One is \",\n        a.element_shape.DebugString(), \" and the other is \",\n        b.element_shape.DebugString());\n  }\n\n  TF_RETURN_IF_ERROR(\n      a.element_shape.MergeWith(b.element_shape, &out->element_shape));\n  if (a.tensors().size() != b.tensors().size()) {\n    return errors::InvalidArgument(\n        \"Trying to add two lists of tensors with different lengths. One is \",\n        a.tensors().size(), \" and the other is \", b.tensors().size());\n  }\n  out->tensors().reserve(a.tensors().size());\n  for (int i = 0; i < a.tensors().size(); ++i) {\n    const Tensor& a_tensor = a.tensors()[i];\n    const Tensor& b_tensor = b.tensors()[i];\n    Tensor out_tensor;\n    TF_RETURN_IF_ERROR(\n        BinaryAddTensors<Device>(c, a_tensor, b_tensor, &out_tensor));\n    out->tensors().push_back(out_tensor);\n  }\n  return OkStatus();\n}\n\ntemplate <typename Device>\nStatus TensorListZerosLike(OpKernelContext* c, const TensorList& x,\n                           TensorList* y) {\n  y->element_dtype = x.element_dtype;\n  y->element_shape = x.element_shape;\n  y->tensors().reserve(x.tensors().size());\n  for (const Tensor& t : x.tensors()) {\n    Tensor out_tensor;\n    TF_RETURN_IF_ERROR(ZerosLikeTensor<Device>(c, t, &out_tensor));\n    y->tensors().emplace_back(out_tensor);\n  }\n  return OkStatus();\n}\n\ntemplate <typename Device, typename T>\nclass TensorListPushBackBatch : public OpKernel {\n public:\n  explicit TensorListPushBackBatch(OpKernelConstruction* c) : OpKernel(c) {\n    OP_REQUIRES_OK(c, c->GetAttr(\"element_dtype\", &element_dtype_));\n  }\n\n  void Compute(OpKernelContext* c) override {\n    const Tensor& input = c->input(1);\n    OP_REQUIRES(c, element_dtype_ == input.dtype(),\n                errors::InvalidArgument(\"Invalid data types; list elements \",\n                                        DataTypeString(element_dtype_),\n                                        \" but tried to append \",\n                                        DataTypeString(input.dtype())));\n    OP_REQUIRES(c, TensorShapeUtils::IsVectorOrHigher(input.shape()),\n                errors::InvalidArgument(\n                    \"Expected tensor to be at least a vector, but saw shape: \",\n                    input.shape().DebugString()));\n\n    const TensorShape& tls_shape = c->input(0).shape();\n\n    // For purposes of input forwarding, we want the least restrictive\n    // AllocatorAttributes possible.  If we need to allocate later,\n    // we'll request the DT_VARIANT be allocated on host.\n    AllocatorAttributes attr;\n\n    std::unique_ptr<Tensor> tls_alias = c->forward_input(\n        0 /*input_index*/, 0 /*output_index*/, DT_VARIANT, tls_shape,\n        DEVICE_MEMORY /* input is always on DEVICE_MEMORY */, attr);\n\n    bool ok_to_alias = tls_alias != nullptr;\n    if (tls_alias && tls_alias->dtype() == DT_VARIANT &&\n        tls_alias->NumElements() > 0) {\n      auto alias_t = tls_alias->flat<Variant>();\n      for (int i = 0; i < tls_alias->NumElements(); ++i) {\n        TensorList* tl_i = alias_t(i).get<TensorList>();\n        if (tl_i == nullptr || !tl_i->RefCountIsOne()) {\n          ok_to_alias = false;\n          break;\n        }\n      }\n    }\n    const Tensor& tls = ok_to_alias ? *tls_alias : c->input(0);\n\n    OP_REQUIRES(c, tls.dtype() == DT_VARIANT,\n                errors::InvalidArgument(\n                    \"Expected input_handles dtype to be Variant, but saw: \",\n                    DataTypeString(tls.dtype())));\n    OP_REQUIRES(c, TensorShapeUtils::IsVector(tls_shape),\n                errors::InvalidArgument(\n                    \"Expected input_handles to be a vector, but saw shape: \",\n                    tls_shape.DebugString()));\n    const int64_t batch_size = tls.NumElements();\n    OP_REQUIRES(c, input.dim_size(0) == batch_size,\n                errors::InvalidArgument(\n                    \"Expected tensor.shape[0] == input_handles.size, but saw \",\n                    input.dim_size(0), \" vs. \", batch_size));\n    auto tls_t = tls.vec<Variant>();\n\n    TensorShape input_element_shape = input.shape();\n    input_element_shape.RemoveDim(0);\n    std::vector<const TensorList*> tl_batch;\n    for (int64_t b = 0; b < batch_size; ++b) {\n      const TensorList* l = tls_t(b).get<TensorList>();\n      OP_REQUIRES(c, l != nullptr,\n                  errors::InvalidArgument(\"Input handle at index \", b,\n                                          \" is not a list. Saw: '\",\n                                          tls_t(b).DebugString(), \"'\"));\n      OP_REQUIRES(\n          c, l->element_shape.IsCompatibleWith(input_element_shape),\n          errors::InvalidArgument(\n              \"Tried to append a tensor with incompatible shape to a \"\n              \"list at index \",\n              b, \". Op element shape: \", input_element_shape.DebugString(),\n              \" list shape: \", l->element_shape.DebugString()));\n      OP_REQUIRES(c, element_dtype_ == l->element_dtype,\n                  errors::InvalidArgument(\n                      \"Invalid data type at index \", b, \"; op elements \",\n                      DataTypeString(element_dtype_), \" but list elements \",\n                      DataTypeString(l->element_dtype)));\n      tl_batch.push_back(l);\n    }\n\n    Tensor* result;\n\n    if (ok_to_alias) {\n      result = tls_alias.get();\n      c->set_output(0, *result);\n    } else {\n      // DT_VARIANT tensors always allocated on host.\n      AllocatorAttributes attr;\n      attr.set_on_host(true);\n      OP_REQUIRES_OK(\n          c, c->allocate_output(0, TensorShape{batch_size}, &result, attr));\n    }\n\n    if (batch_size == 0) {\n      return;\n    }\n\n    auto input_t = input.flat_outer_dims<T, 2>();\n    auto result_t = result->vec<Variant>();\n\n    for (int64_t b = 0; b < batch_size; ++b) {\n      if (!ok_to_alias) {\n        result_t(b) = tl_batch[b]->Copy();\n      }\n      TensorList* output = result_t(b).get<TensorList>();\n      DCHECK(output != nullptr);\n      Tensor frame;\n      OP_REQUIRES_OK(\n          c, c->allocate_temp(element_dtype_, input_element_shape, &frame));\n      if (input_element_shape.num_elements() > 0) {\n        auto frame_t = frame.flat<T>();\n        // TODO(penporn): Get this if out of the batch loop.\n        if (IsPluggableDevice(c)) {\n          // The chip method need Eigen Device, so need to use Tensor.Slice\n          // instead of chip for pluggable device. The input should be reshaped\n          // to 2-D and so can be sliced by batch dim.\n          auto input_t_shape =\n              TensorShape({input_t.dimension(0), input_t.dimension(1)});\n          auto input_reshaped = Tensor();\n          OP_REQUIRES(c, input_reshaped.CopyFrom(input, input_t_shape),\n                      errors::Unknown(\"Unexpected shape error.\"));\n\n          auto input_batch = input_reshaped.Slice(b, b + 1);\n          CopyTensorPluggableDevice<T>(c, input_batch, frame);\n        } else {\n          frame_t.device(c->eigen_device<Device>()) =\n              input_t.template chip<0>(b);\n        }\n      }\n      output->tensors().push_back(std::move(frame));\n    }\n  }\n\n private:\n  DataType element_dtype_;\n};\n\n}  // namespace tensorflow\n\n#undef PLUGGABLE_DEVICE_SUPPORTED\n#endif  // TENSORFLOW_CORE_KERNELS_LIST_KERNELS_H_\n", "# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for ops which manipulate lists of tensors.\"\"\"\n\n# pylint: disable=g-bad-name\nfrom absl.testing import parameterized\nimport numpy as np  # pylint: disable=unused-import\n\nfrom tensorflow.core.framework import full_type_pb2\nfrom tensorflow.python.client import session\nfrom tensorflow.python.eager import backprop\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.eager import function\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import tensor_shape\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import control_flow_ops\nfrom tensorflow.python.ops import gen_list_ops\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import list_ops\nfrom tensorflow.python.ops import map_fn\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import resource_variable_ops\nfrom tensorflow.python.ops import state_ops\nfrom tensorflow.python.ops import string_ops\nfrom tensorflow.python.ops import variable_scope as vs\nfrom tensorflow.python.platform import test\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass ListOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n\n  def _testPushPop(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    l = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    l, e = self.evaluate((l, e))\n    self.assertAllEqual(l, [])\n    self.assertAllEqual(e, 1.0)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  def testPushPop(self, max_num_elements):\n    self._testPushPop(max_num_elements)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_gpu_only\n  def testPushPopGPU(self, max_num_elements):\n    with context.device(\"gpu:0\"):\n      self._testPushPop(max_num_elements)\n\n  @test_util.run_deprecated_v1\n  def testPushInFullListFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[], max_num_elements=1)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Tried to push item into a full list\"):\n      l = list_ops.tensor_list_push_back(l, 2.)\n      self.evaluate(l)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_deprecated_v1\n  def testPopFromEmptyTensorListFails(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[],\n        max_num_elements=max_num_elements)\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Trying to pop from an empty list\"):\n      l = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n      self.evaluate(l)\n\n  def testPopUninitializedTensorUseListElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[2, 3], num_elements=3)\n    _, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    l = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    l, e = self.evaluate((l, e))\n    self.assertAllEqual(e, np.zeros((2, 3)))\n    self.assertAllEqual(l, np.zeros((3, 2, 3)))\n\n  def testPopUninitializedTensorUseSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 3], num_elements=3)\n    _, e = gen_list_ops.tensor_list_pop_back(\n        l, element_dtype=dtypes.float32, element_shape=[4, 3])\n    self.assertAllEqual(e, np.zeros((4, 3)))\n\n  def testPopUninitializedTensorWithInvalidElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to read an uninitialized tensor but \"\n        \"element_shape is not fully defined\"):\n      _, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n      self.evaluate(e)\n\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 2], num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Incompatible shapes during merge: \\[1,3\\] vs. \\[\\?,2\\]\"):\n      _, e = gen_list_ops.tensor_list_pop_back(\n          l, element_dtype=dtypes.float32, element_shape=[1, 3])\n      self.evaluate(e)\n\n  def testPushGetGrad(self):\n    with backprop.GradientTape() as tape:\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=None)\n      c0 = constant_op.constant(5.0)\n      c1 = constant_op.constant([10.0, 20.0])\n      tape.watch(c0)\n      tape.watch(c1)\n      l = list_ops.tensor_list_push_back(l, c0)\n      l = list_ops.tensor_list_push_back(l, c1)\n      t1 = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t1), [10.0, 20.0])\n      # t1 == c1 so the gradient should be [0., [1., 1.]]\n      # This tests that the gradient of push_back correctly converts DT_INVALID\n      # tensors to zeros. The list returned by the gradient of GetItem will\n      # have only have tensor at index 1 set and others set to DT_INVALID.\n      dt0, dt1 = tape.gradient(t1, [c0, c1])\n      self.assertAllEqual(self.evaluate(dt1), [1.0, 1.0])\n      self.assertEqual(self.evaluate(dt0), 0.0)\n\n  def _testStack(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    if not context.executing_eagerly():\n      self.assertAllEqual(t.shape.as_list(), [None])\n    self.assertAllEqual(self.evaluate(t), [1.0, 2.0])\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  def testStack(self, max_num_elements):\n    self._testStack(max_num_elements)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_gpu_only\n  def testStackGPU(self, max_num_elements):\n    with context.device(\"gpu:0\"):\n      self._testStack(max_num_elements)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testStackWithUnknownElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=None,\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [1.0, 2.0])\n\n    # Should raise an error when the element tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Incompatible ranks during merge: 0 vs. 1\"):\n      l = list_ops.tensor_list_push_back(l, constant_op.constant([3.0, 4.0]))\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testStackWithPartiallyDefinedElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[None],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([1.0]))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([2.0]))\n\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[1.0], [2.0]])\n\n    # Should raise an error when the element tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Incompatible shapes during merge: \\[1\\] vs. \\[2\\]\"):\n      l = list_ops.tensor_list_push_back(l, constant_op.constant([2.0, 3.0]))\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  @test_util.run_deprecated_v1\n  def testStackEmptyList(self, max_num_elements):\n    # Should be able to stack empty lists with fully defined element_shape.\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[1, 2],\n        max_num_elements=max_num_elements)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t).shape, (0, 1, 2))\n\n    # Should not be able to stack empty lists with partially defined\n    # element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=[None, 2],\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n    # Should not be able to stack empty lists with undefined element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=None,\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def _testStackWithUninitializedTensors(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(t, [0., 0., 0.])\n\n  def testStackWithUninitializedTensors(self):\n    self._testStackWithUninitializedTensors()\n\n  @test_util.run_gpu_only\n  def testStackWithUninitializedTensorsGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testStackWithUninitializedTensors()\n\n  def _testStackWithUninitializedTensorsInferShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 1, [1., 2.])\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(t, [[0., 0.], [1., 2.], [0., 0.]])\n\n  def testStackWithUninitializedTensorsInferShape(self):\n    self._testStackWithUninitializedTensorsInferShape()\n\n  @test_util.run_gpu_only\n  def testStackWithUninitializedTensorsInferShapeGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testStackWithUninitializedTensorsInferShape()\n\n  def testStackReservedListWithNoElementsAndPartialElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, \"Tried to stack list which only contains \"\n        \"uninitialized tensors and has a \"\n        \"non-fully-defined element_shape: <unknown>\"):\n      t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testStackUsingSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t = gen_list_ops.tensor_list_stack(\n        l, element_dtype=dtypes.float32, element_shape=[])\n    if context.executing_eagerly():\n      self.assertEqual(t.shape.as_list(), [3])\n    else:\n      self.assertEqual(t.shape.as_list(), [None])\n    self.assertAllEqual(self.evaluate(t), np.zeros((3,)))\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 2))\n  def testGatherGrad(self, max_num_elements):\n    with backprop.GradientTape() as tape:\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=[],\n          max_num_elements=max_num_elements)\n      c0 = constant_op.constant(1.0)\n      tape.watch(c0)\n      l = list_ops.tensor_list_push_back(l, c0)\n      l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n      t = list_ops.tensor_list_gather(l, [1, 0], element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t), [2.0, 1.0])\n      s = (t[0] + t[1]) * (t[0] + t[1])\n    dt = tape.gradient(s, c0)\n    self.assertAllEqual(self.evaluate(dt), 6.0)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testGatherWithUnknownElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=None,\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(2.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([3.0, 4.0]))\n\n    t = list_ops.tensor_list_gather(l, [1, 0], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [2.0, 1.0])\n\n    t = list_ops.tensor_list_gather(l, [2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[3.0, 4.0]])\n\n    # Should raise an error when the requested tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Incompatible ranks during merge: 0 vs. 1\"):\n      t = list_ops.tensor_list_gather(l, [0, 2], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testGatherWithPartiallyDefinedElementShape(self, max_num_elements):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[None],\n        max_num_elements=max_num_elements)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([1.0]))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([2.0, 3.0]))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([4.0, 5.0]))\n\n    t = list_ops.tensor_list_gather(l, [0], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[1.0]])\n\n    t = list_ops.tensor_list_gather(l, [1, 2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[2.0, 3.0], [4.0, 5.0]])\n\n    # Should raise an error when the requested tensors do not all have the same\n    # shape.\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Incompatible shapes during merge: \\[1\\] vs. \\[2\\]\"):\n      t = list_ops.tensor_list_gather(l, [0, 2], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  @parameterized.named_parameters((\"NoMaxNumElements\", None),\n                                  (\"WithMaxNumElements\", 3))\n  @test_util.run_deprecated_v1\n  def testGatherEmptyList(self, max_num_elements):\n    # Should be able to gather from empty lists with fully defined\n    # element_shape.\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=[1, 2],\n        max_num_elements=max_num_elements)\n    t = list_ops.tensor_list_gather(l, [], element_dtype=dtypes.float32)\n    self.assertAllEqual((0, 1, 2), self.evaluate(t).shape)\n\n    # Should not be able to gather from empty lists with partially defined\n    # element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=[None, 2],\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_gather(l, [], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n    # Should not be able to gather from empty lists with undefined\n    # element_shape.\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"non-fully-defined\"):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32,\n          element_shape=None,\n          max_num_elements=max_num_elements)\n      t = list_ops.tensor_list_gather(l, [], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testGatherGradWithNonContiguousIndices(self):\n    with backprop.GradientTape(persistent=True) as tape:\n      t = constant_op.constant([1.0, 2.0, 3.0])\n      l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n      c = constant_op.constant(5.0)\n      tape.watch(c)\n      l = list_ops.tensor_list_set_item(l, 1, c)\n      t = list_ops.tensor_list_gather(l, [1], element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t), [5.0])\n      s = t[0] * t[0]\n    dt = tape.gradient(s, c)\n    self.assertAllEqual(self.evaluate(dt), 10.0)\n    dl = tape.gradient(t, l)\n    dl_length = list_ops.tensor_list_length(dl)\n    self.assertAllEqual(self.evaluate(dl_length), 3)\n\n  def _testGatherWithUninitializedTensors(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    t = list_ops.tensor_list_gather(l, [0, 2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [0., 0.])\n\n  def testGatherWithUninitializedTensors(self):\n    self._testGatherWithUninitializedTensors()\n\n  @test_util.run_gpu_only\n  def testGatherWithUninitializedTensorsGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testGatherWithUninitializedTensors()\n\n  def _testGatherWithUninitializedTensorsInferShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 1, [1., 2.])\n    t = list_ops.tensor_list_gather(l, [1, 2], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[1., 2.], [0., 0.]])\n\n  def testGatherWithUninitializedTensorsInferShape(self):\n    self._testGatherWithUninitializedTensorsInferShape()\n\n  @test_util.run_gpu_only\n  def testGatherWithUninitializedTensorsInferShapeGpu(self):\n    with context.device(\"gpu:0\"):\n      self._testGatherWithUninitializedTensorsInferShape()\n\n  def testGatherReservedListWithNoElementsAndPartialElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Tried to gather uninitialized tensors from a\"\n        \" list with non-fully-defined element_shape\"):\n      t = list_ops.tensor_list_gather(l, [0], element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testGatherUsingSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t = gen_list_ops.tensor_list_gather(\n        l, [0, 1, 2], element_dtype=dtypes.float32, element_shape=[])\n    self.assertEqual(t.shape.as_list(), [3])\n    self.assertAllEqual(self.evaluate(t), np.zeros((3,)))\n\n  def testScatterOutputListSize(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_scatter(c0, [1, 3], [])\n    # TensorListScatter should return a list with size largest index + 1.\n    self.assertAllEqual(list_ops.tensor_list_length(l), 4)\n\n  def testScatterOutputListSizeWithNumElementsSpecified(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    l = gen_list_ops.tensor_list_scatter_v2(\n        c0, [1, 3], list_ops._build_element_shape([]), num_elements=5)\n    # TensorListScatter should return a list with size num_elements.\n    self.assertAllEqual(list_ops.tensor_list_length(l), 5)\n\n  def testScatterFailsWhenElementShapeIsNotVector(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    # In Eager mode, InvalidArgumentError is generated by the Compute function.\n    # In graph mode, ValueError is generated by the shape function.\n    with self.assertRaisesRegex(\n        (errors.InvalidArgumentError, ValueError),\n        \"must be at most rank 1\"):\n      l = gen_list_ops.tensor_list_scatter(\n          # Wrong element_shape. Should be at most rank 1.\n          c0, [1, 3], element_shape=[[1]])\n      self.evaluate(l)\n\n  def testScatterV2FailsWhenElementShapeIsNotVector(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    # In Eager mode, InvalidArgumentError is generated by the Compute function.\n    # In graph mode, ValueError is generated by the shape function.\n    with self.assertRaisesRegex(\n        (errors.InvalidArgumentError, ValueError),\n        \"must be at most rank 1\"):\n      l = gen_list_ops.tensor_list_scatter_v2(\n          # Wrong element_shape. Should be at most rank 1.\n          c0, [1, 3], element_shape=[[1]], num_elements=2)\n      self.evaluate(l)\n\n  def testScatterFailsWhenIndexLargerThanNumElements(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"TensorListScatter: Trying to scatter at index 3 in list with size 3\"):\n      l = gen_list_ops.tensor_list_scatter_v2(\n          c0, [1, 3], list_ops._build_element_shape([]), num_elements=3)\n      self.evaluate(l)\n\n  def testScatterFailsWithInvalidNumElements(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"TensorListScatter expects num_elements >= -1, found: -2\"):\n      l = gen_list_ops.tensor_list_scatter_v2(\n          c0, [1, 3], list_ops._build_element_shape([]), num_elements=-2)\n      self.evaluate(l)\n\n  def testScatterWithInvalidRowsInInputTensorFails(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Invalid number of rows in input tensor. Expected: 3 Actual: 2\"):\n      l = list_ops.tensor_list_scatter(c0, [1, 0, 2], [])\n      self.evaluate(l)\n\n  def testScatterWithNegativeIndicesFails(self):\n    c0 = constant_op.constant([1.0, 2.0])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Indices in TensorListScatter must all be non-negative.\"):\n      l = list_ops.tensor_list_scatter(c0, [-1, -2], element_shape=[])\n      self.evaluate(l)\n\n  def testScatterIntoExistingList(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    l = list_ops.tensor_list_scatter(tensor=[1.], indices=[0], element_shape=[])\n    l = list_ops.tensor_list_scatter(\n        tensor=[2., 3.], indices=[1, 2], element_shape=[], input_handle=l)\n    self.assertAllEqual(\n        list_ops.tensor_list_stack(l, element_dtype=dtypes.float32),\n        [1., 2., 3.])\n\n  def testScatterGrad(self):\n    with backprop.GradientTape() as tape:\n      c0 = constant_op.constant([1.0, 2.0])\n      tape.watch(c0)\n      l = list_ops.tensor_list_scatter(c0, [1, 0], element_shape=[])\n      t0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      t1 = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t0), 2.0)\n      self.assertAllEqual(self.evaluate(t1), 1.0)\n      loss = t0 * t0 + t1 * t1\n    dt = tape.gradient(loss, c0)\n    self.assertAllEqual(self.evaluate(dt), [2., 4.])\n\n  def testScatterWithPartialReadGrad(self):\n    with backprop.GradientTape() as tape:\n      c0 = constant_op.constant([1.0, 2.0])\n      tape.watch(c0)\n      l = list_ops.tensor_list_scatter(c0, [1, 0], element_shape=[])\n      t0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(t0), 2.0)\n      loss = t0 * t0\n    dt = tape.gradient(loss, c0)\n    self.assertAllEqual(self.evaluate(dt), [0., 4.])\n\n  def testTensorListFromTensor(self):\n    t = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    e = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    self.assertAllEqual(e, 1.0)\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(e, 2.0)\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(e, 1.0)\n    self.assertAllEqual(list_ops.tensor_list_length(l), 0)\n\n  @test_util.run_gpu_only\n  def testFromTensorGPU(self):\n    with context.device(\"gpu:0\"):\n      self.testTensorListFromTensor()\n\n  def testGetSetBool(self):\n    t = constant_op.constant([True, False])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.bool)\n    self.assertAllEqual(self.evaluate(e0), True)\n    l = list_ops.tensor_list_set_item(l, 0, False)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.bool)\n    self.assertAllEqual(self.evaluate(t), [False, False])\n\n  @test_util.run_gpu_only\n  def testGetSetBoolGPU(self):\n    with context.device(\"gpu:0\"):\n      self.testGetSetBool()\n\n  def _testGetSetNumeric(self, dtype):\n    t = constant_op.constant([1.0, 2.0], dtype=dtype)\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtype)\n    self.assertAllEqual(self.evaluate(e0), 1.0)\n    l = list_ops.tensor_list_set_item(\n        l, 0, constant_op.constant(3.0, dtype=dtype))\n    t = list_ops.tensor_list_stack(l, element_dtype=dtype)\n    self.assertAllEqual(self.evaluate(t), [3.0, 2.0])\n\n  @parameterized.parameters([dtypes.float32, dtypes.float64,\n                             dtypes.complex64, dtypes.complex128])\n  def testGetSetNumeric(self, dtype):\n    self._testGetSetNumeric(dtype)\n\n  @parameterized.parameters([dtypes.float32, dtypes.float64,\n                             dtypes.complex64, dtypes.complex128])\n  @test_util.run_gpu_only\n  def testGetSetNumericGPU(self, dtype):\n    with context.device(\"gpu:0\"):\n      self._testGetSetNumeric(dtype)\n\n  def testGetSetReserved(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=2)\n    e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    self.assertAllEqual(e0, 0.0)\n    l = list_ops.tensor_list_set_item(l, 0, 3.0)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(t, [3.0, 0.0])\n\n  @test_util.run_gpu_only\n  def testGetSetReservedGPU(self):\n    with context.device(\"gpu:0\"):\n      self.testGetSetReserved()\n\n  def testSetGetGrad(self):\n    with backprop.GradientTape() as tape:\n      t = constant_op.constant(5.)\n      tape.watch(t)\n      l = list_ops.tensor_list_reserve(\n          element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n      l = list_ops.tensor_list_set_item(l, 1, 2. * t)\n      e = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      self.assertAllEqual(self.evaluate(e), 10.0)\n    self.assertAllEqual(self.evaluate(tape.gradient(e, t)), 2.0)\n\n  def testGetUninitializedTensorUseListElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[], num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 0, 5.)\n    e1 = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n    e2 = list_ops.tensor_list_get_item(l, 2, element_dtype=dtypes.float32)\n    self.assertEqual(self.evaluate(e1), 0.)\n    self.assertEqual(self.evaluate(e2), 0.)\n\n  def testGetUninitializedTensorUseSpecifiedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    e0 = gen_list_ops.tensor_list_get_item(\n        l, 0, element_shape=[], element_dtype=dtypes.float32)\n    e1 = gen_list_ops.tensor_list_get_item(\n        l, 1, element_shape=[2, 3], element_dtype=dtypes.float32)\n    self.assertEqual(e0.shape.as_list(), [])\n    self.assertEqual(e1.shape.as_list(), [2, 3])\n    self.assertEqual(self.evaluate(e0), 0.)\n    self.assertAllEqual(self.evaluate(e1), np.zeros((2, 3)))\n\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 3], num_elements=3)\n    e1 = gen_list_ops.tensor_list_get_item(\n        l, 1, element_shape=[2, 3], element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(e1), np.zeros((2, 3)))\n\n  def testGetUninitializedTensorWithInvalidElementShapeFails(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to read an uninitialized tensor but \"\n        \"element_shape is not fully defined\"):\n      e0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      self.evaluate(e0)\n\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 2], num_elements=3)\n\n    # In eager mode the shape mismatch is caught in the TensorListGetItem\n    # kernel which raises an InvalidArgumentError.\n    # In graph mode the shape mismatch is caught in the C++ shape inference\n    # which raises a ValueError.\n    if context.executing_eagerly():\n      error_type = errors.InvalidArgumentError\n    else:\n      error_type = ValueError\n    with self.assertRaisesRegex(error_type, r\"shapes\"):\n      e0 = gen_list_ops.tensor_list_get_item(\n          l, 0, element_dtype=dtypes.float32, element_shape=[1, 3])\n      self.evaluate(e0)\n\n  @test_util.run_deprecated_v1\n  @test_util.enable_control_flow_v2\n  def testSkipEagerSetItemIndexOutOfBounds(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[])\n    e0 = constant_op.constant(5.)\n    l = list_ops.tensor_list_set_item(\n        l, 0, 2. * e0, resize_if_index_out_of_bounds=True)\n    l = list_ops.tensor_list_set_item(\n        l, 1, 1., resize_if_index_out_of_bounds=True)\n    t = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    grad = gradients_impl.gradients(t, e0)[0]\n    self.assertAllEqual(self.evaluate(grad), 2.)\n\n  @test_util.run_deprecated_v1\n  def testSetOnEmptyListWithMaxNumElementsFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[], max_num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to modify element 0 in a list with 0 elements.\"):\n      l = list_ops.tensor_list_set_item(l, 0, 1.)\n      self.evaluate(l)\n\n  def testUnknownShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    l = list_ops.tensor_list_push_back(l, constant_op.constant(1.0))\n    l = list_ops.tensor_list_push_back(l, constant_op.constant([1.0, 2.0]))\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(e), [1.0, 2.0])\n    l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(e), 1.0)\n\n  @test_util.run_gpu_only\n  def testCPUGPUCopy(self):\n    t = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    with context.device(\"gpu:0\"):\n      l_gpu = array_ops.identity(l)\n      self.assertAllEqual(\n          self.evaluate(\n              list_ops.tensor_list_pop_back(\n                  l_gpu, element_dtype=dtypes.float32)[1]), 2.0)\n    l_cpu = array_ops.identity(l_gpu)\n    self.assertAllEqual(\n        self.evaluate(\n            list_ops.tensor_list_pop_back(\n                l_cpu, element_dtype=dtypes.float32)[1]), 2.0)\n\n  @test_util.run_gpu_only\n  def testCPUGPUCopyNested(self):\n    t = constant_op.constant([1.0, 2.0])\n    child_l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    l = list_ops.empty_tensor_list(\n        element_shape=constant_op.constant([], dtype=dtypes.int32),\n        element_dtype=dtypes.variant)\n    l = list_ops.tensor_list_push_back(l, child_l)\n    with context.device(\"gpu:0\"):\n      l_gpu = array_ops.identity(l)\n      _, child_l_gpu = list_ops.tensor_list_pop_back(\n          l_gpu, element_dtype=dtypes.variant)\n      self.assertAllEqual(\n          self.evaluate(\n              list_ops.tensor_list_pop_back(\n                  child_l_gpu, element_dtype=dtypes.float32)[1]), 2.0)\n    l_cpu = array_ops.identity(l_gpu)\n    _, child_l_cpu = list_ops.tensor_list_pop_back(\n        l_cpu, element_dtype=dtypes.variant)\n    self.assertAllEqual(\n        self.evaluate(\n            list_ops.tensor_list_pop_back(\n                child_l_cpu, element_dtype=dtypes.float32)[1]), 2.0)\n\n  def testGraphStack(self):\n    with self.cached_session():\n      tl = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([1], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      tl = list_ops.tensor_list_push_back(tl, [1])\n      self.assertAllEqual(\n          self.evaluate(\n              list_ops.tensor_list_stack(tl, element_dtype=dtypes.int32)),\n          [[1]])\n\n  def testSkipEagerStackInLoop(self):\n    with self.cached_session():\n      t1 = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      i = constant_op.constant(0, dtype=dtypes.int32)\n\n      def body(i, t1):\n        t1 = list_ops.tensor_list_push_back(t1, i)\n        i += 1\n        return i, t1\n\n      i, t1 = control_flow_ops.while_loop(lambda i, t1: math_ops.less(i, 4),\n                                          body, [i, t1])\n      s1 = list_ops.tensor_list_stack(t1, element_dtype=dtypes.int32)\n      self.assertAllEqual(self.evaluate(s1), [0, 1, 2, 3])\n\n  def testSkipEagerStackSwitchDtype(self):\n    with self.cached_session():\n      list_ = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      m = constant_op.constant([1, 2, 3], dtype=dtypes.float32)\n\n      def body(list_, m):\n        list_ = control_flow_ops.cond(\n            math_ops.equal(list_ops.tensor_list_length(list_), 0),\n            lambda: list_ops.empty_tensor_list(m.shape, m.dtype), lambda: list_)\n        list_ = list_ops.tensor_list_push_back(list_, m)\n        return list_, m\n\n      for _ in range(2):\n        list_, m = body(list_, m)\n\n      s1 = list_ops.tensor_list_stack(list_, element_dtype=dtypes.float32)\n      np_s1 = np.array([[1, 2, 3], [1, 2, 3]], dtype=np.float32)\n      self.assertAllEqual(self.evaluate(s1), np_s1)\n\n  def testSkipEagerStackInLoopSwitchDtype(self):\n    with self.cached_session():\n      t1 = list_ops.empty_tensor_list(\n          element_shape=constant_op.constant([], dtype=dtypes.int32),\n          element_dtype=dtypes.int32)\n      i = constant_op.constant(0, dtype=dtypes.float32)\n      m = constant_op.constant([1, 2, 3], dtype=dtypes.float32)\n\n      def body(i, m, t1):\n        t1 = control_flow_ops.cond(\n            math_ops.equal(list_ops.tensor_list_length(t1), 0),\n            lambda: list_ops.empty_tensor_list(m.shape, m.dtype), lambda: t1)\n\n        t1 = list_ops.tensor_list_push_back(t1, m * i)\n        i += 1.0\n        return i, m, t1\n\n      i, m, t1 = control_flow_ops.while_loop(\n          lambda i, m, t1: math_ops.less(i, 4), body, [i, m, t1])\n      s1 = list_ops.tensor_list_stack(t1, element_dtype=dtypes.float32)\n      np_s1 = np.vstack([np.arange(1, 4) * i for i in range(4)])\n      self.assertAllEqual(self.evaluate(s1), np_s1)\n\n  def testSerialize(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        t = constant_op.constant([[1.0], [2.0]])\n        l = list_ops.tensor_list_from_tensor(t, element_shape=[1])\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        l_ps, e = list_ops.tensor_list_pop_back(\n            l_ps, element_dtype=dtypes.float32)\n      with ops.device(\"/job:worker\"):\n        worker_e = array_ops.identity(e)\n      self.assertAllEqual(self.evaluate(worker_e), [2.0])\n\n  def testSerializeListWithInvalidTensors(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        l = list_ops.tensor_list_reserve(\n            element_dtype=dtypes.float32, element_shape=[], num_elements=2)\n        l = list_ops.tensor_list_set_item(l, 0, 1.)\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        l_ps = list_ops.tensor_list_set_item(l_ps, 1, 2.)\n        t = list_ops.tensor_list_stack(l_ps, element_dtype=dtypes.float32)\n      with ops.device(\"/job:worker\"):\n        worker_t = array_ops.identity(t)\n      self.assertAllEqual(self.evaluate(worker_t), [1.0, 2.0])\n\n  def testSerializeListWithUnknownRank(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        t = constant_op.constant([[1.0], [2.0]])\n        l = list_ops.tensor_list_from_tensor(t, element_shape=None)\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        element_shape = list_ops.tensor_list_element_shape(\n            l_ps, shape_type=dtypes.int32)\n      with ops.device(\"/job:worker\"):\n        element_shape = array_ops.identity(element_shape)\n      self.assertEqual(self.evaluate(element_shape), -1)\n\n  def testSerializeListWithMaxNumElements(self):\n    worker = test_util.create_local_cluster(num_workers=1, num_ps=1)[0][0]\n    with ops.Graph().as_default(), session.Session(target=worker.target):\n      with ops.device(\"/job:worker\"):\n        l = list_ops.empty_tensor_list(\n            element_shape=None,\n            element_dtype=dtypes.float32,\n            max_num_elements=2)\n        l = list_ops.tensor_list_push_back(l, 1.)\n      with ops.device(\"/job:ps\"):\n        l_ps = array_ops.identity(l)\n        l_ps = list_ops.tensor_list_push_back(l_ps, 2.)\n      with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                  \"Tried to push item into a full list\"):\n        with ops.device(\"/job:worker\"):\n          l_worker = array_ops.identity(l_ps)\n          l_worker = list_ops.tensor_list_push_back(l_worker, 3.0)\n          self.evaluate(l_worker)\n\n  def testPushPopGradients(self):\n    with backprop.GradientTape() as tape:\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=[])\n      c = constant_op.constant(1.0)\n      tape.watch(c)\n      l = list_ops.tensor_list_push_back(l, c)\n      l, e = list_ops.tensor_list_pop_back(l, element_dtype=dtypes.float32)\n      e = 2 * e\n    self.assertAllEqual(self.evaluate(tape.gradient(e, [c])[0]), 2.0)\n\n  def testStackFromTensorGradients(self):\n    with backprop.GradientTape() as tape:\n      c = constant_op.constant([1.0, 2.0])\n      tape.watch(c)\n      l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n      c2 = list_ops.tensor_list_stack(\n          l, element_dtype=dtypes.float32, num_elements=2)\n      result = c2 * 2.0\n    grad = tape.gradient(result, [c])[0]\n    self.assertAllEqual(self.evaluate(grad), [2.0, 2.0])\n\n  def testGetSetGradients(self):\n    with backprop.GradientTape() as tape:\n      c = constant_op.constant([1.0, 2.0])\n      tape.watch(c)\n      l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n      c2 = constant_op.constant(3.0)\n      tape.watch(c2)\n      l = list_ops.tensor_list_set_item(l, 0, c2)\n      e = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      ee = list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)\n      y = e * e + ee * ee\n    grad_c, grad_c2 = tape.gradient(y, [c, c2])\n    self.assertAllEqual(self.evaluate(grad_c), [0.0, 4.0])\n    self.assertAllEqual(self.evaluate(grad_c2), 6.0)\n\n  @test_util.run_deprecated_v1\n  def testSetOutOfBounds(self):\n    c = constant_op.constant([1.0, 2.0])\n    l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    with self.assertRaises(errors.InvalidArgumentError):\n      self.evaluate(list_ops.tensor_list_set_item(l, 20, 3.0))\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSetItemWithMismatchedShapeFails(self):\n    with self.cached_session() as sess:\n      ph = array_ops.placeholder(dtypes.float32)\n      c = constant_op.constant([1.0, 2.0])\n      l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n      # Set a placeholder with unknown shape to satisfy the shape inference\n      # at graph building time.\n      l = list_ops.tensor_list_set_item(l, 0, ph)\n      l_0 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n      with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                  \"incompatible shape\"):\n        sess.run(l_0, {ph: [3.0]})\n\n  def testResourceVariableScatterGather(self):\n    c = constant_op.constant([1.0, 2.0], dtype=dtypes.float32)\n    l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    v = vs.get_variable(\"var\", initializer=[l] * 10, use_resource=True)\n    v_r_0_stacked = list_ops.tensor_list_stack(v[0], dtypes.float32)\n    self.evaluate(v.initializer)\n    self.assertAllEqual([1.0, 2.0], self.evaluate(v_r_0_stacked))\n    v_r_sparse_stacked = list_ops.tensor_list_stack(\n        v.sparse_read(0), dtypes.float32)\n    self.assertAllEqual([1.0, 2.0], self.evaluate(v_r_sparse_stacked))\n    l_new_0 = list_ops.tensor_list_from_tensor([3.0, 4.0], element_shape=[])\n    l_new_1 = list_ops.tensor_list_from_tensor([5.0, 6.0], element_shape=[])\n    updated_v = state_ops.scatter_update(v, [3, 5], [l_new_0, l_new_1])\n    updated_v_elems = array_ops.unstack(updated_v)\n    updated_v_stacked = [\n        list_ops.tensor_list_stack(el, dtypes.float32) for el in updated_v_elems\n    ]\n    expected = ([[1.0, 2.0]] * 3 + [[3.0, 4.0], [1.0, 2.0], [5.0, 6.0]] +\n                [[1.0, 2.0]] * 4)\n    self.assertAllEqual(self.evaluate(updated_v_stacked), expected)\n\n  def testResourceVariableScatterGatherInt64(self):\n    c = constant_op.constant([1, 2], dtype=dtypes.int64)\n    l = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    v = vs.get_variable(\"var\", initializer=[l] * 10, use_resource=True)\n    v_r_0_stacked = list_ops.tensor_list_stack(v[0], dtypes.int64)\n    self.evaluate(v.initializer)\n    self.assertAllEqual([1, 2], self.evaluate(v_r_0_stacked))\n    v_r_sparse_stacked = list_ops.tensor_list_stack(\n        v.sparse_read(0), dtypes.int64)\n    self.assertAllEqual([1, 2], self.evaluate(v_r_sparse_stacked))\n    c34 = constant_op.constant([3, 4], dtype=dtypes.int64)\n    l_new_0 = list_ops.tensor_list_from_tensor(c34, element_shape=[])\n    c56 = constant_op.constant([5, 6], dtype=dtypes.int64)\n    l_new_1 = list_ops.tensor_list_from_tensor(c56, element_shape=[])\n    updated_v = state_ops.scatter_update(v, [3, 5], [l_new_0, l_new_1])\n    updated_v_elems = array_ops.unstack(updated_v)\n    updated_v_stacked = [\n        list_ops.tensor_list_stack(el, dtypes.int64) for el in updated_v_elems\n    ]\n    expected = ([[1, 2]] * 3 + [[3, 4], [1, 2], [5, 6]] +\n                [[1, 2]] * 4)\n    self.assertAllEqual(self.evaluate(updated_v_stacked), expected)\n\n  @test_util.run_deprecated_v1\n  def testConcat(self):\n    c = constant_op.constant([1.0, 2.0], dtype=dtypes.float32)\n    l0 = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    l1 = list_ops.tensor_list_from_tensor([-1.0], element_shape=[])\n    l_batch_0 = array_ops.stack([l0, l1])\n    l_batch_1 = array_ops.stack([l1, l0])\n\n    l_concat_01 = list_ops.tensor_list_concat_lists(\n        l_batch_0, l_batch_1, element_dtype=dtypes.float32)\n    l_concat_10 = list_ops.tensor_list_concat_lists(\n        l_batch_1, l_batch_0, element_dtype=dtypes.float32)\n    l_concat_00 = list_ops.tensor_list_concat_lists(\n        l_batch_0, l_batch_0, element_dtype=dtypes.float32)\n    l_concat_11 = list_ops.tensor_list_concat_lists(\n        l_batch_1, l_batch_1, element_dtype=dtypes.float32)\n\n    expected_0 = [[1.0, 2.0], [-1.0]]\n    expected_1 = [[-1.0], [1.0, 2.0]]\n    expected_00 = [[1.0, 2.0, 1.0, 2.0], [-1.0, -1.0]]\n    expected_01 = [[1.0, 2.0, -1.0], [-1.0, 1.0, 2.0]]\n    expected_10 = [[-1.0, 1.0, 2.0], [1.0, 2.0, -1.0]]\n    expected_11 = [[-1.0, -1.0], [1.0, 2.0, 1.0, 2.0]]\n\n    for i, (concat, expected) in enumerate(zip(\n        [l_batch_0, l_batch_1,\n         l_concat_00, l_concat_01, l_concat_10, l_concat_11],\n        [expected_0, expected_1,\n         expected_00, expected_01, expected_10, expected_11])):\n      splitted = array_ops.unstack(concat)\n      splitted_stacked_ret = self.evaluate(\n          (list_ops.tensor_list_stack(splitted[0], dtypes.float32),\n           list_ops.tensor_list_stack(splitted[1], dtypes.float32)))\n      print(\"Test concat %d: %s, %s, %s, %s\"\n            % (i, expected[0], splitted_stacked_ret[0],\n               expected[1], splitted_stacked_ret[1]))\n      self.assertAllClose(expected[0], splitted_stacked_ret[0])\n      self.assertAllClose(expected[1], splitted_stacked_ret[1])\n\n    # Concatenating mismatched shapes fails.\n    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n      self.evaluate(\n          list_ops.tensor_list_concat_lists(\n              l_batch_0,\n              list_ops.empty_tensor_list([], dtypes.float32),\n              element_dtype=dtypes.float32))\n\n    if context.executing_eagerly():\n      expected_error = (\n          errors.InvalidArgumentError,\n          \"element shapes are not identical at index 0\")\n    else:\n      expected_error = (ValueError, \"Shapes must be equal rank\")\n    with self.assertRaisesRegex(*expected_error):\n      l_batch_of_vec_tls = array_ops.stack(\n          [list_ops.tensor_list_from_tensor([[1.0]], element_shape=[1])] * 2)\n      self.evaluate(\n          list_ops.tensor_list_concat_lists(l_batch_0, l_batch_of_vec_tls,\n                                            element_dtype=dtypes.float32))\n\n    if context.executing_eagerly():\n      expected_error = (errors.InvalidArgumentError,\n                        r\"input_b\\[0\\].dtype != element_dtype.\")\n    else:\n      expected_error = (ValueError, \"input_b.type != element_dtype\")\n    with self.assertRaisesRegex(*expected_error):\n      l_batch_of_int_tls = array_ops.stack(\n          [list_ops.tensor_list_from_tensor([1], element_shape=[])] * 2)\n      self.evaluate(\n          list_ops.tensor_list_concat_lists(l_batch_0, l_batch_of_int_tls,\n                                            element_dtype=dtypes.float32))\n\n  @test_util.run_deprecated_v1\n  def testPushBackBatch(self):\n    c = constant_op.constant([1.0, 2.0], dtype=dtypes.float32)\n    l0 = list_ops.tensor_list_from_tensor(c, element_shape=[])\n    l1 = list_ops.tensor_list_from_tensor([-1.0], element_shape=[])\n    l_batch = array_ops.stack([l0, l1])\n    l_push = list_ops.tensor_list_push_back_batch(l_batch, [3.0, 4.0])\n    l_unstack = array_ops.unstack(l_push)\n    l0_ret = list_ops.tensor_list_stack(l_unstack[0], dtypes.float32)\n    l1_ret = list_ops.tensor_list_stack(l_unstack[1], dtypes.float32)\n    self.assertAllClose([1.0, 2.0, 3.0], self.evaluate(l0_ret))\n    self.assertAllClose([-1.0, 4.0], self.evaluate(l1_ret))\n\n    with ops.control_dependencies([l_push]):\n      l_unstack_orig = array_ops.unstack(l_batch)\n      l0_orig_ret = list_ops.tensor_list_stack(l_unstack_orig[0],\n                                               dtypes.float32)\n      l1_orig_ret = list_ops.tensor_list_stack(l_unstack_orig[1],\n                                               dtypes.float32)\n\n    # Check that without aliasing, push_back_batch still works; and\n    # that it doesn't modify the input.\n    l0_r_v, l1_r_v, l0_orig_v, l1_orig_v = self.evaluate(\n        (l0_ret, l1_ret, l0_orig_ret, l1_orig_ret))\n    self.assertAllClose([1.0, 2.0, 3.0], l0_r_v)\n    self.assertAllClose([-1.0, 4.0], l1_r_v)\n    self.assertAllClose([1.0, 2.0], l0_orig_v)\n    self.assertAllClose([-1.0], l1_orig_v)\n\n    # Pushing back mismatched shapes fails.\n    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n      self.evaluate(list_ops.tensor_list_push_back_batch(l_batch, []))\n\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"incompatible shape to a list at index 0\"):\n      self.evaluate(\n          list_ops.tensor_list_push_back_batch(l_batch, [[3.0], [4.0]]))\n\n    if context.executing_eagerly():\n      expected_error = (errors.InvalidArgumentError, \"Invalid data type\")\n    else:\n      expected_error = (ValueError, \"wrong element dtype\")\n    with self.assertRaisesRegex(*expected_error):\n      self.evaluate(list_ops.tensor_list_push_back_batch(l_batch, [3, 4]))\n\n  def testZerosLike(self):\n    for dtype in (dtypes.uint8, dtypes.uint16, dtypes.int8, dtypes.int16,\n                  dtypes.int32, dtypes.int64, dtypes.float16, dtypes.float32,\n                  dtypes.float64, dtypes.complex64, dtypes.complex128,\n                  dtypes.bool):\n      l_empty = list_ops.empty_tensor_list(\n          element_dtype=dtype, element_shape=[])\n      l_empty_zeros = array_ops.zeros_like(l_empty)\n      t_empty_zeros = list_ops.tensor_list_stack(\n          l_empty_zeros, element_dtype=dtype)\n\n      l_full = list_ops.tensor_list_push_back(l_empty,\n                                              math_ops.cast(0, dtype=dtype))\n      l_full = list_ops.tensor_list_push_back(l_full,\n                                              math_ops.cast(1, dtype=dtype))\n      l_full_zeros = array_ops.zeros_like(l_full)\n      t_full_zeros = list_ops.tensor_list_stack(\n          l_full_zeros, element_dtype=dtype)\n\n      self.assertAllEqual(self.evaluate(t_empty_zeros), [])\n      self.assertAllEqual(\n          self.evaluate(t_full_zeros), np.zeros(\n              (2,), dtype=dtype.as_numpy_dtype))\n\n  def testZerosLikeNested(self):\n    for dtype in (dtypes.uint8, dtypes.uint16, dtypes.int8, dtypes.int16,\n                  dtypes.int32, dtypes.int64, dtypes.float16, dtypes.float32,\n                  dtypes.float64, dtypes.complex64, dtypes.complex128,\n                  dtypes.bool):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.variant, element_shape=[])\n\n      sub_l = list_ops.empty_tensor_list(element_dtype=dtype, element_shape=[])\n      l = list_ops.tensor_list_push_back(l, sub_l)\n      sub_l = list_ops.tensor_list_push_back(sub_l, math_ops.cast(\n          1, dtype=dtype))\n      l = list_ops.tensor_list_push_back(l, sub_l)\n      sub_l = list_ops.tensor_list_push_back(sub_l, math_ops.cast(\n          2, dtype=dtype))\n      l = list_ops.tensor_list_push_back(l, sub_l)\n\n      # l : [[],\n      #      [1],\n      #      [1, 2]]\n      #\n      # l_zeros : [[],\n      #            [0],\n      #            [0, 0]]\n      l_zeros = array_ops.zeros_like(l)\n\n      outputs = []\n      for _ in range(3):\n        l_zeros, out = list_ops.tensor_list_pop_back(\n            l_zeros, element_dtype=dtypes.variant)\n        outputs.append(list_ops.tensor_list_stack(out, element_dtype=dtype))\n\n      # Note: `outputs` contains popped values so the order is reversed.\n      self.assertAllEqual(self.evaluate(outputs[2]), [])\n      self.assertAllEqual(\n          self.evaluate(outputs[1]), np.zeros((1,), dtype=dtype.as_numpy_dtype))\n      self.assertAllEqual(\n          self.evaluate(outputs[0]), np.zeros((2,), dtype=dtype.as_numpy_dtype))\n\n  def testElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    shape = list_ops.tensor_list_element_shape(l, shape_type=dtypes.int32)\n    self.assertEqual(self.evaluate(shape), -1)\n\n  def testZerosLikeUninitialized(self):\n    l0 = list_ops.tensor_list_reserve([], 3, element_dtype=dtypes.float32)\n    l1 = list_ops.tensor_list_set_item(l0, 0, 1.)  # [1., _, _]\n    zeros_1 = array_ops.zeros_like(l1)  # [0., _, _]\n    l2 = list_ops.tensor_list_set_item(l1, 2, 2.)  # [1., _, 2.]\n    zeros_2 = array_ops.zeros_like(l2)  # [0., _, 0.]\n\n    # Gather indices with zeros in `zeros_1`.\n    res_1 = list_ops.tensor_list_gather(\n        zeros_1, [0], element_dtype=dtypes.float32)\n    # Gather indices with zeros in `zeros_2`.\n    res_2 = list_ops.tensor_list_gather(\n        zeros_2, [0, 2], element_dtype=dtypes.float32)\n\n    self.assertAllEqual(self.evaluate(res_1), [0.])\n    self.assertAllEqual(self.evaluate(res_2), [0., 0.])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerTensorListGetItemGradAggregation(self):\n    l = list_ops.tensor_list_reserve(\n        element_shape=[], num_elements=1, element_dtype=dtypes.float32)\n    x = constant_op.constant(1.0)\n    l = list_ops.tensor_list_set_item(l, 0, x)\n    l_read1 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    l_read2 = list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)\n    grad = gradients_impl.gradients([l_read1, l_read2], [x])\n    with self.cached_session() as sess:\n      self.assertSequenceEqual(self.evaluate(grad), [2.])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerBuildElementShape(self):\n    fn = list_ops._build_element_shape\n    # Unknown shape -> -1.\n    self.assertEqual(fn(None), -1)\n    self.assertEqual(fn(tensor_shape.unknown_shape()), -1)\n    # Scalar shape -> [] with type int32.\n    self.assertEqual(fn([]).dtype, dtypes.int32)\n    self.assertEqual(fn(tensor_shape.TensorShape([])).dtype, dtypes.int32)\n    self.assertAllEqual(self.evaluate(fn([])), np.array([], np.int32))\n    self.assertAllEqual(\n        self.evaluate(fn(tensor_shape.TensorShape([]))), np.array([], np.int32))\n    # Tensor -> Tensor\n    shape = constant_op.constant(1)\n    self.assertIs(fn(shape), shape)\n    # Shape with unknown dims -> shape list with -1's.\n    shape = [None, 5]\n    self.assertAllEqual(fn(shape), [-1, 5])\n    self.assertAllEqual(fn(tensor_shape.TensorShape(shape)), [-1, 5])\n    # Shape with unknown dims and tensor dims -> shape list with -1's and tensor\n    # dims.\n    t = array_ops.placeholder(dtypes.int32)\n    shape = [None, 5, t]\n    result = fn(shape)\n    self.assertAllEqual(result[:2], [-1, 5])\n    self.assertIs(result[2], t)\n\n  def testAddN(self):\n    l1 = list_ops.tensor_list_from_tensor([1.0, 2.0], element_shape=[])\n    l2 = list_ops.tensor_list_from_tensor([3.0, 4.0], element_shape=[])\n    l3 = list_ops.tensor_list_from_tensor([5.0, 6.0], element_shape=[])\n    result = math_ops.add_n((l1, l2, l3))\n    result_t = list_ops.tensor_list_stack(result, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(result_t), [9., 12.])\n\n  def testAddNNestedList(self):\n    l1 = list_ops.tensor_list_from_tensor([1.0, 2.0], element_shape=[])\n    l2 = list_ops.tensor_list_from_tensor([3.0, 4.0], element_shape=[])\n    l3 = list_ops.tensor_list_from_tensor([5.0, 6.0], element_shape=[])\n    l4 = list_ops.tensor_list_from_tensor([7.0, 8.0], element_shape=[])\n    a = list_ops.empty_tensor_list(\n        element_dtype=dtypes.variant, element_shape=[])\n    a = list_ops.tensor_list_push_back(a, l1)\n    a = list_ops.tensor_list_push_back(a, l2)\n    b = list_ops.empty_tensor_list(\n        element_dtype=dtypes.variant, element_shape=[])\n    b = list_ops.tensor_list_push_back(b, l3)\n    b = list_ops.tensor_list_push_back(b, l4)\n    result = math_ops.add_n((a, b))\n    result_0 = list_ops.tensor_list_stack(\n        list_ops.tensor_list_get_item(result, 0, element_dtype=dtypes.variant),\n        element_dtype=dtypes.float32)\n    result_1 = list_ops.tensor_list_stack(\n        list_ops.tensor_list_get_item(result, 1, element_dtype=dtypes.variant),\n        element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(result_0), [6., 8.])\n    self.assertAllEqual(self.evaluate(result_1), [10., 12.])\n\n  def testAddTensorListsFailsIfLeadingDimsMismatch(self):\n    l1 = list_ops.tensor_list_reserve(\n        element_shape=[], element_dtype=dtypes.float32, num_elements=2)\n    l2 = list_ops.tensor_list_reserve(\n        element_shape=[], element_dtype=dtypes.float32, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Trying to add two lists of tensors with different lengths\"):\n      l = math_ops.add_n([l1, l2])\n      self.evaluate(list_ops.tensor_list_stack(l, element_dtype=dtypes.float32))\n\n  @test_util.run_v1_only(\"Uses placeholders\")\n  def testSkipEagerAddTensorListsFailsIfElementShapesMismatch(self):\n    with self.cached_session() as sess:\n      # Use placeholders instead of constant values for shapes to prevent TF's\n      # shape inference from catching this early.\n      l1_element_shape = array_ops.placeholder(dtype=dtypes.int32)\n      l2_element_shape = array_ops.placeholder(dtype=dtypes.int32)\n      l1 = list_ops.tensor_list_reserve(\n          element_shape=l1_element_shape,\n          element_dtype=dtypes.float32,\n          num_elements=3)\n      l2 = list_ops.tensor_list_reserve(\n          element_shape=l2_element_shape,\n          element_dtype=dtypes.float32,\n          num_elements=3)\n      l = math_ops.add_n([l1, l2])\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          \"Trying to add two lists of tensors with incompatible element shapes\"\n      ):\n        sess.run(\n            list_ops.tensor_list_stack(l, element_dtype=dtypes.float32), {\n                l1_element_shape: [],\n                l2_element_shape: [2]\n            })\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerConcatShapeInference(self):\n\n    def BuildTensor(element_shape):\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=element_shape)\n      return list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n\n    self.assertIsNone(BuildTensor(None).shape.rank)\n    self.assertAllEqual(BuildTensor([None, 2, 3]).shape.as_list(), [None, 2, 3])\n    self.assertAllEqual(\n        BuildTensor([None, 2, None]).shape.as_list(), [None, 2, None])\n    self.assertAllEqual(BuildTensor([1, 2, 3]).shape.as_list(), [None, 2, 3])\n\n  def testConcatWithFullyDefinedElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[2, 2])\n    l = list_ops.tensor_list_push_back(l, [[0., 1.], [2., 3.]])\n    l = list_ops.tensor_list_push_back(l, [[4., 5.], [6., 7.]])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(\n        self.evaluate(t), [[0., 1.], [2., 3.], [4., 5.], [6., 7.]])\n\n  def testConcatWithNonFullyDefinedElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[None, 2])\n    l = list_ops.tensor_list_push_back(l, [[0., 1.]])\n    l = list_ops.tensor_list_push_back(l, [[2., 3.], [4., 5.]])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t), [[0., 1.], [2., 3.], [4., 5.]])\n\n  def testConcatWithMismatchingTensorShapesFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    l = list_ops.tensor_list_push_back(l, [[0., 1.]])\n    l = list_ops.tensor_list_push_back(l, [[2.], [4.]])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, r\"Incompatible shapes during merge: \"\n        r\"\\[2\\] vs. \\[1\\]\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatEmptyListWithFullyDefinedElementShape(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[5, 2])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t).shape, (0, 2))\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[None, 2])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(self.evaluate(t).shape, (0, 2))\n\n  def testConcatEmptyListWithUnknownElementShapeFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"All except the first dimension must be fully\"\n        \" defined when concating an empty tensor list\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatEmptyListWithPartiallyDefinedElementShapeFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=[2, None])\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"All except the first dimension must be fully\"\n        \" defined when concating an empty tensor list\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatListWithScalarElementShapeFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32,\n        element_shape=tensor_shape.TensorShape([]))\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"Concat requires elements to be at least vectors, \"\n        \"found scalars instead\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatListWithScalarElementsFails(self):\n    l = list_ops.empty_tensor_list(\n        element_dtype=dtypes.float32, element_shape=None)\n    l1 = list_ops.tensor_list_push_back(l, 1.)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, \"Concat saw a scalar shape at index 0\"\n        \" but requires at least vectors\"):\n      t = list_ops.tensor_list_concat(l1, element_dtype=dtypes.float32)\n      self.evaluate(t)\n    l1 = list_ops.tensor_list_push_back(l, [1.])\n    l1 = list_ops.tensor_list_push_back(l1, 2.)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError, \"Concat saw a scalar shape at index 1\"\n        \" but requires at least vectors\"):\n      t = list_ops.tensor_list_concat(l1, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatWithUninitializedTensorsUseListElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[2, 3], num_elements=3)\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual(np.zeros((6, 3)), t)\n\n  def testConcatWithUninitializedTensorsUseProvidedElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t = list_ops.tensor_list_concat(\n        l, element_dtype=dtypes.float32, element_shape=(2, 3))\n    self.assertAllEqual(np.zeros((6, 3)), t)\n\n  def testConcatWithUninitializedTensorsUseProvidedElementShapeAndLengths(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    t, _ = gen_list_ops.tensor_list_concat_v2(\n        l,\n        element_dtype=dtypes.float32,\n        element_shape=list_ops._build_element_shape((None, 3)),\n        leading_dims=[2, 3, 5])\n    self.assertAllEqual(np.zeros((10, 3)), t)\n    l = list_ops.tensor_list_set_item(l, 1, [[2., 3.], [4., 5.], [6., 7.]])\n    t, _ = gen_list_ops.tensor_list_concat_v2(\n        l,\n        element_dtype=dtypes.float32,\n        element_shape=list_ops._build_element_shape((None, 2)),\n        leading_dims=[2, 3, 4])\n    self.assertAllEqual([[0., 0.], [0., 0.], [2., 3.], [4., 5.], [6., 7.],\n                         [0., 0.], [0., 0.], [0., 0.], [0., 0.]], t)\n\n  def testConcatWithUninitializedTensorsInferShapeFromElements(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    l = list_ops.tensor_list_set_item(l, 1, [[2., 3.], [4., 5.], [6., 7.]])\n    t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n    self.assertAllEqual([[0., 0.], [0., 0.], [0., 0.], [2., 3.], [4., 5.],\n                         [6., 7.], [0., 0.], [0., 0.], [0., 0.]], t)\n\n  def testConcatWithUninitializedTensorsFailsIfNoElementShape(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=None, num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Trying to concat list with only uninitialized tensors \"\n        r\"but element_shape_except_first_dim is not fully defined\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testConcatWithUninitializedTensorsFailsIfNoInputLengths(self):\n    l = list_ops.tensor_list_reserve(\n        element_dtype=dtypes.float32, element_shape=[None, 3], num_elements=3)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"List contains uninitialized tensor at index 0\"\n        r\" but leading_dims has only 0 elements.\"):\n      t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)\n      self.evaluate(t)\n\n  def testEmptyTensorListInvalidShape(self):\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                r\"Shape must be at most rank 1 but is rank 2\"):\n      t = gen_list_ops.EmptyTensorList(\n          element_shape=array_ops.ones(dtype=dtypes.int32, shape=[1, 0]),\n          max_num_elements=constant_op.constant(1),\n          element_dtype=dtypes.int32)\n      self.evaluate(t)\n\n  def testEvenSplit(self):\n\n    def RunTest(input_tensor, lengths, expected_stacked_output):\n      l = list_ops.tensor_list_split(\n          input_tensor, element_shape=None, lengths=lengths)\n      self.assertAllEqual(\n          list_ops.tensor_list_stack(l, element_dtype=dtypes.float32),\n          expected_stacked_output)\n\n    RunTest([1., 2., 3.], [1, 1, 1], [[1.], [2.], [3.]])\n    RunTest([1., 2., 3., 4.], [2, 2], [[1., 2.], [3., 4.]])\n    RunTest([[1., 2.], [3., 4.]], [1, 1], [[[1., 2.]], [[3., 4.]]])\n\n  def testUnevenSplit(self):\n    l = list_ops.tensor_list_split([1., 2., 3., 4., 5],\n                                   element_shape=None,\n                                   lengths=[3, 2])\n    self.assertAllEqual(list_ops.tensor_list_length(l), 2)\n    self.assertAllEqual(\n        list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32),\n        [1., 2., 3.])\n    self.assertAllEqual(\n        list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32),\n        [4., 5.])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithInvalidTensorShapeFails(self):\n    with self.cached_session():\n      tensor = array_ops.placeholder(dtype=dtypes.float32)\n      l = list_ops.tensor_list_split(tensor, element_shape=None, lengths=[1])\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"Tensor must be at least a vector, but saw shape: \\[\\]\"):\n        l.eval({tensor: 1})\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithInvalidLengthsShapeFails(self):\n    with self.cached_session():\n      lengths = array_ops.placeholder(dtype=dtypes.int64)\n      l = list_ops.tensor_list_split([1., 2.],\n                                     element_shape=None,\n                                     lengths=lengths)\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"Expected lengths to be a vector, received shape: \\[\\]\"):\n        l.eval({lengths: 1})\n\n  def testSplitWithInvalidLengthsFails(self):\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                r\"Invalid value in lengths: -1\"):\n      l = list_ops.tensor_list_split([1., 2.],\n                                     element_shape=None,\n                                     lengths=[1, -1])\n      self.evaluate(l)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Attempting to slice \\[0, 3\\] from tensor with length 2\"):\n      l = list_ops.tensor_list_split([1., 2.], element_shape=None, lengths=[3])\n      self.evaluate(l)\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Unused values in tensor. Length of tensor: 2 Values used: 1\"):\n      l = list_ops.tensor_list_split([1., 2.], element_shape=None, lengths=[1])\n      self.evaluate(l)\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithScalarElementShapeFails(self):\n    with self.assertRaisesRegex(ValueError,\n                                r\"Shapes must be equal rank, but are 1 and 0\"):\n      l = list_ops.tensor_list_split([1., 2.], element_shape=[], lengths=[1, 1])\n    with self.cached_session():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"TensorListSplit requires element_shape to be at least of rank 1, \"\n          r\"but saw: \\[\\]\"):\n        element_shape = array_ops.placeholder(dtype=dtypes.int32)\n        l = list_ops.tensor_list_split([1., 2.],\n                                       element_shape=element_shape,\n                                       lengths=[1, 1])\n        l.eval({element_shape: []})\n\n  def testEagerOnlySplitWithScalarElementShapeFails(self):\n    if context.executing_eagerly():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"TensorListSplit requires element_shape to be at least of rank 1, \"\n          r\"but saw: \\[\\]\"):\n        list_ops.tensor_list_split([1., 2.], element_shape=[], lengths=[1, 1])\n\n  @test_util.run_deprecated_v1\n  def testSkipEagerSplitWithIncompatibleTensorShapeAndElementShapeFails(self):\n    with self.assertRaisesRegex(ValueError,\n                                r\"Shapes must be equal rank, but are 2 and 1\"):\n      l = list_ops.tensor_list_split([[1.], [2.]],\n                                     element_shape=[1],\n                                     lengths=[1, 1])\n\n    with self.cached_session():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"tensor shape \\[2,1\\] is not compatible with element_shape \\[1\\]\"):\n        element_shape = array_ops.placeholder(dtype=dtypes.int32)\n        l = list_ops.tensor_list_split([[1.], [2.]],\n                                       element_shape=element_shape,\n                                       lengths=[1, 1])\n        l.eval({element_shape: [1]})\n\n  def testEagerOnlySplitWithIncompatibleTensorShapeAndElementShapeFails(self):\n    if context.executing_eagerly():\n      with self.assertRaisesRegex(\n          errors.InvalidArgumentError,\n          r\"tensor shape \\[2,1\\] is not compatible with element_shape \\[1\\]\"):\n        list_ops.tensor_list_split([[1.], [2.]],\n                                   element_shape=[1],\n                                   lengths=[1, 1])\n\n  def testResizeGrow(self):\n    l = list_ops.tensor_list_from_tensor([1., 2.], element_shape=[])\n    l = list_ops.tensor_list_resize(l, 4)\n    self.assertEqual(self.evaluate(list_ops.tensor_list_length(l)), 4)\n    self.assertEqual(\n        self.evaluate(\n            list_ops.tensor_list_get_item(l, 0, element_dtype=dtypes.float32)),\n        1.)\n    self.assertEqual(\n        self.evaluate(\n            list_ops.tensor_list_get_item(l, 1, element_dtype=dtypes.float32)),\n        2.)\n\n  def testResizeShrink(self):\n    l = list_ops.tensor_list_from_tensor([1., 2., 3.], element_shape=[])\n    l = list_ops.tensor_list_resize(l, 2)\n    self.assertEqual(self.evaluate(list_ops.tensor_list_length(l)), 2)\n    self.assertAllEqual(\n        self.evaluate(\n            list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)),\n        [1., 2.])\n\n  def testResizeWithInvalidSizeFails(self):\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        \"TensorListSlice expects size to be non-negative\"):\n      l = list_ops.tensor_list_from_tensor([1., 2., 3.], element_shape=[])\n      l = list_ops.tensor_list_resize(l, -1)\n      self.evaluate(l)\n\n  @test_util.run_deprecated_v1\n  @test_util.enable_control_flow_v2\n  def testSkipEagerResizeGrad(self):\n    t = constant_op.constant([1., 2., 3.])\n    l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n    l = list_ops.tensor_list_set_item(\n        l, 3, 4., resize_if_index_out_of_bounds=True)\n    t1 = list_ops.tensor_list_stack(l, element_dtype=dtypes.float32)\n    grad = gradients_impl.gradients(t1, t)[0]\n    self.assertAllEqual(self.evaluate(grad), [1., 1., 1.])\n\n  def testHandleDataAcrossFunctionCall(self):\n\n    @def_function.function\n    def func():\n      t = constant_op.constant([1., 2., 3.])\n      l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n      handle_data = resource_variable_ops.get_eager_safe_handle_data(l)\n      self.assertTrue(handle_data.is_set)\n      self.assertEqual(handle_data.shape_and_type[0].type.type_id,\n                       full_type_pb2.TFT_ARRAY)\n      return l\n\n    tensor_list = func()\n    handle_data = resource_variable_ops.get_eager_safe_handle_data(tensor_list)\n    self.assertTrue(handle_data.is_set)\n    self.assertEqual(dtypes.float32, handle_data.shape_and_type[0].dtype)\n    self.assertEqual(handle_data.shape_and_type[0].type.type_id,\n                     full_type_pb2.TFT_ARRAY)\n    element = list_ops.tensor_list_get_item(\n        tensor_list, 0, element_dtype=dtypes.float32)\n    self.assertAllEqual(element.shape.as_list(), [])\n\n  @test_util.run_gpu_only\n  def testNestedListDevicetoDeviceCopy(self):\n    if context.num_gpus() < 2:\n      self.skipTest(\"Need at least 2 GPUs for this test, found %d\" %\n                    context.num_gpus())\n    with ops.device(\"gpu:0\"):\n      t = constant_op.constant([1.0, 2.0, 3.0])\n      inner_l = list_ops.tensor_list_from_tensor(t, element_shape=[])\n      outer_l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.variant, element_shape=[])\n      outer_l = list_ops.tensor_list_push_back(outer_l, inner_l)\n\n    # Stress test.\n    for _ in range(1024):\n      with ops.device(\"gpu:1\"):\n        outer_l = array_ops.identity(outer_l)\n      with ops.device(\"gpu:0\"):\n        outer_l = array_ops.identity(outer_l)\n\n    with ops.device(\"gpu:1\"):\n      _, inner_l = list_ops.tensor_list_pop_back(\n          outer_l, element_dtype=dtypes.variant)\n      t = list_ops.tensor_list_stack(inner_l, element_dtype=dtypes.float32)\n      self.assertAllEqual(t, [1.0, 2.0, 3.0])\n\n  def testTensorListStrings(self):\n    @def_function.function\n    def f():\n      return map_fn.map_fn(string_ops.string_upper,\n                           constant_op.constant([\"a\", \"b\", \"c\"]))\n\n    self.assertAllEqual(f(), [b\"A\", b\"B\", b\"C\"])\n\n  def testTensorListStringsNoInline(self):\n    # Generator function output type is a variant with a host-only underlying\n    # data type. \"ColocationGraph::AddHostOnlyDataTypesConstraints\" needs to\n    # have \"deep op inspection\" to be able to correctly place the while loop\n    # generated from map_fn.\n    self.skipTest(\"b/150742232\")\n\n    @function.defun_with_attributes(attributes={\"_noinline\": True})\n    def generator():\n      c = constant_op.constant([\"a\", \"b\", \"c\"])\n      return list_ops.tensor_list_from_tensor(c, element_shape=[])\n\n    @def_function.function\n    def f():\n      l = generator()\n\n      def upper(i):\n        e = list_ops.tensor_list_get_item(l, i, element_dtype=dtypes.string)\n        return string_ops.string_upper(e)\n\n      return map_fn.map_fn(\n          upper, constant_op.constant([0, 1, 2]), dtype=dtypes.string)\n\n    self.assertAllEqual(f(), [b\"A\", b\"B\", b\"C\"])\n\n  def testPopBackGrad(self):\n    # https://github.com/tensorflow/tensorflow/issues/37230\n\n    @def_function.function\n    def g(x):\n      x_prod = constant_op.constant([1.])\n      for unused_i in math_ops.range(3):\n        x_prod = x_prod * x\n      return x_prod\n\n    x = constant_op.constant(1.)\n    with backprop.GradientTape() as t:\n      t.watch(x)\n      with backprop.GradientTape() as tt:\n        tt.watch(x)\n        loss = g(x)\n      jac = tt.gradient(loss, x)\n    hess = t.gradient(jac, x)\n    self.assertAllEqual(hess, 6.)\n\n  def testTensorListElementShapeShapeInference(self):\n\n    @def_function.function\n    def f():\n      l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.float32, element_shape=None)\n      l_element_shape = list_ops.tensor_list_element_shape(l, dtypes.int32)\n      self.assertIsNone(l_element_shape.shape.rank)\n      shape_l = list_ops.empty_tensor_list(\n          element_dtype=dtypes.int32, element_shape=l_element_shape.shape)\n      shape_l = list_ops.tensor_list_push_back(shape_l, l_element_shape)\n      return list_ops.tensor_list_pop_back(shape_l, dtypes.int32)[1]\n\n    self.assertAllEqual(f(), -1)\n\n  def testElementShapeArgOfTensorListFromTensor(self):\n\n    @def_function.function\n    def f():\n      t = array_ops.ones([3, 3])\n      l = list_ops.tensor_list_from_tensor(t, element_shape=[-1])\n      l = list_ops.tensor_list_push_back(l, array_ops.ones([4]))\n      read_val = list_ops.tensor_list_get_item(\n          l, 3, element_dtype=dtypes.float32)\n      self.assertAllEqual(read_val.shape.as_list(), [None])\n      return read_val\n\n    self.assertAllEqual(f(), [1.0, 1.0, 1.0, 1.0])\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/list_kernels.h", "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"], "buggy_code_start_loc": [897, 482], "buggy_code_end_loc": [897, 482], "fixing_code_start_loc": [898, 483], "fixing_code_end_loc": [903, 507], "type": "CWE-617", "message": "TensorFlow is an open source platform for machine learning. When `TensorListScatter` and `TensorListScatterV2` receive an `element_shape` of a rank greater than one, they give a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit bb03fdf4aae944ab2e4b35c7daa051068a8b7f61. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-35991", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-16T23:15:10.100", "lastModified": "2022-09-20T14:50:49.857", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. When `TensorListScatter` and `TensorListScatterV2` receive an `element_shape` of a rank greater than one, they give a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit bb03fdf4aae944ab2e4b35c7daa051068a8b7f61. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. Cuando \"TensorListScatter\" y \"TensorListScatterV2\" reciben un \"element_shape\" de rango superior a uno, dan un fallo de \"CHECK\" que puede desencadenar un ataque de denegaci\u00f3n de servicio. Hemos parcheado el problema en el commit bb03fdf4aae944ab2e4b35c7daa051068a8b7f61 de GitHub. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.10.0. Tambi\u00e9n seleccionaremos este compromiso en TensorFlow versi\u00f3n 2.9.1, TensorFlow versi\u00f3n 2.8.1, y TensorFlow versi\u00f3n 2.7.2, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango admitido. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-617"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.2", "matchCriteriaId": "C6622D95-1C86-45C5-AB55-E6EEEA0996DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.8.0", "versionEndExcluding": "2.8.1", "matchCriteriaId": "0F9D273D-02DC-441E-AA91-EAC8DEAA4B44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.0", "versionEndExcluding": "2.9.1", "matchCriteriaId": "FE4F8A81-6CC2-4F7F-9602-C170FDD926E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc0:*:*:*:*:*:*", "matchCriteriaId": "1DBFBCE2-0A01-4575-BE45-6775ABFB8B28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc1:*:*:*:*:*:*", "matchCriteriaId": "89806CF9-E423-4CA6-A01A-8175C260CB24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc2:*:*:*:*:*:*", "matchCriteriaId": "F2B80690-A257-4E16-BD27-9AE045BC56ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc3:*:*:*:*:*:*", "matchCriteriaId": "F335F9A4-5AB8-4E53-BC18-E01F7C653E5E"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/bb03fdf4aae944ab2e4b35c7daa051068a8b7f61", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/bb03fdf4aae944ab2e4b35c7daa051068a8b7f61"}}