{"buggy_code": ["/*\n * client_example_control.c\n *\n * How to control a device ... intended to be used with server_example_control\n */\n\n#include \"iec61850_client.h\"\n#include \"hal_thread.h\"\n\n#include <stdlib.h>\n#include <stdio.h>\n\nstatic void commandTerminationHandler(void *parameter, ControlObjectClient connection)\n{\n\n\n    LastApplError lastApplError = ControlObjectClient_getLastApplError(connection);\n\n    /* if lastApplError.error != 0 this indicates a CommandTermination- */\n    if (lastApplError.error != 0) {\n        printf(\"Received CommandTermination-.\\n\");\n        printf(\" LastApplError: %i\\n\", lastApplError.error);\n        printf(\"      addCause: %i\\n\", lastApplError.addCause);\n    }\n    else\n        printf(\"Received CommandTermination+.\\n\");\n}\n\nint main(int argc, char** argv) {\n\n    char* hostname;\n    int tcpPort = 102;\n\n    if (argc > 1)\n        hostname = argv[1];\n    else\n        hostname = \"localhost\";\n\n    if (argc > 2)\n        tcpPort = atoi(argv[2]);\n\n    IedClientError error;\n\n    IedConnection con = IedConnection_create();\n\n    IedConnection_connect(con, &error, hostname, tcpPort);\n\n    if (error == IED_ERROR_OK) {\n\n\n        /************************\n         * Direct control\n         ***********************/\n\n        ControlObjectClient control\n            = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO1\", con);\n\n        MmsValue* ctlVal = MmsValue_newBoolean(true);\n\n        ControlObjectClient_setOrigin(control, NULL, 3);\n\n        if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n            printf(\"simpleIOGenericIO/GGIO1.SPCSO1 operated successfully\\n\");\n        }\n        else {\n            printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO1\\n\");\n        }\n\n        MmsValue_delete(ctlVal);\n\n        ControlObjectClient_destroy(control);\n\n        /* Check if status value has changed */\n\n        MmsValue* stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO1.stVal\", IEC61850_FC_ST);\n\n        if (error == IED_ERROR_OK) {\n            bool state = MmsValue_getBoolean(stVal);\n            MmsValue_delete(stVal);\n\n            printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO1.stVal: %i\\n\", state);\n        }\n        else {\n            printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO1 failed!\\n\");\n        }\n\n\n        /************************\n         * Select before operate\n         ***********************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO2\", con);\n\n        if (ControlObjectClient_select(control)) {\n\n            ctlVal = MmsValue_newBoolean(true);\n\n            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                printf(\"simpleIOGenericIO/GGIO1.SPCSO2 operated successfully\\n\");\n            }\n            else {\n                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n            }\n\n            MmsValue_delete(ctlVal);\n        }\n        else {\n            printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n        }\n\n        ControlObjectClient_destroy(control);\n\n\n        /****************************************\n         * Direct control with enhanced security\n         ****************************************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO3\", con);\n\n        ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n\n        ctlVal = MmsValue_newBoolean(true);\n\n        if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n            printf(\"simpleIOGenericIO/GGIO1.SPCSO3 operated successfully\\n\");\n        }\n        else {\n            printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO3\\n\");\n        }\n\n        MmsValue_delete(ctlVal);\n\n        /* Wait for command termination message */\n        Thread_sleep(1000);\n\n        ControlObjectClient_destroy(control);\n\n        /* Check if status value has changed */\n\n       stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO3.stVal\", IEC61850_FC_ST);\n\n        if (error == IED_ERROR_OK) {\n            bool state = MmsValue_getBoolean(stVal);\n\n            printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO3.stVal: %i\\n\", state);\n\n            MmsValue_delete(stVal);\n        }\n        else {\n            printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO3 failed!\\n\");\n        }\n\n        /***********************************************\n         * Select before operate with enhanced security\n         ***********************************************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO4\", con);\n\n        ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n\n        ctlVal = MmsValue_newBoolean(true);\n\n        if (ControlObjectClient_selectWithValue(control, ctlVal)) {\n\n            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                printf(\"simpleIOGenericIO/GGIO1.SPCSO4 operated successfully\\n\");\n            }\n            else {\n                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n            }\n\n        }\n        else {\n            printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n        }\n\n        MmsValue_delete(ctlVal);\n\n        /* Wait for command termination message */\n        Thread_sleep(1000);\n\n        ControlObjectClient_destroy(control);\n\n\n        /*********************************************************************\n         * Direct control with enhanced security (expect CommandTermination-)\n         *********************************************************************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO9\", con);\n\n        ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n\n        ctlVal = MmsValue_newBoolean(true);\n\n        if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n            printf(\"simpleIOGenericIO/GGIO1.SPCSO9 operated successfully\\n\");\n        }\n        else {\n            printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO9\\n\");\n        }\n\n        MmsValue_delete(ctlVal);\n\n        /* Wait for command termination message */\n        Thread_sleep(1000);\n\n        ControlObjectClient_destroy(control);\n\n\n        IedConnection_close(con);\n    }\n    else {\n    \tprintf(\"Connection failed!\\n\");\n    }\n\n    IedConnection_destroy(con);\n    return 0;\n}\n\n\n"], "fixing_code": ["/*\n * client_example_control.c\n *\n * How to control a device ... intended to be used with server_example_control\n */\n\n#include \"iec61850_client.h\"\n#include \"hal_thread.h\"\n\n#include <stdlib.h>\n#include <stdio.h>\n\nstatic void commandTerminationHandler(void *parameter, ControlObjectClient connection)\n{\n\n\n    LastApplError lastApplError = ControlObjectClient_getLastApplError(connection);\n\n    /* if lastApplError.error != 0 this indicates a CommandTermination- */\n    if (lastApplError.error != 0) {\n        printf(\"Received CommandTermination-.\\n\");\n        printf(\" LastApplError: %i\\n\", lastApplError.error);\n        printf(\"      addCause: %i\\n\", lastApplError.addCause);\n    }\n    else\n        printf(\"Received CommandTermination+.\\n\");\n}\n\nint main(int argc, char** argv) {\n\n    char* hostname;\n    int tcpPort = 102;\n\n    if (argc > 1)\n        hostname = argv[1];\n    else\n        hostname = \"localhost\";\n\n    if (argc > 2)\n        tcpPort = atoi(argv[2]);\n\n    IedClientError error;\n\n    IedConnection con = IedConnection_create();\n\n    IedConnection_connect(con, &error, hostname, tcpPort);\n\n    if (error == IED_ERROR_OK)\n    {\n        MmsValue* ctlVal = NULL;\n        MmsValue* stVal = NULL;\n\n        /************************\n         * Direct control\n         ***********************/\n\n        ControlObjectClient control\n            = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO1\", con);\n\n        if (control)\n        {\n            ctlVal = MmsValue_newBoolean(true);\n\n            ControlObjectClient_setOrigin(control, NULL, 3);\n\n            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                printf(\"simpleIOGenericIO/GGIO1.SPCSO1 operated successfully\\n\");\n            }\n            else {\n                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO1\\n\");\n            }\n\n            MmsValue_delete(ctlVal);\n\n            ControlObjectClient_destroy(control);\n\n            /* Check if status value has changed */\n\n            stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO1.stVal\", IEC61850_FC_ST);\n\n            if (error == IED_ERROR_OK) {\n                bool state = MmsValue_getBoolean(stVal);\n                MmsValue_delete(stVal);\n\n                printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO1.stVal: %i\\n\", state);\n            }\n            else {\n                printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO1 failed!\\n\");\n            }\n\n        }\n        else {\n            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO1 not found in server\\n\");\n        }\n\n        /************************\n         * Select before operate\n         ***********************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO2\", con);\n\n        if (control)\n        {\n            if (ControlObjectClient_select(control)) {\n\n                ctlVal = MmsValue_newBoolean(true);\n\n                if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                    printf(\"simpleIOGenericIO/GGIO1.SPCSO2 operated successfully\\n\");\n                }\n                else {\n                    printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n                }\n\n                MmsValue_delete(ctlVal);\n            }\n            else {\n                printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n            }\n\n            ControlObjectClient_destroy(control);\n        }\n        else {\n            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO2 not found in server\\n\");\n        }\n\n        /****************************************\n         * Direct control with enhanced security\n         ****************************************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO3\", con);\n\n        if (control)\n        {\n            ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n\n            ctlVal = MmsValue_newBoolean(true);\n\n            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                printf(\"simpleIOGenericIO/GGIO1.SPCSO3 operated successfully\\n\");\n            }\n            else {\n                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO3\\n\");\n            }\n\n            MmsValue_delete(ctlVal);\n\n            /* Wait for command termination message */\n            Thread_sleep(1000);\n\n            ControlObjectClient_destroy(control);\n\n            /* Check if status value has changed */\n\n            stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO3.stVal\", IEC61850_FC_ST);\n\n            if (error == IED_ERROR_OK) {\n                bool state = MmsValue_getBoolean(stVal);\n\n                printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO3.stVal: %i\\n\", state);\n\n                MmsValue_delete(stVal);\n            }\n            else {\n                printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO3 failed!\\n\");\n            }\n        }\n        else {\n            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO3 not found in server\\n\");\n        }\n\n        /***********************************************\n         * Select before operate with enhanced security\n         ***********************************************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO4\", con);\n\n        if (control)\n        {\n            ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n\n            ctlVal = MmsValue_newBoolean(true);\n\n            if (ControlObjectClient_selectWithValue(control, ctlVal)) {\n\n                if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                    printf(\"simpleIOGenericIO/GGIO1.SPCSO4 operated successfully\\n\");\n                }\n                else {\n                    printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n                }\n\n            }\n            else {\n                printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n            }\n\n            MmsValue_delete(ctlVal);\n\n            /* Wait for command termination message */\n            Thread_sleep(1000);\n\n            ControlObjectClient_destroy(control);\n        }\n        else {\n            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO4 not found in server\\n\");\n        }\n\n        /*********************************************************************\n         * Direct control with enhanced security (expect CommandTermination-)\n         *********************************************************************/\n\n        control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO9\", con);\n\n        if (control)\n        {\n            ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n\n            ctlVal = MmsValue_newBoolean(true);\n\n            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n                printf(\"simpleIOGenericIO/GGIO1.SPCSO9 operated successfully\\n\");\n            }\n            else {\n                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO9\\n\");\n            }\n\n            MmsValue_delete(ctlVal);\n\n            /* Wait for command termination message */\n            Thread_sleep(1000);\n\n            ControlObjectClient_destroy(control);\n        }\n        else {\n            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO9 not found in server\\n\");\n        }\n\n        IedConnection_close(con);\n    }\n    else {\n    \tprintf(\"Connection failed!\\n\");\n    }\n\n    IedConnection_destroy(con);\n    return 0;\n}\n\n\n"], "filenames": ["examples/iec61850_client_example_control/client_example_control.c"], "buggy_code_start_loc": [48], "buggy_code_end_loc": [209], "fixing_code_start_loc": [48], "fixing_code_end_loc": [238], "type": "CWE-754", "message": "libiec61850 v1.5.1 was discovered to contain a segmentation violation via the function ControlObjectClient_setOrigin() at /client/client_control.c.", "other": {"cve": {"id": "CVE-2023-27772", "sourceIdentifier": "cve@mitre.org", "published": "2023-04-13T18:15:13.573", "lastModified": "2023-04-21T04:19:05.960", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "libiec61850 v1.5.1 was discovered to contain a segmentation violation via the function ControlObjectClient_setOrigin() at /client/client_control.c."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-754"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mz-automation:libiec61850:1.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "D608A908-8E8B-4501-B682-FCF5BFBA972C"}]}]}], "references": [{"url": "https://github.com/mz-automation/libiec61850/commit/79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/mz-automation/libiec61850/issues/442", "source": "cve@mitre.org", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mz-automation/libiec61850/commit/79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b"}}