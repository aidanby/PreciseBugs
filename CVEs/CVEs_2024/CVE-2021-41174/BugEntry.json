{"buggy_code": ["export * from './string';\nexport * from './markdown';\nexport * from './text';\nimport { escapeHtml, hasAnsiCodes, sanitize, sanitizeUrl } from './sanitize';\n\nexport const textUtil = {\n  escapeHtml,\n  hasAnsiCodes,\n  sanitize,\n  sanitizeUrl,\n};\n", "import xss from 'xss';\nimport { sanitizeUrl as braintreeSanitizeUrl } from '@braintree/sanitize-url';\n\nconst XSSWL = Object.keys(xss.whiteList).reduce((acc, element) => {\n  // @ts-ignore\n  acc[element] = xss.whiteList[element].concat(['class', 'style']);\n  return acc;\n}, {});\n\nconst sanitizeXSS = new xss.FilterXSS({\n  whiteList: XSSWL,\n});\n\n/**\n * Returns string safe from XSS attacks.\n *\n * Even though we allow the style-attribute, there's still default filtering applied to it\n * Info: https://github.com/leizongmin/js-xss#customize-css-filter\n * Whitelist: https://github.com/leizongmin/js-css-filter/blob/master/lib/default.js\n */\nexport function sanitize(unsanitizedString: string): string {\n  try {\n    return sanitizeXSS.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return unsanitizedString;\n  }\n}\n\nexport function sanitizeUrl(url: string): string {\n  return braintreeSanitizeUrl(url);\n}\n\nexport function hasAnsiCodes(input: string): boolean {\n  return /\\u001b\\[\\d{1,2}m/.test(input);\n}\n\nexport function escapeHtml(str: string): string {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n", "import angular from 'angular';\nimport 'angular-route';\nimport 'angular-sanitize';\nimport 'angular-bindonce';\nimport 'vendor/bootstrap/bootstrap';\nimport 'vendor/angular-other/angular-strap';\nimport { config } from 'app/core/config';\nimport coreModule, { angularModules } from 'app/core/core_module';\nimport { DashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { registerAngularDirectives } from 'app/core/core';\nimport { initAngularRoutingBridge } from 'app/angular/bridgeReactAngularRouting';\nimport { monkeyPatchInjectorWithPreAssignedBindings } from 'app/core/injectorMonkeyPatch';\nimport { extend } from 'lodash';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nexport class AngularApp {\n  ngModuleDependencies: any[];\n  preBootModules: any[];\n  registerFunctions: any;\n\n  constructor() {\n    this.preBootModules = [];\n    this.ngModuleDependencies = [];\n    this.registerFunctions = {};\n  }\n\n  init() {\n    const app = angular.module('grafana', []);\n\n    app.config(\n      (\n        $controllerProvider: angular.IControllerProvider,\n        $compileProvider: angular.ICompileProvider,\n        $filterProvider: angular.IFilterProvider,\n        $httpProvider: angular.IHttpProvider,\n        $provide: angular.auto.IProvideService\n      ) => {\n        if (config.buildInfo.env !== 'development') {\n          $compileProvider.debugInfoEnabled(false);\n        }\n\n        $httpProvider.useApplyAsync(true);\n\n        this.registerFunctions.controller = $controllerProvider.register;\n        this.registerFunctions.directive = $compileProvider.directive;\n        this.registerFunctions.factory = $provide.factory;\n        this.registerFunctions.service = $provide.service;\n        this.registerFunctions.filter = $filterProvider.register;\n\n        $provide.decorator('$http', [\n          '$delegate',\n          '$templateCache',\n          ($delegate: any, $templateCache: any) => {\n            const get = $delegate.get;\n            $delegate.get = (url: string, config: any) => {\n              if (url.match(/\\.html$/)) {\n                // some template's already exist in the cache\n                if (!$templateCache.get(url)) {\n                  url += '?v=' + new Date().getTime();\n                }\n              }\n              return get(url, config);\n            };\n            return $delegate;\n          },\n        ]);\n      }\n    );\n\n    this.ngModuleDependencies = [\n      'grafana.core',\n      'ngSanitize',\n      '$strap.directives',\n      'grafana',\n      'pasvaz.bindonce',\n      'react',\n    ];\n\n    // makes it possible to add dynamic stuff\n    angularModules.forEach((m: angular.IModule) => {\n      this.useModule(m);\n    });\n\n    // register react angular wrappers\n    angular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\n\n    coreModule.factory('timeSrv', () => getTimeSrv());\n    coreModule.factory('templateSrv', () => getTemplateSrv());\n\n    registerAngularDirectives();\n    initAngularRoutingBridge();\n  }\n\n  useModule(module: angular.IModule) {\n    if (this.preBootModules) {\n      this.preBootModules.push(module);\n    } else {\n      extend(module, this.registerFunctions);\n    }\n    this.ngModuleDependencies.push(module.name);\n    return module;\n  }\n\n  bootstrap() {\n    // Do not initalize angular when the path contains an interpolation directive\n    const { pathname } = window.location;\n    if (pathname && (pathname.includes('%7B%7B') || pathname.includes('{{'))) {\n      return;\n    }\n\n    const injector = angular.bootstrap(document, this.ngModuleDependencies);\n\n    monkeyPatchInjectorWithPreAssignedBindings(injector);\n\n    injector.invoke(() => {\n      this.preBootModules.forEach((module) => {\n        extend(module, this.registerFunctions);\n      });\n\n      // I don't know\n      return () => {};\n    });\n\n    return injector;\n  }\n}\n", "import React, { ReactNode } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { Link, useTheme2 } from '@grafana/ui';\nimport NavBarDropdown from './NavBarDropdown';\n\nexport interface Props {\n  isActive?: boolean;\n  children: ReactNode;\n  label: string;\n  menuItems?: NavModelItem[];\n  menuSubTitle?: string;\n  onClick?: () => void;\n  reverseMenuDirection?: boolean;\n  target?: HTMLAnchorElement['target'];\n  url?: string;\n}\n\nconst NavBarItem = ({\n  isActive = false,\n  children,\n  label,\n  menuItems = [],\n  menuSubTitle,\n  onClick,\n  reverseMenuDirection = false,\n  target,\n  url,\n}: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, isActive);\n  let element = (\n    <button className={styles.element} onClick={onClick} aria-label={label}>\n      <span className={styles.icon}>{children}</span>\n    </button>\n  );\n\n  if (url) {\n    element =\n      !target && url.startsWith('/') ? (\n        <Link\n          className={styles.element}\n          href={url}\n          target={target}\n          aria-label={label}\n          onClick={onClick}\n          aria-haspopup=\"true\"\n        >\n          <span className={styles.icon}>{children}</span>\n        </Link>\n      ) : (\n        <a href={url} target={target} className={styles.element} onClick={onClick} aria-label={label}>\n          <span className={styles.icon}>{children}</span>\n        </a>\n      );\n  }\n\n  return (\n    <div className={cx(styles.container, 'dropdown', { dropup: reverseMenuDirection })}>\n      {element}\n      <NavBarDropdown\n        headerTarget={target}\n        headerText={label}\n        headerUrl={url}\n        items={menuItems}\n        onHeaderClick={onClick}\n        reverseDirection={reverseMenuDirection}\n        subtitleText={menuSubTitle}\n      />\n    </div>\n  );\n};\n\nexport default NavBarItem;\n\nconst getStyles = (theme: GrafanaTheme2, isActive: Props['isActive']) => ({\n  container: css`\n    position: relative;\n\n    @keyframes dropdown-anim {\n      0% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 1;\n      }\n    }\n\n    ${theme.breakpoints.up('md')} {\n      color: ${isActive ? theme.colors.text.primary : theme.colors.text.secondary};\n\n      &:hover {\n        background-color: ${theme.colors.action.hover};\n        color: ${theme.colors.text.primary};\n\n        .dropdown-menu {\n          animation: dropdown-anim 150ms ease-in-out 100ms forwards;\n          border: none;\n          display: flex;\n          // important to overlap it otherwise it can be hidden\n          // again by the mouse getting outside the hover space\n          left: ${theme.components.sidemenu.width - 1}px;\n          margin: 0;\n          opacity: 0;\n          top: 0;\n          z-index: ${theme.zIndex.sidemenu};\n        }\n\n        &.dropup .dropdown-menu {\n          top: auto;\n        }\n      }\n    }\n  `,\n  element: css`\n    background-color: transparent;\n    border: none;\n    color: inherit;\n    display: block;\n    line-height: 42px;\n    text-align: center;\n    width: ${theme.components.sidemenu.width - 1}px;\n\n    &::before {\n      display: ${isActive ? 'block' : 'none'};\n      content: ' ';\n      position: absolute;\n      left: 0;\n      top: 0;\n      bottom: 0;\n      width: 4px;\n      border-radius: 2px;\n      background-image: ${theme.colors.gradients.brandVertical};\n    }\n\n    &:focus-visible {\n      background-color: ${theme.colors.action.hover};\n      box-shadow: none;\n      color: ${theme.colors.text.primary};\n      outline: 2px solid ${theme.colors.primary.main};\n      outline-offset: -2px;\n      transition: none;\n    }\n\n    .sidemenu-open--xs & {\n      display: none;\n    }\n  `,\n  icon: css`\n    height: 100%;\n    width: 100%;\n\n    img {\n      border-radius: 50%;\n      height: 28px;\n      width: 28px;\n    }\n  `,\n});\n"], "fixing_code": ["export * from './string';\nexport * from './markdown';\nexport * from './text';\nimport { escapeHtml, hasAnsiCodes, sanitize, sanitizeUrl, sanitizeAngularInterpolation } from './sanitize';\n\nexport const textUtil = {\n  escapeHtml,\n  hasAnsiCodes,\n  sanitize,\n  sanitizeUrl,\n  sanitizeAngularInterpolation,\n};\n", "import xss from 'xss';\nimport { sanitizeUrl as braintreeSanitizeUrl } from '@braintree/sanitize-url';\n\nconst XSSWL = Object.keys(xss.whiteList).reduce((acc, element) => {\n  // @ts-ignore\n  acc[element] = xss.whiteList[element].concat(['class', 'style']);\n  return acc;\n}, {});\n\nconst sanitizeXSS = new xss.FilterXSS({\n  whiteList: XSSWL,\n});\n\n/**\n * Returns string safe from XSS attacks.\n *\n * Even though we allow the style-attribute, there's still default filtering applied to it\n * Info: https://github.com/leizongmin/js-xss#customize-css-filter\n * Whitelist: https://github.com/leizongmin/js-css-filter/blob/master/lib/default.js\n */\nexport function sanitize(unsanitizedString: string): string {\n  try {\n    return sanitizeXSS.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return unsanitizedString;\n  }\n}\n\nexport function sanitizeUrl(url: string): string {\n  return braintreeSanitizeUrl(url);\n}\n\nexport function hasAnsiCodes(input: string): boolean {\n  return /\\u001b\\[\\d{1,2}m/.test(input);\n}\n\nexport function escapeHtml(str: string): string {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\nexport function sanitizeAngularInterpolation(url: string): string {\n  return url.replace('{{', '%7B%7B').replace('}}', '%7D%7D');\n}\n", "import angular from 'angular';\nimport 'angular-route';\nimport 'angular-sanitize';\nimport 'angular-bindonce';\nimport 'vendor/bootstrap/bootstrap';\nimport 'vendor/angular-other/angular-strap';\nimport { config } from 'app/core/config';\nimport coreModule, { angularModules } from 'app/core/core_module';\nimport { DashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { registerAngularDirectives } from 'app/core/core';\nimport { initAngularRoutingBridge } from 'app/angular/bridgeReactAngularRouting';\nimport { monkeyPatchInjectorWithPreAssignedBindings } from 'app/core/injectorMonkeyPatch';\nimport { extend } from 'lodash';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nexport class AngularApp {\n  ngModuleDependencies: any[];\n  preBootModules: any[];\n  registerFunctions: any;\n\n  constructor() {\n    this.preBootModules = [];\n    this.ngModuleDependencies = [];\n    this.registerFunctions = {};\n  }\n\n  init() {\n    const app = angular.module('grafana', []);\n\n    app.config(\n      (\n        $controllerProvider: angular.IControllerProvider,\n        $compileProvider: angular.ICompileProvider,\n        $filterProvider: angular.IFilterProvider,\n        $httpProvider: angular.IHttpProvider,\n        $provide: angular.auto.IProvideService\n      ) => {\n        if (config.buildInfo.env !== 'development') {\n          $compileProvider.debugInfoEnabled(false);\n        }\n\n        $httpProvider.useApplyAsync(true);\n\n        this.registerFunctions.controller = $controllerProvider.register;\n        this.registerFunctions.directive = $compileProvider.directive;\n        this.registerFunctions.factory = $provide.factory;\n        this.registerFunctions.service = $provide.service;\n        this.registerFunctions.filter = $filterProvider.register;\n\n        $provide.decorator('$http', [\n          '$delegate',\n          '$templateCache',\n          ($delegate: any, $templateCache: any) => {\n            const get = $delegate.get;\n            $delegate.get = (url: string, config: any) => {\n              if (url.match(/\\.html$/)) {\n                // some template's already exist in the cache\n                if (!$templateCache.get(url)) {\n                  url += '?v=' + new Date().getTime();\n                }\n              }\n              return get(url, config);\n            };\n            return $delegate;\n          },\n        ]);\n      }\n    );\n\n    this.ngModuleDependencies = [\n      'grafana.core',\n      'ngSanitize',\n      '$strap.directives',\n      'grafana',\n      'pasvaz.bindonce',\n      'react',\n    ];\n\n    // makes it possible to add dynamic stuff\n    angularModules.forEach((m: angular.IModule) => {\n      this.useModule(m);\n    });\n\n    // register react angular wrappers\n    angular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\n\n    coreModule.factory('timeSrv', () => getTimeSrv());\n    coreModule.factory('templateSrv', () => getTemplateSrv());\n\n    registerAngularDirectives();\n    initAngularRoutingBridge();\n  }\n\n  useModule(module: angular.IModule) {\n    if (this.preBootModules) {\n      this.preBootModules.push(module);\n    } else {\n      extend(module, this.registerFunctions);\n    }\n    this.ngModuleDependencies.push(module.name);\n    return module;\n  }\n\n  bootstrap() {\n    const injector = angular.bootstrap(document, this.ngModuleDependencies);\n\n    monkeyPatchInjectorWithPreAssignedBindings(injector);\n\n    injector.invoke(() => {\n      this.preBootModules.forEach((module) => {\n        extend(module, this.registerFunctions);\n      });\n\n      // I don't know\n      return () => {};\n    });\n\n    return injector;\n  }\n}\n", "import React, { ReactNode } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2, NavModelItem, textUtil } from '@grafana/data';\nimport { Link, useTheme2 } from '@grafana/ui';\nimport NavBarDropdown from './NavBarDropdown';\n\nexport interface Props {\n  isActive?: boolean;\n  children: ReactNode;\n  label: string;\n  menuItems?: NavModelItem[];\n  menuSubTitle?: string;\n  onClick?: () => void;\n  reverseMenuDirection?: boolean;\n  target?: HTMLAnchorElement['target'];\n  url?: string;\n}\n\nconst NavBarItem = ({\n  isActive = false,\n  children,\n  label,\n  menuItems = [],\n  menuSubTitle,\n  onClick,\n  reverseMenuDirection = false,\n  target,\n  url,\n}: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, isActive);\n  let element = (\n    <button className={styles.element} onClick={onClick} aria-label={label}>\n      <span className={styles.icon}>{children}</span>\n    </button>\n  );\n  const sanitizedUrl = textUtil.sanitizeAngularInterpolation(url ?? '');\n\n  if (url) {\n    element =\n      !target && sanitizedUrl.startsWith('/') ? (\n        <Link\n          className={styles.element}\n          href={sanitizedUrl}\n          target={target}\n          aria-label={label}\n          onClick={onClick}\n          aria-haspopup=\"true\"\n        >\n          <span className={styles.icon}>{children}</span>\n        </Link>\n      ) : (\n        <a href={sanitizedUrl} target={target} className={styles.element} onClick={onClick} aria-label={label}>\n          <span className={styles.icon}>{children}</span>\n        </a>\n      );\n  }\n\n  return (\n    <div className={cx(styles.container, 'dropdown', { dropup: reverseMenuDirection })}>\n      {element}\n      <NavBarDropdown\n        headerTarget={target}\n        headerText={label}\n        headerUrl={sanitizedUrl}\n        items={menuItems}\n        onHeaderClick={onClick}\n        reverseDirection={reverseMenuDirection}\n        subtitleText={menuSubTitle}\n      />\n    </div>\n  );\n};\n\nexport default NavBarItem;\n\nconst getStyles = (theme: GrafanaTheme2, isActive: Props['isActive']) => ({\n  container: css`\n    position: relative;\n\n    @keyframes dropdown-anim {\n      0% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 1;\n      }\n    }\n\n    ${theme.breakpoints.up('md')} {\n      color: ${isActive ? theme.colors.text.primary : theme.colors.text.secondary};\n\n      &:hover {\n        background-color: ${theme.colors.action.hover};\n        color: ${theme.colors.text.primary};\n\n        .dropdown-menu {\n          animation: dropdown-anim 150ms ease-in-out 100ms forwards;\n          border: none;\n          display: flex;\n          // important to overlap it otherwise it can be hidden\n          // again by the mouse getting outside the hover space\n          left: ${theme.components.sidemenu.width - 1}px;\n          margin: 0;\n          opacity: 0;\n          top: 0;\n          z-index: ${theme.zIndex.sidemenu};\n        }\n\n        &.dropup .dropdown-menu {\n          top: auto;\n        }\n      }\n    }\n  `,\n  element: css`\n    background-color: transparent;\n    border: none;\n    color: inherit;\n    display: block;\n    line-height: 42px;\n    text-align: center;\n    width: ${theme.components.sidemenu.width - 1}px;\n\n    &::before {\n      display: ${isActive ? 'block' : 'none'};\n      content: ' ';\n      position: absolute;\n      left: 0;\n      top: 0;\n      bottom: 0;\n      width: 4px;\n      border-radius: 2px;\n      background-image: ${theme.colors.gradients.brandVertical};\n    }\n\n    &:focus-visible {\n      background-color: ${theme.colors.action.hover};\n      box-shadow: none;\n      color: ${theme.colors.text.primary};\n      outline: 2px solid ${theme.colors.primary.main};\n      outline-offset: -2px;\n      transition: none;\n    }\n\n    .sidemenu-open--xs & {\n      display: none;\n    }\n  `,\n  icon: css`\n    height: 100%;\n    width: 100%;\n\n    img {\n      border-radius: 50%;\n      height: 28px;\n      width: 28px;\n    }\n  `,\n});\n"], "filenames": ["packages/grafana-data/src/text/index.ts", "packages/grafana-data/src/text/sanitize.ts", "public/app/angular/AngularApp.ts", "public/app/core/components/NavBar/NavBarItem.tsx"], "buggy_code_start_loc": [4, 40, 106, 3], "buggy_code_end_loc": [10, 40, 112, 65], "fixing_code_start_loc": [4, 41, 105, 3], "fixing_code_end_loc": [12, 45, 105, 66], "type": "CWE-79", "message": "Grafana is an open-source platform for monitoring and observability. In affected versions if an attacker is able to convince a victim to visit a URL referencing a vulnerable page, arbitrary JavaScript content may be executed within the context of the victim's browser. The user visiting the malicious link must be unauthenticated and the link must be for a page that contains the login button in the menu bar. The url has to be crafted to exploit AngularJS rendering and contain the interpolation binding for AngularJS expressions. AngularJS uses double curly braces for interpolation binding: {{ }} ex: {{constructor.constructor(\u2018alert(1)\u2019)()}}. When the user follows the link and the page renders, the login button will contain the original link with a query parameter to force a redirect to the login page. The URL is not validated and the AngularJS rendering engine will execute the JavaScript expression contained in the URL. Users are advised to upgrade as soon as possible. If for some reason you cannot upgrade, you can use a reverse proxy or similar to block access to block the literal string {{ in the path.", "other": {"cve": {"id": "CVE-2021-41174", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-03T18:15:08.413", "lastModified": "2021-11-29T17:13:22.177", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Grafana is an open-source platform for monitoring and observability. In affected versions if an attacker is able to convince a victim to visit a URL referencing a vulnerable page, arbitrary JavaScript content may be executed within the context of the victim's browser. The user visiting the malicious link must be unauthenticated and the link must be for a page that contains the login button in the menu bar. The url has to be crafted to exploit AngularJS rendering and contain the interpolation binding for AngularJS expressions. AngularJS uses double curly braces for interpolation binding: {{ }} ex: {{constructor.constructor(\u2018alert(1)\u2019)()}}. When the user follows the link and the page renders, the login button will contain the original link with a query parameter to force a redirect to the login page. The URL is not validated and the AngularJS rendering engine will execute the JavaScript expression contained in the URL. Users are advised to upgrade as soon as possible. If for some reason you cannot upgrade, you can use a reverse proxy or similar to block access to block the literal string {{ in the path."}, {"lang": "es", "value": "Grafana es una plataforma de c\u00f3digo abierto para la monitorizaci\u00f3n y la observabilidad. En las versiones afectadas, si un atacante es capaz de convencer a una v\u00edctima de que visite una URL que haga referencia a una p\u00e1gina vulnerable, se puede ejecutar contenido JavaScript arbitrario en el contexto del navegador de la v\u00edctima. El usuario que visita el enlace malicioso debe no estar autenticado y el enlace debe ser para una p\u00e1gina que contenga el bot\u00f3n de inicio de sesi\u00f3n en la barra de men\u00fa. La url tiene que estar dise\u00f1ada para explotar el renderizado de AngularJS y contener el enlace de interpolaci\u00f3n para las expresiones de AngularJS. AngularJS utiliza llaves dobles para la interpolaci\u00f3n: {{ }} ej: {{constructor.constructor('alert(1)')()}}. Cuando el usuario sigue el enlace y la p\u00e1gina se renderiza, el bot\u00f3n de inicio de sesi\u00f3n contendr\u00e1 el enlace original con un par\u00e1metro de consulta para forzar una redirecci\u00f3n a la p\u00e1gina de inicio de sesi\u00f3n. La URL no se valida y el motor de renderizado de AngularJS ejecutar\u00e1 la expresi\u00f3n JavaScript contenida en la URL. Se recomienda a los usuarios que actualicen lo antes posible. Si por alguna raz\u00f3n no pueden actualizar, pueden utilizar un proxy inverso o similar para bloquear el acceso a la cadena literal {{ en la ruta"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:grafana:grafana:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndExcluding": "8.2.3", "matchCriteriaId": "A9B9C101-2003-4213-9B6D-B92CDD6C3370"}]}]}], "references": [{"url": "https://github.com/grafana/grafana/commit/31b78d51c693d828720a5b285107a50e6024c912", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/grafana/grafana/commit/3cb5214fa45eb5a571fd70d6c6edf0d729983f82", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/grafana/grafana/commit/fb85ed691290d211a5baa44d9a641ab137f0de88", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/grafana/grafana/security/advisories/GHSA-3j9m-hcv9-rpj8", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20211125-0003/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/grafana/grafana/commit/31b78d51c693d828720a5b285107a50e6024c912"}}