{"buggy_code": ["package io.metersphere.controller;\n\nimport io.metersphere.base.domain.User;\nimport io.metersphere.commons.constants.OperLogConstants;\nimport io.metersphere.commons.constants.OperLogModule;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.dto.UserDTO;\nimport io.metersphere.log.annotation.MsAuditLog;\nimport io.metersphere.request.AuthUserIssueRequest;\nimport io.metersphere.request.member.EditPassWordRequest;\nimport io.metersphere.request.member.EditSeleniumServerRequest;\nimport io.metersphere.request.member.QueryMemberRequest;\nimport io.metersphere.service.BaseUserService;\nimport org.springframework.web.bind.annotation.*;\n\nimport jakarta.annotation.Resource;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@RestController\n@RequestMapping(\"/user\")\npublic class BaseUserController {\n    @Resource\n    private BaseUserService baseUserService;\n\n    @GetMapping(\"/ws/current/member/list\")\n    public List<User> getCurrentWorkspaceMember() {\n        QueryMemberRequest request = new QueryMemberRequest();\n        request.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n        return baseUserService.getMemberList(request);\n    }\n\n\n    @GetMapping(\"/switch/source/ws/{sourceId}\")\n    public UserDTO switchWorkspace(@PathVariable(value = \"sourceId\") String sourceId) {\n        baseUserService.switchUserResource(\"workspace\", sourceId, Objects.requireNonNull(SessionUtils.getUser()));\n        return SessionUtils.getUser();\n    }\n\n    @PostMapping(\"/update/current\")\n    @MsAuditLog(module = OperLogModule.PERSONAL_INFORMATION_PERSONAL_SETTINGS, type = OperLogConstants.UPDATE, beforeEvent = \"#msClass.getLogDetails(#user.id)\", content = \"#msClass.getLogDetails(#user.id)\", msClass = BaseUserService.class)\n    public UserDTO updateCurrentUser(@RequestBody User user) {\n        return baseUserService.updateCurrentUser(user);\n    }\n\n    /*\n     * \u4fee\u6539\u5f53\u524d\u7528\u6237\u5bc6\u7801\n     * */\n    @PostMapping(\"/update/password\")\n    @MsAuditLog(module = OperLogModule.SYSTEM_USER, type = OperLogConstants.UPDATE, title = \"\u4e2a\u4eba\u5bc6\u7801\")\n    public int updateCurrentUserPassword(@RequestBody EditPassWordRequest request) {\n        return baseUserService.updateCurrentUserPassword(request);\n    }\n\n\n    @GetMapping(\"/project/member/list\")\n    public List<User> getProjectMemberListAll() {\n        QueryMemberRequest request = new QueryMemberRequest();\n        request.setProjectId(SessionUtils.getCurrentProjectId());\n        return baseUserService.getProjectMemberList(request);\n    }\n\n    @GetMapping(\"/project/member/option\")\n    public List<User> getProjectMemberOption() {\n        return baseUserService.getProjectMemberOption(SessionUtils.getCurrentProjectId());\n    }\n\n    @GetMapping(\"/project/member/{projectId}\")\n    public List<User> getProjectMembers(@PathVariable String projectId) {\n        QueryMemberRequest request = new QueryMemberRequest();\n        request.setProjectId(projectId);\n        return baseUserService.getProjectMemberList(request);\n    }\n\n    @GetMapping(\"/info\")\n    public UserDTO getUserInfo() {\n        return baseUserService.getUserDTO(SessionUtils.getUserId());\n    }\n\n    /**\n     * \u6839\u636euserId \u83b7\u53d6 user \u6240\u5c5e\u5de5\u4f5c\u7a7a\u95f4\u548c\u6240\u5c5e\u5de5\u4f5c\u9879\u76ee\n     */\n    @GetMapping(\"/get/ws-pj/{userId}\")\n    public Map<Object, Object> getWSAndProjectByUserId(@PathVariable String userId) {\n        return baseUserService.getWSAndProjectByUserId(userId);\n    }\n\n\n    /**\n     * \u914d\u7f6e \u7528\u6237\u7684selenium-server \u5730\u5740 ip:port\n     */\n    @PostMapping(\"/update/selenium-server\")\n    @MsAuditLog(module = OperLogModule.SYSTEM_USER, type = OperLogConstants.UPDATE, title = \"selenium-server\u5730\u5740\")\n    public int updateSeleniumServer(@RequestBody EditSeleniumServerRequest request) {\n        return baseUserService.updateUserSeleniumServer(request);\n    }\n\n    @PostMapping(\"issue/auth\")\n    public void userAuth(@RequestBody AuthUserIssueRequest authUserIssueRequest) {\n        baseUserService.userIssueAuth(authUserIssueRequest);\n    }\n\n    @GetMapping(\"/update/current-by-resource/{resourceId}\")\n    public void updateCurrentUserByResourceId(@PathVariable String resourceId) {\n        baseUserService.updateCurrentUserByResourceId(resourceId);\n    }\n\n    @GetMapping(\"/is/super/{userid}\")\n    public boolean isSuperUser(@PathVariable String userid) {\n        return baseUserService.isSuperUser(userid);\n    }\n}\n", "package io.metersphere.controller;\n\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport io.metersphere.base.domain.Group;\nimport io.metersphere.base.domain.User;\nimport io.metersphere.base.domain.Workspace;\nimport io.metersphere.commons.constants.OperLogConstants;\nimport io.metersphere.commons.constants.OperLogModule;\nimport io.metersphere.commons.constants.PermissionConstants;\nimport io.metersphere.commons.utils.PageUtils;\nimport io.metersphere.commons.utils.Pager;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.dto.GroupDTO;\nimport io.metersphere.dto.GroupPermissionDTO;\nimport io.metersphere.log.annotation.MsAuditLog;\nimport io.metersphere.log.annotation.MsRequestLog;\nimport io.metersphere.request.GroupRequest;\nimport io.metersphere.request.group.EditGroupRequest;\nimport io.metersphere.request.group.EditGroupUserRequest;\nimport io.metersphere.service.GroupService;\nimport jakarta.annotation.Resource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n\n@RequestMapping(\"/user/group\")\n@RestController\npublic class GroupController {\n\n    @Resource\n    private GroupService groupService;\n\n    @PostMapping(\"/get/current/project/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.PROJECT_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<GroupDTO>> getCurrentProjectGroupList(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest request) {\n        request.setGoPage(goPage);\n        request.setPageSize(pageSize);\n        return groupService.getProjectGroupList(request);\n    }\n\n    @GetMapping(\"/get/all\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ, PermissionConstants.SYSTEM_USER_READ, PermissionConstants.WORKSPACE_USER_READ}, logical = Logical.OR)\n    public List<GroupDTO> getAllGroup() {\n        return groupService.getAllGroup();\n    }\n\n    @PostMapping(\"/get\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ, PermissionConstants.SYSTEM_USER_READ, PermissionConstants.WORKSPACE_USER_READ}, logical = Logical.OR)\n    public List<Group> getGroupByType(@RequestBody EditGroupRequest request) {\n        return groupService.getGroupByType(request);\n    }\n\n    @PostMapping(\"/add\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_CREATE, PermissionConstants.PROJECT_GROUP_READ_CREATE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.CREATE, content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public Group addGroup(@RequestBody EditGroupRequest request) {\n        request.setId(UUID.randomUUID().toString());\n        return groupService.addGroup(request);\n    }\n\n    @PostMapping(\"/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_EDIT, PermissionConstants.PROJECT_GROUP_READ_EDIT}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.UPDATE, beforeEvent = \"#msClass.getLogDetails(#request.id)\", content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public void editGroup(@RequestBody EditGroupRequest request) {\n        groupService.editGroup(request);\n    }\n\n    @GetMapping(\"/delete/{id}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_DELETE, PermissionConstants.PROJECT_GROUP_READ_DELETE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.DELETE, beforeEvent = \"#msClass.getLogDetails(#id)\", msClass = GroupService.class)\n    public void deleteGroup(@PathVariable String id) {\n        groupService.deleteGroup(id);\n    }\n\n    @PostMapping(\"/permission\")\n    public GroupPermissionDTO getGroupResource(@RequestBody Group group) {\n        return groupService.getGroupResource(group);\n    }\n\n    @PostMapping(\"/permission/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_SETTING_PERMISSION, PermissionConstants.PROJECT_GROUP_READ_SETTING_PERMISSION}, logical = Logical.OR)\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void editGroupPermission(@RequestBody EditGroupRequest editGroupRequest) {\n        groupService.editGroupPermission(editGroupRequest);\n    }\n\n    @GetMapping(\"/all/{userId}\")\n    public List<Map<String, Object>> getAllUserGroup(@PathVariable(\"userId\") String userId) {\n        return groupService.getAllUserGroup(userId);\n    }\n\n    @PostMapping(\"/list\")\n    public List<Group> getGroupsByType(@RequestBody GroupRequest request) {\n        return groupService.getGroupsByType(request);\n    }\n\n    @GetMapping(\"/list/ws/{workspaceId}/{userId}\")\n    public List<Group> getWorkspaceMemberGroups(@PathVariable String workspaceId, @PathVariable String userId) {\n        return groupService.getWorkspaceMemberGroups(workspaceId, userId);\n    }\n\n    @GetMapping(\"/list/project/{projectId}/{userId}\")\n    public List<Group> getProjectMemberGroups(@PathVariable String projectId, @PathVariable String userId) {\n        return groupService.getProjectMemberGroups(projectId, userId);\n    }\n\n    @GetMapping(\"/ws/{userId}\")\n    public List<Workspace> getWorkspace(@PathVariable String userId) {\n        return groupService.getWorkspace(userId);\n    }\n\n    @GetMapping(\"/{type}/{id}\")\n    public List<?> getResource(@PathVariable String type, @PathVariable String id) {\n        return groupService.getResource(type, id);\n    }\n\n    @PostMapping(\"/current/project/user/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.PROJECT_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<User>> getCurrentProjectGroupUser(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest editGroupRequest) {\n        editGroupRequest.setOnlyQueryCurrentProject(true);\n        if (StringUtils.isBlank(editGroupRequest.getProjectId())) {\n            editGroupRequest.setProjectId(SessionUtils.getCurrentProjectId());\n        }\n        Page<Object> page = PageHelper.startPage(goPage, pageSize, true);\n        return PageUtils.setPageInfo(page, groupService.getGroupUser(editGroupRequest));\n    }\n\n    @GetMapping(\"/rm/{userId}/{groupId}\")\n    public void removeGroupMember(@PathVariable String userId, @PathVariable String groupId) {\n        groupService.removeGroupMember(userId, groupId);\n    }\n\n    @GetMapping(\"/source/{userId}/{groupId}\")\n    public List<?> getGroupSource(@PathVariable String userId, @PathVariable String groupId) {\n        return groupService.getGroupSource(userId, groupId);\n    }\n\n    @PostMapping(\"/add/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void addGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.addGroupUser(request);\n    }\n\n    @PostMapping(\"/edit/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_EDIT, PermissionConstants.PROJECT_GROUP_READ_EDIT}, logical = Logical.OR)\n    public void editGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.editGroupUser(request);\n    }\n\n    @GetMapping(\"/workspace/list/resource/{groupId}/{groupType}\")\n    public Object getWorkspaceResourceByGroup(@PathVariable String groupId, @PathVariable String groupType) {\n        return groupService.getWorkspaceResourceByGroup(groupId, groupType);\n    }\n}\n", "package io.metersphere.controller;\n\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport io.metersphere.base.domain.Group;\nimport io.metersphere.base.domain.User;\nimport io.metersphere.base.domain.Workspace;\nimport io.metersphere.commons.constants.OperLogConstants;\nimport io.metersphere.commons.constants.OperLogModule;\nimport io.metersphere.commons.constants.PermissionConstants;\nimport io.metersphere.commons.utils.PageUtils;\nimport io.metersphere.commons.utils.Pager;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.log.annotation.MsRequestLog;\nimport io.metersphere.request.GroupRequest;\nimport io.metersphere.request.group.EditGroupRequest;\nimport io.metersphere.request.group.EditGroupUserRequest;\nimport io.metersphere.dto.GroupDTO;\nimport io.metersphere.dto.GroupPermissionDTO;\nimport io.metersphere.log.annotation.MsAuditLog;\nimport io.metersphere.service.GroupService;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.springframework.web.bind.annotation.*;\n\nimport jakarta.annotation.Resource;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n\n@RequestMapping(\"/user/group\")\n@RestController\npublic class GroupController {\n\n    @Resource\n    private GroupService groupService;\n\n    @PostMapping(\"/get/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<GroupDTO>> getGroupList(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest request) {\n        request.setGoPage(goPage);\n        request.setPageSize(pageSize);\n        return groupService.getGroupList(request);\n    }\n\n    @GetMapping(\"/get/all\")\n    public List<GroupDTO> getAllGroup() {\n        return groupService.getAllGroup();\n    }\n\n    @PostMapping(\"/get\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ, PermissionConstants.SYSTEM_USER_READ, PermissionConstants.WORKSPACE_USER_READ}, logical = Logical.OR)\n    public List<Group> getGroupByType(@RequestBody EditGroupRequest request) {\n        return groupService.getGroupByType(request);\n    }\n\n    @PostMapping(\"/add\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_CREATE, PermissionConstants.PROJECT_GROUP_READ_CREATE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.CREATE, content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public Group addGroup(@RequestBody EditGroupRequest request) {\n        request.setId(UUID.randomUUID().toString());\n        return groupService.addGroup(request);\n    }\n\n    @PostMapping(\"/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_EDIT, PermissionConstants.PROJECT_GROUP_READ_EDIT}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.UPDATE, beforeEvent = \"#msClass.getLogDetails(#request.id)\", content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public void editGroup(@RequestBody EditGroupRequest request) {\n        groupService.editGroup(request);\n    }\n\n    @GetMapping(\"/delete/{id}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_DELETE, PermissionConstants.PROJECT_GROUP_READ_DELETE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.DELETE, beforeEvent = \"#msClass.getLogDetails(#id)\", msClass = GroupService.class)\n    public void deleteGroup(@PathVariable String id) {\n        groupService.deleteGroup(id);\n    }\n\n    @PostMapping(\"/permission\")\n    public GroupPermissionDTO getGroupResource(@RequestBody Group group) {\n        return groupService.getGroupResource(group);\n    }\n\n    @PostMapping(\"/permission/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_SETTING_PERMISSION, PermissionConstants.PROJECT_GROUP_READ_SETTING_PERMISSION}, logical = Logical.OR)\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void editGroupPermission(@RequestBody EditGroupRequest editGroupRequest) {\n        groupService.editGroupPermission(editGroupRequest);\n    }\n\n    @GetMapping(\"/all/{userId}\")\n    public List<Map<String, Object>> getAllUserGroup(@PathVariable(\"userId\") String userId) {\n        return groupService.getAllUserGroup(userId);\n    }\n\n    @PostMapping(\"/list\")\n    public List<Group> getGroupsByType(@RequestBody GroupRequest request) {\n        return groupService.getGroupsByType(request);\n    }\n\n    @GetMapping(\"/list/ws/{workspaceId}/{userId}\")\n    public List<Group> getWorkspaceMemberGroups(@PathVariable String workspaceId, @PathVariable String userId) {\n        return groupService.getWorkspaceMemberGroups(workspaceId, userId);\n    }\n\n    @GetMapping(\"/list/project/{projectId}/{userId}\")\n    public List<Group> getProjectMemberGroups(@PathVariable String projectId, @PathVariable String userId) {\n        return groupService.getProjectMemberGroups(projectId, userId);\n    }\n\n    @GetMapping(\"/ws/{userId}\")\n    public List<Workspace> getWorkspace(@PathVariable String userId) {\n        return groupService.getWorkspace(userId);\n    }\n\n    @GetMapping(\"/{type}/{id}\")\n    public List<?> getResource(@PathVariable String type, @PathVariable String id) {\n        return groupService.getResource(type, id);\n    }\n\n    @PostMapping(\"/user/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<User>> getGroupUser(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest editGroupRequest) {\n        Page<Object> page = PageHelper.startPage(goPage, pageSize, true);\n        return PageUtils.setPageInfo(page, groupService.getGroupUser(editGroupRequest));\n    }\n\n    @GetMapping(\"/rm/{userId}/{groupId}\")\n    @RequiresPermissions(PermissionConstants.SYSTEM_GROUP_READ)\n    public void removeGroupMember(@PathVariable String userId, @PathVariable String groupId) {\n        groupService.removeGroupMember(userId, groupId);\n    }\n\n    @GetMapping(\"/source/{userId}/{groupId}\")\n    public List<?> getGroupSource(@PathVariable String userId, @PathVariable String groupId) {\n        return groupService.getGroupSource(userId, groupId);\n    }\n\n    @PostMapping(\"/add/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void addGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.addGroupUser(request);\n    }\n\n    @PostMapping(\"/edit/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void editGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.editGroupUser(request);\n    }\n}\n"], "fixing_code": ["package io.metersphere.controller;\n\nimport io.metersphere.base.domain.User;\nimport io.metersphere.base.domain.UserGroup;\nimport io.metersphere.commons.constants.OperLogConstants;\nimport io.metersphere.commons.constants.OperLogModule;\nimport io.metersphere.commons.constants.UserGroupConstants;\nimport io.metersphere.commons.user.SessionUser;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.dto.UserDTO;\nimport io.metersphere.log.annotation.MsAuditLog;\nimport io.metersphere.request.AuthUserIssueRequest;\nimport io.metersphere.request.member.EditPassWordRequest;\nimport io.metersphere.request.member.EditSeleniumServerRequest;\nimport io.metersphere.request.member.QueryMemberRequest;\nimport io.metersphere.service.BaseUserService;\nimport jakarta.annotation.Resource;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.*;\n\n@RestController\n@RequestMapping(\"/user\")\npublic class BaseUserController {\n    @Resource\n    private BaseUserService baseUserService;\n\n    @GetMapping(\"/ws/current/member/list\")\n    public List<User> getCurrentWorkspaceMember() {\n        SessionUser user = SessionUtils.getUser();\n        Optional<UserGroup> any = user.getUserGroups().stream()\n                .filter(ug -> (ug.getSourceId().equals(SessionUtils.getCurrentWorkspaceId()) || ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n                .findAny();\n        if (any.isEmpty()) {\n            return new ArrayList<>();\n        }\n        QueryMemberRequest request = new QueryMemberRequest();\n        request.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n        return baseUserService.getMemberList(request);\n    }\n\n\n    @GetMapping(\"/switch/source/ws/{sourceId}\")\n    public UserDTO switchWorkspace(@PathVariable(value = \"sourceId\") String sourceId) {\n        baseUserService.switchUserResource(\"workspace\", sourceId, Objects.requireNonNull(SessionUtils.getUser()));\n        return SessionUtils.getUser();\n    }\n\n    @PostMapping(\"/update/current\")\n    @MsAuditLog(module = OperLogModule.PERSONAL_INFORMATION_PERSONAL_SETTINGS, type = OperLogConstants.UPDATE, beforeEvent = \"#msClass.getLogDetails(#user.id)\", content = \"#msClass.getLogDetails(#user.id)\", msClass = BaseUserService.class)\n    public UserDTO updateCurrentUser(@RequestBody User user) {\n        return baseUserService.updateCurrentUser(user);\n    }\n\n    /*\n     * \u4fee\u6539\u5f53\u524d\u7528\u6237\u5bc6\u7801\n     * */\n    @PostMapping(\"/update/password\")\n    @MsAuditLog(module = OperLogModule.SYSTEM_USER, type = OperLogConstants.UPDATE, title = \"\u4e2a\u4eba\u5bc6\u7801\")\n    public int updateCurrentUserPassword(@RequestBody EditPassWordRequest request) {\n        return baseUserService.updateCurrentUserPassword(request);\n    }\n\n\n    @GetMapping(\"/project/member/list\")\n    public List<User> getProjectMemberListAll() {\n        SessionUser user = SessionUtils.getUser();\n        Optional<UserGroup> any = user.getUserGroups().stream()\n                .filter(ug -> (ug.getSourceId().equals(SessionUtils.getCurrentProjectId()) || ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n                .findAny();\n        if (any.isEmpty()) {\n            return new ArrayList<>();\n        }\n        QueryMemberRequest request = new QueryMemberRequest();\n        request.setProjectId(SessionUtils.getCurrentProjectId());\n        return baseUserService.getProjectMemberList(request);\n    }\n\n    @GetMapping(\"/project/member/option\")\n    public List<User> getProjectMemberOption() {\n        return baseUserService.getProjectMemberOption(SessionUtils.getCurrentProjectId());\n    }\n\n    @GetMapping(\"/project/member/{projectId}\")\n    public List<User> getProjectMembers(@PathVariable String projectId) {\n        SessionUser user = SessionUtils.getUser();\n        Optional<UserGroup> any = user.getUserGroups().stream()\n                .filter(ug -> (ug.getSourceId().equals(projectId) || ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n                .findAny();\n        if (any.isEmpty()) {\n            return new ArrayList<>();\n        }\n        QueryMemberRequest request = new QueryMemberRequest();\n        request.setProjectId(projectId);\n        return baseUserService.getProjectMemberList(request);\n    }\n\n    @GetMapping(\"/info\")\n    public UserDTO getUserInfo() {\n        return baseUserService.getUserDTO(SessionUtils.getUserId());\n    }\n\n    /**\n     * \u6839\u636euserId \u83b7\u53d6 user \u6240\u5c5e\u5de5\u4f5c\u7a7a\u95f4\u548c\u6240\u5c5e\u5de5\u4f5c\u9879\u76ee\n     */\n    @GetMapping(\"/get/ws-pj/{userId}\")\n    public Map<Object, Object> getWSAndProjectByUserId(@PathVariable String userId) {\n        return baseUserService.getWSAndProjectByUserId(userId);\n    }\n\n\n    /**\n     * \u914d\u7f6e \u7528\u6237\u7684selenium-server \u5730\u5740 ip:port\n     */\n    @PostMapping(\"/update/selenium-server\")\n    @MsAuditLog(module = OperLogModule.SYSTEM_USER, type = OperLogConstants.UPDATE, title = \"selenium-server\u5730\u5740\")\n    public int updateSeleniumServer(@RequestBody EditSeleniumServerRequest request) {\n        return baseUserService.updateUserSeleniumServer(request);\n    }\n\n    @PostMapping(\"issue/auth\")\n    public void userAuth(@RequestBody AuthUserIssueRequest authUserIssueRequest) {\n        baseUserService.userIssueAuth(authUserIssueRequest);\n    }\n\n    @GetMapping(\"/update/current-by-resource/{resourceId}\")\n    public void updateCurrentUserByResourceId(@PathVariable String resourceId) {\n        baseUserService.updateCurrentUserByResourceId(resourceId);\n    }\n\n    @GetMapping(\"/is/super/{userid}\")\n    public boolean isSuperUser(@PathVariable String userid) {\n        return baseUserService.isSuperUser(userid);\n    }\n}\n", "package io.metersphere.controller;\n\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport io.metersphere.base.domain.Group;\nimport io.metersphere.base.domain.User;\nimport io.metersphere.base.domain.Workspace;\nimport io.metersphere.commons.constants.OperLogConstants;\nimport io.metersphere.commons.constants.OperLogModule;\nimport io.metersphere.commons.constants.PermissionConstants;\nimport io.metersphere.commons.utils.PageUtils;\nimport io.metersphere.commons.utils.Pager;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.dto.GroupDTO;\nimport io.metersphere.dto.GroupPermissionDTO;\nimport io.metersphere.log.annotation.MsAuditLog;\nimport io.metersphere.log.annotation.MsRequestLog;\nimport io.metersphere.request.GroupRequest;\nimport io.metersphere.request.group.EditGroupRequest;\nimport io.metersphere.request.group.EditGroupUserRequest;\nimport io.metersphere.service.GroupService;\nimport jakarta.annotation.Resource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n\n@RequestMapping(\"/user/group\")\n@RestController\npublic class GroupController {\n\n    @Resource\n    private GroupService groupService;\n\n    @PostMapping(\"/get/current/project/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.PROJECT_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<GroupDTO>> getCurrentProjectGroupList(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest request) {\n        request.setGoPage(goPage);\n        request.setPageSize(pageSize);\n        return groupService.getProjectGroupList(request);\n    }\n\n    @GetMapping(\"/get/all\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ, PermissionConstants.SYSTEM_USER_READ, PermissionConstants.WORKSPACE_USER_READ}, logical = Logical.OR)\n    public List<GroupDTO> getAllGroup() {\n        return groupService.getAllGroup();\n    }\n\n    @PostMapping(\"/get\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ, PermissionConstants.SYSTEM_USER_READ, PermissionConstants.WORKSPACE_USER_READ}, logical = Logical.OR)\n    public List<Group> getGroupByType(@RequestBody EditGroupRequest request) {\n        return groupService.getGroupByType(request);\n    }\n\n    @PostMapping(\"/add\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_CREATE, PermissionConstants.PROJECT_GROUP_READ_CREATE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.CREATE, content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public Group addGroup(@RequestBody EditGroupRequest request) {\n        request.setId(UUID.randomUUID().toString());\n        return groupService.addGroup(request);\n    }\n\n    @PostMapping(\"/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_EDIT, PermissionConstants.PROJECT_GROUP_READ_EDIT}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.UPDATE, beforeEvent = \"#msClass.getLogDetails(#request.id)\", content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public void editGroup(@RequestBody EditGroupRequest request) {\n        groupService.editGroup(request);\n    }\n\n    @GetMapping(\"/delete/{id}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_DELETE, PermissionConstants.PROJECT_GROUP_READ_DELETE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.DELETE, beforeEvent = \"#msClass.getLogDetails(#id)\", msClass = GroupService.class)\n    public void deleteGroup(@PathVariable String id) {\n        groupService.deleteGroup(id);\n    }\n\n    @PostMapping(\"/permission\")\n    public GroupPermissionDTO getGroupResource(@RequestBody Group group) {\n        return groupService.getGroupResource(group);\n    }\n\n    @PostMapping(\"/permission/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_SETTING_PERMISSION, PermissionConstants.PROJECT_GROUP_READ_SETTING_PERMISSION}, logical = Logical.OR)\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void editGroupPermission(@RequestBody EditGroupRequest editGroupRequest) {\n        groupService.editGroupPermission(editGroupRequest);\n    }\n\n    @PostMapping(\"/list\")\n    public List<Group> getGroupsByType(@RequestBody GroupRequest request) {\n        return groupService.getGroupsByType(request);\n    }\n\n    @GetMapping(\"/list/ws/{workspaceId}/{userId}\")\n    public List<Group> getWorkspaceMemberGroups(@PathVariable String workspaceId, @PathVariable String userId) {\n        return groupService.getWorkspaceMemberGroups(workspaceId, userId);\n    }\n\n    @GetMapping(\"/list/project/{projectId}/{userId}\")\n    public List<Group> getProjectMemberGroups(@PathVariable String projectId, @PathVariable String userId) {\n        return groupService.getProjectMemberGroups(projectId, userId);\n    }\n\n    @GetMapping(\"/ws/{userId}\")\n    public List<Workspace> getWorkspace(@PathVariable String userId) {\n        return groupService.getWorkspace(userId);\n    }\n\n    @GetMapping(\"/{type}/{id}\")\n    public List<?> getResource(@PathVariable String type, @PathVariable String id) {\n        return groupService.getResource(type, id);\n    }\n\n    @PostMapping(\"/current/project/user/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.PROJECT_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<User>> getCurrentProjectGroupUser(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest editGroupRequest) {\n        editGroupRequest.setOnlyQueryCurrentProject(true);\n        if (StringUtils.isBlank(editGroupRequest.getProjectId())) {\n            editGroupRequest.setProjectId(SessionUtils.getCurrentProjectId());\n        }\n        Page<Object> page = PageHelper.startPage(goPage, pageSize, true);\n        return PageUtils.setPageInfo(page, groupService.getGroupUser(editGroupRequest));\n    }\n\n    @GetMapping(\"/rm/{userId}/{groupId}\")\n    public void removeGroupMember(@PathVariable String userId, @PathVariable String groupId) {\n        groupService.removeGroupMember(userId, groupId);\n    }\n\n    @GetMapping(\"/source/{userId}/{groupId}\")\n    public List<?> getGroupSource(@PathVariable String userId, @PathVariable String groupId) {\n        return groupService.getGroupSource(userId, groupId);\n    }\n\n    @PostMapping(\"/add/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void addGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.addGroupUser(request);\n    }\n\n    @PostMapping(\"/edit/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_EDIT, PermissionConstants.PROJECT_GROUP_READ_EDIT}, logical = Logical.OR)\n    public void editGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.editGroupUser(request);\n    }\n\n    @GetMapping(\"/workspace/list/resource/{groupId}/{groupType}\")\n    public Object getWorkspaceResourceByGroup(@PathVariable String groupId, @PathVariable String groupType) {\n        return groupService.getWorkspaceResourceByGroup(groupId, groupType);\n    }\n}\n", "package io.metersphere.controller;\n\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport io.metersphere.base.domain.Group;\nimport io.metersphere.base.domain.User;\nimport io.metersphere.base.domain.UserGroup;\nimport io.metersphere.base.domain.Workspace;\nimport io.metersphere.commons.constants.OperLogConstants;\nimport io.metersphere.commons.constants.OperLogModule;\nimport io.metersphere.commons.constants.PermissionConstants;\nimport io.metersphere.commons.constants.UserGroupConstants;\nimport io.metersphere.commons.user.SessionUser;\nimport io.metersphere.commons.utils.PageUtils;\nimport io.metersphere.commons.utils.Pager;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.log.annotation.MsRequestLog;\nimport io.metersphere.request.GroupRequest;\nimport io.metersphere.request.group.EditGroupRequest;\nimport io.metersphere.request.group.EditGroupUserRequest;\nimport io.metersphere.dto.GroupDTO;\nimport io.metersphere.dto.GroupPermissionDTO;\nimport io.metersphere.log.annotation.MsAuditLog;\nimport io.metersphere.service.GroupService;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.springframework.web.bind.annotation.*;\n\nimport jakarta.annotation.Resource;\n\nimport java.util.*;\n\n\n@RequestMapping(\"/user/group\")\n@RestController\npublic class GroupController {\n\n    @Resource\n    private GroupService groupService;\n\n    @PostMapping(\"/get/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<GroupDTO>> getGroupList(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest request) {\n        request.setGoPage(goPage);\n        request.setPageSize(pageSize);\n        return groupService.getGroupList(request);\n    }\n\n    @GetMapping(\"/get/all\")\n    public List<GroupDTO> getAllGroup() {\n        SessionUser user = SessionUtils.getUser();\n        Optional<UserGroup> any = user.getUserGroups().stream()\n                .filter(ug -> (ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n                .findAny();\n        if (any.isEmpty()) {\n            return new ArrayList<>();\n        }\n        return groupService.getAllGroup();\n    }\n\n    @PostMapping(\"/get\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ, PermissionConstants.SYSTEM_USER_READ, PermissionConstants.WORKSPACE_USER_READ}, logical = Logical.OR)\n    public List<Group> getGroupByType(@RequestBody EditGroupRequest request) {\n        return groupService.getGroupByType(request);\n    }\n\n    @PostMapping(\"/add\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_CREATE, PermissionConstants.PROJECT_GROUP_READ_CREATE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.CREATE, content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public Group addGroup(@RequestBody EditGroupRequest request) {\n        request.setId(UUID.randomUUID().toString());\n        return groupService.addGroup(request);\n    }\n\n    @PostMapping(\"/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_EDIT, PermissionConstants.PROJECT_GROUP_READ_EDIT}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.UPDATE, beforeEvent = \"#msClass.getLogDetails(#request.id)\", content = \"#msClass.getLogDetails(#request.id)\", msClass = GroupService.class)\n    public void editGroup(@RequestBody EditGroupRequest request) {\n        groupService.editGroup(request);\n    }\n\n    @GetMapping(\"/delete/{id}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_DELETE, PermissionConstants.PROJECT_GROUP_READ_DELETE}, logical = Logical.OR)\n    @MsAuditLog(module = OperLogModule.GROUP_PERMISSION, type = OperLogConstants.DELETE, beforeEvent = \"#msClass.getLogDetails(#id)\", msClass = GroupService.class)\n    public void deleteGroup(@PathVariable String id) {\n        groupService.deleteGroup(id);\n    }\n\n    @PostMapping(\"/permission\")\n    public GroupPermissionDTO getGroupResource(@RequestBody Group group) {\n        return groupService.getGroupResource(group);\n    }\n\n    @PostMapping(\"/permission/edit\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ_SETTING_PERMISSION, PermissionConstants.PROJECT_GROUP_READ_SETTING_PERMISSION}, logical = Logical.OR)\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void editGroupPermission(@RequestBody EditGroupRequest editGroupRequest) {\n        groupService.editGroupPermission(editGroupRequest);\n    }\n\n    @GetMapping(\"/all/{userId}\")\n    @RequiresPermissions(PermissionConstants.SYSTEM_USER_READ_EDIT)\n    public List<Map<String, Object>> getAllUserGroup(@PathVariable(\"userId\") String userId) {\n        return groupService.getAllUserGroup(userId);\n    }\n\n    @PostMapping(\"/list\")\n    public List<Group> getGroupsByType(@RequestBody GroupRequest request) {\n        return groupService.getGroupsByType(request);\n    }\n\n    @GetMapping(\"/list/ws/{workspaceId}/{userId}\")\n    public List<Group> getWorkspaceMemberGroups(@PathVariable String workspaceId, @PathVariable String userId) {\n        return groupService.getWorkspaceMemberGroups(workspaceId, userId);\n    }\n\n    @GetMapping(\"/list/project/{projectId}/{userId}\")\n    public List<Group> getProjectMemberGroups(@PathVariable String projectId, @PathVariable String userId) {\n        return groupService.getProjectMemberGroups(projectId, userId);\n    }\n\n    @GetMapping(\"/ws/{userId}\")\n    public List<Workspace> getWorkspace(@PathVariable String userId) {\n        return groupService.getWorkspace(userId);\n    }\n\n    @GetMapping(\"/{type}/{id}\")\n    public List<?> getResource(@PathVariable String type, @PathVariable String id) {\n        return groupService.getResource(type, id);\n    }\n\n    @PostMapping(\"/user/{goPage}/{pageSize}\")\n    @RequiresPermissions(value = {PermissionConstants.SYSTEM_GROUP_READ}, logical = Logical.OR)\n    public Pager<List<User>> getGroupUser(@PathVariable int goPage, @PathVariable int pageSize, @RequestBody EditGroupRequest editGroupRequest) {\n        Page<Object> page = PageHelper.startPage(goPage, pageSize, true);\n        return PageUtils.setPageInfo(page, groupService.getGroupUser(editGroupRequest));\n    }\n\n    @GetMapping(\"/rm/{userId}/{groupId}\")\n    @RequiresPermissions(PermissionConstants.SYSTEM_GROUP_READ)\n    public void removeGroupMember(@PathVariable String userId, @PathVariable String groupId) {\n        groupService.removeGroupMember(userId, groupId);\n    }\n\n    @GetMapping(\"/source/{userId}/{groupId}\")\n    public List<?> getGroupSource(@PathVariable String userId, @PathVariable String groupId) {\n        return groupService.getGroupSource(userId, groupId);\n    }\n\n    @PostMapping(\"/add/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void addGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.addGroupUser(request);\n    }\n\n    @PostMapping(\"/edit/member\")\n    @MsRequestLog(module = OperLogModule.GROUP_PERMISSION)\n    public void editGroupUser(@RequestBody EditGroupUserRequest request) {\n        groupService.editGroupUser(request);\n    }\n}\n"], "filenames": ["framework/sdk-parent/sdk/src/main/java/io/metersphere/controller/BaseUserController.java", "project-management/backend/src/main/java/io/metersphere/controller/GroupController.java", "system-setting/backend/src/main/java/io/metersphere/controller/GroupController.java"], "buggy_code_start_loc": [3, 94, 6], "buggy_code_end_loc": [70, 99, 93], "fixing_code_start_loc": [4, 93, 7], "fixing_code_end_loc": [93, 93, 104], "type": "CWE-862", "message": "MeterSphere is an open-source continuous testing platform. Prior to version 2.10.4 LTS, some interfaces of the Cloud version of MeterSphere do not have configuration permissions, and are sensitively leaked by attackers. Version 2.10.4 LTS contains a patch for this issue.", "other": {"cve": {"id": "CVE-2023-38494", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-04T16:15:10.177", "lastModified": "2023-08-08T20:24:08.943", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MeterSphere is an open-source continuous testing platform. Prior to version 2.10.4 LTS, some interfaces of the Cloud version of MeterSphere do not have configuration permissions, and are sensitively leaked by attackers. Version 2.10.4 LTS contains a patch for this issue."}, {"lang": "es", "value": "MeterSphere es una plataforma de pruebas continuas de c\u00f3digo abierto. Antes de la versi\u00f3n 2.10.4 LTS, algunas interfaces de la versi\u00f3n Cloud de MeterSphere no tienen permisos de configuraci\u00f3n, y son filtradas sensiblemente por los atacantes. La versi\u00f3n 2.10.4 LTS contiene un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:metersphere:metersphere:*:*:*:*:lts:*:*:*", "versionEndExcluding": "2.10.4", "matchCriteriaId": "34BBA850-D024-4FED-9794-74C62218EF49"}]}]}], "references": [{"url": "https://github.com/metersphere/metersphere/commit/a23f75d93b666901fd148d834df9384f6f24cf28", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/metersphere/metersphere/security/advisories/GHSA-fjp5-95pv-5253", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/metersphere/metersphere/commit/a23f75d93b666901fd148d834df9384f6f24cf28"}}