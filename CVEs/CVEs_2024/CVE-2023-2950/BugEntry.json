{"buggy_code": ["<?php\n\n/**\n * OnsiteDocumentController.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2019 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n/** import supporting libraries */\nrequire_once(\"AppBasePortalController.php\");\nrequire_once(\"Model/OnsiteDocument.php\");\n\n/**\n * OnsiteDocumentController is the controller class for the OnsiteDocument object.  The\n * controller is responsible for processing input from the user, reading/updating\n * the model as necessary and displaying the appropriate view.\n *\n * @package Patient Portal::Controller\n * @author ClassBuilder\n * @version 1.0\n */\nclass OnsiteDocumentController extends AppBasePortalController\n{\n    /**\n     * Override here for any controller-specific functionality\n     *\n     * @inheritdocs\n     */\n    protected function Init()\n    {\n        parent::Init();\n    }\n\n    /**\n     * Displays a list view of OnsiteDocument objects\n     */\n    public function ListView()\n    {\n        $recid = $pid = $user = $encounter =  0;\n        $is_module = $catid = 0;\n        $is_portal = GlobalConfig::$PORTAL;\n        $docid = $new_filename = \"\";\n        // get latest help template id\n        $help_id = sqlQuery('SELECT * FROM `document_templates` WHERE `template_name` = ? Order By modified_date DESC Limit 1', array('Help'))['id'] ?? 0;\n\n        if (isset($_GET['pid'])) {\n            $pid = (int) $_GET['pid'];\n        }\n\n        // only allow patient to see themselves\n        if (!empty($GLOBALS['bootstrap_pid'])) {\n            $pid = $GLOBALS['bootstrap_pid'];\n        }\n\n        if (isset($_GET['user'])) {\n            $user = $_GET['user'];\n        }\n\n        if (isset($_GET['docid'])) {\n            $docid = $_GET['docid'];\n        }\n\n        if (isset($_GET['enc'])) {\n            $encounter = (int) $_GET['enc'];\n        }\n\n        if (isset($_GET['recid'])) {\n            $recid = (int) $_GET['recid'];\n        }\n\n        if (isset($_GET['is_module'])) {\n            $is_module = $_GET['is_module'];\n        }\n\n        if (isset($_GET['catid'])) {\n            $catid = $_GET['catid'];\n        }\n        if (isset($_GET['new'])) {\n            $new_filename = $_GET['new'];\n        }\n        $this->Assign('recid', $recid);\n        $this->Assign('help_id', $help_id);\n        $this->Assign('cpid', $pid);\n        $this->Assign('cuser', $user);\n        $this->Assign('encounter', $encounter);\n        $this->Assign('docid', $docid);\n        $this->Assign('is_module', $is_module);\n        $this->Assign('is_portal', $is_portal);\n        $this->Assign('save_catid', $catid);\n        $this->Assign('new_filename', $new_filename);\n        $this->Render();\n    }\n\n    /**\n     * API Method queries for OnsiteDocument records and render as JSON\n     */\n    public function Query()\n    {\n        try {\n            $criteria = new OnsiteDocumentCriteria();\n            $pid = RequestUtil::Get('patientId');\n\n            // only allow patient to see themself\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                $pid = $GLOBALS['bootstrap_pid'];\n            }\n\n            $criteria->Pid_Equals = $pid;\n            $recid = RequestUtil::Get('recid');\n            if ($recid > 0) {\n                $criteria->Id_Equals = $recid;\n            }\n\n            $filter = RequestUtil::Get('filter');\n            if ($filter) {\n                $criteria->AddFilter(\n                    new CriteriaFilter('Id,Pid,Facility,Provider,Encounter,CreateDate,DocType,PatientSignedStatus,PatientSignedTime,AuthorizeSignedTime,\n\t\t\t\t\t\tAcceptSignedStatus,AuthorizingSignator,ReviewDate,DenialReason,AuthorizedSignature,PatientSignature,FullDocument,FileName,FilePath', '%' . $filter . '%')\n                );\n            }\n\n            // TODO: this is generic query filtering based only on criteria properties\n            foreach (array_keys($_REQUEST) as $prop) {\n                $prop_normal = ucfirst($prop);\n                $prop_equals = $prop_normal . '_Equals';\n\n                if (property_exists($criteria, $prop_normal)) {\n                    $criteria->$prop_normal = RequestUtil::Get($prop);\n                } elseif (property_exists($criteria, $prop_equals)) {\n                    // this is a convenience so that the _Equals suffix is not needed\n                    $criteria->$prop_equals = RequestUtil::Get($prop);\n                }\n            }\n\n            $output = new stdClass();\n\n            // if a sort order was specified then specify in the criteria\n            $output->orderBy = RequestUtil::Get('orderBy');\n            $output->orderDesc = RequestUtil::Get('orderDesc') != '';\n            if ($output->orderBy) {\n                $criteria->SetOrder($output->orderBy, $output->orderDesc);\n            }\n\n            $page = RequestUtil::Get('page');\n\n            if (!empty($page)) {\n                // if page is specified, use this instead (at the expense of one extra count query)\n                $pagesize = $this->GetDefaultPageSize();\n\n                $onsitedocuments = $this->Phreezer->Query('OnsiteDocument', $criteria)->GetDataPage($page, $pagesize);\n                $output->rows = $onsitedocuments->ToObjectArray(true, $this->SimpleObjectParams());\n                $output->totalResults = $onsitedocuments->TotalResults;\n                $output->totalPages = $onsitedocuments->TotalPages;\n                $output->pageSize = $onsitedocuments->PageSize;\n                $output->currentPage = $onsitedocuments->CurrentPage;\n            } else {\n                // return all results\n                $onsitedocuments = $this->Phreezer->Query('OnsiteDocument', $criteria);\n                $output->rows = $onsitedocuments->ToObjectArray(true, $this->SimpleObjectParams());\n                $output->totalResults = count($output->rows);\n                $output->totalPages = 1;\n                $output->pageSize = $output->totalResults;\n                $output->currentPage = 1;\n            }\n\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * @return void\n     */\n    public function SingleView()\n    {\n        $rid = $pid = $user = $encounter = 0;\n        if (isset($_GET['id'])) {\n            $rid = (int) $_GET['id'];\n        }\n\n        if (isset($_GET['pid'])) {\n            $pid = (int) $_GET['pid'];\n        }\n\n        // only allow patient to see themself\n        if (!empty($GLOBALS['bootstrap_pid'])) {\n            $pid = $GLOBALS['bootstrap_pid'];\n        }\n\n        if (isset($_GET['user'])) {\n            $user = $_GET['user'];\n        }\n\n        if (isset($_GET['enc'])) {\n            $encounter = $_GET['enc'];\n        }\n\n        $this->Assign('recid', $rid);\n        $this->Assign('cpid', $pid);\n        $this->Assign('cuser', $user);\n        $this->Assign('encounter', $encounter);\n        $this->Render();\n    }\n    /**\n     * API Method retrieves a single OnsiteDocument record and render as JSON\n     */\n    public function Read()\n    {\n        try {\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n\n            // only allow patient to see themself\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                if ($GLOBALS['bootstrap_pid'] != $onsitedocument->Pid) {\n                    $error = 'Unauthorized';\n                    throw new Exception($error);\n                }\n            }\n\n            $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method inserts a new OnsiteDocument record and render response as JSON\n     */\n    public function Create()\n    {\n        try {\n            $json = json_decode(RequestUtil::GetBody());\n\n            if (!$json) {\n                throw new Exception('The request body does not contain valid JSON');\n            }\n\n            $onsitedocument = new OnsiteDocument($this->Phreezer);\n\n            // only allow patient to add to themselves\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                $onsitedocument->Pid = $GLOBALS['bootstrap_pid'];\n            } else {\n                $onsitedocument->Pid = $this->SafeGetVal($json, 'pid');\n            }\n\n            if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n                $decode = $this->SafeGetVal($json, 'fullDocument');\n                $k = (int)$this->SafeGetVal($json, 'csrf_token_form')[0];\n                $json->fullDocument = $this->decode($decode, $k);\n            }\n\n            $onsitedocument->Facility = $this->SafeGetVal($json, 'facility');\n            $onsitedocument->Provider = $this->SafeGetVal($json, 'provider');\n            $onsitedocument->Encounter = $this->SafeGetVal($json, 'encounter');\n            $onsitedocument->CreateDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'createDate')));\n            $onsitedocument->DocType = $this->SafeGetVal($json, 'docType');\n            $onsitedocument->PatientSignedStatus = $this->SafeGetVal($json, 'patientSignedStatus');\n            $onsitedocument->PatientSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'patientSignedTime')));\n            $onsitedocument->AuthorizeSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'authorizeSignedTime')));\n            $onsitedocument->AcceptSignedStatus = $this->SafeGetVal($json, 'acceptSignedStatus');\n            $onsitedocument->AuthorizingSignator = $this->SafeGetVal($json, 'authorizingSignator');\n            $onsitedocument->ReviewDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'reviewDate')));\n            $onsitedocument->DenialReason = $this->SafeGetVal($json, 'denialReason');\n            $onsitedocument->AuthorizedSignature = $this->SafeGetVal($json, 'authorizedSignature');\n            $onsitedocument->PatientSignature = $this->SafeGetVal($json, 'patientSignature');\n            $onsitedocument->FullDocument = $this->SafeGetVal($json, 'fullDocument');\n            $onsitedocument->FileName = $this->SafeGetVal($json, 'fileName');\n            $onsitedocument->FilePath = $this->SafeGetVal($json, 'filePath');\n\n            $onsitedocument->Validate();\n            $errors = $onsitedocument->GetValidationErrors();\n\n            if (count($errors) > 0) {\n                $this->RenderErrorJSON('Please check the form for errors', $errors);\n            } else {\n                $onsitedocument->Save();\n                $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method updates an existing OnsiteDocument record and render response as JSON\n     */\n    public function Update()\n    {\n        try {\n            $json = json_decode(RequestUtil::GetBody());\n\n            if (!$json) {\n                throw new Exception('The request body does not contain valid JSON');\n            }\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n\n            // only allow patient to update themselves (part 1)\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                if ($GLOBALS['bootstrap_pid'] != $onsitedocument->Pid) {\n                    $error = 'Unauthorized';\n                    throw new Exception($error);\n                }\n            }\n\n            // only allow patient to update themselves (part 2)\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                $onsitedocument->Pid = $GLOBALS['bootstrap_pid'];\n            } else {\n                $onsitedocument->Pid = $this->SafeGetVal($json, 'pid', $onsitedocument->Pid);\n            }\n\n            if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n                $decode = $this->SafeGetVal($json, 'fullDocument');\n                $k = (int)$this->SafeGetVal($json, 'csrf_token_form')[0];\n                $json->fullDocument = $this->decode($decode, $k);\n            }\n\n            $onsitedocument->Facility = $this->SafeGetVal($json, 'facility', $onsitedocument->Facility);\n            $onsitedocument->Provider = $this->SafeGetVal($json, 'provider', $onsitedocument->Provider);\n            $onsitedocument->Encounter = $this->SafeGetVal($json, 'encounter', $onsitedocument->Encounter);\n            $onsitedocument->CreateDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'createDate', $onsitedocument->CreateDate)));\n            $onsitedocument->DocType = $this->SafeGetVal($json, 'docType', $onsitedocument->DocType);\n            $onsitedocument->PatientSignedStatus = $this->SafeGetVal($json, 'patientSignedStatus', $onsitedocument->PatientSignedStatus);\n            $onsitedocument->PatientSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'patientSignedTime', $onsitedocument->PatientSignedTime)));\n            $onsitedocument->AuthorizeSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'authorizeSignedTime', $onsitedocument->AuthorizeSignedTime)));\n            $onsitedocument->AcceptSignedStatus = $this->SafeGetVal($json, 'acceptSignedStatus', $onsitedocument->AcceptSignedStatus);\n            $onsitedocument->AuthorizingSignator = $this->SafeGetVal($json, 'authorizingSignator', $onsitedocument->AuthorizingSignator);\n            $onsitedocument->ReviewDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'reviewDate', $onsitedocument->ReviewDate)));\n            $onsitedocument->DenialReason = $this->SafeGetVal($json, 'denialReason', $onsitedocument->DenialReason);\n            $onsitedocument->AuthorizedSignature = $this->SafeGetVal($json, 'authorizedSignature', $onsitedocument->AuthorizedSignature);\n            $onsitedocument->PatientSignature = $this->SafeGetVal($json, 'patientSignature', $onsitedocument->PatientSignature);\n            $onsitedocument->FullDocument = $this->SafeGetVal($json, 'fullDocument', $onsitedocument->FullDocument);\n            $onsitedocument->FileName = $this->SafeGetVal($json, 'fileName', $onsitedocument->FileName);\n            $onsitedocument->FilePath = $this->SafeGetVal($json, 'filePath', $onsitedocument->FilePath);\n\n            $onsitedocument->Validate();\n            $errors = $onsitedocument->GetValidationErrors();\n\n            if (count($errors) > 0) {\n                $this->RenderErrorJSON('Please check the form for errors', $errors);\n            } else {\n                $onsitedocument->Save();\n                $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method deletes an existing OnsiteDocument record and render response as JSON\n     */\n    public function Delete()\n    {\n        try {\n            // TODO: if a soft delete is prefered, change this to update the deleted flag instead of hard-deleting\n\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n\n            // only allow patient to delete themselves\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                if ((int)$GLOBALS['bootstrap_pid'] !== (int)$onsitedocument->Pid) {\n                    $error = 'Unauthorized';\n                    throw new Exception($error);\n                }\n            }\n\n            $onsitedocument->Delete();\n\n            $output = new stdClass();\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * @param $encoded\n     * @param $v\n     * @return bool|string\n     */\n    private function decode($encoded, $v): bool|string\n    {\n        $encoded = base64_decode($encoded);\n        $decoded = \"\";\n        for ($i = 0; $i < strlen($encoded); $i++) {\n            $b = ord($encoded[$i]);\n            $a = $b ^ $v;\n            $decoded .= chr($a);\n        }\n        return base64_decode(base64_decode($decoded));\n    }\n}\n", "/**\n * View logic for OnsiteDocuments\n *\n * application logic specific to the OnsiteDocument listing page\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2022 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nvar page = {\n    onsiteDocuments: new model.OnsiteDocumentCollection(),\n    collectionView: null,\n    onsiteDocument: null,\n    modelView: null,\n    isInitialized: false,\n    isInitializing: false,\n    isSaved: true,\n    isNewDoc: false,\n    fetchParams: {filter: '', orderBy: '', orderDesc: '', page: 1, patientId: cpid, recid: recid},\n    fetchInProgress: false,\n    dialogIsOpen: false,\n    isLocked: false,\n    isCharted: false,\n    isDashboard: (!isModule && !isPortal),\n    isQuestionnaire: '',\n    encounterFormId: 0,\n    isFrameForm: 0,\n    encounterFormName: \"\",\n    formOrigin: 0, // default portal\n    presentPatientSignature: false,\n    presentAdminSignature: false,\n    presentWitnessSignature: false,\n    signaturesRequired: false,\n\n    init: function () {\n        // ensure initialization only occurs once\n        if (page.isInitialized || page.isInitializing) {\n            return;\n        }\n        page.isInitializing = true;\n\n        if (!$.isReady && console) {\n            console.warn('page was initialized before dom is ready.  views may not render properly.');\n        }\n\n        // make the new button clickable\n        $(\"#newOnsiteDocumentButton\").click(function (e) {\n            e.preventDefault();\n            page.showDetailDialog();\n        });\n\n        // initialize the collection view\n        this.collectionView = new view.CollectionView({\n            el: $(\"#onsiteDocumentCollectionContainer\"),\n            templateEl: $(\"#onsiteDocumentCollectionTemplate\"),\n            collection: page.onsiteDocuments\n        });\n\n        // initialize the search filter\n        $('#filter').change(function (obj) {\n            page.fetchParams.filter = $('#filter').val();\n            page.fetchParams.page = 1;\n            page.fetchOnsiteDocuments(page.fetchParams);\n        });\n\n        // make the rows clickable ('rendered' is a custom event, not a standard backbone event)\n        this.collectionView.on('rendered', function () {\n            if (page.isDashboard) {\n                $(\"#topnav\").hide();\n            }\n            // attach click handler to the table rows for editing\n            $('table.collection tbody tr').click(function (e) {\n                e.preventDefault();\n                $(\"html, body\").animate({\n                    scrollTop: 0\n                }, \"slow\");\n                let m = page.onsiteDocuments.get(this.id);\n                page.showDetailDialog(m);\n            });\n            // make the headers clickable for sorting\n            $('table.collection thead tr th').unbind().on('click', function (e) {\n                e.preventDefault();\n                let prop = this.id.replace('header_', '');\n                // toggle the ascending/descending before we change the sort prop\n                page.fetchParams.orderDesc = (prop == page.fetchParams.orderBy && !page.fetchParams.orderDesc) ? '1' : '';\n                page.fetchParams.orderBy = prop;\n                page.fetchParams.page = 1;\n                page.fetchOnsiteDocuments(page.fetchParams);\n            });\n            // attach click handlers to the pagination controls\n            $('.pageButton').click(function (e) {\n                e.preventDefault();\n                page.fetchParams.page = this.id.substr(5);\n                page.fetchOnsiteDocuments(page.fetchParams);\n            });\n            $('.template-item').unbind().on('click', function (e) {\n                if (!isModule) {\n                    $(\"#topnav\").hide();\n                    parent.document.getElementById('topNav').classList.add('collapse');\n                }\n            });\n            page.isInitialized = true;\n            page.isInitializing = false;\n            // if dashboard let's open first doc for review.\n            if (page.isDashboard) {\n                $('table.collection tbody tr:first').click();\n            }\n        });\n// ---------  Get Collection ------------------------//\n        this.fetchOnsiteDocuments(page.fetchParams);\n\n        // initialize the model view\n        this.modelView = new view.ModelView({\n            el: $(\"#onsiteDocumentModelContainer\")\n        });\n\n        // tell the model view where it's template is located\n        this.modelView.templateEl = $(\"#onsiteDocumentModelTemplate\");\n\n        // template rendered ready\n        this.modelView.on('rendered', function () {\n            $('#templatecontent').on('focus', \".datepicker:not(.hasDatepicker)\", function () {\n                $(\".datepicker\").datetimepicker({\n                    i18n: {\n                        en: {\n                            months: datepicker_xlMonths,\n                            dayOfWeekShort: datepicker_xlDayofwkshort,\n                            dayOfWeek: datepicker_xlDayofwk\n                        },\n                    },\n                    yearStart: datepicker_yearStart,\n                    rtl: datepicker_rtl,\n                    format: datepicker_format,\n                    scrollInput: datepicker_scrollInput,\n                    scrollMonth: datepicker_scrollMonth,\n                    timepicker: false\n                });\n            })\n            $(\"#templatecontent\").on('focus', \".datetimepicker:not(.hasDatetimepicker)\", function () {\n                $(\".datetimepicker\").datetimepicker({\n                    i18n: {\n                        en: {\n                            months: datetimepicker_xlMonths,\n                            dayOfWeekShort: datetimepicker_xlDayofwkshort,\n                            dayOfWeek: datetimepicker_xlDayofwk\n                        },\n                    },\n                    yearStart: datetimepicker_yearStart,\n                    rtl: datetimepicker_rtl,\n                    format: datetimepicker_format,\n                    step: datetimepicker_step,\n                    scrollInput: datepicker_scrollInput,\n                    scrollMonth: datepicker_scrollMonth,\n                    timepicker: true\n                });\n            });\n\n            docid = page.onsiteDocument.get('docType');\n            page.isLocked = (page.onsiteDocument.get('denialReason') === 'Locked');\n            (page.isLocked) ? $(\"#printTemplate\").show() : $(\"#printTemplate\").hide();\n            $(\"#chartHistory\").hide();\n\n\n            page.getDocument(page.onsiteDocument.get('docType'), cpid, page.onsiteDocument.get('filePath'));\n            if (page.isDashboard) { // review\n                flattenDocument();\n            }\n            pageAudit.fetchParams.doc = page.onsiteDocument.get('id');\n            pageAudit.fetchOnsitePortalActivities(pageAudit.fetchParams);\n\n            if (page.isLocked) {\n                $('#patientSignature').off();\n                $('#patientSignature').css('cursor', 'default');\n                $('#adminSignature').off();\n                $('#adminSignature').css('cursor', 'default');\n                $('#witnessSignature').css('cursor', 'default');\n                $('#witnessSignature').off();\n            } else if (!isModule) {\n                // disable signatures in appropriate views\n                if (!isPortal) {\n                    $('#patientSignature').css('cursor', 'default');\n                    $('#patientSignature').off();\n                    $('#witnessSignature').css('cursor', 'default');\n                    $('#witnessSignature').off();\n                } else {\n                    $('#adminSignature').css('cursor', 'default');\n                    $('#adminSignature').off();\n                }\n            }\n            if (!isPortal) {\n                $(\"#signTemplate\").hide();\n                $(\"#Help\").hide();\n                $(\"#showNav\").hide();\n                if (page.isCharted || page.isLocked) {\n                    $(\"#chartTemplate\").hide();\n                    $(\"#chartHistory\").hide();\n                    page.encounterFormName = '';\n                    page.isFrameForm = 0;\n                } else {\n                    $(\"#chartTemplate\").show();\n                }\n                (isModule || page.isDashboard) ? $(\"#printTemplate\").show() : $(\"#printTemplate\").hide();\n                $(\"#submitTemplate\").hide();\n                $(\"#sendTemplate\").hide();\n                $(\"#downloadTemplate\").hide();\n                isModule ? $(\"#dismissOnsiteDocumentButton\").show() : $(\"#dismissOnsiteDocumentButton\").hide();\n                ((isModule || page.isFrameForm) && !page.isLocked) ? $(\"#saveTemplate\").show() : $(\"#saveTemplate\").hide();\n                isModule ? $(\"#homeTemplate\").show() : $(\"#homeTemplate\").hide();\n                (page.encounterFormName === 'HIS' && !page.isLocked) ? $(\"#chartHistory\").show() : $(\"#chartHistory\").hide();\n\n                $(\"#chartTemplate\").unbind().on('click', function (e) {\n                    e.preventDefault();\n                    if (page.isFrameForm) {\n                        let formFrame = document.getElementById('encounterForm');\n                        $(window).one(\"message onmessage\", (e) => {\n                            if (event.origin !== window.location.origin) {\n                                signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                                return false;\n                            }\n                            if (isModule || page.isFrameForm) {\n                                model.reloadCollectionOnModelUpdate = false;\n                            }\n                            page.encounterFormId = e.originalEvent.data.formid;\n                            page.onsiteDocument.set('encounter', page.encounterFormId);\n                            let url = '';\n                            if (page.encounterFormName.startsWith('LBF') || page.encounterFormName.startsWith('HIS')) {\n                                url = webroot_url +\n                                    \"/interface/forms/LBF/printable.php?return_content=\" +\n                                    \"&formname=\" + encodeURIComponent(page.encounterFormName) +\n                                    \"&formid=\" + encodeURIComponent(page.encounterFormId) +\n                                    \"&visitid=0&patientid=\" + encodeURIComponent(cpid);\n                            } else {\n                                // first, ensure form name is valid\n                                if (!page.verifyValidEncounterForm(page.encounterFormName)) {\n                                    signerAlertMsg(\"There is an issue loading form. Form does not exist.\");\n                                    return false;\n                                }\n                                url = webroot_url +\n                                    \"/interface/forms/\" + encodeURIComponent(page.encounterFormName) + \"/patient_portal.php\" +\n                                    \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                if (page.isQuestionnaire) {\n                                    url = webroot_url +\n                                        \"/interface/forms/questionnaire_assessments/patient_portal.php\" +\n                                        \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                }\n                            }\n                            fetch(url).then(response => {\n                                if (!response.ok) {\n                                    throw new Error('Network Error.');\n                                }\n                                return response.json()\n                            }).then(content => {\n                                flattenDocument();\n                                let templateContents = document.getElementById('templatecontent').innerHTML;\n                                templateContents = templateContents.replace(/<script.*?>.*?<\\/script>/ig, '');\n                                templateContents = templateContents.replace(/(<\\/iframe>)/g, '');\n                                content = templateContents.replace(/(<iframe[^>]+>)/g, content);\n                                if (content) {\n                                    page.chartTemplate(content);\n                                }\n                            }).catch(error => {\n                                console.error('Error:', error);\n                                alert(error);\n                            });\n                        });\n                        // request a save for lbf\n                        formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                    } else {\n                        page.chartTemplate('', 'flat');\n                    }\n                });\n\n                $(\"#downloadTemplate\").unbind().on('click', function (e) {\n                    // just render the existing model and not save template.\n                    // For downloads, we just want to give user a chance to dispose/view rendered\n                    // document and leave template intact for further edits before charting.\n                    // I'm still unsure how useful a download is as to when to finish a review, charting document\n                    // is necessary. I know eventually, I can do better:)\n                    e.preventDefault();\n                    if (page.isFrameForm) {\n                        let formFrame = document.getElementById('encounterForm');\n                        let frameDocument = formFrame.contentDocument || formFrame.contentWindow.document;\n                        // we don't want events piling up so this is a one shot.\n                        $(window).one(\"message onmessage\", (e) => {\n                            if (event.origin !== window.location.origin) {\n                                signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                                return false;\n                            }\n                            if (isModule || page.isFrameForm) {\n                                model.reloadCollectionOnModelUpdate = false;\n                            }\n                            page.encounterFormId = e.originalEvent.data.formid;\n                            page.onsiteDocument.set('encounter', page.encounterFormId);\n                            let url = '';\n                            if (page.encounterFormName.startsWith('LBF') || page.encounterFormName.startsWith('HIS')) {\n                                url = webroot_url +\n                                    \"/interface/forms/LBF/printable.php?return_content=\" +\n                                    \"&formname=\" + encodeURIComponent(page.encounterFormName) +\n                                    \"&formid=\" + encodeURIComponent(page.encounterFormId) +\n                                    \"&visitid=0&patientid=\" + encodeURIComponent(cpid);\n                            } else {\n                                // first, ensure form name is valid\n                                if (!page.verifyValidEncounterForm(page.encounterFormName)) {\n                                    signerAlertMsg(\"There is an issue loading form. Form does not exist.\");\n                                    return false;\n                                }\n                                url = webroot_url +\n                                    \"/interface/forms/\" + encodeURIComponent(page.encounterFormName) + \"/patient_portal.php\" +\n                                    \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                if (page.isQuestionnaire) {\n                                    url = webroot_url +\n                                        \"/interface/forms/questionnaire_assessments/patient_portal.php\" +\n                                        \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                }\n                            }\n                            fetch(url).then(response => {\n                                if (!response.ok) {\n                                    throw new Error('Network Error LBF Render.');\n                                }\n                                return response.json();\n                            }).then(documentContents => {\n                                if (documentContents) {\n                                    page.updateModel();\n                                    flattenDocument();\n                                    $(\"#cpid\").val(cpid);\n                                    $(\"#docid\").val(docid);\n                                    $(\"#handler\").val('download');\n                                    $(\"#status\").val('downloaded');\n\n                                    let templateContents = document.getElementById('templatecontent').innerHTML;\n                                    templateContents = templateContents.replace(/(<\\/iframe>)/g, '')\n                                    documentContents = templateContents.replace(/(<iframe[^>]+>)/g, documentContents);\n                                    $(\"#content\").val(documentContents);\n                                    signerAlertMsg(\"Waiting for Download.\", 6500, \"info\");\n                                    $(\"#template\").submit();\n\n                                    page.renderModelView(false);\n                                }\n                            }).catch(error => {\n                                alert(error);\n                                console.error('Error:', error);\n                            });\n                        });\n                        // request a save for lbf\n                        formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                    } else {\n                        // don't save let charting do that.\n                        flattenDocument();\n                        let documentContents = document.getElementById('templatecontent').innerHTML;\n                        $(\"#content\").val(documentContents);\n                        $(\"#template\").submit();\n                        signerAlertMsg(xl('Downloading Document!'), 1000, 'success', 'lg');\n\n                        page.renderModelView(false);\n                    }\n                });\n            } else {\n                $(\"#downloadTemplate\").hide();\n                $(\"#chartTemplate\").hide();\n                $(\"#chartHistory\").hide();\n                page.isLocked ? $(\"#saveTemplate\").hide() : $(\"#saveTemplate\").show();\n                page.isLocked ? $(\"#sendTemplate\").hide() : $(\"#sendTemplate\").show();\n                page.isLocked ? $(\"#submitTemplate\").show() : $(\"#submitTemplate\").hide();\n            }\n\n            $(\"#saveTemplate\").unbind().on('click', function (e) {\n                e.preventDefault();\n                if (page.isFrameForm) {\n                    let formFrame = document.getElementById('encounterForm');\n                    page.encounterFormId = 0;\n                    $(window).one(\"message onmessage\", (e) => {\n                        if (event.origin !== window.location.origin) {\n                            signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                            return false;\n                        }\n                        model.reloadCollectionOnModelUpdate = false;\n                        page.encounterFormId = e.originalEvent.data.formid;\n                        page.onsiteDocument.set('encounter', page.encounterFormId);\n                        if (page.onsiteDocument.get('denialReason') === 'In Review') {\n                            pageAudit.onsitePortalActivity.set('status', 'waiting');\n                        } else {\n                            page.onsiteDocument.set('denialReason', 'Editing');\n                            pageAudit.onsitePortalActivity.set('status', 'editing');\n                        }\n                        // save lbf iframe template\n                        page.updateModel(true);\n                    });\n                    // post to submit and save content remote form.\n                    formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                } else {\n                    if (page.onsiteDocument.get('denialReason') === 'In Review') {\n                        pageAudit.onsitePortalActivity.set('status', 'waiting');\n                    } else {\n                        page.onsiteDocument.set('denialReason', 'Editing');\n                        pageAudit.onsitePortalActivity.set('status', 'editing');\n                    }\n                    page.updateModel(true);\n                }\n            });\n\n            // send to review and save current\n            $(\"#sendTemplate\").unbind().on('click', function (e) {\n                e.preventDefault();\n                if (page.isFrameForm) {\n                    let formFrame = document.getElementById('encounterForm');\n                    let frameDocument = formFrame.contentDocument || formFrame.contentWindow.document;\n                    $(window).one(\"message onmessage\", (e) => {\n                        if (event.origin !== window.location.origin) {\n                            signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                            return false;\n                        }\n                        model.reloadCollectionOnModelUpdate = false;\n                        page.encounterFormId = e.originalEvent.data.formid;\n                        page.onsiteDocument.set('encounter', page.encounterFormId);\n                        pageAudit.onsitePortalActivity.set('status', 'waiting');\n                        page.onsiteDocument.set('denialReason', 'In Review');\n                        // save lbf iframe template\n                        page.updateModel(true);\n                    });\n                    // post to submit and save content remote form.\n                    formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                } else {\n                    model.reloadCollectionOnModelUpdate = false;\n                    var documentContents = document.getElementById('templatecontent').innerHTML;\n                    $(\"#content\").val(documentContents);\n                    pageAudit.onsitePortalActivity.set('status', 'waiting');\n                    page.onsiteDocument.set('denialReason', 'In Review');\n                    page.updateModel(true);\n                }\n            });\n\n            // download from portal\n            $(\"#submitTemplate\").unbind().on('click', function () {\n                if (page.onsiteDocument.get('denialReason') === 'In Review') {\n                    pageAudit.onsitePortalActivity.set('status', 'waiting');\n                } else {\n                    pageAudit.onsitePortalActivity.set('status', 'editing');\n                    flattenDocument();\n                }\n                var documentContents = document.getElementById('templatecontent').innerHTML;\n                $(\"#docid\").val(docid);\n                $(\"#content\").val(documentContents);\n\n                $(\"#template\").submit();\n\n                page.updateModel();\n            });\n\n            $(\"#chartHistory\").unbind().on('click', function () {\n                if (page.isFrameForm) {\n                    let formFrame = document.getElementById('encounterForm');\n                    page.encounterFormId = 0;\n                    $(window).one(\"message onmessage\", (e) => {\n                        if (event.origin !== window.location.origin) {\n                            signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                            return false;\n                        }\n                        // cool it just in case then save history to chart.\n                        setTimeout(\"page.chartHistory();\", 1000);\n                    });\n                    // post to submit\n                    formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                }\n            });\n\n            $('.navCollapse .dropdown-menu>a').on('click', function () {\n                $('.navbar-collapse').collapse('hide');\n            });\n\n            $('.navCollapse li.nav-item>a').on('click', function () {\n                $('.navbar-collapse').collapse('hide');\n            });\n        });\n\n        if (newFilename) { // autoload new on init. once only.\n            page.newDocument(cpid, cuser, newFilename, id);\n            newFilename = '';\n        }\n\n        page.formOrigin = isPortal ? 0 : isModule ? 2 : 1;\n    },\n// page scoped functions\n    verifyValidEncounterForm: function (form) {\n        let formNameValid = false;\n        if (page.isQuestionnaire) {\n            form = 'questionnaire_assessments';\n        }\n        for (let k = 0; k < formNamesWhitelist.length; k++) {\n            if (formNamesWhitelist[k] == form) {\n                formNameValid = true;\n            }\n        }\n        return formNameValid;\n    },\n    handleHistoryView: function () {\n        let historyHide = $('.historyHide');\n        historyHide.toggleClass('d-none');\n        if (historyHide.hasClass('d-none')) {\n            $('.modelContainer').removeClass(\"d-none\");\n            //document.getElementById('verytop').scrollIntoView({behavior: 'smooth'})\n        } else {\n            $('.modelContainer').addClass(\"d-none\");\n        }\n        $('.history-direction').toggleClass(\"fa-arrow-down\").toggleClass(\"fa-arrow-up\");\n    },\n    /**\n     * Fetch the passed in document id in editing status\n     * @param id the document id in edit mode from history\n     */\n    editHistoryDocument: function (id) {\n        event.preventDefault();\n        let m = page.onsiteDocuments.get(id);\n        page.showDetailDialog(m);\n    },\n    chartHistory: function () {\n        let formFrame = document.getElementById('encounterForm');\n        formFrame.contentWindow.postMessage({submitForm: 'history'}, window.location.origin);\n    },\n    chartTemplate: function (documentContents = '', type = '') {\n        if (type === 'flat') {\n            flattenDocument();\n            documentContents = document.getElementById('templatecontent').innerHTML;\n        }\n        $(\"#docid\").val(docid);\n        $(\"#handler\").val('chart');\n        $(\"#status\").val('charted');\n\n        signerAlertMsg(alertMsg1, 3000, \"warning\");\n        let posting = $.post(\"./../lib/doc_lib.php\", {\n            csrf_token_form: csrfTokenDoclib,\n            cpid: cpid,\n            docid: docid,\n            catid: catid,\n            content: documentContents,\n            handler: \"chart\"\n        });\n        posting.done(function (rtn) {\n            if (rtn.indexOf(\"ERROR\") !== -1) {\n                alert(rtn);\n                return false;\n            }\n            page.isCharted = true;\n            page.isLocked = true;\n            $(\"#chartTemplate\").hide();\n            $(\"#chartHistory\").hide();\n            $(\"#saveTemplate\").hide();\n            page.isFrameForm = false;\n            page.encounterFormName = '';\n            if (isModule || page.isFrameForm) {\n                model.reloadCollectionOnModelUpdate = false;\n            }\n            $('#templatecontent').html(documentContents);\n            page.updateModel();\n        });\n    },\n    /**\n     * Fetch the collection data from the server\n     * @param params\n     * @param hideLoader\n     */\n    fetchOnsiteDocuments: function (params, hideLoader) {\n        // persist the params so that paging/sorting/filtering will play together nicely\n        page.fetchParams = params;\n        if (page.fetchInProgress) {\n            if (console) {\n                console.log('suppressing fetch because it is already in progress');\n            }\n        }\n        page.fetchInProgress = true;\n        if (!hideLoader) {\n            app.showProgress('loader');\n        }\n\n        page.onsiteDocuments.fetch({\n            data: params,\n            success: function () {\n                if (page.onsiteDocuments.collectionHasChanged) {\n                }\n                app.hideProgress('loader');\n                page.fetchInProgress = false;\n            },\n            error: function (m, r) {\n                app.appendAlert(app.getErrorMessage(r), 'alert-error', 0, 'collectionAlert');\n                app.hideProgress('loader');\n                page.fetchInProgress = false;\n            }\n        });\n    },\n\n    newDocument: function (pid, user, templateName, template_id) {\n        docid = templateName;\n        cuser = cuser > '' ? cuser : user;\n        cpid = cpid > '0' ? cpid : pid;\n        page.isNewDoc = true;\n        m = new model.OnsiteDocumentModel();\n        m.set('docType', docid);\n        m.set('filePath', template_id);\n        m.set('denialReason', 'New');\n        $('#docid').val('docid');\n        $('#template_id').val('template_id');\n        $('#status').val('New');\n        page.showDetailDialog(m); // saved in rendered event\n    },\n\n    getDocument: function (templateName, pid, template_id) {\n        $(\".helpHide\").removeClass(\"d-none\");\n        $('.modelContainer').removeClass(\"d-none\");\n        $(\"#editorContainer\").removeClass('w-auto').addClass('w-100');\n        let currentName = page.onsiteDocument.get('docType');\n        if (page.onsiteDocument.get('fileName') === '') {\n            page.onsiteDocument.set('fileName', currentName);\n        }\n        let currentNameStyled = currentName.substr(0, currentName.lastIndexOf('.')) || currentName;\n        currentNameStyled = currentNameStyled.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, ' ');\n        if (currentName === 'Help') {\n            $(\"#dismissOnsiteDocumentButton\").addClass(\"d-none\");\n        } else {\n            $(\"#dismissOnsiteDocumentButton\").removeClass(\"d-none\");\n        }\n        page.isFrameForm = 0;\n        page.encounterFormId = 0;\n        page.encounterFormName = '';\n        if (docid !== 'Help') {\n            $(\"#topnav\").hide();\n        }\n        if (currentName === templateName && currentName && !page.isNewDoc) {\n            // update form for any submits.(downloads and prints)\n            $(\"#docid\").val(currentName);\n            // get document template\n            let templateContents = page.onsiteDocument.get('fullDocument');\n            page.encounterFormId = page.onsiteDocument.get(\"encounter\") ?? 0;\n            page.isFrameForm = templateContents.includes(\"</iframe>\");\n            if (page.isFrameForm) {\n                $(\"#saveTemplate\").show();\n                // modify the iFrames url in embedded content\n                const regex = /^.*(page.encounterFormName)=\"(\\w+)/s;\n                let m;\n                if ((m = regex.exec(templateContents)) !== null) {\n                    page.encounterFormName = m[2];\n                } else {\n                    signerAlertMsg(\"There is an issue loading document. Missing Name Error.\");\n                    return false;\n                }\n                templateContents = templateContents.replace(/(isPortal=)\\d/, \"isPortal=\" + isPortal);\n                templateContents = templateContents.replace(/(formOrigin=)\\d/, \"formOrigin=\" + page.formOrigin);\n            }\n            // init editor. if a frame, will use iframe src href.\n            $('#templatecontent').html(templateContents);\n            // normal text/html template directives are still valid with visit LBF.\n            restoreDocumentEdits();\n            $('.signature').each(function () {\n                // set/reset cursor default for all\n                $(this).css('cursor', 'pointer');\n                if (isModule) {\n                    // Make sure current user is set so can witness patient signature\n                    $(this).attr('data-user', cuser);\n                }\n            });\n            initSignerApi();\n        } else { // this makes it a new template\n            var liburl = webRoot + '/portal/lib/download_template.php';\n            $.ajax({\n                type: \"POST\",\n                url: liburl,\n                data: {template_id: template_id, docid: templateName, pid: pid, isModule: isModule},\n                error: function (qXHR, textStatus, errorThrow) {\n                    console.log(\"There was an error: Get Document\");\n                },\n                success: function (templateHtml, textStatus, jqXHR) {\n                    $(\"#docid\").val(templateName);\n                    page.onsiteDocument.set('fileName', templateName);\n                    $('#templatecontent').html(templateHtml);\n                    if (page.isNewDoc) {\n                        page.isNewDoc = false;\n                        page.isSaved = false;\n                        $(\"#printTemplate\").hide();\n                        $(\"#submitTemplate\").hide();\n                        page.onsiteDocument.set('fullDocument', templateHtml);\n                        if (isPortal) {\n                            $('#adminSignature').css('cursor', 'default').off();\n                        } else if (!isModule) {\n                            $('#patientSignature').css('cursor', 'default').off();\n                            $('#witnessSignature').css('cursor', 'default').off();\n                        }\n                        bindFetch();\n\n                        if (page.isFrameForm) {\n                            //$(\"#editorContainer\").removeClass('w-100').addClass('w-auto');\n                        }\n                        // new encounter form\n                        // lbf has own signer instance. no binding here.\n                        // page.encounterFormName & page.isFrameForm is set from template directive\n                        $(function () {\n                            // an iframe in <form><iframe src=???></iframe> this page.\n                            if (page.isFrameForm) {\n                                // a layout form\n                                if (page.encounterFormName) {\n                                    let url = '';\n                                    if (page.encounterFormName.startsWith('LBF') || page.encounterFormName.startsWith('HIS')) {\n                                        // iframe from template directive {EncounterDocument:LBFxxxxx} for a LBF form\n                                        url = webRoot + \"/interface/forms/LBF/new.php\" + \"\" +\n                                            \"?isPortal=\" + encodeURIComponent(isPortal ? 1 : 0) +\n                                            \"&formOrigin=\" + encodeURIComponent(page.formOrigin) +\n                                            \"&formname=\" + encodeURIComponent(page.encounterFormName) + \"&id=0\";\n                                    } else {\n                                        // iframe from template directive {EncounterDocument:xxxxx} for a native form\n                                        // first, ensure form name is valid\n                                        if (!page.verifyValidEncounterForm(page.encounterFormName)) {\n                                            signerAlertMsg(\"There is an issue loading form. Form does not exist.\");\n                                            return false;\n                                        }\n                                        url = webRoot + \"/interface/forms/\" + encodeURIComponent(page.encounterFormName) + \"/new.php\" +\n                                            \"?isPortal=\" + encodeURIComponent(isPortal ? 1 : 0) +\n                                            \"&formOrigin=\" + encodeURIComponent(page.formOrigin) +\n                                            \"&formname=\" + encodeURIComponent(page.encounterFormName) + \"&id=0\";\n                                        if (page.isQuestionnaire) {\n                                            url = webRoot + \"/interface/forms/questionnaire_assessments/questionnaire_assessments.php\" +\n                                                \"?isPortal=\" + encodeURIComponent(isPortal ? 1 : 0) +\n                                                \"&formOrigin=\" + encodeURIComponent(page.formOrigin) +\n                                                \"&formname=\" + encodeURIComponent(page.encounterFormName) + \"&id=0\";\n                                        }\n                                    }\n                                    document.getElementById('encounterForm').src = url;\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        let cdate = page.onsiteDocument.get('createDate');\n        let status = page.onsiteDocument.get('denialReason');\n        let cnt = cdate.toString().indexOf(\"GMT\");\n        if (cnt !== -1) {\n            cdate = cdate.toString().substring(0, cnt);\n        }\n        $('#docPanelHeader').append('&nbsp;<span class=\"bg-light text-dark px-2\">' + jsText(currentNameStyled) + '</span>&nbsp;' +\n            jsText(' Dated: ' + cdate + ' Status: ' + status));\n    }\n    ,\n    /**\n     * show the doc for editing\n     * @param m doc id\n     */\n    showDetailDialog: function (m) {\n        page.onsiteDocument = m ? m : new model.OnsiteDocumentModel();\n        page.modelView.model = page.onsiteDocument;\n        page.dialogIsOpen = true;\n        if (page.onsiteDocument.id === null || page.onsiteDocument.id === '') {\n            page.renderModelView(false);\n        } else {\n            page.onsiteDocument.fetch({\n                success: function () {\n                    if (page.isDashboard || page.onsiteDocument.get('denialReason') === 'Locked') {\n                        page.renderModelView(false); // @todo TBD when should delete be allowed?\n                    } else {\n                        page.renderModelView(true);\n                    }\n                },\n                error: function (m, r) {\n                    app.appendAlert(app.getErrorMessage(r), 'alert-error', 0, 'modelAlert');\n                }\n            });\n        }\n    },\n\n    /**\n     * Render the model template in the container\n     * @param showDeleteButton\n     */\n    renderModelView: function (showDeleteButton) {\n        page.modelView.render();\n        app.hideProgress('modelLoader');\n\n        // initialize any special controls\n        if (showDeleteButton) {\n            // attach click handlers to the delete buttons\n            $('#confirmDeleteOnsiteDocumentContainer').hide('fast');\n            $('#deleteOnsiteDocumentButtonContainer').show();\n            $('#deleteOnsiteDocumentButton').click(function (e) {\n                e.preventDefault();\n                $('#confirmDeleteOnsiteDocumentContainer').show('fast');\n            });\n\n            $('#cancelDeleteOnsiteDocumentButton').click(function (e) {\n                e.preventDefault();\n                $('#confirmDeleteOnsiteDocumentContainer').hide('fast');\n            });\n\n            $('#confirmDeleteOnsiteDocumentButton').click(function (e) {\n                e.preventDefault();\n                page.deleteModel();\n            });\n        } else {\n            // no point in initializing the click handlers if we don't show the button\n            $('#deleteOnsiteDocumentButtonContainer').hide();\n        }\n    },\n\n    /**\n     * update the model that is currently displayed in the dialog\n     */\n    updateModel: function (reload = false) {\n        // reset any previous errors\n        $('#modelAlert').html('');\n        $('.control-group').removeClass('error');\n        $('.help-inline').html('');\n        if (page.isCharted) {\n            page.onsiteDocument.set('denialReason', 'Locked');\n            page.onsiteDocument.set('authorizingSignator', cuser);\n        }\n        // if this is new then on success we need to add it to the collection\n        var isNew = page.onsiteDocument.isNew();\n        let s = page.onsiteDocument.get('denialReason');\n        if (!isNew && s === 'New' && s !== 'In Review') {\n            page.onsiteDocument.set('denialReason', 'Open');\n            app.showProgress('modelLoader');\n        }\n        let isLink = $('#patientSignature').attr('src') ? $('#patientSignature').attr('src').indexOf('signhere') : -1;\n        let isWitnessLink = $('#witnessSignature').attr('src') ? $('#witnessSignature').attr('src').indexOf('signhere') : -1;\n        if (isLink !== -1) {\n            $('#patientSignature').attr('src', signhere);\n        }\n        if (isWitnessLink !== -1) {\n            $('#witnessSignature').attr('src', signhere);\n        }\n        var ptsignature = $('#patientSignature').attr('src');\n        if (ptsignature == signhere) {\n            if (page.signaturesRequired && page.presentPatientSignature) {\n                signerAlertMsg(signMsg, 6000, 'danger');\n                return false;\n            }\n            ptsignature = \"\";\n        }\n        var wtsignature = $('#witnessSignature').attr('src');\n        if (wtsignature == signhere) {\n            wtsignature = \"\";\n        }\n\n        page.formOrigin = isPortal ? 0 : 1;\n        page.formOrigin = isModule ? 2 : page.formOrigin;\n        let templateContent = document.getElementById('templatecontent').innerHTML;\n        if (page.encounterFormName && page.encounterFormId) {\n            // lbf templates are saved as iframe tag with src url for fetch content on doc load.\n            // no frame content is maintained in onsite document activity but template directives are.\n            templateContent = templateContent.replace(\"id=0\", \"id=\" + page.encounterFormId);\n        }\n        if (isPortal) {\n            templateContent = page.encode(templateContent, parseInt(csrfTokenDoclib[0]));\n        }\n        page.onsiteDocument.save({\n            'pid': cpid,\n            'facility': page.formOrigin, /* 0 portal, 1 dashboard, 2 patient documents */\n            'provider': page.onsiteDocument.get('provider'),\n            'encounter': page.onsiteDocument.get('encounter'),\n            'createDate': new Date(),\n            'docType': page.onsiteDocument.get('docType'),\n            'patientSignedStatus': ptsignature ? '1' : '0',\n            'patientSignedTime': ptsignature ? new Date() : '0000-00-00',\n            'authorizeSignedTime': page.onsiteDocument.get('authorizeSignedTime'),\n            'acceptSignedStatus': page.onsiteDocument.get('acceptSignedStatus'),\n            'authorizingSignator': page.onsiteDocument.get('authorizingSignator'),\n            'reviewDate': (!isPortal) ? new Date() : '0000-00-00',\n            'denialReason': page.onsiteDocument.get('denialReason'),\n            'authorizedSignature': page.onsiteDocument.get('authorizedSignature'),\n            'patientSignature': ptsignature,\n            'fullDocument': templateContent,\n            'fileName': page.onsiteDocument.get('fileName'),\n            'filePath': page.onsiteDocument.get('filePath'),\n            'csrf_token_form': csrfTokenDoclib\n        }, {\n            wait: true,\n            success: function () {\n                app.hideProgress('modelLoader');\n                if (page.isCharted) {\n                    pageAudit.onsitePortalActivity.set('status', 'closed');\n                    pageAudit.onsitePortalActivity.set('pendingAction', 'completed');\n                    pageAudit.onsitePortalActivity.set('actionUser', cuser);\n                }\n                pageAudit.onsitePortalActivity.set('date', page.onsiteDocument.get('createDate'));\n                pageAudit.onsitePortalActivity.set('activity', 'document');\n                pageAudit.onsitePortalActivity.set('patientId', cpid);\n                pageAudit.onsitePortalActivity.set('tableAction', 'update');\n                pageAudit.onsitePortalActivity.set('tableArgs', page.onsiteDocument.get('id'));\n                pageAudit.onsitePortalActivity.set('narrative', page.onsiteDocument.get('docType'));\n                pageAudit.onsitePortalActivity.set('actionTakenTime', new Date());\n                pageAudit.updateModel();\n                if (isNew) {\n                    $('#confirmDeleteOnsiteDocumentContainer').hide('fast');\n                    $('#deleteOnsiteDocumentButtonContainer').show();\n                    if (isPortal) {\n                        $(\"#submitTemplate\").show();\n                        $(\"#sendTemplate\").show();\n                    } else {\n                        $(\"#submitTemplate\").hide();\n                        $(\"#sendTemplate\").hide();\n                    }\n                    page.isNewDoc = false;\n                    page.onsiteDocuments.add(page.onsiteDocument)\n                }\n                if (model.reloadCollectionOnModelUpdate) {\n                    page.fetchOnsiteDocuments(page.fetchParams, true);\n                    page.showDetailDialog(page.onsiteDocument);\n                }\n                signerAlertMsg(msgSuccess, 2000, 'success');\n                if (page.isCharted && isModule) {\n                    $(\"#a_docReturn\").click();\n                    return;\n                }\n                if (reload) {\n                    setTimeout(\"location.reload(true);\", 3000);\n                }\n            },\n            error: function (model, response, scope) {\n                app.hideProgress('modelLoader');\n                app.appendAlert(app.getErrorMessage(response), 'alert-error', 0, 'modelAlert');\n            }\n        });\n    },\n    /**\n     * delete the model that is currently displayed in the dialog\n     */\n    deleteModel: function () {\n        // reset any previous errors\n        $('#modelAlert').html('');\n\n        app.showProgress('modelLoader');\n\n        page.onsiteDocument.destroy({\n            wait: true,\n            success: function () {\n                signerAlertMsg(msgDelete, 2000, 'success');\n                app.hideProgress('modelLoader');\n                pageAudit.onsitePortalActivity.set('status', 'deleted');\n                pageAudit.onsitePortalActivity.set('pendingAction', 'none');\n                pageAudit.onsitePortalActivity.set('activity', 'document');\n\n                pageAudit.onsitePortalActivity.set('pid', cpid);\n                pageAudit.onsitePortalActivity.set('tableAction', 'delete');\n                pageAudit.onsitePortalActivity.set('tableArgs', page.onsiteDocument.get('id'));\n                pageAudit.onsitePortalActivity.set('narrative', 'Patient deleted un-charted template');\n                pageAudit.updateModel()\n\n                if (model.reloadCollectionOnModelUpdate) {\n                    // re-fetch and render the collection after the model has been updated\n                    page.fetchOnsiteDocuments(page.fetchParams, true);\n                    setTimeout(\"location.reload(true);\", 3000);\n                }\n            },\n            error: function (model, response, scope) {\n                app.appendAlert(app.getErrorMessage(response), 'alert-error', 0, 'modelAlert');\n                app.hideProgress('modelLoader');\n            }\n        });\n    },\n    encode: function (content, k) {\n        let encoded = \"\";\n        content = btoa(content);\n        content = btoa(content);\n        for (i = 0; i < content.length; i++) {\n            let a = content.charCodeAt(i);\n            let b = a ^ k;\n            encoded = encoded + String.fromCharCode(b);\n        }\n        return btoa(encoded);\n    }\n};\n"], "fixing_code": ["<?php\n\n/**\n * OnsiteDocumentController.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2019 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n/** import supporting libraries */\nrequire_once(\"AppBasePortalController.php\");\nrequire_once(\"Model/OnsiteDocument.php\");\n\n/**\n * OnsiteDocumentController is the controller class for the OnsiteDocument object.  The\n * controller is responsible for processing input from the user, reading/updating\n * the model as necessary and displaying the appropriate view.\n *\n * @package Patient Portal::Controller\n * @author ClassBuilder\n * @version 1.0\n */\nclass OnsiteDocumentController extends AppBasePortalController\n{\n    /**\n     * Override here for any controller-specific functionality\n     *\n     * @inheritdocs\n     */\n    protected function Init()\n    {\n        parent::Init();\n    }\n\n    /**\n     * Displays a list view of OnsiteDocument objects\n     */\n    public function ListView()\n    {\n        $recid = $pid = $user = $encounter =  0;\n        $is_module = $catid = 0;\n        $is_portal = GlobalConfig::$PORTAL;\n        $docid = $new_filename = \"\";\n        // get latest help template id\n        $help_id = sqlQuery('SELECT * FROM `document_templates` WHERE `template_name` = ? Order By modified_date DESC Limit 1', array('Help'))['id'] ?? 0;\n\n        if (isset($_GET['pid'])) {\n            $pid = (int) $_GET['pid'];\n        }\n\n        // only allow patient to see themselves\n        if (!empty($GLOBALS['bootstrap_pid'])) {\n            $pid = $GLOBALS['bootstrap_pid'];\n        }\n\n        if (isset($_GET['user'])) {\n            $user = $_GET['user'];\n        }\n\n        if (isset($_GET['docid'])) {\n            $docid = $_GET['docid'];\n        }\n\n        if (isset($_GET['enc'])) {\n            $encounter = (int) $_GET['enc'];\n        }\n\n        if (isset($_GET['recid'])) {\n            $recid = (int) $_GET['recid'];\n        }\n\n        if (isset($_GET['is_module'])) {\n            $is_module = $_GET['is_module'];\n        }\n\n        if (isset($_GET['catid'])) {\n            $catid = $_GET['catid'];\n        }\n        if (isset($_GET['new'])) {\n            $new_filename = $_GET['new'];\n        }\n        $this->Assign('recid', $recid);\n        $this->Assign('help_id', $help_id);\n        $this->Assign('cpid', $pid);\n        $this->Assign('cuser', $user);\n        $this->Assign('encounter', $encounter);\n        $this->Assign('docid', $docid);\n        $this->Assign('is_module', $is_module);\n        $this->Assign('is_portal', $is_portal);\n        $this->Assign('save_catid', $catid);\n        $this->Assign('new_filename', $new_filename);\n        $this->Render();\n    }\n\n    /**\n     * API Method queries for OnsiteDocument records and render as JSON\n     */\n    public function Query()\n    {\n        try {\n            $criteria = new OnsiteDocumentCriteria();\n            $pid = RequestUtil::Get('patientId');\n\n            // only allow patient to see themself\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                $pid = $GLOBALS['bootstrap_pid'];\n            }\n\n            $criteria->Pid_Equals = $pid;\n            $recid = RequestUtil::Get('recid');\n            if ($recid > 0) {\n                $criteria->Id_Equals = $recid;\n            }\n\n            $filter = RequestUtil::Get('filter');\n            if ($filter) {\n                $criteria->AddFilter(\n                    new CriteriaFilter('Id,Pid,Facility,Provider,Encounter,CreateDate,DocType,PatientSignedStatus,PatientSignedTime,AuthorizeSignedTime,\n\t\t\t\t\t\tAcceptSignedStatus,AuthorizingSignator,ReviewDate,DenialReason,AuthorizedSignature,PatientSignature,FullDocument,FileName,FilePath', '%' . $filter . '%')\n                );\n            }\n\n            // TODO: this is generic query filtering based only on criteria properties\n            foreach (array_keys($_REQUEST) as $prop) {\n                $prop_normal = ucfirst($prop);\n                $prop_equals = $prop_normal . '_Equals';\n\n                if (property_exists($criteria, $prop_normal)) {\n                    $criteria->$prop_normal = RequestUtil::Get($prop);\n                } elseif (property_exists($criteria, $prop_equals)) {\n                    // this is a convenience so that the _Equals suffix is not needed\n                    $criteria->$prop_equals = RequestUtil::Get($prop);\n                }\n            }\n\n            $output = new stdClass();\n\n            // if a sort order was specified then specify in the criteria\n            $output->orderBy = RequestUtil::Get('orderBy');\n            $output->orderDesc = RequestUtil::Get('orderDesc') != '';\n            if ($output->orderBy) {\n                $criteria->SetOrder($output->orderBy, $output->orderDesc);\n            }\n\n            $page = RequestUtil::Get('page');\n\n            if (!empty($page)) {\n                // if page is specified, use this instead (at the expense of one extra count query)\n                $pagesize = $this->GetDefaultPageSize();\n\n                $onsitedocuments = $this->Phreezer->Query('OnsiteDocument', $criteria)->GetDataPage($page, $pagesize);\n                $output->rows = $onsitedocuments->ToObjectArray(true, $this->SimpleObjectParams());\n                $output->totalResults = $onsitedocuments->TotalResults;\n                $output->totalPages = $onsitedocuments->TotalPages;\n                $output->pageSize = $onsitedocuments->PageSize;\n                $output->currentPage = $onsitedocuments->CurrentPage;\n            } else {\n                // return all results\n                $onsitedocuments = $this->Phreezer->Query('OnsiteDocument', $criteria);\n                $output->rows = $onsitedocuments->ToObjectArray(true, $this->SimpleObjectParams());\n                $output->totalResults = count($output->rows);\n                $output->totalPages = 1;\n                $output->pageSize = $output->totalResults;\n                $output->currentPage = 1;\n            }\n\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * @return void\n     */\n    public function SingleView()\n    {\n        $rid = $pid = $user = $encounter = 0;\n        if (isset($_GET['id'])) {\n            $rid = (int) $_GET['id'];\n        }\n\n        if (isset($_GET['pid'])) {\n            $pid = (int) $_GET['pid'];\n        }\n\n        // only allow patient to see themself\n        if (!empty($GLOBALS['bootstrap_pid'])) {\n            $pid = $GLOBALS['bootstrap_pid'];\n        }\n\n        if (isset($_GET['user'])) {\n            $user = $_GET['user'];\n        }\n\n        if (isset($_GET['enc'])) {\n            $encounter = $_GET['enc'];\n        }\n\n        $this->Assign('recid', $rid);\n        $this->Assign('cpid', $pid);\n        $this->Assign('cuser', $user);\n        $this->Assign('encounter', $encounter);\n        $this->Render();\n    }\n    /**\n     * API Method retrieves a single OnsiteDocument record and render as JSON\n     */\n    public function Read()\n    {\n        try {\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n\n            // only allow patient to see themself\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                if ($GLOBALS['bootstrap_pid'] != $onsitedocument->Pid) {\n                    $error = 'Unauthorized';\n                    throw new Exception($error);\n                }\n            }\n\n            $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method inserts a new OnsiteDocument record and render response as JSON\n     */\n    public function Create()\n    {\n        try {\n            $json = json_decode(RequestUtil::GetBody());\n\n            if (!$json) {\n                throw new Exception('The request body does not contain valid JSON');\n            }\n\n            $onsitedocument = new OnsiteDocument($this->Phreezer);\n\n            // only allow patient to add to themselves\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                $onsitedocument->Pid = $GLOBALS['bootstrap_pid'];\n            } else {\n                $onsitedocument->Pid = $this->SafeGetVal($json, 'pid');\n            }\n\n            // removing for testing\n            /* if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n                $decode = $this->SafeGetVal($json, 'fullDocument');\n                $k = (int)$this->SafeGetVal($json, 'csrf_token_form')[0];\n                $json->fullDocument = $this->decode($decode, $k);\n            } */\n\n            $onsitedocument->Facility = $this->SafeGetVal($json, 'facility');\n            $onsitedocument->Provider = $this->SafeGetVal($json, 'provider');\n            $onsitedocument->Encounter = $this->SafeGetVal($json, 'encounter');\n            $onsitedocument->CreateDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'createDate')));\n            $onsitedocument->DocType = $this->SafeGetVal($json, 'docType');\n            $onsitedocument->PatientSignedStatus = $this->SafeGetVal($json, 'patientSignedStatus');\n            $onsitedocument->PatientSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'patientSignedTime')));\n            $onsitedocument->AuthorizeSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'authorizeSignedTime')));\n            $onsitedocument->AcceptSignedStatus = $this->SafeGetVal($json, 'acceptSignedStatus');\n            $onsitedocument->AuthorizingSignator = $this->SafeGetVal($json, 'authorizingSignator');\n            $onsitedocument->ReviewDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'reviewDate')));\n            $onsitedocument->DenialReason = $this->SafeGetVal($json, 'denialReason');\n            $onsitedocument->AuthorizedSignature = $this->SafeGetVal($json, 'authorizedSignature');\n            $onsitedocument->PatientSignature = $this->SafeGetVal($json, 'patientSignature');\n            $onsitedocument->FullDocument = $this->SafeGetVal($json, 'fullDocument');\n            $onsitedocument->FileName = $this->SafeGetVal($json, 'fileName');\n            $onsitedocument->FilePath = $this->SafeGetVal($json, 'filePath');\n\n            $onsitedocument->Validate();\n            $errors = $onsitedocument->GetValidationErrors();\n\n            if (count($errors) > 0) {\n                $this->RenderErrorJSON('Please check the form for errors', $errors);\n            } else {\n                $new_data = $onsitedocument->FullDocument;\n                // use a custom diff function to look for changing tags only with html\n                if ($new_data != strip_tags($new_data)) {\n                    $old_data = $json->fullDocument;\n                    $onsitedocument->FullDocument = $this->htmlDiff($old_data, $new_data);\n                }\n                $onsitedocument->Save();\n                $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method updates an existing OnsiteDocument record and render response as JSON\n     */\n    public function Update()\n    {\n        try {\n            $json = json_decode(RequestUtil::GetBody());\n\n            if (!$json) {\n                throw new Exception('The request body does not contain valid JSON');\n            }\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n            $old_data = $onsitedocument->FullDocument;\n\n            // only allow patient to update themselves (part 1)\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                if ($GLOBALS['bootstrap_pid'] != $onsitedocument->Pid) {\n                    $error = 'Unauthorized';\n                    throw new Exception($error);\n                }\n            }\n\n            // only allow patient to update themselves (part 2)\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                $onsitedocument->Pid = $GLOBALS['bootstrap_pid'];\n            } else {\n                $onsitedocument->Pid = $this->SafeGetVal($json, 'pid', $onsitedocument->Pid);\n            }\n\n            // removing for testing\n            /* if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n                $decode = $this->SafeGetVal($json, 'fullDocument');\n                $k = (int)$this->SafeGetVal($json, 'csrf_token_form')[0];\n                $json->fullDocument = $this->decode($decode, $k);\n            } */\n\n            $onsitedocument->Facility = $this->SafeGetVal($json, 'facility', $onsitedocument->Facility);\n            $onsitedocument->Provider = $this->SafeGetVal($json, 'provider', $onsitedocument->Provider);\n            $onsitedocument->Encounter = $this->SafeGetVal($json, 'encounter', $onsitedocument->Encounter);\n            $onsitedocument->CreateDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'createDate', $onsitedocument->CreateDate)));\n            $onsitedocument->DocType = $this->SafeGetVal($json, 'docType', $onsitedocument->DocType);\n            $onsitedocument->PatientSignedStatus = $this->SafeGetVal($json, 'patientSignedStatus', $onsitedocument->PatientSignedStatus);\n            $onsitedocument->PatientSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'patientSignedTime', $onsitedocument->PatientSignedTime)));\n            $onsitedocument->AuthorizeSignedTime = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'authorizeSignedTime', $onsitedocument->AuthorizeSignedTime)));\n            $onsitedocument->AcceptSignedStatus = $this->SafeGetVal($json, 'acceptSignedStatus', $onsitedocument->AcceptSignedStatus);\n            $onsitedocument->AuthorizingSignator = $this->SafeGetVal($json, 'authorizingSignator', $onsitedocument->AuthorizingSignator);\n            $onsitedocument->ReviewDate = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'reviewDate', $onsitedocument->ReviewDate)));\n            $onsitedocument->DenialReason = $this->SafeGetVal($json, 'denialReason', $onsitedocument->DenialReason);\n            $onsitedocument->AuthorizedSignature = $this->SafeGetVal($json, 'authorizedSignature', $onsitedocument->AuthorizedSignature);\n            $onsitedocument->PatientSignature = $this->SafeGetVal($json, 'patientSignature', $onsitedocument->PatientSignature);\n            $onsitedocument->FullDocument = $this->SafeGetVal($json, 'fullDocument', $onsitedocument->FullDocument);\n            $onsitedocument->FileName = $this->SafeGetVal($json, 'fileName', $onsitedocument->FileName);\n            $onsitedocument->FilePath = $this->SafeGetVal($json, 'filePath', $onsitedocument->FilePath);\n\n            $onsitedocument->Validate();\n            $errors = $onsitedocument->GetValidationErrors();\n\n            if (count($errors) > 0) {\n                $this->RenderErrorJSON('Please check the form for errors', $errors);\n            } else {\n                // use a custom diff function to look for changing tags only with html\n                $new_data = $onsitedocument->FullDocument;\n                if ($new_data != strip_tags($new_data)) {\n                    $onsitedocument->FullDocument = $this->htmlDiff($old_data, $new_data);\n                }\n                $onsitedocument->Save();\n                $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method deletes an existing OnsiteDocument record and render response as JSON\n     */\n    public function Delete()\n    {\n        try {\n            // TODO: if a soft delete is prefered, change this to update the deleted flag instead of hard-deleting\n\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n\n            // only allow patient to delete themselves\n            if (!empty($GLOBALS['bootstrap_pid'])) {\n                if ((int)$GLOBALS['bootstrap_pid'] !== (int)$onsitedocument->Pid) {\n                    $error = 'Unauthorized';\n                    throw new Exception($error);\n                }\n            }\n\n            $onsitedocument->Delete();\n\n            $output = new stdClass();\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    // removing for testing\n    /*\n     * @param $encoded\n     * @param $v\n     * @return bool|string\n\n    private function decode($encoded, $v): bool|string\n    {\n        $encoded = base64_decode($encoded);\n        $decoded = \"\";\n        for ($i = 0; $i < strlen($encoded); $i++) {\n            $b = ord($encoded[$i]);\n            $a = $b ^ $v;\n            $decoded .= chr($a);\n        }\n        return base64_decode(base64_decode($decoded));\n    }\n    */\n\n    private function diff($old, $new): array\n    {\n        $matrix = array();\n        $maxlen = 0;\n        foreach ($old as $oindex => $ovalue) {\n            $nkeys = array_keys($new, $ovalue);\n            foreach ($nkeys as $nindex) {\n                $matrix[$oindex][$nindex] = isset($matrix[$oindex - 1][$nindex - 1]) ?\n                    $matrix[$oindex - 1][$nindex - 1] + 1 : 1;\n                if ($matrix[$oindex][$nindex] > $maxlen) {\n                    $maxlen = $matrix[$oindex][$nindex];\n                    $omax = $oindex + 1 - $maxlen;\n                    $nmax = $nindex + 1 - $maxlen;\n                }\n            }\n        }\n        if ($maxlen == 0) {\n            return array(array('d' => $old, 'i' => $new));\n        }\n        return array_merge(\n            $this->diff(array_slice($old, 0, $omax), array_slice($new, 0, $nmax)),\n            array_slice($new, $nmax, $maxlen),\n            $this->diff(array_slice($old, $omax + $maxlen), array_slice($new, $nmax + $maxlen))\n        );\n    }\n\n    private function htmlDiff($old, $new): string\n    {\n        $ret = '';\n        $diff = $this->diff(preg_split(\"/[\\s]+/\", $old), preg_split(\"/[\\s]+/\", $new));\n        foreach ($diff as $k) {\n            if (is_array($k)) {\n                $ret .= (!empty($k['i']) ? attr(implode(' ', $k['i'])) : '');\n            } else {\n                $ret .= $k . ' ';\n            }\n        }\n        return $ret;\n    }\n}\n", "/**\n * View logic for OnsiteDocuments\n *\n * application logic specific to the OnsiteDocument listing page\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2022 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nvar page = {\n    onsiteDocuments: new model.OnsiteDocumentCollection(),\n    collectionView: null,\n    onsiteDocument: null,\n    modelView: null,\n    isInitialized: false,\n    isInitializing: false,\n    isSaved: true,\n    isNewDoc: false,\n    fetchParams: {filter: '', orderBy: '', orderDesc: '', page: 1, patientId: cpid, recid: recid},\n    fetchInProgress: false,\n    dialogIsOpen: false,\n    isLocked: false,\n    isCharted: false,\n    isDashboard: (!isModule && !isPortal),\n    isQuestionnaire: '',\n    encounterFormId: 0,\n    isFrameForm: 0,\n    encounterFormName: \"\",\n    formOrigin: 0, // default portal\n    presentPatientSignature: false,\n    presentAdminSignature: false,\n    presentWitnessSignature: false,\n    signaturesRequired: false,\n\n    init: function () {\n        // ensure initialization only occurs once\n        if (page.isInitialized || page.isInitializing) {\n            return;\n        }\n        page.isInitializing = true;\n\n        if (!$.isReady && console) {\n            console.warn('page was initialized before dom is ready.  views may not render properly.');\n        }\n\n        // make the new button clickable\n        $(\"#newOnsiteDocumentButton\").click(function (e) {\n            e.preventDefault();\n            page.showDetailDialog();\n        });\n\n        // initialize the collection view\n        this.collectionView = new view.CollectionView({\n            el: $(\"#onsiteDocumentCollectionContainer\"),\n            templateEl: $(\"#onsiteDocumentCollectionTemplate\"),\n            collection: page.onsiteDocuments\n        });\n\n        // initialize the search filter\n        $('#filter').change(function (obj) {\n            page.fetchParams.filter = $('#filter').val();\n            page.fetchParams.page = 1;\n            page.fetchOnsiteDocuments(page.fetchParams);\n        });\n\n        // make the rows clickable ('rendered' is a custom event, not a standard backbone event)\n        this.collectionView.on('rendered', function () {\n            if (page.isDashboard) {\n                $(\"#topnav\").hide();\n            }\n            // attach click handler to the table rows for editing\n            $('table.collection tbody tr').click(function (e) {\n                e.preventDefault();\n                $(\"html, body\").animate({\n                    scrollTop: 0\n                }, \"slow\");\n                let m = page.onsiteDocuments.get(this.id);\n                page.showDetailDialog(m);\n            });\n            // make the headers clickable for sorting\n            $('table.collection thead tr th').unbind().on('click', function (e) {\n                e.preventDefault();\n                let prop = this.id.replace('header_', '');\n                // toggle the ascending/descending before we change the sort prop\n                page.fetchParams.orderDesc = (prop == page.fetchParams.orderBy && !page.fetchParams.orderDesc) ? '1' : '';\n                page.fetchParams.orderBy = prop;\n                page.fetchParams.page = 1;\n                page.fetchOnsiteDocuments(page.fetchParams);\n            });\n            // attach click handlers to the pagination controls\n            $('.pageButton').click(function (e) {\n                e.preventDefault();\n                page.fetchParams.page = this.id.substr(5);\n                page.fetchOnsiteDocuments(page.fetchParams);\n            });\n            $('.template-item').unbind().on('click', function (e) {\n                if (!isModule) {\n                    $(\"#topnav\").hide();\n                    parent.document.getElementById('topNav').classList.add('collapse');\n                }\n            });\n            page.isInitialized = true;\n            page.isInitializing = false;\n            // if dashboard let's open first doc for review.\n            if (page.isDashboard) {\n                $('table.collection tbody tr:first').click();\n            }\n        });\n// ---------  Get Collection ------------------------//\n        this.fetchOnsiteDocuments(page.fetchParams);\n\n        // initialize the model view\n        this.modelView = new view.ModelView({\n            el: $(\"#onsiteDocumentModelContainer\")\n        });\n\n        // tell the model view where it's template is located\n        this.modelView.templateEl = $(\"#onsiteDocumentModelTemplate\");\n\n        // template rendered ready\n        this.modelView.on('rendered', function () {\n            $('#templatecontent').on('focus', \".datepicker:not(.hasDatepicker)\", function () {\n                $(\".datepicker\").datetimepicker({\n                    i18n: {\n                        en: {\n                            months: datepicker_xlMonths,\n                            dayOfWeekShort: datepicker_xlDayofwkshort,\n                            dayOfWeek: datepicker_xlDayofwk\n                        },\n                    },\n                    yearStart: datepicker_yearStart,\n                    rtl: datepicker_rtl,\n                    format: datepicker_format,\n                    scrollInput: datepicker_scrollInput,\n                    scrollMonth: datepicker_scrollMonth,\n                    timepicker: false\n                });\n            })\n            $(\"#templatecontent\").on('focus', \".datetimepicker:not(.hasDatetimepicker)\", function () {\n                $(\".datetimepicker\").datetimepicker({\n                    i18n: {\n                        en: {\n                            months: datetimepicker_xlMonths,\n                            dayOfWeekShort: datetimepicker_xlDayofwkshort,\n                            dayOfWeek: datetimepicker_xlDayofwk\n                        },\n                    },\n                    yearStart: datetimepicker_yearStart,\n                    rtl: datetimepicker_rtl,\n                    format: datetimepicker_format,\n                    step: datetimepicker_step,\n                    scrollInput: datepicker_scrollInput,\n                    scrollMonth: datepicker_scrollMonth,\n                    timepicker: true\n                });\n            });\n\n            docid = page.onsiteDocument.get('docType');\n            page.isLocked = (page.onsiteDocument.get('denialReason') === 'Locked');\n            (page.isLocked) ? $(\"#printTemplate\").show() : $(\"#printTemplate\").hide();\n            $(\"#chartHistory\").hide();\n\n\n            page.getDocument(page.onsiteDocument.get('docType'), cpid, page.onsiteDocument.get('filePath'));\n            if (page.isDashboard) { // review\n                flattenDocument();\n            }\n            pageAudit.fetchParams.doc = page.onsiteDocument.get('id');\n            pageAudit.fetchOnsitePortalActivities(pageAudit.fetchParams);\n\n            if (page.isLocked) {\n                $('#patientSignature').off();\n                $('#patientSignature').css('cursor', 'default');\n                $('#adminSignature').off();\n                $('#adminSignature').css('cursor', 'default');\n                $('#witnessSignature').css('cursor', 'default');\n                $('#witnessSignature').off();\n            } else if (!isModule) {\n                // disable signatures in appropriate views\n                if (!isPortal) {\n                    $('#patientSignature').css('cursor', 'default');\n                    $('#patientSignature').off();\n                    $('#witnessSignature').css('cursor', 'default');\n                    $('#witnessSignature').off();\n                } else {\n                    $('#adminSignature').css('cursor', 'default');\n                    $('#adminSignature').off();\n                }\n            }\n            if (!isPortal) {\n                $(\"#signTemplate\").hide();\n                $(\"#Help\").hide();\n                $(\"#showNav\").hide();\n                if (page.isCharted || page.isLocked) {\n                    $(\"#chartTemplate\").hide();\n                    $(\"#chartHistory\").hide();\n                    page.encounterFormName = '';\n                    page.isFrameForm = 0;\n                } else {\n                    $(\"#chartTemplate\").show();\n                }\n                (isModule || page.isDashboard) ? $(\"#printTemplate\").show() : $(\"#printTemplate\").hide();\n                $(\"#submitTemplate\").hide();\n                $(\"#sendTemplate\").hide();\n                $(\"#downloadTemplate\").hide();\n                isModule ? $(\"#dismissOnsiteDocumentButton\").show() : $(\"#dismissOnsiteDocumentButton\").hide();\n                ((isModule || page.isFrameForm) && !page.isLocked) ? $(\"#saveTemplate\").show() : $(\"#saveTemplate\").hide();\n                isModule ? $(\"#homeTemplate\").show() : $(\"#homeTemplate\").hide();\n                (page.encounterFormName === 'HIS' && !page.isLocked) ? $(\"#chartHistory\").show() : $(\"#chartHistory\").hide();\n\n                $(\"#chartTemplate\").unbind().on('click', function (e) {\n                    e.preventDefault();\n                    if (page.isFrameForm) {\n                        let formFrame = document.getElementById('encounterForm');\n                        $(window).one(\"message onmessage\", (e) => {\n                            if (event.origin !== window.location.origin) {\n                                signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                                return false;\n                            }\n                            if (isModule || page.isFrameForm) {\n                                model.reloadCollectionOnModelUpdate = false;\n                            }\n                            page.encounterFormId = e.originalEvent.data.formid;\n                            page.onsiteDocument.set('encounter', page.encounterFormId);\n                            let url = '';\n                            if (page.encounterFormName.startsWith('LBF') || page.encounterFormName.startsWith('HIS')) {\n                                url = webroot_url +\n                                    \"/interface/forms/LBF/printable.php?return_content=\" +\n                                    \"&formname=\" + encodeURIComponent(page.encounterFormName) +\n                                    \"&formid=\" + encodeURIComponent(page.encounterFormId) +\n                                    \"&visitid=0&patientid=\" + encodeURIComponent(cpid);\n                            } else {\n                                // first, ensure form name is valid\n                                if (!page.verifyValidEncounterForm(page.encounterFormName)) {\n                                    signerAlertMsg(\"There is an issue loading form. Form does not exist.\");\n                                    return false;\n                                }\n                                url = webroot_url +\n                                    \"/interface/forms/\" + encodeURIComponent(page.encounterFormName) + \"/patient_portal.php\" +\n                                    \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                if (page.isQuestionnaire) {\n                                    url = webroot_url +\n                                        \"/interface/forms/questionnaire_assessments/patient_portal.php\" +\n                                        \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                }\n                            }\n                            fetch(url).then(response => {\n                                if (!response.ok) {\n                                    throw new Error('Network Error.');\n                                }\n                                return response.json()\n                            }).then(content => {\n                                flattenDocument();\n                                let templateContents = document.getElementById('templatecontent').innerHTML;\n                                templateContents = templateContents.replace(/<script.*?>.*?<\\/script>/ig, '');\n                                templateContents = templateContents.replace(/(<\\/iframe>)/g, '');\n                                content = templateContents.replace(/(<iframe[^>]+>)/g, content);\n                                if (content) {\n                                    page.chartTemplate(content);\n                                }\n                            }).catch(error => {\n                                console.error('Error:', error);\n                                alert(error);\n                            });\n                        });\n                        // request a save for lbf\n                        formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                    } else {\n                        page.chartTemplate('', 'flat');\n                    }\n                });\n\n                $(\"#downloadTemplate\").unbind().on('click', function (e) {\n                    // just render the existing model and not save template.\n                    // For downloads, we just want to give user a chance to dispose/view rendered\n                    // document and leave template intact for further edits before charting.\n                    // I'm still unsure how useful a download is as to when to finish a review, charting document\n                    // is necessary. I know eventually, I can do better:)\n                    e.preventDefault();\n                    if (page.isFrameForm) {\n                        let formFrame = document.getElementById('encounterForm');\n                        let frameDocument = formFrame.contentDocument || formFrame.contentWindow.document;\n                        // we don't want events piling up so this is a one shot.\n                        $(window).one(\"message onmessage\", (e) => {\n                            if (event.origin !== window.location.origin) {\n                                signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                                return false;\n                            }\n                            if (isModule || page.isFrameForm) {\n                                model.reloadCollectionOnModelUpdate = false;\n                            }\n                            page.encounterFormId = e.originalEvent.data.formid;\n                            page.onsiteDocument.set('encounter', page.encounterFormId);\n                            let url = '';\n                            if (page.encounterFormName.startsWith('LBF') || page.encounterFormName.startsWith('HIS')) {\n                                url = webroot_url +\n                                    \"/interface/forms/LBF/printable.php?return_content=\" +\n                                    \"&formname=\" + encodeURIComponent(page.encounterFormName) +\n                                    \"&formid=\" + encodeURIComponent(page.encounterFormId) +\n                                    \"&visitid=0&patientid=\" + encodeURIComponent(cpid);\n                            } else {\n                                // first, ensure form name is valid\n                                if (!page.verifyValidEncounterForm(page.encounterFormName)) {\n                                    signerAlertMsg(\"There is an issue loading form. Form does not exist.\");\n                                    return false;\n                                }\n                                url = webroot_url +\n                                    \"/interface/forms/\" + encodeURIComponent(page.encounterFormName) + \"/patient_portal.php\" +\n                                    \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                if (page.isQuestionnaire) {\n                                    url = webroot_url +\n                                        \"/interface/forms/questionnaire_assessments/patient_portal.php\" +\n                                        \"?formid=\" + encodeURIComponent(page.encounterFormId);\n                                }\n                            }\n                            fetch(url).then(response => {\n                                if (!response.ok) {\n                                    throw new Error('Network Error LBF Render.');\n                                }\n                                return response.json();\n                            }).then(documentContents => {\n                                if (documentContents) {\n                                    page.updateModel();\n                                    flattenDocument();\n                                    $(\"#cpid\").val(cpid);\n                                    $(\"#docid\").val(docid);\n                                    $(\"#handler\").val('download');\n                                    $(\"#status\").val('downloaded');\n\n                                    let templateContents = document.getElementById('templatecontent').innerHTML;\n                                    templateContents = templateContents.replace(/(<\\/iframe>)/g, '')\n                                    documentContents = templateContents.replace(/(<iframe[^>]+>)/g, documentContents);\n                                    $(\"#content\").val(documentContents);\n                                    signerAlertMsg(\"Waiting for Download.\", 6500, \"info\");\n                                    $(\"#template\").submit();\n\n                                    page.renderModelView(false);\n                                }\n                            }).catch(error => {\n                                alert(error);\n                                console.error('Error:', error);\n                            });\n                        });\n                        // request a save for lbf\n                        formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                    } else {\n                        // don't save let charting do that.\n                        flattenDocument();\n                        let documentContents = document.getElementById('templatecontent').innerHTML;\n                        $(\"#content\").val(documentContents);\n                        $(\"#template\").submit();\n                        signerAlertMsg(xl('Downloading Document!'), 1000, 'success', 'lg');\n\n                        page.renderModelView(false);\n                    }\n                });\n            } else {\n                $(\"#downloadTemplate\").hide();\n                $(\"#chartTemplate\").hide();\n                $(\"#chartHistory\").hide();\n                page.isLocked ? $(\"#saveTemplate\").hide() : $(\"#saveTemplate\").show();\n                page.isLocked ? $(\"#sendTemplate\").hide() : $(\"#sendTemplate\").show();\n                page.isLocked ? $(\"#submitTemplate\").show() : $(\"#submitTemplate\").hide();\n            }\n\n            $(\"#saveTemplate\").unbind().on('click', function (e) {\n                e.preventDefault();\n                if (page.isFrameForm) {\n                    let formFrame = document.getElementById('encounterForm');\n                    page.encounterFormId = 0;\n                    $(window).one(\"message onmessage\", (e) => {\n                        if (event.origin !== window.location.origin) {\n                            signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                            return false;\n                        }\n                        model.reloadCollectionOnModelUpdate = false;\n                        page.encounterFormId = e.originalEvent.data.formid;\n                        page.onsiteDocument.set('encounter', page.encounterFormId);\n                        if (page.onsiteDocument.get('denialReason') === 'In Review') {\n                            pageAudit.onsitePortalActivity.set('status', 'waiting');\n                        } else {\n                            page.onsiteDocument.set('denialReason', 'Editing');\n                            pageAudit.onsitePortalActivity.set('status', 'editing');\n                        }\n                        // save lbf iframe template\n                        page.updateModel(true);\n                    });\n                    // post to submit and save content remote form.\n                    formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                } else {\n                    if (page.onsiteDocument.get('denialReason') === 'In Review') {\n                        pageAudit.onsitePortalActivity.set('status', 'waiting');\n                    } else {\n                        page.onsiteDocument.set('denialReason', 'Editing');\n                        pageAudit.onsitePortalActivity.set('status', 'editing');\n                    }\n                    page.updateModel(true);\n                }\n            });\n\n            // send to review and save current\n            $(\"#sendTemplate\").unbind().on('click', function (e) {\n                e.preventDefault();\n                if (page.isFrameForm) {\n                    let formFrame = document.getElementById('encounterForm');\n                    let frameDocument = formFrame.contentDocument || formFrame.contentWindow.document;\n                    $(window).one(\"message onmessage\", (e) => {\n                        if (event.origin !== window.location.origin) {\n                            signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                            return false;\n                        }\n                        model.reloadCollectionOnModelUpdate = false;\n                        page.encounterFormId = e.originalEvent.data.formid;\n                        page.onsiteDocument.set('encounter', page.encounterFormId);\n                        pageAudit.onsitePortalActivity.set('status', 'waiting');\n                        page.onsiteDocument.set('denialReason', 'In Review');\n                        // save lbf iframe template\n                        page.updateModel(true);\n                    });\n                    // post to submit and save content remote form.\n                    formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                } else {\n                    model.reloadCollectionOnModelUpdate = false;\n                    var documentContents = document.getElementById('templatecontent').innerHTML;\n                    $(\"#content\").val(documentContents);\n                    pageAudit.onsitePortalActivity.set('status', 'waiting');\n                    page.onsiteDocument.set('denialReason', 'In Review');\n                    page.updateModel(true);\n                }\n            });\n\n            // download from portal\n            $(\"#submitTemplate\").unbind().on('click', function () {\n                if (page.onsiteDocument.get('denialReason') === 'In Review') {\n                    pageAudit.onsitePortalActivity.set('status', 'waiting');\n                } else {\n                    pageAudit.onsitePortalActivity.set('status', 'editing');\n                    flattenDocument();\n                }\n                var documentContents = document.getElementById('templatecontent').innerHTML;\n                $(\"#docid\").val(docid);\n                $(\"#content\").val(documentContents);\n\n                $(\"#template\").submit();\n\n                page.updateModel();\n            });\n\n            $(\"#chartHistory\").unbind().on('click', function () {\n                if (page.isFrameForm) {\n                    let formFrame = document.getElementById('encounterForm');\n                    page.encounterFormId = 0;\n                    $(window).one(\"message onmessage\", (e) => {\n                        if (event.origin !== window.location.origin) {\n                            signerAlertMsg(\"Remote is not same origin!)\", 15000);\n                            return false;\n                        }\n                        // cool it just in case then save history to chart.\n                        setTimeout(\"page.chartHistory();\", 1000);\n                    });\n                    // post to submit\n                    formFrame.contentWindow.postMessage({submitForm: true}, window.location.origin);\n                }\n            });\n\n            $('.navCollapse .dropdown-menu>a').on('click', function () {\n                $('.navbar-collapse').collapse('hide');\n            });\n\n            $('.navCollapse li.nav-item>a').on('click', function () {\n                $('.navbar-collapse').collapse('hide');\n            });\n        });\n\n        if (newFilename) { // autoload new on init. once only.\n            page.newDocument(cpid, cuser, newFilename, id);\n            newFilename = '';\n        }\n\n        page.formOrigin = isPortal ? 0 : isModule ? 2 : 1;\n    },\n// page scoped functions\n    verifyValidEncounterForm: function (form) {\n        let formNameValid = false;\n        if (page.isQuestionnaire) {\n            form = 'questionnaire_assessments';\n        }\n        for (let k = 0; k < formNamesWhitelist.length; k++) {\n            if (formNamesWhitelist[k] == form) {\n                formNameValid = true;\n            }\n        }\n        return formNameValid;\n    },\n    handleHistoryView: function () {\n        let historyHide = $('.historyHide');\n        historyHide.toggleClass('d-none');\n        if (historyHide.hasClass('d-none')) {\n            $('.modelContainer').removeClass(\"d-none\");\n            //document.getElementById('verytop').scrollIntoView({behavior: 'smooth'})\n        } else {\n            $('.modelContainer').addClass(\"d-none\");\n        }\n        $('.history-direction').toggleClass(\"fa-arrow-down\").toggleClass(\"fa-arrow-up\");\n    },\n    /**\n     * Fetch the passed in document id in editing status\n     * @param id the document id in edit mode from history\n     */\n    editHistoryDocument: function (id) {\n        event.preventDefault();\n        let m = page.onsiteDocuments.get(id);\n        page.showDetailDialog(m);\n    },\n    chartHistory: function () {\n        let formFrame = document.getElementById('encounterForm');\n        formFrame.contentWindow.postMessage({submitForm: 'history'}, window.location.origin);\n    },\n    chartTemplate: function (documentContents = '', type = '') {\n        if (type === 'flat') {\n            flattenDocument();\n            documentContents = document.getElementById('templatecontent').innerHTML;\n        }\n        $(\"#docid\").val(docid);\n        $(\"#handler\").val('chart');\n        $(\"#status\").val('charted');\n\n        signerAlertMsg(alertMsg1, 3000, \"warning\");\n        let posting = $.post(\"./../lib/doc_lib.php\", {\n            csrf_token_form: csrfTokenDoclib,\n            cpid: cpid,\n            docid: docid,\n            catid: catid,\n            content: documentContents,\n            handler: \"chart\"\n        });\n        posting.done(function (rtn) {\n            if (rtn.indexOf(\"ERROR\") !== -1) {\n                alert(rtn);\n                return false;\n            }\n            page.isCharted = true;\n            page.isLocked = true;\n            $(\"#chartTemplate\").hide();\n            $(\"#chartHistory\").hide();\n            $(\"#saveTemplate\").hide();\n            page.isFrameForm = false;\n            page.encounterFormName = '';\n            if (isModule || page.isFrameForm) {\n                model.reloadCollectionOnModelUpdate = false;\n            }\n            $('#templatecontent').html(documentContents);\n            page.updateModel();\n        });\n    },\n    /**\n     * Fetch the collection data from the server\n     * @param params\n     * @param hideLoader\n     */\n    fetchOnsiteDocuments: function (params, hideLoader) {\n        // persist the params so that paging/sorting/filtering will play together nicely\n        page.fetchParams = params;\n        if (page.fetchInProgress) {\n            if (console) {\n                console.log('suppressing fetch because it is already in progress');\n            }\n        }\n        page.fetchInProgress = true;\n        if (!hideLoader) {\n            app.showProgress('loader');\n        }\n\n        page.onsiteDocuments.fetch({\n            data: params,\n            success: function () {\n                if (page.onsiteDocuments.collectionHasChanged) {\n                }\n                app.hideProgress('loader');\n                page.fetchInProgress = false;\n            },\n            error: function (m, r) {\n                app.appendAlert(app.getErrorMessage(r), 'alert-error', 0, 'collectionAlert');\n                app.hideProgress('loader');\n                page.fetchInProgress = false;\n            }\n        });\n    },\n\n    newDocument: function (pid, user, templateName, template_id) {\n        docid = templateName;\n        cuser = cuser > '' ? cuser : user;\n        cpid = cpid > '0' ? cpid : pid;\n        page.isNewDoc = true;\n        m = new model.OnsiteDocumentModel();\n        m.set('docType', docid);\n        m.set('filePath', template_id);\n        m.set('denialReason', 'New');\n        $('#docid').val('docid');\n        $('#template_id').val('template_id');\n        $('#status').val('New');\n        page.showDetailDialog(m); // saved in rendered event\n    },\n\n    getDocument: function (templateName, pid, template_id) {\n        $(\".helpHide\").removeClass(\"d-none\");\n        $('.modelContainer').removeClass(\"d-none\");\n        $(\"#editorContainer\").removeClass('w-auto').addClass('w-100');\n        let currentName = page.onsiteDocument.get('docType');\n        if (page.onsiteDocument.get('fileName') === '') {\n            page.onsiteDocument.set('fileName', currentName);\n        }\n        let currentNameStyled = currentName.substr(0, currentName.lastIndexOf('.')) || currentName;\n        currentNameStyled = currentNameStyled.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, ' ');\n        if (currentName === 'Help') {\n            $(\"#dismissOnsiteDocumentButton\").addClass(\"d-none\");\n        } else {\n            $(\"#dismissOnsiteDocumentButton\").removeClass(\"d-none\");\n        }\n        page.isFrameForm = 0;\n        page.encounterFormId = 0;\n        page.encounterFormName = '';\n        if (docid !== 'Help') {\n            $(\"#topnav\").hide();\n        }\n        if (currentName === templateName && currentName && !page.isNewDoc) {\n            // update form for any submits.(downloads and prints)\n            $(\"#docid\").val(currentName);\n            // get document template\n            let templateContents = page.onsiteDocument.get('fullDocument');\n            page.encounterFormId = page.onsiteDocument.get(\"encounter\") ?? 0;\n            page.isFrameForm = templateContents.includes(\"</iframe>\");\n            if (page.isFrameForm) {\n                $(\"#saveTemplate\").show();\n                // modify the iFrames url in embedded content\n                const regex = /^.*(page.encounterFormName)=\"(\\w+)/s;\n                let m;\n                if ((m = regex.exec(templateContents)) !== null) {\n                    page.encounterFormName = m[2];\n                } else {\n                    signerAlertMsg(\"There is an issue loading document. Missing Name Error.\");\n                    return false;\n                }\n                templateContents = templateContents.replace(/(isPortal=)\\d/, \"isPortal=\" + isPortal);\n                templateContents = templateContents.replace(/(formOrigin=)\\d/, \"formOrigin=\" + page.formOrigin);\n            }\n            // init editor. if a frame, will use iframe src href.\n            $('#templatecontent').html(templateContents);\n            // normal text/html template directives are still valid with visit LBF.\n            restoreDocumentEdits();\n            $('.signature').each(function () {\n                // set/reset cursor default for all\n                $(this).css('cursor', 'pointer');\n                if (isModule) {\n                    // Make sure current user is set so can witness patient signature\n                    $(this).attr('data-user', cuser);\n                }\n            });\n            initSignerApi();\n        } else { // this makes it a new template\n            var liburl = webRoot + '/portal/lib/download_template.php';\n            $.ajax({\n                type: \"POST\",\n                url: liburl,\n                data: {template_id: template_id, docid: templateName, pid: pid, isModule: isModule},\n                error: function (qXHR, textStatus, errorThrow) {\n                    console.log(\"There was an error: Get Document\");\n                },\n                success: function (templateHtml, textStatus, jqXHR) {\n                    $(\"#docid\").val(templateName);\n                    page.onsiteDocument.set('fileName', templateName);\n                    $('#templatecontent').html(templateHtml);\n                    if (page.isNewDoc) {\n                        page.isNewDoc = false;\n                        page.isSaved = false;\n                        $(\"#printTemplate\").hide();\n                        $(\"#submitTemplate\").hide();\n                        page.onsiteDocument.set('fullDocument', templateHtml);\n                        if (isPortal) {\n                            $('#adminSignature').css('cursor', 'default').off();\n                        } else if (!isModule) {\n                            $('#patientSignature').css('cursor', 'default').off();\n                            $('#witnessSignature').css('cursor', 'default').off();\n                        }\n                        bindFetch();\n\n                        if (page.isFrameForm) {\n                            //$(\"#editorContainer\").removeClass('w-100').addClass('w-auto');\n                        }\n                        // new encounter form\n                        // lbf has own signer instance. no binding here.\n                        // page.encounterFormName & page.isFrameForm is set from template directive\n                        $(function () {\n                            // an iframe in <form><iframe src=???></iframe> this page.\n                            if (page.isFrameForm) {\n                                // a layout form\n                                if (page.encounterFormName) {\n                                    let url = '';\n                                    if (page.encounterFormName.startsWith('LBF') || page.encounterFormName.startsWith('HIS')) {\n                                        // iframe from template directive {EncounterDocument:LBFxxxxx} for a LBF form\n                                        url = webRoot + \"/interface/forms/LBF/new.php\" + \"\" +\n                                            \"?isPortal=\" + encodeURIComponent(isPortal ? 1 : 0) +\n                                            \"&formOrigin=\" + encodeURIComponent(page.formOrigin) +\n                                            \"&formname=\" + encodeURIComponent(page.encounterFormName) + \"&id=0\";\n                                    } else {\n                                        // iframe from template directive {EncounterDocument:xxxxx} for a native form\n                                        // first, ensure form name is valid\n                                        if (!page.verifyValidEncounterForm(page.encounterFormName)) {\n                                            signerAlertMsg(\"There is an issue loading form. Form does not exist.\");\n                                            return false;\n                                        }\n                                        url = webRoot + \"/interface/forms/\" + encodeURIComponent(page.encounterFormName) + \"/new.php\" +\n                                            \"?isPortal=\" + encodeURIComponent(isPortal ? 1 : 0) +\n                                            \"&formOrigin=\" + encodeURIComponent(page.formOrigin) +\n                                            \"&formname=\" + encodeURIComponent(page.encounterFormName) + \"&id=0\";\n                                        if (page.isQuestionnaire) {\n                                            url = webRoot + \"/interface/forms/questionnaire_assessments/questionnaire_assessments.php\" +\n                                                \"?isPortal=\" + encodeURIComponent(isPortal ? 1 : 0) +\n                                                \"&formOrigin=\" + encodeURIComponent(page.formOrigin) +\n                                                \"&formname=\" + encodeURIComponent(page.encounterFormName) + \"&id=0\";\n                                        }\n                                    }\n                                    document.getElementById('encounterForm').src = url;\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        let cdate = page.onsiteDocument.get('createDate');\n        let status = page.onsiteDocument.get('denialReason');\n        let cnt = cdate.toString().indexOf(\"GMT\");\n        if (cnt !== -1) {\n            cdate = cdate.toString().substring(0, cnt);\n        }\n        $('#docPanelHeader').append('&nbsp;<span class=\"bg-light text-dark px-2\">' + jsText(currentNameStyled) + '</span>&nbsp;' +\n            jsText(' Dated: ' + cdate + ' Status: ' + status));\n    }\n    ,\n    /**\n     * show the doc for editing\n     * @param m doc id\n     */\n    showDetailDialog: function (m) {\n        page.onsiteDocument = m ? m : new model.OnsiteDocumentModel();\n        page.modelView.model = page.onsiteDocument;\n        page.dialogIsOpen = true;\n        if (page.onsiteDocument.id === null || page.onsiteDocument.id === '') {\n            page.renderModelView(false);\n        } else {\n            page.onsiteDocument.fetch({\n                success: function () {\n                    if (page.isDashboard || page.onsiteDocument.get('denialReason') === 'Locked') {\n                        page.renderModelView(false); // @todo TBD when should delete be allowed?\n                    } else {\n                        page.renderModelView(true);\n                    }\n                },\n                error: function (m, r) {\n                    app.appendAlert(app.getErrorMessage(r), 'alert-error', 0, 'modelAlert');\n                }\n            });\n        }\n    },\n\n    /**\n     * Render the model template in the container\n     * @param showDeleteButton\n     */\n    renderModelView: function (showDeleteButton) {\n        page.modelView.render();\n        app.hideProgress('modelLoader');\n\n        // initialize any special controls\n        if (showDeleteButton) {\n            // attach click handlers to the delete buttons\n            $('#confirmDeleteOnsiteDocumentContainer').hide('fast');\n            $('#deleteOnsiteDocumentButtonContainer').show();\n            $('#deleteOnsiteDocumentButton').click(function (e) {\n                e.preventDefault();\n                $('#confirmDeleteOnsiteDocumentContainer').show('fast');\n            });\n\n            $('#cancelDeleteOnsiteDocumentButton').click(function (e) {\n                e.preventDefault();\n                $('#confirmDeleteOnsiteDocumentContainer').hide('fast');\n            });\n\n            $('#confirmDeleteOnsiteDocumentButton').click(function (e) {\n                e.preventDefault();\n                page.deleteModel();\n            });\n        } else {\n            // no point in initializing the click handlers if we don't show the button\n            $('#deleteOnsiteDocumentButtonContainer').hide();\n        }\n    },\n\n    /**\n     * update the model that is currently displayed in the dialog\n     */\n    updateModel: function (reload = false) {\n        // reset any previous errors\n        $('#modelAlert').html('');\n        $('.control-group').removeClass('error');\n        $('.help-inline').html('');\n        if (page.isCharted) {\n            page.onsiteDocument.set('denialReason', 'Locked');\n            page.onsiteDocument.set('authorizingSignator', cuser);\n        }\n        // if this is new then on success we need to add it to the collection\n        var isNew = page.onsiteDocument.isNew();\n        let s = page.onsiteDocument.get('denialReason');\n        if (!isNew && s === 'New' && s !== 'In Review') {\n            page.onsiteDocument.set('denialReason', 'Open');\n            app.showProgress('modelLoader');\n        }\n        let isLink = $('#patientSignature').attr('src') ? $('#patientSignature').attr('src').indexOf('signhere') : -1;\n        let isWitnessLink = $('#witnessSignature').attr('src') ? $('#witnessSignature').attr('src').indexOf('signhere') : -1;\n        if (isLink !== -1) {\n            $('#patientSignature').attr('src', signhere);\n        }\n        if (isWitnessLink !== -1) {\n            $('#witnessSignature').attr('src', signhere);\n        }\n        var ptsignature = $('#patientSignature').attr('src');\n        if (ptsignature == signhere) {\n            if (page.signaturesRequired && page.presentPatientSignature) {\n                signerAlertMsg(signMsg, 6000, 'danger');\n                return false;\n            }\n            ptsignature = \"\";\n        }\n        var wtsignature = $('#witnessSignature').attr('src');\n        if (wtsignature == signhere) {\n            wtsignature = \"\";\n        }\n\n        page.formOrigin = isPortal ? 0 : 1;\n        page.formOrigin = isModule ? 2 : page.formOrigin;\n        let templateContent = document.getElementById('templatecontent').innerHTML;\n        if (page.encounterFormName && page.encounterFormId) {\n            // lbf templates are saved as iframe tag with src url for fetch content on doc load.\n            // no frame content is maintained in onsite document activity but template directives are.\n            templateContent = templateContent.replace(\"id=0\", \"id=\" + page.encounterFormId);\n        }\n        // removing for testing\n        /* if (isPortal) {\n            templateContent = page.encode(templateContent, parseInt(csrfTokenDoclib[0]));\n        } */\n        page.onsiteDocument.save({\n            'pid': cpid,\n            'facility': page.formOrigin, /* 0 portal, 1 dashboard, 2 patient documents */\n            'provider': page.onsiteDocument.get('provider'),\n            'encounter': page.onsiteDocument.get('encounter'),\n            'createDate': new Date(),\n            'docType': page.onsiteDocument.get('docType'),\n            'patientSignedStatus': ptsignature ? '1' : '0',\n            'patientSignedTime': ptsignature ? new Date() : '0000-00-00',\n            'authorizeSignedTime': page.onsiteDocument.get('authorizeSignedTime'),\n            'acceptSignedStatus': page.onsiteDocument.get('acceptSignedStatus'),\n            'authorizingSignator': page.onsiteDocument.get('authorizingSignator'),\n            'reviewDate': (!isPortal) ? new Date() : '0000-00-00',\n            'denialReason': page.onsiteDocument.get('denialReason'),\n            'authorizedSignature': page.onsiteDocument.get('authorizedSignature'),\n            'patientSignature': ptsignature,\n            'fullDocument': templateContent,\n            'fileName': page.onsiteDocument.get('fileName'),\n            'filePath': page.onsiteDocument.get('filePath'),\n            'csrf_token_form': csrfTokenDoclib\n        }, {\n            wait: true,\n            success: function () {\n                app.hideProgress('modelLoader');\n                if (page.isCharted) {\n                    pageAudit.onsitePortalActivity.set('status', 'closed');\n                    pageAudit.onsitePortalActivity.set('pendingAction', 'completed');\n                    pageAudit.onsitePortalActivity.set('actionUser', cuser);\n                }\n                pageAudit.onsitePortalActivity.set('date', page.onsiteDocument.get('createDate'));\n                pageAudit.onsitePortalActivity.set('activity', 'document');\n                pageAudit.onsitePortalActivity.set('patientId', cpid);\n                pageAudit.onsitePortalActivity.set('tableAction', 'update');\n                pageAudit.onsitePortalActivity.set('tableArgs', page.onsiteDocument.get('id'));\n                pageAudit.onsitePortalActivity.set('narrative', page.onsiteDocument.get('docType'));\n                pageAudit.onsitePortalActivity.set('actionTakenTime', new Date());\n                pageAudit.updateModel();\n                if (isNew) {\n                    $('#confirmDeleteOnsiteDocumentContainer').hide('fast');\n                    $('#deleteOnsiteDocumentButtonContainer').show();\n                    if (isPortal) {\n                        $(\"#submitTemplate\").show();\n                        $(\"#sendTemplate\").show();\n                    } else {\n                        $(\"#submitTemplate\").hide();\n                        $(\"#sendTemplate\").hide();\n                    }\n                    page.isNewDoc = false;\n                    page.onsiteDocuments.add(page.onsiteDocument)\n                }\n                if (model.reloadCollectionOnModelUpdate) {\n                    page.fetchOnsiteDocuments(page.fetchParams, true);\n                    page.showDetailDialog(page.onsiteDocument);\n                }\n                signerAlertMsg(msgSuccess, 2000, 'success');\n                if (page.isCharted && isModule) {\n                    $(\"#a_docReturn\").click();\n                    return;\n                }\n                if (reload) {\n                    setTimeout(\"location.reload(true);\", 3000);\n                }\n            },\n            error: function (model, response, scope) {\n                app.hideProgress('modelLoader');\n                app.appendAlert(app.getErrorMessage(response), 'alert-error', 0, 'modelAlert');\n            }\n        });\n    },\n    /**\n     * delete the model that is currently displayed in the dialog\n     */\n    deleteModel: function () {\n        // reset any previous errors\n        $('#modelAlert').html('');\n\n        app.showProgress('modelLoader');\n\n        page.onsiteDocument.destroy({\n            wait: true,\n            success: function () {\n                signerAlertMsg(msgDelete, 2000, 'success');\n                app.hideProgress('modelLoader');\n                pageAudit.onsitePortalActivity.set('status', 'deleted');\n                pageAudit.onsitePortalActivity.set('pendingAction', 'none');\n                pageAudit.onsitePortalActivity.set('activity', 'document');\n\n                pageAudit.onsitePortalActivity.set('pid', cpid);\n                pageAudit.onsitePortalActivity.set('tableAction', 'delete');\n                pageAudit.onsitePortalActivity.set('tableArgs', page.onsiteDocument.get('id'));\n                pageAudit.onsitePortalActivity.set('narrative', 'Patient deleted un-charted template');\n                pageAudit.updateModel()\n\n                if (model.reloadCollectionOnModelUpdate) {\n                    // re-fetch and render the collection after the model has been updated\n                    page.fetchOnsiteDocuments(page.fetchParams, true);\n                    setTimeout(\"location.reload(true);\", 3000);\n                }\n            },\n            error: function (model, response, scope) {\n                app.appendAlert(app.getErrorMessage(response), 'alert-error', 0, 'modelAlert');\n                app.hideProgress('modelLoader');\n            }\n        });\n    },\n    // removing for testing\n    /* encode: function (content, k) {\n        let encoded = \"\";\n        content = btoa(content);\n        content = btoa(content);\n        for (i = 0; i < content.length; i++) {\n            let a = content.charCodeAt(i);\n            let b = a ^ k;\n            encoded = encoded + String.fromCharCode(b);\n        }\n        return btoa(encoded);\n    } */\n};\n"], "filenames": ["portal/patient/libs/Controller/OnsiteDocumentController.php", "portal/patient/scripts/app/onsitedocuments.js"], "buggy_code_start_loc": [254, 851], "buggy_code_end_loc": [403, 970], "fixing_code_start_loc": [254, 851], "fixing_code_end_loc": [460, 972], "type": "CWE-285", "message": "Improper Authorization in GitHub repository openemr/openemr prior to 7.0.1.", "other": {"cve": {"id": "CVE-2023-2950", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-28T04:15:14.513", "lastModified": "2023-06-01T03:51:57.090", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization in GitHub repository openemr/openemr prior to 7.0.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.1", "matchCriteriaId": "30B2EE3F-FA55-46FB-BC32-B041753826A4"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/abee8d2606c706176818de25eb88a2d08b8f7fa4", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/612d13cf-2ef9-44ea-b8fb-e797948a9a86", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/abee8d2606c706176818de25eb88a2d08b8f7fa4"}}