{"buggy_code": ["package com.fit2cloud.base.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.fit2cloud.base.entity.User;\nimport com.fit2cloud.base.mapper.BaseUserMapper;\nimport com.fit2cloud.base.service.IBaseUserRoleService;\nimport com.fit2cloud.base.service.IBaseUserService;\nimport com.fit2cloud.common.log.utils.IpUtil;\nimport com.fit2cloud.common.utils.CurrentUserUtils;\nimport com.fit2cloud.common.utils.JwtTokenUtils;\nimport com.fit2cloud.common.utils.MD5Util;\nimport com.fit2cloud.dto.UserDto;\nimport com.fit2cloud.request.LoginRequest;\nimport com.fit2cloud.request.user.EditUserRequest;\nimport com.fit2cloud.request.user.ResetPwdRequest;\nimport com.fit2cloud.service.TokenPoolService;\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.time.LocalDateTime;\nimport java.util.Optional;\n\n/**\n * <p>\n * \u7528\u6237 \u670d\u52a1\u5b9e\u73b0\u7c7b\n * </p>\n *\n * @author fit2cloud\n * @since\n */\n@Service\npublic class BaseUserServiceImpl extends ServiceImpl<BaseUserMapper, User> implements IBaseUserService {\n\n    @Resource\n    private IBaseUserRoleService userRoleService;\n    @Resource\n    private TokenPoolService tokenPoolService;\n\n    @Override\n    public String login(ServerHttpRequest request, LoginRequest loginRequest) {\n\n        if (StringUtils.isBlank(loginRequest.getUsername())) {\n            throw new RuntimeException(\"\u7528\u6237\u540d\u4e3a\u7a7a\");\n        }\n\n        if (StringUtils.isBlank(loginRequest.getPassword())) {\n            throw new RuntimeException(\"\u5bc6\u7801\u4e3a\u7a7a\");\n        }\n\n        UserDto user = getUserByIdOrEmail(loginRequest.getUsername());\n        if (user == null) {\n            throw new RuntimeException(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n        }\n\n        if (!user.getEnabled()) {\n            throw new RuntimeException(\"\u7528\u6237\u5df2\u88ab\u7981\u7528\");\n        }\n\n        if (!checkPassword(user, loginRequest.getPassword())) {\n            throw new RuntimeException(\"\u5bc6\u7801\u9519\u8bef\");\n        }\n\n        //\u5c06\u5f53\u524d\u7528\u6237\u7684\u6388\u6743\u89d2\u8272\u66f4\u65b0\u5230redis\n        userRoleService.saveCachedUserRoleMap(user.getId());\n\n        System.out.println(IpUtil.getIpAddress(request));\n        user.setIp(IpUtil.getIpAddress(request));\n        user.setLoginTime(LocalDateTime.now());\n\n        KeyValue<String, String> jwt = JwtTokenUtils.createJwtToken(user);\n\n        tokenPoolService.saveJwt(user.getId(), jwt.getKey());\n\n        return jwt.getValue();\n    }\n\n    @Override\n    public UserDto getUserByIdOrEmail(String username) {\n        User user = getUserByUserName(username);\n        if (user == null) {\n            user = getUserByEmail(username);\n        }\n        if (user == null) {\n            return null;\n        }\n\n        UserDto dto = new UserDto();\n        BeanUtils.copyProperties(user, dto);\n        //dto.setRoleMap(userRoleService.getUserRoleMap(dto.getId()));\n        return dto;\n    }\n\n\n    public User getUserById(String userId) {\n        return this.getOne(\n                new LambdaQueryWrapper<User>()\n                        .eq(User::getId, userId)\n        );\n    }\n\n    public User getUserByUserName(String username) {\n        return this.getOne(\n                new LambdaQueryWrapper<User>()\n                        .eq(User::getUsername, username)\n        );\n    }\n\n    public User getUserByEmail(String email) {\n        return this.getOne(\n                new LambdaQueryWrapper<User>()\n                        .eq(User::getEmail, email)\n        );\n    }\n\n    @Override\n    public boolean checkPassword(User user, String password) {\n        BaseUserMapper userMapper = this.getBaseMapper();\n        return userMapper.checkPassword(user.getUsername(), MD5Util.md5(password));\n    }\n\n    @Override\n    public boolean updateUserBasicInfo(EditUserRequest request) {\n        // \u6821\u9a8c\u4fee\u6539\u7684\u7528\u6237\u90ae\u7bb1\u662f\u5426\u5df2\u5b58\u5728\n        if (StringUtils.isNotEmpty(request.getEmail())) {\n            if (this.count(new LambdaQueryWrapper<User>().ne(User::getId, request.getId()).eq(User::getEmail, request.getEmail())) > 0) {\n                throw new RuntimeException(\"\u90ae\u7bb1\u5df2\u5b58\u5728\");\n            }\n        }\n        User user = new User();\n        BeanUtils.copyProperties(request, user);\n        user.setUpdateTime(null);\n        baseMapper.updateById(user);\n        return true;\n    }\n\n    @Override\n    public boolean resetPwd(ResetPwdRequest request) {\n        return resetPwd(request, CurrentUserUtils.getUser());\n    }\n\n    @Override\n    public boolean resetPwd(ResetPwdRequest request, UserDto currentUser) {\n        Optional.ofNullable(currentUser).orElseThrow(() -> new RuntimeException(\"\u5f53\u524d\u7528\u6237\u4e3a\u7a7a\"));\n        User user = this.getUserById(currentUser.getId());\n        Optional.ofNullable(user).orElseThrow(() -> new RuntimeException(\"\u5f53\u524d\u767b\u5f55\u7528\u6237\u4e0d\u5b58\u5728\"));\n\n        // \u975e\u672c\u5730\u521b\u5efa\u7528\u6237\u4e0d\u5141\u8bb8\u4fee\u6539\u5bc6\u7801\n        if (!\"local\".equalsIgnoreCase(user.getSource())) {\n            throw new RuntimeException(\"\u975e\u4e91\u7ba1\u672c\u5730\u521b\u5efa\u7684\u7528\u6237\u65e0\u6cd5\u4fee\u6539\u5bc6\u7801\");\n        }\n        if (!MD5Util.md5(request.getOldPassword()).equalsIgnoreCase(user.getPassword())) {\n            throw new RuntimeException(\"\u65e7\u5bc6\u7801\u9519\u8bef\");\n        }\n\n        user.setPassword(MD5Util.md5(request.getNewPassword()));\n        user.setUpdateTime(null);\n        this.updateById(user);\n        return true;\n    }\n}\n"], "fixing_code": ["package com.fit2cloud.base.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.fit2cloud.base.entity.User;\nimport com.fit2cloud.base.mapper.BaseUserMapper;\nimport com.fit2cloud.base.service.IBaseUserRoleService;\nimport com.fit2cloud.base.service.IBaseUserService;\nimport com.fit2cloud.common.log.utils.IpUtil;\nimport com.fit2cloud.common.utils.CurrentUserUtils;\nimport com.fit2cloud.common.utils.JwtTokenUtils;\nimport com.fit2cloud.common.utils.MD5Util;\nimport com.fit2cloud.dto.UserDto;\nimport com.fit2cloud.request.LoginRequest;\nimport com.fit2cloud.request.user.EditUserRequest;\nimport com.fit2cloud.request.user.ResetPwdRequest;\nimport com.fit2cloud.service.TokenPoolService;\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.time.LocalDateTime;\nimport java.util.Optional;\n\n/**\n * <p>\n * \u7528\u6237 \u670d\u52a1\u5b9e\u73b0\u7c7b\n * </p>\n *\n * @author fit2cloud\n * @since\n */\n@Service\npublic class BaseUserServiceImpl extends ServiceImpl<BaseUserMapper, User> implements IBaseUserService {\n\n    @Resource\n    private IBaseUserRoleService userRoleService;\n    @Resource\n    private TokenPoolService tokenPoolService;\n\n    @Override\n    public String login(ServerHttpRequest request, LoginRequest loginRequest) {\n\n        if (StringUtils.isBlank(loginRequest.getUsername())) {\n            throw new RuntimeException(\"\u7528\u6237\u540d\u4e3a\u7a7a\");\n        }\n\n        if (StringUtils.isBlank(loginRequest.getPassword())) {\n            throw new RuntimeException(\"\u5bc6\u7801\u4e3a\u7a7a\");\n        }\n\n        UserDto user = getUserByIdOrEmail(loginRequest.getUsername());\n        if (user == null) {\n            throw new RuntimeException(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n        }\n\n        if (!user.getEnabled()) {\n            throw new RuntimeException(\"\u7528\u6237\u5df2\u88ab\u7981\u7528\");\n        }\n\n        if (!checkPassword(user, loginRequest.getPassword())) {\n            throw new RuntimeException(\"\u5bc6\u7801\u9519\u8bef\");\n        }\n\n        //\u5c06\u5f53\u524d\u7528\u6237\u7684\u6388\u6743\u89d2\u8272\u66f4\u65b0\u5230redis\n        userRoleService.saveCachedUserRoleMap(user.getId());\n\n        System.out.println(IpUtil.getIpAddress(request));\n        user.setIp(IpUtil.getIpAddress(request));\n        user.setLoginTime(LocalDateTime.now());\n\n        KeyValue<String, String> jwt = JwtTokenUtils.createJwtToken(user);\n\n        tokenPoolService.saveJwt(user.getId(), jwt.getKey());\n\n        return jwt.getValue();\n    }\n\n    @Override\n    public UserDto getUserByIdOrEmail(String username) {\n        User user = getUserByUserName(username);\n        if (user == null) {\n            user = getUserByEmail(username);\n        }\n        if (user == null) {\n            return null;\n        }\n\n        UserDto dto = new UserDto();\n        BeanUtils.copyProperties(user, dto);\n        //dto.setRoleMap(userRoleService.getUserRoleMap(dto.getId()));\n        return dto;\n    }\n\n\n    public User getUserById(String userId) {\n        return this.getOne(\n                new LambdaQueryWrapper<User>()\n                        .eq(User::getId, userId)\n        );\n    }\n\n    public User getUserByUserName(String username) {\n        return this.getOne(\n                new LambdaQueryWrapper<User>()\n                        .eq(User::getUsername, username)\n        );\n    }\n\n    public User getUserByEmail(String email) {\n        return this.getOne(\n                new LambdaQueryWrapper<User>()\n                        .eq(User::getEmail, email)\n        );\n    }\n\n    @Override\n    public boolean checkPassword(User user, String password) {\n        BaseUserMapper userMapper = this.getBaseMapper();\n        return userMapper.checkPassword(user.getUsername(), MD5Util.md5(password));\n    }\n\n    @Override\n    public boolean updateUserBasicInfo(EditUserRequest request) {\n        // \u6821\u9a8c\u4fee\u6539\u7684\u7528\u6237\u90ae\u7bb1\u662f\u5426\u5df2\u5b58\u5728\n        if (StringUtils.isNotEmpty(request.getEmail())) {\n            if (this.count(new LambdaQueryWrapper<User>().ne(User::getId, request.getId()).eq(User::getEmail, request.getEmail())) > 0) {\n                throw new RuntimeException(\"\u90ae\u7bb1\u5df2\u5b58\u5728\");\n            }\n        }\n        User user = new User();\n        BeanUtils.copyProperties(request, user);\n        user.setUpdateTime(null);\n        baseMapper.updateById(user);\n        return true;\n    }\n\n    @Override\n    public boolean resetPwd(ResetPwdRequest request) {\n        return resetPwd(request, CurrentUserUtils.getUser());\n    }\n\n    @Override\n    public boolean resetPwd(ResetPwdRequest request, UserDto currentUser) {\n        Optional.ofNullable(currentUser).orElseThrow(() -> new RuntimeException(\"\u5f53\u524d\u7528\u6237\u4e3a\u7a7a\"));\n        User user = this.getUserById(currentUser.getId());\n        Optional.ofNullable(user).orElseThrow(() -> new RuntimeException(\"\u5f53\u524d\u767b\u5f55\u7528\u6237\u4e0d\u5b58\u5728\"));\n\n        // \u975e\u672c\u5730\u521b\u5efa\u7528\u6237\u4e0d\u5141\u8bb8\u4fee\u6539\u5bc6\u7801\n        if (!\"local\".equalsIgnoreCase(user.getSource())) {\n            throw new RuntimeException(\"\u975e\u4e91\u7ba1\u672c\u5730\u521b\u5efa\u7684\u7528\u6237\u65e0\u6cd5\u4fee\u6539\u5bc6\u7801\");\n        }\n        if (StringUtils.equals(request.getOldPassword(), request.getNewPassword())) {\n            throw new RuntimeException(\"\u65b0\u65e7\u5bc6\u7801\u76f8\u540c\");\n        }\n        if (!MD5Util.md5(request.getOldPassword()).equalsIgnoreCase(user.getPassword())) {\n            throw new RuntimeException(\"\u65e7\u5bc6\u7801\u9519\u8bef\");\n        }\n\n        if (!request.getNewPassword().matches(\"^(?!.*\\\\s)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[\\\\W_]).{8,30}$\")) {\n            throw new RuntimeException(\"\u6709\u6548\u5bc6\u7801\uff1a8-30\u4f4d\uff0c\u82f1\u6587\u5927\u5c0f\u5199\u5b57\u6bcd+\u6570\u5b57+\u7279\u6b8a\u5b57\u7b26\");\n        }\n\n        user.setPassword(MD5Util.md5(request.getNewPassword()));\n        user.setUpdateTime(null);\n        this.updateById(user);\n        return true;\n    }\n}\n"], "filenames": ["framework/sdk/backend/src/main/java/com/fit2cloud/base/service/impl/BaseUserServiceImpl.java"], "buggy_code_start_loc": [155], "buggy_code_end_loc": [157], "fixing_code_start_loc": [156], "fixing_code_end_loc": [165], "type": "CWE-521", "message": "Weak Password Requirements in GitHub repository cloudexplorer-dev/cloudexplorer-lite prior to v 1.2.0.", "other": {"cve": {"id": "CVE-2023-3423", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-27T04:15:10.543", "lastModified": "2023-07-06T16:07:04.793", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weak Password Requirements in GitHub repository cloudexplorer-dev/cloudexplorer-lite prior to v 1.2.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fit2cloud:cloudexplorer_lite:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.0", "matchCriteriaId": "257487A2-0E67-4271-9024-5BCD53F9C536"}]}]}], "references": [{"url": "https://github.com/cloudexplorer-dev/cloudexplorer-lite/commit/7d4dab60352079953b7be120afe9bd14983ae3bc", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/dd19c7d0-70f1-4d86-a552-611dfa8e0139", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cloudexplorer-dev/cloudexplorer-lite/commit/7d4dab60352079953b7be120afe9bd14983ae3bc"}}