{"buggy_code": ["{\n  \"name\": \"deobfuscator\",\n  \"version\": \"2.4.3\",\n  \"description\": \"multipurpose javascript transformer\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"synchrony\": \"dist/cli.js\"\n  },\n  \"scripts\": {\n    \"build\": \"node scripts/build.js\",\n    \"watch\": \"node scripts/build.js --watch\",\n    \"clean\": \"rimraf dist/\",\n    \"docs\": \"typedoc --options ./typedoc.json\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/relative/synchrony.git\"\n  },\n  \"keywords\": [\n    \"deobfuscator\"\n  ],\n  \"author\": \"relative <hi@relative.im>\",\n  \"license\": \"GPL-3.0-only\",\n  \"bugs\": {\n    \"url\": \"https://github.com/relative/synchrony/issues\"\n  },\n  \"homepage\": \"https://github.com/relative/synchrony#readme\",\n  \"devDependencies\": {\n    \"@types/escodegen\": \"0.0.7\",\n    \"@types/eslint-scope\": \"3.7.4\",\n    \"@types/estree\": \"0.0.51\",\n    \"@types/mersenne-twister\": \"1.1.2\",\n    \"@types/node\": \"17.0.17\",\n    \"@types/prettier\": \"2.4.4\",\n    \"@types/yargs\": \"17.0.8\",\n    \"esbuild\": \"0.14.21\",\n    \"escodegen\": \"2.0.0\",\n    \"javascript-obfuscator\": \"4.0.0\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.22.11\",\n    \"typescript\": \"4.5.5\"\n  },\n  \"dependencies\": {\n    \"@javascript-obfuscator/escodegen\": \"2.3.0\",\n    \"acorn\": \"8.7.0\",\n    \"acorn-loose\": \"8.3.0\",\n    \"acorn-walk\": \"8.2.0\",\n    \"eslint-scope\": \"7.1.1\",\n    \"mersenne-twister\": \"1.1.0\",\n    \"prettier\": \"2.5.1\",\n    \"yargs\": \"17.3.1\"\n  }\n}\n", "lockfileVersion: '6.0'\n\ndependencies:\n  '@javascript-obfuscator/escodegen':\n    specifier: 2.3.0\n    version: 2.3.0\n  acorn:\n    specifier: 8.7.0\n    version: 8.7.0\n  acorn-loose:\n    specifier: 8.3.0\n    version: 8.3.0\n  acorn-walk:\n    specifier: 8.2.0\n    version: 8.2.0\n  eslint-scope:\n    specifier: 7.1.1\n    version: 7.1.1\n  mersenne-twister:\n    specifier: 1.1.0\n    version: 1.1.0\n  prettier:\n    specifier: 2.5.1\n    version: 2.5.1\n  yargs:\n    specifier: 17.3.1\n    version: 17.3.1\n\ndevDependencies:\n  '@types/escodegen':\n    specifier: 0.0.7\n    version: 0.0.7\n  '@types/eslint-scope':\n    specifier: 3.7.4\n    version: 3.7.4\n  '@types/estree':\n    specifier: 0.0.51\n    version: 0.0.51\n  '@types/mersenne-twister':\n    specifier: 1.1.2\n    version: 1.1.2\n  '@types/node':\n    specifier: 17.0.17\n    version: 17.0.17\n  '@types/prettier':\n    specifier: 2.4.4\n    version: 2.4.4\n  '@types/yargs':\n    specifier: 17.0.8\n    version: 17.0.8\n  esbuild:\n    specifier: 0.14.21\n    version: 0.14.21\n  escodegen:\n    specifier: 2.0.0\n    version: 2.0.0\n  javascript-obfuscator:\n    specifier: 4.0.0\n    version: 4.0.0\n  rimraf:\n    specifier: 3.0.2\n    version: 3.0.2\n  typedoc:\n    specifier: 0.22.11\n    version: 0.22.11(typescript@4.5.5)\n  typescript:\n    specifier: 4.5.5\n    version: 4.5.5\n\npackages:\n\n  /@javascript-obfuscator/escodegen@2.3.0:\n    resolution: {integrity: sha512-QVXwMIKqYMl3KwtTirYIA6gOCiJ0ZDtptXqAv/8KWLG9uQU2fZqTVy7a/A5RvcoZhbDoFfveTxuGxJ5ibzQtkw==}\n    engines: {node: '>=6.0'}\n    dependencies:\n      '@javascript-obfuscator/estraverse': 5.4.0\n      esprima: 4.0.1\n      esutils: 2.0.3\n      optionator: 0.8.3\n    optionalDependencies:\n      source-map: 0.6.1\n\n  /@javascript-obfuscator/estraverse@5.4.0:\n    resolution: {integrity: sha512-CZFX7UZVN9VopGbjTx4UXaXsi9ewoM1buL0kY7j1ftYdSs7p2spv9opxFjHlQ/QGTgh4UqufYqJJ0WKLml7b6w==}\n    engines: {node: '>=4.0'}\n\n  /@types/escodegen@0.0.7:\n    resolution: {integrity: sha512-46oENdSRNEJXCNrPJoC3vRolZJpfeEm7yvATkd2bCncKFG0PUEyfBCaoacfpcXH4Y5RRuqdVj3J7TI+wwn2SbQ==}\n    dev: true\n\n  /@types/eslint-scope@3.7.4:\n    resolution: {integrity: sha512-9K4zoImiZc3HlIp6AVUDE4CWYx22a+lhSZMYNpbjW04+YF0KWj4pJXnEMjdnFTiQibFFmElcsasJXDbdI/EPhA==}\n    dependencies:\n      '@types/eslint': 8.4.1\n      '@types/estree': 0.0.51\n    dev: true\n\n  /@types/eslint@8.4.1:\n    resolution: {integrity: sha512-GE44+DNEyxxh2Kc6ro/VkIj+9ma0pO0bwv9+uHSyBrikYOHr8zYcdPvnBOp1aw8s+CjRvuSx7CyWqRrNFQ59mA==}\n    dependencies:\n      '@types/estree': 0.0.51\n      '@types/json-schema': 7.0.9\n    dev: true\n\n  /@types/estree@0.0.51:\n    resolution: {integrity: sha512-CuPgU6f3eT/XgKKPqKd/gLZV1Xmvf1a2R5POBOGQa6uv82xpls89HU5zKeVoyR8XzHd1RGNOlQlvUe3CFkjWNQ==}\n    dev: true\n\n  /@types/json-schema@7.0.9:\n    resolution: {integrity: sha512-qcUXuemtEu+E5wZSJHNxUXeCZhAfXKQ41D+duX+VYPde7xyEVZci+/oXKJL13tnRs9lR2pr4fod59GT6/X1/yQ==}\n    dev: true\n\n  /@types/mersenne-twister@1.1.2:\n    resolution: {integrity: sha512-7KMIfSkMpaVExbzJRLUXHMO4hkFWbbspHPREk8I6pBxiNN+3+l6eAEClMCIPIo2KjCkR0rjYfXppr6+wKdTwpA==}\n    dev: true\n\n  /@types/minimatch@3.0.5:\n    resolution: {integrity: sha512-Klz949h02Gz2uZCMGwDUSDS1YBlTdDDgbWHi+81l29tQALUtvz4rAYi5uoVhE5Lagoq6DeqAUlbrHvW/mXDgdQ==}\n    dev: true\n\n  /@types/node@17.0.17:\n    resolution: {integrity: sha512-e8PUNQy1HgJGV3iU/Bp2+D/DXh3PYeyli8LgIwsQcs1Ar1LoaWHSIT6Rw+H2rNJmiq6SNWiDytfx8+gYj7wDHw==}\n    dev: true\n\n  /@types/prettier@2.4.4:\n    resolution: {integrity: sha512-ReVR2rLTV1kvtlWFyuot+d1pkpG2Fw/XKE3PDAdj57rbM97ttSp9JZ2UsP+2EHTylra9cUf6JA7tGwW1INzUrA==}\n    dev: true\n\n  /@types/yargs-parser@20.2.1:\n    resolution: {integrity: sha512-7tFImggNeNBVMsn0vLrpn1H1uPrUBdnARPTpZoitY37ZrdJREzf7I16tMrlK3hen349gr1NYh8CmZQa7CTG6Aw==}\n    dev: true\n\n  /@types/yargs@17.0.8:\n    resolution: {integrity: sha512-wDeUwiUmem9FzsyysEwRukaEdDNcwbROvQ9QGRKaLI6t+IltNzbn4/i4asmB10auvZGQCzSQ6t0GSczEThlUXw==}\n    dependencies:\n      '@types/yargs-parser': 20.2.1\n    dev: true\n\n  /acorn-loose@8.3.0:\n    resolution: {integrity: sha512-75lAs9H19ldmW+fAbyqHdjgdCrz0pWGXKmnqFoh8PyVd1L2RIb4RzYrSjmopeqv3E1G3/Pimu6GgLlrGbrkF7w==}\n    engines: {node: '>=0.4.0'}\n    dependencies:\n      acorn: 8.7.0\n    dev: false\n\n  /acorn-walk@8.2.0:\n    resolution: {integrity: sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==}\n    engines: {node: '>=0.4.0'}\n    dev: false\n\n  /acorn@8.7.0:\n    resolution: {integrity: sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==}\n    engines: {node: '>=0.4.0'}\n    hasBin: true\n\n  /ansi-regex@5.0.1:\n    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}\n    engines: {node: '>=8'}\n    dev: false\n\n  /ansi-styles@4.3.0:\n    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}\n    engines: {node: '>=8'}\n    dependencies:\n      color-convert: 2.0.1\n\n  /array-differ@3.0.0:\n    resolution: {integrity: sha512-THtfYS6KtME/yIAhKjZ2ul7XI96lQGHRputJQHO80LAWQnuGP4iCIN8vdMRboGbIEYBwU33q8Tch1os2+X0kMg==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /array-union@2.1.0:\n    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /arrify@2.0.1:\n    resolution: {integrity: sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /assert@2.0.0:\n    resolution: {integrity: sha512-se5Cd+js9dXJnu6Ag2JFc00t+HmHOen+8Q+L7O9zI0PqQXr20uk2J0XQqMxZEeo5U50o8Nvmmx7dZrl+Ufr35A==}\n    dependencies:\n      es6-object-assign: 1.1.0\n      is-nan: 1.3.2\n      object-is: 1.1.5\n      util: 0.12.4\n    dev: true\n\n  /available-typed-arrays@1.0.5:\n    resolution: {integrity: sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /balanced-match@1.0.2:\n    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}\n    dev: true\n\n  /brace-expansion@1.1.11:\n    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}\n    dependencies:\n      balanced-match: 1.0.2\n      concat-map: 0.0.1\n    dev: true\n\n  /buffer-from@1.1.2:\n    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}\n    dev: true\n\n  /call-bind@1.0.2:\n    resolution: {integrity: sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==}\n    dependencies:\n      function-bind: 1.1.1\n      get-intrinsic: 1.1.1\n    dev: true\n\n  /chalk@4.1.2:\n    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}\n    engines: {node: '>=10'}\n    dependencies:\n      ansi-styles: 4.3.0\n      supports-color: 7.2.0\n    dev: true\n\n  /chance@1.1.8:\n    resolution: {integrity: sha512-v7fi5Hj2VbR6dJEGRWLmJBA83LJMS47pkAbmROFxHWd9qmE1esHRZW8Clf1Fhzr3rjxnNZVCjOEv/ivFxeIMtg==}\n    dev: true\n\n  /char-regex@1.0.2:\n    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}\n    engines: {node: '>=10'}\n    dev: true\n\n  /charenc@0.0.2:\n    resolution: {integrity: sha1-wKHS86cJLgN3S/qD8UwPxXkKhmc=}\n    dev: true\n\n  /class-validator@0.13.2:\n    resolution: {integrity: sha512-yBUcQy07FPlGzUjoLuUfIOXzgynnQPPruyK1Ge2B74k9ROwnle1E+NxLWnUv5OLU8hA/qL5leAE9XnXq3byaBw==}\n    dependencies:\n      libphonenumber-js: 1.9.49\n      validator: 13.7.0\n    dev: true\n\n  /cliui@7.0.4:\n    resolution: {integrity: sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==}\n    dependencies:\n      string-width: 4.2.3\n      strip-ansi: 6.0.1\n      wrap-ansi: 7.0.0\n    dev: false\n\n  /color-convert@2.0.1:\n    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}\n    engines: {node: '>=7.0.0'}\n    dependencies:\n      color-name: 1.1.4\n\n  /color-name@1.1.4:\n    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}\n\n  /commander@9.0.0:\n    resolution: {integrity: sha512-JJfP2saEKbQqvW+FI93OYUB4ByV5cizMpFMiiJI8xDbBvQvSkIk0VvQdn1CZ8mqAO8Loq2h0gYTYtDFUZUeERw==}\n    engines: {node: ^12.20.0 || >=14}\n    dev: true\n\n  /concat-map@0.0.1:\n    resolution: {integrity: sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=}\n    dev: true\n\n  /crypt@0.0.2:\n    resolution: {integrity: sha1-iNf/fsDfuG9xPch7u0LQRNPmxBs=}\n    dev: true\n\n  /deep-is@0.1.4:\n    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}\n\n  /define-properties@1.1.3:\n    resolution: {integrity: sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      object-keys: 1.1.1\n    dev: true\n\n  /emoji-regex@8.0.0:\n    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}\n    dev: false\n\n  /es-abstract@1.19.1:\n    resolution: {integrity: sha512-2vJ6tjA/UfqLm2MPs7jxVybLoB8i1t1Jd9R3kISld20sIxPcTbLuggQOUxeWeAvIUkduv/CfMjuh4WmiXr2v9w==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      es-to-primitive: 1.2.1\n      function-bind: 1.1.1\n      get-intrinsic: 1.1.1\n      get-symbol-description: 1.0.0\n      has: 1.0.3\n      has-symbols: 1.0.2\n      internal-slot: 1.0.3\n      is-callable: 1.2.4\n      is-negative-zero: 2.0.2\n      is-regex: 1.1.4\n      is-shared-array-buffer: 1.0.1\n      is-string: 1.0.7\n      is-weakref: 1.0.2\n      object-inspect: 1.12.0\n      object-keys: 1.1.1\n      object.assign: 4.1.2\n      string.prototype.trimend: 1.0.4\n      string.prototype.trimstart: 1.0.4\n      unbox-primitive: 1.0.1\n    dev: true\n\n  /es-to-primitive@1.2.1:\n    resolution: {integrity: sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      is-callable: 1.2.4\n      is-date-object: 1.0.5\n      is-symbol: 1.0.4\n    dev: true\n\n  /es6-object-assign@1.1.0:\n    resolution: {integrity: sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw=}\n    dev: true\n\n  /esbuild-android-arm64@0.14.21:\n    resolution: {integrity: sha512-Bqgld1TY0wZv8TqiQmVxQFgYzz8ZmyzT7clXBDZFkOOdRybzsnj8AZuK1pwcLVA7Ya6XncHgJqIao7NFd3s0RQ==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [android]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-darwin-64@0.14.21:\n    resolution: {integrity: sha512-j+Eg+e13djzyYINVvAbOo2/zvZ2DivuJJTaBrJnJHSD7kUNuGHRkHoSfFjbI80KHkn091w350wdmXDNSgRjfYQ==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [darwin]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-darwin-arm64@0.14.21:\n    resolution: {integrity: sha512-nDNTKWDPI0RuoPj5BhcSB2z5EmZJJAyRtZLIjyXSqSpAyoB8eyAKXl4lB8U2P78Fnh4Lh1le/fmpewXE04JhBQ==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [darwin]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-freebsd-64@0.14.21:\n    resolution: {integrity: sha512-zIurkCHXhxELiDZtLGiexi8t8onQc2LtuE+S7457H/pP0g0MLRKMrsn/IN4LDkNe6lvBjuoZZi2OfelOHn831g==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [freebsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-freebsd-arm64@0.14.21:\n    resolution: {integrity: sha512-wdxMmkJfbwcN+q85MpeUEamVZ40FNsBa9mPq8tAszDn8TRT2HoJvVRADPIIBa9SWWwlDChIMjkDKAnS3KS/sPA==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [freebsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-32@0.14.21:\n    resolution: {integrity: sha512-fmxvyzOPPh2xiEHojpCeIQP6pXcoKsWbz3ryDDIKLOsk4xp3GbpHIEAWP0xTeuhEbendmvBDVKbAVv3PnODXLg==}\n    engines: {node: '>=12'}\n    cpu: [ia32]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-64@0.14.21:\n    resolution: {integrity: sha512-edZyNOv1ql+kpmlzdqzzDjRQYls+tSyi4QFi+PdBhATJFUqHsnNELWA9vMSzAaInPOEaVUTA5Ml28XFChcy4DA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-arm64@0.14.21:\n    resolution: {integrity: sha512-t5qxRkq4zdQC0zXpzSB2bTtfLgOvR0C6BXYaRE/6/k8/4SrkZcTZBeNu+xGvwCU4b5dU9ST9pwIWkK6T1grS8g==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-arm@0.14.21:\n    resolution: {integrity: sha512-aSU5pUueK6afqmLQsbU+QcFBT62L+4G9hHMJDHWfxgid6hzhSmfRH9U/f+ymvxsSTr/HFRU4y7ox8ZyhlVl98w==}\n    engines: {node: '>=12'}\n    cpu: [arm]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-mips64le@0.14.21:\n    resolution: {integrity: sha512-jLZLQGCNlUsmIHtGqNvBs3zN+7a4D9ckf0JZ+jQTwHdZJ1SgV9mAjbB980OFo66LoY+WeM7t3WEnq3FjI1zw4A==}\n    engines: {node: '>=12'}\n    cpu: [mips64el]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-ppc64le@0.14.21:\n    resolution: {integrity: sha512-4TWxpK391en2UBUw6GSrukToTDu6lL9vkm3Ll40HrI08WG3qcnJu7bl8e1+GzelDsiw1QmfAY/nNvJ6iaHRpCQ==}\n    engines: {node: '>=12'}\n    cpu: [ppc64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-riscv64@0.14.21:\n    resolution: {integrity: sha512-fElngqOaOfTsF+u+oetDLHsPG74vB2ZaGZUqmGefAJn3a5z9Z2pNa4WpVbbKgHpaAAy5tWM1m1sbGohj6Ki6+Q==}\n    engines: {node: '>=12'}\n    cpu: [riscv64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-s390x@0.14.21:\n    resolution: {integrity: sha512-brleZ6R5fYv0qQ7ZBwenQmP6i9TdvJCB092c/3D3pTLQHBGHJb5zWgKxOeS7bdHzmLy6a6W7GbFk6QKpjyD6QA==}\n    engines: {node: '>=12'}\n    cpu: [s390x]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-netbsd-64@0.14.21:\n    resolution: {integrity: sha512-nCEgsLCQ8RoFWVV8pVI+kX66ICwbPP/M9vEa0NJGIEB/Vs5sVGMqkf67oln90XNSkbc0bPBDuo4G6FxlF7PN8g==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [netbsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-openbsd-64@0.14.21:\n    resolution: {integrity: sha512-h9zLMyVD0T73MDTVYIb/qUTokwI6EJH9O6wESuTNq6+XpMSr6C5aYZ4fvFKdNELW+Xsod+yDS2hV2JTUAbFrLA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [openbsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-sunos-64@0.14.21:\n    resolution: {integrity: sha512-Kl+7Cot32qd9oqpLdB1tEGXEkjBlijrIxMJ0+vlDFaqsODutif25on0IZlFxEBtL2Gosd4p5WCV1U7UskNQfXA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [sunos]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-windows-32@0.14.21:\n    resolution: {integrity: sha512-V7vnTq67xPBUCk/9UtlolmQ798Ecjdr1ZoI1vcSgw7M82aSSt0eZdP6bh5KAFZU8pxDcx3qoHyWQfHYr11f22A==}\n    engines: {node: '>=12'}\n    cpu: [ia32]\n    os: [win32]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-windows-64@0.14.21:\n    resolution: {integrity: sha512-kDgHjKOHwjfJDCyRGELzVxiP/RBJBTA+wyspf78MTTJQkyPuxH2vChReNdWc+dU2S4gIZFHMdP1Qrl/k22ZmaA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [win32]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-windows-arm64@0.14.21:\n    resolution: {integrity: sha512-8Sbo0zpzgwWrwjQYLmHF78f7E2xg5Ve63bjB2ng3V2aManilnnTGaliq2snYg+NOX60+hEvJHRdVnuIAHW0lVw==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [win32]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild@0.14.21:\n    resolution: {integrity: sha512-7WEoNMBJdLN993dr9h0CpFHPRc3yFZD+EAVY9lg6syJJ12gc5fHq8d75QRExuhnMkT2DaRiIKFThRvDWP+fO+A==}\n    engines: {node: '>=12'}\n    hasBin: true\n    requiresBuild: true\n    optionalDependencies:\n      esbuild-android-arm64: 0.14.21\n      esbuild-darwin-64: 0.14.21\n      esbuild-darwin-arm64: 0.14.21\n      esbuild-freebsd-64: 0.14.21\n      esbuild-freebsd-arm64: 0.14.21\n      esbuild-linux-32: 0.14.21\n      esbuild-linux-64: 0.14.21\n      esbuild-linux-arm: 0.14.21\n      esbuild-linux-arm64: 0.14.21\n      esbuild-linux-mips64le: 0.14.21\n      esbuild-linux-ppc64le: 0.14.21\n      esbuild-linux-riscv64: 0.14.21\n      esbuild-linux-s390x: 0.14.21\n      esbuild-netbsd-64: 0.14.21\n      esbuild-openbsd-64: 0.14.21\n      esbuild-sunos-64: 0.14.21\n      esbuild-windows-32: 0.14.21\n      esbuild-windows-64: 0.14.21\n      esbuild-windows-arm64: 0.14.21\n    dev: true\n\n  /escalade@3.1.1:\n    resolution: {integrity: sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==}\n    engines: {node: '>=6'}\n    dev: false\n\n  /escodegen@2.0.0:\n    resolution: {integrity: sha512-mmHKys/C8BFUGI+MAWNcSYoORYLMdPzjrknd2Vc+bUsjN5bXcr8EhrNB+UTqfL1y3I9c4fw2ihgtMPQLBRiQxw==}\n    engines: {node: '>=6.0'}\n    hasBin: true\n    dependencies:\n      esprima: 4.0.1\n      estraverse: 5.3.0\n      esutils: 2.0.3\n      optionator: 0.8.3\n    optionalDependencies:\n      source-map: 0.6.1\n    dev: true\n\n  /eslint-scope@7.1.0:\n    resolution: {integrity: sha512-aWwkhnS0qAXqNOgKOK0dJ2nvzEbhEvpy8OlJ9kZ0FeZnA6zpjv1/Vei+puGFFX7zkPCkHHXb7IDX3A+7yPrRWg==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    dependencies:\n      esrecurse: 4.3.0\n      estraverse: 5.3.0\n    dev: true\n\n  /eslint-scope@7.1.1:\n    resolution: {integrity: sha512-QKQM/UXpIiHcLqJ5AOyIW7XZmzjkzQXYE54n1++wb0u9V/abW3l9uQnxX8Z5Xd18xyKIMTUAyQ0k1e8pz6LUrw==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    dependencies:\n      esrecurse: 4.3.0\n      estraverse: 5.3.0\n    dev: false\n\n  /eslint-visitor-keys@3.2.0:\n    resolution: {integrity: sha512-IOzT0X126zn7ALX0dwFiUQEdsfzrm4+ISsQS8nukaJXwEyYKRSnEIIDULYg1mCtGp7UUXgfGl7BIolXREQK+XQ==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    dev: true\n\n  /esprima@4.0.1:\n    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}\n    engines: {node: '>=4'}\n    hasBin: true\n\n  /esrecurse@4.3.0:\n    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}\n    engines: {node: '>=4.0'}\n    dependencies:\n      estraverse: 5.3.0\n\n  /estraverse@5.3.0:\n    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}\n    engines: {node: '>=4.0'}\n\n  /esutils@2.0.3:\n    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}\n    engines: {node: '>=0.10.0'}\n\n  /fast-deep-equal@3.1.3:\n    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}\n    dev: true\n\n  /fast-levenshtein@2.0.6:\n    resolution: {integrity: sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=}\n\n  /foreach@2.0.5:\n    resolution: {integrity: sha1-C+4AUBiusmDQo6865ljdATbsG5k=}\n    dev: true\n\n  /fs.realpath@1.0.0:\n    resolution: {integrity: sha1-FQStJSMVjKpA20onh8sBQRmU6k8=}\n    dev: true\n\n  /function-bind@1.1.1:\n    resolution: {integrity: sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==}\n    dev: true\n\n  /get-caller-file@2.0.5:\n    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}\n    engines: {node: 6.* || 8.* || >= 10.*}\n    dev: false\n\n  /get-intrinsic@1.1.1:\n    resolution: {integrity: sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==}\n    dependencies:\n      function-bind: 1.1.1\n      has: 1.0.3\n      has-symbols: 1.0.2\n    dev: true\n\n  /get-symbol-description@1.0.0:\n    resolution: {integrity: sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      get-intrinsic: 1.1.1\n    dev: true\n\n  /glob@7.2.0:\n    resolution: {integrity: sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==}\n    dependencies:\n      fs.realpath: 1.0.0\n      inflight: 1.0.6\n      inherits: 2.0.4\n      minimatch: 3.1.1\n      once: 1.4.0\n      path-is-absolute: 1.0.1\n    dev: true\n\n  /has-bigints@1.0.1:\n    resolution: {integrity: sha512-LSBS2LjbNBTf6287JEbEzvJgftkF5qFkmCo9hDRpAzKhUOlJ+hx8dd4USs00SgsUNwc4617J9ki5YtEClM2ffA==}\n    dev: true\n\n  /has-flag@4.0.0:\n    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /has-symbols@1.0.2:\n    resolution: {integrity: sha512-chXa79rL/UC2KlX17jo3vRGz0azaWEx5tGqZg5pO3NUyEJVB17dMruQlzCCOfUvElghKcm5194+BCRvi2Rv/Gw==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /has-tostringtag@1.0.0:\n    resolution: {integrity: sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-symbols: 1.0.2\n    dev: true\n\n  /has@1.0.3:\n    resolution: {integrity: sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==}\n    engines: {node: '>= 0.4.0'}\n    dependencies:\n      function-bind: 1.1.1\n    dev: true\n\n  /inflight@1.0.6:\n    resolution: {integrity: sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=}\n    dependencies:\n      once: 1.4.0\n      wrappy: 1.0.2\n    dev: true\n\n  /inherits@2.0.4:\n    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}\n    dev: true\n\n  /internal-slot@1.0.3:\n    resolution: {integrity: sha512-O0DB1JC/sPyZl7cIo78n5dR7eUSwwpYPiXRhTzNxZVAMUuB8vlnRFyLxdrVToks6XPLVnFfbzaVd5WLjhgg+vA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      get-intrinsic: 1.1.1\n      has: 1.0.3\n      side-channel: 1.0.4\n    dev: true\n\n  /inversify@6.0.1:\n    resolution: {integrity: sha512-B3ex30927698TJENHR++8FfEaJGqoWOgI6ZY5Ht/nLUsFCwHn6akbwtnUAPCgUepAnTpe2qHxhDNjoKLyz6rgQ==}\n    dev: true\n\n  /is-arguments@1.1.1:\n    resolution: {integrity: sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-bigint@1.0.4:\n    resolution: {integrity: sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==}\n    dependencies:\n      has-bigints: 1.0.1\n    dev: true\n\n  /is-boolean-object@1.1.2:\n    resolution: {integrity: sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-buffer@1.1.6:\n    resolution: {integrity: sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==}\n    dev: true\n\n  /is-callable@1.2.4:\n    resolution: {integrity: sha512-nsuwtxZfMX67Oryl9LCQ+upnC0Z0BgpwntpS89m1H/TLF0zNfzfLMV/9Wa/6MZsj0acpEjAO0KF1xT6ZdLl95w==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /is-date-object@1.0.5:\n    resolution: {integrity: sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-fullwidth-code-point@3.0.0:\n    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}\n    engines: {node: '>=8'}\n    dev: false\n\n  /is-generator-function@1.0.10:\n    resolution: {integrity: sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-nan@1.3.2:\n    resolution: {integrity: sha512-E+zBKpQ2t6MEo1VsonYmluk9NxGrbzpeeLC2xIViuO2EjU2xsXsBPwTr3Ykv9l08UYEVEdWeRZNouaZqF6RN0w==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /is-negative-zero@2.0.2:\n    resolution: {integrity: sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /is-number-object@1.0.6:\n    resolution: {integrity: sha512-bEVOqiRcvo3zO1+G2lVMy+gkkEm9Yh7cDMRusKKu5ZJKPUYSJwICTKZrNKHA2EbSP0Tu0+6B/emsYNHZyn6K8g==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-regex@1.1.4:\n    resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-shared-array-buffer@1.0.1:\n    resolution: {integrity: sha512-IU0NmyknYZN0rChcKhRO1X8LYz5Isj/Fsqh8NJOSf+N/hCOTwy29F32Ik7a+QszE63IdvmwdTPDd6cZ5pg4cwA==}\n    dev: true\n\n  /is-string@1.0.7:\n    resolution: {integrity: sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-symbol@1.0.4:\n    resolution: {integrity: sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-symbols: 1.0.2\n    dev: true\n\n  /is-typed-array@1.1.8:\n    resolution: {integrity: sha512-HqH41TNZq2fgtGT8WHVFVJhBVGuY3AnP3Q36K8JKXUxSxRgk/d+7NjmwG2vo2mYmXK8UYZKu0qH8bVP5gEisjA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      available-typed-arrays: 1.0.5\n      call-bind: 1.0.2\n      es-abstract: 1.19.1\n      foreach: 2.0.5\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-weakref@1.0.2:\n    resolution: {integrity: sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==}\n    dependencies:\n      call-bind: 1.0.2\n    dev: true\n\n  /javascript-obfuscator@4.0.0:\n    resolution: {integrity: sha512-vS/8w/9eKISzwXNLd+OLMCCwjD+dFMdOlCDOo919iR/MWdBs+7u1ybpwRoWOmODToPQKVYw5GasvZoIiPs5nPw==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    hasBin: true\n    requiresBuild: true\n    dependencies:\n      '@javascript-obfuscator/escodegen': 2.3.0\n      '@javascript-obfuscator/estraverse': 5.4.0\n      acorn: 8.7.0\n      assert: 2.0.0\n      chalk: 4.1.2\n      chance: 1.1.8\n      class-validator: 0.13.2\n      commander: 9.0.0\n      eslint-scope: 7.1.0\n      eslint-visitor-keys: 3.2.0\n      fast-deep-equal: 3.1.3\n      inversify: 6.0.1\n      js-string-escape: 1.0.1\n      md5: 2.3.0\n      mkdirp: 1.0.4\n      multimatch: 5.0.0\n      opencollective-postinstall: 2.0.3\n      process: 0.11.10\n      reflect-metadata: 0.1.13\n      source-map-support: 0.5.21\n      string-template: 1.0.0\n      stringz: 2.1.0\n      tslib: 2.3.1\n    dev: true\n\n  /js-string-escape@1.0.1:\n    resolution: {integrity: sha1-4mJbrbwNZ8dTPp7cEGjFh65BN+8=}\n    engines: {node: '>= 0.8'}\n    dev: true\n\n  /jsonc-parser@3.0.0:\n    resolution: {integrity: sha512-fQzRfAbIBnR0IQvftw9FJveWiHp72Fg20giDrHz6TdfB12UH/uue0D3hm57UB5KgAVuniLMCaS8P1IMj9NR7cA==}\n    dev: true\n\n  /levn@0.3.0:\n    resolution: {integrity: sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=}\n    engines: {node: '>= 0.8.0'}\n    dependencies:\n      prelude-ls: 1.1.2\n      type-check: 0.3.2\n\n  /libphonenumber-js@1.9.49:\n    resolution: {integrity: sha512-/wEOIONcVboFky+lWlCaF7glm1FhBz11M5PHeCApA+xDdVfmhKjHktHS8KjyGxouV5CSXIr4f3GvLSpJa4qMSg==}\n    dev: true\n\n  /lunr@2.3.9:\n    resolution: {integrity: sha512-zTU3DaZaF3Rt9rhN3uBMGQD3dD2/vFQqnvZCDv4dl5iOzq2IZQqTxu90r4E5J+nP70J3ilqVCrbho2eWaeW8Ow==}\n    dev: true\n\n  /marked@4.0.12:\n    resolution: {integrity: sha512-hgibXWrEDNBWgGiK18j/4lkS6ihTe9sxtV4Q1OQppb/0zzyPSzoFANBa5MfsG/zgsWklmNnhm0XACZOH/0HBiQ==}\n    engines: {node: '>= 12'}\n    hasBin: true\n    dev: true\n\n  /md5@2.3.0:\n    resolution: {integrity: sha512-T1GITYmFaKuO91vxyoQMFETst+O71VUPEU3ze5GNzDm0OWdP8v1ziTaAEPUr/3kLsY3Sftgz242A1SetQiDL7g==}\n    dependencies:\n      charenc: 0.0.2\n      crypt: 0.0.2\n      is-buffer: 1.1.6\n    dev: true\n\n  /mersenne-twister@1.1.0:\n    resolution: {integrity: sha1-+RZhjuQ9cXnvz2Qb7EUx65Zwl4o=}\n    dev: false\n\n  /minimatch@3.1.1:\n    resolution: {integrity: sha512-reLxBcKUPNBnc/sVtAbxgRVFSegoGeLaSjmphNhcwcolhYLRgtJscn5mRl6YRZNQv40Y7P6JM2YhSIsbL9OB5A==}\n    dependencies:\n      brace-expansion: 1.1.11\n    dev: true\n\n  /mkdirp@1.0.4:\n    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}\n    engines: {node: '>=10'}\n    hasBin: true\n    dev: true\n\n  /multimatch@5.0.0:\n    resolution: {integrity: sha512-ypMKuglUrZUD99Tk2bUQ+xNQj43lPEfAeX2o9cTteAmShXy2VHDJpuwu1o0xqoKCt9jLVAvwyFKdLTPXKAfJyA==}\n    engines: {node: '>=10'}\n    dependencies:\n      '@types/minimatch': 3.0.5\n      array-differ: 3.0.0\n      array-union: 2.1.0\n      arrify: 2.0.1\n      minimatch: 3.1.1\n    dev: true\n\n  /object-inspect@1.12.0:\n    resolution: {integrity: sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g==}\n    dev: true\n\n  /object-is@1.1.5:\n    resolution: {integrity: sha512-3cyDsyHgtmi7I7DfSSI2LDp6SK2lwvtbg0p0R1e0RvTqF5ceGx+K2dfSjm1bKDMVCFEDAQvy+o8c6a7VujOddw==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /object-keys@1.1.1:\n    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /object.assign@4.1.2:\n    resolution: {integrity: sha512-ixT2L5THXsApyiUPYKmW+2EHpXXe5Ii3M+f4e+aJFAHao5amFRW6J0OO6c/LU8Be47utCx2GL89hxGB6XSmKuQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n      has-symbols: 1.0.2\n      object-keys: 1.1.1\n    dev: true\n\n  /once@1.4.0:\n    resolution: {integrity: sha1-WDsap3WWHUsROsF9nFC6753Xa9E=}\n    dependencies:\n      wrappy: 1.0.2\n    dev: true\n\n  /opencollective-postinstall@2.0.3:\n    resolution: {integrity: sha512-8AV/sCtuzUeTo8gQK5qDZzARrulB3egtLzFgteqB2tcT4Mw7B8Kt7JcDHmltjz6FOAHsvTevk70gZEbhM4ZS9Q==}\n    hasBin: true\n    dev: true\n\n  /optionator@0.8.3:\n    resolution: {integrity: sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==}\n    engines: {node: '>= 0.8.0'}\n    dependencies:\n      deep-is: 0.1.4\n      fast-levenshtein: 2.0.6\n      levn: 0.3.0\n      prelude-ls: 1.1.2\n      type-check: 0.3.2\n      word-wrap: 1.2.3\n\n  /path-is-absolute@1.0.1:\n    resolution: {integrity: sha1-F0uSaHNVNP+8es5r9TpanhtcX18=}\n    engines: {node: '>=0.10.0'}\n    dev: true\n\n  /prelude-ls@1.1.2:\n    resolution: {integrity: sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=}\n    engines: {node: '>= 0.8.0'}\n\n  /prettier@2.5.1:\n    resolution: {integrity: sha512-vBZcPRUR5MZJwoyi3ZoyQlc1rXeEck8KgeC9AwwOn+exuxLxq5toTRDTSaVrXHxelDMHy9zlicw8u66yxoSUFg==}\n    engines: {node: '>=10.13.0'}\n    hasBin: true\n    dev: false\n\n  /process@0.11.10:\n    resolution: {integrity: sha1-czIwDoQBYb2j5podHZGn1LwW8YI=}\n    engines: {node: '>= 0.6.0'}\n    dev: true\n\n  /reflect-metadata@0.1.13:\n    resolution: {integrity: sha512-Ts1Y/anZELhSsjMcU605fU9RE4Oi3p5ORujwbIKXfWa+0Zxs510Qrmrce5/Jowq3cHSZSJqBjypxmHarc+vEWg==}\n    dev: true\n\n  /require-directory@2.1.1:\n    resolution: {integrity: sha1-jGStX9MNqxyXbiNE/+f3kqam30I=}\n    engines: {node: '>=0.10.0'}\n    dev: false\n\n  /rimraf@3.0.2:\n    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}\n    hasBin: true\n    dependencies:\n      glob: 7.2.0\n    dev: true\n\n  /safe-buffer@5.2.1:\n    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}\n    dev: true\n\n  /shiki@0.10.1:\n    resolution: {integrity: sha512-VsY7QJVzU51j5o1+DguUd+6vmCmZ5v/6gYu4vyYAhzjuNQU6P/vmSy4uQaOhvje031qQMiW0d2BwgMH52vqMng==}\n    dependencies:\n      jsonc-parser: 3.0.0\n      vscode-oniguruma: 1.6.1\n      vscode-textmate: 5.2.0\n    dev: true\n\n  /side-channel@1.0.4:\n    resolution: {integrity: sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==}\n    dependencies:\n      call-bind: 1.0.2\n      get-intrinsic: 1.1.1\n      object-inspect: 1.12.0\n    dev: true\n\n  /source-map-support@0.5.21:\n    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}\n    dependencies:\n      buffer-from: 1.1.2\n      source-map: 0.6.1\n    dev: true\n\n  /source-map@0.6.1:\n    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}\n    engines: {node: '>=0.10.0'}\n\n  /string-template@1.0.0:\n    resolution: {integrity: sha1-np8iM9wA8hhxjsN5oopWc+zKi5Y=}\n    dev: true\n\n  /string-width@4.2.3:\n    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}\n    engines: {node: '>=8'}\n    dependencies:\n      emoji-regex: 8.0.0\n      is-fullwidth-code-point: 3.0.0\n      strip-ansi: 6.0.1\n    dev: false\n\n  /string.prototype.trimend@1.0.4:\n    resolution: {integrity: sha512-y9xCjw1P23Awk8EvTpcyL2NIr1j7wJ39f+k6lvRnSMz+mz9CGz9NYPelDk42kOz6+ql8xjfK8oYzy3jAP5QU5A==}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /string.prototype.trimstart@1.0.4:\n    resolution: {integrity: sha512-jh6e984OBfvxS50tdY2nRZnoC5/mLFKOREQfw8t5yytkoUsJRNxvI/E39qu1sD0OtWI3OC0XgKSmcWwziwYuZw==}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /stringz@2.1.0:\n    resolution: {integrity: sha512-KlywLT+MZ+v0IRepfMxRtnSvDCMc3nR1qqCs3m/qIbSOWkNZYT8XHQA31rS3TnKp0c5xjZu3M4GY/2aRKSi/6A==}\n    dependencies:\n      char-regex: 1.0.2\n    dev: true\n\n  /strip-ansi@6.0.1:\n    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}\n    engines: {node: '>=8'}\n    dependencies:\n      ansi-regex: 5.0.1\n    dev: false\n\n  /supports-color@7.2.0:\n    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}\n    engines: {node: '>=8'}\n    dependencies:\n      has-flag: 4.0.0\n    dev: true\n\n  /tslib@2.3.1:\n    resolution: {integrity: sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==}\n    dev: true\n\n  /type-check@0.3.2:\n    resolution: {integrity: sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=}\n    engines: {node: '>= 0.8.0'}\n    dependencies:\n      prelude-ls: 1.1.2\n\n  /typedoc@0.22.11(typescript@4.5.5):\n    resolution: {integrity: sha512-pVr3hh6dkS3lPPaZz1fNpvcrqLdtEvXmXayN55czlamSgvEjh+57GUqfhAI1Xsuu/hNHUT1KNSx8LH2wBP/7SA==}\n    engines: {node: '>= 12.10.0'}\n    hasBin: true\n    peerDependencies:\n      typescript: 4.0.x || 4.1.x || 4.2.x || 4.3.x || 4.4.x || 4.5.x\n    dependencies:\n      glob: 7.2.0\n      lunr: 2.3.9\n      marked: 4.0.12\n      minimatch: 3.1.1\n      shiki: 0.10.1\n      typescript: 4.5.5\n    dev: true\n\n  /typescript@4.5.5:\n    resolution: {integrity: sha512-TCTIul70LyWe6IJWT8QSYeA54WQe8EjQFU4wY52Fasj5UKx88LNYKCgBEHcOMOrFF1rKGbD8v/xcNWVUq9SymA==}\n    engines: {node: '>=4.2.0'}\n    hasBin: true\n    dev: true\n\n  /unbox-primitive@1.0.1:\n    resolution: {integrity: sha512-tZU/3NqK3dA5gpE1KtyiJUrEB0lxnGkMFHptJ7q6ewdZ8s12QrODwNbhIJStmJkd1QDXa1NRA8aF2A1zk/Ypyw==}\n    dependencies:\n      function-bind: 1.1.1\n      has-bigints: 1.0.1\n      has-symbols: 1.0.2\n      which-boxed-primitive: 1.0.2\n    dev: true\n\n  /util@0.12.4:\n    resolution: {integrity: sha512-bxZ9qtSlGUWSOy9Qa9Xgk11kSslpuZwaxCg4sNIDj6FLucDab2JxnHwyNTCpHMtK1MjoQiWQ6DiUMZYbSrO+Sw==}\n    dependencies:\n      inherits: 2.0.4\n      is-arguments: 1.1.1\n      is-generator-function: 1.0.10\n      is-typed-array: 1.1.8\n      safe-buffer: 5.2.1\n      which-typed-array: 1.1.7\n    dev: true\n\n  /validator@13.7.0:\n    resolution: {integrity: sha512-nYXQLCBkpJ8X6ltALua9dRrZDHVYxjJ1wgskNt1lH9fzGjs3tgojGSCBjmEPwkWS1y29+DrizMTW19Pr9uB2nw==}\n    engines: {node: '>= 0.10'}\n    dev: true\n\n  /vscode-oniguruma@1.6.1:\n    resolution: {integrity: sha512-vc4WhSIaVpgJ0jJIejjYxPvURJavX6QG41vu0mGhqywMkQqulezEqEQ3cO3gc8GvcOpX6ycmKGqRoROEMBNXTQ==}\n    dev: true\n\n  /vscode-textmate@5.2.0:\n    resolution: {integrity: sha512-Uw5ooOQxRASHgu6C7GVvUxisKXfSgW4oFlO+aa+PAkgmH89O3CXxEEzNRNtHSqtXFTl0nAC1uYj0GMSH27uwtQ==}\n    dev: true\n\n  /which-boxed-primitive@1.0.2:\n    resolution: {integrity: sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==}\n    dependencies:\n      is-bigint: 1.0.4\n      is-boolean-object: 1.1.2\n      is-number-object: 1.0.6\n      is-string: 1.0.7\n      is-symbol: 1.0.4\n    dev: true\n\n  /which-typed-array@1.1.7:\n    resolution: {integrity: sha512-vjxaB4nfDqwKI0ws7wZpxIlde1XrLX5uB0ZjpfshgmapJMD7jJWhZI+yToJTqaFByF0eNBcYxbjmCzoRP7CfEw==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      available-typed-arrays: 1.0.5\n      call-bind: 1.0.2\n      es-abstract: 1.19.1\n      foreach: 2.0.5\n      has-tostringtag: 1.0.0\n      is-typed-array: 1.1.8\n    dev: true\n\n  /word-wrap@1.2.3:\n    resolution: {integrity: sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==}\n    engines: {node: '>=0.10.0'}\n\n  /wrap-ansi@7.0.0:\n    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}\n    engines: {node: '>=10'}\n    dependencies:\n      ansi-styles: 4.3.0\n      string-width: 4.2.3\n      strip-ansi: 6.0.1\n    dev: false\n\n  /wrappy@1.0.2:\n    resolution: {integrity: sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=}\n    dev: true\n\n  /y18n@5.0.8:\n    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}\n    engines: {node: '>=10'}\n    dev: false\n\n  /yargs-parser@21.0.0:\n    resolution: {integrity: sha512-z9kApYUOCwoeZ78rfRYYWdiU/iNL6mwwYlkkZfJoyMR1xps+NEBX5X7XmRpxkZHhXJ6+Ey00IwKxBBSW9FIjyA==}\n    engines: {node: '>=12'}\n    dev: false\n\n  /yargs@17.3.1:\n    resolution: {integrity: sha512-WUANQeVgjLbNsEmGk20f+nlHgOqzRFpiGWVaBrYGYIGANIIu3lWjoyi0fNlFmJkvfhCZ6BXINe7/W2O2bV4iaA==}\n    engines: {node: '>=12'}\n    dependencies:\n      cliui: 7.0.4\n      escalade: 3.1.1\n      get-caller-file: 2.0.5\n      require-directory: 2.1.1\n      string-width: 4.2.3\n      y18n: 5.0.8\n      yargs-parser: 21.0.0\n    dev: false\n", "import {\r\n  Node,\r\n  BinaryOperator,\r\n  BlockId,\r\n  FunctionExpression,\r\n  Program,\r\n} from './util/types'\r\nimport { Transformer, TransformerOptions } from './transformers/transformer'\r\n\r\nimport * as eslintScope from 'eslint-scope'\r\n\r\nimport ControlFlow from './transformers/controlflow'\r\nimport Desequence from './transformers/desequence'\r\nimport LiteralMap from './transformers/literalmap'\r\nimport MemberExpressionCleaner from './transformers/memberexpressioncleaner'\r\nimport Simplify from './transformers/simplify'\r\nimport StringDecoder from './transformers/stringdecoder'\r\nimport DeadCode from './transformers/deadcode'\r\nimport Demangle from './transformers/demangle'\r\nimport ArrayMap from './transformers/arraymap'\r\nimport Rename from './transformers/rename'\r\nimport JSCCalculator from './transformers/jsconfuser/calculator'\r\nimport JSCControlFlow from './transformers/jsconfuser/controlflow'\r\n\r\nexport enum DecoderFunctionType {\r\n  SIMPLE,\r\n  BASE64,\r\n  RC4,\r\n}\r\n\r\nexport interface DecoderFunction {\r\n  identifier: string\r\n  stringArrayIdentifier: string\r\n  type: DecoderFunctionType\r\n  offset: number\r\n  indexArgument: number\r\n  keyArgument: number\r\n}\r\n\r\nexport interface DecoderFunctionSimple extends DecoderFunction {\r\n  type: DecoderFunctionType.SIMPLE\r\n}\r\n\r\nexport interface DecoderFunctionBase64 extends DecoderFunction {\r\n  type: DecoderFunctionType.BASE64\r\n  charset: string\r\n}\r\n\r\nexport interface DecoderFunctionRC4 extends DecoderFunction {\r\n  type: DecoderFunctionType.RC4\r\n  charset: string\r\n}\r\n\r\nexport interface DecoderReference {\r\n  identifier: string\r\n  realIdentifier: string\r\n  additionalOffset: number\r\n\r\n  // if the wrapper is a function\r\n  indexArgument?: number\r\n  keyArgument?: number\r\n}\r\n\r\ninterface ControlFlowFunction {\r\n  identifier: string\r\n  node: FunctionExpression\r\n}\r\ninterface ControlFlowLiteral {\r\n  identifier: string\r\n  value: string | number\r\n}\r\ninterface ControlFlowStorage {\r\n  identifier: string\r\n  aliases: string[]\r\n  functions: ControlFlowFunction[]\r\n  literals: ControlFlowLiteral[]\r\n}\r\n\r\nexport enum StringArrayType {\r\n  FUNCTION,\r\n  ARRAY,\r\n}\r\n\r\ninterface StringArray {\r\n  identifier: string\r\n  type: StringArrayType\r\n  strings: string[]\r\n}\r\n\r\nexport default class Context {\r\n  ast: Program\r\n  source?: string\r\n\r\n  shiftedArrays: number = 0\r\n  stringArrays: StringArray[] = []\r\n  stringDecoders: DecoderFunction[] = []\r\n  stringDecoderReferences: DecoderReference[] = []\r\n\r\n  controlFlowStorageNodes: {\r\n    [x: BlockId]: ControlFlowStorage\r\n  } = {}\r\n\r\n  removeGarbage: boolean = true\r\n  transformers: InstanceType<typeof Transformer>[]\r\n\r\n  enableLog: boolean = true\r\n\r\n  scopeManager: eslintScope.ScopeManager\r\n  hash: number = 0\r\n\r\n  constructor(\r\n    ast: Program,\r\n    transformers: [string, Partial<TransformerOptions>][],\r\n    isModule: boolean,\r\n    source?: string,\r\n  ) {\r\n    this.ast = ast\r\n    this.transformers = this.buildTransformerList(transformers)\r\n\r\n    this.source = source\r\n\r\n    this.scopeManager = eslintScope.analyze(this.ast, {\r\n      sourceType: isModule ? 'module' : 'script',\r\n    })\r\n  }\r\n\r\n  public log(message?: any, ...optionalParams: any[]) {\r\n    if (!this.enableLog) return\r\n    console.log(message, ...optionalParams)\r\n  }\r\n\r\n  private buildTransformerList(\r\n    list: [string, Partial<TransformerOptions>][]\r\n  ): InstanceType<typeof Transformer>[] {\r\n    let transformers: InstanceType<typeof Transformer>[] = []\r\n    for (let [name, opt] of list) {\r\n      switch (name.toLowerCase()) {\r\n        case 'controlflow':\r\n          transformers.push(new ControlFlow(opt))\r\n          break\r\n        case 'desequence':\r\n          transformers.push(new Desequence(opt))\r\n          break\r\n        case 'literalmap':\r\n          transformers.push(new LiteralMap(opt))\r\n          break\r\n        case 'memberexpressioncleaner':\r\n          transformers.push(new MemberExpressionCleaner(opt))\r\n          break\r\n        case 'simplify':\r\n          transformers.push(new Simplify(opt))\r\n          break\r\n        case 'stringdecoder':\r\n          transformers.push(new StringDecoder(opt))\r\n          break\r\n        case 'deadcode':\r\n          transformers.push(new DeadCode(opt))\r\n          break\r\n        case 'demangle':\r\n          transformers.push(new Demangle(opt))\r\n          break\r\n        case 'arraymap':\r\n          transformers.push(new ArrayMap(opt))\r\n          break\r\n        case 'rename':\r\n          transformers.push(new Rename(opt))\r\n          break\r\n        case 'jsc-calculator':\r\n          transformers.push(new JSCCalculator(opt))\r\n          break\r\n        case 'jsc-controlflow':\r\n          transformers.push(new JSCControlFlow(opt))\r\n          break\r\n        default:\r\n          throw new TypeError(\r\n            `Transformer \"${name}\" is invalid, it does not exist`\r\n          )\r\n      }\r\n    }\r\n    return transformers\r\n  }\r\n}\r\n", "import escodegen from '@javascript-obfuscator/escodegen'\r\nimport * as acorn from 'acorn' // no, it cannot be a default import\r\nimport * as acornLoose from 'acorn-loose'\r\nimport { Transformer, TransformerOptions } from './transformers/transformer'\r\nimport { Node, Program, sp } from './util/types'\r\nimport Context from './context'\r\nimport prettier from 'prettier'\r\nimport { walk } from './util/walk'\r\n\r\nconst FILE_REGEX = /(?<!\\.d)\\.[mc]?[jt]s$/i // cjs, mjs, js, ts, but no .d.ts\r\n\r\n// TODO: remove this when https://github.com/acornjs/acorn/commit/a4a5510 lands\r\ntype ecmaVersion =\r\n  | 3\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n  | 12\r\n  | 13\r\n  | 2015\r\n  | 2016\r\n  | 2017\r\n  | 2018\r\n  | 2019\r\n  | 2020\r\n  | 2021\r\n  | 2022\r\n  | 'latest'\r\n\r\ntype TransformerArray = [string, Partial<TransformerOptions>][]\r\n\r\nexport interface DeobfuscateOptions {\r\n  /**\r\n   * ECMA version to use when parsing AST (see acorn, default = 'latest')\r\n   */\r\n  ecmaVersion: ecmaVersion\r\n\r\n  /**\r\n   * Replace ChainExpressions with babel-compatible Optional{X}Expessions\r\n   * for work with Prettier\r\n   * https://github.com/prettier/prettier/pull/12172\r\n   * (default = true)\r\n   */\r\n  transformChainExpressions: boolean\r\n\r\n  /**\r\n   * Custom transformers to use\r\n   */\r\n  customTransformers: TransformerArray\r\n\r\n  /**\r\n   * Rename identifiers (default = false)\r\n   */\r\n  rename: boolean\r\n\r\n  /**\r\n   * Acorn source type\r\n   *\r\n   * Both tries module first then script and uses whichever parses properly\r\n   */\r\n  sourceType: 'both' | 'module' | 'script'\r\n\r\n  /**\r\n   * Loose parsing (default = false)\r\n   */\r\n  loose: boolean\r\n}\r\n\r\nfunction sourceHash(str: string) {\r\n  let key = 0x94a3fa21\r\n  let length = str.length\r\n  while (length) key = (key * 33) ^ str.charCodeAt(--length)\r\n  return key >>> 0\r\n}\r\n\r\ninterface SAcornOptions extends Omit<acorn.Options, 'sourceType'> {\r\n  sourceType: 'module' | 'script' | 'both' | undefined\r\n}\r\n\r\nexport class Deobfuscator {\r\n  public defaultOptions: DeobfuscateOptions = {\r\n    ecmaVersion: 'latest',\r\n    transformChainExpressions: true,\r\n    customTransformers: [],\r\n    rename: false,\r\n    sourceType: 'both',\r\n    loose: false,\r\n  }\r\n\r\n  private buildOptions(\r\n    options: Partial<DeobfuscateOptions> = {}\r\n  ): DeobfuscateOptions {\r\n    return { ...this.defaultOptions, ...options }\r\n  }\r\n\r\n  private buildAcornOptions(options: DeobfuscateOptions): SAcornOptions {\r\n    return {\r\n      ecmaVersion: options.ecmaVersion,\r\n      sourceType: options.sourceType,\r\n      // this is important for eslint-scope !!!!!!\r\n      ranges: true,\r\n    }\r\n  }\r\n\r\n  private parse(\r\n    input: string,\r\n    options: SAcornOptions,\r\n    deobfOptions: DeobfuscateOptions\r\n  ): acorn.Node {\r\n    const a = deobfOptions.loose ? acornLoose : acorn\r\n    if (options.sourceType !== 'both')\r\n      return a.parse(input, options as acorn.Options)\r\n\r\n    try {\r\n      options.sourceType = deobfOptions.sourceType = 'module'\r\n      return a.parse(input, options as acorn.Options)\r\n    } catch (err) {\r\n      options.sourceType = deobfOptions.sourceType = 'script'\r\n      return a.parse(input, options as acorn.Options)\r\n    }\r\n  }\r\n\r\n  public async deobfuscateNode(\r\n    node: Program,\r\n    _options?: Partial<DeobfuscateOptions>\r\n  ): Promise<Program> {\r\n    const options = this.buildOptions(_options)\r\n\r\n    const defaultTransformers: TransformerArray = [\r\n      ['Simplify', {}],\r\n      ['MemberExpressionCleaner', {}],\r\n      ['LiteralMap', {}],\r\n      ['DeadCode', {}],\r\n      ['Demangle', {}],\r\n\r\n      ['StringDecoder', {}],\r\n\r\n      ['Simplify', {}],\r\n      ['MemberExpressionCleaner', {}],\r\n\r\n      ['Desequence', {}],\r\n      ['ControlFlow', {}],\r\n      ['Desequence', {}],\r\n      ['MemberExpressionCleaner', {}],\r\n\r\n      //['ArrayMap', {}],\r\n      ['Simplify', {}],\r\n      ['DeadCode', {}],\r\n      ['Simplify', {}],\r\n      ['DeadCode', {}],\r\n    ]\r\n\r\n    let context = new Context(\r\n      node,\r\n      options.customTransformers.length > 0\r\n        ? options.customTransformers\r\n        : defaultTransformers,\r\n      options.sourceType === 'module'\r\n    )\r\n\r\n    for (const t of context.transformers) {\r\n      console.log('Running', t.name, 'transformer')\r\n      await t.transform(context)\r\n    }\r\n\r\n    if (options.rename) {\r\n      let source = escodegen.generate(context.ast, {\r\n          sourceMapWithCode: true,\r\n        }).code,\r\n        parsed = this.parse(\r\n          source,\r\n          this.buildAcornOptions(options),\r\n          options\r\n        ) as Program\r\n      context = new Context(\r\n        parsed,\r\n        [['Rename', {}]],\r\n        options.sourceType === 'module'\r\n      )\r\n      context.hash = sourceHash(source)\r\n      for (const t of context.transformers) {\r\n        console.log('(rename) Running', t.name, 'transformer')\r\n        await t.transform(context)\r\n      }\r\n    }\r\n\r\n    return context.ast\r\n  }\r\n\r\n  public async deobfuscateSource(\r\n    source: string,\r\n    _options?: Partial<DeobfuscateOptions>\r\n  ): Promise<string> {\r\n    const options = this.buildOptions(_options)\r\n    const acornOptions = this.buildAcornOptions(options)\r\n    let ast = this.parse(source, acornOptions, options) as Program\r\n\r\n    // perform transforms\r\n    ast = await this.deobfuscateNode(ast, options)\r\n\r\n    source = escodegen.generate(ast, {\r\n      sourceMapWithCode: true,\r\n    }).code\r\n    try {\r\n      source = prettier.format(source, {\r\n        semi: false,\r\n        singleQuote: true,\r\n\r\n        // https://github.com/prettier/prettier/pull/12172\r\n        parser: (text, _opts) => {\r\n          let ast = this.parse(text, acornOptions, options)\r\n          if (options.transformChainExpressions) {\r\n            walk(ast as Node, {\r\n              ChainExpression(cx) {\r\n                if (cx.expression.type === 'CallExpression') {\r\n                  sp<any>(cx, {\r\n                    ...cx.expression,\r\n                    type: 'OptionalCallExpression',\r\n                    expression: undefined,\r\n                  })\r\n                } else if (cx.expression.type === 'MemberExpression') {\r\n                  sp<any>(cx, {\r\n                    ...cx.expression,\r\n                    type: 'OptionalMemberExpression',\r\n                    expression: undefined,\r\n                  })\r\n                }\r\n              },\r\n            })\r\n          }\r\n          return ast\r\n        },\r\n      })\r\n    } catch (err) {\r\n      // I don't think we should log here, but throwing the error is not very\r\n      // important since it is non fatal\r\n      console.log(err)\r\n    }\r\n\r\n    return source\r\n  }\r\n}\r\n", "import {\r\n  Node,\r\n  Literal,\r\n  Property,\r\n  sp,\r\n  getBlockId,\r\n  PropertyLiteral,\r\n  CallExpression,\r\n  FunctionExpression,\r\n  Identifier,\r\n  ObjectExpression,\r\n  Statement,\r\n} from '../util/types'\r\nimport { Transformer, TransformerOptions } from './transformer'\r\nimport { walk } from '../util/walk'\r\nimport * as Guard from '../util/guard'\r\nimport Context from '../context'\r\nimport {\r\n  immutate,\r\n  literalOrIdentifierToString,\r\n  filterEmptyStatements,\r\n} from '../util/helpers'\r\n\r\nexport interface ControlFlowOptions extends TransformerOptions {}\r\nexport default class ControlFlow extends Transformer<ControlFlowOptions> {\r\n  constructor(options: Partial<ControlFlowOptions>) {\r\n    super('ControlFlow', options)\r\n  }\r\n\r\n  // maybe global util function\r\n  private translateCallExp(fx: FunctionExpression, cx: CallExpression) {\r\n    if (!Guard.isReturnStatement(fx.body.body[0]))\r\n      throw new TypeError(\r\n        'Function in CFSN was invalid (not a returnstatement)'\r\n      )\r\n    if (!fx.params.every((p) => Guard.isIdentifier(p)))\r\n      throw new TypeError('Function in CFSN was invalid (not ident params)')\r\n    if (!fx.body.body[0].argument)\r\n      throw new TypeError('Function in CFSN was invalid (void return)')\r\n\r\n    let params = fx.params as Identifier[],\r\n      paramMap: { [ident: string]: Node } = {}\r\n    let i = 0\r\n    for (const p of params) {\r\n      paramMap[p.name] = cx.arguments[i]\r\n      ++i\r\n    }\r\n    let immRtn = immutate(fx.body.body[0].argument)\r\n    walk(immRtn, {\r\n      Identifier(id) {\r\n        if (!paramMap[id.name]) return\r\n        sp<Node>(id, paramMap[id.name])\r\n      },\r\n    })\r\n\r\n    return immRtn as Node\r\n  }\r\n\r\n  // fixes empty object inits where there are setters in the same block\r\n  populateEmptyObjects(context: Context) {\r\n    walk(context.ast, {\r\n      BlockStatement(node) {\r\n        // find empty object decls\r\n        walk(node, {\r\n          VariableDeclarator(decl) {\r\n            if (!Guard.isIdentifier(decl.id)) return\r\n            if (!decl.init || !Guard.isObjectExpresesion(decl.init)) return\r\n\r\n            if (decl.init.properties.length !== 0) return\r\n\r\n            const objName = decl.id.name\r\n            // now find the setters\r\n\r\n            // TODO: this will break if the value is set with a value set\r\n            // after the Object is defined\r\n            walk(node, {\r\n              ExpressionStatement(expr) {\r\n                if (!Guard.isAssignmentExpression(expr.expression)) return\r\n                let ae = expr.expression\r\n\r\n                if (!Guard.isMemberExpression(ae.left)) return\r\n\r\n                if (\r\n                  !Guard.isIdentifier(ae.left.object) ||\r\n                  !Guard.isIdentifier(ae.left.property)\r\n                )\r\n                  return\r\n\r\n                if (ae.left.object.name !== objName) return\r\n\r\n                let prop: Property = {\r\n                  type: 'Property',\r\n                  start: 0,\r\n                  end: 0,\r\n                  method: false,\r\n                  shorthand: false,\r\n                  computed: false,\r\n                  key: ae.left.property,\r\n                  value: ae.right,\r\n                  kind: 'init',\r\n                }\r\n                ;(decl.init as ObjectExpression).properties.push(prop)\r\n\r\n                // remove the ExpressionStatement\r\n                ;(expr as any).type = 'EmptyStatement'\r\n\r\n                context.log(\r\n                  `${objName}.${ae.left.property.name} = ${ae.right.type}`\r\n                )\r\n              },\r\n            })\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  // separate finding literals/functions from each other?\r\n  // current way makes code a bit confusing to follow ^^\r\n  findStorageNode(context: Context) {\r\n    const { findStorageNodeAliases } = this\r\n    walk(context.ast, {\r\n      BlockStatement(node) {\r\n        // /shrug\r\n        let bid = getBlockId(node)\r\n\r\n        if (context.controlFlowStorageNodes[bid]) return\r\n        if (node.body.length === 0) return\r\n\r\n        walk(node, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (!Guard.isIdentifier(decl.id)) continue\r\n              if (decl.init?.type !== 'ObjectExpression') continue\r\n              if (decl.init.properties.length === 0) continue\r\n              if (\r\n                !decl.init.properties.every(\r\n                  (p) =>\r\n                    p.type !== 'SpreadElement' &&\r\n                    ['FunctionExpression', 'Literal'].includes(p.value.type) &&\r\n                    (p.key.type === 'Literal' || p.key.type === 'Identifier') &&\r\n                    literalOrIdentifierToString((p as any).key).length === 5\r\n                )\r\n              )\r\n                continue\r\n              context.controlFlowStorageNodes[bid] = {\r\n                identifier: decl.id.name,\r\n                aliases: [decl.id.name],\r\n                functions: [],\r\n                literals: [],\r\n              }\r\n              const cfsn = context.controlFlowStorageNodes[bid]\r\n              for (const prop of decl.init.properties as PropertyLiteral[]) {\r\n                let kn: Identifier | Literal = prop.key\r\n                let key = (\r\n                    Guard.isIdentifier(kn) ? kn.name : kn.value\r\n                  )! as string,\r\n                  i = -1\r\n                if (Guard.isLiteral(prop.value)) {\r\n                  if (\r\n                    (i = cfsn.literals.findIndex(\r\n                      (l) => l.identifier === key\r\n                    )) !== -1\r\n                  ) {\r\n                    // exists\r\n                    cfsn.literals[i].value = prop.value.value as string\r\n                  } else {\r\n                    cfsn.literals.push({\r\n                      identifier: key,\r\n                      value: prop.value.value as string,\r\n                    })\r\n                  }\r\n                } else if (Guard.isFunctionExpression(prop.value)) {\r\n                  let fnb = filterEmptyStatements(prop.value.body.body)\r\n                  if (fnb.length !== 1) continue\r\n                  if (!Guard.isReturnStatement(fnb[0])) continue\r\n                  let imm = immutate(prop.value)\r\n                  imm.body.body = fnb\r\n                  if (\r\n                    (i = cfsn.functions.findIndex(\r\n                      (f) => f.identifier === key\r\n                    )) !== -1\r\n                  ) {\r\n                    // exists\r\n                    cfsn.functions[i].node = imm\r\n                  } else {\r\n                    cfsn.functions.push({\r\n                      identifier: key,\r\n                      node: imm,\r\n                    })\r\n                  }\r\n                }\r\n              }\r\n              context.log(\r\n                'Found control flow node id =',\r\n                decl.id.name,\r\n                '#fn =',\r\n                cfsn.functions.length,\r\n                '#lit =',\r\n                cfsn.literals.length\r\n              )\r\n              if (context.removeGarbage) {\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              }\r\n            }\r\n\r\n            // the declaration should probably be removed only after the usages\r\n            // are replaced, so there is no dep on each key being 5chars\r\n            // or walk the node for Identifier usages and check parent is not\r\n            // a CallExpr or MembExpr\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n            if (vd.declarations.length === 0) {\r\n              // this node wont generate if it has no declarations left\r\n              ;(vd as any).type = 'EmptyStatement'\r\n            }\r\n\r\n            findStorageNodeAliases(context, node).replacer(context, node)\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  findStorageNodeAliases = (context: Context, ast: Node) => {\r\n    walk(ast, {\r\n      BlockStatement(node) {\r\n        let bid = getBlockId(node)\r\n\r\n        if (!context.controlFlowStorageNodes[bid]) return\r\n        if (node.body.length === 0) return\r\n        const cfsn = context.controlFlowStorageNodes[bid]\r\n\r\n        walk(node, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (\r\n                !decl.init ||\r\n                !Guard.isIdentifier(decl.id) ||\r\n                !Guard.isIdentifier(decl.init)\r\n              )\r\n                continue\r\n              if (cfsn.aliases.includes(decl.init.name)) {\r\n                cfsn.aliases.push(decl.id.name)\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              }\r\n            }\r\n\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n            if (vd.declarations.length === 0) {\r\n              // this node wont generate if it has no declarations left\r\n              ;(vd as any).type = 'EmptyStatement'\r\n            }\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  replacer = (context: Context, ast: Node) => {\r\n    const { translateCallExp } = this\r\n    walk(ast, {\r\n      BlockStatement(node) {\r\n        const bid = getBlockId(node)\r\n        if (!context.controlFlowStorageNodes[bid]) return\r\n        const cfsn = context.controlFlowStorageNodes[bid]\r\n\r\n        walk(node, {\r\n          MemberExpression(mx) {\r\n            if (!Guard.isIdentifier(mx.object)) return\r\n            if (!Guard.isIdentifier(mx.property)) return\r\n            if (!cfsn.aliases.includes(mx.object.name)) return\r\n\r\n            // typeguards still dont work inside arrow funcs(((((\r\n            let ident = mx.property.name,\r\n              i = -1\r\n\r\n            if (\r\n              (i = cfsn.literals.findIndex((l) => l.identifier === ident)) !==\r\n              -1\r\n            ) {\r\n              // ident is a literal\r\n              sp<Literal>(mx, {\r\n                type: 'Literal',\r\n                value: cfsn.literals[i].value,\r\n              })\r\n            }\r\n          },\r\n          CallExpression(cx) {\r\n            if (!Guard.isMemberExpression(cx.callee)) return\r\n            if (!Guard.isIdentifier(cx.callee.object)) return\r\n            if (!Guard.isIdentifier(cx.callee.property)) return\r\n            if (!cfsn.aliases.includes(cx.callee.object.name)) return\r\n\r\n            let ident = cx.callee.property.name,\r\n              i = -1\r\n\r\n            if (\r\n              (i = cfsn.functions.findIndex((f) => f.identifier === ident)) !==\r\n              -1\r\n            ) {\r\n              // ident is a function\r\n              const fx = cfsn.functions[i].node\r\n              sp<Node>(cx, translateCallExp(fx, cx))\r\n            }\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  deflatten(context: Context) {\r\n    walk(context.ast, {\r\n      WhileStatement(node, _, ancestors) {\r\n        if (!Guard.isLiteralBoolean(node.test) || node.test.value !== true)\r\n          return\r\n        if (\r\n          !Guard.isBlockStatement(node.body) ||\r\n          node.body.body.length === 0 ||\r\n          !Guard.isSwitchStatement(node.body.body[0])\r\n        )\r\n          return\r\n\r\n        const parent = ancestors[ancestors.length - 2]\r\n        if (!Guard.isBlockStatement(parent)) return\r\n\r\n        const switchStmt = node.body.body[0]\r\n\r\n        if (!Guard.isMemberExpression(switchStmt.discriminant)) return\r\n        if (\r\n          !Guard.isIdentifier(switchStmt.discriminant.object) ||\r\n          !Guard.isUpdateExpression(switchStmt.discriminant.property) ||\r\n          switchStmt.discriminant.property.operator !== '++' ||\r\n          switchStmt.discriminant.property.prefix !== false || // prefix ++s change \"return\" of updexp\r\n          !Guard.isIdentifier(switchStmt.discriminant.property.argument)\r\n        )\r\n          return\r\n\r\n        let shuffleId = switchStmt.discriminant.object.name,\r\n          indexId = switchStmt.discriminant.property.argument.name\r\n        let shuffleArr: string[] = [],\r\n          startIdx = -1\r\n\r\n        walk(parent, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (!Guard.isIdentifier(decl.id)) continue\r\n              if (!decl.init) continue\r\n              if (decl.id.name === shuffleId) {\r\n                if (!Guard.isCallExpression(decl.init)) continue\r\n                if (!Guard.isMemberExpression(decl.init.callee)) continue\r\n                if (!Guard.isLiteralString(decl.init.callee.object)) continue\r\n                if (\r\n                  !Guard.isIdentifier(decl.init.callee.property) ||\r\n                  decl.init.callee.property.name !== 'split'\r\n                )\r\n                  continue\r\n                if (!Guard.isLiteralString(decl.init.arguments[0])) continue\r\n                // 'nXnXnXnXn'.split(X)\r\n                let shfStr = decl.init.callee.object.value,\r\n                  sep = decl.init.arguments[0].value\r\n                shuffleArr = shfStr.split(sep)\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              } else if (decl.id.name === indexId) {\r\n                if (!Guard.isLiteralNumeric(decl.init)) continue\r\n                startIdx = decl.init.value\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              } else {\r\n                continue\r\n              }\r\n            }\r\n\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n            if (vd.declarations.length === 0) {\r\n              ;(vd as any).type = 'EmptyStatement'\r\n            }\r\n          },\r\n        })\r\n\r\n        // didnt locate arr or index\r\n        if (shuffleArr.length === 0 || startIdx === -1) return\r\n\r\n        let nodes: Statement[][] = []\r\n\r\n        for (let i = startIdx; i < shuffleArr.length; i++) {\r\n          let caseNum = shuffleArr[i]\r\n          let caze = switchStmt.cases.find(\r\n            (c) => c.test && Guard.isLiteral(c.test) && c.test.value === caseNum\r\n          )\r\n          if (!caze) return // should restore the variables above before returning\r\n          nodes.push(\r\n            caze.consequent.filter((i) => i.type !== 'ContinueStatement')\r\n          )\r\n        }\r\n\r\n        let ourIdx = parent.body.findIndex(\r\n          (e) =>\r\n            e.type === node.type && e.start === node.start && e.end === node.end\r\n        )\r\n        parent.body.splice(ourIdx, 1, ...nodes.flat())\r\n\r\n        context.log(\r\n          'Found flattened control flow arr =',\r\n          shuffleArr,\r\n          'idx =',\r\n          startIdx\r\n        )\r\n      },\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  public async transform(context: Context) {\r\n    this.populateEmptyObjects(context)\r\n      .findStorageNode(context)\r\n      .deflatten(context)\r\n  }\r\n}\r\n", "import {\n  sp,\n  Property,\n  Literal,\n  Function,\n  ArrowFunctionExpression,\n  FunctionExpression,\n  FunctionDeclaration,\n  Identifier,\n  VariableDeclarator,\n  VariableDeclaration,\n  BinaryExpression,\n  ReturnStatement,\n  Expression,\n  SwitchStatement,\n  NumericUnaryExpression,\n  NumericLiteral,\n  BinaryOperator,\n  WhileStatement,\n  SequenceExpression,\n  ExpressionStatement,\n} from '../../util/types'\nimport { Transformer, TransformerOptions } from './../transformer'\nimport { walk, findNodeAt } from '../../util/walk'\nimport * as Guard from '../../util/guard'\nimport Context from '../../context'\nimport { filterEmptyStatements, immutate } from '../../util/helpers'\nimport {\n  createLiteral,\n  literalOrUnaryExpressionToNumber,\n} from '../../util/translator'\nimport { mathEval } from '../../util/math'\nimport Simplify from '../simplify'\nimport escodegen from '@javascript-obfuscator/escodegen'\nimport { AssignmentOperator } from 'estree'\n\nfunction inverseOperator(operator: BinaryOperator) {\n  switch (operator) {\n    case '+':\n      return '-'\n    case '-':\n      return '+'\n    case '/':\n      return '*'\n    case '*':\n      return '/'\n    default:\n      throw new Error(\"Invalid operator to inverse '\" + operator + \"'\")\n  }\n}\ninterface VarStack {\n  [x: string]: number\n}\nfunction generateCode(ast: Node): string {\n  return escodegen.generate(ast as any, {\n    sourceMapWithCode: true,\n  }).code\n}\n\n// this is hard coded since the values won't be of much use to anyone else\nconst DEBUG_LOG = false\nfunction log(message?: any, ...optionalParams: any[]) {\n  if (DEBUG_LOG) console.log.apply(null, arguments as any)\n}\n\nfunction evaluateAssignmentExpr(\n  stack: VarStack,\n  vk: string,\n  operator: AssignmentOperator,\n  value: number\n) {\n  switch (operator) {\n    case '=':\n      return (stack[vk] = value)\n    case '+=':\n      return (stack[vk] += value)\n    case '-=':\n      return (stack[vk] -= value)\n    case '*=':\n      return (stack[vk] *= value)\n    case '/=':\n      return (stack[vk] /= value)\n    case '%=':\n      return (stack[vk] %= value)\n    case '<<=':\n      return (stack[vk] <<= value)\n    case '>>=':\n      return (stack[vk] >>= value)\n    case '>>>=':\n      return (stack[vk] >>>= value)\n    case '&=':\n      return (stack[vk] &= value)\n    case '^=':\n      return (stack[vk] ^= value)\n    case '|=':\n      return (stack[vk] |= value)\n    default:\n      throw new Error(\n        'Invalid assignment expression operator \"' + operator + '\"'\n      )\n  }\n}\nfunction updateIdentifiers(stack: VarStack, obj: any) {\n  for (const vk in stack) {\n    let value = stack[vk],\n      node = createLiteral(value)\n\n    walk(obj, {\n      Identifier(id) {\n        if (id.name !== vk) return\n        sp<any>(id, node)\n      },\n    })\n  }\n  return obj\n}\n\nfunction evaluateBinaryExpr(stack: VarStack, _expr: BinaryExpression): number {\n  const st = new Simplify({})\n\n  let expr = immutate(_expr)\n  log('chain =', generateCode(expr))\n\n  updateIdentifiers(stack, expr)\n  st.math(expr)\n\n  log('new chain =', generateCode(expr))\n\n  if (!Guard.isLiteralNumeric(expr) && !Guard.isUnaryExpressionNumeric(expr))\n    throw new Error(\n      'Failed to evaluate chain: chain did not evaluate to number'\n    )\n  log('value =', literalOrUnaryExpressionToNumber(expr))\n  log('='.repeat(32))\n  return literalOrUnaryExpressionToNumber(expr)\n}\n\n// don't!\nconst MAX_SEQUENCE_ASSIGNMENT_ITERS = 10\nfunction evaluateSequenceAssignments(\n  stack: VarStack,\n  _expr: SequenceExpression\n): SequenceExpression {\n  const st = new Simplify({})\n\n  for (const expr of _expr.expressions) {\n    if (!Guard.isAssignmentExpression(expr)) {\n      updateIdentifiers(stack, expr)\n      continue\n    }\n    if (!Guard.isIdentifier(expr.left)) continue\n    if (!(expr.left.name in stack)) continue\n    const vk = expr.left.name,\n      operator = expr.operator\n\n    let ie = immutate(expr.right)\n    updateIdentifiers(stack, ie)\n    log('(1/4) Evaluating', vk, operator, generateCode(ie as any))\n\n    for (let iters = 0; iters < MAX_SEQUENCE_ASSIGNMENT_ITERS; ++iters) {\n      if (Guard.isLiteralNumeric(ie) || Guard.isUnaryExpressionNumeric(ie))\n        break\n      st.literalComparison(ie)\n      log('(2/4) Evaluating', vk, operator, generateCode(ie as any))\n\n      st.conditionalExpression(ie)\n      log('(3/4) Evaluating', vk, operator, generateCode(ie as any))\n\n      st.math(ie)\n      log('(4/4) Evaluating', vk, operator, generateCode(ie as any))\n    }\n\n    if (!Guard.isLiteralNumeric(ie) && !Guard.isUnaryExpressionNumeric(ie))\n      throw new Error(\n        'Failed to evaluate assignment expression, ie is not a numeric value'\n      )\n\n    log('(4/4) Evaluated', vk, operator, generateCode(ie as unknown as Node))\n\n    let effect = literalOrUnaryExpressionToNumber(ie)\n    evaluateAssignmentExpr(stack, vk, operator, effect)\n    log(`stack[${vk}] = ${stack[vk]}`)\n    log('='.repeat(32))\n    ;(expr as any).type = 'EmptyStatement'\n  }\n  return _expr\n}\nexport interface JSCControlFlowOptions extends TransformerOptions {}\nexport default class JSCControlFlow extends Transformer<JSCControlFlowOptions> {\n  constructor(options: Partial<JSCControlFlowOptions>) {\n    super('JSCControlFlow', options)\n  }\n\n  deflatten(context: Context) {\n    function visitor(node: Function) {\n      const scope = context.scopeManager.acquire(node)\n      if (!scope) return\n      if (!Guard.isBlockStatement(node.body)) return\n      let whiles = node.body.body.filter(\n        (i) => i.type === 'WhileStatement'\n      ) as WhileStatement[]\n      for (const w of whiles) {\n        context.log('Found while statement')\n        if (!Guard.isBinaryExpression(w.test)) continue\n        if (\n          !Guard.isLiteralNumeric(w.test.right) &&\n          !Guard.isUnaryExpressionNumeric(w.test.right)\n        )\n          continue\n\n        const stack: VarStack = {}\n\n        let bx = w.test,\n          additive = false\n        while (Guard.isBinaryExpression(bx)) {\n          additive = bx.operator === '+'\n          if (Guard.isIdentifier(bx.left)) {\n            stack[bx.left.name] = bx.left.start\n          }\n          if (Guard.isIdentifier(bx.right)) {\n            stack[bx.right.name] = bx.right.start\n          }\n          bx = bx.left as BinaryExpression\n        }\n        if (!additive) continue\n        for (const vk in stack) {\n          let vref = scope.references.find(\n            (i) => i.identifier.range![0] === stack[vk]\n          )\n          if (!vref) continue\n          if (\n            !vref.resolved ||\n            vref.resolved.defs.length === 0 ||\n            vref.resolved.defs[0].type !== 'Variable'\n          )\n            continue\n          let def = vref.resolved.defs[0]\n          if (\n            !def.node.init ||\n            (!Guard.isLiteralNumeric(def.node.init) &&\n              !Guard.isUnaryExpressionNumeric(def.node.init))\n          )\n            continue\n          def.parent.declarations = def.parent.declarations.filter(\n            (i) =>\n              i.range![0] !== def.node.range![0] &&\n              i.range![1] !== def.node.range![1]\n          )\n          stack[vk] = literalOrUnaryExpressionToNumber(def.node.init)\n        }\n        const endState = literalOrUnaryExpressionToNumber(w.test.right)\n        context.log(stack, endState)\n\n        if (!Guard.isBlockStatement(w.body)) continue\n        let ss = w.body.body[w.body.body.length - 1]\n        if (!Guard.isSwitchStatement(ss)) continue\n        if (!Guard.isIdentifier(ss.discriminant)) continue\n        let strt = ss.discriminant.start\n        let ref = scope.references.find((i) => i.identifier.range![0] === strt)\n        if (\n          !ref ||\n          !ref.resolved ||\n          ref.resolved.defs.length === 0 ||\n          ref.resolved.defs[0].type !== 'Variable'\n        )\n          continue\n        let def = ref.resolved.defs[0]\n        if (!def.node.init || !Guard.isBinaryExpression(def.node.init)) continue\n\n        let maxIters = ss.cases.length,\n          iter = 0\n\n        let stateExpr = def.node.init! as BinaryExpression\n\n        // {...vars +} != {endState}\n        let whileStateExpr = w.test.left as BinaryExpression\n\n        let expressions: Expression[][] = []\n\n        while (true) {\n          if (iter > maxIters) {\n            throw new Error(\n              `JSconfuser control flow switch calculation failed (iter=${iter}>maxLoops=${maxIters})`\n            )\n          }\n          context.log(`Iteration #${iter + 1}/${maxIters + 1}`)\n          let wState = evaluateBinaryExpr(stack, whileStateExpr)\n          if (wState === endState) {\n            context.log(\n              'Switch calculation end',\n              wState,\n              '===',\n              endState,\n              'stack =',\n              stack\n            )\n            break\n          }\n\n          let state = evaluateBinaryExpr(stack, stateExpr)\n          let errorSuffix = ` (whileState = ${wState}, state = ${state}, stack = ${JSON.stringify(\n            stack\n          )})`\n          let caze = ss.cases.find(\n            (i) =>\n              i.test &&\n              literalOrUnaryExpressionToNumber(i.test as NumericLiteral) ===\n                state\n          )\n          if (!caze) throw new Error('Switch case not found' + errorSuffix)\n          if (caze.consequent.length !== 2)\n            throw new Error('Switch case is not of \"2\" length' + errorSuffix)\n          if (caze.consequent[1].type !== 'BreakStatement')\n            throw new Error(\n              'Switch case consequent[1] is not a BreakStatement' + errorSuffix\n            )\n          if (!Guard.isExpressionStatement(caze.consequent[0]))\n            throw new Error(\n              'Switch case consequent[0] is not an ExpressionStatement' +\n                errorSuffix\n            )\n          if (!Guard.isUnaryExpression(caze.consequent[0].expression))\n            throw new Error(\n              'Switch case consequent[0]<ExpressionStatement>.expression is not a UnaryExpression' +\n                errorSuffix\n            )\n          if (\n            !Guard.isSequenceExpression(caze.consequent[0].expression.argument)\n          )\n            throw new Error(\n              'Switch case consequent[0]<ExpressionStatement>.expression<UnaryExpression> is not a SequenceExpression' +\n                errorSuffix\n            )\n          let sequence = caze.consequent[0].expression.argument\n          evaluateSequenceAssignments(stack, sequence)\n          sequence.expressions = sequence.expressions.filter(\n            (i) => (i as any).type !== 'EmptyStatement'\n          )\n          expressions.push(sequence.expressions)\n          context.log('new stack =', stack)\n          iter++\n        }\n\n        sp<SequenceExpression>(w, {\n          type: 'SequenceExpression',\n          expressions: expressions.flat(),\n        })\n      }\n    }\n    walk(context.ast, {\n      FunctionDeclaration: visitor,\n      FunctionExpression: visitor,\n      ArrowFunctionExpression: visitor,\n    })\n    return this\n  }\n\n  fixSwitch(context: Context) {\n    function visitor(node: FunctionDeclaration | FunctionExpression) {\n      const scope = context.scopeManager.acquire(node)\n      if (!scope) return\n      let switches = node.body.body.filter((i) =>\n        Guard.isSwitchStatement(i)\n      ) as SwitchStatement[]\n      for (const ss of switches) {\n        if (!Guard.isIdentifier(ss.discriminant)) continue\n        let discName = ss.discriminant.name\n        let v = scope.variables.find((i) => i.name === discName)\n        if (!v) continue\n        if (v.defs.length === 0 || v.defs[0].type !== 'Variable') continue\n        let def = v.defs[0]\n        if (!def.node.init || !Guard.isBinaryExpression(def.node.init)) continue\n        let init = def.node.init\n        if (\n          !ss.cases.every(\n            (c) =>\n              c.test &&\n              (Guard.isUnaryExpressionNumeric(c.test) ||\n                Guard.isLiteralNumeric(c.test))\n          )\n        )\n          continue\n        let leftTrans = 0,\n          leftOper: BinaryOperator = '*',\n          rightTrans = 0,\n          rightOper: BinaryOperator = '+'\n\n        if (!Guard.isBinaryExpression(init.left)) continue\n        if (\n          !Guard.isUnaryExpressionNumeric(init.right) &&\n          !Guard.isLiteralNumeric(init.right)\n        )\n          continue\n        if (\n          !Guard.isUnaryExpressionNumeric(init.left.right) &&\n          !Guard.isLiteralNumeric(init.left.right)\n        )\n          continue\n        if (!Guard.isIdentifier(init.left.left)) continue\n\n        leftTrans = literalOrUnaryExpressionToNumber(init.left.right)\n        leftOper = inverseOperator(init.left.operator)\n        rightTrans = literalOrUnaryExpressionToNumber(init.right)\n        rightOper = inverseOperator(init.operator)\n\n        for (const c of ss.cases) {\n          let test = literalOrUnaryExpressionToNumber(\n            c.test! as NumericUnaryExpression | NumericLiteral\n          )\n          test = mathEval(\n            mathEval(test, rightOper, rightTrans),\n            leftOper,\n            leftTrans\n          )\n          sp<Literal>(c.test!, {\n            type: 'Literal',\n            value: test,\n          })\n        }\n        ss.discriminant.name = init.left.left.name\n\n        def.parent.declarations = def.parent.declarations.filter(\n          (i) =>\n            i.range![0] !== def.node.range![0] &&\n            i.range![1] !== def.node.range![1]\n        )\n      }\n    }\n    walk(context.ast, {\n      FunctionDeclaration: visitor,\n      FunctionExpression: visitor,\n    })\n    return this\n  }\n\n  public async transform(context: Context) {\n    this.fixSwitch(context).deflatten(context)\n  }\n}\n", "import {\r\n  sp,\r\n  Property,\r\n  Literal,\r\n  Function,\r\n  ArrowFunctionExpression,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  Identifier,\r\n  VariableDeclarator,\r\n  VariableDeclaration,\r\n} from '../util/types'\r\nimport { Transformer, TransformerOptions } from './transformer'\r\nimport { walk, findNodeAt } from '../util/walk'\r\nimport * as Guard from '../util/guard'\r\nimport Context from '../context'\r\n\r\nexport interface LiteralMapOptions extends TransformerOptions {}\r\nexport default class LiteralMap extends Transformer<LiteralMapOptions> {\r\n  constructor(options: Partial<LiteralMapOptions>) {\r\n    super('LiteralMap', options)\r\n  }\r\n\r\n  demap(context: Context) {\r\n    walk(context.ast, {\r\n      BlockStatement(node) {\r\n        const map: { [x: string]: { [x: string]: any } } = {}\r\n\r\n        walk(node, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (\r\n                !decl.init ||\r\n                decl.init.type !== 'ObjectExpression' ||\r\n                !Guard.isIdentifier(decl.id)\r\n              )\r\n                continue\r\n              if (decl.init.properties.length === 0) continue\r\n              if (\r\n                !decl.init.properties.every(\r\n                  (p) =>\r\n                    p.type !== 'SpreadElement' &&\r\n                    (Guard.isLiteral(p.key) || Guard.isIdentifier(p.key)) &&\r\n                    Guard.isLiteral(p.value)\r\n                )\r\n              )\r\n                continue\r\n\r\n              const name = decl.id.name\r\n              map[name] = map[name] || {}\r\n\r\n              for (const _prop of decl.init.properties) {\r\n                const prop = _prop as Property\r\n                let key =\r\n                  prop.key.type === 'Identifier'\r\n                    ? prop.key.name\r\n                    : ((prop.key as Literal).value as string)\r\n                map[name][key] = (prop.value as Literal).value as string\r\n              }\r\n\r\n              if (context.removeGarbage) {\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              }\r\n            }\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n          },\r\n        })\r\n\r\n        walk(node, {\r\n          MemberExpression(exp) {\r\n            if (\r\n              !Guard.isIdentifier(exp.object) ||\r\n              (!Guard.isLiteral(exp.property) &&\r\n                !Guard.isIdentifier(exp.property))\r\n            )\r\n              return\r\n            let mapObj = map[exp.object.name]\r\n            if (!mapObj) return\r\n\r\n            let key = Guard.isIdentifier(exp.property)\r\n              ? exp.property.name\r\n              : ((exp.property as Literal).value as string)\r\n            let val = mapObj[key]\r\n            if (typeof val === 'undefined') return // ! check causes !0 == true.\r\n            sp<Literal>(exp, {\r\n              type: 'Literal',\r\n              value: val,\r\n            })\r\n          },\r\n        })\r\n      },\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  // replace read-only variables in functions\r\n  literals(context: Context) {\r\n    function visitor(func: Function) {\r\n      const scope = context.scopeManager.acquire(func)\r\n      if (!scope) return\r\n\r\n      for (const v of scope.variables) {\r\n        if (/*func.start === 3547 && */ v.name === 'q') debugger\r\n        if (v.name === 'arguments') continue\r\n        if (v.identifiers.length !== 1) continue // ?\r\n        if (v.defs.length !== 1) continue // ?\r\n\r\n        const def = v.defs[0]\r\n        if (def.type !== 'Variable') continue // ?\r\n        const vd = def.node as VariableDeclarator\r\n\r\n        if (vd.init?.type !== 'Literal') continue\r\n        if (typeof vd.init.value === 'string' && vd.init.value.length === 65)\r\n          continue\r\n\r\n        // prevents us from replacing overwrote variables\r\n        if (!v.references.every((ref) => ref.init || ref.isReadOnly())) continue\r\n\r\n        for (const ref of v.references) {\r\n          // Dont replace our init reference lol\r\n          if (ref.init) {\r\n            let node = def.node as VariableDeclarator\r\n            let p = def.parent as VariableDeclaration\r\n            if (p.type === 'VariableDeclaration') {\r\n              p.declarations = p.declarations.filter(\r\n                (decl) => decl.start !== node.start && decl.end !== node.end\r\n              )\r\n            }\r\n            continue\r\n          }\r\n          const refid = findNodeAt<Identifier>(\r\n            func,\r\n            ref.identifier.range!,\r\n            'Identifier'\r\n          )\r\n          if (!refid) continue // hm\r\n          sp<Literal>(refid, vd.init)\r\n        }\r\n      }\r\n    }\r\n    walk(context.ast, {\r\n      FunctionDeclaration: visitor,\r\n      FunctionExpression: visitor,\r\n      ArrowFunctionExpression: visitor,\r\n    })\r\n    return this\r\n  }\r\n\r\n  public async transform(context: Context) {\r\n    this.demap(context).literals(context)\r\n  }\r\n}\r\n"], "fixing_code": ["{\n  \"name\": \"deobfuscator\",\n  \"version\": \"2.4.3\",\n  \"description\": \"multipurpose javascript transformer\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"synchrony\": \"dist/cli.js\"\n  },\n  \"scripts\": {\n    \"build\": \"node scripts/build.js\",\n    \"watch\": \"node scripts/build.js --watch\",\n    \"clean\": \"rimraf dist/\",\n    \"docs\": \"typedoc --options ./typedoc.json\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/relative/synchrony.git\"\n  },\n  \"keywords\": [\n    \"deobfuscator\"\n  ],\n  \"author\": \"relative <hi@relative.im>\",\n  \"license\": \"GPL-3.0-only\",\n  \"bugs\": {\n    \"url\": \"https://github.com/relative/synchrony/issues\"\n  },\n  \"homepage\": \"https://github.com/relative/synchrony#readme\",\n  \"devDependencies\": {\n    \"@types/escodegen\": \"0.0.7\",\n    \"@types/eslint-scope\": \"3.7.4\",\n    \"@types/estree\": \"0.0.51\",\n    \"@types/mersenne-twister\": \"1.1.2\",\n    \"@types/node\": \"17.0.17\",\n    \"@types/yargs\": \"17.0.8\",\n    \"esbuild\": \"0.14.21\",\n    \"escodegen\": \"2.0.0\",\n    \"javascript-obfuscator\": \"4.0.0\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.22.11\",\n    \"typescript\": \"4.5.5\"\n  },\n  \"dependencies\": {\n    \"@javascript-obfuscator/escodegen\": \"2.3.0\",\n    \"acorn\": \"8.7.0\",\n    \"acorn-loose\": \"8.3.0\",\n    \"acorn-walk\": \"8.2.0\",\n    \"eslint-scope\": \"7.1.1\",\n    \"mersenne-twister\": \"1.1.0\",\n    \"yargs\": \"17.3.1\"\n  }\n}\n", "lockfileVersion: '6.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false\n\ndependencies:\n  '@javascript-obfuscator/escodegen':\n    specifier: 2.3.0\n    version: 2.3.0\n  acorn:\n    specifier: 8.7.0\n    version: 8.7.0\n  acorn-loose:\n    specifier: 8.3.0\n    version: 8.3.0\n  acorn-walk:\n    specifier: 8.2.0\n    version: 8.2.0\n  eslint-scope:\n    specifier: 7.1.1\n    version: 7.1.1\n  mersenne-twister:\n    specifier: 1.1.0\n    version: 1.1.0\n  yargs:\n    specifier: 17.3.1\n    version: 17.3.1\n\ndevDependencies:\n  '@types/escodegen':\n    specifier: 0.0.7\n    version: 0.0.7\n  '@types/eslint-scope':\n    specifier: 3.7.4\n    version: 3.7.4\n  '@types/estree':\n    specifier: 0.0.51\n    version: 0.0.51\n  '@types/mersenne-twister':\n    specifier: 1.1.2\n    version: 1.1.2\n  '@types/node':\n    specifier: 17.0.17\n    version: 17.0.17\n  '@types/yargs':\n    specifier: 17.0.8\n    version: 17.0.8\n  esbuild:\n    specifier: 0.14.21\n    version: 0.14.21\n  escodegen:\n    specifier: 2.0.0\n    version: 2.0.0\n  javascript-obfuscator:\n    specifier: 4.0.0\n    version: 4.0.0\n  rimraf:\n    specifier: 3.0.2\n    version: 3.0.2\n  typedoc:\n    specifier: 0.22.11\n    version: 0.22.11(typescript@4.5.5)\n  typescript:\n    specifier: 4.5.5\n    version: 4.5.5\n\npackages:\n\n  /@javascript-obfuscator/escodegen@2.3.0:\n    resolution: {integrity: sha512-QVXwMIKqYMl3KwtTirYIA6gOCiJ0ZDtptXqAv/8KWLG9uQU2fZqTVy7a/A5RvcoZhbDoFfveTxuGxJ5ibzQtkw==}\n    engines: {node: '>=6.0'}\n    dependencies:\n      '@javascript-obfuscator/estraverse': 5.4.0\n      esprima: 4.0.1\n      esutils: 2.0.3\n      optionator: 0.8.3\n    optionalDependencies:\n      source-map: 0.6.1\n\n  /@javascript-obfuscator/estraverse@5.4.0:\n    resolution: {integrity: sha512-CZFX7UZVN9VopGbjTx4UXaXsi9ewoM1buL0kY7j1ftYdSs7p2spv9opxFjHlQ/QGTgh4UqufYqJJ0WKLml7b6w==}\n    engines: {node: '>=4.0'}\n\n  /@types/escodegen@0.0.7:\n    resolution: {integrity: sha512-46oENdSRNEJXCNrPJoC3vRolZJpfeEm7yvATkd2bCncKFG0PUEyfBCaoacfpcXH4Y5RRuqdVj3J7TI+wwn2SbQ==}\n    dev: true\n\n  /@types/eslint-scope@3.7.4:\n    resolution: {integrity: sha512-9K4zoImiZc3HlIp6AVUDE4CWYx22a+lhSZMYNpbjW04+YF0KWj4pJXnEMjdnFTiQibFFmElcsasJXDbdI/EPhA==}\n    dependencies:\n      '@types/eslint': 8.4.1\n      '@types/estree': 0.0.51\n    dev: true\n\n  /@types/eslint@8.4.1:\n    resolution: {integrity: sha512-GE44+DNEyxxh2Kc6ro/VkIj+9ma0pO0bwv9+uHSyBrikYOHr8zYcdPvnBOp1aw8s+CjRvuSx7CyWqRrNFQ59mA==}\n    dependencies:\n      '@types/estree': 0.0.51\n      '@types/json-schema': 7.0.9\n    dev: true\n\n  /@types/estree@0.0.51:\n    resolution: {integrity: sha512-CuPgU6f3eT/XgKKPqKd/gLZV1Xmvf1a2R5POBOGQa6uv82xpls89HU5zKeVoyR8XzHd1RGNOlQlvUe3CFkjWNQ==}\n    dev: true\n\n  /@types/json-schema@7.0.9:\n    resolution: {integrity: sha512-qcUXuemtEu+E5wZSJHNxUXeCZhAfXKQ41D+duX+VYPde7xyEVZci+/oXKJL13tnRs9lR2pr4fod59GT6/X1/yQ==}\n    dev: true\n\n  /@types/mersenne-twister@1.1.2:\n    resolution: {integrity: sha512-7KMIfSkMpaVExbzJRLUXHMO4hkFWbbspHPREk8I6pBxiNN+3+l6eAEClMCIPIo2KjCkR0rjYfXppr6+wKdTwpA==}\n    dev: true\n\n  /@types/minimatch@3.0.5:\n    resolution: {integrity: sha512-Klz949h02Gz2uZCMGwDUSDS1YBlTdDDgbWHi+81l29tQALUtvz4rAYi5uoVhE5Lagoq6DeqAUlbrHvW/mXDgdQ==}\n    dev: true\n\n  /@types/node@17.0.17:\n    resolution: {integrity: sha512-e8PUNQy1HgJGV3iU/Bp2+D/DXh3PYeyli8LgIwsQcs1Ar1LoaWHSIT6Rw+H2rNJmiq6SNWiDytfx8+gYj7wDHw==}\n    dev: true\n\n  /@types/yargs-parser@20.2.1:\n    resolution: {integrity: sha512-7tFImggNeNBVMsn0vLrpn1H1uPrUBdnARPTpZoitY37ZrdJREzf7I16tMrlK3hen349gr1NYh8CmZQa7CTG6Aw==}\n    dev: true\n\n  /@types/yargs@17.0.8:\n    resolution: {integrity: sha512-wDeUwiUmem9FzsyysEwRukaEdDNcwbROvQ9QGRKaLI6t+IltNzbn4/i4asmB10auvZGQCzSQ6t0GSczEThlUXw==}\n    dependencies:\n      '@types/yargs-parser': 20.2.1\n    dev: true\n\n  /acorn-loose@8.3.0:\n    resolution: {integrity: sha512-75lAs9H19ldmW+fAbyqHdjgdCrz0pWGXKmnqFoh8PyVd1L2RIb4RzYrSjmopeqv3E1G3/Pimu6GgLlrGbrkF7w==}\n    engines: {node: '>=0.4.0'}\n    dependencies:\n      acorn: 8.7.0\n    dev: false\n\n  /acorn-walk@8.2.0:\n    resolution: {integrity: sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==}\n    engines: {node: '>=0.4.0'}\n    dev: false\n\n  /acorn@8.7.0:\n    resolution: {integrity: sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==}\n    engines: {node: '>=0.4.0'}\n    hasBin: true\n\n  /ansi-regex@5.0.1:\n    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}\n    engines: {node: '>=8'}\n    dev: false\n\n  /ansi-styles@4.3.0:\n    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}\n    engines: {node: '>=8'}\n    dependencies:\n      color-convert: 2.0.1\n\n  /array-differ@3.0.0:\n    resolution: {integrity: sha512-THtfYS6KtME/yIAhKjZ2ul7XI96lQGHRputJQHO80LAWQnuGP4iCIN8vdMRboGbIEYBwU33q8Tch1os2+X0kMg==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /array-union@2.1.0:\n    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /arrify@2.0.1:\n    resolution: {integrity: sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /assert@2.0.0:\n    resolution: {integrity: sha512-se5Cd+js9dXJnu6Ag2JFc00t+HmHOen+8Q+L7O9zI0PqQXr20uk2J0XQqMxZEeo5U50o8Nvmmx7dZrl+Ufr35A==}\n    dependencies:\n      es6-object-assign: 1.1.0\n      is-nan: 1.3.2\n      object-is: 1.1.5\n      util: 0.12.4\n    dev: true\n\n  /available-typed-arrays@1.0.5:\n    resolution: {integrity: sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /balanced-match@1.0.2:\n    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}\n    dev: true\n\n  /brace-expansion@1.1.11:\n    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}\n    dependencies:\n      balanced-match: 1.0.2\n      concat-map: 0.0.1\n    dev: true\n\n  /buffer-from@1.1.2:\n    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}\n    dev: true\n\n  /call-bind@1.0.2:\n    resolution: {integrity: sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==}\n    dependencies:\n      function-bind: 1.1.1\n      get-intrinsic: 1.1.1\n    dev: true\n\n  /chalk@4.1.2:\n    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}\n    engines: {node: '>=10'}\n    dependencies:\n      ansi-styles: 4.3.0\n      supports-color: 7.2.0\n    dev: true\n\n  /chance@1.1.8:\n    resolution: {integrity: sha512-v7fi5Hj2VbR6dJEGRWLmJBA83LJMS47pkAbmROFxHWd9qmE1esHRZW8Clf1Fhzr3rjxnNZVCjOEv/ivFxeIMtg==}\n    dev: true\n\n  /char-regex@1.0.2:\n    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}\n    engines: {node: '>=10'}\n    dev: true\n\n  /charenc@0.0.2:\n    resolution: {integrity: sha1-wKHS86cJLgN3S/qD8UwPxXkKhmc=}\n    dev: true\n\n  /class-validator@0.13.2:\n    resolution: {integrity: sha512-yBUcQy07FPlGzUjoLuUfIOXzgynnQPPruyK1Ge2B74k9ROwnle1E+NxLWnUv5OLU8hA/qL5leAE9XnXq3byaBw==}\n    dependencies:\n      libphonenumber-js: 1.9.49\n      validator: 13.7.0\n    dev: true\n\n  /cliui@7.0.4:\n    resolution: {integrity: sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==}\n    dependencies:\n      string-width: 4.2.3\n      strip-ansi: 6.0.1\n      wrap-ansi: 7.0.0\n    dev: false\n\n  /color-convert@2.0.1:\n    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}\n    engines: {node: '>=7.0.0'}\n    dependencies:\n      color-name: 1.1.4\n\n  /color-name@1.1.4:\n    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}\n\n  /commander@9.0.0:\n    resolution: {integrity: sha512-JJfP2saEKbQqvW+FI93OYUB4ByV5cizMpFMiiJI8xDbBvQvSkIk0VvQdn1CZ8mqAO8Loq2h0gYTYtDFUZUeERw==}\n    engines: {node: ^12.20.0 || >=14}\n    dev: true\n\n  /concat-map@0.0.1:\n    resolution: {integrity: sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=}\n    dev: true\n\n  /crypt@0.0.2:\n    resolution: {integrity: sha1-iNf/fsDfuG9xPch7u0LQRNPmxBs=}\n    dev: true\n\n  /deep-is@0.1.4:\n    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}\n\n  /define-properties@1.1.3:\n    resolution: {integrity: sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      object-keys: 1.1.1\n    dev: true\n\n  /emoji-regex@8.0.0:\n    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}\n    dev: false\n\n  /es-abstract@1.19.1:\n    resolution: {integrity: sha512-2vJ6tjA/UfqLm2MPs7jxVybLoB8i1t1Jd9R3kISld20sIxPcTbLuggQOUxeWeAvIUkduv/CfMjuh4WmiXr2v9w==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      es-to-primitive: 1.2.1\n      function-bind: 1.1.1\n      get-intrinsic: 1.1.1\n      get-symbol-description: 1.0.0\n      has: 1.0.3\n      has-symbols: 1.0.2\n      internal-slot: 1.0.3\n      is-callable: 1.2.4\n      is-negative-zero: 2.0.2\n      is-regex: 1.1.4\n      is-shared-array-buffer: 1.0.1\n      is-string: 1.0.7\n      is-weakref: 1.0.2\n      object-inspect: 1.12.0\n      object-keys: 1.1.1\n      object.assign: 4.1.2\n      string.prototype.trimend: 1.0.4\n      string.prototype.trimstart: 1.0.4\n      unbox-primitive: 1.0.1\n    dev: true\n\n  /es-to-primitive@1.2.1:\n    resolution: {integrity: sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      is-callable: 1.2.4\n      is-date-object: 1.0.5\n      is-symbol: 1.0.4\n    dev: true\n\n  /es6-object-assign@1.1.0:\n    resolution: {integrity: sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw=}\n    dev: true\n\n  /esbuild-android-arm64@0.14.21:\n    resolution: {integrity: sha512-Bqgld1TY0wZv8TqiQmVxQFgYzz8ZmyzT7clXBDZFkOOdRybzsnj8AZuK1pwcLVA7Ya6XncHgJqIao7NFd3s0RQ==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [android]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-darwin-64@0.14.21:\n    resolution: {integrity: sha512-j+Eg+e13djzyYINVvAbOo2/zvZ2DivuJJTaBrJnJHSD7kUNuGHRkHoSfFjbI80KHkn091w350wdmXDNSgRjfYQ==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [darwin]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-darwin-arm64@0.14.21:\n    resolution: {integrity: sha512-nDNTKWDPI0RuoPj5BhcSB2z5EmZJJAyRtZLIjyXSqSpAyoB8eyAKXl4lB8U2P78Fnh4Lh1le/fmpewXE04JhBQ==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [darwin]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-freebsd-64@0.14.21:\n    resolution: {integrity: sha512-zIurkCHXhxELiDZtLGiexi8t8onQc2LtuE+S7457H/pP0g0MLRKMrsn/IN4LDkNe6lvBjuoZZi2OfelOHn831g==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [freebsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-freebsd-arm64@0.14.21:\n    resolution: {integrity: sha512-wdxMmkJfbwcN+q85MpeUEamVZ40FNsBa9mPq8tAszDn8TRT2HoJvVRADPIIBa9SWWwlDChIMjkDKAnS3KS/sPA==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [freebsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-32@0.14.21:\n    resolution: {integrity: sha512-fmxvyzOPPh2xiEHojpCeIQP6pXcoKsWbz3ryDDIKLOsk4xp3GbpHIEAWP0xTeuhEbendmvBDVKbAVv3PnODXLg==}\n    engines: {node: '>=12'}\n    cpu: [ia32]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-64@0.14.21:\n    resolution: {integrity: sha512-edZyNOv1ql+kpmlzdqzzDjRQYls+tSyi4QFi+PdBhATJFUqHsnNELWA9vMSzAaInPOEaVUTA5Ml28XFChcy4DA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-arm64@0.14.21:\n    resolution: {integrity: sha512-t5qxRkq4zdQC0zXpzSB2bTtfLgOvR0C6BXYaRE/6/k8/4SrkZcTZBeNu+xGvwCU4b5dU9ST9pwIWkK6T1grS8g==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-arm@0.14.21:\n    resolution: {integrity: sha512-aSU5pUueK6afqmLQsbU+QcFBT62L+4G9hHMJDHWfxgid6hzhSmfRH9U/f+ymvxsSTr/HFRU4y7ox8ZyhlVl98w==}\n    engines: {node: '>=12'}\n    cpu: [arm]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-mips64le@0.14.21:\n    resolution: {integrity: sha512-jLZLQGCNlUsmIHtGqNvBs3zN+7a4D9ckf0JZ+jQTwHdZJ1SgV9mAjbB980OFo66LoY+WeM7t3WEnq3FjI1zw4A==}\n    engines: {node: '>=12'}\n    cpu: [mips64el]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-ppc64le@0.14.21:\n    resolution: {integrity: sha512-4TWxpK391en2UBUw6GSrukToTDu6lL9vkm3Ll40HrI08WG3qcnJu7bl8e1+GzelDsiw1QmfAY/nNvJ6iaHRpCQ==}\n    engines: {node: '>=12'}\n    cpu: [ppc64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-riscv64@0.14.21:\n    resolution: {integrity: sha512-fElngqOaOfTsF+u+oetDLHsPG74vB2ZaGZUqmGefAJn3a5z9Z2pNa4WpVbbKgHpaAAy5tWM1m1sbGohj6Ki6+Q==}\n    engines: {node: '>=12'}\n    cpu: [riscv64]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-linux-s390x@0.14.21:\n    resolution: {integrity: sha512-brleZ6R5fYv0qQ7ZBwenQmP6i9TdvJCB092c/3D3pTLQHBGHJb5zWgKxOeS7bdHzmLy6a6W7GbFk6QKpjyD6QA==}\n    engines: {node: '>=12'}\n    cpu: [s390x]\n    os: [linux]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-netbsd-64@0.14.21:\n    resolution: {integrity: sha512-nCEgsLCQ8RoFWVV8pVI+kX66ICwbPP/M9vEa0NJGIEB/Vs5sVGMqkf67oln90XNSkbc0bPBDuo4G6FxlF7PN8g==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [netbsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-openbsd-64@0.14.21:\n    resolution: {integrity: sha512-h9zLMyVD0T73MDTVYIb/qUTokwI6EJH9O6wESuTNq6+XpMSr6C5aYZ4fvFKdNELW+Xsod+yDS2hV2JTUAbFrLA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [openbsd]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-sunos-64@0.14.21:\n    resolution: {integrity: sha512-Kl+7Cot32qd9oqpLdB1tEGXEkjBlijrIxMJ0+vlDFaqsODutif25on0IZlFxEBtL2Gosd4p5WCV1U7UskNQfXA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [sunos]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-windows-32@0.14.21:\n    resolution: {integrity: sha512-V7vnTq67xPBUCk/9UtlolmQ798Ecjdr1ZoI1vcSgw7M82aSSt0eZdP6bh5KAFZU8pxDcx3qoHyWQfHYr11f22A==}\n    engines: {node: '>=12'}\n    cpu: [ia32]\n    os: [win32]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-windows-64@0.14.21:\n    resolution: {integrity: sha512-kDgHjKOHwjfJDCyRGELzVxiP/RBJBTA+wyspf78MTTJQkyPuxH2vChReNdWc+dU2S4gIZFHMdP1Qrl/k22ZmaA==}\n    engines: {node: '>=12'}\n    cpu: [x64]\n    os: [win32]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild-windows-arm64@0.14.21:\n    resolution: {integrity: sha512-8Sbo0zpzgwWrwjQYLmHF78f7E2xg5Ve63bjB2ng3V2aManilnnTGaliq2snYg+NOX60+hEvJHRdVnuIAHW0lVw==}\n    engines: {node: '>=12'}\n    cpu: [arm64]\n    os: [win32]\n    requiresBuild: true\n    dev: true\n    optional: true\n\n  /esbuild@0.14.21:\n    resolution: {integrity: sha512-7WEoNMBJdLN993dr9h0CpFHPRc3yFZD+EAVY9lg6syJJ12gc5fHq8d75QRExuhnMkT2DaRiIKFThRvDWP+fO+A==}\n    engines: {node: '>=12'}\n    hasBin: true\n    requiresBuild: true\n    optionalDependencies:\n      esbuild-android-arm64: 0.14.21\n      esbuild-darwin-64: 0.14.21\n      esbuild-darwin-arm64: 0.14.21\n      esbuild-freebsd-64: 0.14.21\n      esbuild-freebsd-arm64: 0.14.21\n      esbuild-linux-32: 0.14.21\n      esbuild-linux-64: 0.14.21\n      esbuild-linux-arm: 0.14.21\n      esbuild-linux-arm64: 0.14.21\n      esbuild-linux-mips64le: 0.14.21\n      esbuild-linux-ppc64le: 0.14.21\n      esbuild-linux-riscv64: 0.14.21\n      esbuild-linux-s390x: 0.14.21\n      esbuild-netbsd-64: 0.14.21\n      esbuild-openbsd-64: 0.14.21\n      esbuild-sunos-64: 0.14.21\n      esbuild-windows-32: 0.14.21\n      esbuild-windows-64: 0.14.21\n      esbuild-windows-arm64: 0.14.21\n    dev: true\n\n  /escalade@3.1.1:\n    resolution: {integrity: sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==}\n    engines: {node: '>=6'}\n    dev: false\n\n  /escodegen@2.0.0:\n    resolution: {integrity: sha512-mmHKys/C8BFUGI+MAWNcSYoORYLMdPzjrknd2Vc+bUsjN5bXcr8EhrNB+UTqfL1y3I9c4fw2ihgtMPQLBRiQxw==}\n    engines: {node: '>=6.0'}\n    hasBin: true\n    dependencies:\n      esprima: 4.0.1\n      estraverse: 5.3.0\n      esutils: 2.0.3\n      optionator: 0.8.3\n    optionalDependencies:\n      source-map: 0.6.1\n    dev: true\n\n  /eslint-scope@7.1.0:\n    resolution: {integrity: sha512-aWwkhnS0qAXqNOgKOK0dJ2nvzEbhEvpy8OlJ9kZ0FeZnA6zpjv1/Vei+puGFFX7zkPCkHHXb7IDX3A+7yPrRWg==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    dependencies:\n      esrecurse: 4.3.0\n      estraverse: 5.3.0\n    dev: true\n\n  /eslint-scope@7.1.1:\n    resolution: {integrity: sha512-QKQM/UXpIiHcLqJ5AOyIW7XZmzjkzQXYE54n1++wb0u9V/abW3l9uQnxX8Z5Xd18xyKIMTUAyQ0k1e8pz6LUrw==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    dependencies:\n      esrecurse: 4.3.0\n      estraverse: 5.3.0\n    dev: false\n\n  /eslint-visitor-keys@3.2.0:\n    resolution: {integrity: sha512-IOzT0X126zn7ALX0dwFiUQEdsfzrm4+ISsQS8nukaJXwEyYKRSnEIIDULYg1mCtGp7UUXgfGl7BIolXREQK+XQ==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    dev: true\n\n  /esprima@4.0.1:\n    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}\n    engines: {node: '>=4'}\n    hasBin: true\n\n  /esrecurse@4.3.0:\n    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}\n    engines: {node: '>=4.0'}\n    dependencies:\n      estraverse: 5.3.0\n\n  /estraverse@5.3.0:\n    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}\n    engines: {node: '>=4.0'}\n\n  /esutils@2.0.3:\n    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}\n    engines: {node: '>=0.10.0'}\n\n  /fast-deep-equal@3.1.3:\n    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}\n    dev: true\n\n  /fast-levenshtein@2.0.6:\n    resolution: {integrity: sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=}\n\n  /foreach@2.0.5:\n    resolution: {integrity: sha1-C+4AUBiusmDQo6865ljdATbsG5k=}\n    dev: true\n\n  /fs.realpath@1.0.0:\n    resolution: {integrity: sha1-FQStJSMVjKpA20onh8sBQRmU6k8=}\n    dev: true\n\n  /function-bind@1.1.1:\n    resolution: {integrity: sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==}\n    dev: true\n\n  /get-caller-file@2.0.5:\n    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}\n    engines: {node: 6.* || 8.* || >= 10.*}\n    dev: false\n\n  /get-intrinsic@1.1.1:\n    resolution: {integrity: sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==}\n    dependencies:\n      function-bind: 1.1.1\n      has: 1.0.3\n      has-symbols: 1.0.2\n    dev: true\n\n  /get-symbol-description@1.0.0:\n    resolution: {integrity: sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      get-intrinsic: 1.1.1\n    dev: true\n\n  /glob@7.2.0:\n    resolution: {integrity: sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==}\n    dependencies:\n      fs.realpath: 1.0.0\n      inflight: 1.0.6\n      inherits: 2.0.4\n      minimatch: 3.1.1\n      once: 1.4.0\n      path-is-absolute: 1.0.1\n    dev: true\n\n  /has-bigints@1.0.1:\n    resolution: {integrity: sha512-LSBS2LjbNBTf6287JEbEzvJgftkF5qFkmCo9hDRpAzKhUOlJ+hx8dd4USs00SgsUNwc4617J9ki5YtEClM2ffA==}\n    dev: true\n\n  /has-flag@4.0.0:\n    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}\n    engines: {node: '>=8'}\n    dev: true\n\n  /has-symbols@1.0.2:\n    resolution: {integrity: sha512-chXa79rL/UC2KlX17jo3vRGz0azaWEx5tGqZg5pO3NUyEJVB17dMruQlzCCOfUvElghKcm5194+BCRvi2Rv/Gw==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /has-tostringtag@1.0.0:\n    resolution: {integrity: sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-symbols: 1.0.2\n    dev: true\n\n  /has@1.0.3:\n    resolution: {integrity: sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==}\n    engines: {node: '>= 0.4.0'}\n    dependencies:\n      function-bind: 1.1.1\n    dev: true\n\n  /inflight@1.0.6:\n    resolution: {integrity: sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=}\n    dependencies:\n      once: 1.4.0\n      wrappy: 1.0.2\n    dev: true\n\n  /inherits@2.0.4:\n    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}\n    dev: true\n\n  /internal-slot@1.0.3:\n    resolution: {integrity: sha512-O0DB1JC/sPyZl7cIo78n5dR7eUSwwpYPiXRhTzNxZVAMUuB8vlnRFyLxdrVToks6XPLVnFfbzaVd5WLjhgg+vA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      get-intrinsic: 1.1.1\n      has: 1.0.3\n      side-channel: 1.0.4\n    dev: true\n\n  /inversify@6.0.1:\n    resolution: {integrity: sha512-B3ex30927698TJENHR++8FfEaJGqoWOgI6ZY5Ht/nLUsFCwHn6akbwtnUAPCgUepAnTpe2qHxhDNjoKLyz6rgQ==}\n    dev: true\n\n  /is-arguments@1.1.1:\n    resolution: {integrity: sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-bigint@1.0.4:\n    resolution: {integrity: sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==}\n    dependencies:\n      has-bigints: 1.0.1\n    dev: true\n\n  /is-boolean-object@1.1.2:\n    resolution: {integrity: sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-buffer@1.1.6:\n    resolution: {integrity: sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==}\n    dev: true\n\n  /is-callable@1.2.4:\n    resolution: {integrity: sha512-nsuwtxZfMX67Oryl9LCQ+upnC0Z0BgpwntpS89m1H/TLF0zNfzfLMV/9Wa/6MZsj0acpEjAO0KF1xT6ZdLl95w==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /is-date-object@1.0.5:\n    resolution: {integrity: sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-fullwidth-code-point@3.0.0:\n    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}\n    engines: {node: '>=8'}\n    dev: false\n\n  /is-generator-function@1.0.10:\n    resolution: {integrity: sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-nan@1.3.2:\n    resolution: {integrity: sha512-E+zBKpQ2t6MEo1VsonYmluk9NxGrbzpeeLC2xIViuO2EjU2xsXsBPwTr3Ykv9l08UYEVEdWeRZNouaZqF6RN0w==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /is-negative-zero@2.0.2:\n    resolution: {integrity: sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /is-number-object@1.0.6:\n    resolution: {integrity: sha512-bEVOqiRcvo3zO1+G2lVMy+gkkEm9Yh7cDMRusKKu5ZJKPUYSJwICTKZrNKHA2EbSP0Tu0+6B/emsYNHZyn6K8g==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-regex@1.1.4:\n    resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-shared-array-buffer@1.0.1:\n    resolution: {integrity: sha512-IU0NmyknYZN0rChcKhRO1X8LYz5Isj/Fsqh8NJOSf+N/hCOTwy29F32Ik7a+QszE63IdvmwdTPDd6cZ5pg4cwA==}\n    dev: true\n\n  /is-string@1.0.7:\n    resolution: {integrity: sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-symbol@1.0.4:\n    resolution: {integrity: sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      has-symbols: 1.0.2\n    dev: true\n\n  /is-typed-array@1.1.8:\n    resolution: {integrity: sha512-HqH41TNZq2fgtGT8WHVFVJhBVGuY3AnP3Q36K8JKXUxSxRgk/d+7NjmwG2vo2mYmXK8UYZKu0qH8bVP5gEisjA==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      available-typed-arrays: 1.0.5\n      call-bind: 1.0.2\n      es-abstract: 1.19.1\n      foreach: 2.0.5\n      has-tostringtag: 1.0.0\n    dev: true\n\n  /is-weakref@1.0.2:\n    resolution: {integrity: sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==}\n    dependencies:\n      call-bind: 1.0.2\n    dev: true\n\n  /javascript-obfuscator@4.0.0:\n    resolution: {integrity: sha512-vS/8w/9eKISzwXNLd+OLMCCwjD+dFMdOlCDOo919iR/MWdBs+7u1ybpwRoWOmODToPQKVYw5GasvZoIiPs5nPw==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    hasBin: true\n    requiresBuild: true\n    dependencies:\n      '@javascript-obfuscator/escodegen': 2.3.0\n      '@javascript-obfuscator/estraverse': 5.4.0\n      acorn: 8.7.0\n      assert: 2.0.0\n      chalk: 4.1.2\n      chance: 1.1.8\n      class-validator: 0.13.2\n      commander: 9.0.0\n      eslint-scope: 7.1.0\n      eslint-visitor-keys: 3.2.0\n      fast-deep-equal: 3.1.3\n      inversify: 6.0.1\n      js-string-escape: 1.0.1\n      md5: 2.3.0\n      mkdirp: 1.0.4\n      multimatch: 5.0.0\n      opencollective-postinstall: 2.0.3\n      process: 0.11.10\n      reflect-metadata: 0.1.13\n      source-map-support: 0.5.21\n      string-template: 1.0.0\n      stringz: 2.1.0\n      tslib: 2.3.1\n    dev: true\n\n  /js-string-escape@1.0.1:\n    resolution: {integrity: sha1-4mJbrbwNZ8dTPp7cEGjFh65BN+8=}\n    engines: {node: '>= 0.8'}\n    dev: true\n\n  /jsonc-parser@3.0.0:\n    resolution: {integrity: sha512-fQzRfAbIBnR0IQvftw9FJveWiHp72Fg20giDrHz6TdfB12UH/uue0D3hm57UB5KgAVuniLMCaS8P1IMj9NR7cA==}\n    dev: true\n\n  /levn@0.3.0:\n    resolution: {integrity: sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=}\n    engines: {node: '>= 0.8.0'}\n    dependencies:\n      prelude-ls: 1.1.2\n      type-check: 0.3.2\n\n  /libphonenumber-js@1.9.49:\n    resolution: {integrity: sha512-/wEOIONcVboFky+lWlCaF7glm1FhBz11M5PHeCApA+xDdVfmhKjHktHS8KjyGxouV5CSXIr4f3GvLSpJa4qMSg==}\n    dev: true\n\n  /lunr@2.3.9:\n    resolution: {integrity: sha512-zTU3DaZaF3Rt9rhN3uBMGQD3dD2/vFQqnvZCDv4dl5iOzq2IZQqTxu90r4E5J+nP70J3ilqVCrbho2eWaeW8Ow==}\n    dev: true\n\n  /marked@4.0.12:\n    resolution: {integrity: sha512-hgibXWrEDNBWgGiK18j/4lkS6ihTe9sxtV4Q1OQppb/0zzyPSzoFANBa5MfsG/zgsWklmNnhm0XACZOH/0HBiQ==}\n    engines: {node: '>= 12'}\n    hasBin: true\n    dev: true\n\n  /md5@2.3.0:\n    resolution: {integrity: sha512-T1GITYmFaKuO91vxyoQMFETst+O71VUPEU3ze5GNzDm0OWdP8v1ziTaAEPUr/3kLsY3Sftgz242A1SetQiDL7g==}\n    dependencies:\n      charenc: 0.0.2\n      crypt: 0.0.2\n      is-buffer: 1.1.6\n    dev: true\n\n  /mersenne-twister@1.1.0:\n    resolution: {integrity: sha1-+RZhjuQ9cXnvz2Qb7EUx65Zwl4o=}\n    dev: false\n\n  /minimatch@3.1.1:\n    resolution: {integrity: sha512-reLxBcKUPNBnc/sVtAbxgRVFSegoGeLaSjmphNhcwcolhYLRgtJscn5mRl6YRZNQv40Y7P6JM2YhSIsbL9OB5A==}\n    dependencies:\n      brace-expansion: 1.1.11\n    dev: true\n\n  /mkdirp@1.0.4:\n    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}\n    engines: {node: '>=10'}\n    hasBin: true\n    dev: true\n\n  /multimatch@5.0.0:\n    resolution: {integrity: sha512-ypMKuglUrZUD99Tk2bUQ+xNQj43lPEfAeX2o9cTteAmShXy2VHDJpuwu1o0xqoKCt9jLVAvwyFKdLTPXKAfJyA==}\n    engines: {node: '>=10'}\n    dependencies:\n      '@types/minimatch': 3.0.5\n      array-differ: 3.0.0\n      array-union: 2.1.0\n      arrify: 2.0.1\n      minimatch: 3.1.1\n    dev: true\n\n  /object-inspect@1.12.0:\n    resolution: {integrity: sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g==}\n    dev: true\n\n  /object-is@1.1.5:\n    resolution: {integrity: sha512-3cyDsyHgtmi7I7DfSSI2LDp6SK2lwvtbg0p0R1e0RvTqF5ceGx+K2dfSjm1bKDMVCFEDAQvy+o8c6a7VujOddw==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /object-keys@1.1.1:\n    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}\n    engines: {node: '>= 0.4'}\n    dev: true\n\n  /object.assign@4.1.2:\n    resolution: {integrity: sha512-ixT2L5THXsApyiUPYKmW+2EHpXXe5Ii3M+f4e+aJFAHao5amFRW6J0OO6c/LU8Be47utCx2GL89hxGB6XSmKuQ==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n      has-symbols: 1.0.2\n      object-keys: 1.1.1\n    dev: true\n\n  /once@1.4.0:\n    resolution: {integrity: sha1-WDsap3WWHUsROsF9nFC6753Xa9E=}\n    dependencies:\n      wrappy: 1.0.2\n    dev: true\n\n  /opencollective-postinstall@2.0.3:\n    resolution: {integrity: sha512-8AV/sCtuzUeTo8gQK5qDZzARrulB3egtLzFgteqB2tcT4Mw7B8Kt7JcDHmltjz6FOAHsvTevk70gZEbhM4ZS9Q==}\n    hasBin: true\n    dev: true\n\n  /optionator@0.8.3:\n    resolution: {integrity: sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==}\n    engines: {node: '>= 0.8.0'}\n    dependencies:\n      deep-is: 0.1.4\n      fast-levenshtein: 2.0.6\n      levn: 0.3.0\n      prelude-ls: 1.1.2\n      type-check: 0.3.2\n      word-wrap: 1.2.3\n\n  /path-is-absolute@1.0.1:\n    resolution: {integrity: sha1-F0uSaHNVNP+8es5r9TpanhtcX18=}\n    engines: {node: '>=0.10.0'}\n    dev: true\n\n  /prelude-ls@1.1.2:\n    resolution: {integrity: sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=}\n    engines: {node: '>= 0.8.0'}\n\n  /process@0.11.10:\n    resolution: {integrity: sha1-czIwDoQBYb2j5podHZGn1LwW8YI=}\n    engines: {node: '>= 0.6.0'}\n    dev: true\n\n  /reflect-metadata@0.1.13:\n    resolution: {integrity: sha512-Ts1Y/anZELhSsjMcU605fU9RE4Oi3p5ORujwbIKXfWa+0Zxs510Qrmrce5/Jowq3cHSZSJqBjypxmHarc+vEWg==}\n    dev: true\n\n  /require-directory@2.1.1:\n    resolution: {integrity: sha1-jGStX9MNqxyXbiNE/+f3kqam30I=}\n    engines: {node: '>=0.10.0'}\n    dev: false\n\n  /rimraf@3.0.2:\n    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}\n    hasBin: true\n    dependencies:\n      glob: 7.2.0\n    dev: true\n\n  /safe-buffer@5.2.1:\n    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}\n    dev: true\n\n  /shiki@0.10.1:\n    resolution: {integrity: sha512-VsY7QJVzU51j5o1+DguUd+6vmCmZ5v/6gYu4vyYAhzjuNQU6P/vmSy4uQaOhvje031qQMiW0d2BwgMH52vqMng==}\n    dependencies:\n      jsonc-parser: 3.0.0\n      vscode-oniguruma: 1.6.1\n      vscode-textmate: 5.2.0\n    dev: true\n\n  /side-channel@1.0.4:\n    resolution: {integrity: sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==}\n    dependencies:\n      call-bind: 1.0.2\n      get-intrinsic: 1.1.1\n      object-inspect: 1.12.0\n    dev: true\n\n  /source-map-support@0.5.21:\n    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}\n    dependencies:\n      buffer-from: 1.1.2\n      source-map: 0.6.1\n    dev: true\n\n  /source-map@0.6.1:\n    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}\n    engines: {node: '>=0.10.0'}\n\n  /string-template@1.0.0:\n    resolution: {integrity: sha1-np8iM9wA8hhxjsN5oopWc+zKi5Y=}\n    dev: true\n\n  /string-width@4.2.3:\n    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}\n    engines: {node: '>=8'}\n    dependencies:\n      emoji-regex: 8.0.0\n      is-fullwidth-code-point: 3.0.0\n      strip-ansi: 6.0.1\n    dev: false\n\n  /string.prototype.trimend@1.0.4:\n    resolution: {integrity: sha512-y9xCjw1P23Awk8EvTpcyL2NIr1j7wJ39f+k6lvRnSMz+mz9CGz9NYPelDk42kOz6+ql8xjfK8oYzy3jAP5QU5A==}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /string.prototype.trimstart@1.0.4:\n    resolution: {integrity: sha512-jh6e984OBfvxS50tdY2nRZnoC5/mLFKOREQfw8t5yytkoUsJRNxvI/E39qu1sD0OtWI3OC0XgKSmcWwziwYuZw==}\n    dependencies:\n      call-bind: 1.0.2\n      define-properties: 1.1.3\n    dev: true\n\n  /stringz@2.1.0:\n    resolution: {integrity: sha512-KlywLT+MZ+v0IRepfMxRtnSvDCMc3nR1qqCs3m/qIbSOWkNZYT8XHQA31rS3TnKp0c5xjZu3M4GY/2aRKSi/6A==}\n    dependencies:\n      char-regex: 1.0.2\n    dev: true\n\n  /strip-ansi@6.0.1:\n    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}\n    engines: {node: '>=8'}\n    dependencies:\n      ansi-regex: 5.0.1\n    dev: false\n\n  /supports-color@7.2.0:\n    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}\n    engines: {node: '>=8'}\n    dependencies:\n      has-flag: 4.0.0\n    dev: true\n\n  /tslib@2.3.1:\n    resolution: {integrity: sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==}\n    dev: true\n\n  /type-check@0.3.2:\n    resolution: {integrity: sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=}\n    engines: {node: '>= 0.8.0'}\n    dependencies:\n      prelude-ls: 1.1.2\n\n  /typedoc@0.22.11(typescript@4.5.5):\n    resolution: {integrity: sha512-pVr3hh6dkS3lPPaZz1fNpvcrqLdtEvXmXayN55czlamSgvEjh+57GUqfhAI1Xsuu/hNHUT1KNSx8LH2wBP/7SA==}\n    engines: {node: '>= 12.10.0'}\n    hasBin: true\n    peerDependencies:\n      typescript: 4.0.x || 4.1.x || 4.2.x || 4.3.x || 4.4.x || 4.5.x\n    dependencies:\n      glob: 7.2.0\n      lunr: 2.3.9\n      marked: 4.0.12\n      minimatch: 3.1.1\n      shiki: 0.10.1\n      typescript: 4.5.5\n    dev: true\n\n  /typescript@4.5.5:\n    resolution: {integrity: sha512-TCTIul70LyWe6IJWT8QSYeA54WQe8EjQFU4wY52Fasj5UKx88LNYKCgBEHcOMOrFF1rKGbD8v/xcNWVUq9SymA==}\n    engines: {node: '>=4.2.0'}\n    hasBin: true\n    dev: true\n\n  /unbox-primitive@1.0.1:\n    resolution: {integrity: sha512-tZU/3NqK3dA5gpE1KtyiJUrEB0lxnGkMFHptJ7q6ewdZ8s12QrODwNbhIJStmJkd1QDXa1NRA8aF2A1zk/Ypyw==}\n    dependencies:\n      function-bind: 1.1.1\n      has-bigints: 1.0.1\n      has-symbols: 1.0.2\n      which-boxed-primitive: 1.0.2\n    dev: true\n\n  /util@0.12.4:\n    resolution: {integrity: sha512-bxZ9qtSlGUWSOy9Qa9Xgk11kSslpuZwaxCg4sNIDj6FLucDab2JxnHwyNTCpHMtK1MjoQiWQ6DiUMZYbSrO+Sw==}\n    dependencies:\n      inherits: 2.0.4\n      is-arguments: 1.1.1\n      is-generator-function: 1.0.10\n      is-typed-array: 1.1.8\n      safe-buffer: 5.2.1\n      which-typed-array: 1.1.7\n    dev: true\n\n  /validator@13.7.0:\n    resolution: {integrity: sha512-nYXQLCBkpJ8X6ltALua9dRrZDHVYxjJ1wgskNt1lH9fzGjs3tgojGSCBjmEPwkWS1y29+DrizMTW19Pr9uB2nw==}\n    engines: {node: '>= 0.10'}\n    dev: true\n\n  /vscode-oniguruma@1.6.1:\n    resolution: {integrity: sha512-vc4WhSIaVpgJ0jJIejjYxPvURJavX6QG41vu0mGhqywMkQqulezEqEQ3cO3gc8GvcOpX6ycmKGqRoROEMBNXTQ==}\n    dev: true\n\n  /vscode-textmate@5.2.0:\n    resolution: {integrity: sha512-Uw5ooOQxRASHgu6C7GVvUxisKXfSgW4oFlO+aa+PAkgmH89O3CXxEEzNRNtHSqtXFTl0nAC1uYj0GMSH27uwtQ==}\n    dev: true\n\n  /which-boxed-primitive@1.0.2:\n    resolution: {integrity: sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==}\n    dependencies:\n      is-bigint: 1.0.4\n      is-boolean-object: 1.1.2\n      is-number-object: 1.0.6\n      is-string: 1.0.7\n      is-symbol: 1.0.4\n    dev: true\n\n  /which-typed-array@1.1.7:\n    resolution: {integrity: sha512-vjxaB4nfDqwKI0ws7wZpxIlde1XrLX5uB0ZjpfshgmapJMD7jJWhZI+yToJTqaFByF0eNBcYxbjmCzoRP7CfEw==}\n    engines: {node: '>= 0.4'}\n    dependencies:\n      available-typed-arrays: 1.0.5\n      call-bind: 1.0.2\n      es-abstract: 1.19.1\n      foreach: 2.0.5\n      has-tostringtag: 1.0.0\n      is-typed-array: 1.1.8\n    dev: true\n\n  /word-wrap@1.2.3:\n    resolution: {integrity: sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==}\n    engines: {node: '>=0.10.0'}\n\n  /wrap-ansi@7.0.0:\n    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}\n    engines: {node: '>=10'}\n    dependencies:\n      ansi-styles: 4.3.0\n      string-width: 4.2.3\n      strip-ansi: 6.0.1\n    dev: false\n\n  /wrappy@1.0.2:\n    resolution: {integrity: sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=}\n    dev: true\n\n  /y18n@5.0.8:\n    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}\n    engines: {node: '>=10'}\n    dev: false\n\n  /yargs-parser@21.0.0:\n    resolution: {integrity: sha512-z9kApYUOCwoeZ78rfRYYWdiU/iNL6mwwYlkkZfJoyMR1xps+NEBX5X7XmRpxkZHhXJ6+Ey00IwKxBBSW9FIjyA==}\n    engines: {node: '>=12'}\n    dev: false\n\n  /yargs@17.3.1:\n    resolution: {integrity: sha512-WUANQeVgjLbNsEmGk20f+nlHgOqzRFpiGWVaBrYGYIGANIIu3lWjoyi0fNlFmJkvfhCZ6BXINe7/W2O2bV4iaA==}\n    engines: {node: '>=12'}\n    dependencies:\n      cliui: 7.0.4\n      escalade: 3.1.1\n      get-caller-file: 2.0.5\n      require-directory: 2.1.1\n      string-width: 4.2.3\n      y18n: 5.0.8\n      yargs-parser: 21.0.0\n    dev: false\n", "import {\r\n  Node,\r\n  BinaryOperator,\r\n  BlockId,\r\n  FunctionExpression,\r\n  Program,\r\n} from './util/types'\r\nimport { Transformer, TransformerOptions } from './transformers/transformer'\r\n\r\nimport * as eslintScope from 'eslint-scope'\r\n\r\nimport ControlFlow from './transformers/controlflow'\r\nimport Desequence from './transformers/desequence'\r\nimport LiteralMap from './transformers/literalmap'\r\nimport MemberExpressionCleaner from './transformers/memberexpressioncleaner'\r\nimport Simplify from './transformers/simplify'\r\nimport StringDecoder from './transformers/stringdecoder'\r\nimport DeadCode from './transformers/deadcode'\r\nimport Demangle from './transformers/demangle'\r\nimport ArrayMap from './transformers/arraymap'\r\nimport Rename from './transformers/rename'\r\nimport JSCCalculator from './transformers/jsconfuser/calculator'\r\nimport JSCControlFlow from './transformers/jsconfuser/controlflow'\r\n\r\nexport enum DecoderFunctionType {\r\n  SIMPLE,\r\n  BASE64,\r\n  RC4,\r\n}\r\n\r\nexport interface DecoderFunction {\r\n  identifier: string\r\n  stringArrayIdentifier: string\r\n  type: DecoderFunctionType\r\n  offset: number\r\n  indexArgument: number\r\n  keyArgument: number\r\n}\r\n\r\nexport interface DecoderFunctionSimple extends DecoderFunction {\r\n  type: DecoderFunctionType.SIMPLE\r\n}\r\n\r\nexport interface DecoderFunctionBase64 extends DecoderFunction {\r\n  type: DecoderFunctionType.BASE64\r\n  charset: string\r\n}\r\n\r\nexport interface DecoderFunctionRC4 extends DecoderFunction {\r\n  type: DecoderFunctionType.RC4\r\n  charset: string\r\n}\r\n\r\nexport interface DecoderReference {\r\n  identifier: string\r\n  realIdentifier: string\r\n  additionalOffset: number\r\n\r\n  // if the wrapper is a function\r\n  indexArgument?: number\r\n  keyArgument?: number\r\n}\r\n\r\ninterface ControlFlowFunction {\r\n  identifier: string\r\n  node: FunctionExpression\r\n}\r\ninterface ControlFlowLiteral {\r\n  identifier: string\r\n  value: string | number\r\n}\r\nexport interface ControlFlowStorage {\r\n  identifier: string\r\n  aliases: string[]\r\n  functions: ControlFlowFunction[]\r\n  literals: ControlFlowLiteral[]\r\n}\r\n\r\nexport enum StringArrayType {\r\n  FUNCTION,\r\n  ARRAY,\r\n}\r\n\r\ninterface StringArray {\r\n  identifier: string\r\n  type: StringArrayType\r\n  strings: string[]\r\n}\r\n\r\nexport default class Context {\r\n  ast: Program\r\n  source?: string\r\n\r\n  shiftedArrays: number = 0\r\n  stringArrays: StringArray[] = []\r\n  stringDecoders: DecoderFunction[] = []\r\n  stringDecoderReferences: DecoderReference[] = []\r\n\r\n  controlFlowStorageNodes = new Map<BlockId, ControlFlowStorage>()\r\n\r\n  removeGarbage: boolean = true\r\n  transformers: InstanceType<typeof Transformer>[]\r\n\r\n  enableLog: boolean = true\r\n\r\n  scopeManager: eslintScope.ScopeManager\r\n  hash: number = 0\r\n\r\n  constructor(\r\n    ast: Program,\r\n    transformers: [string, Partial<TransformerOptions>][],\r\n    isModule: boolean,\r\n    source?: string\r\n  ) {\r\n    this.ast = ast\r\n    this.transformers = this.buildTransformerList(transformers)\r\n\r\n    this.source = source\r\n\r\n    this.scopeManager = eslintScope.analyze(this.ast, {\r\n      sourceType: isModule ? 'module' : 'script',\r\n    })\r\n  }\r\n\r\n  public log(message?: any, ...optionalParams: any[]) {\r\n    if (!this.enableLog) return\r\n    console.log(message, ...optionalParams)\r\n  }\r\n\r\n  private buildTransformerList(\r\n    list: [string, Partial<TransformerOptions>][]\r\n  ): InstanceType<typeof Transformer>[] {\r\n    let transformers: InstanceType<typeof Transformer>[] = []\r\n    for (let [name, opt] of list) {\r\n      switch (name.toLowerCase()) {\r\n        case 'controlflow':\r\n          transformers.push(new ControlFlow(opt))\r\n          break\r\n        case 'desequence':\r\n          transformers.push(new Desequence(opt))\r\n          break\r\n        case 'literalmap':\r\n          transformers.push(new LiteralMap(opt))\r\n          break\r\n        case 'memberexpressioncleaner':\r\n          transformers.push(new MemberExpressionCleaner(opt))\r\n          break\r\n        case 'simplify':\r\n          transformers.push(new Simplify(opt))\r\n          break\r\n        case 'stringdecoder':\r\n          transformers.push(new StringDecoder(opt))\r\n          break\r\n        case 'deadcode':\r\n          transformers.push(new DeadCode(opt))\r\n          break\r\n        case 'demangle':\r\n          transformers.push(new Demangle(opt))\r\n          break\r\n        case 'arraymap':\r\n          transformers.push(new ArrayMap(opt))\r\n          break\r\n        case 'rename':\r\n          transformers.push(new Rename(opt))\r\n          break\r\n        case 'jsc-calculator':\r\n          transformers.push(new JSCCalculator(opt))\r\n          break\r\n        case 'jsc-controlflow':\r\n          transformers.push(new JSCControlFlow(opt))\r\n          break\r\n        default:\r\n          throw new TypeError(\r\n            `Transformer \"${name}\" is invalid, it does not exist`\r\n          )\r\n      }\r\n    }\r\n    return transformers\r\n  }\r\n}\r\n", "import escodegen from '@javascript-obfuscator/escodegen'\r\nimport * as acorn from 'acorn' // no, it cannot be a default import\r\nimport * as acornLoose from 'acorn-loose'\r\nimport { Transformer, TransformerOptions } from './transformers/transformer'\r\nimport { Node, Program, sp } from './util/types'\r\nimport Context from './context'\r\nimport { walk } from './util/walk'\r\n\r\nconst FILE_REGEX = /(?<!\\.d)\\.[mc]?[jt]s$/i // cjs, mjs, js, ts, but no .d.ts\r\n\r\n// TODO: remove this when https://github.com/acornjs/acorn/commit/a4a5510 lands\r\ntype ecmaVersion =\r\n  | 3\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n  | 12\r\n  | 13\r\n  | 2015\r\n  | 2016\r\n  | 2017\r\n  | 2018\r\n  | 2019\r\n  | 2020\r\n  | 2021\r\n  | 2022\r\n  | 'latest'\r\n\r\ntype TransformerArray = [string, Partial<TransformerOptions>][]\r\n\r\nexport interface DeobfuscateOptions {\r\n  /**\r\n   * ECMA version to use when parsing AST (see acorn, default = 'latest')\r\n   */\r\n  ecmaVersion: ecmaVersion\r\n\r\n  /**\r\n   * Replace ChainExpressions with babel-compatible Optional{X}Expessions\r\n   * for work with Prettier\r\n   * https://github.com/prettier/prettier/pull/12172\r\n   * (default = true)\r\n   *\r\n   * @deprecated Prettier is no longer used in the deobfuscator\r\n   */\r\n  transformChainExpressions: boolean\r\n\r\n  /**\r\n   * Custom transformers to use\r\n   */\r\n  customTransformers: TransformerArray\r\n\r\n  /**\r\n   * Rename identifiers (default = false)\r\n   */\r\n  rename: boolean\r\n\r\n  /**\r\n   * Acorn source type\r\n   *\r\n   * Both tries module first then script and uses whichever parses properly\r\n   */\r\n  sourceType: 'both' | 'module' | 'script'\r\n\r\n  /**\r\n   * Loose parsing (default = false)\r\n   */\r\n  loose: boolean\r\n}\r\n\r\nfunction sourceHash(str: string) {\r\n  let key = 0x94a3fa21\r\n  let length = str.length\r\n  while (length) key = (key * 33) ^ str.charCodeAt(--length)\r\n  return key >>> 0\r\n}\r\n\r\ninterface SAcornOptions extends Omit<acorn.Options, 'sourceType'> {\r\n  sourceType: 'module' | 'script' | 'both' | undefined\r\n}\r\n\r\nexport class Deobfuscator {\r\n  public defaultOptions: DeobfuscateOptions = {\r\n    ecmaVersion: 'latest',\r\n    transformChainExpressions: true,\r\n    customTransformers: [],\r\n    rename: false,\r\n    sourceType: 'both',\r\n    loose: false,\r\n  }\r\n\r\n  private buildOptions(\r\n    options: Partial<DeobfuscateOptions> = {}\r\n  ): DeobfuscateOptions {\r\n    return { ...this.defaultOptions, ...options }\r\n  }\r\n\r\n  private buildAcornOptions(options: DeobfuscateOptions): SAcornOptions {\r\n    return {\r\n      ecmaVersion: options.ecmaVersion,\r\n      sourceType: options.sourceType,\r\n      // this is important for eslint-scope !!!!!!\r\n      ranges: true,\r\n    }\r\n  }\r\n\r\n  private parse(\r\n    input: string,\r\n    options: SAcornOptions,\r\n    deobfOptions: DeobfuscateOptions\r\n  ): acorn.Node {\r\n    const a = deobfOptions.loose ? acornLoose : acorn\r\n    if (options.sourceType !== 'both')\r\n      return a.parse(input, options as acorn.Options)\r\n\r\n    try {\r\n      options.sourceType = deobfOptions.sourceType = 'module'\r\n      return a.parse(input, options as acorn.Options)\r\n    } catch (err) {\r\n      options.sourceType = deobfOptions.sourceType = 'script'\r\n      return a.parse(input, options as acorn.Options)\r\n    }\r\n  }\r\n\r\n  public async deobfuscateNode(\r\n    node: Program,\r\n    _options?: Partial<DeobfuscateOptions>\r\n  ): Promise<Program> {\r\n    const options = this.buildOptions(_options)\r\n\r\n    const defaultTransformers: TransformerArray = [\r\n      ['Simplify', {}],\r\n      ['MemberExpressionCleaner', {}],\r\n      ['LiteralMap', {}],\r\n      ['DeadCode', {}],\r\n      ['Demangle', {}],\r\n\r\n      ['StringDecoder', {}],\r\n\r\n      ['Simplify', {}],\r\n      ['MemberExpressionCleaner', {}],\r\n\r\n      ['Desequence', {}],\r\n      ['ControlFlow', {}],\r\n      ['Desequence', {}],\r\n      ['MemberExpressionCleaner', {}],\r\n\r\n      //['ArrayMap', {}],\r\n      ['Simplify', {}],\r\n      ['DeadCode', {}],\r\n      ['Simplify', {}],\r\n      ['DeadCode', {}],\r\n    ]\r\n\r\n    let context = new Context(\r\n      node,\r\n      options.customTransformers.length > 0\r\n        ? options.customTransformers\r\n        : defaultTransformers,\r\n      options.sourceType === 'module'\r\n    )\r\n\r\n    for (const t of context.transformers) {\r\n      console.log('Running', t.name, 'transformer')\r\n      await t.transform(context)\r\n    }\r\n\r\n    if (options.rename) {\r\n      let source = escodegen.generate(context.ast, {\r\n          sourceMapWithCode: true,\r\n        }).code,\r\n        parsed = this.parse(\r\n          source,\r\n          this.buildAcornOptions(options),\r\n          options\r\n        ) as Program\r\n      context = new Context(\r\n        parsed,\r\n        [['Rename', {}]],\r\n        options.sourceType === 'module'\r\n      )\r\n      context.hash = sourceHash(source)\r\n      for (const t of context.transformers) {\r\n        console.log('(rename) Running', t.name, 'transformer')\r\n        await t.transform(context)\r\n      }\r\n    }\r\n\r\n    return context.ast\r\n  }\r\n\r\n  public async deobfuscateSource(\r\n    source: string,\r\n    _options?: Partial<DeobfuscateOptions>\r\n  ): Promise<string> {\r\n    const options = this.buildOptions(_options)\r\n    const acornOptions = this.buildAcornOptions(options)\r\n    let ast = this.parse(source, acornOptions, options) as Program\r\n\r\n    // perform transforms\r\n    ast = await this.deobfuscateNode(ast, options)\r\n\r\n    source = escodegen.generate(ast, {\r\n      sourceMapWithCode: true,\r\n    }).code\r\n\r\n    return source\r\n  }\r\n}\r\n", "import {\r\n  Node,\r\n  Literal,\r\n  Property,\r\n  sp,\r\n  getBlockId,\r\n  PropertyLiteral,\r\n  CallExpression,\r\n  FunctionExpression,\r\n  Identifier,\r\n  ObjectExpression,\r\n  Statement,\r\n  BlockStatement,\r\n} from '../util/types'\r\nimport { Transformer, TransformerOptions } from './transformer'\r\nimport { walk } from '../util/walk'\r\nimport * as Guard from '../util/guard'\r\nimport Context, { ControlFlowStorage } from '../context'\r\nimport {\r\n  immutate,\r\n  literalOrIdentifierToString,\r\n  filterEmptyStatements,\r\n} from '../util/helpers'\r\n\r\nexport interface ControlFlowOptions extends TransformerOptions {}\r\nexport default class ControlFlow extends Transformer<ControlFlowOptions> {\r\n  constructor(options: Partial<ControlFlowOptions>) {\r\n    super('ControlFlow', options)\r\n  }\r\n\r\n  // maybe global util function\r\n  private translateCallExp(fx: FunctionExpression, cx: CallExpression) {\r\n    if (!Guard.isReturnStatement(fx.body.body[0]))\r\n      throw new TypeError(\r\n        'Function in CFSN was invalid (not a returnstatement)'\r\n      )\r\n    if (!fx.params.every((p) => Guard.isIdentifier(p)))\r\n      throw new TypeError('Function in CFSN was invalid (not ident params)')\r\n    if (!fx.body.body[0].argument)\r\n      throw new TypeError('Function in CFSN was invalid (void return)')\r\n\r\n    const params = fx.params as Identifier[],\r\n      paramMap = new Map<string, Node>()\r\n    let i = 0\r\n    for (const p of params) {\r\n      paramMap.set(p.name, cx.arguments[i])\r\n      ++i\r\n    }\r\n    let immRtn = immutate(fx.body.body[0].argument)\r\n    walk(immRtn, {\r\n      Identifier(id) {\r\n        const node = paramMap.get(id.name)\r\n        if (!node) return\r\n        sp<Node>(id, node)\r\n      },\r\n    })\r\n\r\n    return immRtn as Node\r\n  }\r\n\r\n  private getStorageNode(\r\n    context: Context,\r\n    node: BlockStatement\r\n  ): ControlFlowStorage | undefined {\r\n    const bid = getBlockId(node)\r\n    return context.controlFlowStorageNodes.get(bid)\r\n  }\r\n\r\n  // fixes empty object inits where there are setters in the same block\r\n  populateEmptyObjects(context: Context) {\r\n    walk(context.ast, {\r\n      BlockStatement(node) {\r\n        // find empty object decls\r\n        walk(node, {\r\n          VariableDeclarator(decl) {\r\n            if (!Guard.isIdentifier(decl.id)) return\r\n            if (!decl.init || !Guard.isObjectExpresesion(decl.init)) return\r\n\r\n            if (decl.init.properties.length !== 0) return\r\n\r\n            const objName = decl.id.name\r\n            // now find the setters\r\n\r\n            // TODO: this will break if the value is set with a value set\r\n            // after the Object is defined\r\n            walk(node, {\r\n              ExpressionStatement(expr) {\r\n                if (!Guard.isAssignmentExpression(expr.expression)) return\r\n                let ae = expr.expression\r\n\r\n                if (!Guard.isMemberExpression(ae.left)) return\r\n\r\n                if (\r\n                  !Guard.isIdentifier(ae.left.object) ||\r\n                  !Guard.isIdentifier(ae.left.property)\r\n                )\r\n                  return\r\n\r\n                if (ae.left.object.name !== objName) return\r\n\r\n                let prop: Property = {\r\n                  type: 'Property',\r\n                  start: 0,\r\n                  end: 0,\r\n                  method: false,\r\n                  shorthand: false,\r\n                  computed: false,\r\n                  key: ae.left.property,\r\n                  value: ae.right,\r\n                  kind: 'init',\r\n                }\r\n                ;(decl.init as ObjectExpression).properties.push(prop)\r\n\r\n                // remove the ExpressionStatement\r\n                ;(expr as any).type = 'EmptyStatement'\r\n\r\n                context.log(\r\n                  `${objName}.${ae.left.property.name} = ${ae.right.type}`\r\n                )\r\n              },\r\n            })\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  // separate finding literals/functions from each other?\r\n  // current way makes code a bit confusing to follow ^^\r\n  findStorageNode(context: Context) {\r\n    const { findStorageNodeAliases } = this\r\n    walk(context.ast, {\r\n      BlockStatement(node) {\r\n        // /shrug\r\n        let bid = getBlockId(node)\r\n\r\n        let cfsn = context.controlFlowStorageNodes.get(bid)\r\n        if (cfsn) return\r\n        if (node.body.length === 0) return\r\n\r\n        walk(node, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (!Guard.isIdentifier(decl.id)) continue\r\n              if (decl.init?.type !== 'ObjectExpression') continue\r\n              if (decl.init.properties.length === 0) continue\r\n              if (\r\n                !decl.init.properties.every(\r\n                  (p) =>\r\n                    p.type !== 'SpreadElement' &&\r\n                    ['FunctionExpression', 'Literal'].includes(p.value.type) &&\r\n                    (p.key.type === 'Literal' || p.key.type === 'Identifier') &&\r\n                    literalOrIdentifierToString((p as any).key).length === 5\r\n                )\r\n              )\r\n                continue\r\n\r\n              cfsn = {\r\n                identifier: decl.id.name,\r\n                aliases: [decl.id.name],\r\n                functions: [],\r\n                literals: [],\r\n              }\r\n              context.controlFlowStorageNodes.set(bid, cfsn)\r\n              for (const prop of decl.init.properties as PropertyLiteral[]) {\r\n                let kn: Identifier | Literal = prop.key\r\n                let key = (\r\n                    Guard.isIdentifier(kn) ? kn.name : kn.value\r\n                  )! as string,\r\n                  i = -1\r\n                if (Guard.isLiteral(prop.value)) {\r\n                  if (\r\n                    (i = cfsn.literals.findIndex(\r\n                      (l) => l.identifier === key\r\n                    )) !== -1\r\n                  ) {\r\n                    // exists\r\n                    cfsn.literals[i].value = prop.value.value as string\r\n                  } else {\r\n                    cfsn.literals.push({\r\n                      identifier: key,\r\n                      value: prop.value.value as string,\r\n                    })\r\n                  }\r\n                } else if (Guard.isFunctionExpression(prop.value)) {\r\n                  let fnb = filterEmptyStatements(prop.value.body.body)\r\n                  if (fnb.length !== 1) continue\r\n                  if (!Guard.isReturnStatement(fnb[0])) continue\r\n                  let imm = immutate(prop.value)\r\n                  imm.body.body = fnb\r\n                  if (\r\n                    (i = cfsn.functions.findIndex(\r\n                      (f) => f.identifier === key\r\n                    )) !== -1\r\n                  ) {\r\n                    // exists\r\n                    cfsn.functions[i].node = imm\r\n                  } else {\r\n                    cfsn.functions.push({\r\n                      identifier: key,\r\n                      node: imm,\r\n                    })\r\n                  }\r\n                }\r\n              }\r\n              context.log(\r\n                'Found control flow node id =',\r\n                decl.id.name,\r\n                '#fn =',\r\n                cfsn.functions.length,\r\n                '#lit =',\r\n                cfsn.literals.length\r\n              )\r\n              if (context.removeGarbage) {\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              }\r\n            }\r\n\r\n            // the declaration should probably be removed only after the usages\r\n            // are replaced, so there is no dep on each key being 5chars\r\n            // or walk the node for Identifier usages and check parent is not\r\n            // a CallExpr or MembExpr\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n            if (vd.declarations.length === 0) {\r\n              // this node wont generate if it has no declarations left\r\n              ;(vd as any).type = 'EmptyStatement'\r\n            }\r\n\r\n            findStorageNodeAliases(context, node).replacer(context, node)\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  findStorageNodeAliases = (context: Context, ast: Node) => {\r\n    walk(ast, {\r\n      BlockStatement: (node) => {\r\n        if (node.body.length === 0) return\r\n        const cfsn = this.getStorageNode(context, node)\r\n        if (!cfsn) return\r\n\r\n        walk(node, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (\r\n                !decl.init ||\r\n                !Guard.isIdentifier(decl.id) ||\r\n                !Guard.isIdentifier(decl.init)\r\n              )\r\n                continue\r\n              if (cfsn.aliases.includes(decl.init.name)) {\r\n                cfsn.aliases.push(decl.id.name)\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              }\r\n            }\r\n\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n            if (vd.declarations.length === 0) {\r\n              // this node wont generate if it has no declarations left\r\n              ;(vd as any).type = 'EmptyStatement'\r\n            }\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  replacer = (context: Context, ast: Node) => {\r\n    const { translateCallExp } = this\r\n    walk(ast, {\r\n      BlockStatement: (node) => {\r\n        const cfsn = this.getStorageNode(context, node)\r\n        if (!cfsn) return\r\n        walk(node, {\r\n          MemberExpression(mx) {\r\n            if (!Guard.isIdentifier(mx.object)) return\r\n            if (!Guard.isIdentifier(mx.property)) return\r\n            if (!cfsn.aliases.includes(mx.object.name)) return\r\n\r\n            // typeguards still dont work inside arrow funcs(((((\r\n            let ident = mx.property.name,\r\n              i = -1\r\n\r\n            if (\r\n              (i = cfsn.literals.findIndex((l) => l.identifier === ident)) !==\r\n              -1\r\n            ) {\r\n              // ident is a literal\r\n              sp<Literal>(mx, {\r\n                type: 'Literal',\r\n                value: cfsn.literals[i].value,\r\n              })\r\n            }\r\n          },\r\n          CallExpression(cx) {\r\n            if (!Guard.isMemberExpression(cx.callee)) return\r\n            if (!Guard.isIdentifier(cx.callee.object)) return\r\n            if (!Guard.isIdentifier(cx.callee.property)) return\r\n            if (!cfsn.aliases.includes(cx.callee.object.name)) return\r\n\r\n            let ident = cx.callee.property.name,\r\n              i = -1\r\n\r\n            if (\r\n              (i = cfsn.functions.findIndex((f) => f.identifier === ident)) !==\r\n              -1\r\n            ) {\r\n              // ident is a function\r\n              const fx = cfsn.functions[i].node\r\n              sp<Node>(cx, translateCallExp(fx, cx))\r\n            }\r\n          },\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  deflatten(context: Context) {\r\n    walk(context.ast, {\r\n      WhileStatement(node, _, ancestors) {\r\n        if (!Guard.isLiteralBoolean(node.test) || node.test.value !== true)\r\n          return\r\n        if (\r\n          !Guard.isBlockStatement(node.body) ||\r\n          node.body.body.length === 0 ||\r\n          !Guard.isSwitchStatement(node.body.body[0])\r\n        )\r\n          return\r\n\r\n        const parent = ancestors[ancestors.length - 2]\r\n        if (!Guard.isBlockStatement(parent)) return\r\n\r\n        const switchStmt = node.body.body[0]\r\n\r\n        if (!Guard.isMemberExpression(switchStmt.discriminant)) return\r\n        if (\r\n          !Guard.isIdentifier(switchStmt.discriminant.object) ||\r\n          !Guard.isUpdateExpression(switchStmt.discriminant.property) ||\r\n          switchStmt.discriminant.property.operator !== '++' ||\r\n          switchStmt.discriminant.property.prefix !== false || // prefix ++s change \"return\" of updexp\r\n          !Guard.isIdentifier(switchStmt.discriminant.property.argument)\r\n        )\r\n          return\r\n\r\n        let shuffleId = switchStmt.discriminant.object.name,\r\n          indexId = switchStmt.discriminant.property.argument.name\r\n        let shuffleArr: string[] = [],\r\n          startIdx = -1\r\n\r\n        walk(parent, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (!Guard.isIdentifier(decl.id)) continue\r\n              if (!decl.init) continue\r\n              if (decl.id.name === shuffleId) {\r\n                if (!Guard.isCallExpression(decl.init)) continue\r\n                if (!Guard.isMemberExpression(decl.init.callee)) continue\r\n                if (!Guard.isLiteralString(decl.init.callee.object)) continue\r\n                if (\r\n                  !Guard.isIdentifier(decl.init.callee.property) ||\r\n                  decl.init.callee.property.name !== 'split'\r\n                )\r\n                  continue\r\n                if (!Guard.isLiteralString(decl.init.arguments[0])) continue\r\n                // 'nXnXnXnXn'.split(X)\r\n                let shfStr = decl.init.callee.object.value,\r\n                  sep = decl.init.arguments[0].value\r\n                shuffleArr = shfStr.split(sep)\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              } else if (decl.id.name === indexId) {\r\n                if (!Guard.isLiteralNumeric(decl.init)) continue\r\n                startIdx = decl.init.value\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              } else {\r\n                continue\r\n              }\r\n            }\r\n\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n            if (vd.declarations.length === 0) {\r\n              ;(vd as any).type = 'EmptyStatement'\r\n            }\r\n          },\r\n        })\r\n\r\n        // didnt locate arr or index\r\n        if (shuffleArr.length === 0 || startIdx === -1) return\r\n\r\n        let nodes: Statement[][] = []\r\n\r\n        for (let i = startIdx; i < shuffleArr.length; i++) {\r\n          let caseNum = shuffleArr[i]\r\n          let caze = switchStmt.cases.find(\r\n            (c) => c.test && Guard.isLiteral(c.test) && c.test.value === caseNum\r\n          )\r\n          if (!caze) return // should restore the variables above before returning\r\n          nodes.push(\r\n            caze.consequent.filter((i) => i.type !== 'ContinueStatement')\r\n          )\r\n        }\r\n\r\n        let ourIdx = parent.body.findIndex(\r\n          (e) =>\r\n            e.type === node.type && e.start === node.start && e.end === node.end\r\n        )\r\n        parent.body.splice(ourIdx, 1, ...nodes.flat())\r\n\r\n        context.log(\r\n          'Found flattened control flow arr =',\r\n          shuffleArr,\r\n          'idx =',\r\n          startIdx\r\n        )\r\n      },\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  public async transform(context: Context) {\r\n    this.populateEmptyObjects(context)\r\n      .findStorageNode(context)\r\n      .deflatten(context)\r\n  }\r\n}\r\n", "import {\n  sp,\n  Property,\n  Literal,\n  Function,\n  ArrowFunctionExpression,\n  FunctionExpression,\n  FunctionDeclaration,\n  Identifier,\n  VariableDeclarator,\n  VariableDeclaration,\n  BinaryExpression,\n  ReturnStatement,\n  Expression,\n  SwitchStatement,\n  NumericUnaryExpression,\n  NumericLiteral,\n  BinaryOperator,\n  WhileStatement,\n  SequenceExpression,\n  ExpressionStatement,\n} from '../../util/types'\nimport { Transformer, TransformerOptions } from './../transformer'\nimport { walk, findNodeAt } from '../../util/walk'\nimport * as Guard from '../../util/guard'\nimport Context from '../../context'\nimport { filterEmptyStatements, immutate } from '../../util/helpers'\nimport {\n  createLiteral,\n  literalOrUnaryExpressionToNumber,\n} from '../../util/translator'\nimport { mathEval } from '../../util/math'\nimport Simplify from '../simplify'\nimport escodegen from '@javascript-obfuscator/escodegen'\nimport { AssignmentOperator } from 'estree'\n\nfunction inverseOperator(operator: BinaryOperator) {\n  switch (operator) {\n    case '+':\n      return '-'\n    case '-':\n      return '+'\n    case '/':\n      return '*'\n    case '*':\n      return '/'\n    default:\n      throw new Error(\"Invalid operator to inverse '\" + operator + \"'\")\n  }\n}\ntype VarStack = Map<string, number>\nfunction generateCode(ast: Node): string {\n  return escodegen.generate(ast as any, {\n    sourceMapWithCode: true,\n  }).code\n}\n\n// this is hard coded since the values won't be of much use to anyone else\nconst DEBUG_LOG = false\nfunction log(message?: any, ...optionalParams: any[]) {\n  if (DEBUG_LOG) console.log.apply(null, arguments as any)\n}\n\nfunction evaluateAssignmentExpr(\n  stack: VarStack,\n  vk: string,\n  operator: AssignmentOperator,\n  value: number\n) {\n  if (operator === '=') return stack.set(vk, value)\n\n  const stackVal = stack.get(vk)\n  if (typeof stackVal !== 'number')\n    throw new Error(\n      'Unexpected non-numeric value in jsconfuser controlflow stack'\n    )\n\n  switch (operator) {\n    case '+=':\n      return stack.set(vk, stackVal + value)\n    case '-=':\n      return stack.set(vk, stackVal - value)\n    case '*=':\n      return stack.set(vk, stackVal * value)\n    case '/=':\n      return stack.set(vk, stackVal / value)\n    case '%=':\n      return stack.set(vk, stackVal % value)\n    case '<<=':\n      return stack.set(vk, stackVal << value)\n    case '>>=':\n      return stack.set(vk, stackVal >> value)\n    case '>>>=':\n      return stack.set(vk, stackVal >>> value)\n    case '&=':\n      return stack.set(vk, stackVal & value)\n    case '^=':\n      return stack.set(vk, stackVal ^ value)\n    case '|=':\n      return stack.set(vk, stackVal | value)\n    default:\n      throw new Error(\n        'Invalid assignment expression operator \"' + operator + '\"'\n      )\n  }\n}\nfunction updateIdentifiers(stack: VarStack, obj: any) {\n  for (const [vk, value] of stack) {\n    const node = createLiteral(value)\n\n    walk(obj, {\n      Identifier(id) {\n        if (id.name !== vk) return\n        sp<any>(id, node)\n      },\n    })\n  }\n  return obj\n}\n\nfunction evaluateBinaryExpr(stack: VarStack, _expr: BinaryExpression): number {\n  const st = new Simplify({})\n\n  let expr = immutate(_expr)\n  log('chain =', generateCode(expr))\n\n  updateIdentifiers(stack, expr)\n  st.math(expr)\n\n  log('new chain =', generateCode(expr))\n\n  if (!Guard.isLiteralNumeric(expr) && !Guard.isUnaryExpressionNumeric(expr))\n    throw new Error(\n      'Failed to evaluate chain: chain did not evaluate to number'\n    )\n  log('value =', literalOrUnaryExpressionToNumber(expr))\n  log('='.repeat(32))\n  return literalOrUnaryExpressionToNumber(expr)\n}\n\n// don't!\nconst MAX_SEQUENCE_ASSIGNMENT_ITERS = 10\nfunction evaluateSequenceAssignments(\n  stack: VarStack,\n  _expr: SequenceExpression\n): SequenceExpression {\n  const st = new Simplify({})\n\n  for (const expr of _expr.expressions) {\n    if (!Guard.isAssignmentExpression(expr)) {\n      updateIdentifiers(stack, expr)\n      continue\n    }\n    if (!Guard.isIdentifier(expr.left)) continue\n    if (!stack.has(expr.left.name)) continue\n    const vk = expr.left.name,\n      operator = expr.operator\n\n    let ie = immutate(expr.right)\n    updateIdentifiers(stack, ie)\n    log('(1/4) Evaluating', vk, operator, generateCode(ie as any))\n\n    for (let iters = 0; iters < MAX_SEQUENCE_ASSIGNMENT_ITERS; ++iters) {\n      if (Guard.isLiteralNumeric(ie) || Guard.isUnaryExpressionNumeric(ie))\n        break\n      st.literalComparison(ie)\n      log('(2/4) Evaluating', vk, operator, generateCode(ie as any))\n\n      st.conditionalExpression(ie)\n      log('(3/4) Evaluating', vk, operator, generateCode(ie as any))\n\n      st.math(ie)\n      log('(4/4) Evaluating', vk, operator, generateCode(ie as any))\n    }\n\n    if (!Guard.isLiteralNumeric(ie) && !Guard.isUnaryExpressionNumeric(ie))\n      throw new Error(\n        'Failed to evaluate assignment expression, ie is not a numeric value'\n      )\n\n    log('(4/4) Evaluated', vk, operator, generateCode(ie as unknown as Node))\n\n    let effect = literalOrUnaryExpressionToNumber(ie)\n    evaluateAssignmentExpr(stack, vk, operator, effect)\n    log(`stack[${vk}] = ${stack.get(vk)}`)\n    log('='.repeat(32))\n    ;(expr as any).type = 'EmptyStatement'\n  }\n  return _expr\n}\nexport interface JSCControlFlowOptions extends TransformerOptions {}\nexport default class JSCControlFlow extends Transformer<JSCControlFlowOptions> {\n  constructor(options: Partial<JSCControlFlowOptions>) {\n    super('JSCControlFlow', options)\n  }\n\n  deflatten(context: Context) {\n    function visitor(node: Function) {\n      const scope = context.scopeManager.acquire(node)\n      if (!scope) return\n      if (!Guard.isBlockStatement(node.body)) return\n      let whiles = node.body.body.filter(\n        (i) => i.type === 'WhileStatement'\n      ) as WhileStatement[]\n      for (const w of whiles) {\n        context.log('Found while statement')\n        if (!Guard.isBinaryExpression(w.test)) continue\n        if (\n          !Guard.isLiteralNumeric(w.test.right) &&\n          !Guard.isUnaryExpressionNumeric(w.test.right)\n        )\n          continue\n\n        const stack: VarStack = new Map()\n\n        let bx = w.test,\n          additive = false\n        while (Guard.isBinaryExpression(bx)) {\n          additive = bx.operator === '+'\n          if (Guard.isIdentifier(bx.left)) {\n            stack.set(bx.left.name, bx.left.start)\n          }\n          if (Guard.isIdentifier(bx.right)) {\n            stack.set(bx.right.name, bx.right.start)\n          }\n          bx = bx.left as BinaryExpression\n        }\n        if (!additive) continue\n        for (const [vk, value] of stack) {\n          let vref = scope.references.find(\n            (i) => i.identifier.range![0] === value\n          )\n          if (!vref) continue\n          if (\n            !vref.resolved ||\n            vref.resolved.defs.length === 0 ||\n            vref.resolved.defs[0].type !== 'Variable'\n          )\n            continue\n          let def = vref.resolved.defs[0]\n          if (\n            !def.node.init ||\n            (!Guard.isLiteralNumeric(def.node.init) &&\n              !Guard.isUnaryExpressionNumeric(def.node.init))\n          )\n            continue\n          def.parent.declarations = def.parent.declarations.filter(\n            (i) =>\n              i.range![0] !== def.node.range![0] &&\n              i.range![1] !== def.node.range![1]\n          )\n          stack.set(vk, literalOrUnaryExpressionToNumber(def.node.init))\n        }\n        const endState = literalOrUnaryExpressionToNumber(w.test.right)\n        context.log(stack, endState)\n\n        if (!Guard.isBlockStatement(w.body)) continue\n        let ss = w.body.body[w.body.body.length - 1]\n        if (!Guard.isSwitchStatement(ss)) continue\n        if (!Guard.isIdentifier(ss.discriminant)) continue\n        let strt = ss.discriminant.start\n        let ref = scope.references.find((i) => i.identifier.range![0] === strt)\n        if (\n          !ref ||\n          !ref.resolved ||\n          ref.resolved.defs.length === 0 ||\n          ref.resolved.defs[0].type !== 'Variable'\n        )\n          continue\n        let def = ref.resolved.defs[0]\n        if (!def.node.init || !Guard.isBinaryExpression(def.node.init)) continue\n\n        let maxIters = ss.cases.length,\n          iter = 0\n\n        let stateExpr = def.node.init! as BinaryExpression\n\n        // {...vars +} != {endState}\n        let whileStateExpr = w.test.left as BinaryExpression\n\n        let expressions: Expression[][] = []\n\n        while (true) {\n          if (iter > maxIters) {\n            throw new Error(\n              `JSconfuser control flow switch calculation failed (iter=${iter}>maxLoops=${maxIters})`\n            )\n          }\n          context.log(`Iteration #${iter + 1}/${maxIters + 1}`)\n          let wState = evaluateBinaryExpr(stack, whileStateExpr)\n          if (wState === endState) {\n            context.log(\n              'Switch calculation end',\n              wState,\n              '===',\n              endState,\n              'stack =',\n              stack\n            )\n            break\n          }\n\n          let state = evaluateBinaryExpr(stack, stateExpr)\n          let errorSuffix = ` (whileState = ${wState}, state = ${state}, stack = ${JSON.stringify(\n            stack\n          )})`\n          let caze = ss.cases.find(\n            (i) =>\n              i.test &&\n              literalOrUnaryExpressionToNumber(i.test as NumericLiteral) ===\n                state\n          )\n          if (!caze) throw new Error('Switch case not found' + errorSuffix)\n          if (caze.consequent.length !== 2)\n            throw new Error('Switch case is not of \"2\" length' + errorSuffix)\n          if (caze.consequent[1].type !== 'BreakStatement')\n            throw new Error(\n              'Switch case consequent[1] is not a BreakStatement' + errorSuffix\n            )\n          if (!Guard.isExpressionStatement(caze.consequent[0]))\n            throw new Error(\n              'Switch case consequent[0] is not an ExpressionStatement' +\n                errorSuffix\n            )\n          if (!Guard.isUnaryExpression(caze.consequent[0].expression))\n            throw new Error(\n              'Switch case consequent[0]<ExpressionStatement>.expression is not a UnaryExpression' +\n                errorSuffix\n            )\n          if (\n            !Guard.isSequenceExpression(caze.consequent[0].expression.argument)\n          )\n            throw new Error(\n              'Switch case consequent[0]<ExpressionStatement>.expression<UnaryExpression> is not a SequenceExpression' +\n                errorSuffix\n            )\n          let sequence = caze.consequent[0].expression.argument\n          evaluateSequenceAssignments(stack, sequence)\n          sequence.expressions = sequence.expressions.filter(\n            (i) => (i as any).type !== 'EmptyStatement'\n          )\n          expressions.push(sequence.expressions)\n          context.log('new stack =', stack)\n          iter++\n        }\n\n        sp<SequenceExpression>(w, {\n          type: 'SequenceExpression',\n          expressions: expressions.flat(),\n        })\n      }\n    }\n    walk(context.ast, {\n      FunctionDeclaration: visitor,\n      FunctionExpression: visitor,\n      ArrowFunctionExpression: visitor,\n    })\n    return this\n  }\n\n  fixSwitch(context: Context) {\n    function visitor(node: FunctionDeclaration | FunctionExpression) {\n      const scope = context.scopeManager.acquire(node)\n      if (!scope) return\n      let switches = node.body.body.filter((i) =>\n        Guard.isSwitchStatement(i)\n      ) as SwitchStatement[]\n      for (const ss of switches) {\n        if (!Guard.isIdentifier(ss.discriminant)) continue\n        let discName = ss.discriminant.name\n        let v = scope.variables.find((i) => i.name === discName)\n        if (!v) continue\n        if (v.defs.length === 0 || v.defs[0].type !== 'Variable') continue\n        let def = v.defs[0]\n        if (!def.node.init || !Guard.isBinaryExpression(def.node.init)) continue\n        let init = def.node.init\n        if (\n          !ss.cases.every(\n            (c) =>\n              c.test &&\n              (Guard.isUnaryExpressionNumeric(c.test) ||\n                Guard.isLiteralNumeric(c.test))\n          )\n        )\n          continue\n        let leftTrans = 0,\n          leftOper: BinaryOperator = '*',\n          rightTrans = 0,\n          rightOper: BinaryOperator = '+'\n\n        if (!Guard.isBinaryExpression(init.left)) continue\n        if (\n          !Guard.isUnaryExpressionNumeric(init.right) &&\n          !Guard.isLiteralNumeric(init.right)\n        )\n          continue\n        if (\n          !Guard.isUnaryExpressionNumeric(init.left.right) &&\n          !Guard.isLiteralNumeric(init.left.right)\n        )\n          continue\n        if (!Guard.isIdentifier(init.left.left)) continue\n\n        leftTrans = literalOrUnaryExpressionToNumber(init.left.right)\n        leftOper = inverseOperator(init.left.operator)\n        rightTrans = literalOrUnaryExpressionToNumber(init.right)\n        rightOper = inverseOperator(init.operator)\n\n        for (const c of ss.cases) {\n          let test = literalOrUnaryExpressionToNumber(\n            c.test! as NumericUnaryExpression | NumericLiteral\n          )\n          test = mathEval(\n            mathEval(test, rightOper, rightTrans),\n            leftOper,\n            leftTrans\n          )\n          sp<Literal>(c.test!, {\n            type: 'Literal',\n            value: test,\n          })\n        }\n        ss.discriminant.name = init.left.left.name\n\n        def.parent.declarations = def.parent.declarations.filter(\n          (i) =>\n            i.range![0] !== def.node.range![0] &&\n            i.range![1] !== def.node.range![1]\n        )\n      }\n    }\n    walk(context.ast, {\n      FunctionDeclaration: visitor,\n      FunctionExpression: visitor,\n    })\n    return this\n  }\n\n  public async transform(context: Context) {\n    this.fixSwitch(context).deflatten(context)\n  }\n}\n", "import {\r\n  sp,\r\n  Property,\r\n  Literal,\r\n  Function,\r\n  ArrowFunctionExpression,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  Identifier,\r\n  VariableDeclarator,\r\n  VariableDeclaration,\r\n} from '../util/types'\r\nimport { Transformer, TransformerOptions } from './transformer'\r\nimport { walk, findNodeAt } from '../util/walk'\r\nimport * as Guard from '../util/guard'\r\nimport Context from '../context'\r\n\r\nexport interface LiteralMapOptions extends TransformerOptions {}\r\nexport default class LiteralMap extends Transformer<LiteralMapOptions> {\r\n  constructor(options: Partial<LiteralMapOptions>) {\r\n    super('LiteralMap', options)\r\n  }\r\n\r\n  demap(context: Context) {\r\n    walk(context.ast, {\r\n      BlockStatement(node) {\r\n        const map = new Map<string, Map<string, any>>()\r\n\r\n        walk(node, {\r\n          VariableDeclaration(vd) {\r\n            let rm: string[] = []\r\n            for (const decl of vd.declarations) {\r\n              if (\r\n                !decl.init ||\r\n                decl.init.type !== 'ObjectExpression' ||\r\n                !Guard.isIdentifier(decl.id)\r\n              )\r\n                continue\r\n              if (decl.init.properties.length === 0) continue\r\n              if (\r\n                !decl.init.properties.every(\r\n                  (p) =>\r\n                    p.type !== 'SpreadElement' &&\r\n                    (Guard.isLiteral(p.key) || Guard.isIdentifier(p.key)) &&\r\n                    Guard.isLiteral(p.value)\r\n                )\r\n              )\r\n                continue\r\n\r\n              const name = decl.id.name\r\n              const localMap = map.get(name) || new Map<string, any>()\r\n              for (const _prop of decl.init.properties) {\r\n                const prop = _prop as Property\r\n                let key =\r\n                  prop.key.type === 'Identifier'\r\n                    ? prop.key.name\r\n                    : ((prop.key as Literal).value as string)\r\n                localMap.set(key, (prop.value as Literal).value as string)\r\n              }\r\n              if (!map.has(name)) map.set(name, localMap)\r\n\r\n              if (context.removeGarbage) {\r\n                rm.push(`${decl.start}!${decl.end}`)\r\n              }\r\n            }\r\n            vd.declarations = vd.declarations.filter(\r\n              (d) => !rm.includes(`${d.start}!${d.end}`)\r\n            )\r\n          },\r\n        })\r\n\r\n        walk(node, {\r\n          MemberExpression(exp) {\r\n            if (\r\n              !Guard.isIdentifier(exp.object) ||\r\n              (!Guard.isLiteral(exp.property) &&\r\n                !Guard.isIdentifier(exp.property))\r\n            )\r\n              return\r\n            let mapObj = map.get(exp.object.name)\r\n            if (!mapObj) return\r\n\r\n            let key = Guard.isIdentifier(exp.property)\r\n              ? exp.property.name\r\n              : ((exp.property as Literal).value as string)\r\n            let val = mapObj.get(key)\r\n            if (typeof val === 'undefined') return // ! check causes !0 == true.\r\n            sp<Literal>(exp, {\r\n              type: 'Literal',\r\n              value: val,\r\n            })\r\n          },\r\n        })\r\n      },\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  // replace read-only variables in functions\r\n  literals(context: Context) {\r\n    function visitor(func: Function) {\r\n      const scope = context.scopeManager.acquire(func)\r\n      if (!scope) return\r\n\r\n      for (const v of scope.variables) {\r\n        if (v.name === 'arguments') continue\r\n        if (v.identifiers.length !== 1) continue // ?\r\n        if (v.defs.length !== 1) continue // ?\r\n\r\n        const def = v.defs[0]\r\n        if (def.type !== 'Variable') continue // ?\r\n        const vd = def.node as VariableDeclarator\r\n\r\n        if (vd.init?.type !== 'Literal') continue\r\n        if (typeof vd.init.value === 'string' && vd.init.value.length === 65)\r\n          continue\r\n\r\n        // prevents us from replacing overwrote variables\r\n        if (!v.references.every((ref) => ref.init || ref.isReadOnly())) continue\r\n\r\n        for (const ref of v.references) {\r\n          // Dont replace our init reference lol\r\n          if (ref.init) {\r\n            let node = def.node as VariableDeclarator\r\n            let p = def.parent as VariableDeclaration\r\n            if (p.type === 'VariableDeclaration') {\r\n              p.declarations = p.declarations.filter(\r\n                (decl) => decl.start !== node.start && decl.end !== node.end\r\n              )\r\n            }\r\n            continue\r\n          }\r\n          const refid = findNodeAt<Identifier>(\r\n            func,\r\n            ref.identifier.range!,\r\n            'Identifier'\r\n          )\r\n          if (!refid) continue // hm\r\n          sp<Literal>(refid, vd.init)\r\n        }\r\n      }\r\n    }\r\n    walk(context.ast, {\r\n      FunctionDeclaration: visitor,\r\n      FunctionExpression: visitor,\r\n      ArrowFunctionExpression: visitor,\r\n    })\r\n    return this\r\n  }\r\n\r\n  public async transform(context: Context) {\r\n    this.demap(context).literals(context)\r\n  }\r\n}\r\n"], "filenames": ["package.json", "pnpm-lock.yaml", "src/context.ts", "src/deobfuscator.ts", "src/transformers/controlflow.ts", "src/transformers/jsconfuser/controlflow.ts", "src/transformers/literalmap.ts"], "buggy_code_start_loc": [34, 1, 72, 7, 12, 51, 27], "buggy_code_end_loc": [51, 961, 116, 243, 276, 250, 108], "fixing_code_start_loc": [33, 2, 72, 6, 13, 51, 27], "fixing_code_end_loc": [48, 948, 114, 208, 284, 253, 106], "type": "CWE-1321", "message": "Synchrony deobfuscator is a javascript cleaner & deobfuscator.  A `__proto__` pollution vulnerability exists in versions before v2.4.4. Successful exploitation could lead to arbitrary code execution. A `__proto__` pollution vulnerability exists in the `LiteralMap` transformer allowing crafted input to modify properties in the Object prototype. A fix has been released in `deobfuscator@2.4.4`. Users are advised to upgrade. Users unable to upgrade should launch node with the [--disable-proto=delete][disable-proto] or [--disable-proto=throw][disable-proto] flags\n", "other": {"cve": {"id": "CVE-2023-45811", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-17T23:15:12.487", "lastModified": "2023-10-25T13:33:35.367", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Synchrony deobfuscator is a javascript cleaner & deobfuscator.  A `__proto__` pollution vulnerability exists in versions before v2.4.4. Successful exploitation could lead to arbitrary code execution. A `__proto__` pollution vulnerability exists in the `LiteralMap` transformer allowing crafted input to modify properties in the Object prototype. A fix has been released in `deobfuscator@2.4.4`. Users are advised to upgrade. Users unable to upgrade should launch node with the [--disable-proto=delete][disable-proto] or [--disable-proto=throw][disable-proto] flags\n"}, {"lang": "es", "value": "Synchrony deofuscator es un limpiador y desofuscador de JavaScript. Existe una vulnerabilidad de contaminaci\u00f3n `__proto__` en versiones anteriores a la v2.4.4. Una explotaci\u00f3n exitosa podr\u00eda conducir a la ejecuci\u00f3n de c\u00f3digo arbitrario. Existe una vulnerabilidad de contaminaci\u00f3n `__proto__` en el transformador `LiteralMap` que permite que una entrada manipulada modifique las propiedades en el prototipo del objeto. Se ha publicado una soluci\u00f3n en `deobfuscator@2.4.4`. Se recomienda a los usuarios que actualicen. Los usuarios que no puedan actualizar deben iniciar el nodo con los indicadores [--disable-proto=delete][disable-proto] o [--disable-proto=throw][disable-proto]"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.4, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:relative:synchrony:*:*:*:*:*:nodejs:*:*", "versionStartIncluding": "2.0.1", "versionEndExcluding": "2.4.4", "matchCriteriaId": "76233930-2DF9-4929-B80B-B2E997EFDACF"}]}]}], "references": [{"url": "https://github.com/relative/synchrony/commit/b583126be94c4db7c5a478f1c5204bfb4162cf40", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/relative/synchrony/security/advisories/GHSA-jg82-xh3w-rhxx", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://github.com/relative/synchrony/security/advisories/src/transformers/literalmap.ts", "source": "security-advisories@github.com", "tags": ["Broken Link"]}]}, "github_commit_url": "https://github.com/relative/synchrony/commit/b583126be94c4db7c5a478f1c5204bfb4162cf40"}}