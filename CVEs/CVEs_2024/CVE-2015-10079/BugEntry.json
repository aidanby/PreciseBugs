{"buggy_code": ["/*\n    OmnomIRC COPYRIGHT 2010,2011 Netham45\n                       2012-2014 Sorunome\n                       2015      juju2143\n\n    This file contains snippets of code taken from OmnomIRC.\n*/\n\nfunction parseLinks(text,nav)\n{\n  text = text.replace(/(\\x01)/g,\"\");\n  if (!text || text === null || text === undefined){\n    return;\n  }\n  text = text.replace(/http:\\/\\/img.codewalr\\.us\\//g,\"\\x01img.codewalr.us/\");\n  text = text.replace(/http:\\/\\/codewalr\\.us\\//g,\"\\x01codewalr.us/\");\n  text = text.replace(RegExp(\"(^|.)(((f|ht)(tp|tps):\\/\\/)[^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f]*)\",\"g\"),'$1<a target=\"_blank\" href=\"$2\"'+(nav?' class=\"navbar-link\"':'')+'>$2</a>');\n  text = text.replace(RegExp(\"(^|\\\\s)(www\\\\.[^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f]*)\",\"g\"),'$1<a target=\"_blank\" href=\"http://$2\"'+(nav?' class=\"navbar-link\"':'')+'>$2</a>');\n  text = text.replace(RegExp(\"(^|.)\\x01(img.codewalr.us\\/[^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f]*)\",\"g\"),'$1<a target=\"_top\" href=\"http://$2\"'+(nav?' class=\"navbar-link\"':'')+'><img src=\"http://$2\" class=\"picture\" /></a>');\n  text = text.replace(RegExp(\"(^|.)\\x01([^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f]*)\",\"g\"),'$1<a target=\"_top\" href=\"http://$2\"'+(nav?' class=\"navbar-link\"':'')+'>http://$2</a>');\n  return text;\n}\n\nfunction parseColors(colorStr)\n{\n  var arrayResults = [],\n  s,\n  textDecoration = {\n    fg:'-1',\n    bg:'-1',\n    underline:false,\n    bold:false,\n    italic:false\n  },\n  i,didChange;\n  if(!colorStr){\n    return '';\n  }\n  arrayResults = colorStr.split(RegExp('([\\x02\\x03\\x0f\\x16\\x1d\\x1f])'));\n  colorStr='<span>';\n  for(i=0;i<arrayResults.length;i++){\n    didChange = true;\n    switch(arrayResults[i])\n    {\n      case '\\x03': // color\n        s = arrayResults[i+1].replace(/^([0-9]{1,2}),([0-9]{1,2})(.*)/,'$1:$2');\n        if(s == arrayResults[i+1]){ // we didn't change background\n          s = arrayResults[i+1].replace(/^([0-9]{1,2}).*/,'$1');\n          textDecoration.fg = s;\n          if(s == arrayResults[i+1]){\n            arrayResults[i+1] = '';\n          }else{\n            arrayResults[i+1] = arrayResults[i+1].substr(s.length);\n          }\n        }else{ // we also changed background\n          textDecoration.fg = s.split(':')[0];\n          textDecoration.bg = s.split(':')[1];\n          if(s == arrayResults[i+1]){\n            arrayResults[i+1] = '';\n          }else{\n            arrayResults[i+1] = arrayResults[i+1].substr(s.length);\n          }\n        }\n        break;\n      case '\\x02': // bold\n        textDecoration.bold = !textDecoration.bold;\n        break;\n      case '\\x1d': // italic\n        textDecoration.italic = !textDecoration.italic;\n        break;\n      case '\\x16': // swap fg and bg\n        s = textDecoration.fg;\n        textDecoration.fg = textDecoration.bg;\n        textDecoration.bg = s;\n        if(textDecoration.fg=='-1'){\n          textDecoration.fg = '0';\n        }\n        if(textDecoration.bg=='-1'){\n          textDecoration.bg = '1';\n        }\n        break;\n      case '\\x1f': // underline\n        textDecoration.underline = !textDecoration.underline;\n        break;\n      case '\\x0f': // reset\n        textDecoration = {\n          fg:'-1',\n          bg:'-1',\n          underline:false,\n          bold:false,\n          italic:false\n        }\n        break;\n      default:\n        didChange = false;\n    }\n    if(didChange){\n      colorStr += '</span>';\n      colorStr += '<span class=\"'+(textDecoration.fg!=-1?'c'+parseInt(textDecoration.fg)+' ':'')+(textDecoration.bg!=-1?'b'+parseInt(textDecoration.bg)+' ':'')+(textDecoration.bold?'bold ':'')+(textDecoration.underline?'underline ':'')+(textDecoration.italic?'italic':'')+'\">';\n    }else{\n      colorStr+=arrayResults[i];\n    }\n  }\n  colorStr += '</span>';\n  /*Strip codes*/\n  colorStr = colorStr.replace(/(\\x03|\\x02|\\x1F|\\x09|\\x0F)/g,'');\n  return colorStr;\n}\n\nfunction parseSmileys(s){\n  if(settings.smileys)\n    var smileys = settings.smileys;\n  else\n    var smileys = [];\n  var addStuff = '';\n  if(!s){\n    return '';\n  }\n  $.each(smileys,function(i,smiley){\n    s = s.replace(RegExp(smiley.regex,'g'),smiley.replace.split('ADDSTUFF').join(addStuff).split('PIC').join(smiley.pic).split('ALT').join(smiley.alt));\n  });\n  return s;\n}\n\nfunction parseMessage(s,nav,noSmileys)\n{\n  if(nav==undefined || !nav){\n    nav = false;\n  }\n  if(noSmileys==undefined || !noSmileys){\n    noSmileys = false;\n  }\n  s = (s==\"\\x00\"?'':s); //fix 0-string bug\n  s = $('<span/>').text(s).html();\n  s = parseLinks(s, nav);\n  if(noSmileys===false){\n    s = parseSmileys(s);\n  }\n  s = parseColors(s);\n  return s;\n}\n"], "fixing_code": ["/*\n    OmnomIRC COPYRIGHT 2010,2011 Netham45\n                       2012-2014 Sorunome\n                       2015      juju2143\n\n    This file contains snippets of code taken from OmnomIRC.\n*/\n\nfunction parseLinks(text,nav)\n{\n  text = text.replace(/(\\x01)/g,\"\");\n  if (!text || text === null || text === undefined){\n    return;\n  }\n  text = text.replace(/http:\\/\\/img.codewalr\\.us\\//g,\"\\x01img.codewalr.us/\");\n  text = text.replace(/http:\\/\\/codewalr\\.us\\//g,\"\\x01codewalr.us/\");\n  text = text.replace(RegExp(\"(^|.)(((f|ht)(tp|tps):\\/\\/)[^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f\\\"]*)\",\"g\"),'$1<a target=\"_blank\" href=\"$2\"'+(nav?' class=\"navbar-link\"':'')+'>$2</a>');\n  text = text.replace(RegExp(\"(^|\\\\s)(www\\\\.[^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f\\\"]*)\",\"g\"),'$1<a target=\"_blank\" href=\"http://$2\"'+(nav?' class=\"navbar-link\"':'')+'>$2</a>');\n  text = text.replace(RegExp(\"(^|.)\\x01(img.codewalr.us\\/[^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f\\\"]*)\",\"g\"),'$1<a target=\"_top\" href=\"http://$2\"'+(nav?' class=\"navbar-link\"':'')+'><img src=\"http://$2\" class=\"picture\" /></a>');\n  text = text.replace(RegExp(\"(^|.)\\x01([^\\\\s\\x02\\x03\\x0f\\x16\\x1d\\x1f\\\"]*)\",\"g\"),'$1<a target=\"_top\" href=\"http://$2\"'+(nav?' class=\"navbar-link\"':'')+'>http://$2</a>');\n  return text;\n}\n\nfunction parseColors(colorStr)\n{\n  var arrayResults = [],\n  s,\n  textDecoration = {\n    fg:'-1',\n    bg:'-1',\n    underline:false,\n    bold:false,\n    italic:false\n  },\n  i,didChange;\n  if(!colorStr){\n    return '';\n  }\n  arrayResults = colorStr.split(RegExp('([\\x02\\x03\\x0f\\x16\\x1d\\x1f])'));\n  colorStr='<span>';\n  for(i=0;i<arrayResults.length;i++){\n    didChange = true;\n    switch(arrayResults[i])\n    {\n      case '\\x03': // color\n        s = arrayResults[i+1].replace(/^([0-9]{1,2}),([0-9]{1,2})(.*)/,'$1:$2');\n        if(s == arrayResults[i+1]){ // we didn't change background\n          s = arrayResults[i+1].replace(/^([0-9]{1,2}).*/,'$1');\n          textDecoration.fg = s;\n          if(s == arrayResults[i+1]){\n            arrayResults[i+1] = '';\n          }else{\n            arrayResults[i+1] = arrayResults[i+1].substr(s.length);\n          }\n        }else{ // we also changed background\n          textDecoration.fg = s.split(':')[0];\n          textDecoration.bg = s.split(':')[1];\n          if(s == arrayResults[i+1]){\n            arrayResults[i+1] = '';\n          }else{\n            arrayResults[i+1] = arrayResults[i+1].substr(s.length);\n          }\n        }\n        break;\n      case '\\x02': // bold\n        textDecoration.bold = !textDecoration.bold;\n        break;\n      case '\\x1d': // italic\n        textDecoration.italic = !textDecoration.italic;\n        break;\n      case '\\x16': // swap fg and bg\n        s = textDecoration.fg;\n        textDecoration.fg = textDecoration.bg;\n        textDecoration.bg = s;\n        if(textDecoration.fg=='-1'){\n          textDecoration.fg = '0';\n        }\n        if(textDecoration.bg=='-1'){\n          textDecoration.bg = '1';\n        }\n        break;\n      case '\\x1f': // underline\n        textDecoration.underline = !textDecoration.underline;\n        break;\n      case '\\x0f': // reset\n        textDecoration = {\n          fg:'-1',\n          bg:'-1',\n          underline:false,\n          bold:false,\n          italic:false\n        }\n        break;\n      default:\n        didChange = false;\n    }\n    if(didChange){\n      colorStr += '</span>';\n      colorStr += '<span class=\"'+(textDecoration.fg!=-1?'c'+parseInt(textDecoration.fg)+' ':'')+(textDecoration.bg!=-1?'b'+parseInt(textDecoration.bg)+' ':'')+(textDecoration.bold?'bold ':'')+(textDecoration.underline?'underline ':'')+(textDecoration.italic?'italic':'')+'\">';\n    }else{\n      colorStr+=arrayResults[i];\n    }\n  }\n  colorStr += '</span>';\n  /*Strip codes*/\n  colorStr = colorStr.replace(/(\\x03|\\x02|\\x1F|\\x09|\\x0F)/g,'');\n  return colorStr;\n}\n\nfunction parseSmileys(s){\n  if(settings.smileys)\n    var smileys = settings.smileys;\n  else\n    var smileys = [];\n  var addStuff = '';\n  if(!s){\n    return '';\n  }\n  $.each(smileys,function(i,smiley){\n    s = s.replace(RegExp(smiley.regex,'g'),smiley.replace.split('ADDSTUFF').join(addStuff).split('PIC').join(smiley.pic).split('ALT').join(smiley.alt));\n  });\n  return s;\n}\n\nfunction parseMessage(s,nav,noSmileys)\n{\n  if(nav==undefined || !nav){\n    nav = false;\n  }\n  if(noSmileys==undefined || !noSmileys){\n    noSmileys = false;\n  }\n  s = (s==\"\\x00\"?'':s); //fix 0-string bug\n  s = $('<span/>').text(s).html();\n  s = parseLinks(s, nav);\n  if(noSmileys===false){\n    s = parseSmileys(s);\n  }\n  s = parseColors(s);\n  return s;\n}\n"], "filenames": ["public/parser.js"], "buggy_code_start_loc": [17], "buggy_code_end_loc": [21], "fixing_code_start_loc": [17], "fixing_code_end_loc": [21], "type": "CWE-79", "message": "A vulnerability was found in juju2143 WalrusIRC 0.0.2. It has been rated as problematic. This issue affects the function parseLinks of the file public/parser.js. The manipulation of the argument text leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 0.0.3 is able to address this issue. The name of the patch is 45fd885895ae13e8d9b3a71e89d59768914f60af. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220751.", "other": {"cve": {"id": "CVE-2015-10079", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-13T22:15:12.000", "lastModified": "2023-02-22T20:13:09.600", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in juju2143 WalrusIRC 0.0.2. It has been rated as problematic. This issue affects the function parseLinks of the file public/parser.js. The manipulation of the argument text leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 0.0.3 is able to address this issue. The name of the patch is 45fd885895ae13e8d9b3a71e89d59768914f60af. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220751."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:walrusirc_project:walrusirc:0.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "CAB210F5-8422-4CF4-8290-4E10636D9838"}]}]}], "references": [{"url": "https://github.com/juju2143/walrusirc/commit/45fd885895ae13e8d9b3a71e89d59768914f60af", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/juju2143/walrusirc/releases/tag/0.0.3", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.220751", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.220751", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/juju2143/walrusirc/commit/45fd885895ae13e8d9b3a71e89d59768914f60af"}}