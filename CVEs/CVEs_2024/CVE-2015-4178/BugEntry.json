{"buggy_code": ["#include <linux/fs.h>\n#include <linux/sched.h>\n#include <linux/slab.h>\n#include \"internal.h\"\n#include \"mount.h\"\n\nstatic DEFINE_SPINLOCK(pin_lock);\n\nvoid pin_remove(struct fs_pin *pin)\n{\n\tspin_lock(&pin_lock);\n\thlist_del(&pin->m_list);\n\thlist_del(&pin->s_list);\n\tspin_unlock(&pin_lock);\n\tspin_lock_irq(&pin->wait.lock);\n\tpin->done = 1;\n\twake_up_locked(&pin->wait);\n\tspin_unlock_irq(&pin->wait.lock);\n}\n\nvoid pin_insert_group(struct fs_pin *pin, struct vfsmount *m, struct hlist_head *p)\n{\n\tspin_lock(&pin_lock);\n\tif (p)\n\t\thlist_add_head(&pin->s_list, p);\n\thlist_add_head(&pin->m_list, &real_mount(m)->mnt_pins);\n\tspin_unlock(&pin_lock);\n}\n\nvoid pin_insert(struct fs_pin *pin, struct vfsmount *m)\n{\n\tpin_insert_group(pin, m, &m->mnt_sb->s_pins);\n}\n\nvoid pin_kill(struct fs_pin *p)\n{\n\twait_queue_t wait;\n\n\tif (!p) {\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\tinit_wait(&wait);\n\tspin_lock_irq(&p->wait.lock);\n\tif (likely(!p->done)) {\n\t\tp->done = -1;\n\t\tspin_unlock_irq(&p->wait.lock);\n\t\trcu_read_unlock();\n\t\tp->kill(p);\n\t\treturn;\n\t}\n\tif (p->done > 0) {\n\t\tspin_unlock_irq(&p->wait.lock);\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\t__add_wait_queue(&p->wait, &wait);\n\twhile (1) {\n\t\tset_current_state(TASK_UNINTERRUPTIBLE);\n\t\tspin_unlock_irq(&p->wait.lock);\n\t\trcu_read_unlock();\n\t\tschedule();\n\t\trcu_read_lock();\n\t\tif (likely(list_empty(&wait.task_list)))\n\t\t\tbreak;\n\t\t/* OK, we know p couldn't have been freed yet */\n\t\tspin_lock_irq(&p->wait.lock);\n\t\tif (p->done > 0) {\n\t\t\tspin_unlock_irq(&p->wait.lock);\n\t\t\tbreak;\n\t\t}\n\t}\n\trcu_read_unlock();\n}\n\nvoid mnt_pin_kill(struct mount *m)\n{\n\twhile (1) {\n\t\tstruct hlist_node *p;\n\t\trcu_read_lock();\n\t\tp = ACCESS_ONCE(m->mnt_pins.first);\n\t\tif (!p) {\n\t\t\trcu_read_unlock();\n\t\t\tbreak;\n\t\t}\n\t\tpin_kill(hlist_entry(p, struct fs_pin, m_list));\n\t}\n}\n\nvoid group_pin_kill(struct hlist_head *p)\n{\n\twhile (1) {\n\t\tstruct hlist_node *q;\n\t\trcu_read_lock();\n\t\tq = ACCESS_ONCE(p->first);\n\t\tif (!q) {\n\t\t\trcu_read_unlock();\n\t\t\tbreak;\n\t\t}\n\t\tpin_kill(hlist_entry(q, struct fs_pin, s_list));\n\t}\n}\n", "#include <linux/wait.h>\n\nstruct fs_pin {\n\twait_queue_head_t\twait;\n\tint\t\t\tdone;\n\tstruct hlist_node\ts_list;\n\tstruct hlist_node\tm_list;\n\tvoid (*kill)(struct fs_pin *);\n};\n\nstruct vfsmount;\n\nstatic inline void init_fs_pin(struct fs_pin *p, void (*kill)(struct fs_pin *))\n{\n\tinit_waitqueue_head(&p->wait);\n\tp->kill = kill;\n}\n\nvoid pin_remove(struct fs_pin *);\nvoid pin_insert_group(struct fs_pin *, struct vfsmount *, struct hlist_head *);\nvoid pin_insert(struct fs_pin *, struct vfsmount *);\nvoid pin_kill(struct fs_pin *);\n"], "fixing_code": ["#include <linux/fs.h>\n#include <linux/sched.h>\n#include <linux/slab.h>\n#include \"internal.h\"\n#include \"mount.h\"\n\nstatic DEFINE_SPINLOCK(pin_lock);\n\nvoid pin_remove(struct fs_pin *pin)\n{\n\tspin_lock(&pin_lock);\n\thlist_del_init(&pin->m_list);\n\thlist_del_init(&pin->s_list);\n\tspin_unlock(&pin_lock);\n\tspin_lock_irq(&pin->wait.lock);\n\tpin->done = 1;\n\twake_up_locked(&pin->wait);\n\tspin_unlock_irq(&pin->wait.lock);\n}\n\nvoid pin_insert_group(struct fs_pin *pin, struct vfsmount *m, struct hlist_head *p)\n{\n\tspin_lock(&pin_lock);\n\tif (p)\n\t\thlist_add_head(&pin->s_list, p);\n\thlist_add_head(&pin->m_list, &real_mount(m)->mnt_pins);\n\tspin_unlock(&pin_lock);\n}\n\nvoid pin_insert(struct fs_pin *pin, struct vfsmount *m)\n{\n\tpin_insert_group(pin, m, &m->mnt_sb->s_pins);\n}\n\nvoid pin_kill(struct fs_pin *p)\n{\n\twait_queue_t wait;\n\n\tif (!p) {\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\tinit_wait(&wait);\n\tspin_lock_irq(&p->wait.lock);\n\tif (likely(!p->done)) {\n\t\tp->done = -1;\n\t\tspin_unlock_irq(&p->wait.lock);\n\t\trcu_read_unlock();\n\t\tp->kill(p);\n\t\treturn;\n\t}\n\tif (p->done > 0) {\n\t\tspin_unlock_irq(&p->wait.lock);\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\t__add_wait_queue(&p->wait, &wait);\n\twhile (1) {\n\t\tset_current_state(TASK_UNINTERRUPTIBLE);\n\t\tspin_unlock_irq(&p->wait.lock);\n\t\trcu_read_unlock();\n\t\tschedule();\n\t\trcu_read_lock();\n\t\tif (likely(list_empty(&wait.task_list)))\n\t\t\tbreak;\n\t\t/* OK, we know p couldn't have been freed yet */\n\t\tspin_lock_irq(&p->wait.lock);\n\t\tif (p->done > 0) {\n\t\t\tspin_unlock_irq(&p->wait.lock);\n\t\t\tbreak;\n\t\t}\n\t}\n\trcu_read_unlock();\n}\n\nvoid mnt_pin_kill(struct mount *m)\n{\n\twhile (1) {\n\t\tstruct hlist_node *p;\n\t\trcu_read_lock();\n\t\tp = ACCESS_ONCE(m->mnt_pins.first);\n\t\tif (!p) {\n\t\t\trcu_read_unlock();\n\t\t\tbreak;\n\t\t}\n\t\tpin_kill(hlist_entry(p, struct fs_pin, m_list));\n\t}\n}\n\nvoid group_pin_kill(struct hlist_head *p)\n{\n\twhile (1) {\n\t\tstruct hlist_node *q;\n\t\trcu_read_lock();\n\t\tq = ACCESS_ONCE(p->first);\n\t\tif (!q) {\n\t\t\trcu_read_unlock();\n\t\t\tbreak;\n\t\t}\n\t\tpin_kill(hlist_entry(q, struct fs_pin, s_list));\n\t}\n}\n", "#include <linux/wait.h>\n\nstruct fs_pin {\n\twait_queue_head_t\twait;\n\tint\t\t\tdone;\n\tstruct hlist_node\ts_list;\n\tstruct hlist_node\tm_list;\n\tvoid (*kill)(struct fs_pin *);\n};\n\nstruct vfsmount;\n\nstatic inline void init_fs_pin(struct fs_pin *p, void (*kill)(struct fs_pin *))\n{\n\tinit_waitqueue_head(&p->wait);\n\tINIT_HLIST_NODE(&p->s_list);\n\tINIT_HLIST_NODE(&p->m_list);\n\tp->kill = kill;\n}\n\nvoid pin_remove(struct fs_pin *);\nvoid pin_insert_group(struct fs_pin *, struct vfsmount *, struct hlist_head *);\nvoid pin_insert(struct fs_pin *, struct vfsmount *);\nvoid pin_kill(struct fs_pin *);\n"], "filenames": ["fs/fs_pin.c", "include/linux/fs_pin.h"], "buggy_code_start_loc": [12, 15], "buggy_code_end_loc": [14, 15], "fixing_code_start_loc": [12, 16], "fixing_code_end_loc": [14, 18], "type": "NVD-CWE-Other", "message": "The fs_pin implementation in the Linux kernel before 4.0.5 does not ensure the internal consistency of a certain list data structure, which allows local users to cause a denial of service (system crash) by leveraging user-namespace root access for an MNT_DETACH umount2 system call, related to fs/fs_pin.c and include/linux/fs_pin.h.", "other": {"cve": {"id": "CVE-2015-4178", "sourceIdentifier": "secalert@redhat.com", "published": "2016-05-02T10:59:16.203", "lastModified": "2016-05-06T20:17:27.213", "vulnStatus": "Analyzed", "evaluatorComment": "<a href=\"http://cwe.mitre.org/data/definitions/476.html\">CWE-476: NULL Pointer Dereference</a>", "descriptions": [{"lang": "en", "value": "The fs_pin implementation in the Linux kernel before 4.0.5 does not ensure the internal consistency of a certain list data structure, which allows local users to cause a denial of service (system crash) by leveraging user-namespace root access for an MNT_DETACH umount2 system call, related to fs/fs_pin.c and include/linux/fs_pin.h."}, {"lang": "es", "value": "La implementaci\u00f3n de fs_pin en el kernel de Linux en versiones anteriores a 4.0.5 no asegura la consistencia interna de una determinada estructura de datos de lista, lo que permite a usuarios locales provocar una denegaci\u00f3n de servicio (ca\u00edda de sistema) aprovechando acceso root al espacio de nombres de usuario para una llamada de sistema MNT_DETACH umount2, relacionado con fs/fs_pin.c y include/linux/fs_pin.h."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.0.4", "matchCriteriaId": "C2A79CCA-B60A-4054-830E-B89A2CB2ABEF"}]}]}], "references": [{"url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=820f9f147dcce2602eefd9b575bbbd9ea14f0953", "source": "secalert@redhat.com"}, {"url": "http://openwall.com/lists/oss-security/2015/05/29/10", "source": "secalert@redhat.com"}, {"url": "http://openwall.com/lists/oss-security/2015/05/29/5", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.0.5", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2015/06/04/5", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1249849", "source": "secalert@redhat.com"}, {"url": "https://github.com/torvalds/linux/commit/820f9f147dcce2602eefd9b575bbbd9ea14f0953", "source": "secalert@redhat.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/820f9f147dcce2602eefd9b575bbbd9ea14f0953"}}