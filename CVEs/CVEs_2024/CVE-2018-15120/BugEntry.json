{"buggy_code": ["/* Pango\n * pango-emoji.c: Emoji handling\n *\n * Copyright (C) 2017 Google, Inc.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n *\n * Implementation of pango_emoji_iter is derived from Chromium:\n *\n * https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/fonts/FontFallbackPriority.h\n * https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/text/CharacterEmoji.cpp\n * https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/fonts/SymbolsIterator.cpp\n *\n * // Copyright 2015 The Chromium Authors. All rights reserved.\n * // Use of this source code is governed by a BSD-style license that can be\n * // found in the LICENSE file.\n */\n\n#include \"config.h\"\n#include <stdlib.h>\n#include <string.h>\n\n#include \"pango-emoji-private.h\"\n#include \"pango-emoji-table.h\"\n\n\nstatic int\ninterval_compare (const void *key, const void *elt)\n{\n  gunichar c = GPOINTER_TO_UINT (key);\n  struct Interval *interval = (struct Interval *)elt;\n\n  if (c < interval->start)\n    return -1;\n  if (c > interval->end)\n    return +1;\n\n  return 0;\n}\n\n#define DEFINE_pango_Is_(name) \\\nstatic gboolean \\\n_pango_Is_##name (gunichar ch) \\\n{ \\\n  /* bsearch() is declared attribute(nonnull(1)) so we can't validly search \\\n   * for a NULL key */ \\\n  /* \\\n  if (G_UNLIKELY (ch == 0)) \\\n    return FALSE; \\\n   */ \\\n \\\n  if (bsearch (GUINT_TO_POINTER (ch), \\\n               _pango_##name##_table, \\\n               G_N_ELEMENTS (_pango_##name##_table), \\\n               sizeof _pango_##name##_table[0], \\\n\t       interval_compare)) \\\n    return TRUE; \\\n \\\n  return FALSE; \\\n}\n\nDEFINE_pango_Is_(Emoji)\nDEFINE_pango_Is_(Emoji_Presentation)\nDEFINE_pango_Is_(Emoji_Modifier)\nDEFINE_pango_Is_(Emoji_Modifier_Base)\n\n\nstatic gboolean\n_pango_Is_Emoji_Text_Default (gunichar ch)\n{\n  return _pango_Is_Emoji (ch) && !_pango_Is_Emoji_Presentation (ch);\n}\n\nstatic gboolean\n_pango_Is_Emoji_Emoji_Default (gunichar ch)\n{\n  return _pango_Is_Emoji_Presentation (ch);\n}\n\nstatic gboolean\n_pango_Is_Emoji_Keycap_Base (gunichar ch)\n{\n  return (ch >= '0' && ch <= '9') || ch == '#' || ch == '*';\n}\n\nstatic gboolean\n_pango_Is_Regional_Indicator (gunichar ch)\n{\n  return (ch >= 0x1F1E6 && ch <= 0x1F1FF);\n}\n\n\nconst gunichar kCombiningEnclosingCircleBackslashCharacter = 0x20E0;\nconst gunichar kCombiningEnclosingKeycapCharacter = 0x20E3;\nconst gunichar kEyeCharacter = 0x1F441;\nconst gunichar kFemaleSignCharacter = 0x2640;\nconst gunichar kLeftSpeechBubbleCharacter = 0x1F5E8;\nconst gunichar kMaleSignCharacter = 0x2642;\nconst gunichar kRainbowCharacter = 0x1F308;\nconst gunichar kStaffOfAesculapiusCharacter = 0x2695;\nconst gunichar kVariationSelector15Character = 0xFE0E;\nconst gunichar kVariationSelector16Character = 0xFE0F;\nconst gunichar kWavingWhiteFlagCharacter = 0x1F3F3;\nconst gunichar kZeroWidthJoinerCharacter = 0x200D;\n\n\ntypedef enum {\n  PANGO_EMOJI_TYPE_INVALID,\n  PANGO_EMOJI_TYPE_TEXT, /* For regular non-symbols text */\n  PANGO_EMOJI_TYPE_EMOJI_TEXT, /* For emoji in text presentaiton */\n  PANGO_EMOJI_TYPE_EMOJI_EMOJI /* For emoji in emoji presentation */\n} PangoEmojiType;\n\nstatic PangoEmojiType\n_pango_get_emoji_type (gunichar codepoint)\n{\n  /* Those should only be Emoji presentation as combinations of two. */\n  if (_pango_Is_Emoji_Keycap_Base (codepoint) ||\n      _pango_Is_Regional_Indicator (codepoint))\n    return PANGO_EMOJI_TYPE_TEXT;\n\n  if (codepoint == kCombiningEnclosingKeycapCharacter)\n    return PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n\n  if (_pango_Is_Emoji_Emoji_Default (codepoint) ||\n      _pango_Is_Emoji_Modifier_Base (codepoint) ||\n      _pango_Is_Emoji_Modifier (codepoint))\n    return PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n\n  if (_pango_Is_Emoji_Text_Default (codepoint))\n    return PANGO_EMOJI_TYPE_EMOJI_TEXT;\n\n  return PANGO_EMOJI_TYPE_TEXT;\n}\n\n\nPangoEmojiIter *\n_pango_emoji_iter_init (PangoEmojiIter *iter,\n\t\t\tconst char     *text,\n\t\t\tint             length)\n{\n  iter->text_start = text;\n  if (length >= 0)\n    iter->text_end = text + length;\n  else\n    iter->text_end = text + strlen (text);\n\n  iter->start = text;\n  iter->end = text;\n  iter->is_emoji = (gboolean) 2; /* HACK */\n\n  _pango_emoji_iter_next (iter);\n\n  return iter;\n}\n\nvoid\n_pango_emoji_iter_fini (PangoEmojiIter *iter)\n{\n}\n\n#define PANGO_EMOJI_TYPE_IS_EMOJI(typ) ((typ) == PANGO_EMOJI_TYPE_EMOJI_EMOJI)\n\ngboolean\n_pango_emoji_iter_next (PangoEmojiIter *iter)\n{\n  PangoEmojiType current_emoji_type = PANGO_EMOJI_TYPE_INVALID;\n\n  if (iter->end == iter->text_end)\n    return FALSE;\n\n  iter->start = iter->end;\n\n  for (; iter->end < iter->text_end; iter->end = g_utf8_next_char (iter->end))\n    {\n      gunichar ch = g_utf8_get_char (iter->end);\n\n    /* Except at the beginning, ZWJ just carries over the emoji or neutral\n     * text type, VS15 & VS16 we just carry over as well, since we already\n     * resolved those through lookahead. Also, don't downgrade to text\n     * presentation for emoji that are part of a ZWJ sequence, example\n     * U+1F441 U+200D U+1F5E8, eye (text presentation) + ZWJ + left speech\n     * bubble, see below. */\n    if ((!(ch == kZeroWidthJoinerCharacter && !iter->is_emoji) &&\n\t ch != kVariationSelector15Character &&\n\t ch != kVariationSelector16Character &&\n\t ch != kCombiningEnclosingCircleBackslashCharacter &&\n\t !_pango_Is_Regional_Indicator(ch) &&\n\t !((ch == kLeftSpeechBubbleCharacter ||\n\t    ch == kRainbowCharacter ||\n\t    ch == kMaleSignCharacter ||\n\t    ch == kFemaleSignCharacter ||\n\t    ch == kStaffOfAesculapiusCharacter) &&\n\t   !iter->is_emoji)) ||\n\tcurrent_emoji_type == PANGO_EMOJI_TYPE_INVALID) {\n      current_emoji_type = _pango_get_emoji_type (ch);\n    }\n\n    if (g_utf8_next_char (iter->end) < iter->text_end) /* Optimize. */\n    {\n      gunichar peek_char = g_utf8_get_char (g_utf8_next_char (iter->end));\n\n      /* Variation Selectors */\n      if (current_emoji_type ==\n\t      PANGO_EMOJI_TYPE_EMOJI_EMOJI &&\n\t  peek_char == kVariationSelector15Character) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_TEXT;\n      }\n\n      if ((current_emoji_type ==\n\t       PANGO_EMOJI_TYPE_EMOJI_TEXT ||\n\t   _pango_Is_Emoji_Keycap_Base(ch)) &&\n\t  peek_char == kVariationSelector16Character) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      }\n\n      /* Combining characters Keycap... */\n      if (_pango_Is_Emoji_Keycap_Base(ch) &&\n\t  peek_char == kCombiningEnclosingKeycapCharacter) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      };\n\n      /* Regional indicators */\n      if (_pango_Is_Regional_Indicator(ch) &&\n\t  _pango_Is_Regional_Indicator(peek_char)) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      }\n\n      /* Upgrade text presentation emoji to emoji presentation when followed by\n       * ZWJ, Example U+1F441 U+200D U+1F5E8, eye + ZWJ + left speech bubble. */\n      if ((ch == kEyeCharacter ||\n\t   ch == kWavingWhiteFlagCharacter) &&\n\t  peek_char == kZeroWidthJoinerCharacter) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      }\n    }\n\n    if (iter->is_emoji == (gboolean) 2)\n      iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);\n    if (iter->is_emoji == PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type))\n    {\n      iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);\n      return TRUE;\n    }\n  }\n\n  iter->is_emoji = PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);\n\n  return TRUE;\n}\n\n\n/**********************************************************\n * End of code from Chromium\n **********************************************************/\n"], "fixing_code": ["/* Pango\n * pango-emoji.c: Emoji handling\n *\n * Copyright (C) 2017 Google, Inc.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n *\n * Implementation of pango_emoji_iter is derived from Chromium:\n *\n * https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/fonts/FontFallbackPriority.h\n * https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/text/CharacterEmoji.cpp\n * https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/fonts/SymbolsIterator.cpp\n *\n * // Copyright 2015 The Chromium Authors. All rights reserved.\n * // Use of this source code is governed by a BSD-style license that can be\n * // found in the LICENSE file.\n */\n\n#include \"config.h\"\n#include <stdlib.h>\n#include <string.h>\n\n#include \"pango-emoji-private.h\"\n#include \"pango-emoji-table.h\"\n\n\nstatic int\ninterval_compare (const void *key, const void *elt)\n{\n  gunichar c = GPOINTER_TO_UINT (key);\n  struct Interval *interval = (struct Interval *)elt;\n\n  if (c < interval->start)\n    return -1;\n  if (c > interval->end)\n    return +1;\n\n  return 0;\n}\n\n#define DEFINE_pango_Is_(name) \\\nstatic gboolean \\\n_pango_Is_##name (gunichar ch) \\\n{ \\\n  /* bsearch() is declared attribute(nonnull(1)) so we can't validly search \\\n   * for a NULL key */ \\\n  /* \\\n  if (G_UNLIKELY (ch == 0)) \\\n    return FALSE; \\\n   */ \\\n \\\n  if (bsearch (GUINT_TO_POINTER (ch), \\\n               _pango_##name##_table, \\\n               G_N_ELEMENTS (_pango_##name##_table), \\\n               sizeof _pango_##name##_table[0], \\\n\t       interval_compare)) \\\n    return TRUE; \\\n \\\n  return FALSE; \\\n}\n\nDEFINE_pango_Is_(Emoji)\nDEFINE_pango_Is_(Emoji_Presentation)\nDEFINE_pango_Is_(Emoji_Modifier)\nDEFINE_pango_Is_(Emoji_Modifier_Base)\n\n\nstatic gboolean\n_pango_Is_Emoji_Text_Default (gunichar ch)\n{\n  return _pango_Is_Emoji (ch) && !_pango_Is_Emoji_Presentation (ch);\n}\n\nstatic gboolean\n_pango_Is_Emoji_Emoji_Default (gunichar ch)\n{\n  return _pango_Is_Emoji_Presentation (ch);\n}\n\nstatic gboolean\n_pango_Is_Emoji_Keycap_Base (gunichar ch)\n{\n  return (ch >= '0' && ch <= '9') || ch == '#' || ch == '*';\n}\n\nstatic gboolean\n_pango_Is_Regional_Indicator (gunichar ch)\n{\n  return (ch >= 0x1F1E6 && ch <= 0x1F1FF);\n}\n\n\nconst gunichar kCombiningEnclosingCircleBackslashCharacter = 0x20E0;\nconst gunichar kCombiningEnclosingKeycapCharacter = 0x20E3;\nconst gunichar kEyeCharacter = 0x1F441;\nconst gunichar kFemaleSignCharacter = 0x2640;\nconst gunichar kLeftSpeechBubbleCharacter = 0x1F5E8;\nconst gunichar kMaleSignCharacter = 0x2642;\nconst gunichar kRainbowCharacter = 0x1F308;\nconst gunichar kStaffOfAesculapiusCharacter = 0x2695;\nconst gunichar kVariationSelector15Character = 0xFE0E;\nconst gunichar kVariationSelector16Character = 0xFE0F;\nconst gunichar kWavingWhiteFlagCharacter = 0x1F3F3;\nconst gunichar kZeroWidthJoinerCharacter = 0x200D;\n\n\ntypedef enum {\n  PANGO_EMOJI_TYPE_INVALID,\n  PANGO_EMOJI_TYPE_TEXT, /* For regular non-symbols text */\n  PANGO_EMOJI_TYPE_EMOJI_TEXT, /* For emoji in text presentaiton */\n  PANGO_EMOJI_TYPE_EMOJI_EMOJI /* For emoji in emoji presentation */\n} PangoEmojiType;\n\nstatic PangoEmojiType\n_pango_get_emoji_type (gunichar codepoint)\n{\n  /* Those should only be Emoji presentation as combinations of two. */\n  if (_pango_Is_Emoji_Keycap_Base (codepoint) ||\n      _pango_Is_Regional_Indicator (codepoint))\n    return PANGO_EMOJI_TYPE_TEXT;\n\n  if (codepoint == kCombiningEnclosingKeycapCharacter)\n    return PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n\n  if (_pango_Is_Emoji_Emoji_Default (codepoint) ||\n      _pango_Is_Emoji_Modifier_Base (codepoint) ||\n      _pango_Is_Emoji_Modifier (codepoint))\n    return PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n\n  if (_pango_Is_Emoji_Text_Default (codepoint))\n    return PANGO_EMOJI_TYPE_EMOJI_TEXT;\n\n  return PANGO_EMOJI_TYPE_TEXT;\n}\n\n\nPangoEmojiIter *\n_pango_emoji_iter_init (PangoEmojiIter *iter,\n\t\t\tconst char     *text,\n\t\t\tint             length)\n{\n  iter->text_start = text;\n  if (length >= 0)\n    iter->text_end = text + length;\n  else\n    iter->text_end = text + strlen (text);\n\n  iter->start = text;\n  iter->end = text;\n  iter->is_emoji = (gboolean) 2; /* HACK */\n\n  _pango_emoji_iter_next (iter);\n\n  return iter;\n}\n\nvoid\n_pango_emoji_iter_fini (PangoEmojiIter *iter)\n{\n}\n\n#define PANGO_EMOJI_TYPE_IS_EMOJI(typ) ((typ) == PANGO_EMOJI_TYPE_EMOJI_EMOJI)\n\ngboolean\n_pango_emoji_iter_next (PangoEmojiIter *iter)\n{\n  PangoEmojiType current_emoji_type = PANGO_EMOJI_TYPE_INVALID;\n\n  if (iter->end == iter->text_end)\n    return FALSE;\n\n  iter->start = iter->end;\n\n  for (; iter->end < iter->text_end; iter->end = g_utf8_next_char (iter->end))\n    {\n      gunichar ch = g_utf8_get_char (iter->end);\n\n    /* Except at the beginning, ZWJ just carries over the emoji or neutral\n     * text type, VS15 & VS16 we just carry over as well, since we already\n     * resolved those through lookahead. Also, don't downgrade to text\n     * presentation for emoji that are part of a ZWJ sequence, example\n     * U+1F441 U+200D U+1F5E8, eye (text presentation) + ZWJ + left speech\n     * bubble, see below. */\n    if ((!(ch == kZeroWidthJoinerCharacter && !iter->is_emoji) &&\n\t ch != kVariationSelector15Character &&\n\t ch != kVariationSelector16Character &&\n\t ch != kCombiningEnclosingCircleBackslashCharacter &&\n\t !_pango_Is_Regional_Indicator(ch) &&\n\t !((ch == kLeftSpeechBubbleCharacter ||\n\t    ch == kRainbowCharacter ||\n\t    ch == kMaleSignCharacter ||\n\t    ch == kFemaleSignCharacter ||\n\t    ch == kStaffOfAesculapiusCharacter) &&\n\t   !iter->is_emoji)) ||\n\tcurrent_emoji_type == PANGO_EMOJI_TYPE_INVALID) {\n      current_emoji_type = _pango_get_emoji_type (ch);\n    }\n\n    if (g_utf8_next_char (iter->end) < iter->text_end) /* Optimize. */\n    {\n      gunichar peek_char = g_utf8_get_char (g_utf8_next_char (iter->end));\n\n      /* Variation Selectors */\n      if (current_emoji_type ==\n\t      PANGO_EMOJI_TYPE_EMOJI_EMOJI &&\n\t  peek_char == kVariationSelector15Character) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_TEXT;\n      }\n\n      if ((current_emoji_type ==\n\t       PANGO_EMOJI_TYPE_EMOJI_TEXT ||\n\t   _pango_Is_Emoji_Keycap_Base(ch)) &&\n\t  peek_char == kVariationSelector16Character) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      }\n\n      /* Combining characters Keycap... */\n      if (_pango_Is_Emoji_Keycap_Base(ch) &&\n\t  peek_char == kCombiningEnclosingKeycapCharacter) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      };\n\n      /* Regional indicators */\n      if (_pango_Is_Regional_Indicator(ch) &&\n\t  _pango_Is_Regional_Indicator(peek_char)) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      }\n\n      /* Upgrade text presentation emoji to emoji presentation when followed by\n       * ZWJ, Example U+1F441 U+200D U+1F5E8, eye + ZWJ + left speech bubble. */\n      if ((ch == kEyeCharacter ||\n\t   ch == kWavingWhiteFlagCharacter) &&\n\t  peek_char == kZeroWidthJoinerCharacter) {\n\tcurrent_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;\n      }\n    }\n\n    if (iter->is_emoji == (gboolean) 2)\n      iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);\n    if (iter->is_emoji == PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type))\n    {\n      iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);\n\n      /* Make sure we make progress.  Weird sequences, like a VC15 followed\n       * by VC16, can trick us into stalling otherwise. */\n      if (iter->start == iter->end)\n        iter->end = g_utf8_next_char (iter->end);\n\n      return TRUE;\n    }\n  }\n\n  iter->is_emoji = PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);\n\n  return TRUE;\n}\n\n\n/**********************************************************\n * End of code from Chromium\n **********************************************************/\n"], "filenames": ["pango/pango-emoji.c"], "buggy_code_start_loc": [255], "buggy_code_end_loc": [255], "fixing_code_start_loc": [256], "fixing_code_end_loc": [262], "type": "CWE-119", "message": "libpango in Pango 1.40.8 through 1.42.3, as used in hexchat and other products, allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via crafted text with invalid Unicode sequences.", "other": {"cve": {"id": "CVE-2018-15120", "sourceIdentifier": "cve@mitre.org", "published": "2018-08-24T19:29:01.657", "lastModified": "2021-07-14T15:41:47.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "libpango in Pango 1.40.8 through 1.42.3, as used in hexchat and other products, allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via crafted text with invalid Unicode sequences."}, {"lang": "es", "value": "libpango en Pango, desde la versi\u00f3n 1.40.8 hasta la 1.42.3, tal y como se emplea en hexcat y otros productos, permite que atacantes remotos provoquen una denegaci\u00f3n de servicio (cierre inesperado de la aplicaci\u00f3n) o, posiblemente, cualquier otro tipo de problema mediante texto manipulado con secuencias Unicode inv\u00e1lidas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gnome:pango:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.40.8", "versionEndIncluding": "1.42.3", "matchCriteriaId": "F48D8C10-86A5-4E75-9438-40BE8BB1C6F8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}]}]}], "references": [{"url": "http://52.117.224.77/xfce4-pdos.webm", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/GNOME/pango/blob/1.42.4/NEWS", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/GNOME/pango/commit/71aaeaf020340412b8d012fe23a556c0420eda5f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://i.redd.it/v7p4n2ptu0s11.jpg", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://mail.gnome.org/archives/distributor-list/2018-August/msg00001.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201811-07", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3750-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/45263", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.exploit-db.com/exploits/45263/", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.ign.com/articles/2018/10/16/ps4s-are-reportedly-being-bricked-and-sony-is-working-on-a-fix", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.reddit.com/r/PS4/comments/9o5efg/message_bricking_console_megathread/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/GNOME/pango/commit/71aaeaf020340412b8d012fe23a556c0420eda5f"}}