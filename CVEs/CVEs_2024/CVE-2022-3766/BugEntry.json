{"buggy_code": ["<?php\n\n/**\n * This is the main public frontend page of phpMyFAQ. It detects the browser's\n * language, gets and sets all cookie, post and get information and includes\n * the templates we need and set all internal variables to the template\n * variables. That's all.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <php@larstiedemann.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2001-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2001-02-12\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap as AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso as AuthSso;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper as HelperCategory;\nuse phpMyFAQ\\Helper\\HttpHelper as HelperHttp;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Seo;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\Template\\TemplateHelper;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire __DIR__ . '/src/Bootstrap.php';\n\n//\n// HTTP Helper\n//\n$http = new HelperHttp();\n\n//\n// Get language (default: english)\n//\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\n$showCaptcha = Filter::filterInput(INPUT_GET, 'gen', FILTER_UNSAFE_RAW);\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode) && is_null($showCaptcha)) {\n    // Overwrite English strings with the ones we have in the current language,\n    // but don't include UTF-8 encoded files, these will break the captcha images\n    if (!file_exists('lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require_once 'lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//Load plurals support for selected language\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n/*\n * Initialize attachment factory\n */\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n\n//\n// Authenticate current user\n//\n$auth = $error = null;\n$loginVisibility = 'hidden';\n\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqaction = Filter::filterInput(INPUT_POST, 'faqloginaction', FILTER_UNSAFE_RAW);\n$rememberMe = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($rememberMe) && 'rememberMe' === $rememberMe) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n\n    if ($user->login($faqusername, $faqpassword)) {\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n            if (empty($action)) {\n                $action = $faqaction; // SSO logins don't have $faqaction\n            }\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'] . ' (' . $faqusername . ')';\n            $loginVisibility = '';\n            $action = 'password' === $action ? 'password' : 'login';\n        }\n    } else {\n        // error\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n        $loginVisibility = '';\n        $action = 'password' === $action ? 'password' : 'login';\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n//\n// Logout\n//\nif ($csrfChecked && 'logout' === $action && isset($auth)) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $action = 'main';\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        header('Location: ' . $ssoLogout);\n    } else {\n        header('Location: ' . $faqConfig->getDefaultUrl());\n    }\n}\n\n//\n// Get current user and group id - default: -1\n//\nif (!is_null($user) && $user instanceof CurrentUser) {\n    $currentUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentGroups = $user->perm->getUserGroups($currentUser);\n    } else {\n        $currentGroups = [-1];\n    }\n    if (0 == count($currentGroups)) {\n        $currentGroups = [-1];\n    }\n} else {\n    $currentUser = -1;\n    $currentGroups = [-1];\n}\n\n//\n// Use mbstring extension if available and when possible\n//\n$validMbStrings = ['ja', 'en', 'uni'];\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Found a session ID in _GET or _COOKIE?\n//\n$sidGet = Filter::filterInput(INPUT_GET, PMF_GET_KEY_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$sidCookie = Filter::filterInput(INPUT_COOKIE, Session::PMF_COOKIE_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n\n// Note: do not track internal calls\n$internal = false;\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $internal = (strpos($_SERVER['HTTP_USER_AGENT'], 'phpMyFAQ%2F') === 0);\n}\nif (!$internal) {\n    if (is_null($sidGet) && is_null($sidCookie)) {\n        // Create a per-site unique SID\n        try {\n            $faqSession->userTracking('new_session', 0);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } elseif (!is_null($sidCookie)) {\n        try {\n            $faqSession->checkSessionId($sidCookie, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } else {\n        try {\n            $faqSession->checkSessionId($sidGet, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    }\n}\n\n//\n// Is user tracking activated?\n//\n$sids = '';\nif ($faqConfig->get('main.enableUserTracking')) {\n    if ($faqSession->getCurrentSessionId() > 0) {\n        $faqSession->setCookie(Session::PMF_COOKIE_NAME_SESSIONID, $faqSession->getCurrentSessionId());\n        if (is_null($sidCookie)) {\n            $sids = sprintf('sid=%d&amp;lang=%s&amp;', $faqSession->getCurrentSessionId(), $faqLangCode);\n        }\n    } elseif (is_null($sidGet) || is_null($sidCookie)) {\n        if (is_null($sidCookie)) {\n            if (!is_null($sidGet)) {\n                $sids = sprintf('sid=%d&amp;lang=%s&amp;', $sidGet, $faqLangCode);\n            }\n        }\n    }\n} elseif (\n    !$faqSession->setCookie(\n        Session::PMF_COOKIE_NAME_SESSIONID,\n        $faqSession->getCurrentSessionId(),\n        $_SERVER['REQUEST_TIME'] + PMF_LANGUAGE_EXPIRED_TIME\n    )\n) {\n    $sids = sprintf('lang=%s&amp;', $faqLangCode);\n}\n\n//\n// Found a article language?\n//\n$lang = Filter::filterInput(INPUT_POST, 'artlang', FILTER_UNSAFE_RAW);\nif (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n    $lang = Filter::filterInput(INPUT_GET, 'artlang', FILTER_UNSAFE_RAW);\n    if (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n        $lang = $faqLangCode;\n    }\n}\n\n//\n// Sanitize language string\n//\nif (!Language::isASupportedLanguage($lang)) {\n    $lang = $faqConfig->getDefaultLanguage();\n}\n\n//\n// Found a search string?\n//\n$searchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Category object\n//\n$category = new Category($faqConfig, $currentGroups, true);\n$category->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Tags object\n//\n$oTag = new Tags($faqConfig);\n\n//\n// Create URL\n//\n$faqSystem = new System();\n$faqLink = new Link($faqSystem->getSystemUri($faqConfig), $faqConfig);\n$currentPageUrl = $faqLink->getCurrentUrl();\n\n//\n// Found a record ID?\n//\n$id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\nif (!is_null($id)) {\n    $faq->getRecord($id);\n    $title = ' - ' . $faq->faqRecord['title'];\n    $keywords = ',' . $faq->faqRecord['keywords'];\n    $metaDescription = str_replace('\"', '', strip_tags($faq->getRecordPreview($id)));\n    $url = sprintf(\n        '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $sids,\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $faqLink = new Link($url, $faqConfig);\n    $faqLink->itemTitle = $faq->faqRecord['title'];\n    $currentPageUrl = $faqLink->toString(true);\n} else {\n    $id = '';\n    $title = ' - powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $metaDescription = str_replace('\"', '', $faqConfig->get('main.metaDescription'));\n}\n\n//\n// found a solution ID?\n//\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\nif (!is_null($solutionId)) {\n    $title = ' -  powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $faqData = $faq->getIdFromSolutionId($solutionId);\n    if (is_array($faqData)) {\n        $id = $faqData['id'];\n        $lang = $faqData['lang'];\n        $title = ' - ' . $faq->getRecordTitle($id);\n        $keywords = ',' . $faq->getRecordKeywords($id);\n        $metaDescription = str_replace('\"', '', Utils::makeShorterText(strip_tags($faqData['content']), 12));\n        $url = sprintf(\n            '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n            $faqConfig->getDefaultUrl(),\n            $sids,\n            $faqData['category_id'],\n            $id,\n            $lang\n        );\n        $faqLink = new Link($url, $faqConfig);\n        $faqLink->itemTitle = $faqData['question'];\n        $currentPageUrl = $faqLink->toString(true);\n    }\n}\n\n//\n// Handle the Tagging ID\n//\n$tag_id = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\nif (!is_null($tag_id)) {\n    $title = ' - ' . $oTag->getTagNameById($tag_id);\n    $keywords = '';\n}\n\n//\n// Handle the SiteMap\n//\n$letter = Filter::filterInput(INPUT_GET, 'letter', FILTER_UNSAFE_RAW);\nif (!is_null($letter) && (1 == Strings::strlen($letter))) {\n    $title = ' - ' . $letter . '...';\n    $keywords = $letter;\n}\n\n//\n// Found a category ID?\n//\n$cat = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);\n$categoryFromId = -1;\nif (is_numeric($id) && $id > 0) {\n    $categoryFromId = $category->getCategoryIdFromFaq($id);\n}\nif ($categoryFromId != -1 && $cat == 0) {\n    $cat = $categoryFromId;\n}\n$category->transform(0);\n$category->collapseAll();\nif ($cat != 0) {\n    $category->expandTo($cat);\n}\nif (isset($cat) && ($cat != 0) && ($id == '') && isset($category->categoryName[$cat]['name'])) {\n    $title = ' - ' . $category->categoryName[$cat]['name'];\n    $metaDescription = $category->categoryName[$cat]['description'];\n}\n\n//\n// Found an action request?\n//\nif (!isset(Link::$allowedActionParameters[$action])) {\n    $action = 'main';\n}\n\n//\n// Select the template for the requested page\n//\nif ($action !== 'main') {\n    $includeTemplate = $action . '.html';\n    $includePhp = $action . '.php';\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n} else {\n    if (isset($solutionId) && is_numeric($solutionId)) {\n        // show the record with the solution ID\n        $includeTemplate = 'faq.html';\n        $includePhp = 'faq.php';\n    } else {\n        $includeTemplate = 'startpage.html';\n        $includePhp = 'startpage.php';\n    }\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n}\n\n//\n// Set sidebar column\n//\nif (($action === 'faq') || ($action === 'show') || ($action === 'main')) {\n    $sidebarTemplate = 'sidebar-tagcloud.html';\n} else {\n    $sidebarTemplate = 'sidebar-empty.html';\n}\n\n//\n// Check if FAQ should be secured\n//\nif ($faqConfig->get('security.enableLoginOnly')) {\n    if ($auth) {\n        $indexSet = 'index.html';\n    } else {\n        switch ($action) {\n            case 'register':\n            case 'thankyou':\n                $indexSet = 'new-user.page.html';\n                break;\n            case 'password':\n                $indexSet = 'password.page.html';\n                break;\n            default:\n                $indexSet = 'login.page.html';\n                break;\n        }\n    }\n} else {\n    $indexSet = 'index.html';\n}\n\n//\n// phpMyFAQ installation is in maintenance mode\n//\nif ($faqConfig->get('main.maintenanceMode')) {\n    $indexSet = 'maintenance.page.html';\n}\n\n//\n// Load template files and set template variables\n//\n$template = new Template(\n    [\n        'index' => $indexSet,\n        'sidebar' => $sidebarTemplate,\n        'mainPageContent' => $includeTemplate,\n    ],\n    new TemplateHelper($faqConfig),\n    $faqConfig->get('main.templateSet')\n);\n\n$categoryRelation = new CategoryRelation($faqConfig);\n\n$categoryHelper = new HelperCategory();\n$categoryHelper->setCategory($category);\n$categoryHelper->setConfiguration($faqConfig);\n$categoryHelper->setCategoryRelation($categoryRelation);\n\n$keywordsArray = array_merge(explode(',', $keywords), explode(',', $faqConfig->get('main.metaKeywords')));\n$keywordsArray = array_filter($keywordsArray, 'strlen');\nshuffle($keywordsArray);\n$keywords = implode(',', $keywordsArray);\n\nif (!is_null($error)) {\n    $loginMessage = '<p class=\"error\">' . $error . '</p>';\n} else {\n    $loginMessage = '';\n}\n\n$faqSeo = new Seo($faqConfig);\n\n$tplMainPage = [\n    'msgLoginUser' => $user->isLoggedIn() ? $user->getUserData('display_name') : $PMF_LANG['msgLoginUser'],\n    'title' => Strings::htmlspecialchars($faqConfig->getTitle() . $title),\n    'baseHref' => $faqSystem->getSystemUri($faqConfig),\n    'version' => $faqConfig->getVersion(),\n    'header' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle())),\n    'metaTitle' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle() . $title)),\n    'metaDescription' => Strings::htmlspecialchars($metaDescription ?? ''),\n    'metaKeywords' => Strings::htmlspecialchars($keywords),\n    'metaPublisher' => $faqConfig->get('main.metaPublisher'),\n    'metaLanguage' => $PMF_LANG['metaLanguage'],\n    'metaRobots' => $faqSeo->getMetaRobots($action),\n    'phpmyfaqversion' => $faqConfig->getVersion(),\n    'stylesheet' => $PMF_LANG['dir'] == 'rtl' ? 'style.rtl' : 'style',\n    'currentPageUrl' => $currentPageUrl,\n    'action' => $action,\n    'dir' => $PMF_LANG['dir'],\n    'writeSendAdress' => '?' . $sids . 'action=search',\n    'searchBox' => $PMF_LANG['msgSearch'],\n    'searchTerm' => Strings::htmlspecialchars($searchTerm),\n    'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n    'headerCategories' => $PMF_LANG['msgFullCategories'],\n    'msgCategory' => $PMF_LANG['msgCategory'],\n    'showCategories' => $categoryHelper->renderNavigation($cat),\n    'topCategories' => $categoryHelper->renderMainCategories(),\n    'msgExportAllFaqs' => $PMF_LANG['msgExportAllFaqs'],\n    'languageBox' => $PMF_LANG['msgLanguageSubmit'],\n    'renderUri' => $renderUri,\n    'switchLanguages' => LanguageHelper::renderSelectLanguage($faqLangCode, true),\n    'copyright' => 'powered with \u2764\ufe0f and \u2615\ufe0f by <a href=\"https://www.phpmyfaq.de\" target=\"_blank\">phpMyFAQ</a> ' .\n        $faqConfig->getVersion(),\n    'registerUser' => $faqConfig->get('security.enableRegistration') ? '<a href=\"?action=register\">' .\n        $PMF_LANG['msgRegistration'] . '</a>' : '',\n    'sendPassword' => '<a href=\"?action=password\">' . $PMF_LANG['lostPassword'] . '</a>',\n    'msgFullName' => $PMF_LANG['ad_user_loggedin'] . $user->getLogin(),\n    'msgLoginName' => $user->getUserData('display_name'),\n    'loginHeader' => $PMF_LANG['msgLoginUser'],\n    'loginMessage' => $loginMessage,\n    'writeLoginPath' => $faqSystem->getSystemUri($faqConfig) . '?' . Filter::getFilteredQueryString(),\n    'faqloginaction' => $action,\n    'login' => $PMF_LANG['ad_auth_ok'],\n    'username' => $PMF_LANG['ad_auth_user'],\n    'password' => $PMF_LANG['ad_auth_passwd'],\n    'rememberMe' => $PMF_LANG['rememberMe'],\n    'headerChangePassword' => $PMF_LANG['ad_passwd_cop'],\n    'msgUsername' => $PMF_LANG['ad_auth_user'],\n    'msgEmail' => $PMF_LANG['ad_entry_email'],\n    'msgSubmit' => $PMF_LANG['msgNewContentSubmit'],\n    'loginPageMessage' => $PMF_LANG['loginPageMessage'],\n    'msgAdvancedSearch' => $PMF_LANG['msgAdvancedSearch']\n];\n\n$template->parseBlock(\n    'index',\n    'categoryListSection',\n    [\n        'showCategories' => $categoryHelper->renderNavigation($cat),\n        'categoryDropDown' => $categoryHelper->renderCategoryDropDown(),\n    ]\n);\n\nif ('main' == $action || 'show' == $action) {\n    $template->parseBlock(\n        'index',\n        'globalSearchBox',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchBox' => $PMF_LANG['msgSearch'],\n            'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n            'msgSearch' => sprintf(\n                '<a class=\"help\" href=\"./index.php?action=search\">%s</a>',\n                $PMF_LANG['msgAdvancedSearch']\n            ),\n        ]\n    );\n}\n\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"./search.html\">' . $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"' . $faqSystem->getSystemUri($faqConfig) . 'addcontent.html\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"./ask.html\">' . $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"./open-questions.html\">' . $PMF_LANG['msgOpenQuestions'] .\n            '</a>',\n        'msgContact' => '<a href=\"./contact.html\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"./glossary.html\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'backToHome' => '<a href=\"./index.html\">' . $PMF_LANG['msgHome'] . '</a>',\n        'allCategories' => '<a class=\"nav-link\" href=\"./showcat.html\">' . $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"./overview.html\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'showSitemap' => '<a href=\"./sitemap/A/' . $faqLangCode . '.html\">' . $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"./request-removal.html\">' . $PMF_LANG['msgUserRemoval'] . '</a>'\n    ];\n} else {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=search\">' .\n            $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=add&cat=' . $cat . '\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=ask&category_id=' . $cat . '\">' .\n            $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=open-questions\">' .\n            $PMF_LANG['msgOpenQuestions'] . '</a>',\n        'msgContact' => '<a href=\"index.php?' . $sids . 'action=contact\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"index.php?' . $sids . 'action=glossary\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'allCategories' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=show\">' .\n            $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'backToHome' => '<a href=\"index.php?' . $sids . '\">' . $PMF_LANG['msgHome'] . '</a>',\n        'showSitemap' => '<a href=\"index.php?' . $sids . 'action=sitemap&amp;lang=' . $faqLangCode . '\">' .\n            $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"index.php?' . $sids . 'action=request-removal\">' . $PMF_LANG['msgUserRemoval'] .\n            '</a>',\n    ];\n}\n\n$tplNavigation['faqHome'] = $faqConfig->getDefaultUrl();\n$tplNavigation['activeSearch'] = ('search' == $action) ? 'active' : '';\n$tplNavigation['activeAllCategories'] = ('show' == $action) ? 'active' : '';\n$tplNavigation['activeAddContent'] = ('add' == $action) ? 'active' : '';\n$tplNavigation['activeAddQuestion'] = ('ask' == $action) ? 'active' : '';\n$tplNavigation['activeOpenQuestions'] = ('open-questions' == $action) ? 'active' : '';\n$tplNavigation['activeLogin'] = ('login' == $action) ? 'active' : '';\n\n//\n// Show login box or logged-in user information\n//\nif (isset($auth)) {\n    if ($user->perm->hasPermission($user->getUserId(), 'viewadminlink') || $user->isSuperAdmin()) {\n        $adminSection = sprintf(\n            '<a class=\"dropdown-item\" href=\"./admin/index.php\">%s</a>',\n            $PMF_LANG['adminSection']\n        );\n    } else {\n        $adminSection = '';\n    }\n\n    $template->parseBlock(\n        'index',\n        'userloggedIn',\n        [\n            'msgUserControl' => $adminSection,\n            'msgLoginName' => $user->getUserData('display_name'), // @deprecated\n            'msgUserControlDropDown' => '<a class=\"dropdown-item\" href=\"?action=ucp\">' .\n                $PMF_LANG['headerUserControlPanel'] . '</a>',\n            'msgUserRemoval' => '<a class=\"dropdown-item\" href=\"?action=request-removal\">' .\n                $PMF_LANG['ad_menu_RequestRemove'] . '</a>',\n            'msgLogoutUser' => sprintf(\n                '<a class=\"dropdown-item\" href=\"?action=logout&csrf=%s\">%s</a>',\n                $user->getCsrfTokenFromSession(),\n                $PMF_LANG['ad_menu_logout'],\n            ),\n            'activeUserControl' => ('ucp' == $action) ? 'active' : ''\n        ]\n    );\n} else {\n    if ($faqConfig->get('main.maintenanceMode')) {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"./admin/\">%s</a>';\n    } else {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"?action=login\">%s</a>';\n    }\n    $template->parseBlock(\n        'index',\n        'notLoggedIn',\n        [\n            'msgRegisterUser' => $faqConfig->get('security.enableRegistration')\n                ?\n                '<a class=\"dropdown-item\" href=\"?action=register\">' . $PMF_LANG['msgRegisterUser'] . '</a>'\n                :\n                '',\n            'msgLoginUser' => sprintf($msgLoginUser, $PMF_LANG['msgLoginUser']),\n            'activeRegister' => ('register' == $action) ? 'active' : '',\n            'activeLogin' => ('login' == $action) ? 'active' : '',\n        ]\n    );\n}\n\n$template->parse(\n    'sidebar',\n    [\n        'writeTagCloudHeader' => $PMF_LANG['msg_tags'],\n        'writeTags' => $oTag->renderTagCloud(),\n        'msgAllCatArticles' => $PMF_LANG['msgAllCatArticles'],\n        'allCatArticles' => $faq->getRecordsWithoutPagingByCategoryId($cat)\n    ]\n);\n\nif (DEBUG) {\n    $template->parseBlock(\n        'index',\n        'debugMode',\n        [\n            'debugQueries' => $faqConfig->getDb()->log(),\n        ]\n    );\n}\n\n//\n// Redirect old \"action=artikel\" URLs via 301 to new location\n//\nif ('artikel' === $action) {\n    $url = sprintf(\n        '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $http->setStatus(301);\n    $http->redirect($url);\n    exit();\n}\n\n//\n// Include requested PHP file\n//\nrequire $includePhp;\n\n//\n// Get main template, set main variables\n//\n$template->parse('index', array_merge($tplMainPage, $tplNavigation));\n$template->merge('sidebar', 'index');\n$template->merge('mainPageContent', 'index');\n\n//\n// Send headers and print template\n//\n$http->setConfiguration($faqConfig);\n$http->setContentType('text/html');\n$http->addHeader();\n$http->startCompression();\n\n//\n// Check for 404 HTTP status code\n//\nif ($http->getStatusCode() === 404 || $action === '404') {\n    $template = new Template(\n        [\n            'index' => '404.html',\n            'mainPageContent' => ''\n        ],\n        new TemplateHelper($faqConfig),\n        $faqConfig->get('main.templateSet')\n    );\n    $template->parse('index', array_merge($tplMainPage, $tplNavigation));\n}\n\n$template->render();\n\n$faqConfig->getDb()->close();\n", "<?php\n\n/**\n * The fulltext search page.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2002-09-16\n */\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\SearchHelper;\nuse phpMyFAQ\\Helper\\TagsHelper;\nuse phpMyFAQ\\Pagination;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\User\\CurrentUser;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\ntry {\n    $faqSession->userTracking('fulltext_search', 0);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser);\n$faq->setGroups($currentGroups);\n\n// Get possible user input\n$inputLanguage = Filter::filterInput(INPUT_GET, 'langs', FILTER_UNSAFE_RAW);\n$inputCategory = Filter::filterInput(INPUT_GET, 'searchcategory', FILTER_VALIDATE_INT, '%');\n$inputSearchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n$inputTag = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_UNSAFE_RAW, '');\n$inputTag = str_replace(' ', '', $inputTag);\n$inputTag = str_replace(',,', ',', $inputTag);\n\n$searchTerm = Filter::filterInput(INPUT_POST, 'search', FILTER_UNSAFE_RAW);\n$page = Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n\n// Search only on current language (default)\nif (!is_null($inputLanguage)) {\n    $allLanguages = true;\n    $languages = '&amp;langs=all';\n} else {\n    $allLanguages = false;\n    $languages = '';\n}\n\n// HACK: (re)evaluate the Entity object w/o passing the user language\n//       so the result set of a Search will have the Entity Path\n//       for any of the multi language faq records and the Entity list\n//       on the left pane will not be affected\nif ($allLanguages) {\n    $category = new Category($faqConfig);\n    $category->transform(0);\n}\n\nif (is_null($user)) {\n    $user = new CurrentUser($faqConfig);\n}\n\n$faqSearch = new Search($faqConfig);\n$faqPermission = new FaqPermission($faqConfig);\n$faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n$tagging = new Tags($faqConfig);\n$tagHelper = new TagsHelper();\n$tagSearch = false;\n\n//\n// Handle the Tagging ID\n//\nif (!is_null($inputTag) && '' !== $inputTag) {\n    $tagSearch = true;\n    $tags = [];\n    $tagIds = explode(',', $inputTag);\n\n    $tagHelper->setTaggingIds($tagIds);\n\n    foreach ($tagIds as $tagId) {\n        if (!isset($tags[$tagId])) {\n            $tags[$tagId] = $tagging->getTagNameById($tagId);\n        }\n    }\n\n    $recordIds = $tagging->getFaqsByIntersectionTags($tags);\n\n    if (0 === count($recordIds)) {\n        $searchResult = '';\n    } else {\n        $relatedTags = [];\n\n        foreach ($recordIds as $recordId) {\n            $resultTags = $tagging->getAllTagsById($recordId);\n            foreach ($resultTags as $resultTagId => $resultTagName) {\n                if (isset($tags[$resultTagId])) {\n                    // if the given tag is in the search term we don't want to list it\n                    continue;\n                }\n\n                if (isset($relatedTags[$resultTagId])) {\n                    ++$relatedTags[$resultTagId];\n                } else {\n                    $relatedTags[$resultTagId] = 1;\n                }\n            }\n        }\n\n        uasort($relatedTags, function ($a, $b) {\n            return ($b - $a);\n        });\n        $numTags = 0;\n        $relTags = '';\n\n        foreach ($relatedTags as $tagId => $relevance) {\n            $relTags .= $tagHelper->renderRelatedTag((int)$tagId, $tagging->getTagNameById($tagId), $relevance);\n            if ($numTags++ > 20) {\n                break;\n            }\n        }\n        $searchResult = $faq->renderRecordsByFaqIds($recordIds);\n    }\n} else {\n    $searchResult = '';\n}\n\n//\n// Handle the full text search stuff\n//\nif (!is_null($inputSearchTerm) || !is_null($searchTerm)) {\n    if (!is_null($inputSearchTerm)) {\n        $inputSearchTerm = $faqConfig->getDb()->escape(strip_tags($inputSearchTerm));\n    }\n    if (!is_null($searchTerm)) {\n        $inputSearchTerm = $faqConfig->getDb()->escape(strip_tags($searchTerm));\n    }\n\n    $faqSearch->setCategory($category);\n    $faqSearch->setCategoryId((int) $inputCategory);\n\n    $searchResults = $faqSearch->search($inputSearchTerm, $allLanguages);\n\n    foreach ($searchResults as $faqKey => $faqValue) {\n        $checkedFaq = $faq->getRecordResult($faqValue->id, $faqValue->lang);\n        if (0 === $checkedFaq->num_rows) {\n            unset($searchResults[$faqKey]);\n        }\n    }\n\n    $faqSearchResult->reviewResultSet($searchResults);\n\n    $inputSearchTerm = stripslashes($inputSearchTerm);\n    try {\n        $faqSearch->logSearchTerm($inputSearchTerm);\n    } catch (Exception $e) {\n        // @todo handle exception\n    }\n}\n\n// Change a little bit the $searchCategory value;\n$inputCategory = ('%' == $inputCategory) ? 0 : $inputCategory;\n\ntry {\n    $faqSession->userTracking('fulltext_search', $inputSearchTerm);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\nif (\n    is_numeric(\n        $inputSearchTerm\n    ) && PMF_SOLUTION_ID_START_VALUE <= $inputSearchTerm && 0 < $faqSearchResult->getNumberOfResults(\n    ) && $faqConfig->get('search.searchForSolutionId')\n) {\n    if ($faqConfig->get('main.enableRewriteRules')) {\n        $http->redirect($faqConfig->getDefaultUrl() . 'solution_id_' . $inputSearchTerm . '.html');\n    } else {\n        $http->redirect($faqConfig->getDefaultUrl() . 'index.php?solution_id=' . $inputSearchTerm);\n    }\n    exit();\n}\n\n$category->buildCategoryTree();\n\n$mostPopularSearchData = $faqSearch->getMostPopularSearches($faqConfig->get('search.numberSearchTerms'));\n\n// Set base URL scheme\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $baseUrl = sprintf(\n        '%ssearch.html?search=%s&amp;seite=%d%s&amp;searchcategory=%d',\n        $faqConfig->getDefaultUrl(),\n        urlencode($inputSearchTerm),\n        $page,\n        $languages,\n        $inputCategory\n    );\n} else {\n    $baseUrl = sprintf(\n        '%s?%saction=search&amp;search=%s&amp;seite=%d%s&amp;searchcategory=%d',\n        $faqConfig->getDefaultUrl(),\n        empty($sids) ? '' : 'sids=' . $sids . '&amp;',\n        urlencode($inputSearchTerm),\n        $page,\n        $languages,\n        $inputCategory\n    );\n}\n\n// Pagination options\n$options = [\n    'baseUrl' => $baseUrl,\n    'total' => $faqSearchResult->getNumberOfResults(),\n    'perPage' => $faqConfig->get('records.numberOfRecordsPerPage'),\n    'pageParamName' => 'seite',\n    'layoutTpl' => '<ul class=\"pagination justify-content-center\">{LAYOUT_CONTENT}</ul>',\n];\n\n$faqPagination = new Pagination($faqConfig, $options);\n$categoryHelper = new CategoryHelper();\n$categoryHelper->setCategory($category);\n\n$searchHelper = new SearchHelper($faqConfig);\nif (!is_null($inputSearchTerm)) {\n    $searchHelper->setSearchTerm($inputSearchTerm);\n}\n$searchHelper->setCategory($category);\n$searchHelper->setPagination($faqPagination);\n$searchHelper->setPlurals($plr);\n$searchHelper->setSessionId($sids);\n\nif ('' == $searchResult && !is_null($inputSearchTerm)) {\n    try {\n        $searchResult = $searchHelper->renderSearchResult($faqSearchResult, $page);\n    } catch (Exception $e) {\n        // @todo handle exception\n    }\n}\n\nif ($tagSearch) {\n    $template->parseBlock(\n        'mainPageContent',\n        'searchTagsSection',\n        [\n            'searchTags' => $tagHelper->renderTagList($tags),\n        ]\n    );\n    $template->parseBlock(\n        'mainPageContent',\n        'relatedTags',\n        [\n            'relatedTagsHeader' => $PMF_LANG['msgRelatedTags'],\n            'relatedTags' => $relTags,\n        ]\n    );\n} else {\n    if ('' === $searchTerm) {\n        $template->parseBlock(\n            'mainPageContent',\n            'tagListSection',\n            [\n                'msgTags' => $PMF_LANG['msgPopularTags'],\n                'tagList' => $tagging->renderPopularTags(0),\n            ]\n        );\n    }\n\n    $template->parseBlock(\n        'mainPageContent',\n        'searchBoxSection',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchString' => Strings::htmlspecialchars($inputSearchTerm, ENT_QUOTES, 'utf-8'),\n            'searchOnAllLanguages' => $PMF_LANG['msgSearchOnAllLanguages'],\n            'checkedAllLanguages' => $allLanguages ? ' checked' : '',\n            'selectCategories' => $PMF_LANG['msgSelectCategories'],\n            'allCategories' => $PMF_LANG['msgAllCategories'],\n            'renderCategoryOptions' => $categoryHelper->renderOptions($inputCategory),\n            'msgSearch' => $PMF_LANG['msgSearch']\n        ]\n    );\n\n    $template->parseBlock(\n        'mainPageContent',\n        'popularSearchesSection',\n        [\n            'msgMostPopularSearches' => $PMF_LANG['msgMostPopularSearches'],\n            'printMostPopularSearches' => $searchHelper->renderMostPopularSearches($mostPopularSearchData)\n        ]\n    );\n}\n\n$template->parse(\n    'mainPageContent',\n    [\n        'pageHeader' => ($tagSearch ? $PMF_LANG['msgTagSearch'] : $PMF_LANG['msgAdvancedSearch']),\n        'msgAdvancedSearch' => ($tagSearch ? $PMF_LANG['msgTagSearch'] : $PMF_LANG['msgAdvancedSearch']),\n        'msgSearchWord' => $PMF_LANG['msgSearchWord'],\n        'renderSearchResults' => $searchResult,\n        'writeSendAdress' => '?' . $sids . 'action=search',\n        'searchString' => Strings::htmlspecialchars($inputSearchTerm, ENT_QUOTES),\n        'searchOnAllLanguages' => $PMF_LANG['msgSearchOnAllLanguages'],\n        'checkedAllLanguages' => $allLanguages ? ' checked' : '',\n        'selectCategories' => $PMF_LANG['msgSelectCategories'],\n        'allCategories' => $PMF_LANG['msgAllCategories'],\n        'renderCategoryOptions' => $categoryHelper->renderOptions($inputCategory),\n        'msgSearch' => $PMF_LANG['msgSearch'],\n        'msgMostPopularSearches' => $PMF_LANG['msgMostPopularSearches'],\n        'printMostPopularSearches' => $searchHelper->renderMostPopularSearches($mostPopularSearchData)\n    ]\n);\n", "<?php\n// phpcs:ignoreFile\n\n/**\n * The main string wrapper class.\n *\n * The class uses mbstring extension if available. It's strongly recommended\n * to use and extend this class instead of using direct string functions. Doing so\n * you guarantees your code is upwards compatible with UTF-8 improvements. All\n * the string methods behaviour is identical to that of the same named\n * single byte string functions.\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Anatoliy Belsky <ab@php.net>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-06\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Strings\\Mbstring;\nuse phpMyFAQ\\Strings\\StringBasic;\n\n/**\n * Class Strings\n *\n * @package phpMyFAQ\n */\nclass Strings\n{\n    /**\n     * Instance.\n     *\n     * @var Mbstring|StringBasic|null\n     */\n    private static $instance = null;\n\n    /**\n     * Constructor.\n     */\n    final private function __construct()\n    {\n    }\n\n    /**\n     * Init.\n     *\n     * @param string $language Language\n     */\n    public static function init(string $language = 'en'): void\n    {\n        if (!self::$instance) {\n            if (extension_loaded('mbstring') && function_exists('mb_regex_encoding')) {\n                self::$instance = Mbstring::getInstance($language);\n            } else {\n                self::$instance = StringBasic::getInstance($language);\n            }\n        }\n    }\n\n    /**\n     * Get current encoding.\n     *\n     * @return string\n     */\n    public static function getEncoding(): string\n    {\n        return self::$instance->getEncoding();\n    }\n\n    /**\n     * Get string character count.\n     *\n     * @param string $str String\n     * @return int\n     */\n    public static function strlen(string $str): int\n    {\n        return self::$instance->strlen($str);\n    }\n\n    /**\n     * Get a part of string.\n     *\n     * @param string $string String\n     * @param int $start Start\n     * @param int|null $length Length\n     * @return string\n     */\n    public static function substr(string $string, int $start, $length = 0): string\n    {\n        return self::$instance->substr($string, $start, $length);\n    }\n\n    /**\n     * Get position of the first occurrence of a string.\n     *\n     * @param string $haystack Haystack\n     * @param string $needle Needle\n     * @param int    $offset Offset\n     * @return int\n     */\n    public static function strpos(string $haystack, string $needle, $offset = 0): int\n    {\n        return self::$instance->strpos($haystack, $needle, $offset);\n    }\n\n    /**\n     * Make a string lower case.\n     *\n     * @param string $str String\n     * @return string\n     */\n    public static function strtolower(string $str): string\n    {\n        return self::$instance->strtolower($str);\n    }\n\n    /**\n     * Make a string upper case.\n     *\n     * @param string $str String\n     * @return string\n     */\n    public static function strtoupper(string $str): string\n    {\n        return self::$instance->strtoupper($str);\n    }\n\n    /**\n     * Get occurrence of a string within another.\n     *\n     * @param string $haystack Haystack\n     * @param string $needle Needle\n     * @param bool   $part Part\n     * @return string|false\n     */\n    public static function strstr(string $haystack, string $needle, $part = false)\n    {\n        return self::$instance->strstr($haystack, $needle, $part);\n    }\n\n    /**\n     * Set current encoding.\n     *\n     * @param string $encoding\n     */\n    public static function setEncoding(string $encoding): void\n    {\n        self::$instance->setEncoding($encoding);\n    }\n\n    /**\n     * Count substring occurrences.\n     *\n     * @param string $haystack\n     * @param string $needle\n     * @return int\n     */\n    public static function substr_count(string $haystack, string $needle): int // phpcs:ignore\n    {\n        return self::$instance->substr_count($haystack, $needle);\n    }\n\n    /**\n     * Find position of last occurrence of a char in a string.\n     *\n     * @param string $haystack\n     * @param string $needle\n     * @param int    $offset\n     * @return int\n     */\n    public static function strrpos(string $haystack, string $needle, $offset = 0): int\n    {\n        return self::$instance->strrpos($haystack, $needle, $offset);\n    }\n\n    /**\n     * Match a regexp.\n     *\n     * @param string $pattern\n     * @param string $subject\n     * @param null   $matches\n     * @param int    $flags\n     * @param int    $offset\n     * @return int\n     */\n    public static function preg_match(\n        string $pattern,\n        string $subject,\n        &$matches = null,\n        $flags = 0,\n        $offset = 0\n    ): int // phpcs:ignore\n    {\n        return self::$instance->preg_match($pattern, $subject, $matches, $flags, $offset);\n    }\n\n    /**\n     * Match a regexp globally.\n     *\n     * @param string $pattern\n     * @param string $subject\n     * @param null   $matches\n     * @param int    $flags\n     * @param int    $offset\n     * @return int\n     */\n    public static function preg_match_all(\n        string $pattern,\n        string $subject,\n        &$matches = null,\n        $flags = 0,\n        $offset = 0\n    ): int // phpcs:ignore\n    {\n        return self::$instance->preg_match_all($pattern, $subject, $matches, $flags, $offset);\n    }\n\n    /**\n     * Split string by a regexp.\n     *\n     * @param string $pattern\n     * @param string $subject\n     * @param int    $limit\n     * @param int    $flags\n     * @return string[]|array|false\n     */\n    public static function preg_split(string $pattern, string $subject, $limit = -1, $flags = 0) // phpcs:ignore\n    {\n        return self::$instance->preg_split($pattern, $subject, $limit, $flags);\n    }\n\n    /**\n     * Search and replace by a regexp using a callback.\n     *\n     * @param string $pattern\n     * @param callable $callback\n     * @param string|string[] $subject\n     * @param int $limit\n     * @param int $count\n     * @return string|string[]\n     */\n    public static function preg_replace_callback(\n        string $pattern,\n        callable $callback,\n        $subject,\n        $limit = -1,\n        &$count = 0\n    ) {\n        return self::$instance->preg_replace_callback($pattern, $callback, $subject, $limit, $count);\n    }\n\n    /**\n     * Search and replace by a regexp.\n     *\n     * @param string|string[] $pattern\n     * @param string|string[] $replacement\n     * @param string|string[] $subject\n     * @param int $limit\n     * @param int $count\n     * @return string|string[]|null\n     */\n    public static function preg_replace($pattern, $replacement, $subject, $limit = -1, &$count = 0)\n    {\n        return self::$instance->preg_replace($pattern, $replacement, $subject, $limit, $count);\n    }\n\n    /**\n     * Convert special chars to html entities.\n     *\n     * @param string|null $string The input string.\n     * @param int         $quoteStyle Quote style\n     * @param string      $charset Character set, UTF-8 by default\n     * @param bool        $doubleEncode If set to false, no encoding of existing entities\n     * @return string\n     */\n    public static function htmlspecialchars(\n        ?string $string = '',\n        int $quoteStyle = ENT_HTML5,\n        string $charset = 'utf-8',\n        bool $doubleEncode = false\n    ): string {\n        return htmlspecialchars(\n            $string,\n            $quoteStyle,\n            $charset,\n            $doubleEncode\n        );\n    }\n\n    /**\n     * Convert all applicable characters to HTML entities.\n     *\n     * @param string $string The input string.\n     * @param int    $quoteStyle Quote style\n     * @param string $charset Character set, UTF-8 by default\n     * @param bool   $doubleEncode If set to false, no encoding of existing entities\n     * @return string\n     */\n    public static function htmlentities(\n        string $string,\n        $quoteStyle = ENT_HTML5,\n        $charset = 'utf-8',\n        $doubleEncode = true\n    ): string\n    {\n        return htmlentities(\n            $string,\n            $quoteStyle,\n            $charset,\n            $doubleEncode\n        );\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * This is the main public frontend page of phpMyFAQ. It detects the browser's\n * language, gets and sets all cookie, post and get information and includes\n * the templates we need and set all internal variables to the template\n * variables. That's all.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <php@larstiedemann.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2001-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2001-02-12\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap as AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso as AuthSso;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper as HelperCategory;\nuse phpMyFAQ\\Helper\\HttpHelper as HelperHttp;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Seo;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\Template\\TemplateHelper;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire __DIR__ . '/src/Bootstrap.php';\n\n//\n// HTTP Helper\n//\n$http = new HelperHttp();\n\n//\n// Get language (default: english)\n//\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\n$showCaptcha = Filter::filterInput(INPUT_GET, 'gen', FILTER_UNSAFE_RAW);\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode) && is_null($showCaptcha)) {\n    // Overwrite English strings with the ones we have in the current language,\n    // but don't include UTF-8 encoded files, these will break the captcha images\n    if (!file_exists('lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require_once 'lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//Load plurals support for selected language\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n/*\n * Initialize attachment factory\n */\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n\n//\n// Authenticate current user\n//\n$auth = $error = null;\n$loginVisibility = 'hidden';\n\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqaction = Filter::filterInput(INPUT_POST, 'faqloginaction', FILTER_UNSAFE_RAW);\n$rememberMe = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($rememberMe) && 'rememberMe' === $rememberMe) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n\n    if ($user->login($faqusername, $faqpassword)) {\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n            if (empty($action)) {\n                $action = $faqaction; // SSO logins don't have $faqaction\n            }\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'] . ' (' . $faqusername . ')';\n            $loginVisibility = '';\n            $action = 'password' === $action ? 'password' : 'login';\n        }\n    } else {\n        // error\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n        $loginVisibility = '';\n        $action = 'password' === $action ? 'password' : 'login';\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n//\n// Logout\n//\nif ($csrfChecked && 'logout' === $action && isset($auth)) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $action = 'main';\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        header('Location: ' . $ssoLogout);\n    } else {\n        header('Location: ' . $faqConfig->getDefaultUrl());\n    }\n}\n\n//\n// Get current user and group id - default: -1\n//\nif (!is_null($user) && $user instanceof CurrentUser) {\n    $currentUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentGroups = $user->perm->getUserGroups($currentUser);\n    } else {\n        $currentGroups = [-1];\n    }\n    if (0 == count($currentGroups)) {\n        $currentGroups = [-1];\n    }\n} else {\n    $currentUser = -1;\n    $currentGroups = [-1];\n}\n\n//\n// Use mbstring extension if available and when possible\n//\n$validMbStrings = ['ja', 'en', 'uni'];\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Found a session ID in _GET or _COOKIE?\n//\n$sidGet = Filter::filterInput(INPUT_GET, PMF_GET_KEY_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$sidCookie = Filter::filterInput(INPUT_COOKIE, Session::PMF_COOKIE_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n\n// Note: do not track internal calls\n$internal = false;\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $internal = (strpos($_SERVER['HTTP_USER_AGENT'], 'phpMyFAQ%2F') === 0);\n}\nif (!$internal) {\n    if (is_null($sidGet) && is_null($sidCookie)) {\n        // Create a per-site unique SID\n        try {\n            $faqSession->userTracking('new_session', 0);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } elseif (!is_null($sidCookie)) {\n        try {\n            $faqSession->checkSessionId($sidCookie, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } else {\n        try {\n            $faqSession->checkSessionId($sidGet, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    }\n}\n\n//\n// Is user tracking activated?\n//\n$sids = '';\nif ($faqConfig->get('main.enableUserTracking')) {\n    if ($faqSession->getCurrentSessionId() > 0) {\n        $faqSession->setCookie(Session::PMF_COOKIE_NAME_SESSIONID, $faqSession->getCurrentSessionId());\n        if (is_null($sidCookie)) {\n            $sids = sprintf('sid=%d&amp;lang=%s&amp;', $faqSession->getCurrentSessionId(), $faqLangCode);\n        }\n    } elseif (is_null($sidGet) || is_null($sidCookie)) {\n        if (is_null($sidCookie)) {\n            if (!is_null($sidGet)) {\n                $sids = sprintf('sid=%d&amp;lang=%s&amp;', $sidGet, $faqLangCode);\n            }\n        }\n    }\n} elseif (\n    !$faqSession->setCookie(\n        Session::PMF_COOKIE_NAME_SESSIONID,\n        $faqSession->getCurrentSessionId(),\n        $_SERVER['REQUEST_TIME'] + PMF_LANGUAGE_EXPIRED_TIME\n    )\n) {\n    $sids = sprintf('lang=%s&amp;', $faqLangCode);\n}\n\n//\n// Found a article language?\n//\n$lang = Filter::filterInput(INPUT_POST, 'artlang', FILTER_UNSAFE_RAW);\nif (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n    $lang = Filter::filterInput(INPUT_GET, 'artlang', FILTER_UNSAFE_RAW);\n    if (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n        $lang = $faqLangCode;\n    }\n}\n\n//\n// Sanitize language string\n//\nif (!Language::isASupportedLanguage($lang)) {\n    $lang = $faqConfig->getDefaultLanguage();\n}\n\n//\n// Found a search string?\n//\n$searchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Category object\n//\n$category = new Category($faqConfig, $currentGroups, true);\n$category->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Tags object\n//\n$oTag = new Tags($faqConfig);\n\n//\n// Create URL\n//\n$faqSystem = new System();\n$faqLink = new Link($faqSystem->getSystemUri($faqConfig), $faqConfig);\n$currentPageUrl = $faqLink->getCurrentUrl();\n\n//\n// Found a record ID?\n//\n$id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\nif (!is_null($id)) {\n    $faq->getRecord($id);\n    $title = ' - ' . $faq->faqRecord['title'];\n    $keywords = ',' . $faq->faqRecord['keywords'];\n    $metaDescription = str_replace('\"', '', strip_tags($faq->getRecordPreview($id)));\n    $url = sprintf(\n        '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $sids,\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $faqLink = new Link($url, $faqConfig);\n    $faqLink->itemTitle = $faq->faqRecord['title'];\n    $currentPageUrl = $faqLink->toString(true);\n} else {\n    $id = '';\n    $title = ' - powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $metaDescription = str_replace('\"', '', $faqConfig->get('main.metaDescription'));\n}\n\n//\n// found a solution ID?\n//\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\nif (!is_null($solutionId)) {\n    $title = ' -  powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $faqData = $faq->getIdFromSolutionId($solutionId);\n    if (is_array($faqData)) {\n        $id = $faqData['id'];\n        $lang = $faqData['lang'];\n        $title = ' - ' . $faq->getRecordTitle($id);\n        $keywords = ',' . $faq->getRecordKeywords($id);\n        $metaDescription = str_replace('\"', '', Utils::makeShorterText(strip_tags($faqData['content']), 12));\n        $url = sprintf(\n            '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n            $faqConfig->getDefaultUrl(),\n            $sids,\n            $faqData['category_id'],\n            $id,\n            $lang\n        );\n        $faqLink = new Link($url, $faqConfig);\n        $faqLink->itemTitle = $faqData['question'];\n        $currentPageUrl = $faqLink->toString(true);\n    }\n}\n\n//\n// Handle the Tagging ID\n//\n$tag_id = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\nif (!is_null($tag_id)) {\n    $title = ' - ' . $oTag->getTagNameById($tag_id);\n    $keywords = '';\n}\n\n//\n// Handle the SiteMap\n//\n$letter = Filter::filterInput(INPUT_GET, 'letter', FILTER_UNSAFE_RAW);\nif (!is_null($letter) && (1 == Strings::strlen($letter))) {\n    $title = ' - ' . $letter . '...';\n    $keywords = $letter;\n}\n\n//\n// Found a category ID?\n//\n$cat = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);\n$categoryFromId = -1;\nif (is_numeric($id) && $id > 0) {\n    $categoryFromId = $category->getCategoryIdFromFaq($id);\n}\nif ($categoryFromId != -1 && $cat == 0) {\n    $cat = $categoryFromId;\n}\n$category->transform(0);\n$category->collapseAll();\nif ($cat != 0) {\n    $category->expandTo($cat);\n}\nif (isset($cat) && ($cat != 0) && ($id == '') && isset($category->categoryName[$cat]['name'])) {\n    $title = ' - ' . $category->categoryName[$cat]['name'];\n    $metaDescription = $category->categoryName[$cat]['description'];\n}\n\n//\n// Found an action request?\n//\nif (!isset(Link::$allowedActionParameters[$action])) {\n    $action = 'main';\n}\n\n//\n// Select the template for the requested page\n//\nif ($action !== 'main') {\n    $includeTemplate = $action . '.html';\n    $includePhp = $action . '.php';\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n} else {\n    if (isset($solutionId) && is_numeric($solutionId)) {\n        // show the record with the solution ID\n        $includeTemplate = 'faq.html';\n        $includePhp = 'faq.php';\n    } else {\n        $includeTemplate = 'startpage.html';\n        $includePhp = 'startpage.php';\n    }\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n}\n\n//\n// Set sidebar column\n//\nif (($action === 'faq') || ($action === 'show') || ($action === 'main')) {\n    $sidebarTemplate = 'sidebar-tagcloud.html';\n} else {\n    $sidebarTemplate = 'sidebar-empty.html';\n}\n\n//\n// Check if FAQ should be secured\n//\nif ($faqConfig->get('security.enableLoginOnly')) {\n    if ($auth) {\n        $indexSet = 'index.html';\n    } else {\n        switch ($action) {\n            case 'register':\n            case 'thankyou':\n                $indexSet = 'new-user.page.html';\n                break;\n            case 'password':\n                $indexSet = 'password.page.html';\n                break;\n            default:\n                $indexSet = 'login.page.html';\n                break;\n        }\n    }\n} else {\n    $indexSet = 'index.html';\n}\n\n//\n// phpMyFAQ installation is in maintenance mode\n//\nif ($faqConfig->get('main.maintenanceMode')) {\n    $indexSet = 'maintenance.page.html';\n}\n\n//\n// Load template files and set template variables\n//\n$template = new Template(\n    [\n        'index' => $indexSet,\n        'sidebar' => $sidebarTemplate,\n        'mainPageContent' => $includeTemplate,\n    ],\n    new TemplateHelper($faqConfig),\n    $faqConfig->get('main.templateSet')\n);\n\n$categoryRelation = new CategoryRelation($faqConfig);\n\n$categoryHelper = new HelperCategory();\n$categoryHelper->setCategory($category);\n$categoryHelper->setConfiguration($faqConfig);\n$categoryHelper->setCategoryRelation($categoryRelation);\n\n$keywordsArray = array_merge(explode(',', $keywords), explode(',', $faqConfig->get('main.metaKeywords')));\n$keywordsArray = array_filter($keywordsArray, 'strlen');\nshuffle($keywordsArray);\n$keywords = implode(',', $keywordsArray);\n\nif (!is_null($error)) {\n    $loginMessage = '<p class=\"error\">' . $error . '</p>';\n} else {\n    $loginMessage = '';\n}\n\n$faqSeo = new Seo($faqConfig);\n\n$tplMainPage = [\n    'msgLoginUser' => $user->isLoggedIn() ? $user->getUserData('display_name') : $PMF_LANG['msgLoginUser'],\n    'title' => Strings::htmlspecialchars($faqConfig->getTitle() . $title),\n    'baseHref' => $faqSystem->getSystemUri($faqConfig),\n    'version' => $faqConfig->getVersion(),\n    'header' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle())),\n    'metaTitle' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle() . $title)),\n    'metaDescription' => Strings::htmlspecialchars($metaDescription ?? ''),\n    'metaKeywords' => Strings::htmlspecialchars($keywords),\n    'metaPublisher' => $faqConfig->get('main.metaPublisher'),\n    'metaLanguage' => $PMF_LANG['metaLanguage'],\n    'metaRobots' => $faqSeo->getMetaRobots($action),\n    'phpmyfaqversion' => $faqConfig->getVersion(),\n    'stylesheet' => $PMF_LANG['dir'] == 'rtl' ? 'style.rtl' : 'style',\n    'currentPageUrl' => $currentPageUrl,\n    'action' => $action,\n    'dir' => $PMF_LANG['dir'],\n    'writeSendAdress' => '?' . $sids . 'action=search',\n    'searchBox' => $PMF_LANG['msgSearch'],\n    'searchTerm' => Strings::htmlspecialchars($searchTerm, ENT_QUOTES),\n    'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n    'headerCategories' => $PMF_LANG['msgFullCategories'],\n    'msgCategory' => $PMF_LANG['msgCategory'],\n    'showCategories' => $categoryHelper->renderNavigation($cat),\n    'topCategories' => $categoryHelper->renderMainCategories(),\n    'msgExportAllFaqs' => $PMF_LANG['msgExportAllFaqs'],\n    'languageBox' => $PMF_LANG['msgLanguageSubmit'],\n    'renderUri' => $renderUri,\n    'switchLanguages' => LanguageHelper::renderSelectLanguage($faqLangCode, true),\n    'copyright' => 'powered with \u2764\ufe0f and \u2615\ufe0f by <a href=\"https://www.phpmyfaq.de\" target=\"_blank\">phpMyFAQ</a> ' .\n        $faqConfig->getVersion(),\n    'registerUser' => $faqConfig->get('security.enableRegistration') ? '<a href=\"?action=register\">' .\n        $PMF_LANG['msgRegistration'] . '</a>' : '',\n    'sendPassword' => '<a href=\"?action=password\">' . $PMF_LANG['lostPassword'] . '</a>',\n    'msgFullName' => $PMF_LANG['ad_user_loggedin'] . $user->getLogin(),\n    'msgLoginName' => $user->getUserData('display_name'),\n    'loginHeader' => $PMF_LANG['msgLoginUser'],\n    'loginMessage' => $loginMessage,\n    'writeLoginPath' => $faqSystem->getSystemUri($faqConfig) . '?' . Filter::getFilteredQueryString(),\n    'faqloginaction' => $action,\n    'login' => $PMF_LANG['ad_auth_ok'],\n    'username' => $PMF_LANG['ad_auth_user'],\n    'password' => $PMF_LANG['ad_auth_passwd'],\n    'rememberMe' => $PMF_LANG['rememberMe'],\n    'headerChangePassword' => $PMF_LANG['ad_passwd_cop'],\n    'msgUsername' => $PMF_LANG['ad_auth_user'],\n    'msgEmail' => $PMF_LANG['ad_entry_email'],\n    'msgSubmit' => $PMF_LANG['msgNewContentSubmit'],\n    'loginPageMessage' => $PMF_LANG['loginPageMessage'],\n    'msgAdvancedSearch' => $PMF_LANG['msgAdvancedSearch']\n];\n\n$template->parseBlock(\n    'index',\n    'categoryListSection',\n    [\n        'showCategories' => $categoryHelper->renderNavigation($cat),\n        'categoryDropDown' => $categoryHelper->renderCategoryDropDown(),\n    ]\n);\n\nif ('main' == $action || 'show' == $action) {\n    $template->parseBlock(\n        'index',\n        'globalSearchBox',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchBox' => $PMF_LANG['msgSearch'],\n            'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n            'msgSearch' => sprintf(\n                '<a class=\"help\" href=\"./index.php?action=search\">%s</a>',\n                $PMF_LANG['msgAdvancedSearch']\n            ),\n        ]\n    );\n}\n\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"./search.html\">' . $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"' . $faqSystem->getSystemUri($faqConfig) . 'addcontent.html\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"./ask.html\">' . $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"./open-questions.html\">' . $PMF_LANG['msgOpenQuestions'] .\n            '</a>',\n        'msgContact' => '<a href=\"./contact.html\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"./glossary.html\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'backToHome' => '<a href=\"./index.html\">' . $PMF_LANG['msgHome'] . '</a>',\n        'allCategories' => '<a class=\"nav-link\" href=\"./showcat.html\">' . $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"./overview.html\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'showSitemap' => '<a href=\"./sitemap/A/' . $faqLangCode . '.html\">' . $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"./request-removal.html\">' . $PMF_LANG['msgUserRemoval'] . '</a>'\n    ];\n} else {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=search\">' .\n            $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=add&cat=' . $cat . '\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=ask&category_id=' . $cat . '\">' .\n            $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=open-questions\">' .\n            $PMF_LANG['msgOpenQuestions'] . '</a>',\n        'msgContact' => '<a href=\"index.php?' . $sids . 'action=contact\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"index.php?' . $sids . 'action=glossary\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'allCategories' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=show\">' .\n            $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'backToHome' => '<a href=\"index.php?' . $sids . '\">' . $PMF_LANG['msgHome'] . '</a>',\n        'showSitemap' => '<a href=\"index.php?' . $sids . 'action=sitemap&amp;lang=' . $faqLangCode . '\">' .\n            $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"index.php?' . $sids . 'action=request-removal\">' . $PMF_LANG['msgUserRemoval'] .\n            '</a>',\n    ];\n}\n\n$tplNavigation['faqHome'] = $faqConfig->getDefaultUrl();\n$tplNavigation['activeSearch'] = ('search' == $action) ? 'active' : '';\n$tplNavigation['activeAllCategories'] = ('show' == $action) ? 'active' : '';\n$tplNavigation['activeAddContent'] = ('add' == $action) ? 'active' : '';\n$tplNavigation['activeAddQuestion'] = ('ask' == $action) ? 'active' : '';\n$tplNavigation['activeOpenQuestions'] = ('open-questions' == $action) ? 'active' : '';\n$tplNavigation['activeLogin'] = ('login' == $action) ? 'active' : '';\n\n//\n// Show login box or logged-in user information\n//\nif (isset($auth)) {\n    if ($user->perm->hasPermission($user->getUserId(), 'viewadminlink') || $user->isSuperAdmin()) {\n        $adminSection = sprintf(\n            '<a class=\"dropdown-item\" href=\"./admin/index.php\">%s</a>',\n            $PMF_LANG['adminSection']\n        );\n    } else {\n        $adminSection = '';\n    }\n\n    $template->parseBlock(\n        'index',\n        'userloggedIn',\n        [\n            'msgUserControl' => $adminSection,\n            'msgLoginName' => $user->getUserData('display_name'), // @deprecated\n            'msgUserControlDropDown' => '<a class=\"dropdown-item\" href=\"?action=ucp\">' .\n                $PMF_LANG['headerUserControlPanel'] . '</a>',\n            'msgUserRemoval' => '<a class=\"dropdown-item\" href=\"?action=request-removal\">' .\n                $PMF_LANG['ad_menu_RequestRemove'] . '</a>',\n            'msgLogoutUser' => sprintf(\n                '<a class=\"dropdown-item\" href=\"?action=logout&csrf=%s\">%s</a>',\n                $user->getCsrfTokenFromSession(),\n                $PMF_LANG['ad_menu_logout'],\n            ),\n            'activeUserControl' => ('ucp' == $action) ? 'active' : ''\n        ]\n    );\n} else {\n    if ($faqConfig->get('main.maintenanceMode')) {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"./admin/\">%s</a>';\n    } else {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"?action=login\">%s</a>';\n    }\n    $template->parseBlock(\n        'index',\n        'notLoggedIn',\n        [\n            'msgRegisterUser' => $faqConfig->get('security.enableRegistration')\n                ?\n                '<a class=\"dropdown-item\" href=\"?action=register\">' . $PMF_LANG['msgRegisterUser'] . '</a>'\n                :\n                '',\n            'msgLoginUser' => sprintf($msgLoginUser, $PMF_LANG['msgLoginUser']),\n            'activeRegister' => ('register' == $action) ? 'active' : '',\n            'activeLogin' => ('login' == $action) ? 'active' : '',\n        ]\n    );\n}\n\n$template->parse(\n    'sidebar',\n    [\n        'writeTagCloudHeader' => $PMF_LANG['msg_tags'],\n        'writeTags' => $oTag->renderTagCloud(),\n        'msgAllCatArticles' => $PMF_LANG['msgAllCatArticles'],\n        'allCatArticles' => $faq->getRecordsWithoutPagingByCategoryId($cat)\n    ]\n);\n\nif (DEBUG) {\n    $template->parseBlock(\n        'index',\n        'debugMode',\n        [\n            'debugQueries' => $faqConfig->getDb()->log(),\n        ]\n    );\n}\n\n//\n// Redirect old \"action=artikel\" URLs via 301 to new location\n//\nif ('artikel' === $action) {\n    $url = sprintf(\n        '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $http->setStatus(301);\n    $http->redirect($url);\n    exit();\n}\n\n//\n// Include requested PHP file\n//\nrequire $includePhp;\n\n//\n// Get main template, set main variables\n//\n$template->parse('index', array_merge($tplMainPage, $tplNavigation));\n$template->merge('sidebar', 'index');\n$template->merge('mainPageContent', 'index');\n\n//\n// Send headers and print template\n//\n$http->setConfiguration($faqConfig);\n$http->setContentType('text/html');\n$http->addHeader();\n$http->startCompression();\n\n//\n// Check for 404 HTTP status code\n//\nif ($http->getStatusCode() === 404 || $action === '404') {\n    $template = new Template(\n        [\n            'index' => '404.html',\n            'mainPageContent' => ''\n        ],\n        new TemplateHelper($faqConfig),\n        $faqConfig->get('main.templateSet')\n    );\n    $template->parse('index', array_merge($tplMainPage, $tplNavigation));\n}\n\n$template->render();\n\n$faqConfig->getDb()->close();\n", "<?php\n\n/**\n * The fulltext search page.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2002-09-16\n */\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\SearchHelper;\nuse phpMyFAQ\\Helper\\TagsHelper;\nuse phpMyFAQ\\Pagination;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\User\\CurrentUser;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\ntry {\n    $faqSession->userTracking('fulltext_search', 0);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser);\n$faq->setGroups($currentGroups);\n\n// Get possible user input\n$inputLanguage = Filter::filterInput(INPUT_GET, 'langs', FILTER_UNSAFE_RAW);\n$inputCategory = Filter::filterInput(INPUT_GET, 'searchcategory', FILTER_VALIDATE_INT, '%');\n$inputSearchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n$inputTag = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_UNSAFE_RAW, '');\n$inputTag = str_replace(' ', '', $inputTag);\n$inputTag = str_replace(',,', ',', $inputTag);\n\n$searchTerm = Filter::filterInput(INPUT_POST, 'search', FILTER_UNSAFE_RAW);\n$page = Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n\n// Search only on current language (default)\nif (!is_null($inputLanguage)) {\n    $allLanguages = true;\n    $languages = '&amp;langs=all';\n} else {\n    $allLanguages = false;\n    $languages = '';\n}\n\n// HACK: (re)evaluate the Entity object w/o passing the user language\n//       so the result set of a Search will have the Entity Path\n//       for any of the multi language faq records and the Entity list\n//       on the left pane will not be affected\nif ($allLanguages) {\n    $category = new Category($faqConfig);\n    $category->transform(0);\n}\n\nif (is_null($user)) {\n    $user = new CurrentUser($faqConfig);\n}\n\n$faqSearch = new Search($faqConfig);\n$faqPermission = new FaqPermission($faqConfig);\n$faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n$tagging = new Tags($faqConfig);\n$tagHelper = new TagsHelper();\n$tagSearch = false;\n\n//\n// Handle the Tagging ID\n//\nif (!is_null($inputTag) && '' !== $inputTag) {\n    $tagSearch = true;\n    $tags = [];\n    $tagIds = explode(',', $inputTag);\n\n    $tagHelper->setTaggingIds($tagIds);\n\n    foreach ($tagIds as $tagId) {\n        if (!isset($tags[$tagId])) {\n            $tags[$tagId] = $tagging->getTagNameById($tagId);\n        }\n    }\n\n    $recordIds = $tagging->getFaqsByIntersectionTags($tags);\n\n    if (0 === count($recordIds)) {\n        $searchResult = '';\n    } else {\n        $relatedTags = [];\n\n        foreach ($recordIds as $recordId) {\n            $resultTags = $tagging->getAllTagsById($recordId);\n            foreach ($resultTags as $resultTagId => $resultTagName) {\n                if (isset($tags[$resultTagId])) {\n                    // if the given tag is in the search term we don't want to list it\n                    continue;\n                }\n\n                if (isset($relatedTags[$resultTagId])) {\n                    ++$relatedTags[$resultTagId];\n                } else {\n                    $relatedTags[$resultTagId] = 1;\n                }\n            }\n        }\n\n        uasort($relatedTags, function ($a, $b) {\n            return ($b - $a);\n        });\n        $numTags = 0;\n        $relTags = '';\n\n        foreach ($relatedTags as $tagId => $relevance) {\n            $relTags .= $tagHelper->renderRelatedTag((int)$tagId, $tagging->getTagNameById($tagId), $relevance);\n            if ($numTags++ > 20) {\n                break;\n            }\n        }\n        $searchResult = $faq->renderRecordsByFaqIds($recordIds);\n    }\n} else {\n    $searchResult = '';\n}\n\n//\n// Handle the full text search stuff\n//\nif (!is_null($inputSearchTerm) || !is_null($searchTerm)) {\n    if (!is_null($inputSearchTerm)) {\n        $inputSearchTerm = $faqConfig->getDb()->escape(strip_tags($inputSearchTerm));\n    }\n    if (!is_null($searchTerm)) {\n        $inputSearchTerm = $faqConfig->getDb()->escape(strip_tags($searchTerm));\n    }\n\n    $faqSearch->setCategory($category);\n    $faqSearch->setCategoryId((int) $inputCategory);\n\n    $searchResults = $faqSearch->search($inputSearchTerm, $allLanguages);\n\n    foreach ($searchResults as $faqKey => $faqValue) {\n        $checkedFaq = $faq->getRecordResult($faqValue->id, $faqValue->lang);\n        if (0 === $checkedFaq->num_rows) {\n            unset($searchResults[$faqKey]);\n        }\n    }\n\n    $faqSearchResult->reviewResultSet($searchResults);\n\n    $inputSearchTerm = stripslashes($inputSearchTerm);\n    try {\n        $faqSearch->logSearchTerm($inputSearchTerm);\n    } catch (Exception $e) {\n        // @todo handle exception\n    }\n}\n\n// Change a little bit the $searchCategory value;\n$inputCategory = ('%' == $inputCategory) ? 0 : $inputCategory;\n\ntry {\n    $faqSession->userTracking('fulltext_search', $inputSearchTerm);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\nif (\n    is_numeric(\n        $inputSearchTerm\n    ) && PMF_SOLUTION_ID_START_VALUE <= $inputSearchTerm && 0 < $faqSearchResult->getNumberOfResults(\n    ) && $faqConfig->get('search.searchForSolutionId')\n) {\n    if ($faqConfig->get('main.enableRewriteRules')) {\n        $http->redirect($faqConfig->getDefaultUrl() . 'solution_id_' . $inputSearchTerm . '.html');\n    } else {\n        $http->redirect($faqConfig->getDefaultUrl() . 'index.php?solution_id=' . $inputSearchTerm);\n    }\n    exit();\n}\n\n$category->buildCategoryTree();\n\n$mostPopularSearchData = $faqSearch->getMostPopularSearches($faqConfig->get('search.numberSearchTerms'));\n\n// Set base URL scheme\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $baseUrl = sprintf(\n        '%ssearch.html?search=%s&amp;seite=%d%s&amp;searchcategory=%d',\n        $faqConfig->getDefaultUrl(),\n        urlencode($inputSearchTerm),\n        $page,\n        $languages,\n        $inputCategory\n    );\n} else {\n    $baseUrl = sprintf(\n        '%s?%saction=search&amp;search=%s&amp;seite=%d%s&amp;searchcategory=%d',\n        $faqConfig->getDefaultUrl(),\n        empty($sids) ? '' : 'sids=' . $sids . '&amp;',\n        urlencode($inputSearchTerm),\n        $page,\n        $languages,\n        $inputCategory\n    );\n}\n\n// Pagination options\n$options = [\n    'baseUrl' => $baseUrl,\n    'total' => $faqSearchResult->getNumberOfResults(),\n    'perPage' => $faqConfig->get('records.numberOfRecordsPerPage'),\n    'pageParamName' => 'seite',\n    'layoutTpl' => '<ul class=\"pagination justify-content-center\">{LAYOUT_CONTENT}</ul>',\n];\n\n$faqPagination = new Pagination($faqConfig, $options);\n$categoryHelper = new CategoryHelper();\n$categoryHelper->setCategory($category);\n\n$searchHelper = new SearchHelper($faqConfig);\nif (!is_null($inputSearchTerm)) {\n    $searchHelper->setSearchTerm($inputSearchTerm);\n}\n$searchHelper->setCategory($category);\n$searchHelper->setPagination($faqPagination);\n$searchHelper->setPlurals($plr);\n$searchHelper->setSessionId($sids);\n\nif ('' == $searchResult && !is_null($inputSearchTerm)) {\n    try {\n        $searchResult = $searchHelper->renderSearchResult($faqSearchResult, $page);\n    } catch (Exception $e) {\n        // @todo handle exception\n    }\n}\n\nif ($tagSearch) {\n    $template->parseBlock(\n        'mainPageContent',\n        'searchTagsSection',\n        [\n            'searchTags' => $tagHelper->renderTagList($tags),\n        ]\n    );\n    $template->parseBlock(\n        'mainPageContent',\n        'relatedTags',\n        [\n            'relatedTagsHeader' => $PMF_LANG['msgRelatedTags'],\n            'relatedTags' => $relTags,\n        ]\n    );\n} else {\n    if ('' === $searchTerm) {\n        $template->parseBlock(\n            'mainPageContent',\n            'tagListSection',\n            [\n                'msgTags' => $PMF_LANG['msgPopularTags'],\n                'tagList' => $tagging->renderPopularTags(0),\n            ]\n        );\n    }\n\n    $template->parseBlock(\n        'mainPageContent',\n        'searchBoxSection',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchString' => Strings::htmlspecialchars($inputSearchTerm, ENT_QUOTES),\n            'searchOnAllLanguages' => $PMF_LANG['msgSearchOnAllLanguages'],\n            'checkedAllLanguages' => $allLanguages ? ' checked' : '',\n            'selectCategories' => $PMF_LANG['msgSelectCategories'],\n            'allCategories' => $PMF_LANG['msgAllCategories'],\n            'renderCategoryOptions' => $categoryHelper->renderOptions($inputCategory),\n            'msgSearch' => $PMF_LANG['msgSearch']\n        ]\n    );\n\n    $template->parseBlock(\n        'mainPageContent',\n        'popularSearchesSection',\n        [\n            'msgMostPopularSearches' => $PMF_LANG['msgMostPopularSearches'],\n            'printMostPopularSearches' => $searchHelper->renderMostPopularSearches($mostPopularSearchData)\n        ]\n    );\n}\n\n$template->parse(\n    'mainPageContent',\n    [\n        'pageHeader' => ($tagSearch ? $PMF_LANG['msgTagSearch'] : $PMF_LANG['msgAdvancedSearch']),\n        'msgAdvancedSearch' => ($tagSearch ? $PMF_LANG['msgTagSearch'] : $PMF_LANG['msgAdvancedSearch']),\n        'msgSearchWord' => $PMF_LANG['msgSearchWord'],\n        'renderSearchResults' => $searchResult,\n        'writeSendAdress' => '?' . $sids . 'action=search',\n        'searchString' => Strings::htmlspecialchars($inputSearchTerm, ENT_QUOTES),\n        'searchOnAllLanguages' => $PMF_LANG['msgSearchOnAllLanguages'],\n        'checkedAllLanguages' => $allLanguages ? ' checked' : '',\n        'selectCategories' => $PMF_LANG['msgSelectCategories'],\n        'allCategories' => $PMF_LANG['msgAllCategories'],\n        'renderCategoryOptions' => $categoryHelper->renderOptions($inputCategory),\n        'msgSearch' => $PMF_LANG['msgSearch'],\n        'msgMostPopularSearches' => $PMF_LANG['msgMostPopularSearches'],\n        'printMostPopularSearches' => $searchHelper->renderMostPopularSearches($mostPopularSearchData)\n    ]\n);\n", "<?php\n// phpcs:ignoreFile\n\n/**\n * The main string wrapper class.\n *\n * The class uses mbstring extension if available. It's strongly recommended\n * to use and extend this class instead of using direct string functions. Doing so\n * you guarantees your code is upwards compatible with UTF-8 improvements. All\n * the string methods behaviour is identical to that of the same named\n * single byte string functions.\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Anatoliy Belsky <ab@php.net>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-06\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Strings\\Mbstring;\nuse phpMyFAQ\\Strings\\StringBasic;\n\n/**\n * Class Strings\n *\n * @package phpMyFAQ\n */\nclass Strings\n{\n    /**\n     * Instance.\n     *\n     * @var Mbstring|StringBasic|null\n     */\n    private static $instance = null;\n\n    /**\n     * Constructor.\n     */\n    final private function __construct()\n    {\n    }\n\n    /**\n     * Init.\n     *\n     * @param string $language Language\n     */\n    public static function init(string $language = 'en'): void\n    {\n        if (!self::$instance) {\n            if (extension_loaded('mbstring') && function_exists('mb_regex_encoding')) {\n                self::$instance = Mbstring::getInstance($language);\n            } else {\n                self::$instance = StringBasic::getInstance($language);\n            }\n        }\n    }\n\n    /**\n     * Get current encoding.\n     *\n     * @return string\n     */\n    public static function getEncoding(): string\n    {\n        return self::$instance->getEncoding();\n    }\n\n    /**\n     * Get string character count.\n     *\n     * @param string $str String\n     * @return int\n     */\n    public static function strlen(string $str): int\n    {\n        return self::$instance->strlen($str);\n    }\n\n    /**\n     * Get a part of string.\n     *\n     * @param string $string String\n     * @param int $start Start\n     * @param int|null $length Length\n     * @return string\n     */\n    public static function substr(string $string, int $start, $length = 0): string\n    {\n        return self::$instance->substr($string, $start, $length);\n    }\n\n    /**\n     * Get position of the first occurrence of a string.\n     *\n     * @param string $haystack Haystack\n     * @param string $needle Needle\n     * @param int    $offset Offset\n     * @return int\n     */\n    public static function strpos(string $haystack, string $needle, $offset = 0): int\n    {\n        return self::$instance->strpos($haystack, $needle, $offset);\n    }\n\n    /**\n     * Make a string lower case.\n     *\n     * @param string $str String\n     * @return string\n     */\n    public static function strtolower(string $str): string\n    {\n        return self::$instance->strtolower($str);\n    }\n\n    /**\n     * Make a string upper case.\n     *\n     * @param string $str String\n     * @return string\n     */\n    public static function strtoupper(string $str): string\n    {\n        return self::$instance->strtoupper($str);\n    }\n\n    /**\n     * Get occurrence of a string within another.\n     *\n     * @param string $haystack Haystack\n     * @param string $needle Needle\n     * @param bool   $part Part\n     * @return string|false\n     */\n    public static function strstr(string $haystack, string $needle, $part = false)\n    {\n        return self::$instance->strstr($haystack, $needle, $part);\n    }\n\n    /**\n     * Set current encoding.\n     *\n     * @param string $encoding\n     */\n    public static function setEncoding(string $encoding): void\n    {\n        self::$instance->setEncoding($encoding);\n    }\n\n    /**\n     * Count substring occurrences.\n     *\n     * @param string $haystack\n     * @param string $needle\n     * @return int\n     */\n    public static function substr_count(string $haystack, string $needle): int // phpcs:ignore\n    {\n        return self::$instance->substr_count($haystack, $needle);\n    }\n\n    /**\n     * Find position of last occurrence of a char in a string.\n     *\n     * @param string $haystack\n     * @param string $needle\n     * @param int    $offset\n     * @return int\n     */\n    public static function strrpos(string $haystack, string $needle, $offset = 0): int\n    {\n        return self::$instance->strrpos($haystack, $needle, $offset);\n    }\n\n    /**\n     * Match a regexp.\n     *\n     * @param string $pattern\n     * @param string $subject\n     * @param null   $matches\n     * @param int    $flags\n     * @param int    $offset\n     * @return int\n     */\n    public static function preg_match(\n        string $pattern,\n        string $subject,\n        &$matches = null,\n        $flags = 0,\n        $offset = 0\n    ): int // phpcs:ignore\n    {\n        return self::$instance->preg_match($pattern, $subject, $matches, $flags, $offset);\n    }\n\n    /**\n     * Match a regexp globally.\n     *\n     * @param string $pattern\n     * @param string $subject\n     * @param null   $matches\n     * @param int    $flags\n     * @param int    $offset\n     * @return int\n     */\n    public static function preg_match_all(\n        string $pattern,\n        string $subject,\n        &$matches = null,\n        $flags = 0,\n        $offset = 0\n    ): int // phpcs:ignore\n    {\n        return self::$instance->preg_match_all($pattern, $subject, $matches, $flags, $offset);\n    }\n\n    /**\n     * Split string by a regexp.\n     *\n     * @param string $pattern\n     * @param string $subject\n     * @param int    $limit\n     * @param int    $flags\n     * @return string[]|array|false\n     */\n    public static function preg_split(string $pattern, string $subject, $limit = -1, $flags = 0) // phpcs:ignore\n    {\n        return self::$instance->preg_split($pattern, $subject, $limit, $flags);\n    }\n\n    /**\n     * Search and replace by a regexp using a callback.\n     *\n     * @param string $pattern\n     * @param callable $callback\n     * @param string|string[] $subject\n     * @param int $limit\n     * @param int $count\n     * @return string|string[]\n     */\n    public static function preg_replace_callback(\n        string $pattern,\n        callable $callback,\n        $subject,\n        $limit = -1,\n        &$count = 0\n    ) {\n        return self::$instance->preg_replace_callback($pattern, $callback, $subject, $limit, $count);\n    }\n\n    /**\n     * Search and replace by a regexp.\n     *\n     * @param string|string[] $pattern\n     * @param string|string[] $replacement\n     * @param string|string[] $subject\n     * @param int $limit\n     * @param int $count\n     * @return string|string[]|null\n     */\n    public static function preg_replace($pattern, $replacement, $subject, $limit = -1, &$count = 0)\n    {\n        return self::$instance->preg_replace($pattern, $replacement, $subject, $limit, $count);\n    }\n\n    /**\n     * Convert special chars to html entities.\n     *\n     * @param string|null $string The input string.\n     * @param int         $quoteStyle Quote style\n     * @param string      $charset Character set, UTF-8 by default\n     * @param bool        $doubleEncode If set to false, no encoding of existing entities\n     * @return string\n     */\n    public static function htmlspecialchars(\n        ?string $string = '',\n        int $quoteStyle = ENT_HTML5,\n        string $charset = 'utf-8',\n        bool $doubleEncode = false\n    ): string {\n        return htmlspecialchars(\n            $string,\n            $quoteStyle,\n            $charset,\n            $doubleEncode\n        );\n    }\n\n    /**\n     * Convert all applicable characters to HTML entities.\n     *\n     * @param string $string The input string.\n     * @param int    $quoteStyle Quote style\n     * @param string $charset Character set, UTF-8 by default\n     * @param bool   $doubleEncode If set to false, no encoding of existing entities\n     * @return string\n     */\n    public static function htmlentities(\n        string $string,\n        int $quoteStyle = ENT_HTML5,\n        string $charset = 'utf-8',\n        bool $doubleEncode = false\n    ): string\n    {\n        return htmlentities(\n            $string,\n            $quoteStyle,\n            $charset,\n            $doubleEncode\n        );\n    }\n}\n"], "filenames": ["phpmyfaq/index.php", "phpmyfaq/search.php", "phpmyfaq/src/phpMyFAQ/Strings.php"], "buggy_code_start_loc": [552, 289, 308], "buggy_code_end_loc": [553, 290, 311], "fixing_code_start_loc": [552, 289, 308], "fixing_code_end_loc": [553, 290, 311], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.1.8.", "other": {"cve": {"id": "CVE-2022-3766", "sourceIdentifier": "security@huntr.dev", "published": "2022-10-31T11:15:10.247", "lastModified": "2022-11-01T17:41:06.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.1.8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.8", "matchCriteriaId": "268E620F-3F05-4A1E-A49B-046B7CC8796C"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/c7904f2236c6c0dd64c2226b90c30af0f7e5a72d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d9666520-4ff5-43bb-aacf-50c8e5570983", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/c7904f2236c6c0dd64c2226b90c30af0f7e5a72d"}}