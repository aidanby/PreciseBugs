{"buggy_code": ["<?php\n/**\n * @copyright Copyright (c) 2016 Morris Jobke <hey@morrisjobke.de>\n *\n * @author Arthur Schiwon <blizzz@arthur-schiwon.de>\n * @author blizzz <blizzz@arthur-schiwon.de>\n * @author Christoph Wurst <christoph@winzerhof-wurst.at>\n * @author Daniel Kesselberg <mail@danielkesselberg.de>\n * @author Joas Schilling <coding@schilljs.com>\n * @author Julius H\u00e4rtl <jus@bitgrid.net>\n * @author Morris Jobke <hey@morrisjobke.de>\n * @author Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\WorkflowEngine;\n\nuse Doctrine\\DBAL\\Exception;\nuse OCP\\Cache\\CappedMemoryCache;\nuse OCA\\WorkflowEngine\\AppInfo\\Application;\nuse OCA\\WorkflowEngine\\Check\\FileMimeType;\nuse OCA\\WorkflowEngine\\Check\\FileName;\nuse OCA\\WorkflowEngine\\Check\\FileSize;\nuse OCA\\WorkflowEngine\\Check\\FileSystemTags;\nuse OCA\\WorkflowEngine\\Check\\RequestRemoteAddress;\nuse OCA\\WorkflowEngine\\Check\\RequestTime;\nuse OCA\\WorkflowEngine\\Check\\RequestURL;\nuse OCA\\WorkflowEngine\\Check\\RequestUserAgent;\nuse OCA\\WorkflowEngine\\Check\\UserGroupMembership;\nuse OCA\\WorkflowEngine\\Entity\\File;\nuse OCA\\WorkflowEngine\\Helper\\ScopeContext;\nuse OCA\\WorkflowEngine\\Service\\Logger;\nuse OCA\\WorkflowEngine\\Service\\RuleMatcher;\nuse OCP\\AppFramework\\QueryException;\nuse OCP\\DB\\QueryBuilder\\IQueryBuilder;\nuse OCP\\EventDispatcher\\IEventDispatcher;\nuse OCP\\Files\\Storage\\IStorage;\nuse OCP\\IConfig;\nuse OCP\\IDBConnection;\nuse OCP\\IL10N;\nuse OCP\\ILogger;\nuse OCP\\IServerContainer;\nuse OCP\\IUserSession;\nuse OCP\\WorkflowEngine\\Events\\RegisterChecksEvent;\nuse OCP\\WorkflowEngine\\Events\\RegisterEntitiesEvent;\nuse OCP\\WorkflowEngine\\Events\\RegisterOperationsEvent;\nuse OCP\\WorkflowEngine\\ICheck;\nuse OCP\\WorkflowEngine\\IComplexOperation;\nuse OCP\\WorkflowEngine\\IEntity;\nuse OCP\\WorkflowEngine\\IEntityEvent;\nuse OCP\\WorkflowEngine\\IManager;\nuse OCP\\WorkflowEngine\\IOperation;\nuse OCP\\WorkflowEngine\\IRuleMatcher;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface as LegacyDispatcher;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\nclass Manager implements IManager {\n\n\t/** @var IStorage */\n\tprotected $storage;\n\n\t/** @var string */\n\tprotected $path;\n\n\t/** @var object */\n\tprotected $entity;\n\n\t/** @var array[] */\n\tprotected $operations = [];\n\n\t/** @var array[] */\n\tprotected $checks = [];\n\n\t/** @var IDBConnection */\n\tprotected $connection;\n\n\t/** @var IServerContainer|\\OC\\Server */\n\tprotected $container;\n\n\t/** @var IL10N */\n\tprotected $l;\n\n\t/** @var LegacyDispatcher */\n\tprotected $legacyEventDispatcher;\n\n\t/** @var IEntity[] */\n\tprotected $registeredEntities = [];\n\n\t/** @var IOperation[] */\n\tprotected $registeredOperators = [];\n\n\t/** @var ICheck[] */\n\tprotected $registeredChecks = [];\n\n\t/** @var ILogger */\n\tprotected $logger;\n\n\t/** @var CappedMemoryCache<int[]> */\n\tprotected CappedMemoryCache $operationsByScope;\n\n\t/** @var IUserSession */\n\tprotected $session;\n\n\t/** @var IEventDispatcher */\n\tprivate $dispatcher;\n\n\t/** @var IConfig */\n\tprivate $config;\n\n\tpublic function __construct(\n\t\tIDBConnection $connection,\n\t\tIServerContainer $container,\n\t\tIL10N $l,\n\t\tLegacyDispatcher $eventDispatcher,\n\t\tILogger $logger,\n\t\tIUserSession $session,\n\t\tIEventDispatcher $dispatcher,\n\t\tIConfig $config\n\t) {\n\t\t$this->connection = $connection;\n\t\t$this->container = $container;\n\t\t$this->l = $l;\n\t\t$this->legacyEventDispatcher = $eventDispatcher;\n\t\t$this->logger = $logger;\n\t\t$this->operationsByScope = new CappedMemoryCache(64);\n\t\t$this->session = $session;\n\t\t$this->dispatcher = $dispatcher;\n\t\t$this->config = $config;\n\t}\n\n\tpublic function getRuleMatcher(): IRuleMatcher {\n\t\treturn new RuleMatcher(\n\t\t\t$this->session,\n\t\t\t$this->container,\n\t\t\t$this->l,\n\t\t\t$this,\n\t\t\t$this->container->query(Logger::class)\n\t\t);\n\t}\n\n\tpublic function getAllConfiguredEvents() {\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$query->select('class', 'entity')\n\t\t\t->selectAlias($query->expr()->castColumn('events', IQueryBuilder::PARAM_STR), 'events')\n\t\t\t->from('flow_operations')\n\t\t\t->where($query->expr()->neq('events', $query->createNamedParameter('[]'), IQueryBuilder::PARAM_STR))\n\t\t\t->groupBy('class', 'entity', $query->expr()->castColumn('events', IQueryBuilder::PARAM_STR));\n\n\t\t$result = $query->execute();\n\t\t$operations = [];\n\t\twhile ($row = $result->fetch()) {\n\t\t\t$eventNames = \\json_decode($row['events']);\n\n\t\t\t$operation = $row['class'];\n\t\t\t$entity = $row['entity'];\n\n\t\t\t$operations[$operation] = $operations[$row['class']] ?? [];\n\t\t\t$operations[$operation][$entity] = $operations[$operation][$entity] ?? [];\n\n\t\t\t$operations[$operation][$entity] = array_unique(array_merge($operations[$operation][$entity], $eventNames ?? []));\n\t\t}\n\t\t$result->closeCursor();\n\n\t\treturn $operations;\n\t}\n\n\t/**\n\t * @param string $operationClass\n\t * @return ScopeContext[]\n\t */\n\tpublic function getAllConfiguredScopesForOperation(string $operationClass): array {\n\t\tstatic $scopesByOperation = [];\n\t\tif (isset($scopesByOperation[$operationClass])) {\n\t\t\treturn $scopesByOperation[$operationClass];\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$query->selectDistinct('s.type')\n\t\t\t->addSelect('s.value')\n\t\t\t->from('flow_operations', 'o')\n\t\t\t->leftJoin('o', 'flow_operations_scope', 's', $query->expr()->eq('o.id', 's.operation_id'))\n\t\t\t->where($query->expr()->eq('o.class', $query->createParameter('operationClass')));\n\n\t\t$query->setParameters(['operationClass' => $operationClass]);\n\t\t$result = $query->execute();\n\n\t\t$scopesByOperation[$operationClass] = [];\n\t\twhile ($row = $result->fetch()) {\n\t\t\t$scope = new ScopeContext($row['type'], $row['value']);\n\t\t\t$scopesByOperation[$operationClass][$scope->getHash()] = $scope;\n\t\t}\n\n\t\treturn $scopesByOperation[$operationClass];\n\t}\n\n\tpublic function getAllOperations(ScopeContext $scopeContext): array {\n\t\tif (isset($this->operations[$scopeContext->getHash()])) {\n\t\t\treturn $this->operations[$scopeContext->getHash()];\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$query->select('o.*')\n\t\t\t->selectAlias('s.type', 'scope_type')\n\t\t\t->selectAlias('s.value', 'scope_actor_id')\n\t\t\t->from('flow_operations', 'o')\n\t\t\t->leftJoin('o', 'flow_operations_scope', 's', $query->expr()->eq('o.id', 's.operation_id'))\n\t\t\t->where($query->expr()->eq('s.type', $query->createParameter('scope')));\n\n\t\tif ($scopeContext->getScope() === IManager::SCOPE_USER) {\n\t\t\t$query->andWhere($query->expr()->eq('s.value', $query->createParameter('scopeId')));\n\t\t}\n\n\t\t$query->setParameters(['scope' => $scopeContext->getScope(), 'scopeId' => $scopeContext->getScopeId()]);\n\t\t$result = $query->execute();\n\n\t\t$this->operations[$scopeContext->getHash()] = [];\n\t\twhile ($row = $result->fetch()) {\n\t\t\tif (!isset($this->operations[$scopeContext->getHash()][$row['class']])) {\n\t\t\t\t$this->operations[$scopeContext->getHash()][$row['class']] = [];\n\t\t\t}\n\t\t\t$this->operations[$scopeContext->getHash()][$row['class']][] = $row;\n\t\t}\n\n\t\treturn $this->operations[$scopeContext->getHash()];\n\t}\n\n\tpublic function getOperations(string $class, ScopeContext $scopeContext): array {\n\t\tif (!isset($this->operations[$scopeContext->getHash()])) {\n\t\t\t$this->getAllOperations($scopeContext);\n\t\t}\n\t\treturn $this->operations[$scopeContext->getHash()][$class] ?? [];\n\t}\n\n\t/**\n\t * @param int $id\n\t * @return array\n\t * @throws \\UnexpectedValueException\n\t */\n\tprotected function getOperation($id) {\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->select('*')\n\t\t\t->from('flow_operations')\n\t\t\t->where($query->expr()->eq('id', $query->createNamedParameter($id)));\n\t\t$result = $query->execute();\n\t\t$row = $result->fetch();\n\t\t$result->closeCursor();\n\n\t\tif ($row) {\n\t\t\treturn $row;\n\t\t}\n\n\t\tthrow new \\UnexpectedValueException($this->l->t('Operation #%s does not exist', [$id]));\n\t}\n\n\tprotected function insertOperation(\n\t\tstring $class,\n\t\tstring $name,\n\t\tarray $checkIds,\n\t\tstring $operation,\n\t\tstring $entity,\n\t\tarray $events\n\t): int {\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->insert('flow_operations')\n\t\t\t->values([\n\t\t\t\t'class' => $query->createNamedParameter($class),\n\t\t\t\t'name' => $query->createNamedParameter($name),\n\t\t\t\t'checks' => $query->createNamedParameter(json_encode(array_unique($checkIds))),\n\t\t\t\t'operation' => $query->createNamedParameter($operation),\n\t\t\t\t'entity' => $query->createNamedParameter($entity),\n\t\t\t\t'events' => $query->createNamedParameter(json_encode($events))\n\t\t\t]);\n\t\t$query->execute();\n\n\t\treturn $query->getLastInsertId();\n\t}\n\n\t/**\n\t * @param string $class\n\t * @param string $name\n\t * @param array[] $checks\n\t * @param string $operation\n\t * @return array The added operation\n\t * @throws \\UnexpectedValueException\n\t * @throw Exception\n\t */\n\tpublic function addOperation(\n\t\tstring $class,\n\t\tstring $name,\n\t\tarray $checks,\n\t\tstring $operation,\n\t\tScopeContext $scope,\n\t\tstring $entity,\n\t\tarray $events\n\t) {\n\t\t$this->validateOperation($class, $name, $checks, $operation, $entity, $events);\n\n\t\t$this->connection->beginTransaction();\n\n\t\ttry {\n\t\t\t$checkIds = [];\n\t\t\tforeach ($checks as $check) {\n\t\t\t\t$checkIds[] = $this->addCheck($check['class'], $check['operator'], $check['value']);\n\t\t\t}\n\n\t\t\t$id = $this->insertOperation($class, $name, $checkIds, $operation, $entity, $events);\n\t\t\t$this->addScope($id, $scope);\n\n\t\t\t$this->connection->commit();\n\t\t} catch (Exception $e) {\n\t\t\t$this->connection->rollBack();\n\t\t\tthrow $e;\n\t\t}\n\n\t\treturn $this->getOperation($id);\n\t}\n\n\tprotected function canModify(int $id, ScopeContext $scopeContext):bool {\n\t\tif (isset($this->operationsByScope[$scopeContext->getHash()])) {\n\t\t\treturn in_array($id, $this->operationsByScope[$scopeContext->getHash()], true);\n\t\t}\n\n\t\t$qb = $this->connection->getQueryBuilder();\n\t\t$qb = $qb->select('o.id')\n\t\t\t->from('flow_operations', 'o')\n\t\t\t->leftJoin('o', 'flow_operations_scope', 's', $qb->expr()->eq('o.id', 's.operation_id'))\n\t\t\t->where($qb->expr()->eq('s.type', $qb->createParameter('scope')));\n\n\t\tif ($scopeContext->getScope() !== IManager::SCOPE_ADMIN) {\n\t\t\t$qb->where($qb->expr()->eq('s.value', $qb->createParameter('scopeId')));\n\t\t}\n\n\t\t$qb->setParameters(['scope' => $scopeContext->getScope(), 'scopeId' => $scopeContext->getScopeId()]);\n\t\t$result = $qb->execute();\n\n\t\t$operations = [];\n\t\twhile (($opId = $result->fetchOne()) !== false) {\n\t\t\t$operations[] = (int)$opId;\n\t\t}\n\t\t$this->operationsByScope[$scopeContext->getHash()] = $operations;\n\t\t$result->closeCursor();\n\n\t\treturn in_array($id, $this->operationsByScope[$scopeContext->getHash()], true);\n\t}\n\n\t/**\n\t * @param int $id\n\t * @param string $name\n\t * @param array[] $checks\n\t * @param string $operation\n\t * @return array The updated operation\n\t * @throws \\UnexpectedValueException\n\t * @throws \\DomainException\n\t * @throws Exception\n\t */\n\tpublic function updateOperation(\n\t\tint $id,\n\t\tstring $name,\n\t\tarray $checks,\n\t\tstring $operation,\n\t\tScopeContext $scopeContext,\n\t\tstring $entity,\n\t\tarray $events\n\t): array {\n\t\tif (!$this->canModify($id, $scopeContext)) {\n\t\t\tthrow new \\DomainException('Target operation not within scope');\n\t\t};\n\t\t$row = $this->getOperation($id);\n\t\t$this->validateOperation($row['class'], $name, $checks, $operation, $entity, $events);\n\n\t\t$checkIds = [];\n\t\ttry {\n\t\t\t$this->connection->beginTransaction();\n\t\t\tforeach ($checks as $check) {\n\t\t\t\t$checkIds[] = $this->addCheck($check['class'], $check['operator'], $check['value']);\n\t\t\t}\n\n\t\t\t$query = $this->connection->getQueryBuilder();\n\t\t\t$query->update('flow_operations')\n\t\t\t\t->set('name', $query->createNamedParameter($name))\n\t\t\t\t->set('checks', $query->createNamedParameter(json_encode(array_unique($checkIds))))\n\t\t\t\t->set('operation', $query->createNamedParameter($operation))\n\t\t\t\t->set('entity', $query->createNamedParameter($entity))\n\t\t\t\t->set('events', $query->createNamedParameter(json_encode($events)))\n\t\t\t\t->where($query->expr()->eq('id', $query->createNamedParameter($id)));\n\t\t\t$query->execute();\n\t\t\t$this->connection->commit();\n\t\t} catch (Exception $e) {\n\t\t\t$this->connection->rollBack();\n\t\t\tthrow $e;\n\t\t}\n\t\tunset($this->operations[$scopeContext->getHash()]);\n\n\t\treturn $this->getOperation($id);\n\t}\n\n\t/**\n\t * @param int $id\n\t * @return bool\n\t * @throws \\UnexpectedValueException\n\t * @throws Exception\n\t * @throws \\DomainException\n\t */\n\tpublic function deleteOperation($id, ScopeContext $scopeContext) {\n\t\tif (!$this->canModify($id, $scopeContext)) {\n\t\t\tthrow new \\DomainException('Target operation not within scope');\n\t\t};\n\t\t$query = $this->connection->getQueryBuilder();\n\t\ttry {\n\t\t\t$this->connection->beginTransaction();\n\t\t\t$result = (bool)$query->delete('flow_operations')\n\t\t\t\t->where($query->expr()->eq('id', $query->createNamedParameter($id)))\n\t\t\t\t->execute();\n\t\t\tif ($result) {\n\t\t\t\t$qb = $this->connection->getQueryBuilder();\n\t\t\t\t$result &= (bool)$qb->delete('flow_operations_scope')\n\t\t\t\t\t->where($qb->expr()->eq('operation_id', $qb->createNamedParameter($id)))\n\t\t\t\t\t->execute();\n\t\t\t}\n\t\t\t$this->connection->commit();\n\t\t} catch (Exception $e) {\n\t\t\t$this->connection->rollBack();\n\t\t\tthrow $e;\n\t\t}\n\n\t\tif (isset($this->operations[$scopeContext->getHash()])) {\n\t\t\tunset($this->operations[$scopeContext->getHash()]);\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\tprotected function validateEvents(string $entity, array $events, IOperation $operation) {\n\t\ttry {\n\t\t\t/** @var IEntity $instance */\n\t\t\t$instance = $this->container->query($entity);\n\t\t} catch (QueryException $e) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Entity %s does not exist', [$entity]));\n\t\t}\n\n\t\tif (!$instance instanceof IEntity) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Entity %s is invalid', [$entity]));\n\t\t}\n\n\t\tif (empty($events)) {\n\t\t\tif (!$operation instanceof IComplexOperation) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('No events are chosen.'));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t$availableEvents = [];\n\t\tforeach ($instance->getEvents() as $event) {\n\t\t\t/** @var IEntityEvent $event */\n\t\t\t$availableEvents[] = $event->getEventName();\n\t\t}\n\n\t\t$diff = array_diff($events, $availableEvents);\n\t\tif (!empty($diff)) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Entity %s has no event %s', [$entity, array_shift($diff)]));\n\t\t}\n\t}\n\n\t/**\n\t * @param string $class\n\t * @param string $name\n\t * @param array[] $checks\n\t * @param string $operation\n\t * @throws \\UnexpectedValueException\n\t */\n\tpublic function validateOperation($class, $name, array $checks, $operation, string $entity, array $events) {\n\t\ttry {\n\t\t\t/** @var IOperation $instance */\n\t\t\t$instance = $this->container->query($class);\n\t\t} catch (QueryException $e) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Operation %s does not exist', [$class]));\n\t\t}\n\n\t\tif (!($instance instanceof IOperation)) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Operation %s is invalid', [$class]));\n\t\t}\n\n\t\t$this->validateEvents($entity, $events, $instance);\n\n\t\tif (count($checks) === 0) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('At least one check needs to be provided'));\n\t\t}\n\n\t\tif (strlen((string)$operation) > IManager::MAX_OPERATION_VALUE_BYTES) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('The provided operation data is too long'));\n\t\t}\n\n\t\t$instance->validateOperation($name, $checks, $operation);\n\n\t\tforeach ($checks as $check) {\n\t\t\tif (!is_string($check['class'])) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Invalid check provided'));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t/** @var ICheck $instance */\n\t\t\t\t$instance = $this->container->query($check['class']);\n\t\t\t} catch (QueryException $e) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check %s does not exist', [$class]));\n\t\t\t}\n\n\t\t\tif (!($instance instanceof ICheck)) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check %s is invalid', [$class]));\n\t\t\t}\n\n\t\t\tif (!empty($instance->supportedEntities())\n\t\t\t\t&& !in_array($entity, $instance->supportedEntities())\n\t\t\t) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check %s is not allowed with this entity', [$class]));\n\t\t\t}\n\n\t\t\tif (strlen((string)$check['value']) > IManager::MAX_CHECK_VALUE_BYTES) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('The provided check value is too long'));\n\t\t\t}\n\n\t\t\t$instance->validateCheck($check['operator'], $check['value']);\n\t\t}\n\t}\n\n\t/**\n\t * @param int[] $checkIds\n\t * @return array[]\n\t */\n\tpublic function getChecks(array $checkIds) {\n\t\t$checkIds = array_map('intval', $checkIds);\n\n\t\t$checks = [];\n\t\tforeach ($checkIds as $i => $checkId) {\n\t\t\tif (isset($this->checks[$checkId])) {\n\t\t\t\t$checks[$checkId] = $this->checks[$checkId];\n\t\t\t\tunset($checkIds[$i]);\n\t\t\t}\n\t\t}\n\n\t\tif (empty($checkIds)) {\n\t\t\treturn $checks;\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->select('*')\n\t\t\t->from('flow_checks')\n\t\t\t->where($query->expr()->in('id', $query->createNamedParameter($checkIds, IQueryBuilder::PARAM_INT_ARRAY)));\n\t\t$result = $query->execute();\n\n\t\twhile ($row = $result->fetch()) {\n\t\t\t$this->checks[(int) $row['id']] = $row;\n\t\t\t$checks[(int) $row['id']] = $row;\n\t\t}\n\t\t$result->closeCursor();\n\n\t\t$checkIds = array_diff($checkIds, array_keys($checks));\n\n\t\tif (!empty($checkIds)) {\n\t\t\t$missingCheck = array_pop($checkIds);\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check #%s does not exist', $missingCheck));\n\t\t}\n\n\t\treturn $checks;\n\t}\n\n\t/**\n\t * @param string $class\n\t * @param string $operator\n\t * @param string $value\n\t * @return int Check unique ID\n\t */\n\tprotected function addCheck($class, $operator, $value) {\n\t\t$hash = md5($class . '::' . $operator . '::' . $value);\n\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->select('id')\n\t\t\t->from('flow_checks')\n\t\t\t->where($query->expr()->eq('hash', $query->createNamedParameter($hash)));\n\t\t$result = $query->execute();\n\n\t\tif ($row = $result->fetch()) {\n\t\t\t$result->closeCursor();\n\t\t\treturn (int) $row['id'];\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->insert('flow_checks')\n\t\t\t->values([\n\t\t\t\t'class' => $query->createNamedParameter($class),\n\t\t\t\t'operator' => $query->createNamedParameter($operator),\n\t\t\t\t'value' => $query->createNamedParameter($value),\n\t\t\t\t'hash' => $query->createNamedParameter($hash),\n\t\t\t]);\n\t\t$query->execute();\n\n\t\treturn $query->getLastInsertId();\n\t}\n\n\tprotected function addScope(int $operationId, ScopeContext $scope): void {\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$insertQuery = $query->insert('flow_operations_scope');\n\t\t$insertQuery->values([\n\t\t\t'operation_id' => $query->createNamedParameter($operationId),\n\t\t\t'type' => $query->createNamedParameter($scope->getScope()),\n\t\t\t'value' => $query->createNamedParameter($scope->getScopeId()),\n\t\t]);\n\t\t$insertQuery->execute();\n\t}\n\n\tpublic function formatOperation(array $operation): array {\n\t\t$checkIds = json_decode($operation['checks'], true);\n\t\t$checks = $this->getChecks($checkIds);\n\n\t\t$operation['checks'] = [];\n\t\tforeach ($checks as $check) {\n\t\t\t// Remove internal values\n\t\t\tunset($check['id']);\n\t\t\tunset($check['hash']);\n\n\t\t\t$operation['checks'][] = $check;\n\t\t}\n\t\t$operation['events'] = json_decode($operation['events'], true) ?? [];\n\n\n\t\treturn $operation;\n\t}\n\n\t/**\n\t * @return IEntity[]\n\t */\n\tpublic function getEntitiesList(): array {\n\t\t$this->dispatcher->dispatchTyped(new RegisterEntitiesEvent($this));\n\t\t$this->legacyEventDispatcher->dispatch(IManager::EVENT_NAME_REG_ENTITY, new GenericEvent($this));\n\n\t\treturn array_values(array_merge($this->getBuildInEntities(), $this->registeredEntities));\n\t}\n\n\t/**\n\t * @return IOperation[]\n\t */\n\tpublic function getOperatorList(): array {\n\t\t$this->dispatcher->dispatchTyped(new RegisterOperationsEvent($this));\n\t\t$this->legacyEventDispatcher->dispatch(IManager::EVENT_NAME_REG_OPERATION, new GenericEvent($this));\n\n\t\treturn array_merge($this->getBuildInOperators(), $this->registeredOperators);\n\t}\n\n\t/**\n\t * @return ICheck[]\n\t */\n\tpublic function getCheckList(): array {\n\t\t$this->dispatcher->dispatchTyped(new RegisterChecksEvent($this));\n\t\t$this->legacyEventDispatcher->dispatch(IManager::EVENT_NAME_REG_CHECK, new GenericEvent($this));\n\n\t\treturn array_merge($this->getBuildInChecks(), $this->registeredChecks);\n\t}\n\n\tpublic function registerEntity(IEntity $entity): void {\n\t\t$this->registeredEntities[get_class($entity)] = $entity;\n\t}\n\n\tpublic function registerOperation(IOperation $operator): void {\n\t\t$this->registeredOperators[get_class($operator)] = $operator;\n\t}\n\n\tpublic function registerCheck(ICheck $check): void {\n\t\t$this->registeredChecks[get_class($check)] = $check;\n\t}\n\n\t/**\n\t * @return IEntity[]\n\t */\n\tprotected function getBuildInEntities(): array {\n\t\ttry {\n\t\t\treturn [\n\t\t\t\tFile::class => $this->container->query(File::class),\n\t\t\t];\n\t\t} catch (QueryException $e) {\n\t\t\t$this->logger->logException($e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * @return IOperation[]\n\t */\n\tprotected function getBuildInOperators(): array {\n\t\ttry {\n\t\t\treturn [\n\t\t\t\t// None yet\n\t\t\t];\n\t\t} catch (QueryException $e) {\n\t\t\t$this->logger->logException($e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * @return ICheck[]\n\t */\n\tprotected function getBuildInChecks(): array {\n\t\ttry {\n\t\t\treturn [\n\t\t\t\t$this->container->query(FileMimeType::class),\n\t\t\t\t$this->container->query(FileName::class),\n\t\t\t\t$this->container->query(FileSize::class),\n\t\t\t\t$this->container->query(FileSystemTags::class),\n\t\t\t\t$this->container->query(RequestRemoteAddress::class),\n\t\t\t\t$this->container->query(RequestTime::class),\n\t\t\t\t$this->container->query(RequestURL::class),\n\t\t\t\t$this->container->query(RequestUserAgent::class),\n\t\t\t\t$this->container->query(UserGroupMembership::class),\n\t\t\t];\n\t\t} catch (QueryException $e) {\n\t\t\t$this->logger->logException($e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpublic function isUserScopeEnabled(): bool {\n\t\treturn $this->config->getAppValue(Application::APP_ID, 'user_scope_disabled', 'no') === 'no';\n\t}\n}\n", "<?php\n/**\n * @copyright Copyright (c) 2016 Joas Schilling <coding@schilljs.com>\n *\n * @author Arthur Schiwon <blizzz@arthur-schiwon.de>\n * @author Christoph Wurst <christoph@winzerhof-wurst.at>\n * @author Joas Schilling <coding@schilljs.com>\n * @author Julius H\u00e4rtl <jus@bitgrid.net>\n * @author Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\WorkflowEngine\\Tests;\n\nuse OC\\L10N\\L10N;\nuse OCA\\WorkflowEngine\\Entity\\File;\nuse OCA\\WorkflowEngine\\Helper\\ScopeContext;\nuse OCA\\WorkflowEngine\\Manager;\nuse OCP\\EventDispatcher\\IEventDispatcher;\nuse OCP\\Files\\IRootFolder;\nuse OCP\\IConfig;\nuse OCP\\IDBConnection;\nuse OCP\\IL10N;\nuse OCP\\ILogger;\nuse OCP\\IServerContainer;\nuse OCP\\IURLGenerator;\nuse OCP\\IUserManager;\nuse OCP\\IUserSession;\nuse OCP\\SystemTag\\ISystemTagManager;\nuse OCP\\WorkflowEngine\\ICheck;\nuse OCP\\WorkflowEngine\\IEntity;\nuse OCP\\WorkflowEngine\\IEntityEvent;\nuse OCP\\WorkflowEngine\\IManager;\nuse OCP\\WorkflowEngine\\IOperation;\nuse PHPUnit\\Framework\\MockObject\\MockObject;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Test\\TestCase;\n\n/**\n * Class ManagerTest\n *\n * @package OCA\\WorkflowEngine\\Tests\n * @group DB\n */\nclass ManagerTest extends TestCase {\n\n\t/** @var Manager */\n\tprotected $manager;\n\t/** @var MockObject|IDBConnection */\n\tprotected $db;\n\t/** @var \\PHPUnit\\Framework\\MockObject\\MockObject|ILogger */\n\tprotected $logger;\n\t/** @var \\PHPUnit\\Framework\\MockObject\\MockObject|EventDispatcherInterface */\n\tprotected $legacyDispatcher;\n\t/** @var MockObject|IServerContainer */\n\tprotected $container;\n\t/** @var MockObject|IUserSession */\n\tprotected $session;\n\t/** @var MockObject|L10N */\n\tprotected $l;\n\t/** @var MockObject|IEventDispatcher */\n\tprotected $dispatcher;\n\t/** @var MockObject|IConfig */\n\tprotected $config;\n\n\tprotected function setUp(): void {\n\t\tparent::setUp();\n\n\t\t$this->db = \\OC::$server->getDatabaseConnection();\n\t\t$this->container = $this->createMock(IServerContainer::class);\n\t\t/** @var IL10N|MockObject $l */\n\t\t$this->l = $this->createMock(IL10N::class);\n\t\t$this->l->method('t')\n\t\t\t->willReturnCallback(function ($text, $parameters = []) {\n\t\t\t\treturn vsprintf($text, $parameters);\n\t\t\t});\n\n\t\t$this->legacyDispatcher = $this->createMock(EventDispatcherInterface::class);\n\t\t$this->logger = $this->createMock(ILogger::class);\n\t\t$this->session = $this->createMock(IUserSession::class);\n\t\t$this->dispatcher = $this->createMock(IEventDispatcher::class);\n\t\t$this->config = $this->createMock(IConfig::class);\n\n\t\t$this->manager = new Manager(\n\t\t\t\\OC::$server->getDatabaseConnection(),\n\t\t\t$this->container,\n\t\t\t$this->l,\n\t\t\t$this->legacyDispatcher,\n\t\t\t$this->logger,\n\t\t\t$this->session,\n\t\t\t$this->dispatcher,\n\t\t\t$this->config\n\t\t);\n\t\t$this->clearTables();\n\t}\n\n\tprotected function tearDown(): void {\n\t\t$this->clearTables();\n\t\tparent::tearDown();\n\t}\n\n\t/**\n\t * @return MockObject|ScopeContext\n\t */\n\tprotected function buildScope(string $scopeId = null): MockObject {\n\t\t$scopeContext = $this->createMock(ScopeContext::class);\n\t\t$scopeContext->expects($this->any())\n\t\t\t->method('getScope')\n\t\t\t->willReturn($scopeId ? IManager::SCOPE_USER : IManager::SCOPE_ADMIN);\n\t\t$scopeContext->expects($this->any())\n\t\t\t->method('getScopeId')\n\t\t\t->willReturn($scopeId ?? '');\n\t\t$scopeContext->expects($this->any())\n\t\t\t->method('getHash')\n\t\t\t->willReturn(md5($scopeId ?? ''));\n\n\t\treturn $scopeContext;\n\t}\n\n\tpublic function clearTables() {\n\t\t$query = $this->db->getQueryBuilder();\n\t\tforeach (['flow_checks', 'flow_operations', 'flow_operations_scope'] as $table) {\n\t\t\t$query->delete($table)\n\t\t\t\t->execute();\n\t\t}\n\t}\n\n\tpublic function testChecks() {\n\t\t$check1 = $this->invokePrivate($this->manager, 'addCheck', ['Test', 'equal', 1]);\n\t\t$check2 = $this->invokePrivate($this->manager, 'addCheck', ['Test', '!equal', 2]);\n\n\t\t$data = $this->manager->getChecks([$check1]);\n\t\t$this->assertArrayHasKey($check1, $data);\n\t\t$this->assertArrayNotHasKey($check2, $data);\n\n\t\t$data = $this->manager->getChecks([$check1, $check2]);\n\t\t$this->assertArrayHasKey($check1, $data);\n\t\t$this->assertArrayHasKey($check2, $data);\n\n\t\t$data = $this->manager->getChecks([$check2, $check1]);\n\t\t$this->assertArrayHasKey($check1, $data);\n\t\t$this->assertArrayHasKey($check2, $data);\n\n\t\t$data = $this->manager->getChecks([$check2]);\n\t\t$this->assertArrayNotHasKey($check1, $data);\n\t\t$this->assertArrayHasKey($check2, $data);\n\t}\n\n\tpublic function testScope() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\t\t$opId3 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test03', [11, 44], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId3, $userScope]);\n\n\t\t$this->assertTrue($this->invokePrivate($this->manager, 'canModify', [$opId1, $adminScope]));\n\t\t$this->assertFalse($this->invokePrivate($this->manager, 'canModify', [$opId2, $adminScope]));\n\t\t$this->assertFalse($this->invokePrivate($this->manager, 'canModify', [$opId3, $adminScope]));\n\n\t\t$this->assertFalse($this->invokePrivate($this->manager, 'canModify', [$opId1, $userScope]));\n\t\t$this->assertTrue($this->invokePrivate($this->manager, 'canModify', [$opId2, $userScope]));\n\t\t$this->assertTrue($this->invokePrivate($this->manager, 'canModify', [$opId3, $userScope]));\n\t}\n\n\tpublic function testGetAllOperations() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestAdminOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\t\t$opId3 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test03', [11, 44], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId3, $userScope]);\n\n\t\t$adminOps = $this->manager->getAllOperations($adminScope);\n\t\t$userOps = $this->manager->getAllOperations($userScope);\n\n\t\t$this->assertSame(1, count($adminOps));\n\t\t$this->assertTrue(array_key_exists('OCA\\WFE\\TestAdminOp', $adminOps));\n\t\t$this->assertFalse(array_key_exists('OCA\\WFE\\TestUserOp', $adminOps));\n\n\t\t$this->assertSame(1, count($userOps));\n\t\t$this->assertFalse(array_key_exists('OCA\\WFE\\TestAdminOp', $userOps));\n\t\t$this->assertTrue(array_key_exists('OCA\\WFE\\TestUserOp', $userOps));\n\t\t$this->assertSame(2, count($userOps['OCA\\WFE\\TestUserOp']));\n\t}\n\n\tpublic function testGetOperations() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\t\t$opId4 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\OtherTestOp', 'Test04', [5], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId4, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\t\t$opId3 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test03', [11, 44], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId3, $userScope]);\n\t\t$opId5 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\OtherTestOp', 'Test05', [5], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId5, $userScope]);\n\n\t\t$adminOps = $this->manager->getOperations('OCA\\WFE\\TestOp', $adminScope);\n\t\t$userOps = $this->manager->getOperations('OCA\\WFE\\TestOp', $userScope);\n\n\t\t$this->assertSame(1, count($adminOps));\n\t\tarray_walk($adminOps, function ($op) {\n\t\t\t$this->assertTrue($op['class'] === 'OCA\\WFE\\TestOp');\n\t\t});\n\n\t\t$this->assertSame(2, count($userOps));\n\t\tarray_walk($userOps, function ($op) {\n\t\t\t$this->assertTrue($op['class'] === 'OCA\\WFE\\TestOp');\n\t\t});\n\t}\n\n\tpublic function testUpdateOperation() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($class) {\n\t\t\t\tif (substr($class, -2) === 'Op') {\n\t\t\t\t\treturn $this->createMock(IOperation::class);\n\t\t\t\t} elseif ($class === File::class) {\n\t\t\t\t\treturn $this->getMockBuilder(File::class)\n\t\t\t\t\t\t->setConstructorArgs([\n\t\t\t\t\t\t\t$this->l,\n\t\t\t\t\t\t\t$this->createMock(IURLGenerator::class),\n\t\t\t\t\t\t\t$this->createMock(IRootFolder::class),\n\t\t\t\t\t\t\t$this->createMock(ILogger::class),\n\t\t\t\t\t\t\t$this->createMock(\\OCP\\Share\\IManager::class),\n\t\t\t\t\t\t\t$this->createMock(IUserSession::class),\n\t\t\t\t\t\t\t$this->createMock(ISystemTagManager::class),\n\t\t\t\t\t\t\t$this->createMock(IUserManager::class),\n\t\t\t\t\t\t])\n\t\t\t\t\t\t->setMethodsExcept(['getEvents'])\n\t\t\t\t\t\t->getMock();\n\t\t\t\t}\n\t\t\t\treturn $this->createMock(ICheck::class);\n\t\t\t});\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestAdminOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\n\t\t$check1 = ['class' => 'OCA\\WFE\\C22', 'operator' => 'eq', 'value' => 'asdf'];\n\t\t$check2 = ['class' => 'OCA\\WFE\\C33', 'operator' => 'eq', 'value' => 23456];\n\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$op = $this->manager->updateOperation($opId1, 'Test01a', [$check1, $check2], 'foohur', $adminScope, $entity, ['\\OCP\\Files::postDelete']);\n\t\t$this->assertSame('Test01a', $op['name']);\n\t\t$this->assertSame('foohur', $op['operation']);\n\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$op = $this->manager->updateOperation($opId2, 'Test02a', [$check1], 'barfoo', $userScope, $entity, ['\\OCP\\Files::postDelete']);\n\t\t$this->assertSame('Test02a', $op['name']);\n\t\t$this->assertSame('barfoo', $op['operation']);\n\n\t\tforeach ([[$adminScope, $opId2], [$userScope, $opId1]] as $run) {\n\t\t\ttry {\n\t\t\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t\t\t$this->manager->updateOperation($run[1], 'Evil', [$check2], 'hackx0r', $run[0], $entity, []);\n\t\t\t\t$this->assertTrue(false, 'DomainException not thrown');\n\t\t\t} catch (\\DomainException $e) {\n\t\t\t\t$this->assertTrue(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function testDeleteOperation() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestAdminOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\n\t\tforeach ([[$adminScope, $opId2], [$userScope, $opId1]] as $run) {\n\t\t\ttry {\n\t\t\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t\t\t$this->manager->deleteOperation($run[1], $run[0]);\n\t\t\t\t$this->assertTrue(false, 'DomainException not thrown');\n\t\t\t} catch (\\Exception $e) {\n\t\t\t\t$this->assertInstanceOf(\\DomainException::class, $e);\n\t\t\t}\n\t\t}\n\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$this->manager->deleteOperation($opId1, $adminScope);\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$this->manager->deleteOperation($opId2, $userScope);\n\n\t\tforeach ([$opId1, $opId2] as $opId) {\n\t\t\ttry {\n\t\t\t\t$this->invokePrivate($this->manager, 'getOperation', [$opId]);\n\t\t\t\t$this->assertTrue(false, 'UnexpectedValueException not thrown');\n\t\t\t} catch (\\Exception $e) {\n\t\t\t\t$this->assertInstanceOf(\\UnexpectedValueException::class, $e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function testGetEntitiesListBuildInOnly() {\n\t\t$fileEntityMock = $this->createMock(File::class);\n\n\t\t$this->container->expects($this->once())\n\t\t\t->method('query')\n\t\t\t->with(File::class)\n\t\t\t->willReturn($fileEntityMock);\n\n\t\t$entities = $this->manager->getEntitiesList();\n\n\t\t$this->assertCount(1, $entities);\n\t\t$this->assertInstanceOf(IEntity::class, $entities[0]);\n\t}\n\n\tpublic function testGetEntitiesList() {\n\t\t$fileEntityMock = $this->createMock(File::class);\n\n\t\t$this->container->expects($this->once())\n\t\t\t->method('query')\n\t\t\t->with(File::class)\n\t\t\t->willReturn($fileEntityMock);\n\n\t\t/** @var MockObject|IEntity $extraEntity */\n\t\t$extraEntity = $this->createMock(IEntity::class);\n\n\t\t$this->legacyDispatcher->expects($this->once())\n\t\t\t->method('dispatch')\n\t\t\t->with('OCP\\WorkflowEngine::registerEntities', $this->anything())\n\t\t\t->willReturnCallback(function () use ($extraEntity) {\n\t\t\t\t$this->manager->registerEntity($extraEntity);\n\t\t\t});\n\n\t\t$entities = $this->manager->getEntitiesList();\n\n\t\t$this->assertCount(2, $entities);\n\n\t\t$entityTypeCounts = array_reduce($entities, function (array $carry, IEntity $entity) {\n\t\t\tif ($entity instanceof File) {\n\t\t\t\t$carry[0]++;\n\t\t\t} elseif ($entity instanceof IEntity) {\n\t\t\t\t$carry[1]++;\n\t\t\t}\n\t\t\treturn $carry;\n\t\t}, [0, 0]);\n\n\t\t$this->assertSame(1, $entityTypeCounts[0]);\n\t\t$this->assertSame(1, $entityTypeCounts[1]);\n\t}\n\n\tpublic function testValidateOperationOK() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => 'barfoo',\n\t\t];\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('validateOperation')\n\t\t\t->with('test', [$check], 'operationData');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->atLeastOnce())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], 'operationData', IEntity::class, ['MyEvent']);\n\t}\n\n\tpublic function testValidateOperationCheckInputLengthError() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => str_pad('', IManager::MAX_CHECK_VALUE_BYTES + 1, 'FooBar'),\n\t\t];\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('validateOperation')\n\t\t\t->with('test', [$check], 'operationData');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->never())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\ttry {\n\t\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], 'operationData', IEntity::class, ['MyEvent']);\n\t\t} catch (\\UnexpectedValueException $e) {\n\t\t\t$this->assertSame('The provided check value is too long', $e->getMessage());\n\t\t}\n\t}\n\n\tpublic function testValidateOperationDataLengthError() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => 'barfoo',\n\t\t];\n\t\t$operationData = str_pad('', IManager::MAX_OPERATION_VALUE_BYTES + 1, 'FooBar');\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\n\t\t$operationMock->expects($this->never())\n\t\t\t->method('validateOperation');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->never())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\ttry {\n\t\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], $operationData, IEntity::class, ['MyEvent']);\n\t\t} catch (\\UnexpectedValueException $e) {\n\t\t\t$this->assertSame('The provided operation data is too long', $e->getMessage());\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * @copyright Copyright (c) 2016 Morris Jobke <hey@morrisjobke.de>\n *\n * @author Arthur Schiwon <blizzz@arthur-schiwon.de>\n * @author blizzz <blizzz@arthur-schiwon.de>\n * @author Christoph Wurst <christoph@winzerhof-wurst.at>\n * @author Daniel Kesselberg <mail@danielkesselberg.de>\n * @author Joas Schilling <coding@schilljs.com>\n * @author Julius H\u00e4rtl <jus@bitgrid.net>\n * @author Morris Jobke <hey@morrisjobke.de>\n * @author Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\WorkflowEngine;\n\nuse Doctrine\\DBAL\\Exception;\nuse OCP\\Cache\\CappedMemoryCache;\nuse OCA\\WorkflowEngine\\AppInfo\\Application;\nuse OCA\\WorkflowEngine\\Check\\FileMimeType;\nuse OCA\\WorkflowEngine\\Check\\FileName;\nuse OCA\\WorkflowEngine\\Check\\FileSize;\nuse OCA\\WorkflowEngine\\Check\\FileSystemTags;\nuse OCA\\WorkflowEngine\\Check\\RequestRemoteAddress;\nuse OCA\\WorkflowEngine\\Check\\RequestTime;\nuse OCA\\WorkflowEngine\\Check\\RequestURL;\nuse OCA\\WorkflowEngine\\Check\\RequestUserAgent;\nuse OCA\\WorkflowEngine\\Check\\UserGroupMembership;\nuse OCA\\WorkflowEngine\\Entity\\File;\nuse OCA\\WorkflowEngine\\Helper\\ScopeContext;\nuse OCA\\WorkflowEngine\\Service\\Logger;\nuse OCA\\WorkflowEngine\\Service\\RuleMatcher;\nuse OCP\\AppFramework\\QueryException;\nuse OCP\\DB\\QueryBuilder\\IQueryBuilder;\nuse OCP\\EventDispatcher\\IEventDispatcher;\nuse OCP\\Files\\Storage\\IStorage;\nuse OCP\\IConfig;\nuse OCP\\IDBConnection;\nuse OCP\\IL10N;\nuse OCP\\ILogger;\nuse OCP\\IServerContainer;\nuse OCP\\IUserSession;\nuse OCP\\WorkflowEngine\\Events\\RegisterChecksEvent;\nuse OCP\\WorkflowEngine\\Events\\RegisterEntitiesEvent;\nuse OCP\\WorkflowEngine\\Events\\RegisterOperationsEvent;\nuse OCP\\WorkflowEngine\\ICheck;\nuse OCP\\WorkflowEngine\\IComplexOperation;\nuse OCP\\WorkflowEngine\\IEntity;\nuse OCP\\WorkflowEngine\\IEntityEvent;\nuse OCP\\WorkflowEngine\\IManager;\nuse OCP\\WorkflowEngine\\IOperation;\nuse OCP\\WorkflowEngine\\IRuleMatcher;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface as LegacyDispatcher;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\nclass Manager implements IManager {\n\n\t/** @var IStorage */\n\tprotected $storage;\n\n\t/** @var string */\n\tprotected $path;\n\n\t/** @var object */\n\tprotected $entity;\n\n\t/** @var array[] */\n\tprotected $operations = [];\n\n\t/** @var array[] */\n\tprotected $checks = [];\n\n\t/** @var IDBConnection */\n\tprotected $connection;\n\n\t/** @var IServerContainer|\\OC\\Server */\n\tprotected $container;\n\n\t/** @var IL10N */\n\tprotected $l;\n\n\t/** @var LegacyDispatcher */\n\tprotected $legacyEventDispatcher;\n\n\t/** @var IEntity[] */\n\tprotected $registeredEntities = [];\n\n\t/** @var IOperation[] */\n\tprotected $registeredOperators = [];\n\n\t/** @var ICheck[] */\n\tprotected $registeredChecks = [];\n\n\t/** @var ILogger */\n\tprotected $logger;\n\n\t/** @var CappedMemoryCache<int[]> */\n\tprotected CappedMemoryCache $operationsByScope;\n\n\t/** @var IUserSession */\n\tprotected $session;\n\n\t/** @var IEventDispatcher */\n\tprivate $dispatcher;\n\n\t/** @var IConfig */\n\tprivate $config;\n\n\tpublic function __construct(\n\t\tIDBConnection $connection,\n\t\tIServerContainer $container,\n\t\tIL10N $l,\n\t\tLegacyDispatcher $eventDispatcher,\n\t\tILogger $logger,\n\t\tIUserSession $session,\n\t\tIEventDispatcher $dispatcher,\n\t\tIConfig $config\n\t) {\n\t\t$this->connection = $connection;\n\t\t$this->container = $container;\n\t\t$this->l = $l;\n\t\t$this->legacyEventDispatcher = $eventDispatcher;\n\t\t$this->logger = $logger;\n\t\t$this->operationsByScope = new CappedMemoryCache(64);\n\t\t$this->session = $session;\n\t\t$this->dispatcher = $dispatcher;\n\t\t$this->config = $config;\n\t}\n\n\tpublic function getRuleMatcher(): IRuleMatcher {\n\t\treturn new RuleMatcher(\n\t\t\t$this->session,\n\t\t\t$this->container,\n\t\t\t$this->l,\n\t\t\t$this,\n\t\t\t$this->container->query(Logger::class)\n\t\t);\n\t}\n\n\tpublic function getAllConfiguredEvents() {\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$query->select('class', 'entity')\n\t\t\t->selectAlias($query->expr()->castColumn('events', IQueryBuilder::PARAM_STR), 'events')\n\t\t\t->from('flow_operations')\n\t\t\t->where($query->expr()->neq('events', $query->createNamedParameter('[]'), IQueryBuilder::PARAM_STR))\n\t\t\t->groupBy('class', 'entity', $query->expr()->castColumn('events', IQueryBuilder::PARAM_STR));\n\n\t\t$result = $query->execute();\n\t\t$operations = [];\n\t\twhile ($row = $result->fetch()) {\n\t\t\t$eventNames = \\json_decode($row['events']);\n\n\t\t\t$operation = $row['class'];\n\t\t\t$entity = $row['entity'];\n\n\t\t\t$operations[$operation] = $operations[$row['class']] ?? [];\n\t\t\t$operations[$operation][$entity] = $operations[$operation][$entity] ?? [];\n\n\t\t\t$operations[$operation][$entity] = array_unique(array_merge($operations[$operation][$entity], $eventNames ?? []));\n\t\t}\n\t\t$result->closeCursor();\n\n\t\treturn $operations;\n\t}\n\n\t/**\n\t * @param string $operationClass\n\t * @return ScopeContext[]\n\t */\n\tpublic function getAllConfiguredScopesForOperation(string $operationClass): array {\n\t\tstatic $scopesByOperation = [];\n\t\tif (isset($scopesByOperation[$operationClass])) {\n\t\t\treturn $scopesByOperation[$operationClass];\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$query->selectDistinct('s.type')\n\t\t\t->addSelect('s.value')\n\t\t\t->from('flow_operations', 'o')\n\t\t\t->leftJoin('o', 'flow_operations_scope', 's', $query->expr()->eq('o.id', 's.operation_id'))\n\t\t\t->where($query->expr()->eq('o.class', $query->createParameter('operationClass')));\n\n\t\t$query->setParameters(['operationClass' => $operationClass]);\n\t\t$result = $query->execute();\n\n\t\t$scopesByOperation[$operationClass] = [];\n\t\twhile ($row = $result->fetch()) {\n\t\t\t$scope = new ScopeContext($row['type'], $row['value']);\n\t\t\t$scopesByOperation[$operationClass][$scope->getHash()] = $scope;\n\t\t}\n\n\t\treturn $scopesByOperation[$operationClass];\n\t}\n\n\tpublic function getAllOperations(ScopeContext $scopeContext): array {\n\t\tif (isset($this->operations[$scopeContext->getHash()])) {\n\t\t\treturn $this->operations[$scopeContext->getHash()];\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$query->select('o.*')\n\t\t\t->selectAlias('s.type', 'scope_type')\n\t\t\t->selectAlias('s.value', 'scope_actor_id')\n\t\t\t->from('flow_operations', 'o')\n\t\t\t->leftJoin('o', 'flow_operations_scope', 's', $query->expr()->eq('o.id', 's.operation_id'))\n\t\t\t->where($query->expr()->eq('s.type', $query->createParameter('scope')));\n\n\t\tif ($scopeContext->getScope() === IManager::SCOPE_USER) {\n\t\t\t$query->andWhere($query->expr()->eq('s.value', $query->createParameter('scopeId')));\n\t\t}\n\n\t\t$query->setParameters(['scope' => $scopeContext->getScope(), 'scopeId' => $scopeContext->getScopeId()]);\n\t\t$result = $query->execute();\n\n\t\t$this->operations[$scopeContext->getHash()] = [];\n\t\twhile ($row = $result->fetch()) {\n\t\t\tif (!isset($this->operations[$scopeContext->getHash()][$row['class']])) {\n\t\t\t\t$this->operations[$scopeContext->getHash()][$row['class']] = [];\n\t\t\t}\n\t\t\t$this->operations[$scopeContext->getHash()][$row['class']][] = $row;\n\t\t}\n\n\t\treturn $this->operations[$scopeContext->getHash()];\n\t}\n\n\tpublic function getOperations(string $class, ScopeContext $scopeContext): array {\n\t\tif (!isset($this->operations[$scopeContext->getHash()])) {\n\t\t\t$this->getAllOperations($scopeContext);\n\t\t}\n\t\treturn $this->operations[$scopeContext->getHash()][$class] ?? [];\n\t}\n\n\t/**\n\t * @param int $id\n\t * @return array\n\t * @throws \\UnexpectedValueException\n\t */\n\tprotected function getOperation($id) {\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->select('*')\n\t\t\t->from('flow_operations')\n\t\t\t->where($query->expr()->eq('id', $query->createNamedParameter($id)));\n\t\t$result = $query->execute();\n\t\t$row = $result->fetch();\n\t\t$result->closeCursor();\n\n\t\tif ($row) {\n\t\t\treturn $row;\n\t\t}\n\n\t\tthrow new \\UnexpectedValueException($this->l->t('Operation #%s does not exist', [$id]));\n\t}\n\n\tprotected function insertOperation(\n\t\tstring $class,\n\t\tstring $name,\n\t\tarray $checkIds,\n\t\tstring $operation,\n\t\tstring $entity,\n\t\tarray $events\n\t): int {\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->insert('flow_operations')\n\t\t\t->values([\n\t\t\t\t'class' => $query->createNamedParameter($class),\n\t\t\t\t'name' => $query->createNamedParameter($name),\n\t\t\t\t'checks' => $query->createNamedParameter(json_encode(array_unique($checkIds))),\n\t\t\t\t'operation' => $query->createNamedParameter($operation),\n\t\t\t\t'entity' => $query->createNamedParameter($entity),\n\t\t\t\t'events' => $query->createNamedParameter(json_encode($events))\n\t\t\t]);\n\t\t$query->execute();\n\n\t\treturn $query->getLastInsertId();\n\t}\n\n\t/**\n\t * @param string $class\n\t * @param string $name\n\t * @param array[] $checks\n\t * @param string $operation\n\t * @return array The added operation\n\t * @throws \\UnexpectedValueException\n\t * @throw Exception\n\t */\n\tpublic function addOperation(\n\t\tstring $class,\n\t\tstring $name,\n\t\tarray $checks,\n\t\tstring $operation,\n\t\tScopeContext $scope,\n\t\tstring $entity,\n\t\tarray $events\n\t) {\n\t\t$this->validateOperation($class, $name, $checks, $operation, $scope, $entity, $events);\n\n\t\t$this->connection->beginTransaction();\n\n\t\ttry {\n\t\t\t$checkIds = [];\n\t\t\tforeach ($checks as $check) {\n\t\t\t\t$checkIds[] = $this->addCheck($check['class'], $check['operator'], $check['value']);\n\t\t\t}\n\n\t\t\t$id = $this->insertOperation($class, $name, $checkIds, $operation, $entity, $events);\n\t\t\t$this->addScope($id, $scope);\n\n\t\t\t$this->connection->commit();\n\t\t} catch (Exception $e) {\n\t\t\t$this->connection->rollBack();\n\t\t\tthrow $e;\n\t\t}\n\n\t\treturn $this->getOperation($id);\n\t}\n\n\tprotected function canModify(int $id, ScopeContext $scopeContext):bool {\n\t\tif (isset($this->operationsByScope[$scopeContext->getHash()])) {\n\t\t\treturn in_array($id, $this->operationsByScope[$scopeContext->getHash()], true);\n\t\t}\n\n\t\t$qb = $this->connection->getQueryBuilder();\n\t\t$qb = $qb->select('o.id')\n\t\t\t->from('flow_operations', 'o')\n\t\t\t->leftJoin('o', 'flow_operations_scope', 's', $qb->expr()->eq('o.id', 's.operation_id'))\n\t\t\t->where($qb->expr()->eq('s.type', $qb->createParameter('scope')));\n\n\t\tif ($scopeContext->getScope() !== IManager::SCOPE_ADMIN) {\n\t\t\t$qb->where($qb->expr()->eq('s.value', $qb->createParameter('scopeId')));\n\t\t}\n\n\t\t$qb->setParameters(['scope' => $scopeContext->getScope(), 'scopeId' => $scopeContext->getScopeId()]);\n\t\t$result = $qb->execute();\n\n\t\t$operations = [];\n\t\twhile (($opId = $result->fetchOne()) !== false) {\n\t\t\t$operations[] = (int)$opId;\n\t\t}\n\t\t$this->operationsByScope[$scopeContext->getHash()] = $operations;\n\t\t$result->closeCursor();\n\n\t\treturn in_array($id, $this->operationsByScope[$scopeContext->getHash()], true);\n\t}\n\n\t/**\n\t * @param int $id\n\t * @param string $name\n\t * @param array[] $checks\n\t * @param string $operation\n\t * @return array The updated operation\n\t * @throws \\UnexpectedValueException\n\t * @throws \\DomainException\n\t * @throws Exception\n\t */\n\tpublic function updateOperation(\n\t\tint $id,\n\t\tstring $name,\n\t\tarray $checks,\n\t\tstring $operation,\n\t\tScopeContext $scopeContext,\n\t\tstring $entity,\n\t\tarray $events\n\t): array {\n\t\tif (!$this->canModify($id, $scopeContext)) {\n\t\t\tthrow new \\DomainException('Target operation not within scope');\n\t\t};\n\t\t$row = $this->getOperation($id);\n\t\t$this->validateOperation($row['class'], $name, $checks, $operation, $scopeContext, $entity, $events);\n\n\t\t$checkIds = [];\n\t\ttry {\n\t\t\t$this->connection->beginTransaction();\n\t\t\tforeach ($checks as $check) {\n\t\t\t\t$checkIds[] = $this->addCheck($check['class'], $check['operator'], $check['value']);\n\t\t\t}\n\n\t\t\t$query = $this->connection->getQueryBuilder();\n\t\t\t$query->update('flow_operations')\n\t\t\t\t->set('name', $query->createNamedParameter($name))\n\t\t\t\t->set('checks', $query->createNamedParameter(json_encode(array_unique($checkIds))))\n\t\t\t\t->set('operation', $query->createNamedParameter($operation))\n\t\t\t\t->set('entity', $query->createNamedParameter($entity))\n\t\t\t\t->set('events', $query->createNamedParameter(json_encode($events)))\n\t\t\t\t->where($query->expr()->eq('id', $query->createNamedParameter($id)));\n\t\t\t$query->execute();\n\t\t\t$this->connection->commit();\n\t\t} catch (Exception $e) {\n\t\t\t$this->connection->rollBack();\n\t\t\tthrow $e;\n\t\t}\n\t\tunset($this->operations[$scopeContext->getHash()]);\n\n\t\treturn $this->getOperation($id);\n\t}\n\n\t/**\n\t * @param int $id\n\t * @return bool\n\t * @throws \\UnexpectedValueException\n\t * @throws Exception\n\t * @throws \\DomainException\n\t */\n\tpublic function deleteOperation($id, ScopeContext $scopeContext) {\n\t\tif (!$this->canModify($id, $scopeContext)) {\n\t\t\tthrow new \\DomainException('Target operation not within scope');\n\t\t};\n\t\t$query = $this->connection->getQueryBuilder();\n\t\ttry {\n\t\t\t$this->connection->beginTransaction();\n\t\t\t$result = (bool)$query->delete('flow_operations')\n\t\t\t\t->where($query->expr()->eq('id', $query->createNamedParameter($id)))\n\t\t\t\t->execute();\n\t\t\tif ($result) {\n\t\t\t\t$qb = $this->connection->getQueryBuilder();\n\t\t\t\t$result &= (bool)$qb->delete('flow_operations_scope')\n\t\t\t\t\t->where($qb->expr()->eq('operation_id', $qb->createNamedParameter($id)))\n\t\t\t\t\t->execute();\n\t\t\t}\n\t\t\t$this->connection->commit();\n\t\t} catch (Exception $e) {\n\t\t\t$this->connection->rollBack();\n\t\t\tthrow $e;\n\t\t}\n\n\t\tif (isset($this->operations[$scopeContext->getHash()])) {\n\t\t\tunset($this->operations[$scopeContext->getHash()]);\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\tprotected function validateEvents(string $entity, array $events, IOperation $operation) {\n\t\ttry {\n\t\t\t/** @var IEntity $instance */\n\t\t\t$instance = $this->container->query($entity);\n\t\t} catch (QueryException $e) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Entity %s does not exist', [$entity]));\n\t\t}\n\n\t\tif (!$instance instanceof IEntity) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Entity %s is invalid', [$entity]));\n\t\t}\n\n\t\tif (empty($events)) {\n\t\t\tif (!$operation instanceof IComplexOperation) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('No events are chosen.'));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t$availableEvents = [];\n\t\tforeach ($instance->getEvents() as $event) {\n\t\t\t/** @var IEntityEvent $event */\n\t\t\t$availableEvents[] = $event->getEventName();\n\t\t}\n\n\t\t$diff = array_diff($events, $availableEvents);\n\t\tif (!empty($diff)) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Entity %s has no event %s', [$entity, array_shift($diff)]));\n\t\t}\n\t}\n\n\t/**\n\t * @param string $class\n\t * @param string $name\n\t * @param array[] $checks\n\t * @param string $operation\n\t * @param ScopeContext $scope\n\t * @param string $entity\n\t * @param array $events\n\t * @throws \\UnexpectedValueException\n\t */\n\tpublic function validateOperation($class, $name, array $checks, $operation, ScopeContext $scope, string $entity, array $events) {\n\t\ttry {\n\t\t\t/** @var IOperation $instance */\n\t\t\t$instance = $this->container->query($class);\n\t\t} catch (QueryException $e) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Operation %s does not exist', [$class]));\n\t\t}\n\n\t\tif (!($instance instanceof IOperation)) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Operation %s is invalid', [$class]));\n\t\t}\n\n\t\tif (!$instance->isAvailableForScope($scope->getScope())) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Operation %s is invalid', [$class]));\n\t\t}\n\n\t\t$this->validateEvents($entity, $events, $instance);\n\n\t\tif (count($checks) === 0) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('At least one check needs to be provided'));\n\t\t}\n\n\t\tif (strlen((string)$operation) > IManager::MAX_OPERATION_VALUE_BYTES) {\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('The provided operation data is too long'));\n\t\t}\n\n\t\t$instance->validateOperation($name, $checks, $operation);\n\n\t\tforeach ($checks as $check) {\n\t\t\tif (!is_string($check['class'])) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Invalid check provided'));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t/** @var ICheck $instance */\n\t\t\t\t$instance = $this->container->query($check['class']);\n\t\t\t} catch (QueryException $e) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check %s does not exist', [$class]));\n\t\t\t}\n\n\t\t\tif (!($instance instanceof ICheck)) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check %s is invalid', [$class]));\n\t\t\t}\n\n\t\t\tif (!empty($instance->supportedEntities())\n\t\t\t\t&& !in_array($entity, $instance->supportedEntities())\n\t\t\t) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check %s is not allowed with this entity', [$class]));\n\t\t\t}\n\n\t\t\tif (strlen((string)$check['value']) > IManager::MAX_CHECK_VALUE_BYTES) {\n\t\t\t\tthrow new \\UnexpectedValueException($this->l->t('The provided check value is too long'));\n\t\t\t}\n\n\t\t\t$instance->validateCheck($check['operator'], $check['value']);\n\t\t}\n\t}\n\n\t/**\n\t * @param int[] $checkIds\n\t * @return array[]\n\t */\n\tpublic function getChecks(array $checkIds) {\n\t\t$checkIds = array_map('intval', $checkIds);\n\n\t\t$checks = [];\n\t\tforeach ($checkIds as $i => $checkId) {\n\t\t\tif (isset($this->checks[$checkId])) {\n\t\t\t\t$checks[$checkId] = $this->checks[$checkId];\n\t\t\t\tunset($checkIds[$i]);\n\t\t\t}\n\t\t}\n\n\t\tif (empty($checkIds)) {\n\t\t\treturn $checks;\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->select('*')\n\t\t\t->from('flow_checks')\n\t\t\t->where($query->expr()->in('id', $query->createNamedParameter($checkIds, IQueryBuilder::PARAM_INT_ARRAY)));\n\t\t$result = $query->execute();\n\n\t\twhile ($row = $result->fetch()) {\n\t\t\t$this->checks[(int) $row['id']] = $row;\n\t\t\t$checks[(int) $row['id']] = $row;\n\t\t}\n\t\t$result->closeCursor();\n\n\t\t$checkIds = array_diff($checkIds, array_keys($checks));\n\n\t\tif (!empty($checkIds)) {\n\t\t\t$missingCheck = array_pop($checkIds);\n\t\t\tthrow new \\UnexpectedValueException($this->l->t('Check #%s does not exist', $missingCheck));\n\t\t}\n\n\t\treturn $checks;\n\t}\n\n\t/**\n\t * @param string $class\n\t * @param string $operator\n\t * @param string $value\n\t * @return int Check unique ID\n\t */\n\tprotected function addCheck($class, $operator, $value) {\n\t\t$hash = md5($class . '::' . $operator . '::' . $value);\n\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->select('id')\n\t\t\t->from('flow_checks')\n\t\t\t->where($query->expr()->eq('hash', $query->createNamedParameter($hash)));\n\t\t$result = $query->execute();\n\n\t\tif ($row = $result->fetch()) {\n\t\t\t$result->closeCursor();\n\t\t\treturn (int) $row['id'];\n\t\t}\n\n\t\t$query = $this->connection->getQueryBuilder();\n\t\t$query->insert('flow_checks')\n\t\t\t->values([\n\t\t\t\t'class' => $query->createNamedParameter($class),\n\t\t\t\t'operator' => $query->createNamedParameter($operator),\n\t\t\t\t'value' => $query->createNamedParameter($value),\n\t\t\t\t'hash' => $query->createNamedParameter($hash),\n\t\t\t]);\n\t\t$query->execute();\n\n\t\treturn $query->getLastInsertId();\n\t}\n\n\tprotected function addScope(int $operationId, ScopeContext $scope): void {\n\t\t$query = $this->connection->getQueryBuilder();\n\n\t\t$insertQuery = $query->insert('flow_operations_scope');\n\t\t$insertQuery->values([\n\t\t\t'operation_id' => $query->createNamedParameter($operationId),\n\t\t\t'type' => $query->createNamedParameter($scope->getScope()),\n\t\t\t'value' => $query->createNamedParameter($scope->getScopeId()),\n\t\t]);\n\t\t$insertQuery->execute();\n\t}\n\n\tpublic function formatOperation(array $operation): array {\n\t\t$checkIds = json_decode($operation['checks'], true);\n\t\t$checks = $this->getChecks($checkIds);\n\n\t\t$operation['checks'] = [];\n\t\tforeach ($checks as $check) {\n\t\t\t// Remove internal values\n\t\t\tunset($check['id']);\n\t\t\tunset($check['hash']);\n\n\t\t\t$operation['checks'][] = $check;\n\t\t}\n\t\t$operation['events'] = json_decode($operation['events'], true) ?? [];\n\n\n\t\treturn $operation;\n\t}\n\n\t/**\n\t * @return IEntity[]\n\t */\n\tpublic function getEntitiesList(): array {\n\t\t$this->dispatcher->dispatchTyped(new RegisterEntitiesEvent($this));\n\t\t$this->legacyEventDispatcher->dispatch(IManager::EVENT_NAME_REG_ENTITY, new GenericEvent($this));\n\n\t\treturn array_values(array_merge($this->getBuildInEntities(), $this->registeredEntities));\n\t}\n\n\t/**\n\t * @return IOperation[]\n\t */\n\tpublic function getOperatorList(): array {\n\t\t$this->dispatcher->dispatchTyped(new RegisterOperationsEvent($this));\n\t\t$this->legacyEventDispatcher->dispatch(IManager::EVENT_NAME_REG_OPERATION, new GenericEvent($this));\n\n\t\treturn array_merge($this->getBuildInOperators(), $this->registeredOperators);\n\t}\n\n\t/**\n\t * @return ICheck[]\n\t */\n\tpublic function getCheckList(): array {\n\t\t$this->dispatcher->dispatchTyped(new RegisterChecksEvent($this));\n\t\t$this->legacyEventDispatcher->dispatch(IManager::EVENT_NAME_REG_CHECK, new GenericEvent($this));\n\n\t\treturn array_merge($this->getBuildInChecks(), $this->registeredChecks);\n\t}\n\n\tpublic function registerEntity(IEntity $entity): void {\n\t\t$this->registeredEntities[get_class($entity)] = $entity;\n\t}\n\n\tpublic function registerOperation(IOperation $operator): void {\n\t\t$this->registeredOperators[get_class($operator)] = $operator;\n\t}\n\n\tpublic function registerCheck(ICheck $check): void {\n\t\t$this->registeredChecks[get_class($check)] = $check;\n\t}\n\n\t/**\n\t * @return IEntity[]\n\t */\n\tprotected function getBuildInEntities(): array {\n\t\ttry {\n\t\t\treturn [\n\t\t\t\tFile::class => $this->container->query(File::class),\n\t\t\t];\n\t\t} catch (QueryException $e) {\n\t\t\t$this->logger->logException($e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * @return IOperation[]\n\t */\n\tprotected function getBuildInOperators(): array {\n\t\ttry {\n\t\t\treturn [\n\t\t\t\t// None yet\n\t\t\t];\n\t\t} catch (QueryException $e) {\n\t\t\t$this->logger->logException($e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * @return ICheck[]\n\t */\n\tprotected function getBuildInChecks(): array {\n\t\ttry {\n\t\t\treturn [\n\t\t\t\t$this->container->query(FileMimeType::class),\n\t\t\t\t$this->container->query(FileName::class),\n\t\t\t\t$this->container->query(FileSize::class),\n\t\t\t\t$this->container->query(FileSystemTags::class),\n\t\t\t\t$this->container->query(RequestRemoteAddress::class),\n\t\t\t\t$this->container->query(RequestTime::class),\n\t\t\t\t$this->container->query(RequestURL::class),\n\t\t\t\t$this->container->query(RequestUserAgent::class),\n\t\t\t\t$this->container->query(UserGroupMembership::class),\n\t\t\t];\n\t\t} catch (QueryException $e) {\n\t\t\t$this->logger->logException($e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpublic function isUserScopeEnabled(): bool {\n\t\treturn $this->config->getAppValue(Application::APP_ID, 'user_scope_disabled', 'no') === 'no';\n\t}\n}\n", "<?php\n/**\n * @copyright Copyright (c) 2016 Joas Schilling <coding@schilljs.com>\n *\n * @author Arthur Schiwon <blizzz@arthur-schiwon.de>\n * @author Christoph Wurst <christoph@winzerhof-wurst.at>\n * @author Joas Schilling <coding@schilljs.com>\n * @author Julius H\u00e4rtl <jus@bitgrid.net>\n * @author Roeland Jago Douma <roeland@famdouma.nl>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\WorkflowEngine\\Tests;\n\nuse OC\\L10N\\L10N;\nuse OCA\\WorkflowEngine\\Entity\\File;\nuse OCA\\WorkflowEngine\\Helper\\ScopeContext;\nuse OCA\\WorkflowEngine\\Manager;\nuse OCP\\EventDispatcher\\IEventDispatcher;\nuse OCP\\Files\\IRootFolder;\nuse OCP\\IConfig;\nuse OCP\\IDBConnection;\nuse OCP\\IL10N;\nuse OCP\\ILogger;\nuse OCP\\IServerContainer;\nuse OCP\\IURLGenerator;\nuse OCP\\IUserManager;\nuse OCP\\IUserSession;\nuse OCP\\SystemTag\\ISystemTagManager;\nuse OCP\\WorkflowEngine\\ICheck;\nuse OCP\\WorkflowEngine\\IEntity;\nuse OCP\\WorkflowEngine\\IEntityEvent;\nuse OCP\\WorkflowEngine\\IManager;\nuse OCP\\WorkflowEngine\\IOperation;\nuse PHPUnit\\Framework\\MockObject\\MockObject;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Test\\TestCase;\n\n/**\n * Class ManagerTest\n *\n * @package OCA\\WorkflowEngine\\Tests\n * @group DB\n */\nclass ManagerTest extends TestCase {\n\n\t/** @var Manager */\n\tprotected $manager;\n\t/** @var MockObject|IDBConnection */\n\tprotected $db;\n\t/** @var \\PHPUnit\\Framework\\MockObject\\MockObject|ILogger */\n\tprotected $logger;\n\t/** @var \\PHPUnit\\Framework\\MockObject\\MockObject|EventDispatcherInterface */\n\tprotected $legacyDispatcher;\n\t/** @var MockObject|IServerContainer */\n\tprotected $container;\n\t/** @var MockObject|IUserSession */\n\tprotected $session;\n\t/** @var MockObject|L10N */\n\tprotected $l;\n\t/** @var MockObject|IEventDispatcher */\n\tprotected $dispatcher;\n\t/** @var MockObject|IConfig */\n\tprotected $config;\n\n\tprotected function setUp(): void {\n\t\tparent::setUp();\n\n\t\t$this->db = \\OC::$server->getDatabaseConnection();\n\t\t$this->container = $this->createMock(IServerContainer::class);\n\t\t/** @var IL10N|MockObject $l */\n\t\t$this->l = $this->createMock(IL10N::class);\n\t\t$this->l->method('t')\n\t\t\t->willReturnCallback(function ($text, $parameters = []) {\n\t\t\t\treturn vsprintf($text, $parameters);\n\t\t\t});\n\n\t\t$this->legacyDispatcher = $this->createMock(EventDispatcherInterface::class);\n\t\t$this->logger = $this->createMock(ILogger::class);\n\t\t$this->session = $this->createMock(IUserSession::class);\n\t\t$this->dispatcher = $this->createMock(IEventDispatcher::class);\n\t\t$this->config = $this->createMock(IConfig::class);\n\n\t\t$this->manager = new Manager(\n\t\t\t\\OC::$server->getDatabaseConnection(),\n\t\t\t$this->container,\n\t\t\t$this->l,\n\t\t\t$this->legacyDispatcher,\n\t\t\t$this->logger,\n\t\t\t$this->session,\n\t\t\t$this->dispatcher,\n\t\t\t$this->config\n\t\t);\n\t\t$this->clearTables();\n\t}\n\n\tprotected function tearDown(): void {\n\t\t$this->clearTables();\n\t\tparent::tearDown();\n\t}\n\n\t/**\n\t * @return MockObject|ScopeContext\n\t */\n\tprotected function buildScope(string $scopeId = null): MockObject {\n\t\t$scopeContext = $this->createMock(ScopeContext::class);\n\t\t$scopeContext->expects($this->any())\n\t\t\t->method('getScope')\n\t\t\t->willReturn($scopeId ? IManager::SCOPE_USER : IManager::SCOPE_ADMIN);\n\t\t$scopeContext->expects($this->any())\n\t\t\t->method('getScopeId')\n\t\t\t->willReturn($scopeId ?? '');\n\t\t$scopeContext->expects($this->any())\n\t\t\t->method('getHash')\n\t\t\t->willReturn(md5($scopeId ?? ''));\n\n\t\treturn $scopeContext;\n\t}\n\n\tpublic function clearTables() {\n\t\t$query = $this->db->getQueryBuilder();\n\t\tforeach (['flow_checks', 'flow_operations', 'flow_operations_scope'] as $table) {\n\t\t\t$query->delete($table)\n\t\t\t\t->execute();\n\t\t}\n\t}\n\n\tpublic function testChecks() {\n\t\t$check1 = $this->invokePrivate($this->manager, 'addCheck', ['Test', 'equal', 1]);\n\t\t$check2 = $this->invokePrivate($this->manager, 'addCheck', ['Test', '!equal', 2]);\n\n\t\t$data = $this->manager->getChecks([$check1]);\n\t\t$this->assertArrayHasKey($check1, $data);\n\t\t$this->assertArrayNotHasKey($check2, $data);\n\n\t\t$data = $this->manager->getChecks([$check1, $check2]);\n\t\t$this->assertArrayHasKey($check1, $data);\n\t\t$this->assertArrayHasKey($check2, $data);\n\n\t\t$data = $this->manager->getChecks([$check2, $check1]);\n\t\t$this->assertArrayHasKey($check1, $data);\n\t\t$this->assertArrayHasKey($check2, $data);\n\n\t\t$data = $this->manager->getChecks([$check2]);\n\t\t$this->assertArrayNotHasKey($check1, $data);\n\t\t$this->assertArrayHasKey($check2, $data);\n\t}\n\n\tpublic function testScope() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\t\t$opId3 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test03', [11, 44], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId3, $userScope]);\n\n\t\t$this->assertTrue($this->invokePrivate($this->manager, 'canModify', [$opId1, $adminScope]));\n\t\t$this->assertFalse($this->invokePrivate($this->manager, 'canModify', [$opId2, $adminScope]));\n\t\t$this->assertFalse($this->invokePrivate($this->manager, 'canModify', [$opId3, $adminScope]));\n\n\t\t$this->assertFalse($this->invokePrivate($this->manager, 'canModify', [$opId1, $userScope]));\n\t\t$this->assertTrue($this->invokePrivate($this->manager, 'canModify', [$opId2, $userScope]));\n\t\t$this->assertTrue($this->invokePrivate($this->manager, 'canModify', [$opId3, $userScope]));\n\t}\n\n\tpublic function testGetAllOperations() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestAdminOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\t\t$opId3 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test03', [11, 44], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId3, $userScope]);\n\n\t\t$adminOps = $this->manager->getAllOperations($adminScope);\n\t\t$userOps = $this->manager->getAllOperations($userScope);\n\n\t\t$this->assertSame(1, count($adminOps));\n\t\t$this->assertTrue(array_key_exists('OCA\\WFE\\TestAdminOp', $adminOps));\n\t\t$this->assertFalse(array_key_exists('OCA\\WFE\\TestUserOp', $adminOps));\n\n\t\t$this->assertSame(1, count($userOps));\n\t\t$this->assertFalse(array_key_exists('OCA\\WFE\\TestAdminOp', $userOps));\n\t\t$this->assertTrue(array_key_exists('OCA\\WFE\\TestUserOp', $userOps));\n\t\t$this->assertSame(2, count($userOps['OCA\\WFE\\TestUserOp']));\n\t}\n\n\tpublic function testGetOperations() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\t\t$opId4 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\OtherTestOp', 'Test04', [5], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId4, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\t\t$opId3 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestOp', 'Test03', [11, 44], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId3, $userScope]);\n\t\t$opId5 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\OtherTestOp', 'Test05', [5], 'foobar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId5, $userScope]);\n\n\t\t$adminOps = $this->manager->getOperations('OCA\\WFE\\TestOp', $adminScope);\n\t\t$userOps = $this->manager->getOperations('OCA\\WFE\\TestOp', $userScope);\n\n\t\t$this->assertSame(1, count($adminOps));\n\t\tarray_walk($adminOps, function ($op) {\n\t\t\t$this->assertTrue($op['class'] === 'OCA\\WFE\\TestOp');\n\t\t});\n\n\t\t$this->assertSame(2, count($userOps));\n\t\tarray_walk($userOps, function ($op) {\n\t\t\t$this->assertTrue($op['class'] === 'OCA\\WFE\\TestOp');\n\t\t});\n\t}\n\n\tpublic function testUpdateOperation() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$operationMock->expects($this->any())\n\t\t\t->method('isAvailableForScope')\n\t\t\t->withConsecutive(\n\t\t\t\t[IManager::SCOPE_ADMIN],\n\t\t\t\t[IManager::SCOPE_USER]\n\t\t\t)\n\t\t\t->willReturn(true);\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($class) use ($operationMock) {\n\t\t\t\tif (substr($class, -2) === 'Op') {\n\t\t\t\t\treturn $operationMock;\n\t\t\t\t} elseif ($class === File::class) {\n\t\t\t\t\treturn $this->getMockBuilder(File::class)\n\t\t\t\t\t\t->setConstructorArgs([\n\t\t\t\t\t\t\t$this->l,\n\t\t\t\t\t\t\t$this->createMock(IURLGenerator::class),\n\t\t\t\t\t\t\t$this->createMock(IRootFolder::class),\n\t\t\t\t\t\t\t$this->createMock(ILogger::class),\n\t\t\t\t\t\t\t$this->createMock(\\OCP\\Share\\IManager::class),\n\t\t\t\t\t\t\t$this->createMock(IUserSession::class),\n\t\t\t\t\t\t\t$this->createMock(ISystemTagManager::class),\n\t\t\t\t\t\t\t$this->createMock(IUserManager::class),\n\t\t\t\t\t\t])\n\t\t\t\t\t\t->setMethodsExcept(['getEvents'])\n\t\t\t\t\t\t->getMock();\n\t\t\t\t}\n\t\t\t\treturn $this->createMock(ICheck::class);\n\t\t\t});\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestAdminOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\n\t\t$check1 = ['class' => 'OCA\\WFE\\C22', 'operator' => 'eq', 'value' => 'asdf'];\n\t\t$check2 = ['class' => 'OCA\\WFE\\C33', 'operator' => 'eq', 'value' => 23456];\n\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$op = $this->manager->updateOperation($opId1, 'Test01a', [$check1, $check2], 'foohur', $adminScope, $entity, ['\\OCP\\Files::postDelete']);\n\t\t$this->assertSame('Test01a', $op['name']);\n\t\t$this->assertSame('foohur', $op['operation']);\n\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$op = $this->manager->updateOperation($opId2, 'Test02a', [$check1], 'barfoo', $userScope, $entity, ['\\OCP\\Files::postDelete']);\n\t\t$this->assertSame('Test02a', $op['name']);\n\t\t$this->assertSame('barfoo', $op['operation']);\n\n\t\tforeach ([[$adminScope, $opId2], [$userScope, $opId1]] as $run) {\n\t\t\ttry {\n\t\t\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t\t\t$this->manager->updateOperation($run[1], 'Evil', [$check2], 'hackx0r', $run[0], $entity, []);\n\t\t\t\t$this->assertTrue(false, 'DomainException not thrown');\n\t\t\t} catch (\\DomainException $e) {\n\t\t\t\t$this->assertTrue(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function testDeleteOperation() {\n\t\t$adminScope = $this->buildScope();\n\t\t$userScope = $this->buildScope('jackie');\n\t\t$entity = File::class;\n\n\t\t$opId1 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestAdminOp', 'Test01', [11, 22], 'foo', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId1, $adminScope]);\n\n\t\t$opId2 = $this->invokePrivate(\n\t\t\t$this->manager,\n\t\t\t'insertOperation',\n\t\t\t['OCA\\WFE\\TestUserOp', 'Test02', [33, 22], 'bar', $entity, []]\n\t\t);\n\t\t$this->invokePrivate($this->manager, 'addScope', [$opId2, $userScope]);\n\n\t\tforeach ([[$adminScope, $opId2], [$userScope, $opId1]] as $run) {\n\t\t\ttry {\n\t\t\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t\t\t$this->manager->deleteOperation($run[1], $run[0]);\n\t\t\t\t$this->assertTrue(false, 'DomainException not thrown');\n\t\t\t} catch (\\Exception $e) {\n\t\t\t\t$this->assertInstanceOf(\\DomainException::class, $e);\n\t\t\t}\n\t\t}\n\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$this->manager->deleteOperation($opId1, $adminScope);\n\t\t/** @noinspection PhpUnhandledExceptionInspection */\n\t\t$this->manager->deleteOperation($opId2, $userScope);\n\n\t\tforeach ([$opId1, $opId2] as $opId) {\n\t\t\ttry {\n\t\t\t\t$this->invokePrivate($this->manager, 'getOperation', [$opId]);\n\t\t\t\t$this->assertTrue(false, 'UnexpectedValueException not thrown');\n\t\t\t} catch (\\Exception $e) {\n\t\t\t\t$this->assertInstanceOf(\\UnexpectedValueException::class, $e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function testGetEntitiesListBuildInOnly() {\n\t\t$fileEntityMock = $this->createMock(File::class);\n\n\t\t$this->container->expects($this->once())\n\t\t\t->method('query')\n\t\t\t->with(File::class)\n\t\t\t->willReturn($fileEntityMock);\n\n\t\t$entities = $this->manager->getEntitiesList();\n\n\t\t$this->assertCount(1, $entities);\n\t\t$this->assertInstanceOf(IEntity::class, $entities[0]);\n\t}\n\n\tpublic function testGetEntitiesList() {\n\t\t$fileEntityMock = $this->createMock(File::class);\n\n\t\t$this->container->expects($this->once())\n\t\t\t->method('query')\n\t\t\t->with(File::class)\n\t\t\t->willReturn($fileEntityMock);\n\n\t\t/** @var MockObject|IEntity $extraEntity */\n\t\t$extraEntity = $this->createMock(IEntity::class);\n\n\t\t$this->legacyDispatcher->expects($this->once())\n\t\t\t->method('dispatch')\n\t\t\t->with('OCP\\WorkflowEngine::registerEntities', $this->anything())\n\t\t\t->willReturnCallback(function () use ($extraEntity) {\n\t\t\t\t$this->manager->registerEntity($extraEntity);\n\t\t\t});\n\n\t\t$entities = $this->manager->getEntitiesList();\n\n\t\t$this->assertCount(2, $entities);\n\n\t\t$entityTypeCounts = array_reduce($entities, function (array $carry, IEntity $entity) {\n\t\t\tif ($entity instanceof File) {\n\t\t\t\t$carry[0]++;\n\t\t\t} elseif ($entity instanceof IEntity) {\n\t\t\t\t$carry[1]++;\n\t\t\t}\n\t\t\treturn $carry;\n\t\t}, [0, 0]);\n\n\t\t$this->assertSame(1, $entityTypeCounts[0]);\n\t\t$this->assertSame(1, $entityTypeCounts[1]);\n\t}\n\n\tpublic function testValidateOperationOK() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => 'barfoo',\n\t\t];\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\t\t$scopeMock = $this->createMock(ScopeContext::class);\n\n\t\t$scopeMock->expects($this->any())\n\t\t\t->method('getScope')\n\t\t\t->willReturn(IManager::SCOPE_ADMIN);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('isAvailableForScope')\n\t\t\t->with(IManager::SCOPE_ADMIN)\n\t\t\t->willReturn(true);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('validateOperation')\n\t\t\t->with('test', [$check], 'operationData');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->atLeastOnce())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], 'operationData', $scopeMock, IEntity::class, ['MyEvent']);\n\t}\n\n\tpublic function testValidateOperationCheckInputLengthError() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => str_pad('', IManager::MAX_CHECK_VALUE_BYTES + 1, 'FooBar'),\n\t\t];\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\t\t$scopeMock = $this->createMock(ScopeContext::class);\n\n\t\t$scopeMock->expects($this->any())\n\t\t\t->method('getScope')\n\t\t\t->willReturn(IManager::SCOPE_ADMIN);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('isAvailableForScope')\n\t\t\t->with(IManager::SCOPE_ADMIN)\n\t\t\t->willReturn(true);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('validateOperation')\n\t\t\t->with('test', [$check], 'operationData');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->never())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\ttry {\n\t\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], 'operationData', $scopeMock, IEntity::class, ['MyEvent']);\n\t\t} catch (\\UnexpectedValueException $e) {\n\t\t\t$this->assertSame('The provided check value is too long', $e->getMessage());\n\t\t}\n\t}\n\n\tpublic function testValidateOperationDataLengthError() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => 'barfoo',\n\t\t];\n\t\t$operationData = str_pad('', IManager::MAX_OPERATION_VALUE_BYTES + 1, 'FooBar');\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\t\t$scopeMock = $this->createMock(ScopeContext::class);\n\n\t\t$scopeMock->expects($this->any())\n\t\t\t->method('getScope')\n\t\t\t->willReturn(IManager::SCOPE_ADMIN);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('isAvailableForScope')\n\t\t\t->with(IManager::SCOPE_ADMIN)\n\t\t\t->willReturn(true);\n\n\t\t$operationMock->expects($this->never())\n\t\t\t->method('validateOperation');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->never())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\ttry {\n\t\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], $operationData, $scopeMock, IEntity::class, ['MyEvent']);\n\t\t} catch (\\UnexpectedValueException $e) {\n\t\t\t$this->assertSame('The provided operation data is too long', $e->getMessage());\n\t\t}\n\t}\n\n\tpublic function testValidateOperationScopeNotAvailable() {\n\t\t$check = [\n\t\t\t'class' => ICheck::class,\n\t\t\t'operator' => 'is',\n\t\t\t'value' => 'barfoo',\n\t\t];\n\t\t$operationData = str_pad('', IManager::MAX_OPERATION_VALUE_BYTES + 1, 'FooBar');\n\n\t\t$operationMock = $this->createMock(IOperation::class);\n\t\t$entityMock = $this->createMock(IEntity::class);\n\t\t$eventEntityMock = $this->createMock(IEntityEvent::class);\n\t\t$checkMock = $this->createMock(ICheck::class);\n\t\t$scopeMock = $this->createMock(ScopeContext::class);\n\n\t\t$scopeMock->expects($this->any())\n\t\t\t->method('getScope')\n\t\t\t->willReturn(IManager::SCOPE_ADMIN);\n\n\t\t$operationMock->expects($this->once())\n\t\t\t->method('isAvailableForScope')\n\t\t\t->with(IManager::SCOPE_ADMIN)\n\t\t\t->willReturn(false);\n\n\t\t$operationMock->expects($this->never())\n\t\t\t->method('validateOperation');\n\n\t\t$entityMock->expects($this->any())\n\t\t\t->method('getEvents')\n\t\t\t->willReturn([$eventEntityMock]);\n\n\t\t$eventEntityMock->expects($this->any())\n\t\t\t->method('getEventName')\n\t\t\t->willReturn('MyEvent');\n\n\t\t$checkMock->expects($this->any())\n\t\t\t->method('supportedEntities')\n\t\t\t->willReturn([IEntity::class]);\n\t\t$checkMock->expects($this->never())\n\t\t\t->method('validateCheck');\n\n\t\t$this->container->expects($this->any())\n\t\t\t->method('query')\n\t\t\t->willReturnCallback(function ($className) use ($operationMock, $entityMock, $eventEntityMock, $checkMock) {\n\t\t\t\tswitch ($className) {\n\t\t\t\t\tcase IOperation::class:\n\t\t\t\t\t\treturn $operationMock;\n\t\t\t\t\tcase IEntity::class:\n\t\t\t\t\t\treturn $entityMock;\n\t\t\t\t\tcase IEntityEvent::class:\n\t\t\t\t\t\treturn $eventEntityMock;\n\t\t\t\t\tcase ICheck::class:\n\t\t\t\t\t\treturn $checkMock;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn $this->createMock($className);\n\t\t\t\t}\n\t\t\t});\n\n\t\ttry {\n\t\t\t$this->manager->validateOperation(IOperation::class, 'test', [$check], $operationData, $scopeMock, IEntity::class, ['MyEvent']);\n\t\t} catch (\\UnexpectedValueException $e) {\n\t\t\t$this->assertSame('Operation OCP\\WorkflowEngine\\IOperation is invalid', $e->getMessage());\n\t\t}\n\t}\n}\n"], "filenames": ["apps/workflowengine/lib/Manager.php", "apps/workflowengine/tests/ManagerTest.php"], "buggy_code_start_loc": [313, 290], "buggy_code_end_loc": [496, 601], "fixing_code_start_loc": [313, 291], "fixing_code_end_loc": [504, 705], "type": "NVD-CWE-noinfo", "message": "Nextcloud server is an open source home cloud implementation. In affected versions a missing scope validation allowed users to create workflows which are designed to be only available for administrators. Some workflows are designed to be RCE by invoking defined scripts, in order to generate PDFs, invoking webhooks or running scripts on the server. Due to this combination depending on the available apps the issue can result in a RCE at the end. It is recommended that the Nextcloud Server is upgraded to 24.0.10 or 25.0.4. Users unable to upgrade should disable app `workflow_scripts` and `workflow_pdf_converter` as a mitigation.", "other": {"cve": {"id": "CVE-2023-26482", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-30T19:15:06.523", "lastModified": "2023-04-06T18:49:24.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Nextcloud server is an open source home cloud implementation. In affected versions a missing scope validation allowed users to create workflows which are designed to be only available for administrators. Some workflows are designed to be RCE by invoking defined scripts, in order to generate PDFs, invoking webhooks or running scripts on the server. Due to this combination depending on the available apps the issue can result in a RCE at the end. It is recommended that the Nextcloud Server is upgraded to 24.0.10 or 25.0.4. Users unable to upgrade should disable app `workflow_scripts` and `workflow_pdf_converter` as a mitigation."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "18.0.0", "versionEndExcluding": "20.0.14.12", "matchCriteriaId": "F96F0D08-EE3D-4796-A6AC-B63E53770F60"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "21.0.0", "versionEndExcluding": "21.0.9.10", "matchCriteriaId": "BFCBAD36-04D2-47EC-836E-35EFC1D6E060"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "22.0.0", "versionEndExcluding": "22.2.10.10", "matchCriteriaId": "C5886100-3157-4377-8681-381720CFDA8E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "23.0.0", "versionEndExcluding": "23.0.12.5", "matchCriteriaId": "F2FEEE2E-6BF9-4332-99A3-690EF68D884F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:-:*:*:*", "versionStartIncluding": "24.0.0", "versionEndExcluding": "24.0.10", "matchCriteriaId": "302FFA48-9204-4112-BF23-6182ED62F193"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "24.0.0", "versionEndExcluding": "24.0.10", "matchCriteriaId": "3D2D0CEB-437C-4ABA-9915-EFCB776E7ADC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:-:*:*:*", "versionStartIncluding": "25.0.0", "versionEndExcluding": "25.0.4", "matchCriteriaId": "282F04F1-B4E4-4DC2-82CA-55DB39A3F373"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "25.0.0", "versionEndExcluding": "25.0.4", "matchCriteriaId": "E14A1D06-7AB2-40C2-806F-7EE34595DAF7"}]}]}], "references": [{"url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-h3c9-cmh8-7qpj", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/nextcloud/server/commit/5a06b50b10cc9278bbe68bbf897a0c4aeb0c4e60", "source": "security-advisories@github.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/nextcloud/server/commit/5a06b50b10cc9278bbe68bbf897a0c4aeb0c4e60"}}