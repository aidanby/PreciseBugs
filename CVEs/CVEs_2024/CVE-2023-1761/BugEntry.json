{"buggy_code": ["<?php\n\n/**\n * The Ajax Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n$ajaxLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n$code = Filter::filterInput(INPUT_POST, 'captcha', FILTER_UNSAFE_RAW);\n$currentToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($ajaxLang)) {\n    $languageCode = trim($ajaxLang);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Send headers\n//\n$http = new HttpHelper();\n$http->setContentType('application/json');\n\n$faqSession = new Session($faqConfig);\n$network = new Network($faqConfig);\n$stopWords = new Stopwords($faqConfig);\n\nif (!$network->checkIp($_SERVER['REMOTE_ADDR'])) {\n    $message = ['error' => $PMF_LANG['err_bannedIP']];\n}\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getFromCookie($faqConfig);\nif (!$user instanceof CurrentUser) {\n    $user = CurrentUser::getFromSession($faqConfig);\n}\nif ($user instanceof CurrentUser) {\n    $isLoggedIn = true;\n} else {\n    $isLoggedIn = false;\n}\n\n//\n// Check captcha\n//\n$captcha = new Captcha($faqConfig);\n$captcha->setUserIsLoggedIn($isLoggedIn);\n\nif (\n'savevoting' !== $action && 'saveuserdata' !== $action && 'changepassword' !== $action && !is_null($code) &&\n    !$captcha->checkCaptchaCode($code)\n) {\n    $message = ['error' => $PMF_LANG['msgCaptcha']];\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    false === $isLoggedIn && $faqConfig->get('security.enableLoginOnly') &&\n    'changepassword' !== $action && 'saveregistration' !== $action\n) {\n    $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n}\n\nif (isset($message['error'])) {\n    $http->sendJsonWithHeaders($message);\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'savecomment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW);\n        $faqId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterInput(INPUT_POST, 'newsId', FILTER_VALIDATE_INT);\n        $username = Filter::filterInput(INPUT_POST, 'user', FILTER_UNSAFE_RAW);\n        $mailer = Filter::filterInput(INPUT_POST, 'mail', FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterInput(INPUT_POST, 'comment_text', FILTER_UNSAFE_RAW);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq':\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged-in users\n        if (false === $isLoggedIn) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $message = ['error' => '-' . $PMF_LANG['err_SaveComment']];\n                break;\n            }\n        }\n\n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&\n            !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br($comment))\n                ->setDate($_SERVER['REQUEST_TIME']);\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap($comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $message = ['success' => $PMF_LANG['msgCommentThanks']];\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n                $message = ['error' => $PMF_LANG['err_SaveComment']];\n            }\n        } else {\n            $message = ['error' => 'Please add your name, your e-mail address and a comment!'];\n        }\n        break;\n\n    case 'savefaq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $faqId = Filter::filterInput(INPUT_POST, 'faqid', FILTER_VALIDATE_INT);\n        $faqLanguage = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim(html_entity_decode($answer));\n        } else {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_UNSAFE_RAW);\n            $answer = strip_tags($answer);\n            $answer = trim(nl2br($answer));\n        }\n        $translatedAnswer = trim(Filter::filterInput(INPUT_POST, 'translated_answer', FILTER_UNSAFE_RAW));\n        $contentLink = Filter::filterInput(INPUT_POST, 'contentlink', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterVar($contentLink, FILTER_VALIDATE_URL);\n        $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n        $categories = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'rubrik' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n\n        // Check on translation\n        if (empty($answer) && !is_null($translatedAnswer)) {\n            $answer = $translatedAnswer;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer)) &&\n            ((is_null($faqId) && !is_null($categories['rubrik'])) || (!is_null($faqId) && !is_null($faqLanguage) &&\n                    Language::isASupportedLanguage($faqLanguage)))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!is_null($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (!is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"http://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    $PMF_LANG['msgInfo'],\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $newData = [\n                'lang' => ($isTranslation === true ? $newLanguage : $languageCode),\n                'thema' => $question,\n                'active' => ($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO),\n                'sticky' => 0,\n                'content' => $answer,\n                'keywords' => $keywords,\n                'author' => $author,\n                'email' => $email,\n                'comment' => 'y',\n                'date' => date('YmdHis'),\n                'dateStart' => '00000000000000',\n                'dateEnd' => '99991231235959',\n                'linkState' => '',\n                'linkDateCheck' => 0,\n                'notes' => ''\n            ];\n\n            if ($isNew) {\n                $categories = $categories['rubrik'];\n            } else {\n                $newData['id'] = $faqId;\n                $categories = $category->getCategoryIdsFromFaq($newData['id']);\n            }\n\n            $recordId = $faq->addRecord($newData, $isNew);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($newData['lang'])\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception $e) {\n                // @todo handle exception in v3.2\n            }\n\n\n            $message = [\n                'success' => ($isNew ? $PMF_LANG['msgNewContentThanks'] : $PMF_LANG['msgNewTranslationThanks']),\n            ];\n        } else {\n            $message = [\n                'error' => $PMF_LANG['err_SaveEntries']\n            ];\n        }\n\n        break;\n\n    //\n    // Add question\n    //\n    case 'savequestion':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $categories = $cat->getAllCategories();\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $ucategory = Filter::filterInput(INPUT_POST, 'category', FILTER_VALIDATE_INT);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        $save = Filter::filterInput(INPUT_POST, 'save', FILTER_VALIDATE_INT, 0);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && $stopWords->checkBannedWord(\n                Strings::htmlspecialchars($question)\n            )\n        ) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlspecialchars($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        $searchResult[] = $faqSearch->search($word, false);\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $response = sprintf(\n                        '<p>%s</p>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $response .= '<ul>';\n\n                    $faqHelper = new FaqHelper($faqConfig);\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $response .= sprintf(\n                                '<li>%s<br><div class=\"searchpreview\">%s...</div></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception $e) {\n                            // handle exception\n                        }\n                    }\n                    $response .= '</ul>';\n\n                    $message = ['result' => $response];\n                } else {\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception $e) {\n                        // @todo Handle exception\n                    }\n                    $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n                }\n            } else {\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception $e) {\n                    // @todo Handle exception\n                }\n                $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['err_SaveQuestion']];\n        }\n\n        break;\n\n    case 'saveregistration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $fullName = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW) ?? false;\n\n        if (!$registration->isDomainWhitelisted($email)) {\n            $message = ['error' => 'The domain is not whitelisted.'];\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            $message = $registration->createUser($userName, $fullName, $email, $isVisible);\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    case 'savevoting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW, 'faq');\n        $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterInput(INPUT_POST, 'vote', FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($recordId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $recordId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($recordId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $message = [\n                'success' => $PMF_LANG['msgVoteThanks'],\n                'rating' => $rating->getVotingResult($recordId),\n            ];\n        } elseif (!$rating->check($recordId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_VoteTooMuch']];\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_noVote']];\n        }\n\n        break;\n\n    // Send user generated mails\n    case 'sendcontact':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && !empty($question) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n            $mailer->message = $question;\n            $mailer->send();\n\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $link = Filter::filterInput(INPUT_POST, 'link', FILTER_VALIDATE_URL);\n        $attached = Filter::filterInput(INPUT_POST, 'message', FILTER_UNSAFE_RAW);\n        $mailto = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'mailto' => [\n                    'filter' => FILTER_VALIDATE_EMAIL,\n                    'flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE,\n                ],\n            ]\n        );\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) && !empty($mailto['mailto'][0]) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            foreach ($mailto['mailto'] as $recipient) {\n                $recipient = trim(strip_tags($recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    $mailer->setReplyTo($email, $author);\n                    $mailer->addTo($recipient);\n                    $mailer->subject = $PMF_LANG['msgS2FMailSubject'] . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        $PMF_LANG['msgS2FText2'],\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $message = ['success' => $PMF_LANG['msgS2FThx']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'saveuserdata':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $currentToken) {\n            $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n            break;\n        }\n\n        $userId = Filter::filterInput(INPUT_POST, 'userid', FILTER_VALIDATE_INT);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_SANITIZE_SPECIAL_CHARS);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        $confirm = Filter::filterInput(INPUT_POST, 'password_confirm', FILTER_UNSAFE_RAW);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        if ($userId !== $user->getUserId()) {\n            $message = ['error' => 'User ID mismatch!'];\n            break;\n        }\n\n        if ($password !== $confirm) {\n            $message = ['error' => $PMF_LANG['ad_user_error_passwordsDontMatch']];\n            break;\n        }\n\n        if (strlen($password) <= 7 || strlen($confirm) <= 7) {\n            $message = ['error' => $PMF_LANG['ad_passwd_fail']];\n            break;\n        } else {\n            $userData = [\n                'display_name' => $userName,\n                'email' => $email,\n                'is_visible' => $isVisible === 'on' ? 1 : 0\n            ];\n            $success = $user->setUserData($userData);\n\n            foreach ($user->getAuthContainer() as $author => $auth) {\n                if ($auth->setReadOnly()) {\n                    continue;\n                }\n                if (!$auth->update($user->getLogin(), $password)) {\n                    $message = ['error' => $auth->error()];\n                    $success = false;\n                } else {\n                    $success = true;\n                }\n            }\n        }\n\n        if ($success) {\n            $message = ['success' => $PMF_LANG['ad_entry_savedsuc']];\n        } else {\n            $message = ['error' => $PMF_LANG['ad_entry_savedfail']];\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'changepassword':\n        $username = Filter::filterInput(INPUT_POST, 'username', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n        if (!is_null($username) && !is_null($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                $newPassword = $user->createPassword();\n                $user->changePassword($newPassword);\n                $text = $PMF_LANG['lostpwd_text_1'] . \"\\nUsername: \" . $username . \"\\nNew Password: \" . $newPassword . \"\\n\\n\" . $PMF_LANG['lostpwd_text_2'];\n\n                $mailer = new Mail($faqConfig);\n                $mailer->addTo($email);\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                $result = $mailer->send();\n                unset($mailer);\n                // Trust that the email has been sent\n                $message = ['success' => $PMF_LANG['lostpwd_mail_okay']];\n            } else {\n                $message = ['error' => $PMF_LANG['lostpwd_err_1']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['lostpwd_err_2']];\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'request-removal':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) &&\n            !empty($question) && $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['ad_user_loginname'],\n                $loginName,\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n            $mailer->message = $question;\n            $result = $mailer->send();\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n}\n\n$http->sendJsonWithHeaders($message);\nexit();\n", "<?php\n\n/**\n * The main Comment class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-07-23\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Services\\Gravatar;\nuse phpMyFAQ\\Entity\\Comment;\n\n/**\n * Class Comments\n * @package phpMyFAQ\n */\nclass Comments\n{\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Language strings.\n     *\n     * @var string\n     */\n    private $pmfStr;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG;\n\n        $this->config = $config;\n        $this->pmfStr = $PMF_LANG;\n    }\n\n    /**\n     * Returns all user comments (HTML formatted) from a record by type.\n     *\n     * @param int $id Comment ID\n     * @param string $type Comment type: {faq|news}\n     * @return string\n     * @throws \\Exception\n     * @todo   Move this code to a helper class\n     */\n    public function getComments(int $id, string $type): string\n    {\n        $comments = $this->getCommentsData($id, $type);\n        $date = new Date($this->config);\n        $mail = new Mail($this->config);\n        $gravatar = new Gravatar();\n\n        $output = '';\n        foreach ($comments as $item) {\n            $output .= '<div class=\"row mt-2 mb-2\">';\n            $output .= '  <div class=\"col-sm-1\">';\n            $output .= '    <div class=\"thumbnail\">';\n            $output .= $gravatar->getImage($item->getEmail(), ['class' => 'img-thumbnail']);\n            $output .= '   </div>';\n            $output .= '  </div>';\n\n            $output .= '  <div class=\"col-sm-11\">';\n            $output .= '    <div class=\"card\">';\n            $output .= '     <div class=\"card-header card-header-comments\">';\n            $output .= sprintf(\n                '<strong><a href=\"mailto:%s\">%s</a></strong>',\n                $mail->safeEmail($item->getEmail()),\n                $item->getUsername()\n            );\n            $output .= sprintf(' <span class=\"text-muted\">(%s)</span>', $date->format($item->getDate()));\n            $output .= '     </div>';\n            $output .= sprintf(\n                '<div class=\"card-body\">%s</div>',\n                $this->showShortComment($item->getId(), $item->getComment())\n            );\n            $output .= '   </div>';\n            $output .= '  </div>';\n            $output .= '</div>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns all user comments from a record by type.\n     *\n     * @param int $referenceId record id\n     * @param string $type record type: {faq|news}\n     *\n     * @return Comment[]\n     */\n    public function getCommentsData(int $referenceId, string $type): array\n    {\n        $comments = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                id_comment, id, usr, email, comment, datum\n            FROM\n                %sfaqcomments\n            WHERE\n                type = '%s'\n            AND \n                id = %d\",\n            Database::getTablePrefix(),\n            $type,\n            $referenceId\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $comment = new Comment();\n                $comment\n                    ->setId($row->id_comment)\n                    ->setRecordId($row->id)\n                    ->setComment($row->comment)\n                    ->setDate(Date::createIsoDate($row->datum, DATE_ISO8601, false))\n                    ->setUsername($row->usr)\n                    ->setEmail($row->email)\n                    ->setType($type);\n                $comments[] = $comment;\n            }\n        }\n\n        return $comments;\n    }\n\n    /**\n     * Adds some fancy HTML if a comment is too long.\n     *\n     * @param int $id\n     * @param string $comment\n     * @return string\n     */\n    private function showShortComment(int $id, string $comment): string\n    {\n        $words = explode(' ', nl2br($comment));\n        $numWords = 0;\n\n        $comment = '';\n        foreach ($words as $word) {\n            $comment .= $word . ' ';\n            if (15 === $numWords) {\n                $comment .= '<span class=\"comment-dots-' . $id . '\">&hellip; </span>' .\n                    '<a href=\"#\" data-comment-id=\"' . $id . '\" class=\"pmf-comments-show-more comment-show-more-' . $id .\n                    '\">' . $this->pmfStr['msgShowMore'] . '</a>' .\n                    '<span class=\"comment-more-' . $id . ' d-none\">';\n            }\n            ++$numWords;\n        }\n\n        // Convert URLs to HTML anchors\n        return Utils::parseUrl($comment) . '</span>';\n    }\n\n    /**\n     * Adds a new comment.\n     * @param Comment $comment\n     * @return bool\n     */\n    public function addComment(Comment $comment): bool\n    {\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqcomments\n            VALUES\n                (%d, %d, '%s', '%s', '%s', '%s', %d, '%s')\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqcomments', 'id_comment'),\n            $comment->getRecordId(),\n            $comment->getType(),\n            $this->config->getDb()->escape($comment->getUsername()),\n            $this->config->getDb()->escape($comment->getEmail()),\n            $this->config->getDb()->escape($comment->getComment()),\n            $comment->getDate(),\n            $comment->hasHelped()\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes a comment.\n     *\n     * @param int $recordId Record id\n     * @param int $commentId Comment id\n     *\n     * @return bool\n     */\n    public function deleteComment(int $recordId, int $commentId): bool\n    {\n        $query = sprintf(\n            '\n            DELETE FROM\n                %sfaqcomments\n            WHERE\n                id = %d\n            AND\n                id_comment = %d',\n            Database::getTablePrefix(),\n            $recordId,\n            $commentId\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the number of comments of each FAQ record as an array.\n     *\n     * @param string $type Type of comment: faq or news\n     * @return string[]\n     */\n    public function getNumberOfComments(string $type = CommentType::FAQ): array\n    {\n        $num = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                COUNT(id) AS anz,\n                id\n            FROM\n                %sfaqcomments\n            WHERE\n                type = '%s'\n            GROUP BY id\n            ORDER BY id\",\n            Database::getTablePrefix(),\n            $type\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $num[$row->id] = $row->anz;\n            }\n        }\n\n        return $num;\n    }\n\n    /**\n     * Returns all comments with their categories.\n     *\n     * @param string $type Type of comment: faq or news\n     * @return Comment[]\n     */\n    public function getAllComments(string $type = CommentType::FAQ): array\n    {\n        $comments = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                fc.id_comment AS comment_id,\n                fc.id AS record_id,\n                %s\n                fc.usr AS username,\n                fc.email AS email,\n                fc.comment AS comment,\n                fc.datum AS comment_date\n            FROM\n                %sfaqcomments fc\n            %s\n            WHERE\n                type = '%s'\",\n            ($type == CommentType::FAQ) ? \"fcg.category_id,\\n\" : '',\n            Database::getTablePrefix(),\n            ($type == CommentType::FAQ) ? 'LEFT JOIN\n                ' . Database::getTablePrefix() . \"faqcategoryrelations fcg\n            ON\n                fc.id = fcg.record_id\\n\" : '',\n            $type\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $comment = new Comment();\n                $comment\n                    ->setId($row->comment_id)\n                    ->setRecordId($row->record_id)\n                    ->setType($type)\n                    ->setComment($row->comment)\n                    ->setDate($row->comment_date)\n                    ->setUsername($row->username)\n                    ->setEmail($row->email);\n\n                if (isset($row->category_id)) {\n                    $comment->setCategoryId($row->category_id);\n                }\n\n                $comments[] = $comment;\n            }\n        }\n\n        return $comments;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The Ajax Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n$ajaxLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n$code = Filter::filterInput(INPUT_POST, 'captcha', FILTER_UNSAFE_RAW);\n$currentToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($ajaxLang)) {\n    $languageCode = trim($ajaxLang);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Send headers\n//\n$http = new HttpHelper();\n$http->setContentType('application/json');\n\n$faqSession = new Session($faqConfig);\n$network = new Network($faqConfig);\n$stopWords = new Stopwords($faqConfig);\n\nif (!$network->checkIp($_SERVER['REMOTE_ADDR'])) {\n    $message = ['error' => $PMF_LANG['err_bannedIP']];\n}\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getFromCookie($faqConfig);\nif (!$user instanceof CurrentUser) {\n    $user = CurrentUser::getFromSession($faqConfig);\n}\nif ($user instanceof CurrentUser) {\n    $isLoggedIn = true;\n} else {\n    $isLoggedIn = false;\n}\n\n//\n// Check captcha\n//\n$captcha = new Captcha($faqConfig);\n$captcha->setUserIsLoggedIn($isLoggedIn);\n\nif (\n'savevoting' !== $action && 'saveuserdata' !== $action && 'changepassword' !== $action && !is_null($code) &&\n    !$captcha->checkCaptchaCode($code)\n) {\n    $message = ['error' => $PMF_LANG['msgCaptcha']];\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    false === $isLoggedIn && $faqConfig->get('security.enableLoginOnly') &&\n    'changepassword' !== $action && 'saveregistration' !== $action\n) {\n    $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n}\n\nif (isset($message['error'])) {\n    $http->sendJsonWithHeaders($message);\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'savecomment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW);\n        $faqId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterInput(INPUT_POST, 'newsId', FILTER_VALIDATE_INT);\n        $username = Filter::filterInput(INPUT_POST, 'user', FILTER_UNSAFE_RAW);\n        $mailer = Filter::filterInput(INPUT_POST, 'mail', FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterInput(INPUT_POST, 'comment_text', FILTER_UNSAFE_RAW);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq':\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged-in users\n        if (false === $isLoggedIn) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $message = ['error' => '-' . $PMF_LANG['err_SaveComment']];\n                break;\n            }\n        }\n\n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&\n            !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br(strip_tags($comment)))\n                ->setDate($_SERVER['REQUEST_TIME']);\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap($comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $message = ['success' => $PMF_LANG['msgCommentThanks']];\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n                $message = ['error' => $PMF_LANG['err_SaveComment']];\n            }\n        } else {\n            $message = ['error' => 'Please add your name, your e-mail address and a comment!'];\n        }\n        break;\n\n    case 'savefaq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $faqId = Filter::filterInput(INPUT_POST, 'faqid', FILTER_VALIDATE_INT);\n        $faqLanguage = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim(html_entity_decode($answer));\n        } else {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_UNSAFE_RAW);\n            $answer = strip_tags($answer);\n            $answer = trim(nl2br($answer));\n        }\n        $translatedAnswer = trim(Filter::filterInput(INPUT_POST, 'translated_answer', FILTER_UNSAFE_RAW));\n        $contentLink = Filter::filterInput(INPUT_POST, 'contentlink', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterVar($contentLink, FILTER_VALIDATE_URL);\n        $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n        $categories = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'rubrik' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n\n        // Check on translation\n        if (empty($answer) && !is_null($translatedAnswer)) {\n            $answer = $translatedAnswer;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer)) &&\n            ((is_null($faqId) && !is_null($categories['rubrik'])) || (!is_null($faqId) && !is_null($faqLanguage) &&\n                    Language::isASupportedLanguage($faqLanguage)))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!is_null($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (!is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"http://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    $PMF_LANG['msgInfo'],\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $newData = [\n                'lang' => ($isTranslation === true ? $newLanguage : $languageCode),\n                'thema' => $question,\n                'active' => ($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO),\n                'sticky' => 0,\n                'content' => $answer,\n                'keywords' => $keywords,\n                'author' => $author,\n                'email' => $email,\n                'comment' => 'y',\n                'date' => date('YmdHis'),\n                'dateStart' => '00000000000000',\n                'dateEnd' => '99991231235959',\n                'linkState' => '',\n                'linkDateCheck' => 0,\n                'notes' => ''\n            ];\n\n            if ($isNew) {\n                $categories = $categories['rubrik'];\n            } else {\n                $newData['id'] = $faqId;\n                $categories = $category->getCategoryIdsFromFaq($newData['id']);\n            }\n\n            $recordId = $faq->addRecord($newData, $isNew);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($newData['lang'])\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception $e) {\n                // @todo handle exception in v3.2\n            }\n\n\n            $message = [\n                'success' => ($isNew ? $PMF_LANG['msgNewContentThanks'] : $PMF_LANG['msgNewTranslationThanks']),\n            ];\n        } else {\n            $message = [\n                'error' => $PMF_LANG['err_SaveEntries']\n            ];\n        }\n\n        break;\n\n    //\n    // Add question\n    //\n    case 'savequestion':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $categories = $cat->getAllCategories();\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $ucategory = Filter::filterInput(INPUT_POST, 'category', FILTER_VALIDATE_INT);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        $save = Filter::filterInput(INPUT_POST, 'save', FILTER_VALIDATE_INT, 0);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && $stopWords->checkBannedWord(\n                Strings::htmlspecialchars($question)\n            )\n        ) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlspecialchars($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        $searchResult[] = $faqSearch->search($word, false);\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $response = sprintf(\n                        '<p>%s</p>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $response .= '<ul>';\n\n                    $faqHelper = new FaqHelper($faqConfig);\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $response .= sprintf(\n                                '<li>%s<br><div class=\"searchpreview\">%s...</div></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception $e) {\n                            // handle exception\n                        }\n                    }\n                    $response .= '</ul>';\n\n                    $message = ['result' => $response];\n                } else {\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception $e) {\n                        // @todo Handle exception\n                    }\n                    $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n                }\n            } else {\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception $e) {\n                    // @todo Handle exception\n                }\n                $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['err_SaveQuestion']];\n        }\n\n        break;\n\n    case 'saveregistration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $fullName = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW) ?? false;\n\n        if (!$registration->isDomainWhitelisted($email)) {\n            $message = ['error' => 'The domain is not whitelisted.'];\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            $message = $registration->createUser($userName, $fullName, $email, $isVisible);\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    case 'savevoting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW, 'faq');\n        $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterInput(INPUT_POST, 'vote', FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($recordId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $recordId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($recordId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $message = [\n                'success' => $PMF_LANG['msgVoteThanks'],\n                'rating' => $rating->getVotingResult($recordId),\n            ];\n        } elseif (!$rating->check($recordId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_VoteTooMuch']];\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_noVote']];\n        }\n\n        break;\n\n    // Send user generated mails\n    case 'sendcontact':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && !empty($question) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n            $mailer->message = $question;\n            $mailer->send();\n\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $link = Filter::filterInput(INPUT_POST, 'link', FILTER_VALIDATE_URL);\n        $attached = Filter::filterInput(INPUT_POST, 'message', FILTER_UNSAFE_RAW);\n        $mailto = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'mailto' => [\n                    'filter' => FILTER_VALIDATE_EMAIL,\n                    'flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE,\n                ],\n            ]\n        );\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) && !empty($mailto['mailto'][0]) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            foreach ($mailto['mailto'] as $recipient) {\n                $recipient = trim(strip_tags($recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    $mailer->setReplyTo($email, $author);\n                    $mailer->addTo($recipient);\n                    $mailer->subject = $PMF_LANG['msgS2FMailSubject'] . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        $PMF_LANG['msgS2FText2'],\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $message = ['success' => $PMF_LANG['msgS2FThx']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'saveuserdata':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $currentToken) {\n            $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n            break;\n        }\n\n        $userId = Filter::filterInput(INPUT_POST, 'userid', FILTER_VALIDATE_INT);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_SANITIZE_SPECIAL_CHARS);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        $confirm = Filter::filterInput(INPUT_POST, 'password_confirm', FILTER_UNSAFE_RAW);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        if ($userId !== $user->getUserId()) {\n            $message = ['error' => 'User ID mismatch!'];\n            break;\n        }\n\n        if ($password !== $confirm) {\n            $message = ['error' => $PMF_LANG['ad_user_error_passwordsDontMatch']];\n            break;\n        }\n\n        if (strlen($password) <= 7 || strlen($confirm) <= 7) {\n            $message = ['error' => $PMF_LANG['ad_passwd_fail']];\n            break;\n        } else {\n            $userData = [\n                'display_name' => $userName,\n                'email' => $email,\n                'is_visible' => $isVisible === 'on' ? 1 : 0\n            ];\n            $success = $user->setUserData($userData);\n\n            foreach ($user->getAuthContainer() as $author => $auth) {\n                if ($auth->setReadOnly()) {\n                    continue;\n                }\n                if (!$auth->update($user->getLogin(), $password)) {\n                    $message = ['error' => $auth->error()];\n                    $success = false;\n                } else {\n                    $success = true;\n                }\n            }\n        }\n\n        if ($success) {\n            $message = ['success' => $PMF_LANG['ad_entry_savedsuc']];\n        } else {\n            $message = ['error' => $PMF_LANG['ad_entry_savedfail']];\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'changepassword':\n        $username = Filter::filterInput(INPUT_POST, 'username', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n        if (!is_null($username) && !is_null($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                $newPassword = $user->createPassword();\n                $user->changePassword($newPassword);\n                $text = $PMF_LANG['lostpwd_text_1'] . \"\\nUsername: \" . $username . \"\\nNew Password: \" . $newPassword . \"\\n\\n\" . $PMF_LANG['lostpwd_text_2'];\n\n                $mailer = new Mail($faqConfig);\n                $mailer->addTo($email);\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                $result = $mailer->send();\n                unset($mailer);\n                // Trust that the email has been sent\n                $message = ['success' => $PMF_LANG['lostpwd_mail_okay']];\n            } else {\n                $message = ['error' => $PMF_LANG['lostpwd_err_1']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['lostpwd_err_2']];\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'request-removal':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) &&\n            !empty($question) && $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['ad_user_loginname'],\n                $loginName,\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n            $mailer->message = $question;\n            $result = $mailer->send();\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n}\n\n$http->sendJsonWithHeaders($message);\nexit();\n", "<?php\n\n/**\n * The main Comment class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-07-23\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Services\\Gravatar;\nuse phpMyFAQ\\Entity\\Comment;\n\n/**\n * Class Comments\n * @package phpMyFAQ\n */\nclass Comments\n{\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Language strings.\n     *\n     * @var string\n     */\n    private $pmfStr;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG;\n\n        $this->config = $config;\n        $this->pmfStr = $PMF_LANG;\n    }\n\n    /**\n     * Returns all user comments (HTML formatted) from a record by type.\n     *\n     * @param int $id Comment ID\n     * @param string $type Comment type: {faq|news}\n     * @return string\n     * @throws \\Exception\n     * @todo   Move this code to a helper class\n     */\n    public function getComments(int $id, string $type): string\n    {\n        $comments = $this->getCommentsData($id, $type);\n        $date = new Date($this->config);\n        $mail = new Mail($this->config);\n        $gravatar = new Gravatar();\n\n        $output = '';\n        foreach ($comments as $item) {\n            $output .= '<div class=\"row mt-2 mb-2\">';\n            $output .= '  <div class=\"col-sm-1\">';\n            $output .= '    <div class=\"thumbnail\">';\n            $output .= $gravatar->getImage($item->getEmail(), ['class' => 'img-thumbnail']);\n            $output .= '   </div>';\n            $output .= '  </div>';\n\n            $output .= '  <div class=\"col-sm-11\">';\n            $output .= '    <div class=\"card\">';\n            $output .= '     <div class=\"card-header card-header-comments\">';\n            $output .= sprintf(\n                '<strong><a href=\"mailto:%s\">%s</a></strong>',\n                $mail->safeEmail($item->getEmail()),\n                Strings::htmlentities($item->getUsername())\n            );\n            $output .= sprintf(' <span class=\"text-muted\">(%s)</span>', $date->format($item->getDate()));\n            $output .= '     </div>';\n            $output .= sprintf(\n                '<div class=\"card-body\">%s</div>',\n                $this->showShortComment($item->getId(), $item->getComment())\n            );\n            $output .= '   </div>';\n            $output .= '  </div>';\n            $output .= '</div>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns all user comments from a record by type.\n     *\n     * @param int $referenceId record id\n     * @param string $type record type: {faq|news}\n     *\n     * @return Comment[]\n     */\n    public function getCommentsData(int $referenceId, string $type): array\n    {\n        $comments = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                id_comment, id, usr, email, comment, datum\n            FROM\n                %sfaqcomments\n            WHERE\n                type = '%s'\n            AND \n                id = %d\",\n            Database::getTablePrefix(),\n            $type,\n            $referenceId\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $comment = new Comment();\n                $comment\n                    ->setId($row->id_comment)\n                    ->setRecordId($row->id)\n                    ->setComment($row->comment)\n                    ->setDate(Date::createIsoDate($row->datum, DATE_ISO8601, false))\n                    ->setUsername($row->usr)\n                    ->setEmail($row->email)\n                    ->setType($type);\n                $comments[] = $comment;\n            }\n        }\n\n        return $comments;\n    }\n\n    /**\n     * Adds some fancy HTML if a comment is too long.\n     *\n     * @param int $id\n     * @param string $comment\n     * @return string\n     */\n    private function showShortComment(int $id, string $comment): string\n    {\n        $words = explode(' ', nl2br($comment));\n        $numWords = 0;\n\n        $comment = '';\n        foreach ($words as $word) {\n            $comment .= $word . ' ';\n            if (15 === $numWords) {\n                $comment .= '<span class=\"comment-dots-' . $id . '\">&hellip; </span>' .\n                    '<a href=\"#\" data-comment-id=\"' . $id . '\" class=\"pmf-comments-show-more comment-show-more-' . $id .\n                    '\">' . $this->pmfStr['msgShowMore'] . '</a>' .\n                    '<span class=\"comment-more-' . $id . ' d-none\">';\n            }\n            ++$numWords;\n        }\n\n        // Convert URLs to HTML anchors\n        return Utils::parseUrl($comment) . '</span>';\n    }\n\n    /**\n     * Adds a new comment.\n     * @param Comment $comment\n     * @return bool\n     */\n    public function addComment(Comment $comment): bool\n    {\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqcomments\n            VALUES\n                (%d, %d, '%s', '%s', '%s', '%s', %d, '%s')\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqcomments', 'id_comment'),\n            $comment->getRecordId(),\n            $comment->getType(),\n            $this->config->getDb()->escape($comment->getUsername()),\n            $this->config->getDb()->escape($comment->getEmail()),\n            $this->config->getDb()->escape($comment->getComment()),\n            $comment->getDate(),\n            $comment->hasHelped()\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes a comment.\n     *\n     * @param int $recordId Record id\n     * @param int $commentId Comment id\n     *\n     * @return bool\n     */\n    public function deleteComment(int $recordId, int $commentId): bool\n    {\n        $query = sprintf(\n            '\n            DELETE FROM\n                %sfaqcomments\n            WHERE\n                id = %d\n            AND\n                id_comment = %d',\n            Database::getTablePrefix(),\n            $recordId,\n            $commentId\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the number of comments of each FAQ record as an array.\n     *\n     * @param string $type Type of comment: faq or news\n     * @return string[]\n     */\n    public function getNumberOfComments(string $type = CommentType::FAQ): array\n    {\n        $num = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                COUNT(id) AS anz,\n                id\n            FROM\n                %sfaqcomments\n            WHERE\n                type = '%s'\n            GROUP BY id\n            ORDER BY id\",\n            Database::getTablePrefix(),\n            $type\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $num[$row->id] = $row->anz;\n            }\n        }\n\n        return $num;\n    }\n\n    /**\n     * Returns all comments with their categories.\n     *\n     * @param string $type Type of comment: faq or news\n     * @return Comment[]\n     */\n    public function getAllComments(string $type = CommentType::FAQ): array\n    {\n        $comments = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                fc.id_comment AS comment_id,\n                fc.id AS record_id,\n                %s\n                fc.usr AS username,\n                fc.email AS email,\n                fc.comment AS comment,\n                fc.datum AS comment_date\n            FROM\n                %sfaqcomments fc\n            %s\n            WHERE\n                type = '%s'\",\n            ($type == CommentType::FAQ) ? \"fcg.category_id,\\n\" : '',\n            Database::getTablePrefix(),\n            ($type == CommentType::FAQ) ? 'LEFT JOIN\n                ' . Database::getTablePrefix() . \"faqcategoryrelations fcg\n            ON\n                fc.id = fcg.record_id\\n\" : '',\n            $type\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $comment = new Comment();\n                $comment\n                    ->setId($row->comment_id)\n                    ->setRecordId($row->record_id)\n                    ->setType($type)\n                    ->setComment($row->comment)\n                    ->setDate($row->comment_date)\n                    ->setUsername($row->username)\n                    ->setEmail($row->email);\n\n                if (isset($row->category_id)) {\n                    $comment->setCategoryId($row->category_id);\n                }\n\n                $comments[] = $comment;\n            }\n        }\n\n        return $comments;\n    }\n}\n"], "filenames": ["phpmyfaq/ajaxservice.php", "phpmyfaq/src/phpMyFAQ/Comments.php"], "buggy_code_start_loc": [203, 86], "buggy_code_end_loc": [204, 87], "fixing_code_start_loc": [203, 86], "fixing_code_end_loc": [204, 87], "type": "CWE-79", "message": "Cross-site Scripting in GitHub repository thorsten/phpmyfaq prior to 3.1.12.", "other": {"cve": {"id": "CVE-2023-1761", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-31T02:15:06.703", "lastModified": "2023-04-26T16:15:09.927", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site Scripting in GitHub repository thorsten/phpmyfaq prior to 3.1.12."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.12", "matchCriteriaId": "653EC167-06FC-4D30-AAF8-B75F596519AE"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/128ef85f8e3ab7869d3107aa4d0b6867b53391d7", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/24c0a65f-0751-4ff8-af63-4b325ac8879f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/128ef85f8e3ab7869d3107aa4d0b6867b53391d7"}}