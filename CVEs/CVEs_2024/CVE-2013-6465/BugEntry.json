{"buggy_code": ["/*\n * Copyright 2012 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jbpm.console.ng.ht.client.editors.taskdetailsmulti;\n\nimport com.github.gwtbootstrap.client.ui.Heading;\nimport javax.enterprise.context.Dependent;\nimport javax.inject.Inject;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.user.client.ui.HTMLPanel;\nimport com.google.gwt.user.client.ui.IsWidget;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.enterprise.event.Observes;\nimport org.jbpm.console.ng.ht.client.i18n.Constants;\nimport org.jbpm.console.ng.ht.model.events.TaskSelectionEvent;\nimport org.uberfire.client.annotations.DefaultPosition;\nimport org.uberfire.client.annotations.WorkbenchMenu;\nimport org.uberfire.lifecycle.OnOpen;\nimport org.uberfire.lifecycle.OnStartup;\nimport org.uberfire.client.annotations.WorkbenchPartTitle;\nimport org.uberfire.client.annotations.WorkbenchPartView;\nimport org.uberfire.client.annotations.WorkbenchScreen;\nimport org.uberfire.client.mvp.AbstractWorkbenchScreenActivity;\nimport org.uberfire.client.mvp.Activity;\nimport org.uberfire.client.mvp.ActivityManager;\nimport org.uberfire.client.mvp.PlaceManager;\nimport org.uberfire.client.mvp.UberView;\nimport org.uberfire.client.workbench.widgets.split.WorkbenchSplitLayoutPanel;\nimport org.uberfire.lifecycle.OnClose;\nimport org.uberfire.mvp.Command;\nimport org.uberfire.mvp.PlaceRequest;\nimport org.uberfire.mvp.impl.DefaultPlaceRequest;\nimport org.uberfire.security.Identity;\nimport org.uberfire.workbench.model.Position;\nimport org.uberfire.workbench.model.menu.MenuFactory;\nimport org.uberfire.workbench.model.menu.Menus;\n\n@Dependent\n@WorkbenchScreen(identifier = \"Task Details Multi\")\npublic class TaskDetailsMultiPresenter {\n\n    private Constants constants = GWT.create(Constants.class);\n    @Inject\n    private ActivityManager activityManager;\n    @Inject\n    private PlaceManager placeManager;\n    \n    private long selectedTaskId = 0;\n    \n    private String selectedTaskName = \"\";\n\n    public interface TaskDetailsMultiView extends UberView<TaskDetailsMultiPresenter> {\n\n        void displayNotification(String text);\n\n        Heading getTaskIdAndName();\n\n        HTMLPanel getContent();\n    }\n    @Inject\n    Identity identity;\n    @Inject\n    public TaskDetailsMultiView view;\n    private Menus menus;\n    private PlaceRequest place;\n    private Map<String, AbstractWorkbenchScreenActivity> activitiesMap = new HashMap<String, AbstractWorkbenchScreenActivity>(4);\n\n    public TaskDetailsMultiPresenter() {\n        makeMenuBar();\n    }\n\n    @WorkbenchPartView\n    public UberView<TaskDetailsMultiPresenter> getView() {\n        return view;\n    }\n\n    @DefaultPosition\n    public Position getPosition(){\n        return Position.EAST;\n    }\n    \n    \n    @OnStartup\n    public void onStartup(final PlaceRequest place) {\n        this.place = place;\n    }\n\n    @WorkbenchPartTitle\n    public String getTitle() {\n        return constants.Details();\n    }\n\n    @OnOpen\n    public void onOpen() {\n        WorkbenchSplitLayoutPanel splitPanel = (WorkbenchSplitLayoutPanel)view.asWidget().getParent().getParent().getParent().getParent()\n                                            .getParent().getParent().getParent().getParent().getParent().getParent().getParent();\n        splitPanel.setWidgetMinSize(splitPanel.getWidget(0), 500);\n        \n    }\n    \n    public void onTaskSelectionEvent(@Observes TaskSelectionEvent event){\n        selectedTaskId = event.getTaskId();\n        selectedTaskName = event.getTaskName();\n        \n        view.getTaskIdAndName().setText(String.valueOf(selectedTaskId) + \" - \"+selectedTaskName);\n        \n        view.getContent().clear();\n        \n        String placeToGo;\n        if(event.getPlace() != null && !event.getPlace().equals(\"\")){\n            placeToGo = event.getPlace();\n        }else{\n            placeToGo = \"Task Details\";\n        }\n        \n        \n\n        DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n        //Set Parameters here: \n        defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n        defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n        Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n        AbstractWorkbenchScreenActivity activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n        \n        activitiesMap.put(placeToGo, activity);\n        \n        IsWidget widget = activity.getWidget();\n        activity.launch(place, null);\n        activity.onStartup(defaultPlaceRequest);\n        view.getContent().add(widget);\n        activity.onOpen();\n    }\n\n    @WorkbenchMenu\n    public Menus getMenus() {\n        return menus;\n    }\n\n    private void makeMenuBar() {\n        menus = MenuFactory\n                .newTopLevelMenu(constants.Work())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Form Display\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n\n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                    \n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n            }\n        })\n                .endMenu()\n                .newTopLevelMenu(constants.Details())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Task Details\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n            }\n        })\n                .endMenu()\n                .newTopLevelMenu(constants.Assignments())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Task Assignments\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n            }\n        })\n                .endMenu()\n                .newTopLevelMenu(constants.Comments())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Task Comments\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n\n\n            }\n        })\n                .endMenu()\n                .build();\n\n    }\n    \n    @OnClose\n    public void onClose(){\n        for(String activityId : activitiesMap.keySet()){\n            activitiesMap.get(activityId).onClose();\n        }\n        activitiesMap.clear();\n    }\n}\n"], "fixing_code": ["/*\n * Copyright 2012 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jbpm.console.ng.ht.client.editors.taskdetailsmulti;\n\nimport com.github.gwtbootstrap.client.ui.Heading;\nimport javax.enterprise.context.Dependent;\nimport javax.inject.Inject;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.safehtml.shared.SafeHtmlUtils;\nimport com.google.gwt.user.client.ui.HTMLPanel;\nimport com.google.gwt.user.client.ui.IsWidget;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.enterprise.event.Observes;\nimport org.jbpm.console.ng.ht.client.i18n.Constants;\nimport org.jbpm.console.ng.ht.model.events.TaskSelectionEvent;\nimport org.uberfire.client.annotations.DefaultPosition;\nimport org.uberfire.client.annotations.WorkbenchMenu;\nimport org.uberfire.lifecycle.OnOpen;\nimport org.uberfire.lifecycle.OnStartup;\nimport org.uberfire.client.annotations.WorkbenchPartTitle;\nimport org.uberfire.client.annotations.WorkbenchPartView;\nimport org.uberfire.client.annotations.WorkbenchScreen;\nimport org.uberfire.client.mvp.AbstractWorkbenchScreenActivity;\nimport org.uberfire.client.mvp.Activity;\nimport org.uberfire.client.mvp.ActivityManager;\nimport org.uberfire.client.mvp.PlaceManager;\nimport org.uberfire.client.mvp.UberView;\nimport org.uberfire.client.workbench.widgets.split.WorkbenchSplitLayoutPanel;\nimport org.uberfire.lifecycle.OnClose;\nimport org.uberfire.mvp.Command;\nimport org.uberfire.mvp.PlaceRequest;\nimport org.uberfire.mvp.impl.DefaultPlaceRequest;\nimport org.uberfire.security.Identity;\nimport org.uberfire.workbench.model.Position;\nimport org.uberfire.workbench.model.menu.MenuFactory;\nimport org.uberfire.workbench.model.menu.Menus;\n\n@Dependent\n@WorkbenchScreen(identifier = \"Task Details Multi\")\npublic class TaskDetailsMultiPresenter {\n\n    private Constants constants = GWT.create(Constants.class);\n    @Inject\n    private ActivityManager activityManager;\n    @Inject\n    private PlaceManager placeManager;\n    \n    private long selectedTaskId = 0;\n    \n    private String selectedTaskName = \"\";\n\n    public interface TaskDetailsMultiView extends UberView<TaskDetailsMultiPresenter> {\n\n        void displayNotification(String text);\n\n        Heading getTaskIdAndName();\n\n        HTMLPanel getContent();\n    }\n    @Inject\n    Identity identity;\n    @Inject\n    public TaskDetailsMultiView view;\n    private Menus menus;\n    private PlaceRequest place;\n    private Map<String, AbstractWorkbenchScreenActivity> activitiesMap = new HashMap<String, AbstractWorkbenchScreenActivity>(4);\n\n    public TaskDetailsMultiPresenter() {\n        makeMenuBar();\n    }\n\n    @WorkbenchPartView\n    public UberView<TaskDetailsMultiPresenter> getView() {\n        return view;\n    }\n\n    @DefaultPosition\n    public Position getPosition(){\n        return Position.EAST;\n    }\n    \n    \n    @OnStartup\n    public void onStartup(final PlaceRequest place) {\n        this.place = place;\n    }\n\n    @WorkbenchPartTitle\n    public String getTitle() {\n        return constants.Details();\n    }\n\n    @OnOpen\n    public void onOpen() {\n        WorkbenchSplitLayoutPanel splitPanel = (WorkbenchSplitLayoutPanel)view.asWidget().getParent().getParent().getParent().getParent()\n                                            .getParent().getParent().getParent().getParent().getParent().getParent().getParent();\n        splitPanel.setWidgetMinSize(splitPanel.getWidget(0), 500);\n        \n    }\n    \n    public void onTaskSelectionEvent(@Observes TaskSelectionEvent event){\n        selectedTaskId = event.getTaskId();\n        selectedTaskName = event.getTaskName();\n        \n        view.getTaskIdAndName().setText(SafeHtmlUtils.htmlEscape(String.valueOf(selectedTaskId) + \" - \"+selectedTaskName));\n        \n        view.getContent().clear();\n        \n        String placeToGo;\n        if(event.getPlace() != null && !event.getPlace().equals(\"\")){\n            placeToGo = event.getPlace();\n        }else{\n            placeToGo = \"Task Details\";\n        }\n        \n        \n\n        DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n        //Set Parameters here: \n        defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n        defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n        Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n        AbstractWorkbenchScreenActivity activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n        \n        activitiesMap.put(placeToGo, activity);\n        \n        IsWidget widget = activity.getWidget();\n        activity.launch(place, null);\n        activity.onStartup(defaultPlaceRequest);\n        view.getContent().add(widget);\n        activity.onOpen();\n    }\n\n    @WorkbenchMenu\n    public Menus getMenus() {\n        return menus;\n    }\n\n    private void makeMenuBar() {\n        menus = MenuFactory\n                .newTopLevelMenu(constants.Work())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Form Display\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n\n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                    \n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n            }\n        })\n                .endMenu()\n                .newTopLevelMenu(constants.Details())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Task Details\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n            }\n        })\n                .endMenu()\n                .newTopLevelMenu(constants.Assignments())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Task Assignments\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n            }\n        })\n                .endMenu()\n                .newTopLevelMenu(constants.Comments())\n                .respondsWith(new Command() {\n            @Override\n            public void execute() {\n                view.getContent().clear();\n                String placeToGo = \"Task Comments\";\n\n                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);\n                //Set Parameters here: \n                defaultPlaceRequest.addParameter(\"taskId\", String.valueOf(selectedTaskId));\n                defaultPlaceRequest.addParameter(\"taskName\", selectedTaskName);\n\n                AbstractWorkbenchScreenActivity activity = null;\n                if(activitiesMap.get(placeToGo) == null){\n                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);\n                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());\n                    \n                }else{\n                    activity = activitiesMap.get(placeToGo);\n                }\n                IsWidget widget = activity.getWidget();\n                activity.launch(place, null);\n                activity.onStartup(defaultPlaceRequest);\n                view.getContent().add(widget);\n                activity.onOpen();\n\n\n\n            }\n        })\n                .endMenu()\n                .build();\n\n    }\n    \n    @OnClose\n    public void onClose(){\n        for(String activityId : activitiesMap.keySet()){\n            activitiesMap.get(activityId).onClose();\n        }\n        activitiesMap.clear();\n    }\n}\n"], "filenames": ["jbpm-console-ng-human-tasks/jbpm-console-ng-human-tasks-client/src/main/java/org/jbpm/console/ng/ht/client/editors/taskdetailsmulti/TaskDetailsMultiPresenter.java"], "buggy_code_start_loc": [22], "buggy_code_end_loc": [121], "fixing_code_start_loc": [23], "fixing_code_end_loc": [122], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in JBPM KIE Workbench 6.0.x allow remote authenticated users to inject arbitrary web script or HTML via vectors related to task name html inputs.", "other": {"cve": {"id": "CVE-2013-6465", "sourceIdentifier": "secalert@redhat.com", "published": "2017-12-19T19:29:00.203", "lastModified": "2018-01-05T16:20:44.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in JBPM KIE Workbench 6.0.x allow remote authenticated users to inject arbitrary web script or HTML via vectors related to task name html inputs."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades Cross-Site Scripting (XSS) en JBPM KIE Workbench 6.0.x permiten que los usuarios autenticados remotos inyecten scripts web o HTML arbitrarios a trav\u00e9s de vectores relacionados con las entradas HTML de nombres de tareas."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "7E5AB5CC-29F3-4630-9824-32B7B10021DD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:alpha7:*:*:*:*:*:*", "matchCriteriaId": "6A3D607A-31DE-400B-9A5F-A0B4BB6E95B0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:alpha9:*:*:*:*:*:*", "matchCriteriaId": "920CD330-41FD-4B5A-9919-62AF7A56E452"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "F432B6D6-B484-44E4-9659-87D56612B6DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "2413BA36-7B43-4F7A-9362-E970C20A7F03"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "F6DA6A0E-75D6-443F-9359-B2A08F774626"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "2986F76F-380A-4994-94AE-2BF5784DE416"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "56DF7DFA-8A94-4745-AAC1-8BC0069392D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:cr1:*:*:*:*:*:*", "matchCriteriaId": "FDD3EA3D-DD86-4209-BD85-2E95DB2125BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:cr2:*:*:*:*:*:*", "matchCriteriaId": "6BADBBAC-DB44-45BC-8F4E-4278AEA38B30"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:cr3:*:*:*:*:*:*", "matchCriteriaId": "9F3C1CB4-F7D2-458A-9EF0-6C0109FA0FF0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:cr4:*:*:*:*:*:*", "matchCriteriaId": "AC4DE0BB-6894-4C7B-AF11-6D8597C178D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jbpm:6.0.0:cr5:*:*:*:*:*:*", "matchCriteriaId": "F8EC5237-CBB0-4CCE-ACCF-0DF526EDDD78"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1048380", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/kiegroup/jbpm-wb/commit/4818204506e8e94645b52adb9426bedfa9ffdd04", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/kiegroup/jbpm-wb/compare/6.0.x", "source": "secalert@redhat.com", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/kiegroup/jbpm-wb/commit/4818204506e8e94645b52adb9426bedfa9ffdd04"}}