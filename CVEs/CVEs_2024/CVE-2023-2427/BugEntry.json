{"buggy_code": ["<?php\n\n/**\n * The main Tags class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-08-10\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Entity\\TagEntity as EntityTags;\n\n/**\n * Class Tags\n *\n * @package phpMyFAQ\n */\nclass Tags\n{\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * @var array<int, string>\n     */\n    private $recordsByTagName = [];\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Returns all tags for a FAQ record.\n     *\n     * @param int $recordId Record ID\n     * @return string\n     */\n    public function getAllLinkTagsById(int $recordId): string\n    {\n        $tagListing = '';\n\n        foreach ($this->getAllTagsById($recordId) as $taggingId => $taggingName) {\n            $title = Strings::htmlspecialchars($taggingName, ENT_QUOTES, 'utf-8');\n            $url = sprintf('%sindex.php?action=search&amp;tagging_id=%d', $this->config->getDefaultUrl(), $taggingId);\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $taggingName;\n            $oLink->text = $taggingName;\n            $oLink->tooltip = $title;\n            $tagListing .= $oLink->toHtmlAnchor() . ', ';\n        }\n\n        return '' == $tagListing ? '-' : Strings::substr($tagListing, 0, -2);\n    }\n\n    /**\n     * Returns all tags for a FAQ record.\n     *\n     * @param int $recordId Record ID\n     * @return array<int, string>\n     */\n    public function getAllTagsById(int $recordId): array\n    {\n        $tags = [];\n\n        $query = sprintf(\n            '\n            SELECT\n                dt.tagging_id AS tagging_id, \n                t.tagging_name AS tagging_name\n            FROM\n                %sfaqdata_tags dt, %sfaqtags t\n            WHERE\n                dt.record_id = %d\n            AND\n                dt.tagging_id = t.tagging_id\n            ORDER BY\n                t.tagging_name',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $recordId\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $tags[$row->tagging_id] = $row->tagging_name;\n            }\n        }\n\n        return $tags;\n    }\n\n    /**\n     * Saves all tags from a FAQ record.\n     *\n     * @param int $recordId Record ID\n     * @param array<int, string> $tags Array of tags\n     * @return bool\n     */\n    public function saveTags(int $recordId, array $tags): bool\n    {\n        $currentTags = $this->getAllTags();\n\n        // Delete all tag references for the faq record\n        if (count($tags) > 0) {\n            $this->deleteTagsFromRecordId($recordId);\n        }\n\n        // Store tags and references for the faq record\n        foreach ($tags as $tagName) {\n            $tagName = trim($tagName);\n            if (Strings::strlen($tagName) > 0) {\n                if (\n                    !in_array(\n                        Strings::strtolower($tagName),\n                        array_map(['phpMyFAQ\\Strings', 'strtolower'], $currentTags)\n                    )\n                ) {\n                    // Create the new tag\n                    $newTagId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqtags', 'tagging_id');\n                    $query = sprintf(\n                        \"INSERT INTO %sfaqtags (tagging_id, tagging_name) VALUES (%d, '%s')\",\n                        Database::getTablePrefix(),\n                        $newTagId,\n                        $tagName\n                    );\n                    $this->config->getDb()->query($query);\n\n                    // Add the tag reference for the faq record\n                    $query = sprintf(\n                        'INSERT INTO %sfaqdata_tags (record_id, tagging_id) VALUES (%d, %d)',\n                        Database::getTablePrefix(),\n                        $recordId,\n                        $newTagId\n                    );\n                    $this->config->getDb()->query($query);\n                } else {\n                    // Add the tag reference for the faq record\n                    $query = sprintf(\n                        'INSERT INTO %sfaqdata_tags (record_id, tagging_id) VALUES (%d, %d)',\n                        Database::getTablePrefix(),\n                        $recordId,\n                        array_search(\n                            Strings::strtolower($tagName),\n                            array_map(['phpMyFAQ\\Strings', 'strtolower'], $currentTags)\n                        )\n                    );\n                    $this->config->getDb()->query($query);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns all tags.\n     *\n     * @param string|null $search Move the returned result set to be the result of a start-with search\n     * @param int $limit Limit the returned result set\n     * @param bool $showInactive Show inactive tags\n     * @return array<int, string>\n     */\n    public function getAllTags(\n        string $search = null,\n        int $limit = PMF_TAGS_CLOUD_RESULT_SET_SIZE,\n        bool $showInactive = false\n    ): array {\n        $allTags = [];\n\n        // Hack: LIKE is case sensitive under PostgreSQL\n        switch (Database::getType()) {\n            case 'pgsql':\n                $like = 'ILIKE';\n                break;\n            default:\n                $like = 'LIKE';\n                break;\n        }\n\n        $query = sprintf(\n            '\n            SELECT\n                MIN(t.tagging_id) AS tagging_id, t.tagging_name AS tagging_name\n            FROM\n                %sfaqtags t\n            LEFT JOIN\n                %sfaqdata_tags dt\n            ON\n                dt.tagging_id = t.tagging_id\n            LEFT JOIN\n                %sfaqdata d\n            ON\n                d.id = dt.record_id\n            WHERE\n                1=1\n                %s\n                %s\n            GROUP BY\n                tagging_name\n            ORDER BY\n                tagging_name ASC',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            ($showInactive ? '' : \"AND d.active = 'yes'\"),\n            (isset($search) && ($search != '') ? 'AND tagging_name ' . $like . \" '\" . $search . \"%'\" : '')\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            $i = 0;\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                if ($i < $limit) {\n                    $allTags[$row->tagging_id] = $row->tagging_name;\n                } else {\n                    break;\n                }\n                ++$i;\n            }\n        }\n\n        return array_unique($allTags);\n    }\n\n    /**\n     * Deletes all tags from a given record id.\n     *\n     * @param int $recordId Record ID\n     * @return bool\n     */\n    public function deleteTagsFromRecordId(int $recordId): bool\n    {\n        $query = sprintf(\n            'DELETE FROM %sfaqdata_tags WHERE record_id = %d',\n            Database::getTablePrefix(),\n            $recordId\n        );\n\n        $this->config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Updates a tag.\n     *\n     * @param EntityTags $entity\n     * @return bool\n     */\n    public function updateTag(EntityTags $entity): bool\n    {\n        $query = sprintf(\n            \"UPDATE %sfaqtags SET tagging_name = '%s' WHERE tagging_id = %d\",\n            Database::getTablePrefix(),\n            $entity->getName(),\n            $entity->getId()\n        );\n\n        return $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Deletes a given tag.\n     *\n     * @param int $tagId\n     * @return bool\n     */\n    public function deleteTag(int $tagId): bool\n    {\n        $query = sprintf(\n            'DELETE FROM %sfaqtags WHERE tagging_id = %d',\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $this->config->getDb()->query($query);\n\n        $query = sprintf(\n            'DELETE FROM %sfaqdata_tags WHERE tagging_id = %d',\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $this->config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the FAQ record IDs where all tags are included.\n     *\n     * @param array<int, int> $arrayOfTags Array of Tags\n     * @return array<int, int>\n     */\n    public function getFaqsByIntersectionTags(array $arrayOfTags): array\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                td.record_id AS record_id\n            FROM\n                %sfaqdata_tags td\n            JOIN\n                %sfaqtags t ON (td.tagging_id = t.tagging_id)\n            JOIN\n                %sfaqdata d ON (td.record_id = d.id)\n            WHERE\n                (t.tagging_name IN ('%s'))\n            AND\n                (d.lang = '%s')\n            GROUP BY\n                td.record_id\n            HAVING\n                COUNT(td.record_id) = %d\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            implode(\"', '\", $arrayOfTags),\n            $this->config->getLanguage()->getLanguage(),\n            count($arrayOfTags)\n        );\n\n        $records = [];\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $records[] = $row->record_id;\n        }\n\n        return $records;\n    }\n\n    /**\n     * Returns the HTML for the Tags Cloud.\n     *\n     * @return string\n     */\n    public function renderTagCloud(): string\n    {\n        $tags = [];\n\n        // Limit the result set (see: PMF_TAGS_CLOUD_RESULT_SET_SIZE)\n        // for avoiding an 'heavy' load during the evaluation\n        // of the number of records for each tag\n        $tagList = $this->getAllTags('', PMF_TAGS_CLOUD_RESULT_SET_SIZE);\n\n        foreach ($tagList as $tagId => $tagName) {\n            $totFaqByTag = count($this->getFaqsByTagName($tagName));\n            if ($totFaqByTag > 0) {\n                $tags[$tagName]['id'] = $tagId;\n                $tags[$tagName]['name'] = Strings::htmlentities($tagName);\n                $tags[$tagName]['count'] = $totFaqByTag;\n            }\n        }\n\n        $html = '';\n        $i = 0;\n        foreach ($tags as $tag) {\n            ++$i;\n            $title = Strings::htmlspecialchars($tag['name'] . ' (' . $tag['count'] . ')', ENT_QUOTES);\n            $url = sprintf(\n                '%sindex.php?action=search&amp;tagging_id=%d',\n                $this->config->getDefaultUrl(),\n                $tag['id']\n            );\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $tag['name'];\n            $oLink->text = $tag['name'];\n            $oLink->tooltip = $title;\n            $oLink->class = 'btn btn-primary m-1';\n            $html .= $oLink->toHtmlAnchor();\n            $html .= (count($tags) == $i ? '' : ' ');\n        }\n\n        return $html;\n    }\n\n    /**\n     * Returns all FAQ record IDs where all tags are included.\n     *\n     * @param string $tagName The name of the tag\n     * @return array<int, string>\n     */\n    public function getFaqsByTagName(string $tagName): array\n    {\n        if (count($this->recordsByTagName)) {\n            return $this->recordsByTagName;\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                dt.record_id AS record_id\n            FROM\n                %sfaqtags t, %sfaqdata_tags dt\n            LEFT JOIN\n                %sfaqdata d\n            ON\n                d.id = dt.record_id\n            WHERE\n                t.tagging_id = dt.tagging_id\n            AND \n                t.tagging_name = '%s'\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($tagName)\n        );\n\n        $this->recordsByTagName = [];\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $this->recordsByTagName[] = $row->record_id;\n        }\n\n        return $this->recordsByTagName;\n    }\n\n    /**\n     * Returns all FAQ record IDs where all tags are included.\n     *\n     * @param int $tagId Tagging ID\n     * @return array<int>\n     */\n    public function getFaqsByTagId(int $tagId): array\n    {\n        $query = sprintf(\n            '\n            SELECT\n                d.record_id AS record_id\n            FROM\n                %sfaqdata_tags d, %sfaqtags t\n            WHERE\n                t.tagging_id = d.tagging_id\n            AND\n                t.tagging_id = %d\n            GROUP BY\n                record_id',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $records = [];\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $records[] = $row->record_id;\n        }\n\n        return $records;\n    }\n\n    /**\n     * @param int $limit\n     * @return string\n     */\n    public function renderPopularTags(int $limit = 0): string\n    {\n        $html = '';\n        foreach ($this->getPopularTags($limit) as $tagId => $tagFreq) {\n            $tagName = $this->getTagNameById($tagId);\n            $html .= sprintf(\n                '<a class=\"btn btn-primary m-1\" href=\"?action=search&tagging_id=%d\">%s ' .\n                '<span class=\"badge badge-info\">%d</span></a>',\n                $tagId,\n                Strings::htmlentities($tagName),\n                $tagFreq\n            );\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param int $limit Specify the maximum amount of records to return\n     * @return array<int, int>\n     */\n    public function getPopularTags($limit = 0): array\n    {\n        $tags = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                COUNT(record_id) as freq, tagging_id\n            FROM\n                %sfaqdata_tags\n            JOIN\n                %sfaqdata ON id = record_id\n            WHERE\n              lang = '%s'\n            GROUP BY tagging_id\n            ORDER BY freq DESC\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $tags[$row->tagging_id] = $row->freq;\n                if (--$limit === 0) {\n                    break;\n                }\n            }\n        }\n\n        return $tags;\n    }\n\n    /**\n     * Returns the tagged item.\n     *\n     * @param int $tagId Tagging ID\n     * @return string\n     */\n    public function getTagNameById(int $tagId): string\n    {\n        $query = sprintf(\n            'SELECT tagging_name FROM %sfaqtags WHERE tagging_id = %d',\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return $row->tagging_name;\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns the popular Tags as an array\n     *\n     * @param int $limit\n     * @return array<int, array<string, int|string>>\n     */\n    public function getPopularTagsAsArray(int $limit = 0): array\n    {\n        $data = [];\n        foreach ($this->getPopularTags($limit) as $tagId => $tagFreq) {\n            $tagName = $this->getTagNameById($tagId);\n            $data[] = [\n                'tagId' => (int)$tagId,\n                'tagName' => $tagName,\n                'tagFrequency' => (int)$tagFreq\n            ];\n        }\n\n        return $data;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The main Tags class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-08-10\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Entity\\TagEntity as EntityTags;\n\n/**\n * Class Tags\n *\n * @package phpMyFAQ\n */\nclass Tags\n{\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * @var array<int, string>\n     */\n    private array $recordsByTagName = [];\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Returns all tags for a FAQ record.\n     *\n     * @param int $recordId Record ID\n     * @return string\n     */\n    public function getAllLinkTagsById(int $recordId): string\n    {\n        $tagListing = '';\n\n        foreach ($this->getAllTagsById($recordId) as $taggingId => $taggingName) {\n            $title = Strings::htmlentities($taggingName);\n            $url = sprintf('%sindex.php?action=search&amp;tagging_id=%d', $this->config->getDefaultUrl(), $taggingId);\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $title;\n            $oLink->text = $title;\n            $oLink->tooltip = $title;\n            $tagListing .= $oLink->toHtmlAnchor() . ', ';\n        }\n\n        return '' == $tagListing ? '-' : Strings::substr($tagListing, 0, -2);\n    }\n\n    /**\n     * Returns all tags for a FAQ record.\n     *\n     * @param int $recordId Record ID\n     * @return array<int, string>\n     */\n    public function getAllTagsById(int $recordId): array\n    {\n        $tags = [];\n\n        $query = sprintf(\n            '\n            SELECT\n                dt.tagging_id AS tagging_id, \n                t.tagging_name AS tagging_name\n            FROM\n                %sfaqdata_tags dt, %sfaqtags t\n            WHERE\n                dt.record_id = %d\n            AND\n                dt.tagging_id = t.tagging_id\n            ORDER BY\n                t.tagging_name',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $recordId\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $tags[$row->tagging_id] = $row->tagging_name;\n            }\n        }\n\n        return $tags;\n    }\n\n    /**\n     * Saves all tags from a FAQ record.\n     *\n     * @param int $recordId Record ID\n     * @param array<int, string> $tags Array of tags\n     * @return bool\n     */\n    public function saveTags(int $recordId, array $tags): bool\n    {\n        $currentTags = $this->getAllTags();\n\n        // Delete all tag references for the faq record\n        if (count($tags) > 0) {\n            $this->deleteTagsFromRecordId($recordId);\n        }\n\n        // Store tags and references for the faq record\n        foreach ($tags as $tagName) {\n            $tagName = trim($tagName);\n            if (Strings::strlen($tagName) > 0) {\n                if (\n                    !in_array(\n                        Strings::strtolower($tagName),\n                        array_map(['phpMyFAQ\\Strings', 'strtolower'], $currentTags)\n                    )\n                ) {\n                    // Create the new tag\n                    $newTagId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqtags', 'tagging_id');\n                    $query = sprintf(\n                        \"INSERT INTO %sfaqtags (tagging_id, tagging_name) VALUES (%d, '%s')\",\n                        Database::getTablePrefix(),\n                        $newTagId,\n                        $tagName\n                    );\n                    $this->config->getDb()->query($query);\n\n                    // Add the tag reference for the faq record\n                    $query = sprintf(\n                        'INSERT INTO %sfaqdata_tags (record_id, tagging_id) VALUES (%d, %d)',\n                        Database::getTablePrefix(),\n                        $recordId,\n                        $newTagId\n                    );\n                    $this->config->getDb()->query($query);\n                } else {\n                    // Add the tag reference for the faq record\n                    $query = sprintf(\n                        'INSERT INTO %sfaqdata_tags (record_id, tagging_id) VALUES (%d, %d)',\n                        Database::getTablePrefix(),\n                        $recordId,\n                        array_search(\n                            Strings::strtolower($tagName),\n                            array_map(['phpMyFAQ\\Strings', 'strtolower'], $currentTags)\n                        )\n                    );\n                    $this->config->getDb()->query($query);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns all tags.\n     *\n     * @param string|null $search Move the returned result set to be the result of a start-with search\n     * @param int $limit Limit the returned result set\n     * @param bool $showInactive Show inactive tags\n     * @return array<int, string>\n     */\n    public function getAllTags(\n        string $search = null,\n        int $limit = PMF_TAGS_CLOUD_RESULT_SET_SIZE,\n        bool $showInactive = false\n    ): array {\n        $allTags = [];\n\n        // Hack: LIKE is case sensitive under PostgreSQL\n        switch (Database::getType()) {\n            case 'pgsql':\n                $like = 'ILIKE';\n                break;\n            default:\n                $like = 'LIKE';\n                break;\n        }\n\n        $query = sprintf(\n            '\n            SELECT\n                MIN(t.tagging_id) AS tagging_id, t.tagging_name AS tagging_name\n            FROM\n                %sfaqtags t\n            LEFT JOIN\n                %sfaqdata_tags dt\n            ON\n                dt.tagging_id = t.tagging_id\n            LEFT JOIN\n                %sfaqdata d\n            ON\n                d.id = dt.record_id\n            WHERE\n                1=1\n                %s\n                %s\n            GROUP BY\n                tagging_name\n            ORDER BY\n                tagging_name ASC',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            ($showInactive ? '' : \"AND d.active = 'yes'\"),\n            (isset($search) && ($search != '') ? 'AND tagging_name ' . $like . \" '\" . $search . \"%'\" : '')\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            $i = 0;\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                if ($i < $limit) {\n                    $allTags[$row->tagging_id] = $row->tagging_name;\n                } else {\n                    break;\n                }\n                ++$i;\n            }\n        }\n\n        return array_unique($allTags);\n    }\n\n    /**\n     * Deletes all tags from a given record id.\n     *\n     * @param int $recordId Record ID\n     * @return bool\n     */\n    public function deleteTagsFromRecordId(int $recordId): bool\n    {\n        $query = sprintf(\n            'DELETE FROM %sfaqdata_tags WHERE record_id = %d',\n            Database::getTablePrefix(),\n            $recordId\n        );\n\n        $this->config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Updates a tag.\n     *\n     * @param EntityTags $entity\n     * @return bool\n     */\n    public function updateTag(EntityTags $entity): bool\n    {\n        $query = sprintf(\n            \"UPDATE %sfaqtags SET tagging_name = '%s' WHERE tagging_id = %d\",\n            Database::getTablePrefix(),\n            $entity->getName(),\n            $entity->getId()\n        );\n\n        return $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Deletes a given tag.\n     *\n     * @param int $tagId\n     * @return bool\n     */\n    public function deleteTag(int $tagId): bool\n    {\n        $query = sprintf(\n            'DELETE FROM %sfaqtags WHERE tagging_id = %d',\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $this->config->getDb()->query($query);\n\n        $query = sprintf(\n            'DELETE FROM %sfaqdata_tags WHERE tagging_id = %d',\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $this->config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the FAQ record IDs where all tags are included.\n     *\n     * @param array<int, int> $arrayOfTags Array of Tags\n     * @return array<int, int>\n     */\n    public function getFaqsByIntersectionTags(array $arrayOfTags): array\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                td.record_id AS record_id\n            FROM\n                %sfaqdata_tags td\n            JOIN\n                %sfaqtags t ON (td.tagging_id = t.tagging_id)\n            JOIN\n                %sfaqdata d ON (td.record_id = d.id)\n            WHERE\n                (t.tagging_name IN ('%s'))\n            AND\n                (d.lang = '%s')\n            GROUP BY\n                td.record_id\n            HAVING\n                COUNT(td.record_id) = %d\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            implode(\"', '\", $arrayOfTags),\n            $this->config->getLanguage()->getLanguage(),\n            count($arrayOfTags)\n        );\n\n        $records = [];\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $records[] = $row->record_id;\n        }\n\n        return $records;\n    }\n\n    /**\n     * Returns the HTML for the Tags Cloud.\n     *\n     * @return string\n     */\n    public function renderTagCloud(): string\n    {\n        $tags = [];\n\n        // Limit the result set (see: PMF_TAGS_CLOUD_RESULT_SET_SIZE)\n        // for avoiding an 'heavy' load during the evaluation\n        // of the number of records for each tag\n        $tagList = $this->getAllTags('', PMF_TAGS_CLOUD_RESULT_SET_SIZE);\n\n        foreach ($tagList as $tagId => $tagName) {\n            $totFaqByTag = count($this->getFaqsByTagName($tagName));\n            if ($totFaqByTag > 0) {\n                $tags[$tagName]['id'] = $tagId;\n                $tags[$tagName]['name'] = Strings::htmlentities($tagName);\n                $tags[$tagName]['count'] = $totFaqByTag;\n            }\n        }\n\n        $html = '';\n        $i = 0;\n        foreach ($tags as $tag) {\n            ++$i;\n            $title = Strings::htmlspecialchars($tag['name'] . ' (' . $tag['count'] . ')', ENT_QUOTES);\n            $url = sprintf(\n                '%sindex.php?action=search&amp;tagging_id=%d',\n                $this->config->getDefaultUrl(),\n                $tag['id']\n            );\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $tag['name'];\n            $oLink->text = $tag['name'];\n            $oLink->tooltip = $title;\n            $oLink->class = 'btn btn-primary m-1';\n            $html .= $oLink->toHtmlAnchor();\n            $html .= (count($tags) == $i ? '' : ' ');\n        }\n\n        return $html;\n    }\n\n    /**\n     * Returns all FAQ record IDs where all tags are included.\n     *\n     * @param string $tagName The name of the tag\n     * @return array<int, string>\n     */\n    public function getFaqsByTagName(string $tagName): array\n    {\n        if (count($this->recordsByTagName)) {\n            return $this->recordsByTagName;\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                dt.record_id AS record_id\n            FROM\n                %sfaqtags t, %sfaqdata_tags dt\n            LEFT JOIN\n                %sfaqdata d\n            ON\n                d.id = dt.record_id\n            WHERE\n                t.tagging_id = dt.tagging_id\n            AND \n                t.tagging_name = '%s'\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($tagName)\n        );\n\n        $this->recordsByTagName = [];\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $this->recordsByTagName[] = $row->record_id;\n        }\n\n        return $this->recordsByTagName;\n    }\n\n    /**\n     * Returns all FAQ record IDs where all tags are included.\n     *\n     * @param int $tagId Tagging ID\n     * @return array<int>\n     */\n    public function getFaqsByTagId(int $tagId): array\n    {\n        $query = sprintf(\n            '\n            SELECT\n                d.record_id AS record_id\n            FROM\n                %sfaqdata_tags d, %sfaqtags t\n            WHERE\n                t.tagging_id = d.tagging_id\n            AND\n                t.tagging_id = %d\n            GROUP BY\n                record_id',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $records = [];\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $records[] = $row->record_id;\n        }\n\n        return $records;\n    }\n\n    /**\n     * @param int $limit\n     * @return string\n     */\n    public function renderPopularTags(int $limit = 0): string\n    {\n        $html = '';\n        foreach ($this->getPopularTags($limit) as $tagId => $tagFreq) {\n            $tagName = $this->getTagNameById($tagId);\n            $html .= sprintf(\n                '<a class=\"btn btn-primary m-1\" href=\"?action=search&tagging_id=%d\">%s ' .\n                '<span class=\"badge badge-info\">%d</span></a>',\n                $tagId,\n                Strings::htmlentities($tagName),\n                $tagFreq\n            );\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param int $limit Specify the maximum amount of records to return\n     * @return array<int, int>\n     */\n    public function getPopularTags($limit = 0): array\n    {\n        $tags = [];\n\n        $query = sprintf(\n            \"\n            SELECT\n                COUNT(record_id) as freq, tagging_id\n            FROM\n                %sfaqdata_tags\n            JOIN\n                %sfaqdata ON id = record_id\n            WHERE\n              lang = '%s'\n            GROUP BY tagging_id\n            ORDER BY freq DESC\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $tags[$row->tagging_id] = $row->freq;\n                if (--$limit === 0) {\n                    break;\n                }\n            }\n        }\n\n        return $tags;\n    }\n\n    /**\n     * Returns the tagged item.\n     *\n     * @param int $tagId Tagging ID\n     * @return string\n     */\n    public function getTagNameById(int $tagId): string\n    {\n        $query = sprintf(\n            'SELECT tagging_name FROM %sfaqtags WHERE tagging_id = %d',\n            Database::getTablePrefix(),\n            $tagId\n        );\n\n        $result = $this->config->getDb()->query($query);\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return $row->tagging_name;\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns the popular Tags as an array\n     *\n     * @param int $limit\n     * @return array<int, array<string, int|string>>\n     */\n    public function getPopularTagsAsArray(int $limit = 0): array\n    {\n        $data = [];\n        foreach ($this->getPopularTags($limit) as $tagId => $tagFreq) {\n            $tagName = $this->getTagNameById($tagId);\n            $data[] = [\n                'tagId' => (int)$tagId,\n                'tagName' => $tagName,\n                'tagFrequency' => (int)$tagFreq\n            ];\n        }\n\n        return $data;\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Tags.php"], "buggy_code_start_loc": [34], "buggy_code_end_loc": [67], "fixing_code_start_loc": [34], "fixing_code_end_loc": [67], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.1.13.", "other": {"cve": {"id": "CVE-2023-2427", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-05T19:15:15.687", "lastModified": "2023-05-10T02:19:43.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.1.13."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.13", "matchCriteriaId": "C8E79CDF-44C3-4462-BDA6-E23A25A11D0D"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/514f4df2ad918e69575028d58b2e33aaf536e59b", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/89005a6d-d019-4cb7-ae88-486d2d44190d", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/514f4df2ad918e69575028d58b2e33aaf536e59b"}}