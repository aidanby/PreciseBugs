{"buggy_code": ["<?php\n\n$time_start = microtime(true);\n$config = '../../videos/configuration.php';\nsession_write_close();\nif (!file_exists($config)) {\n    [$scriptPath] = get_included_files();\n    $path = pathinfo($scriptPath);\n    $config = $path['dirname'] . \"/\" . $config;\n}\nheader('Content-Type: application/json');\nrequire_once $config;\nset_time_limit(0);\nrequire_once $global['systemRootPath'] . 'objects/plugin.php';\nrequire_once $global['systemRootPath'] . 'plugin/CloneSite/CloneSite.php';\nrequire_once $global['systemRootPath'] . 'plugin/CloneSite/CloneLog.php';\nrequire_once $global['systemRootPath'] . 'plugin/CloneSite/functions.php';\n\n$totalSteps = 7;\n$total2 = $total = 0;\n$resp = new stdClass();\n$resp->error = true;\n$resp->msg = \"\";\n\n$log = new CloneLog();\n\n$log->add(\"Clone: Clone Start\");\n\n$objClone = AVideoPlugin::getObjectDataIfEnabled(\"CloneSite\");\n\nif (empty($objClone)) {\n    $resp->msg = \"Your Clone Site Plugin is not enabled\";\n    $log->add(\"Clone: {$resp->msg}\");\n    die(json_encode($resp));\n}\n\nif (empty($objClone->cloneSiteURL)) {\n    $resp->msg = \"Your Clone Site URL is empty, please click on the Edit parameters buttons and place an AVideo URL\";\n    _error_log(\"{$resp->msg} (\" . json_encode($objClone) . \")\");\n    $log->add(\"Clone: {$resp->msg}\");\n    die(json_encode($resp));\n}\n\n$objClone->cloneSiteURL = rtrim($objClone->cloneSiteURL, \"/\") . '/';\n$objCloneOriginal = $objClone;\n$argv[1] = preg_replace(\"/[^A-Za-z0-9 ]/\", '', @$argv[1]);\n\nif (empty($objClone) || empty($argv[1]) || $objClone->myKey !== $argv[1]) {\n    if (!User::isAdmin()) {\n        $resp->msg = \"You can't do this\";\n        $log->add(\"Clone: {$resp->msg}\");\n        echo \"$objClone->myKey !== $argv[1]\";\n        die(json_encode($resp));\n    }\n}\n\n$videosSite = \"{$objClone->cloneSiteURL}videos/\";\n$videosDir = Video::getStoragePath() . \"\";\n$clonesDir = \"{$videosDir}cache/clones/\";\n$photosDir = \"{$videosDir}userPhoto/\";\n$photosSite = \"{$videosSite}userPhoto/\";\nif (!file_exists($clonesDir)) {\n    mkdir($clonesDir, 0777, true);\n    file_put_contents($clonesDir . \"index.html\", '');\n}\nif (!file_exists($photosDir)) {\n    mkdir($photosDir, 0777, true);\n}\n\n$url = $objClone->cloneSiteURL . \"plugin/CloneSite/cloneServer.json.php?url=\" . urlencode($global['webSiteRootURL']) . \"&key={$objClone->myKey}&useRsync=\" . intval($objClone->useRsync);\n// check if it respond\n$log->add(\"Clone (1 of {$totalSteps}): Asking the Server the database and the files\");\n$content = url_get_contents($url, \"\", 3600, true);\n_error_log(\"Clone: url_get_contents($url) respond: ($content)\");\n//var_dump($url, $content);exit;\n$json = _json_decode($content);\n\nif (empty($json)) {\n    $resp->msg = \"Clone Server Unknow ERROR\";\n    $log->add(\"Clone: Server Unknow ERROR\");\n    die(json_encode($resp));\n}\n\nif (!empty($json->error)) {\n    $resp->msg = \"Clone Server message: {$json->msg}\";\n    $log->add(\"Clone: {$resp->msg}\");\n    die(json_encode($resp));\n}\n\n$log->add(\"Clone: Good start! the server has answered\");\n\n\n\n$json->sqlFile = escapeshellarg(preg_replace('/[^a-z0-9_.-]/i', '', $json->sqlFile));\n$json->videoFiles = escapeshellarg(preg_replace('/[^a-z0-9_.-]/i', '', $json->videoFiles));\n$json->photoFiles = escapeshellarg(preg_replace('/[^a-z0-9_.-]/i', '', $json->photoFiles));\n\n// get dump file\n$cmd = \"wget -O {$clonesDir}{$json->sqlFile} {$objClone->cloneSiteURL}videos/cache/clones/{$json->sqlFile}\";\n$log->add(\"Clone (2 of {$totalSteps}): Geting MySQL Dump file\");\nexec($cmd . \" 2>&1\", $output, $return_val);\nif ($return_val !== 0) {\n    $log->add(\"Clone Error: \" . print_r($output, true));\n}\n$log->add(\"Clone: Nice! we got the MySQL Dump file\");\n\n// remove the first warning line\n$file = \"{$clonesDir}{$json->sqlFile}\";\n$contents = file($file, FILE_IGNORE_NEW_LINES);\n$first_line = array_shift($contents);\nfile_put_contents($file, implode(\"\\r\\n\", $contents));\n\n$log->add(\"Clone (3 of {$totalSteps}): Overwriting our database with the server database\");\n// restore dump\n$cmd = \"mysql -u {$mysqlUser} -p{$mysqlPass} --host {$mysqlHost} {$mysqlDatabase} < {$clonesDir}{$json->sqlFile}\";\nexec($cmd . \" 2>&1\", $output, $return_val);\nif ($return_val !== 0) {\n    $log->add(\"Clone Error try again: \" . end($output));\n    $cmd2 = \"sed -i 's/COLLATE=utf8mb4_0900_ai_ci/ /g' {$clonesDir}{$json->sqlFile} \";\n    $log->add(\"Clone try again this command: {$cmd2}\");\n    exec($cmd2 . \" 2>&1\", $output2, $return_val2);\n    if ($return_val2 !== 0) {\n        $log->add(\"Clone Error: \" . print_r($output2, true));\n    }\n    $cmd2 = \"sed -i 's/COLLATE utf8mb4_0900_ai_ci/ /g' {$clonesDir}{$json->sqlFile} \";\n    $log->add(\"and also this command: {$cmd2}\");\n    exec($cmd2 . \" 2>&1\", $output2, $return_val2);\n    if ($return_val2 !== 0) {\n        $log->add(\"Clone Error: \" . end($output2));\n    }\n    exec($cmd . \" 2>&1\", $output, $return_val);\n    if ($return_val !== 0) {\n        $log->add(\"Clone Error: \" . end($output));\n    }\n}\n$log->add(\"Clone: Great! we overwrite it with success.\");\n\nif (empty($objClone->useRsync)) {\n    $videoFiles = getCloneFilesInfo($videosDir);\n    $newVideoFiles = detectNewFiles($json->videoFiles, $videoFiles);\n    $photoFiles = getCloneFilesInfo($photosDir, \"userPhoto/\");\n    $newPhotoFiles = detectNewFiles($json->photoFiles, $photoFiles);\n\n    $total = count($newVideoFiles);\n    $count = 0;\n\n    if (!empty($total)) {\n        $log->add(\"Clone (4 of {$totalSteps}): Now we will copy {$total} new video files, usually this takes a while.\");\n        // copy videos\n        foreach ($newVideoFiles as $value) {\n            $query = parse_url($value->url, PHP_URL_QUERY);\n            if ($query) {\n                $value->url .= '&ignoreXsendfilePreVideoPlay=1';\n            } else {\n                $value->url .= '?ignoreXsendfilePreVideoPlay=1';\n            }\n            $count++;\n            $log->add(\"Clone: Copying Videos {$count} of {$total} {$value->url}\");\n            file_put_contents(\"{$videosDir}{$value->filename}\", fopen(\"$value->url\", 'r'));\n        }\n        $log->add(\"Clone: Copying video files done.\");\n    } else {\n        $log->add(\"Clone (4 of {$totalSteps}): There is no new video file to copy.\");\n    }\n\n    $total2 = count($newPhotoFiles);\n    $count2 = 0;\n\n    if (!empty($total2)) {\n        $log->add(\"Clone (5 of {$totalSteps}): Now we will copy {$total2} new user photo files.\");\n        // copy Photos\n        foreach ($newPhotoFiles as $value) {\n            $count2++;\n            $log->add(\"Clone: Copying Photos {$count2} of {$total2} {$value->url}\");\n            file_put_contents(\"{$photosDir}{$value->filename}\", fopen(\"$value->url\", 'r'));\n        }\n        $log->add(\"Clone: Copying user photo files done.\");\n    } else {\n        $log->add(\"Clone (5 of {$totalSteps}): There is no new user photo file to copy.\");\n    }\n} else {\n    // decrypt the password now\n    $objClone = Plugin::decryptIfNeed($objClone);\n    $port = intval($objClone->cloneSiteSSHPort);\n    if (empty($port)) {\n        $port = 22;\n    }\n    $rsync = \"sshpass -p '{password}' rsync -av -e 'ssh  -p {$port} -o StrictHostKeyChecking=no' --exclude '*.php' --exclude 'cache' --exclude '*.sql' --exclude '*.log' {$objClone->cloneSiteSSHUser}@{$objClone->cloneSiteSSHIP}:{$json->videosDir} \" . Video::getStoragePath() . \" --log-file='{$log->file}' \";\n    $cmd = str_replace(\"{password}\", $objClone->cloneSiteSSHPassword->value, $rsync);\n    $log->add(\"Clone (4 of {$totalSteps}): execute rsync ({$rsync})\");\n\n    exec($cmd . \" 2>&1\", $output, $return_val);\n    if ($return_val !== 0) {\n        //$log->add(\"Clone Error: \" . print_r($output, true));\n    }\n    $log->add(\"Clone (5 of {$totalSteps}): rsync finished\");\n}\n\n// notify to delete dump\n$url = $url . \"&deleteDump={$json->sqlFile}\";\n// check if it respond\n$log->add(\"Clone (6 of {$totalSteps}): Notify Server to Delete Dump\");\n$content2 = url_get_contents($url);\n//var_dump($url, $content);exit;\n$json2 = _json_decode($content);\nif (!empty($json2->error)) {\n    $log->add(\"Clone: Dump NOT deleted\");\n} else {\n    $log->add(\"Clone: Dump DELETED\");\n}\n\n\n$log->add(\"Clone (7 of {$totalSteps}): Resotre the Clone Configuration\");\n// restore clone plugin configuration\n$plugin = new CloneSite();\n$p = new Plugin(0);\n$p->loadFromUUID($plugin->getUUID());\n$p->setObject_data(addcslashes(json_encode($objCloneOriginal), '\\\\'));\n$p->setStatus('active');\n$p->save();\n\necho json_encode($json);\n$log->add(\"Clone: Complete, Database, {$total} Videos and {$total2} Photos\");\n\n$cmd = \"chmod -R 777 {$videosDir}\";\nexec($cmd);    \n    \n$time_end = microtime(true);\n//dividing with 60 will give the execution time in minutes otherwise seconds\n$execution_time = ($time_end - $time_start);\n$timeStr = \"Seconds\";\nif ($execution_time > 60) {\n    $execution_time = $execution_time / 60;\n    $timeStr = \"Minutes\";\n}\n//execution time of the script\n$log->add('Total Execution Time: ' . $execution_time . ' ' . $timeStr);\n"], "fixing_code": ["<?php\n\n$time_start = microtime(true);\n$config = '../../videos/configuration.php';\nsession_write_close();\nif (!file_exists($config)) {\n    [$scriptPath] = get_included_files();\n    $path = pathinfo($scriptPath);\n    $config = $path['dirname'] . \"/\" . $config;\n}\nheader('Content-Type: application/json');\nrequire_once $config;\nset_time_limit(0);\nrequire_once $global['systemRootPath'] . 'objects/plugin.php';\nrequire_once $global['systemRootPath'] . 'plugin/CloneSite/CloneSite.php';\nrequire_once $global['systemRootPath'] . 'plugin/CloneSite/CloneLog.php';\nrequire_once $global['systemRootPath'] . 'plugin/CloneSite/functions.php';\n\n$totalSteps = 7;\n$total2 = $total = 0;\n$resp = new stdClass();\n$resp->error = true;\n$resp->msg = \"\";\n\n$log = new CloneLog();\n\n$log->add(\"Clone: Clone Start\");\n\n$objClone = AVideoPlugin::getObjectDataIfEnabled(\"CloneSite\");\n\nif (empty($objClone)) {\n    $resp->msg = \"Your Clone Site Plugin is not enabled\";\n    $log->add(\"Clone: {$resp->msg}\");\n    die(json_encode($resp));\n}\n\nif (empty($objClone->cloneSiteURL)) {\n    $resp->msg = \"Your Clone Site URL is empty, please click on the Edit parameters buttons and place an AVideo URL\";\n    _error_log(\"{$resp->msg} (\" . json_encode($objClone) . \")\");\n    $log->add(\"Clone: {$resp->msg}\");\n    die(json_encode($resp));\n}\n\n$objClone->cloneSiteURL = rtrim($objClone->cloneSiteURL, \"/\") . '/';\n$objCloneOriginal = $objClone;\n$argv[1] = preg_replace(\"/[^A-Za-z0-9 ]/\", '', @$argv[1]);\n\nif (empty($objClone) || empty($argv[1]) || $objClone->myKey !== $argv[1]) {\n    if (!User::isAdmin()) {\n        $resp->msg = \"You can't do this\";\n        $log->add(\"Clone: {$resp->msg}\");\n        echo \"$objClone->myKey !== $argv[1]\";\n        die(json_encode($resp));\n    }\n}\n\n$videosSite = \"{$objClone->cloneSiteURL}videos/\";\n$videosDir = Video::getStoragePath() . \"\";\n$clonesDir = \"{$videosDir}cache/clones/\";\n$photosDir = \"{$videosDir}userPhoto/\";\n$photosSite = \"{$videosSite}userPhoto/\";\nif (!file_exists($clonesDir)) {\n    mkdir($clonesDir, 0777, true);\n    file_put_contents($clonesDir . \"index.html\", '');\n}\nif (!file_exists($photosDir)) {\n    mkdir($photosDir, 0777, true);\n}\n\n$url = $objClone->cloneSiteURL . \"plugin/CloneSite/cloneServer.json.php?url=\" . urlencode($global['webSiteRootURL']) . \"&key={$objClone->myKey}&useRsync=\" . intval($objClone->useRsync);\n// check if it respond\n$log->add(\"Clone (1 of {$totalSteps}): Asking the Server the database and the files\");\n$content = url_get_contents($url, \"\", 3600, true);\n_error_log(\"Clone: url_get_contents($url) respond: ($content)\");\n//var_dump($url, $content);exit;\n$json = _json_decode($content);\n\nif (empty($json)) {\n    $resp->msg = \"Clone Server Unknow ERROR\";\n    $log->add(\"Clone: Server Unknow ERROR\");\n    die(json_encode($resp));\n}\n\nif (!empty($json->error)) {\n    $resp->msg = \"Clone Server message: {$json->msg}\";\n    $log->add(\"Clone: {$resp->msg}\");\n    die(json_encode($resp));\n}\n\n$log->add(\"Clone: Good start! the server has answered\");\n\n\n\n$json->sqlFile = escapeshellarg(preg_replace('/[^a-z0-9_.-]/i', '', $json->sqlFile));\n$json->videoFiles = escapeshellarg(preg_replace('/[^a-z0-9_.-]/i', '', $json->videoFiles));\n$json->photoFiles = escapeshellarg(preg_replace('/[^a-z0-9_.-]/i', '', $json->photoFiles));\n$objClone->cloneSiteURL = escapeshellarg($objClone->cloneSiteURL);\n\n// get dump file\n$cmd = \"wget -O {$clonesDir}{$json->sqlFile} {$objClone->cloneSiteURL}videos/cache/clones/{$json->sqlFile}\";\n$log->add(\"Clone (2 of {$totalSteps}): Geting MySQL Dump file\");\nexec($cmd . \" 2>&1\", $output, $return_val);\nif ($return_val !== 0) {\n    $log->add(\"Clone Error: \" . print_r($output, true));\n}\n$log->add(\"Clone: Nice! we got the MySQL Dump file\");\n\n// remove the first warning line\n$file = \"{$clonesDir}{$json->sqlFile}\";\n$contents = file($file, FILE_IGNORE_NEW_LINES);\n$first_line = array_shift($contents);\nfile_put_contents($file, implode(\"\\r\\n\", $contents));\n\n$log->add(\"Clone (3 of {$totalSteps}): Overwriting our database with the server database\");\n// restore dump\n$cmd = \"mysql -u {$mysqlUser} -p{$mysqlPass} --host {$mysqlHost} {$mysqlDatabase} < {$clonesDir}{$json->sqlFile}\";\nexec($cmd . \" 2>&1\", $output, $return_val);\nif ($return_val !== 0) {\n    $log->add(\"Clone Error try again: \" . end($output));\n    $cmd2 = \"sed -i 's/COLLATE=utf8mb4_0900_ai_ci/ /g' {$clonesDir}{$json->sqlFile} \";\n    $log->add(\"Clone try again this command: {$cmd2}\");\n    exec($cmd2 . \" 2>&1\", $output2, $return_val2);\n    if ($return_val2 !== 0) {\n        $log->add(\"Clone Error: \" . print_r($output2, true));\n    }\n    $cmd2 = \"sed -i 's/COLLATE utf8mb4_0900_ai_ci/ /g' {$clonesDir}{$json->sqlFile} \";\n    $log->add(\"and also this command: {$cmd2}\");\n    exec($cmd2 . \" 2>&1\", $output2, $return_val2);\n    if ($return_val2 !== 0) {\n        $log->add(\"Clone Error: \" . end($output2));\n    }\n    exec($cmd . \" 2>&1\", $output, $return_val);\n    if ($return_val !== 0) {\n        $log->add(\"Clone Error: \" . end($output));\n    }\n}\n$log->add(\"Clone: Great! we overwrite it with success.\");\n\nif (empty($objClone->useRsync)) {\n    $videoFiles = getCloneFilesInfo($videosDir);\n    $newVideoFiles = detectNewFiles($json->videoFiles, $videoFiles);\n    $photoFiles = getCloneFilesInfo($photosDir, \"userPhoto/\");\n    $newPhotoFiles = detectNewFiles($json->photoFiles, $photoFiles);\n\n    $total = count($newVideoFiles);\n    $count = 0;\n\n    if (!empty($total)) {\n        $log->add(\"Clone (4 of {$totalSteps}): Now we will copy {$total} new video files, usually this takes a while.\");\n        // copy videos\n        foreach ($newVideoFiles as $value) {\n            $query = parse_url($value->url, PHP_URL_QUERY);\n            if ($query) {\n                $value->url .= '&ignoreXsendfilePreVideoPlay=1';\n            } else {\n                $value->url .= '?ignoreXsendfilePreVideoPlay=1';\n            }\n            $count++;\n            $log->add(\"Clone: Copying Videos {$count} of {$total} {$value->url}\");\n            file_put_contents(\"{$videosDir}{$value->filename}\", fopen(\"$value->url\", 'r'));\n        }\n        $log->add(\"Clone: Copying video files done.\");\n    } else {\n        $log->add(\"Clone (4 of {$totalSteps}): There is no new video file to copy.\");\n    }\n\n    $total2 = count($newPhotoFiles);\n    $count2 = 0;\n\n    if (!empty($total2)) {\n        $log->add(\"Clone (5 of {$totalSteps}): Now we will copy {$total2} new user photo files.\");\n        // copy Photos\n        foreach ($newPhotoFiles as $value) {\n            $count2++;\n            $log->add(\"Clone: Copying Photos {$count2} of {$total2} {$value->url}\");\n            file_put_contents(\"{$photosDir}{$value->filename}\", fopen(\"$value->url\", 'r'));\n        }\n        $log->add(\"Clone: Copying user photo files done.\");\n    } else {\n        $log->add(\"Clone (5 of {$totalSteps}): There is no new user photo file to copy.\");\n    }\n} else {\n    // decrypt the password now\n    $objClone = Plugin::decryptIfNeed($objClone);\n    $port = intval($objClone->cloneSiteSSHPort);\n    if (empty($port)) {\n        $port = 22;\n    }\n    $rsync = \"sshpass -p '{password}' rsync -av -e 'ssh  -p {$port} -o StrictHostKeyChecking=no' --exclude '*.php' --exclude 'cache' --exclude '*.sql' --exclude '*.log' {$objClone->cloneSiteSSHUser}@{$objClone->cloneSiteSSHIP}:{$json->videosDir} \" . Video::getStoragePath() . \" --log-file='{$log->file}' \";\n    $cmd = str_replace(\"{password}\", $objClone->cloneSiteSSHPassword->value, $rsync);\n    $log->add(\"Clone (4 of {$totalSteps}): execute rsync ({$rsync})\");\n\n    exec($cmd . \" 2>&1\", $output, $return_val);\n    if ($return_val !== 0) {\n        //$log->add(\"Clone Error: \" . print_r($output, true));\n    }\n    $log->add(\"Clone (5 of {$totalSteps}): rsync finished\");\n}\n\n// notify to delete dump\n$url = $url . \"&deleteDump={$json->sqlFile}\";\n// check if it respond\n$log->add(\"Clone (6 of {$totalSteps}): Notify Server to Delete Dump\");\n$content2 = url_get_contents($url);\n//var_dump($url, $content);exit;\n$json2 = _json_decode($content);\nif (!empty($json2->error)) {\n    $log->add(\"Clone: Dump NOT deleted\");\n} else {\n    $log->add(\"Clone: Dump DELETED\");\n}\n\n\n$log->add(\"Clone (7 of {$totalSteps}): Resotre the Clone Configuration\");\n// restore clone plugin configuration\n$plugin = new CloneSite();\n$p = new Plugin(0);\n$p->loadFromUUID($plugin->getUUID());\n$p->setObject_data(addcslashes(json_encode($objCloneOriginal), '\\\\'));\n$p->setStatus('active');\n$p->save();\n\necho json_encode($json);\n$log->add(\"Clone: Complete, Database, {$total} Videos and {$total2} Photos\");\n\n$cmd = \"chmod -R 777 {$videosDir}\";\nexec($cmd);    \n    \n$time_end = microtime(true);\n//dividing with 60 will give the execution time in minutes otherwise seconds\n$execution_time = ($time_end - $time_start);\n$timeStr = \"Seconds\";\nif ($execution_time > 60) {\n    $execution_time = $execution_time / 60;\n    $timeStr = \"Minutes\";\n}\n//execution time of the script\n$log->add('Total Execution Time: ' . $execution_time . ' ' . $timeStr);\n"], "filenames": ["plugin/CloneSite/cloneClient.json.php"], "buggy_code_start_loc": [96], "buggy_code_end_loc": [96], "fixing_code_start_loc": [97], "fixing_code_end_loc": [98], "type": "CWE-77", "message": "WWBN AVideo is an open source video platform. In versions 12.4 and prior, a command injection vulnerability exists at `plugin/CloneSite/cloneClient.json.php` which allows Remote Code Execution if you CloneSite Plugin. This is a bypass to the fix for CVE-2023-30854, which affects WWBN AVideo up to version 12.3. This issue is patched in commit 1df4af01f80d56ff2c4c43b89d0bac151e7fb6e3.", "other": {"cve": {"id": "CVE-2023-32073", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-12T14:15:10.083", "lastModified": "2023-05-24T15:01:41.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "WWBN AVideo is an open source video platform. In versions 12.4 and prior, a command injection vulnerability exists at `plugin/CloneSite/cloneClient.json.php` which allows Remote Code Execution if you CloneSite Plugin. This is a bypass to the fix for CVE-2023-30854, which affects WWBN AVideo up to version 12.3. This issue is patched in commit 1df4af01f80d56ff2c4c43b89d0bac151e7fb6e3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wwbn:avideo:*:*:*:*:*:*:*:*", "versionEndIncluding": "12.4", "matchCriteriaId": "5A2FC9AA-1CFE-47EB-9919-63194CD95E36"}]}]}], "references": [{"url": "https://github.com/WWBN/AVideo/commit/1df4af01f80d56ff2c4c43b89d0bac151e7fb6e3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/WWBN/AVideo/security/advisories/GHSA-2mhh-27v7-3vcx", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/WWBN/AVideo/commit/1df4af01f80d56ff2c4c43b89d0bac151e7fb6e3"}}