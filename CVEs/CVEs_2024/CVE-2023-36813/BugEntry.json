{"buggy_code": ["<?php\n\nnamespace PicoDb;\n\nuse Closure;\nuse PDOException;\nuse LogicException;\nuse PicoDb\\Driver\\Mssql;\nuse PicoDb\\Driver\\Sqlite;\nuse PicoDb\\Driver\\Mysql;\nuse PicoDb\\Driver\\Postgres;\n\n/**\n * Database\n *\n * @package PicoDb\n * @author  Frederic Guillot\n */\nclass Database\n{\n    /**\n     * Database instances\n     *\n     * @static\n     * @access private\n     * @var array\n     */\n    private static $instances = array();\n\n    /**\n     * Statement object\n     *\n     * @access protected\n     * @var StatementHandler\n     */\n    protected $statementHandler;\n\n    /**\n     * Queries logs\n     *\n     * @access private\n     * @var array\n     */\n    private $logs = array();\n\n    /**\n     * Driver instance\n     *\n     * @access private\n     */\n    private $driver;\n\n    /**\n     * Initialize the driver\n     *\n     * @access public\n     * @param  array   $settings\n     */\n    public function __construct(array $settings = array())\n    {\n        $this->driver = DriverFactory::getDriver($settings);\n        $this->statementHandler = new StatementHandler($this);\n    }\n\n    /**\n     * Destructor\n     *\n     * @access public\n     */\n    public function __destruct()\n    {\n        $this->closeConnection();\n    }\n\n    /**\n     * Register a new database instance\n     *\n     * @static\n     * @access public\n     * @param  string    $name        Instance name\n     * @param  Closure   $callback    Callback\n     */\n    public static function setInstance($name, Closure $callback)\n    {\n        self::$instances[$name] = $callback;\n    }\n\n    /**\n     * Get a database instance\n     *\n     * @static\n     * @access public\n     * @param  string    $name   Instance name\n     * @return Database\n     */\n    public static function getInstance($name)\n    {\n        if (! isset(self::$instances[$name])) {\n            throw new LogicException('No database instance created with that name');\n        }\n\n        if (is_callable(self::$instances[$name])) {\n            self::$instances[$name] = call_user_func(self::$instances[$name]);\n        }\n\n        return self::$instances[$name];\n    }\n\n    /**\n     * Add a log message\n     *\n     * @access public\n     * @param  mixed $message\n     * @return Database\n     */\n    public function setLogMessage($message)\n    {\n        $this->logs[] = is_array($message) ? var_export($message, true) : $message;\n        return $this;\n    }\n\n    /**\n     * Add many log messages\n     *\n     * @access public\n     * @param  array $messages\n     * @return Database\n     */\n    public function setLogMessages(array $messages)\n    {\n        foreach ($messages as $message) {\n            $this->setLogMessage($message);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Get all queries logs\n     *\n     * @access public\n     * @return array\n     */\n    public function getLogMessages()\n    {\n        return $this->logs;\n    }\n\n    /**\n     * Get the PDO connection\n     *\n     * @access public\n     * @return \\PDO\n     */\n    public function getConnection()\n    {\n        return $this->driver->getConnection();\n    }\n\n    /**\n     * Get the Driver instance\n     *\n     * @access public\n     * @return Mssql|Sqlite|Postgres|Mysql\n     */\n    public function getDriver()\n    {\n        return $this->driver;\n    }\n\n    /**\n     * Get the last inserted id\n     *\n     * @access public\n     * @return integer\n     */\n    public function getLastId()\n    {\n        return (int) $this->driver->getLastId();\n    }\n\n    /**\n     * Get statement object\n     *\n     * @access public\n     * @return StatementHandler\n     */\n    public function getStatementHandler()\n    {\n        return $this->statementHandler;\n    }\n\n    /**\n     * Release the PDO connection\n     *\n     * @access public\n     */\n    public function closeConnection()\n    {\n        $this->driver->closeConnection();\n    }\n\n    /**\n     * Escape an identifier (column, table name...)\n     *\n     * @access public\n     * @param  string    $value    Value\n     * @param  string    $table    Table name\n     * @return string\n     */\n    public function escapeIdentifier($value, $table = '')\n    {\n        // Do not escape custom query\n        if (strpos($value, '.') !== false || strpos($value, ' ') !== false) {\n            return $value;\n        }\n\n        if (! empty($table)) {\n            return $this->driver->escape($table).'.'.$this->driver->escape($value);\n        }\n\n        return $this->driver->escape($value);\n    }\n\n    /**\n     * Escape an identifier list\n     *\n     * @access public\n     * @param  array     $identifiers  List of identifiers\n     * @param  string    $table        Table name\n     * @return string[]\n     */\n    public function escapeIdentifierList(array $identifiers, $table = '')\n    {\n        foreach ($identifiers as $key => $value) {\n            $identifiers[$key] = $this->escapeIdentifier($value, $table);\n        }\n\n        return $identifiers;\n    }\n\n    /**\n     * Execute a prepared statement\n     *\n     * Note: returns false on duplicate keys instead of SQLException\n     *\n     * @access public\n     * @param  string    $sql      SQL query\n     * @param  array     $values   Values\n     * @return \\PDOStatement|false\n     */\n    public function execute($sql, array $values = array())\n    {\n        return $this->statementHandler\n            ->withSql($sql)\n            ->withPositionalParams($values)\n            ->execute();\n    }\n\n    /**\n     * Run a transaction\n     *\n     * @access public\n     * @param  Closure    $callback     Callback\n     * @return mixed\n     */\n    public function transaction(Closure $callback)\n    {\n        try {\n\n            $this->startTransaction();\n            $result = $callback($this);\n            $this->closeTransaction();\n\n            return $result === null ? true : $result;\n        } catch (PDOException $e) {\n            return $this->statementHandler->handleSqlError($e);\n        }\n    }\n\n    /**\n     * Begin a transaction\n     *\n     * @access public\n     */\n    public function startTransaction()\n    {\n        if (! $this->getConnection()->inTransaction()) {\n            $this->getConnection()->beginTransaction();\n        }\n    }\n\n    /**\n     * Commit a transaction\n     *\n     * @access public\n     */\n    public function closeTransaction()\n    {\n        if ($this->getConnection()->inTransaction()) {\n            $this->getConnection()->commit();\n        }\n    }\n\n    /**\n     * Rollback a transaction\n     *\n     * @access public\n     */\n    public function cancelTransaction()\n    {\n        if ($this->getConnection()->inTransaction()) {\n            $this->getConnection()->rollBack();\n        }\n    }\n\n    /**\n     * Get a table object\n     *\n     * @access public\n     * @param  string $table\n     * @return Table\n     */\n    public function table($table)\n    {\n        return new Table($this, $table);\n    }\n\n    /**\n     * Get a hashtable object\n     *\n     * @access public\n     * @param  string $table\n     * @return Hashtable\n     */\n    public function hashtable($table)\n    {\n        return new Hashtable($this, $table);\n    }\n\n    /**\n     * Get a LOB object\n     *\n     * @access public\n     * @param  string $table\n     * @return LargeObject\n     */\n    public function largeObject($table)\n    {\n        return new LargeObject($this, $table);\n    }\n\n    /**\n     * Get a schema object\n     *\n     * @access public\n     * @param  string $namespace\n     * @return Schema\n     */\n    public function schema($namespace = null)\n    {\n        $schema = new Schema($this);\n\n        if ($namespace !== null) {\n            $schema->setNamespace($namespace);\n        }\n\n        return $schema;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace PicoDb;\n\nuse Closure;\nuse PDOException;\nuse LogicException;\nuse PicoDb\\SQLException;\nuse PicoDb\\Driver\\Mssql;\nuse PicoDb\\Driver\\Sqlite;\nuse PicoDb\\Driver\\Mysql;\nuse PicoDb\\Driver\\Postgres;\n\n/**\n * Database\n *\n * @package PicoDb\n * @author  Frederic Guillot\n */\nclass Database\n{\n    /**\n     * Database instances\n     *\n     * @static\n     * @access private\n     * @var array\n     */\n    private static $instances = array();\n\n    /**\n     * Statement object\n     *\n     * @access protected\n     * @var StatementHandler\n     */\n    protected $statementHandler;\n\n    /**\n     * Queries logs\n     *\n     * @access private\n     * @var array\n     */\n    private $logs = array();\n\n    /**\n     * Driver instance\n     *\n     * @access private\n     */\n    private $driver;\n\n    /**\n     * Initialize the driver\n     *\n     * @access public\n     * @param  array   $settings\n     */\n    public function __construct(array $settings = array())\n    {\n        $this->driver = DriverFactory::getDriver($settings);\n        $this->statementHandler = new StatementHandler($this);\n    }\n\n    /**\n     * Destructor\n     *\n     * @access public\n     */\n    public function __destruct()\n    {\n        $this->closeConnection();\n    }\n\n    /**\n     * Register a new database instance\n     *\n     * @static\n     * @access public\n     * @param  string    $name        Instance name\n     * @param  Closure   $callback    Callback\n     */\n    public static function setInstance($name, Closure $callback)\n    {\n        self::$instances[$name] = $callback;\n    }\n\n    /**\n     * Get a database instance\n     *\n     * @static\n     * @access public\n     * @param  string    $name   Instance name\n     * @return Database\n     */\n    public static function getInstance($name)\n    {\n        if (! isset(self::$instances[$name])) {\n            throw new LogicException('No database instance created with that name');\n        }\n\n        if (is_callable(self::$instances[$name])) {\n            self::$instances[$name] = call_user_func(self::$instances[$name]);\n        }\n\n        return self::$instances[$name];\n    }\n\n    /**\n     * Add a log message\n     *\n     * @access public\n     * @param  mixed $message\n     * @return Database\n     */\n    public function setLogMessage($message)\n    {\n        $this->logs[] = is_array($message) ? var_export($message, true) : $message;\n        return $this;\n    }\n\n    /**\n     * Add many log messages\n     *\n     * @access public\n     * @param  array $messages\n     * @return Database\n     */\n    public function setLogMessages(array $messages)\n    {\n        foreach ($messages as $message) {\n            $this->setLogMessage($message);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Get all queries logs\n     *\n     * @access public\n     * @return array\n     */\n    public function getLogMessages()\n    {\n        return $this->logs;\n    }\n\n    /**\n     * Get the PDO connection\n     *\n     * @access public\n     * @return \\PDO\n     */\n    public function getConnection()\n    {\n        return $this->driver->getConnection();\n    }\n\n    /**\n     * Get the Driver instance\n     *\n     * @access public\n     * @return Mssql|Sqlite|Postgres|Mysql\n     */\n    public function getDriver()\n    {\n        return $this->driver;\n    }\n\n    /**\n     * Get the last inserted id\n     *\n     * @access public\n     * @return integer\n     */\n    public function getLastId()\n    {\n        return (int) $this->driver->getLastId();\n    }\n\n    /**\n     * Get statement object\n     *\n     * @access public\n     * @return StatementHandler\n     */\n    public function getStatementHandler()\n    {\n        return $this->statementHandler;\n    }\n\n    /**\n     * Release the PDO connection\n     *\n     * @access public\n     */\n    public function closeConnection()\n    {\n        $this->driver->closeConnection();\n    }\n\n    /**\n     * Escape an identifier (column, table name...)\n     *\n     * @access public\n     * @param  string    $value    Value\n     * @param  string    $table    Table name\n     * @return string\n     */\n    public function escapeIdentifier($value, $table = '')\n    {\n        // Do not escape custom query\n        if (strpos($value, '.') !== false || strpos($value, ' ') !== false) {\n            return $value;\n        }\n\n        // Avoid potential SQL injection\n        if (preg_match('/^[a-z0-9_]+$/', $value) === 0) {\n            throw new SQLException('Invalid identifier: '.$value);\n        }\n\n        if (! empty($table)) {\n            return $this->driver->escape($table).'.'.$this->driver->escape($value);\n        }\n\n        return $this->driver->escape($value);\n    }\n\n    /**\n     * Escape an identifier list\n     *\n     * @access public\n     * @param  array     $identifiers  List of identifiers\n     * @param  string    $table        Table name\n     * @return string[]\n     */\n    public function escapeIdentifierList(array $identifiers, $table = '')\n    {\n        foreach ($identifiers as $key => $value) {\n            $identifiers[$key] = $this->escapeIdentifier($value, $table);\n        }\n\n        return $identifiers;\n    }\n\n    /**\n     * Execute a prepared statement\n     *\n     * Note: returns false on duplicate keys instead of SQLException\n     *\n     * @access public\n     * @param  string    $sql      SQL query\n     * @param  array     $values   Values\n     * @return \\PDOStatement|false\n     */\n    public function execute($sql, array $values = array())\n    {\n        return $this->statementHandler\n            ->withSql($sql)\n            ->withPositionalParams($values)\n            ->execute();\n    }\n\n    /**\n     * Run a transaction\n     *\n     * @access public\n     * @param  Closure    $callback     Callback\n     * @return mixed\n     */\n    public function transaction(Closure $callback)\n    {\n        try {\n\n            $this->startTransaction();\n            $result = $callback($this);\n            $this->closeTransaction();\n\n            return $result === null ? true : $result;\n        } catch (PDOException $e) {\n            return $this->statementHandler->handleSqlError($e);\n        }\n    }\n\n    /**\n     * Begin a transaction\n     *\n     * @access public\n     */\n    public function startTransaction()\n    {\n        if (! $this->getConnection()->inTransaction()) {\n            $this->getConnection()->beginTransaction();\n        }\n    }\n\n    /**\n     * Commit a transaction\n     *\n     * @access public\n     */\n    public function closeTransaction()\n    {\n        if ($this->getConnection()->inTransaction()) {\n            $this->getConnection()->commit();\n        }\n    }\n\n    /**\n     * Rollback a transaction\n     *\n     * @access public\n     */\n    public function cancelTransaction()\n    {\n        if ($this->getConnection()->inTransaction()) {\n            $this->getConnection()->rollBack();\n        }\n    }\n\n    /**\n     * Get a table object\n     *\n     * @access public\n     * @param  string $table\n     * @return Table\n     */\n    public function table($table)\n    {\n        return new Table($this, $table);\n    }\n\n    /**\n     * Get a hashtable object\n     *\n     * @access public\n     * @param  string $table\n     * @return Hashtable\n     */\n    public function hashtable($table)\n    {\n        return new Hashtable($this, $table);\n    }\n\n    /**\n     * Get a LOB object\n     *\n     * @access public\n     * @param  string $table\n     * @return LargeObject\n     */\n    public function largeObject($table)\n    {\n        return new LargeObject($this, $table);\n    }\n\n    /**\n     * Get a schema object\n     *\n     * @access public\n     * @param  string $namespace\n     * @return Schema\n     */\n    public function schema($namespace = null)\n    {\n        $schema = new Schema($this);\n\n        if ($namespace !== null) {\n            $schema->setNamespace($namespace);\n        }\n\n        return $schema;\n    }\n}\n"], "filenames": ["libs/picodb/lib/PicoDb/Database.php"], "buggy_code_start_loc": [7], "buggy_code_end_loc": [217], "fixing_code_start_loc": [8], "fixing_code_end_loc": [224], "type": "CWE-89", "message": "Kanboard is project management software that focuses on the Kanban methodology. In versions prior to 1.2.31authenticated user is able to perform a SQL Injection, leading to a privilege escalation or loss of confidentiality. It appears that in some insert and update operations, the code improperly uses the PicoDB library to update/insert new information. Version 1.2.31 contains a fix for this issue.\n", "other": {"cve": {"id": "CVE-2023-36813", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-05T22:15:09.770", "lastModified": "2023-07-17T04:15:12.820", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Kanboard is project management software that focuses on the Kanban methodology. In versions prior to 1.2.31authenticated user is able to perform a SQL Injection, leading to a privilege escalation or loss of confidentiality. It appears that in some insert and update operations, the code improperly uses the PicoDB library to update/insert new information. Version 1.2.31 contains a fix for this issue.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.31", "matchCriteriaId": "1115246F-CC29-4940-B7B3-3F035EECE9AE"}]}]}], "references": [{"url": "https://github.com/kanboard/kanboard/commit/25b93343baeaf8ad018dcd87b094e47a5c6a3e0a", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/kanboard/kanboard/releases/tag/v1.2.31", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/kanboard/kanboard/security/advisories/GHSA-9gvq-78jp-jxcx", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2023/dsa-5454", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/25b93343baeaf8ad018dcd87b094e47a5c6a3e0a"}}