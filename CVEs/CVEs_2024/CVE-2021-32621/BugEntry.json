{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.macro.dashboard;\n\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.velocity.VelocityContext;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.context.Execution;\nimport org.xwiki.job.event.status.JobProgressManager;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.rendering.block.Block;\nimport org.xwiki.rendering.block.GroupBlock;\nimport org.xwiki.rendering.block.LinkBlock;\nimport org.xwiki.rendering.block.WordBlock;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.executor.ContentExecutor;\nimport org.xwiki.rendering.executor.ContentExecutorException;\nimport org.xwiki.rendering.listener.reference.ResourceReference;\nimport org.xwiki.rendering.listener.reference.ResourceType;\nimport org.xwiki.rendering.macro.dashboard.Gadget;\nimport org.xwiki.rendering.macro.dashboard.GadgetSource;\nimport org.xwiki.rendering.parser.MissingParserException;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.rendering.transformation.MacroTransformationContext;\nimport org.xwiki.rendering.util.ParserUtils;\nimport org.xwiki.security.authorization.AuthorExecutor;\nimport org.xwiki.velocity.VelocityEngine;\nimport org.xwiki.velocity.VelocityManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\n\n/**\n * Default gadget reader, reads the gadgets from XWiki Objects attached to the current document.\n * \n * @version $Id$\n * @since 3.0M3\n */\n@Component\n@Singleton\npublic class DefaultGadgetSource implements GadgetSource\n{\n    /**\n     * The reference to the gadgets class, relative to the current wiki. <br>\n     * TODO: to make sure that this class exists before trying to read objects of this type.\n     */\n    protected static final EntityReference GADGET_CLASS =\n        new EntityReference(\"GadgetClass\", EntityType.DOCUMENT, new EntityReference(\"XWiki\", EntityType.SPACE));\n\n    /**\n     * The execution context, to grab XWiki context and access to documents.\n     */\n    @Inject\n    protected Execution execution;\n\n    /**\n     * The current string reference resolver, to resolve the current document reference in the metadata of the block of\n     * the current macro.\n     */\n    @Inject\n    @Named(\"current\")\n    protected DocumentReferenceResolver<String> currentReferenceResolver;\n\n    /**\n     * The current entity reference resolver, to resolve the gadgets class reference.\n     */\n    @Inject\n    @Named(\"current\")\n    protected DocumentReferenceResolver<EntityReference> currentReferenceEntityResolver;\n\n    @Inject\n    @Named(\"local\")\n    private EntityReferenceSerializer<String> localReferenceSerializer;\n\n    @Inject\n    private AuthorExecutor authorExecutor;\n\n    /**\n     * Used to get the Velocity Engine and Velocity Context to use to evaluate the titles of the gadgets.\n     */\n    @Inject\n    private VelocityManager velocityManager;\n\n    @Inject\n    private ContentExecutor<MacroTransformationContext> contentExecutor;\n\n    @Inject\n    private JobProgressManager progress;\n\n    /**\n     * Prepare the parser to parse the title and content of the gadget into blocks.\n     */\n    private ParserUtils parserUtils = new ParserUtils();\n\n    @Override\n    public List<Gadget> getGadgets(String source, MacroTransformationContext context) throws Exception\n    {\n        // use the passed source as a document reference\n        DocumentReference sourceDocRef = getSourceDocumentReference(source);\n        if (sourceDocRef == null) {\n            return new ArrayList<>();\n        }\n\n        // get the current document, read the objects and turn that into gadgets\n        XWikiContext xContext = getXWikiContext();\n        XWiki xWiki = xContext.getWiki();\n        XWikiDocument sourceDoc = xWiki.getDocument(sourceDocRef, xContext);\n        DocumentReference gadgetsClass = currentReferenceEntityResolver.resolve(GADGET_CLASS);\n        List<BaseObject> gadgetObjects = sourceDoc.getXObjects(gadgetsClass);\n\n        if (gadgetObjects == null || gadgetObjects.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        this.progress.startStep(this, \"dashboard.progress.prepareGadgets\", \"Prepare gadgets for document [{}] ({})\",\n            sourceDocRef, gadgetObjects.size());\n\n        this.progress.pushLevelProgress(gadgetObjects.size(), this);\n\n        try {\n            return prepareGadgets(gadgetObjects, sourceDoc.getSyntax(), context);\n        } finally {\n            this.progress.popLevelProgress(this);\n            this.progress.endStep(this);\n        }\n    }\n\n    /**\n     * Prepares a list of gadgets from a list of XWiki objects.\n     * \n     * @param objects the objects to read the gadgets from\n     * @param sourceSyntax the syntax of the source of the gadget objects\n     * @param context the macro transformation context, where the dashboard macro is being executed\n     * @return the list of gadgets, as read from the xwiki objects\n     * @throws Exception in case something happens while rendering the content in the objects\n     */\n    private List<Gadget> prepareGadgets(List<BaseObject> objects, Syntax sourceSyntax,\n        MacroTransformationContext context) throws Exception\n    {\n        List<Gadget> gadgets = new ArrayList<>();\n\n        // prepare velocity tools to render title\n        VelocityContext velocityContext = velocityManager.getVelocityContext();\n        // Use the Transformation id as the name passed to the Velocity Engine. This name is used internally\n        // by Velocity as a cache index key for caching macros.\n        String key = context.getTransformationContext().getId();\n        if (key == null) {\n            key = \"unknown namespace\";\n        }\n        VelocityEngine velocityEngine = velocityManager.getVelocityEngine();\n\n        for (BaseObject xObject : objects) {\n            if (xObject != null) {\n                this.progress.startStep(this, \"dashboard.progress.prepareGadget\", \"Prepare gadget [{}:{}]\",\n                    xObject.getDocumentReference(), xObject.getNumber());\n\n                // get the data about the gadget from the object\n                // TODO: filter for dashboard name when that field will be in\n                String title = xObject.getStringValue(\"title\");\n                String content = xObject.getLargeStringValue(\"content\");\n                String position = xObject.getStringValue(\"position\");\n                String id = xObject.getNumber() + \"\";\n\n                // render title with velocity\n                StringWriter writer = new StringWriter();\n                // FIXME: the engine has an issue with $ and # as last character. To test and fix if it happens\n                velocityEngine.evaluate(velocityContext, writer, key, title);\n                String gadgetTitle = writer.toString();\n\n                // parse both the title and content in the syntax of the transformation context\n                List<Block> titleBlocks =\n                    renderGadgetProperty(gadgetTitle, sourceSyntax, xObject.getDocumentReference(),\n                        xObject.getOwnerDocument(), context);\n                List<Block> contentBlocks =\n                    renderGadgetProperty(content, sourceSyntax, xObject.getDocumentReference(),\n                        xObject.getOwnerDocument(), context);\n\n                // create a gadget will all these and add the gadget to the container of gadgets\n                Gadget gadget = new Gadget(id, titleBlocks, contentBlocks, position);\n                gadget.setTitleSource(title);\n                gadgets.add(gadget);\n            } else {\n                this.progress.startStep(this, \"dashboard.progress.skipNullGadget\", \"Null gadget object\");\n            }\n\n            this.progress.endStep(this);\n        }\n\n        return gadgets;\n    }\n\n    private List<Block> renderGadgetProperty(String content, Syntax sourceSyntax, EntityReference sourceReference,\n        XWikiDocument ownerDocument, MacroTransformationContext context)\n        throws Exception\n    {\n        // Ensure that the gadgets are executed with the proper rights.\n        return authorExecutor.call(() -> {\n            XDOM xdom = this.contentExecutor.execute(content, sourceSyntax, sourceReference, context);\n            List<Block> xdomBlocks = xdom.getChildren();\n            this.parserUtils.removeTopLevelParagraph(xdomBlocks);\n            return xdomBlocks;\n        }, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference());\n    }\n\n    /**\n     * Resolves the source of the dashboard, based on the source parameter passed to this reader, handling the default\n     * behaviour when the source is missing.\n     * \n     * @param source the serialized reference of the document to read gadgets from\n     * @return the document reference to the current document (the document containing the macro, if it's an include)\n     */\n    private DocumentReference getSourceDocumentReference(String source)\n    {\n        // if the source is empty or null, use current document\n        if (StringUtils.isEmpty(source)) {\n            return getXWikiContext().getDoc().getDocumentReference();\n        }\n\n        // resolve the source as document reference, relative to current context\n        return currentReferenceResolver.resolve(source);\n    }\n\n    /**\n     * Gets the xwiki context from the execution context.\n     * \n     * @return the xwiki context\n     */\n    private XWikiContext getXWikiContext()\n    {\n        return (XWikiContext) execution.getContext().getProperty(\"xwikicontext\");\n    }\n\n    @Override\n    public List<Block> getDashboardSourceMetadata(String source, MacroTransformationContext context)\n    {\n        DocumentReference sourceDoc = getSourceDocumentReference(source);\n        String classParameterName = \"class\";\n        GroupBlock metadataContainer = new GroupBlock();\n        metadataContainer.setParameter(classParameterName, DashboardMacro.METADATA);\n\n        // generate anchors for the urls\n        XWikiContext xContext = getXWikiContext();\n        String editURL = xContext.getWiki().getURL(sourceDoc, \"save\", \"\", \"\", xContext);\n        LinkBlock editURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(editURL, ResourceType.URL), false);\n        editURLBlock.setParameter(classParameterName, DashboardMacro.EDIT_URL);\n        metadataContainer.addChild(editURLBlock);\n        String removeURL = xContext.getWiki().getURL(sourceDoc, \"objectremove\", \"\", \"\", xContext);\n        LinkBlock removeURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(removeURL, ResourceType.URL), false);\n        removeURLBlock.setParameter(classParameterName, DashboardMacro.REMOVE_URL);\n        metadataContainer.addChild(removeURLBlock);\n        String addURL = xContext.getWiki().getURL(sourceDoc, \"objectadd\", \"\", \"\", xContext);\n        LinkBlock addURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(addURL, ResourceType.URL), false);\n        addURLBlock.setParameter(classParameterName, DashboardMacro.ADD_URL);\n        metadataContainer.addChild(addURLBlock);\n\n        // and create divs for the source metadata\n        GroupBlock sourcePageBlock = new GroupBlock();\n        sourcePageBlock.addChild(new WordBlock(sourceDoc.getName()));\n        sourcePageBlock.setParameter(classParameterName, DashboardMacro.SOURCE_PAGE);\n        metadataContainer.addChild(sourcePageBlock);\n        GroupBlock sourceSpaceBlock = new GroupBlock();\n        // Extract the full Space Reference (in order to support Nested Spaces) and set it in the XDOM\n        sourceSpaceBlock.addChild(new WordBlock(\n            this.localReferenceSerializer.serialize(sourceDoc.getLastSpaceReference())));\n        sourceSpaceBlock.setParameter(classParameterName, DashboardMacro.SOURCE_SPACE);\n        metadataContainer.addChild(sourceSpaceBlock);\n        GroupBlock sourceWikiBlock = new GroupBlock();\n        sourceWikiBlock.addChild(new WordBlock(sourceDoc.getWikiReference().getName()));\n        sourceWikiBlock.setParameter(classParameterName, DashboardMacro.SOURCE_WIKI);\n        metadataContainer.addChild(sourceWikiBlock);\n        String sourceURL = xContext.getWiki().getURL(sourceDoc, \"view\", \"\", \"\", xContext);\n        LinkBlock sourceURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(sourceURL, ResourceType.URL), false);\n        sourceURLBlock.setParameter(classParameterName, DashboardMacro.SOURCE_URL);\n        metadataContainer.addChild(sourceURLBlock);\n\n        return Collections.<Block> singletonList(metadataContainer);\n    }\n\n    @Override\n    public boolean isEditing()\n    {\n        // get the XWiki context and look at the action. if it's \"inline\" or \"edit\", it's edit mode\n        XWikiContext context = getXWikiContext();\n        return \"inline\".equals(context.getAction()) || \"edit\".equals(context.getAction());\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.macro.dashboard;\n\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.Callable;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.stubbing.Answer;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.rendering.block.WordBlock;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.executor.ContentExecutor;\nimport org.xwiki.rendering.macro.dashboard.Gadget;\nimport org.xwiki.rendering.transformation.MacroTransformationContext;\nimport org.xwiki.rendering.transformation.TransformationContext;\nimport org.xwiki.security.authorization.AuthorExecutor;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\nimport org.xwiki.velocity.VelocityEngine;\nimport org.xwiki.velocity.VelocityManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@ComponentTest\nclass DefaultGadgetSourceTest\n{\n    @InjectMockComponents\n    private DefaultGadgetSource defaultGadgetSource;\n\n    private static final String testSource = \"XWiki.Test\";\n\n    private static final String transformationId = \"fooId\";\n\n    @MockComponent\n    private AuthorExecutor authorExecutor;\n\n    @Mock\n    private DocumentReference documentReference;\n\n    @Mock\n    private XWikiDocument xWikiDocument;\n\n    @Mock\n    private XWikiDocument ownerDocument;\n\n    @Mock\n    private DocumentReference ownerAuthorReference;\n\n    @Mock\n    private DocumentReference ownerSourceReference;\n\n    @Mock\n    private XWiki xwiki;\n\n    @Mock\n    private XWikiContext xWikiContext;\n\n    @Mock\n    private DocumentReference gadgetClassReference;\n\n    @Mock\n    private MacroTransformationContext macroTransformationContext;\n\n    @BeforeEach\n    void setup(MockitoComponentManager componentManager) throws Exception\n    {\n        DocumentReferenceResolver<String> currentReferenceResolver =\n            componentManager.getInstance(DocumentReferenceResolver.TYPE_STRING, \"current\");\n        when(currentReferenceResolver.resolve(testSource)).thenReturn(documentReference);\n\n        Execution execution = componentManager.getInstance(Execution.class);\n        ExecutionContext executionContext = mock(ExecutionContext.class);\n        when(execution.getContext()).thenReturn(executionContext);\n        when(executionContext.getProperty(\"xwikicontext\")).thenReturn(xWikiContext);\n\n        when(xWikiContext.getWiki()).thenReturn(xwiki);\n        when(xwiki.getDocument(documentReference, xWikiContext)).thenReturn(xWikiDocument);\n\n        DocumentReferenceResolver<EntityReference> currentReferenceEntityResolver =\n            componentManager.getInstance(DocumentReferenceResolver.TYPE_REFERENCE, \"current\");\n\n        when(currentReferenceEntityResolver.resolve(DefaultGadgetSource.GADGET_CLASS)).thenReturn(gadgetClassReference);\n        TransformationContext transformationContext = mock(TransformationContext.class);\n        when(macroTransformationContext.getTransformationContext()).thenReturn(transformationContext);\n        when(transformationContext.getId()).thenReturn(transformationId);\n\n        VelocityManager velocityManager = componentManager.getInstance(VelocityManager.class);\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityManager.getVelocityEngine()).thenReturn(velocityEngine);\n        when(velocityEngine.evaluate(any(), any(), any(), any(String.class))).then((Answer<Void>) invocation -> {\n            Object[] args = invocation.getArguments();\n            StringWriter stringWriter = (StringWriter) args[1];\n            String title = (String) args[3];\n            stringWriter.append(title);\n            return null;\n        });\n\n        AuthorExecutor authorExecutor = componentManager.getInstance(AuthorExecutor.class);\n        when(authorExecutor.call(any(), eq(ownerAuthorReference), eq(ownerSourceReference))).then(invocationOnMock -> {\n            Callable callable = (Callable) invocationOnMock.getArguments()[0];\n            return callable.call();\n        });\n\n        ContentExecutor<MacroTransformationContext> contentExecutor =\n            componentManager.getInstance(ContentExecutor.TYPE_MACRO_TRANSFORMATION);\n        when(contentExecutor.execute(any(), any(), any(), any())).then((Answer<XDOM>) invocationOnMock -> {\n            String content = invocationOnMock.getArgument(0);\n            XDOM xdom = new XDOM(Collections.singletonList(new WordBlock(content)));\n            return xdom;\n        });\n        when(ownerDocument.getAuthorReference()).thenReturn(ownerAuthorReference);\n        when(ownerDocument.getDocumentReference()).thenReturn(ownerSourceReference);\n    }\n\n    @Test\n    void getGadgets() throws Exception\n    {\n        assertEquals(new ArrayList<>(), this.defaultGadgetSource.getGadgets(testSource, macroTransformationContext));\n\n        BaseObject gadgetObject1 = mock(BaseObject.class);\n        when(xWikiDocument.getXObjects(gadgetClassReference)).thenReturn(Collections.singletonList(gadgetObject1));\n        when(gadgetObject1.getOwnerDocument()).thenReturn(ownerDocument);\n        when(gadgetObject1.getStringValue(\"title\")).thenReturn(\"Gadget 1\");\n        when(gadgetObject1.getLargeStringValue(\"content\")).thenReturn(\"Some content\");\n        when(gadgetObject1.getStringValue(\"position\")).thenReturn(\"0\");\n        when(gadgetObject1.getNumber()).thenReturn(42);\n\n        List<Gadget> gadgets = this.defaultGadgetSource.getGadgets(testSource, macroTransformationContext);\n        assertEquals(1, gadgets.size());\n        Gadget gadget = gadgets.get(0);\n        assertEquals(\"Gadget 1\", gadget.getTitle().get(0).toString());\n        assertEquals(\"Some content\", gadget.getContent().get(0).toString());\n        assertEquals(\"42\", gadget.getId());\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.macro.dashboard;\n\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.velocity.VelocityContext;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.context.Execution;\nimport org.xwiki.job.event.status.JobProgressManager;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.rendering.block.Block;\nimport org.xwiki.rendering.block.GroupBlock;\nimport org.xwiki.rendering.block.LinkBlock;\nimport org.xwiki.rendering.block.WordBlock;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.executor.ContentExecutor;\nimport org.xwiki.rendering.listener.reference.ResourceReference;\nimport org.xwiki.rendering.listener.reference.ResourceType;\nimport org.xwiki.rendering.macro.dashboard.Gadget;\nimport org.xwiki.rendering.macro.dashboard.GadgetSource;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.rendering.transformation.MacroTransformationContext;\nimport org.xwiki.rendering.util.ParserUtils;\nimport org.xwiki.security.authorization.AuthorExecutor;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.velocity.VelocityEngine;\nimport org.xwiki.velocity.VelocityManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\n\n/**\n * Default gadget reader, reads the gadgets from XWiki Objects attached to the current document.\n * \n * @version $Id$\n * @since 3.0M3\n */\n@Component\n@Singleton\npublic class DefaultGadgetSource implements GadgetSource\n{\n    /**\n     * The reference to the gadgets class, relative to the current wiki. <br>\n     * TODO: to make sure that this class exists before trying to read objects of this type.\n     */\n    protected static final EntityReference GADGET_CLASS =\n        new EntityReference(\"GadgetClass\", EntityType.DOCUMENT, new EntityReference(\"XWiki\", EntityType.SPACE));\n\n    /**\n     * The execution context, to grab XWiki context and access to documents.\n     */\n    @Inject\n    protected Execution execution;\n\n    /**\n     * The current string reference resolver, to resolve the current document reference in the metadata of the block of\n     * the current macro.\n     */\n    @Inject\n    @Named(\"current\")\n    protected DocumentReferenceResolver<String> currentReferenceResolver;\n\n    /**\n     * The current entity reference resolver, to resolve the gadgets class reference.\n     */\n    @Inject\n    @Named(\"current\")\n    protected DocumentReferenceResolver<EntityReference> currentReferenceEntityResolver;\n\n    @Inject\n    @Named(\"local\")\n    private EntityReferenceSerializer<String> localReferenceSerializer;\n\n    @Inject\n    private AuthorExecutor authorExecutor;\n\n    /**\n     * Used to get the Velocity Engine and Velocity Context to use to evaluate the titles of the gadgets.\n     */\n    @Inject\n    private VelocityManager velocityManager;\n\n    @Inject\n    private ContentExecutor<MacroTransformationContext> contentExecutor;\n\n    @Inject\n    private JobProgressManager progress;\n\n    @Inject\n    private AuthorizationManager authorizationManager;\n\n    /**\n     * Prepare the parser to parse the title and content of the gadget into blocks.\n     */\n    private ParserUtils parserUtils = new ParserUtils();\n\n    @Override\n    public List<Gadget> getGadgets(String source, MacroTransformationContext context) throws Exception\n    {\n        // use the passed source as a document reference\n        DocumentReference sourceDocRef = getSourceDocumentReference(source);\n        if (sourceDocRef == null) {\n            return new ArrayList<>();\n        }\n\n        // get the current document, read the objects and turn that into gadgets\n        XWikiContext xContext = getXWikiContext();\n        XWiki xWiki = xContext.getWiki();\n        XWikiDocument sourceDoc = xWiki.getDocument(sourceDocRef, xContext);\n        DocumentReference gadgetsClass = currentReferenceEntityResolver.resolve(GADGET_CLASS);\n        List<BaseObject> gadgetObjects = sourceDoc.getXObjects(gadgetsClass);\n\n        if (gadgetObjects == null || gadgetObjects.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        this.progress.startStep(this, \"dashboard.progress.prepareGadgets\", \"Prepare gadgets for document [{}] ({})\",\n            sourceDocRef, gadgetObjects.size());\n\n        this.progress.pushLevelProgress(gadgetObjects.size(), this);\n\n        try {\n            return prepareGadgets(gadgetObjects, sourceDoc.getSyntax(), context);\n        } finally {\n            this.progress.popLevelProgress(this);\n            this.progress.endStep(this);\n        }\n    }\n\n    /**\n     * Prepares a list of gadgets from a list of XWiki objects.\n     * \n     * @param objects the objects to read the gadgets from\n     * @param sourceSyntax the syntax of the source of the gadget objects\n     * @param context the macro transformation context, where the dashboard macro is being executed\n     * @return the list of gadgets, as read from the xwiki objects\n     * @throws Exception in case something happens while rendering the content in the objects\n     */\n    private List<Gadget> prepareGadgets(List<BaseObject> objects, Syntax sourceSyntax,\n        MacroTransformationContext context) throws Exception\n    {\n        List<Gadget> gadgets = new ArrayList<>();\n\n        // prepare velocity tools to render title\n        VelocityContext velocityContext = velocityManager.getVelocityContext();\n        // Use the Transformation id as the name passed to the Velocity Engine. This name is used internally\n        // by Velocity as a cache index key for caching macros.\n        String key = context.getTransformationContext().getId();\n        if (key == null) {\n            key = \"unknown namespace\";\n        }\n        VelocityEngine velocityEngine = velocityManager.getVelocityEngine();\n\n        for (BaseObject xObject : objects) {\n            if (xObject != null) {\n                this.progress.startStep(this, \"dashboard.progress.prepareGadget\", \"Prepare gadget [{}:{}]\",\n                    xObject.getDocumentReference(), xObject.getNumber());\n\n                // get the data about the gadget from the object\n                // TODO: filter for dashboard name when that field will be in\n                String title = xObject.getStringValue(\"title\");\n                String content = xObject.getLargeStringValue(\"content\");\n                String position = xObject.getStringValue(\"position\");\n                String id = xObject.getNumber() + \"\";\n\n                String gadgetTitle;\n\n                XWikiDocument ownerDocument = xObject.getOwnerDocument();\n                if (this.authorizationManager.hasAccess(Right.SCRIPT, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference())) {\n                    gadgetTitle =\n                        this.evaluateVelocityTitle(velocityContext, velocityEngine, key, title, ownerDocument);\n                } else {\n                    gadgetTitle = title;\n                }\n\n                // parse both the title and content in the syntax of the transformation context\n                List<Block> titleBlocks =\n                    renderGadgetProperty(gadgetTitle, sourceSyntax, xObject.getDocumentReference(),\n                        ownerDocument, context);\n                List<Block> contentBlocks =\n                    renderGadgetProperty(content, sourceSyntax, xObject.getDocumentReference(),\n                        ownerDocument, context);\n\n                // create a gadget will all these and add the gadget to the container of gadgets\n                Gadget gadget = new Gadget(id, titleBlocks, contentBlocks, position);\n                gadget.setTitleSource(title);\n                gadgets.add(gadget);\n            } else {\n                this.progress.startStep(this, \"dashboard.progress.skipNullGadget\", \"Null gadget object\");\n            }\n\n            this.progress.endStep(this);\n        }\n\n        return gadgets;\n    }\n\n    private String evaluateVelocityTitle(VelocityContext velocityContext, VelocityEngine velocityEngine, String key,\n        String title, XWikiDocument ownerDocument) throws Exception\n    {\n        return this.authorExecutor.call(() -> {\n            // render title with velocity\n            StringWriter writer = new StringWriter();\n            // FIXME: the engine has an issue with $ and # as last character. To test and fix if it happens\n            velocityEngine.evaluate(velocityContext, writer, key, title);\n            return writer.toString();\n        }, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference());\n    }\n\n    private List<Block> renderGadgetProperty(String content, Syntax sourceSyntax, EntityReference sourceReference,\n        XWikiDocument ownerDocument, MacroTransformationContext context)\n        throws Exception\n    {\n        // Ensure that the gadgets are executed with the proper rights.\n        return authorExecutor.call(() -> {\n            XDOM xdom = this.contentExecutor.execute(content, sourceSyntax, sourceReference, context);\n            List<Block> xdomBlocks = xdom.getChildren();\n            this.parserUtils.removeTopLevelParagraph(xdomBlocks);\n            return xdomBlocks;\n        }, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference());\n    }\n\n    /**\n     * Resolves the source of the dashboard, based on the source parameter passed to this reader, handling the default\n     * behaviour when the source is missing.\n     * \n     * @param source the serialized reference of the document to read gadgets from\n     * @return the document reference to the current document (the document containing the macro, if it's an include)\n     */\n    private DocumentReference getSourceDocumentReference(String source)\n    {\n        // if the source is empty or null, use current document\n        if (StringUtils.isEmpty(source)) {\n            return getXWikiContext().getDoc().getDocumentReference();\n        }\n\n        // resolve the source as document reference, relative to current context\n        return currentReferenceResolver.resolve(source);\n    }\n\n    /**\n     * Gets the xwiki context from the execution context.\n     * \n     * @return the xwiki context\n     */\n    private XWikiContext getXWikiContext()\n    {\n        return (XWikiContext) execution.getContext().getProperty(\"xwikicontext\");\n    }\n\n    @Override\n    public List<Block> getDashboardSourceMetadata(String source, MacroTransformationContext context)\n    {\n        DocumentReference sourceDoc = getSourceDocumentReference(source);\n        String classParameterName = \"class\";\n        GroupBlock metadataContainer = new GroupBlock();\n        metadataContainer.setParameter(classParameterName, DashboardMacro.METADATA);\n\n        // generate anchors for the urls\n        XWikiContext xContext = getXWikiContext();\n        String editURL = xContext.getWiki().getURL(sourceDoc, \"save\", \"\", \"\", xContext);\n        LinkBlock editURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(editURL, ResourceType.URL), false);\n        editURLBlock.setParameter(classParameterName, DashboardMacro.EDIT_URL);\n        metadataContainer.addChild(editURLBlock);\n        String removeURL = xContext.getWiki().getURL(sourceDoc, \"objectremove\", \"\", \"\", xContext);\n        LinkBlock removeURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(removeURL, ResourceType.URL), false);\n        removeURLBlock.setParameter(classParameterName, DashboardMacro.REMOVE_URL);\n        metadataContainer.addChild(removeURLBlock);\n        String addURL = xContext.getWiki().getURL(sourceDoc, \"objectadd\", \"\", \"\", xContext);\n        LinkBlock addURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(addURL, ResourceType.URL), false);\n        addURLBlock.setParameter(classParameterName, DashboardMacro.ADD_URL);\n        metadataContainer.addChild(addURLBlock);\n\n        // and create divs for the source metadata\n        GroupBlock sourcePageBlock = new GroupBlock();\n        sourcePageBlock.addChild(new WordBlock(sourceDoc.getName()));\n        sourcePageBlock.setParameter(classParameterName, DashboardMacro.SOURCE_PAGE);\n        metadataContainer.addChild(sourcePageBlock);\n        GroupBlock sourceSpaceBlock = new GroupBlock();\n        // Extract the full Space Reference (in order to support Nested Spaces) and set it in the XDOM\n        sourceSpaceBlock.addChild(new WordBlock(\n            this.localReferenceSerializer.serialize(sourceDoc.getLastSpaceReference())));\n        sourceSpaceBlock.setParameter(classParameterName, DashboardMacro.SOURCE_SPACE);\n        metadataContainer.addChild(sourceSpaceBlock);\n        GroupBlock sourceWikiBlock = new GroupBlock();\n        sourceWikiBlock.addChild(new WordBlock(sourceDoc.getWikiReference().getName()));\n        sourceWikiBlock.setParameter(classParameterName, DashboardMacro.SOURCE_WIKI);\n        metadataContainer.addChild(sourceWikiBlock);\n        String sourceURL = xContext.getWiki().getURL(sourceDoc, \"view\", \"\", \"\", xContext);\n        LinkBlock sourceURLBlock =\n            new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(sourceURL, ResourceType.URL), false);\n        sourceURLBlock.setParameter(classParameterName, DashboardMacro.SOURCE_URL);\n        metadataContainer.addChild(sourceURLBlock);\n\n        return Collections.<Block> singletonList(metadataContainer);\n    }\n\n    @Override\n    public boolean isEditing()\n    {\n        // get the XWiki context and look at the action. if it's \"inline\" or \"edit\", it's edit mode\n        XWikiContext context = getXWikiContext();\n        return \"inline\".equals(context.getAction()) || \"edit\".equals(context.getAction());\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.macro.dashboard;\n\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.Callable;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.stubbing.Answer;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.rendering.block.WordBlock;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.executor.ContentExecutor;\nimport org.xwiki.rendering.macro.dashboard.Gadget;\nimport org.xwiki.rendering.transformation.MacroTransformationContext;\nimport org.xwiki.rendering.transformation.TransformationContext;\nimport org.xwiki.security.authorization.AuthorExecutor;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\nimport org.xwiki.velocity.VelocityEngine;\nimport org.xwiki.velocity.VelocityManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@ComponentTest\nclass DefaultGadgetSourceTest\n{\n    @InjectMockComponents\n    private DefaultGadgetSource defaultGadgetSource;\n\n    private static final String testSource = \"XWiki.Test\";\n\n    private static final String transformationId = \"fooId\";\n\n    @MockComponent\n    private AuthorExecutor authorExecutor;\n\n    @MockComponent\n    private AuthorizationManager authorizationManager;\n\n    @Mock\n    private DocumentReference documentReference;\n\n    @Mock\n    private XWikiDocument xWikiDocument;\n\n    @Mock\n    private XWikiDocument ownerDocument;\n\n    @Mock\n    private DocumentReference ownerAuthorReference;\n\n    @Mock\n    private DocumentReference ownerSourceReference;\n\n    @Mock\n    private XWiki xwiki;\n\n    @Mock\n    private XWikiContext xWikiContext;\n\n    @Mock\n    private DocumentReference gadgetClassReference;\n\n    @Mock\n    private MacroTransformationContext macroTransformationContext;\n\n    @Mock\n    private VelocityEngine velocityEngine;\n\n    private ContentExecutor<MacroTransformationContext> contentExecutor;\n\n    @BeforeEach\n    void setup(MockitoComponentManager componentManager) throws Exception\n    {\n        DocumentReferenceResolver<String> currentReferenceResolver =\n            componentManager.getInstance(DocumentReferenceResolver.TYPE_STRING, \"current\");\n        when(currentReferenceResolver.resolve(testSource)).thenReturn(documentReference);\n\n        Execution execution = componentManager.getInstance(Execution.class);\n        ExecutionContext executionContext = mock(ExecutionContext.class);\n        when(execution.getContext()).thenReturn(executionContext);\n        when(executionContext.getProperty(\"xwikicontext\")).thenReturn(xWikiContext);\n\n        when(xWikiContext.getWiki()).thenReturn(xwiki);\n        when(xwiki.getDocument(documentReference, xWikiContext)).thenReturn(xWikiDocument);\n\n        DocumentReferenceResolver<EntityReference> currentReferenceEntityResolver =\n            componentManager.getInstance(DocumentReferenceResolver.TYPE_REFERENCE, \"current\");\n\n        when(currentReferenceEntityResolver.resolve(DefaultGadgetSource.GADGET_CLASS)).thenReturn(gadgetClassReference);\n        TransformationContext transformationContext = mock(TransformationContext.class);\n        when(macroTransformationContext.getTransformationContext()).thenReturn(transformationContext);\n        when(transformationContext.getId()).thenReturn(transformationId);\n\n        VelocityManager velocityManager = componentManager.getInstance(VelocityManager.class);\n        when(velocityManager.getVelocityEngine()).thenReturn(velocityEngine);\n\n        when(authorExecutor.call(any(), eq(ownerAuthorReference), eq(ownerSourceReference))).then(invocationOnMock -> {\n            Callable callable = (Callable) invocationOnMock.getArguments()[0];\n            return callable.call();\n        });\n\n        this.contentExecutor =\n            componentManager.getInstance(ContentExecutor.TYPE_MACRO_TRANSFORMATION);\n        when(contentExecutor.execute(any(), any(), any(), any())).then((Answer<XDOM>) invocationOnMock -> {\n            String content = invocationOnMock.getArgument(0);\n            XDOM xdom = new XDOM(Collections.singletonList(new WordBlock(content)));\n            return xdom;\n        });\n        when(ownerDocument.getAuthorReference()).thenReturn(ownerAuthorReference);\n        when(ownerDocument.getDocumentReference()).thenReturn(ownerSourceReference);\n    }\n\n    @Test\n    void getGadgets() throws Exception\n    {\n        assertEquals(new ArrayList<>(), this.defaultGadgetSource.getGadgets(testSource, macroTransformationContext));\n\n        BaseObject gadgetObject1 = mock(BaseObject.class);\n        when(xWikiDocument.getXObjects(gadgetClassReference)).thenReturn(Collections.singletonList(gadgetObject1));\n        when(gadgetObject1.getOwnerDocument()).thenReturn(ownerDocument);\n        when(gadgetObject1.getStringValue(\"title\")).thenReturn(\"Gadget 1\");\n        when(gadgetObject1.getLargeStringValue(\"content\")).thenReturn(\"Some content\");\n        when(gadgetObject1.getStringValue(\"position\")).thenReturn(\"0\");\n        when(gadgetObject1.getNumber()).thenReturn(42);\n        when(this.authorizationManager.hasAccess(Right.SCRIPT, ownerAuthorReference, ownerSourceReference)).thenReturn(true);\n        when(this.velocityEngine.evaluate(any(), any(), any(), eq(\"Gadget 1\"))).then((Answer<Void>) invocation -> {\n            Object[] args = invocation.getArguments();\n            StringWriter stringWriter = (StringWriter) args[1];\n            String title = \"Evaluated velocity version of gadget 1\";\n            stringWriter.append(title);\n            return null;\n        });\n\n        List<Gadget> gadgets = this.defaultGadgetSource.getGadgets(testSource, macroTransformationContext);\n        assertEquals(1, gadgets.size());\n        Gadget gadget = gadgets.get(0);\n        assertEquals(\"Evaluated velocity version of gadget 1\", gadget.getTitle().get(0).toString());\n        assertEquals(\"Some content\", gadget.getContent().get(0).toString());\n        assertEquals(\"42\", gadget.getId());\n        verify(this.contentExecutor)\n            .execute(eq(\"Evaluated velocity version of gadget 1\"), any(), any(), any());\n        verify(this.contentExecutor)\n            .execute(eq(\"Some content\"), any(), any(), any());\n    }\n\n    @Test\n    void getGadgetWithoutScriptRight() throws Exception\n    {\n        assertEquals(new ArrayList<>(), this.defaultGadgetSource.getGadgets(testSource, macroTransformationContext));\n\n        BaseObject gadgetObject1 = mock(BaseObject.class);\n        when(xWikiDocument.getXObjects(gadgetClassReference)).thenReturn(Collections.singletonList(gadgetObject1));\n        when(gadgetObject1.getOwnerDocument()).thenReturn(ownerDocument);\n        when(gadgetObject1.getStringValue(\"title\")).thenReturn(\"Gadget 2\");\n        when(gadgetObject1.getLargeStringValue(\"content\")).thenReturn(\"Some other content\");\n        when(gadgetObject1.getStringValue(\"position\")).thenReturn(\"2\");\n        when(gadgetObject1.getNumber()).thenReturn(12);\n        when(this.authorizationManager.hasAccess(Right.SCRIPT, ownerAuthorReference, ownerSourceReference)).thenReturn(false);\n\n        List<Gadget> gadgets = this.defaultGadgetSource.getGadgets(testSource, macroTransformationContext);\n        assertEquals(1, gadgets.size());\n        Gadget gadget = gadgets.get(0);\n        assertEquals(\"Gadget 2\", gadget.getTitle().get(0).toString());\n        assertEquals(\"Some other content\", gadget.getContent().get(0).toString());\n        assertEquals(\"12\", gadget.getId());\n        verify(this.contentExecutor)\n            .execute(eq(\"Gadget 2\"), any(), any(), any());\n        verify(this.contentExecutor)\n            .execute(eq(\"Some other content\"), any(), any(), any());\n    }\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-dashboard/xwiki-platform-dashboard-macro/src/main/java/org/xwiki/rendering/internal/macro/dashboard/DefaultGadgetSource.java", "xwiki-platform-core/xwiki-platform-dashboard/xwiki-platform-dashboard-macro/src/test/java/org/xwiki/rendering/internal/macro/dashboard/DefaultGadgetSourceTest.java"], "buggy_code_start_loc": [47, 43], "buggy_code_end_loc": [222, 171], "fixing_code_start_loc": [46, 44], "fixing_code_end_loc": [241, 212], "type": "CWE-94", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In versions prior to 12.6.7 and 12.10.3, a user without Script or Programming right is able to execute script requiring privileges by editing gadget titles in the dashboard. The issue has been patched in XWiki 12.6.7, 12.10.3 and 13.0RC1.", "other": {"cve": {"id": "CVE-2021-32621", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-28T21:15:08.980", "lastModified": "2021-09-07T22:02:43.543", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In versions prior to 12.6.7 and 12.10.3, a user without Script or Programming right is able to execute script requiring privileges by editing gadget titles in the dashboard. The issue has been patched in XWiki 12.6.7, 12.10.3 and 13.0RC1."}, {"lang": "es", "value": "La Plataforma XWiki es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para las aplicaciones construidas sobre ella. En las versiones anteriores a la versi\u00f3n 12.6.7 y 12.10.3, un usuario sin derecho de Script o Programaci\u00f3n puede ejecutar un script que requiera privilegios al editar los t\u00edtulos de los gadgets en el tablero. El problema ha sido parcheado en XWiki versiones 12.6.7, 12.10.3 y 13.0RC1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.1", "versionEndExcluding": "12.6.7", "matchCriteriaId": "A8416E7D-CD3A-430D-ADBF-EC34D645EA5E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.10", "versionEndExcluding": "12.10.3", "matchCriteriaId": "432B9E17-5DC4-4A14-9F1A-084D6CE108D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:3.0:-:*:*:*:*:*:*", "matchCriteriaId": "B80CC851-2324-437A-B4A5-06A5EB2FE180"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:3.0:milestone_3:*:*:*:*:*:*", "matchCriteriaId": "82944B21-44EB-4133-BF47-0A51876E8F3B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:3.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "6400CA62-5250-4BA5-A94B-7D529CDBE38E"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/bb7068bd911f91e5511f3cfb03276c7ac81100bc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-h353-hc43-95vc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://jay-from-future.github.io/cve/2021/06/17/xwiki-rce-cve.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-17794", "source": "security-advisories@github.com", "tags": ["Permissions Required", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/bb7068bd911f91e5511f3cfb03276c7ac81100bc"}}